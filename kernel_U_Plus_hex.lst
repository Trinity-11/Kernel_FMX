
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=3 --long-address --flat --intel-hex -o kernel_U_Plus.hex --list kernel_U_Plus_hex.lst --labels=kernel_U_Plus_hex.lbl src\kernel.asm
; Fri Apr 30 13:15:55 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=3						TARGET_SYS=3

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$380000					  START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					  START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					  START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					  START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3e0000					  START_OF_SPLASH := $3E0000                  ; SplashScreen Code and Data $3E0000
=$3f0000					  START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 d5 18 38	jsl $3818d5	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 14 17 38	jsl $381714	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c dd 06 39	jmp $3906dd	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$3a0000					    BASIC = $3A0000
=3801092					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c e8 05 39	jmp $3905e8	RESTORE         JML IRESTORE
.381008	1008	5c 7c 06 39	jmp $39067c	BREAK           JML IBREAK
.38100c	100c	5c c3 06 39	jmp $3906c3	READY           JML IREADY
.381010	1010	5c f2 14 39	jmp $3914f2	SCINIT          JML ISCINIT
.381014	1014	5c f3 14 39	jmp $3914f3	IOINIT          JML IIOINIT
.381018	1018	5c 7f 07 39	jmp $39077f	PUTC            JML IPUTC
.38101c	101c	5c 68 07 39	jmp $390768	PUTS            JML IPUTS
.381020	1020	5c 02 09 39	jmp $390902	PUTB            JML IPUTB
.381024	1024	5c d7 3f 39	jmp $393fd7	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c f4 14 39	jmp $3914f4	SETLFS          JML ISETLFS
.38102c	102c	5c f5 14 39	jmp $3914f5	SETNAM          JML ISETNAM
.381030	1030	5c f6 14 39	jmp $3914f6	OPEN            JML IOPEN
.381034	1034	5c f7 14 39	jmp $3914f7	CLOSE           JML ICLOSE
.381038	1038	5c de 06 39	jmp $3906de	SETIN           JML ISETIN
.38103c	103c	5c e7 06 39	jmp $3906e7	SETOUT          JML ISETOUT
.381040	1040	5c f8 14 39	jmp $3914f8	GETB            JML IGETB
.381044	1044	5c 74 3f 39	jmp $393f74	GETBLOCK        JML IGETBLOCK
.381048	1048	5c 2c 07 39	jmp $39072c	GETCH           JML IGETCH
.38104c	104c	5c f9 06 39	jmp $3906f9	GETCHW          JML IGETCHW
.381050	1050	5c f0 06 39	jmp $3906f0	GETCHE          JML IGETCHE
.381054	1054	5c f9 14 39	jmp $3914f9	GETS            JML IGETS
.381058	1058	5c fa 14 39	jmp $3914fa	GETLINE         JML IGETLINE
.38105c	105c	5c fb 14 39	jmp $3914fb	GETFIELD        JML IGETFIELD
.381060	1060	5c fc 14 39	jmp $3914fc	TRIM            JML ITRIM
.381064	1064	5c fd 14 39	jmp $3914fd	PRINTC          JML IPRINTC
.381068	1068	5c fe 14 39	jmp $3914fe	PRINTS          JML IPRINTS
.38106c	106c	5c 03 09 39	jmp $390903	PRINTCR         JML IPRINTCR
.381070	1070	5c ff 14 39	jmp $3914ff	PRINTF          JML IPRINTF
.381074	1074	5c 00 15 39	jmp $391500	PRINTI          JML IPRINTI
.381078	1078	5c c3 0a 39	jmp $390ac3	PRINTH          JML IPRINTH
.38107c	107c	5c 01 15 39	jmp $391501	PRINTAI         JML IPRINTAI
.381080	1080	5c e0 0a 39	jmp $390ae0	PRINTAH         JML IPRINTAH
.381084	1084	5c 07 0a 39	jmp $390a07	LOCATE          JML ILOCATE
.381088	1088	5c 02 15 39	jmp $391502	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c 03 15 39	jmp $391503	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c 63 09 39	jmp $390963	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c 96 09 39	jmp $390996	CSRLEFT         JML ICSRLEFT
.381098	1098	5c bc 09 39	jmp $3909bc	CSRUP           JML ICSRUP
.38109c	109c	5c e2 09 39	jmp $3909e2	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c 52 09 39	jmp $390952	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c 53 0a 39	jmp $390a53	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c 2e 0b 39	jmp $390b2e	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c f9 0b 39	jmp $390bf9	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c cf 0e 39	jmp $390ecf	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c ce 0f 39	jmp $390fce	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c 83 10 39	jmp $391083	INITMOUSE       JML IINITMOUSE
.3810bc	10bc	5c b0 0e 39	jmp $390eb0	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c 78 0e 39	jmp $390e78	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c 28 0c 39	jmp $390c28	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c 48 0c 39	jmp $390c48	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 0e 0d 39	jmp $390d0e	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c 3f 0e 39	jmp $390e3f	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c 77 0e 39	jmp $390e77	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810d8	10d8	5c 77 0e 39	jmp $390e77	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810dc	10dc	5c 40 11 39	jmp $391140	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c cf 11 39	jmp $3911cf	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c 3d 12 39	jmp $39123d	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c f2 11 39	jmp $3911f2	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c 80 35 39	jmp $393580	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c 5a 52 39	jmp $39525a	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c ed 52 39	jmp $3952ed	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c 27 53 39	jmp $395327	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c c0 53 39	jmp $3953c0	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c 5b 53 39	jmp $39535b	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c 6a 54 39	jmp $39546a	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c 2c 54 39	jmp $39542c	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c 66 54 39	jmp $395466	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c 03 55 39	jmp $395503	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c 2a 55 39	jmp $39552a	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c 2e 55 39	jmp $39552e	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c 89 58 39	jmp $395889	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c 4a 3f 39	jmp $393f4a	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c 22 59 39	jmp $395922	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c 75 43 39	jmp $394375	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c 8c 0d 39	jmp $390d8c	SETSIZES        JML ISETSIZES
.381130	1130	5c 71 5a 39	jmp $395a71	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c bb 59 39	jmp $3959bb	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c 0f 5a 39	jmp $395a0f	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.381700	1700	5c ec 69 39	jmp $3969ec	VEC_INT00_SOF   JML FDC_TIME_HANDLE ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c 06 15 39	jmp $391506	VEC_INT01_SOL   JML IRQHANDLESTUB   ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c 06 15 39	jmp $391506	VEC_INT02_TMR0  JML IRQHANDLESTUB   ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c 06 15 39	jmp $391506	VEC_INT03_TMR1  JML IRQHANDLESTUB   ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c 06 15 39	jmp $391506	VEC_INT04_TMR2  JML IRQHANDLESTUB   ; IRQ 0, 4 --- Timer 2 interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.381714						IRQ_HANDLER
.381714		e2 20		sep #$20	                SEP #$20        ; set A short
.381716		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38171a		c9 00		cmp #$00	                CMP #$00
.38171c		f0 7d		beq $38179b	                BEQ CHECK_PENDING_REG1
.38171e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381722		29 01		and #$01	                AND #FNX0_INT00_SOF
.381724		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381726		d0 09		bne $381731	                BNE SERVICE_NEXT_IRQ1
.381728		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38172c		20 09 18	jsr $381809	                JSR SOF_INTERRUPT
.38172f		e2 20		sep #$20	                SEP #$20        ; set A short
.381731						SERVICE_NEXT_IRQ1
.381731		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381735		29 02		and #$02	                AND #FNX0_INT01_SOL
.381737		c9 02		cmp #$02	                CMP #FNX0_INT01_SOL
.381739		d0 07		bne $381742	                BNE SERVICE_NEXT_IRQ2
.38173b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38173f		20 1a 18	jsr $38181a	                JSR SOL_INTERRUPT
.381742						SERVICE_NEXT_IRQ2
.381742		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381746		29 04		and #$04	                AND #FNX0_INT02_TMR0
.381748		c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.38174a		d0 07		bne $381753	                BNE SERVICE_NEXT_IRQ3
.38174c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381750		20 2b 18	jsr $38182b	                JSR TIMER0_INTERRUPT
.381753						SERVICE_NEXT_IRQ3
.381753		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381757		29 08		and #$08	                AND #FNX0_INT03_TMR1
.381759		c9 08		cmp #$08	                CMP #FNX0_INT03_TMR1
.38175b		d0 07		bne $381764	                BNE SERVICE_NEXT_IRQ4
.38175d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381761		20 3c 18	jsr $38183c	                JSR TIMER1_INTERRUPT
.381764						SERVICE_NEXT_IRQ4
.381764		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381768		29 10		and #$10	                AND #FNX0_INT04_TMR2
.38176a		c9 10		cmp #$10	                CMP #FNX0_INT04_TMR2
.38176c		d0 09		bne $381777	                BNE SERVICE_NEXT_IRQ6
.38176e		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381772		20 4d 18	jsr $38184d	                JSR TIMER2_INTERRUPT
.381775		e2 20		sep #$20	                SEP #$20        ; set A short
.381777						SERVICE_NEXT_IRQ6
.381777		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38177b		29 40		and #$40	                AND #FNX0_INT06_FDC
.38177d		c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.38177f		d0 09		bne $38178a	                BNE SERVICE_NEXT_IRQ7
.381781		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381785		20 9e 18	jsr $38189e	                JSR FDC_INTERRUPT
.381788		e2 20		sep #$20	                SEP #$20        ; set A short
.38178a						SERVICE_NEXT_IRQ7
.38178a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38178e		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381790		c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381792		d0 07		bne $38179b	                BNE CHECK_PENDING_REG1
.381794		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381798		20 5e 18	jsr $38185e	                JSR MOUSE_INTERRUPT
.38179b						CHECK_PENDING_REG1
.38179b		e2 20		sep #$20	                SEP #$20        ; set A short
.38179d		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a1		c9 00		cmp #$00	                CMP #$00
.3817a3		f0 61		beq $381806	                BEQ EXIT_IRQ_HANDLE
.3817a5						SERVICE_NEXT_IRQ8
.3817a5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a9		29 01		and #$01	                AND #FNX1_INT00_KBD
.3817ab		c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3817ad		d0 0d		bne $3817bc	                BNE SERVICE_NEXT_IRQ11
.3817af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817b3		8b		phb		                PHB
.3817b4		0b		phd		                PHD
.3817b5		20 d6 18	jsr $3818d6	                JSR KEYBOARD_INTERRUPT
.3817b8		2b		pld		                PLD
.3817b9		ab		plb		                PLB
.3817ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3817bc						SERVICE_NEXT_IRQ11
.3817bc		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817c0		29 08		and #$08	                AND #FNX1_INT03_COM2
.3817c2		c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3817c4		d0 09		bne $3817cf	                BNE SERVICE_NEXT_IRQ12
.3817c6		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817ca		20 a9 18	jsr $3818a9	                JSR COM2_INTERRUPT
.3817cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3817cf						SERVICE_NEXT_IRQ12
.3817cf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817d3		29 10		and #$10	                AND #FNX1_INT04_COM1
.3817d5		c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3817d7		d0 09		bne $3817e2	                BNE SERVICE_NEXT_IRQ13
.3817d9		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817dd		20 b4 18	jsr $3818b4	                JSR COM1_INTERRUPT
.3817e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3817e2						SERVICE_NEXT_IRQ13
.3817e2		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817e6		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3817e8		c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3817ea		d0 09		bne $3817f5	                BNE SERVICE_NEXT_IRQ14
.3817ec		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817f0		20 bf 18	jsr $3818bf	                JSR MPU401_INTERRUPT
.3817f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3817f5						SERVICE_NEXT_IRQ14
.3817f5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817f9		29 40		and #$40	                AND #FNX1_INT06_LPT
.3817fb		c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3817fd		d0 07		bne $381806	                BNE EXIT_IRQ_HANDLE
.3817ff		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381803		20 ca 18	jsr $3818ca	                JSR LPT1_INTERRUPT
.381806						EXIT_IRQ_HANDLE
.381806		c2 30		rep #$30	                REP #$30        ; set A&X long
.381808		6b		rtl		                RTL
.381809						SOF_INTERRUPT
.381809		e2 20		sep #$20	                SEP #$20        ; set A short
.38180b		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38180f		29 01		and #$01	                AND #FNX0_INT00_SOF
.381811		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381815		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF
.381819		60		rts		                RTS
.38181a						SOL_INTERRUPT
.38181a		e2 20		sep #$20	                SEP #$20        ; set A short
.38181c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381820		29 02		and #$02	                AND #FNX0_INT01_SOL
.381822		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381826		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL
.38182a		60		rts		                RTS
.38182b						TIMER0_INTERRUPT
.38182b		e2 20		sep #$20	                SEP #$20        ; set A short
.38182d		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381831		09 80		ora #$80	                ORA #TIMER0TRIGGER
.381833		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381837		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0
.38183b		60		rts		                RTS
.38183c						TIMER1_INTERRUPT
.38183c		e2 20		sep #$20	                SEP #$20        ; set A short
.38183e		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381842		09 40		ora #$40	                ORA #TIMER1TRIGGER
.381844		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381848		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1
.38184c		60		rts		                RTS
.38184d						TIMER2_INTERRUPT
.38184d		e2 20		sep #$20	                SEP #$20        ; set A short
.38184f		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381853		09 20		ora #$20	                ORA #TIMER2TRIGGER
.381855		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381859		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2
.38185d		60		rts		                RTS
.38185e						MOUSE_INTERRUPT
.38185e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.381860		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR
.381864		aa		tax		                TAX
.381865		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF
.381869		9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38186d		e8		inx		                INX
.38186e		e0 03		cpx #$03	                CPX #$03
.381870		d0 24		bne $381896	                BNE EXIT_FOR_NEXT_VALUE
.381872		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.381876		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.38187a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.38187e		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.381882		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.381886		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.38188a		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.38188e		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.381892		e2 20		sep #$20	                SEP #$20        ; set A short
.381894		a2 00		ldx #$00	                LDX #$00
.381896						EXIT_FOR_NEXT_VALUE
.381896		8a		txa		                TXA
.381897		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.38189b		c2 10		rep #$10	                REP #$10        ; set X long
.38189d		60		rts		                RTS
.38189e						FDC_INTERRUPT
.38189e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3818a2		29 40		and #$40	                AND #FNX0_INT06_FDC
.3818a4		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3818a8		60		rts		                RTS
.3818a9						COM2_INTERRUPT
.3818a9		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ad		29 08		and #$08	                AND #FNX1_INT03_COM2
.3818af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818b3		60		rts		                RTS
.3818b4						COM1_INTERRUPT
.3818b4		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818b8		29 10		and #$10	                AND #FNX1_INT04_COM1
.3818ba		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818be		60		rts		                RTS
.3818bf						MPU401_INTERRUPT
.3818bf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818c3		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3818c5		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818c9		60		rts		                RTS
.3818ca						LPT1_INTERRUPT
.3818ca		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ce		29 40		and #$40	                AND #FNX1_INT06_LPT
.3818d0		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818d4		60		rts		                RTS
.3818d5						NMI_HANDLER
.3818d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3818d6						KEYBOARD_INTERRUPT
.3818d6		48		pha		                PHA             ; begin setdp macro
.3818d7		08		php		                PHP
.3818d8		c2 20		rep #$20	                REP #$20        ; set A long
.3818da		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3818dd		5b		tcd		                TCD
.3818de		28		plp		                PLP
.3818df		68		pla		                PLA             ; end setdp macro
.3818e0		a2 00 00	ldx #$0000	                ldx #$0000
.3818e3		e2 10		sep #$10	                SEP #$10        ; set X short
.3818e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3818e7		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818eb		29 01		and #$01	                AND #FNX1_INT00_KBD
.3818ed		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818f1						IRQ_HANDLER_FETCH
.3818f1		af 03 18 af	lda $af1803	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3818f5		85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3818f7		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3818f9		29 80		and #$80	                AND #$80
.3818fb		c9 80		cmp #$80	                CMP #$80
.3818fd		d0 10		bne $38190f	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3818ff		a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381901		29 7f		and #$7f	                AND #$7F
.381903		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381905		a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.381907		aa		tax		                TAX
.381908		bf 80 84 39	lda $398480,x	                LDA @lScanCode_Prefix_Set1, x
.38190c		4c b2 19	jmp $3819b2	                JMP KB_WR_2_SCREEN      ; And save it
.38190f		a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381911		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381913		d0 03		bne $381918	                BNE NOT_KB_SET_LSHIFT
.381915		82 ad 00	brl $3819c5	                BRL KB_SET_SHIFT
.381918						NOT_KB_SET_LSHIFT
.381918		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38191a		d0 03		bne $38191f	                BNE NOT_KB_CLR_LSHIFT
.38191c		82 af 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38191f						NOT_KB_CLR_LSHIFT
.38191f		c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381921		d0 03		bne $381926	                BNE NOT_KB_SET_RSHIFT
.381923		82 9f 00	brl $3819c5	                BRL KB_SET_SHIFT
.381926						NOT_KB_SET_RSHIFT
.381926		c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381928		d0 03		bne $38192d	                BNE NOT_KB_CLR_RSHIFT
.38192a		82 a1 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38192d						NOT_KB_CLR_RSHIFT
.38192d		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38192f		d0 03		bne $381934	                BNE NOT_KB_SET_CTRL
.381931		82 a3 00	brl $3819d7	                BRL KB_SET_CTRL
.381934						NOT_KB_SET_CTRL
.381934		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381936		d0 03		bne $38193b	                BNE NOT_KB_CLR_CTRL
.381938		82 a5 00	brl $3819e0	                BRL KB_CLR_CTRL
.38193b						NOT_KB_CLR_CTRL
.38193b		c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38193d		d0 03		bne $381942	                BNE NOT_KB_SET_ALT
.38193f		82 a7 00	brl $3819e9	                BRL KB_SET_ALT
.381942						NOT_KB_SET_ALT
.381942		c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381944		d0 03		bne $381949	                BNE NOT_KB_CLR_ALT
.381946		82 a9 00	brl $3819f2	                BRL KB_CLR_ALT
.381949		c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.38194b		d0 03		bne $381950	                BNE NOT_PREFIXED
.38194d		82 ab 00	brl $3819fb	                BRL KB_SET_PREFIX
.381950		c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381952		d0 03		bne $381957	                BNE NOT_KB_SET_NUM
.381954		82 b6 00	brl $381a0d	                BRL KB_TOG_NUMLOCK
.381957		c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381959		d0 03		bne $38195e	                BNE NOT_KB_SET_SCR
.38195b		82 a6 00	brl $381a04	                BRL KB_TOG_SCRLOCK
.38195e		c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381960		d0 03		bne $381965	                BNE NOT_KB_CAPSLOCK
.381962		82 bc 00	brl $381a21	                BRL KB_TOG_CAPLOCK
.381965		c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381967		d0 09		bne $381972	                BNE KB_UNPRESSED
.381969		a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.38196b		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38196f		82 b5 00	brl $381a27	                BRL KB_CHECK_B_DONE
.381972		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381974		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381976		d0 03		bne $38197b	                BNE KB_NORM_SC
.381978		82 ac 00	brl $381a27	                BRL KB_CHECK_B_DONE
.38197b		a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38197d		aa		tax		                TAX
.38197e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381980		29 10		and #$10	                AND #$10
.381982		c9 10		cmp #$10	                CMP #$10
.381984		f0 17		beq $38199d	                BEQ SHIFT_KEY_ON
.381986		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381988		29 20		and #$20	                AND #$20
.38198a		c9 20		cmp #$20	                CMP #$20
.38198c		f0 16		beq $3819a4	                BEQ CTRL_KEY_ON
.38198e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.381990		29 40		and #$40	                AND #$40
.381992		c9 40		cmp #$40	                CMP #$40
.381994		f0 15		beq $3819ab	                BEQ ALT_KEY_ON
.381996		bf 00 82 39	lda $398200,x	                LDA @lScanCode_Press_Set1, x
.38199a		82 15 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.38199d		bf 80 82 39	lda $398280,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3819a1		82 0e 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819a4		bf 00 83 39	lda $398300,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3819a8		82 07 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819ab		bf 80 83 39	lda $398380,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3819af		82 00 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819b2		c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3819b4		d0 03		bne $3819b9	                BNE savechar
.3819b6		4c 37 1a	jmp $381a37	                JMP programmerKey       ; Yes: trigger the programmer key
.3819b9		48		pha		savechar        PHA
.3819ba		c2 10		rep #$10	                REP #$10        ; set X long
.3819bc		20 43 1a	jsr $381a43	                JSR SAVEKEY
.3819bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3819c1		68		pla		                PLA
.3819c2		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819c5		a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3819c7		09 10		ora #$10	                ORA #$10
.3819c9		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819cb		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819ce		a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3819d0		29 ef		and #$ef	                AND #$EF
.3819d2		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819d4		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819d7		a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3819d9		09 20		ora #$20	                ORA #$20
.3819db		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819dd		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e0		a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3819e2		29 df		and #$df	                AND #$DF
.3819e4		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819e6		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e9		a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3819eb		09 40		ora #$40	                ORA #$40
.3819ed		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819ef		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819f2		a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3819f4		29 bf		and #$bf	                AND #$BF
.3819f6		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819f8		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819fb		a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3819fd		09 80		ora #$80	                ORA #$80
.3819ff		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381a01		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a04		a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.381a06		49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.381a08		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a0a		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a0d		a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381a0f		29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381a11		c9 60		cmp #$60	                CMP #$60
.381a13		d0 03		bne $381a18	                BNE KB_TOG_NUMLOC2
.381a15		82 63 ff	brl $38197b	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381a18		a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381a1a		49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381a1c		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a1e		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a21		a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381a23		49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381a25		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a27						KB_CHECK_B_DONE
.381a27		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.381a2b		29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381a2d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381a2f		d0 03		bne $381a34	                BNE SET_LED
.381a31		4c f1 18	jmp $3818f1	                JMP IRQ_HANDLER_FETCH
.381a34						SET_LED
.381a34						KB_DONE
.381a34		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a36		60		rts		                RTS
.381a37						programmerKey
.381a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a39		68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381a3a		2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381a3b		ab		plb		                PLB
.381a3c		7a		ply		                PLY
.381a3d		fa		plx		                PLX
.381a3e		68		pla		                PLA
.381a3f		5c 08 10 00	jmp $001008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381a43						SAVEKEY
.381a43		e2 20		sep #$20	                SEP #$20        ; set A short
.381a45		48		pha		                PHA                     ; Save the character
.381a46		a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381a48		29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381a4a		f0 0d		beq $381a59	                BEQ no_caps             ; No... just use the character as-is
.381a4c		68		pla		                PLA                     ; Get the character back
.381a4d		c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381a4f		90 09		bcc $381a5a	                BLT check_break         ; Yes: just use as-is
.381a51		c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381a53		b0 05		bcs $381a5a	                BGE check_break         ; Yes: just us as-is
.381a55		29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381a57		80 01		bra $381a5a	                BRA check_break
.381a59		68		pla		no_caps         PLA                     ; Restore the character
.381a5a		c9 00		cmp #$00	check_break     CMP #0
.381a5c		f0 18		beq $381a76	                BEQ done
.381a5e		c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381a60		f0 15		beq $381a77	                BEQ flag_break          ; Yes: flag a break
.381a62		a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381a64		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381a67		b0 0d		bcs $381a76	                BCS done                ; Stop storing - An error should ensue here...
.381a69		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381a6d		e8		inx		                INX
.381a6e		86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381a70		a9 00		lda #$00	                LDA #$00
.381a72		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381a76		60		rts		done            RTS
.381a77						flag_break
.381a77		e2 20		sep #$20	                SEP #$20        ; set A short
.381a79		a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381a7b		85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381a7d		60		rts		                RTS
.381a7e						KBD_GETCW
.381a7e		da		phx		                PHX
.381a7f		0b		phd		                PHD
.381a80		08		php		                PHP
.381a81		48		pha		                PHA             ; begin setdp macro
.381a82		08		php		                PHP
.381a83		c2 20		rep #$20	                REP #$20        ; set A long
.381a85		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381a88		5b		tcd		                TCD
.381a89		28		plp		                PLP
.381a8a		68		pla		                PLA             ; end setdp macro
.381a8b		e2 20		sep #$20	                SEP #$20        ; set A short
.381a8d		c2 10		rep #$10	                REP #$10        ; set X long
.381a8f		58		cli		                CLI                     ; Make sure interrupts can happen
.381a90		af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381a94		29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381a96		c9 60		cmp #$60	                CMP #KB_CREDITS
.381a98		d0 0a		bne $381aa4	                BNE check_buffer        ; No: check the key buffer
.381a9a		a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.381a9c		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381aa0		22 ac 14 39	jsl $3914ac	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381aa4		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381aa6		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381aa8		90 02		bcc $381aac	                BCC read_buff           ; Yes: a key is present, read it
.381aaa		80 e4		bra $381a90	                BRA get_wait            ; Otherwise, keep waiting
.381aac		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381aad		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381aaf		e8		inx		                INX                     ; And move to the next key
.381ab0		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ab2		f0 07		beq $381abb	                BEQ reset_indexes       ; Yes: return to 0 position
.381ab4		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ab6		58		cli		                CLI
.381ab7		28		plp		done            PLP                     ; Restore status and interrupts
.381ab8		2b		pld		                PLD
.381ab9		fa		plx		                PLX
.381aba		6b		rtl		                RTL
.381abb		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381abd		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381abf		80 f6		bra $381ab7	                BRA done
.381ac1						KBD_GETC
.381ac1		da		phx		                PHX
.381ac2		0b		phd		                PHD
.381ac3		08		php		                PHP
.381ac4		48		pha		                PHA             ; begin setdp macro
.381ac5		08		php		                PHP
.381ac6		c2 20		rep #$20	                REP #$20        ; set A long
.381ac8		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381acb		5b		tcd		                TCD
.381acc		28		plp		                PLP
.381acd		68		pla		                PLA             ; end setdp macro
.381ace		e2 20		sep #$20	                SEP #$20        ; set A short
.381ad0		c2 10		rep #$10	                REP #$10        ; set X long
.381ad2		58		cli		                CLI                     ; Make sure interrupts can happen
.381ad3		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381ad5		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381ad7		90 05		bcc $381ade	                BCC read_buff           ; Yes: a key is present, read it
.381ad9		a9 00		lda #$00	                LDA #0                  ; If no key, return zero and set carry bit
.381adb		38		sec		                SEC
.381adc		80 0b		bra $381ae9	                BRA done
.381ade		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381adf		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381ae1		e8		inx		                INX                     ; And move to the next key
.381ae2		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ae4		f0 07		beq $381aed	                BEQ reset_indexes       ; Yes: return to 0 position
.381ae6		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ae8		58		cli		                CLI
.381ae9		28		plp		done            PLP                     ; Restore status and interrupts
.381aea		2b		pld		                PLD
.381aeb		fa		plx		                PLX
.381aec		6b		rtl		                RTL
.381aed		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381aef		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381af1		80 f6		bra $381ae9	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		48		pha		                PHA             ; begin setdp macro
.390416		08		php		                PHP
.390417		c2 20		rep #$20	                REP #$20        ; set A long
.390419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c		5b		tcd		                TCD
.39041d		28		plp		                PLP
.39041e		68		pla		                PLA             ; end setdp macro
.39041f		e2 20		sep #$20	                SEP #$20        ; set A short
.390421		a2 00 00	ldx #$0000	                LDX #$0000
.390424		a9 00		lda #$00	                LDA #$00
.390426						CLEAR_MEM_LOOP
.390426		95 00		sta $00,x	                STA $0000, X
.390428		e8		inx		                INX
.390429		e0 00 01	cpx #$0100	                CPX #$0100
.39042c		d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e		ea		nop		                NOP
.39042f		a9 ff		lda #$ff	                LDA #$FF
.390431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451		22 25 11 39	jsl $391125	                JSL INITRTC               ; Initialize the RTC
.390455		e2 20		sep #$20	                SEP #$20        ; set A short
.390457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.39045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.39045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.39045f		d0 1e		bne $39047f	                BNE SkipInitExpC100C200
.390461		c2 20		rep #$20	                REP #$20        ; set A long
.390463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.390467		c9 64 00	cmp #$0064	                CMP #$0064
.39046a		f0 0f		beq $39047b	                BEQ InitC100ESID
.39046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.39046f		d0 0e		bne $39047f	                BNE SkipInitExpC100C200
.390471		22 fe 6d 39	jsl $396dfe	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390475		22 09 72 39	jsl $397209	                JSL INIT_EVID_VID_MODE
.390479		80 04		bra $39047f	                BRA SkipInitExpC100C200
.39047b						InitC100ESID:
.39047b		22 fe 6d 39	jsl $396dfe	                JSL SIMPLE_INIT_ETHERNET_CTRL
.39047f						SkipInitExpC100C200:
.39047f		c2 30		rep #$30	                REP #$30        ; set A&X long
.390481		a2 48 00	ldx #$0048	                LDX #72                   ; Set these by default, but they will be changed later by Init Vicky Text Mode
.390484		86 0f		stx $0f		                STX COLS_VISIBLE
.390486		a0 34 00	ldy #$0034	                LDY #52
.390489		84 13		sty $13		                STY LINES_VISIBLE
.39048b		a2 80 00	ldx #$0080	                LDX #128
.39048e		86 11		stx $11		                STX COLS_PER_LINE
.390490		a0 40 00	ldy #$0040	                LDY #64
.390493		84 15		sty $15		                STY LINES_MAX
.390495		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.390498		85 0c		sta $0c		                STA SCREENBEGIN
.39049a		85 17		sta $17		                STA CURSORPOS
.39049c		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.39049f		85 1f		sta $1f		                STA COLORPOS
.3904a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3904a3		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.3904a5		85 0e		sta $0e		                STA SCREENBEGIN+2
.3904a7		85 19		sta $19		                STA CURSORPOS+2
.3904a9		a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.3904ab		85 21		sta $21		                STA COLORPOS+2
.3904ad		a9 00		lda #$00	                LDA #$00
.3904af		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.3904b2		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.3904b4		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904b8		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.3904ba		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904be		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.3904c0		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904c4		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.3904c6		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904ca		a9 ed		lda #$ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904cc		85 1e		sta $1e		                STA CURCOLOR
.3904ce		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.3904d2		29 01		and #$01	                AND #$01
.3904d4		c9 01		cmp #$01	                CMP #$01
.3904d6		d0 14		bne $3904ec	                BNE Alreadyin640480Mode
.3904d8		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904dc		29 fc		and #$fc	                AND #$FC
.3904de		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904e2		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904e6		09 01		ora #$01	                ORA #$01
.3904e8		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904ec						Alreadyin640480Mode
.3904ec		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904f0		29 fc		and #$fc	                AND #$FC
.3904f2		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.3904f6		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904fa		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904fe		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.390502		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.390506		22 91 0e 39	jsl $390e91	                JSL INITMOUSEPOINTER
.39050a		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.39050e		a9 00		lda #$00	                LDA #0
.390510		22 38 10 00	jsl $001038	                JSL SETIN
.390514		22 3c 10 00	jsl $00103c	                JSL SETOUT
.390518		c2 20		rep #$20	                REP #$20        ; set A long
.39051a		48		pha		                PHA             ; begin setdp macro
.39051b		08		php		                PHP
.39051c		c2 20		rep #$20	                REP #$20        ; set A long
.39051e		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390521		5b		tcd		                TCD
.390522		28		plp		                PLP
.390523		68		pla		                PLA             ; end setdp macro
.390524		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD ;
.390528		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE;  // I Seperated them
.39052c		e2 20		sep #$20	                SEP #$20        ; set A short
.39052e		c2 10		rep #$10	                REP #$10        ; set X long
.390530		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390532		8f 00 f1 af	sta $aff100	                STA $AFF100
.390536		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390538		8f 00 f1 af	sta $aff100	                STA $AFF100
.39053c		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.39053e		8f 00 f1 af	sta $aff100	                STA $AFF100
.390542		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390544		8f 00 f1 af	sta $aff100	                STA $AFF100
.390548		a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.39054a		8f 00 f1 af	sta $aff100	                STA $AFF100
.39054e		a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.390550		8f 00 f1 af	sta $aff100	                STA $AFF100
.390554		a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390556		8f 00 f1 af	sta $aff100	                STA $AFF100
.39055a		a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.39055d		22 3a 14 39	jsl $39143a	                JSL ILOOP_MS
.390561		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390563		8f 00 f1 af	sta $aff100	                STA $AFF100
.390567		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390568		e2 20		sep #$20	                SEP #$20        ; set A short
.39056a		c2 10		rep #$10	                REP #$10        ; set X long
.39056c		48		pha		                PHA             ; begin setdbr macro
.39056d		08		php		                PHP
.39056e		e2 20		sep #$20	                SEP #$20        ; set A short
.390570		a9 39		lda #$39	                LDA #`greet_msg
.390572		48		pha		                PHA
.390573		ab		plb		                PLB
.390574		28		plp		                PLP
.390575		68		pla		                PLA             ; end setdbr macro
.390576		a2 00 00	ldx #$0000	                LDX #0
.390579		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.39057d		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390581		e8		inx		                INX
.390582		e0 00 10	cpx #$1000	                CPX #$1000
.390585		d0 f2		bne $390579	                BNE jmpcopy
.390587						retry_boot
.390587		22 a3 42 39	jsl $3942a3	                JSL DOS_INIT          ; Initialize the "disc operating system"
.39058b		22 00 00 3e	jsl $3e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.39058f		22 2e 0b 39	jsl $390b2e	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.390593		c2 30		rep #$30	                REP #$30        ; set A&X long
.390595		a2 00 00	ldx #$0000	                LDX #0
.390598		a0 00 00	ldy #$0000	                LDY #0
.39059b		22 07 0a 39	jsl $390a07	                JSL ILOCATE
.39059f						greet
.39059f		48		pha		                PHA             ; begin setdbr macro
.3905a0		08		php		                PHP
.3905a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3905a3		a9 39		lda #$39	                LDA #`greet_msg
.3905a5		48		pha		                PHA
.3905a6		ab		plb		                PLB
.3905a7		28		plp		                PLP
.3905a8		68		pla		                PLA             ; end setdbr macro
.3905a9		a2 05 7d	ldx #$7d05	                LDX #<>greet_msg
.3905ac		22 5f 07 39	jsl $39075f	                JSL IPRINT       ; print the first line
.3905b0		22 79 0b 39	jsl $390b79	                JSL ICOLORFLAG  ; This is to set the Color Memory for the TExt Logo
.3905b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3905b6		a9 ff fe	lda #$feff	                LDA #STACK_END    ; We are the root, let's make sure from now on, that we start clean
.3905b9		1b		tcs		                TAS
.3905ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3905bc		c2 10		rep #$10	                REP #$10        ; set X long
.3905be		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.3905c2		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.3905c4		f0 10		beq $3905d6	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.3905c6		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.3905c8		f0 1e		beq $3905e8	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.3905ca		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.3905cc		f0 62		beq $390630	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.3905ce		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.3905d0		f0 1d		beq $3905ef	                BEQ BOOTSDC           ; Yes: boot via the SDC
.3905d2		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.3905d4		f0 39		beq $39060f	                BEQ BOOTIDE           ; Yes: boot via the IDE
.3905d6		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.3905da		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905dc		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905de		f0 2f		beq $39060f	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905e0		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905e2		f0 0b		beq $3905ef	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.3905e4		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.3905e6		f0 48		beq $390630	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905e8						IRESTORE
.3905e8		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905ec		ea		nop		CREDIT_LOCK     NOP
.3905ed		80 fd		bra $3905ec	                BRA CREDIT_LOCK
.3905ef		a2 61 81	ldx #$8161	BOOTSDC         LDX #<>sdc_boot
.3905f2		22 5f 07 39	jsl $39075f	                JSL IPRINT
.3905f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3905f8		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905fa		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905fe		22 75 43 39	jsl $394375	                JSL DOS_MOUNT         ; Mount the SDC
.390602		90 06		bcc $39060a	                BCC sdc_error         ; Print an error message if couldn't get anything
.390604		22 30 45 39	jsl $394530	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.390608		80 de		bra $3905e8	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.39060a		a2 e5 80	ldx #$80e5	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.39060d		80 40		bra $39064f	                BRA PR_BOOT_ERROR
.39060f		a2 78 81	ldx #$8178	BOOTIDE         LDX #<>ide_boot
.390612		22 5f 07 39	jsl $39075f	                JSL IPRINT
.390616		e2 20		sep #$20	                SEP #$20        ; set A short
.390618		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.39061a		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39061e		22 75 43 39	jsl $394375	                JSL DOS_MOUNT         ; Mount the IDE drive
.390622		90 07		bcc $39062b	                BCC hdc_error         ; Print an error message if couldn't get anything
.390624		22 30 45 39	jsl $394530	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.390628		82 bd ff	brl $3905e8	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.39062b		a2 01 81	ldx #$8101	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.39062e		80 1f		bra $39064f	                BRA PR_BOOT_ERROR
.390630		a2 4a 81	ldx #$814a	BOOTFLOPPY      LDX #<>fdc_boot
.390633		22 5f 07 39	jsl $39075f	                JSL IPRINT
.390637		e2 20		sep #$20	                SEP #$20        ; set A short
.390639		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.39063b		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39063f		22 85 67 39	jsl $396785	                JSL FDC_MOUNT         ; Mount the floppy drive
.390643		90 07		bcc $39064c	                BCC fdc_error         ; Print an error message if couldn't get anything
.390645		22 30 45 39	jsl $394530	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.390649		82 9c ff	brl $3905e8	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.39064c		a2 24 81	ldx #$8124	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.39064f		22 5f 07 39	jsl $39075f	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390653		a2 c0 80	ldx #$80c0	                LDX #<>boot_retry     ; Print the boot retry prompt
.390656		22 5f 07 39	jsl $39075f	                JSL IPRINT
.39065a		22 f9 06 39	jsl $3906f9	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.39065e		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390660		d0 03		bne $390665	                BNE chk_r_lc
.390662		82 22 ff	brl $390587	                BRL retry_boot        ; Yes: retry the boot sequence
.390665		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390667		d0 03		bne $39066c	                BNE chk_b_lc
.390669		82 1b ff	brl $390587	                BRL retry_boot
.39066c		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.39066e		d0 03		bne $390673	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.390670		82 75 ff	brl $3905e8	                BRL BOOTBASIC
.390673						chk_b_lc_not:
.390673		c9 42		cmp #$42	                CMP #'B'
.390675		d0 03		bne $39067a	                BNE chk_b_lc_not0
.390677		82 6e ff	brl $3905e8	                BRL BOOTBASIC
.39067a						chk_b_lc_not0:
.39067a		80 de		bra $39065a	                BRA boot_wait_key     ; No: keep waiting
.39067c						IBREAK
.39067c		48		pha		                PHA             ; begin setdp macro
.39067d		08		php		                PHP
.39067e		c2 20		rep #$20	                REP #$20        ; set A long
.390680		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390683		5b		tcd		                TCD
.390684		28		plp		                PLP
.390685		68		pla		                PLA             ; end setdp macro
.390686		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390687		8f 48 02 00	sta $000248	                STA CPUY
.39068b		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.39068c		8f 46 02 00	sta $000246	                STA CPUX
.390690		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.390691		8f 44 02 00	sta $000244	                STA CPUA
.390695		68		pla		                PLA
.390696		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.39069a		e2 20		sep #$20	                SEP #$20        ; set A short
.39069c		68		pla		                PLA             ; Pull Data Bank (8 bits)
.39069d		8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906a1		68		pla		                PLA             ; Pull Flags (8 bits)
.3906a2		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906a6		c2 20		rep #$20	                REP #$20        ; set A long
.3906a8		68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906a9		8f 40 02 00	sta $000240	                STA CPUPC
.3906ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3906af		68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906b0		8f 42 02 00	sta $000242	                STA CPUPBR
.3906b4		c2 20		rep #$20	                REP #$20        ; set A long
.3906b6		3b		tsc		                TSA             ; Get the stack
.3906b7		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906bb		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906be		1b		tcs		                TAS
.3906bf		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906c3						IREADY
.3906c3		48		pha		                PHA             ; begin setdbr macro
.3906c4		08		php		                PHP
.3906c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3906c7		a9 39		lda #$39	                LDA #`ready_msg
.3906c9		48		pha		                PHA
.3906ca		ab		plb		                PLB
.3906cb		28		plp		                PLP
.3906cc		68		pla		                PLA             ; end setdbr macro
.3906cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3906cf		a2 93 81	ldx #$8193	                LDX #<>ready_msg
.3906d2		22 5f 07 39	jsl $39075f	                JSL IPRINT
.3906d6						IREADYWAIT
.3906d6		22 f0 06 39	jsl $3906f0	                JSL IGETCHE
.3906da		80 fa		bra $3906d6	                BRA IREADYWAIT
.3906dc		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.3906dd		db		stp		IRETURN         STP
.3906de		08		php		ISETIN          PHP
.3906df		e2 20		sep #$20	                SEP #$20        ; set A short
.3906e1		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.3906e5		28		plp		                PLP
.3906e6		6b		rtl		                RTL
.3906e7		08		php		ISETOUT         PHP
.3906e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3906ea		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.3906ee		28		plp		                PLP
.3906ef		6b		rtl		                RTL
.3906f0		22 f9 06 39	jsl $3906f9	IGETCHE         JSL IGETCHW
.3906f4		22 7f 07 39	jsl $39077f	                JSL IPUTC
.3906f8		6b		rtl		                RTL
.3906f9						IGETCHW
.3906f9		da		phx		                PHX
.3906fa		5a		phy		                PHY
.3906fb		8b		phb		                PHB
.3906fc		0b		phd		                PHD
.3906fd		08		php		                PHP
.3906fe		e2 20		sep #$20	                SEP #$20        ; set A short
.390700		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390704		f0 1b		beq $390721	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390706		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390708		f0 0d		beq $390717	                BEQ getc_uart       ; Yes: handle reading from the UART
.39070a		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39070c		f0 09		beq $390717	                BEQ getc_uart       ; Yes: handle reading from the UART
.39070e		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390710		28		plp		                PLP
.390711		38		sec		                SEC                 ; And return carry set
.390712		2b		pld		                PLD
.390713		ab		plb		                PLB
.390714		7a		ply		                PLY
.390715		fa		plx		                PLX
.390716		6b		rtl		                RTL
.390717		22 89 5b 39	jsl $395b89	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39071b		22 3d 5c 39	jsl $395c3d	                JSL UART_GETC       ; Get the charater from the COM port
.39071f		80 04		bra $390725	                BRA done
.390721		22 7e 1a 38	jsl $381a7e	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.390725		28		plp		done            PLP
.390726		18		clc		                CLC                 ; Return carry clear for valid data
.390727		2b		pld		                PLD
.390728		ab		plb		                PLB
.390729		7a		ply		                PLY
.39072a		fa		plx		                PLX
.39072b		6b		rtl		                RTL
.39072c						IGETCH
.39072c		da		phx		                PHX
.39072d		5a		phy		                PHY
.39072e		8b		phb		                PHB
.39072f		0b		phd		                PHD
.390730		08		php		                PHP
.390731		e2 20		sep #$20	                SEP #$20        ; set A short
.390733		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390737		f0 1b		beq $390754	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390739		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39073b		f0 0d		beq $39074a	                BEQ getc_uart       ; Yes: handle reading from the UART
.39073d		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39073f		f0 09		beq $39074a	                BEQ getc_uart       ; Yes: handle reading from the UART
.390741		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390743		28		plp		                PLP
.390744		38		sec		                SEC                 ; And return carry set
.390745		2b		pld		                PLD
.390746		ab		plb		                PLB
.390747		7a		ply		                PLY
.390748		fa		plx		                PLX
.390749		6b		rtl		                RTL
.39074a		22 89 5b 39	jsl $395b89	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39074e		22 3d 5c 39	jsl $395c3d	                JSL UART_GETC       ; Get the charater from the COM port
.390752		80 04		bra $390758	                BRA done
.390754		22 c1 1a 38	jsl $381ac1	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390758		28		plp		done            PLP
.390759		18		clc		                CLC                 ; Return carry clear for valid data
.39075a		2b		pld		                PLD
.39075b		ab		plb		                PLB
.39075c		7a		ply		                PLY
.39075d		fa		plx		                PLX
.39075e		6b		rtl		                RTL
.39075f		22 68 07 39	jsl $390768	IPRINT          JSL IPUTS
.390763		22 03 09 39	jsl $390903	                JSL IPRINTCR
.390767		6b		rtl		                RTL
.390768		48		pha		IPUTS           PHA
.390769		08		php		                PHP
.39076a		e2 20		sep #$20	                SEP #$20        ; set A short
.39076c		c2 10		rep #$10	                REP #$10        ; set X long
.39076e		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390771		f0 08		beq $39077b	                BEQ iputs_done
.390773		22 7f 07 39	jsl $39077f	iputs2          JSL IPUTC
.390777		e8		inx		iputs3          INX
.390778		4c 6e 07	jmp $39076e	                JMP iputs1
.39077b		e8		inx		iputs_done      INX
.39077c		28		plp		                PLP
.39077d		68		pla		                PLA
.39077e		6b		rtl		                RTL
.39077f						IPUTC
.39077f		da		phx		                PHX
.390780		5a		phy		                PHY
.390781		0b		phd		                PHD
.390782		8b		phb		                PHB
.390783		08		php		                PHP                 ; stash the flags (we'll be changing M)
.390784		48		pha		                PHA             ; begin setdp macro
.390785		08		php		                PHP
.390786		c2 20		rep #$20	                REP #$20        ; set A long
.390788		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39078b		5b		tcd		                TCD
.39078c		28		plp		                PLP
.39078d		68		pla		                PLA             ; end setdp macro
.39078e		48		pha		                PHA             ; begin setdbr macro
.39078f		08		php		                PHP
.390790		e2 20		sep #$20	                SEP #$20        ; set A short
.390792		a9 00		lda #$00	                LDA #0
.390794		48		pha		                PHA
.390795		ab		plb		                PLB
.390796		28		plp		                PLP
.390797		68		pla		                PLA             ; end setdbr macro
.390798		e2 20		sep #$20	                SEP #$20        ; set A short
.39079a		c2 10		rep #$10	                REP #$10        ; set X long
.39079c		48		pha		                PHA                 ; Save the character to print
.39079d		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907a1		f0 21		beq $3907c4	                BEQ putc_screen     ; If it's 0: print to the screen
.3907a3		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907a5		f0 0b		beq $3907b2	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907a7		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907a9		f0 07		beq $3907b2	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907ab		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.3907ad		f0 0e		beq $3907bd	                BEQ putc_evid       ; Yes: handle printing to the second video port
.3907af		68		pla		                PLA                 ; Otherwise, just exit
.3907b0		80 5e		bra $390810	                BRA done
.3907b2		22 89 5b 39	jsl $395b89	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907b6		68		pla		                PLA                 ; Recover the character to send
.3907b7		22 5e 5c 39	jsl $395c5e	                JSL UART_PUTC       ; Send the character
.3907bb		80 53		bra $390810	                BRA done
.3907bd		68		pla		putc_evid       PLA                 ; Recover the character to send
.3907be		22 a5 6e 39	jsl $396ea5	                JSL EVID_IPUTC      ; Call the EVID routines
.3907c2		80 4c		bra $390810	                BRA done
.3907c4		68		pla		putc_screen     PLA                 ; Get the character to print
.3907c5		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907c7		f0 69		beq $390832	                BEQ go_down
.3907c9		c9 20		cmp #$20	                CMP #$20
.3907cb		90 19		bcc $3907e6	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907cd		c9 7f		cmp #$7f	                CMP #$7F
.3907cf		f0 45		beq $390816	                BEQ do_del
.3907d1		b0 02		bcs $3907d5	                BCS check_A0        ; [$20..$7E]: print it
.3907d3		80 31		bra $390806	                BRA printc
.3907d5		c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907d7		90 02		bcc $3907db	                BCC check_ctrl1
.3907d9		80 2b		bra $390806	                BRA printc          ; [$A0..$FF]: print it
.3907db		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907dd		f0 53		beq $390832	                BEQ go_down         ; ... move the cursor down one row
.3907df		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907e1		f0 61		beq $390844	                BEQ go_left         ; ... move the cursor left one column
.3907e3		4c 10 08	jmp $390810	                JMP done
.3907e6		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3907e8		f0 69		beq $390853	                BEQ do_TAB          ; ... move to the next TAB stop
.3907ea		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3907ec		f0 34		beq $390822	                BEQ backspace       ; ... move the cursor back and replace with a space
.3907ee		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.3907f0		f0 3a		beq $39082c	                BEQ do_cr           ; ... move cursor down and to the first column
.3907f2		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.3907f4		f0 42		beq $390838	                BEQ go_up           ; ... move the cursor up one row
.3907f6		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.3907f8		f0 44		beq $39083e	                BEQ go_right        ; ... move the cursor right one column
.3907fa		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.3907fc		f0 1e		beq $39081c	                BEQ do_ins          ; ... insert a space
.3907fe		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.390800		f0 48		beq $39084a	                BEQ go_sol          ; ... move the cursor to the start of the line
.390802		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.390804		f0 74		beq $39087a	                BEQ go_eol          ; ... move the cursor to the end of the line
.390806		87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.390808		a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.39080a		87 1f		sta [$1f]	                STA [COLORPOS]
.39080c		22 63 09 39	jsl $390963	                JSL ICSRRIGHT       ; And advance the cursor
.390810		28		plp		done            PLP
.390811		ab		plb		                PLB
.390812		2b		pld		                PLD
.390813		7a		ply		                PLY
.390814		fa		plx		                PLX
.390815		6b		rtl		                RTL
.390816		22 a7 08 39	jsl $3908a7	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39081a		80 f4		bra $390810	                BRA done
.39081c		22 cb 08 39	jsl $3908cb	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390820		80 ee		bra $390810	                BRA done
.390822		22 96 09 39	jsl $390996	backspace       JSL ICSRLEFT
.390826		22 a7 08 39	jsl $3908a7	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39082a		80 e4		bra $390810	                BRA done
.39082c		22 03 09 39	jsl $390903	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390830		80 de		bra $390810	                BRA done
.390832		22 e2 09 39	jsl $3909e2	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390836		80 d8		bra $390810	                BRA done
.390838		22 bc 09 39	jsl $3909bc	go_up           JSL ICSRUP          ; Move the cursor up one line
.39083c		80 d2		bra $390810	                BRA done
.39083e		22 63 09 39	jsl $390963	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390842		80 cc		bra $390810	                BRA done
.390844		22 96 09 39	jsl $390996	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.390848		80 c6		bra $390810	                BRA done
.39084a						go_sol
.39084a		c2 20		rep #$20	                REP #$20        ; set A long
.39084c		a2 00 00	ldx #$0000	                LDX #0
.39084f		a4 1c		ldy $1c		                LDY CURSORY
.390851		80 21		bra $390874	                BRA do_locate
.390853						do_TAB
.390853		c2 20		rep #$20	                REP #$20        ; set A long
.390855		a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390857		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39085a		18		clc		                CLC
.39085b		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.39085e		aa		tax		                TAX
.39085f		a4 1c		ldy $1c		                LDY CURSORY
.390861		e2 20		sep #$20	                SEP #$20        ; set A short
.390863		e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390865		90 04		bcc $39086b	                BCC check_row       ; Yes: check the row
.390867		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39086a		c8		iny		                INY                 ; ... and the next row
.39086b		c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.39086d		90 05		bcc $390874	                BCC do_locate       ; Yes: reposition the cursor
.39086f		22 53 0a 39	jsl $390a53	                JSL ISCROLLUP       ; No: scroll the screen
.390873		88		dey		                DEY                 ; And set the row to the last one
.390874		22 07 0a 39	jsl $390a07	do_locate       JSL ILOCATE         ; Set the cursor position
.390878		80 96		bra $390810	                BRA done
.39087a		a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.39087c		ca		dex		                DEX
.39087d		a4 1c		ldy $1c		                LDY CURSORY
.39087f		22 07 0a 39	jsl $390a07	                JSL ILOCATE
.390883		e2 20		sep #$20	                SEP #$20        ; set A short
.390885		a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.390887		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.390889		d0 0b		bne $390896	                BNE eol_done        ; No: exit the loop
.39088b		22 96 09 39	jsl $390996	                JSL ICSRLEFT        ; Yes: move to the left
.39088f		a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.390891		d0 f2		bne $390885	                BNE eol_loop        ; No: try again
.390893		82 7a ff	brl $390810	                BRL done            ; Yes: we're done
.390896		a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.390898		e8		inx		                INX
.390899		e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.39089b		d0 03		bne $3908a0	                BNE eol_right
.39089d		82 70 ff	brl $390810	                BRL done            ; Yes: we're done
.3908a0		22 63 09 39	jsl $390963	eol_right       JSL ICSRRIGHT       ; No: move right one column
.3908a4		82 69 ff	brl $390810	                BRL done
.3908a7		da		phx		SCRSHIFTLL      PHX
.3908a8		5a		phy		                PHY
.3908a9		48		pha		                PHA
.3908aa		0b		phd		                PHD
.3908ab		08		php		                PHP
.3908ac		48		pha		                PHA             ; begin setdp macro
.3908ad		08		php		                PHP
.3908ae		c2 20		rep #$20	                REP #$20        ; set A long
.3908b0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908b3		5b		tcd		                TCD
.3908b4		28		plp		                PLP
.3908b5		68		pla		                PLA             ; end setdp macro
.3908b6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908b8		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908ba		a8		tay		                TAY                 ; Set it as the destination
.3908bb		aa		tax		                TAX
.3908bc		e8		inx		                INX                 ; And set the next cell as the source
.3908bd		18		clc		                CLC                 ; Calculate the length of the block to move
.3908be		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908c0		e5 1a		sbc $1a		                SBC CURSORX
.3908c2		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3908c5		28		plp		                PLP
.3908c6		2b		pld		                PLD
.3908c7		68		pla		                PLA
.3908c8		7a		ply		                PLY
.3908c9		fa		plx		                PLX
.3908ca		6b		rtl		                RTL
.3908cb		da		phx		SCRSHIFTLR      PHX
.3908cc		48		pha		                PHA
.3908cd		0b		phd		                PHD
.3908ce		08		php		                PHP
.3908cf		48		pha		                PHA             ; begin setdp macro
.3908d0		08		php		                PHP
.3908d1		c2 20		rep #$20	                REP #$20        ; set A long
.3908d3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908d6		5b		tcd		                TCD
.3908d7		28		plp		                PLP
.3908d8		68		pla		                PLA             ; end setdp macro
.3908d9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908db		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3908dd		1a		inc a		                INC A
.3908de		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3908e0		b0 1b		bcs $3908fd	                BGE done            ; Yes: just skip the whole thing
.3908e2		38		sec		                SEC                 ; Calculate the length of the block to move
.3908e3		a5 0f		lda $0f		                LDA COLS_VISIBLE
.3908e5		e5 1a		sbc $1a		                SBC CURSORX
.3908e7		1a		inc a		                INC A
.3908e8		18		clc		                CLC
.3908e9		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.3908eb		3a		dec a		                DEC A
.3908ec		a8		tay		                TAY                 ; Make it the destination
.3908ed		3a		dec a		                DEC A               ; Move to the previous column
.3908ee		aa		tax		                TAX                 ; Make it the source
.3908ef		38		sec		                SEC                 ; Calculate the length of the block to move
.3908f0		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908f2		e5 1a		sbc $1a		                SBC CURSORX
.3908f4		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3908f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3908f9		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3908fb		87 17		sta [$17]	                STA [CURSORPOS]
.3908fd		28		plp		done            PLP
.3908fe		2b		pld		                PLD
.3908ff		68		pla		                PLA
.390900		fa		plx		                PLX
.390901		6b		rtl		                RTL
.390902						IPUTB
.390902		6b		rtl		                RTL
.390903						IPRINTCR
.390903		da		phx		                PHX
.390904		5a		phy		                PHY
.390905		8b		phb		                PHB
.390906		0b		phd		                PHD
.390907		08		php		                PHP
.390908		48		pha		                PHA             ; begin setdbr macro
.390909		08		php		                PHP
.39090a		e2 20		sep #$20	                SEP #$20        ; set A short
.39090c		a9 00		lda #$00	                LDA #0
.39090e		48		pha		                PHA
.39090f		ab		plb		                PLB
.390910		28		plp		                PLP
.390911		68		pla		                PLA             ; end setdbr macro
.390912		48		pha		                PHA             ; begin setdp macro
.390913		08		php		                PHP
.390914		c2 20		rep #$20	                REP #$20        ; set A long
.390916		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390919		5b		tcd		                TCD
.39091a		28		plp		                PLP
.39091b		68		pla		                PLA             ; end setdp macro
.39091c		e2 20		sep #$20	                SEP #$20        ; set A short
.39091e		c2 10		rep #$10	                REP #$10        ; set X long
.390920		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390924		f0 1c		beq $390942	                BEQ scr_printcr
.390926		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390928		f0 06		beq $390930	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39092a		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39092c		f0 02		beq $390930	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39092e		80 1c		bra $39094c	                BRA done
.390930		22 89 5b 39	jsl $395b89	uart_printcr    JSL UART_SELECT
.390934		a9 0d		lda #$0d	                LDA #CHAR_CR
.390936		22 7f 07 39	jsl $39077f	                JSL IPUTC
.39093a		a9 0a		lda #$0a	                LDA #CHAR_LF
.39093c		22 7f 07 39	jsl $39077f	                JSL IPUTC
.390940		80 0a		bra $39094c	                BRA done
.390942		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390945		a4 1c		ldy $1c		                LDY CURSORY
.390947		c8		iny		                INY
.390948		22 07 0a 39	jsl $390a07	                JSL ILOCATE
.39094c		28		plp		done            PLP
.39094d		2b		pld		                PLD
.39094e		ab		plb		                PLB
.39094f		7a		ply		                PLY
.390950		fa		plx		                PLX
.390951		6b		rtl		                RTL
.390952		da		phx		ICSRHOME        PHX
.390953		5a		phy		                PHY
.390954		08		php		                PHP
.390955		a2 00 00	ldx #$0000	                LDX #0
.390958		a0 00 00	ldy #$0000	                LDY #0
.39095b		22 07 0a 39	jsl $390a07	                JSL ILOCATE
.39095f		28		plp		                PLP
.390960		7a		ply		                PLY
.390961		fa		plx		                PLX
.390962		6b		rtl		                RTL
.390963		da		phx		ICSRRIGHT       PHX
.390964		5a		phy		                PHY
.390965		48		pha		                PHA
.390966		0b		phd		                PHD
.390967		08		php		                PHP
.390968		c2 20		rep #$20	                REP #$20        ; set A long
.39096a		c2 10		rep #$10	                REP #$10        ; set X long
.39096c		48		pha		                PHA             ; begin setdp macro
.39096d		08		php		                PHP
.39096e		c2 20		rep #$20	                REP #$20        ; set A long
.390970		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390973		5b		tcd		                TCD
.390974		28		plp		                PLP
.390975		68		pla		                PLA             ; end setdp macro
.390976		a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.390978		e8		inx		                INX
.390979		a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39097b		e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.39097d		90 0d		bcc $39098c	                BCC icsrright_nowrap  ; No: just set the position
.39097f		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390982		c8		iny		                INY                   ; And move to the next row
.390983		c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390985		90 05		bcc $39098c	                BCC icsrright_nowrap  ; No: just set the position
.390987		88		dey		                DEY                   ; Yes: lock to the last row
.390988		22 53 0a 39	jsl $390a53	                JSL ISCROLLUP         ; But scroll the screen up
.39098c						icsrright_nowrap
.39098c		22 07 0a 39	jsl $390a07	                JSL ILOCATE           ; Set the cursor position
.390990		28		plp		                PLP
.390991		2b		pld		                PLD
.390992		68		pla		                PLA
.390993		7a		ply		                PLY
.390994		fa		plx		                PLX
.390995		6b		rtl		                RTL
.390996						ICSRLEFT
.390996		da		phx		                PHX
.390997		5a		phy		                PHY
.390998		48		pha		                PHA
.390999		0b		phd		                PHD
.39099a		08		php		                PHP
.39099b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39099d		48		pha		                PHA             ; begin setdp macro
.39099e		08		php		                PHP
.39099f		c2 20		rep #$20	                REP #$20        ; set A long
.3909a1		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909a4		5b		tcd		                TCD
.3909a5		28		plp		                PLP
.3909a6		68		pla		                PLA             ; end setdp macro
.3909a7		a5 1a		lda $1a		                LDA CURSORX
.3909a9		f0 0b		beq $3909b6	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3909ab		a6 1a		ldx $1a		                LDX CURSORX
.3909ad		ca		dex		                DEX
.3909ae		86 1a		stx $1a		                STX CURSORX
.3909b0		a4 1c		ldy $1c		                LDY CURSORY
.3909b2		22 07 0a 39	jsl $390a07	                JSL ILOCATE
.3909b6						icsrleft_done_already_zero
.3909b6		28		plp		                PLP
.3909b7		2b		pld		                PLD
.3909b8		68		pla		                PLA
.3909b9		7a		ply		                PLY
.3909ba		fa		plx		                PLX
.3909bb		6b		rtl		                RTL
.3909bc						ICSRUP
.3909bc		da		phx		                PHX
.3909bd		5a		phy		                PHY
.3909be		48		pha		                PHA
.3909bf		0b		phd		                PHD
.3909c0		08		php		                PHP
.3909c1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909c3		48		pha		                PHA             ; begin setdp macro
.3909c4		08		php		                PHP
.3909c5		c2 20		rep #$20	                REP #$20        ; set A long
.3909c7		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909ca		5b		tcd		                TCD
.3909cb		28		plp		                PLP
.3909cc		68		pla		                PLA             ; end setdp macro
.3909cd		a5 1c		lda $1c		                LDA CURSORY
.3909cf		f0 0b		beq $3909dc	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909d1		a4 1c		ldy $1c		                LDY CURSORY
.3909d3		88		dey		                DEY
.3909d4		84 1c		sty $1c		                STY CURSORY
.3909d6		a6 1a		ldx $1a		                LDX CURSORX
.3909d8		22 07 0a 39	jsl $390a07	                JSL ILOCATE
.3909dc						isrup_done_already_zero
.3909dc		28		plp		                PLP
.3909dd		2b		pld		                PLD
.3909de		68		pla		                PLA
.3909df		7a		ply		                PLY
.3909e0		fa		plx		                PLX
.3909e1		6b		rtl		                RTL
.3909e2		da		phx		ICSRDOWN        PHX
.3909e3		5a		phy		                PHY
.3909e4		0b		phd		                PHD
.3909e5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909e7		48		pha		                PHA             ; begin setdp macro
.3909e8		08		php		                PHP
.3909e9		c2 20		rep #$20	                REP #$20        ; set A long
.3909eb		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909ee		5b		tcd		                TCD
.3909ef		28		plp		                PLP
.3909f0		68		pla		                PLA             ; end setdp macro
.3909f1		a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.3909f3		a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.3909f5		c8		iny		                INY
.3909f6		c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.3909f8		90 05		bcc $3909ff	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.3909fa		88		dey		                DEY                         ; Yes: go back to the last row
.3909fb		22 53 0a 39	jsl $390a53	                JSL ISCROLLUP               ; But scroll the screen up
.3909ff						icsrdown_noscroll
.3909ff		22 07 0a 39	jsl $390a07	                JSL ILOCATE                 ; And set the cursor position
.390a03		2b		pld		                PLD
.390a04		7a		ply		                PLY
.390a05		fa		plx		                PLX
.390a06		6b		rtl		                RTL
.390a07		48		pha		ILOCATE         PHA
.390a08		0b		phd		                PHD
.390a09		08		php		                PHP
.390a0a		48		pha		                PHA             ; begin setdp macro
.390a0b		08		php		                PHP
.390a0c		c2 20		rep #$20	                REP #$20        ; set A long
.390a0e		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a11		5b		tcd		                TCD
.390a12		28		plp		                PLP
.390a13		68		pla		                PLA             ; end setdp macro
.390a14		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a16						ilocate_scroll
.390a16		c4 13		cpy $13		                CPY LINES_VISIBLE
.390a18		90 07		bcc $390a21	                BCC ilocate_scrolldone
.390a1a		22 53 0a 39	jsl $390a53	                JSL ISCROLLUP
.390a1e		88		dey		                DEY
.390a1f		80 f5		bra $390a16	                BRA ilocate_scroll
.390a21						ilocate_scrolldone
.390a21		86 1a		stx $1a		                STX CURSORX
.390a23		84 1c		sty $1c		                STY CURSORY
.390a25		a5 0c		lda $0c		                LDA SCREENBEGIN
.390a27						ilocate_row
.390a27		c0 00 00	cpy #$0000	                CPY #$0
.390a2a		f0 08		beq $390a34	                BEQ ilocate_right
.390a2c		18		clc		ilocate_down    CLC
.390a2d		65 11		adc $11		                ADC COLS_PER_LINE
.390a2f		88		dey		                DEY
.390a30		f0 02		beq $390a34	                BEQ ilocate_right
.390a32		80 f8		bra $390a2c	                BRA ilocate_down
.390a34		18		clc		ilocate_right   CLC
.390a35		65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a37		85 17		sta $17		                STA CURSORPOS
.390a39		a4 1c		ldy $1c		                LDY CURSORY
.390a3b		98		tya		                TYA
.390a3c		8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a40		8a		txa		                TXA
.390a41		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a45		c2 20		rep #$20	                REP #$20        ; set A long
.390a47		18		clc		                CLC
.390a48		a5 17		lda $17		                LDA CURSORPOS
.390a4a		69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a4d		85 1f		sta $1f		                STA COLORPOS
.390a4f		28		plp		ilocate_done    PLP
.390a50		2b		pld		                PLD
.390a51		68		pla		                PLA
.390a52		6b		rtl		                RTL
.390a53						ISCROLLUP
.390a53		48		pha		                PHA
.390a54		da		phx		                PHX
.390a55		5a		phy		                PHY
.390a56		8b		phb		                PHB
.390a57		0b		phd		                PHD
.390a58		08		php		                PHP
.390a59		48		pha		                PHA             ; begin setdp macro
.390a5a		08		php		                PHP
.390a5b		c2 20		rep #$20	                REP #$20        ; set A long
.390a5d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a60		5b		tcd		                TCD
.390a61		28		plp		                PLP
.390a62		68		pla		                PLA             ; end setdp macro
.390a63		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a65		a5 11		lda $11		                LDA COLS_PER_LINE
.390a67		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a6b		a5 13		lda $13		                LDA LINES_VISIBLE
.390a6d		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a71		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a75		85 00		sta $00		                STA TMPPTR1
.390a77		18		clc		                CLC
.390a78		a9 00 a0	lda #$a000	                LDA #$A000
.390a7b		a8		tay		                TAY
.390a7c		65 11		adc $11		                ADC COLS_PER_LINE
.390a7e		aa		tax		                TAX
.390a7f		a5 00		lda $00		                LDA TMPPTR1
.390a81		54 af af	mvn $af,$af	                MVN $AF,$AF
.390a84		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a86		18		clc		                CLC
.390a87		a9 00 c0	lda #$c000	                LDA #$C000
.390a8a		a8		tay		                TAY
.390a8b		65 11		adc $11		                ADC COLS_PER_LINE
.390a8d		aa		tax		                TAX
.390a8e		a5 00		lda $00		                LDA TMPPTR1
.390a90		54 af af	mvn $af,$af	                MVN $AF,$AF
.390a93		a5 00		lda $00		                LDA TMPPTR1
.390a95		48		pha		                PHA
.390a96		18		clc		                CLC
.390a97		69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390a9a		85 00		sta $00		                STA TMPPTR1
.390a9c		a0 00 00	ldy #$0000	                LDY #0
.390a9f		a9 20 00	lda #$0020	                LDA #' '
.390aa2		97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390aa4		c8		iny		                INY
.390aa5		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390aa7		d0 f9		bne $390aa2	                BNE clr_text
.390aa9		68		pla		                PLA
.390aaa		18		clc		                CLC
.390aab		69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390aae		85 00		sta $00		                STA TMPPTR1
.390ab0		a0 00 00	ldy #$0000	                LDY #0
.390ab3		a5 1e		lda $1e		                LDA CURCOLOR
.390ab5		97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390ab7		c8		iny		                INY
.390ab8		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390aba		d0 f9		bne $390ab5	                BNE clr_color
.390abc		28		plp		                PLP
.390abd		2b		pld		                PLD
.390abe		ab		plb		                PLB
.390abf		7a		ply		                PLY
.390ac0		fa		plx		                PLX
.390ac1		68		pla		                PLA
.390ac2		6b		rtl		                RTL
.390ac3		08		php		IPRINTH         PHP
.390ac4		48		pha		                PHA
.390ac5						iprinth1
.390ac5		e2 20		sep #$20	                SEP #$20        ; set A short
.390ac7		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390aca		4a		lsr a		                LSR
.390acb		4a		lsr a		                LSR
.390acc		4a		lsr a		                LSR
.390acd		4a		lsr a		                LSR
.390ace		22 1d 0b 39	jsl $390b1d	                JSL iprint_digit
.390ad2		bd 00 00	lda $0000,x	                LDA #0,b,x
.390ad5		22 1d 0b 39	jsl $390b1d	                JSL iprint_digit
.390ad9		ca		dex		                DEX
.390ada		88		dey		                DEY
.390adb		d0 e8		bne $390ac5	                BNE iprinth1
.390add		68		pla		                PLA
.390ade		28		plp		                PLP
.390adf		6b		rtl		                RTL
.390ae0						IPRINTAH
.390ae0		48		pha		                PHA
.390ae1		08		php		                PHP
.390ae2		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390ae6		08		php		                PHP                   ; Get the processor status into A
.390ae7		e2 20		sep #$20	                SEP #$20        ; set A short
.390ae9		c2 10		rep #$10	                REP #$10        ; set X long
.390aeb		68		pla		                PLA
.390aec		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390aee		c9 20		cmp #$20	                CMP #%00100000
.390af0		f0 14		beq $390b06	                BEQ eight_bit
.390af2		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.390af6		4a		lsr a		                LSR A
.390af7		4a		lsr a		                LSR A
.390af8		4a		lsr a		                LSR A
.390af9		4a		lsr a		                LSR A
.390afa		22 1d 0b 39	jsl $390b1d	                JSL iprint_digit      ; And print it
.390afe		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.390b02		22 1d 0b 39	jsl $390b1d	                JSL iprint_digit      ; And print it
.390b06		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390b0a		4a		lsr a		                LSR A
.390b0b		4a		lsr a		                LSR A
.390b0c		4a		lsr a		                LSR A
.390b0d		4a		lsr a		                LSR A
.390b0e		22 1d 0b 39	jsl $390b1d	                JSL iprint_digit      ; And print it
.390b12		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390b16		22 1d 0b 39	jsl $390b1d	                JSL iprint_digit      ; And print it
.390b1a		28		plp		                PLP
.390b1b		68		pla		                PLA
.390b1c		6b		rtl		                RTL
.390b1d		da		phx		iprint_digit    PHX
.390b1e		c2 20		rep #$20	                REP #$20        ; set A long
.390b20		29 0f 00	and #$000f	                AND #$0F
.390b23		aa		tax		                TAX
.390b24		bf a7 81 39	lda $3981a7,x	                LDA hex_digits,X
.390b28		22 7f 07 39	jsl $39077f	                JSL IPUTC       ; Print the digit
.390b2c		fa		plx		                PLX
.390b2d		6b		rtl		                RTL
.390b2e		48		pha		ICLRSCREEN	    PHA
.390b2f		da		phx		                PHX
.390b30		08		php		                PHP
.390b31		e2 20		sep #$20	                SEP #$20        ; set A short
.390b33		c2 10		rep #$10	                REP #$10        ; set X long
.390b35		a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b38		a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b3a		9f 00 a0 af	sta $afa000,x	iclearloop0	STA CS_TEXT_MEM_PTR, x	;
.390b3e		e8		inx		                inx
.390b3f		e0 00 20	cpx #$2000	                cpx #$2000
.390b42		d0 f6		bne $390b3a	                bne iclearloop0
.390b44		a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b47		af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b4b		9f 00 c0 af	sta $afc000,x	iclearloop1     STA CS_COLOR_MEM_PTR, x	;
.390b4f		e8		inx		                inx
.390b50		e0 00 20	cpx #$2000	                cpx #$2000
.390b53		d0 f6		bne $390b4b	                bne iclearloop1
.390b55		28		plp		                PLP
.390b56		fa		plx		                PLX
.390b57		68		pla		                PLA
.390b58		6b		rtl		                RTL
.390b59						COPYBYTES42
.390b59		08		php		                PHP
.390b5a		0b		phd		                PHD
.390b5b		48		pha		                PHA             ; begin setdp macro
.390b5c		08		php		                PHP
.390b5d		c2 20		rep #$20	                REP #$20        ; set A long
.390b5f		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b62		5b		tcd		                TCD
.390b63		28		plp		                PLP
.390b64		68		pla		                PLA             ; end setdp macro
.390b65		e2 20		sep #$20	                SEP #$20        ; set A short
.390b67		c2 10		rep #$10	                REP #$10        ; set X long
.390b69		a0 00 00	ldy #$0000	                LDY #0
.390b6c		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b6e		97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b70		c8		iny		                INY
.390b71		c0 2a 00	cpy #$002a	                CPY #42
.390b74		d0 f6		bne $390b6c	                BNE copy_loop
.390b76		2b		pld		                PLD
.390b77		28		plp		                PLP
.390b78		60		rts		                RTS
.390b79						ICOLORFLAG
.390b79		48		pha		                PHA
.390b7a		da		phx		                PHX
.390b7b		5a		phy		                PHY
.390b7c		08		php		                PHP
.390b7d		8b		phb		                PHB
.390b7e		0b		phd		                PHD
.390b7f		48		pha		                PHA             ; begin setdp macro
.390b80		08		php		                PHP
.390b81		c2 20		rep #$20	                REP #$20        ; set A long
.390b83		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b86		5b		tcd		                TCD
.390b87		28		plp		                PLP
.390b88		68		pla		                PLA             ; end setdp macro
.390b89		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b8b		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390b8e		85 04		sta $04		                STA TMPPTR2
.390b90		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390b93		85 06		sta $06		                STA TMPPTR2+2
.390b95		a9 04 7e	lda #$7e04	                LDA #<>greet_clr_line1
.390b98		85 00		sta $00		                STA TMPPTR1
.390b9a		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390b9d		85 02		sta $02		                STA TMPPTR1+2
.390b9f		20 59 0b	jsr $390b59	                JSR COPYBYTES42
.390ba2		18		clc		                CLC
.390ba3		a5 04		lda $04		                LDA TMPPTR2
.390ba5		65 11		adc $11		                ADC COLS_PER_LINE
.390ba7		85 04		sta $04		                STA TMPPTR2
.390ba9		a9 2e 7e	lda #$7e2e	                LDA #<>greet_clr_line2
.390bac		85 00		sta $00		                STA TMPPTR1
.390bae		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390bb1		85 02		sta $02		                STA TMPPTR1+2
.390bb3		20 59 0b	jsr $390b59	                JSR COPYBYTES42
.390bb6		18		clc		                CLC
.390bb7		a5 04		lda $04		                LDA TMPPTR2
.390bb9		65 11		adc $11		                ADC COLS_PER_LINE
.390bbb		85 04		sta $04		                STA TMPPTR2
.390bbd		a9 58 7e	lda #$7e58	                LDA #<>greet_clr_line3
.390bc0		85 00		sta $00		                STA TMPPTR1
.390bc2		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390bc5		85 02		sta $02		                STA TMPPTR1+2
.390bc7		20 59 0b	jsr $390b59	                JSR COPYBYTES42
.390bca		18		clc		                CLC
.390bcb		a5 04		lda $04		                LDA TMPPTR2
.390bcd		65 11		adc $11		                ADC COLS_PER_LINE
.390bcf		85 04		sta $04		                STA TMPPTR2
.390bd1		a9 82 7e	lda #$7e82	                LDA #<>greet_clr_line4
.390bd4		85 00		sta $00		                STA TMPPTR1
.390bd6		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390bd9		85 02		sta $02		                STA TMPPTR1+2
.390bdb		20 59 0b	jsr $390b59	                JSR COPYBYTES42
.390bde		18		clc		                CLC
.390bdf		a5 04		lda $04		                LDA TMPPTR2
.390be1		65 11		adc $11		                ADC COLS_PER_LINE
.390be3		85 04		sta $04		                STA TMPPTR2
.390be5		a9 ac 7e	lda #$7eac	                LDA #<>greet_clr_line5
.390be8		85 00		sta $00		                STA TMPPTR1
.390bea		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390bed		85 02		sta $02		                STA TMPPTR1+2
.390bef		20 59 0b	jsr $390b59	                JSR COPYBYTES42
.390bf2		2b		pld		                PLD
.390bf3		ab		plb		                PLB
.390bf4		28		plp		                PLP
.390bf5		7a		ply		                PLY
.390bf6		fa		plx		                PLX
.390bf7		68		pla		                PLA
.390bf8		6b		rtl		                RTL
.390bf9		0b		phd		IINITCHLUT		  PHD
.390bfa		08		php		                PHP
.390bfb		48		pha		                PHA
.390bfc		da		phx		                PHX
.390bfd		e2 20		sep #$20	                SEP #$20        ; set A short
.390bff		e2 10		sep #$10	                SEP #$10        ; set X short
.390c01		a2 00		ldx #$00					        LDX	#$00
.390c03		bf d6 7e 39	lda $397ed6,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data
.390c07		9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c0b		e8		inx		                inx
.390c0c		e0 40		cpx #$40	                cpx #$40
.390c0e		d0 f3		bne $390c03	                bne lutinitloop0
.390c10		a2 00		ldx #$00	                LDX	#$00
.390c12		bf 16 7f 39	lda $397f16,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390c16		9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c1a		e8		inx		                INX
.390c1b		e0 40		cpx #$40	                CPX #$40
.390c1d		d0 f3		bne $390c12	                bne lutinitloop1
.390c1f		c2 20		rep #$20	                REP #$20        ; set A long
.390c21		c2 10		rep #$10	                REP #$10        ; set X long
.390c23		fa		plx		                PLX
.390c24		68		pla		                PLA
.390c25		28		plp		                PLP
.390c26		2b		pld		                PLD
.390c27		6b		rtl		                RTL
.390c28						IINITGAMMATABLE
.390c28		e2 20		sep #$20	                SEP #$20        ; set A short
.390c2a		c2 10		rep #$10	                REP #$10        ; set X long
.390c2c		a2 00 00	ldx #$0000	                ldx #$0000
.390c2f		bf 00 86 39	lda $398600,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c33		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c37		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c3b		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c3f		e8		inx		                inx
.390c40		e0 00 01	cpx #$0100	                cpx #$0100
.390c43		d0 ea		bne $390c2f	                bne initgammaloop
.390c45		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c47		6b		rtl		                RTL
.390c48		48		pha		IINITALLLUT     PHA
.390c49		da		phx		                PHX
.390c4a		a2 00 00	ldx #$0000	                LDX #$0000
.390c4d		e2 20		sep #$20	                SEP #$20        ; set A short
.390c4f		a9 00		lda #$00	                LDA #$00
.390c51		85 0a		sta $0a		                STA $0A     ; Temp Location
.390c53						iinit_lut_loop
.390c53		86 02		stx $02		                STX $02
.390c55		a6 0a		ldx $0a		                LDX $0A
.390c57		bf 00 85 39	lda $398500,x	                LDA GAMMA_2_2_Tbl, x
.390c5b		49 55		eor #$55	                EOR  #$55
.390c5d		a6 02		ldx $02		                LDX $02
.390c5f		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c63		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c67		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c6b		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c6f		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c73		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c77		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c7b		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c7f		e8		inx		                inx
.390c80		86 02		stx $02		                STX $02
.390c82		a6 0a		ldx $0a		                LDX $0A
.390c84		bf 00 87 39	lda $398700,x	                LDA RANDOM_LUT_Tbl, x
.390c88		a6 02		ldx $02		                LDX $02
.390c8a		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c8e		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c92		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c96		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c9a		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c9e		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ca2		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ca6		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390caa		e8		inx		                inx
.390cab		86 02		stx $02		                STX $02
.390cad		a6 0a		ldx $0a		                LDX $0A
.390caf		bf 00 86 39	lda $398600,x	                LDA GAMMA_1_8_Tbl, x
.390cb3		49 aa		eor #$aa	                EOR  #$AA
.390cb5		a6 02		ldx $02		                LDX $02
.390cb7		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cbb		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cbf		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cc3		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cc7		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390ccb		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ccf		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cd3		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cd7		e8		inx		                inx
.390cd8		a9 ff		lda #$ff	                LDA #$FF
.390cda		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cde		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ce2		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ce6		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cea		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cee		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cf2		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cf6		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cfa		e6 0a		inc $0a		                inc $0A
.390cfc		e8		inx		                inx
.390cfd		e0 00 04	cpx #$0400	                cpx #$0400
.390d00		f0 03		beq $390d05	                beq iinit_lut_exit
.390d02		82 4e ff	brl $390c53	                brl iinit_lut_loop
.390d05						iinit_lut_exit
.390d05		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d07		fa		plx		                PLX
.390d08		68		pla		                PLA
.390d09		6b		rtl		                RTL
.390d0a						INITVKYTXTMODE_BYPASS_DPSW
.390d0a		48		pha		                PHA
.390d0b		08		php		                PHP
.390d0c		80 24		bra $390d32	                BRA WeNeed640480Here
.390d0e						IINITVKYTXTMODE
.390d0e		48		pha		                PHA
.390d0f		08		php		                PHP
.390d10		e2 20		sep #$20	                SEP #$20        ; set A short
.390d12		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.390d16		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.390d18		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.390d1a		f0 16		beq $390d32	                BEQ WeNeed640480Here
.390d1c		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d20		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390d22		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.390d24		f0 33		beq $390d59	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.390d26		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390d2a		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.390d2c		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d30		80 27		bra $390d59	                BRA INITVICKYMODEHIRES
.390d32						WeNeed640480Here:
.390d32		e2 20		sep #$20	                SEP #$20        ; set A short
.390d34		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d38		29 01		and #$01	                AND #$01
.390d3a		c9 01		cmp #$01	                CMP #$01
.390d3c		d0 15		bne $390d53	                BNE INITVICKYMODE
.390d3e		a9 00		lda #$00	                LDA #$00
.390d40		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d44		ea		nop		                NOP
.390d45		ea		nop		                NOP
.390d46		ea		nop		                NOP
.390d47		ea		nop		                NOP
.390d48		ea		nop		                NOP
.390d49		a9 01		lda #$01	                LDA #$01
.390d4b		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d4f		ea		nop		                NOP
.390d50		ea		nop		                NOP
.390d51		ea		nop		                NOP
.390d52		ea		nop		                NOP
.390d53						INITVICKYMODE
.390d53		a9 00		lda #$00	                LDA #$00
.390d55		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.390d59						INITVICKYMODEHIRES
.390d59		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390d5b		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d5f		e2 20		sep #$20	                SEP #$20        ; set A short
.390d61		a9 00		lda #$00	                LDA #$00
.390d63		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d67		a9 54		lda #$54	                LDA #$54
.390d69		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d6d		a9 54		lda #$54	                LDA #$54
.390d6f		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d73		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d75		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d79		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d7b		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d7f		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d83		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d85		22 8c 0d 39	jsl $390d8c	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d89		28		plp		                PLP
.390d8a		68		pla		                PLA
.390d8b		6b		rtl		                RTL
.390d8c						ISETSIZES
.390d8c		48		pha		                PHA
.390d8d		da		phx		                PHX
.390d8e		5a		phy		                PHY
.390d8f		8b		phb		                PHB
.390d90		0b		phd		                PHD
.390d91		08		php		                PHP
.390d92		48		pha		                PHA             ; begin setdp macro
.390d93		08		php		                PHP
.390d94		c2 20		rep #$20	                REP #$20        ; set A long
.390d96		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390d99		5b		tcd		                TCD
.390d9a		28		plp		                PLP
.390d9b		68		pla		                PLA             ; end setdp macro
.390d9c		48		pha		                PHA             ; begin setdbr macro
.390d9d		08		php		                PHP
.390d9e		e2 20		sep #$20	                SEP #$20        ; set A short
.390da0		a9 00		lda #$00	                LDA #0
.390da2		48		pha		                PHA
.390da3		ab		plb		                PLB
.390da4		28		plp		                PLP
.390da5		68		pla		                PLA             ; end setdbr macro
.390da6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.390da8		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390dac		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390dae		0a		asl a		                ASL A
.390daf		aa		tax		                TAX                         ; Index to the col/line count in X
.390db0		c2 20		rep #$20	                REP #$20        ; set A long
.390db2		bf 2f 0e 39	lda $390e2f,x	                LDA cols_by_res,X           ; Get the number of columns
.390db6		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390db8		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390dba		bf 37 0e 39	lda $390e37,x	                LDA lines_by_res,X          ; Get the number of lines
.390dbe		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390dc0		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390dc2		e2 20		sep #$20	                SEP #$20        ; set A short
.390dc4		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390dc8		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390dca		f0 5c		beq $390e28	                BEQ done                    ; No border... the sizes are correct now
.390dcc		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390dd0		29 3f		and #$3f	                AND #$3F
.390dd2		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390dd4		d0 04		bne $390dda	                BNE frac_width
.390dd6		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390dd7		4a		lsr a		                LSR A
.390dd8		80 03		bra $390ddd	                BRA store_width
.390dda		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390ddb		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390ddc		1a		inc a		                INC A
.390ddd		85 00		sta $00		store_width     STA TMPPTR1
.390ddf		64 01		stz $01		                STZ TMPPTR1+1
.390de1		e2 20		sep #$20	                SEP #$20        ; set A short
.390de3		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390de7		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390de9		f0 04		beq $390def	                BEQ adjust_width            ; No... just adjust the width of the screen
.390deb		c2 20		rep #$20	                REP #$20        ; set A long
.390ded		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390def						adjust_width
.390def		c2 20		rep #$20	                REP #$20        ; set A long
.390df1		38		sec		                SEC
.390df2		a5 11		lda $11		                LDA COLS_PER_LINE
.390df4		e5 00		sbc $00		                SBC TMPPTR1
.390df6		85 0f		sta $0f		                STA COLS_VISIBLE
.390df8		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390dfc		29 3f 00	and #$003f	                AND #$3F
.390dff		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390e02		d0 04		bne $390e08	                BNE frac_height
.390e04		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390e05		4a		lsr a		                LSR A
.390e06		80 03		bra $390e0b	                BRA store_height
.390e08		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390e09		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390e0a		1a		inc a		                INC A
.390e0b		85 00		sta $00		store_height    STA TMPPTR1
.390e0d		64 01		stz $01		                STZ TMPPTR1+1
.390e0f		e2 20		sep #$20	                SEP #$20        ; set A short
.390e11		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390e15		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390e17		f0 04		beq $390e1d	                BEQ adjust_height           ; No... just adjust the height of the screen
.390e19		c2 20		rep #$20	                REP #$20        ; set A long
.390e1b		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390e1d						adjust_height
.390e1d		c2 20		rep #$20	                REP #$20        ; set A long
.390e1f		38		sec		                SEC
.390e20		a5 15		lda $15		                LDA LINES_MAX
.390e22		e5 00		sbc $00		                SBC TMPPTR1
.390e24		85 13		sta $13		                STA LINES_VISIBLE
.390e26		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e28		28		plp		done            PLP
.390e29		2b		pld		                PLD
.390e2a		ab		plb		                PLB
.390e2b		7a		ply		                PLY
.390e2c		fa		plx		                PLX
.390e2d		68		pla		                PLA
.390e2e		6b		rtl		                RTL
>390e2f		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390e37		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390e3f						IINITVKYGRPMODE
.390e3f		48		pha		                PHA
.390e40		e2 20		sep #$20	                SEP #$20        ; set A short
.390e42		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e44		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390e48		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e4a		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390e4e		a9 c0		lda #$c0	                LDA #$C0
.390e50		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390e54		a9 00		lda #$00	                LDA #$00
.390e56		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390e5a		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e5c		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e60		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e62		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e66		a9 c0		lda #$c0	                LDA #$C0
.390e68		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e6c		a9 00		lda #$00	                LDA #$00
.390e6e		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e72		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e74		68		pla		                PLA
.390e75		6b		rtl		                RTL
.390e76						IINITTILEMODE
.390e76		6b		rtl		                RTL
.390e77		6b		rtl		INOP            RTL
.390e78						IINITFONTSET
.390e78		48		pha		                PHA
.390e79		da		phx		                PHX
.390e7a		5a		phy		                PHY
.390e7b		8b		phb		                PHB
.390e7c		08		php		                PHP
.390e7d		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e7f		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390e82		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390e85		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390e88		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390e8b		28		plp		                PLP
.390e8c		ab		plb		                PLB
.390e8d		7a		ply		                PLY
.390e8e		fa		plx		                PLX
.390e8f		68		pla		                PLA
.390e90		6b		rtl		                RTL
.390e91						INITMOUSEPOINTER
.390e91		e2 20		sep #$20	                SEP #$20        ; set A short
.390e93		c2 10		rep #$10	                REP #$10        ; set X long
.390e95		a2 00 00	ldx #$0000	                LDX #$0000
.390e98						FILL_MOUSE_MARKER
.390e98		bf 00 88 39	lda $398800,x	                LDA @lMOUSE_POINTER_PTR,X
.390e9c		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390ea0		e8		inx		                INX
.390ea1		e0 00 01	cpx #$0100	                CPX #$0100
.390ea4		d0 f2		bne $390e98	                BNE FILL_MOUSE_MARKER
.390ea6		ea		nop		                nop
.390ea7		a9 01		lda #$01	                LDA #$01
.390ea9		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390ead		c2 30		rep #$30	                REP #$30        ; set A&X long
.390eaf		6b		rtl		                RTL
.390eb0						IINITCURSOR
.390eb0		e2 20		sep #$20	                SEP #$20        ; set A short
.390eb2		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390eb4		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390eb8		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390eba		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390ebe		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ec0		a9 00 00	lda #$0000	                LDA #$0000;
.390ec3		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390ec7		a9 06 00	lda #$0006	                LDA #$0006;
.390eca		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390ece		6b		rtl		                RTL
.390ecf		0b		phd		IINITSUPERIO	  PHD
.390ed0		08		php		                PHP
.390ed1		48		pha		                PHA
.390ed2		e2 20		sep #$20	                SEP #$20        ; set A short
.390ed4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ed6		8f 23 11 af	sta $af1123	                STA GP10_REG
.390eda		af 23 11 af	lda $af1123	                LDA GP10_REG
.390ede		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ee0		8f 24 11 af	sta $af1124	                STA GP11_REG
.390ee4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ee6		8f 25 11 af	sta $af1125	                STA GP12_REG
.390eea		a9 01		lda #$01	        	LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390eec		8f 26 11 af	sta $af1126	        	STA GP13_REG
.390ef0		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390ef2		8f 27 11 af	sta $af1127	        	STA GP14_REG
.390ef6		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390ef8		8f 28 11 af	sta $af1128	        	STA GP15_REG
.390efc		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390efe		8f 29 11 af	sta $af1129	        	STA GP16_REG
.390f02		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390f04		8f 2a 11 af	sta $af112a	        	STA GP17_REG
.390f08		a9 00		lda #$00	        	LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390f0a		8f 2b 11 af	sta $af112b	        	STA GP20_REG
.390f0e		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f10		8f 2f 11 af	sta $af112f			STA GP24_REG
.390f14		a9 05		lda #$05			LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390f16		8f 30 11 af	sta $af1130			STA GP25_REG
.390f1a		a9 84		lda #$84			LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390f1c		8f 31 11 af	sta $af1131			STA GP26_REG
.390f20		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390f22		8f 33 11 af	sta $af1133			STA GP30_REG
.390f26		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390f28		8f 34 11 af	sta $af1134			STA GP31_REG
.390f2c		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390f2e		8f 35 11 af	sta $af1135			STA GP32_REG
.390f32		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390f34		8f 36 11 af	sta $af1136			STA GP33_REG
.390f38		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390f3a		8f 37 11 af	sta $af1137			STA GP34_REG
.390f3e		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390f40		8f 38 11 af	sta $af1138			STA GP35_REG
.390f44		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390f46		8f 39 11 af	sta $af1139			STA GP36_REG
.390f4a		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390f4c		8f 3a 11 af	sta $af113a			STA GP37_REG
.390f50		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f52		8f 3d 11 af	sta $af113d			STA GP42_REG
.390f56		a9 01		lda #$01			LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390f58		8f 3e 11 af	sta $af113e			STA GP43_REG
.390f5c		a9 05		lda #$05			LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390f5e		8f 3f 11 af	sta $af113f			STA GP50_REG
.390f62		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390f64		8f 40 11 af	sta $af1140	                STA GP51_REG
.390f68		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390f6a		8f 41 11 af	sta $af1141	                STA GP52_REG
.390f6e		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390f70		8f 42 11 af	sta $af1142	                STA GP53_REG
.390f74		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390f76		8f 43 11 af	sta $af1143	                STA GP54_REG
.390f7a		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390f7c		8f 44 11 af	sta $af1144	                STA GP55_REG
.390f80		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390f82		8f 45 11 af	sta $af1145	                STA GP56_REG
.390f86		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390f88		8f 46 11 af	sta $af1146	                STA GP57_REG
.390f8c		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.390f8e		8f 47 11 af	sta $af1147	                STA GP60_REG
.390f92		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.390f94		8f 48 11 af	sta $af1148	                STA GP61_REG
.390f98		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390f9a		8f 4b 11 af	sta $af114b	                STA GP1_REG
.390f9e		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390fa0		8f 4c 11 af	sta $af114c	                STA GP2_REG
.390fa4		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390fa6		8f 4d 11 af	sta $af114d	                STA GP3_REG
.390faa		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390fac		8f 4e 11 af	sta $af114e	                STA GP4_REG
.390fb0		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390fb2		8f 4f 11 af	sta $af114f	                STA GP5_REG
.390fb6		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390fb8		8f 50 11 af	sta $af1150	                STA GP6_REG
.390fbc		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390fbe		8f 5d 11 af	sta $af115d	                STA LED1_REG
.390fc2		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390fc4		8f 5e 11 af	sta $af115e	                STA LED2_REG
.390fc8		c2 20		rep #$20	                REP #$20        ; set A long
.390fca		68		pla		                PLA
.390fcb		28		plp			        PLP
.390fcc		2b		pld				PLD
.390fcd		6b		rtl		                RTL
.390fce		0b		phd		IINITKEYBOARD	PHD
.390fcf		08		php				PHP
.390fd0		48		pha				PHA
.390fd1		da		phx				PHX
.390fd2		e2 20		sep #$20	                SEP #$20        ; set A short
.390fd4		c2 10		rep #$10	                REP #$10        ; set X long
.390fd6		18		clc		                CLC
.390fd7		20 6d 10	jsr $39106d	                JSR Poll_Inbuf ;
.390fda		a9 aa		lda #$aa			LDA #$AA			;Send self test command
.390fdc		8f 07 18 af	sta $af1807			STA KBD_CMD_BUF
.390fe0		20 78 10	jsr $391078	                JSR Poll_Outbuf ;
.390fe3		af 03 18 af	lda $af1803	                LDA KBD_OUT_BUF		;Check self test result
.390fe7		c9 55		cmp #$55	                CMP #$55
.390fe9		f0 03		beq $390fee	                BEQ	passAAtest
.390feb		82 72 00	brl $391060	                BRL initkb_loop_out
.390fee						passAAtest
.390fee		a9 ab		lda #$ab			LDA #$AB			;Send test Interface command
.390ff0		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.390ff4		20 78 10	jsr $391078	                JSR Poll_Outbuf ;
.390ff7		af 03 18 af	lda $af1803			LDA KBD_OUT_BUF		;Display Interface test results
.390ffb		c9 00		cmp #$00			CMP #$00			;Should be 00
.390ffd		f0 03		beq $391002			BEQ	passABtest
.390fff		82 5e 00	brl $391060	                BRL initkb_loop_out
.391002						passABtest
.391002		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.391004		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.391008		20 6d 10	jsr $39106d	                JSR Poll_Inbuf ;
.39100b		a9 43		lda #$43	                LDA #%01000011      ; Enable Interrupt - Translation from CODE 2 to CODE 1 Scan code is enable
.39100d		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF
.391011		20 6d 10	jsr $39106d	                JSR Poll_Inbuf ;
.391014		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391016		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF
.39101a		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39101d		ca		dex		DLY_LOOP1       DEX
.39101e		ea		nop		                NOP
.39101f		ea		nop		                NOP
.391020		ea		nop		                NOP
.391021		ea		nop		                NOP
.391022		ea		nop		                NOP
.391023		ea		nop		                NOP
.391024		ea		nop		                NOP
.391025		ea		nop		                NOP
.391026		e0 00 00	cpx #$0000	                CPX #$0000
.391029		d0 f2		bne $39101d	                BNE DLY_LOOP1
.39102b		20 78 10	jsr $391078	                JSR Poll_Outbuf ;
.39102e		af 03 18 af	lda $af1803	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391032						DO_CMD_F4_AGAIN
.391032		20 6d 10	jsr $39106d	                JSR Poll_Inbuf ;
.391035		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391037		8f 03 18 af	sta $af1803					        STA KBD_DATA_BUF
.39103b		20 78 10	jsr $391078	                JSR Poll_Outbuf ;
.39103e		af 03 18 af	lda $af1803					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391042		c9 fa		cmp #$fa	                CMP #$FA
.391044		d0 ec		bne $391032	                BNE DO_CMD_F4_AGAIN
.391046		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.39104a		29 01		and #$01	                AND #FNX1_INT00_KBD
.39104c		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.391050		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391054		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391056		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39105a		a2 d2 7f	ldx #$7fd2	                LDX #<>Success_kb_init
.39105d		38		sec		                SEC
.39105e		b0 00		bcs $391060	                BCS InitKbSuccess
.391060						initkb_loop_out
.391060		22 5f 07 39	jsl $39075f	InitKbSuccess   JSL IPRINT       ; print Message
.391064		c2 20		rep #$20	                REP #$20        ; set A long
.391066		c2 10		rep #$10	                REP #$10        ; set X long
.391068		fa		plx		                PLX
.391069		68		pla		                PLA
.39106a		28		plp						        PLP
.39106b		2b		pld						        PLD
.39106c		6b		rtl		                RTL
.39106d						Poll_Inbuf
.39106d		af 07 18 af	lda $af1807	                LDA STATUS_PORT		; Load Status Byte
.391071		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.391073		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.391075		f0 f6		beq $39106d					        BEQ Poll_Inbuf
.391077		60		rts		                RTS
.391078						Poll_Outbuf
.391078		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.39107c		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.39107e		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.391080		d0 f6		bne $391078	                BNE Poll_Outbuf
.391082		60		rts		                RTS
.391083		0b		phd		IINITMOUSE      PHD
.391084		08		php						        PHP
.391085		48		pha						        PHA
.391086		da		phx						        PHX
.391087		e2 20		sep #$20	                SEP #$20        ; set A short
.391089		c2 10		rep #$10	                REP #$10        ; set X long
.39108b		18		clc		                CLC
.39108c		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39108f						DO_CMD_A9_AGAIN
.39108f		20 6d 10	jsr $39106d	                JSR Poll_Inbuf
.391092		a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.391094		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.391098		20 12 11	jsr $391112	                JSR Poll_Outbuf_Mouse_TimeOut ;
.39109b		af 03 18 af	lda $af1803					        LDA KBD_OUT_BUF		; Clear the Output buffer
.39109f		c9 00		cmp #$00	                CMP #$00
.3910a1		d0 ec		bne $39108f	                BNE DO_CMD_A9_AGAIN
.3910a3		a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.3910a5		20 ec 10	jsr $3910ec	                JSR MOUSE_WRITE
.3910a8		20 ff 10	jsr $3910ff	                JSR MOUSE_READ ;***
.3910ab		a9 e8		lda #$e8	                LDA #$E8
.3910ad		20 ec 10	jsr $3910ec	                JSR MOUSE_WRITE
.3910b0		20 ff 10	jsr $3910ff	                JSR MOUSE_READ ;***
.3910b3		a9 00		lda #$00	                LDA #$00
.3910b5		20 ec 10	jsr $3910ec	                JSR MOUSE_WRITE
.3910b8		20 ff 10	jsr $3910ff	                JSR MOUSE_READ ;***
.3910bb		a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.3910bd		20 ec 10	jsr $3910ec	                JSR MOUSE_WRITE
.3910c0		20 ff 10	jsr $3910ff	                JSR MOUSE_READ ;***
.3910c3		a9 00		lda #$00	                LDA #$00
.3910c5		85 e0		sta $e0		                STA MOUSE_PTR
.3910c7		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3910cb		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3910cd		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3910d1		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.3910d5		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.3910d7		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.3910db		c2 10		rep #$10	                REP #$10        ; set X long
.3910dd		a2 e4 7f	ldx #$7fe4	                LDX #<>Success_ms_init
.3910e0		80 03		bra $3910e5	                BRA InitMsSuccess
.3910e2		a2 1b 80	ldx #$801b	initms_loop_out LDX #<>Failed_ms_init
.3910e5						InitMsSuccess
.3910e5		c2 20		rep #$20	                REP #$20        ; set A long
.3910e7		fa		plx		                PLX
.3910e8		68		pla		                PLA
.3910e9		28		plp				PLP
.3910ea		2b		pld				PLD
.3910eb		6b		rtl		                RTL
.3910ec						MOUSE_WRITE
.3910ec		48		pha		                PHA
.3910ed		20 6d 10	jsr $39106d	                JSR Poll_Inbuf    ; Test bit $01 (if 2, Full)
.3910f0		a9 d4		lda #$d4	                LDA #$D4
.3910f2		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF   ; KBD_CMD_BUF		= $AF1064
.3910f6		20 6d 10	jsr $39106d	                JSR Poll_Inbuf
.3910f9		68		pla		                PLA
.3910fa		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF  ; KBD_DATA_BUF	= $AF1060
.3910fe		60		rts		                RTS
.3910ff						MOUSE_READ
.3910ff		20 07 11	jsr $391107	                JSR Poll_Outbuf_Mouse   ; Test bit $01 (if 1, Full)
.391102		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF  ; KBD_INPT_BUF	= $AF1060
.391106		60		rts		                RTS
.391107						Poll_Outbuf_Mouse
.391107		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.39110b		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.39110d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.39110f		d0 f6		bne $391107	                BNE Poll_Outbuf_Mouse
.391111		60		rts		                RTS
.391112						Poll_Outbuf_Mouse_TimeOut
.391112		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.391116		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.391118		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.39111a		f0 08		beq $391124	                BEQ Poll_OutbufWeAreDone
.39111c		ca		dex		                DEX
.39111d		e0 00 00	cpx #$0000	                CPX #$0000
.391120		d0 f0		bne $391112	                BNE Poll_Outbuf_Mouse_TimeOut
.391122		80 be		bra $3910e2	                BRA initms_loop_out
.391124						Poll_OutbufWeAreDone:
.391124		60		rts		                RTS
.391125		48		pha		INITRTC         PHA
.391126		08		php		                PHP
.391127		e2 20		sep #$20	                SEP #$20        ; set A short
.391129		a9 00		lda #$00	                LDA #0
.39112b		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39112f		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.391133		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391137		09 04		ora #$04	                ORA #%00000100
.391139		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.39113d		28		plp		                PLP
.39113e		68		pla		                PLA
.39113f		6b		rtl		                RTL
.391140		48		pha		IINITCODEC      PHA
.391141		08		php		                PHP
.391142		c2 20		rep #$20	                REP #$20        ; set A long
.391144		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.391147		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39114b		a9 01 00	lda #$0001	                LDA #$0001
.39114e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391152		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.391155		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391158		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39115c		a9 01 00	lda #$0001	                LDA #$0001
.39115f		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391163		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.391166		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.391169		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39116d		a9 01 00	lda #$0001	                LDA #$0001
.391170		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391174		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.391177		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.39117a		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39117e		a9 01 00	lda #$0001	                LDA #$0001
.391181		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391185		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.391188		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.39118b		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39118f		a9 01 00	lda #$0001	                LDA #$0001
.391192		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391196		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.391199		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.39119c		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911a0		a9 01 00	lda #$0001	                LDA #$0001
.3911a3		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911a7		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.3911aa		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.3911ad		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911b1		a9 01 00	lda #$0001	                LDA #$0001
.3911b4		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911b8		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.3911bb		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.3911be		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911c2		a9 01 00	lda #$0001	                LDA #$0001
.3911c5		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911c9		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.3911cc		28		plp		                PLP
.3911cd		68		pla		                PLA
.3911ce		6b		rtl		                RTL
.3911cf						IRESETCODEC
.3911cf		c2 20		rep #$20	                REP #$20        ; set A long
.3911d1		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3911d4		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911d8		a9 01 00	lda #$0001	                LDA #$0001
.3911db		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911df		20 e3 11	jsr $3911e3	                JSR CODEC_TRF_FINISHED
.3911e2		6b		rtl		                RTL
.3911e3						CODEC_TRF_FINISHED
.3911e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3911e5		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3911e9		29 01		and #$01	                AND #$01
.3911eb		c9 01		cmp #$01	                CMP #$01
.3911ed		f0 f6		beq $3911e5	                BEQ CODEC_LOOP
.3911ef		c2 20		rep #$20	                REP #$20        ; set A long
.3911f1		60		rts		                RTS
.3911f2						IBM_FILL_SCREEN
.3911f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3911f4		a9 00 00	lda #$0000	                LDA #$0000
.3911f7		a2 00 00	ldx #$0000	                LDX #$0000
.3911fa						BM_FILL_SCREEN_LOOPY
.3911fa		a0 00 00	ldy #$0000	                LDY #$0000
.3911fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3911ff						BM_FILL_SCREEN_LOOPX
.3911ff		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391201		c8		iny		                INY
.391202		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.391204		d0 f9		bne $3911ff	                BNE BM_FILL_SCREEN_LOOPX
.391206		20 11 12	jsr $391211	                JSR BM_FILL_COMPUTE_Y_DST
.391209		e8		inx		                INX
.39120a		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.39120c		d0 ec		bne $3911fa	                BNE BM_FILL_SCREEN_LOOPY
.39120e		c2 30		rep #$30	                REP #$30        ; set A&X long
.391210		6b		rtl		                RTL
.391211						BM_FILL_COMPUTE_Y_DST
.391211		c2 20		rep #$20	                REP #$20        ; set A long
.391213		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391215		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391219		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.39121b		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39121f		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.391222		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391226		a9 00 00	lda #$0000	                LDA #$0000
.391229		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39122d		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391231		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391233		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391237		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391239		a9 00 00	lda #$0000	                LDA #$0000
.39123c		60		rts		                RTS
.39123d						IBMP_PARSER
.39123d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39123f		a0 00 00	ldy #$0000	                LDY #$0000
.391242		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391244		c9 42 4d	cmp #$4d42	                CMP #$4D42
.391247		f0 03		beq $39124c	                BEQ IBMP_PARSER_CONT
.391249		82 04 01	brl $391350	                BRL BMP_PARSER_END_WITH_ERROR
.39124c						IBMP_PARSER_CONT
.39124c		a0 02 00	ldy #$0002	                LDY #$0002
.39124f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391251		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391255		a0 04 00	ldy #$0004	                LDY #$0004
.391258		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.39125a		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39125e		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391261		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391265		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391269		18		clc		                CLC
.39126a		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39126e		85 50		sta $50		                STA BMP_FILE_SIZE
.391270		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391274		85 52		sta $52		                STA BMP_FILE_SIZE+2
.391276		a0 12 00	ldy #$0012	                LDY #$0012
.391279		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39127b		85 40		sta $40		                STA BMP_X_SIZE
.39127d		a0 16 00	ldy #$0016	                LDY #$0016
.391280		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391282		85 42		sta $42		                STA BMP_Y_SIZE
.391284		a0 2e 00	ldy #$002e	                LDY #$002E
.391287		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391289		0a		asl a		                ASL A; Multiply by 2
.39128a		0a		asl a		                ASL A; Multiply by 2
.39128b		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.39128d		e0 00 00	cpx #$0000	                CPX #$0000
.391290		d0 05		bne $391297	                BNE BMP_LUT1_PICK
.391292		20 58 13	jsr $391358	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.391295		80 08		bra $39129f	                BRA DONE_TRANSFER_LUT;
.391297						  BMP_LUT1_PICK
.391297		e0 01 00	cpx #$0001	                CPX #$0001
.39129a		d0 03		bne $39129f	                BNE BMP_LUT2_PICK
.39129c		20 88 13	jsr $391388	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.39129f						  BMP_LUT2_PICK
.39129f						  DONE_TRANSFER_LUT
.39129f		a5 56		lda $56		                LDA BMP_POSITION_Y
.3912a1		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.3912a5		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.3912a7		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.3912ab		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.3912af		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3912b3		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.3912b7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3912bb		a5 54		lda $54		                LDA BMP_POSITION_X
.3912bd		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3912c1		a9 00 00	lda #$0000	                LDA #$0000
.3912c4		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3912c8		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3912cc		85 f0		sta $f0		                STA USER_TEMP
.3912ce		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3912d2		85 f2		sta $f2		                STA USER_TEMP+2
.3912d4		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3912d6		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3912da		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3912dc		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3912e0		a5 f0		lda $f0		                LDA USER_TEMP
.3912e2		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3912e6		a5 f2		lda $f2		                LDA USER_TEMP+2
.3912e8		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3912ec		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.3912f0		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3912f2		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.3912f6		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.3912f8		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.3912fa		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3912fe		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.391300		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391304		a5 50		lda $50		                LDA BMP_FILE_SIZE
.391306		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39130a		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.39130c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391310		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391314		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391316		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39131a		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39131c		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39131e		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391322		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391324		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391328		18		clc		                CLC
.391329		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.39132b		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39132e		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391331		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391335		a9 ff ff	lda #$ffff	                LDA #$FFFF
.391338		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.39133c		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391340		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391342		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391346		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391348		20 b8 13	jsr $3913b8	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.39134b		a2 68 80	ldx #$8068	                LDX #<>bmp_parser_msg0
.39134e		80 03		bra $391353	                BRA BMP_PARSER_END_NO_ERROR
.391350						BMP_PARSER_END_WITH_ERROR
.391350		a2 54 80	ldx #$8054	                LDX #<>bmp_parser_err0
.391353						BMP_PARSER_END_NO_ERROR
.391353		22 5f 07 39	jsl $39075f	                JSL IPRINT       ; print the first line
.391357		6b		rtl		                RTL
.391358						BMP_PARSER_UPDATE_LUT0
.391358		38		sec		                SEC
.391359		a0 7a 00	ldy #$007a	                LDY #$007A
.39135c		a2 00 00	ldx #$0000	                LDX #$0000
.39135f		e2 20		sep #$20	                SEP #$20        ; set A short
.391361						BMP_PARSER_UPDATE_LOOP
.391361		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391363		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391367		c8		iny		                INY
.391368		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39136a		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.39136e		c8		iny		                INY
.39136f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391371		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391375		c8		iny		                INY
.391376		a9 80		lda #$80	                LDA #$80
.391378		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.39137c		c8		iny		                INY ; For the Alpha Value, nobody cares
.39137d		e8		inx		                INX
.39137e		e8		inx		                INX
.39137f		e8		inx		                INX
.391380		e8		inx		                INX
.391381		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391383		d0 dc		bne $391361	                BNE BMP_PARSER_UPDATE_LOOP
.391385		c2 20		rep #$20	                REP #$20        ; set A long
.391387		60		rts		                RTS
.391388						BMP_PARSER_UPDATE_LUT1
.391388		38		sec		                SEC
.391389		a0 36 00	ldy #$0036	                LDY #$0036
.39138c		a2 00 00	ldx #$0000	                LDX #$0000
.39138f		e2 20		sep #$20	                SEP #$20        ; set A short
.391391						PALETTE_LUT1_LOOP
.391391		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391393		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.391397		c8		iny		                INY
.391398		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39139a		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.39139e		c8		iny		                INY
.39139f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3913a1		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.3913a5		c8		iny		                INY
.3913a6		a9 80		lda #$80	                LDA #$80
.3913a8		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.3913ac		c8		iny		                INY ; For the Alpha Value, nobody cares
.3913ad		e8		inx		                INX
.3913ae		e8		inx		                INX
.3913af		e8		inx		                INX
.3913b0		e8		inx		                INX
.3913b1		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3913b3		d0 dc		bne $391391	                BNE PALETTE_LUT1_LOOP
.3913b5		c2 20		rep #$20	                REP #$20        ; set A long
.3913b7		60		rts		                RTS
.3913b8						BMP_PARSER_DMA_SHIT_OUT
.3913b8		a2 00 00	ldx #$0000	                LDX #$0000
.3913bb						BMP_PARSER_LOOPY
.3913bb		a0 00 00	ldy #$0000	                LDY #$0000
.3913be		e2 20		sep #$20	                SEP #$20        ; set A short
.3913c0						BMP_PARSER_LOOPX
.3913c0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3913c2		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913c4		c8		iny		                INY
.3913c5		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3913c7		d0 f7		bne $3913c0	                BNE BMP_PARSER_LOOPX
.3913c9		20 d5 13	jsr $3913d5	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3913cc		20 f0 13	jsr $3913f0	                JSR BMP_PARSER_COMPUTE_Y_DST
.3913cf		e8		inx		                INX
.3913d0		e4 42		cpx $42		                CPX BMP_Y_SIZE
.3913d2		d0 e7		bne $3913bb	                BNE BMP_PARSER_LOOPY
.3913d4		60		rts		                RTS
.3913d5						BMP_PARSER_COMPUTE_Y_SRC
.3913d5		c2 20		rep #$20	                REP #$20        ; set A long
.3913d7		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913d9		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913dd		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3913df		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913e3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913e7		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3913e9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913ed		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3913ef		60		rts		                RTS
.3913f0						BMP_PARSER_COMPUTE_Y_DST
.3913f0		c2 20		rep #$20	                REP #$20        ; set A long
.3913f2		18		clc		                CLC
.3913f3		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3913f5		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.3913f7		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.3913f9		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3913fb		69 00 00	adc #$0000	                ADC #$0000
.3913fe		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391400		60		rts		                RTS
.391401		ea		nop		ILOOP           NOP
.391402		ea		nop		                NOP
.391403		ea		nop		                NOP
.391404		ea		nop		                NOP
.391405		ea		nop		                NOP
.391406		ea		nop		                NOP
.391407		ea		nop		                NOP
.391408		ea		nop		                NOP
.391409		ea		nop		                NOP
.39140a		ea		nop		                NOP
.39140b		6b		rtl		                RTL
.39140c		22 01 14 39	jsl $391401	ILOOP_1         JSL ILOOP
.391410		22 01 14 39	jsl $391401	                JSL ILOOP
.391414		22 01 14 39	jsl $391401	                JSL ILOOP
.391418		22 01 14 39	jsl $391401	                JSL ILOOP
.39141c		22 01 14 39	jsl $391401	                JSL ILOOP
.391420		22 01 14 39	jsl $391401	                JSL ILOOP
.391424		22 01 14 39	jsl $391401	                JSL ILOOP
.391428		22 01 14 39	jsl $391401	                JSL ILOOP
.39142c		22 01 14 39	jsl $391401	                JSL ILOOP
.391430		22 01 14 39	jsl $391401	                JSL ILOOP
.391434		6b		rtl		                RTL
.391435		22 0c 14 39	jsl $39140c	ILOOP_1MS       JSL ILOOP_1
.391439		6b		rtl		                RTL
.39143a		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.39143d		f0 07		beq $391446	                BEQ LOOP_MS_END
.39143f		22 35 14 39	jsl $391435	                JSL ILOOP_1MS
.391443		ca		dex		                DEX
.391444		80 f4		bra $39143a	                BRA ILOOP_MS
.391446		6b		rtl		LOOP_MS_END     RTL
.391447						IDELAY
.391447		8b		phb		                PHB
.391448		08		php		                PHP
.391449		48		pha		                PHA             ; begin setdbr macro
.39144a		08		php		                PHP
.39144b		e2 20		sep #$20	                SEP #$20        ; set A short
.39144d		a9 00		lda #$00	                LDA #0
.39144f		48		pha		                PHA
.391450		ab		plb		                PLB
.391451		28		plp		                PLP
.391452		68		pla		                PLA             ; end setdbr macro
.391453		e2 20		sep #$20	                SEP #$20        ; set A short
.391455		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391457		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39145b		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.39145f		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391461		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391465		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391467		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39146a		a9 00		lda #$00	                LDA #0
.39146c		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391470		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.391474		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391478		c2 30		rep #$30	                REP #$30        ; set A&X long
.39147a		8a		txa		                TXA
.39147b		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.39147f		98		tya		                TYA
.391480		e2 20		sep #$20	                SEP #$20        ; set A short
.391482		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.391486		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391488		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39148c		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.39148e		cb		wai		loop            WAI                         ; Wait for an interrupt
.39148f		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391492		f0 fa		beq $39148e	                BEQ loop                    ; Keep checking until it's set
.391494		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.391496		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39149a		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39149c		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39149f		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.3914a3		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.3914a5		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3914a9		28		plp		                PLP
.3914aa		ab		plb		                PLB
.3914ab		6b		rtl		                RTL
.3914ac						SHOW_CREDITS
.3914ac		48		pha		                PHA
.3914ad		da		phx		                PHX
.3914ae		5a		phy		                PHY
.3914af		08		php		                PHP
.3914b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3914b2		c2 10		rep #$10	                REP #$10        ; set X long
.3914b4		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3914b8		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3914ba		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3914be		a2 00 00	ldx #$0000	                LDX #0
.3914c1		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3914c5		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3914c9		bf 00 18 3b	lda $3b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3914cd		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3914d1		e8		inx		                INX
.3914d2		e0 00 20	cpx #$2000	                CPX #128 * 64
.3914d5		d0 ea		bne $3914c1	                BNE credit_loop
.3914d7		22 f9 06 39	jsl $3906f9	                JSL IGETCHW                     ; Wait for a keypress
.3914db		22 2e 0b 39	jsl $390b2e	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3914df		22 52 09 39	jsl $390952	                JSL ICSRHOME                    ; Move cursor to the home position
.3914e3		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3914e7		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3914e9		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3914ed		28		plp		                PLP
.3914ee		7a		ply		                PLY
.3914ef		fa		plx		                PLX
.3914f0		68		pla		                PLA
.3914f1		6b		rtl		                RTL
.3914f2		00		brk #		ISCINIT         BRK ;
.3914f3		00		brk #		IIOINIT         BRK ;
.3914f4		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.3914f5		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.3914f6		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.3914f7		00		brk #		ICLOSE          BRK ; Close a channel
.3914f8		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3914f9		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3914fa		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3914fb		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3914fc		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3914fd		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3914fe		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3914ff		00		brk #		IPRINTF         BRK ; Print a float value
.391500		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391501		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391502		00		brk #		IPUSHKEY        BRK ;
.391503		00		brk #		IPUSHKEYS       BRK ;
.391504		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391505		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391506		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>391507		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>39150f		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>39151f		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391527		12
>391528		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>391530		15
>391531		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391537		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>39153c		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>391542		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>39154a		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391558		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391560		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>39156e		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>391576		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>391584		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>39158c		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>39159a		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3915a2		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3915b0		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3915b8		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3915c6		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3915ce		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3915dc		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3915e4		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>3915f2		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3915fa		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391608		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>391610		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>39161e		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391626		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391634		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>39163c		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>39164a		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>391652		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391660		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391668		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>391676		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>39167e		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>39168c		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>391694		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3916a2		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3916aa		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3916b8		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3916c0		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3916ce		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3916d6		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3916e4		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3916ec		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3916fa		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>391702		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>391710		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391718		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391726		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39172e		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>39173c		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391744		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>391752		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>39175a		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391768		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391770		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>39177e		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>391786		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>391794		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>39179c		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3917aa		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3917b2		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3917c0		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3917c8		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3917d6		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3917de		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3917ec		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>3917f4		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>391802		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>39180a		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391818		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>391820		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>39182e		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391836		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391844		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>39184c		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>39185a		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391862		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391870		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391878		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391886		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>39188e		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>39189c		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3918a4		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>3918b2		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>3918ba		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>3918c8		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>3918d0		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>3918de		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>3918e6		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>3918f4		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>3918fc		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>39190a		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391912		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391920		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391928		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391936		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>39193e		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>39194c		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391954		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391962		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>39196a		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391978		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391980		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>39198e		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391996		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3919a4		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>3919ac		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>3919ba		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>3919c2		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>3919d0		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>3919d8		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>3919e6		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>3919ee		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>3919fc		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391a04		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391a12		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391a1a		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391a28		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391a30		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391a3e		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391a46		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391a54		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391a5c		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391a6a		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391a72		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391a80		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391a88		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391a96		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391a9e		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391aac		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391ab4		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391ac2		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391aca		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391ad8		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391ae0		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391aee		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391af6		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391b04		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391b0c		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391b1a		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391b22		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391b30		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391b38		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391b46		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391b4e		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391b5c		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391b64		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391b72		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391b7a		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391b88		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391b90		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391b9e		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391ba6		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391bb4		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391bbc		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391bca		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391bd2		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391be0		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391be8		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391bf6		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391bfe		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391c0c		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391c14		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391c22		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391c2a		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391c38		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391c40		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391c4e		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391c56		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391c64		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391c6c		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391c7a		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391c82		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391c90		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391c98		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391ca6		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391cae		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391cbc		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391cc4		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391cd2		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391cda		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391ce8		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391cf0		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391cfe		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391d06		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391d14		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391d1c		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391d2a		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391d32		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391d40		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391d48		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391d56		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391d5e		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391d6c		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391d74		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391d82		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391d8a		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391d98		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391da0		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391dae		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391db6		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391dc4		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391dcc		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391dda		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391de2		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391df0		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391df8		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391e06		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391e0e		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391e1c		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391e24		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391e32		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391e3a		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391e48		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391e50		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391e5e		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391e66		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391e74		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391e7c		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391e8a		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391e92		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391ea0		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391ea8		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391eb6		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391ebe		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391ecc		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391ed4		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391ee2		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391eea		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391ef8		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391f00		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391f0e		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391f16		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391f24		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391f2c		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391f3a		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391f42		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391f50		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391f58		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391f66		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391f6e		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391f7c		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391f84		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391f92		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391f9a		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391fa8		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391fb0		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391fbe		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391fc6		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391fd4		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391fdc		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391fea		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391ff2		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>392000		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>392008		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>392016		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>39201e		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>39202c		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>392034		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>392042		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>39204a		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392058		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392060		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>39206e		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>392076		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>392084		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>39208c		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>39209a		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>3920a2		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>3920b0		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>3920b8		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>3920c6		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>3920ce		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3920dc		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3920e4		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>3920f2		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>3920fa		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>392108		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>392110		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>39211e		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>392126		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392134		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>39213c		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>39214a		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>392152		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392160		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392168		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>392176		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>39217e		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>39218c		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>392194		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>3921a2		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>3921aa		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>3921b8		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3921c0		00 87 fa 00
>3921c4		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3921cc		00 88 98 03
>3921d0		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3921d8		00 88 98 03
>3921dc		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3921e4		00 f9 69 00
>3921e8		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>3921f0		80 e8 4a 00
>3921f4		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>3921fc		00 f6 9a 00
>392200		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392208		1b f2 34 00
>39220c		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>392214		00 f7 8a 00
>392218		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>392220		00 f6 47 00
>392224		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39222c		00 f9 69 00
>392230		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392238		00 f7 a9 00
>39223c		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392244		00 87 fa 00
>392248		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392250		00 f7 a9 00
>392254		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39225c		00 f5 f5 00
>392260		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392268		06 b8 d8 03
>39226c		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392274		00 f5 f5 00
>392278		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392280		06 b8 d8 03
>392284		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39228c		00 f5 f5 00
>392290		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>392298		10 74 f8 03
>39229c		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3922a4		00 f5 f5 00
>3922a8		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3922b0		00 f5 f5 00
>3922b4		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3922bc		05 c5 d4 03
>3922c0		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3922c8		00 f5 f5 00
>3922cc		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3922d4		04 f9 44 03
>3922d8		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3922e0		05 c5 d4 03
>3922e4		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3922ec		04 f9 44 03
>3922f0		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>3922f8		03 87 f7 03
>3922fc		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392304		05 c5 d4 03
>392308		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>392310		00 f6 28 00
>392314		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39231c		05 c5 d4 03
>392320		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392328		00 f5 f7 01
>39232c		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392334		04 f9 44 03
>392338		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392340		00 99 f9 00
>392344		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>39234c		00 a8 f7 00
>392350		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392358		00 99 f9 00
>39235c		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392364		00 a6 f6 00
>392368		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392370		00 a6 f6 00
>392374		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>39237c		00 f6 36 02
>392380		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392388		00 f6 36 02
>39238c		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392394		00 96 e8 01
>392398		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3923a0		00 96 e8 01
>3923a4		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3923ac		02 79 77 03
>3923b0		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3923b8		02 79 77 03
>3923bc		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3923c4		00 a5 2b 02
>3923c8		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3923d0		00 93 3b 02
>3923d4		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3923dc		01 89 3b 03
>3923e0		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3923e8		0a 53 2b 02
>3923ec		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>3923f4		00 f6 89 00
>3923f8		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392400		00 f6 9a 00
>392404		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39240c		00 f6 9a 00
>392410		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>392418		00 87 4b 01
>39241c		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>392424		00 78 67 01
>392428		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>392430		02 f8 fc 00
>392434		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39243c		40 f5 f5 00
>392440		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392448		02 79 77 03
>39244c		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392454		40 f5 f5 00
>392458		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392460		40 f5 f5 00
>392464		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39246c		00 f9 69 00
>392470		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392478		00 f9 69 00
>39247c		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392484		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>392488		b8 21 39 00 c4 21 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392490		d0 21 39 00 dc 21 39 00
>392498		e8 21 39 00 f4 21 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3924a0		00 22 39 00 0c 22 39 00
>3924a8		18 22 39 00 24 22 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3924b0		30 22 39 00 3c 22 39 00
>3924b8		48 22 39 00 54 22 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3924c0		60 22 39 00 6c 22 39 00
>3924c8		78 22 39 00 84 22 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3924d0		90 22 39 00 9c 22 39 00
>3924d8		a8 22 39 00 b4 22 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3924e0		c0 22 39 00 cc 22 39 00
>3924e8		d8 22 39 00 e4 22 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>3924f0		f0 22 39 00 fc 22 39 00
>3924f8		08 23 39 00 14 23 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>392500		20 23 39 00 2c 23 39 00
>392508		38 23 39 00 44 23 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>392510		50 23 39 00 5c 23 39 00
>392518		68 23 39 00 74 23 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>392520		80 23 39 00 8c 23 39 00
>392528		98 23 39 00 a4 23 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>392530		b0 23 39 00 bc 23 39 00
>392538		c8 23 39 00 d4 23 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392540		e0 23 39 00 ec 23 39 00
>392548		f8 23 39 00 04 24 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392550		10 24 39 00 1c 24 39 00
>392558		28 24 39 00 34 24 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392560		40 24 39 00 4c 24 39 00
>392568		58 24 39 00 64 24 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392570		70 24 39 00 7c 24 39 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>392578		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392580		00 b1 f5 01
>392584		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>39258c		03 f1 f5 00
>392590		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392598		03 c1 f5 00
>39259c		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3925a4		00 92 f5 01
>3925a8		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3925b0		00 f1 f9 00
>3925b4		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>3925bc		00 f1 f5 00
>3925c0		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3925c8		02 81 f6 01
>3925cc		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3925d4		00 c2 b9 01
>3925d8		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3925e0		05 b2 35 00
>3925e4		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3925ec		1b f2 34 00
>3925f0		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>3925f8		01 f5 74 00
>3925fc		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>392604		00 61 e3 00
>392608		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>392610		00 a4 64 00
>392614		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>39261c		07 b5 f5 00
>392620		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392628		00 f3 74 00
>39262c		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392634		00 c3 94 01
>392638		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392640		00 f4 0d 01
>392644		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>39264c		00 f5 0b 01
>392650		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392658		00 bf 07 00
>39265c		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>392664		00 6d 08 01
>392668		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392670		00 51 17 01
>392674		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>39267c		00 51 17 01
>392680		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392688		00 53 08 01
>39268c		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>392694		00 53 06 01
>392698		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3926a0		00 d2 f8 00
>3926a4		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3926ac		00 e2 c7 01
>3926b0		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3926b8		00 f1 9c 00
>3926bc		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3926c4		02 f2 c9 01
>3926c8		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3926d0		03 95 fb 00
>3926d4		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3926dc		04 a1 59 00
>3926e0		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3926e8		03 91 fc 03
>3926ec		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>3926f4		02 b4 ec 00
>3926f8		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>392700		00 93 f7 00
>392704		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>39270c		04 c1 58 00
>392710		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392718		02 c3 6a 00
>39271c		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392724		00 62 87 00
>392728		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>392730		00 f3 97 00
>392734		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>39273c		00 b3 97 00
>392740		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392748		04 f3 cc 00
>39274c		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392754		00 93 aa 00
>392758		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392760		00 78 08 01
>392764		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39276c		00 78 08 01
>392770		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392778		00 54 27 01
>39277c		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>392784		00 61 56 00
>392788		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392790		00 75 16 01
>392794		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>39279c		00 f5 f6 01
>3927a0		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3927a8		80 f3 e3 00
>3927ac		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3927b4		00 b5 f5 00
>3927b8		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3927c0		80 71 16 00
>3927c4		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3927cc		00 30 55 01
>3927d0		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3927d8		00 62 36 01
>3927dc		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3927e4		02 51 07 00
>3927e8		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>3927f0		00 62 39 00
>3927f4		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3927fc		00 66 27 00
>392800		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392808		00 73 46 00
>39280c		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>392814		00 74 76 01
>392818		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>392820		81 92 38 00
>392824		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>39282c		02 71 19 00
>392830		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392838		01 81 09 00
>39283c		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392844		00 83 4b 02
>392848		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392850		05 71 59 00
>392854		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>39285c		03 82 39 00
>392860		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392868		82 84 17 00
>39286c		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392874		02 72 16 00
>392878		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392880		00 7b 0a 00
>392884		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>39288c		00 85 0c 01
>392890		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392898		00 7b 0a 01
>39289c		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3928a4		00 79 18 01
>3928a8		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>3928b0		01 73 08 00
>3928b4		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>3928bc		04 77 0a 00
>3928c0		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>3928c8		00 51 19 00
>3928cc		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>3928d4		01 74 09 00
>3928d8		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>3928e0		01 63 28 00
>3928e4		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>3928ec		00 65 0a 00
>3928f0		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>3928f8		00 67 29 00
>3928fc		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392904		00 67 09 00
>392908		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392910		01 6a 28 00
>392914		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>39291c		00 55 27 00
>392920		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392928		00 6f 08 00
>39292c		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392934		00 7a 07 00
>392938		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392940		06 a2 0d 00
>392944		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>39294c		00 a3 5f 00
>392950		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392958		00 42 27 00
>39295c		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392964		05 b2 49 00
>392968		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392970		00 b2 79 01
>392974		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>39297c		00 7a 1a 00
>392980		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392988		00 82 28 01
>39298c		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392994		02 c3 5f 00
>392998		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3929a0		86 c4 95 01
>3929a4		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>3929ac		00 44 15 00
>3929b0		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>3929b8		00 d1 06 00
>3929bc		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>3929c4		00 82 37 00
>3929c8		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>3929d0		00 41 35 00
>3929d4		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>3929dc		02 32 f5 01
>3929e0		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>3929e8		00 61 26 00
>3929ec		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>3929f4		84 3f 05 01
>3929f8		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392a00		01 d1 f6 00
>392a04		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392a0c		00 41 05 01
>392a10		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392a18		05 f3 e4 00
>392a1c		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392a24		00 92 f5 01
>392a28		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392a30		04 f2 e4 01
>392a34		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392a3c		00 45 25 00
>392a40		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392a48		01 a3 36 00
>392a4c		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392a54		01 98 05 01
>392a58		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392a60		02 a3 f6 01
>392a64		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392a6c		00 f6 f8 00
>392a70		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392a78		00 f3 f5 00
>392a7c		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392a84		00 94 e5 01
>392a88		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392a90		00 84 44 00
>392a94		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392a9c		03 83 18 01
>392aa0		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392aa8		01 78 08 01
>392aac		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392ab4		03 8e 08 01
>392ab8		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392ac0		09 f2 46 00
>392ac4		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392acc		00 96 e8 01
>392ad0		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392ad8		00 f6 f6 01
>392adc		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392ae4		00 f6 9a 00
>392ae8		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392af0		00 c6 45 00
>392af4		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392afc		00 f4 b4 00
>392b00		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392b08		00 d5 25 00
>392b0c		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392b14		0e 21 2d 00
>392b18		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392b20		00 55 87 02
>392b24		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392b2c		08 98 87 01
>392b30		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392b38		04 17 04 03
>392b3c		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392b44		05 77 f9 02
>392b48		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392b50		02 f4 08 00
>392b54		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392b5c		00 36 05 01
>392b60		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392b68		05 32 55 03
>392b6c		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392b74		00 f3 df 00
>392b78		78 25 39 00 84 25 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392b80		90 25 39 00 9c 25 39 00 a8 25 39 00 b4 25 39 00
>392b90		c0 25 39 00 cc 25 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392b98		d8 25 39 00 e4 25 39 00 f0 25 39 00 fc 25 39 00
>392ba8		08 26 39 00 14 26 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392bb0		20 26 39 00 2c 26 39 00 38 26 39 00 44 26 39 00
>392bc0		50 26 39 00 5c 26 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392bc8		68 26 39 00 74 26 39 00 80 26 39 00 8c 26 39 00
>392bd8		98 26 39 00 a4 26 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392be0		b0 26 39 00 bc 26 39 00 c8 26 39 00 d4 26 39 00
>392bf0		e0 26 39 00 ec 26 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392bf8		f8 26 39 00 04 27 39 00 10 27 39 00 1c 27 39 00
>392c08		28 27 39 00 34 27 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392c10		40 27 39 00 4c 27 39 00 58 27 39 00 64 27 39 00
>392c20		70 27 39 00 7c 27 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392c28		88 27 39 00 94 27 39 00 a0 27 39 00 ac 27 39 00
>392c38		b8 27 39 00 c4 27 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392c40		d0 27 39 00 dc 27 39 00 e8 27 39 00 f4 27 39 00
>392c50		00 28 39 00 0c 28 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392c58		18 28 39 00 24 28 39 00 30 28 39 00 3c 28 39 00
>392c68		48 28 39 00 54 28 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392c70		60 28 39 00 6c 28 39 00 78 28 39 00 84 28 39 00
>392c80		90 28 39 00 9c 28 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392c88		a8 28 39 00 b4 28 39 00 c0 28 39 00 cc 28 39 00
>392c98		d8 28 39 00 e4 28 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392ca0		f0 28 39 00 fc 28 39 00 08 29 39 00 14 29 39 00
>392cb0		20 29 39 00 2c 29 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392cb8		38 29 39 00 44 29 39 00 50 29 39 00 5c 29 39 00
>392cc8		68 29 39 00 74 29 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392cd0		80 29 39 00 8c 29 39 00 98 29 39 00 a4 29 39 00
>392ce0		b0 29 39 00 bc 29 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392ce8		c8 29 39 00 d4 29 39 00 e0 29 39 00 ec 29 39 00
>392cf8		f8 29 39 00 04 2a 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392d00		10 2a 39 00 1c 2a 39 00 28 2a 39 00 34 2a 39 00
>392d10		40 2a 39 00 4c 2a 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392d18		58 2a 39 00 64 2a 39 00 70 2a 39 00 7c 2a 39 00
>392d28		88 2a 39 00 94 2a 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392d30		a0 2a 39 00 ac 2a 39 00 b8 2a 39 00 c4 2a 39 00
>392d40		d0 2a 39 00 dc 2a 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392d48		e8 2a 39 00 f4 2a 39 00 00 2b 39 00 0c 2b 39 00
>392d58		18 2b 39 00 24 2b 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392d60		30 2b 39 00 3c 2b 39 00 48 2b 39 00 54 2b 39 00
>392d70		60 2b 39 00 6c 2b 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>392d78		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392d80		0d f2 f7 00
>392d84		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392d8c		07 f2 f7 00
>392d90		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392d98		07 f2 f6 00
>392d9c		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392da4		07 f2 f7 00
>392da8		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392db0		07 f2 f7 00
>392db4		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392dbc		07 f2 f7 00
>392dc0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dc8		00 00 00 00
>392dcc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dd4		00 00 00 00
>392dd8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392de0		00 00 00 00
>392de4		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392dec		87 f2 f1 00
>392df0		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392df8		07 f4 f4 00
>392dfc		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392e04		07 f2 f6 00
>392e08		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392e10		07 e7 f7 00
>392e14		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392e1c		07 f6 f6 00
>392e20		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392e28		87 a3 f3 00
>392e2c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e34		00 00 00 00
>392e38		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e40		00 00 00 00
>392e44		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e4c		00 00 00 00
>392e50		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392e58		07 8a 08 00
>392e5c		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392e64		07 55 14 00
>392e68		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392e70		87 55 04 00
>392e74		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392e7c		07 46 1a 00
>392e80		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392e88		07 61 07 00
>392e8c		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392e94		90 61 07 00
>392e98		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ea0		00 00 00 00
>392ea4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eac		00 00 00 00
>392eb0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eb8		00 00 00 00
>392ebc		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392ec4		87 f3 f8 00
>392ec8		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392ed0		07 f6 3a 00
>392ed4		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392edc		0c 84 19 00
>392ee0		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392ee8		07 94 19 00
>392eec		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392ef4		87 d1 f8 00
>392ef8		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392f00		07 c3 a6 00
>392f04		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f0c		00 00 00 00
>392f10		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f18		00 00 00 00
>392f1c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f24		00 00 00 00
>392f28		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392f30		47 f2 df 00
>392f34		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392f3c		0f a1 df 00
>392f40		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392f48		07 f1 78 00
>392f4c		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392f54		07 f1 18 00
>392f58		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392f60		07 56 26 00
>392f64		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392f6c		07 66 06 00
>392f70		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f78		00 00 00 00
>392f7c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f84		00 00 00 00
>392f88		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f90		00 00 00 00
>392f94		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392f9c		87 85 35 00
>392fa0		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392fa8		87 f3 f4 00
>392fac		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392fb4		07 f2 c3 00
>392fb8		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392fc0		08 72 08 00
>392fc4		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392fcc		07 3f 07 01
>392fd0		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392fd8		07 4f 05 00
>392fdc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fe4		00 00 00 00
>392fe8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ff0		00 00 00 00
>392ff4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ffc		00 00 00 00
>393000		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>393008		07 7a 05 00
>39300c		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>393014		07 a5 45 00
>393018		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>393020		08 8f 09 00
>393024		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>39302c		0c 8f 09 00
>393030		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>393038		07 82 37 00
>39303c		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>393044		07 62 2c 01
>393048		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393050		00 00 00 00
>393054		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39305c		00 00 00 00
>393060		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393068		00 00 00 00
>39306c		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>393074		07 a6 1c 00
>393078		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393080		07 72 0b 00
>393084		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>39308c		07 72 09 00
>393090		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>393098		07 82 09 00
>39309c		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>3930a4		07 72 0f 00
>3930a8		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>3930b0		07 8f 0a 00
>3930b4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930bc		00 00 00 00
>3930c0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930c8		00 00 00 00
>3930cc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930d4		00 00 00 00
>3930d8		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3930e0		07 65 1a 00
>3930e4		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3930ec		07 65 1a 00
>3930f0		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>3930f8		07 75 0a 00
>3930fc		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>393104		07 65 1a 00
>393108		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>393110		07 65 26 00
>393114		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>39311c		07 55 36 00
>393120		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393128		00 00 00 00
>39312c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393134		00 00 00 00
>393138		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393140		00 00 00 00
>393144		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>39314c		07 ff 0f 01
>393150		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393158		87 64 18 00
>39315c		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>393164		07 96 0a 00
>393168		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393170		07 91 2a 00
>393174		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>39317c		47 6f 07 00
>393180		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393188		07 8f 06 02
>39318c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393194		00 00 00 00
>393198		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931a0		00 00 00 00
>3931a4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931ac		00 00 00 00
>3931b0		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>3931b8		07 55 16 00
>3931bc		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>3931c4		07 6a 03 00
>3931c8		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>3931d0		07 42 35 00
>3931d4		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3931dc		07 31 47 01
>3931e0		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3931e8		0a 42 25 00
>3931ec		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>3931f4		07 cf 07 00
>3931f8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393200		00 00 00 00
>393204		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39320c		00 00 00 00
>393210		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393218		00 00 00 00
>39321c		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>393224		8a f2 26 00
>393228		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>393230		07 f2 f5 00
>393234		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>39323c		87 11 13 00
>393240		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393248		87 1d 03 00
>39324c		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393254		07 81 23 00
>393258		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393260		0a f2 f6 01
>393264		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39326c		00 00 00 00
>393270		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393278		00 00 00 00
>39327c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393284		00 00 00 00
>393288		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>393290		07 c2 05 00
>393294		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>39329c		07 6f 0c 01
>3932a0		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>3932a8		07 56 16 00
>3932ac		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>3932b4		88 8f 0b 00
>3932b8		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>3932c0		87 c3 e5 00
>3932c4		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3932cc		07 f8 16 00
>3932d0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932d8		00 00 00 00
>3932dc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932e4		00 00 00 00
>3932e8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932f0		00 00 00 00
>3932f4		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>3932fc		0a f3 03 00
>393300		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>393308		07 f3 02 00
>39330c		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>393314		07 1f ff 03
>393318		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>393320		8f 56 84 02
>393324		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>39332c		0c 34 04 03
>393330		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393338		07 1f 02 03
>39333c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393344		00 00 00 00
>393348		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393350		00 00 00 00
>393354		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39335c		00 00 00 00
>393360		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393368		07 12 16 01
>39336c		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>393374		07 f6 c9 02
>393378		78 2d 39 00 84 2d 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393380		90 2d 39 00 9c 2d 39 00 a8 2d 39 00 b4 2d 39 00
>393390		c0 2d 39 00 cc 2d 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>393398		d8 2d 39 00 e4 2d 39 00 f0 2d 39 00 fc 2d 39 00
>3933a8		08 2e 39 00 14 2e 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>3933b0		20 2e 39 00 2c 2e 39 00 38 2e 39 00 44 2e 39 00
>3933c0		50 2e 39 00 5c 2e 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3933c8		68 2e 39 00 74 2e 39 00 80 2e 39 00 8c 2e 39 00
>3933d8		98 2e 39 00 a4 2e 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3933e0		b0 2e 39 00 bc 2e 39 00 c8 2e 39 00 d4 2e 39 00
>3933f0		e0 2e 39 00 ec 2e 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>3933f8		f8 2e 39 00 04 2f 39 00 10 2f 39 00 1c 2f 39 00
>393408		28 2f 39 00 34 2f 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>393410		40 2f 39 00 4c 2f 39 00 58 2f 39 00 64 2f 39 00
>393420		70 2f 39 00 7c 2f 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393428		88 2f 39 00 94 2f 39 00 a0 2f 39 00 ac 2f 39 00
>393438		b8 2f 39 00 c4 2f 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393440		d0 2f 39 00 dc 2f 39 00 e8 2f 39 00 f4 2f 39 00
>393450		00 30 39 00 0c 30 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393458		18 30 39 00 24 30 39 00 30 30 39 00 3c 30 39 00
>393468		48 30 39 00 54 30 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393470		60 30 39 00 6c 30 39 00 78 30 39 00 84 30 39 00
>393480		90 30 39 00 9c 30 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393488		a8 30 39 00 b4 30 39 00 c0 30 39 00 cc 30 39 00
>393498		d8 30 39 00 e4 30 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3934a0		f0 30 39 00 fc 30 39 00 08 31 39 00 14 31 39 00
>3934b0		20 31 39 00 2c 31 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3934b8		38 31 39 00 44 31 39 00 50 31 39 00 5c 31 39 00
>3934c8		68 31 39 00 74 31 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3934d0		80 31 39 00 8c 31 39 00 98 31 39 00 a4 31 39 00
>3934e0		b0 31 39 00 bc 31 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3934e8		c8 31 39 00 d4 31 39 00 e0 31 39 00 ec 31 39 00
>3934f8		f8 31 39 00 04 32 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>393500		10 32 39 00 1c 32 39 00 28 32 39 00 34 32 39 00
>393510		40 32 39 00 4c 32 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393518		58 32 39 00 64 32 39 00 70 32 39 00 7c 32 39 00
>393528		88 32 39 00 94 32 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>393530		a0 32 39 00 ac 32 39 00 b8 32 39 00 c4 32 39 00
>393540		d0 32 39 00 dc 32 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393548		e8 32 39 00 f4 32 39 00 00 33 39 00 0c 33 39 00
>393558		18 33 39 00 24 33 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393560		30 33 39 00 3c 33 39 00 48 33 39 00 54 33 39 00
>393570		60 33 39 00 6c 33 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>393578		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393580						IOPL2_TONE_TEST
.393580		e2 20		sep #$20	                SEP #$20        ; set A short
.393582		c2 10		rep #$10	                REP #$10        ; set X long
.393584		a2 00 00	ldx #$0000	                LDX #0
.393587						OPL2_TONE_TESTING_L1
.393587		bf 78 35 39	lda $393578,x	                LDA NOTE_INTRO, X
.39358b		29 0f		and #$0f	                AND #$F
.39358d		85 30		sta $30		                STA OPL2_NOTE ; start at C
.39358f		bf 78 35 39	lda $393578,x	                LDA NOTE_INTRO, X
.393593		29 70		and #$70	                AND #$70
.393595		4a		lsr a		                LSR A
.393596		4a		lsr a		                LSR A
.393597		4a		lsr a		                LSR A
.393598		4a		lsr a		                LSR A
.393599		85 31		sta $31		                STA OPL2_OCTAVE
.39359b		8a		txa		                TXA
.39359c		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.39359e		85 27		sta $27		                STA OPL2_CHANNEL
.3935a0		22 70 37 39	jsl $393770	                JSL OPL2_PLAYNOTE
.3935a4		a0 00 00	ldy #$0000	                LDY #$0000
.3935a7						OPL2_TONE_TESTING_L2
.3935a7		ea		nop		                NOP
.3935a8		ea		nop		                NOP
.3935a9		ea		nop		                NOP
.3935aa		ea		nop		                NOP
.3935ab		c8		iny		                INY
.3935ac		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3935af		d0 f6		bne $3935a7	                BNE OPL2_TONE_TESTING_L2
.3935b1		e8		inx		                INX
.3935b2		e0 08 00	cpx #$0008	                CPX #8
.3935b5		d0 d0		bne $393587	                BNE OPL2_TONE_TESTING_L1
.3935b7		6b		rtl		                RTL
.3935b8						OPL2_INIT
.3935b8		c2 20		rep #$20	                REP #$20        ; set A long
.3935ba		a9 00 00	lda #$0000	                LDA #$0000
.3935bd		85 28		sta $28		                STA OPL2_REG_REGION
.3935bf		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3935c1		85 30		sta $30		                STA OPL2_NOTE
.3935c3		85 32		sta $32		                STA OPL2_PARAMETER0
.3935c5		85 34		sta $34		                STA OPL2_PARAMETER2
.3935c7		a9 42 15	lda #$1542	                LDA #<>INSTRUMENT_ACCORDN
.3935ca		85 50		sta $50		                STA RAD_ADDR
.3935cc		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3935cf		85 52		sta $52		                STA RAD_ADDR + 2
.3935d1		e2 20		sep #$20	                SEP #$20        ; set A short
.3935d3		6b		rtl		                RTL
.3935d4						OPL2_Reset
.3935d4		6b		rtl		                RTL
.3935d5						OPL2_Get_FrequencyBlock
.3935d5		6b		rtl		                RTL
.3935d6						OPL2_GET_REGISTER
.3935d6		48		pha		                PHA             ; begin setdp macro
.3935d7		08		php		                PHP
.3935d8		c2 20		rep #$20	                REP #$20        ; set A long
.3935da		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935dd		5b		tcd		                TCD
.3935de		28		plp		                PLP
.3935df		68		pla		                PLA             ; end setdp macro
.3935e0		c2 20		rep #$20	                REP #$20        ; set A long
.3935e2		18		clc		              CLC
.3935e3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935e6		65 32		adc $32		              ADC OPL2_PARAMETER0
.3935e8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935ea		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935ed		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3935f1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935f3		6b		rtl		              RTL
.3935f4						OPL2_GET_WAVEFORM_SELECT
.3935f4		48		pha		                PHA             ; begin setdp macro
.3935f5		08		php		                PHP
.3935f6		c2 20		rep #$20	                REP #$20        ; set A long
.3935f8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935fb		5b		tcd		                TCD
.3935fc		28		plp		                PLP
.3935fd		68		pla		                PLA             ; end setdp macro
.3935fe		c2 20		rep #$20	                REP #$20        ; set A long
.393600		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393603		69 01 00	adc #$0001	              ADC #$0001
.393606		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393608		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39360b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39360d		e2 20		sep #$20	                SEP #$20        ; set A short
.39360f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393611		29 20		and #$20	              AND #$20
.393613		6b		rtl		              RTL
.393614						OPL2_GET_SCALINGLEVEL
.393614		48		pha		                PHA             ; begin setdp macro
.393615		08		php		                PHP
.393616		c2 20		rep #$20	                REP #$20        ; set A long
.393618		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39361b		5b		tcd		                TCD
.39361c		28		plp		                PLP
.39361d		68		pla		                PLA             ; end setdp macro
.39361e		c2 20		rep #$20	                REP #$20        ; set A long
.393620		a9 40 00	lda #$0040	              LDA #$0040  ;
.393623		85 28		sta $28		              STA OPL2_REG_REGION
.393625		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393628		e2 20		sep #$20	                SEP #$20        ; set A short
.39362a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39362c		29 c0		and #$c0	              AND #$C0
.39362e		4a		lsr a		              LSR A
.39362f		4a		lsr a		              LSR A
.393630		4a		lsr a		              LSR A
.393631		4a		lsr a		              LSR A
.393632		4a		lsr a		              LSR A
.393633		4a		lsr a		              LSR A
.393634		6b		rtl		              RTL
.393635						OPL2_GET_BLOCK
.393635		48		pha		                PHA             ; begin setdp macro
.393636		08		php		                PHP
.393637		c2 20		rep #$20	                REP #$20        ; set A long
.393639		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39363c		5b		tcd		                TCD
.39363d		28		plp		                PLP
.39363e		68		pla		                PLA             ; end setdp macro
.39363f		e2 20		sep #$20	                SEP #$20        ; set A short
.393641		18		clc		              CLC
.393642		a5 27		lda $27		              LDA OPL2_CHANNEL
.393644		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393646		69 b0		adc #$b0	              ADC #$B0
.393648		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39364a		a9 00		lda #$00	              LDA #$00
.39364c		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39364e		c2 30		rep #$30	                REP #$30        ; set A&X long
.393650		18		clc		              CLC
.393651		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393654		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393656		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393658		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39365b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39365d		e2 20		sep #$20	                SEP #$20        ; set A short
.39365f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393661		29 1c		and #$1c	              AND #$1C
.393663		4a		lsr a		              LSR A
.393664		4a		lsr a		              LSR A
.393665		6b		rtl		              RTL
.393666						OPL2_GET_KEYON
.393666		48		pha		                PHA             ; begin setdp macro
.393667		08		php		                PHP
.393668		c2 20		rep #$20	                REP #$20        ; set A long
.39366a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39366d		5b		tcd		                TCD
.39366e		28		plp		                PLP
.39366f		68		pla		                PLA             ; end setdp macro
.393670		e2 20		sep #$20	                SEP #$20        ; set A short
.393672		18		clc		              CLC
.393673		a5 27		lda $27		              LDA OPL2_CHANNEL
.393675		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393677		69 b0		adc #$b0	              ADC #$B0
.393679		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39367b		a9 00		lda #$00	              LDA #$00
.39367d		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39367f		c2 30		rep #$30	                REP #$30        ; set A&X long
.393681		18		clc		              CLC
.393682		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393685		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393687		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393689		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39368c		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39368e		e2 20		sep #$20	                SEP #$20        ; set A short
.393690		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393692		29 20		and #$20	              AND #$20
.393694		6b		rtl		              RTL
.393695						OPL2_GET_FEEDBACK
.393695		48		pha		                PHA             ; begin setdp macro
.393696		08		php		                PHP
.393697		c2 20		rep #$20	                REP #$20        ; set A long
.393699		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39369c		5b		tcd		                TCD
.39369d		28		plp		                PLP
.39369e		68		pla		                PLA             ; end setdp macro
.39369f		e2 20		sep #$20	                SEP #$20        ; set A short
.3936a1		18		clc		              CLC
.3936a2		a5 27		lda $27		              LDA OPL2_CHANNEL
.3936a4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3936a6		69 c0		adc #$c0	              ADC #$C0
.3936a8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3936aa		a9 00		lda #$00	              LDA #$00
.3936ac		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3936ae		c2 30		rep #$30	                REP #$30        ; set A&X long
.3936b0		18		clc		              CLC
.3936b1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936b4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3936b6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936b8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936bb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3936bf		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936c1		29 e0		and #$e0	              AND #$E0
.3936c3		4a		lsr a		              LSR
.3936c4		6b		rtl		              RTL
.3936c5						OPL2_GET_SYNTHMODE
.3936c5		48		pha		                PHA             ; begin setdp macro
.3936c6		08		php		                PHP
.3936c7		c2 20		rep #$20	                REP #$20        ; set A long
.3936c9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936cc		5b		tcd		                TCD
.3936cd		28		plp		                PLP
.3936ce		68		pla		                PLA             ; end setdp macro
.3936cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3936d1		18		clc		              CLC
.3936d2		a5 27		lda $27		              LDA OPL2_CHANNEL
.3936d4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3936d6		69 c0		adc #$c0	              ADC #$C0
.3936d8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3936da		a9 00		lda #$00	              LDA #$00
.3936dc		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3936de		c2 30		rep #$30	                REP #$30        ; set A&X long
.3936e0		18		clc		              CLC
.3936e1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936e4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3936e6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936e8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936eb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3936ef		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936f1		29 01		and #$01	              AND #$01
.3936f3		6b		rtl		              RTL
.3936f4						OPL2_GET_DEEPTREMOLO
.3936f4		48		pha		                PHA             ; begin setdp macro
.3936f5		08		php		                PHP
.3936f6		c2 20		rep #$20	                REP #$20        ; set A long
.3936f8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936fb		5b		tcd		                TCD
.3936fc		28		plp		                PLP
.3936fd		68		pla		                PLA             ; end setdp macro
.3936fe		c2 20		rep #$20	                REP #$20        ; set A long
.393700		a9 bd 00	lda #$00bd	              LDA #$00BD;
.393703		85 28		sta $28		              STA OPL2_REG_REGION
.393705		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393708		e2 20		sep #$20	                SEP #$20        ; set A short
.39370a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39370c		29 80		and #$80	              AND #$80
.39370e		6b		rtl		              RTL
.39370f						OPL2_GET_DEEPVIBRATO
.39370f		48		pha		                PHA             ; begin setdp macro
.393710		08		php		                PHP
.393711		c2 20		rep #$20	                REP #$20        ; set A long
.393713		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393716		5b		tcd		                TCD
.393717		28		plp		                PLP
.393718		68		pla		                PLA             ; end setdp macro
.393719		c2 20		rep #$20	                REP #$20        ; set A long
.39371b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39371e		69 bd 00	adc #$00bd	              ADC #$00BD
.393721		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393723		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393726		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393728		e2 20		sep #$20	                SEP #$20        ; set A short
.39372a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39372c		29 40		and #$40	              AND #$40
.39372e		6b		rtl		              RTL
.39372f						OPL2_GET_PERCUSSION
.39372f		48		pha		                PHA             ; begin setdp macro
.393730		08		php		                PHP
.393731		c2 20		rep #$20	                REP #$20        ; set A long
.393733		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393736		5b		tcd		                TCD
.393737		28		plp		                PLP
.393738		68		pla		                PLA             ; end setdp macro
.393739		c2 20		rep #$20	                REP #$20        ; set A long
.39373b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39373e		69 bd 00	adc #$00bd	              ADC #$00BD
.393741		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393743		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393746		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393748		e2 20		sep #$20	                SEP #$20        ; set A short
.39374a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39374c		29 20		and #$20	              AND #$20
.39374e		6b		rtl		              RTL
.39374f						OPL2_GET_DRUMS
.39374f		48		pha		                PHA             ; begin setdp macro
.393750		08		php		                PHP
.393751		c2 20		rep #$20	                REP #$20        ; set A long
.393753		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393756		5b		tcd		                TCD
.393757		28		plp		                PLP
.393758		68		pla		                PLA             ; end setdp macro
.393759		c2 20		rep #$20	                REP #$20        ; set A long
.39375b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39375e		69 bd 00	adc #$00bd	              ADC #$00BD
.393761		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393763		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393766		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393768		e2 20		sep #$20	                SEP #$20        ; set A short
.39376a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39376c		29 1f		and #$1f	              AND #$1F
.39376e		6b		rtl		              RTL
.39376f						OPL2_Get_WaveForm
.39376f		6b		rtl		                RTL
.393770						OPL2_PLAYNOTE
.393770		48		pha		                PHA             ; begin setdp macro
.393771		08		php		                PHP
.393772		c2 20		rep #$20	                REP #$20        ; set A long
.393774		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393777		5b		tcd		                TCD
.393778		28		plp		                PLP
.393779		68		pla		                PLA             ; end setdp macro
.39377a		e2 20		sep #$20	                SEP #$20        ; set A short
.39377c		da		phx		                PHX
.39377d		a9 00		lda #$00	                LDA #$00
.39377f		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393781		20 58 3d	jsr $393d58	                JSR OPL2_SET_KEYON
.393784		20 1d 3d	jsr $393d1d	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393787		e2 10		sep #$10	                SEP #$10        ; set X short
.393789		a5 30		lda $30		                LDA OPL2_NOTE
.39378b		3a		dec a		                DEC A
.39378c		0a		asl a		                ASL A
.39378d		aa		tax		                TAX
.39378e		bf 07 15 39	lda $391507,x	                LDA @lnoteFNumbers,X
.393792		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.393794		e8		inx		                INX
.393795		bf 07 15 39	lda $391507,x	                LDA @lnoteFNumbers,X
.393799		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.39379b		22 9b 3c 39	jsl $393c9b	                JSL OPL2_SET_FNUMBER
.39379f		a9 01		lda #$01	                LDA #$01
.3937a1		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3937a3		20 58 3d	jsr $393d58	                JSR OPL2_SET_KEYON
.3937a6		c2 10		rep #$10	                REP #$10        ; set X long
.3937a8		fa		plx		                PLX
.3937a9		6b		rtl		                RTL
.3937aa						OPL2_PLAYDRUM
.3937aa		6b		rtl		                RTL
.3937ab						OPL2_SET_INSTRUMENT
.3937ab		48		pha		                PHA             ; begin setdp macro
.3937ac		08		php		                PHP
.3937ad		c2 20		rep #$20	                REP #$20        ; set A long
.3937af		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937b2		5b		tcd		                TCD
.3937b3		28		plp		                PLP
.3937b4		68		pla		                PLA             ; end setdp macro
.3937b5		38		sec		              SEC ; Set the WaveFormSelect to True
.3937b6		22 99 39 39	jsl $393999	              JSL OPL2_SET_WAVEFORMSELECT;
.3937ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3937bc		c2 10		rep #$10	                REP #$10        ; set X long
.3937be		a0 00 00	ldy #$0000	              LDY #$0000
.3937c1		a2 00 00	ldx #$0000	              LDX #$0000
.3937c4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3937c6		85 35		sta $35		              STA OPL2_PARAMETER3
.3937c8		c8		iny		              INY
.3937c9		c9 06		cmp #$06	              CMP #$06
.3937cb		d0 03		bne $3937d0	              BNE PERCUSSION_NEXT07
.3937cd		82 70 01	brl $393940	              BRL Percussion_6
.3937d0						PERCUSSION_NEXT07
.3937d0		c9 07		cmp #$07	              CMP #$07
.3937d2		d0 03		bne $3937d7	              BNE PERCUSSION_NEXT08
.3937d4		82 44 01	brl $39391b	              BRL Percussion_7
.3937d7						PERCUSSION_NEXT08
.3937d7		c9 08		cmp #$08	              CMP #$08
.3937d9		d0 03		bne $3937de	              BNE PERCUSSION_NEXT09
.3937db		82 18 01	brl $3938f6	              BRL Percussion_8
.3937de						PERCUSSION_NEXT09
.3937de		c9 09		cmp #$09	              CMP #$09
.3937e0		d0 03		bne $3937e5	              BNE PERCUSSION_NEXT0A
.3937e2		82 ec 00	brl $3938d1	              BRL Percussion_9
.3937e5						PERCUSSION_NEXT0A
.3937e5		c9 0a		cmp #$0a	              CMP #$0A
.3937e7		d0 03		bne $3937ec	              BNE Percussion_Default
.3937e9		82 c0 00	brl $3938ac	              BRL Percussion_A
.3937ec						Percussion_Default
.3937ec		a9 00		lda #$00	              LDA #$00
.3937ee		85 26		sta $26		              STA OPL2_OPERATOR
.3937f0		c2 20		rep #$20	                REP #$20        ; set A long
.3937f2		a9 20 00	lda #$0020	              LDA #$0020;
.3937f5		85 28		sta $28		              STA OPL2_REG_REGION
.3937f7		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.3937fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3937fc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3937fe		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393800		c8		iny		              INY
.393801		c2 20		rep #$20	                REP #$20        ; set A long
.393803		a9 40 00	lda #$0040	              LDA #$0040;
.393806		85 28		sta $28		              STA OPL2_REG_REGION
.393808		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.39380b		e2 20		sep #$20	                SEP #$20        ; set A short
.39380d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39380f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393811		c8		iny		              INY
.393812		c2 20		rep #$20	                REP #$20        ; set A long
.393814		a9 60 00	lda #$0060	              LDA #$0060;
.393817		85 28		sta $28		              STA OPL2_REG_REGION
.393819		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.39381c		e2 20		sep #$20	                SEP #$20        ; set A short
.39381e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393820		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393822		c8		iny		              INY
.393823		c2 20		rep #$20	                REP #$20        ; set A long
.393825		a9 80 00	lda #$0080	              LDA #$0080;
.393828		85 28		sta $28		              STA OPL2_REG_REGION
.39382a		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.39382d		e2 20		sep #$20	                SEP #$20        ; set A short
.39382f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393831		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393833		c8		iny		              INY
.393834		c2 20		rep #$20	                REP #$20        ; set A long
.393836		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393839		85 28		sta $28		              STA OPL2_REG_REGION
.39383b		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.39383e		e2 20		sep #$20	                SEP #$20        ; set A short
.393840		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393842		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393844		c8		iny		              INY
.393845		e2 10		sep #$10	                SEP #$10        ; set X short
.393847		a5 27		lda $27		              LDA OPL2_CHANNEL
.393849		29 0f		and #$0f	              AND #$0F
.39384b		aa		tax		              TAX
.39384c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.39384e		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393852		c8		iny		              INY
.393853		a9 01		lda #$01	              LDA #$01
.393855		85 26		sta $26		              STA OPL2_OPERATOR
.393857		c2 20		rep #$20	                REP #$20        ; set A long
.393859		a9 20 00	lda #$0020	              LDA #$0020;
.39385c		85 28		sta $28		              STA OPL2_REG_REGION
.39385e		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393861		e2 20		sep #$20	                SEP #$20        ; set A short
.393863		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393865		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393867		c8		iny		              INY
.393868		c2 20		rep #$20	                REP #$20        ; set A long
.39386a		a9 40 00	lda #$0040	              LDA #$0040;
.39386d		85 28		sta $28		              STA OPL2_REG_REGION
.39386f		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393872		e2 20		sep #$20	                SEP #$20        ; set A short
.393874		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393876		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393878		c8		iny		              INY
.393879		c2 20		rep #$20	                REP #$20        ; set A long
.39387b		a9 60 00	lda #$0060	              LDA #$0060;
.39387e		85 28		sta $28		              STA OPL2_REG_REGION
.393880		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393883		e2 20		sep #$20	                SEP #$20        ; set A short
.393885		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393887		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393889		c8		iny		              INY
.39388a		c2 20		rep #$20	                REP #$20        ; set A long
.39388c		a9 80 00	lda #$0080	              LDA #$0080;
.39388f		85 28		sta $28		              STA OPL2_REG_REGION
.393891		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393894		e2 20		sep #$20	                SEP #$20        ; set A short
.393896		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.393898		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39389a		c8		iny		              INY
.39389b		c2 20		rep #$20	                REP #$20        ; set A long
.39389d		a9 e0 00	lda #$00e0	              LDA #$00E0;
.3938a0		85 28		sta $28		              STA OPL2_REG_REGION
.3938a2		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.3938a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3938a7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3938a9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938ab		6b		rtl		                RTL
.3938ac						Percussion_A
.3938ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3938ae		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3938b0		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3938b4		c8		iny		              INY
.3938b5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3938b7		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3938bb		c8		iny		              INY
.3938bc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3938be		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.3938c2		c8		iny		              INY
.3938c3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3938c5		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.3938c9		c8		iny		              INY
.3938ca		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3938cc		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.3938d0		6b		rtl		                RTL
.3938d1						Percussion_9
.3938d1		e2 20		sep #$20	                SEP #$20        ; set A short
.3938d3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3938d5		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.3938d9		c8		iny		              INY
.3938da		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3938dc		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.3938e0		c8		iny		              INY
.3938e1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3938e3		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.3938e7		c8		iny		              INY
.3938e8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3938ea		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.3938ee		c8		iny		              INY
.3938ef		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3938f1		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.3938f5		6b		rtl		              RTL
.3938f6						Percussion_8
.3938f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3938f8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3938fa		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.3938fe		c8		iny		              INY
.3938ff		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393901		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393905		c8		iny		              INY
.393906		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393908		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.39390c		c8		iny		              INY
.39390d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39390f		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393913		c8		iny		              INY
.393914		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393916		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.39391a		6b		rtl		              RTL
.39391b						Percussion_7
.39391b		e2 20		sep #$20	                SEP #$20        ; set A short
.39391d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39391f		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393923		c8		iny		              INY
.393924		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393926		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.39392a		c8		iny		              INY
.39392b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39392d		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393931		c8		iny		              INY
.393932		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393934		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393938		c8		iny		              INY
.393939		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39393b		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.39393f		6b		rtl		              RTL
.393940						Percussion_6
.393940		e2 20		sep #$20	                SEP #$20        ; set A short
.393942		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393944		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393948		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.39394c		c8		iny		              INY
.39394d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39394f		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393953		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393957		c8		iny		              INY
.393958		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39395a		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.39395e		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393962		c8		iny		              INY
.393963		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393965		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393969		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.39396d		c8		iny		              INY
.39396e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393970		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393974		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393978		6b		rtl		              RTL
.393979						OPL2_SET_REGISTER
.393979		48		pha		                PHA             ; begin setdp macro
.39397a		08		php		                PHP
.39397b		c2 20		rep #$20	                REP #$20        ; set A long
.39397d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393980		5b		tcd		                TCD
.393981		28		plp		                PLP
.393982		68		pla		                PLA             ; end setdp macro
.393983		c2 20		rep #$20	                REP #$20        ; set A long
.393985		18		clc		              CLC
.393986		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393989		65 32		adc $32		              ADC OPL2_PARAMETER0
.39398b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39398d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393990		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393992		e2 20		sep #$20	                SEP #$20        ; set A short
.393994		a5 33		lda $33		              LDA OPL2_PARAMETER1
.393996		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393998		6b		rtl		              RTL
.393999						OPL2_SET_WAVEFORMSELECT
.393999		48		pha		                PHA             ; begin setdp macro
.39399a		08		php		                PHP
.39399b		c2 20		rep #$20	                REP #$20        ; set A long
.39399d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939a0		5b		tcd		                TCD
.3939a1		28		plp		                PLP
.3939a2		68		pla		                PLA             ; end setdp macro
.3939a3		c2 20		rep #$20	                REP #$20        ; set A long
.3939a5		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3939a8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3939aa		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3939ad		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3939af		e2 20		sep #$20	                SEP #$20        ; set A short
.3939b1		b0 07		bcs $3939ba	              BCS OPL2_Set_WaveFormSelect_set
.3939b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939b5		29 df		and #$df	              AND #$DF
.3939b7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939b9		6b		rtl		              RTL
.3939ba						OPL2_Set_WaveFormSelect_set
.3939ba		48		pha		                PHA             ; begin setdp macro
.3939bb		08		php		                PHP
.3939bc		c2 20		rep #$20	                REP #$20        ; set A long
.3939be		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939c1		5b		tcd		                TCD
.3939c2		28		plp		                PLP
.3939c3		68		pla		                PLA             ; end setdp macro
.3939c4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939c6		09 20 00	ora #$0020	              ORA #$20
.3939c9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939cb		6b		rtl		                RTL
.3939cc						OPL2_SET_TREMOLO
.3939cc		48		pha		                PHA             ; begin setdp macro
.3939cd		08		php		                PHP
.3939ce		c2 20		rep #$20	                REP #$20        ; set A long
.3939d0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939d3		5b		tcd		                TCD
.3939d4		28		plp		                PLP
.3939d5		68		pla		                PLA             ; end setdp macro
.3939d6		08		php		                PHP ; Push the Carry
.3939d7		c2 20		rep #$20	                REP #$20        ; set A long
.3939d9		18		clc		                CLC
.3939da		a9 20 00	lda #$0020	                LDA #$0020 ;
.3939dd		85 28		sta $28		                STA OPL2_REG_REGION
.3939df		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.3939e2		28		plp		                PLP ; Pull the Carry out
.3939e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3939e5		b0 08		bcs $3939ef	                BCS OPL2_Set_Tremolo_Set;
.3939e7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939e9		29 7f		and #$7f	                AND #$7F
.3939eb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3939ed		80 06		bra $3939f5	                BRA OPL2_Set_Tremolo_Exit
.3939ef						OPL2_Set_Tremolo_Set
.3939ef		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939f1		09 80		ora #$80	                ORA #$80
.3939f3		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3939f5						OPL2_Set_Tremolo_Exit
.3939f5		6b		rtl		                RTL
.3939f6						OPL2_GET_TREMOLO
.3939f6		48		pha		                PHA             ; begin setdp macro
.3939f7		08		php		                PHP
.3939f8		c2 20		rep #$20	                REP #$20        ; set A long
.3939fa		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939fd		5b		tcd		                TCD
.3939fe		28		plp		                PLP
.3939ff		68		pla		                PLA             ; end setdp macro
.393a00		c2 20		rep #$20	                REP #$20        ; set A long
.393a02		a9 20 00	lda #$0020	                LDA #$0020;
.393a05		85 28		sta $28		                STA OPL2_REG_REGION
.393a07		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393a0a		e2 20		sep #$20	                SEP #$20        ; set A short
.393a0c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a0e		29 80		and #$80	                AND #$80
.393a10		6b		rtl		                RTL
.393a11						OPL2_SET_VIBRATO
.393a11		48		pha		                PHA             ; begin setdp macro
.393a12		08		php		                PHP
.393a13		c2 20		rep #$20	                REP #$20        ; set A long
.393a15		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a18		5b		tcd		                TCD
.393a19		28		plp		                PLP
.393a1a		68		pla		                PLA             ; end setdp macro
.393a1b		08		php		                PHP ; Push the Carry
.393a1c		c2 20		rep #$20	                REP #$20        ; set A long
.393a1e		18		clc		                CLC
.393a1f		a9 20 00	lda #$0020	                LDA #$0020;
.393a22		85 28		sta $28		                STA OPL2_REG_REGION
.393a24		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393a27		28		plp		                PLP ; Pull the Carry out
.393a28		e2 20		sep #$20	                SEP #$20        ; set A short
.393a2a		b0 08		bcs $393a34	                BCS OPL2_Set_Vibrato_Set;
.393a2c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a2e		29 bf		and #$bf	                AND #$BF
.393a30		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a32		80 06		bra $393a3a	                BRA OPL2_Set_Vibrato_Exit
.393a34						OPL2_Set_Vibrato_Set
.393a34		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a36		09 40		ora #$40	                ORA #$40
.393a38		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a3a						OPL2_Set_Vibrato_Exit
.393a3a		6b		rtl		                RTL
.393a3b						OPL2_GET_VIBRATO
.393a3b		48		pha		                PHA             ; begin setdp macro
.393a3c		08		php		                PHP
.393a3d		c2 20		rep #$20	                REP #$20        ; set A long
.393a3f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a42		5b		tcd		                TCD
.393a43		28		plp		                PLP
.393a44		68		pla		                PLA             ; end setdp macro
.393a45		c2 20		rep #$20	                REP #$20        ; set A long
.393a47		a9 20 00	lda #$0020	                LDA #$0020;
.393a4a		85 28		sta $28		                STA OPL2_REG_REGION
.393a4c		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393a4f		e2 20		sep #$20	                SEP #$20        ; set A short
.393a51		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a53		29 40		and #$40	                AND #$40
.393a55		6b		rtl		                RTL
.393a56						OPL2_SET_MAINTAINSUSTAIN
.393a56		48		pha		                PHA             ; begin setdp macro
.393a57		08		php		                PHP
.393a58		c2 20		rep #$20	                REP #$20        ; set A long
.393a5a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a5d		5b		tcd		                TCD
.393a5e		28		plp		                PLP
.393a5f		68		pla		                PLA             ; end setdp macro
.393a60		08		php		              PHP ; Push the Carry
.393a61		c2 20		rep #$20	                REP #$20        ; set A long
.393a63		18		clc		              CLC
.393a64		a9 20 00	lda #$0020	              LDA #$0020;
.393a67		85 28		sta $28		              STA OPL2_REG_REGION
.393a69		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393a6c		28		plp		              PLP ; Pull the Carry out
.393a6d		e2 20		sep #$20	                SEP #$20        ; set A short
.393a6f		b0 08		bcs $393a79	              BCS OPL2_Set_MaintainSustain_Set;
.393a71		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a73		29 df		and #$df	              AND #$DF
.393a75		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a77		80 06		bra $393a7f	              BRA OPL2_Set_MaintainSustain_Exit
.393a79						OPL2_Set_MaintainSustain_Set
.393a79		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a7b		09 20		ora #$20	              ORA #$20
.393a7d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a7f						OPL2_Set_MaintainSustain_Exit
.393a7f		6b		rtl		                RTL
.393a80						OPL2_GET_MAINTAINSUSTAIN
.393a80		48		pha		                PHA             ; begin setdp macro
.393a81		08		php		                PHP
.393a82		c2 20		rep #$20	                REP #$20        ; set A long
.393a84		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a87		5b		tcd		                TCD
.393a88		28		plp		                PLP
.393a89		68		pla		                PLA             ; end setdp macro
.393a8a		c2 20		rep #$20	                REP #$20        ; set A long
.393a8c		a9 20 00	lda #$0020	              LDA #$0020;
.393a8f		85 28		sta $28		              STA OPL2_REG_REGION
.393a91		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393a94		e2 20		sep #$20	                SEP #$20        ; set A short
.393a96		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a98		29 20		and #$20	              AND #$20
.393a9a		6b		rtl		                RTL
.393a9b						OPL2_SET_ENVELOPESCALING
.393a9b		48		pha		                PHA             ; begin setdp macro
.393a9c		08		php		                PHP
.393a9d		c2 20		rep #$20	                REP #$20        ; set A long
.393a9f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393aa2		5b		tcd		                TCD
.393aa3		28		plp		                PLP
.393aa4		68		pla		                PLA             ; end setdp macro
.393aa5		08		php		              PHP ; Push the Carry
.393aa6		c2 20		rep #$20	                REP #$20        ; set A long
.393aa8		18		clc		              CLC
.393aa9		a9 20 00	lda #$0020	              LDA #$0020;
.393aac		85 28		sta $28		              STA OPL2_REG_REGION
.393aae		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393ab1		28		plp		              PLP ; Pull the Carry out
.393ab2		e2 20		sep #$20	                SEP #$20        ; set A short
.393ab4		b0 08		bcs $393abe	              BCS OPL2_Set_EnvelopeScaling_Set;
.393ab6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ab8		29 ef		and #$ef	              AND #$EF
.393aba		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393abc		80 06		bra $393ac4	              BRA OPL2_Set_EnvelopeScaling_Exit
.393abe						OPL2_Set_EnvelopeScaling_Set
.393abe		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ac0		09 10		ora #$10	              ORA #$10
.393ac2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ac4						OPL2_Set_EnvelopeScaling_Exit
.393ac4		6b		rtl		                RTL
.393ac5						OPL2_GET_ENVELOPESCALING
.393ac5		48		pha		                PHA             ; begin setdp macro
.393ac6		08		php		                PHP
.393ac7		c2 20		rep #$20	                REP #$20        ; set A long
.393ac9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393acc		5b		tcd		                TCD
.393acd		28		plp		                PLP
.393ace		68		pla		                PLA             ; end setdp macro
.393acf		c2 20		rep #$20	                REP #$20        ; set A long
.393ad1		a9 20 00	lda #$0020	              LDA #$0020;
.393ad4		85 28		sta $28		              STA OPL2_REG_REGION
.393ad6		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393ad9		e2 20		sep #$20	                SEP #$20        ; set A short
.393adb		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393add		29 10		and #$10	              AND #$10
.393adf		6b		rtl		                RTL
.393ae0						OPL2_GET_MODFREQMULTIPLE
.393ae0		48		pha		                PHA             ; begin setdp macro
.393ae1		08		php		                PHP
.393ae2		c2 20		rep #$20	                REP #$20        ; set A long
.393ae4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ae7		5b		tcd		                TCD
.393ae8		28		plp		                PLP
.393ae9		68		pla		                PLA             ; end setdp macro
.393aea		c2 20		rep #$20	                REP #$20        ; set A long
.393aec		a9 20 00	lda #$0020	              LDA #$0020;
.393aef		85 28		sta $28		              STA OPL2_REG_REGION
.393af1		20 d7 3e	jsr $393ed7	              JSR OPL2_GET_REG_OFFSET
.393af4		e2 20		sep #$20	                SEP #$20        ; set A short
.393af6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393af8		29 0f		and #$0f	              AND #$0F
.393afa		6b		rtl		              RTL
.393afb						OPL2_SET_MODFREQMULTIPLE
.393afb		48		pha		                PHA             ; begin setdp macro
.393afc		08		php		                PHP
.393afd		c2 20		rep #$20	                REP #$20        ; set A long
.393aff		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b02		5b		tcd		                TCD
.393b03		28		plp		                PLP
.393b04		68		pla		                PLA             ; end setdp macro
.393b05		c2 20		rep #$20	                REP #$20        ; set A long
.393b07		a9 20 00	lda #$0020	                LDA #$0020;
.393b0a		85 28		sta $28		                STA OPL2_REG_REGION
.393b0c		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393b0f		e2 20		sep #$20	                SEP #$20        ; set A short
.393b11		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393b13		29 0f		and #$0f	                AND #$0F
.393b15		85 32		sta $32		                STA OPL2_PARAMETER0
.393b17		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b19		29 f0		and #$f0	                AND #$F0
.393b1b		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b1d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b1f		6b		rtl		                RTL
.393b20						OPL2_SET_SCALINGLEVEL
.393b20		48		pha		                PHA             ; begin setdp macro
.393b21		08		php		                PHP
.393b22		c2 20		rep #$20	                REP #$20        ; set A long
.393b24		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b27		5b		tcd		                TCD
.393b28		28		plp		                PLP
.393b29		68		pla		                PLA             ; end setdp macro
.393b2a		c2 20		rep #$20	                REP #$20        ; set A long
.393b2c		a9 40 00	lda #$0040	                LDA #$0040;
.393b2f		85 28		sta $28		                STA OPL2_REG_REGION
.393b31		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393b34		e2 20		sep #$20	                SEP #$20        ; set A short
.393b36		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393b38		29 03		and #$03	                AND #$03
.393b3a		0a		asl a		                ASL
.393b3b		0a		asl a		                ASL
.393b3c		0a		asl a		                ASL
.393b3d		0a		asl a		                ASL
.393b3e		0a		asl a		                ASL
.393b3f		0a		asl a		                ASL
.393b40		85 32		sta $32		                STA OPL2_PARAMETER0
.393b42		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b44		29 3f		and #$3f	                AND #$3F
.393b46		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b48		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b4a		6b		rtl		                RTL
.393b4b						OPL2_SET_VOLUME
.393b4b		48		pha		                PHA             ; begin setdp macro
.393b4c		08		php		                PHP
.393b4d		c2 20		rep #$20	                REP #$20        ; set A long
.393b4f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b52		5b		tcd		                TCD
.393b53		28		plp		                PLP
.393b54		68		pla		                PLA             ; end setdp macro
.393b55		c2 20		rep #$20	                REP #$20        ; set A long
.393b57		a9 40 00	lda #$0040	                LDA #$0040  ;
.393b5a		85 28		sta $28		                STA OPL2_REG_REGION
.393b5c		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393b5f		e2 20		sep #$20	                SEP #$20        ; set A short
.393b61		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393b63		29 3f		and #$3f	                AND #$3F
.393b65		85 32		sta $32		                STA OPL2_PARAMETER0
.393b67		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b69		29 c0		and #$c0	                AND #$C0
.393b6b		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b6d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b6f		6b		rtl		                RTL
.393b70						OPL2_GET_VOLUME
.393b70		48		pha		                PHA             ; begin setdp macro
.393b71		08		php		                PHP
.393b72		c2 20		rep #$20	                REP #$20        ; set A long
.393b74		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b77		5b		tcd		                TCD
.393b78		28		plp		                PLP
.393b79		68		pla		                PLA             ; end setdp macro
.393b7a		c2 20		rep #$20	                REP #$20        ; set A long
.393b7c		a9 40 00	lda #$0040	                LDA #$0040  ;
.393b7f		85 28		sta $28		                STA OPL2_REG_REGION
.393b81		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393b84		e2 20		sep #$20	                SEP #$20        ; set A short
.393b86		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b88		29 3f		and #$3f	                AND #$3F
.393b8a		6b		rtl		                RTL
.393b8b						OPL2_SET_ATTACK
.393b8b		48		pha		                PHA             ; begin setdp macro
.393b8c		08		php		                PHP
.393b8d		c2 20		rep #$20	                REP #$20        ; set A long
.393b8f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b92		5b		tcd		                TCD
.393b93		28		plp		                PLP
.393b94		68		pla		                PLA             ; end setdp macro
.393b95		c2 20		rep #$20	                REP #$20        ; set A long
.393b97		a9 60 00	lda #$0060	                LDA #$0060  ;
.393b9a		85 28		sta $28		                STA OPL2_REG_REGION
.393b9c		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393b9f		e2 20		sep #$20	                SEP #$20        ; set A short
.393ba1		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393ba3		29 0f		and #$0f	                AND #$0F
.393ba5		0a		asl a		                ASL
.393ba6		0a		asl a		                ASL
.393ba7		0a		asl a		                ASL
.393ba8		0a		asl a		                ASL
.393ba9		85 32		sta $32		                STA OPL2_PARAMETER0
.393bab		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bad		29 0f		and #$0f	                AND #$0F
.393baf		05 32		ora $32		                ORA OPL2_PARAMETER0
.393bb1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bb3		6b		rtl		                RTL
.393bb4						OPL2_GET_ATTACK
.393bb4		48		pha		                PHA             ; begin setdp macro
.393bb5		08		php		                PHP
.393bb6		c2 20		rep #$20	                REP #$20        ; set A long
.393bb8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bbb		5b		tcd		                TCD
.393bbc		28		plp		                PLP
.393bbd		68		pla		                PLA             ; end setdp macro
.393bbe		c2 20		rep #$20	                REP #$20        ; set A long
.393bc0		a9 60 00	lda #$0060	                LDA #$0060
.393bc3		85 28		sta $28		                STA OPL2_REG_REGION
.393bc5		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393bc8		e2 20		sep #$20	                SEP #$20        ; set A short
.393bca		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bcc		29 f0		and #$f0	                AND #$F0
.393bce		4a		lsr a		                LSR
.393bcf		4a		lsr a		                LSR
.393bd0		4a		lsr a		                LSR
.393bd1		4a		lsr a		                LSR
.393bd2		6b		rtl		                RTL
.393bd3						OPL2_SET_DECAY
.393bd3		48		pha		                PHA             ; begin setdp macro
.393bd4		08		php		                PHP
.393bd5		c2 20		rep #$20	                REP #$20        ; set A long
.393bd7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bda		5b		tcd		                TCD
.393bdb		28		plp		                PLP
.393bdc		68		pla		                PLA             ; end setdp macro
.393bdd		c2 20		rep #$20	                REP #$20        ; set A long
.393bdf		a9 60 00	lda #$0060	                LDA #$0060;
.393be2		85 28		sta $28		                STA OPL2_REG_REGION
.393be4		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393be7		e2 20		sep #$20	                SEP #$20        ; set A short
.393be9		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393beb		29 0f		and #$0f	                AND #$0F
.393bed		85 32		sta $32		                STA OPL2_PARAMETER0
.393bef		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bf1		29 f0		and #$f0	                AND #$F0
.393bf3		05 32		ora $32		                ORA OPL2_PARAMETER0
.393bf5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bf7		6b		rtl		                RTL
.393bf8						OPL2_GET_DECAY
.393bf8		48		pha		                PHA             ; begin setdp macro
.393bf9		08		php		                PHP
.393bfa		c2 20		rep #$20	                REP #$20        ; set A long
.393bfc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bff		5b		tcd		                TCD
.393c00		28		plp		                PLP
.393c01		68		pla		                PLA             ; end setdp macro
.393c02		c2 20		rep #$20	                REP #$20        ; set A long
.393c04		a9 60 00	lda #$0060	                LDA #$0060
.393c07		85 28		sta $28		                STA OPL2_REG_REGION
.393c09		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393c0c		e2 20		sep #$20	                SEP #$20        ; set A short
.393c0e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c10		29 0f		and #$0f	                AND #$0F
.393c12		6b		rtl		                RTL
.393c13						OPL2_SET_SUSTAIN
.393c13		48		pha		                PHA             ; begin setdp macro
.393c14		08		php		                PHP
.393c15		c2 20		rep #$20	                REP #$20        ; set A long
.393c17		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c1a		5b		tcd		                TCD
.393c1b		28		plp		                PLP
.393c1c		68		pla		                PLA             ; end setdp macro
.393c1d		c2 20		rep #$20	                REP #$20        ; set A long
.393c1f		a9 80 00	lda #$0080	                LDA #$0080;
.393c22		85 28		sta $28		                STA OPL2_REG_REGION
.393c24		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393c27		e2 20		sep #$20	                SEP #$20        ; set A short
.393c29		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c2b		29 0f		and #$0f	                AND #$0F
.393c2d		0a		asl a		                ASL
.393c2e		0a		asl a		                ASL
.393c2f		0a		asl a		                ASL
.393c30		0a		asl a		                ASL
.393c31		85 32		sta $32		                STA OPL2_PARAMETER0
.393c33		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c35		29 0f		and #$0f	                AND #$0F
.393c37		05 32		ora $32		                ORA OPL2_PARAMETER0
.393c39		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c3b		6b		rtl		                RTL
.393c3c						OPL2_GET_SUSTAIN
.393c3c		48		pha		                PHA             ; begin setdp macro
.393c3d		08		php		                PHP
.393c3e		c2 20		rep #$20	                REP #$20        ; set A long
.393c40		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c43		5b		tcd		                TCD
.393c44		28		plp		                PLP
.393c45		68		pla		                PLA             ; end setdp macro
.393c46		c2 20		rep #$20	                REP #$20        ; set A long
.393c48		a9 80 00	lda #$0080	                LDA #$0080
.393c4b		85 28		sta $28		                STA OPL2_REG_REGION
.393c4d		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393c50		e2 20		sep #$20	                SEP #$20        ; set A short
.393c52		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c54		29 f0		and #$f0	                AND #$F0
.393c56		4a		lsr a		                LSR
.393c57		4a		lsr a		                LSR
.393c58		4a		lsr a		                LSR
.393c59		4a		lsr a		                LSR
.393c5a		6b		rtl		                RTL
.393c5b						OPL2_SET_RELEASE
.393c5b		48		pha		                PHA             ; begin setdp macro
.393c5c		08		php		                PHP
.393c5d		c2 20		rep #$20	                REP #$20        ; set A long
.393c5f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c62		5b		tcd		                TCD
.393c63		28		plp		                PLP
.393c64		68		pla		                PLA             ; end setdp macro
.393c65		c2 20		rep #$20	                REP #$20        ; set A long
.393c67		a9 80 00	lda #$0080	                LDA #$0080;
.393c6a		85 28		sta $28		                STA OPL2_REG_REGION
.393c6c		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393c6f		e2 20		sep #$20	                SEP #$20        ; set A short
.393c71		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c73		29 0f		and #$0f	                AND #$0F
.393c75		85 32		sta $32		                STA OPL2_PARAMETER0
.393c77		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c79		29 f0		and #$f0	                AND #$F0
.393c7b		05 32		ora $32		                ORA OPL2_PARAMETER0
.393c7d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c7f		6b		rtl		                RTL
.393c80						OPL2_GET_RELEASE
.393c80		48		pha		                PHA             ; begin setdp macro
.393c81		08		php		                PHP
.393c82		c2 20		rep #$20	                REP #$20        ; set A long
.393c84		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c87		5b		tcd		                TCD
.393c88		28		plp		                PLP
.393c89		68		pla		                PLA             ; end setdp macro
.393c8a		c2 20		rep #$20	                REP #$20        ; set A long
.393c8c		a9 80 00	lda #$0080	                LDA #$0080
.393c8f		85 28		sta $28		                STA OPL2_REG_REGION
.393c91		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393c94		e2 20		sep #$20	                SEP #$20        ; set A short
.393c96		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c98		29 0f		and #$0f	                AND #$0F
.393c9a		6b		rtl		                RTL
.393c9b						OPL2_SET_FNUMBER
.393c9b		48		pha		                PHA             ; begin setdp macro
.393c9c		08		php		                PHP
.393c9d		c2 20		rep #$20	                REP #$20        ; set A long
.393c9f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ca2		5b		tcd		                TCD
.393ca3		28		plp		                PLP
.393ca4		68		pla		                PLA             ; end setdp macro
.393ca5		e2 20		sep #$20	                SEP #$20        ; set A short
.393ca7		18		clc		                CLC
.393ca8		a5 27		lda $27		                LDA OPL2_CHANNEL
.393caa		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393cac		69 a0		adc #$a0	                ADC #$A0
.393cae		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393cb0		a9 00		lda #$00	                LDA #$00
.393cb2		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393cb4		c2 30		rep #$30	                REP #$30        ; set A&X long
.393cb6		18		clc		                CLC
.393cb7		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393cba		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393cbc		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393cbe		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393cc1		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393cc3		e2 20		sep #$20	                SEP #$20        ; set A short
.393cc5		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393cc7		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393cc9		18		clc		                CLC
.393cca		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393ccc		69 10		adc #$10	                ADC #$10
.393cce		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393cd0		a5 33		lda $33		                LDA OPL2_PARAMETER1
.393cd2		29 03		and #$03	                AND #$03
.393cd4		85 33		sta $33		                STA OPL2_PARAMETER1
.393cd6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393cd8		29 fc		and #$fc	                AND #$FC
.393cda		05 33		ora $33		                ORA OPL2_PARAMETER1
.393cdc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cde		6b		rtl		                RTL
.393cdf						OPL2_GET_FNUMBER
.393cdf		48		pha		                PHA             ; begin setdp macro
.393ce0		08		php		                PHP
.393ce1		c2 20		rep #$20	                REP #$20        ; set A long
.393ce3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ce6		5b		tcd		                TCD
.393ce7		28		plp		                PLP
.393ce8		68		pla		                PLA             ; end setdp macro
.393ce9		e2 20		sep #$20	                SEP #$20        ; set A short
.393ceb		18		clc		                CLC
.393cec		a5 27		lda $27		                LDA OPL2_CHANNEL
.393cee		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393cf0		69 a0		adc #$a0	                ADC #$A0
.393cf2		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393cf4		a9 00		lda #$00	                LDA #$00
.393cf6		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393cf8		c2 30		rep #$30	                REP #$30        ; set A&X long
.393cfa		18		clc		                CLC
.393cfb		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393cfe		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d00		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d02		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d05		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d07		e2 20		sep #$20	                SEP #$20        ; set A short
.393d09		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d0b		85 32		sta $32		                STA OPL2_PARAMETER0
.393d0d		18		clc		                CLC
.393d0e		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393d10		69 10		adc #$10	                ADC #$10
.393d12		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d14		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d16		29 03		and #$03	                AND #$03
.393d18		85 33		sta $33		                STA OPL2_PARAMETER1
.393d1a		6b		rtl		                RTL
.393d1b						OPL2_Set_Frequency
.393d1b		6b		rtl		                RTL
.393d1c						OPL2_Get_Frequency
.393d1c		6b		rtl		                RTL
.393d1d						OPL2_SET_BLOCK
.393d1d		48		pha		                PHA             ; begin setdp macro
.393d1e		08		php		                PHP
.393d1f		c2 20		rep #$20	                REP #$20        ; set A long
.393d21		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d24		5b		tcd		                TCD
.393d25		28		plp		                PLP
.393d26		68		pla		                PLA             ; end setdp macro
.393d27		e2 20		sep #$20	                SEP #$20        ; set A short
.393d29		18		clc		                CLC
.393d2a		a5 27		lda $27		                LDA OPL2_CHANNEL
.393d2c		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d2e		69 b0		adc #$b0	                ADC #$B0
.393d30		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d32		a9 00		lda #$00	                LDA #$00
.393d34		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d36		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d38		18		clc		                CLC
.393d39		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d3c		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d3e		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d40		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d43		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d45		e2 20		sep #$20	                SEP #$20        ; set A short
.393d47		a5 31		lda $31		                LDA OPL2_OCTAVE
.393d49		29 07		and #$07	                AND #$07
.393d4b		0a		asl a		                ASL
.393d4c		0a		asl a		                ASL
.393d4d		85 31		sta $31		                STA OPL2_OCTAVE
.393d4f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d51		29 e3		and #$e3	                AND #$E3
.393d53		05 31		ora $31		                ORA OPL2_OCTAVE
.393d55		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d57		60		rts		                RTS
.393d58						OPL2_SET_KEYON
.393d58		48		pha		                PHA             ; begin setdp macro
.393d59		08		php		                PHP
.393d5a		c2 20		rep #$20	                REP #$20        ; set A long
.393d5c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d5f		5b		tcd		                TCD
.393d60		28		plp		                PLP
.393d61		68		pla		                PLA             ; end setdp macro
.393d62		e2 20		sep #$20	                SEP #$20        ; set A short
.393d64		18		clc		                CLC
.393d65		a5 27		lda $27		                LDA OPL2_CHANNEL
.393d67		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d69		69 b0		adc #$b0	                ADC #$B0
.393d6b		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d6d		a9 00		lda #$00	                LDA #$00
.393d6f		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d71		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d73		18		clc		                CLC
.393d74		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d77		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d79		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d7b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d7e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d80		e2 20		sep #$20	                SEP #$20        ; set A short
.393d82		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393d84		29 01		and #$01	                AND #$01
.393d86		f0 02		beq $393d8a	                BEQ SET_KEYON_OFF
.393d88		a9 20		lda #$20	                LDA #$20
.393d8a						    SET_KEYON_OFF
.393d8a		85 32		sta $32		                STA OPL2_PARAMETER0
.393d8c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d8e		29 df		and #$df	                AND #$DF
.393d90		05 32		ora $32		                ORA OPL2_PARAMETER0
.393d92		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d94		60		rts		                RTS
.393d95						OPL2_SET_FEEDBACK
.393d95		48		pha		                PHA             ; begin setdp macro
.393d96		08		php		                PHP
.393d97		c2 20		rep #$20	                REP #$20        ; set A long
.393d99		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d9c		5b		tcd		                TCD
.393d9d		28		plp		                PLP
.393d9e		68		pla		                PLA             ; end setdp macro
.393d9f		e2 20		sep #$20	                SEP #$20        ; set A short
.393da1		18		clc		              CLC
.393da2		a5 27		lda $27		              LDA OPL2_CHANNEL
.393da4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393da6		69 c0		adc #$c0	              ADC #$C0
.393da8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393daa		a9 00		lda #$00	              LDA #$00
.393dac		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393dae		c2 30		rep #$30	                REP #$30        ; set A&X long
.393db0		18		clc		              CLC
.393db1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393db4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393db6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393db8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393dbb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393dbd		e2 20		sep #$20	                SEP #$20        ; set A short
.393dbf		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393dc1		29 07		and #$07	              AND #$07
.393dc3		0a		asl a		              ASL
.393dc4		85 32		sta $32		              STA OPL2_PARAMETER0
.393dc6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393dc8		29 01		and #$01	              AND #$01
.393dca		05 32		ora $32		              ORA OPL2_PARAMETER0
.393dcc		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393dce		6b		rtl		                RTL
.393dcf						OPL2_SET_SYNTHMODE
.393dcf		48		pha		                PHA             ; begin setdp macro
.393dd0		08		php		                PHP
.393dd1		c2 20		rep #$20	                REP #$20        ; set A long
.393dd3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dd6		5b		tcd		                TCD
.393dd7		28		plp		                PLP
.393dd8		68		pla		                PLA             ; end setdp macro
.393dd9		08		php		              PHP ; Push the Carry
.393dda		e2 20		sep #$20	                SEP #$20        ; set A short
.393ddc		18		clc		              CLC
.393ddd		a5 27		lda $27		              LDA OPL2_CHANNEL
.393ddf		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393de1		69 c0		adc #$c0	              ADC #$C0
.393de3		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393de5		a9 00		lda #$00	              LDA #$00
.393de7		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393de9		c2 30		rep #$30	                REP #$30        ; set A&X long
.393deb		18		clc		              CLC
.393dec		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393def		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393df1		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393df3		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393df6		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393df8		28		plp		              PLP ; Pull the Carry out
.393df9		e2 20		sep #$20	                SEP #$20        ; set A short
.393dfb		b0 08		bcs $393e05	              BCS OPL2_Set_Synthmode_Set;
.393dfd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393dff		29 fe		and #$fe	              AND #$FE
.393e01		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e03		80 06		bra $393e0b	              BRA OPL2_Set_Synthmode_Exit
.393e05						OPL2_Set_Synthmode_Set
.393e05		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e07		09 01		ora #$01	              ORA #$01
.393e09		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e0b						OPL2_Set_Synthmode_Exit
.393e0b		6b		rtl		                RTL
.393e0c						OPL2_SET_DEEPTREMOLO
.393e0c		48		pha		                PHA             ; begin setdp macro
.393e0d		08		php		                PHP
.393e0e		c2 20		rep #$20	                REP #$20        ; set A long
.393e10		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e13		5b		tcd		                TCD
.393e14		28		plp		                PLP
.393e15		68		pla		                PLA             ; end setdp macro
.393e16		c2 20		rep #$20	                REP #$20        ; set A long
.393e18		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393e1b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e1d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e20		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393e22		e2 20		sep #$20	                SEP #$20        ; set A short
.393e24		b0 08		bcs $393e2e	              BCS OPL2_Set_DeepTremolo_Set;
.393e26		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e28		29 7f		and #$7f	              AND #$7F
.393e2a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e2c		80 06		bra $393e34	              BRA OPL2_Set_DeepTremolo_Exit
.393e2e						OPL2_Set_DeepTremolo_Set
.393e2e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e30		09 80		ora #$80	              ORA #$80
.393e32		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e34						OPL2_Set_DeepTremolo_Exit
.393e34		6b		rtl		                RTL
.393e35						OPL2_SET_DEEPVIBRATO
.393e35		48		pha		                PHA             ; begin setdp macro
.393e36		08		php		                PHP
.393e37		c2 20		rep #$20	                REP #$20        ; set A long
.393e39		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e3c		5b		tcd		                TCD
.393e3d		28		plp		                PLP
.393e3e		68		pla		                PLA             ; end setdp macro
.393e3f		c2 20		rep #$20	                REP #$20        ; set A long
.393e41		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393e44		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e46		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e49		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393e4b		e2 20		sep #$20	                SEP #$20        ; set A short
.393e4d		b0 08		bcs $393e57	              BCS OPL2_Set_DeepVibrato_Set;
.393e4f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e51		29 bf		and #$bf	              AND #$BF
.393e53		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e55		80 06		bra $393e5d	              BRA OPL2_Set_DeepVibrato_Exit
.393e57						OPL2_Set_DeepVibrato_Set
.393e57		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e59		09 40		ora #$40	              ORA #$40
.393e5b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e5d						OPL2_Set_DeepVibrato_Exit
.393e5d		6b		rtl		                RTL
.393e5e						OPL2_SET_PERCUSSION
.393e5e		48		pha		                PHA             ; begin setdp macro
.393e5f		08		php		                PHP
.393e60		c2 20		rep #$20	                REP #$20        ; set A long
.393e62		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e65		5b		tcd		                TCD
.393e66		28		plp		                PLP
.393e67		68		pla		                PLA             ; end setdp macro
.393e68		c2 20		rep #$20	                REP #$20        ; set A long
.393e6a		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393e6d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e6f		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e72		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e74		e2 20		sep #$20	                SEP #$20        ; set A short
.393e76		b0 08		bcs $393e80	                BCS OPL2_Set_Percussion_Set;
.393e78		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e7a		29 df		and #$df	                AND #$DF
.393e7c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e7e		80 06		bra $393e86	                BRA OPL2_Set_Percussion_Exit
.393e80						OPL2_Set_Percussion_Set
.393e80		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e82		09 20		ora #$20	                ORA #$20
.393e84		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e86						OPL2_Set_Percussion_Exit
.393e86		6b		rtl		                RTL
.393e87						OPL2_SET_DRUMS
.393e87		48		pha		                PHA             ; begin setdp macro
.393e88		08		php		                PHP
.393e89		c2 20		rep #$20	                REP #$20        ; set A long
.393e8b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e8e		5b		tcd		                TCD
.393e8f		28		plp		                PLP
.393e90		68		pla		                PLA             ; end setdp macro
.393e91		c2 20		rep #$20	                REP #$20        ; set A long
.393e93		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393e96		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e98		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e9b		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e9d		e2 20		sep #$20	                SEP #$20        ; set A short
.393e9f		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393ea1		29 1f		and #$1f	                AND #$1F
.393ea3		85 32		sta $32		                STA OPL2_PARAMETER0
.393ea5		49 ff		eor #$ff	                EOR #$FF
.393ea7		85 33		sta $33		                STA OPL2_PARAMETER1
.393ea9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393eab		25 33		and $33		                AND OPL2_PARAMETER1
.393ead		05 32		ora $32		                ORA OPL2_PARAMETER0
.393eaf		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393eb1		6b		rtl		                RTL
.393eb2						OPL2_SET_WAVEFORM
.393eb2		48		pha		                PHA             ; begin setdp macro
.393eb3		08		php		                PHP
.393eb4		c2 20		rep #$20	                REP #$20        ; set A long
.393eb6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393eb9		5b		tcd		                TCD
.393eba		28		plp		                PLP
.393ebb		68		pla		                PLA             ; end setdp macro
.393ebc		c2 20		rep #$20	                REP #$20        ; set A long
.393ebe		a9 e0 00	lda #$00e0	                LDA #$00E0;
.393ec1		85 28		sta $28		                STA OPL2_REG_REGION
.393ec3		20 d7 3e	jsr $393ed7	                JSR OPL2_GET_REG_OFFSET
.393ec6		e2 20		sep #$20	                SEP #$20        ; set A short
.393ec8		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393eca		29 03		and #$03	                AND #$03
.393ecc		85 32		sta $32		                STA OPL2_PARAMETER0
.393ece		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ed0		29 fc		and #$fc	                AND #$FC
.393ed2		05 32		ora $32		                ORA OPL2_PARAMETER0
.393ed4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ed6		6b		rtl		                RTL
.393ed7						OPL2_GET_REG_OFFSET
.393ed7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.393ed9		a5 27		lda $27		                LDA OPL2_CHANNEL
.393edb		29 0f		and #$0f	                AND #$0F
.393edd		aa		tax		                TAX
.393ede		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393ee0		d0 06		bne $393ee8	                BNE OPL2_Get_Register_Offset_l0
.393ee2		bf 1f 15 39	lda $39151f,x	                LDA @lregisterOffsets_operator0, X
.393ee6		80 04		bra $393eec	                BRA OPL2_Get_Register_Offset_exit
.393ee8						OPL2_Get_Register_Offset_l0
.393ee8		bf 28 15 39	lda $391528,x	                LDA @lregisterOffsets_operator1, X
.393eec						OPL2_Get_Register_Offset_exit
.393eec		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393eee		a9 00		lda #$00	                LDA #$00
.393ef0		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393ef2		c2 30		rep #$30	                REP #$30        ; set A&X long
.393ef4		18		clc		                CLC
.393ef5		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393ef8		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393efa		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393efc		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393efe		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f01		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f03		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393f04						ITRACE
.393f04		08		php		                PHP
.393f05		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f07		8b		phb		                PHB                 ; Print the text
.393f08		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393f0a		aa		tax		                TAX                 ; ... into X
.393f0b		e2 20		sep #$20	                SEP #$20        ; set A short
.393f0d		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393f0f		48		pha		                PHA
.393f10		ab		plb		                PLB                 ; ... into B
.393f11		22 68 07 39	jsl $390768	                JSL IPUTS           ; Print the string
.393f15		c2 20		rep #$20	                REP #$20        ; set A long
.393f17		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393f19		83 08		sta $08,s	                STA #8,S
.393f1b		a3 02		lda $02,s	                LDA #2,S
.393f1d		83 06		sta $06,s	                STA #6,S
.393f1f		ab		plb		                PLB
.393f20		68		pla		                PLA                 ; Clean up the stack
.393f21		68		pla		                PLA
.393f22		28		plp		                PLP
.393f23		6b		rtl		                RTL
.393f24						ISETTIMEOUT
.393f24		8b		phb		                PHB
.393f25		0b		phd		                PHD
.393f26		08		php		                PHP
.393f27		48		pha		                PHA             ; begin setdbr macro
.393f28		08		php		                PHP
.393f29		e2 20		sep #$20	                SEP #$20        ; set A short
.393f2b		a9 00		lda #$00	                LDA #0
.393f2d		48		pha		                PHA
.393f2e		ab		plb		                PLB
.393f2f		28		plp		                PLP
.393f30		68		pla		                PLA             ; end setdbr macro
.393f31		48		pha		                PHA             ; begin setdp macro
.393f32		08		php		                PHP
.393f33		c2 20		rep #$20	                REP #$20        ; set A long
.393f35		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f38		5b		tcd		                TCD
.393f39		28		plp		                PLP
.393f3a		68		pla		                PLA             ; end setdp macro
.393f3b		78		sei		                SEI                             ; We don't want to be interrupted
.393f3c		e2 20		sep #$20	                SEP #$20        ; set A short
.393f3e		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393f40		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.393f42		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.393f44		85 0c		sta $032c	                STA @b BIOS_FLAGS
.393f46		28		plp		done            PLP
.393f47		2b		pld		                PLD
.393f48		ab		plb		                PLB
.393f49		6b		rtl		                RTL
.393f4a						ICMDBLOCK
.393f4a		0b		phd		                PHD
.393f4b		08		php		                PHP
.393f4c		48		pha		                PHA             ; begin setdp macro
.393f4d		08		php		                PHP
.393f4e		c2 20		rep #$20	                REP #$20        ; set A long
.393f50		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f53		5b		tcd		                TCD
.393f54		28		plp		                PLP
.393f55		68		pla		                PLA             ; end setdp macro
.393f56		e2 20		sep #$20	                SEP #$20        ; set A short
.393f58		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393f5a		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393f5c		d0 06		bne $393f64	                BNE ret_success             ; No: just return
.393f5e		22 af 68 39	jsl $3968af	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393f62		90 0c		bcc $393f70	                BCC pass_failure
.393f64						ret_success
.393f64		e2 20		sep #$20	                SEP #$20        ; set A short
.393f66		64 00		stz $0320	                STZ BIOS_STATUS
.393f68		28		plp		                PLP
.393f69		2b		pld		                PLD
.393f6a		38		sec		                SEC
.393f6b		6b		rtl		                RTL
.393f6c						ret_failure
.393f6c		e2 20		sep #$20	                SEP #$20        ; set A short
.393f6e		85 00		sta $0320	                STA BIOS_STATUS
.393f70		28		plp		pass_failure    PLP
.393f71		2b		pld		                PLD
.393f72		18		clc		                CLC
.393f73		6b		rtl		                RTL
.393f74						IGETBLOCK
.393f74		5a		phy		                PHY
.393f75		0b		phd		                PHD
.393f76		8b		phb		                PHB
.393f77		08		php		                PHP
.393f78		48		pha		                PHA             ; begin setdbr macro
.393f79		08		php		                PHP
.393f7a		e2 20		sep #$20	                SEP #$20        ; set A short
.393f7c		a9 00		lda #$00	                LDA #0
.393f7e		48		pha		                PHA
.393f7f		ab		plb		                PLB
.393f80		28		plp		                PLP
.393f81		68		pla		                PLA             ; end setdbr macro
.393f82		48		pha		                PHA             ; begin setdp macro
.393f83		08		php		                PHP
.393f84		c2 20		rep #$20	                REP #$20        ; set A long
.393f86		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f89		5b		tcd		                TCD
.393f8a		28		plp		                PLP
.393f8b		68		pla		                PLA             ; end setdp macro
.393f8c		e2 20		sep #$20	                SEP #$20        ; set A short
.393f8e		a0 00 00	ldy #$0000	                LDY #0
.393f91		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.393f93		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.393f95		c8		iny		                INY
.393f96		c0 00 02	cpy #$0200	                CPY #512
.393f99		d0 f8		bne $393f93	                BNE clr_loop
.393f9b		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393f9d		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393f9f		f0 14		beq $393fb5	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393fa1		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.393fa3		f0 18		beq $393fbd	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.393fa5		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393fa7		f0 1c		beq $393fc5	                BEQ hd_getblock
.393fa9		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393fab						ret_failure
.393fab		e2 20		sep #$20	                SEP #$20        ; set A short
.393fad		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393faf		28		plp		                PLP
.393fb0		ab		plb		                PLB
.393fb1		2b		pld		                PLD
.393fb2		7a		ply		                PLY
.393fb3		38		sec		                SEC                                 ; Return failure
.393fb4		6b		rtl		                RTL
.393fb5		22 bb 5d 39	jsl $395dbb	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.393fb9		b0 12		bcs $393fcd	                BCS ret_success
.393fbb		80 ee		bra $393fab	                BRA ret_failure
.393fbd		22 b4 66 39	jsl $3966b4	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.393fc1		b0 0a		bcs $393fcd	                BCS ret_success
.393fc3		80 e6		bra $393fab	                BRA ret_failure
.393fc5		22 c8 6c 39	jsl $396cc8	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.393fc9		b0 02		bcs $393fcd	                BCS ret_success
.393fcb		80 de		bra $393fab	                BRA ret_failure
.393fcd						ret_success
.393fcd		e2 20		sep #$20	                SEP #$20        ; set A short
.393fcf		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393fd1		28		plp		                PLP
.393fd2		ab		plb		                PLB
.393fd3		2b		pld		                PLD
.393fd4		7a		ply		                PLY
.393fd5		38		sec		                SEC                                 ; Return success
.393fd6		6b		rtl		                RTL
.393fd7						IPUTBLOCK
.393fd7		0b		phd		                PHD
.393fd8		8b		phb		                PHB
.393fd9		08		php		                PHP
.393fda		48		pha		                PHA             ; begin setdbr macro
.393fdb		08		php		                PHP
.393fdc		e2 20		sep #$20	                SEP #$20        ; set A short
.393fde		a9 00		lda #$00	                LDA #0
.393fe0		48		pha		                PHA
.393fe1		ab		plb		                PLB
.393fe2		28		plp		                PLP
.393fe3		68		pla		                PLA             ; end setdbr macro
.393fe4		48		pha		                PHA             ; begin setdp macro
.393fe5		08		php		                PHP
.393fe6		c2 20		rep #$20	                REP #$20        ; set A long
.393fe8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393feb		5b		tcd		                TCD
.393fec		28		plp		                PLP
.393fed		68		pla		                PLA             ; end setdp macro
.393fee		e2 20		sep #$20	                SEP #$20        ; set A short
.393ff0		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393ff2		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393ff4		f0 13		beq $394009	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393ff6		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393ff8		f0 17		beq $394011	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393ffa		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393ffc		f0 1b		beq $394019	                BEQ hd_putblock
.393ffe		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394000						ret_failure
.394000		e2 20		sep #$20	                SEP #$20        ; set A short
.394002		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394004		28		plp		                PLP
.394005		ab		plb		                PLB
.394006		2b		pld		                PLD
.394007		18		clc		                CLC                                 ; Return failure
.394008		6b		rtl		                RTL
.394009		22 62 5e 39	jsl $395e62	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.39400d		90 f1		bcc $394000	                BCC ret_failure
.39400f		80 10		bra $394021	                BRA ret_success
.394011		22 19 67 39	jsl $396719	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.394015		90 e9		bcc $394000	                BCC ret_failure
.394017		80 08		bra $394021	                BRA ret_success
.394019		22 53 6d 39	jsl $396d53	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.39401d		90 e1		bcc $394000	                BCC ret_failure
.39401f		80 00		bra $394021	                BRA ret_success
.394021						ret_success
.394021		e2 20		sep #$20	                SEP #$20        ; set A short
.394023		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.394025		28		plp		                PLP
.394026		ab		plb		                PLB
.394027		2b		pld		                PLD
.394028		38		sec		                SEC                                 ; Return success
.394029		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.39402a						DOS_DIROPEN
.39402a		da		phx		                PHX
.39402b		5a		phy		                PHY
.39402c		0b		phd		                PHD
.39402d		8b		phb		                PHB
.39402e		08		php		                PHP
.39402f		48		pha		                PHA             ; begin setdbr macro
.394030		08		php		                PHP
.394031		e2 20		sep #$20	                SEP #$20        ; set A short
.394033		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394035		48		pha		                PHA
.394036		ab		plb		                PLB
.394037		28		plp		                PLP
.394038		68		pla		                PLA             ; end setdbr macro
.394039		48		pha		                PHA             ; begin setdp macro
.39403a		08		php		                PHP
.39403b		c2 20		rep #$20	                REP #$20        ; set A long
.39403d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394040		5b		tcd		                TCD
.394041		28		plp		                PLP
.394042		68		pla		                PLA             ; end setdp macro
.394043		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.394046		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.394049		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.39404c		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.39404f		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.394052		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394054		85 18		sta $0338	                STA DOS_DIR_PTR
.394056		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394059		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39405b		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39405d		e2 20		sep #$20	                SEP #$20        ; set A short
.39405f		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.394062		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394064		d0 24		bne $39408a	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.394066						fetch_fat12
.394066		e2 20		sep #$20	                SEP #$20        ; set A short
.394068		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.39406a		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.39406d		c2 20		rep #$20	                REP #$20        ; set A long
.39406f		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394071		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394073		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394075		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394077		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.39407a		85 02		sta $0322	                STA BIOS_LBA
.39407c		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39407f		85 04		sta $0324	                STA BIOS_LBA+2
.394081		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.394085		b0 1f		bcs $3940a6	                BCS do_success              ; If sucessful, set the directory cursor
.394087		82 84 18	brl $39590e	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39408a						fetch_fat32
.39408a		e2 20		sep #$20	                SEP #$20        ; set A short
.39408c		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.39408e		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.394091		c2 20		rep #$20	                REP #$20        ; set A long
.394093		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.394096		85 10		sta $0330	                STA DOS_CLUS_ID
.394098		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39409b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39409d		22 0d 46 39	jsl $39460d	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.3940a1		b0 03		bcs $3940a6	                BCS do_success              ; If successful: set the directory cursor
.3940a3		82 68 18	brl $39590e	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3940a6		82 6c 18	brl $395915	do_success      BRL IF_SUCCESS
.3940a9						DOS_DIRFIRST
.3940a9		0b		phd		                PHD
.3940aa		08		php		                PHP
.3940ab		48		pha		                PHA             ; begin setdp macro
.3940ac		08		php		                PHP
.3940ad		c2 20		rep #$20	                REP #$20        ; set A long
.3940af		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940b2		5b		tcd		                TCD
.3940b3		28		plp		                PLP
.3940b4		68		pla		                PLA             ; end setdp macro
.3940b5		c2 20		rep #$20	                REP #$20        ; set A long
.3940b7		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.3940ba		85 18		sta $0338	                STA DOS_DIR_PTR
.3940bc		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3940bf		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3940c1		28		plp		                PLP
.3940c2		2b		pld		                PLD
.3940c3		6b		rtl		                RTL
.3940c4						DOS_DIRNEXT
.3940c4		da		phx		                PHX
.3940c5		5a		phy		                PHY
.3940c6		0b		phd		                PHD
.3940c7		8b		phb		                PHB
.3940c8		08		php		                PHP
.3940c9		48		pha		                PHA             ; begin setdbr macro
.3940ca		08		php		                PHP
.3940cb		e2 20		sep #$20	                SEP #$20        ; set A short
.3940cd		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3940cf		48		pha		                PHA
.3940d0		ab		plb		                PLB
.3940d1		28		plp		                PLP
.3940d2		68		pla		                PLA             ; end setdbr macro
.3940d3		48		pha		                PHA             ; begin setdp macro
.3940d4		08		php		                PHP
.3940d5		c2 20		rep #$20	                REP #$20        ; set A long
.3940d7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940da		5b		tcd		                TCD
.3940db		28		plp		                PLP
.3940dc		68		pla		                PLA             ; end setdp macro
.3940dd		c2 20		rep #$20	                REP #$20        ; set A long
.3940df		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.3940e0		a5 18		lda $0338	                LDA DOS_DIR_PTR
.3940e2		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.3940e5		85 18		sta $0338	                STA DOS_DIR_PTR
.3940e7		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3940e9		69 00 00	adc #$0000	                ADC #0
.3940ec		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3940ee		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3940ef		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.3940f2		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.3940f4		85 28		sta $0348	                STA DOS_TEMP
.3940f6		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.3940f9		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.3940fb		85 2a		sta $034a	                STA DOS_TEMP+2
.3940fd		30 0c		bmi $39410b	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.3940ff		f0 03		beq $394104	                BEQ check_lower
.394101		82 11 18	brl $395915	                BRL IF_SUCCESS
.394104		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.394106		f0 03		beq $39410b	                BEQ get_next_block
.394108		82 0a 18	brl $395915	                BRL IF_SUCCESS
.39410b						get_next_block
.39410b		e2 20		sep #$20	                SEP #$20        ; set A short
.39410d		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394110		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.394112		f0 38		beq $39414c	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.394114						next_sector
.394114		c2 20		rep #$20	                REP #$20        ; set A long
.394116		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.394119		1a		inc a		                INC A
.39411a		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.39411d		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.394120		d0 07		bne $394129	                BNE read_sector
.394122		e2 20		sep #$20	                SEP #$20        ; set A short
.394124		a9 00		lda #$00	                LDA #0
.394126		82 e1 17	brl $39590a	                BRL IF_FAILURE
.394129						read_sector
.394129		c2 20		rep #$20	                REP #$20        ; set A long
.39412b		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.39412e		85 02		sta $0322	                STA BIOS_LBA
.394130		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394133		85 04		sta $0324	                STA BIOS_LBA+2
.394135		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.394138		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39413a		85 18		sta $0338	                STA DOS_DIR_PTR
.39413c		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39413f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394141		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394143		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.394147		b0 39		bcs $394182	                BCS do_success              ; If successful: set the directory cursor
.394149		82 c2 17	brl $39590e	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39414c						next_cluster
.39414c		c2 20		rep #$20	                REP #$20        ; set A long
.39414e		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.394151		85 10		sta $0330	                STA DOS_CLUS_ID
.394153		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394156		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394158		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.39415b		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39415d		85 18		sta $0338	                STA DOS_DIR_PTR
.39415f		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394162		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394164		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394166		22 21 4a 39	jsl $394a21	                JSL NEXTCLUSTER             ; Try to find the next cluster
.39416a		b0 03		bcs $39416f	                BCS set_next
.39416c		82 9f 17	brl $39590e	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.39416f		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394171		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394174		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394176		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394179		22 0d 46 39	jsl $39460d	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.39417d		b0 03		bcs $394182	                BCS do_success              ; If successful: set the directory cursor
.39417f		82 8c 17	brl $39590e	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394182		82 90 17	brl $395915	do_success      BRL IF_SUCCESS
.394185						DOS_DIRFINDFREE
.394185		da		phx		                PHX
.394186		5a		phy		                PHY
.394187		0b		phd		                PHD
.394188		8b		phb		                PHB
.394189		08		php		                PHP
.39418a		48		pha		                PHA             ; begin setdbr macro
.39418b		08		php		                PHP
.39418c		e2 20		sep #$20	                SEP #$20        ; set A short
.39418e		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394190		48		pha		                PHA
.394191		ab		plb		                PLB
.394192		28		plp		                PLP
.394193		68		pla		                PLA             ; end setdbr macro
.394194		48		pha		                PHA             ; begin setdp macro
.394195		08		php		                PHP
.394196		c2 20		rep #$20	                REP #$20        ; set A long
.394198		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39419b		5b		tcd		                TCD
.39419c		28		plp		                PLP
.39419d		68		pla		                PLA             ; end setdp macro
.39419e		22 2c 54 39	jsl $39542c	                JSL IF_DIROPEN
.3941a2		b0 06		bcs $3941aa	                BCS start_walk
.3941a4		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.3941a7		82 28 00	brl $3941d2	                BRL ret_failure
.3941aa		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.3941ad						chk_entry
.3941ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3941af		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.3941b1		f0 1c		beq $3941cf	                BEQ ret_success             ; If 0: we have a blank... return it
.3941b3		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.3941b5		f0 18		beq $3941cf	                BEQ ret_success             ; Yes: return it
.3941b7		22 66 54 39	jsl $395466	                JSL IF_DIRNEXT              ; Go to the next directory entry
.3941bb		b0 ed		bcs $3941aa	                BCS start_walk              ; If we got one, start walking it
.3941bd		22 d5 41 39	jsl $3941d5	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.3941c1		90 0f		bcc $3941d2	                BCC ret_failure             ; If that didn't work, return the failure
.3941c3		c2 20		rep #$20	                REP #$20        ; set A long
.3941c5		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.3941c8		85 18		sta $0338	                STA DOS_DIR_PTR
.3941ca		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941cd		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941cf		82 43 17	brl $395915	ret_success     BRL IF_SUCCESS
.3941d2		82 35 17	brl $39590a	ret_failure     BRL IF_FAILURE
.3941d5						DOS_DIRAPPEND
.3941d5		da		phx		                PHX
.3941d6		8b		phb		                PHB
.3941d7		0b		phd		                PHD
.3941d8		08		php		                PHP
.3941d9		48		pha		                PHA             ; begin setdbr macro
.3941da		08		php		                PHP
.3941db		e2 20		sep #$20	                SEP #$20        ; set A short
.3941dd		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941df		48		pha		                PHA
.3941e0		ab		plb		                PLB
.3941e1		28		plp		                PLP
.3941e2		68		pla		                PLA             ; end setdbr macro
.3941e3		48		pha		                PHA             ; begin setdp macro
.3941e4		08		php		                PHP
.3941e5		c2 20		rep #$20	                REP #$20        ; set A long
.3941e7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941ea		5b		tcd		                TCD
.3941eb		28		plp		                PLP
.3941ec		68		pla		                PLA             ; end setdp macro
.3941ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3941ef		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.3941f2		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.3941f4		f0 09		beq $3941ff	                BEQ clr_sector                  ; Yes: clear out the directory data
.3941f6						ret_failure
.3941f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3941f8		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.3941fa		85 0e		sta $032e	                STA DOS_STATUS
.3941fc		82 3e 00	brl $39423d	                BRL pass_failure
.3941ff						clr_sector
.3941ff		c2 20		rep #$20	                REP #$20        ; set A long
.394201		a9 00 00	lda #$0000	                LDA #0
.394204		a2 00 00	ldx #$0000	                LDX #0
.394207		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.39420a		e8		inx		                INX
.39420b		e8		inx		                INX
.39420c		e0 00 02	cpx #$0200	                CPX #512
.39420f		d0 f6		bne $394207	                BNE clr_loop
.394211		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.394214		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394216		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394219		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39421b		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.39421e		85 10		sta $0330	                STA DOS_CLUS_ID
.394220		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394223		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394225		22 42 4e 39	jsl $394e42	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.394229		90 12		bcc $39423d	                BCC pass_failure                ; If there was an error, pass it up the chain
.39422b		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.39422e		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394231		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394234		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394237		28		plp		ret_success     PLP
.394238		2b		pld		                PLD
.394239		ab		plb		                PLB
.39423a		fa		plx		                PLX
.39423b		38		sec		                SEC
.39423c		6b		rtl		                RTL
.39423d		28		plp		pass_failure    PLP
.39423e		2b		pld		                PLD
.39423f		ab		plb		                PLB
.394240		fa		plx		                PLX
.394241		18		clc		                CLC
.394242		6b		rtl		                RTL
.394243						DOS_DIRWRITE
.394243		da		phx		                PHX
.394244		5a		phy		                PHY
.394245		0b		phd		                PHD
.394246		8b		phb		                PHB
.394247		08		php		                PHP
.394248		48		pha		                PHA             ; begin setdbr macro
.394249		08		php		                PHP
.39424a		e2 20		sep #$20	                SEP #$20        ; set A short
.39424c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39424e		48		pha		                PHA
.39424f		ab		plb		                PLB
.394250		28		plp		                PLP
.394251		68		pla		                PLA             ; end setdbr macro
.394252		48		pha		                PHA             ; begin setdp macro
.394253		08		php		                PHP
.394254		c2 20		rep #$20	                REP #$20        ; set A long
.394256		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394259		5b		tcd		                TCD
.39425a		28		plp		                PLP
.39425b		68		pla		                PLA             ; end setdp macro
.39425c		e2 20		sep #$20	                SEP #$20        ; set A short
.39425e		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394261		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.394263		f0 1f		beq $394284	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.394265						write_sector
.394265		c2 20		rep #$20	                REP #$20        ; set A long
.394267		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.39426a		85 02		sta $0322	                STA BIOS_LBA
.39426c		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39426f		85 04		sta $0324	                STA BIOS_LBA+2
.394271		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394274		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394276		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394279		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39427b		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.39427f		b0 1f		bcs $3942a0	                BCS ret_success
.394281		82 86 16	brl $39590a	ret_failure     BRL IF_FAILURE
.394284						write_cluster
.394284		c2 20		rep #$20	                REP #$20        ; set A long
.394286		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394289		85 10		sta $0330	                STA DOS_CLUS_ID
.39428b		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39428e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394290		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394293		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394295		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394298		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39429a		22 4a 46 39	jsl $39464a	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.39429e		90 e1		bcc $394281	                BCC ret_failure
.3942a0		82 72 16	brl $395915	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$38a000					    DOS_HIGH_VARIABLES      = $38A000
=$38a000					    DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					    FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					    PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					    SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					    FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					    SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					    NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					    CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					    SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					    FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					    FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					    CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					    ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					    ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					    VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					    DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					    DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					    DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					    DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					    DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					    DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					    DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					    DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					    FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					    DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					    DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					    DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					    DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					    DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					    DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					    DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					    DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					    DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					    DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					    DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					    DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					    DOS_FILE_BUFFS          = $38B000
=3719168					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.3942a3						DOS_INIT
.3942a3		8b		phb		                PHB
.3942a4		0b		phd		                PHD
.3942a5		08		php		                PHP
.3942a6		48		pha		                PHA             ; begin setdbr macro
.3942a7		08		php		                PHP
.3942a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3942aa		a9 00		lda #$00	                LDA #0
.3942ac		48		pha		                PHA
.3942ad		ab		plb		                PLB
.3942ae		28		plp		                PLP
.3942af		68		pla		                PLA             ; end setdbr macro
.3942b0		48		pha		                PHA             ; begin setdp macro
.3942b1		08		php		                PHP
.3942b2		c2 20		rep #$20	                REP #$20        ; set A long
.3942b4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942b7		5b		tcd		                TCD
.3942b8		28		plp		                PLP
.3942b9		68		pla		                PLA             ; end setdp macro
.3942ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3942bc		c2 10		rep #$10	                REP #$10        ; set X long
.3942be		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.3942c1		a9 00		lda #$00	                LDA #0
.3942c3		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.3942c6		e8		inx		                INX
.3942c7		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.3942ca		d0 f7		bne $3942c3	                BNE b0_clr_loop
.3942cc		48		pha		                PHA             ; begin setdbr macro
.3942cd		08		php		                PHP
.3942ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3942d0		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3942d2		48		pha		                PHA
.3942d3		ab		plb		                PLB
.3942d4		28		plp		                PLP
.3942d5		68		pla		                PLA             ; end setdbr macro
.3942d6		48		pha		                PHA             ; begin setdp macro
.3942d7		08		php		                PHP
.3942d8		c2 20		rep #$20	                REP #$20        ; set A long
.3942da		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942dd		5b		tcd		                TCD
.3942de		28		plp		                PLP
.3942df		68		pla		                PLA             ; end setdp macro
.3942e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3942e2		c2 10		rep #$10	                REP #$10        ; set X long
.3942e4		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.3942e7		a9 00		lda #$00	                LDA #0
.3942e9		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.3942ec		e8		inx		                INX
.3942ed		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.3942f0		d0 f7		bne $3942e9	                BNE b38_clr_loop
.3942f2		c2 20		rep #$20	                REP #$20        ; set A long
.3942f4		a9 a2 46	lda #$46a2	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.3942f7		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.3942fb		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.3942fe		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.394302		e2 20		sep #$20	                SEP #$20        ; set A short
.394304		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.394306		85 01		sta $0321	                STA BIOS_DEV
.394308		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.39430a		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.39430e		a9 00		lda #$00	                LDA #0
.394310		a2 00 00	ldx #$0000	                LDX #0
.394313		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.394316		e8		inx		                INX
.394317		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.39431a		d0 f7		bne $394313	                BNE fd_zero_loop
.39431c		a9 00		lda #$00	                LDA #0
.39431e		a2 00 00	ldx #$0000	                LDX #0
.394321		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.394324		e8		inx		                INX
.394325		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.394328		d0 f7		bne $394321	                BNE sect_zero_loop
.39432a		c2 20		rep #$20	                REP #$20        ; set A long
.39432c		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.39432f		85 20		sta $0340	                STA @b DOS_FD_PTR
.394331		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.394334		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394336		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.394339		85 28		sta $0348	                STA @b DOS_TEMP
.39433b		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.39433e		85 2a		sta $034a	                STA @b DOS_TEMP+2
.394340		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.394343		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.394346		a5 28		lda $0348	                LDA @b DOS_TEMP
.394348		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39434a		c8		iny		                INY
.39434b		c8		iny		                INY
.39434c		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.39434e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394350		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.394351		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.394353		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.394356		85 20		sta $0340	                STA @b DOS_FD_PTR
.394358		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.39435a		69 00 00	adc #$0000	                ADC #0
.39435d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39435f		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.394360		a5 28		lda $0348	                LDA @b DOS_TEMP
.394362		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394365		85 28		sta $0348	                STA @b DOS_TEMP
.394367		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394369		69 00 00	adc #$0000	                ADC #0
.39436c		85 2a		sta $034a	                STA @b DOS_TEMP+2
.39436e		ca		dex		                DEX                     ; Count down the descriptors...
.39436f		d0 d2		bne $394343	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.394371		28		plp		                PLP
.394372		2b		pld		                PLD
.394373		ab		plb		                PLB
.394374		6b		rtl		                RTL
.394375						DOS_MOUNT
.394375		8b		phb		                PHB
.394376		0b		phd		                PHD
.394377		08		php		                PHP
.394378		48		pha		                PHA             ; begin setdbr macro
.394379		08		php		                PHP
.39437a		e2 20		sep #$20	                SEP #$20        ; set A short
.39437c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39437e		48		pha		                PHA
.39437f		ab		plb		                PLB
.394380		28		plp		                PLP
.394381		68		pla		                PLA             ; end setdbr macro
.394382		48		pha		                PHA             ; begin setdp macro
.394383		08		php		                PHP
.394384		c2 20		rep #$20	                REP #$20        ; set A long
.394386		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394389		5b		tcd		                TCD
.39438a		28		plp		                PLP
.39438b		68		pla		                PLA             ; end setdp macro
.39438c		e2 20		sep #$20	                SEP #$20        ; set A short
.39438e		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.394390		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.394394		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.394396		f0 1f		beq $3943b7	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.394398		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.39439a		f0 26		beq $3943c2	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.39439c		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.39439e		f0 0b		beq $3943ab	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.3943a0		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.3943a2		85 0e		sta $032e	                STA DOS_STATUS
.3943a4		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.3943a6		85 00		sta $0320	                STA BIOS_STATUS
.3943a8		82 7c 01	brl $394527	                BRL ret_failure
.3943ab		22 85 67 39	jsl $396785	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.3943af		b0 03		bcs $3943b4	                BCS fdc_success
.3943b1		82 73 01	brl $394527	                BRL ret_failure
.3943b4		82 67 01	brl $39451e	fdc_success     BRL ret_success
.3943b7		22 6d 5d 39	jsl $395d6d	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.3943bb		b0 10		bcs $3943cd	                BCS get_mbr             ; Continue if success
.3943bd		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3943bf		82 65 01	brl $394527	                BRL ret_failure
.3943c2		22 cd 6b 39	jsl $396bcd	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.3943c6		b0 05		bcs $3943cd	                BCS get_mbr             ; Continue if success
.3943c8		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3943ca		82 5a 01	brl $394527	                BRL ret_failure
.3943cd						get_mbr
.3943cd		c2 30		rep #$30	                REP #$30        ; set A&X long
.3943cf		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.3943d1		64 04		stz $0324	                STZ BIOS_LBA+2
.3943d3		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3943d6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3943d8		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3943db		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3943dd		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.3943e1		b0 07		bcs $3943ea	                BCS chk_signature       ; If success, check the signature bytes
.3943e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3943e5		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.3943e7		82 3d 01	brl $394527	                BRL ret_failure
.3943ea						chk_signature
.3943ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3943ec		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.3943ef		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.3943f1		d0 07		bne $3943fa	                BNE not_mbr             ; No: signal we could find the MBR
.3943f3		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.3943f6		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.3943f8		f0 05		beq $3943ff	                BEQ chk_part_type       ; Yes: we have an MBR
.3943fa		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.3943fc		82 28 01	brl $394527	                BRL ret_failure
.3943ff		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.394402		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.394404		f0 05		beq $39440b	                BEQ get_LBA             ; Is FAT32 with LBA?
.394406		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394408		82 1c 01	brl $394527	                BRL ret_failure
.39440b		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.39440e		c2 20		rep #$20	                REP #$20        ; set A long
.394410		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.394413		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.394416		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.394419		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.39441c		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.39441f		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.394422		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.394425		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394428		e2 20		sep #$20	                SEP #$20        ; set A short
.39442a		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.39442c		8d 00 a0	sta $38a000	                STA DEVICE
.39442f		a9 00		lda #$00	                LDA #0
.394431		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.394434		c2 20		rep #$20	                REP #$20        ; set A long
.394436		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.394439		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39443b		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39443e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394440		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394443		85 02		sta $0322	                STA BIOS_LBA
.394445		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394448		85 04		sta $0324	                STA BIOS_LBA+2
.39444a		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.39444e		b0 1c		bcs $39446c	                BCS get_first_sec       ; Got it? Start parsing it
.394450		e2 20		sep #$20	                SEP #$20        ; set A short
.394452		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.394454		82 d0 00	brl $394527	                BRL ret_failure
.394457						chk_bpb_sig
.394457		e2 20		sep #$20	                SEP #$20        ; set A short
.394459		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.39445c		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39445e		d0 07		bne $394467	                BNE not_bpb             ; No: signal we could find the volume ID
.394460		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.394463		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394465		f0 05		beq $39446c	                BEQ get_first_sec       ; Yes: we have an volume ID
.394467		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394469		82 bb 00	brl $394527	                BRL ret_failure
.39446c						get_first_sec
.39446c		c2 20		rep #$20	                REP #$20        ; set A long
.39446e		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.394471		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.394474		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394477		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.39447a		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.39447d		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394480		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.394481		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394484		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394487		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.39448a		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.39448d		69 00 00	adc #$0000	                ADC #0
.394490		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.394493		e2 20		sep #$20	                SEP #$20        ; set A short
.394495		a2 00 00	ldx #$0000	                LDX #0
.394498		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.39449c		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.3944a0		e8		inx		                INX
.3944a1		e0 04 00	cpx #$0004	                CPX #4
.3944a4		d0 f2		bne $394498	                BNE cpy_secperfat
.3944a6		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.3944a9		0a		asl a		                ASL A
.3944aa		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3944ad		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.3944b0		2a		rol a		                ROL A
.3944b1		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3944b4		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.3944b7		2a		rol a		                ROL A
.3944b8		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3944bb		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.3944be		2a		rol a		                ROL A
.3944bf		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3944c2		18		clc		                CLC
.3944c3		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.3944c6		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.3944c9		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3944cc		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.3944cf		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3944d2		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3944d5		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.3944d8		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3944db		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3944de		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.3944e1		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.3944e4		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3944e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3944e9		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.3944ec		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.3944ef		18		clc		                CLC
.3944f0		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.3944f3		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.3944f6		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.3944f9		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.3944fc		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.3944ff		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.394502		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394505		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.394508		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.39450b		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.39450e		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.394511		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.394514		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.394516		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.394519		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.39451b		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.39451e						ret_success
.39451e		e2 20		sep #$20	                SEP #$20        ; set A short
.394520		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394522		28		plp		                PLP
.394523		2b		pld		                PLD
.394524		ab		plb		                PLB
.394525		38		sec		                SEC
.394526		6b		rtl		                RTL
.394527						ret_failure
.394527		e2 20		sep #$20	                SEP #$20        ; set A short
.394529		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.39452b		28		plp		                PLP
.39452c		2b		pld		                PLD
.39452d		ab		plb		                PLB
.39452e		18		clc		                CLC
.39452f		6b		rtl		                RTL
.394530						DOS_TESTBOOT
.394530		8b		phb		                PHB
.394531		0b		phd		                PHD
.394532		da		phx		                PHX
.394533		08		php		                PHP
.394534		48		pha		                PHA             ; begin setdbr macro
.394535		08		php		                PHP
.394536		e2 20		sep #$20	                SEP #$20        ; set A short
.394538		a9 00		lda #$00	                LDA #0
.39453a		48		pha		                PHA
.39453b		ab		plb		                PLB
.39453c		28		plp		                PLP
.39453d		68		pla		                PLA             ; end setdbr macro
.39453e		48		pha		                PHA             ; begin setdp macro
.39453f		08		php		                PHP
.394540		c2 20		rep #$20	                REP #$20        ; set A long
.394542		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394545		5b		tcd		                TCD
.394546		28		plp		                PLP
.394547		68		pla		                PLA             ; end setdp macro
.394548		c2 10		rep #$10	                REP #$10        ; set X long
.39454a						chk_dev
.39454a		e2 20		sep #$20	                SEP #$20        ; set A short
.39454c		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.39454e		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394550		f0 24		beq $394576	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.394552		c2 30		rep #$30	                REP #$30        ; set A&X long
.394554		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.394557		85 02		sta $0322	                STA @b BIOS_LBA
.394559		85 04		sta $0324	                STA @b BIOS_LBA+2
.39455b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.39455e		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394560		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394563		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.394565		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.394569		b0 03		bcs $39456e	                BCS chk_mbr_brl
.39456b		82 47 00	brl $3945b5	                BRL done                    ; If failed... just return
.39456e						chk_mbr_brl
.39456e		e2 20		sep #$20	                SEP #$20        ; set A short
.394570		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.394574		80 04		bra $39457a	                BRA chk_brl
.394576		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.39457a		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.39457c		f0 06		beq $394584	                BEQ chk_magic               ; Yes: check for the magic text
.39457e		c9 82		cmp #$82	                CMP #$82
.394580		f0 02		beq $394584	                BEQ chk_magic
.394582		80 31		bra $3945b5	                BRA done                    ; No: just return
.394584		a2 00 00	ldx #$0000	chk_magic       LDX #0
.394587		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.39458b		df ba 45 39	cmp $3945ba,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.39458f		d0 24		bne $3945b5	                BNE done                    ; If it's not equal, just return
.394591		e8		inx		                INX                         ; Otherwise, check the next one
.394592		e0 08 00	cpx #$0008	                CPX #8
.394595		d0 f0		bne $394587	                BNE magic_loop              ; Until we've checked all 8 bytes
.394597		c2 30		rep #$30	                REP #$30        ; set A&X long
.394599		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.39459c		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.39459f		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.3945a2		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.3945a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3945a7		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.3945a9		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.3945ab		f0 04		beq $3945b1	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.3945ad		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.3945b1		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.3945b5		28		plp		done            PLP
.3945b6		2b		pld		                PLD
.3945b7		ab		plb		                PLB
.3945b8		fa		plx		                PLX
.3945b9		6b		rtl		                RTL
>3945ba		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.3945c2						DOS_CALC_LBA
.3945c2		8b		phb		                PHB
.3945c3		0b		phd		                PHD
.3945c4		08		php		                PHP
.3945c5		48		pha		                PHA             ; begin setdbr macro
.3945c6		08		php		                PHP
.3945c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3945c9		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3945cb		48		pha		                PHA
.3945cc		ab		plb		                PLB
.3945cd		28		plp		                PLP
.3945ce		68		pla		                PLA             ; end setdbr macro
.3945cf		48		pha		                PHA             ; begin setdp macro
.3945d0		08		php		                PHP
.3945d1		c2 20		rep #$20	                REP #$20        ; set A long
.3945d3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945d6		5b		tcd		                TCD
.3945d7		28		plp		                PLP
.3945d8		68		pla		                PLA             ; end setdp macro
.3945d9		c2 20		rep #$20	                REP #$20        ; set A long
.3945db		38		sec		                SEC
.3945dc		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.3945de		e9 02 00	sbc #$0002	                SBC #2
.3945e1		85 28		sta $0348	                STA DOS_TEMP
.3945e3		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3945e5		e9 00 00	sbc #$0000	                SBC #0
.3945e8		85 2a		sta $034a	                STA DOS_TEMP+2
.3945ea		e2 10		sep #$10	                SEP #$10        ; set X short
.3945ec		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.3945ef		e0 01		cpx #$01	mult_loop       CPX #1
.3945f1		f0 07		beq $3945fa	                BEQ add_offset
.3945f3		06 28		asl $0348	                ASL DOS_TEMP
.3945f5		26 28		rol $0348	                ROL DOS_TEMP
.3945f7		ca		dex		                DEX
.3945f8		80 f5		bra $3945ef	                BRA mult_loop
.3945fa		18		clc		add_offset      CLC
.3945fb		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.3945fd		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394600		85 02		sta $0322	                STA BIOS_LBA
.394602		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394604		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.394607		85 04		sta $0324	                STA BIOS_LBA+2
.394609		28		plp		                PLP
.39460a		2b		pld		                PLD
.39460b		ab		plb		                PLB
.39460c		6b		rtl		                RTL
.39460d						DOS_GETCLUSTER
.39460d		8b		phb		                PHB
.39460e		0b		phd		                PHD
.39460f		08		php		                PHP
.394610		48		pha		                PHA             ; begin setdbr macro
.394611		08		php		                PHP
.394612		e2 20		sep #$20	                SEP #$20        ; set A short
.394614		a9 00		lda #$00	                LDA #0
.394616		48		pha		                PHA
.394617		ab		plb		                PLB
.394618		28		plp		                PLP
.394619		68		pla		                PLA             ; end setdbr macro
.39461a		48		pha		                PHA             ; begin setdp macro
.39461b		08		php		                PHP
.39461c		c2 20		rep #$20	                REP #$20        ; set A long
.39461e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394621		5b		tcd		                TCD
.394622		28		plp		                PLP
.394623		68		pla		                PLA             ; end setdp macro
.394624		c2 20		rep #$20	                REP #$20        ; set A long
.394626		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394628		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39462a		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39462c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39462e		22 c2 45 39	jsl $3945c2	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394632		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394636		90 09		bcc $394641	                BCC ret_failure
.394638						ret_success
.394638		e2 20		sep #$20	                SEP #$20        ; set A short
.39463a		64 0e		stz $032e	                STZ DOS_STATUS
.39463c		28		plp		                PLP
.39463d		2b		pld		                PLD
.39463e		ab		plb		                PLB
.39463f		38		sec		                SEC
.394640		6b		rtl		                RTL
.394641						ret_failure
.394641		e2 20		sep #$20	                SEP #$20        ; set A short
.394643		85 0e		sta $032e	                STA DOS_STATUS
.394645		28		plp		                PLP
.394646		2b		pld		                PLD
.394647		ab		plb		                PLB
.394648		18		clc		                CLC
.394649		6b		rtl		                RTL
.39464a						DOS_PUTCLUSTER
.39464a		8b		phb		                PHB
.39464b		0b		phd		                PHD
.39464c		08		php		                PHP
.39464d		48		pha		                PHA             ; begin setdbr macro
.39464e		08		php		                PHP
.39464f		e2 20		sep #$20	                SEP #$20        ; set A short
.394651		a9 00		lda #$00	                LDA #0
.394653		48		pha		                PHA
.394654		ab		plb		                PLB
.394655		28		plp		                PLP
.394656		68		pla		                PLA             ; end setdbr macro
.394657		48		pha		                PHA             ; begin setdp macro
.394658		08		php		                PHP
.394659		c2 20		rep #$20	                REP #$20        ; set A long
.39465b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39465e		5b		tcd		                TCD
.39465f		28		plp		                PLP
.394660		68		pla		                PLA             ; end setdp macro
.394661		c2 20		rep #$20	                REP #$20        ; set A long
.394663		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394665		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394667		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394669		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39466b		22 c2 45 39	jsl $3945c2	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39466f		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394673		90 09		bcc $39467e	                BCC ret_failure
.394675						ret_success
.394675		e2 20		sep #$20	                SEP #$20        ; set A short
.394677		64 0e		stz $032e	                STZ DOS_STATUS
.394679		28		plp		                PLP
.39467a		2b		pld		                PLD
.39467b		ab		plb		                PLB
.39467c		38		sec		                SEC
.39467d		6b		rtl		                RTL
.39467e						ret_failure
.39467e		e2 20		sep #$20	                SEP #$20        ; set A short
.394680		85 0e		sta $032e	                STA DOS_STATUS
.394682		28		plp		                PLP
.394683		2b		pld		                PLD
.394684		ab		plb		                PLB
.394685		18		clc		                CLC
.394686		6b		rtl		                RTL
>394687		40 46 00			DOS_FDC_NAME    .null "@F"
.39468a						DOS_FDC_DESC
>39468a		87 46 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>39468e		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>39468f		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>394693		40 53 00			DOS_SDC_NAME    .null "@S"
.394696						DOS_SDC_DESC
>394696		93 46 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>39469a		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>39469b		8a 46 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>39469f		40 48 00			DOS_HDC_NAME    .null "@H"
.3946a2						DOS_HD_DESC
>3946a2		9f 46 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3946a6		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3946a7		96 46 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3946ab						DOS_PARSE_DEV
.3946ab		8b		phb		                PHB
.3946ac		0b		phd		                PHD
.3946ad		08		php		                PHP
.3946ae		48		pha		                PHA             ; begin setdbr macro
.3946af		08		php		                PHP
.3946b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3946b2		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3946b4		48		pha		                PHA
.3946b5		ab		plb		                PLB
.3946b6		28		plp		                PLP
.3946b7		68		pla		                PLA             ; end setdbr macro
.3946b8		48		pha		                PHA             ; begin setdp macro
.3946b9		08		php		                PHP
.3946ba		c2 20		rep #$20	                REP #$20        ; set A long
.3946bc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946bf		5b		tcd		                TCD
.3946c0		28		plp		                PLP
.3946c1		68		pla		                PLA             ; end setdp macro
.3946c2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3946c4		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.3946c8		85 28		sta $0348	                STA DOS_TEMP
.3946ca		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.3946ce		85 2a		sta $034a	                STA DOS_TEMP+2
.3946d0		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3946d3		85 48		sta $0368	                STA DOS_STR2_PTR
.3946d5		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.3946d8		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.3946da		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.3946dd		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3946df		85 44		sta $0364	                STA DOS_STR1_PTR
.3946e1		c8		iny		                INY
.3946e2		c8		iny		                INY
.3946e3		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3946e5		85 46		sta $0366	                STA DOS_STR1_PTR+2
.3946e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3946e9		a0 00 00	ldy #$0000	                LDY #0
.3946ec		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.3946ee		f0 24		beq $394714	                BEQ found                   ; If it's NULL, we found a match
.3946f0		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.3946f2		d0 03		bne $3946f7	                BNE next_device             ; If no match, try to load the next device
.3946f4		c8		iny		                INY                         ; Go to the next character
.3946f5		80 f5		bra $3946ec	                BRA cmp_loop
.3946f7						next_device
.3946f7		c2 20		rep #$20	                REP #$20        ; set A long
.3946f9		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.3946fc		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3946fe		48		pha		                PHA
.3946ff		c8		iny		                INY
.394700		c8		iny		                INY
.394701		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394703		85 2a		sta $034a	                STA DOS_TEMP+2
.394705		68		pla		                PLA
.394706		85 28		sta $0348	                STA DOS_TEMP
.394708		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.39470a		d0 ce		bne $3946da	                BNE dev_loop                ; No: check this device
.39470c		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39470e		d0 ca		bne $3946da	                BNE dev_loop
.394710		28		plp		done            PLP                         ; Otherwise, return having not found a match
.394711		2b		pld		                PLD
.394712		ab		plb		                PLB
.394713		6b		rtl		                RTL
.394714		22 25 47 39	jsl $394725	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.394718		e2 20		sep #$20	                SEP #$20        ; set A short
.39471a		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.39471d		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39471f		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394723		80 eb		bra $394710	                BRA done
.394725						DOS_ADJUSTPATH
.394725		da		phx		                PHX
.394726		5a		phy		                PHY
.394727		8b		phb		                PHB
.394728		0b		phd		                PHD
.394729		08		php		                PHP
.39472a		48		pha		                PHA             ; begin setdbr macro
.39472b		08		php		                PHP
.39472c		e2 20		sep #$20	                SEP #$20        ; set A short
.39472e		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394730		48		pha		                PHA
.394731		ab		plb		                PLB
.394732		28		plp		                PLP
.394733		68		pla		                PLA             ; end setdbr macro
.394734		48		pha		                PHA             ; begin setdp macro
.394735		08		php		                PHP
.394736		c2 20		rep #$20	                REP #$20        ; set A long
.394738		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39473b		5b		tcd		                TCD
.39473c		28		plp		                PLP
.39473d		68		pla		                PLA             ; end setdp macro
.39473e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394740		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394742		98		tya		                TYA                             ; Compute the address of the first source byte
.394743		18		clc		                CLC
.394744		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.394747		aa		tax		                TAX
.394748		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.39474b		a8		tay		                TAY
.39474c		38		sec		                SEC                             ; Compute the number of bytes to copy
.39474d		a9 00 01	lda #$0100	                LDA #256
.394750		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394752		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394755		28		plp		                PLP
.394756		2b		pld		                PLD
.394757		ab		plb		                PLB
.394758		7a		ply		                PLY
.394759		fa		plx		                PLX
.39475a		6b		rtl		                RTL
.39475b						DOS_PARSE_PATH
.39475b		8b		phb		                PHB
.39475c		0b		phd		                PHD
.39475d		08		php		                PHP
.39475e		48		pha		                PHA             ; begin setdbr macro
.39475f		08		php		                PHP
.394760		e2 20		sep #$20	                SEP #$20        ; set A short
.394762		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394764		48		pha		                PHA
.394765		ab		plb		                PLB
.394766		28		plp		                PLP
.394767		68		pla		                PLA             ; end setdbr macro
.394768		48		pha		                PHA             ; begin setdp macro
.394769		08		php		                PHP
.39476a		c2 20		rep #$20	                REP #$20        ; set A long
.39476c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39476f		5b		tcd		                TCD
.394770		28		plp		                PLP
.394771		68		pla		                PLA             ; end setdp macro
.394772		c2 10		rep #$10	                REP #$10        ; set X long
.394774		e2 20		sep #$20	                SEP #$20        ; set A short
.394776		a2 00 00	ldx #$0000	                LDX #0
.394779		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.39477b		f0 1b		beq $394798	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.39477d		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.39477f		b0 05		bcs $394786	                BGE check_case          ; No: check the case
.394781		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.394783		82 64 00	brl $3947ea	                BRL ret_failure
.394786		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.394788		90 08		bcc $394792	                BLT next_char
.39478a		c9 7b		cmp #$7b	                CMP #'z'+1
.39478c		b0 04		bcs $394792	                BGE next_char
.39478e		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.394790		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394792		e8		inx		next_char       INX                     ; Move to the next character
.394793		e0 00 01	cpx #$0100	                CPX #$100
.394796		d0 e1		bne $394779	                BNE upcase_loop
.394798		22 ab 46 39	jsl $3946ab	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.39479c		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.39479e		c9 3a		cmp #$3a	                CMP #':'
.3947a0		d0 07		bne $3947a9	                BNE clr_name            ; If not colon, treat it as a file name
.3947a2		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3947a5		22 25 47 39	jsl $394725	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3947a9		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3947ac		a9 20		lda #$20	                LDA #' '
.3947ae		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3947b1		c8		iny		                INY
.3947b2		c0 0b 00	cpy #$000b	                CPY #11
.3947b5		d0 f7		bne $3947ae	                BNE clr_loop
.3947b7		a2 00 00	ldx #$0000	                LDX #0
.3947ba		a0 00 00	ldy #$0000	                LDY #0
.3947bd		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.3947bf		f0 20		beq $3947e1	                BEQ ret_success         ; If NULL: we've finished parsing the path
.3947c1		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.3947c3		f0 0a		beq $3947cf	                BEQ cpy_ext             ; And move to the extension
.3947c5		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.3947c8		e8		inx		                INX
.3947c9		c8		iny		                INY                     ; Move to the next character
.3947ca		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.3947cd		d0 ee		bne $3947bd	                BNE cpy_name_loop       ; No: process this one
.3947cf		e8		inx		cpy_ext         INX                     ; Skip the dot
.3947d0		a0 08 00	ldy #$0008	                LDY #8
.3947d3		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3947d5		f0 0a		beq $3947e1	                BEQ ret_success         ; If it's NULL, we've finished
.3947d7		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.3947da		e8		inx		                INX
.3947db		c8		iny		                INY                     ; Move to the next character
.3947dc		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.3947df		d0 f2		bne $3947d3	                BNE cpy_ext_loop        ; No: process this one
.3947e1						ret_success
.3947e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3947e3		64 0e		stz $032e	                STZ DOS_STATUS
.3947e5		28		plp		                PLP
.3947e6		2b		pld		                PLD
.3947e7		ab		plb		                PLB
.3947e8		38		sec		                SEC
.3947e9		6b		rtl		                RTL
.3947ea						ret_failure
.3947ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3947ec		85 0e		sta $032e	                STA DOS_STATUS
.3947ee		28		plp		                PLP
.3947ef		2b		pld		                PLD
.3947f0		ab		plb		                PLB
.3947f1		18		clc		                CLC
.3947f2		6b		rtl		                RTL
.3947f3						DOS_FINDFILE
.3947f3		8b		phb		                PHB
.3947f4		0b		phd		                PHD
.3947f5		08		php		                PHP
.3947f6		48		pha		                PHA             ; begin setdbr macro
.3947f7		08		php		                PHP
.3947f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3947fa		a9 00		lda #$00	                LDA #0
.3947fc		48		pha		                PHA
.3947fd		ab		plb		                PLB
.3947fe		28		plp		                PLP
.3947ff		68		pla		                PLA             ; end setdbr macro
.394800		48		pha		                PHA             ; begin setdp macro
.394801		08		php		                PHP
.394802		c2 20		rep #$20	                REP #$20        ; set A long
.394804		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394807		5b		tcd		                TCD
.394808		28		plp		                PLP
.394809		68		pla		                PLA             ; end setdp macro
.39480a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39480c		22 5b 47 39	jsl $39475b	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394810		b0 05		bcs $394817	                BCS mount                       ; If success: try to open the directory
.394812		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394813		2b		pld		                PLD
.394814		ab		plb		                PLB
.394815		18		clc		                CLC
.394816		6b		rtl		                RTL
.394817		22 75 43 39	jsl $394375	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.39481b		b0 07		bcs $394824	                BCS get_directory
.39481d		e2 20		sep #$20	                SEP #$20        ; set A short
.39481f		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.394821		82 56 00	brl $39487a	                BRL ret_failure
.394824						get_directory
.394824		c2 20		rep #$20	                REP #$20        ; set A long
.394826		22 2a 40 39	jsl $39402a	                JSL DOS_DIROPEN                 ; Get the directory
.39482a		b0 07		bcs $394833	                BCS scan_entries                ; If success: start scanning the directory entries
.39482c		e2 20		sep #$20	                SEP #$20        ; set A short
.39482e		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.394830		82 47 00	brl $39487a	                BRL ret_failure
.394833		22 a9 40 39	jsl $3940a9	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394837						scan_loop
.394837		e2 20		sep #$20	                SEP #$20        ; set A short
.394839		a0 00 00	ldy #$0000	                LDY #0
.39483c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.39483e		d0 05		bne $394845	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394840		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394842		82 35 00	brl $39487a	                BRL ret_failure
.394845		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394847		f0 26		beq $39486f	                BEQ next_entry                  ; Go to the next entry
.394849		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.39484c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39484e		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394850		d0 1d		bne $39486f	                BNE next_entry                  ; Yes: skip it!
.394852		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394854		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394856		f0 17		beq $39486f	                BEQ next_entry                  ; Yes: skip it!
.394858		a2 00 00	ldx #$0000	                LDX #0
.39485b		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.39485e		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394860		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394864		d0 09		bne $39486f	                BNE next_entry                  ; If not equal: try the next entry
.394866		c8		iny		                INY                             ; Advance to the next character
.394867		e8		inx		                INX
.394868		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.39486b		f0 16		beq $394883	                BEQ match                       ; Yes: we have a match!
.39486d		80 ef		bra $39485e	                BRA scan_cmp_loop               ; No: keep checking
.39486f		22 c4 40 39	jsl $3940c4	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394873		90 05		bcc $39487a	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394875		82 bf ff	brl $394837	                BRL scan_loop                   ; If found: keep scanning
.394878		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.39487a						ret_failure
.39487a		e2 20		sep #$20	                SEP #$20        ; set A short
.39487c		85 0e		sta $032e	                STA DOS_STATUS
.39487e		28		plp		                PLP
.39487f		2b		pld		                PLD
.394880		ab		plb		                PLB
.394881		18		clc		                CLC
.394882		6b		rtl		                RTL
.394883						match
.394883		c2 20		rep #$20	                REP #$20        ; set A long
.394885		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394888		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39488a		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.39488c		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.39488f		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394891		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394893						ret_success
.394893		e2 20		sep #$20	                SEP #$20        ; set A short
.394895		64 0e		stz $032e	                STZ DOS_STATUS
.394897		28		plp		                PLP
.394898		2b		pld		                PLD
.394899		ab		plb		                PLB
.39489a		38		sec		                SEC
.39489b		6b		rtl		                RTL
.39489c						DOS_READFILE
.39489c		8b		phb		                PHB
.39489d		0b		phd		                PHD
.39489e		08		php		                PHP
.39489f		48		pha		                PHA             ; begin setdbr macro
.3948a0		08		php		                PHP
.3948a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3948a3		a9 00		lda #$00	                LDA #0
.3948a5		48		pha		                PHA
.3948a6		ab		plb		                PLB
.3948a7		28		plp		                PLP
.3948a8		68		pla		                PLA             ; end setdbr macro
.3948a9		48		pha		                PHA             ; begin setdp macro
.3948aa		08		php		                PHP
.3948ab		c2 20		rep #$20	                REP #$20        ; set A long
.3948ad		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948b0		5b		tcd		                TCD
.3948b1		28		plp		                PLP
.3948b2		68		pla		                PLA             ; end setdp macro
.3948b3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3948b5		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3948b7		48		pha		                PHA
.3948b8		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.3948ba		48		pha		                PHA
.3948bb		22 f3 47 39	jsl $3947f3	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.3948bf		68		pla		                PLA
.3948c0		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3948c2		68		pla		                PLA
.3948c3		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3948c5		90 0f		bcc $3948d6	                BCC pass_failure                    ; If found: try to load the cluster
.3948c7		22 0d 46 39	jsl $39460d	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.3948cb		90 09		bcc $3948d6	                BCC pass_failure                    ; If there's an error... pass it up the chain
.3948cd						ret_success
.3948cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3948cf		64 0e		stz $032e	                STZ DOS_STATUS
.3948d1		28		plp		                PLP
.3948d2		2b		pld		                PLD
.3948d3		ab		plb		                PLB
.3948d4		38		sec		                SEC
.3948d5		6b		rtl		                RTL
.3948d6		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.3948d7		2b		pld		                PLD
.3948d8		ab		plb		                PLB
.3948d9		18		clc		                CLC
.3948da		6b		rtl		                RTL
.3948db						ENTRYFORCLUS12
.3948db		8b		phb		                PHB
.3948dc		0b		phd		                PHD
.3948dd		08		php		                PHP
.3948de		48		pha		                PHA             ; begin setdbr macro
.3948df		08		php		                PHP
.3948e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3948e2		a9 00		lda #$00	                LDA #0
.3948e4		48		pha		                PHA
.3948e5		ab		plb		                PLB
.3948e6		28		plp		                PLP
.3948e7		68		pla		                PLA             ; end setdbr macro
.3948e8		48		pha		                PHA             ; begin setdp macro
.3948e9		08		php		                PHP
.3948ea		c2 20		rep #$20	                REP #$20        ; set A long
.3948ec		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948ef		5b		tcd		                TCD
.3948f0		28		plp		                PLP
.3948f1		68		pla		                PLA             ; end setdp macro
.3948f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3948f4		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.3948f6		0a		asl a		                ASL A
.3948f7		85 28		sta $0348	                STA DOS_TEMP
.3948f9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3948fb		2a		rol a		                ROL A
.3948fc		85 2a		sta $034a	                STA DOS_TEMP+2
.3948fe		18		clc		                CLC
.3948ff		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394901		65 28		adc $0348	                ADC DOS_TEMP
.394903		85 28		sta $0348	                STA DOS_TEMP
.394905		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394907		65 2a		adc $034a	                ADC DOS_TEMP+2
.394909		85 2a		sta $034a	                STA DOS_TEMP+2
.39490b		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.39490d		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.39490f		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394911		29 ff 03	and #$03ff	                AND #$003FF
.394914		aa		tax		                TAX
.394915		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394917		66 28		ror $0348	                ROR DOS_TEMP
.394919		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39491b		66 28		ror $0348	                ROR DOS_TEMP
.39491d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39491f		66 28		ror $0348	                ROR DOS_TEMP
.394921		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394923		66 28		ror $0348	                ROR DOS_TEMP
.394925		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394927		66 28		ror $0348	                ROR DOS_TEMP
.394929		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39492b		66 28		ror $0348	                ROR DOS_TEMP
.39492d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39492f		66 28		ror $0348	                ROR DOS_TEMP
.394931		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394933		66 28		ror $0348	                ROR DOS_TEMP
.394935		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394937		66 28		ror $0348	                ROR DOS_TEMP
.394939		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.39493a		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.39493e		65 28		adc $0348	                ADC DOS_TEMP
.394940		85 24		sta $0344	                STA DOS_FAT_LBA
.394942		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394946		65 2a		adc $034a	                ADC DOS_TEMP+2
.394948		85 26		sta $0346	                STA DOS_FAT_LBA+2
.39494a		28		plp		                PLP
.39494b		2b		pld		                PLD
.39494c		ab		plb		                PLB
.39494d		6b		rtl		                RTL
.39494e						FATFORCLUSTER12
.39494e		8b		phb		                PHB
.39494f		0b		phd		                PHD
.394950		08		php		                PHP
.394951		48		pha		                PHA             ; begin setdbr macro
.394952		08		php		                PHP
.394953		e2 20		sep #$20	                SEP #$20        ; set A short
.394955		a9 00		lda #$00	                LDA #0
.394957		48		pha		                PHA
.394958		ab		plb		                PLB
.394959		28		plp		                PLP
.39495a		68		pla		                PLA             ; end setdbr macro
.39495b		48		pha		                PHA             ; begin setdp macro
.39495c		08		php		                PHP
.39495d		c2 20		rep #$20	                REP #$20        ; set A long
.39495f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394962		5b		tcd		                TCD
.394963		28		plp		                PLP
.394964		68		pla		                PLA             ; end setdp macro
.394965		c2 30		rep #$30	                REP #$30        ; set A&X long
.394967		a2 00 00	ldx #$0000	                LDX #0
.39496a		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.39496d		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394971		e8		inx		                INX
.394972		e8		inx		                INX
.394973		e0 00 04	cpx #$0400	                CPX #1024
.394976		d0 f5		bne $39496d	                BNE clr_loop
.394978		22 db 48 39	jsl $3948db	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.39497c		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.39497e		85 02		sta $0322	                STA BIOS_LBA
.394980		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394982		85 04		sta $0324	                STA BIOS_LBA+2
.394984		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394987		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394989		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.39498c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39498e		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394992		90 17		bcc $3949ab	                BCC error
.394994		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.394996		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394999		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39499b		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.39499e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3949a0		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3949a4		90 05		bcc $3949ab	                BCC error
.3949a6		28		plp		                PLP
.3949a7		2b		pld		                PLD
.3949a8		ab		plb		                PLB
.3949a9		38		sec		                SEC
.3949aa		6b		rtl		                RTL
.3949ab						error
.3949ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3949ad		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3949af		85 0e		sta $032e	                STA DOS_STATUS
.3949b1		28		plp		                PLP
.3949b2		2b		pld		                PLD
.3949b3		ab		plb		                PLB
.3949b4		18		clc		                CLC
.3949b5		6b		rtl		                RTL
.3949b6						FATFORCLUSTER32
.3949b6		8b		phb		                PHB
.3949b7		0b		phd		                PHD
.3949b8		48		pha		                PHA             ; begin setdbr macro
.3949b9		08		php		                PHP
.3949ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3949bc		a9 00		lda #$00	                LDA #0
.3949be		48		pha		                PHA
.3949bf		ab		plb		                PLB
.3949c0		28		plp		                PLP
.3949c1		68		pla		                PLA             ; end setdbr macro
.3949c2		48		pha		                PHA             ; begin setdp macro
.3949c3		08		php		                PHP
.3949c4		c2 20		rep #$20	                REP #$20        ; set A long
.3949c6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949c9		5b		tcd		                TCD
.3949ca		28		plp		                PLP
.3949cb		68		pla		                PLA             ; end setdp macro
.3949cc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3949ce		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3949d0		85 24		sta $0344	                STA DOS_FAT_LBA
.3949d2		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3949d4		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3949d6		a2 07 00	ldx #$0007	                LDX #7
.3949d9		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.3949db		66 24		ror $0344	                ROR DOS_FAT_LBA
.3949dd		ca		dex		                DEX
.3949de		d0 f9		bne $3949d9	                BNE div_loop
.3949e0		18		clc		                CLC
.3949e1		a5 24		lda $0344	                LDA DOS_FAT_LBA
.3949e3		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.3949e7		85 24		sta $0344	                STA DOS_FAT_LBA
.3949e9		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3949eb		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3949ef		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3949f1		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.3949f3		85 02		sta $0322	                STA BIOS_LBA
.3949f5		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3949f7		85 04		sta $0324	                STA BIOS_LBA+2
.3949f9		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.3949fc		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3949fe		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394a01		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a03		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.394a07		b0 06		bcs $394a0f	                BCS find_entry
.394a09		e2 20		sep #$20	                SEP #$20        ; set A short
.394a0b		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a0d		80 0e		bra $394a1d	                BRA ret_failure
.394a0f						find_entry
.394a0f		c2 20		rep #$20	                REP #$20        ; set A long
.394a11		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a13		0a		asl a		                ASL A
.394a14		0a		asl a		                ASL A                           ; * 4
.394a15		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394a18		aa		tax		                TAX                             ; X should be the offset within the sector
.394a19		2b		pld		ret_success     PLD
.394a1a		ab		plb		                PLB
.394a1b		38		sec		                SEC                             ; return success
.394a1c		6b		rtl		                RTL
.394a1d		2b		pld		ret_failure     PLD
.394a1e		ab		plb		                PLB
.394a1f		18		clc		                CLC                             ; Return failure
.394a20		6b		rtl		                RTL
.394a21						NEXTCLUSTER
.394a21		08		php		                PHP
.394a22		e2 20		sep #$20	                SEP #$20        ; set A short
.394a24		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394a28		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394a2a		d0 08		bne $394a34	                BNE fat32                       ; No: assume it's FAT32
.394a2c		22 42 4a 39	jsl $394a42	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394a30		90 0d		bcc $394a3f	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a32		80 06		bra $394a3a	                BRA ret_success
.394a34		22 aa 4a 39	jsl $394aaa	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394a38		90 05		bcc $394a3f	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a3a		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394a3c		28		plp		                PLP
.394a3d		38		sec		                SEC
.394a3e		6b		rtl		                RTL
.394a3f		28		plp		pass_failure    PLP
.394a40		18		clc		                CLC
.394a41		6b		rtl		                RTL
.394a42						NEXTCLUSTER12
.394a42		8b		phb		                    PHB
.394a43		0b		phd		                    PHD
.394a44		08		php		                    PHP
.394a45		48		pha		                PHA             ; begin setdbr macro
.394a46		08		php		                PHP
.394a47		e2 20		sep #$20	                SEP #$20        ; set A short
.394a49		a9 00		lda #$00	                LDA #0
.394a4b		48		pha		                PHA
.394a4c		ab		plb		                PLB
.394a4d		28		plp		                PLP
.394a4e		68		pla		                PLA             ; end setdbr macro
.394a4f		48		pha		                PHA             ; begin setdp macro
.394a50		08		php		                PHP
.394a51		c2 20		rep #$20	                REP #$20        ; set A long
.394a53		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a56		5b		tcd		                TCD
.394a57		28		plp		                PLP
.394a58		68		pla		                PLA             ; end setdp macro
.394a59		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a5b		22 4e 49 39	jsl $39494e	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394a5f		b0 03		bcs $394a64	                    BCS chk_clus_id
.394a61		82 41 00	brl $394aa5	                    BRL pass_failure
.394a64		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394a66		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394a69		d0 0d		bne $394a78	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394a6b						is_even
.394a6b		c2 20		rep #$20	                REP #$20        ; set A long
.394a6d		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394a71		29 ff 0f	and #$0fff	                    AND #$0FFF
.394a74		85 28		sta $0348	                    STA DOS_TEMP
.394a76		80 0c		bra $394a84	                    BRA check_id
.394a78						is_odd
.394a78		c2 20		rep #$20	                REP #$20        ; set A long
.394a7a		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394a7e		4a		lsr a		                    LSR A
.394a7f		4a		lsr a		                    LSR A
.394a80		4a		lsr a		                    LSR A
.394a81		4a		lsr a		                    LSR A
.394a82		85 28		sta $0348	                    STA DOS_TEMP
.394a84						check_id
.394a84		c2 20		rep #$20	                REP #$20        ; set A long
.394a86		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394a88		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394a8b		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394a8e		f0 0f		beq $394a9f	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394a90		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394a92		85 10		sta $0330	                    STA DOS_CLUS_ID
.394a94		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394a96						ret_success
.394a96		e2 20		sep #$20	                SEP #$20        ; set A short
.394a98		64 0e		stz $032e	                    STZ DOS_STATUS
.394a9a		28		plp		                    PLP
.394a9b		2b		pld		                    PLD
.394a9c		ab		plb		                    PLB
.394a9d		38		sec		                    SEC
.394a9e		6b		rtl		                    RTL
.394a9f						no_more
.394a9f		e2 20		sep #$20	                SEP #$20        ; set A short
.394aa1		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394aa3		85 0e		sta $032e	                    STA DOS_STATUS
.394aa5		28		plp		pass_failure        PLP
.394aa6		2b		pld		                    PLD
.394aa7		ab		plb		                    PLB
.394aa8		18		clc		                    CLC
.394aa9		6b		rtl		                    RTL
.394aaa						NEXTCLUSTER32
.394aaa		8b		phb		                PHB
.394aab		0b		phd		                PHD
.394aac		08		php		                PHP
.394aad		48		pha		                PHA             ; begin setdbr macro
.394aae		08		php		                PHP
.394aaf		e2 20		sep #$20	                SEP #$20        ; set A short
.394ab1		a9 00		lda #$00	                LDA #0
.394ab3		48		pha		                PHA
.394ab4		ab		plb		                PLB
.394ab5		28		plp		                PLP
.394ab6		68		pla		                PLA             ; end setdbr macro
.394ab7		48		pha		                PHA             ; begin setdp macro
.394ab8		08		php		                PHP
.394ab9		c2 20		rep #$20	                REP #$20        ; set A long
.394abb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394abe		5b		tcd		                TCD
.394abf		28		plp		                PLP
.394ac0		68		pla		                PLA             ; end setdp macro
.394ac1		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ac3		22 b6 49 39	jsl $3949b6	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394ac7		90 53		bcc $394b1c	                BCC ret_failure                 ; If it did not work, return the error
.394ac9		e2 20		sep #$20	                SEP #$20        ; set A short
.394acb		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.394acf		85 28		sta $0348	                STA DOS_TEMP
.394ad1		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.394ad5		85 29		sta $0349	                STA DOS_TEMP+1
.394ad7		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394adb		85 2a		sta $034a	                STA DOS_TEMP+2
.394add		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394ae1		85 2b		sta $034b	                STA DOS_TEMP+3
.394ae3		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394ae5		c9 ff		cmp #$ff	                CMP #$FF
.394ae7		d0 18		bne $394b01	                BNE found_next
.394ae9		a5 29		lda $0349	                LDA DOS_TEMP+1
.394aeb		c9 ff		cmp #$ff	                CMP #$FF
.394aed		d0 12		bne $394b01	                BNE found_next
.394aef		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394af1		c9 ff		cmp #$ff	                CMP #$FF
.394af3		d0 0c		bne $394b01	                BNE found_next
.394af5		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394af7		c9 0f		cmp #$0f	                CMP #$0F
.394af9		d0 06		bne $394b01	                BNE found_next                  ; No: return this cluster as the next
.394afb		e2 20		sep #$20	                SEP #$20        ; set A short
.394afd		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394aff		80 1b		bra $394b1c	                BRA ret_failure
.394b01						found_next
.394b01		e2 20		sep #$20	                SEP #$20        ; set A short
.394b03		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394b05		85 10		sta $0330	                STA DOS_CLUS_ID
.394b07		a5 29		lda $0349	                LDA DOS_TEMP+1
.394b09		85 11		sta $0331	                STA DOS_CLUS_ID+1
.394b0b		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394b0d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b0f		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394b11		85 13		sta $0333	                STA DOS_CLUS_ID+3
.394b13						ret_success
.394b13		e2 20		sep #$20	                SEP #$20        ; set A short
.394b15		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394b17		28		plp		                PLP
.394b18		2b		pld		                PLD
.394b19		ab		plb		                PLB
.394b1a		38		sec		                SEC
.394b1b		6b		rtl		                RTL
.394b1c						ret_failure
.394b1c		e2 20		sep #$20	                SEP #$20        ; set A short
.394b1e		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394b20		28		plp		                PLP
.394b21		2b		pld		                PLD
.394b22		ab		plb		                PLB
.394b23		18		clc		                CLC
.394b24		6b		rtl		                RTL
.394b25						DOS_READNEXT
.394b25		08		php		                PHP
.394b26		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b28		22 21 4a 39	jsl $394a21	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394b2c		90 09		bcc $394b37	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394b2e		22 0d 46 39	jsl $39460d	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394b32		90 03		bcc $394b37	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394b34		28		plp		ret_success     PLP
.394b35		38		sec		                SEC
.394b36		6b		rtl		                RTL
.394b37		28		plp		pass_failure    PLP
.394b38		18		clc		                CLC
.394b39		6b		rtl		                RTL
.394b3a						DOS_FREECLUS
.394b3a		08		php		                PHP
.394b3b		48		pha		                PHA             ; begin setdp macro
.394b3c		08		php		                PHP
.394b3d		c2 20		rep #$20	                REP #$20        ; set A long
.394b3f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b42		5b		tcd		                TCD
.394b43		28		plp		                PLP
.394b44		68		pla		                PLA             ; end setdp macro
.394b45		e2 20		sep #$20	                SEP #$20        ; set A short
.394b47		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b4b		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b4d		d0 08		bne $394b57	                BNE fat32                       ; No: assume it's FAT32
.394b4f		22 cb 4b 39	jsl $394bcb	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394b53		90 0d		bcc $394b62	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b55		80 06		bra $394b5d	                BRA ret_success
.394b57		22 a3 4c 39	jsl $394ca3	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394b5b		90 05		bcc $394b62	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b5d		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394b5f		28		plp		                PLP
.394b60		38		sec		                SEC
.394b61		6b		rtl		                RTL
.394b62		28		plp		pass_failure    PLP
.394b63		18		clc		                CLC
.394b64		6b		rtl		                RTL
.394b65						FDC_READ2FAT12
.394b65		8b		phb		                    PHB
.394b66		0b		phd		                    PHD
.394b67		08		php		                    PHP
.394b68		48		pha		                PHA             ; begin setdbr macro
.394b69		08		php		                PHP
.394b6a		e2 20		sep #$20	                SEP #$20        ; set A short
.394b6c		a9 00		lda #$00	                LDA #0
.394b6e		48		pha		                PHA
.394b6f		ab		plb		                PLB
.394b70		28		plp		                PLP
.394b71		68		pla		                PLA             ; end setdbr macro
.394b72		48		pha		                PHA             ; begin setdp macro
.394b73		08		php		                PHP
.394b74		c2 20		rep #$20	                REP #$20        ; set A long
.394b76		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b79		5b		tcd		                TCD
.394b7a		28		plp		                PLP
.394b7b		68		pla		                PLA             ; end setdp macro
.394b7c		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b7e		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394b81		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394b83		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394b86		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394b88		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394b8a		85 02		sta $0322	                    STA BIOS_LBA
.394b8c		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394b8e		85 04		sta $0324	                    STA BIOS_LBA+2
.394b90		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.394b94		b0 07		bcs $394b9d	                    BCS inc_sect2                   ; If success: start getting the second sector
.394b96		e2 20		sep #$20	                SEP #$20        ; set A short
.394b98		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394b9a		82 1c 00	brl $394bb9	                    BRL ret_failure
.394b9d						inc_sect2
.394b9d		c2 20		rep #$20	                REP #$20        ; set A long
.394b9f		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394ba1		d0 02		bne $394ba5	                    BNE inc_buff_ptr
.394ba3		e6 04		inc $0324	                    INC BIOS_LBA+2
.394ba5		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394ba8		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394baa		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394bad		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394baf		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.394bb3		b0 0d		bcs $394bc2	                    BCS ret_success                 ; If success, return success
.394bb5		e2 20		sep #$20	                SEP #$20        ; set A short
.394bb7		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394bb9						ret_failure
.394bb9		e2 20		sep #$20	                SEP #$20        ; set A short
.394bbb		85 00		sta $0320	                    STA BIOS_STATUS
.394bbd		28		plp		                    PLP
.394bbe		2b		pld		                    PLD
.394bbf		ab		plb		                    PLB
.394bc0		18		clc		                    CLC
.394bc1		6b		rtl		                    RTL
.394bc2						ret_success
.394bc2		e2 20		sep #$20	                SEP #$20        ; set A short
.394bc4		64 00		stz $0320	                    STZ BIOS_STATUS
.394bc6		28		plp		                    PLP
.394bc7		2b		pld		                    PLD
.394bc8		ab		plb		                    PLB
.394bc9		38		sec		                    SEC
.394bca		6b		rtl		                    RTL
.394bcb						DOS_FREECLUS12
.394bcb		da		phx		                PHX
.394bcc		8b		phb		                PHB
.394bcd		0b		phd		                PHD
.394bce		08		php		                PHP
.394bcf		48		pha		                PHA             ; begin setdbr macro
.394bd0		08		php		                PHP
.394bd1		e2 20		sep #$20	                SEP #$20        ; set A short
.394bd3		a9 00		lda #$00	                LDA #0
.394bd5		48		pha		                PHA
.394bd6		ab		plb		                PLB
.394bd7		28		plp		                PLP
.394bd8		68		pla		                PLA             ; end setdbr macro
.394bd9		48		pha		                PHA             ; begin setdp macro
.394bda		08		php		                PHP
.394bdb		c2 20		rep #$20	                REP #$20        ; set A long
.394bdd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394be0		5b		tcd		                TCD
.394be1		28		plp		                PLP
.394be2		68		pla		                PLA             ; end setdp macro
.394be3		c2 30		rep #$30	                REP #$30        ; set A&X long
.394be5		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394be8		85 10		sta $0330	                STA DOS_CLUS_ID
.394bea		a9 00 00	lda #$0000	                LDA #0
.394bed		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394bef		22 db 48 39	jsl $3948db	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394bf3		22 65 4b 39	jsl $394b65	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394bf7		b0 07		bcs $394c00	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394bf9		e2 20		sep #$20	                SEP #$20        ; set A short
.394bfb		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394bfd		82 99 00	brl $394c99	                BRL ret_failure
.394c00						start_of_fat
.394c00		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c02		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394c04		89 01 00	bit #$0001	                BIT #1
.394c07		d0 09		bne $394c12	                BNE is_odd
.394c09		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394c0d		29 ff 0f	and #$0fff	                AND #$0FFF
.394c10		80 08		bra $394c1a	                BRA chk_available
.394c12		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394c16		4a		lsr a		                LSR A
.394c17		4a		lsr a		                LSR A
.394c18		4a		lsr a		                LSR A
.394c19		4a		lsr a		                LSR A
.394c1a						chk_available
.394c1a		85 28		sta $0348	                STA DOS_TEMP
.394c1c		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394c1f		f0 03		beq $394c24	                BEQ chk_found
.394c21		82 39 00	brl $394c5d	                BRL next_cluster                ; No: advance to the next cluster
.394c24		8a		txa		chk_found       TXA
.394c25		85 2a		sta $034a	                STA DOS_TEMP+2
.394c27		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394c29		89 01 00	bit #$0001	                BIT #1
.394c2c		d0 0d		bne $394c3b	                BNE is_odd2
.394c2e						is_even2
.394c2e		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394c32		09 ff 0f	ora #$0fff	                ORA #$0FFF
.394c35		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394c39		80 0b		bra $394c46	                BRA write_fat
.394c3b						is_odd2
.394c3b		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394c3f		09 f0 ff	ora #$fff0	                ORA #$FFF0
.394c42		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394c46		22 6d 4d 39	jsl $394d6d	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394c4a		b0 07		bcs $394c53	                BCS ret_success                 ; If success: return success
.394c4c		e2 20		sep #$20	                SEP #$20        ; set A short
.394c4e		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394c50		82 46 00	brl $394c99	                BRL ret_failure
.394c53						ret_success
.394c53		e2 20		sep #$20	                SEP #$20        ; set A short
.394c55		64 0e		stz $032e	                STZ DOS_STATUS
.394c57		28		plp		                PLP
.394c58		2b		pld		                PLD
.394c59		ab		plb		                PLB
.394c5a		fa		plx		                PLX
.394c5b		38		sec		                SEC
.394c5c		6b		rtl		                RTL
.394c5d						next_cluster
.394c5d		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394c5f		d0 02		bne $394c63	                BNE calc_entry
.394c61		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394c63		22 db 48 39	jsl $3948db	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394c67		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394c6a		f0 03		beq $394c6f	                BEQ chk_end_of_fat
.394c6c		82 93 ff	brl $394c02	                BRL chk_cluster                 ; No: go back and check it too
.394c6f						chk_end_of_fat
.394c6f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394c71		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394c75		d0 0f		bne $394c86	                BNE next_2
.394c77		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394c79		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394c7d		d0 07		bne $394c86	                BNE next_2                      ; No: get the next to sectors
.394c7f		e2 20		sep #$20	                SEP #$20        ; set A short
.394c81		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394c83		82 13 00	brl $394c99	                BRL ret_failure
.394c86						next_2
.394c86		22 65 4b 39	jsl $394b65	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394c8a		90 06		bcc $394c92	                BCC fat_fail                    ; If failed: return error
.394c8c		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394c8f		82 70 ff	brl $394c02	                BRL chk_cluster                 ; And start checking from there
.394c92						fat_fail
.394c92		e2 20		sep #$20	                SEP #$20        ; set A short
.394c94		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394c96		82 00 00	brl $394c99	                BRL ret_failure
.394c99						ret_failure
.394c99		e2 20		sep #$20	                SEP #$20        ; set A short
.394c9b		85 0e		sta $032e	                STA DOS_STATUS
.394c9d		28		plp		                PLP
.394c9e		2b		pld		                PLD
.394c9f		ab		plb		                PLB
.394ca0		fa		plx		                PLX
.394ca1		18		clc		                CLC
.394ca2		6b		rtl		                RTL
.394ca3						DOS_FREECLUS32
.394ca3		8b		phb		                PHB
.394ca4		0b		phd		                PHD
.394ca5		08		php		                PHP
.394ca6		48		pha		                PHA             ; begin setdbr macro
.394ca7		08		php		                PHP
.394ca8		e2 20		sep #$20	                SEP #$20        ; set A short
.394caa		a9 00		lda #$00	                LDA #0
.394cac		48		pha		                PHA
.394cad		ab		plb		                PLB
.394cae		28		plp		                PLP
.394caf		68		pla		                PLA             ; end setdbr macro
.394cb0		48		pha		                PHA             ; begin setdp macro
.394cb1		08		php		                PHP
.394cb2		c2 20		rep #$20	                REP #$20        ; set A long
.394cb4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cb7		5b		tcd		                TCD
.394cb8		28		plp		                PLP
.394cb9		68		pla		                PLA             ; end setdp macro
.394cba		c2 30		rep #$30	                REP #$30        ; set A&X long
.394cbc		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394cbf		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394cc1		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394cc4		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394cc6		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394cca		85 02		sta $0322	                STA BIOS_LBA
.394ccc		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394cd0		85 04		sta $0324	                STA BIOS_LBA+2
.394cd2		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.394cd6		b0 07		bcs $394cdf	                BCS initial_entry               ; If OK: set the initial entry to check
.394cd8		e2 20		sep #$20	                SEP #$20        ; set A short
.394cda		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394cdc		82 6b 00	brl $394d4a	                BRL ret_failure
.394cdf						initial_entry
.394cdf		c2 20		rep #$20	                REP #$20        ; set A long
.394ce1		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394ce4		85 10		sta $0330	                STA DOS_CLUS_ID
.394ce6		a9 00 00	lda #$0000	                LDA #0
.394ce9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ceb		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394cee		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394cf2		d0 06		bne $394cfa	                BNE next_entry                  ; No: move to the next entry
.394cf4		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394cf8		f0 36		beq $394d30	                BEQ found_free                  ; Yes: go to allocate and return it
.394cfa		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394cfc		d0 02		bne $394d00	                BNE inc_ptr
.394cfe		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394d00		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394d01		e8		inx		                INX
.394d02		e8		inx		                INX
.394d03		e8		inx		                INX
.394d04		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394d07		90 e5		bcc $394cee	                BLT chk_entry                   ; No: check this entry
.394d09		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394d0b		d0 18		bne $394d25	                BNE get_block
.394d0d		e6 04		inc $0324	                INC BIOS_LBA+2
.394d0f		a5 04		lda $0324	                LDA BIOS_LBA+2
.394d11		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394d15		90 0e		bcc $394d25	                BLT get_block
.394d17		a5 02		lda $0322	                LDA BIOS_LBA
.394d19		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.394d1d		90 06		bcc $394d25	                BLT get_block
.394d1f		e2 20		sep #$20	                SEP #$20        ; set A short
.394d21		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.394d23		80 25		bra $394d4a	                BRA ret_failure
.394d25		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394d29		90 1b		bcc $394d46	                BCC ret_fat_error               ; If error: throw a FAT error
.394d2b		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394d2e		80 be		bra $394cee	                BRA chk_entry                   ; Check this entry
.394d30						found_free
.394d30		c2 20		rep #$20	                REP #$20        ; set A long
.394d32		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394d35		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394d39		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394d3c		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394d40		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394d44		b0 0d		bcs $394d53	                BCS ret_success                 ; If OK: return success
.394d46						ret_fat_error
.394d46		e2 20		sep #$20	                SEP #$20        ; set A short
.394d48		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394d4a						ret_failure
.394d4a		e2 20		sep #$20	                SEP #$20        ; set A short
.394d4c		85 0e		sta $032e	                STA DOS_STATUS
.394d4e		28		plp		                PLP
.394d4f		2b		pld		                PLD
.394d50		ab		plb		                PLB
.394d51		18		clc		                CLC
.394d52		6b		rtl		                RTL
.394d53						ret_success
.394d53		e2 20		sep #$20	                SEP #$20        ; set A short
.394d55		64 0e		stz $032e	                STZ DOS_STATUS
.394d57		28		plp		                PLP
.394d58		2b		pld		                PLD
.394d59		ab		plb		                PLB
.394d5a		38		sec		                SEC
.394d5b		6b		rtl		                RTL
.394d5c						DELCLUSTER
.394d5c		e2 20		sep #$20	                SEP #$20        ; set A short
.394d5e		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394d62		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394d64		d0 04		bne $394d6a	                BNE fat32                       ; No: assume it's FAT32
.394d66		5c b4 4d 39	jmp $394db4	fat12           JML DELCLUSTER12
.394d6a		4c 02 4e	jmp $394e02	fat32           JMP DELCLUSTER32
.394d6d						WRITEFAT12
.394d6d		8b		phb		                PHB
.394d6e		0b		phd		                PHD
.394d6f		48		pha		                PHA             ; begin setdbr macro
.394d70		08		php		                PHP
.394d71		e2 20		sep #$20	                SEP #$20        ; set A short
.394d73		a9 00		lda #$00	                LDA #0
.394d75		48		pha		                PHA
.394d76		ab		plb		                PLB
.394d77		28		plp		                PLP
.394d78		68		pla		                PLA             ; end setdbr macro
.394d79		48		pha		                PHA             ; begin setdp macro
.394d7a		08		php		                PHP
.394d7b		c2 20		rep #$20	                REP #$20        ; set A long
.394d7d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d80		5b		tcd		                TCD
.394d81		28		plp		                PLP
.394d82		68		pla		                PLA             ; end setdp macro
.394d83		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d85		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394d88		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394d8a		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394d8d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394d8f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394d91		85 02		sta $0322	                STA BIOS_LBA
.394d93		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394d95		85 04		sta $0324	                STA BIOS_LBA+2
.394d97		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394d9b		90 14		bcc $394db1	                BCC done
.394d9d		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394da0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394da2		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394da5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394da7		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394da9		d0 02		bne $394dad	                BNE put_second
.394dab		e6 04		inc $0324	                INC BIOS_LBA+2
.394dad		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394db1		2b		pld		done            PLD
.394db2		ab		plb		                PLB
.394db3		6b		rtl		                RTL
.394db4						DELCLUSTER12
.394db4		8b		phb		                PHB
.394db5		0b		phd		                PHD
.394db6		08		php		                PHP
.394db7		48		pha		                PHA             ; begin setdbr macro
.394db8		08		php		                PHP
.394db9		e2 20		sep #$20	                SEP #$20        ; set A short
.394dbb		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394dbd		48		pha		                PHA
.394dbe		ab		plb		                PLB
.394dbf		28		plp		                PLP
.394dc0		68		pla		                PLA             ; end setdbr macro
.394dc1		48		pha		                PHA             ; begin setdp macro
.394dc2		08		php		                PHP
.394dc3		c2 20		rep #$20	                REP #$20        ; set A long
.394dc5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394dc8		5b		tcd		                TCD
.394dc9		28		plp		                PLP
.394dca		68		pla		                PLA             ; end setdp macro
.394dcb		c2 30		rep #$30	                REP #$30        ; set A&X long
.394dcd		22 4e 49 39	jsl $39494e	                JSL FATFORCLUSTER12
.394dd1		8a		txa		                TXA                             ; Check to see if the index is odd or even
.394dd2		89 01 00	bit #$0001	                BIT #1
.394dd5		d0 08		bne $394ddf	                BNE is_odd
.394dd7		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394dda		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394ddd		80 06		bra $394de5	                BRA save_update
.394ddf		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394de2		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394de5		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394de8		22 6d 4d 39	jsl $394d6d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394dec		b0 0b		bcs $394df9	                BCS ret_success
.394dee						ret_failure
.394dee		e2 20		sep #$20	                SEP #$20        ; set A short
.394df0		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394df2		85 0e		sta $032e	                STA DOS_STATUS
.394df4		28		plp		                PLP
.394df5		2b		pld		                PLD
.394df6		ab		plb		                PLB
.394df7		18		clc		                CLC
.394df8		6b		rtl		                RTL
.394df9						ret_success
.394df9		e2 20		sep #$20	                SEP #$20        ; set A short
.394dfb		64 0e		stz $032e	                STZ DOS_STATUS
.394dfd		28		plp		                PLP
.394dfe		2b		pld		                PLD
.394dff		ab		plb		                PLB
.394e00		38		sec		                SEC
.394e01		6b		rtl		                RTL
.394e02						DELCLUSTER32
.394e02		8b		phb		                PHB
.394e03		0b		phd		                PHD
.394e04		08		php		                PHP
.394e05		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e07		48		pha		                PHA             ; begin setdbr macro
.394e08		08		php		                PHP
.394e09		e2 20		sep #$20	                SEP #$20        ; set A short
.394e0b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e0d		48		pha		                PHA
.394e0e		ab		plb		                PLB
.394e0f		28		plp		                PLP
.394e10		68		pla		                PLA             ; end setdbr macro
.394e11		48		pha		                PHA             ; begin setdp macro
.394e12		08		php		                PHP
.394e13		c2 20		rep #$20	                REP #$20        ; set A long
.394e15		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e18		5b		tcd		                TCD
.394e19		28		plp		                PLP
.394e1a		68		pla		                PLA             ; end setdp macro
.394e1b		22 b6 49 39	jsl $3949b6	                JSL FATFORCLUSTER32
.394e1f		a9 00 00	lda #$0000	                LDA #0
.394e22		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394e25		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394e28		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394e2c		b0 0b		bcs $394e39	                BCS ret_success
.394e2e						ret_failure
.394e2e		e2 20		sep #$20	                SEP #$20        ; set A short
.394e30		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e32		85 0e		sta $032e	                STA DOS_STATUS
.394e34		28		plp		                PLP
.394e35		2b		pld		                PLD
.394e36		ab		plb		                PLB
.394e37		18		clc		                CLC
.394e38		6b		rtl		                RTL
.394e39						ret_success
.394e39		e2 20		sep #$20	                SEP #$20        ; set A short
.394e3b		64 0e		stz $032e	                STZ DOS_STATUS
.394e3d		28		plp		                PLP
.394e3e		2b		pld		                PLD
.394e3f		ab		plb		                PLB
.394e40		38		sec		                SEC
.394e41		6b		rtl		                RTL
.394e42						DOS_APPENDCLUS
.394e42		8b		phb		                PHB
.394e43		0b		phd		                PHD
.394e44		08		php		                PHP
.394e45		48		pha		                PHA             ; begin setdbr macro
.394e46		08		php		                PHP
.394e47		e2 20		sep #$20	                SEP #$20        ; set A short
.394e49		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e4b		48		pha		                PHA
.394e4c		ab		plb		                PLB
.394e4d		28		plp		                PLP
.394e4e		68		pla		                PLA             ; end setdbr macro
.394e4f		48		pha		                PHA             ; begin setdp macro
.394e50		08		php		                PHP
.394e51		c2 20		rep #$20	                REP #$20        ; set A long
.394e53		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e56		5b		tcd		                TCD
.394e57		28		plp		                PLP
.394e58		68		pla		                PLA             ; end setdp macro
.394e59		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e5b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394e5d		48		pha		                PHA
.394e5e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394e60		48		pha		                PHA
.394e61		22 3a 4b 39	jsl $394b3a	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394e65		b0 09		bcs $394e70	                BCS save_cluster                ; If we got a cluster, write the data to it
.394e67		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394e68		85 10		sta $0330	                STA DOS_CLUS_ID
.394e6a		68		pla		                PLA
.394e6b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e6d		82 7d 00	brl $394eed	                BRL pass_failure                ; Pass the failure back up the chain
.394e70		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394e72		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394e75		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394e77		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394e7a		22 4a 46 39	jsl $39464a	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394e7e		90 e7		bcc $394e67	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394e80		68		pla		                PLA                             ; Restore the cluster of the file
.394e81		85 10		sta $0330	                STA DOS_CLUS_ID
.394e83		68		pla		                PLA
.394e84		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e86		22 21 4a 39	jsl $394a21	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394e8a		b0 fa		bcs $394e86	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394e8c		e2 20		sep #$20	                SEP #$20        ; set A short
.394e8e		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394e92		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394e94		d0 3d		bne $394ed3	                BNE fat32                       ; No: assume it's FAT32
.394e96						fat12
.394e96		c2 20		rep #$20	                REP #$20        ; set A long
.394e98		22 db 48 39	jsl $3948db	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394e9c		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394e9e		89 01 00	bit #$0001	                BIT #1
.394ea1		d0 11		bne $394eb4	                BNE is_odd
.394ea3		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394ea6		29 ff 0f	and #$0fff	                AND #$0FFF
.394ea9		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394eac		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394eaf		29 00 f0	and #$f000	                AND #$F000
.394eb2		80 10		bra $394ec4	                BRA update_fat12
.394eb4		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394eb7		0a		asl a		                ASL A
.394eb8		0a		asl a		                ASL A
.394eb9		0a		asl a		                ASL A
.394eba		0a		asl a		                ASL A
.394ebb		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394ebe		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394ec1		29 0f 00	and #$000f	                AND #$000F
.394ec4		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394ec7		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394eca		22 6d 4d 39	jsl $394d6d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394ece		b0 22		bcs $394ef2	                BCS ret_success
.394ed0		82 1a 00	brl $394eed	                BRL pass_failure
.394ed3						fat32
.394ed3		c2 20		rep #$20	                REP #$20        ; set A long
.394ed5		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394ed8		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394edb		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394ede		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394ee1		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394ee5		b0 0b		bcs $394ef2	                BCS ret_success
.394ee7		e2 20		sep #$20	                SEP #$20        ; set A short
.394ee9		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394eeb		85 0e		sta $032e	                STA DOS_STATUS
.394eed		28		plp		pass_failure    PLP
.394eee		2b		pld		                PLD
.394eef		ab		plb		                PLB
.394ef0		18		clc		                CLC
.394ef1		6b		rtl		                RTL
.394ef2						ret_success
.394ef2		e2 20		sep #$20	                SEP #$20        ; set A short
.394ef4		64 0e		stz $032e	                STZ DOS_STATUS
.394ef6		28		plp		                PLP
.394ef7		2b		pld		                PLD
.394ef8		ab		plb		                PLB
.394ef9		38		sec		                SEC
.394efa		6b		rtl		                RTL
.394efb						BCD2BIN
.394efb		8b		phb		                PHB
.394efc		0b		phd		                PHD
.394efd		08		php		                PHP
.394efe		48		pha		                PHA             ; begin setdbr macro
.394eff		08		php		                PHP
.394f00		e2 20		sep #$20	                SEP #$20        ; set A short
.394f02		a9 00		lda #$00	                LDA #0
.394f04		48		pha		                PHA
.394f05		ab		plb		                PLB
.394f06		28		plp		                PLP
.394f07		68		pla		                PLA             ; end setdbr macro
.394f08		48		pha		                PHA             ; begin setdp macro
.394f09		08		php		                PHP
.394f0a		c2 20		rep #$20	                REP #$20        ; set A long
.394f0c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f0f		5b		tcd		                TCD
.394f10		28		plp		                PLP
.394f11		68		pla		                PLA             ; end setdp macro
.394f12		c2 30		rep #$30	                REP #$30        ; set A&X long
.394f14		85 28		sta $0348	                STA DOS_TEMP
.394f16		29 0f 00	and #$000f	                AND #$000F
.394f19		85 2a		sta $034a	                STA DOS_TEMP+2
.394f1b		a5 28		lda $0348	                LDA DOS_TEMP
.394f1d		4a		lsr a		                LSR A
.394f1e		4a		lsr a		                LSR A
.394f1f		4a		lsr a		                LSR A
.394f20		4a		lsr a		                LSR A
.394f21		85 28		sta $0348	                STA DOS_TEMP
.394f23		29 0f 00	and #$000f	                AND #$000F
.394f26		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f2a		a9 0a 00	lda #$000a	                LDA #10
.394f2d		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f31		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f35		18		clc		                CLC
.394f36		65 2a		adc $034a	                ADC DOS_TEMP+2
.394f38		85 2a		sta $034a	                STA DOS_TEMP+2
.394f3a		a5 28		lda $0348	                LDA DOS_TEMP
.394f3c		4a		lsr a		                LSR A
.394f3d		4a		lsr a		                LSR A
.394f3e		4a		lsr a		                LSR A
.394f3f		4a		lsr a		                LSR A
.394f40		85 28		sta $0348	                STA DOS_TEMP
.394f42		29 0f 00	and #$000f	                AND #$000F
.394f45		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f49		a9 64 00	lda #$0064	                LDA #100
.394f4c		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f50		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f54		18		clc		                CLC
.394f55		65 2a		adc $034a	                ADC DOS_TEMP+2
.394f57		85 2a		sta $034a	                STA DOS_TEMP+2
.394f59		a5 28		lda $0348	                LDA DOS_TEMP
.394f5b		4a		lsr a		                LSR A
.394f5c		4a		lsr a		                LSR A
.394f5d		4a		lsr a		                LSR A
.394f5e		4a		lsr a		                LSR A
.394f5f		29 0f 00	and #$000f	                AND #$000F
.394f62		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f66		a9 e8 03	lda #$03e8	                LDA #1000
.394f69		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f6d		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f71		18		clc		                CLC
.394f72		65 2a		adc $034a	                ADC DOS_TEMP+2
.394f74		28		plp		                PLP
.394f75		2b		pld		                PLD
.394f76		ab		plb		                PLB
.394f77		6b		rtl		                RTL
.394f78						DOS_RTCCREATE
.394f78		8b		phb		                PHB
.394f79		0b		phd		                PHD
.394f7a		08		php		                PHP
.394f7b		48		pha		                PHA             ; begin setdbr macro
.394f7c		08		php		                PHP
.394f7d		e2 20		sep #$20	                SEP #$20        ; set A short
.394f7f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f81		48		pha		                PHA
.394f82		ab		plb		                PLB
.394f83		28		plp		                PLP
.394f84		68		pla		                PLA             ; end setdbr macro
.394f85		48		pha		                PHA             ; begin setdp macro
.394f86		08		php		                PHP
.394f87		c2 20		rep #$20	                REP #$20        ; set A long
.394f89		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f8c		5b		tcd		                TCD
.394f8d		28		plp		                PLP
.394f8e		68		pla		                PLA             ; end setdp macro
.394f8f		c2 10		rep #$10	                REP #$10        ; set X long
.394f91		e2 20		sep #$20	                SEP #$20        ; set A short
.394f93		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394f97		09 08		ora #$08	                ORA #%00001000
.394f99		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394f9d		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394fa1		85 29		sta $0349	                STA DOS_TEMP+1
.394fa3		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394fa7		85 28		sta $0348	                STA DOS_TEMP
.394fa9		c2 20		rep #$20	                REP #$20        ; set A long
.394fab		a5 28		lda $0348	                LDA DOS_TEMP
.394fad		22 fb 4e 39	jsl $394efb	                JSL BCD2BIN                 ; Convert it to binary
.394fb1		85 28		sta $0348	                STA DOS_TEMP
.394fb3		38		sec		                SEC                         ; Year is relative to 1980
.394fb4		e9 bc 07	sbc #$07bc	                SBC #1980
.394fb7		c2 20		rep #$20	                REP #$20        ; set A long
.394fb9		0a		asl a		                ASL A
.394fba		0a		asl a		                ASL A
.394fbb		0a		asl a		                ASL A
.394fbc		0a		asl a		                ASL A
.394fbd		0a		asl a		                ASL A
.394fbe		0a		asl a		                ASL A
.394fbf		0a		asl a		                ASL A
.394fc0		0a		asl a		                ASL A
.394fc1		0a		asl a		                ASL A
.394fc2		29 00 fe	and #$fe00	                AND #$FE00
.394fc5		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394fc8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394fca		e2 20		sep #$20	                SEP #$20        ; set A short
.394fcc		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394fd0		c2 20		rep #$20	                REP #$20        ; set A long
.394fd2		29 ff 00	and #$00ff	                AND #$00FF
.394fd5		22 fb 4e 39	jsl $394efb	                JSL BCD2BIN                 ; Convert it to binary
.394fd9		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394fdc		0a		asl a		                ASL A
.394fdd		0a		asl a		                ASL A
.394fde		0a		asl a		                ASL A
.394fdf		0a		asl a		                ASL A
.394fe0		0a		asl a		                ASL A
.394fe1		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394fe4		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394fe7		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394fe9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394feb		e2 20		sep #$20	                SEP #$20        ; set A short
.394fed		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394ff1		c2 20		rep #$20	                REP #$20        ; set A long
.394ff3		29 ff 00	and #$00ff	                AND #$00FF
.394ff6		22 fb 4e 39	jsl $394efb	                JSL BCD2BIN                 ; Convert it to binary
.394ffa		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.394ffd		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395000		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395002		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395004		e2 20		sep #$20	                SEP #$20        ; set A short
.395006		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.39500a		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.39500c		c2 20		rep #$20	                REP #$20        ; set A long
.39500e		29 ff 00	and #$00ff	                AND #$00FF
.395011		22 fb 4e 39	jsl $394efb	                JSL BCD2BIN                 ; Convert it to binary
.395015		c2 20		rep #$20	                REP #$20        ; set A long
.395017		0a		asl a		                ASL A
.395018		0a		asl a		                ASL A
.395019		0a		asl a		                ASL A
.39501a		0a		asl a		                ASL A
.39501b		0a		asl a		                ASL A
.39501c		0a		asl a		                ASL A
.39501d		0a		asl a		                ASL A
.39501e		0a		asl a		                ASL A
.39501f		0a		asl a		                ASL A
.395020		0a		asl a		                ASL A
.395021		0a		asl a		                ASL A
.395022		29 00 f8	and #$f800	                AND #$F800
.395025		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395028		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39502a		e2 20		sep #$20	                SEP #$20        ; set A short
.39502c		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.395030		c2 20		rep #$20	                REP #$20        ; set A long
.395032		29 ff 00	and #$00ff	                AND #$00FF
.395035		22 fb 4e 39	jsl $394efb	                JSL BCD2BIN                 ; Convert it to binary
.395039		c2 20		rep #$20	                REP #$20        ; set A long
.39503b		0a		asl a		                ASL A
.39503c		0a		asl a		                ASL A
.39503d		0a		asl a		                ASL A
.39503e		0a		asl a		                ASL A
.39503f		0a		asl a		                ASL A
.395040		29 e0 07	and #$07e0	                AND #$07E0
.395043		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395046		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395048		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39504a		e2 20		sep #$20	                SEP #$20        ; set A short
.39504c		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.395050		c2 20		rep #$20	                REP #$20        ; set A long
.395052		29 ff 00	and #$00ff	                AND #$00FF
.395055		22 fb 4e 39	jsl $394efb	                JSL BCD2BIN                 ; Convert it to binary
.395059		c2 20		rep #$20	                REP #$20        ; set A long
.39505b		29 1f 00	and #$001f	                AND #$001F
.39505e		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395061		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395063		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395065		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395069		29 f7 00	and #$00f7	                AND #%11110111
.39506c		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.395070		28		plp		                PLP
.395071		2b		pld		                PLD
.395072		ab		plb		                PLB
.395073		6b		rtl		                RTL
.395074						DOS_CREATE
.395074		8b		phb		                PHB
.395075		0b		phd		                PHD
.395076		08		php		                PHP
.395077		48		pha		                PHA             ; begin setdbr macro
.395078		08		php		                PHP
.395079		e2 20		sep #$20	                SEP #$20        ; set A short
.39507b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39507d		48		pha		                PHA
.39507e		ab		plb		                PLB
.39507f		28		plp		                PLP
.395080		68		pla		                PLA             ; end setdbr macro
.395081		48		pha		                PHA             ; begin setdp macro
.395082		08		php		                PHP
.395083		c2 20		rep #$20	                REP #$20        ; set A long
.395085		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395088		5b		tcd		                TCD
.395089		28		plp		                PLP
.39508a		68		pla		                PLA             ; end setdp macro
.39508b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39508d		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.395090		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395092		85 28		sta $0348	                STA DOS_TEMP
.395094		c8		iny		                INY
.395095		c8		iny		                INY
.395096		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395098		85 2a		sta $034a	                STA DOS_TEMP+2
.39509a		e2 20		sep #$20	                SEP #$20        ; set A short
.39509c		a0 00 00	ldy #$0000	                LDY #0
.39509f		a2 00 00	ldx #$0000	                LDX #0
.3950a2		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.3950a4		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.3950a6		f0 04		beq $3950ac	                BEQ find_file                   ; If it's NULL, we're done
.3950a8		e8		inx		                INX
.3950a9		c8		iny		                INY
.3950aa		80 f6		bra $3950a2	                BRA path_loop
.3950ac		22 5b 47 39	jsl $39475b	find_file       JSL DOS_PARSE_PATH
.3950b0		22 f3 47 39	jsl $3947f3	                JSL DOS_FINDFILE
.3950b4		90 07		bcc $3950bd	                BCC set_device
.3950b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3950b8		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.3950ba		82 d2 00	brl $39518f	                BRL ret_failure
.3950bd						set_device
.3950bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3950bf		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3950c2		a5 01		lda $0321	                LDA BIOS_DEV
.3950c4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950c6						validate_name
.3950c6		22 3a 4b 39	jsl $394b3a	                JSL DOS_FREECLUS
.3950ca		b0 03		bcs $3950cf	                BCS save_data
.3950cc		82 c4 00	brl $395193	                BRL pass_failure
.3950cf						save_data
.3950cf		c2 20		rep #$20	                REP #$20        ; set A long
.3950d1		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3950d4		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3950d6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950d8		c8		iny		                INY
.3950d9		c8		iny		                INY
.3950da		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3950dc		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950de		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3950e1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950e3		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3950e5		c8		iny		                INY
.3950e6		c8		iny		                INY
.3950e7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950e9		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3950eb		22 4a 46 39	jsl $39464a	                JSL DOS_PUTCLUSTER
.3950ef		b0 00		bcs $3950f1	                BCS find_dir
.3950f1						find_dir
.3950f1		c2 20		rep #$20	                REP #$20        ; set A long
.3950f3		22 85 41 39	jsl $394185	                JSL DOS_DIRFINDFREE
.3950f7		b0 1a		bcs $395113	                BCS set_entry
.3950f9		c2 20		rep #$20	                REP #$20        ; set A long
.3950fb		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.3950fe		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.395100		85 10		sta $0330	                STA DOS_CLUS_ID
.395102		c8		iny		                INY
.395103		c8		iny		                INY
.395104		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395106		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395108		22 02 4e 39	jsl $394e02	                JSL DELCLUSTER32                ; Delete the cluster
.39510c		e2 20		sep #$20	                SEP #$20        ; set A short
.39510e		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.395110		82 7c 00	brl $39518f	                BRL ret_failure
.395113						set_entry
.395113		e2 20		sep #$20	                SEP #$20        ; set A short
.395115		a0 00 00	ldy #$0000	                LDY #0
.395118		a9 00		lda #$00	                LDA #0                          ; NULL
.39511a		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.39511c		c8		iny		                INY
.39511d		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.395120		d0 f8		bne $39511a	                BNE copy_dir_loop
.395122		a0 00 00	ldy #$0000	                LDY #0
.395125		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395128		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39512a		c8		iny		                INY
.39512b		c0 0b 00	cpy #$000b	                CPY #11
.39512e		d0 f5		bne $395125	                BNE name_loop
.395130		c2 20		rep #$20	                REP #$20        ; set A long
.395132		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395135		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395137		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39513a		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39513c		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39513f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395141		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395144		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395146		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395149		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39514b		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39514e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395150		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395153		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395155		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395158		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39515a		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.39515d		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.395160		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395162		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.395165		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395167		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.39516a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39516c		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.39516f		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395171		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.395174		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395176		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.395179		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39517b		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.39517e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395180		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395183		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395185		c2 20		rep #$20	                REP #$20        ; set A long
.395187		22 43 42 39	jsl $394243	                JSL DOS_DIRWRITE
.39518b		b0 0b		bcs $395198	                BCS ret_success
.39518d		80 04		bra $395193	                BRA pass_failure
.39518f						ret_failure
.39518f		e2 20		sep #$20	                SEP #$20        ; set A short
.395191		85 0e		sta $032e	                STA DOS_STATUS
.395193		28		plp		pass_failure    PLP
.395194		2b		pld		                PLD
.395195		ab		plb		                PLB
.395196		18		clc		                CLC
.395197		6b		rtl		                RTL
.395198						ret_success
.395198		e2 20		sep #$20	                SEP #$20        ; set A short
.39519a		64 0e		stz $032e	                STZ DOS_STATUS
.39519c		28		plp		                PLP
.39519d		2b		pld		                PLD
.39519e		ab		plb		                PLB
.39519f		38		sec		                SEC
.3951a0		6b		rtl		                RTL
.3951a1						DOS_COPYPATH
.3951a1		da		phx		                PHX
.3951a2		5a		phy		                PHY
.3951a3		8b		phb		                PHB
.3951a4		0b		phd		                PHD
.3951a5		08		php		                PHP
.3951a6		48		pha		                PHA             ; begin setdbr macro
.3951a7		08		php		                PHP
.3951a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3951aa		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951ac		48		pha		                PHA
.3951ad		ab		plb		                PLB
.3951ae		28		plp		                PLP
.3951af		68		pla		                PLA             ; end setdbr macro
.3951b0		48		pha		                PHA             ; begin setdp macro
.3951b1		08		php		                PHP
.3951b2		c2 20		rep #$20	                REP #$20        ; set A long
.3951b4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951b7		5b		tcd		                TCD
.3951b8		28		plp		                PLP
.3951b9		68		pla		                PLA             ; end setdp macro
.3951ba		c2 30		rep #$30	                REP #$30        ; set A&X long
.3951bc		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.3951bf		a2 00 00	ldx #$0000	                LDX #0
.3951c2		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3951c4		e8		inx		                INX
.3951c5		e8		inx		                INX
.3951c6		e0 00 01	cpx #$0100	                CPX #256
.3951c9		d0 f7		bne $3951c2	                BNE clr_loop
.3951cb		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3951cd		d0 04		bne $3951d3	                BNE get_path            ; No: attempt to fetch the path
.3951cf		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3951d1		f0 27		beq $3951fa	                BEQ done                ; Yes: return an empty buffer
.3951d3		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.3951d6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951d8		85 28		sta $0348	                STA DOS_TEMP
.3951da		c8		iny		                INY
.3951db		c8		iny		                INY
.3951dc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951de		85 2a		sta $034a	                STA DOS_TEMP+2
.3951e0		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3951e2		d0 04		bne $3951e8	                BNE start_copy          ; No: start copying it
.3951e4		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3951e6		f0 12		beq $3951fa	                BEQ done                ; Yes: return an empty buffer
.3951e8						start_copy
.3951e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3951ea		a2 00 00	ldx #$0000	                LDX #0
.3951ed		a0 00 00	ldy #$0000	                LDY #0
.3951f0		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.3951f2		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3951f4		f0 04		beq $3951fa	                BEQ done
.3951f6		e8		inx		                INX
.3951f7		c8		iny		                INY
.3951f8		d0 f6		bne $3951f0	                BNE loop
.3951fa		28		plp		done            PLP
.3951fb		2b		pld		                PLD
.3951fc		ab		plb		                PLB
.3951fd		7a		ply		                PLY
.3951fe		fa		plx		                PLX
.3951ff		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.395200						DOS_TEST
.395200		8b		phb		                PHB
.395201		0b		phd		                PHD
.395202		08		php		                PHP
.395203		48		pha		                PHA             ; begin setdbr macro
.395204		08		php		                PHP
.395205		e2 20		sep #$20	                SEP #$20        ; set A short
.395207		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395209		48		pha		                PHA
.39520a		ab		plb		                PLB
.39520b		28		plp		                PLP
.39520c		68		pla		                PLA             ; end setdbr macro
.39520d		48		pha		                PHA             ; begin setdp macro
.39520e		08		php		                PHP
.39520f		c2 20		rep #$20	                REP #$20        ; set A long
.395211		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395214		5b		tcd		                TCD
.395215		28		plp		                PLP
.395216		68		pla		                PLA             ; end setdp macro
.395217		c2 30		rep #$30	                REP #$30        ; set A&X long
.395219		a9 3f 52	lda #$523f	                LDA #<>src_file
.39521c		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.395220		a9 39 00	lda #$0039	                LDA #`src_file
.395223		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.395227		a9 4c 52	lda #$524c	                LDA #<>dst_file
.39522a		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.39522e		a9 39 00	lda #$0039	                LDA #`dst_file
.395231		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.395235		22 71 5a 39	jsl $395a71	                JSL IF_COPY
.395239		b0 00		bcs $39523b	                BCS done
.39523b		28		plp		done            PLP
.39523c		2b		pld		                PLD
.39523d		ab		plb		                PLB
.39523e		6b		rtl		                RTL
>39523f		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>395247		2e 62 61 73 00
>39524c		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>395254		32 2e 62 61 73 00
.39525a						IF_OPEN
.39525a		da		phx		                PHX
.39525b		5a		phy		                PHY
.39525c		0b		phd		                PHD
.39525d		8b		phb		                PHB
.39525e		08		php		                PHP
.39525f		48		pha		                PHA             ; begin setdbr macro
.395260		08		php		                PHP
.395261		e2 20		sep #$20	                SEP #$20        ; set A short
.395263		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395265		48		pha		                PHA
.395266		ab		plb		                PLB
.395267		28		plp		                PLP
.395268		68		pla		                PLA             ; end setdbr macro
.395269		48		pha		                PHA             ; begin setdp macro
.39526a		08		php		                PHP
.39526b		c2 20		rep #$20	                REP #$20        ; set A long
.39526d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395270		5b		tcd		                TCD
.395271		28		plp		                PLP
.395272		68		pla		                PLA             ; end setdp macro
.395273		e2 20		sep #$20	                SEP #$20        ; set A short
.395275		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.395278		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39527a		89 20		bit #$20	                BIT #FD_STAT_OPEN
.39527c		f0 05		beq $395283	                BEQ ok_to_open
.39527e		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395280		82 87 06	brl $39590a	                BRL IF_FAILURE
.395283		22 a1 51 39	jsl $3951a1	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.395287		22 f3 47 39	jsl $3947f3	                JSL DOS_FINDFILE                ; Attempt to find the file
.39528b		b0 03		bcs $395290	                BCS is_found                    ; If OK: we found the file
.39528d		82 7e 06	brl $39590e	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.395290						is_found
.395290		e2 20		sep #$20	                SEP #$20        ; set A short
.395292		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.395295		a5 01		lda $0321	                LDA BIOS_DEV
.395297		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395299		c2 20		rep #$20	                REP #$20        ; set A long
.39529b		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.39529e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952a0		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3952a2		c8		iny		                INY
.3952a3		c8		iny		                INY
.3952a4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952a6		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952a8		22 0d 46 39	jsl $39460d	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3952ac		b0 03		bcs $3952b1	                BCS read_cluster
.3952ae		82 5d 06	brl $39590e	                BRL IF_PASSFAILURE
.3952b1		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3952b4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952b6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952b8		c8		iny		                INY
.3952b9		c8		iny		                INY
.3952ba		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952bc		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952be		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3952c1		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952c3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952c5		c8		iny		                INY
.3952c6		c8		iny		                INY
.3952c7		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952c9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952cb		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3952ce		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952d0		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.3952d3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952d5		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3952d8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952da		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3952dd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952df		e2 20		sep #$20	                SEP #$20        ; set A short
.3952e1		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3952e4		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3952e6		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3952e8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952ea		82 28 06	brl $395915	                BRL IF_SUCCESS
.3952ed						IF_CREATE
.3952ed		da		phx		                PHX
.3952ee		5a		phy		                PHY
.3952ef		0b		phd		                PHD
.3952f0		8b		phb		                PHB
.3952f1		08		php		                PHP
.3952f2		48		pha		                PHA             ; begin setdbr macro
.3952f3		08		php		                PHP
.3952f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3952f6		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952f8		48		pha		                PHA
.3952f9		ab		plb		                PLB
.3952fa		28		plp		                PLP
.3952fb		68		pla		                PLA             ; end setdbr macro
.3952fc		48		pha		                PHA             ; begin setdp macro
.3952fd		08		php		                PHP
.3952fe		c2 20		rep #$20	                REP #$20        ; set A long
.395300		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395303		5b		tcd		                TCD
.395304		28		plp		                PLP
.395305		68		pla		                PLA             ; end setdp macro
.395306		22 74 50 39	jsl $395074	                JSL DOS_CREATE                  ; Attempt to create the file
.39530a		90 18		bcc $395324	                BCC pass_failure                ; If it fails: pass the failure up the chain
.39530c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39530e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.395311		a9 00 00	lda #$0000	                LDA #0
.395314		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395316		c8		iny		                INY
.395317		c8		iny		                INY
.395318		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39531a		e2 20		sep #$20	                SEP #$20        ; set A short
.39531c		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.39531f		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.395321		82 f1 05	brl $395915	                BRL IF_SUCCESS
.395324		82 e3 05	brl $39590a	pass_failure    BRL IF_FAILURE
.395327						IF_CLOSE
.395327		da		phx		                PHX
.395328		5a		phy		                PHY
.395329		0b		phd		                PHD
.39532a		8b		phb		                PHB
.39532b		08		php		                PHP
.39532c		48		pha		                PHA             ; begin setdbr macro
.39532d		08		php		                PHP
.39532e		e2 20		sep #$20	                SEP #$20        ; set A short
.395330		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395332		48		pha		                PHA
.395333		ab		plb		                PLB
.395334		28		plp		                PLP
.395335		68		pla		                PLA             ; end setdbr macro
.395336		48		pha		                PHA             ; begin setdp macro
.395337		08		php		                PHP
.395338		c2 20		rep #$20	                REP #$20        ; set A long
.39533a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39533d		5b		tcd		                TCD
.39533e		28		plp		                PLP
.39533f		68		pla		                PLA             ; end setdp macro
.395340		e2 20		sep #$20	                SEP #$20        ; set A short
.395342		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.395345		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395347		89 02		bit #$02	                BIT #FD_STAT_WRITE
.395349		f0 09		beq $395354	                BEQ set_flag                    ; No, just mark it closed
.39534b		22 c0 53 39	jsl $3953c0	                JSL IF_WRITE                    ; Attempt to write the cluster
.39534f		b0 03		bcs $395354	                BCS set_flag
.395351		82 ba 05	brl $39590e	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395354		22 0f 5a 39	jsl $395a0f	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395358		82 ba 05	brl $395915	                BRL IF_SUCCESS
.39535b						IF_READ
.39535b		da		phx		                PHX
.39535c		5a		phy		                PHY
.39535d		0b		phd		                PHD
.39535e		8b		phb		                PHB
.39535f		08		php		                PHP
.395360		48		pha		                PHA             ; begin setdbr macro
.395361		08		php		                PHP
.395362		e2 20		sep #$20	                SEP #$20        ; set A short
.395364		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395366		48		pha		                PHA
.395367		ab		plb		                PLB
.395368		28		plp		                PLP
.395369		68		pla		                PLA             ; end setdbr macro
.39536a		48		pha		                PHA             ; begin setdp macro
.39536b		08		php		                PHP
.39536c		c2 20		rep #$20	                REP #$20        ; set A long
.39536e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395371		5b		tcd		                TCD
.395372		28		plp		                PLP
.395373		68		pla		                PLA             ; end setdp macro
.395374		c2 10		rep #$10	                REP #$10        ; set X long
.395376		e2 20		sep #$20	                SEP #$20        ; set A short
.395378						get_dev
.395378		e2 20		sep #$20	                SEP #$20        ; set A short
.39537a		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39537d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39537f		85 01		sta $0321	                STA BIOS_DEV
.395381		22 75 43 39	jsl $394375	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395385		c2 20		rep #$20	                REP #$20        ; set A long
.395387		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.39538a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39538c		85 10		sta $0330	                STA DOS_CLUS_ID
.39538e		c8		iny		                INY
.39538f		c8		iny		                INY
.395390		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395392		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395394		22 21 4a 39	jsl $394a21	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.395398		90 13		bcc $3953ad	                BCC pass_failure                ; If not OK: pass the failure up the chain
.39539a		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.39539d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39539f		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3953a1		c8		iny		                INY
.3953a2		c8		iny		                INY
.3953a3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a5		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3953a7		22 0d 46 39	jsl $39460d	                JSL DOS_GETCLUSTER              ; Get the cluster
.3953ab		b0 03		bcs $3953b0	                BCS ret_success                 ; If ok: return success
.3953ad						pass_failure
.3953ad		82 5e 05	brl $39590e	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3953b0		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.3953b3		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3953b5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953b7		c8		iny		                INY
.3953b8		c8		iny		                INY
.3953b9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3953bb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953bd		82 55 05	brl $395915	                BRL IF_SUCCESS
.3953c0						IF_WRITE
.3953c0		da		phx		                PHX
.3953c1		5a		phy		                PHY
.3953c2		0b		phd		                PHD
.3953c3		8b		phb		                PHB
.3953c4		08		php		                PHP
.3953c5		48		pha		                PHA             ; begin setdbr macro
.3953c6		08		php		                PHP
.3953c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3953c9		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953cb		48		pha		                PHA
.3953cc		ab		plb		                PLB
.3953cd		28		plp		                PLP
.3953ce		68		pla		                PLA             ; end setdbr macro
.3953cf		48		pha		                PHA             ; begin setdp macro
.3953d0		08		php		                PHP
.3953d1		c2 20		rep #$20	                REP #$20        ; set A long
.3953d3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953d6		5b		tcd		                TCD
.3953d7		28		plp		                PLP
.3953d8		68		pla		                PLA             ; end setdp macro
.3953d9		c2 10		rep #$10	                REP #$10        ; set X long
.3953db		e2 20		sep #$20	                SEP #$20        ; set A short
.3953dd		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3953e0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953e2		85 01		sta $0321	                STA BIOS_DEV
.3953e4		22 75 43 39	jsl $394375	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3953e8		c2 20		rep #$20	                REP #$20        ; set A long
.3953ea		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3953ed		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953ef		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3953f1		c8		iny		                INY
.3953f2		c8		iny		                INY
.3953f3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953f5		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3953f7		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.3953fa		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953fc		85 10		sta $0330	                STA DOS_CLUS_ID
.3953fe		c8		iny		                INY
.3953ff		c8		iny		                INY
.395400		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395402		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395404		d0 1a		bne $395420	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.395406		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395408		d0 16		bne $395420	                BNE rewrite_cluster
.39540a		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.39540d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39540f		85 10		sta $0330	                STA DOS_CLUS_ID
.395411		c8		iny		                INY
.395412		c8		iny		                INY
.395413		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395415		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395417		22 42 4e 39	jsl $394e42	                JSL DOS_APPENDCLUS              ; Append the cluster
.39541b		b0 0c		bcs $395429	                BCS ret_success                 ; If OK: return success
.39541d		82 ee 04	brl $39590e	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395420		22 4a 46 39	jsl $39464a	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.395424		b0 03		bcs $395429	                BCS ret_success                 ; If ok: return success
.395426		82 e5 04	brl $39590e	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395429		82 e9 04	brl $395915	ret_success     BRL IF_SUCCESS
.39542c						IF_DIROPEN
.39542c		da		phx		                PHX
.39542d		5a		phy		                PHY
.39542e		0b		phd		                PHD
.39542f		8b		phb		                PHB
.395430		08		php		                PHP
.395431		48		pha		                PHA             ; begin setdbr macro
.395432		08		php		                PHP
.395433		e2 20		sep #$20	                SEP #$20        ; set A short
.395435		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395437		48		pha		                PHA
.395438		ab		plb		                PLB
.395439		28		plp		                PLP
.39543a		68		pla		                PLA             ; end setdbr macro
.39543b		48		pha		                PHA             ; begin setdp macro
.39543c		08		php		                PHP
.39543d		c2 20		rep #$20	                REP #$20        ; set A long
.39543f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395442		5b		tcd		                TCD
.395443		28		plp		                PLP
.395444		68		pla		                PLA             ; end setdp macro
.395445		c2 30		rep #$30	                REP #$30        ; set A&X long
.395447		22 a1 51 39	jsl $3951a1	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.39544b		22 5b 47 39	jsl $39475b	                JSL DOS_PARSE_PATH          ; Parse the path
.39544f		22 75 43 39	jsl $394375	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395453		b0 03		bcs $395458	                BCS get_root_dir            ; If successful: get the root directory
.395455		82 b6 04	brl $39590e	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395458						get_root_dir
.395458		c2 30		rep #$30	                REP #$30        ; set A&X long
.39545a		22 2a 40 39	jsl $39402a	                JSL DOS_DIROPEN
.39545e		b0 03		bcs $395463	                BCS success
.395460		82 ab 04	brl $39590e	                BRL IF_PASSFAILURE
.395463		82 af 04	brl $395915	success         BRL IF_SUCCESS
.395466						IF_DIRNEXT
.395466		5c c4 40 39	jmp $3940c4	                JML DOS_DIRNEXT
.39546a						IF_DELETE
.39546a		da		phx		                PHX
.39546b		5a		phy		                PHY
.39546c		0b		phd		                PHD
.39546d		8b		phb		                PHB
.39546e		08		php		                PHP
.39546f		48		pha		                PHA             ; begin setdbr macro
.395470		08		php		                PHP
.395471		e2 20		sep #$20	                SEP #$20        ; set A short
.395473		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395475		48		pha		                PHA
.395476		ab		plb		                PLB
.395477		28		plp		                PLP
.395478		68		pla		                PLA             ; end setdbr macro
.395479		48		pha		                PHA             ; begin setdp macro
.39547a		08		php		                PHP
.39547b		c2 20		rep #$20	                REP #$20        ; set A long
.39547d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395480		5b		tcd		                TCD
.395481		28		plp		                PLP
.395482		68		pla		                PLA             ; end setdp macro
.395483		c2 30		rep #$30	                REP #$30        ; set A&X long
.395485		22 f3 47 39	jsl $3947f3	                JSL DOS_FINDFILE
.395489		b0 03		bcs $39548e	                BCS get_first_clus
.39548b		82 80 04	brl $39590e	                BRL IF_PASSFAILURE
.39548e						get_first_clus
.39548e		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395491		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395493		85 10		sta $0330	                STA DOS_CLUS_ID
.395495		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395498		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39549a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39549c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39549e		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3954a1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954a3		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3954a6		22 21 4a 39	jsl $394a21	del_loop        JSL NEXTCLUSTER
.3954aa		90 2f		bcc $3954db	                BCC del_one
.3954ac		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954ae		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.3954b1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954b3		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.3954b6		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3954b9		85 10		sta $0330	                STA DOS_CLUS_ID
.3954bb		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3954be		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954c0		22 02 4e 39	jsl $394e02	                JSL DELCLUSTER32
.3954c4		b0 03		bcs $3954c9	                BCS go_next
.3954c6		82 45 04	brl $39590e	                BRL IF_PASSFAILURE
.3954c9						go_next
.3954c9		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3954cc		85 10		sta $0330	                STA DOS_CLUS_ID
.3954ce		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3954d1		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.3954d4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954d6		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3954d9		80 cb		bra $3954a6	                BRA del_loop
.3954db						del_one
.3954db		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3954de		85 10		sta $0330	                STA DOS_CLUS_ID
.3954e0		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3954e3		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954e5		22 5c 4d 39	jsl $394d5c	                JSL DELCLUSTER
.3954e9		b0 03		bcs $3954ee	                BCS free_dir_entry
.3954eb		82 20 04	brl $39590e	                BRL IF_PASSFAILURE
.3954ee						free_dir_entry
.3954ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3954f0		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.3954f3		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.3954f5		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3954f7		22 43 42 39	jsl $394243	                JSL DOS_DIRWRITE                ; Write the directory entry back
.3954fb		b0 03		bcs $395500	                BCS ret_success
.3954fd		82 0e 04	brl $39590e	                BRL IF_PASSFAILURE
.395500		82 12 04	brl $395915	ret_success     BRL IF_SUCCESS
.395503						IF_DIRREAD
.395503		da		phx		                PHX
.395504		5a		phy		                PHY
.395505		0b		phd		                PHD
.395506		8b		phb		                PHB
.395507		08		php		                PHP
.395508		48		pha		                PHA             ; begin setdbr macro
.395509		08		php		                PHP
.39550a		e2 20		sep #$20	                SEP #$20        ; set A short
.39550c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39550e		48		pha		                PHA
.39550f		ab		plb		                PLB
.395510		28		plp		                PLP
.395511		68		pla		                PLA             ; end setdbr macro
.395512		48		pha		                PHA             ; begin setdp macro
.395513		08		php		                PHP
.395514		c2 20		rep #$20	                REP #$20        ; set A long
.395516		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395519		5b		tcd		                TCD
.39551a		28		plp		                PLP
.39551b		68		pla		                PLA             ; end setdp macro
.39551c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39551e		22 f3 47 39	jsl $3947f3	                JSL DOS_FINDFILE
.395522		b0 03		bcs $395527	                BCS success
.395524		82 e3 03	brl $39590a	                BRL IF_FAILURE
.395527		82 eb 03	brl $395915	success         BRL IF_SUCCESS
.39552a						IF_DIRWRITE
.39552a		5c 43 42 39	jmp $394243	                JML DOS_DIRWRITE
.39552e						IF_LOAD
.39552e		da		phx		                PHX
.39552f		5a		phy		                PHY
.395530		0b		phd		                PHD
.395531		8b		phb		                PHB
.395532		08		php		                PHP
.395533		48		pha		                PHA             ; begin setdbr macro
.395534		08		php		                PHP
.395535		e2 20		sep #$20	                SEP #$20        ; set A short
.395537		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395539		48		pha		                PHA
.39553a		ab		plb		                PLB
.39553b		28		plp		                PLP
.39553c		68		pla		                PLA             ; end setdbr macro
.39553d		48		pha		                PHA             ; begin setdp macro
.39553e		08		php		                PHP
.39553f		c2 20		rep #$20	                REP #$20        ; set A long
.395541		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395544		5b		tcd		                TCD
.395545		28		plp		                PLP
.395546		68		pla		                PLA             ; end setdp macro
.395547		c2 30		rep #$30	                REP #$30        ; set A&X long
.395549		22 5a 52 39	jsl $39525a	                JSL IF_OPEN
.39554d		b0 03		bcs $395552	                BCS setup                   ; If success: start setting things up
.39554f		82 bc 03	brl $39590e	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.395552						setup
.395552		c2 20		rep #$20	                REP #$20        ; set A long
.395554		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395557		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395559		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39555b		c8		iny		                INY
.39555c		c8		iny		                INY
.39555d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39555f		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395561		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395564		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395566		85 30		sta $0350	                STA DOS_SRC_PTR
.395568		c8		iny		                INY
.395569		c8		iny		                INY
.39556a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39556c		85 32		sta $0352	                STA DOS_SRC_PTR+2
.39556e		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395570		c9 40 00	cmp #$0040	                CMP #$0040
.395573		b0 04		bcs $395579	                BGE load_by_type            ; No: try to load it by type
.395575		5c bf 57 39	jmp $3957bf	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395579		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.39557c		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.39557f						type_loop
.39557f		e2 20		sep #$20	                SEP #$20        ; set A short
.395581		bf c5 55 39	lda $3955c5,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.395585		f0 37		beq $3955be	                BEQ no_match                ; If NULL... we didn't get a match
.395587		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.39558a		d0 28		bne $3955b4	                BNE next_entry              ; If they don't match, try the next entry
.39558c		bf c6 55 39	lda $3955c6,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395590		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.395593		d0 1f		bne $3955b4	                BNE next_entry              ; If they don't match, try the next entry
.395595		bf c7 55 39	lda $3955c7,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395599		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.39559c		d0 16		bne $3955b4	                BNE next_entry              ; If they don't match, try the next entry
.39559e		c2 20		rep #$20	                REP #$20        ; set A long
.3955a0		bf c8 55 39	lda $3955c8,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3955a4		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3955a6		e2 20		sep #$20	                SEP #$20        ; set A short
.3955a8		bf ca 55 39	lda $3955ca,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3955ac		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3955ae		a2 00 00	ldx #$0000	                LDX #0
.3955b1		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3955b4						next_entry
.3955b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3955b6		8a		txa		                TXA
.3955b7		18		clc		                CLC
.3955b8		69 06 00	adc #$0006	                ADC #6
.3955bb		aa		tax		                TAX
.3955bc		80 c1		bra $39557f	                BRA type_loop               ; And check it against the file
.3955be						no_match
.3955be		e2 20		sep #$20	                SEP #$20        ; set A short
.3955c0		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3955c2		82 45 03	brl $39590a	                BRL IF_FAILURE
>3955c5		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3955c8		d2 55				                .word <>IF_LOADPGX
>3955ca		39				                .byte `IF_LOADPGX
>3955cb		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>3955ce		5a 56				                .word <>IF_LOADPGZ
>3955d0		39				                .byte `IF_LOADPGZ
>3955d1		00				                .byte 0
.3955d2						IF_LOADPGX
.3955d2		c2 10		rep #$10	                REP #$10        ; set X long
.3955d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3955d6		a0 00 00	ldy #$0000	                LDY #0
.3955d9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.3955db		c9 50		cmp #$50	                CMP #'P'
.3955dd		d0 15		bne $3955f4	                BNE fail_sig                        ; If not found, fail
.3955df		c8		iny		                INY
.3955e0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955e2		c9 47		cmp #$47	                CMP #'G'
.3955e4		d0 0e		bne $3955f4	                BNE fail_sig
.3955e6		c8		iny		                INY
.3955e7		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955e9		c9 58		cmp #$58	                CMP #'X'
.3955eb		d0 07		bne $3955f4	                BNE fail_sig
.3955ed		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3955ee		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955f0		c9 01		cmp #$01	                CMP #$01
.3955f2		f0 17		beq $39560b	                BEQ get_dest                        ; All passes: go to get the destination address
.3955f4		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.3955f6		22 0a 59 39	jsl $39590a	                JSL IF_FAILURE
.3955fa						adjust_size
.3955fa		c2 20		rep #$20	                REP #$20        ; set A long
.3955fc		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.3955fd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3955ff		e9 08 00	sbc #$0008	                SBC #8
.395602		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395604		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395606		e9 00 00	sbc #$0000	                SBC #0
.395609		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39560b						get_dest
.39560b		c2 20		rep #$20	                REP #$20        ; set A long
.39560d		c8		iny		                INY
.39560e		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.395610		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.395612		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.395614		c8		iny		                INY
.395615		c8		iny		                INY
.395616		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.395618		85 36		sta $0356	                STA DOS_DST_PTR+2
.39561a		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39561c		c8		iny		                INY                                 ; Point to the first data byte
.39561d		c8		iny		                INY
.39561e						copy_loop
.39561e		e2 20		sep #$20	                SEP #$20        ; set A short
.395620		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.395622		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.395624		c2 20		rep #$20	                REP #$20        ; set A long
.395626		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.395628		d0 02		bne $39562c	                BNE dec_file_size
.39562a		e6 36		inc $0356	                INC DOS_DST_PTR+2
.39562c		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.39562d		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.39562f		e9 01 00	sbc #$0001	                SBC #1
.395632		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395634		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395636		e9 00 00	sbc #$0000	                SBC #0
.395639		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39563b		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.39563d		d0 04		bne $395643	                BNE next_byte
.39563f		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395641		f0 14		beq $395657	                BEQ done                            ; Yes: we're done
.395643		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.395644		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.395647		d0 d5		bne $39561e	                BNE copy_loop                       ; No: keep copying
.395649		22 25 4b 39	jsl $394b25	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.39564d		b0 03		bcs $395652	                BCS next_cluster
.39564f		82 bc 02	brl $39590e	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.395652		a0 00 00	ldy #$0000	next_cluster    LDY #0
.395655		80 c7		bra $39561e	                BRA copy_loop                       ; Go back to copying
.395657		82 bb 02	brl $395915	done            BRL IF_SUCCESS
.39565a						IF_LOADPGZ
.39565a		48		pha		                PHA             ; begin setdbr macro
.39565b		08		php		                PHP
.39565c		e2 20		sep #$20	                SEP #$20        ; set A short
.39565e		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395660		48		pha		                PHA
.395661		ab		plb		                PLB
.395662		28		plp		                PLP
.395663		68		pla		                PLA             ; end setdbr macro
.395664		48		pha		                PHA             ; begin setdp macro
.395665		08		php		                PHP
.395666		c2 20		rep #$20	                REP #$20        ; set A long
.395668		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39566b		5b		tcd		                TCD
.39566c		28		plp		                PLP
.39566d		68		pla		                PLA             ; end setdp macro
.39566e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395670		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.395673		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395675		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.395677		c8		iny		                INY
.395678		c8		iny		                INY
.395679		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39567b		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.39567d		e2 20		sep #$20	                SEP #$20        ; set A short
.39567f		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.395682		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.395684		c9 5a		cmp #$5a	                CMP #'Z'
.395686		f0 06		beq $39568e	                BEQ start_block                     ; If found, get the starting address
.395688		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.39568a		22 0a 59 39	jsl $39590a	                JSL IF_FAILURE
.39568e		c8		iny		start_block     INY
.39568f						get_addr
.39568f		e2 20		sep #$20	                SEP #$20        ; set A short
.395691		22 14 57 39	jsl $395714	                JSL IF_FILE_EOF                     ; Check if EOF
.395695		90 03		bcc $39569a	                BCC get_addr_lo
.395697		82 7b 02	brl $395915	done            BRL IF_SUCCESS                      ; If so: we're done
.39569a		22 52 57 39	jsl $395752	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.39569e		90 47		bcc $3956e7	                BCC ret_failure                     ; Got an error: pass it on
.3956a0		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.3956a2		22 52 57 39	jsl $395752	                JSL IF_READ_NEXT                    ; Get the next byte
.3956a6		90 3f		bcc $3956e7	                BCC ret_failure                     ; Got an error: pass it on
.3956a8		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.3956aa		22 52 57 39	jsl $395752	                JSL IF_READ_NEXT                    ; Get the next byte
.3956ae		90 37		bcc $3956e7	                BCC ret_failure                     ; Got an error: pass it on
.3956b0		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.3956b2		22 52 57 39	jsl $395752	                JSL IF_READ_NEXT                    ; Get the next byte
.3956b6		90 2f		bcc $3956e7	                BCC ret_failure                     ; Got an error: pass it on
.3956b8		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.3956ba		22 52 57 39	jsl $395752	                JSL IF_READ_NEXT                    ; Get the next byte
.3956be		90 27		bcc $3956e7	                BCC ret_failure                     ; Got an error: pass it on
.3956c0		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.3956c2		22 52 57 39	jsl $395752	                JSL IF_READ_NEXT                    ; Get the next byte
.3956c6		90 1f		bcc $3956e7	                BCC ret_failure                     ; Got an error: pass it on
.3956c8		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.3956ca		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.3956cc		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.3956ce		d0 1a		bne $3956ea	                BNE read_data
.3956d0		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.3956d2		d0 16		bne $3956ea	                BNE read_data
.3956d4		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.3956d6		d0 12		bne $3956ea	                BNE read_data
.3956d8		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.3956da		85 3c		sta $035c	                STA DOS_RUN_PTR
.3956dc		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.3956de		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.3956e0		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.3956e2		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3956e4		82 2e 02	brl $395915	                BRL IF_SUCCESS                      ; And finish
.3956e7		82 20 02	brl $39590a	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.3956ea						read_data
.3956ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3956ec		22 52 57 39	jsl $395752	                JSL IF_READ_NEXT                    ; Get the next byte
.3956f0		90 f5		bcc $3956e7	                BCC ret_failure
.3956f2		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.3956f4		c2 20		rep #$20	                REP #$20        ; set A long
.3956f6		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.3956f8		d0 02		bne $3956fc	                BNE dec_block_size
.3956fa		e6 36		inc $0356	                INC DOS_DST_PTR+2
.3956fc		38		sec		dec_block_size  SEC
.3956fd		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.3956ff		e9 01 00	sbc #$0001	                SBC #1
.395702		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.395704		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.395706		e9 00 00	sbc #$0000	                SBC #0
.395709		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.39570b		d0 dd		bne $3956ea	                BNE read_data
.39570d		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.39570f		d0 d9		bne $3956ea	                BNE read_data                       ; No: keep reading data
.395711		82 7b ff	brl $39568f	                BRL get_addr                        ; Yes: check for another block
.395714						IF_FILE_EOF
.395714		48		pha		                PHA
.395715		5a		phy		                PHY
.395716		8b		phb		                PHB
.395717		0b		phd		                PHD
.395718		08		php		                PHP
.395719		48		pha		                PHA             ; begin setdbr macro
.39571a		08		php		                PHP
.39571b		e2 20		sep #$20	                SEP #$20        ; set A short
.39571d		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39571f		48		pha		                PHA
.395720		ab		plb		                PLB
.395721		28		plp		                PLP
.395722		68		pla		                PLA             ; end setdbr macro
.395723		48		pha		                PHA             ; begin setdp macro
.395724		08		php		                PHP
.395725		c2 20		rep #$20	                REP #$20        ; set A long
.395727		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39572a		5b		tcd		                TCD
.39572b		28		plp		                PLP
.39572c		68		pla		                PLA             ; end setdp macro
.39572d		e2 20		sep #$20	                SEP #$20        ; set A short
.39572f		c2 10		rep #$10	                REP #$10        ; set X long
.395731		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.395734		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.395736		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.395738		f0 07		beq $395741	                BEQ chk_file_size                   ; If not: check the file size
.39573a		28		plp		ret_true        PLP                                 ; Return true
.39573b		2b		pld		                PLD
.39573c		ab		plb		                PLB
.39573d		7a		ply		                PLY
.39573e		68		pla		                PLA
.39573f		38		sec		                SEC
.395740		6b		rtl		                RTL
.395741						chk_file_size
.395741		c2 20		rep #$20	                REP #$20        ; set A long
.395743		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.395745		d0 04		bne $39574b	                BNE ret_false
.395747		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395749		f0 ef		beq $39573a	                BEQ ret_true
.39574b		28		plp		ret_false       PLP                                 ; Return false
.39574c		2b		pld		                PLD
.39574d		ab		plb		                PLB
.39574e		7a		ply		                PLY
.39574f		68		pla		                PLA
.395750		18		clc		                CLC
.395751		6b		rtl		                RTL
.395752						IF_READ_NEXT
.395752		8b		phb		                PHB
.395753		0b		phd		                PHD
.395754		08		php		                PHP
.395755		48		pha		                PHA             ; begin setdbr macro
.395756		08		php		                PHP
.395757		e2 20		sep #$20	                SEP #$20        ; set A short
.395759		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39575b		48		pha		                PHA
.39575c		ab		plb		                PLB
.39575d		28		plp		                PLP
.39575e		68		pla		                PLA             ; end setdbr macro
.39575f		48		pha		                PHA             ; begin setdp macro
.395760		08		php		                PHP
.395761		c2 20		rep #$20	                REP #$20        ; set A long
.395763		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395766		5b		tcd		                TCD
.395767		28		plp		                PLP
.395768		68		pla		                PLA             ; end setdp macro
.395769		e2 20		sep #$20	                SEP #$20        ; set A short
.39576b		c2 10		rep #$10	                REP #$10        ; set X long
.39576d		22 14 57 39	jsl $395714	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.395771		90 06		bcc $395779	                BCC get_byte                        ; If not: get the next byte
.395773		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.395775		85 0e		sta $032e	                STA DOS_STATUS
.395777		80 3f		bra $3957b8	                BRA ret_failure
.395779		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.39577b		48		pha		                PHA                                 ; And save it for the moment
.39577c		c2 20		rep #$20	                REP #$20        ; set A long
.39577e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.395780		d0 02		bne $395784	                BNE dec_low
.395782		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.395784		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.395786		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395788		d0 04		bne $39578e	                BNE next_byte
.39578a		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39578c		f0 1b		beq $3957a9	                BEQ ret_eof                         ; Yes: mark the file as EOF
.39578e						next_byte
.39578e		e2 20		sep #$20	                SEP #$20        ; set A short
.395790		c8		iny		                INY                                 ; Move to the next byte
.395791		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.395794		90 0b		bcc $3957a1	                BLT ret_success                     ; No: just return the byte
.395796		22 25 4b 39	jsl $394b25	                JSL DOS_READNEXT                    ; Yes: read the next sector
.39579a		b0 02		bcs $39579e	                BCS reset_index
.39579c		80 1a		bra $3957b8	                BRA ret_failure                     ; If failure: pass the error up the chain
.39579e		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.3957a1						ret_success
.3957a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3957a3		68		pla		                PLA                                 ; Return the byte retrieved
.3957a4		28		plp		                PLP
.3957a5		2b		pld		                PLD
.3957a6		ab		plb		                PLB
.3957a7		38		sec		                SEC
.3957a8		6b		rtl		                RTL
.3957a9						ret_eof
.3957a9		e2 20		sep #$20	                SEP #$20        ; set A short
.3957ab		5a		phy		                PHY                                 ; Save the index
.3957ac		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.3957af		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3957b1		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.3957b3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.3957b5		7a		ply		                PLY                                 ; Restore the index
.3957b6		80 e9		bra $3957a1	                BRA ret_success
.3957b8						ret_failure
.3957b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3957ba		28		plp		                PLP
.3957bb		2b		pld		                PLD
.3957bc		ab		plb		                PLB
.3957bd		18		clc		                CLC
.3957be		6b		rtl		                RTL
.3957bf						IF_LOADRAW
.3957bf		c2 30		rep #$30	                REP #$30        ; set A&X long
.3957c1		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.3957c4						copy_loop
.3957c4		e2 20		sep #$20	                SEP #$20        ; set A short
.3957c6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.3957c8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3957ca		c2 20		rep #$20	                REP #$20        ; set A long
.3957cc		38		sec		                SEC                         ; Count down the number of bytes left
.3957cd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957cf		e9 01 00	sbc #$0001	                SBC #1
.3957d2		85 2c		sta $034c	                STA DOS_FILE_SIZE
.3957d4		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3957d6		e9 00 00	sbc #$0000	                SBC #0
.3957d9		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3957db		d0 04		bne $3957e1	                BNE continue
.3957dd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3957df		f0 1b		beq $3957fc	                BEQ close_file              ; If not: we're done
.3957e1		c8		iny		continue        INY
.3957e2		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.3957e5		d0 dd		bne $3957c4	                BNE copy_loop               ; No: keep processing the bytes
.3957e7		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.3957e8		a5 34		lda $0354	                LDA DOS_DST_PTR
.3957ea		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.3957ed		85 34		sta $0354	                STA DOS_DST_PTR
.3957ef		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.3957f1		69 00 00	adc #$0000	                ADC #0
.3957f4		85 36		sta $0356	                STA DOS_DST_PTR+2
.3957f6		22 5b 53 39	jsl $39535b	                JSL IF_READ                 ; Yes: load the next cluster
.3957fa		b0 c5		bcs $3957c1	                BCS copy_cluster            ; And start copying it
.3957fc						close_file
.3957fc		82 16 01	brl $395915	ret_success     BRL IF_SUCCESS
.3957ff						IF_NULLBUFFER
.3957ff		5a		phy		                PHY
.395800		8b		phb		                PHB
.395801		0b		phd		                PHD
.395802		08		php		                PHP
.395803		48		pha		                PHA             ; begin setdbr macro
.395804		08		php		                PHP
.395805		e2 20		sep #$20	                SEP #$20        ; set A short
.395807		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395809		48		pha		                PHA
.39580a		ab		plb		                PLB
.39580b		28		plp		                PLP
.39580c		68		pla		                PLA             ; end setdbr macro
.39580d		48		pha		                PHA             ; begin setdp macro
.39580e		08		php		                PHP
.39580f		c2 20		rep #$20	                REP #$20        ; set A long
.395811		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395814		5b		tcd		                TCD
.395815		28		plp		                PLP
.395816		68		pla		                PLA             ; end setdp macro
.395817		c2 30		rep #$30	                REP #$30        ; set A&X long
.395819		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.39581c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39581e		85 28		sta $0348	                STA DOS_TEMP
.395820		c8		iny		                INY
.395821		c8		iny		                INY
.395822		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395824		85 2a		sta $034a	                STA DOS_TEMP+2
.395826		a0 00 00	ldy #$0000	                LDY #0
.395829		a9 00 00	lda #$0000	                LDA #0
.39582c		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.39582e		c8		iny		                INY
.39582f		c8		iny		                INY
.395830		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.395833		d0 f7		bne $39582c	                BNE loop
.395835		28		plp		                PLP
.395836		2b		pld		                PLD
.395837		ab		plb		                PLB
.395838		7a		ply		                PLY
.395839		6b		rtl		                RTL
.39583a						IF_COPY2BUFF
.39583a		5a		phy		                PHY
.39583b		8b		phb		                PHB
.39583c		0b		phd		                PHD
.39583d		08		php		                PHP
.39583e		48		pha		                PHA             ; begin setdbr macro
.39583f		08		php		                PHP
.395840		e2 20		sep #$20	                SEP #$20        ; set A short
.395842		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395844		48		pha		                PHA
.395845		ab		plb		                PLB
.395846		28		plp		                PLP
.395847		68		pla		                PLA             ; end setdbr macro
.395848		48		pha		                PHA             ; begin setdp macro
.395849		08		php		                PHP
.39584a		c2 20		rep #$20	                REP #$20        ; set A long
.39584c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39584f		5b		tcd		                TCD
.395850		28		plp		                PLP
.395851		68		pla		                PLA             ; end setdp macro
.395852		c2 30		rep #$30	                REP #$30        ; set A&X long
.395854		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395857		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395859		85 28		sta $0348	                STA DOS_TEMP
.39585b		c8		iny		                INY
.39585c		c8		iny		                INY
.39585d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39585f		85 2a		sta $034a	                STA DOS_TEMP+2
.395861		a0 00 00	ldy #$0000	                LDY #0
.395864						copy_loop
.395864		e2 20		sep #$20	                SEP #$20        ; set A short
.395866		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.395868		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.39586a		c2 20		rep #$20	                REP #$20        ; set A long
.39586c		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.39586e		d0 02		bne $395872	                BNE adv_dest
.395870		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395872		c8		iny		adv_dest        INY                         ; Count it
.395873		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.395876		f0 0c		beq $395884	                BEQ done                    ; Yes: we're done
.395878		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.39587a		c5 38		cmp $0358	                CMP DOS_END_PTR
.39587c		d0 e6		bne $395864	                BNE copy_loop               ; No: keep copying
.39587e		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395880		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395882		d0 e0		bne $395864	                BNE copy_loop
.395884		28		plp		done            PLP
.395885		2b		pld		                PLD
.395886		ab		plb		                PLB
.395887		7a		ply		                PLY
.395888		6b		rtl		                RTL
.395889						IF_SAVE
.395889		da		phx		                PHX
.39588a		5a		phy		                PHY
.39588b		0b		phd		                PHD
.39588c		8b		phb		                PHB
.39588d		08		php		                PHP
.39588e		48		pha		                PHA             ; begin setdbr macro
.39588f		08		php		                PHP
.395890		e2 20		sep #$20	                SEP #$20        ; set A short
.395892		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395894		48		pha		                PHA
.395895		ab		plb		                PLB
.395896		28		plp		                PLP
.395897		68		pla		                PLA             ; end setdbr macro
.395898		48		pha		                PHA             ; begin setdp macro
.395899		08		php		                PHP
.39589a		c2 20		rep #$20	                REP #$20        ; set A long
.39589c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39589f		5b		tcd		                TCD
.3958a0		28		plp		                PLP
.3958a1		68		pla		                PLA             ; end setdp macro
.3958a2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958a4		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.3958a7		38		sec		                SEC
.3958a8		a5 38		lda $0358	                LDA DOS_END_PTR
.3958aa		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.3958ac		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958ae		c8		iny		                INY
.3958af		c8		iny		                INY
.3958b0		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.3958b2		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.3958b4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958b6		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.3958b9		18		clc		                CLC
.3958ba		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958bc		69 01 00	adc #$0001	                ADC #1
.3958bf		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958c1		90 09		bcc $3958cc	                BCC first_block
.3958c3		c8		iny		                INY
.3958c4		c8		iny		                INY
.3958c5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3958c7		69 00 00	adc #$0000	                ADC #0
.3958ca		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958cc		22 ff 57 39	jsl $3957ff	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3958d0		22 3a 58 39	jsl $39583a	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.3958d4		22 ed 52 39	jsl $3952ed	                JSL IF_CREATE           ; Create file.
.3958d8		b0 03		bcs $3958dd	                BCS check_for_end
.3958da		82 31 00	brl $39590e	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.3958dd		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.3958df		c5 38		cmp $0358	                CMP DOS_END_PTR
.3958e1		d0 06		bne $3958e9	                BNE next_block
.3958e3		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3958e5		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3958e7		f0 1d		beq $395906	                BEQ done                ; Yes: we're done
.3958e9		22 ff 57 39	jsl $3957ff	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3958ed		22 3a 58 39	jsl $39583a	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.3958f1		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.3958f4		a9 00 00	lda #$0000	                LDA #0
.3958f7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958f9		c8		iny		                INY
.3958fa		c8		iny		                INY
.3958fb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3958fd		22 c0 53 39	jsl $3953c0	                JSL IF_WRITE            ; Append to the file
.395901		b0 da		bcs $3958dd	                BCS check_for_end       ; And try again
.395903		82 08 00	brl $39590e	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.395906		5c 15 59 39	jmp $395915	done            JML IF_SUCCESS
.39590a						IF_FAILURE
.39590a		e2 20		sep #$20	                SEP #$20        ; set A short
.39590c		85 0e		sta $032e	                STA DOS_STATUS
.39590e		28		plp		IF_PASSFAILURE  PLP
.39590f		18		clc		                CLC
.395910		ab		plb		                PLB
.395911		2b		pld		                PLD
.395912		7a		ply		                PLY
.395913		fa		plx		                PLX
.395914		6b		rtl		                RTL
.395915						IF_SUCCESS
.395915		e2 20		sep #$20	                SEP #$20        ; set A short
.395917		64 00		stz $0320	                STZ BIOS_STATUS
.395919		64 0e		stz $032e	                STZ DOS_STATUS
.39591b		28		plp		                PLP
.39591c		38		sec		                SEC
.39591d		ab		plb		                PLB
.39591e		2b		pld		                PLD
.39591f		7a		ply		                PLY
.395920		fa		plx		                PLX
.395921		6b		rtl		                RTL
.395922						IF_RUN
.395922		da		phx		                PHX
.395923		5a		phy		                PHY
.395924		0b		phd		                PHD
.395925		8b		phb		                PHB
.395926		08		php		                PHP
.395927		48		pha		                PHA             ; begin setdbr macro
.395928		08		php		                PHP
.395929		e2 20		sep #$20	                SEP #$20        ; set A short
.39592b		a9 00		lda #$00	                LDA #0
.39592d		48		pha		                PHA
.39592e		ab		plb		                PLB
.39592f		28		plp		                PLP
.395930		68		pla		                PLA             ; end setdbr macro
.395931		48		pha		                PHA             ; begin setdp macro
.395932		08		php		                PHP
.395933		c2 20		rep #$20	                REP #$20        ; set A long
.395935		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395938		5b		tcd		                TCD
.395939		28		plp		                PLP
.39593a		68		pla		                PLA             ; end setdp macro
.39593b		e2 20		sep #$20	                SEP #$20        ; set A short
.39593d		c2 10		rep #$10	                REP #$10        ; set X long
.39593f		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.395941		a2 00 00	ldx #$0000	                LDX #0
.395944		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.395948		e8		inx		                INX
.395949		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.39594c		d0 f6		bne $395944	                BNE clr_fd_loop
.39594e		c2 20		rep #$20	                REP #$20        ; set A long
.395950		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.395953		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.395957		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.39595a		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.39595e		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.395960		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395964		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395966		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.39596a		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.39596d		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.39596f		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395971		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395974		85 20		sta $0340	                STA DOS_FD_PTR
.395976		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.395979		85 22		sta $0342	                STA DOS_FD_PTR+2
.39597b		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.39597e		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395982		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.395986		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.39598a		b0 03		bcs $39598f	                BCS chk_execute
.39598c		82 7f ff	brl $39590e	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.39598f						chk_execute
.39598f		c2 20		rep #$20	                REP #$20        ; set A long
.395991		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395993		d0 0b		bne $3959a0	                BNE try_execute                         ; If so: call it
.395995		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395997		d0 07		bne $3959a0	                BNE try_execute
.395999		e2 20		sep #$20	                SEP #$20        ; set A short
.39599b		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.39599d		82 6a ff	brl $39590a	                BRL IF_FAILURE
.3959a0						try_execute
.3959a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3959a2		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.3959a4		48		pha		                PHA
.3959a5		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.3959a7		48		pha		                PHA
.3959a8		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.3959aa		48		pha		                PHA
.3959ab		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.3959ad		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.3959af		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.3959b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3959b5		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.3959b6		68		pla		                PLA
.3959b7		68		pla		                PLA
.3959b8		82 5a ff	brl $395915	                BRL IF_SUCCESS                          ; Return success
.3959bb						IF_ALLOCFD
.3959bb		da		phx		                PHX
.3959bc		5a		phy		                PHY
.3959bd		0b		phd		                PHD
.3959be		8b		phb		                PHB
.3959bf		08		php		                PHP
.3959c0		48		pha		                PHA             ; begin setdbr macro
.3959c1		08		php		                PHP
.3959c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3959c4		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3959c6		48		pha		                PHA
.3959c7		ab		plb		                PLB
.3959c8		28		plp		                PLP
.3959c9		68		pla		                PLA             ; end setdbr macro
.3959ca		48		pha		                PHA             ; begin setdp macro
.3959cb		08		php		                PHP
.3959cc		c2 20		rep #$20	                REP #$20        ; set A long
.3959ce		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3959d1		5b		tcd		                TCD
.3959d2		28		plp		                PLP
.3959d3		68		pla		                PLA             ; end setdp macro
.3959d4		c2 10		rep #$10	                REP #$10        ; set X long
.3959d6		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.3959d9						chk_fd
.3959d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3959db		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.3959de		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.3959e0		f0 14		beq $3959f6	                BEQ found                           ; No: flag and return the found descriptor
.3959e2						next_fd
.3959e2		c2 20		rep #$20	                REP #$20        ; set A long
.3959e4		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.3959e5		18		clc		                CLC
.3959e6		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3959e9		aa		tax		                TAX
.3959ea		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.3959ed		90 ea		bcc $3959d9	                BLT chk_fd                          ; No: check this new file descriptor
.3959ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3959f1		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.3959f3		82 14 ff	brl $39590a	                BRL IF_FAILURE
.3959f6		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.3959f8		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.3959fb		c2 20		rep #$20	                REP #$20        ; set A long
.3959fd		8a		txa		                TXA
.3959fe		18		clc		                CLC
.3959ff		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.395a02		85 20		sta $0340	                STA @b DOS_FD_PTR
.395a04		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.395a07		69 00 00	adc #$0000	                ADC #0
.395a0a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a0c		82 06 ff	brl $395915	                BRL IF_SUCCESS                      ; Return this file descriptor
.395a0f						IF_FREEFD
.395a0f		da		phx		                PHX
.395a10		5a		phy		                PHY
.395a11		0b		phd		                PHD
.395a12		8b		phb		                PHB
.395a13		08		php		                PHP
.395a14		48		pha		                PHA             ; begin setdbr macro
.395a15		08		php		                PHP
.395a16		e2 20		sep #$20	                SEP #$20        ; set A short
.395a18		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395a1a		48		pha		                PHA
.395a1b		ab		plb		                PLB
.395a1c		28		plp		                PLP
.395a1d		68		pla		                PLA             ; end setdbr macro
.395a1e		48		pha		                PHA             ; begin setdp macro
.395a1f		08		php		                PHP
.395a20		c2 20		rep #$20	                REP #$20        ; set A long
.395a22		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a25		5b		tcd		                TCD
.395a26		28		plp		                PLP
.395a27		68		pla		                PLA             ; end setdp macro
.395a28		e2 20		sep #$20	                SEP #$20        ; set A short
.395a2a		c2 10		rep #$10	                REP #$10        ; set X long
.395a2c		a9 00		lda #$00	                LDA #0
.395a2e		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395a30		82 e2 fe	brl $395915	                BRL IF_SUCCESS
.395a33						DOS_SRC2DST
.395a33		da		phx		                PHX
.395a34		5a		phy		                PHY
.395a35		0b		phd		                PHD
.395a36		8b		phb		                PHB
.395a37		08		php		                PHP
.395a38		48		pha		                PHA             ; begin setdp macro
.395a39		08		php		                PHP
.395a3a		c2 20		rep #$20	                REP #$20        ; set A long
.395a3c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a3f		5b		tcd		                TCD
.395a40		28		plp		                PLP
.395a41		68		pla		                PLA             ; end setdp macro
.395a42		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a44		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395a47		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395a49		aa		tax		                TAX                                     ; X := source buffer address
.395a4a		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.395a4c		a8		tay		                TAY                                     ; Y := destination buffer address
.395a4d		e2 20		sep #$20	                SEP #$20        ; set A short
.395a4f		a9 38		lda #$38	                LDA #`DOS_FILE_BUFFS
.395a51		48		pha		                PHA
.395a52		ab		plb		                PLB
.395a53		c2 20		rep #$20	                REP #$20        ; set A long
.395a55		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.395a58		f0 11		beq $395a6b	loop            BEQ done
.395a5a		48		pha		                PHA
.395a5b		e2 20		sep #$20	                SEP #$20        ; set A short
.395a5d		bd 00 00	lda $380000,x	                LDA #0,B,X
.395a60		99 00 00	sta $380000,y	                STA #0,B,Y
.395a63		c2 20		rep #$20	                REP #$20        ; set A long
.395a65		68		pla		                PLA
.395a66		3a		dec a		                DEC A
.395a67		e8		inx		                INX
.395a68		c8		iny		                INY
.395a69		80 ed		bra $395a58	                BRA loop
.395a6b		28		plp		done            PLP
.395a6c		ab		plb		                PLB
.395a6d		2b		pld		                PLD
.395a6e		7a		ply		                PLY
.395a6f		fa		plx		                PLX
.395a70		6b		rtl		                RTL
.395a71						IF_COPY
.395a71		da		phx		                PHX
.395a72		5a		phy		                PHY
.395a73		0b		phd		                PHD
.395a74		8b		phb		                PHB
.395a75		08		php		                PHP
.395a76		48		pha		                PHA             ; begin setdbr macro
.395a77		08		php		                PHP
.395a78		e2 20		sep #$20	                SEP #$20        ; set A short
.395a7a		a9 00		lda #$00	                LDA #0
.395a7c		48		pha		                PHA
.395a7d		ab		plb		                PLB
.395a7e		28		plp		                PLP
.395a7f		68		pla		                PLA             ; end setdbr macro
.395a80		48		pha		                PHA             ; begin setdp macro
.395a81		08		php		                PHP
.395a82		c2 20		rep #$20	                REP #$20        ; set A long
.395a84		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a87		5b		tcd		                TCD
.395a88		28		plp		                PLP
.395a89		68		pla		                PLA             ; end setdp macro
.395a8a		22 bb 59 39	jsl $3959bb	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395a8e		b0 03		bcs $395a93	                BCS set_src_path
.395a90		82 7b fe	brl $39590e	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395a93						set_src_path
.395a93		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a95		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.395a98		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395a9a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395a9c		c8		iny		                INY
.395a9d		c8		iny		                INY
.395a9e		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395aa0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395aa2						alloc_dest
.395aa2		c2 30		rep #$30	                REP #$30        ; set A&X long
.395aa4		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.395aa6		85 30		sta $0350	                STA @b DOS_SRC_PTR
.395aa8		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395aaa		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395aac		22 bb 59 39	jsl $3959bb	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395ab0		b0 0f		bcs $395ac1	                BCS set_paths                   ; If everything is ok... start setting the paths
.395ab2		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395ab4		85 20		sta $0340	                STA @b DOS_FD_PTR
.395ab6		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395ab8		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395aba		22 0f 5a 39	jsl $395a0f	                JSL IF_FREEFD                   ; And free it
.395abe		82 4d fe	brl $39590e	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395ac1						set_paths
.395ac1		c2 30		rep #$30	                REP #$30        ; set A&X long
.395ac3		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.395ac5		85 34		sta $0354	                STA @b DOS_DST_PTR
.395ac7		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395ac9		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395acb		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395ace		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395ad0		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ad2		c8		iny		                INY
.395ad3		c8		iny		                INY
.395ad4		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.395ad6		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395ad8		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395ada		85 20		sta $0340	                STA @b DOS_FD_PTR
.395adc		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395ade		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395ae0		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.395ae4		b0 10		bcs $395af6	                BCS src_open                    ; If success, work with the openned file
.395ae6		00		brk #		                BRK
.395ae7		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395ae9		85 20		sta $0340	                STA @b DOS_FD_PTR
.395aeb		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395aed		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395aef		22 0f 5a 39	jsl $395a0f	                JSL IF_FREEFD                   ; And free it
.395af3		82 bc ff	brl $395ab2	                BRL err_free_src_fd             ; Free the source file descriptor
.395af6		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.395af9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395afb		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395afd		c8		iny		                INY
.395afe		c8		iny		                INY
.395aff		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395b01		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b03		22 33 5a 39	jsl $395a33	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.395b07		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b09		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b0b		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b0d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b0f		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.395b13		b0 0f		bcs $395b24	                BCS read_next                   ; If sucessful, try to get the next cluster
.395b15		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b17		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b19		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b1b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b1d		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.395b21		82 c3 ff	brl $395ae7	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.395b24						read_next
.395b24		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b26		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b28		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b2a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b2c		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.395b30		b0 19		bcs $395b4b	                BCS copy2dest                   ; If successful, copy the sector
.395b32		e2 20		sep #$20	                SEP #$20        ; set A short
.395b34		a5 0e		lda $032e	                LDA @b DOS_STATUS
.395b36		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.395b38		f0 32		beq $395b6c	                BEQ file_copied                 ; Yes: we're done copying
.395b3a						err_dest_close
.395b3a		c2 20		rep #$20	                REP #$20        ; set A long
.395b3c		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b3e		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b40		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b42		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b44		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.395b48		82 ca ff	brl $395b15	                BRL err_src_close               ; Close the source and throw an error
.395b4b						copy2dest
.395b4b		22 33 5a 39	jsl $395a33	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395b4f		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395b52		a9 00 00	lda #$0000	                LDA #0
.395b55		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b57		c8		iny		                INY
.395b58		c8		iny		                INY
.395b59		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395b5b		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b5d		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b5f		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b61		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b63		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395b67		90 d1		bcc $395b3a	                BCC err_dest_close              ; If error: close all files and throw the error
.395b69		82 b8 ff	brl $395b24	                BRL read_next                   ; Otherwise: repeat the loop
.395b6c						file_copied
.395b6c		c2 20		rep #$20	                REP #$20        ; set A long
.395b6e		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395b70		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b72		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395b74		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b76		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395b7a		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395b7c		85 20		sta $0340	                STA @b DOS_FD_PTR
.395b7e		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395b80		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395b82		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.395b86		82 8c fd	brl $395915	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395b89						UART_SELECT
.395b89		08		php		            PHP
.395b8a		c2 20		rep #$20	                REP #$20        ; set A long
.395b8c		c9 02 00	cmp #$0002	            CMP #2
.395b8f		f0 07		beq $395b98	            BEQ is_COM2
.395b91		c2 20		rep #$20	                REP #$20        ; set A long
.395b93		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.395b96		80 05		bra $395b9d	            BRA setaddr
.395b98						is_COM2
.395b98		c2 20		rep #$20	                REP #$20        ; set A long
.395b9a		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.395b9d		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395ba1		e2 20		sep #$20	                SEP #$20        ; set A short
.395ba3		a9 af		lda #$af	            LDA #`UART1_BASE
.395ba5		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395ba9		28		plp		            PLP
.395baa		6b		rtl		            RTL
.395bab						UART_SETBPS
.395bab		08		php		            PHP
.395bac		0b		phd		            PHD
.395bad		48		pha		                PHA             ; begin setdp macro
.395bae		08		php		                PHP
.395baf		c2 20		rep #$20	                REP #$20        ; set A long
.395bb1		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395bb4		5b		tcd		                TCD
.395bb5		28		plp		                PLP
.395bb6		68		pla		                PLA             ; end setdp macro
.395bb7		c2 30		rep #$30	                REP #$30        ; set A&X long
.395bb9		48		pha		            PHA
.395bba		e2 20		sep #$20	                SEP #$20        ; set A short
.395bbc		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395bbf		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395bc1		09 80		ora #$80	            ORA #LCR_DLB
.395bc3		97 00		sta [$0700],y	            STA [CURRUART],Y
.395bc5		c2 20		rep #$20	                REP #$20        ; set A long
.395bc7		68		pla		            PLA
.395bc8		a0 00 00	ldy #$0000	            LDY #UART_DLL
.395bcb		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395bcd		e2 20		sep #$20	                SEP #$20        ; set A short
.395bcf		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395bd2		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395bd4		49 80		eor #$80	            EOR #LCR_DLB
.395bd6		97 00		sta [$0700],y	            STA [CURRUART],Y
.395bd8		2b		pld		            PLD
.395bd9		28		plp		            PLP
.395bda		6b		rtl		            RTL
.395bdb						UART_SETLCR
.395bdb		08		php		            PHP
.395bdc		0b		phd		            PHD
.395bdd		48		pha		                PHA             ; begin setdp macro
.395bde		08		php		                PHP
.395bdf		c2 20		rep #$20	                REP #$20        ; set A long
.395be1		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395be4		5b		tcd		                TCD
.395be5		28		plp		                PLP
.395be6		68		pla		                PLA             ; end setdp macro
.395be7		e2 20		sep #$20	                SEP #$20        ; set A short
.395be9		c2 10		rep #$10	                REP #$10        ; set X long
.395beb		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395bed		a0 03 00	ldy #$0003	            LDY #UART_LCR
.395bf0		97 00		sta [$0700],y	            STA [CURRUART],Y
.395bf2		2b		pld		            PLD
.395bf3		28		plp		            PLP
.395bf4		6b		rtl		            RTL
.395bf5						UART_INIT
.395bf5		08		php		            PHP
.395bf6		0b		phd		            PHD
.395bf7		c2 30		rep #$30	                REP #$30        ; set A&X long
.395bf9		48		pha		                PHA             ; begin setdp macro
.395bfa		08		php		                PHP
.395bfb		c2 20		rep #$20	                REP #$20        ; set A long
.395bfd		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c00		5b		tcd		                TCD
.395c01		28		plp		                PLP
.395c02		68		pla		                PLA             ; end setdp macro
.395c03		a9 01 00	lda #$0001	            LDA #UART_115200
.395c06		22 ab 5b 39	jsl $395bab	            JSL UART_SETBPS
.395c0a		e2 20		sep #$20	                SEP #$20        ; set A short
.395c0c		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395c0e		22 db 5b 39	jsl $395bdb	            JSL UART_SETLCR
.395c12		a9 e1		lda #$e1	            LDA #%11100001
.395c14		a0 02 00	ldy #$0002	            LDY #UART_FCR
.395c17		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c19		2b		pld		            PLD
.395c1a		28		plp		            PLP
.395c1b		6b		rtl		            RTL
.395c1c						UART_HASBYT
.395c1c		08		php		            PHP
.395c1d		0b		phd		            PHD
.395c1e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c20		48		pha		                PHA             ; begin setdp macro
.395c21		08		php		                PHP
.395c22		c2 20		rep #$20	                REP #$20        ; set A long
.395c24		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c27		5b		tcd		                TCD
.395c28		28		plp		                PLP
.395c29		68		pla		                PLA             ; end setdp macro
.395c2a		e2 20		sep #$20	                SEP #$20        ; set A short
.395c2c		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c2f		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c31		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c33		d0 04		bne $395c39	            BNE ret_true            ; If flag is set, return true
.395c35		2b		pld		ret_false   PLD                     ; Return false
.395c36		28		plp		            PLP
.395c37		18		clc		            CLC
.395c38		6b		rtl		            RTL
.395c39		2b		pld		ret_true    PLD                     ; Return true
.395c3a		28		plp		            PLP
.395c3b		38		sec		            SEC
.395c3c		6b		rtl		            RTL
.395c3d						UART_GETC
.395c3d		08		php		            PHP
.395c3e		0b		phd		            PHD
.395c3f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c41		48		pha		                PHA             ; begin setdp macro
.395c42		08		php		                PHP
.395c43		c2 20		rep #$20	                REP #$20        ; set A long
.395c45		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c48		5b		tcd		                TCD
.395c49		28		plp		                PLP
.395c4a		68		pla		                PLA             ; end setdp macro
.395c4b		e2 20		sep #$20	                SEP #$20        ; set A short
.395c4d		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395c50		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395c52		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395c54		f0 fa		beq $395c50	            BEQ wait_getc           ; If the flag is clear, wait
.395c56		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395c59		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395c5b		2b		pld		            PLD
.395c5c		28		plp		            PLP
.395c5d		6b		rtl		            RTL
.395c5e						UART_PUTC
.395c5e		08		php		            PHP
.395c5f		0b		phd		            PHD
.395c60		c2 30		rep #$30	                REP #$30        ; set A&X long
.395c62		48		pha		                PHA             ; begin setdp macro
.395c63		08		php		                PHP
.395c64		c2 20		rep #$20	                REP #$20        ; set A long
.395c66		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395c69		5b		tcd		                TCD
.395c6a		28		plp		                PLP
.395c6b		68		pla		                PLA             ; end setdp macro
.395c6c		e2 20		sep #$20	                SEP #$20        ; set A short
.395c6e		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395c6f		a0 05 00	ldy #$0005	            LDY #UART_LSR
.395c72		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395c74		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395c76		f0 fa		beq $395c72	            BEQ wait_putc
.395c78		68		pla		            PLA
.395c79		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395c7c		97 00		sta [$0700],y	            STA [CURRUART],Y
.395c7e		2b		pld		            PLD
.395c7f		28		plp		            PLP
.395c80		6b		rtl		            RTL
.395c81						UART_PUTS
.395c81		08		php		            PHP
.395c82		e2 20		sep #$20	                SEP #$20        ; set A short
.395c84		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395c87		f0 07		beq $395c90	            BEQ done
.395c89		22 5e 5c 39	jsl $395c5e	            JSL UART_PUTC
.395c8d		e8		inx		            INX
.395c8e		80 f4		bra $395c84	            BRA put_loop
.395c90		28		plp		done        PLP
.395c91		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395c92						JOYSTICK_SET_NES_MODE
.395c92		e2 20		sep #$20	                SEP #$20        ; set A short
.395c94		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395c98		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395c9a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395c9e		6b		rtl		          RTL
.395c9f						JOYSTICK_SET_SNES_MODE
.395c9f		e2 20		sep #$20	                SEP #$20        ; set A short
.395ca1		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395ca5		29 fb		and #$fb	          AND #~NES_SNES_JOY
.395ca7		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395ca9		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cad		6b		rtl		          RTL
.395cae						JOYSTICK_ENABLE_NES_SNES_PORT0
.395cae		e2 20		sep #$20	                SEP #$20        ; set A short
.395cb0		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cb4		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395cb6		09 01		ora #$01	          ORA #NES_SNES_EN0
.395cb8		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cbc		6b		rtl		          RTL
.395cbd						JOYSTICK_ENABLE_NES_SNES_PORT1
.395cbd		e2 20		sep #$20	                SEP #$20        ; set A short
.395cbf		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cc3		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395cc5		09 02		ora #$02	          ORA #NES_SNES_EN1
.395cc7		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ccb		6b		rtl		          RTL
.395ccc						JOYSTICK_DISABLE_NES_SNES_PORT0
.395ccc		e2 20		sep #$20	                SEP #$20        ; set A short
.395cce		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cd2		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395cd4		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cd8		6b		rtl		          RTL
.395cd9						JOYSTICK_DISABLE_NES_SNES_PORT1
.395cd9		e2 20		sep #$20	                SEP #$20        ; set A short
.395cdb		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cdf		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395ce1		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ce5		6b		rtl		          RTL
.395ce6						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395ce6		e2 20		sep #$20	                SEP #$20        ; set A short
.395ce8		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cec		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395cee		c9 00		cmp #$00	          CMP #$00
.395cf0		f0 14		beq $395d06	          BEQ END_OF_JOYSTICK_POLL
.395cf2		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395cf6		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395cf8		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395cfc						JOYSTICK_POLLING_ISNOTOVER
.395cfc		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395d00		29 40		and #$40	          AND #NES_SNES_DONE
.395d02		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395d04		d0 f6		bne $395cfc	          BNE JOYSTICK_POLLING_ISNOTOVER
.395d06						END_OF_JOYSTICK_POLL
.395d06		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.395d07						SDC_TEST
.395d07		8b		phb		                PHB
.395d08		0b		phd		                PHD
.395d09		08		php		                PHP
.395d0a		48		pha		                PHA             ; begin setdbr macro
.395d0b		08		php		                PHP
.395d0c		e2 20		sep #$20	                SEP #$20        ; set A short
.395d0e		a9 00		lda #$00	                LDA #0
.395d10		48		pha		                PHA
.395d11		ab		plb		                PLB
.395d12		28		plp		                PLP
.395d13		68		pla		                PLA             ; end setdbr macro
.395d14		48		pha		                PHA             ; begin setdp macro
.395d15		08		php		                PHP
.395d16		c2 20		rep #$20	                REP #$20        ; set A long
.395d18		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d1b		5b		tcd		                TCD
.395d1c		28		plp		                PLP
.395d1d		68		pla		                PLA             ; end setdp macro
.395d1e		e2 20		sep #$20	                SEP #$20        ; set A short
.395d20		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395d22		8d 1e 00	sta $001e	                STA @w CURCOLOR
.395d25		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.395d29		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.395d2d		22 6d 5d 39	jsl $395d6d	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395d31		b0 03		bcs $395d36	                BCS init_ok
.395d33		82 15 00	brl $395d4b	                BRL done
.395d36		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395d38		85 01		sta $0321	                STA BIOS_DEV
.395d3a		22 75 43 39	jsl $394375	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395d3e		b0 03		bcs $395d43	                BCS mount_ok
.395d40		82 08 00	brl $395d4b	                BRL done
.395d43		22 2c 54 39	jsl $39542c	mount_ok        JSL IF_DIROPEN
.395d47		b0 02		bcs $395d4b	                BCS all_ok
.395d49		80 00		bra $395d4b	                BRA done
.395d4b						all_ok
.395d4b		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.395d4f		28		plp		                PLP
.395d50		2b		pld		                PLD
.395d51		ab		plb		                PLB
.395d52		6b		rtl		                RTL
.395d53						SDC_WAITBUSY
.395d53		08		php		                PHP
.395d54		e2 20		sep #$20	                SEP #$20        ; set A short
.395d56		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395d5a		29 01		and #$01	                AND #SDC_TRANS_BUSY
.395d5c		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395d5e		f0 f6		beq $395d56	                BEQ wait_xact
.395d60		28		plp		                PLP
.395d61		6b		rtl		                RTL
.395d62						SDC_RESET
.395d62		08		php		                PHP
.395d63		e2 20		sep #$20	                SEP #$20        ; set A short
.395d65		a9 01		lda #$01	                LDA #1
.395d67		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395d6b		28		plp		                PLP
.395d6c		6b		rtl		                RTL
.395d6d						SDC_INIT
.395d6d		0b		phd		                PHD
.395d6e		8b		phb		                PHB
.395d6f		08		php		                PHP
.395d70		48		pha		                PHA             ; begin setdbr macro
.395d71		08		php		                PHP
.395d72		e2 20		sep #$20	                SEP #$20        ; set A short
.395d74		a9 00		lda #$00	                LDA #0
.395d76		48		pha		                PHA
.395d77		ab		plb		                PLB
.395d78		28		plp		                PLP
.395d79		68		pla		                PLA             ; end setdbr macro
.395d7a		48		pha		                PHA             ; begin setdp macro
.395d7b		08		php		                PHP
.395d7c		c2 20		rep #$20	                REP #$20        ; set A long
.395d7e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d81		5b		tcd		                TCD
.395d82		28		plp		                PLP
.395d83		68		pla		                PLA             ; end setdp macro
.395d84		e2 20		sep #$20	                SEP #$20        ; set A short
.395d86		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395d8a		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395d8c		f0 04		beq $395d92	                BEQ start_trans                     ; Yes: start the transaction
.395d8e		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395d90		80 22		bra $395db4	                BRA set_error
.395d92		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.395d94		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395d98		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395d9a		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395d9e		22 53 5d 39	jsl $395d53	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395da2		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395da6		d0 07		bne $395daf	                BNE ret_error                       ; Is there one? Process the error
.395da8		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395daa		28		plp		                PLP
.395dab		ab		plb		                PLB
.395dac		2b		pld		                PLD
.395dad		38		sec		                SEC
.395dae		6b		rtl		                RTL
.395daf		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395db2		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395db4		85 00		sta $0320	set_error       STA BIOS_STATUS
.395db6		28		plp		                PLP
.395db7		ab		plb		                PLB
.395db8		2b		pld		                PLD
.395db9		18		clc		                CLC
.395dba		6b		rtl		                RTL
.395dbb						SDC_GETBLOCK
.395dbb		0b		phd		                PHD
.395dbc		8b		phb		                PHB
.395dbd		08		php		                PHP
.395dbe		48		pha		                PHA             ; begin setdbr macro
.395dbf		08		php		                PHP
.395dc0		e2 20		sep #$20	                SEP #$20        ; set A short
.395dc2		a9 00		lda #$00	                LDA #0
.395dc4		48		pha		                PHA
.395dc5		ab		plb		                PLB
.395dc6		28		plp		                PLP
.395dc7		68		pla		                PLA             ; end setdbr macro
.395dc8		48		pha		                PHA             ; begin setdp macro
.395dc9		08		php		                PHP
.395dca		c2 20		rep #$20	                REP #$20        ; set A long
.395dcc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395dcf		5b		tcd		                TCD
.395dd0		28		plp		                PLP
.395dd1		68		pla		                PLA             ; end setdp macro
.395dd2		e2 20		sep #$20	                SEP #$20        ; set A short
.395dd4		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395dd8		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395dda		f0 04		beq $395de0	                BEQ led_on                          ; Yes: turn on the LED
.395ddc		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395dde		80 71		bra $395e51	                BRA ret_error
.395de0		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395de4		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395de6		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395dea		a9 00		lda #$00	                LDA #0
.395dec		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395df0		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395df2		0a		asl a		                ASL A
.395df3		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395df7		a5 03		lda $0323	                LDA BIOS_LBA+1
.395df9		2a		rol a		                ROL A
.395dfa		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395dfe		a5 04		lda $0324	                LDA BIOS_LBA+2
.395e00		2a		rol a		                ROL A
.395e01		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395e05		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395e07		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395e0b		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395e0d		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395e11		22 53 5d 39	jsl $395d53	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395e15		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e19		d0 36		bne $395e51	                BNE ret_error                       ; Is there one? Process the error
.395e1b		e2 20		sep #$20	                SEP #$20        ; set A short
.395e1d		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395e21		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395e23		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395e27		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395e29		c2 10		rep #$10	                REP #$10        ; set X long
.395e2b		a0 00 00	ldy #$0000	                LDY #0
.395e2e		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395e32		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395e34		c8		iny		                INY                                 ; Advance to the next byte
.395e35		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395e38		d0 f4		bne $395e2e	                BNE loop_rd                         ; No: keep reading
.395e3a		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395e3e		d0 11		bne $395e51	                BNE ret_error                       ; Is there one? Process the error
.395e40		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395e42		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e46		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e48		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e4c		28		plp		                PLP
.395e4d		ab		plb		                PLB
.395e4e		2b		pld		                PLD
.395e4f		38		sec		                SEC
.395e50		6b		rtl		                RTL
.395e51		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395e53		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395e57		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395e59		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e5d		28		plp		                PLP
.395e5e		ab		plb		                PLB
.395e5f		2b		pld		                PLD
.395e60		18		clc		                CLC
.395e61		6b		rtl		                RTL
.395e62						SDC_PUTBLOCK
.395e62		0b		phd		                PHD
.395e63		8b		phb		                PHB
.395e64		08		php		                PHP
.395e65		48		pha		                PHA             ; begin setdbr macro
.395e66		08		php		                PHP
.395e67		e2 20		sep #$20	                SEP #$20        ; set A short
.395e69		a9 00		lda #$00	                LDA #0
.395e6b		48		pha		                PHA
.395e6c		ab		plb		                PLB
.395e6d		28		plp		                PLP
.395e6e		68		pla		                PLA             ; end setdbr macro
.395e6f		48		pha		                PHA             ; begin setdp macro
.395e70		08		php		                PHP
.395e71		c2 20		rep #$20	                REP #$20        ; set A long
.395e73		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395e76		5b		tcd		                TCD
.395e77		28		plp		                PLP
.395e78		68		pla		                PLA             ; end setdp macro
.395e79		e2 20		sep #$20	                SEP #$20        ; set A short
.395e7b		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395e7f		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395e81		f0 04		beq $395e87	                BEQ check_wp                        ; Yes: check for write protect
.395e83		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395e85		80 65		bra $395eec	                BRA ret_error
.395e87		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.395e89		f0 04		beq $395e8f	                BEQ led_on                          ; Yes: start the transaction
.395e8b		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.395e8d		80 5d		bra $395eec	                BRA ret_error
.395e8f		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395e93		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395e95		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395e99		c2 10		rep #$10	                REP #$10        ; set X long
.395e9b		a0 00 00	ldy #$0000	                LDY #0
.395e9e		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395ea0		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395ea4		c8		iny		                INY                                 ; Advance to the next byte
.395ea5		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395ea8		d0 f4		bne $395e9e	                BNE loop_wr                         ; No: keep writing
.395eaa		a9 00		lda #$00	                LDA #0
.395eac		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395eb0		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395eb2		0a		asl a		                ASL A
.395eb3		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395eb7		a5 03		lda $0323	                LDA BIOS_LBA+1
.395eb9		2a		rol a		                ROL A
.395eba		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395ebe		a5 04		lda $0324	                LDA BIOS_LBA+2
.395ec0		2a		rol a		                ROL A
.395ec1		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395ec5		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395ec7		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395ecb		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395ecd		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395ed1		22 53 5d 39	jsl $395d53	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395ed5		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395ed9		d0 11		bne $395eec	                BNE ret_error                       ; Is there one? Process the error
.395edb		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395edd		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ee1		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ee3		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ee7		28		plp		                PLP
.395ee8		ab		plb		                PLB
.395ee9		2b		pld		                PLD
.395eea		38		sec		                SEC
.395eeb		6b		rtl		                RTL
.395eec		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395eee		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ef2		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ef4		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395ef8		28		plp		                PLP
.395ef9		ab		plb		                PLB
.395efa		2b		pld		                PLD
.395efb		18		clc		                CLC
.395efc		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395efd						FDC_TEST
.395efd		8b		phb		                    PHB
.395efe		0b		phd		                    PHD
.395eff		08		php		                    PHP
.395f00		48		pha		                PHA             ; begin setdbr macro
.395f01		08		php		                PHP
.395f02		e2 20		sep #$20	                SEP #$20        ; set A short
.395f04		a9 00		lda #$00	                LDA #0
.395f06		48		pha		                PHA
.395f07		ab		plb		                PLB
.395f08		28		plp		                PLP
.395f09		68		pla		                PLA             ; end setdbr macro
.395f0a		48		pha		                PHA             ; begin setdp macro
.395f0b		08		php		                PHP
.395f0c		c2 20		rep #$20	                REP #$20        ; set A long
.395f0e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f11		5b		tcd		                TCD
.395f12		28		plp		                PLP
.395f13		68		pla		                PLA             ; end setdp macro
.395f14		e2 20		sep #$20	                SEP #$20        ; set A short
.395f16		a9 f0		lda #$f0	                    LDA #$F0
.395f18		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395f1b		22 2e 0b 39	jsl $390b2e	                    JSL ICLRSCREEN
.395f1f		22 52 09 39	jsl $390952	                    JSL ICSRHOME
.395f23		c2 30		rep #$30	                REP #$30        ; set A&X long
.395f25		22 f3 61 39	jsl $3961f3	                    JSL FDC_Init
.395f29		b0 03		bcs $395f2e	                    BCS init_ok
.395f2b		82 20 00	brl $395f4e	                    BRL motor_off
.395f2e		22 f2 68 39	jsl $3968f2	init_ok             JSL FDC_CHK_MEDIA
.395f32		90 03		bcc $395f37	                    BCC no_media
.395f34		82 03 00	brl $395f3a	                    BRL is_ok1
.395f37						no_media
.395f37		82 14 00	brl $395f4e	                    BRL motor_off
.395f3a		22 85 67 39	jsl $396785	is_ok1              JSL FDC_MOUNT
.395f3e		90 03		bcc $395f43	                    BCC mount_err
.395f40		82 03 00	brl $395f46	                    BRL is_ok2
.395f43						mount_err
.395f43		82 08 00	brl $395f4e	                    BRL motor_off
.395f46		22 5a 5f 39	jsl $395f5a	is_ok2              JSL FDC_TEST_PUTBLOCK
.395f4a		b0 02		bcs $395f4e	                    BCS all_ok
.395f4c		80 00		bra $395f4e	                    BRA motor_off
.395f4e						all_ok
.395f4e		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.395f52		22 a3 62 39	jsl $3962a3	                    JSL FDC_Motor_Off
.395f56		28		plp		                    PLP
.395f57		2b		pld		                    PLD
.395f58		ab		plb		                    PLB
.395f59		6b		rtl		                    RTL
.395f5a						FDC_TEST_PUTBLOCK
.395f5a		e2 20		sep #$20	                SEP #$20        ; set A short
.395f5c		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395f5e		a2 00 00	ldx #$0000	                    LDX #0
.395f61		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395f65		1a		inc a		                    INC A
.395f66		e8		inx		                    INX
.395f67		e0 00 02	cpx #$0200	                    CPX #512
.395f6a		d0 f5		bne $395f61	                    BNE init_loop
.395f6c		c2 20		rep #$20	                REP #$20        ; set A long
.395f6e		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395f71		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395f75		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395f78		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395f7c		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395f7f		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395f83		a9 00 00	lda #$0000	                    LDA #0
.395f86		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395f8a		22 19 67 39	jsl $396719	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395f8e		6b		rtl		                    RTL
>395f8f		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395f97		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395fa7		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395fab						FDC_Check_RQM
.395fab		0b		phd		                    PHD
.395fac		08		php		                    PHP
.395fad		48		pha		                PHA             ; begin setdp macro
.395fae		08		php		                PHP
.395faf		c2 20		rep #$20	                REP #$20        ; set A long
.395fb1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fb4		5b		tcd		                TCD
.395fb5		28		plp		                PLP
.395fb6		68		pla		                PLA             ; end setdp macro
.395fb7		e2 20		sep #$20	                SEP #$20        ; set A short
.395fb9		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fbb		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.395fbf		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fc1		30 12		bmi $395fd5	                    BMI time_out            ; If so: signal a time out
.395fc3		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395fc7		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395fc9		f0 f4		beq $395fbf	                    BEQ loop
.395fcb		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395fcd		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.395fd1		28		plp		                    PLP
.395fd2		2b		pld		                    PLD
.395fd3		38		sec		                    SEC
.395fd4		60		rts		                    RTS
.395fd5		28		plp		time_out            PLP
.395fd6		2b		pld		                    PLD
.395fd7		18		clc		                    CLC
.395fd8		60		rts		                    RTS
.395fd9						FDC_Check_DRV0_BSY
.395fd9		0b		phd		                    PHD
.395fda		08		php		                    PHP
.395fdb		48		pha		                PHA             ; begin setdp macro
.395fdc		08		php		                PHP
.395fdd		c2 20		rep #$20	                REP #$20        ; set A long
.395fdf		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fe2		5b		tcd		                TCD
.395fe3		28		plp		                PLP
.395fe4		68		pla		                PLA             ; end setdp macro
.395fe5		e2 20		sep #$20	                SEP #$20        ; set A short
.395fe7		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395fe9		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.395fed		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395fef		30 12		bmi $396003	                    BMI time_out            ; If so: signal a time out
.395ff1		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395ff5		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395ff7		d0 f4		bne $395fed	                    BNE loop
.395ff9		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395ffb		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.395fff		28		plp		                    PLP
.396000		2b		pld		                    PLD
.396001		38		sec		                    SEC
.396002		60		rts		                    RTS
.396003		28		plp		time_out            PLP
.396004		2b		pld		                    PLD
.396005		18		clc		                    CLC
.396006		60		rts		                    RTS
.396007						FDC_Check_CMD_BSY
.396007		0b		phd		                    PHD
.396008		08		php		                    PHP
.396009		48		pha		                PHA             ; begin setdp macro
.39600a		08		php		                PHP
.39600b		c2 20		rep #$20	                REP #$20        ; set A long
.39600d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396010		5b		tcd		                TCD
.396011		28		plp		                PLP
.396012		68		pla		                PLA             ; end setdp macro
.396013		e2 20		sep #$20	                SEP #$20        ; set A short
.396015		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396017		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.39601b		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.39601d		30 12		bmi $396031	                    BMI time_out            ; If so: signal a time out
.39601f		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396023		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396025		d0 f4		bne $39601b	                    BNE loop
.396027		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396029		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.39602d		28		plp		                    PLP
.39602e		2b		pld		                    PLD
.39602f		38		sec		                    SEC
.396030		60		rts		                    RTS
.396031		28		plp		time_out            PLP
.396032		2b		pld		                    PLD
.396033		18		clc		                    CLC
.396034		60		rts		                    RTS
.396035						FDC_Can_Read_Data
.396035		0b		phd		                    PHD
.396036		08		php		                    PHP
.396037		48		pha		                PHA             ; begin setdp macro
.396038		08		php		                PHP
.396039		c2 20		rep #$20	                REP #$20        ; set A long
.39603b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39603e		5b		tcd		                TCD
.39603f		28		plp		                PLP
.396040		68		pla		                PLA             ; end setdp macro
.396041		e2 20		sep #$20	                SEP #$20        ; set A short
.396043		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396045		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.396049		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.39604b		30 14		bmi $396061	                    BMI time_out            ; If so: signal a time out
.39604d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396051		29 40		and #$40	                    AND #FDC_MSR_DIO
.396053		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.396055		d0 f2		bne $396049	                    BNE loop
.396057		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396059		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.39605d		28		plp		                    PLP
.39605e		2b		pld		                    PLD
.39605f		38		sec		                    SEC
.396060		60		rts		                    RTS
.396061		28		plp		time_out            PLP
.396062		2b		pld		                    PLD
.396063		18		clc		                    CLC
.396064		60		rts		                    RTS
.396065						FDC_CAN_WRITE
.396065		0b		phd		                    PHD
.396066		08		php		                    PHP
.396067		48		pha		                PHA             ; begin setdp macro
.396068		08		php		                PHP
.396069		c2 20		rep #$20	                REP #$20        ; set A long
.39606b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39606e		5b		tcd		                TCD
.39606f		28		plp		                PLP
.396070		68		pla		                PLA             ; end setdp macro
.396071		e2 20		sep #$20	                SEP #$20        ; set A short
.396073		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.396075		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.396079		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.39607b		30 14		bmi $396091	                    BMI time_out            ; If so: signal a time out
.39607d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.396081		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396083		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.396085		d0 f2		bne $396079	                    BNE loop
.396087		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.396089		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.39608d		28		plp		                    PLP
.39608e		2b		pld		                    PLD
.39608f		38		sec		                    SEC
.396090		60		rts		                    RTS
.396091		28		plp		time_out            PLP
.396092		2b		pld		                    PLD
.396093		18		clc		                    CLC
.396094		60		rts		                    RTS
.396095						FDC_DELAY_10MS
.396095		da		phx		                    PHX
.396096		08		php		                    PHP
.396097		c2 10		rep #$10	                REP #$10        ; set X long
.396099		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.39609c		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.39609d		ca		dex		                    DEX
.39609e		e0 00 00	cpx #$0000	                    CPX #0
.3960a1		d0 f9		bne $39609c	                    BNE loop
.3960a3		28		plp		                    PLP
.3960a4		fa		plx		                    PLX
.3960a5		6b		rtl		                    RTL
.3960a6						FDC_COMMAND
.3960a6		da		phx		                    PHX
.3960a7		8b		phb		                    PHB
.3960a8		0b		phd		                    PHD
.3960a9		08		php		                    PHP
.3960aa		48		pha		                PHA             ; begin setdbr macro
.3960ab		08		php		                PHP
.3960ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3960ae		a9 00		lda #$00	                LDA #0
.3960b0		48		pha		                PHA
.3960b1		ab		plb		                PLB
.3960b2		28		plp		                PLP
.3960b3		68		pla		                PLA             ; end setdbr macro
.3960b4		48		pha		                PHA             ; begin setdp macro
.3960b5		08		php		                PHP
.3960b6		c2 20		rep #$20	                REP #$20        ; set A long
.3960b8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960bb		5b		tcd		                TCD
.3960bc		28		plp		                PLP
.3960bd		68		pla		                PLA             ; end setdp macro
.3960be		22 95 60 39	jsl $396095	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.3960c2		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3960c4		a2 00		ldx #$00	                    LDX #0
.3960c6		a9 00		lda #$00	                    LDA #0
.3960c8		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.3960cb		e8		inx		                    INX
.3960cc		e0 10		cpx #$10	                    CPX #16
.3960ce		d0 f8		bne $3960c8	                    BNE clr_results
.3960d0		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.3960d4		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3960d6		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3960d8		f0 04		beq $3960de	                    BEQ start_send                          ; If so, start sending
.3960da		22 f3 61 39	jsl $3961f3	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.3960de						start_send
.3960de		e2 10		sep #$10	                SEP #$10        ; set X short
.3960e0		a2 00		ldx #$00	                    LDX #0
.3960e2		20 ab 5f	jsr $395fab	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.3960e5		b0 03		bcs $3960ea	                    BCS send_param
.3960e7		82 5e 00	brl $396148	                    BRL time_out                            ; If there was a timeout, flag the time out
.3960ea		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.3960ed		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.3960f1		22 95 60 39	jsl $396095	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.3960f5		e8		inx		                    INX                                     ; Advance to the next byte
.3960f6		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.3960f9		d0 e7		bne $3960e2	                    BNE send_loop                           ; Keep sending until we've sent them all
.3960fb		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.3960fe		d0 03		bne $396103	                    BNE chk_data_dir
.396100		82 80 00	brl $396183	                    BRL result_phase                        ; If 0: we just want a result
.396103		10 3c		bpl $396141	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.396105						wr_data
.396105		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396107		30 03		bmi $39610c	                    BMI wr_chk_rqm
.396109		82 3c 00	brl $396148	                    BRL time_out                            ; If not, raise an error
.39610c		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.396110		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.396112		f0 f1		beq $396105	                    BEQ wr_data_rdy
.396114		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.396116		d0 03		bne $39611b	                    BNE wr_data_phase                       ; If so: transfer the data
.396118		82 68 00	brl $396183	                    BRL result_phase                          ; If not: it's an error
.39611b						wr_data_phase
.39611b		c2 10		rep #$10	                REP #$10        ; set X long
.39611d		a0 00 00	ldy #$0000	                    LDY #0
.396120		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.396122		30 03		bmi $396127	                    BMI wr_chk_nondma
.396124		82 21 00	brl $396148	                    BRL time_out                            ; If not, raise an error
.396127		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.39612b		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.39612d		f0 54		beq $396183	                    BEQ result_phase                        ; If not: break out to result phase
.39612f		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.396131		f0 ed		beq $396120	                    BEQ wr_data_loop                        ; No: keep waiting
.396133		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.396135		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.396139		c8		iny		                    INY                                     ; Move to the next position
.39613a		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.39613d		d0 e1		bne $396120	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.39613f		80 42		bra $396183	                    BRA result_phase                        ; ready for the result phase
.396141		20 35 60	jsr $396035	rd_data             JSR FDC_Can_Read_Data
.396144		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.396146		30 07		bmi $39614f	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.396148						time_out
.396148		e2 20		sep #$20	                SEP #$20        ; set A short
.39614a		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.39614c		82 9c 00	brl $3961eb	                    BRL pass_error
.39614f		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.396153		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396155		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.396157		d0 eb		bne $396144	                    BNE rd_data_rdy
.396159		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.39615d		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.39615f		d0 03		bne $396164	                    BNE rd_data_phase                       ; If so: transfer the data
.396161		82 83 00	brl $3961e7	                    BRL error                               ; If not: it's an error
.396164						rd_data_phase
.396164		c2 10		rep #$10	                REP #$10        ; set X long
.396166		a0 00 00	ldy #$0000	                    LDY #0
.396169		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39616b		10 db		bpl $396148	                    BPL time_out                            ; If not: throw a timeout error
.39616d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.396171		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396173		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.396175		d0 f2		bne $396169	                    BNE rd_data_loop
.396177		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.39617b		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.39617d		c8		iny		                    INY                                     ; Move to the next position
.39617e		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396181		d0 e6		bne $396169	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.396183		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.396186		f0 34		beq $3961bc	                    BEQ chk_busy                            ; Then we're done
.396188		e2 10		sep #$10	                SEP #$10        ; set X short
.39618a		a2 00		ldx #$00	                    LDX #0
.39618c		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.39618e		22 24 3f 39	jsl $393f24	                    JSL ISETTIMEOUT
.396192		20 35 60	jsr $396035	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.396195		90 b1		bcc $396148	                    BCC time_out                            ; If there was a time out, raise an error
.396197		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.39619b		20 35 60	jsr $396035	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.39619e		90 a8		bcc $396148	                    BCC time_out                            ; If there was a time out, raise an error
.3961a0		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.3961a4		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.3961a7		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM
.3961aa		90 9c		bcc $396148	                    BCC time_out                            ; If there was a time out, flag the error
.3961ac		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.3961b0		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3961b2		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3961b4		d0 06		bne $3961bc	                    BNE chk_busy
.3961b6		e8		inx		                    INX                                     ; Move to the next result positions
.3961b7		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.3961ba		d0 e4		bne $3961a0	                    BNE read_result                         ; And keep looping until we've read all
.3961bc						chk_busy
.3961bc		c2 10		rep #$10	                REP #$10        ; set X long
.3961be		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.3961c1		22 3a 14 39	jsl $39143a	                    JSL ILOOP_MS
.3961c5		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.3961c9		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.3961cb		f0 12		beq $3961df	                    BEQ done                                ; If not set: we're done
.3961cd		20 35 60	jsr $396035	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3961d0		b0 03		bcs $3961d5	                    BCS get_result_byte
.3961d2		82 73 ff	brl $396148	                    BRL time_out                            ; If there was a time out, flag the error
.3961d5		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.3961d9		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.3961dc		e8		inx		                    INX
.3961dd		80 dd		bra $3961bc	                    BRA chk_busy                            ; And keep checking
.3961df						done
.3961df		64 20		stz $0320	                    STZ BIOS_STATUS
.3961e1		28		plp		                    PLP
.3961e2		2b		pld		                    PLD
.3961e3		ab		plb		                    PLB
.3961e4		fa		plx		                    PLX
.3961e5		38		sec		                    SEC
.3961e6		6b		rtl		                    RTL
.3961e7						error
.3961e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3961e9		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.3961eb		85 20		sta $0320	pass_error          STA BIOS_STATUS
.3961ed		28		plp		                    PLP
.3961ee		2b		pld		                    PLD
.3961ef		ab		plb		                    PLB
.3961f0		fa		plx		                    PLX
.3961f1		18		clc		                    CLC
.3961f2		6b		rtl		                    RTL
.3961f3						FDC_Init
.3961f3		08		php		                    PHP
.3961f4		c2 10		rep #$10	                REP #$10        ; set X long
.3961f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3961f8		a9 00		lda #$00	                    LDA #0
.3961fa		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3961fe		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.396201		a0 00 00	ldy #$0000	                    LDY #0
.396204		22 47 14 39	jsl $391447	                    JSL IDELAY
.396208		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.39620a		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.39620e		ea		nop		                    NOP
.39620f		ea		nop		                    NOP
.396210		ea		nop		                    NOP
.396211		ea		nop		                    NOP
.396212		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.396214		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.396218		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.39621a		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.39621e		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.396221		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.396224		22 47 14 39	jsl $391447	                    JSL IDELAY
.396228		22 03 63 39	jsl $396303	                    JSL FDC_Sense_Int_Status
.39622c		90 25		bcc $396253	                    BCC pass_failure
.39622e		22 03 63 39	jsl $396303	                    JSL FDC_Sense_Int_Status
.396232		90 1f		bcc $396253	                    BCC pass_failure
.396234		22 03 63 39	jsl $396303	                    JSL FDC_Sense_Int_Status
.396238		90 19		bcc $396253	                    BCC pass_failure
.39623a		22 03 63 39	jsl $396303	                    JSL FDC_Sense_Int_Status
.39623e		90 13		bcc $396253	                    BCC pass_failure
.396240		22 c5 63 39	jsl $3963c5	                    JSL FDC_Configure_Command
.396244		90 0d		bcc $396253	                    BCC pass_failure
.396246		22 6c 63 39	jsl $39636c	                    JSL FDC_Specify_Command
.39624a		90 07		bcc $396253	                    BCC pass_failure
.39624c		22 6f 62 39	jsl $39626f	                    JSL FDC_Motor_On
.396250		28		plp		                    PLP
.396251		38		sec		                    SEC
.396252		6b		rtl		                    RTL
.396253		28		plp		pass_failure        PLP
.396254		18		clc		                    CLC
.396255		6b		rtl		                    RTL
.396256						FDC_MOTOR_NEEDED
.396256		08		php		                    PHP
.396257		c2 20		rep #$20	                REP #$20        ; set A long
.396259		78		sei		                    SEI                         ; Turn off interrupts
.39625a		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.39625d		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396261		e2 20		sep #$20	                SEP #$20        ; set A short
.396263		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.396267		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.396269		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.39626d		28		plp		                    PLP
.39626e		6b		rtl		                    RTL
.39626f						FDC_Motor_On
.39626f		08		php		                    PHP
.396270		22 56 62 39	jsl $396256	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396274		e2 20		sep #$20	                SEP #$20        ; set A short
.396276		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.39627a		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.39627c		d0 1f		bne $39629d	                    BNE done                    ; If so: skip
.39627e		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.396280		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396284		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.396287		90 17		bcc $3962a0	                    BCC time_out
.396289		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.39628c		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39628f		22 47 14 39	jsl $391447	                    JSL IDELAY
.396293		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.396297		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.396299		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.39629d		28		plp		done                PLP
.39629e		38		sec		                    SEC
.39629f		6b		rtl		                    RTL
.3962a0		28		plp		time_out            PLP                         ; Return a timeout error
.3962a1		18		clc		                    CLC
.3962a2		6b		rtl		                    RTL
.3962a3						FDC_Motor_Off
.3962a3		08		php		                    PHP
.3962a4		e2 20		sep #$20	                SEP #$20        ; set A short
.3962a6		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.3962a8		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.3962ac		c2 20		rep #$20	                REP #$20        ; set A long
.3962ae		78		sei		                    SEI                         ; Turn off interrupts
.3962af		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.3962b2		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3962b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3962b8		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3962bc		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.3962be		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3962c2		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3962c6		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.3962c8		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3962cc		28		plp		                    PLP
.3962cd		6b		rtl		                    RTL
.3962ce						FDC_Recalibrate_Command
.3962ce		0b		phd		                    PHD
.3962cf		08		php		                    PHP
.3962d0		48		pha		                PHA             ; begin setdp macro
.3962d1		08		php		                PHP
.3962d2		c2 20		rep #$20	                REP #$20        ; set A long
.3962d4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962d7		5b		tcd		                TCD
.3962d8		28		plp		                PLP
.3962d9		68		pla		                PLA             ; end setdp macro
.3962da		22 56 62 39	jsl $396256	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3962de		e2 20		sep #$20	                SEP #$20        ; set A short
.3962e0		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.3962e2		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962e5		a5 00		lda $0300	                    LDA FDC_DRIVE
.3962e7		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3962ea		a9 02		lda #$02	                    LDA #2
.3962ec		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.3962ef		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.3962f2		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.3962f5		22 a6 60 39	jsl $3960a6	                    JSL FDC_COMMAND             ; Issue the command
.3962f9		90 04		bcc $3962ff	                    BCC pass_failure            ; If failure, pass the failure up
.3962fb		28		plp		                    PLP
.3962fc		2b		pld		                    PLD
.3962fd		38		sec		                    SEC
.3962fe		6b		rtl		                    RTL
.3962ff		28		plp		pass_failure        PLP
.396300		2b		pld		                    PLD
.396301		18		clc		                    CLC
.396302		6b		rtl		                    RTL
.396303						FDC_Sense_Int_Status
.396303		8b		phb		                    PHB
.396304		0b		phd		                    PHD
.396305		08		php		                    PHP
.396306		48		pha		                PHA             ; begin setdbr macro
.396307		08		php		                PHP
.396308		e2 20		sep #$20	                SEP #$20        ; set A short
.39630a		a9 00		lda #$00	                LDA #0
.39630c		48		pha		                PHA
.39630d		ab		plb		                PLB
.39630e		28		plp		                PLP
.39630f		68		pla		                PLA             ; end setdbr macro
.396310		48		pha		                PHA             ; begin setdp macro
.396311		08		php		                PHP
.396312		c2 20		rep #$20	                REP #$20        ; set A long
.396314		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396317		5b		tcd		                TCD
.396318		28		plp		                PLP
.396319		68		pla		                PLA             ; end setdp macro
.39631a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39631c		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.39631f		22 3a 14 39	jsl $39143a	                    JSL ILOOP_MS
.396323		e2 20		sep #$20	                SEP #$20        ; set A short
.396325		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.396327		a9 ff		lda #$ff	                    LDA #$FF
.396329		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.39632b		20 07 60	jsr $396007	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.39632e		90 30		bcc $396360	                    BCC time_out                        ; If there was a time out, raise an error
.396330		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396333		90 2b		bcc $396360	                    BCC time_out                        ; If there was a time out, raise an error
.396335		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.396337		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39633b		20 35 60	jsr $396035	                    JSR FDC_Can_Read_Data
.39633e		90 20		bcc $396360	                    BCC time_out                        ; If there was a time out, raise an error
.396340		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.396343		90 1b		bcc $396360	                    BCC time_out                        ; If there was a time out, raise an error
.396345		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396349		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.39634b		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.39634e		90 10		bcc $396360	                    BCC time_out                        ; If there was a time out, raise an error
.396350		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.396354		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.396356		e2 20		sep #$20	                SEP #$20        ; set A short
.396358		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.39635b		28		plp		                    PLP
.39635c		2b		pld		                    PLD
.39635d		ab		plb		                    PLB
.39635e		38		sec		                    SEC
.39635f		6b		rtl		                    RTL
.396360						time_out
.396360		e2 20		sep #$20	                SEP #$20        ; set A short
.396362		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.396364		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396367		28		plp		                    PLP
.396368		2b		pld		                    PLD
.396369		ab		plb		                    PLB
.39636a		18		clc		                    CLC
.39636b		6b		rtl		                    RTL
.39636c						FDC_Specify_Command
.39636c		8b		phb		                    PHB
.39636d		0b		phd		                    PHD
.39636e		08		php		                    PHP
.39636f		48		pha		                PHA             ; begin setdbr macro
.396370		08		php		                PHP
.396371		e2 20		sep #$20	                SEP #$20        ; set A short
.396373		a9 00		lda #$00	                LDA #0
.396375		48		pha		                PHA
.396376		ab		plb		                PLB
.396377		28		plp		                PLP
.396378		68		pla		                PLA             ; end setdbr macro
.396379		48		pha		                PHA             ; begin setdp macro
.39637a		08		php		                PHP
.39637b		c2 20		rep #$20	                REP #$20        ; set A long
.39637d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396380		5b		tcd		                TCD
.396381		28		plp		                PLP
.396382		68		pla		                PLA             ; end setdp macro
.396383		c2 30		rep #$30	                REP #$30        ; set A&X long
.396385		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396388		22 3a 14 39	jsl $39143a	                    JSL ILOOP_MS
.39638c		e2 20		sep #$20	                SEP #$20        ; set A short
.39638e		20 07 60	jsr $396007	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396391		90 26		bcc $3963b9	                    BCC time_out            ; If there was a time out, raise an error
.396393		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396396		90 21		bcc $3963b9	                    BCC time_out            ; If there was a time out, raise an error
.396398		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.39639a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39639e		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963a1		90 16		bcc $3963b9	                    BCC time_out            ; If there was a time out, raise an error
.3963a3		a9 cf		lda #$cf	                    LDA #$CF
.3963a5		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963a9		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963ac		90 0b		bcc $3963b9	                    BCC time_out            ; If there was a time out, raise an error
.3963ae		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.3963b0		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963b4		28		plp		                    PLP
.3963b5		2b		pld		                    PLD
.3963b6		ab		plb		                    PLB
.3963b7		38		sec		                    SEC
.3963b8		6b		rtl		                    RTL
.3963b9						time_out
.3963b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3963bb		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3963bd		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3963c0		28		plp		                    PLP
.3963c1		2b		pld		                    PLD
.3963c2		ab		plb		                    PLB
.3963c3		18		clc		                    CLC
.3963c4		6b		rtl		                    RTL
.3963c5						FDC_Configure_Command
.3963c5		8b		phb		                    PHB
.3963c6		0b		phd		                    PHD
.3963c7		08		php		                    PHP
.3963c8		48		pha		                PHA             ; begin setdbr macro
.3963c9		08		php		                PHP
.3963ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3963cc		a9 00		lda #$00	                LDA #0
.3963ce		48		pha		                PHA
.3963cf		ab		plb		                PLB
.3963d0		28		plp		                PLP
.3963d1		68		pla		                PLA             ; end setdbr macro
.3963d2		48		pha		                PHA             ; begin setdp macro
.3963d3		08		php		                PHP
.3963d4		c2 20		rep #$20	                REP #$20        ; set A long
.3963d6		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963d9		5b		tcd		                TCD
.3963da		28		plp		                PLP
.3963db		68		pla		                PLA             ; end setdp macro
.3963dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3963de		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.3963e1		22 3a 14 39	jsl $39143a	                    JSL ILOOP_MS
.3963e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3963e7		20 07 60	jsr $396007	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3963ea		90 36		bcc $396422	                    BCC time_out            ; If there was a time out, raise an error
.3963ec		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963ef		90 31		bcc $396422	                    BCC time_out            ; If there was a time out, raise an error
.3963f1		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.3963f3		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3963f7		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3963fa		90 26		bcc $396422	                    BCC time_out            ; If there was a time out, raise an error
.3963fc		a9 00		lda #$00	                    LDA #$00
.3963fe		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396402		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396405		90 1b		bcc $396422	                    BCC time_out            ; If there was a time out, raise an error
.396407		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.396409		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39640d		20 ab 5f	jsr $395fab	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396410		90 10		bcc $396422	                    BCC time_out            ; If there was a time out, raise an error
.396412		a9 00		lda #$00	                    LDA #$00
.396414		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396418		20 07 60	jsr $396007	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.39641b		90 05		bcc $396422	                    BCC time_out            ; If there was a time out, raise an error
.39641d		28		plp		                    PLP
.39641e		2b		pld		                    PLD
.39641f		ab		plb		                    PLB
.396420		38		sec		                    SEC
.396421		6b		rtl		                    RTL
.396422						time_out
.396422		e2 20		sep #$20	                SEP #$20        ; set A short
.396424		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396426		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396429		28		plp		                    PLP
.39642a		2b		pld		                    PLD
.39642b		ab		plb		                    PLB
.39642c		18		clc		                    CLC
.39642d		6b		rtl		                    RTL
.39642e						FDC_Read_ID_Command
.39642e		8b		phb		                    PHB
.39642f		0b		phd		                    PHD
.396430		08		php		                    PHP
.396431		48		pha		                PHA             ; begin setdbr macro
.396432		08		php		                PHP
.396433		e2 20		sep #$20	                SEP #$20        ; set A short
.396435		a9 00		lda #$00	                LDA #0
.396437		48		pha		                PHA
.396438		ab		plb		                PLB
.396439		28		plp		                PLP
.39643a		68		pla		                PLA             ; end setdbr macro
.39643b		48		pha		                PHA             ; begin setdp macro
.39643c		08		php		                PHP
.39643d		c2 20		rep #$20	                REP #$20        ; set A long
.39643f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396442		5b		tcd		                TCD
.396443		28		plp		                PLP
.396444		68		pla		                PLA             ; end setdp macro
.396445		e2 20		sep #$20	                SEP #$20        ; set A short
.396447		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.396449		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39644c		a9 01		lda #$01	                    LDA #1
.39644e		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396451		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396454		a9 07		lda #$07	                    LDA #7
.396456		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396459		22 a6 60 39	jsl $3960a6	                    JSL FDC_COMMAND                     ; Issue the command
.39645d		90 27		bcc $396486	                    BCC pass_failure
.39645f		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.396462		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.396464		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396467		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.396469		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39646c		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.39646e		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396471		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.396473		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396476		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.396478		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39647b		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.39647d		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396480		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.396482		28		plp		                    PLP
.396483		2b		pld		                    PLD
.396484		ab		plb		                    PLB
.396485		6b		rtl		                    RTL
.396486		28		plp		pass_failure        PLP
.396487		2b		pld		                    PLD
.396488		ab		plb		                    PLB
.396489		18		clc		                    CLC
.39648a		6b		rtl		                    RTL
.39648b						FDC_DumpReg_Command
.39648b		0b		phd		                    PHD
.39648c		08		php		                    PHP
.39648d		e2 20		sep #$20	                SEP #$20        ; set A short
.39648f		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.396491		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396494		a9 01		lda #$01	                    LDA #1
.396496		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396499		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39649c		a9 0a		lda #$0a	                    LDA #10
.39649e		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.3964a1		22 a6 60 39	jsl $3960a6	                    JSL FDC_COMMAND                     ; Issue the command
.3964a5		90 03		bcc $3964aa	                    BCC pass_failure
.3964a7		28		plp		                    PLP
.3964a8		2b		pld		                    PLD
.3964a9		6b		rtl		                    RTL
.3964aa		28		plp		pass_failure        PLP
.3964ab		2b		pld		                    PLD
.3964ac		18		clc		                    CLC
.3964ad		6b		rtl		                    RTL
.3964ae						FDC_Seek_Track
.3964ae		8b		phb		                    PHB
.3964af		0b		phd		                    PHD
.3964b0		08		php		                    PHP
.3964b1		48		pha		                PHA             ; begin setdbr macro
.3964b2		08		php		                PHP
.3964b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3964b5		a9 00		lda #$00	                LDA #0
.3964b7		48		pha		                PHA
.3964b8		ab		plb		                PLB
.3964b9		28		plp		                PLP
.3964ba		68		pla		                PLA             ; end setdbr macro
.3964bb		48		pha		                PHA             ; begin setdp macro
.3964bc		08		php		                PHP
.3964bd		c2 20		rep #$20	                REP #$20        ; set A long
.3964bf		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964c2		5b		tcd		                TCD
.3964c3		28		plp		                PLP
.3964c4		68		pla		                PLA             ; end setdp macro
.3964c5		22 56 62 39	jsl $396256	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3964c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3964cb		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.3964cd		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3964d0		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3964d2		29 01		and #$01	                    AND #$01
.3964d4		0a		asl a		                    ASL A
.3964d5		0a		asl a		                    ASL A
.3964d6		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3964d8		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3964db		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.3964dd		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3964e0		a9 03		lda #$03	                    LDA #3
.3964e2		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.3964e5		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3964e8		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.3964eb		22 a6 60 39	jsl $3960a6	                    JSL FDC_COMMAND                     ; Issue the command
.3964ef		90 05		bcc $3964f6	                    BCC pass_failure
.3964f1		28		plp		                    PLP
.3964f2		2b		pld		                    PLD
.3964f3		ab		plb		                    PLB
.3964f4		38		sec		                    SEC
.3964f5		6b		rtl		                    RTL
.3964f6		28		plp		pass_failure        PLP
.3964f7		2b		pld		                    PLD
.3964f8		ab		plb		                    PLB
.3964f9		18		clc		                    CLC
.3964fa		6b		rtl		                    RTL
.3964fb						FDC_Read_Sector
.3964fb		8b		phb		                    PHB
.3964fc		0b		phd		                    PHD
.3964fd		08		php		                    PHP
.3964fe		48		pha		                PHA             ; begin setdbr macro
.3964ff		08		php		                PHP
.396500		e2 20		sep #$20	                SEP #$20        ; set A short
.396502		a9 00		lda #$00	                LDA #0
.396504		48		pha		                PHA
.396505		ab		plb		                PLB
.396506		28		plp		                PLP
.396507		68		pla		                PLA             ; end setdbr macro
.396508		48		pha		                PHA             ; begin setdp macro
.396509		08		php		                PHP
.39650a		c2 20		rep #$20	                REP #$20        ; set A long
.39650c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39650f		5b		tcd		                TCD
.396510		28		plp		                PLP
.396511		68		pla		                PLA             ; end setdp macro
.396512		22 56 62 39	jsl $396256	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396516		e2 20		sep #$20	                SEP #$20        ; set A short
.396518		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.39651a		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.39651c		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39651f		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396521		29 01		and #$01	                    AND #$01
.396523		0a		asl a		                    ASL A
.396524		0a		asl a		                    ASL A
.396525		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396527		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39652a		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.39652c		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39652f		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.396531		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396534		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396536		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396539		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.39653b		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39653e		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.396540		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.396543		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396545		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396548		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.39654a		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.39654d		a9 09		lda #$09	                    LDA #9
.39654f		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.396552		a9 01		lda #$01	                    LDA #1
.396554		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.396557		a9 07		lda #$07	                    LDA #7
.396559		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.39655c		22 a6 60 39	jsl $3960a6	command             JSL FDC_COMMAND                     ; Issue the command
.396560		08		php		                    PHP
.396561		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396564		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.396566		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396569		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.39656b		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.39656e		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.396570		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396573		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.396575		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.396578		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.39657a		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.39657d		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.39657f		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396582		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396584		28		plp		                    PLP
.396585		90 04		bcc $39658b	                    BCC pass_failure
.396587		28		plp		done                PLP
.396588		2b		pld		                    PLD
.396589		ab		plb		                    PLB
.39658a		6b		rtl		                    RTL
.39658b		28		plp		pass_failure        PLP
.39658c		2b		pld		                    PLD
.39658d		ab		plb		                    PLB
.39658e		18		clc		                    CLC
.39658f		6b		rtl		                    RTL
.396590						FDC_Write_Sector
.396590		8b		phb		                    PHB
.396591		0b		phd		                    PHD
.396592		08		php		                    PHP
.396593		48		pha		                PHA             ; begin setdbr macro
.396594		08		php		                PHP
.396595		e2 20		sep #$20	                SEP #$20        ; set A short
.396597		a9 00		lda #$00	                LDA #0
.396599		48		pha		                PHA
.39659a		ab		plb		                PLB
.39659b		28		plp		                PLP
.39659c		68		pla		                PLA             ; end setdbr macro
.39659d		48		pha		                PHA             ; begin setdp macro
.39659e		08		php		                PHP
.39659f		c2 20		rep #$20	                REP #$20        ; set A long
.3965a1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965a4		5b		tcd		                TCD
.3965a5		28		plp		                PLP
.3965a6		68		pla		                PLA             ; end setdp macro
.3965a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3965a9		22 56 62 39	jsl $396256	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3965ad		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.3965af		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3965b1		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3965b4		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3965b6		29 01		and #$01	                    AND #$01
.3965b8		0a		asl a		                    ASL A
.3965b9		0a		asl a		                    ASL A
.3965ba		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3965bc		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3965bf		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3965c1		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3965c4		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3965c6		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3965c9		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3965cb		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3965ce		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3965d0		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3965d3		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3965d5		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3965d8		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3965da		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3965dd		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3965df		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.3965e2		a9 09		lda #$09	                    LDA #9
.3965e4		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3965e7		a9 ff		lda #$ff	                    LDA #$FF
.3965e9		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.3965ec		a9 07		lda #$07	                    LDA #7
.3965ee		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3965f1		22 a6 60 39	jsl $3960a6	command             JSL FDC_COMMAND                     ; Issue the command
.3965f5		08		php		                    PHP
.3965f6		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3965f9		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3965fb		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3965fe		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.396600		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396603		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.396605		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396608		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.39660a		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39660d		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.39660f		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396612		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396614		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396617		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396619		28		plp		check_status        PLP
.39661a		90 04		bcc $396620	                    BCC pass_failure
.39661c		28		plp		done                PLP
.39661d		2b		pld		                    PLD
.39661e		ab		plb		                    PLB
.39661f		6b		rtl		                    RTL
.396620		28		plp		pass_failure        PLP
.396621		2b		pld		                    PLD
.396622		ab		plb		                    PLB
.396623		18		clc		                    CLC
.396624		6b		rtl		                    RTL
.396625						DIVIDE32
.396625		da		phx		                    PHX
.396626		5a		phy		                    PHY
.396627		0b		phd		                    PHD
.396628		08		php		                    PHP
.396629		48		pha		                PHA             ; begin setdp macro
.39662a		08		php		                PHP
.39662b		c2 20		rep #$20	                REP #$20        ; set A long
.39662d		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.396630		5b		tcd		                TCD
.396631		28		plp		                PLP
.396632		68		pla		                PLA             ; end setdp macro
.396633		c2 30		rep #$30	                REP #$30        ; set A&X long
.396635		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.396637		64 0a		stz $0316	                    STZ REMAINDER+2
.396639		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.39663c		06 00		asl $030c	loop                ASL DIVIDEND
.39663e		26 02		rol $030e	                    ROL DIVIDEND+2
.396640		26 08		rol $0314	                    ROL REMAINDER
.396642		26 0a		rol $0316	                    ROL REMAINDER+2
.396644		a5 08		lda $0314	                    LDA REMAINDER
.396646		38		sec		                    SEC
.396647		e5 04		sbc $0310	                    SBC DIVISOR
.396649		a8		tay		                    TAY
.39664a		a5 0a		lda $0316	                    LDA REMAINDER+2
.39664c		e5 06		sbc $0312	                    SBC DIVISOR+2
.39664e		90 06		bcc $396656	                    BCC skip
.396650		85 0a		sta $0316	                    STA REMAINDER+2
.396652		84 08		sty $0314	                    STY REMAINDER
.396654		e6 00		inc $030c	                    INC DIVIDEND
.396656		ca		dex		skip                DEX
.396657		d0 e3		bne $39663c	                    BNE loop
.396659		28		plp		                    PLP
.39665a		2b		pld		                    PLD
.39665b		7a		ply		                    PLY
.39665c		fa		plx		                    PLX
.39665d		60		rts		                    RTS
.39665e						LBA2CHS
.39665e		8b		phb		                    PHB
.39665f		0b		phd		                    PHD
.396660		08		php		                    PHP
.396661		48		pha		                PHA             ; begin setdbr macro
.396662		08		php		                PHP
.396663		e2 20		sep #$20	                SEP #$20        ; set A short
.396665		a9 00		lda #$00	                LDA #0
.396667		48		pha		                PHA
.396668		ab		plb		                PLB
.396669		28		plp		                PLP
.39666a		68		pla		                PLA             ; end setdbr macro
.39666b		48		pha		                PHA             ; begin setdp macro
.39666c		08		php		                PHP
.39666d		c2 20		rep #$20	                REP #$20        ; set A long
.39666f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396672		5b		tcd		                TCD
.396673		28		plp		                PLP
.396674		68		pla		                PLA             ; end setdp macro
.396675		c2 30		rep #$30	                REP #$30        ; set A&X long
.396677		a5 22		lda $0322	                    LDA BIOS_LBA
.396679		85 0c		sta $030c	                    STA DIVIDEND
.39667b		a5 24		lda $0324	                    LDA BIOS_LBA+2
.39667d		85 0e		sta $030e	                    STA DIVIDEND+2
.39667f		a9 24 00	lda #$0024	                    LDA #36
.396682		85 10		sta $0310	                    STA DIVISOR
.396684		64 12		stz $0312	                    STZ DIVISOR+2
.396686		20 25 66	jsr $396625	                    JSR DIVIDE32
.396689		e2 20		sep #$20	                SEP #$20        ; set A short
.39668b		a5 0c		lda $030c	                    LDA DIVIDEND
.39668d		85 02		sta $0302	                    STA FDC_CYLINDER
.39668f		c2 20		rep #$20	                REP #$20        ; set A long
.396691		a5 14		lda $0314	                    LDA REMAINDER
.396693		85 0c		sta $030c	                    STA DIVIDEND
.396695		a5 16		lda $0316	                    LDA REMAINDER+2
.396697		85 0e		sta $030e	                    STA DIVIDEND+2
.396699		a9 12 00	lda #$0012	                    LDA #18
.39669c		85 10		sta $0310	                    STA DIVISOR
.39669e		64 12		stz $0312	                    STZ DIVISOR+2
.3966a0		20 25 66	jsr $396625	                    JSR DIVIDE32
.3966a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3966a5		a5 0c		lda $030c	                    LDA DIVIDEND
.3966a7		29 01		and #$01	                    AND #$01
.3966a9		85 01		sta $0301	                    STA FDC_HEAD
.3966ab		a5 14		lda $0314	                    LDA REMAINDER
.3966ad		1a		inc a		                    INC A
.3966ae		85 03		sta $0303	                    STA FDC_SECTOR
.3966b0		28		plp		                    PLP
.3966b1		2b		pld		                    PLD
.3966b2		ab		plb		                    PLB
.3966b3		6b		rtl		                    RTL
.3966b4						FDC_GETBLOCK
.3966b4		8b		phb		                    PHB
.3966b5		0b		phd		                    PHD
.3966b6		08		php		                    PHP
.3966b7		48		pha		                PHA             ; begin setdbr macro
.3966b8		08		php		                PHP
.3966b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3966bb		a9 00		lda #$00	                LDA #0
.3966bd		48		pha		                PHA
.3966be		ab		plb		                PLB
.3966bf		28		plp		                PLP
.3966c0		68		pla		                PLA             ; end setdbr macro
.3966c1		48		pha		                PHA             ; begin setdp macro
.3966c2		08		php		                PHP
.3966c3		c2 20		rep #$20	                REP #$20        ; set A long
.3966c5		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3966c8		5b		tcd		                TCD
.3966c9		28		plp		                PLP
.3966ca		68		pla		                PLA             ; end setdp macro
.3966cb		e2 20		sep #$20	                SEP #$20        ; set A short
.3966cd		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.3966cf		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.3966d2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3966d4		22 5e 66 39	jsl $39665e	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3966d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3966da		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.3966dc		f0 29		beq $396707	                    BEQ read_failure
.3966de						try_read
.3966de		c2 20		rep #$20	                REP #$20        ; set A long
.3966e0		22 fb 64 39	jsl $3964fb	                    JSL FDC_Read_Sector         ; Read the sector
.3966e4		90 14		bcc $3966fa	                    BCC retry
.3966e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3966e8		a5 06		lda $0306	                    LDA FDC_ST0
.3966ea		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3966ec		d0 19		bne $396707	                    BNE read_failure
.3966ee						ret_success
.3966ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3966f0		a9 00		lda #$00	                    LDA #0
.3966f2		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3966f5		28		plp		                    PLP
.3966f6		2b		pld		                    PLD
.3966f7		ab		plb		                    PLB
.3966f8		38		sec		                    SEC
.3966f9		6b		rtl		                    RTL
.3966fa						retry
.3966fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3966fc		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.3966ff		30 13		bmi $396714	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.396701		22 f3 61 39	jsl $3961f3	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.396705		80 d7		bra $3966de	                    BRA try_read                ; And try the read again
.396707						read_failure
.396707		e2 20		sep #$20	                SEP #$20        ; set A short
.396709		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.39670b		80 04		bra $396711	                    BRA ret_failure
.39670d						seek_failure
.39670d		e2 20		sep #$20	                SEP #$20        ; set A short
.39670f		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396711		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.396714		28		plp		pass_failure        PLP
.396715		2b		pld		                    PLD
.396716		ab		plb		                    PLB
.396717		18		clc		                    CLC
.396718		6b		rtl		                    RTL
.396719						FDC_PUTBLOCK
.396719		8b		phb		                    PHB
.39671a		0b		phd		                    PHD
.39671b		08		php		                    PHP
.39671c		48		pha		                PHA             ; begin setdbr macro
.39671d		08		php		                PHP
.39671e		e2 20		sep #$20	                SEP #$20        ; set A short
.396720		a9 00		lda #$00	                LDA #0
.396722		48		pha		                PHA
.396723		ab		plb		                PLB
.396724		28		plp		                PLP
.396725		68		pla		                PLA             ; end setdbr macro
.396726		48		pha		                PHA             ; begin setdp macro
.396727		08		php		                PHP
.396728		c2 20		rep #$20	                REP #$20        ; set A long
.39672a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39672d		5b		tcd		                TCD
.39672e		28		plp		                PLP
.39672f		68		pla		                PLA             ; end setdp macro
.396730		e2 20		sep #$20	                SEP #$20        ; set A short
.396732		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.396734		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.396737		c2 30		rep #$30	                REP #$30        ; set A&X long
.396739		22 5e 66 39	jsl $39665e	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.39673d		22 90 65 39	jsl $396590	retry               JSL FDC_Write_Sector        ; Write the sector
.396741		b0 03		bcs $396746	                    BCS chk_st0
.396743		82 28 00	brl $39676e	                    BRL attempt_retry
.396746						chk_st0
.396746		e2 20		sep #$20	                SEP #$20        ; set A short
.396748		a5 06		lda $0306	                    LDA FDC_ST0
.39674a		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.39674c		d0 0c		bne $39675a	                    BNE write_failure
.39674e						ret_success
.39674e		e2 20		sep #$20	                SEP #$20        ; set A short
.396750		a9 00		lda #$00	                    LDA #0
.396752		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396755		28		plp		                    PLP
.396756		2b		pld		                    PLD
.396757		ab		plb		                    PLB
.396758		38		sec		                    SEC
.396759		6b		rtl		                    RTL
.39675a						write_failure
.39675a		e2 20		sep #$20	                SEP #$20        ; set A short
.39675c		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.39675e		89 02		bit #$02	                    BIT #FDC_ST1_NW
.396760		f0 04		beq $396766	                    BEQ generic_err
.396762		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.396764		80 17		bra $39677d	                    BRA ret_failure
.396766		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.396768		d0 e4		bne $39674e	                    BNE ret_success
.39676a		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.39676c		d0 e0		bne $39674e	                    BNE ret_success
.39676e						attempt_retry
.39676e		e2 20		sep #$20	                SEP #$20        ; set A short
.396770		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.396773		d0 c8		bne $39673d	                    BNE retry                           ; And retry unless we have none left
.396775		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.396777		80 04		bra $39677d	                    BRA ret_failure
.396779						seek_failure
.396779		e2 20		sep #$20	                SEP #$20        ; set A short
.39677b		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.39677d						ret_failure
.39677d		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396780		28		plp		pass_failure        PLP
.396781		2b		pld		                    PLD
.396782		ab		plb		                    PLB
.396783		18		clc		                    CLC
.396784		6b		rtl		                    RTL
.396785						FDC_MOUNT
.396785		8b		phb		                    PHB
.396786		0b		phd		                    PHD
.396787		08		php		                    PHP
.396788		48		pha		                PHA             ; begin setdbr macro
.396789		08		php		                PHP
.39678a		e2 20		sep #$20	                SEP #$20        ; set A short
.39678c		a9 00		lda #$00	                LDA #0
.39678e		48		pha		                PHA
.39678f		ab		plb		                PLB
.396790		28		plp		                PLP
.396791		68		pla		                PLA             ; end setdbr macro
.396792		48		pha		                PHA             ; begin setdp macro
.396793		08		php		                PHP
.396794		c2 20		rep #$20	                REP #$20        ; set A long
.396796		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396799		5b		tcd		                TCD
.39679a		28		plp		                PLP
.39679b		68		pla		                PLA             ; end setdp macro
.39679c		22 f3 61 39	jsl $3961f3	                    JSL FDC_INIT
.3967a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3967a2		c2 10		rep #$10	                REP #$10        ; set X long
.3967a4		a9 00		lda #$00	                    LDA #0
.3967a6		a2 00 00	ldx #$0000	                    LDX #0
.3967a9		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.3967ad		e8		inx		                    INX
.3967ae		e0 00 02	cpx #$0200	                    CPX #512
.3967b1		d0 f6		bne $3967a9	                    BNE zero_loop
.3967b3		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.3967b5		85 00		sta $0300	                    STA FDC_DRIVE
.3967b7		22 6f 62 39	jsl $39626f	                    JSL FDC_Motor_On                        ; Turn the motor on
.3967bb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3967bd		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.3967c0		85 22		sta $0322	                    STA BIOS_LBA
.3967c2		85 24		sta $0324	                    STA BIOS_LBA+2
.3967c4		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.3967c7		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.3967c9		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3967cc		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.3967ce		22 b4 66 39	jsl $3966b4	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.3967d2		b0 03		bcs $3967d7	                    BCS parse_boot                          ; If ok: start parsing the boot record
.3967d4		82 d3 00	brl $3968aa	                    BRL pass_failure                        ; Pass the error up the chain
.3967d7						parse_boot
.3967d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3967d9		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.3967db		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.3967df		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.3967e1		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.3967e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3967e7		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.3967eb		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.3967ef		c2 20		rep #$20	                REP #$20        ; set A long
.3967f1		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.3967f4		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.3967f8		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.3967fc		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.396800		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.396804		a9 00 00	lda #$0000	                    LDA #0
.396807		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.39680b		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.39680e		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.396812		18		clc		                    CLC
.396813		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.396817		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.39681b		a9 00 00	lda #$0000	                    LDA #0
.39681e		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.396822		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.396826		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.396827		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.39682b		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.39682f		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.396833		a9 00 00	lda #$0000	                    LDA #0
.396836		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.39683a		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.39683e		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.396842		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.396843		4a		lsr a		                    LSR A
.396844		4a		lsr a		                    LSR A
.396845		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.396846		18		clc		                    CLC
.396847		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.39684b		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.39684f		a9 00 00	lda #$0000	                    LDA #0
.396852		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.396856		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.39685a		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.39685e		a9 00 00	lda #$0000	                    LDA #0
.396861		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.396865		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.396869		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.39686d		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.396870		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.396874		e2 20		sep #$20	                SEP #$20        ; set A short
.396876		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.39687a		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.39687c		80 14		bra $396892	                    BRA no_volume_id                        ; No: there is no volume ID
.39687e						is_extended
.39687e		c2 20		rep #$20	                REP #$20        ; set A long
.396880		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.396884		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.396888		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.39688c		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.396890		80 0d		bra $39689f	                    BRA ret_success
.396892						no_volume_id
.396892		c2 20		rep #$20	                REP #$20        ; set A long
.396894		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.396897		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.39689b		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.39689f						ret_success
.39689f		e2 20		sep #$20	                SEP #$20        ; set A short
.3968a1		a9 00		lda #$00	                    LDA #0
.3968a3		85 20		sta $0320	                    STA BIOS_STATUS
.3968a5		28		plp		                    PLP
.3968a6		2b		pld		                    PLD
.3968a7		ab		plb		                    PLB
.3968a8		38		sec		                    SEC
.3968a9		6b		rtl		                    RTL
.3968aa		28		plp		pass_failure        PLP
.3968ab		2b		pld		                    PLD
.3968ac		ab		plb		                    PLB
.3968ad		18		clc		                    CLC
.3968ae		6b		rtl		                    RTL
.3968af						FDC_CMDBLOCK
.3968af		8b		phb		                    PHB
.3968b0		0b		phd		                    PHD
.3968b1		08		php		                    PHP
.3968b2		48		pha		                PHA             ; begin setdbr macro
.3968b3		08		php		                PHP
.3968b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3968b6		a9 00		lda #$00	                LDA #0
.3968b8		48		pha		                PHA
.3968b9		ab		plb		                PLB
.3968ba		28		plp		                PLP
.3968bb		68		pla		                PLA             ; end setdbr macro
.3968bc		48		pha		                PHA             ; begin setdp macro
.3968bd		08		php		                PHP
.3968be		c2 20		rep #$20	                REP #$20        ; set A long
.3968c0		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3968c3		5b		tcd		                TCD
.3968c4		28		plp		                PLP
.3968c5		68		pla		                PLA             ; end setdp macro
.3968c6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3968c8		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.3968ca		f0 0f		beq $3968db	                    BEQ motor_on
.3968cc		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.3968ce		f0 11		beq $3968e1	                    BEQ motor_off
.3968d0		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.3968d2		f0 13		beq $3968e7	                    BEQ recalibrate
.3968d4		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.3968d6		28		plp		                    PLP
.3968d7		2b		pld		                    PLD
.3968d8		ab		plb		                    PLB
.3968d9		38		sec		                    SEC
.3968da		6b		rtl		                    RTL
.3968db		22 6f 62 39	jsl $39626f	motor_on            JSL FDC_Motor_On
.3968df		80 f3		bra $3968d4	                    BRA ret_success
.3968e1		22 a3 62 39	jsl $3962a3	motor_off           JSL FDC_Motor_Off
.3968e5		80 ed		bra $3968d4	                    BRA ret_success
.3968e7		22 ce 62 39	jsl $3962ce	recalibrate         JSL FDC_Recalibrate_Command
.3968eb		b0 e7		bcs $3968d4	                    BCS ret_success
.3968ed		28		plp		pass_failure        PLP
.3968ee		2b		pld		                    PLD
.3968ef		ab		plb		                    PLB
.3968f0		18		clc		                    CLC
.3968f1		6b		rtl		                    RTL
.3968f2						FDC_CHK_MEDIA
.3968f2		0b		phd		                    PHD
.3968f3		08		php		                    PHP
.3968f4		48		pha		                PHA             ; begin setdp macro
.3968f5		08		php		                PHP
.3968f6		c2 20		rep #$20	                REP #$20        ; set A long
.3968f8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3968fb		5b		tcd		                TCD
.3968fc		28		plp		                PLP
.3968fd		68		pla		                PLA             ; end setdp macro
.3968fe		22 6f 62 39	jsl $39626f	                    JSL FDC_Motor_On                ; Turn on the motor
.396902		e2 20		sep #$20	                SEP #$20        ; set A short
.396904		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.396908		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.39690a		f0 42		beq $39694e	                    BEQ ret_true                    ; If not: assume the disk is present
.39690c		a9 00		lda #$00	                    LDA #0
.39690e		85 00		sta $0300	                    STA FDC_DRIVE
.396910		a9 00		lda #$00	                    LDA #0
.396912		85 01		sta $0301	                    STA FDC_HEAD
.396914		a9 50		lda #$50	                    LDA #80
.396916		85 02		sta $0302	                    STA FDC_CYLINDER
.396918		22 ae 64 39	jsl $3964ae	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.39691c		90 34		bcc $396952	                    BCC ret_false                   ; If fail: return false
.39691e		c2 10		rep #$10	                REP #$10        ; set X long
.396920		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396923		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396926		22 47 14 39	jsl $391447	                    JSL IDELAY
.39692a		22 03 63 39	jsl $396303	                    JSL FDC_Sense_Int_Status
.39692e		a5 06		lda $0306	                    LDA FDC_ST0
.396930		29 d0		and #$d0	                    AND #%11010000
.396932		d0 1e		bne $396952	                    BNE ret_false
.396934		22 ce 62 39	jsl $3962ce	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.396938		90 18		bcc $396952	                    BCC ret_false                   ; If fail: return false
.39693a		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.39693d		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396940		22 47 14 39	jsl $391447	                    JSL IDELAY
.396944		22 03 63 39	jsl $396303	                    JSL FDC_Sense_Int_Status
.396948		a5 06		lda $0306	                    LDA FDC_ST0
.39694a		29 d0		and #$d0	                    AND #%11010000
.39694c		d0 04		bne $396952	                    BNE ret_false
.39694e						ret_true
.39694e		28		plp		                    PLP
.39694f		2b		pld		                    PLD
.396950		38		sec		                    SEC
.396951		6b		rtl		                    RTL
.396952						ret_false
.396952		28		plp		                    PLP
.396953		2b		pld		                    PLD
.396954		18		clc		                    CLC
.396955		6b		rtl		                    RTL
.396956						FDC_WRITEVBR
.396956		8b		phb		                    PHB
.396957		0b		phd		                    PHD
.396958		08		php		                    PHP
.396959		48		pha		                PHA             ; begin setdbr macro
.39695a		08		php		                PHP
.39695b		e2 20		sep #$20	                SEP #$20        ; set A short
.39695d		a9 00		lda #$00	                LDA #0
.39695f		48		pha		                PHA
.396960		ab		plb		                PLB
.396961		28		plp		                PLP
.396962		68		pla		                PLA             ; end setdbr macro
.396963		48		pha		                PHA             ; begin setdp macro
.396964		08		php		                PHP
.396965		c2 20		rep #$20	                REP #$20        ; set A long
.396967		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39696a		5b		tcd		                TCD
.39696b		28		plp		                PLP
.39696c		68		pla		                PLA             ; end setdp macro
.39696d		22 85 67 39	jsl $396785	                    JSL FDC_MOUNT               ; Mount the floppy disk
.396971		c2 30		rep #$30	                REP #$30        ; set A&X long
.396973		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.396976		a2 00 00	ldx #$0000	                    LDX #0
.396979		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.39697d		e8		inx		                    INX
.39697e		e8		inx		                    INX
.39697f		e0 00 02	cpx #$0200	                    CPX #512
.396982		d0 f5		bne $396979	                    BNE clr_loop
.396984		e2 20		sep #$20	                SEP #$20        ; set A short
.396986		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.396989		bf 3e 6a 39	lda $396a3e,x	copy_loop           LDA FDC_VBR_BEGIN,X
.39698d		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396991		e8		inx		                    INX
.396992		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.396995		d0 f2		bne $396989	                    BNE copy_loop
.396997		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.39699a		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.39699d		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.39699f		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.3969a3		f0 07		beq $3969ac	                    BEQ path_copy_done
.3969a5		e8		inx		                    INX
.3969a6		c8		iny		                    INY
.3969a7		c0 80 00	cpy #$0080	                    CPY #128
.3969aa		d0 f1		bne $39699d	                    BNE path_copy_loop
.3969ac						path_copy_done
.3969ac		c2 20		rep #$20	                REP #$20        ; set A long
.3969ae		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.3969b1		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.3969b5		c2 20		rep #$20	                REP #$20        ; set A long
.3969b7		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.3969ba		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3969bc		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.3969bf		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3969c1		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.3969c4		85 02		sta $0322	                    STA BIOS_LBA
.3969c6		85 04		sta $0324	                    STA BIOS_LBA+2
.3969c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3969ca		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.3969cc		85 01		sta $0321	                    STA BIOS_DEV
.3969ce		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.3969d2		b0 09		bcs $3969dd	                    BCS ret_success
.3969d4		22 a3 62 39	jsl $3962a3	                    JSL FDC_Motor_Off
.3969d8		28		plp		                    PLP                         ; Return the failure
.3969d9		2b		pld		                    PLD
.3969da		ab		plb		                    PLB
.3969db		18		clc		                    CLC
.3969dc		6b		rtl		                    RTL
.3969dd		22 a3 62 39	jsl $3962a3	ret_success         JSL FDC_Motor_Off
.3969e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3969e3		a9 00		lda #$00	                    LDA #0
.3969e5		85 00		sta $0320	                    STA BIOS_STATUS
.3969e7		28		plp		                    PLP
.3969e8		2b		pld		                    PLD
.3969e9		ab		plb		                    PLB
.3969ea		38		sec		                    SEC
.3969eb		6b		rtl		                    RTL
.3969ec						FDC_TIME_HANDLE
.3969ec		08		php		                    PHP
.3969ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3969ef		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.3969f3		d0 06		bne $3969fb	                    BNE dec_motor                   ; If not zero: decrement the timer
.3969f5		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.3969f9		f0 28		beq $396a23	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.3969fb		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.3969ff		3a		dec a		                    DEC A
.396a00		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396a04		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.396a06		d0 0b		bne $396a13	                    BNE chk_motor_end               ; No: check to see if we're a the end
.396a08		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.396a0c		3a		dec a		                    DEC A
.396a0d		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.396a11		80 10		bra $396a23	                    BRA sof_timeout                 ; And move on to the next timer
.396a13		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.396a17		d0 0a		bne $396a23	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.396a19		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.396a1d		d0 04		bne $396a23	                    BNE sof_timeout
.396a1f		22 a3 62 39	jsl $3962a3	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.396a23						sof_timeout
.396a23		e2 20		sep #$20	                SEP #$20        ; set A short
.396a25		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.396a29		f0 11		beq $396a3c	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.396a2b		3a		dec a		                    DEC A                           ; Count down one tick
.396a2c		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.396a30		d0 0a		bne $396a3c	                    BNE sof_int_done                ; If not 0, we're done
.396a32		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.396a36		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.396a38		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.396a3c		28		plp		sof_int_done        PLP
.396a3d		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396a3e						FDC_VBR_BEGIN
>396a3e		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>396a41		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396a49		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>396a4b		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396a4c		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396a4e		02				num_fat             .byte 2                 ; Number of FATs
>396a4f		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>396a51		40 0b				total_sectors       .word 2880              ; Total sectors
>396a53		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>396a54		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>396a56		12 00				sec_per_track       .word 18                ; Sectors per track
>396a58		02 00				num_head            .word 2                 ; Number of heads
>396a5a		00 00 00 00			ignore2             .dword 0
>396a5e		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396a62		00 00				ignore3             .word 0
>396a64		29				boot_signature      .byte $29
>396a65		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396a69		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396a71		20 20 20
>396a74		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396a7c		80 40		bra $396abe	                    BRA vbr_start
>396a7e						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396abe						vbr_start
.396abe		c2 20		rep #$20	                REP #$20        ; set A long
.396ac0		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396ac3		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396ac7		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396aca		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396ace		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.396ad2		b0 0c		bcs $396ae0	                    BCS lock                ; If it returned success... lock up... I guess?
.396ad4						error
.396ad4		e2 20		sep #$20	                SEP #$20        ; set A short
.396ad6		4b		phk		                    PHK                     ; Otherwise, print an error message
.396ad7		ab		plb		                    PLB
.396ad8		62 08 00	per $396ae3	                    PER message
.396adb		fa		plx		                    PLX
.396adc		22 1c 10 00	jsl $00101c	                    JSL PUTS
.396ae0		ea		nop		lock                NOP                     ; And lock up
.396ae1		80 fd		bra $396ae0	                    BRA lock
>396ae3		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396aeb		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396afb		65 20 62 69 6e 61 72 79 2e 0d 00
.396b06						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.396b06						IDE_TEST
.396b06		08		php		                PHP
.396b07		c2 20		rep #$20	                REP #$20        ; set A long
.396b09		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396b0c		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b10		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396b13		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b17		22 3a 6c 39	jsl $396c3a	                JSL IDE_IDENTIFY
.396b1b		b0 03		bcs $396b20	                BCS id_ok
.396b1d		82 ab 00	brl $396bcb	                BRL done
.396b20						id_ok
.396b20		c2 10		rep #$10	                REP #$10        ; set X long
.396b22		e2 20		sep #$20	                SEP #$20        ; set A short
.396b24		a0 28 00	ldy #$0028	                LDY #40
.396b27		a2 36 00	ldx #$0036	                LDX #27*2
.396b2a		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396b2e		22 18 10 00	jsl $001018	                JSL PUTC
.396b32		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396b36		22 18 10 00	jsl $001018	                JSL PUTC
.396b3a		e8		inx		                INX
.396b3b		e8		inx		                INX
.396b3c		88		dey		                DEY
.396b3d		88		dey		                DEY
.396b3e		d0 ea		bne $396b2a	                BNE pr_model
.396b40		c2 10		rep #$10	                REP #$10        ; set X long
.396b42		e2 20		sep #$20	                SEP #$20        ; set A short
.396b44		a0 14 00	ldy #$0014	                LDY #20
.396b47		a2 14 00	ldx #$0014	                LDX #10*2
.396b4a		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396b4e		22 18 10 00	jsl $001018	                JSL PUTC
.396b52		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396b56		22 18 10 00	jsl $001018	                JSL PUTC
.396b5a		e8		inx		                INX
.396b5b		e8		inx		                INX
.396b5c		88		dey		                DEY
.396b5d		88		dey		                DEY
.396b5e		d0 ea		bne $396b4a	                BNE pr_serial
.396b60		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396b64		c2 30		rep #$30	                REP #$30        ; set A&X long
.396b66		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396b69		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396b6d		a9 00 00	lda #$0000	                LDA #0
.396b70		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396b74		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396b77		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396b7b		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396b7e		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396b82		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396b85		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396b88		9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396b8c		e8		inx		                INX
.396b8d		e8		inx		                INX
.396b8e		e0 00 02	cpx #$0200	                CPX #512
.396b91		d0 f5		bne $396b88	                BNE init_loop
.396b93		22 53 6d 39	jsl $396d53	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396b97		b0 06		bcs $396b9f	                BCS read_sect1
.396b99		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396b9d		80 2c		bra $396bcb	                BRA done
.396b9f		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396ba2		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396ba6		a9 00 00	lda #$0000	                LDA #0
.396ba9		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396bad		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396bb0		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396bb4		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396bb7		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396bbb		22 c8 6c 39	jsl $396cc8	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396bbf		b0 06		bcs $396bc7	                BCS all_ok
.396bc1		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396bc5		80 04		bra $396bcb	                BRA done
.396bc7						all_ok
.396bc7		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396bcb		28		plp		done            PLP
.396bcc		6b		rtl		                RTL
.396bcd						IDE_INIT
.396bcd		e2 20		sep #$20	                SEP #$20        ; set A short
.396bcf		a9 00		lda #$00	              LDA #$00
.396bd1		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.396bd5		20 f6 6b	jsr $396bf6	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396bd8		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.396bda		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396bde		a9 01		lda #$01	              LDA #$01
.396be0		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396be4		a9 00		lda #$00	              LDA #$00
.396be6		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396bea		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396bee		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396bf2		20 14 6c	jsr $396c14	              JSR IDE_DRV_READY_NOTBUSY
.396bf5		6b		rtl		              RTL
.396bf6						IDE_DRIVE_BSY
.396bf6		08		php		                PHP
.396bf7		e2 20		sep #$20	                SEP #$20        ; set A short
.396bf9		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396bfd		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396bff		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396c01		f0 f6		beq $396bf9	                BEQ loop
.396c03		28		plp		                PLP
.396c04		60		rts		                RTS
.396c05						IDE_DRIVE_READY
.396c05		08		php		                PHP
.396c06		e2 20		sep #$20	                SEP #$20        ; set A short
.396c08		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396c0c		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396c0e		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396c10		d0 f6		bne $396c08	                BNE loop
.396c12		28		plp		                PLP
.396c13		60		rts		                RTS
.396c14						IDE_DRV_READY_NOTBUSY
.396c14		08		php		                PHP
.396c15		e2 20		sep #$20	                SEP #$20        ; set A short
.396c17		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396c1b		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396c1d		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396c1f		d0 f6		bne $396c17	                BNE loop                            ; No: keep waiting
.396c21		28		plp		ret_success     PLP                                 ; Return success
.396c22		38		sec		                SEC
.396c23		60		rts		                RTS
.396c24		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396c28		28		plp		                PLP                                 ; Return failure
.396c29		18		clc		                CLC
.396c2a		60		rts		                RTS
.396c2b						IDE_NOT_DRQ
.396c2b		08		php		                PHP
.396c2c		e2 20		sep #$20	                SEP #$20        ; set A short
.396c2e		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396c32		29 08		and #$08	                AND #IDE_STAT_DRQ
.396c34		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396c36		d0 f6		bne $396c2e	                BNE loop                ; No: keep waiting
.396c38		28		plp		                PLP
.396c39		60		rts		                RTS
.396c3a						IDE_IDENTIFY
.396c3a		5a		phy		                PHY
.396c3b		8b		phb		                PHB
.396c3c		0b		phd		                PHD
.396c3d		08		php		                PHP
.396c3e		48		pha		                PHA             ; begin setdbr macro
.396c3f		08		php		                PHP
.396c40		e2 20		sep #$20	                SEP #$20        ; set A short
.396c42		a9 00		lda #$00	                LDA #0
.396c44		48		pha		                PHA
.396c45		ab		plb		                PLB
.396c46		28		plp		                PLP
.396c47		68		pla		                PLA             ; end setdbr macro
.396c48		48		pha		                PHA             ; begin setdp macro
.396c49		08		php		                PHP
.396c4a		c2 20		rep #$20	                REP #$20        ; set A long
.396c4c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c4f		5b		tcd		                TCD
.396c50		28		plp		                PLP
.396c51		68		pla		                PLA             ; end setdp macro
.396c52		e2 20		sep #$20	                SEP #$20        ; set A short
.396c54		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c57		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c59		29 07		and #$07	                AND #$07
.396c5b		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396c5d		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c61		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c64		e2 20		sep #$20	                SEP #$20        ; set A short
.396c66		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396c68		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c6c		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396c70		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396c74		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396c78		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396c7a		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396c7e		f0 29		beq $396ca9	                BEQ no_media                    ; If 0: there is no drive
.396c80		20 f6 6b	jsr $396bf6	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396c83		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c86		90 2d		bcc $396cb5	                BCC ret_failure                 ; If an error occurred, return it
.396c88		c2 30		rep #$30	                REP #$30        ; set A&X long
.396c8a		a0 00 00	ldy #$0000	                LDY #0
.396c8d		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396c91		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396c93		c8		iny		                INY                             ; Move to the next position
.396c94		c8		iny		                INY
.396c95		c0 00 02	cpy #$0200	                CPY #512
.396c98		d0 f3		bne $396c8d	                BNE read_loop
.396c9a						ret_success
.396c9a		e2 20		sep #$20	                SEP #$20        ; set A short
.396c9c		a9 00		lda #$00	                LDA #0
.396c9e		85 00		sta $0320	                STA BIOS_STATUS
.396ca0		8d 06 03	sta $0306	                STA @w FDC_ST0
.396ca3		28		plp		                PLP                             ; Return success
.396ca4		2b		pld		                PLD
.396ca5		ab		plb		                PLB
.396ca6		7a		ply		                PLY
.396ca7		38		sec		                SEC
.396ca8		6b		rtl		                RTL
.396ca9						no_media
.396ca9		e2 20		sep #$20	                SEP #$20        ; set A short
.396cab		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396cad		80 0a		bra $396cb9	                BRA pass_failure
.396caf						not_ata
.396caf		e2 20		sep #$20	                SEP #$20        ; set A short
.396cb1		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396cb3		80 04		bra $396cb9	                BRA pass_failure
.396cb5						ret_failure
.396cb5		e2 20		sep #$20	                SEP #$20        ; set A short
.396cb7		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396cb9		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396cbb		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396cbf		8d 06 03	sta $0306	                STA @w FDC_ST0
.396cc2		28		plp		                PLP
.396cc3		2b		pld		                PLD
.396cc4		ab		plb		                PLB
.396cc5		7a		ply		                PLY
.396cc6		18		clc		                CLC
.396cc7		6b		rtl		                RTL
.396cc8						IDE_GETBLOCK
.396cc8		5a		phy		                PHY
.396cc9		8b		phb		                PHB
.396cca		0b		phd		                PHD
.396ccb		08		php		                PHP
.396ccc		48		pha		                PHA             ; begin setdbr macro
.396ccd		08		php		                PHP
.396cce		e2 20		sep #$20	                SEP #$20        ; set A short
.396cd0		a9 00		lda #$00	                LDA #0
.396cd2		48		pha		                PHA
.396cd3		ab		plb		                PLB
.396cd4		28		plp		                PLP
.396cd5		68		pla		                PLA             ; end setdbr macro
.396cd6		48		pha		                PHA             ; begin setdp macro
.396cd7		08		php		                PHP
.396cd8		c2 20		rep #$20	                REP #$20        ; set A long
.396cda		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396cdd		5b		tcd		                TCD
.396cde		28		plp		                PLP
.396cdf		68		pla		                PLA             ; end setdp macro
.396ce0		e2 20		sep #$20	                SEP #$20        ; set A short
.396ce2		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396ce5		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396ce7		29 07		and #$07	                AND #$07
.396ce9		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396ceb		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396cef		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396cf2		e2 20		sep #$20	                SEP #$20        ; set A short
.396cf4		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396cf6		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396cfa		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396cfc		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396d00		a5 03		lda $0323	                LDA BIOS_LBA+1
.396d02		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396d06		a5 04		lda $0324	                LDA BIOS_LBA+2
.396d08		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396d0c		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396d0e		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396d12		ea		nop		                NOP                             ; Wait about 500ns
.396d13		ea		nop		                NOP
.396d14		ea		nop		                NOP
.396d15		ea		nop		                NOP
.396d16		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396d19		90 25		bcc $396d40	                BCC ret_failure                 ; If an error occurred, return it
.396d1b		a0 00 00	ldy #$0000	                LDY #0
.396d1e		c2 20		rep #$20	                REP #$20        ; set A long
.396d20		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396d24		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396d26		c8		iny		                INY                             ; Move to the next position
.396d27		c8		iny		                INY
.396d28		c0 00 02	cpy #$0200	                CPY #512
.396d2b		d0 f3		bne $396d20	                BNE read_loop
.396d2d		ea		nop		                NOP                             ; Wait about 500ns
.396d2e		ea		nop		                NOP
.396d2f		ea		nop		                NOP
.396d30		ea		nop		                NOP
.396d31						ret_success
.396d31		e2 20		sep #$20	                SEP #$20        ; set A short
.396d33		a9 00		lda #$00	                LDA #0
.396d35		85 00		sta $0320	                STA BIOS_STATUS
.396d37		8d 06 03	sta $0306	                STA @w FDC_ST0
.396d3a		28		plp		                PLP                             ; Return success
.396d3b		2b		pld		                PLD
.396d3c		ab		plb		                PLB
.396d3d		7a		ply		                PLY
.396d3e		38		sec		                SEC
.396d3f		6b		rtl		                RTL
.396d40						ret_failure
.396d40		e2 20		sep #$20	                SEP #$20        ; set A short
.396d42		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396d46		8d 06 03	sta $0306	                STA @w FDC_ST0
.396d49		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396d4b		85 00		sta $0320	                STA BIOS_STATUS
.396d4d		28		plp		                PLP
.396d4e		2b		pld		                PLD
.396d4f		ab		plb		                PLB
.396d50		7a		ply		                PLY
.396d51		18		clc		                CLC
.396d52		6b		rtl		                RTL
.396d53						IDE_PUTBLOCK
.396d53		5a		phy		                PHY
.396d54		8b		phb		                PHB
.396d55		0b		phd		                PHD
.396d56		08		php		                PHP
.396d57		48		pha		                PHA             ; begin setdbr macro
.396d58		08		php		                PHP
.396d59		e2 20		sep #$20	                SEP #$20        ; set A short
.396d5b		a9 00		lda #$00	                LDA #0
.396d5d		48		pha		                PHA
.396d5e		ab		plb		                PLB
.396d5f		28		plp		                PLP
.396d60		68		pla		                PLA             ; end setdbr macro
.396d61		48		pha		                PHA             ; begin setdp macro
.396d62		08		php		                PHP
.396d63		c2 20		rep #$20	                REP #$20        ; set A long
.396d65		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396d68		5b		tcd		                TCD
.396d69		28		plp		                PLP
.396d6a		68		pla		                PLA             ; end setdp macro
.396d6b		e2 20		sep #$20	                SEP #$20        ; set A short
.396d6d		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396d70		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396d72		29 07		and #$07	                AND #$07
.396d74		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396d76		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396d7a		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396d7d		e2 20		sep #$20	                SEP #$20        ; set A short
.396d7f		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396d81		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396d85		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396d87		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396d8b		a5 03		lda $0323	                LDA BIOS_LBA+1
.396d8d		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396d91		a5 04		lda $0324	                LDA BIOS_LBA+2
.396d93		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396d97		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396d99		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396d9d		ea		nop		                NOP                             ; Wait about 500ns
.396d9e		ea		nop		                NOP
.396d9f		ea		nop		                NOP
.396da0		ea		nop		                NOP
.396da1		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396da4		90 37		bcc $396ddd	                BCC ret_failure                 ; If an error occurred, return it
.396da6		c2 30		rep #$30	                REP #$30        ; set A&X long
.396da8		a0 00 00	ldy #$0000	                LDY #0
.396dab		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396dad		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396db1		c8		iny		                INY                             ; Move to the next position
.396db2		c8		iny		                INY
.396db3		c0 00 02	cpy #$0200	                CPY #512
.396db6		d0 f3		bne $396dab	                BNE read_loop
.396db8		ea		nop		                NOP                             ; Wait about 500ns
.396db9		ea		nop		                NOP
.396dba		ea		nop		                NOP
.396dbb		ea		nop		                NOP
.396dbc		20 14 6c	jsr $396c14	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396dbf		90 1c		bcc $396ddd	                BCC ret_failure                 ; If an error occurred, return it
.396dc1		ea		nop		                NOP                             ; Wait about 500ns
.396dc2		ea		nop		                NOP
.396dc3		ea		nop		                NOP
.396dc4		ea		nop		                NOP
.396dc5		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396dc9		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396dcc		d0 0f		bne $396ddd	                BNE ret_failure                 ; If error: return failure
.396dce						ret_success
.396dce		e2 20		sep #$20	                SEP #$20        ; set A short
.396dd0		a9 00		lda #$00	                LDA #0
.396dd2		85 00		sta $0320	                STA BIOS_STATUS
.396dd4		8d 06 03	sta $0306	                STA @w FDC_ST0
.396dd7		28		plp		                PLP                             ; Return success
.396dd8		2b		pld		                PLD
.396dd9		ab		plb		                PLB
.396dda		7a		ply		                PLY
.396ddb		38		sec		                SEC
.396ddc		6b		rtl		                RTL
.396ddd		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.396dde		ea		nop		                NOP
.396ddf		ea		nop		                NOP
.396de0		ea		nop		                NOP
.396de1		e2 20		sep #$20	                SEP #$20        ; set A short
.396de3		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396de7		80 08		bra $396df1	                BRA save_error
.396de9		ea		nop		                NOP
.396dea		ea		nop		                NOP
.396deb		ea		nop		                NOP
.396dec		ea		nop		                NOP
.396ded		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396df1		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.396df4		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.396df6		85 00		sta $0320	                STA BIOS_STATUS
.396df8		28		plp		                PLP
.396df9		2b		pld		                PLD
.396dfa		ab		plb		                PLB
.396dfb		7a		ply		                PLY
.396dfc		18		clc		                CLC
.396dfd		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.396dfe						SIMPLE_INIT_ETHERNET_CTRL
.396dfe						WaitforittobeReady:
.396dfe		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.396e02		29 01 00	and #$0001	                AND #$0001
.396e05		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.396e08		d0 f4		bne $396dfe	                BNE WaitforittobeReady
.396e0a		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.396e0e		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.396e12		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.396e16		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.396e1a		a9 00 00	lda #$0000	                LDA #$0000
.396e1d		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.396e21		a9 00 70	lda #$7000	                LDA #$7000
.396e24		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.396e28		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.396e2b		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396e2f		a9 0b 00	lda #$000b	                LDA #$000B
.396e32		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396e36		a9 00 00	lda #$0000	                LDA #$0000
.396e39		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396e3d		20 71 6e	jsr $396e71	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396e40		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.396e43		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396e47		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.396e4a		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396e4e		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.396e51		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396e55		20 71 6e	jsr $396e71	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396e58		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.396e5b		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396e5f		a9 0c 00	lda #$000c	                LDA #$000C
.396e62		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396e66		a9 04 00	lda #$0004	                LDA #$0004
.396e69		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396e6d		20 71 6e	jsr $396e71	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396e70		6b		rtl		                RTL
.396e71						MAC_ACCESS_WAIT_FOR_COMPLETION
.396e71		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.396e74		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.396e78						WaitForCompletion:
.396e78		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.396e7c		29 00 80	and #$8000	                AND #$8000
.396e7f		c9 00 80	cmp #$8000	                CMP #$8000
.396e82		f0 f4		beq $396e78	                BEQ WaitForCompletion
.396e84		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.396e85						EVID_IPRINT
.396e85		22 8e 6e 39	jsl $396e8e	                JSL EVID_IPUTS
.396e89		22 00 70 39	jsl $397000	                JSL EVID_IPRINTCR
.396e8d		6b		rtl		                RTL
.396e8e						EVID_IPUTS
.396e8e		48		pha		                PHA
.396e8f		08		php		                PHP
.396e90		e2 20		sep #$20	                SEP #$20        ; set A short
.396e92		c2 10		rep #$10	                REP #$10        ; set X long
.396e94		bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.396e97		f0 08		beq $396ea1	                BEQ iputs_done
.396e99		22 a5 6e 39	jsl $396ea5	iputs2          JSL EVID_IPUTC
.396e9d		e8		inx		iputs3          INX
.396e9e		4c 94 6e	jmp $396e94	                JMP iputs1
.396ea1		e8		inx		iputs_done      INX
.396ea2		28		plp		                PLP
.396ea3		68		pla		                PLA
.396ea4		6b		rtl		                RTL
.396ea5						EVID_IPUTC
.396ea5		da		phx		                PHX
.396ea6		5a		phy		                PHY
.396ea7		0b		phd		                PHD
.396ea8		8b		phb		                PHB
.396ea9		08		php		                PHP                 ; stash the flags (we'll be changing M)
.396eaa		48		pha		                PHA             ; begin setdp macro
.396eab		08		php		                PHP
.396eac		c2 20		rep #$20	                REP #$20        ; set A long
.396eae		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396eb1		5b		tcd		                TCD
.396eb2		28		plp		                PLP
.396eb3		68		pla		                PLA             ; end setdp macro
.396eb4		48		pha		                PHA             ; begin setdbr macro
.396eb5		08		php		                PHP
.396eb6		e2 20		sep #$20	                SEP #$20        ; set A short
.396eb8		a9 00		lda #$00	                LDA #0
.396eba		48		pha		                PHA
.396ebb		ab		plb		                PLB
.396ebc		28		plp		                PLP
.396ebd		68		pla		                PLA             ; end setdbr macro
.396ebe		e2 20		sep #$20	                SEP #$20        ; set A short
.396ec0		c2 10		rep #$10	                REP #$10        ; set X long
.396ec2		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.396ec4		f0 69		beq $396f2f	                BEQ go_down
.396ec6		c9 20		cmp #$20	                CMP #$20
.396ec8		90 19		bcc $396ee3	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.396eca		c9 7f		cmp #$7f	                CMP #$7F
.396ecc		f0 45		beq $396f13	                BEQ do_del
.396ece		b0 02		bcs $396ed2	                BCS check_A0        ; [$20..$7E]: print it
.396ed0		80 31		bra $396f03	                BRA printc
.396ed2		c9 a0		cmp #$a0	check_A0        CMP #$A0
.396ed4		90 02		bcc $396ed8	                BCC check_ctrl1
.396ed6		80 2b		bra $396f03	                BRA printc          ; [$A0..$FF]: print it
.396ed8		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.396eda		f0 53		beq $396f2f	                BEQ go_down         ; ... move the cursor down one row
.396edc		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.396ede		f0 61		beq $396f41	                BEQ go_left         ; ... move the cursor left one column
.396ee0		4c 0d 6f	jmp $396f0d	                JMP done
.396ee3		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.396ee5		f0 69		beq $396f50	                BEQ do_TAB          ; ... move to the next TAB stop
.396ee7		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.396ee9		f0 34		beq $396f1f	                BEQ backspace       ; ... move the cursor back and replace with a space
.396eeb		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.396eed		f0 3a		beq $396f29	                BEQ do_cr           ; ... move cursor down and to the first column
.396eef		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.396ef1		f0 42		beq $396f35	                BEQ go_up           ; ... move the cursor up one row
.396ef3		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.396ef5		f0 44		beq $396f3b	                BEQ go_right        ; ... move the cursor right one column
.396ef7		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.396ef9		f0 1e		beq $396f19	                BEQ do_ins          ; ... insert a space
.396efb		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.396efd		f0 48		beq $396f47	                BEQ go_sol          ; ... move the cursor to the start of the line
.396eff		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.396f01		f0 74		beq $396f77	                BEQ go_eol          ; ... move the cursor to the end of the line
.396f03		87 6b		sta [$6b]	printc          STA [EVID_CURSORPOS]     ; Save the character on the screen
.396f05		a5 72		lda $72		                LDA EVID_CURCOLOR        ; Set the color based on CURCOLOR
.396f07		87 76		sta [$76]	                STA [EVID_COLORPOS]
.396f09		22 3e 70 39	jsl $39703e	                JSL EVID_ICSRRIGHT       ; And advance the cursor
.396f0d		28		plp		done            PLP
.396f0e		ab		plb		                PLB
.396f0f		2b		pld		                PLD
.396f10		7a		ply		                PLY
.396f11		fa		plx		                PLX
.396f12		6b		rtl		                RTL
.396f13		22 a4 6f 39	jsl $396fa4	do_del          JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.396f17		80 f4		bra $396f0d	                BRA done
.396f19		22 c8 6f 39	jsl $396fc8	do_ins          JSL EVID_SCRSHIFTLR      ; Shift the current line right one space from the cursor
.396f1d		80 ee		bra $396f0d	                BRA done
.396f1f		22 71 70 39	jsl $397071	backspace       JSL EVID_ICSRLEFT
.396f23		22 a4 6f 39	jsl $396fa4	                JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.396f27		80 e4		bra $396f0d	                BRA done
.396f29		22 00 70 39	jsl $397000	do_cr           JSL EVID_IPRINTCR        ; Move the cursor to the beginning of the next line
.396f2d		80 de		bra $396f0d	                BRA done
.396f2f		22 bd 70 39	jsl $3970bd	go_down         JSL EVID_ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.396f33		80 d8		bra $396f0d	                BRA done
.396f35		22 97 70 39	jsl $397097	go_up           JSL EVID_ICSRUP          ; Move the cursor up one line
.396f39		80 d2		bra $396f0d	                BRA done
.396f3b		22 3e 70 39	jsl $39703e	go_right        JSL EVID_ICSRRIGHT       ; Move the cursor right one column
.396f3f		80 cc		bra $396f0d	                BRA done
.396f41		22 71 70 39	jsl $397071	go_left         JSL EVID_ICSRLEFT        ; Move the cursor left one column
.396f45		80 c6		bra $396f0d	                BRA done
.396f47						go_sol
.396f47		c2 20		rep #$20	                REP #$20        ; set A long
.396f49		a2 00 00	ldx #$0000	                LDX #0
.396f4c		a4 70		ldy $70		                LDY EVID_CURSORY
.396f4e		80 21		bra $396f71	                BRA do_locate
.396f50						do_TAB
.396f50		c2 20		rep #$20	                REP #$20        ; set A long
.396f52		a5 6e		lda $6e		                LDA EVID_CURSORX         ; Get the current column
.396f54		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.396f57		18		clc		                CLC
.396f58		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.396f5b		aa		tax		                TAX
.396f5c		a4 70		ldy $70		                LDY EVID_CURSORY
.396f5e		e2 20		sep #$20	                SEP #$20        ; set A short
.396f60		e4 63		cpx $63		set_xy          CPX EVID_COLS_VISIBLE    ; Check if we're still on screen horizontally
.396f62		90 04		bcc $396f68	                BCC check_row       ; Yes: check the row
.396f64		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.396f67		c8		iny		                INY                 ; ... and the next row
.396f68		c4 67		cpy $67		check_row       CPY EVID_LINES_VISIBLE   ; Check if we're still on the screen vertically
.396f6a		90 05		bcc $396f71	                BCC do_locate       ; Yes: reposition the cursor
.396f6c		22 2e 71 39	jsl $39712e	                JSL EVID_ISCROLLUP       ; No: scroll the screen
.396f70		88		dey		                DEY                 ; And set the row to the last one
.396f71		22 e2 70 39	jsl $3970e2	do_locate       JSL EVID_ILOCATE         ; Set the cursor position
.396f75		80 96		bra $396f0d	                BRA done
.396f77		a6 63		ldx $63		go_eol          LDX EVID_COLS_VISIBLE    ; Move the cursor to the right most column
.396f79		ca		dex		                DEX
.396f7a		a4 70		ldy $70		                LDY EVID_CURSORY
.396f7c		22 e2 70 39	jsl $3970e2	                JSL EVID_ILOCATE
.396f80		e2 20		sep #$20	                SEP #$20        ; set A short
.396f82		a7 6b		lda [$6b]	eol_loop        LDA [EVID_CURSORPOS]     ; Get the character under the cursor
.396f84		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.396f86		d0 0b		bne $396f93	                BNE eol_done        ; No: exit the loop
.396f88		22 71 70 39	jsl $397071	                JSL EVID_ICSRLEFT        ; Yes: move to the left
.396f8c		a6 6e		ldx $6e		                LDX EVID_CURSORX         ; Are we at column 0?
.396f8e		d0 f2		bne $396f82	                BNE eol_loop        ; No: try again
.396f90		82 7a ff	brl $396f0d	                BRL done            ; Yes: we're done
.396f93		a6 6e		ldx $6e		eol_done        LDX EVID_CURSORX         ; Check the column
.396f95		e8		inx		                INX
.396f96		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE    ; Is it the right most?
.396f98		d0 03		bne $396f9d	                BNE eol_right
.396f9a		82 70 ff	brl $396f0d	                BRL done            ; Yes: we're done
.396f9d		22 3e 70 39	jsl $39703e	eol_right       JSL EVID_ICSRRIGHT       ; No: move right one column
.396fa1		82 69 ff	brl $396f0d	                BRL done
.396fa4						EVID_SCRSHIFTLL
.396fa4		da		phx		                PHX
.396fa5		5a		phy		                PHY
.396fa6		48		pha		                PHA
.396fa7		0b		phd		                PHD
.396fa8		08		php		                PHP
.396fa9		48		pha		                PHA             ; begin setdp macro
.396faa		08		php		                PHP
.396fab		c2 20		rep #$20	                REP #$20        ; set A long
.396fad		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396fb0		5b		tcd		                TCD
.396fb1		28		plp		                PLP
.396fb2		68		pla		                PLA             ; end setdp macro
.396fb3		c2 30		rep #$30	                REP #$30        ; set A&X long
.396fb5		a5 6b		lda $6b		                LDA EVID_CURSORPOS       ; Get the current cursor position
.396fb7		a8		tay		                TAY                 ; Set it as the destination
.396fb8		aa		tax		                TAX
.396fb9		e8		inx		                INX                 ; And set the next cell as the source
.396fba		18		clc		                CLC                 ; Calculate the length of the block to move
.396fbb		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.396fbd		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396fbf		54 ae ae	mvn $ae,$ae	                MVN $AE, $AE        ; And move the block
.396fc2		28		plp		                PLP
.396fc3		2b		pld		                PLD
.396fc4		68		pla		                PLA
.396fc5		7a		ply		                PLY
.396fc6		fa		plx		                PLX
.396fc7		6b		rtl		                RTL
.396fc8						EVID_SCRSHIFTLR
.396fc8		da		phx		                PHX
.396fc9		48		pha		                PHA
.396fca		0b		phd		                PHD
.396fcb		08		php		                PHP
.396fcc		48		pha		                PHA             ; begin setdp macro
.396fcd		08		php		                PHP
.396fce		c2 20		rep #$20	                REP #$20        ; set A long
.396fd0		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396fd3		5b		tcd		                TCD
.396fd4		28		plp		                PLP
.396fd5		68		pla		                PLA             ; end setdp macro
.396fd6		c2 30		rep #$30	                REP #$30        ; set A&X long
.396fd8		a5 6e		lda $6e		                LDA EVID_CURSORX         ; What column are we on
.396fda		1a		inc a		                INC A
.396fdb		c5 63		cmp $63		                CMP EVID_COLS_VISIBLE    ; >= the # visible?
.396fdd		b0 1b		bcs $396ffa	                BGE done            ; Yes: just skip the whole thing
.396fdf		38		sec		                SEC                 ; Calculate the length of the block to move
.396fe0		a5 63		lda $63		                LDA EVID_COLS_VISIBLE
.396fe2		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396fe4		1a		inc a		                INC A
.396fe5		18		clc		                CLC
.396fe6		65 6b		adc $6b		                ADC EVID_CURSORPOS       ; Add the current cursor position
.396fe8		3a		dec a		                DEC A
.396fe9		a8		tay		                TAY                 ; Make it the destination
.396fea		3a		dec a		                DEC A               ; Move to the previous column
.396feb		aa		tax		                TAX                 ; Make it the source
.396fec		38		sec		                SEC                 ; Calculate the length of the block to move
.396fed		a5 63		lda $63		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.396fef		e5 6e		sbc $6e		                SBC EVID_CURSORX
.396ff1		44 ae ae	mvp $ae,$ae	                MVP $AE, $AE        ; And move the block
.396ff4		e2 20		sep #$20	                SEP #$20        ; set A short
.396ff6		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.396ff8		87 6b		sta [$6b]	                STA [EVID_CURSORPOS]
.396ffa		28		plp		done            PLP
.396ffb		2b		pld		                PLD
.396ffc		68		pla		                PLA
.396ffd		fa		plx		                PLX
.396ffe		6b		rtl		                RTL
.396fff						EVID_IPUTB
.396fff		6b		rtl		                RTL
.397000						EVID_IPRINTCR
.397000		da		phx		                PHX
.397001		5a		phy		                PHY
.397002		8b		phb		                PHB
.397003		0b		phd		                PHD
.397004		08		php		                PHP
.397005		48		pha		                PHA             ; begin setdbr macro
.397006		08		php		                PHP
.397007		e2 20		sep #$20	                SEP #$20        ; set A short
.397009		a9 00		lda #$00	                LDA #0
.39700b		48		pha		                PHA
.39700c		ab		plb		                PLB
.39700d		28		plp		                PLP
.39700e		68		pla		                PLA             ; end setdbr macro
.39700f		48		pha		                PHA             ; begin setdp macro
.397010		08		php		                PHP
.397011		c2 20		rep #$20	                REP #$20        ; set A long
.397013		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.397016		5b		tcd		                TCD
.397017		28		plp		                PLP
.397018		68		pla		                PLA             ; end setdp macro
.397019		e2 20		sep #$20	                SEP #$20        ; set A short
.39701b		c2 10		rep #$10	                REP #$10        ; set X long
.39701d		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.397020		a4 70		ldy $70		                LDY EVID_CURSORY
.397022		c8		iny		                INY
.397023		22 e2 70 39	jsl $3970e2	                JSL EVID_ILOCATE
.397027		28		plp		done            PLP
.397028		2b		pld		                PLD
.397029		ab		plb		                PLB
.39702a		7a		ply		                PLY
.39702b		fa		plx		                PLX
.39702c		6b		rtl		                RTL
.39702d						EVID_ICSRHOME
.39702d		da		phx		                PHX
.39702e		5a		phy		                PHY
.39702f		08		php		                PHP
.397030		a2 00 00	ldx #$0000	                LDX #0
.397033		a0 00 00	ldy #$0000	                LDY #0
.397036		22 e2 70 39	jsl $3970e2	                JSL EVID_ILOCATE
.39703a		28		plp		                PLP
.39703b		7a		ply		                PLY
.39703c		fa		plx		                PLX
.39703d		6b		rtl		                RTL
.39703e						EVID_ICSRRIGHT
.39703e		da		phx		                PHX
.39703f		5a		phy		                PHY
.397040		48		pha		                PHA
.397041		0b		phd		                PHD
.397042		08		php		                PHP
.397043		c2 20		rep #$20	                REP #$20        ; set A long
.397045		c2 10		rep #$10	                REP #$10        ; set X long
.397047		48		pha		                PHA             ; begin setdp macro
.397048		08		php		                PHP
.397049		c2 20		rep #$20	                REP #$20        ; set A long
.39704b		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39704e		5b		tcd		                TCD
.39704f		28		plp		                PLP
.397050		68		pla		                PLA             ; end setdp macro
.397051		a6 6e		ldx $6e		                LDX EVID_CURSORX           ; Get the new column
.397053		e8		inx		                INX
.397054		a4 70		ldy $70		                LDY EVID_CURSORY           ; Get the current row
.397056		e4 63		cpx $63		                CPX EVID_COLS_VISIBLE      ; Are we off screen?
.397058		90 0d		bcc $397067	                BCC icsrright_nowrap  ; No: just set the position
.39705a		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.39705d		c8		iny		                INY                   ; And move to the next row
.39705e		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE     ; Are we still off screen?
.397060		90 05		bcc $397067	                BCC icsrright_nowrap  ; No: just set the position
.397062		88		dey		                DEY                   ; Yes: lock to the last row
.397063		22 2e 71 39	jsl $39712e	                JSL EVID_ISCROLLUP         ; But scroll the screen up
.397067						icsrright_nowrap
.397067		22 e2 70 39	jsl $3970e2	                JSL EVID_ILOCATE           ; Set the cursor position
.39706b		28		plp		                PLP
.39706c		2b		pld		                PLD
.39706d		68		pla		                PLA
.39706e		7a		ply		                PLY
.39706f		fa		plx		                PLX
.397070		6b		rtl		                RTL
.397071						EVID_ICSRLEFT
.397071		da		phx		                PHX
.397072		5a		phy		                PHY
.397073		48		pha		                PHA
.397074		0b		phd		                PHD
.397075		08		php		                PHP
.397076		c2 30		rep #$30	                REP #$30        ; set A&X long
.397078		48		pha		                PHA             ; begin setdp macro
.397079		08		php		                PHP
.39707a		c2 20		rep #$20	                REP #$20        ; set A long
.39707c		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.39707f		5b		tcd		                TCD
.397080		28		plp		                PLP
.397081		68		pla		                PLA             ; end setdp macro
.397082		a5 6e		lda $6e		                LDA EVID_CURSORX
.397084		f0 0b		beq $397091	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.397086		a6 6e		ldx $6e		                LDX EVID_CURSORX
.397088		ca		dex		                DEX
.397089		86 6e		stx $6e		                STX EVID_CURSORX
.39708b		a4 70		ldy $70		                LDY EVID_CURSORY
.39708d		22 e2 70 39	jsl $3970e2	                JSL EVID_ILOCATE
.397091						icsrleft_done_already_zero
.397091		28		plp		                PLP
.397092		2b		pld		                PLD
.397093		68		pla		                PLA
.397094		7a		ply		                PLY
.397095		fa		plx		                PLX
.397096		6b		rtl		                RTL
.397097						EVID_ICSRUP
.397097		da		phx		                PHX
.397098		5a		phy		                PHY
.397099		48		pha		                PHA
.39709a		0b		phd		                PHD
.39709b		08		php		                PHP
.39709c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39709e		48		pha		                PHA             ; begin setdp macro
.39709f		08		php		                PHP
.3970a0		c2 20		rep #$20	                REP #$20        ; set A long
.3970a2		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3970a5		5b		tcd		                TCD
.3970a6		28		plp		                PLP
.3970a7		68		pla		                PLA             ; end setdp macro
.3970a8		a5 70		lda $70		                LDA EVID_CURSORY
.3970aa		f0 0b		beq $3970b7	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3970ac		a4 70		ldy $70		                LDY EVID_CURSORY
.3970ae		88		dey		                DEY
.3970af		84 70		sty $70		                STY EVID_CURSORY
.3970b1		a6 6e		ldx $6e		                LDX EVID_CURSORX
.3970b3		22 e2 70 39	jsl $3970e2	                JSL EVID_ILOCATE
.3970b7						isrup_done_already_zero
.3970b7		28		plp		                PLP
.3970b8		2b		pld		                PLD
.3970b9		68		pla		                PLA
.3970ba		7a		ply		                PLY
.3970bb		fa		plx		                PLX
.3970bc		6b		rtl		                RTL
.3970bd						EVID_ICSRDOWN
.3970bd		da		phx		                PHX
.3970be		5a		phy		                PHY
.3970bf		0b		phd		                PHD
.3970c0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3970c2		48		pha		                PHA             ; begin setdp macro
.3970c3		08		php		                PHP
.3970c4		c2 20		rep #$20	                REP #$20        ; set A long
.3970c6		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3970c9		5b		tcd		                TCD
.3970ca		28		plp		                PLP
.3970cb		68		pla		                PLA             ; end setdp macro
.3970cc		a6 6e		ldx $6e		                LDX EVID_CURSORX                 ; Get the current column
.3970ce		a4 70		ldy $70		                LDY EVID_CURSORY                 ; Get the new row
.3970d0		c8		iny		                INY
.3970d1		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE           ; Check to see if we're off screen
.3970d3		90 05		bcc $3970da	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.3970d5		88		dey		                DEY                         ; Yes: go back to the last row
.3970d6		22 2e 71 39	jsl $39712e	                JSL EVID_ISCROLLUP               ; But scroll the screen up
.3970da						icsrdown_noscroll
.3970da		22 e2 70 39	jsl $3970e2	                JSL EVID_ILOCATE                 ; And set the cursor position
.3970de		2b		pld		                PLD
.3970df		7a		ply		                PLY
.3970e0		fa		plx		                PLX
.3970e1		6b		rtl		                RTL
.3970e2						EVID_ILOCATE
.3970e2		48		pha		                PHA
.3970e3		0b		phd		                PHD
.3970e4		08		php		                PHP
.3970e5		48		pha		                PHA             ; begin setdp macro
.3970e6		08		php		                PHP
.3970e7		c2 20		rep #$20	                REP #$20        ; set A long
.3970e9		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3970ec		5b		tcd		                TCD
.3970ed		28		plp		                PLP
.3970ee		68		pla		                PLA             ; end setdp macro
.3970ef		c2 30		rep #$30	                REP #$30        ; set A&X long
.3970f1						ilocate_scroll
.3970f1		c4 67		cpy $67		                CPY EVID_LINES_VISIBLE
.3970f3		90 07		bcc $3970fc	                BCC ilocate_scrolldone
.3970f5		22 2e 71 39	jsl $39712e	                JSL EVID_ISCROLLUP
.3970f9		88		dey		                DEY
.3970fa		80 f5		bra $3970f1	                BRA ilocate_scroll
.3970fc						ilocate_scrolldone
.3970fc		86 6e		stx $6e		                STX EVID_CURSORX
.3970fe		84 70		sty $70		                STY EVID_CURSORY
.397100		a5 60		lda $60		                LDA EVID_SCREENBEGIN
.397102						ilocate_row
.397102		c0 00 00	cpy #$0000	                CPY #$0
.397105		f0 08		beq $39710f	                BEQ ilocate_right
.397107		18		clc		ilocate_down    CLC
.397108		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.39710a		88		dey		                DEY
.39710b		f0 02		beq $39710f	                BEQ ilocate_right
.39710d		80 f8		bra $397107	                BRA ilocate_down
.39710f		18		clc		ilocate_right   CLC
.397110		65 6e		adc $6e		                ADC EVID_CURSORX             ; move the cursor right X columns
.397112		85 6b		sta $6b		                STA EVID_CURSORPOS
.397114		a4 70		ldy $70		                LDY EVID_CURSORY
.397116		98		tya		                TYA
.397117		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.39711b		8a		txa		                TXA
.39711c		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.397120		c2 20		rep #$20	                REP #$20        ; set A long
.397122		18		clc		                CLC
.397123		a5 6b		lda $6b		                LDA EVID_CURSORPOS
.397125		69 00 20	adc #$2000	                ADC #<>(EVID_COLOR_MEM - EVID_TEXT_MEM)
.397128		85 76		sta $76		                STA EVID_COLORPOS
.39712a		28		plp		ilocate_done    PLP
.39712b		2b		pld		                PLD
.39712c		68		pla		                PLA
.39712d		6b		rtl		                RTL
.39712e						EVID_ISCROLLUP
.39712e		48		pha		                PHA
.39712f		da		phx		                PHX
.397130		5a		phy		                PHY
.397131		8b		phb		                PHB
.397132		0b		phd		                PHD
.397133		08		php		                PHP
.397134		48		pha		                PHA             ; begin setdp macro
.397135		08		php		                PHP
.397136		c2 20		rep #$20	                REP #$20        ; set A long
.397138		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39713b		5b		tcd		                TCD
.39713c		28		plp		                PLP
.39713d		68		pla		                PLA             ; end setdp macro
.39713e		c2 30		rep #$30	                REP #$30        ; set A&X long
.397140		a5 65		lda $65		                LDA EVID_COLS_PER_LINE
.397142		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.397146		a5 67		lda $67		                LDA EVID_LINES_VISIBLE
.397148		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39714c		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.397150		85 79		sta $79		                STA EVID_TMPPTR1
.397152		18		clc		                CLC
.397153		a9 00 20	lda #$2000	                LDA #$2000
.397156		a8		tay		                TAY
.397157		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.397159		aa		tax		                TAX
.39715a		a5 79		lda $79		                LDA EVID_TMPPTR1
.39715c		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.39715f		c2 30		rep #$30	                REP #$30        ; set A&X long
.397161		18		clc		                CLC
.397162		a9 00 40	lda #$4000	                LDA #$4000
.397165		a8		tay		                TAY
.397166		65 65		adc $65		                ADC EVID_COLS_PER_LINE
.397168		aa		tax		                TAX
.397169		a5 79		lda $79		                LDA EVID_TMPPTR1
.39716b		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.39716e		a5 79		lda $79		                LDA EVID_TMPPTR1
.397170		48		pha		                PHA
.397171		18		clc		                CLC
.397172		69 00 20	adc #$2000	                ADC #<>EVID_TEXT_MEM
.397175		85 79		sta $79		                STA EVID_TMPPTR1
.397177		a0 00 00	ldy #$0000	                LDY #0
.39717a		a9 20 00	lda #$0020	                LDA #' '
.39717d		97 79		sta [$79],y	clr_text        STA [EVID_TMPPTR1],Y
.39717f		c8		iny		                INY
.397180		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.397182		d0 f9		bne $39717d	                BNE clr_text
.397184		68		pla		                PLA
.397185		18		clc		                CLC
.397186		69 00 40	adc #$4000	                ADC #<>EVID_COLOR_MEM
.397189		85 79		sta $79		                STA EVID_TMPPTR1
.39718b		a0 00 00	ldy #$0000	                LDY #0
.39718e		a5 72		lda $72		                LDA EVID_CURCOLOR
.397190		97 79		sta [$79],y	clr_color       STA [EVID_TMPPTR1],Y
.397192		c8		iny		                INY
.397193		c4 63		cpy $63		                CPY EVID_COLS_VISIBLE
.397195		d0 f9		bne $397190	                BNE clr_color
.397197		28		plp		                PLP
.397198		2b		pld		                PLD
.397199		ab		plb		                PLB
.39719a		7a		ply		                PLY
.39719b		fa		plx		                PLX
.39719c		68		pla		                PLA
.39719d		6b		rtl		                RTL
.39719e						EVID_IPRINTH
.39719e		08		php		                PHP
.39719f		48		pha		                PHA
.3971a0						iprinth1
.3971a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3971a2		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.3971a5		4a		lsr a		                LSR
.3971a6		4a		lsr a		                LSR
.3971a7		4a		lsr a		                LSR
.3971a8		4a		lsr a		                LSR
.3971a9		22 f8 71 39	jsl $3971f8	                JSL EVID_iprint_digit
.3971ad		bd 00 00	lda $0000,x	                LDA #0,b,x
.3971b0		22 f8 71 39	jsl $3971f8	                JSL EVID_iprint_digit
.3971b4		ca		dex		                DEX
.3971b5		88		dey		                DEY
.3971b6		d0 e8		bne $3971a0	                BNE iprinth1
.3971b8		68		pla		                PLA
.3971b9		28		plp		                PLP
.3971ba		6b		rtl		                RTL
.3971bb						EVID_IPRINTAH
.3971bb		48		pha		                PHA
.3971bc		08		php		                PHP
.3971bd		8f 44 02 00	sta $000244	                STA @lCPUA              ; Save A where we can use it multiple times
.3971c1		08		php		                PHP                     ; Get the processor status into A
.3971c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3971c4		c2 10		rep #$10	                REP #$10        ; set X long
.3971c6		68		pla		                PLA
.3971c7		29 20		and #$20	                AND #%00100000          ; Is M = 1?
.3971c9		c9 20		cmp #$20	                CMP #%00100000
.3971cb		f0 14		beq $3971e1	                BEQ eight_bit
.3971cd		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [15..12]
.3971d1		4a		lsr a		                LSR A
.3971d2		4a		lsr a		                LSR A
.3971d3		4a		lsr a		                LSR A
.3971d4		4a		lsr a		                LSR A
.3971d5		22 f8 71 39	jsl $3971f8	                JSL EVID_iprint_digit   ; And print it
.3971d9		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [11..8]
.3971dd		22 f8 71 39	jsl $3971f8	                JSL EVID_iprint_digit   ; And print it
.3971e1		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA              ; Get nibble [7..4]
.3971e5		4a		lsr a		                LSR A
.3971e6		4a		lsr a		                LSR A
.3971e7		4a		lsr a		                LSR A
.3971e8		4a		lsr a		                LSR A
.3971e9		22 f8 71 39	jsl $3971f8	                JSL EVID_iprint_digit   ; And print it
.3971ed		af 44 02 00	lda $000244	                LDA @lCPUA              ; Get nibble [3..0]
.3971f1		22 f8 71 39	jsl $3971f8	                JSL EVID_iprint_digit   ; And print it
.3971f5		28		plp		                PLP
.3971f6		68		pla		                PLA
.3971f7		6b		rtl		                RTL
.3971f8						EVID_iprint_digit
.3971f8		da		phx		                PHX
.3971f9		c2 20		rep #$20	                REP #$20        ; set A long
.3971fb		29 0f 00	and #$000f	                AND #$0F
.3971fe		aa		tax		                TAX
.3971ff		bf a7 81 39	lda $3981a7,x	                LDA hex_digits,X
.397203		22 a5 6e 39	jsl $396ea5	                JSL EVID_IPUTC       ; Print the digit
.397207		fa		plx		                PLX
.397208		6b		rtl		                RTL
.397209						INIT_EVID_VID_MODE
.397209		e2 20		sep #$20	                SEP #$20        ; set A short
.39720b		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable          ; 0 - 80x60, 1- 100x75
.39720d		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.397211		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable           ; Enable the Border
.397213		8f 04 1e ae	sta $ae1e04	                STA EVID_BORDER_CTRL_REG
.397217		a9 08		lda #$08	                LDA #8                           ; Set the border to the standard 8 pixels
.397219		8f 08 1e ae	sta $ae1e08	                STA EVID_BORDER_X_SIZE          ; Let's use maximum space
.39721d		8f 09 1e ae	sta $ae1e09	                STA EVID_BORDER_Y_SIZE
.397221		a9 20		lda #$20	                LDA #$20
.397223		8f 07 1e ae	sta $ae1e07	                STA EVID_BORDER_COLOR_R        ; R
.397227		a9 00		lda #$00	                LDA #$00
.397229		8f 06 1e ae	sta $ae1e06	                STA EVID_BORDER_COLOR_G        ; G
.39722d		a9 20		lda #$20	                LDA #$20
.39722f		8f 05 1e ae	sta $ae1e05	                STA EVID_BORDER_COLOR_B        ; B
.397233		22 05 73 39	jsl $397305	                JSL INIT_EVID_EVID_LUT
.397237		22 ee 72 39	jsl $3972ee	                JSL INIT_EVID_EVID_FONTSET
.39723b		22 29 73 39	jsl $397329	                JSL INIT_EVID_EVID_CURSOR
.39723f		c2 30		rep #$30	                REP #$30        ; set A&X long
.397241		a2 62 00	ldx #$0062	                LDX #(100-2)
.397244		86 63		stx $63		                STX EVID_COLS_VISIBLE
.397246		a0 49 00	ldy #$0049	                LDY #(75-2)
.397249		84 67		sty $67		                STY EVID_LINES_VISIBLE
.39724b		a2 64 00	ldx #$0064	                LDX #100
.39724e		86 65		stx $65		                STX EVID_COLS_PER_LINE
.397250		a0 4b 00	ldy #$004b	                LDY #75
.397253		84 69		sty $69		                STY EVID_LINES_MAX
.397255		a9 f0 00	lda #$00f0	                LDA #$F0                  ; Set the default text color to light gray on dark gray
.397258		85 72		sta $72		                STA EVID_CURCOLOR
.39725a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39725c		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM      ; store the initial screen buffer location
.39725f		85 60		sta $60		                STA EVID_SCREENBEGIN
.397261		85 6b		sta $6b		                STA EVID_CURSORPOS
.397263		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM   ; Set the initial COLOR cursor position
.397266		85 76		sta $76		                STA EVID_COLORPOS
.397268		e2 20		sep #$20	                SEP #$20        ; set A short
.39726a		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.39726c		85 0e		sta $0e		                STA SCREENBEGIN + 2
.39726e		85 6d		sta $6d		                STA EVID_CURSORPOS+2
.397270		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM    ; Set the initial COLOR cursor position
.397272		85 78		sta $78		                STA EVID_COLORPOS + 2
.397274		22 47 73 39	jsl $397347	                JSL INIT_EVID_EVID_CLRSCREEN
.397278		c2 10		rep #$10	                REP #$10        ; set X long
.39727a		0b		phd		                PHD
.39727b		48		pha		                PHA             ; begin setdbr macro
.39727c		08		php		                PHP
.39727d		e2 20		sep #$20	                SEP #$20        ; set A short
.39727f		a9 39		lda #$39	                LDA #`EVID_DEV_RDY0
.397281		48		pha		                PHA
.397282		ab		plb		                PLB
.397283		28		plp		                PLP
.397284		68		pla		                PLA             ; end setdbr macro
.397285		a2 a6 72	ldx #$72a6	                LDX #<>EVID_DEV_RDY0
.397288		22 85 6e 39	jsl $396e85	                JSL EVID_IPRINT
.39728c		a2 d6 72	ldx #$72d6	                LDX #<>EVID_DEV_RDY1
.39728f		22 85 6e 39	jsl $396e85	                JSL EVID_IPRINT
.397293		2b		pld		                PLD
.397294		a2 00 00	ldx #$0000	                LDX #$0000
.397297						LifeIsFullOfColors:
.397297		bf cc 72 39	lda $3972cc,x	                LDA @l EVID_DEV_RDY0_CLR, X
.39729b		9f 00 40 ae	sta $ae4000,x	                STA @l EVID_COLOR_MEM, X
.39729f		e8		inx		                INX
.3972a0		e0 0a 00	cpx #$000a	                CPX #10
.3972a3		d0 f2		bne $397297	                BNE LifeIsFullOfColors
.3972a5		6b		rtl		                RTL
>3972a6		0b 0c 0b 0c 0b 0c 0b 0c		EVID_DEV_RDY0  .null $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "C256 Foenix EXP-C200-EVID", $0D
>3972ae		0b 0c 20 43 32 35 36 20 46 6f 65 6e 69 78 20 45
>3972be		58 50 2d 43 32 30 30 2d 45 56 49 44 0d 00
>3972cc		1d 1d 8d 8d 4d 4d 2d 2d		EVID_DEV_RDY0_CLR .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>3972d4		5d 5d
>3972d6		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1  .null "Your Device is Ready..."
>3972de		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
=100						TXTLINESIZE = 100
.3972ee						INIT_EVID_EVID_FONTSET
.3972ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3972f0		c2 10		rep #$10	                REP #$10        ; set X long
.3972f2		a2 00 00	ldx #$0000	                LDX #$0000
.3972f5						initFontsetbranch0
.3972f5		bf 00 00 3f	lda $3f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.3972f9		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X ; Vicky FONT RAM Bank
.3972fd		e8		inx		                INX
.3972fe		e0 00 08	cpx #$0800	                CPX #$0800
.397301		d0 f2		bne $3972f5	                BNE initFontsetbranch0
.397303		ea		nop		                NOP
.397304		6b		rtl		                RTL
.397305						INIT_EVID_EVID_LUT
.397305		e2 20		sep #$20	                SEP #$20        ; set A short
.397307		e2 10		sep #$10	                SEP #$10        ; set X short
.397309		a2 00		ldx #$00					        LDX	#$00
.39730b		bf d6 7e 39	lda $397ed6,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data c64_character_Color_LUT_4_Txt
.39730f		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	; Write in LUT Memory
.397313		e8		inx		                inx
.397314		e0 40		cpx #$40	                cpx #$40
.397316		d0 f3		bne $39730b	                bne lutinitloop0
.397318		a2 00		ldx #$00	                LDX	#$00
.39731a		bf 16 7f 39	lda $397f16,x	lutinitloop1	LDA @lbg_color_lut,x		; get Local Data
.39731e		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	; Write in LUT Memory
.397322		e8		inx		                INX
.397323		e0 40		cpx #$40	                CPX #$40
.397325		d0 f3		bne $39731a	                bne lutinitloop1
.397327		ea		nop		                NOP
.397328		6b		rtl		                RTL
.397329						INIT_EVID_EVID_CURSOR
.397329		e2 20		sep #$20	                SEP #$20        ; set A short
.39732b		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.39732d		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.397331		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0)      ;Set Cursor Enable And Flash Rate @1Hz
.397333		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG ;
.397337		c2 30		rep #$30	                REP #$30        ; set A&X long
.397339		a9 00 00	lda #$0000	                LDA #$0000;
.39733c		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L ;; // Set the X to Position 1
.397340		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L ; // Set the Y to Position 6 (Below)
.397344		e2 20		sep #$20	                SEP #$20        ; set A short
.397346		6b		rtl		                RTL
.397347						INIT_EVID_EVID_CLRSCREEN
.397347		e2 20		sep #$20	                SEP #$20        ; set A short
.397349		c2 10		rep #$10	                REP #$10        ; set X long
.39734b		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.39734e		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.397350		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA EVID_TEXT_MEM, x	;
.397354		e8		inx		                inx
.397355		e0 00 20	cpx #$2000	                cpx #$2000
.397358		d0 f6		bne $397350	                bne iclearloop0
.39735a		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.39735d		a9 f0		lda #$f0	                LDA #$F0		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.39735f		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA EVID_COLOR_MEM, x	;
.397363		e8		inx		                inx
.397364		e0 00 20	cpx #$2000	                cpx #$2000
.397367		d0 f6		bne $39735f	                bne iclearloop1
.397369		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						STATE               .byte ?     ; State of the escape code parser
>001e						CONTROL             .byte ?     ; Control bit
>001f						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0020						ARG0                .byte ?     ; First ANSI code argument
>0021						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.39736a						ANSI_TEST
.39736a		8b		phb		                    PHB
.39736b		0b		phd		                    PHD
.39736c		08		php		                    PHP
.39736d		48		pha		                PHA             ; begin setdbr macro
.39736e		08		php		                PHP
.39736f		e2 20		sep #$20	                SEP #$20        ; set A short
.397371		a9 39		lda #$39	                LDA #`ANSI_TEST
.397373		48		pha		                PHA
.397374		ab		plb		                PLB
.397375		28		plp		                PLP
.397376		68		pla		                PLA             ; end setdbr macro
.397377		20 35 76	jsr $397635	                    JSR INIT_SCREENS
.39737a		e2 20		sep #$20	                SEP #$20        ; set A short
.39737c		c2 10		rep #$10	                REP #$10        ; set X long
.39737e		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Switch to the main screen
.397380		22 3c 10 00	jsl $00103c	                    JSL SETOUT
.397384		20 d9 7c	jsr $397cd9	                    JSR ANSI_CLR                    ; And clear it
.397387		a2 00 00	ldx #$0000	                    LDX #0
.39738a		e2 20		sep #$20	                SEP #$20        ; set A short
.39738c		bd bd 73	lda $3973bd,x	loop0               LDA @w test_message0,X          ; Print the message for the main screen
.39738f		f0 1f		beq $3973b0	                    BEQ done
.397391		20 2f 78	jsr $39782f	                    JSR ANSI_PUTC
.397394		e8		inx		                    INX
.397395		80 f5		bra $39738c	                    BRA loop0
.397397						send1
.397397		e2 20		sep #$20	                SEP #$20        ; set A short
.397399		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Switch to the EVID screen
.39739b		22 3c 10 00	jsl $00103c	                    JSL SETOUT
.39739f		20 d9 7c	jsr $397cd9	                    JSR ANSI_CLR                    ; And clear it
.3973a2		a2 00 00	ldx #$0000	                    LDX #0
.3973a5		bd bd 73	lda $3973bd,x	loop1               LDA @w test_message0,X          ; Print the message for the EVID screen
.3973a8		f0 06		beq $3973b0	                    BEQ done
.3973aa		20 2f 78	jsr $39782f	                    JSR ANSI_PUTC
.3973ad		e8		inx		                    INX
.3973ae		80 f5		bra $3973a5	                    BRA loop1
.3973b0						done
.3973b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3973b2		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; And switch back to the main screen
.3973b4		22 3c 10 00	jsl $00103c	                    JSL SETOUT
.3973b8		00		brk #		                    BRK
.3973b9		28		plp		                    PLP
.3973ba		2b		pld		                    PLD
.3973bb		ab		plb		                    PLB
.3973bc		6b		rtl		                    RTL
>3973bd		1b 5b 30 6d 1b 5b 48 30		test_message0       .text CHAR_ESC,"[0m",CHAR_ESC,"[H0",CHAR_ESC,"[8C1",CHAR_ESC,"[8C2",CHAR_ESC,"[8C3"
>3973c5		1b 5b 38 43 31 1b 5b 38 43 32 1b 5b 38 43 33
>3973d4		1b 5b 31 3b 32 48 30 31		                    .text CHAR_ESC,"[1;2H0123456789012345678901234567890"
>3973dc		32 33 34 35 36 37 38 39 30 31 32 33 34 35 36 37
>3973ec		38 39 30 31 32 33 34 35 36 37 38 39 30
>3973f9		1b 5b 31 3b 33 48 1b 5b		                    .text CHAR_ESC,"[1;3H",CHAR_ESC,"[30mBLACK"
>397401		33 30 6d 42 4c 41 43 4b
>397409		1b 5b 31 3b 34 48 1b 5b		                    .text CHAR_ESC,"[1;4H",CHAR_ESC,"[31mRED"
>397411		33 31 6d 52 45 44
>397417		1b 5b 31 3b 35 48 1b 5b		                    .text CHAR_ESC,"[1;5H",CHAR_ESC,"[32mGREEN"
>39741f		33 32 6d 47 52 45 45 4e
>397427		1b 5b 31 3b 36 48 1b 5b		                    .text CHAR_ESC,"[1;6H",CHAR_ESC,"[33mYELLOW"
>39742f		33 33 6d 59 45 4c 4c 4f 57
>397438		1b 5b 31 3b 37 48 1b 5b		                    .text CHAR_ESC,"[1;7H",CHAR_ESC,"[34mBLUE"
>397440		33 34 6d 42 4c 55 45
>397447		1b 5b 31 3b 38 48 1b 5b		                    .text CHAR_ESC,"[1;8H",CHAR_ESC,"[35mMAGENTA"
>39744f		33 35 6d 4d 41 47 45 4e 54 41
>397459		1b 5b 31 3b 39 48 1b 5b		                    .text CHAR_ESC,"[1;9H",CHAR_ESC,"[36mCYAN"
>397461		33 36 6d 43 59 41 4e
>397468		1b 5b 31 3b 31 30 48 1b		                    .text CHAR_ESC,"[1;10H",CHAR_ESC,"[37mWHITE"
>397470		5b 33 37 6d 57 48 49 54 45
>397479		1b 5b 32 30 3b 33 48 1b		                    .text CHAR_ESC,"[20;3H",CHAR_ESC,"[40mBLACK"
>397481		5b 34 30 6d 42 4c 41 43 4b
>39748a		1b 5b 32 30 3b 34 48 1b		                    .text CHAR_ESC,"[20;4H",CHAR_ESC,"[41mRED"
>397492		5b 34 31 6d 52 45 44
>397499		1b 5b 32 30 3b 35 48 1b		                    .text CHAR_ESC,"[20;5H",CHAR_ESC,"[42mGREEN"
>3974a1		5b 34 32 6d 47 52 45 45 4e
>3974aa		1b 5b 32 30 3b 36 48 1b		                    .text CHAR_ESC,"[20;6H",CHAR_ESC,"[43mYELLOW"
>3974b2		5b 34 33 6d 59 45 4c 4c 4f 57
>3974bc		1b 5b 32 30 3b 37 48 1b		                    .text CHAR_ESC,"[20;7H",CHAR_ESC,"[44mBLUE"
>3974c4		5b 34 34 6d 42 4c 55 45
>3974cc		1b 5b 32 30 3b 38 48 1b		                    .text CHAR_ESC,"[20;8H",CHAR_ESC,"[45mMAGENTA"
>3974d4		5b 34 35 6d 4d 41 47 45 4e 54 41
>3974df		1b 5b 32 30 3b 39 48 1b		                    .text CHAR_ESC,"[20;9H",CHAR_ESC,"[46mCYAN"
>3974e7		5b 34 36 6d 43 59 41 4e
>3974ef		1b 5b 32 30 3b 31 30 48		                    .text CHAR_ESC,"[20;10H",CHAR_ESC,"[47m",CHAR_ESC,"[30mWHITE",CHAR_ESC,"[49m"
>3974f7		1b 5b 34 37 6d 1b 5b 33 30 6d 57 48 49 54 45 1b
>397507		5b 34 39 6d
>39750b		1b 5b 31 6d			                    .text CHAR_ESC,"[1m"
>39750f		1b 5b 31 30 3b 33 48 1b		                    .text CHAR_ESC,"[10;3H",CHAR_ESC,"[30mBLACK"
>397517		5b 33 30 6d 42 4c 41 43 4b
>397520		1b 5b 31 30 3b 34 48 1b		                    .text CHAR_ESC,"[10;4H",CHAR_ESC,"[31mRED"
>397528		5b 33 31 6d 52 45 44
>39752f		1b 5b 31 30 3b 35 48 1b		                    .text CHAR_ESC,"[10;5H",CHAR_ESC,"[32mGREEN"
>397537		5b 33 32 6d 47 52 45 45 4e
>397540		1b 5b 31 30 3b 36 48 1b		                    .text CHAR_ESC,"[10;6H",CHAR_ESC,"[33mYELLOW"
>397548		5b 33 33 6d 59 45 4c 4c 4f 57
>397552		1b 5b 31 30 3b 37 48 1b		                    .text CHAR_ESC,"[10;7H",CHAR_ESC,"[34mBLUE"
>39755a		5b 33 34 6d 42 4c 55 45
>397562		1b 5b 31 30 3b 38 48 1b		                    .text CHAR_ESC,"[10;8H",CHAR_ESC,"[35mMAGENTA"
>39756a		5b 33 35 6d 4d 41 47 45 4e 54 41
>397575		1b 5b 31 30 3b 39 48 1b		                    .text CHAR_ESC,"[10;9H",CHAR_ESC,"[36mCYAN"
>39757d		5b 33 36 6d 43 59 41 4e
>397585		1b 5b 31 30 3b 31 30 48		                    .text CHAR_ESC,"[10;10H",CHAR_ESC,"[37mWHITE",CHAR_ESC,"[0m"
>39758d		1b 5b 33 37 6d 57 48 49 54 45 1b 5b 30 6d
>39759b		1b 5b 31 3b 31 35 48 30		                    .text CHAR_ESC,"[1;15H012345678901234567890123456789"       ; Erase from cursor to end of line
>3975a3		31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36
>3975b3		37 38 39 30 31 32 33 34 35 36 37 38 39
>3975c0		1b 5b 31 30 3b 31 35 48		                    .text CHAR_ESC,"[10;15H",CHAR_ESC,"[K"
>3975c8		1b 5b 4b
>3975cb		1b 5b 31 3b 31 36 48 30		                    .text CHAR_ESC,"[1;16H012345678901234567890123456789"       ; Erase from cursor to beginning of line
>3975d3		31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36
>3975e3		37 38 39 30 31 32 33 34 35 36 37 38 39
>3975f0		1b 5b 31 30 3b 31 36 48		                    .text CHAR_ESC,"[10;16H",CHAR_ESC,"[1K"
>3975f8		1b 5b 31 4b
>3975fc		1b 5b 31 3b 31 37 48 30		                    .text CHAR_ESC,"[1;17H012345678901234567890123456789"       ; Erase entire line
>397604		31 32 33 34 35 36 37 38 39 30 31 32 33 34 35 36
>397614		37 38 39 30 31 32 33 34 35 36 37 38 39
>397621		1b 5b 31 30 3b 31 37 48		                    .text CHAR_ESC,"[10;17H",CHAR_ESC,"[2K"
>397629		1b 5b 32 4b
>39762d		1b 5b 31 3b 32 30 48		                    .text CHAR_ESC,"[1;20H"
>397634		00				                    .byte 0
.397635						INIT_SCREENS
.397635		da		phx		                    PHX
.397636		5a		phy		                    PHY
.397637		8b		phb		                    PHB
.397638		0b		phd		                    PHD
.397639		08		php		                    PHP
.39763a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39763c		a0 00 00	ldy #$0000	                    LDY #0
.39763f		20 e9 76	jsr $3976e9	                    JSR INIT_SCREEN_Y               ; Set up the main screen
.397642		e2 20		sep #$20	                SEP #$20        ; set A short
.397644		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.397648		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.39764a		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.39764c		d0 1b		bne $397669	                    BNE no_evid
.39764e		c2 20		rep #$20	                REP #$20        ; set A long
.397650		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.397654		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.397657		d0 10		bne $397669	                    BNE no_evid                     ; No: mark the EVID screen as not present
.397659		e2 20		sep #$20	                SEP #$20        ; set A short
.39765b		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.39765d		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.397661		a0 01 00	ldy #$0001	                    LDY #1
.397664		20 e9 76	jsr $3976e9	                    JSR INIT_SCREEN_Y               ; Initialize the EVID screen variables
.397667		80 08		bra $397671	                    BRA set_luts
.397669						no_evid
.397669		e2 20		sep #$20	                SEP #$20        ; set A short
.39766b		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.39766d		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.397671		20 7a 76	jsr $39767a	set_luts            JSR ANSI_INIT_LUTS              ; Initialize the color look up tables
.397674		28		plp		done                PLP
.397675		2b		pld		                    PLD
.397676		ab		plb		                    PLB
.397677		7a		ply		                    PLY
.397678		fa		plx		                    PLX
.397679		60		rts		                    RTS
.39767a						ANSI_INIT_LUTS
.39767a		08		php		                    PHP
.39767b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39767d		a2 00		ldx #$00	                    LDX #0
.39767f		bd a9 76	lda $3976a9,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.397682		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.397686		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.39768a		e8		inx		                    INX
.39768b		e0 40		cpx #$40	                    CPX #4*16
.39768d		d0 f0		bne $39767f	                    BNE vicky_loop
.39768f		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.397693		f0 12		beq $3976a7	                    BEQ done                        ; If not, we're done
.397695		a2 00		ldx #$00	                    LDX #0
.397697		bd a9 76	lda $3976a9,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.39769a		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.39769e		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.3976a2		e8		inx		                    INX
.3976a3		e0 40		cpx #$40	                    CPX #4*16
.3976a5		d0 f0		bne $397697	                    BNE evid_loop
.3976a7		28		plp		done                PLP
.3976a8		60		rts		                    RTS
.3976a9						ANSI_TEXT_LUT
>3976a9		00 00 00 00			                    .byte 0, 0, 0, 0
>3976ad		00 00 80 00			                    .byte 0, 0, 128, 0
>3976b1		00 80 00 00			                    .byte 0, 128, 0, 0
>3976b5		00 80 80 00			                    .byte 0, 128, 128, 0
>3976b9		80 00 00 00			                    .byte 128, 0, 0, 0
>3976bd		80 00 80 00			                    .byte 128, 0, 128, 0
>3976c1		80 80 00 00			                    .byte 128, 128, 0, 0
>3976c5		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>3976c9		80 80 80 00			                    .byte 128, 128, 128, 0
>3976cd		00 00 ff 00			                    .byte 0, 0, 255, 0
>3976d1		00 ff 00 00			                    .byte 0, 255, 0, 0
>3976d5		00 ff ff 00			                    .byte 0, 255, 255, 0
>3976d9		ff 00 00 00			                    .byte 255, 0, 0, 0
>3976dd		ff 00 ff 00			                    .byte 255, 0, 255, 0
>3976e1		ff ff 00 00			                    .byte 255, 255, 0, 0
>3976e5		ff ff ff 00			                    .byte 255, 255, 255, 0
.3976e9						INIT_SCREEN_Y
.3976e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3976eb		c0 00 00	cpy #$0000	                    CPY #0
.3976ee		f0 06		beq $3976f6	                    BEQ setdp_0
.3976f0		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.3976f3		5b		tcd		                    TCD
.3976f4		80 04		bra $3976fa	                    BRA set_addresses
.3976f6		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.3976f9		5b		tcd		                    TCD
.3976fa		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.3976fb		0a		asl a		                    ASL A
.3976fc		0a		asl a		                    ASL A
.3976fd		aa		tax		                    TAX
.3976fe		bf 38 77 39	lda $397738,x	                    LDA @l text_address,X
.397702		85 00		sta $00		                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.397704		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.397706		e2 20		sep #$20	                SEP #$20        ; set A short
.397708		bf 3a 77 39	lda $39773a,x	                    LDA @l text_address+2,X
.39770c		85 02		sta $02		                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.39770e		85 0d		sta $0d		                    STA #S_ANSI_VARS.CURSORPOS+2,D
.397710		c2 20		rep #$20	                REP #$20        ; set A long
.397712		bf 40 77 39	lda $397740,x	                    LDA @l color_address,X
.397716		85 16		sta $16		                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.397718		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.39771a		e2 20		sep #$20	                SEP #$20        ; set A short
.39771c		bf 42 77 39	lda $397742,x	                    LDA @l color_address+2,X
.397720		85 18		sta $18		                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.397722		85 15		sta $15		                    STA #S_ANSI_VARS.COLORPOS+2,D
.397724		c2 20		rep #$20	                REP #$20        ; set A long
.397726		64 0e		stz $0e		                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.397728		64 10		stz $10		                    STZ #S_ANSI_VARS.CURSORY,D
.39772a		e2 20		sep #$20	                SEP #$20        ; set A short
.39772c		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.39772e		64 1e		stz $1e		                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.397730		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.397732		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.397734		20 48 77	jsr $397748	                    JSR ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.397737		60		rts		                    RTS
>397738		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>397740		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.397748						ANSI_SETSIZE_Y
.397748		08		php		                    PHP
.397749		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39774b		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.39774d		f0 06		beq $397755	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.39774f		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.397753		80 04		bra $397759	                    BRA resolution
.397755		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.397759		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.39775b		0a		asl a		                    ASL A
.39775c		aa		tax		                    TAX                                 ; Index to the col/line count in X
.39775d		c2 20		rep #$20	                REP #$20        ; set A long
.39775f		bd f9 77	lda $3977f9,x	                    LDA cols_by_res,X                   ; Get the number of columns
.397762		85 05		sta $05		                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.397764		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.397766		bd 01 78	lda $397801,x	                    LDA lines_by_res,X                  ; Get the number of lines
.397769		85 09		sta $09		                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.39776b		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.39776d		e2 20		sep #$20	                SEP #$20        ; set A short
.39776f		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.397771		f0 06		beq $397779	                    BEQ vky_border                      ; Yes: get the border from Vicky
.397773		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.397777		80 04		bra $39777d	                    BRA border
.397779		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.39777d		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.39777f		f0 76		beq $3977f7	                    BEQ done                            ; No border... the sizes are correct now
.397781		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.397783		f0 06		beq $39778b	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.397785		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.397789		80 04		bra $39778f	                    BRA border_size
.39778b		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.39778f		29 3f		and #$3f	border_size         AND #$3F
.397791		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.397793		d0 04		bne $397799	                    BNE frac_width
.397795		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.397796		4a		lsr a		                    LSR A
.397797		80 03		bra $39779c	                    BRA store_width
.397799		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.39779a		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.39779b		1a		inc a		                    INC A
.39779c		85 19		sta $19		store_width         STA #S_ANSI_VARS.TMPPTR1,D
.39779e		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.3977a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3977a2		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.3977a4		f0 0c		beq $3977b2	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.3977a6		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.3977aa		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.3977ac		f0 04		beq $3977b2	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.3977ae		c2 20		rep #$20	                REP #$20        ; set A long
.3977b0		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.3977b2						adjust_width
.3977b2		c2 20		rep #$20	                REP #$20        ; set A long
.3977b4		38		sec		                    SEC
.3977b5		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.3977b7		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.3977b9		85 03		sta $03		                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.3977bb		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.3977bd		f0 06		beq $3977c5	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.3977bf		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the vertical border width from EVID
.3977c3		80 04		bra $3977c9	                    BRA border_y_size
.3977c5		af c9 77 39	lda $3977c9	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.3977c9		29 3f 00	and #$003f	border_y_size       AND #$3F
.3977cc		89 03 00	bit #$0003	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.3977cf		d0 04		bne $3977d5	                    BNE frac_height
.3977d1		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.3977d2		4a		lsr a		                    LSR A
.3977d3		80 03		bra $3977d8	                    BRA store_height
.3977d5		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.3977d6		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.3977d7		1a		inc a		                    INC A
.3977d8		85 19		sta $19		store_height        STA #S_ANSI_VARS.TMPPTR1,D
.3977da		64 1a		stz $1a		                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.3977dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3977de		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.3977e0		f0 0c		beq $3977ee	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.3977e2		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.3977e6		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.3977e8		f0 04		beq $3977ee	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.3977ea		c2 20		rep #$20	                REP #$20        ; set A long
.3977ec		46 19		lsr $19		                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.3977ee						adjust_height
.3977ee		c2 20		rep #$20	                REP #$20        ; set A long
.3977f0		38		sec		                    SEC
.3977f1		a5 09		lda $09		                    LDA #S_ANSI_VARS.LINES_MAX,D
.3977f3		e5 19		sbc $19		                    SBC #S_ANSI_VARS.TMPPTR1,D
.3977f5		85 07		sta $07		                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.3977f7		28		plp		done                PLP
.3977f8		60		rts		                    RTS
>3977f9		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>397801		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.397809						ANSI_SETDEVICE
.397809		48		pha		                    PHA
.39780a		08		php		                    PHP
.39780b		e2 20		sep #$20	                SEP #$20        ; set A short
.39780d		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.397811		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.397813		f0 08		beq $39781d	                    BEQ console                     ; Yes: point to the console
.397815		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.397817		f0 0b		beq $397824	                    BEQ evid                        ; Check to see if the EVID is present
.397819		28		plp		bad_device          PLP
.39781a		68		pla		                    PLA
.39781b		38		sec		                    SEC
.39781c		60		rts		                    RTS
.39781d						console
.39781d		c2 20		rep #$20	                REP #$20        ; set A long
.39781f		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.397822		80 06		bra $39782a	                    BRA set_dp
.397824		ea		nop		evid                NOP
.397825		c2 20		rep #$20	                REP #$20        ; set A long
.397827		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.39782a		5b		tcd		set_dp              TCD
.39782b		28		plp		                    PLP
.39782c		68		pla		                    PLA
.39782d		18		clc		                    CLC
.39782e		60		rts		                    RTS
.39782f						ANSI_PUTC
.39782f		da		phx		                    PHX
.397830		5a		phy		                    PHY
.397831		0b		phd		                    PHD
.397832		08		php		                    PHP
.397833		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397835		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.397838		90 03		bcc $39783d	                    BCC get_state               ; If valid, check the current state
.39783a		82 86 00	brl $3978c3	                    BRL done                    ; If invalid, just return
.39783d		a6 1d		ldx $1d		get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.39783f		f0 0c		beq $39784d	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.397841		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.397843		f0 1e		beq $397863	                    BEQ do_st_escape
.397845		e0 02		cpx #$02	                    CPX #ST_CSI
.397847		f0 2a		beq $397873	                    BEQ do_st_csi
.397849		64 1d		stz $1d		pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.39784b		80 06		bra $397853	                    BRA print_raw
.39784d		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.39784f		f0 07		beq $397858	                    BEQ go_escape               ; Yes, handle the ESC
.397851		90 0b		bcc $39785e	                    BLT do_control              ; If less than, handle as a control code
.397853		20 9b 79	jsr $39799b	print_raw           JSR ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.397856		80 6b		bra $3978c3	                    BRA done
.397858		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.39785a		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.39785c		80 65		bra $3978c3	                    BRA done
.39785e		20 5a 79	jsr $39795a	do_control          JSR ANSI_PR_CONTROL         ; Hand a single byte control code
.397861		80 60		bra $3978c3	                    BRA done
.397863		c9 5b		cmp #$5b	do_st_escape        CMP #'['                    ; Have we gotten 'ESC['?
.397865		d0 e2		bne $397849	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.397867		64 20		stz $20		                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.397869		64 21		stz $21		                    STZ #S_ANSI_VARS.ARG1,D
.39786b		64 1f		stz $1f		                    STZ #S_ANSI_VARS.ARGC,D
.39786d		a9 02		lda #$02	                    LDA #ST_CSI
.39786f		85 1d		sta $1d		                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.397871		80 50		bra $3978c3	                    BRA done
.397873		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.397875		90 1d		bcc $397894	                    BLT csi_not_digit
.397877		c9 3a		cmp #$3a	                    CMP #'9'+1
.397879		b0 19		bcs $397894	                    BGE csi_not_digit
.39787b		38		sec		                    SEC                         ; Have digit... convert to a number
.39787c		e9 30		sbc #$30	                    SBC #'0'
.39787e		48		pha		                    PHA                         ; Save it
.39787f		a6 1f		ldx $1f		                    LDX #S_ANSI_VARS.ARGC,D
.397881		16 20		asl $20,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.397883		b5 20		lda $20,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.397885		0a		asl a		                    ASL A                       ; A := arg * 4
.397886		0a		asl a		                    ASL A                       ; A := arg * 8
.397887		18		clc		                    CLC
.397888		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.39788a		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.39788c		18		clc		                    CLC
.39788d		68		pla		                    PLA                         ; Get the digit back
.39788e		75 20		adc $20,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.397890		95 20		sta $20,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.397892		80 2f		bra $3978c3	                    BRA done                    ; And we're done with this particular character
.397894		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.397896		d0 0e		bne $3978a6	                    BNE csi_not_sep
.397898		a5 1f		lda $1f		                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.39789a		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.39789c		d0 03		bne $3978a1	                    BNE csi_next_arg            ; No: move to the next argument
.39789e		82 a8 ff	brl $397849	                    BRL pr_and_reset            ; Yes: print and reset state
.3978a1		1a		inc a		csi_next_arg        INC A
.3978a2		85 1f		sta $1f		                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.3978a4		80 1d		bra $3978c3	                    BRA done                    ; And we're done with this character
.3978a6		c9 41		cmp #$41	csi_not_sep         CMP #'A'
.3978a8		90 09		bcc $3978b3	                    BLT csi_not_upper
.3978aa		c9 5b		cmp #$5b	                    CMP #'Z'+1
.3978ac		b0 05		bcs $3978b3	                    BGE csi_not_upper
.3978ae		20 d2 78	jsr $3978d2	                    JSR ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.3978b1		80 10		bra $3978c3	                    BRA done
.3978b3		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.3978b5		90 09		bcc $3978c0	                    BLT csi_not_lower
.3978b7		c9 7b		cmp #$7b	                    CMP #'z'+1
.3978b9		b0 05		bcs $3978c0	                    BGE csi_not_lower
.3978bb		20 17 79	jsr $397917	                    JSR ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.3978be		80 03		bra $3978c3	                    BRA done
.3978c0		82 86 ff	brl $397849	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.3978c3		28		plp		done                PLP
.3978c4		2b		pld		                    PLD
.3978c5		7a		ply		                    PLY
.3978c6		fa		plx		                    PLX
.3978c7		60		rts		                    RTS
.3978c8						ANSI_INVALID
.3978c8		08		php		                    PHP
.3978c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3978cb		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.3978cd		20 9b 79	jsr $39799b	                    JSR ANSI_PUTRAWC            ; Print the character
.3978d0		28		plp		                    PLP
.3978d1		60		rts		                    RTS
.3978d2						ANSI_ANSI_UPPER
.3978d2		08		php		                    PHP
.3978d3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3978d5		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.3978d7		38		sec		                    SEC
.3978d8		e9 40		sbc #$40	                    SBC #'@'
.3978da		0a		asl a		                    ASL A
.3978db		aa		tax		                    TAX
.3978dc		fc e1 78	jsr ($3978e1,x)	                    JSR (ansi_table,X)
.3978df		28		plp		                    PLP
.3978e0		60		rts		                    RTS
>3978e1		c8 78				ansi_table          .word <>ANSI_INVALID    ; '@' -- ICH -- Insert Character
>3978e3		b4 79				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>3978e5		c6 79				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>3978e7		d6 79				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>3978e9		e6 79				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>3978eb		c8 78				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>3978ed		c8 78				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>3978ef		c8 78				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>3978f1		f6 79				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>3978f3		c8 78				                    .word <>ANSI_INVALID    ; 'I'
>3978f5		fa 7a				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>3978f7		3d 7b				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>3978f9		c8 78				                    .word <>ANSI_INVALID    ; 'L'
>3978fb		c8 78				                    .word <>ANSI_INVALID    ; 'M'
>3978fd		c8 78				                    .word <>ANSI_INVALID    ; 'N'
>3978ff		c8 78				                    .word <>ANSI_INVALID    ; 'O'
>397901		c8 78				                    .word <>ANSI_INVALID    ; 'P' -- DCH -- Delete Character
>397903		c8 78				                    .word <>ANSI_INVALID    ; 'Q'
>397905		c8 78				                    .word <>ANSI_INVALID    ; 'R'
>397907		c8 78				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>397909		c8 78				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>39790b		c8 78				                    .word <>ANSI_INVALID    ; 'U'
>39790d		c8 78				                    .word <>ANSI_INVALID    ; 'V'
>39790f		c8 78				                    .word <>ANSI_INVALID    ; 'W'
>397911		c8 78				                    .word <>ANSI_INVALID    ; 'X'
>397913		c8 78				                    .word <>ANSI_INVALID    ; 'Y'
>397915		c8 78				                    .word <>ANSI_INVALID    ; 'Z'
.397917						ANSI_ANSI_LOWER
.397917		08		php		                    PHP
.397918		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39791a		64 1d		stz $1d		                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.39791c		38		sec		                    SEC
.39791d		e9 61		sbc #$61	                    SBC #'a'
.39791f		0a		asl a		                    ASL A
.397920		aa		tax		                    TAX
.397921		fc 26 79	jsr ($397926,x)	                    JSR (ansi_table,X)
.397924		28		plp		                    PLP
.397925		60		rts		                    RTS
>397926		c8 78				ansi_table          .word <>ANSI_INVALID    ; 'a'
>397928		c8 78				                    .word <>ANSI_INVALID    ; 'b'
>39792a		c8 78				                    .word <>ANSI_INVALID    ; 'c'
>39792c		c8 78				                    .word <>ANSI_INVALID    ; 'd'
>39792e		c8 78				                    .word <>ANSI_INVALID    ; 'e'
>397930		c8 78				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>397932		c8 78				                    .word <>ANSI_INVALID    ; 'g'
>397934		c8 78				                    .word <>ANSI_INVALID    ; 'h'
>397936		c8 78				                    .word <>ANSI_INVALID    ; 'i'
>397938		c8 78				                    .word <>ANSI_INVALID    ; 'j'
>39793a		c8 78				                    .word <>ANSI_INVALID    ; 'k'
>39793c		c8 78				                    .word <>ANSI_INVALID    ; 'l'
>39793e		0e 7a				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>397940		c8 78				                    .word <>ANSI_INVALID    ; 'n'
>397942		c8 78				                    .word <>ANSI_INVALID    ; 'o'
>397944		c8 78				                    .word <>ANSI_INVALID    ; 'p'
>397946		c8 78				                    .word <>ANSI_INVALID    ; 'q'
>397948		c8 78				                    .word <>ANSI_INVALID    ; 'r'
>39794a		c8 78				                    .word <>ANSI_INVALID    ; 's'
>39794c		c8 78				                    .word <>ANSI_INVALID    ; 't'
>39794e		c8 78				                    .word <>ANSI_INVALID    ; 'u'
>397950		c8 78				                    .word <>ANSI_INVALID    ; 'v'
>397952		c8 78				                    .word <>ANSI_INVALID    ; 'w'
>397954		c8 78				                    .word <>ANSI_INVALID    ; 'x'
>397956		c8 78				                    .word <>ANSI_INVALID    ; 'y'
>397958		c8 78				                    .word <>ANSI_INVALID    ; 'z'
.39795a						ANSI_PR_CONTROL
.39795a		08		php		                    PHP
.39795b		e2 20		sep #$20	                SEP #$20        ; set A short
.39795d		c2 10		rep #$10	                REP #$10        ; set X long
.39795f		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.397961		f0 0e		beq $397971	                    BEQ do_cr
.397963		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.397965		f0 15		beq $39797c	                    BEQ do_lf
.397967		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.397969		f0 16		beq $397981	                    BEQ do_bs
.39796b		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.39796d		f0 17		beq $397986	                    BEQ do_tab
.39796f		80 28		bra $397999	                    BRA done
.397971		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.397974		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397976		c8		iny		                    INY
.397977		20 0e 7c	jsr $397c0e	                    JSR ANSI_LOCATE
.39797a		80 1d		bra $397999	                    BRA done
.39797c		20 ee 7b	jsr $397bee	do_lf               JSR ANSI_CSRDOWN            ; Move the cursor down a line
.39797f		80 18		bra $397999	                    BRA done
.397981		20 b6 7b	jsr $397bb6	do_bs               JSR ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.397984		80 13		bra $397999	                    BRA done
.397986						do_tab
.397986		c2 20		rep #$20	                REP #$20        ; set A long
.397988		a5 0e		lda $0e		                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.39798a		29 f7 ff	and #$fff7	                    AND #$FFF7
.39798d		18		clc		                    CLC
.39798e		69 08 00	adc #$0008	                    ADC #$0008
.397991		aa		tax		                    TAX
.397992		e2 20		sep #$20	                SEP #$20        ; set A short
.397994		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397996		20 0e 7c	jsr $397c0e	                    JSR ANSI_LOCATE
.397999		28		plp		done                PLP
.39799a		60		rts		                    RTS
.39799b						ANSI_PUTRAWC
.39799b		da		phx		                    PHX
.39799c		5a		phy		                    PHY
.39799d		0b		phd		                    PHD
.39799e		08		php		                    PHP
.39799f		e2 20		sep #$20	                SEP #$20        ; set A short
.3979a1		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE              ; Look at the current output channel and point
.3979a4		b0 09		bcs $3979af	                    BCS done                        ; If invalid, just return
.3979a6		87 0b		sta [$0b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.3979a8		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.3979aa		87 13		sta [$13]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.3979ac		20 8e 7b	jsr $397b8e	                    JSR ANSI_CSRRIGHT              ; And advance the cursor
.3979af		28		plp		done                PLP
.3979b0		2b		pld		                    PLD
.3979b1		7a		ply		                    PLY
.3979b2		fa		plx		                    PLX
.3979b3		60		rts		                    RTS
.3979b4						ANSI_CUU
.3979b4		08		php		                    PHP
.3979b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3979b7		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3979b9		1a		inc a		                    INC A
.3979ba		a9 01		lda #$01	default             LDA #1                          ; Otherwise: treat it as 1
.3979bc		48		pha		loop                PHA                             ; Save the count
.3979bd		20 d2 7b	jsr $397bd2	                    JSR ANSI_CSRUP                  ; Cursor Up
.3979c0		68		pla		                    PLA                             ; Restore the count
.3979c1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3979c2		d0 f8		bne $3979bc	                    BNE loop
.3979c4		28		plp		                    PLP
.3979c5		60		rts		                    RTS
.3979c6						ANSI_CUD
.3979c6		08		php		                    PHP
.3979c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3979c9		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3979cb		1a		inc a		                    INC A
.3979cc		48		pha		loop                PHA                             ; Save the count
.3979cd		20 ee 7b	jsr $397bee	                    JSR ANSI_CSRDOWN                ; Cursor Down
.3979d0		68		pla		                    PLA                             ; Restore the count
.3979d1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3979d2		d0 f8		bne $3979cc	                    BNE loop
.3979d4		28		plp		                    PLP
.3979d5		60		rts		                    RTS
.3979d6						ANSI_CUF
.3979d6		08		php		                    PHP
.3979d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3979d9		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3979db		1a		inc a		                    INC A
.3979dc		48		pha		loop                PHA                             ; Save the count
.3979dd		20 8e 7b	jsr $397b8e	                    JSR ANSI_CSRRIGHT               ; Cursor right
.3979e0		68		pla		                    PLA                             ; Restore the count
.3979e1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3979e2		d0 f8		bne $3979dc	                    BNE loop
.3979e4		28		plp		                    PLP
.3979e5		60		rts		                    RTS
.3979e6						ANSI_CUB
.3979e6		08		php		                    PHP
.3979e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3979e9		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3979eb		1a		inc a		                    INC A
.3979ec		48		pha		loop                PHA                             ; Save the count
.3979ed		20 b6 7b	jsr $397bb6	                    JSR ANSI_CSRLEFT                ; Cursor left
.3979f0		68		pla		                    PLA                             ; Restore the count
.3979f1		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.3979f2		d0 f8		bne $3979ec	                    BNE loop
.3979f4		28		plp		                    PLP
.3979f5		60		rts		                    RTS
.3979f6						ANSI_CUP
.3979f6		08		php		                    PHP
.3979f7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3979f9		a6 20		ldx $20		                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.3979fb		d0 02		bne $3979ff	                    BNE get_row
.3979fd		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.3979ff		a4 21		ldy $21		get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.397a01		d0 02		bne $397a05	                    BNE adjust_coords
.397a03		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.397a05		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.397a06		88		dey		                    DEY
.397a07		c2 30		rep #$30	                REP #$30        ; set A&X long
.397a09		20 0e 7c	jsr $397c0e	                    JSR ANSI_LOCATE                 ; Set the cursor position
.397a0c		28		plp		                    PLP
.397a0d		60		rts		                    RTS
.397a0e						ANSI_SGR
.397a0e		08		php		                    PHP
.397a0f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397a11		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397a13		d0 0d		bne $397a22	                    BNE chk_1
.397a15		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.397a17		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397a19		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.397a1b		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.397a1d		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.397a1f		82 d6 00	brl $397af8	                    BRL done
.397a22		c9 01		cmp #$01	chk_1               CMP #1
.397a24		d0 0f		bne $397a35	                    BNE chk_2
.397a26		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.397a28		09 80		ora #$80	                    ORA #$80
.397a2a		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397a2c		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.397a2e		09 40		ora #$40	                    ORA #CONTROL_BOLD
.397a30		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.397a32		82 c3 00	brl $397af8	                    BRL done
.397a35		c9 02		cmp #$02	chk_2               CMP #2
.397a37		f0 04		beq $397a3d	                    BEQ normal_intensity
.397a39		c9 16		cmp #$16	chk_22              CMP #22
.397a3b		d0 0f		bne $397a4c	                    BNE chk_7
.397a3d		a5 12		lda $12		normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.397a3f		29 7f		and #$7f	                    AND #~$80
.397a41		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397a43		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.397a45		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.397a47		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.397a49		82 ac 00	brl $397af8	                    BRL done
.397a4c		c9 07		cmp #$07	chk_7               CMP #7
.397a4e		d0 2c		bne $397a7c	                    BNE chk_27
.397a50		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.397a52		89 80		bit #$80	                    BIT #CONTROL_INVERT
.397a54		f0 03		beq $397a59	                    BEQ invert_on
.397a56		82 9f 00	brl $397af8	                    BRL done                        ; Yes: just finish
.397a59		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.397a5b		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.397a5d		a5 12		lda $12		swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.397a5f		0a		asl a		                    ASL  A
.397a60		69 80		adc #$80	                    ADC  #$80
.397a62		2a		rol a		                    ROL  A
.397a63		0a		asl a		                    ASL  A
.397a64		69 80		adc #$80	                    ADC  #$80
.397a66		2a		rol a		                    ROL  A
.397a67		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.397a69		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397a6b		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.397a6d		89 40		bit #$40	                    BIT #CONTROL_BOLD
.397a6f		d0 03		bne $397a74	                    BNE bold_on
.397a71		82 84 00	brl $397af8	                    BRL done                        ; No: we're done
.397a74		a5 12		lda $12		bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.397a76		09 80		ora #$80	                    ORA #$80
.397a78		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397a7a		80 7c		bra $397af8	                    BRA done
.397a7c		c9 1b		cmp #$1b	chk_27              CMP #27
.397a7e		d0 0c		bne $397a8c	                    BNE chk_39
.397a80		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.397a82		89 80		bit #$80	                    BIT #CONTROL_INVERT
.397a84		f0 72		beq $397af8	                    BEQ done                        ; No: just finish
.397a86		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.397a88		85 1e		sta $1e		                    STA #S_ANSI_VARS.CONTROL,D
.397a8a		80 d1		bra $397a5d	                    BRA swap_colors                 ; And go swap the colors
.397a8c		c9 27		cmp #$27	chk_39              CMP #39
.397a8e		d0 10		bne $397aa0	                    BNE chk_49
.397a90		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397a92		29 0f		and #$0f	                    AND #$0F
.397a94		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397a96		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.397a98		29 f0		and #$f0	                    AND #$F0
.397a9a		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397a9c		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397a9e		80 58		bra $397af8	                    BRA done
.397aa0		c9 31		cmp #$31	chk_49              CMP #49
.397aa2		d0 10		bne $397ab4	                    BNE chk_foreground
.397aa4		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397aa6		29 f0		and #$f0	                    AND #$F0
.397aa8		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397aaa		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.397aac		29 0f		and #$0f	                    AND #$0F
.397aae		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397ab0		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397ab2		80 44		bra $397af8	                    BRA done
.397ab4		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.397ab6		90 29		bcc $397ae1	                    BLT chk_background
.397ab8		c9 26		cmp #$26	                    CMP #38
.397aba		b0 25		bcs $397ae1	                    BGE chk_background
.397abc		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397abe		29 0f		and #$0f	                    AND #$0F
.397ac0		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397ac2		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.397ac4		38		sec		                    SEC
.397ac5		e9 1e		sbc #$1e	                    SBC #30
.397ac7		0a		asl a		                    ASL A
.397ac8		0a		asl a		                    ASL A
.397ac9		0a		asl a		                    ASL A
.397aca		0a		asl a		                    ASL A
.397acb		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397acd		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397acf		a5 1e		lda $1e		                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.397ad1		89 40		bit #$40	                    BIT #CONTROL_BOLD
.397ad3		d0 03		bne $397ad8	                    BNE bold_fore                   ; No: we're done
.397ad5		82 20 00	brl $397af8	                    BRL done
.397ad8		a5 12		lda $12		bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.397ada		09 80		ora #$80	                    ORA #$80
.397adc		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397ade		82 17 00	brl $397af8	                    BRL done
.397ae1		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.397ae3		90 13		bcc $397af8	                    BLT done
.397ae5		c9 30		cmp #$30	                    CMP #48
.397ae7		b0 0f		bcs $397af8	                    BGE done
.397ae9		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397aeb		29 f0		and #$f0	                    AND #$F0
.397aed		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397aef		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D
.397af1		38		sec		                    SEC
.397af2		e9 28		sbc #$28	                    SBC #40
.397af4		05 12		ora $12		                    ORA #S_ANSI_VARS.CURCOLOR,D
.397af6		85 12		sta $12		                    STA #S_ANSI_VARS.CURCOLOR,D
.397af8		28		plp		done                PLP
.397af9		60		rts		                    RTS
.397afa						ANSI_ED
.397afa		5a		phy		                    PHY
.397afb		08		php		                    PHP
.397afc		e2 20		sep #$20	                SEP #$20        ; set A short
.397afe		c2 10		rep #$10	                REP #$10        ; set X long
.397b00		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397b02		d0 0f		bne $397b13	                    BNE not_0                       ; Is the code 0?
.397b04						code_0
.397b04		a9 20		lda #$20	                    LDA #' '
.397b06		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.397b08		97 0c		sta [$0c],y	code_0_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.397b0a		c8		iny		                    INY                             ; Go to the next position
.397b0b		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.397b0e		d0 f8		bne $397b08	                    BNE code_0_loop                 ; No: keep going
.397b10		82 27 00	brl $397b3a	                    BRL done
.397b13		c9 01		cmp #$01	not_0               CMP #1                          ; Is the code 1?
.397b15		d0 0e		bne $397b25	                    BNE not_1
.397b17						code_1
.397b17		a9 20		lda #$20	                    LDA #' '
.397b19		a4 17		ldy $17		                    LDY #CURSORPOS,D                ; Start with the cursor's position
.397b1b		97 0c		sta [$0c],y	code_1_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.397b1d		88		dey		                    DEY                             ; Go to the previous position
.397b1e		d0 fb		bne $397b1b	                    BNE code_1_loop
.397b20		97 0c		sta [$0c],y	                    STA [#SCREENBEGIN,D],Y          ; Clear the first cell
.397b22		82 15 00	brl $397b3a	                    BRL done
.397b25		c9 02		cmp #$02	not_1               CMP #2                          ; Is the code 2 or 3?
.397b27		f0 04		beq $397b2d	                    BEQ code_2_3
.397b29		c9 03		cmp #$03	                    CMP #3
.397b2b		d0 0d		bne $397b3a	                    BNE done                        ; No: just ignore the sequence
.397b2d						code_2_3
.397b2d		a9 20		lda #$20	                    LDA #' '
.397b2f		a0 00 00	ldy #$0000	                    LDY #0                          ; Start with the cursor's position
.397b32		97 0c		sta [$0c],y	code_2_3_loop       STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.397b34		c8		iny		                    INY                             ; Go to the next position
.397b35		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.397b38		d0 ce		bne $397b08	                    BNE code_0_loop                 ; No: keep going
.397b3a		28		plp		done                PLP
.397b3b		7a		ply		                    PLY
.397b3c		60		rts		                    RTS
.397b3d						ANSI_EL
.397b3d		da		phx		                    PHX
.397b3e		5a		phy		                    PHY
.397b3f		08		php		                    PHP
.397b40		c2 30		rep #$30	                REP #$30        ; set A&X long
.397b42		38		sec		                    SEC
.397b43		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.397b45		e5 0e		sbc $0e		                    SBC #S_ANSI_VARS.CURSORX,D
.397b47		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.397b49		e2 20		sep #$20	                SEP #$20        ; set A short
.397b4b		a5 02		lda $02		                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.397b4d		85 1b		sta $1b		                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.397b4f		a5 20		lda $20		                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.397b51		d0 0e		bne $397b61	                    BNE not_0                           ; Is the code 0?
.397b53						code_0
.397b53		a9 20		lda #$20	                    LDA #' '
.397b55		a4 0e		ldy $0e		                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.397b57		97 19		sta [$19],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.397b59		c8		iny		                    INY
.397b5a		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.397b5c		d0 f9		bne $397b57	                    BNE code_0_loop                     ; No: keep looping
.397b5e		82 29 00	brl $397b8a	                    BRL done
.397b61		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.397b63		d0 11		bne $397b76	                    BNE not_1
.397b65						code_1
.397b65		a9 20		lda #$20	                    LDA #' '
.397b67		a0 00 00	ldy #$0000	                    LDY #0
.397b6a		97 19		sta [$19],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.397b6c		c8		iny		                    INY
.397b6d		c4 0e		cpy $0e		                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.397b6f		d0 f9		bne $397b6a	                    BNE code_1_loop                     ; No: keep looping
.397b71		97 19		sta [$19],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.397b73		82 14 00	brl $397b8a	                    BRL done
.397b76		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.397b78		f0 04		beq $397b7e	                    BEQ code_2_3
.397b7a		c9 03		cmp #$03	                    CMP #3
.397b7c		d0 0c		bne $397b8a	                    BNE done                            ; No: just ignore the sequence
.397b7e						code_2_3
.397b7e		a9 20		lda #$20	                    LDA #' '
.397b80		a0 00 00	ldy #$0000	                    LDY #0
.397b83		97 19		sta [$19],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.397b85		c8		iny		                    INY
.397b86		c4 05		cpy $05		                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.397b88		d0 f9		bne $397b83	                    BNE code_2_3_loop                   ; No: keep looping
.397b8a		28		plp		done                PLP
.397b8b		7a		ply		                    PLY
.397b8c		fa		plx		                    PLX
.397b8d		60		rts		                    RTS
.397b8e						ANSI_CSRRIGHT
.397b8e		da		phx		                    PHX
.397b8f		5a		phy		                    PHY
.397b90		0b		phd		                    PHD
.397b91		08		php		                    PHP
.397b92		c2 30		rep #$30	                REP #$30        ; set A&X long
.397b94		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE                  ; Look at the current output channel and point
.397b97		b0 18		bcs $397bb1	                    BCS done                            ; If invalid, just return
.397b99		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.397b9b		e8		inx		                    INX
.397b9c		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.397b9e		e4 03		cpx $03		                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.397ba0		90 0c		bcc $397bae	                    BCC nowrap                          ; No: just set the position
.397ba2		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.397ba5		c8		iny		                    INY                                 ; And move to the next row
.397ba6		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.397ba8		90 04		bcc $397bae	                    BCC nowrap                          ; No: just set the position
.397baa		88		dey		                    DEY                                 ; Yes: lock to the last row
.397bab		20 70 7c	jsr $397c70	                    JSR ANSI_SCROLLUP                   ; But scroll the screen up
.397bae		20 0e 7c	jsr $397c0e	nowrap              JSR ANSI_LOCATE                     ; Set the cursor position
.397bb1		28		plp		done                PLP
.397bb2		2b		pld		                    PLD
.397bb3		7a		ply		                    PLY
.397bb4		fa		plx		                    PLX
.397bb5		60		rts		                    RTS
.397bb6						ANSI_CSRLEFT
.397bb6		da		phx		                    PHX
.397bb7		5a		phy		                    PHY
.397bb8		0b		phd		                    PHD
.397bb9		08		php		                    PHP
.397bba		c2 30		rep #$30	                REP #$30        ; set A&X long
.397bbc		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.397bbf		b0 0c		bcs $397bcd	                    BCS done                    ; If invalid, just return
.397bc1		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.397bc3		f0 08		beq $397bcd	                    BEQ done                    ; If so, just ignore this call
.397bc5		ca		dex		                    DEX
.397bc6		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.397bc8		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397bca		20 0e 7c	jsr $397c0e	                    JSR ANSI_LOCATE
.397bcd		28		plp		done                PLP
.397bce		2b		pld		                    PLD
.397bcf		7a		ply		                    PLY
.397bd0		fa		plx		                    PLX
.397bd1		60		rts		                    RTS
.397bd2						ANSI_CSRUP
.397bd2		da		phx		                    PHX
.397bd3		5a		phy		                    PHY
.397bd4		0b		phd		                    PHD
.397bd5		08		php		                    PHP
.397bd6		c2 30		rep #$30	                REP #$30        ; set A&X long
.397bd8		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.397bdb		b0 0c		bcs $397be9	                    BCS done                    ; If invalid, just return
.397bdd		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.397bdf		f0 08		beq $397be9	                    BEQ done                    ; If we are, just ignore the call
.397be1		88		dey		                    DEY
.397be2		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.397be4		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D
.397be6		20 0e 7c	jsr $397c0e	                    JSR ANSI_LOCATE
.397be9		28		plp		done                PLP
.397bea		2b		pld		                    PLD
.397beb		7a		ply		                    PLY
.397bec		fa		plx		                    PLX
.397bed		60		rts		                    RTS
.397bee						ANSI_CSRDOWN
.397bee		da		phx		                    PHX
.397bef		5a		phy		                    PHY
.397bf0		0b		phd		                    PHD
.397bf1		08		php		                    PHP
.397bf2		c2 30		rep #$30	                REP #$30        ; set A&X long
.397bf4		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE                  ; Look at the current output channel and point
.397bf7		b0 10		bcs $397c09	                    BCS done                            ; If invalid, just return
.397bf9		a6 0e		ldx $0e		                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.397bfb		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.397bfd		c8		iny		                    INY
.397bfe		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.397c00		90 04		bcc $397c06	                    BCC noscroll                        ; No: go ahead and set the position
.397c02		88		dey		                    DEY                                 ; Yes: go back to the last row
.397c03		20 70 7c	jsr $397c70	                    JSR ANSI_SCROLLUP                   ; But scroll the screen up
.397c06		20 0e 7c	jsr $397c0e	noscroll            JSR ANSI_LOCATE                     ; And set the cursor position
.397c09		28		plp		done                PLP
.397c0a		2b		pld		                    PLD
.397c0b		7a		ply		                    PLY
.397c0c		fa		plx		                    PLX
.397c0d		60		rts		                    RTS
.397c0e						ANSI_LOCATE
.397c0e		da		phx		                    PHX
.397c0f		5a		phy		                    PHY
.397c10		0b		phd		                    PHD
.397c11		08		php		                    PHP
.397c12		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.397c15		b0 54		bcs $397c6b	                    BCS done                    ; If invalid, just return
.397c17		c2 30		rep #$30	                REP #$30        ; set A&X long
.397c19						locate_scroll
.397c19		c4 07		cpy $07		                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.397c1b		90 06		bcc $397c23	                    BCC locate_scrolldone
.397c1d		20 70 7c	jsr $397c70	                    JSR ANSI_SCROLLUP
.397c20		88		dey		                    DEY
.397c21		80 f6		bra $397c19	                    BRA locate_scroll
.397c23						locate_scrolldone
.397c23		86 0e		stx $0e		                    STX #S_ANSI_VARS.CURSORX,D
.397c25		84 10		sty $10		                    STY #S_ANSI_VARS.CURSORY,D
.397c27		a5 00		lda $00		                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.397c29						locate_row
.397c29		c0 00 00	cpy #$0000	                    CPY #$0
.397c2c		f0 08		beq $397c36	                    BEQ locate_right
.397c2e		18		clc		locate_down         CLC
.397c2f		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.397c31		88		dey		                    DEY
.397c32		f0 02		beq $397c36	                    BEQ locate_right
.397c34		80 f8		bra $397c2e	                    BRA locate_down
.397c36		18		clc		locate_right        CLC
.397c37		65 0e		adc $0e		                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.397c39		85 0b		sta $0b		                    STA #S_ANSI_VARS.CURSORPOS,D
.397c3b		a4 10		ldy $10		                    LDY #S_ANSI_VARS.CURSORY,D
.397c3d		e2 20		sep #$20	                SEP #$20        ; set A short
.397c3f		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.397c43		c9 04		cmp #$04	                    CMP #CHAN_EVID
.397c45		f0 0e		beq $397c55	                    beq locate_evid
.397c47		c2 20		rep #$20	                REP #$20        ; set A long
.397c49		98		tya		                    TYA
.397c4a		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.397c4e		8a		txa		                    TXA
.397c4f		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.397c53		80 0c		bra $397c61	                    BRA update_colorpos
.397c55						locate_evid
.397c55		c2 20		rep #$20	                REP #$20        ; set A long
.397c57		98		tya		                    TYA
.397c58		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.397c5c		8a		txa		                    TXA
.397c5d		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.397c61						update_colorpos
.397c61		c2 20		rep #$20	                REP #$20        ; set A long
.397c63		18		clc		                    CLC
.397c64		a5 0b		lda $0b		                    LDA #S_ANSI_VARS.CURSORPOS,D
.397c66		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.397c69		85 13		sta $13		                    STA #S_ANSI_VARS.COLORPOS,D
.397c6b		28		plp		done                PLP
.397c6c		2b		pld		                    PLD
.397c6d		7a		ply		                    PLY
.397c6e		fa		plx		                    PLX
.397c6f		60		rts		                    RTS
.397c70						ANSI_SCROLLUP
.397c70		da		phx		                    PHX
.397c71		5a		phy		                    PHY
.397c72		8b		phb		                    PHB
.397c73		0b		phd		                    PHD
.397c74		08		php		                    PHP
.397c75		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.397c78		b0 59		bcs $397cd3	                    BCS done                    ; If invalid, just return
.397c7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.397c7c		a5 05		lda $05		                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.397c7e		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.397c82		a5 07		lda $07		                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.397c84		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.397c88		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.397c8c		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.397c8e		18		clc		                    CLC
.397c8f		a9 00 20	lda #$2000	                    LDA #$2000
.397c92		a8		tay		                    TAY
.397c93		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.397c95		aa		tax		                    TAX
.397c96		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.397c98		54 ae ae	mvn $ae,$ae	                    MVN $AE,$AE
.397c9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.397c9d		18		clc		                    CLC
.397c9e		a9 00 40	lda #$4000	                    LDA #$4000
.397ca1		a8		tay		                    TAY
.397ca2		65 05		adc $05		                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.397ca4		aa		tax		                    TAX
.397ca5		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.397ca7		54 ae ae	mvn $ae,$ae	                    MVN $AE,$AE
.397caa						vicky_lastline
.397caa		c2 20		rep #$20	                REP #$20        ; set A long
.397cac		a5 19		lda $19		                    LDA #S_ANSI_VARS.TMPPTR1,D
.397cae		48		pha		                    PHA
.397caf		18		clc		                    CLC
.397cb0		65 00		adc $00		                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.397cb2		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.397cb4		a0 00 00	ldy #$0000	start_clear         LDY #0
.397cb7		a9 20 00	lda #$0020	                    LDA #' '
.397cba		97 19		sta [$19],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.397cbc		c8		iny		                    INY
.397cbd		c4 0f		cpy $0f		                    CPY #COLS_VISIBLE,D
.397cbf		d0 f9		bne $397cba	                    BNE clr_text
.397cc1		68		pla		vicky_lastcolor     PLA
.397cc2		18		clc		                    CLC
.397cc3		65 16		adc $16		                    ADC #S_ANSI_VARS.COLORBEGIN,D
.397cc5		85 19		sta $19		                    STA #S_ANSI_VARS.TMPPTR1,D
.397cc7		a0 00 00	ldy #$0000	start_color         LDY #0
.397cca		a5 12		lda $12		                    LDA #S_ANSI_VARS.CURCOLOR,D
.397ccc		97 19		sta [$19],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.397cce		c8		iny		                    INY
.397ccf		c4 03		cpy $03		                    CPY #S_ANSI_VARS.COLS_VISIBLE,D
.397cd1		d0 f9		bne $397ccc	                    BNE clr_color
.397cd3		28		plp		done                PLP
.397cd4		2b		pld		                    PLD
.397cd5		ab		plb		                    PLB
.397cd6		7a		ply		                    PLY
.397cd7		fa		plx		                    PLX
.397cd8		60		rts		                    RTS
.397cd9						ANSI_CLR
.397cd9		da		phx		                    PHX
.397cda		5a		phy		                    PHY
.397cdb		0b		phd		                    PHD
.397cdc		08		php		                    PHP
.397cdd		20 09 78	jsr $397809	                    JSR ANSI_SETDEVICE          ; Look at the current output channel and point
.397ce0		b0 1e		bcs $397d00	                    BCS done                    ; If invalid, just return
.397ce2		e2 20		sep #$20	                SEP #$20        ; set A short
.397ce4		c2 10		rep #$10	                REP #$10        ; set X long
.397ce6		a0 00 00	ldy #$0000	                    LDY #0
.397ce9		a9 20		lda #$20	                    LDA #$20		            ; Fill the Entire Screen with Space
.397ceb		97 00		sta [$00],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.397ced		c8		iny		                    INY
.397cee		c0 00 20	cpy #$2000	                    CPY #$2000
.397cf1		d0 f8		bne $397ceb	                    BNE iclearloop0
.397cf3		a0 00 00	ldy #$0000	                    LDY	#0
.397cf6		a5 1e		lda $1e		                    LDA #CURCOLOR,D             ; Fill the current color
.397cf8		97 16		sta [$16],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.397cfa		c8		iny		                    INY
.397cfb		c0 00 20	cpy #$2000	                    CPY #$2000
.397cfe		d0 f8		bne $397cf8	                    BNE evid_clearloop1
.397d00		28		plp		done                PLP
.397d01		2b		pld		                    PLD
.397d02		7a		ply		                    PLY
.397d03		fa		plx		                    PLX
.397d04		60		rts		                    RTS

;******  Return to file: src\kernel.asm

.397d05						    KERNEL_DATA
>397d05		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU   +" ,$0D
>397d0d		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20
>397d1d		20 20 2b 0d
>397d21		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU   +",$0D
>397d29		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20 20
>397d39		20 2b 0d
>397d3c		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU +++++",$0D
>397d44		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 20 2b 2b
>397d54		2b 2b 2b 0d
>397d58		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU   +",$0D
>397d60		0c 0b 0c 20 55 55 20 20 20 20 55 55 20 20 20 2b
>397d70		0d
>397d71		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU   +",$0D
>397d79		0b 0c 20 55 55 55 55 55 55 55 55 20 20 20 2b 0d
>397d89		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U+ -- 3,670,016 Bytes Free", $0D
>397d91		45 4e 49 58 20 55 2b 20 2d 2d 20 33 2c 36 37 30
>397da1		2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65 0d
>397db1		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: March 13th, 2021",$0D
>397db9		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>397dc9		6e 65 6c 20 44 61 74 65 3a 20 4d 61 72 63 68 20
>397dd9		31 33 74 68 2c 20 32 30 32 31 0d

;******  Processing file: src\version.asm

>397de4		76 30 2e 33 2e 30 2d 61		.text "v0.3.0-alpha+1636 (2021-04-30)"
>397dec		6c 70 68 61 2b 31 36 33 36 20 28 32 30 32 31 2d
>397dfc		30 34 2d 33 30 29

;******  Return to file: src\kernel.asm

>397e02		0d 00				                .text $0D,$00
>397e04		1d 1d 1d 1d 1d 1d 8d 8d		  greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397e0c		4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>397e1c		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397e2c		fd fd
>397e2e		1d 1d 1d 1d 1d 8d 8d 4d		  greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397e36		4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>397e46		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397e56		fd fd
>397e58		1d 1d 1d 1d 8d 8d 4d 4d		  greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397e60		2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>397e70		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397e80		fd fd
>397e82		1d 1d 1d 8d 8d 4d 4d 2d		  greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397e8a		2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>397e9a		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397eaa		fd fd
>397eac		1d 1d 8d 8d 4d 4d 2d 2d		  greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397eb4		5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397ec4		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397ed4		fd fd
>397ed6		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>397eda		00 00 80 ff			                .text $00, $00, $80, $FF
>397ede		00 80 00 ff			                .text $00, $80, $00, $FF
>397ee2		80 00 00 ff			                .text $80, $00, $00, $FF
>397ee6		00 80 80 ff			                .text $00, $80, $80, $FF
>397eea		80 80 00 ff			                .text $80, $80, $00, $FF
>397eee		80 00 80 ff			                .text $80, $00, $80, $FF
>397ef2		80 80 80 ff			                .text $80, $80, $80, $FF
>397ef6		00 45 ff ff			                .text $00, $45, $FF, $FF
>397efa		13 45 8b ff			                .text $13, $45, $8B, $FF
>397efe		00 00 20 ff			                .text $00, $00, $20, $FF
>397f02		00 20 00 ff			                .text $00, $20, $00, $FF
>397f06		20 00 00 ff			                .text $20, $00, $00, $FF
>397f0a		20 20 20 ff			                .text $20, $20, $20, $FF
>397f0e		40 40 40 ff			                .text $40, $40, $40, $FF
>397f12		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397f16		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>397f1a		00 00 80 ff			                .text $00, $00, $80, $FF
>397f1e		00 80 00 ff			                .text $00, $80, $00, $FF
>397f22		80 00 00 ff			                .text $80, $00, $00, $FF
>397f26		00 20 20 ff			                .text $00, $20, $20, $FF
>397f2a		20 20 00 ff			                .text $20, $20, $00, $FF
>397f2e		20 00 20 ff			                .text $20, $00, $20, $FF
>397f32		20 20 20 ff			                .text $20, $20, $20, $FF
>397f36		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>397f3a		13 45 8b ff			                .text $13, $45, $8B, $FF
>397f3e		00 00 20 ff			                .text $00, $00, $20, $FF
>397f42		00 20 00 ff			                .text $00, $20, $00, $FF
>397f46		40 00 00 ff			                .text $40, $00, $00, $FF
>397f4a		10 10 10 ff			                .text $10, $10, $10, $FF
>397f4e		40 40 40 ff			                .text $40, $40, $40, $FF
>397f52		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397f56		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>397f5e		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397f6e		00
>397f6f		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>397f77		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>397f87		00
>397f88		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>397f90		20 45 78 65 63 75 74 65 64 2e 0d 00
>397f9c		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>397fa4		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>397fb4		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>397fbc		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>397fcc		64 2e 2e 2e 0d 00
>397fd2		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>397fda		20 50 72 65 73 65 6e 74 0d 00
>397fe4		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>397fec		65 73 65 6e 74 0d 00
>397ff3		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>397ffb		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>39800b		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>39801b		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>398023		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>398033		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>398040		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>398048		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>398054		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>39805c		54 55 52 45 20 46 4f 55 4e 44 2e 00
>398068		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>398070		45 44 2e 00
>398074		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>39807c		47 20 42 4d 50 20 50 41 52 53 45 52 00
>398089		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>398091		50 72 65 73 65 6e 74 3a 00
>39809a		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>3980a2		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>3980b2		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>3980c0		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>3980c8		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>3980d8		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>3980e5		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>3980ed		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>3980fd		72 64 2e 00
>398101		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>398109		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398119		49 44 45 20 64 72 69 76 65 2e 00
>398124		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>39812c		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>39813c		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>39814a		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>398152		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>398161		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>398169		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>398178		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>398180		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>398190		2e 2e 00
>398193		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>39819b		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3981a3		52 4f 52 00
>3981a7		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3981af		38 39 41 42 43 44 45 46 00
>3981b8						.align 256
>398200		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398208		37 38 39 30 2d 3d 08 09
>398210		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398218		6f 70 5b 5d 0d 00 61 73
>398220		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398228		27 60 00 5c 7a 78 63 76
>398230		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>398238		00 20 00 81 82 83 84 85
>398240		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>398248		11 00 00 9d 00 1d 00 00
>398250		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>398258		8c 00 00 00 00 00 00 00
>398260		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398268		00 00 00 00 00 00 00 00
>398270		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398278		00 00 00 00 00 00 00 00
>398280		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>398288		26 2a 28 29 5f 2b 08 09
>398290		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>398298		4f 50 7b 7d 0d 00 41 53
>3982a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>3982a8		22 7e 00 7c 5a 58 43 56
>3982b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3982b8		00 20 00 00 00 00 00 00
>3982c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3982c8		00 00 00 00 00 00 00 00
>3982d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3982d8		00 00 00 00 00 00 00 00
>3982e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3982e8		00 00 00 00 00 00 00 00
>3982f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3982f8		00 00 00 00 00 00 00 00
>398300		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398308		37 38 39 30 2d 3d 08 09
>398310		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>398318		0f 10 5b 5d 0d 00 01 13
>398320		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>398328		27 00 00 5c 1a 18 03 16
>398330		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398338		00 20 00 00 00 00 00 00
>398340		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398348		00 00 00 00 00 00 00 00
>398350		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398358		00 00 00 00 00 00 00 00
>398360		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398368		00 00 00 00 00 00 00 00
>398370		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398378		00 00 00 00 00 00 00 00
>398380		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398388		37 38 39 30 2d 3d 08 09
>398390		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398398		6f 70 5b 5d 0d 00 61 73
>3983a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3983a8		27 60 00 5c 7a 78 63 76
>3983b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3983b8		00 20 00 00 00 00 00 00
>3983c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3983c8		00 00 00 00 00 00 00 00
>3983d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3983d8		00 00 00 00 00 00 00 00
>3983e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3983e8		00 00 00 00 00 00 00 00
>3983f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3983f8		00 00 00 00 00 00 00 00
>398400		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398408		37 38 39 30 2d 3d 08 09
>398410		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398418		6f 70 5b 5d 0d 00 61 73
>398420		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398428		27 60 00 5c 7a 78 63 76
>398430		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398438		00 20 00 00 00 00 00 00
>398440		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398448		00 00 00 00 00 00 00 00
>398450		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398458		00 00 00 00 00 00 00 00
>398460		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398468		00 00 00 00 00 00 00 00
>398470		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398478		00 00 00 00 00 00 00 00
>398480		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>398488		00 00 00 00 00 00 00 00
>398490		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>398498		00 00 00 00 00 00 00 00
>3984a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3984a8		00 00 00 00 00 00 00 00
>3984b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3984b8		00 00 00 00 00 00 00 00
>3984c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3984c8		11 00 00 9d 00 1d 00 05
>3984d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3984d8		00 00 00 00 00 00 00 00
>3984e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3984e8		00 00 00 00 00 00 00 00
>3984f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3984f8		00 00 00 00 00 00 00 00
>398500						.align 256
>398500		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>398508		34 37 3a 3d 3f 41 44 46
>398510		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>398518		57 58 5a 5b 5d 5e 60 61
>398520		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>398528		6d 6f 70 71 72 73 75 76
>398530		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>398538		80 81 82 83 84 85 86 87
>398540		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>398548		8f 90 91 92 93 93 94 95
>398550		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>398558		9d 9e 9e 9f a0 a1 a2 a2
>398560		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>398568		a9 aa ab ab ac ad ae ae
>398570		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>398578		b5 b5 b6 b7 b7 b8 b9 b9
>398580		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>398588		bf c0 c0 c1 c2 c2 c3 c4
>398590		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>398598		c9 ca ca cb cb cc cd cd
>3985a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3985a8		d2 d3 d4 d4 d5 d5 d6 d6
>3985b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3985b8		db dc dc dd de de df df
>3985c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3985c8		e4 e4 e5 e5 e6 e6 e7 e7
>3985d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3985d8		ec ec ed ed ee ee ef ef
>3985e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3985e8		f4 f4 f5 f5 f6 f6 f7 f7
>3985f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3985f8		fb fc fc fd fd fe fe ff
>398600						.align 256
>398600		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>398608		25 27 2a 2c 2e 30 32 34
>398610		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>398618		44 46 47 49 4a 4c 4d 4f
>398620		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>398628		5b 5c 5d 5e 60 61 62 63
>398630		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>398638		6d 6e 70 71 72 73 74 75
>398640		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>398648		7e 7f 80 81 82 83 84 84
>398650		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>398658		8d 8e 8e 8f 90 91 92 93
>398660		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>398668		9a 9b 9c 9d 9e 9f 9f a0
>398670		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>398678		a7 a8 a9 aa aa ab ac ad
>398680		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>398688		b3 b4 b5 b6 b6 b7 b8 b8
>398690		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>398698		bf bf c0 c1 c2 c2 c3 c4
>3986a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3986a8		ca ca cb cc cc cd ce ce
>3986b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3986b8		d4 d5 d6 d6 d7 d7 d8 d9
>3986c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3986c8		de df e0 e0 e1 e1 e2 e3
>3986d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3986d8		e8 e9 e9 ea ea eb ec ec
>3986e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3986e8		f1 f2 f3 f3 f4 f4 f5 f5
>3986f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3986f8		fb fb fc fc fd fd fe ff
>398700						.align 256
>398700		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>398708		83 dd ce 39 cd c5 3b 15
>398710		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>398718		87 12 31 65 89 27 88 42
>398720		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>398728		94 ce 56 ec fe da 58 c9
>398730		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>398738		d0 10 2c b2 4b ea 32 61
>398740		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>398748		a1 e6 ca 2d b3 ce b0 79
>398750		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>398758		5f e3 fb bd 15 2e be f5
>398760		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>398768		8d 8f 2c 80 0a 5e 99 36
>398770		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>398778		13 52 44 2f e3 ef 44 a2
>398780		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>398788		be 23 02 58 0a 52 5e b4
>398790		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>398798		d5 cf 3e df c4 9e da bb
>3987a0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3987a8		77 7d b1 3b 4a 68 35 6e
>3987b0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3987b8		b5 8f 44 63 55 6f e1 50
>3987c0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3987c8		57 74 b9 bd 05 14 50 eb
>3987d0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3987d8		44 bc ec db 22 58 fc be
>3987e0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3987e8		24 aa 82 11 5c 9f 43 4d
>3987f0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3987f8		3e 3d 66 7e 0a 1c 6b 74
>398800						.align 16
>398800		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>398808		01 01 01 00 00 00 00 00
>398810		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>398818		ff ff ff 01 00 00 00 00
>398820		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>398828		01 55 ff ff 01 00 00 00
>398830		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>398838		ff ff ff ff 01 00 00 00
>398840		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>398848		ff ff 01 ff ff 01 00 00
>398850		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>398858		01 ff ff 01 ff 01 00 00
>398860		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>398868		ff 01 ff ff ff 01 00 00
>398870		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>398878		ff ff ff ff ff 01 01 00
>398880		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>398888		ff ff ff ff 01 ff ff 01
>398890		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>398898		ff ff ff ff ff ff ff 01
>3988a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3988a8		55 55 01 ff ff 55 01 00
>3988b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3988b8		01 01 55 ff 55 01 00 00
>3988c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3988c8		01 55 55 55 01 00 00 00
>3988d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3988d8		01 55 55 01 00 00 00 00
>3988e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3988e8		00 01 01 00 00 00 00 00
>3988f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3988f8		00 00 00 00 00 00 00 00
>3a0000		5c bf 87 3a 5c ce 6d 3a		        .binary "binaries/basic816_3A0000.bin"
>3a0008		5c b6 25 3a 5c 5b 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018		5c c1 02 3a 5c ff 00 3a 5c 1a 01 3a 5c 21 01 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088		80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098		db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8		4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8		80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8		a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8		10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 af
>3a00e8		00 00 af 89 3c f0 08 09 03 8f 00 00 af 80 06 09
>3a00f8		01 8f 00 00 af 28 60 08 e2 20 c9 00 f0 08 af 10
>3a0108		00 af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af
>3a0118		28 60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20
>3a0128		c2 10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f
>3a0138		00 c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00
>3a0148		5b 68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a
>3a0158		fa 68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a0168		28 c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2
>3a0178		20 29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c
>3a0188		00 00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08
>3a0198		a5 0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0
>3a01a8		00 00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0
>3a01b8		f4 ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00
>3a01c8		ca 10 ef 28 2b 7a fa 60 e2 20 20 1b 02 a9 48 8f
>3a01d8		0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00 af 8f
>3a01e8		09 00 af a2 00 00 a9 00 9f 18 f0 3a e8 e0 40 00
>3a01f8		d0 f6 a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00
>3a0208		a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24
>3a0218		02 af 60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af
>3a0228		af 00 08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af
>3a0238		a9 03 8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af
>3a0248		ea ea ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48
>3a0258		a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f 00 29
>3a0268		01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10
>3a0278		00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28
>3a0288		60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28
>3a0298		60 08 22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00
>3a02a8		08 5b 68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90
>3a02b8		05 20 14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20
>3a02c8		48 a9 00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af
>3a02d8		b4 08 00 29 20 f0 07 af b5 08 00 20 28 00 af b4
>3a02e8		08 00 29 80 f0 07 af b5 08 00 20 53 02 af b4 08
>3a02f8		00 29 40 f0 14 af b5 08 00 20 6e 02 af b5 08 00
>3a0308		c9 0d d0 05 a9 0a 20 6e 02 28 2b 7a fa 60 08 e2
>3a0318		20 bd 00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2
>3a0328		20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 40 03 68 29
>3a0338		ff 00 20 40 03 68 28 60 08 c2 20 48 e2 20 48 4a
>3a0348		4a 4a 4a 20 57 03 68 20 57 03 c2 20 68 28 60 08
>3a0358		c2 30 da 29 0f 00 aa bf 00 d0 3a 20 18 00 fa 28
>3a0368		60 08 c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03
>3a0378		00 aa e2 20 a9 3a 48 ab bd 00 00 f0 06 20 53 02
>3a0388		e8 80 f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9
>3a0398		5b b0 04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28
>3a03a8		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03
>3a03b8		28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0
>3a03c8		13 c9 67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0
>3a03d8		03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30
>3a03e8		b0 12 c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41
>3a03f8		b0 09 28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2
>3a0408		08 e2 20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08
>3a0418		e2 20 c2 10 bd 00 00 f0 09 20 08 04 9d 00 00 e8
>3a0428		80 f2 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0438		c2 20 48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06
>3a0448		0c 26 0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25
>3a0458		65 0e 85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a0468		08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f
>3a0478		18 01 00 af 1c 01 00 85 23 64 25 af 1e 01 00 85
>3a0488		29 64 2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b
>3a0498		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a
>3a04a8		01 00 a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64
>3a04b8		25 af 1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85
>3a04c8		2d 2b 28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28
>3a04d8		e2 02 60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85
>3a04e8		25 e2 20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85
>3a04f8		23 85 25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27
>3a0508		c9 00 f0 07 c9 01 d0 05 20 77 59 28 60 08 c2 20
>3a0518		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a0528		20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 e2 20 a5
>3a0538		2d c9 00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23
>3a0548		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85
>3a0558		27 20 77 59 c2 20 a5 23 85 29 a5 25 85 2b e2 20
>3a0568		a9 00 85 2d c2 20 68 85 23 68 85 25 28 60 08 c2
>3a0578		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a0588		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 e2 20
>3a0598		a5 27 c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b
>3a05a8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a05b8		9f 1c e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07
>3a05c8		c9 01 d0 0b 20 77 59 c2 20 a5 25 d0 21 28 60 08
>3a05d8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a05e8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2
>3a05f8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a0608		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 e2 20
>3a0618		a5 27 c9 00 f0 07 c9 01 d0 11 20 77 59 a5 26 d0
>3a0628		29 a5 25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9
>3a0638		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a0648		ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00
>3a0658		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>3a0668		00 20 9f 1c e2 20 dc d4 08 08 e2 20 a5 27 c9 01
>3a0678		f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a0688		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a0698		e2 20 dc d4 08 20 71 59 28 60 08 e2 20 a5 2d c9
>3a06a8		01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a06b8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a06c8		1c e2 20 dc d4 08 20 d3 06 28 60 c2 20 a5 25 48
>3a06d8		a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9
>3a06e8		00 85 27 20 71 59 c2 20 a5 23 85 29 a5 25 85 2b
>3a06f8		e2 20 a9 01 85 2d c2 20 68 85 23 68 85 25 60 08
>3a0708		e2 20 a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48
>3a0718		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a0728		29 ff 00 20 9f 1c e2 20 dc d4 08 a5 2d c9 00 f0
>3a0738		16 c9 01 d0 d7 20 71 59 80 0d a5 2d c9 01 f0 07
>3a0748		c9 00 d0 c8 20 d3 06 e2 20 a5 27 28 60 08 e2 20
>3a0758		a5 27 c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48
>3a0768		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a0778		29 ff 00 20 9f 1c e2 20 dc d4 08 20 07 07 a5 27
>3a0788		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0798		64 23 64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20
>3a07a8		a7 00 20 ad 03 90 76 20 2c 04 38 e9 30 c2 20 29
>3a07b8		ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 20 5e
>3a07c8		1f 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a07d8		02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>3a07e8		d4 08 20 5e 1f a7 00 c9 48 f0 04 c9 68 d0 d4 20
>3a07f8		5e 1f e2 20 a7 00 20 be 03 90 22 20 df 03 c2 20
>3a0808		06 23 26 25 06 23 26 25 06 23 26 25 06 23 26 25
>3a0818		29 ff 00 18 65 23 85 23 20 5e 1f 80 d5 2b 28 60
>3a0828		08 c2 30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7
>3a0838		1a f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff
>3a0848		ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a0858		68 28 c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 7f
>3a0868		1f a7 00 20 ad 03 90 0c 20 8a 07 c2 20 a5 23 85
>3a0878		d7 20 7f 1f c2 20 a5 00 85 1a e2 20 a5 02 85 1c
>3a0888		20 9c 08 e2 20 20 0d 09 c9 00 f0 05 20 bb 0a 80
>3a0898		f4 2b 28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2
>3a08a8		00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53
>3a08b8		c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0
>3a08c8		10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0
>3a08d8		1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7
>3a08e8		00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 5e 1f 80
>3a08f8		b3 a7 00 c9 3a d0 03 20 5e 1f a9 03 85 1e a9 91
>3a0908		20 bb 0a 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0918		28 e2 20 a9 7f 85 1e c2 10 20 70 0a a5 1e d0 03
>3a0928		4c b0 09 c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2
>3a0938		20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0
>3a0948		d6 c8 c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 d2
>3a0958		09 80 28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0
>3a0968		08 e2 20 a5 02 c5 1c f0 09 e2 20 a7 04 20 ba 4e
>3a0978		b0 09 e2 20 20 e2 09 c9 00 d0 11 c2 20 a5 00 85
>3a0988		04 e2 20 a5 02 85 06 20 5e 1f 80 a9 c9 81 d0 18
>3a0998		20 28 08 c9 00 f0 14 89 80 10 0b 20 5c 0b c9 30
>3a09a8		f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9
>3a09b8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a09c8		ff 00 20 9f 1c e2 20 dc d4 08 08 e2 20 20 5e 1f
>3a09d8		a7 00 f0 04 c9 22 d0 f5 28 60 da 5a 08 0b 08 c2
>3a09e8		20 48 a9 00 08 5b 68 28 c2 20 a5 04 d0 0a e2 20
>3a09f8		a5 04 d0 04 a9 00 80 0a e2 20 a7 04 20 ba 4e a9
>3a0a08		00 2a 85 28 c2 30 a9 b0 0b 85 08 e2 20 a9 3a 85
>3a0a18		0a a2 80 00 e2 20 a0 01 00 b7 08 f0 31 c5 1e d0
>3a0a28		32 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 3a 85 0e
>3a0a38		a5 28 f0 07 a7 0c 20 ba 4e b0 18 e2 10 a0 00 b7
>3a0a48		00 20 08 04 d7 0c d0 0b c8 c4 1e 90 f2 8a 2b 28
>3a0a58		7a fa 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5
>3a0a68		0a 69 00 85 0a e8 80 ac 08 0b 8b 08 c2 20 48 a9
>3a0a78		00 08 5b 68 28 c2 30 a9 b0 0b 85 08 a9 3a 00 85
>3a0a88		0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e b0 06
>3a0a98		c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08
>3a0aa8		a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1e ab
>3a0ab8		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0ac8		20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69
>3a0ad8		00 00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87 08 f0
>3a0ae8		13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00
>3a0af8		85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a
>3a0b08		18 69 b0 0b aa 28 60 08 8b 0b 08 c2 20 48 a9 00
>3a0b18		08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20
>3a0b28		c2 10 20 ff 0a bd 00 00 c2 20 29 0f 00 2b ab 28
>3a0b38		60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a0b48		20 48 a9 3a 48 ab 68 28 c2 30 20 ff 0a bd 04 00
>3a0b58		2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>3a0b68		28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20
>3a0b78		ff 0a bd 00 00 c2 20 29 f0 00 2b ab 28 60 08 8b
>3a0b88		0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a0b98		3a 48 ab 68 28 e2 20 c2 10 20 ff 0a bd 06 00 c2
>3a0ba8		20 29 ff 00 2b ab 28 60 03 01 10 d0 1d 26 02 00
>3a0bb8		03 01 12 d0 5d 26 02 00 02 01 14 d0 94 26 02 00
>3a0bc8		02 01 16 d0 cb 26 02 00 02 03 18 d0 d5 26 02 00
>3a0bd8		00 01 1c d0 e8 26 02 00 04 02 1e d0 a6 28 02 00
>3a0be8		04 02 21 d0 66 28 02 00 04 02 24 d0 26 28 02 00
>3a0bf8		04 01 27 d0 66 27 02 00 04 01 29 d0 e6 27 02 00
>3a0c08		04 01 2b d0 a6 27 02 00 05 03 2d d0 50 27 01 00
>3a0c18		06 03 31 d0 22 27 02 00 07 02 35 d0 39 27 02 00
>3a0c28		ff 01 38 d0 00 00 00 00 40 01 3a d0 00 00 00 00
>3a0c38		20 03 3c d0 66 3f 00 00 20 05 40 d0 6b 43 00 00
>3a0c48		20 03 46 d0 b6 42 00 00 20 04 4a d0 56 42 00 00
>3a0c58		20 03 4f d0 4d 42 00 00 20 02 53 d0 e5 41 00 00
>3a0c68		50 04 56 d0 00 00 00 00 50 04 5b d0 00 00 00 00
>3a0c78		20 05 60 d0 28 41 00 00 20 06 66 d0 a1 41 00 00
>3a0c88		20 03 6d d0 7d 3f 00 00 50 02 71 d0 00 00 00 00
>3a0c98		50 04 74 d0 00 00 00 00 20 04 79 d0 71 40 00 00
>3a0ca8		20 02 7e d0 77 3f 00 00 20 04 81 d0 7a 3f 00 00
>3a0cb8		50 05 86 d0 00 00 00 00 50 05 8c d0 00 00 00 00
>3a0cc8		20 04 92 d0 74 3f 00 00 20 03 97 d0 ac 42 00 00
>3a0cd8		20 04 9b d0 47 3f 00 00 20 04 a0 d0 d7 3e 00 00
>3a0ce8		20 05 a5 d0 6d 3e 00 00 20 05 ab d0 fa 3d 00 00
>3a0cf8		20 03 b1 d0 f6 3d 00 00 20 04 b5 d0 d7 3c 00 00
>3a0d08		20 04 ba d0 e9 3d 00 00 20 07 bf d0 ed 3d 00 00
>3a0d18		20 03 c7 d0 2a 3c 00 00 20 04 cb d0 93 3b 00 00
>3a0d28		00 01 d0 d0 e6 28 01 00 30 03 d2 d0 61 49 00 00
>3a0d38		30 04 d6 d0 b1 49 00 00 30 05 db d0 42 4a 00 00
>3a0d48		30 05 e1 d0 f4 49 00 00 30 04 e7 d0 81 4a 00 00
>3a0d58		30 03 ec d0 d6 4a 00 00 30 03 f0 d0 1b 4b 00 00
>3a0d68		30 03 f4 d0 a4 4b 00 00 30 03 f8 d0 2d 4c 00 00
>3a0d78		30 03 fc d0 8f 4c 00 00 30 04 00 d1 d3 48 00 00
>3a0d88		30 03 05 d1 72 48 00 00 30 04 09 d1 24 48 00 00
>3a0d98		30 03 0e d1 ce 47 00 00 30 05 12 d1 05 47 00 00
>3a0da8		30 06 18 d1 24 46 00 00 30 04 1f d1 6f 45 00 00
>3a0db8		10 03 24 d1 f6 4d 00 00 10 03 28 d1 c1 4d 00 00
>3a0dc8		10 04 2c d1 a7 69 00 00 10 04 31 d1 0d 4e 00 00
>3a0dd8		10 03 36 d1 ce 66 00 00 20 05 3a d1 79 68 00 00
>3a0de8		10 04 40 d1 54 69 00 00 20 05 45 d1 60 6a 00 00
>3a0df8		20 03 4b d1 7f 6b 00 00 10 04 4f d1 ec 6a 00 00
>3a0e08		20 06 54 d1 f5 6b 00 00 20 04 5b d1 19 6d 00 00
>3a0e18		10 07 60 d1 be 4d 00 00 20 03 68 d1 21 3b 00 00
>3a0e28		20 05 6c d1 31 3a 00 00 20 09 72 d1 a5 2a 00 00
>3a0e38		20 09 7c d1 32 2a 00 00 20 0a 86 d1 62 2a 00 00
>3a0e48		20 07 91 d1 9f 29 00 00 30 08 99 d1 4a 44 00 00
>3a0e58		20 07 a2 d1 34 29 00 00 30 08 aa d1 b4 44 00 00
>3a0e68		20 08 b3 d1 ea 2b 00 00 20 08 bc d1 1e 2b 00 00
>3a0e78		20 06 c5 d1 24 2d 00 00 20 09 cc d1 2c 2e 00 00
>3a0e88		20 04 d6 d1 3c 2f 00 00 20 04 db d1 ad 2f 00 00
>3a0e98		20 04 e0 d1 46 30 00 00 20 06 e5 d1 82 31 00 00
>3a0ea8		20 08 ec d1 1e 32 00 00 20 0a f5 d1 6a 32 00 00
>3a0eb8		20 07 00 d2 9f 33 00 00 20 07 08 d2 1d 34 00 00
>3a0ec8		20 08 10 d2 8f 34 00 00 20 06 19 d2 cc 34 00 00
>3a0ed8		20 07 20 d2 fc 37 00 00 50 06 28 d2 00 00 00 00
>3a0ee8		50 04 2f d2 00 00 00 00 20 06 34 d2 11 3a 00 00
>3a0ef8		30 03 3b d2 e5 4c 00 00 30 03 3f d2 19 45 00 00
>3a0f08		30 03 43 d2 f8 4c 00 00 30 03 47 d2 0e 4d 00 00
>3a0f18		30 03 4b d2 24 4d 00 00 30 02 4f d2 3a 4d 00 00
>3a0f28		30 04 52 d2 50 4d 00 00 30 04 57 d2 66 4d 00 00
>3a0f38		30 04 5c d2 7c 4d 00 00 30 03 61 d2 92 4d 00 00
>3a0f48		30 03 65 d2 a8 4d 00 00 00 00 00 00 00 00 00 00
>3a0f58		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 ff
>3a0f68		ff 85 ba e2 20 a9 37 85 bc c2 20 64 b7 64 bd e2
>3a0f78		20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85 ea c2 10
>3a0f88		86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10 48
>3a0f98		20 30 10 b0 03 20 b4 0f 20 bc 11 c2 20 68 85 10
>3a0fa8		68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08 c2
>3a0fb8		20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca 86 0c e8
>3a0fc8		c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc e9 00 85
>3a0fd8		c2 20 bc 11 e2 20 a5 ea a0 00 00 97 c3 a9 00 a0
>3a0fe8		01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00 00 97 c3
>3a0ff8		c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3 e2 20 c8
>3a1008		c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7 e2 20 a5
>3a1018		c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba e2 20 a5
>3a1028		c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a1038		08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2 20 a5 bf
>3a1048		85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2 20 a9 00
>3a1058		00 85 cf e2 20 a9 00 85 d1 2b 28 18 60 c2 20 a0
>3a1068		05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85 ce c2 20
>3a1078		18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00 85 0e c2
>3a1088		20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00 85
>3a1098		0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e c5 ce d0
>3a10a8		20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57 c2 20 a0
>3a10b8		02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85 bf 4c 6d
>3a10c8		11 c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69 00
>3a10d8		85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2 20 a5 c6
>3a10e8		c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5 cb 85 d1
>3a10f8		c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8 b7 cf 85
>3a1108		cb 4c 4a 10 c2 20 a0 02 00 b7 c9 97 cf e2 20 c8
>3a1118		c8 b7 c9 97 cf 4c 6d 11 c2 20 a0 05 00 b7 c9 97
>3a1128		0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02 00 b7 c9
>3a1138		97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5 cf d0 14
>3a1148		e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2 20 a5 0e
>3a1158		85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf e2 20 c8
>3a1168		c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20 a5 cb 85
>3a1178		c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9 c2 20 a0
>3a1188		05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97 c3 c2 20
>3a1198		a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97 c3 e2 20
>3a11a8		a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9 00 97 c3
>3a11b8		2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00 85 c3 e2
>3a11c8		20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5 c5 f0 04
>3a11d8		c9 38 b0 12 c2 20 a5 c3 f0 0c e2 20 a0 01 00 b7
>3a11e8		c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5 f0 04 c9
>3a11f8		38 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01 00 b7 c3
>3a1208		3a 97 c3 d0 03 20 14 12 28 60 00 ea 08 c2 20 a5
>3a1218		bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf c2 20 a5
>3a1228		c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8 e2 20 97
>3a1238		c3 4c fb 12 e2 20 a5 bf c5 c5 90 28 c2 20 a5 bd
>3a1248		c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3 e2 20 c8
>3a1258		c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20 a5 c5 85
>3a1268		bf 4c fb 12 c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a
>3a1278		e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b c2 20 a0
>3a1288		02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00 b7 08 97
>3a1298		c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3 a0 02 00
>3a12a8		97 08 e2 20 a5 c5 c8 c8 97 08 4c fb 12 c2 20 a0
>3a12b8		02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20
>3a12c8		a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a c2
>3a12d8		20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02 00 97 08
>3a12e8		e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2 20 a0 02
>3a12f8		00 97 c3 20 00 13 28 60 08 c2 20 a5 bd 85 c3 e2
>3a1308		20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20 a5 c5 d0
>3a1318		03 4c a3 13 c2 20 a0 02 00 b7 c3 85 0c e2 20 c8
>3a1328		c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85 10 e2 20
>3a1338		c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0 08 e2 20
>3a1348		a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3 85 0c e2
>3a1358		20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3 e2 20 a5
>3a1368		0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85 0c e2 20
>3a1378		c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c 97 c3 e2
>3a1388		20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7 0c 97 c3
>3a1398		e2 20 c8 c8 b7 0c 97 c3 4c 1c 13 28 60 08 c2 20
>3a13a8		64 16 64 18 28 60 08 c2 30 a5 16 d0 16 a5 18 d0
>3a13b8		12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3 85 18 64
>3a13c8		19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5 bb 3a c5
>3a13d8		17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a13e8		20 a9 03 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a13f8		20 dc d4 08 28 60 c9 00 d0 05 c0 01 00 f0 05 09
>3a1408		30 97 16 c8 60 08 c2 30 64 0c a5 25 10 1a 18 a5
>3a1418		23 49 ff ff 69 01 00 85 23 a5 25 49 ff ff 69 00
>3a1428		00 85 25 a9 ff ff 85 0c 64 10 64 12 64 14 a2 1f
>3a1438		00 f8 06 23 26 25 a5 10 65 10 85 10 a5 12 65 12
>3a1448		85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2 20 20 ae
>3a1458		13 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20 97 16
>3a1468		c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20 fe 13 b5
>3a1478		10 29 0f 20 fe 13 ca 10 eb c0 01 00 d0 0c a9 20
>3a1488		87 16 a0 01 00 a9 30 97 16 c8 a9 00 97 16 28 60
>3a1498		00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8
>3a14a8		c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a14b8		28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7 29 f0 25
>3a14c8		b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20 a9 01 00
>3a14d8		85 23 e2 20 64 25 80 15 c2 20 a9 ff ff 85 23 e2
>3a14e8		20 85 25 80 08 c2 20 64 23 e2 20 64 25 e2 20 a9
>3a14f8		00 85 27 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a1508		5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 25 48
>3a1518		ab c2 20 68 28 a6 23 20 9a 14 84 0c 08 c2 20 48
>3a1528		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20 9a 14 c2
>3a1538		20 98 38 65 0c aa e2 20 a9 02 20 80 0f c2 20 a5
>3a1548		b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08 c2 20 48
>3a1558		e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd 00 00 f0
>3a1568		06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5
>3a1578		2b 48 ab c2 20 68 28 a6 29 bd 00 00 97 08 f0 04
>3a1588		e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5 0a 85 25
>3a1598		a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b 08 c2 20
>3a15a8		48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5 08 48 c2
>3a15b8		30 08 c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6
>3a15c8		23 20 9a 14 98 aa e8 e2 20 a9 02 20 80 0f c2 20
>3a15d8		a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20 b7 23 97
>3a15e8		08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5 0a 85 25
>3a15f8		c2 20 68 85 08 68 85 0a ab 2b 28 7a fa 60 08 e2
>3a1608		20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9 84 92 c2
>3a1618		30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b c4 8f b0
>3a1628		12 a5 29 d0 0e 4c 84 16 20 ae 13 e2 20 a9 00 87
>3a1638		16 80 39 20 ae 13 c2 30 18 a5 23 65 29 85 23 a5
>3a1648		25 69 00 00 85 25 a0 00 00 e2 20 a7 23 97 16 f0
>3a1658		1b c2 20 18 a5 23 69 01 00 85 23 a5 25 69 00 00
>3a1668		85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2 20 a5 16
>3a1678		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 60 08 c2
>3a1688		30 20 ad 14 a5 23 c9 ff ff d0 05 20 df 04 80 03
>3a1698		20 f1 04 28 60 08 c2 30 20 ad 14 a5 23 c9 01 00
>3a16a8		d0 05 20 df 04 80 03 20 f1 04 28 60 08 c2 30 20
>3a16b8		ad 14 a5 23 c9 00 00 d0 05 20 df 04 80 03 20 f1
>3a16c8		04 28 60 08 c2 30 20 ad 14 a5 23 c9 00 00 f0 05
>3a16d8		20 df 04 80 03 20 f1 04 28 60 08 c2 30 20 ad 14
>3a16e8		a5 23 c9 ff ff f0 05 20 df 04 80 03 20 f1 04 28
>3a16f8		60 08 c2 30 20 ad 14 a5 23 c9 01 00 f0 05 20 df
>3a1708		04 80 03 20 f1 04 28 60 48 5a 0b 08 08 c2 20 48
>3a1718		a9 00 08 5b 68 28 c2 30 a9 00 00 85 00 85 1a a9
>3a1728		36 00 85 02 85 1c ad 8a 0f 30 20 a0 02 00 b7 1a
>3a1738		f0 0f c5 55 90 10 c5 59 f0 02 b0 05 20 72 17 80
>3a1748		e5 28 2b 7a 68 60 20 3b 20 80 db 08 c2 20 48 a9
>3a1758		00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29
>3a1768		ff 00 20 9f 1c e2 20 dc d4 08 08 c2 30 85 23 64
>3a1778		25 20 0d 14 a5 16 1a 85 23 a5 18 85 25 20 e7 43
>3a1788		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 e2
>3a1798		20 a9 20 20 18 00 c2 20 20 b1 17 90 fb e2 20 a9
>3a17a8		0d 20 18 00 20 3b 20 28 60 08 0b 8b 08 c2 20 48
>3a17b8		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a17c8		e2 20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2
>3a17d8		20 29 7f 00 0a 0a 0a 18 69 b0 0b 85 08 a9 3a 00
>3a17e8		69 00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28 a0
>3a17f8		02 00 b7 08 aa 20 16 03 c2 20 20 5e 1f ab 2b 28
>3a1808		18 60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1f a9
>3a1818		ff 7f 85 21 a9 ff ff 85 23 85 25 85 29 85 2b e2
>3a1828		20 85 27 85 2d 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a1838		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a1848		5a a4 1f bd 00 00 99 00 00 bd 02 00 99 02 00 e2
>3a1858		20 bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85 1f
>3a1868		7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1878		68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18
>3a1888		a5 1f 69 05 00 85 1f a8 b9 00 00 9d 00 00 b9 02
>3a1898		00 9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a
>3a18a8		ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a18b8		28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a
>3a18c8		a4 21 99 00 00 88 84 21 7a ab 2b 28 60 08 0b 8b
>3a18d8		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a18e8		48 ab 68 28 e2 20 c2 10 5a a4 21 c8 84 21 b9 00
>3a18f8		00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01
>3a1908		20 ac 18 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab
>3a1918		68 28 e2 20 a4 21 b9 01 00 c9 01 d0 08 c2 20 e6
>3a1928		21 ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1938		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a1948		20 dc d4 08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1958		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21
>3a1968		c0 ff 7f f0 11 20 0f 0b 85 0c b9 01 00 20 0f 0b
>3a1978		c5 0c f0 02 90 08 c2 20 ab 2b 28 68 18 60 c2 20
>3a1988		ab 2b 28 68 38 60 4c 8a 07 08 e2 20 a9 00 8f 00
>3a1998		4d 00 a2 01 00 20 4d 1b 20 bf 05 c2 20 a5 23 9f
>3a19a8		00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00
>3a19b8		e8 e8 20 7f 1f e2 20 a7 00 c9 90 f0 09 c9 2c d0
>3a19c8		0a 20 5e 1f 80 cf 20 5e 1f 28 60 08 c2 20 48 a9
>3a19d8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a19e8		ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00
>3a19f8		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>3a1a08		00 20 9f 1c e2 20 dc d4 08 08 20 8d 51 90 23 e2
>3a1a18		20 a5 ea 29 80 d0 06 20 8e 4f 4c 38 1a e2 20 a9
>3a1a28		8f 20 6b 20 20 03 19 20 91 19 20 44 66 20 0d 19
>3a1a38		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1a48		8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4
>3a1a58		08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a1a68		10 20 5e 1f a0 00 00 b7 00 f0 24 c9 22 f0 03 c8
>3a1a78		80 f5 84 0c e2 20 a9 02 a6 0c e8 20 ae 13 a0 00
>3a1a88		00 c4 0c f0 29 a7 00 97 16 c8 20 5e 1f 80 f2 08
>3a1a98		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a1aa8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 a9 00
>3a1ab8		97 16 c2 20 a5 16 85 23 a5 18 85 25 a9 02 00 85
>3a1ac8		27 20 5e 1f 2b 28 60 08 e2 20 a7 00 c2 20 29 ff
>3a1ad8		00 20 39 0b 85 2f 20 03 19 08 e2 20 48 a9 00 48
>3a1ae8		ab 68 28 20 f3 1a 20 0d 19 28 60 20 5e 1f 6c 2f
>3a1af8		08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1b08		30 20 d5 18 89 80 00 f0 37 48 20 39 0b 85 2f 68
>3a1b18		20 86 0b c9 01 00 f0 08 c2 30 a2 29 08 20 6d 18
>3a1b28		c2 30 a2 23 08 20 6d 18 08 e2 20 48 a9 00 48 ab
>3a1b38		68 28 20 4a 1b a2 23 08 20 2f 18 ab 2b 28 68 60
>3a1b48		00 ea 6c 2f 08 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1b58		08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7
>3a1b68		00 d0 03 4c 10 1c 30 33 c9 20 d0 03 4c 0a 1c c9
>3a1b78		3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c
>3a1b88		23 1c c9 5b b0 07 c9 41 90 03 4c 2f 1c c9 7b b0
>3a1b98		07 c9 61 90 03 4c 2f 1c 4c 10 1c c9 8f f0 40 c9
>3a1ba8		90 f0 41 20 5c 0b c9 30 d0 0c 20 cf 1a a2 23 08
>3a1bb8		20 2f 18 4c 65 1b c9 00 d0 4e a7 00 a6 21 e0 ff
>3a1bc8		7f f0 05 20 4c 19 b0 12 20 ac 18 80 35 c2 20 20
>3a1bd8		af 57 a2 23 08 20 2f 18 80 83 20 f9 1a 80 dd 20
>3a1be8		ac 18 80 1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9
>3a1bf8		01 00 c9 01 f0 3d c9 8f f0 05 20 f9 1a 80 ee 20
>3a1c08		d5 18 20 5e 1f 4c 65 1b a6 21 e0 ff 7f b0 24 bd
>3a1c18		01 00 c9 01 f0 1d 20 f9 1a 80 ed 20 59 1a a2 23
>3a1c28		08 20 2f 18 4c 65 1b 20 11 1a a2 23 08 20 2f 18
>3a1c38		4c 65 1b a2 23 08 20 6d 18 fa 28 60 08 0b 8b 08
>3a1c48		e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08
>3a1c58		5b 68 28 c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b
>3a1c68		08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 33 c6 33
>3a1c78		c6 33 2b 28 60 08 c2 30 29 ff 00 20 66 1c 28 60
>3a1c88		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33
>3a1c98		e6 33 b2 33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00
>3a1ca8		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>3a1cb8		85 23 a9 00 00 85 25 e2 20 a9 00 85 27 85 ea a9
>3a1cc8		3a 85 e9 c2 20 a9 f9 1c 85 e7 20 f0 50 c2 20 a5
>3a1cd8		d7 85 23 a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9
>3a1ce8		3a 85 e9 c2 20 a9 fd 1c 85 e7 20 f0 50 28 2b ab
>3a1cf8		60 45 52 52 00 45 52 4c 00 e2 20 c2 10 20 89 02
>3a1d08		af d3 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9
>3a1d18		3a 48 ab 68 28 be 53 1d 20 16 03 c2 20 a5 d7 f0
>3a1d28		27 a2 83 1d 20 16 03 08 e2 20 48 a9 00 48 ab 68
>3a1d38		28 c2 20 af d7 08 00 8f 23 08 00 a9 00 00 8f 25
>3a1d48		08 00 20 07 44 20 89 02 4c fe 25 87 1d 8a 1d 90
>3a1d58		1d 9d 1d ab 1d b9 1d cc 1d e2 1d f2 1d 01 1e 0e
>3a1d68		1e 1f 1e 2e 1e 3b 1e 49 1e 58 1e 69 1e 82 1e 96
>3a1d78		1e aa 1e c0 1e d4 1e ef 1e 07 1f 20 61 74 00 4f
>3a1d88		4b 00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65
>3a1d98		72 72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f
>3a1da8		72 79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68
>3a1db8		00 56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f
>3a1dc8		75 6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20
>3a1dd8		6e 6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20
>3a1de8		75 6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20
>3a1df8		6f 76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20
>3a1e08		72 61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72
>3a1e18		67 75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20
>3a1e28		66 6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62
>3a1e38		65 72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77
>3a1e48		00 4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00
>3a1e58		44 69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f
>3a1e68		00 55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20
>3a1e78		64 69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65
>3a1e88		20 74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e
>3a1e98		61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c
>3a1ea8		65 00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65
>3a1eb8		74 65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>3a1ec8		74 20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c
>3a1ed8		64 20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72
>3a1ee8		65 63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74
>3a1ef8		20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 41
>3a1f08		72 67 75 6d 65 6e 74 20 6f 75 74 73 69 64 65 20
>3a1f18		64 6f 6d 61 69 6e 00 08 0b 08 c2 20 48 a9 00 08
>3a1f28		5b 68 28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2
>3a1f38		20 48 a9 00 08 5b 68 28 08 c2 20 a9 01 1d 8f d4
>3a1f48		08 00 e2 20 a9 3a 8f d6 08 00 28 20 ac 42 20 ed
>3a1f58		3d 64 31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a1f68		68 28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02
>3a1f78		69 00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1f88		5b 68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0
>3a1f98		02 80 05 20 5e 1f 80 ed 2b 28 60 08 e2 20 a7 00
>3a1fa8		f0 09 c9 3a f0 05 20 5e 1f 80 f3 28 60 08 e2 20
>3a1fb8		64 36 a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f
>3a1fc8		f0 1a c9 9e f0 1a c9 a0 f0 16 20 5e 1f 80 e3 20
>3a1fd8		3b 20 c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea
>3a1fe8		c6 36 30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da
>3a1ff8		20 5e 1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2008		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a2018		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2028		a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>3a2038		dc d4 08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a
>3a2048		65 0c 85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a
>3a2058		85 d7 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85
>3a2068		02 28 60 08 e2 20 48 20 7f 1f 68 e2 20 c7 00 d0
>3a2078		08 20 5e 1f 20 7f 1f 28 60 08 c2 20 48 a9 00 08
>3a2088		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a2098		20 9f 1c e2 20 dc d4 08 08 e2 20 20 7f 1f e2 20
>3a20a8		a7 00 f0 10 c9 3a f0 0c c5 37 f0 05 20 5e 1f 80
>3a20b8		ef 28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00
>3a20c8		f0 0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28
>3a20d8		7a 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20
>3a20e8		0f 18 e2 20 a9 00 85 dc ad 8a 0f 30 4b a7 00 c9
>3a20f8		3a d0 03 20 5e 1f 20 7f 1f a7 00 d0 03 4c 8a 21
>3a2108		20 94 03 b0 52 a7 00 10 10 20 5c 0b 85 0c c9 20
>3a2118		d0 03 4c 78 21 a5 d2 f0 51 08 c2 20 48 a9 00 08
>3a2128		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a2138		20 9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a2148		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>3a2158		9f 1c e2 20 dc d4 08 20 b6 42 4c 8a 21 08 e2 20
>3a2168		48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9
>3a2178		a7 00 20 39 0b c2 20 85 2f 20 0f 18 20 5e 1f 20
>3a2188		65 21 ab 2b 28 60 08 58 20 1f 1f 20 44 1c e2 20
>3a2198		9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c cf 21
>3a21a8		08 c2 20 a0 02 00 b7 1a 85 d7 20 a5 13 e2 20 a5
>3a21b8		dc c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2
>3a21c8		20 a5 1c 69 00 85 02 c2 20 20 da 20 e2 20 a5 dc
>3a21d8		c9 03 f0 f3 c9 00 d0 31 e2 20 20 7f 1f a7 00 f0
>3a21e8		28 c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a21f8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a2208		20 dc d4 08 20 5e 1f 80 be 28 60 08 58 e2 20 a9
>3a2218		80 85 d2 9c 8a 0f 20 44 1c c2 30 64 31 a0 02 00
>3a2228		b7 1a f0 29 20 a8 21 e2 20 a5 dc c9 01 f0 1e c9
>3a2238		02 f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77
>3a2248		1a 85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9
>3a2258		00 85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9
>3a2268		36 00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0
>3a2278		1e b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2
>3a2288		20 a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2
>3a2298		20 a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18
>3a22a8		60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08
>3a22b8		e2 20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00
>3a22c8		85 0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69
>3a22d8		01 00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60
>3a22e8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5
>3a22f8		0e c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2
>3a2308		20 a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85
>3a2318		08 e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00
>3a2328		00 c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00
>3a2338		85 0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db
>3a2348		69 00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9
>3a2358		e2 20 a5 db e9 00 85 db 20 a9 22 20 ac 42 28 60
>3a2368		08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00
>3a2378		97 d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00
>3a2388		85 0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7
>3a2398		c2 20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c
>3a23a8		97 d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69
>3a23b8		00 85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00
>3a23c8		00 97 d9 c8 c0 05 00 d0 f8 20 ac 42 28 60 0b 08
>3a23d8		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85
>3a23e8		08 a9 36 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0
>3a23f8		25 b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69
>3a2408		00 00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60
>3a2418		a9 01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9
>3a2428		05 00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6
>3a2438		10 c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5
>3a2448		d9 69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9
>3a2458		65 10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04
>3a2468		00 85 08 a5 db 69 00 00 85 0a 20 e8 22 c2 20 a5
>3a2478		10 a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00
>3a2488		69 04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2
>3a2498		20 b7 1a 97 00 f0 03 c8 80 f7 20 ac 42 28 60 08
>3a24a8		c2 30 85 d7 20 d6 23 c9 00 00 f0 2c c9 01 00 f0
>3a24b8		22 c2 20 a5 08 48 a5 0a 48 20 25 23 68 85 0a 68
>3a24c8		85 08 a5 1a 85 00 a5 1c 85 02 20 7f 1f e2 20 a7
>3a24d8		00 f0 0a 20 24 24 80 05 a5 d7 20 68 23 28 60 0b
>3a24e8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2
>3a24f8		00 00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9
>3a2508		02 00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c
>3a2518		3a 8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b
>3a2528		54 00 3a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22
>3a2538		9d 00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00
>3a2548		e8 9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48
>3a2558		a9 00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0
>3a2568		0a c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00
>3a2578		85 8f a9 95 25 85 55 20 e7 24 80 e9 c2 20 a9 04
>3a2588		00 85 8f a9 99 25 85 55 20 e7 24 80 d8 44 49 52
>3a2598		00 42 52 55 4e 00 8b 08 20 e4 00 08 e2 20 48 a9
>3a25a8		3a 48 ab 68 28 a2 69 d2 20 16 03 28 ab 60 08 e2
>3a25b8		30 a9 01 20 1c 00 20 db 00 f0 06 c9 0d f0 02 80
>3a25c8		f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a25d8		30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 4e 08
>3a25e8		c2 20 a5 d7 d0 05 20 8e 21 80 07 20 a7 24 28 2b
>3a25f8		38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 9e 25 20
>3a2608		08 00 20 0c 00 a9 00 00 20 1c 00 20 4f 25 20 cb
>3a2618		25 b0 ec 80 e7 08 e2 20 20 55 07 c9 00 f0 2c c9
>3a2628		01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a2638		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a2648		1c e2 20 dc d4 08 20 fe 14 80 08 20 df 51 80 03
>3a2658		20 4e 54 28 60 08 e2 20 20 07 07 c9 00 f0 23 c9
>3a2668		01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2678		04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>3a2688		d4 08 20 f1 51 80 03 20 43 54 28 60 08 e2 20 20
>3a2698		07 07 c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00
>3a26a8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a26b8		00 20 9f 1c e2 20 dc d4 08 20 03 52 80 03 20 e4
>3a26c8		54 28 60 20 71 06 20 a2 06 20 99 54 60 a5 23 8f
>3a26d8		1a 01 00 a5 29 8f 18 01 00 af 1e 01 00 85 23 60
>3a26e8		08 c2 30 48 20 71 06 a5 2d c9 00 00 d0 0d a5 2b
>3a26f8		d0 09 da a6 29 20 b7 61 fa 80 1c 20 a2 06 c2 20
>3a2708		a5 2b 48 a5 29 48 20 42 60 c2 20 68 85 29 68 85
>3a2718		2b 20 e4 54 20 21 62 68 28 60 08 20 03 05 20 34
>3a2728		05 c2 20 a5 23 25 29 85 23 a5 25 25 2b 85 25 28
>3a2738		60 08 20 03 05 20 34 05 c2 20 a5 23 05 29 85 23
>3a2748		a5 25 05 2b 85 25 28 60 08 20 03 05 c2 20 a5 23
>3a2758		49 ff ff 85 23 a5 25 49 ff ff 85 25 28 60 08 e2
>3a2768		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>3a2778		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a2788		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>3a2798		86 16 80 08 20 04 53 80 03 20 79 5a 28 60 08 e2
>3a27a8		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>3a27b8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a27c8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>3a27d8		9d 16 80 08 20 25 53 80 03 20 8e 5a 28 60 08 e2
>3a27e8		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>3a27f8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a2808		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>3a2818		b4 16 80 08 20 52 53 80 03 20 a3 5a 28 60 08 e2
>3a2828		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>3a2838		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a2848		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>3a2858		cb 16 80 08 20 70 53 80 03 20 e2 5a 28 60 08 e2
>3a2868		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>3a2878		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a2888		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>3a2898		e2 16 80 08 20 8e 53 80 03 20 cd 5a 28 60 08 e2
>3a28a8		20 20 55 07 c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f
>3a28b8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a28c8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>3a28d8		f9 16 80 08 20 bb 53 80 03 20 b8 5a 28 60 08 e2
>3a28e8		20 a5 27 c9 00 f0 2d c9 01 f0 1f 08 c2 20 48 a9
>3a28f8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2908		ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a5 26 49 80
>3a2918		85 26 80 16 c2 20 a5 23 49 ff ff 85 23 a5 25 49
>3a2928		ff ff 85 25 e6 23 d0 02 e6 25 28 60 08 e2 20 20
>3a2938		4d 1b 20 15 06 20 60 04 a5 23 0a 0a 0a 0a 05 29
>3a2948		48 a9 2c 20 6b 20 20 4d 1b 20 15 06 20 60 04 a5
>3a2958		23 0a 0a 0a 0a 05 29 48 a9 2c 20 6b 20 20 4d 1b
>3a2968		20 15 06 20 60 04 a5 23 0a 0a 0a 0a 05 29 48 af
>3a2978		0e 08 af 09 0c 8f 0e 08 af 68 8f 00 08 af 68 8f
>3a2988		02 08 af 68 8f 04 08 af af 0e 08 af 29 f7 8f 0e
>3a2998		08 af 20 a3 1f 28 60 08 e2 20 20 4d 1b 20 15 06
>3a29a8		20 60 04 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 6b
>3a29b8		20 20 4d 1b 20 15 06 20 60 04 a5 23 0a 0a 0a 0a
>3a29c8		05 29 48 a9 2c 20 6b 20 20 4d 1b 20 03 05 20 96
>3a29d8		04 c2 20 a5 23 85 92 a5 29 85 23 20 60 04 e2 20
>3a29e8		a5 23 0a 0a 0a 0a 05 29 48 c2 20 a5 92 85 23 20
>3a29f8		60 04 e2 20 a5 23 0a 0a 0a 0a 05 29 48 af 0e 08
>3a2a08		af 09 0c 8f 0e 08 af 68 8f 0f 08 af 68 8f 0a 08
>3a2a18		af 68 8f 09 08 af 68 8f 06 08 af af 0e 08 af 29
>3a2a28		f7 8f 0e 08 af 20 a3 1f 28 60 08 e2 20 48 20 4d
>3a2a38		1b 20 15 06 e2 20 a5 23 29 0f 0a 0a 0a 0a 83 01
>3a2a48		a9 2c 20 6b 20 20 4d 1b 20 15 06 a5 23 29 0f 03
>3a2a58		01 8f 1e 00 00 e2 20 68 28 60 08 c2 20 f4 00 00
>3a2a68		e2 20 20 4d 1b 20 15 06 a5 23 83 01 a9 2c 20 6b
>3a2a78		20 20 4d 1b 20 15 06 a5 23 83 02 a9 2c 20 6b 20
>3a2a88		20 4d 1b 20 15 06 a5 23 8f 0d 00 af a3 02 8f 0e
>3a2a98		00 af a3 01 8f 0f 00 af c2 20 68 28 60 08 c2 20
>3a2aa8		f4 00 00 e2 20 20 4d 1b 20 03 05 a5 23 f0 16 a9
>3a2ab8		01 8f 04 00 af a9 20 8f 08 00 af 8f 09 00 af 22
>3a2ac8		2c 11 00 80 0a a9 00 8f 04 00 af 22 2c 11 00 a9
>3a2ad8		2c 85 37 20 a0 20 90 39 20 5e 1f 20 4d 1b 20 15
>3a2ae8		06 a5 23 83 01 a9 2c 20 6b 20 20 4d 1b 20 15 06
>3a2af8		a5 23 83 02 a9 2c 20 6b 20 20 4d 1b 20 15 06 a5
>3a2b08		23 8f 05 00 af a3 02 8f 06 00 af a3 01 8f 07 00
>3a2b18		af c2 20 68 28 60 08 c2 20 3b 38 e9 05 00 1b e2
>3a2b28		20 20 4d 1b 20 15 06 a5 23 c9 0a 90 1f 08 c2 20
>3a2b38		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>3a2b48		20 29 ff 00 20 9f 1c e2 20 dc d4 08 83 01 a9 2c
>3a2b58		20 6b 20 20 4d 1b 20 15 06 a5 23 83 02 a9 2c 20
>3a2b68		6b 20 20 4d 1b 20 15 06 a5 23 83 03 a9 2c 20 6b
>3a2b78		20 20 4d 1b 20 15 06 a5 23 83 04 a9 2c 20 6b 20
>3a2b88		20 4d 1b 20 15 06 a5 23 83 05 a9 af 85 a0 a3 01
>3a2b98		0a c2 20 29 ff 00 aa bf d6 2b 3a 85 9e e2 20 a3
>3a2ba8		02 c2 20 29 ff 00 0a 0a 18 65 9e 85 9e e2 20 a0
>3a2bb8		02 00 a3 03 97 9e a0 01 00 a3 04 97 9e a0 00 00
>3a2bc8		a3 05 97 9e c2 20 3b 18 69 05 00 1b 28 60 00 20
>3a2bd8		00 24 00 28 00 2c 00 30 00 34 00 38 00 3c 40 1f
>3a2be8		80 1f da 5a 08 20 4d 1b 20 03 05 c2 20 a5 23 89
>3a2bf8		00 01 d0 17 af 00 00 af 89 00 01 f0 0e e2 20 a9
>3a2c08		00 8f 01 00 af a9 01 8f 01 00 af c2 20 a5 23 8f
>3a2c18		00 00 af e2 20 a5 24 c2 20 29 03 00 0a aa c2 20
>3a2c28		bf 71 2c 3a 8f 10 f0 3a bf 79 2c 3a 8f 12 f0 3a
>3a2c38		af 10 f0 3a 8f 08 01 00 af 12 f0 3a 8f 0a 01 00
>3a2c48		af 0c 01 00 8f 14 f0 3a e2 20 af 0e 01 00 8f 16
>3a2c58		f0 3a 22 2c 11 00 c2 20 af 1a 00 00 aa af 1c 00
>3a2c68		00 a8 20 20 00 28 7a fa 60 80 02 20 03 40 01 90
>3a2c78		01 e0 01 58 02 f0 00 2c 01 50 00 64 00 28 00 32
>3a2c88		00 3c 00 4b 00 1e 00 32 00 48 00 5c 00 20 00 2a
>3a2c98		00 34 00 43 00 16 00 34 00 da 08 c2 30 c9 02 00
>3a2ca8		b0 1c 0a 0a aa bf 00 f0 3a 85 9e bf 02 f0 3a 85
>3a2cb8		a0 c9 f0 00 b0 08 c9 b0 00 90 03 28 fa 60 08 c2
>3a2cc8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a2cd8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 da 08 c2
>3a2ce8		30 c9 02 00 b0 17 0a 0a aa bf 08 f0 3a 85 9e bf
>3a2cf8		0a f0 3a 85 a0 c9 40 00 b0 03 28 fa 60 08 c2 20
>3a2d08		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a2d18		20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2 30 3b
>3a2d28		38 e9 07 00 1b 20 4d 1b 20 15 06 c2 20 a5 23 c9
>3a2d38		02 00 b0 59 83 01 e2 20 a9 2c 20 6b 20 20 4d 1b
>3a2d48		20 15 06 a5 23 83 03 a9 2c 20 6b 20 20 4d 1b 20
>3a2d58		15 06 a3 01 0a 0a 0a aa a3 03 d0 05 a5 23 0a 80
>3a2d68		04 a5 23 38 2a 9f 00 01 af c2 20 a9 2c 00 85 37
>3a2d78		20 a0 20 b0 37 c2 20 08 c2 20 a9 00 00 85 23 a9
>3a2d88		b0 00 85 25 e2 20 a9 00 85 27 28 80 27 08 c2 20
>3a2d98		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a2da8		20 29 ff 00 20 9f 1c e2 20 dc d4 08 c2 20 20 5e
>3a2db8		1f 20 4d 1b c2 20 a3 01 0a 0a aa a5 23 9f 00 f0
>3a2dc8		3a 9f 08 f0 3a 83 04 a5 25 9f 02 f0 3a 38 e9 b0
>3a2dd8		00 9f 0a f0 3a 83 06 a3 01 0a 0a 0a aa e2 20 a3
>3a2de8		04 9f 01 01 af a3 05 9f 02 01 af a3 06 9f 03 01
>3a2df8		af a9 00 9f 04 01 af 9f 05 01 af c2 30 3b 18 69
>3a2e08		07 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2e18		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a2e28		20 dc d4 08 08 c2 20 20 4d 1b 20 15 06 a5 23 20
>3a2e38		e5 2c c2 20 a5 9e 8f 05 04 af af 14 f0 3a 8f 08
>3a2e48		04 af e2 20 a5 a0 8f 07 04 af af 16 f0 3a 8f 0a
>3a2e58		04 af a9 00 8f 01 04 af a9 85 8f 00 04 af af 01
>3a2e68		04 af 30 fa a9 00 8f 00 04 af 28 60 08 c2 20 a5
>3a2e78		5d 8f 08 01 00 af 10 f0 3a 8f 0a 01 00 18 af 0c
>3a2e88		01 00 65 59 85 0c af 0e 01 00 69 00 00 85 0e 18
>3a2e98		a5 0c 65 9e 85 0c a5 0e 65 a0 85 0e e2 20 a5 55
>3a2ea8		87 0c 28 60 c2 20 a9 01 00 85 dd 38 a5 61 e5 59
>3a2eb8		85 69 10 0b 49 ff ff 1a 85 69 a9 ff ff 85 dd a9
>3a2ec8		01 00 85 df 38 a5 65 e5 5d 85 6d 10 0b 49 ff ff
>3a2ed8		1a 85 6d a9 ff ff 85 df a5 6d c5 69 b0 04 a5 69
>3a2ee8		80 06 a5 6d 49 ff ff 1a 48 0a 68 6a 85 71 20 74
>3a2ef8		2e a5 59 c5 61 d0 06 a5 5d c5 65 f0 36 a5 71 85
>3a2f08		75 a5 69 49 ff ff 1a c5 75 10 10 f0 0e 38 a5 71
>3a2f18		e5 6d 85 71 18 a5 59 65 dd 85 59 a5 75 c5 6d 10
>3a2f28		cd f0 cb 18 a5 71 65 69 85 71 18 a5 5d 65 df 85
>3a2f38		5d 80 bb 60 08 c2 20 3b 38 e9 06 00 1b 08 c2 20
>3a2f48		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a2f58		28 c2 30 20 4d 1b 20 15 06 83 01 a9 2c 00 20 6b
>3a2f68		20 20 4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 6b
>3a2f78		20 20 4d 1b 20 03 05 a5 23 83 05 a9 2c 00 20 6b
>3a2f88		20 20 4d 1b 20 15 06 a5 23 85 55 a3 03 85 59 a3
>3a2f98		05 85 5d a3 01 20 a1 2c 20 74 2e c2 20 3b 18 69
>3a2fa8		06 00 1b 28 60 08 c2 20 3b 38 e9 0a 00 1b 08 c2
>3a2fb8		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a2fc8		68 28 c2 30 20 4d 1b 20 15 06 83 01 a9 2c 00 20
>3a2fd8		6b 20 20 4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20
>3a2fe8		6b 20 20 4d 1b 20 03 05 a5 23 83 05 a9 2c 00 20
>3a2ff8		6b 20 20 4d 1b 20 03 05 a5 23 83 07 a9 2c 00 20
>3a3008		6b 20 20 4d 1b 20 03 05 a5 23 83 09 a9 2c 00 20
>3a3018		6b 20 20 4d 1b 20 15 06 a5 23 85 55 a3 03 85 59
>3a3028		a3 05 85 5d a3 07 85 61 a3 09 85 65 a3 01 20 a1
>3a3038		2c 20 ac 2e c2 20 3b 18 69 0a 00 1b 28 60 08 c2
>3a3048		20 3b 38 e9 0c 00 1b 08 c2 20 48 a9 00 08 5b 68
>3a3058		28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 4d 1b
>3a3068		20 15 06 83 01 a9 2c 00 20 6b 20 20 4d 1b 20 03
>3a3078		05 a5 23 83 03 a9 2c 00 20 6b 20 20 4d 1b 20 03
>3a3088		05 a5 23 83 05 a9 2c 00 20 6b 20 20 4d 1b 20 03
>3a3098		05 a5 23 83 07 a9 2c 00 20 6b 20 20 4d 1b 20 03
>3a30a8		05 a5 23 83 09 a9 2c 00 20 6b 20 20 4d 1b 20 15
>3a30b8		06 a5 23 83 0b a3 01 20 e5 2c a9 07 00 8f 00 04
>3a30c8		af c2 20 a3 05 8f 00 01 00 af 10 f0 3a 8f 02 01
>3a30d8		00 18 af 04 01 00 63 03 85 0c e2 20 af 06 01 00
>3a30e8		69 00 85 0e c2 20 18 a5 9e 65 0c 8f 05 04 af e2
>3a30f8		20 a5 a0 65 0e 8f 07 04 af c2 20 38 a3 07 e3 03
>3a3108		85 0c 8f 08 04 af 38 af 10 f0 3a 8f 0e 04 af 38
>3a3118		a3 09 e3 05 8f 0a 04 af e2 20 a3 0b 8f 01 04 af
>3a3128		af 00 04 af 09 80 8f 00 04 af af 01 04 af 30 fa
>3a3138		a9 00 8f 00 04 af c2 20 3b 18 69 0c 00 1b 28 60
>3a3148		08 c2 20 c9 40 00 b0 13 0a 0a 0a 18 69 00 0c 85
>3a3158		9e a9 af 00 69 00 00 85 a0 28 60 08 c2 20 48 a9
>3a3168		00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29
>3a3178		ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20 3b 38 e9
>3a3188		03 00 1b c2 30 20 4d 1b 20 15 06 83 01 a9 2c 00
>3a3198		20 6b 20 e2 20 20 4d 1b 20 15 06 a5 23 c9 08 b0
>3a31a8		56 83 03 a9 2c 20 6b 20 20 4d 1b 20 03 05 c2 20
>3a31b8		38 a5 23 e9 00 00 85 23 a5 25 e9 b0 00 85 25 30
>3a31c8		36 c2 20 a3 01 aa 20 48 31 a5 23 a0 01 00 97 9e
>3a31d8		e2 20 a5 25 c8 c8 97 9e bf 18 f0 3a 29 f1 85 0c
>3a31e8		a3 03 0a 29 0e 05 0c 87 9e 9f 18 f0 3a c2 20 3b
>3a31f8		18 69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68
>3a3208		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a3218		1c e2 20 dc d4 08 08 c2 20 3b 38 e9 04 00 1b c2
>3a3228		30 20 4d 1b 20 15 06 83 01 a9 2c 00 20 6b 20 20
>3a3238		4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 6b 20 20
>3a3248		4d 1b 20 03 05 a3 01 20 48 31 a3 03 a0 04 00 97
>3a3258		9e a5 23 a0 06 00 97 9e c2 20 3b 18 69 04 00 1b
>3a3268		28 60 08 c2 20 3b 38 e9 03 00 1b c2 30 20 4d 1b
>3a3278		20 15 06 83 01 a9 2c 00 20 6b 20 e2 20 20 4d 1b
>3a3288		20 03 05 a5 23 d0 04 83 03 80 04 a9 01 83 03 a9
>3a3298		2c 85 37 20 a0 20 b0 20 c2 30 a3 01 aa 20 48 31
>3a32a8		e2 20 bf 18 f0 3a 29 fe 85 0c a3 03 29 01 05 0c
>3a32b8		9f 18 f0 3a 87 9e 80 36 c2 30 20 5e 1f 20 4d 1b
>3a32c8		20 15 06 a5 23 c9 08 00 b0 2e 0a 0a 0a 0a 85 0c
>3a32d8		a3 01 aa 20 48 31 e2 20 a3 03 29 01 05 0c 85 0c
>3a32e8		bf 18 f0 3a 29 8e 05 0c 87 9e 9f 18 f0 3a c2 20
>3a32f8		3b 18 69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b
>3a3308		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a3318		9f 1c e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d
>3a3328		00 01 a9 04 00 8d 02 01 18 ad 04 01 69 80 02 85
>3a3338		9e a9 af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b
>3a3348		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a3358		9f 1c e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d
>3a3368		00 01 a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85
>3a3378		9e a9 af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b
>3a3388		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a3398		9f 1c e2 20 dc d4 08 08 c2 20 3b 38 e9 06 00 1b
>3a33a8		c2 20 20 4d 1b 20 15 06 a5 23 83 01 a9 2c 00 20
>3a33b8		6b 20 20 4d 1b 20 15 06 a5 23 83 03 a9 2c 00 20
>3a33c8		6b 20 20 4d 1b 20 15 06 a5 23 83 05 a9 2c 00 20
>3a33d8		6b 20 20 4d 1b 20 03 05 a3 01 20 1f 33 a5 23 87
>3a33e8		9e e2 20 38 a5 25 e9 b0 a0 02 00 97 9e a3 05 d0
>3a33f8		0d e2 20 a3 03 29 07 a0 03 00 97 9e 80 0d e2 20
>3a3408		a3 03 29 07 09 08 a0 03 00 97 9e c2 20 3b 18 69
>3a3418		06 00 1b 28 60 08 c2 20 3b 38 e9 06 00 1b c2 20
>3a3428		20 4d 1b 20 15 06 a5 23 83 01 a9 2c 00 20 6b 20
>3a3438		20 4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 6b 20
>3a3448		20 4d 1b 20 03 05 a5 23 83 05 a9 2c 00 20 6b 20
>3a3458		20 4d 1b 20 03 05 a3 01 20 5f 33 a5 23 a0 01 00
>3a3468		97 9e e2 20 38 a5 25 e9 b0 c8 c8 97 9e c2 20 a3
>3a3478		03 a0 04 00 97 9e a3 05 a0 06 00 97 9e c2 20 3b
>3a3488		18 69 06 00 1b 28 60 08 c2 20 f4 00 00 c2 20 20
>3a3498		4d 1b 20 15 06 a5 23 83 01 a9 2c 00 20 6b 20 20
>3a34a8		4d 1b 20 03 05 a3 01 20 5f 33 a5 23 d0 06 e2 20
>3a34b8		a9 00 80 04 e2 20 a9 01 e2 20 a0 00 00 97 9e c2
>3a34c8		20 68 28 60 08 c2 20 3b 38 e9 04 00 1b c2 20 20
>3a34d8		4d 1b 20 15 06 a5 23 83 01 a9 2c 00 20 6b 20 20
>3a34e8		4d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 6b 20 20
>3a34f8		4d 1b 20 03 05 a3 01 20 5f 33 a5 23 a0 0a 00 97
>3a3508		9e a3 03 a0 08 00 97 9e c2 20 3b 18 69 04 00 1b
>3a3518		28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3528		a9 00 8f 58 f0 3a af 5c f0 3a c9 b0 b0 1c 8f 24
>3a3538		04 af af 5b f0 3a 8f 23 04 af af 5a f0 3a 8f 22
>3a3548		04 af a9 10 8f 58 f0 3a 80 17 38 e9 b0 8f 04 04
>3a3558		af af 5b f0 3a 8f 03 04 af af 5a f0 3a 8f 02 04
>3a3568		af af 59 f0 3a d0 3c af 58 f0 3a f0 1b af 5d f0
>3a3578		3a 8f 28 04 af af 5e f0 3a 8f 29 04 af af 5f f0
>3a3588		3a 8f 2a 04 af 82 8b 00 af 5d f0 3a 8f 08 04 af
>3a3598		af 5e f0 3a 8f 09 04 af af 5f f0 3a 8f 0a 04 af
>3a35a8		82 70 00 af 58 f0 3a 09 01 8f 58 f0 3a 89 10 f0
>3a35b8		32 af 60 f0 3a 8f 28 04 af af 61 f0 3a 8f 29 04
>3a35c8		af af 62 f0 3a 8f 2a 04 af af 63 f0 3a 8f 2b 04
>3a35d8		af af 64 f0 3a 8f 2c 04 af af 65 f0 3a 8f 2d 04
>3a35e8		af 80 30 af 60 f0 3a 8f 08 04 af af 61 f0 3a 8f
>3a35f8		09 04 af af 62 f0 3a 8f 0a 04 af af 63 f0 3a 8f
>3a3608		0b 04 af af 64 f0 3a 8f 0c 04 af af 65 f0 3a 8f
>3a3618		0d 04 af e2 20 af 69 f0 3a c9 b0 b0 20 8f 27 04
>3a3628		af af 68 f0 3a 8f 26 04 af af 67 f0 3a 8f 25 04
>3a3638		af af 58 f0 3a 09 20 8f 58 f0 3a 80 17 38 e9 b0
>3a3648		8f 07 04 af af 68 f0 3a 8f 06 04 af af 67 f0 3a
>3a3658		8f 05 04 af af 66 f0 3a d0 3e af 58 f0 3a 89 20
>3a3668		f0 1b af 6a f0 3a 8f 28 04 af af 6b f0 3a 8f 29
>3a3678		04 af af 6c f0 3a 8f 2a 04 af 82 8b 00 af 6a f0
>3a3688		3a 8f 08 04 af af 6b f0 3a 8f 09 04 af af 6c f0
>3a3698		3a 8f 0a 04 af 82 70 00 af 58 f0 3a 09 02 8f 58
>3a36a8		f0 3a 89 20 f0 32 af 6d f0 3a 8f 28 04 af af 6e
>3a36b8		f0 3a 8f 29 04 af af 6f f0 3a 8f 2a 04 af af 70
>3a36c8		f0 3a 8f 2b 04 af af 71 f0 3a 8f 2e 04 af af 72
>3a36d8		f0 3a 8f 2f 04 af 80 30 af 6d f0 3a 8f 08 04 af
>3a36e8		af 6e f0 3a 8f 09 04 af af 6f f0 3a 8f 0a 04 af
>3a36f8		af 70 f0 3a 8f 0b 04 af af 71 f0 3a 8f 0e 04 af
>3a3708		af 72 f0 3a 8f 0f 04 af af 58 f0 3a 29 30 f0 43
>3a3718		c9 10 f0 76 c9 20 d0 03 82 8a 00 af 58 f0 3a 29
>3a3728		03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68
>3a3738		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a3748		1c e2 20 dc d4 08 a9 01 80 02 a9 03 8f 20 04 af
>3a3758		82 7d 00 af 58 f0 3a 29 03 f0 23 c9 03 f0 23 08
>3a3768		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08
>3a3778		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 a9 01
>3a3788		80 02 a9 03 8f 00 04 af 80 34 af 58 f0 3a 29 01
>3a3798		0a 09 11 8f 20 04 af af 58 f0 3a 29 02 09 11 8f
>3a37a8		00 04 af 80 19 af 58 f0 3a 29 02 09 21 8f 20 04
>3a37b8		af af 58 f0 3a 29 01 0a 09 21 8f 00 04 af af 00
>3a37c8		04 af 09 80 8f 00 04 af af 58 f0 3a 29 30 f0 0f
>3a37d8		af 20 04 af 09 80 8f 20 04 af ea ea ea ea ea af
>3a37e8		01 04 af 89 80 d0 f8 a9 00 8f 20 04 af 8f 00 04
>3a37f8		af 28 2b 60 0b 08 e2 20 c2 10 a9 00 a2 00 00 8f
>3a3808		59 f0 3a e8 e0 1a 00 d0 f6 20 bf 20 c9 e6 f0 23
>3a3818		c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3828		a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>3a3838		dc d4 08 20 6b 20 20 4d 1b 20 03 05 c2 20 a5 23
>3a3848		8f 5a f0 3a e2 20 a5 25 8f 5c f0 3a a9 2c 20 6b
>3a3858		20 20 4d 1b 20 03 05 c2 20 a5 23 8f 5d f0 3a e2
>3a3868		20 a5 25 8f 5f f0 3a e2 20 a9 00 8f 59 f0 3a 82
>3a3878		74 00 20 6b 20 20 4d 1b 20 03 05 c2 20 a5 23 8f
>3a3888		5a f0 3a e2 20 a5 25 8f 5c f0 3a a9 2c 20 6b 20
>3a3898		20 4d 1b 20 bf 05 c2 20 a5 23 8f 60 f0 3a 8d 00
>3a38a8		01 a9 2c 00 20 6b 20 20 4d 1b 20 bf 05 c2 20 a5
>3a38b8		23 8f 62 f0 3a 8d 02 01 a9 2c 00 20 6b 20 20 4d
>3a38c8		1b 20 bf 05 c2 20 a5 23 8f 64 f0 3a c2 20 ad 04
>3a38d8		01 8f 5d f0 3a e2 20 ad 06 01 8f 5f f0 3a e2 20
>3a38e8		a9 01 8f 59 f0 3a e2 20 a9 9c 20 6b 20 20 bf 20
>3a38f8		c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b
>3a3908		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a3918		9f 1c e2 20 dc d4 08 20 6b 20 20 4d 1b 20 03 05
>3a3928		c2 20 a5 23 8f 67 f0 3a e2 20 a5 25 8f 69 f0 3a
>3a3938		a9 2c 20 6b 20 20 4d 1b 20 03 05 c2 20 a5 23 8f
>3a3948		6a f0 3a e2 20 a5 25 8f 6c f0 3a e2 20 a9 00 8f
>3a3958		66 f0 3a 82 74 00 20 6b 20 20 4d 1b 20 03 05 c2
>3a3968		20 a5 23 8f 67 f0 3a e2 20 a5 25 8f 69 f0 3a a9
>3a3978		2c 20 6b 20 20 4d 1b 20 bf 05 c2 20 a5 23 8f 6d
>3a3988		f0 3a 8d 00 01 a9 2c 00 20 6b 20 20 4d 1b 20 bf
>3a3998		05 c2 20 a5 23 8f 6f f0 3a 8d 02 01 a9 2c 00 20
>3a39a8		6b 20 20 4d 1b 20 bf 05 c2 20 a5 23 8f 71 f0 3a
>3a39b8		c2 20 ad 04 01 8f 6a f0 3a e2 20 ad 06 01 8f 6c
>3a39c8		f0 3a e2 20 a9 01 8f 66 f0 3a c2 20 af 5d f0 3a
>3a39d8		cf 6a f0 3a d0 14 e2 20 af 5f f0 3a cf 6c f0 3a
>3a39e8		d0 08 c2 20 20 1a 35 28 2b 60 08 c2 20 48 a9 00
>3a39f8		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>3a3a08		00 20 9f 1c e2 20 dc d4 08 08 c2 30 20 4d 1b 20
>3a3a18		15 06 a5 23 48 a9 2c 00 20 6b 20 20 4d 1b 20 15
>3a3a28		06 a4 23 fa 20 20 00 28 60 08 20 7f 1f e2 20 a7
>3a3a38		00 d0 03 4c d9 3a c9 3a d0 03 4c d9 3a c9 22 d0
>3a3a48		0b 20 59 1a 20 e7 43 a9 3b 20 6b 20 20 94 03 90
>3a3a58		44 20 8d 51 90 3f a9 3f 20 18 00 a9 20 20 18 00
>3a3a68		20 10 00 e2 20 a5 ea c9 02 f0 49 c9 00 d0 03 82
>3a3a78		84 00 c9 01 f0 5d 08 c2 20 48 a9 00 08 5b 68 28
>3a3a88		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a3a98		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3aa8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a3ab8		20 dc d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85 25
>3a3ac8		e2 20 a9 02 85 27 c2 20 20 f0 50 a9 0d 00 20 18
>3a3ad8		00 28 60 c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c
>3a3ae8		85 00 a9 00 00 85 02 20 af 57 c2 20 a5 40 85 00
>3a3af8		a5 42 85 02 80 d0 c2 20 a5 00 85 40 a5 02 85 42
>3a3b08		a9 00 4c 85 00 a9 00 00 85 02 20 8a 07 c2 20 a5
>3a3b18		40 85 00 a5 42 85 02 80 ad 08 20 7f 1f e2 20 a7
>3a3b28		00 f0 47 c9 3a f0 43 20 94 03 90 40 20 8d 51 90
>3a3b38		3b 20 ae 13 20 14 00 e2 20 a0 00 00 97 16 a9 00
>3a3b48		c8 97 16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9
>3a3b58		02 85 27 20 f0 50 20 7f 1f a7 00 f0 0d c9 3a f0
>3a3b68		09 c9 2c d0 07 20 5e 1f 80 b0 28 60 08 c2 20 48
>3a3b78		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a3b88		29 ff 00 20 9f 1c e2 20 dc d4 08 08 20 4d 1b 20
>3a3b98		03 05 e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20
>3a3ba8		a5 25 85 a5 e2 20 a9 2c 85 37 20 a0 20 90 41 20
>3a3bb8		5e 1f 20 4d 1b 20 bf 05 c2 20 a5 23 85 55 e2 20
>3a3bc8		a9 2c 85 37 20 a0 20 90 27 20 5e 1f 20 4d 1b 20
>3a3bd8		bf 05 c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 a0
>3a3be8		20 90 0d 20 5e 1f 20 4d 1b 20 bf 05 c2 20 a4 23
>3a3bf8		a6 59 a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 a3
>3a3c08		1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3c18		04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>3a3c28		d4 08 08 e2 20 20 7f 1f 20 8d 51 90 64 a9 8f 20
>3a3c38		6b 20 a9 01 20 ac 18 a2 01 00 a9 00 8f 00 4d 00
>3a3c48		20 4d 1b 20 bf 05 c2 20 a5 23 9f 00 4d 00 e2 20
>3a3c58		af 00 4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 7f 1f
>3a3c68		a7 00 c9 2c f0 25 c9 90 d0 27 20 5e 1f 20 0b 64
>3a3c78		c2 20 a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea
>3a3c88		09 80 85 ea 85 27 20 f0 50 28 60 20 5e 1f 4c 48
>3a3c98		3c 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3ca8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>3a3cb8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a3cc8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08
>3a3cd8		20 7f 1f e2 20 a7 00 f0 28 c9 3a f0 24 20 94 03
>3a3ce8		90 21 20 8d 51 90 1c 20 2a 3d 20 f0 50 20 7f 1f
>3a3cf8		a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 5e 1f 80
>3a3d08		cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3d18		02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>3a3d28		d4 08 08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5
>3a3d38		1a 85 44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85
>3a3d48		00 a5 3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7
>3a3d58		00 f0 53 c9 3a f0 4f c9 2c d0 03 20 5e 1f 20 7f
>3a3d68		1f a7 00 c9 22 f0 4e 20 ad 03 b0 4e 08 c2 20 48
>3a3d78		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a3d88		29 ff 00 20 9f 1c e2 20 dc d4 08 c2 20 a9 00 00
>3a3d98		85 1a a9 36 00 85 1c 18 a5 1a 69 04 00 85 00 a5
>3a3da8		1c 69 00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37
>3a3db8		20 b5 1f 80 a9 20 59 1a 80 03 20 8e 19 c2 20 a5
>3a3dc8		00 85 38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5
>3a3dd8		44 85 1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28
>3a3de8		60 20 a3 1f 60 64 38 64 3a 64 3c 64 3e 60 20 24
>3a3df8		00 60 20 4d 1b c2 20 a5 25 48 a5 23 48 e2 20 a7
>3a3e08		00 c9 2c d0 22 20 5e 1f 20 4d 1b c2 20 a5 26 d0
>3a3e18		35 68 85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0
>3a3e28		02 00 a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68
>3a3e38		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a3e48		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3e58		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a3e68		e2 20 dc d4 08 20 4d 1b c2 20 a5 25 48 a5 23 48
>3a3e78		e2 20 a7 00 c9 2c d0 19 20 5e 1f 20 4d 1b c2 20
>3a3e88		a5 25 d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08
>3a3e98		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3ea8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>3a3eb8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a3ec8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20
>3a3ed8		4d 1b c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c
>3a3ee8		d0 1f 20 5e 1f 20 4d 1b e2 20 a5 24 d0 32 c2 20
>3a3ef8		a5 25 d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08
>3a3f08		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3f18		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>3a3f28		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a3f38		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08
>3a3f48		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08
>3a3f58		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 e2
>3a3f68		20 a7 00 f0 05 20 5e 1f 80 f7 28 60 08 28 60 08
>3a3f78		28 60 08 28 60 08 c2 20 a5 1c 20 66 1c a5 1a 20
>3a3f88		66 1c a5 02 48 a5 00 48 20 a3 1f a5 02 20 66 1c
>3a3f98		a5 00 20 66 1c 68 85 00 68 85 02 20 7f 1f 20 8d
>3a3fa8		51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3fb8		05 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>3a3fc8		d4 08 e2 20 a5 ea 20 7d 1c a5 e9 20 7d 1c c2 20
>3a3fd8		a5 e7 20 66 1c 20 7f 1f e2 20 a7 00 c9 8a d0 6a
>3a3fe8		a5 ea c9 00 f0 04 c9 01 f0 00 20 5e 1f 20 4d 1b
>3a3ff8		20 f0 50 e2 20 a9 9c 20 6b 20 20 4d 1b c2 20 a5
>3a4008		27 20 66 1c a5 25 20 66 1c a5 23 20 66 1c e2 20
>3a4018		a9 9d 85 37 20 a0 20 90 1b 20 5e 1f 20 4d 1b e2
>3a4028		20 a5 27 20 66 1c c2 20 a5 25 20 66 1c a5 23 20
>3a4038		66 1c 80 14 c2 20 a9 00 00 20 66 1c a9 00 00 20
>3a4048		66 1c a9 01 00 20 66 1c 28 60 08 c2 20 48 a9 00
>3a4058		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a4068		00 20 9f 1c e2 20 dc d4 08 08 8b 08 e2 20 48 a9
>3a4078		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a4088		30 a4 33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2
>3a4098		20 85 e9 b9 10 00 85 ea c2 20 5a 20 8e 4f 7a c2
>3a40a8		20 b9 00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00
>3a40b8		85 2d c2 20 5a 20 1d 26 20 f0 50 7a c2 20 b9 06
>3a40c8		00 85 29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2
>3a40d8		20 b9 02 00 30 0a 20 a6 28 20 cc 04 f0 28 80 08
>3a40e8		20 66 28 20 cc 04 f0 1e c2 20 b9 12 00 85 00 b9
>3a40f8		14 00 85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20
>3a4108		a9 03 85 dc 80 17 a2 23 08 20 6d 18 c2 20 18 a5
>3a4118		33 69 1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60
>3a4128		08 a5 1a 48 a5 1c 48 20 7f 1f 20 8a 07 a5 23 f0
>3a4138		26 20 5d 22 90 42 e2 20 a9 02 85 dc 20 a3 1f c2
>3a4148		20 68 20 66 1c 68 20 66 1c a5 02 20 66 1c a5 00
>3a4158		20 66 1c e6 31 28 60 68 68 08 c2 20 48 a9 00 08
>3a4168		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a4178		20 9f 1c e2 20 dc d4 08 68 68 08 c2 20 48 a9 00
>3a4188		08 5b 68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff
>3a4198		00 20 9f 1c e2 20 dc d4 08 08 c2 30 a5 31 f0 1e
>3a41a8		20 88 1c 85 00 20 88 1c 85 02 20 88 1c 85 1a 20
>3a41b8		88 1c 85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2
>3a41c8		20 48 a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00
>3a41d8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 20 4d
>3a41e8		1b 20 cc 04 f0 1c e2 20 a9 97 20 6b 20 20 8a 07
>3a41f8		20 cc 04 f0 12 20 5d 22 90 2c e2 20 a9 02 85 dc
>3a4208		80 03 20 a3 1f 28 60 08 c2 20 48 a9 00 08 5b 68
>3a4218		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a4228		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4238		e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a4248		e2 20 dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20
>3a4258		7f 1f 20 8a 07 a5 23 f0 0d 20 5d 22 90 27 e2 20
>3a4268		a9 02 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4278		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a4288		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4298		20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a42a8		20 dc d4 08 20 0f 18 20 58 0f 20 8d 4e 60 08 a7
>3a42b8		00 10 03 20 5e 1f 20 8d 51 b0 03 4c 2d 43 e2 20
>3a42c8		20 bf 20 c9 8f d0 0e a9 8f 20 6b 20 a9 00 8f 00
>3a42d8		4d 00 20 91 19 20 7f 1f e2 20 a7 00 c9 8a f0 03
>3a42e8		4c 2d 43 20 5e 1f a5 ea 48 a5 e9 48 a5 e8 48 a5
>3a42f8		e7 48 20 4d 1b 68 85 e7 68 85 e8 68 85 e9 68 85
>3a4308		ea 29 80 f0 1b 20 00 4f 90 3a c2 20 a0 09 00 b7
>3a4318		08 85 c0 e2 20 c8 c8 b7 08 85 c2 20 ec 65 80 03
>3a4328		20 f0 50 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4338		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a4348		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4358		a9 05 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>3a4368		dc d4 08 08 e2 20 20 bf 20 c9 00 f0 6d 20 4d 1b
>3a4378		e2 20 a5 27 c9 ff f0 1b c9 02 d0 05 20 e7 43 80
>3a4388		12 c9 00 d0 05 20 07 44 80 09 c9 01 d0 4f 20 1a
>3a4398		44 80 00 20 7f 1f a7 00 f0 40 c9 3a f0 3c c9 2c
>3a43a8		f0 23 c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28
>3a43b8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a43c8		e2 20 dc d4 08 a9 09 20 18 00 20 5e 1f 20 7f 1f
>3a43d8		a7 00 f0 09 c9 3a f0 05 80 93 20 89 02 28 60 08
>3a43e8		8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0
>3a43f8		00 00 b7 23 f0 06 20 18 00 c8 80 f6 ab 28 60 08
>3a4408		c2 20 20 0d 14 a5 16 85 23 a5 18 85 25 20 e7 43
>3a4418		28 60 08 20 56 5b c2 20 a5 16 85 23 a5 18 85 25
>3a4428		20 e7 43 28 60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f
>3a4438		18 69 30 97 16 c8 a5 b5 29 0f 18 69 30 97 16 c8
>3a4448		28 60 e2 20 a9 8f 20 6b 20 08 20 4d 1b e2 20 c2
>3a4458		10 af 0e 08 af 09 08 8f 0e 08 af 20 ae 13 a0 00
>3a4468		00 af 06 08 af 20 2d 44 a9 2f 97 16 c8 af 09 08
>3a4478		af 20 2d 44 a9 2f 97 16 c8 af 0f 08 af 20 2d 44
>3a4488		af 0a 08 af 20 2d 44 a9 00 97 16 af 0e 08 af 29
>3a4498		f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2
>3a44a8		20 a9 02 85 27 28 e2 20 20 5e 1f 60 e2 20 a9 8f
>3a44b8		20 6b 20 08 20 4d 1b e2 20 c2 10 af 0e 08 af 09
>3a44c8		08 8f 0e 08 af 20 ae 13 a0 00 00 af 04 08 af 29
>3a44d8		7f 20 2d 44 a9 3a 97 16 c8 af 02 08 af 20 2d 44
>3a44e8		a9 3a 97 16 c8 af 00 08 af 20 2d 44 a9 00 97 16
>3a44f8		af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16 85 23
>3a4508		a5 18 85 25 e2 20 a9 02 85 27 28 e2 20 20 5e 1f
>3a4518		60 e2 20 a9 8f 20 6b 20 08 20 4d 1b e2 20 a9 01
>3a4528		85 27 a9 03 8f 00 e2 af a9 01 8f 01 e2 af c2 30
>3a4538		af 84 e8 af 8f 08 e2 af af 84 e8 af 29 ff 7f 8f
>3a4548		0a e2 af a9 ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2
>3a4558		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>3a4568		28 e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b 20 08 c2
>3a4578		30 20 4d 1b 20 95 05 c2 20 a5 25 48 a5 23 48 20
>3a4588		7f 1f e2 20 a7 00 c9 2c f0 03 4c e6 45 20 5e 1f
>3a4598		20 4d 1b 20 bf 05 c2 20 a5 23 48 20 7f 1f e2 20
>3a45a8		a7 00 c9 2c f0 03 4c e6 45 20 5e 1f 20 4d 1b 20
>3a45b8		bf 05 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>3a45c8		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>3a45d8		a9 02 85 27 20 06 16 e2 20 20 5e 1f 28 60 08 c2
>3a45e8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a45f8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20
>3a4608		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a4618		20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f
>3a4628		20 6b 20 08 c2 30 20 4d 1b e2 20 a5 27 c9 02 f0
>3a4638		03 4c a8 46 c2 20 a5 25 48 a5 23 48 20 7f 1f e2
>3a4648		20 a7 00 c9 2c f0 03 4c c7 46 20 5e 1f 20 4d 1b
>3a4658		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>3a4668		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>3a4678		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>3a4688		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>3a4698		e2 20 a9 00 85 2d 20 06 16 e2 20 20 5e 1f 28 60
>3a46a8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a46b8		08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08
>3a46c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a46d8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2
>3a46e8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a46f8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9
>3a4708		8f 20 6b 20 08 c2 30 20 4d 1b e2 20 a5 27 c9 02
>3a4718		f0 03 4c 71 47 c2 20 a5 25 48 a5 23 48 20 7f 1f
>3a4728		e2 20 a7 00 c9 2c f0 03 4c 90 47 20 5e 1f 20 4d
>3a4738		1b e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>3a4748		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>3a4758		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>3a4768		06 16 e2 20 20 5e 1f 28 60 08 c2 20 48 a9 00 08
>3a4778		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a4788		20 9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a4798		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a47a8		9f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a47b8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a47c8		1c e2 20 dc d4 08 e2 20 a9 8f 20 6b 20 20 4d 1b
>3a47d8		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>3a47e8		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 8a 07 a5
>3a47f8		40 85 00 a5 42 85 02 e2 20 20 5e 1f 60 08 c2 20
>3a4808		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a4818		20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f
>3a4828		20 6b 20 08 20 4d 1b c2 10 e2 20 a5 27 c9 00 d0
>3a4838		1a 20 0d 14 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>3a4848		a9 02 85 27 28 e2 20 20 5e 1f 60 08 c2 20 48 a9
>3a4858		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4868		ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b
>3a4878		20 08 20 4d 1b 20 95 05 c2 20 64 0c 64 0e e2 30
>3a4888		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>3a4898		23 20 be 03 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>3a48a8		06 0c 26 0e 06 0c 26 0e e2 20 20 df 03 05 0c 85
>3a48b8		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>3a48c8		a9 00 85 27 28 e2 20 20 5e 1f 60 e2 20 a9 8f 20
>3a48d8		6b 20 08 20 4d 1b 20 03 05 20 ae 13 e2 30 a0 ff
>3a48e8		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 3a 97 16
>3a48f8		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 16
>3a4908		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>3a4918		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>3a4928		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>3a4938		02 85 27 28 e2 20 20 5e 1f 60 08 c2 20 48 a9 00
>3a4948		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4958		00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b 20
>3a4968		20 4d 1b e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>3a4978		c2 10 a6 23 20 9a 14 ab 84 23 c2 20 64 25 e2 20
>3a4988		a9 00 85 27 e2 20 20 5e 1f 60 08 c2 20 48 a9 00
>3a4998		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a49a8		00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b 20
>3a49b8		20 4d 1b e2 20 a5 27 c9 00 d0 12 e2 20 a7 23 85
>3a49c8		23 64 24 64 25 64 30 e2 20 20 5e 1f 60 08 c2 20
>3a49d8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a49e8		20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f
>3a49f8		20 6b 20 20 4d 1b e2 20 a5 27 c9 00 d0 1d c2 20
>3a4a08		a7 23 85 0c e2 20 a0 02 00 b7 23 85 25 64 26 c2
>3a4a18		20 a5 0c 85 23 e2 20 20 5e 1f 60 08 c2 20 48 a9
>3a4a28		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4a38		ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b
>3a4a48		20 20 4d 1b e2 20 a5 27 c9 00 d0 0e c2 20 a7 23
>3a4a58		85 23 64 25 e2 20 20 5e 1f 60 08 c2 20 48 a9 00
>3a4a68		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4a78		00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f 20 6b 20
>3a4a88		20 4d 1b e2 20 a5 27 c9 00 d0 24 20 ae 13 a5 23
>3a4a98		87 16 a9 00 a0 01 00 97 16 c2 20 a5 16 85 23 a5
>3a4aa8		18 85 25 e2 20 a9 02 85 27 e2 20 20 5e 1f 60 08
>3a4ab8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a4ac8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20
>3a4ad8		a9 8f 20 6b 20 20 4d 1b e2 20 a5 27 c9 02 d0 14
>3a4ae8		a7 23 85 23 64 24 64 25 64 26 a9 00 85 27 e2 20
>3a4af8		20 5e 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4b08		a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>3a4b18		dc d4 08 e2 20 a9 8f 20 6b 20 20 4d 1b e2 20 a5
>3a4b28		27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e a5
>3a4b38		24 d0 4a c2 10 20 ae 13 a4 23 e2 20 a9 00 97 16
>3a4b48		88 30 07 a9 20 97 16 88 10 fb a9 02 85 27 c2 20
>3a4b58		a5 16 85 23 a5 18 85 25 e2 20 20 5e 1f 60 08 c2
>3a4b68		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a4b78		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 c2 20
>3a4b88		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a4b98		20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 8f
>3a4ba8		20 6b 20 20 4d 1b e2 20 a5 27 c9 00 d0 39 e2 20
>3a4bb8		a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 ae
>3a4bc8		13 a4 23 e2 20 a9 00 97 16 88 30 07 a9 09 97 16
>3a4bd8		88 10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85
>3a4be8		25 e2 20 20 5e 1f 60 08 c2 20 48 a9 00 08 5b 68
>3a4bf8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a4c08		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4c18		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a4c28		e2 20 dc d4 08 e2 20 a9 8f 20 6b 20 20 4d 1b e2
>3a4c38		20 a5 27 c9 00 f0 23 c9 01 f0 3e 08 c2 20 48 a9
>3a4c48		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4c58		ff 00 20 9f 1c e2 20 dc d4 08 c2 20 a5 25 10 21
>3a4c68		49 ff ff 85 25 a5 23 49 ff ff 18 69 01 00 85 23
>3a4c78		a5 25 69 00 00 85 25 80 08 e2 20 a5 26 29 7f 85
>3a4c88		26 e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b 20 20 4d
>3a4c98		1b e2 20 a5 27 c9 00 d0 25 c2 20 a5 25 30 12 d0
>3a4ca8		04 a5 23 f0 13 a9 00 00 85 25 a9 01 00 85 23 80
>3a4cb8		07 a9 ff ff 85 25 85 23 e2 20 20 5e 1f 60 08 c2
>3a4cc8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a4cd8		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9
>3a4ce8		8f 20 6b 20 20 4d 1b 20 03 05 e2 20 20 5e 1f 60
>3a4cf8		e2 20 a9 8f 20 6b 20 20 4d 1b 20 71 06 20 b6 5f
>3a4d08		e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b 20 20 4d 1b
>3a4d18		20 71 06 20 e5 5f e2 20 20 5e 1f 60 e2 20 a9 8f
>3a4d28		20 6b 20 20 4d 1b 20 71 06 20 14 60 e2 20 20 5e
>3a4d38		1f 60 e2 20 a9 8f 20 6b 20 20 4d 1b 20 71 06 20
>3a4d48		42 60 e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b 20 20
>3a4d58		4d 1b 20 71 06 20 6b 61 e2 20 20 5e 1f 60 e2 20
>3a4d68		a9 8f 20 6b 20 20 4d 1b 20 71 06 20 41 61 e2 20
>3a4d78		20 5e 1f 60 e2 20 a9 8f 20 6b 20 20 4d 1b 20 71
>3a4d88		06 20 8d 61 e2 20 20 5e 1f 60 e2 20 a9 8f 20 6b
>3a4d98		20 20 4d 1b 20 71 06 20 21 62 e2 20 20 5e 1f 60
>3a4da8		e2 20 a9 8f 20 6b 20 20 4d 1b 20 71 06 20 a3 62
>3a4db8		e2 20 20 5e 1f 60 00 ea 60 08 0b 08 c2 20 48 a9
>3a4dc8		00 08 5b 68 28 c2 30 c2 20 a9 00 00 85 d9 e2 20
>3a4dd8		a9 36 85 db c2 30 a9 00 00 a0 00 00 97 d9 a0 02
>3a4de8		00 97 d9 a0 04 00 97 d9 20 34 1f 2b 28 60 8b 08
>3a4df8		c2 20 a9 00 00 85 1a a9 36 00 85 1c 20 34 1f 20
>3a4e08		13 22 28 ab 60 08 c2 20 64 55 a9 ff 7f 85 59 20
>3a4e18		89 02 20 bf 20 29 ff 00 c9 00 00 f0 2c c9 81 00
>3a4e28		f0 1a 20 7f 1f 20 8a 07 a5 23 85 55 20 bf 20 29
>3a4e38		ff 00 c9 00 00 f0 12 c9 81 00 d0 2a 20 6b 20 20
>3a4e48		7f 1f 20 8a 07 a5 23 85 59 a5 1c 48 a5 1a 48 a5
>3a4e58		02 48 a5 00 48 20 10 17 68 85 00 68 85 02 68 85
>3a4e68		1a 68 85 1c 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4e78		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a4e88		e2 20 dc d4 08 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4e98		c2 20 64 e4 64 e7 e2 20 64 e6 64 e9 64 ea c2 20
>3a4ea8		38 a5 d9 69 04 00 85 e1 e2 20 a5 db 69 00 85 e3
>3a4eb8		28 60 c9 5f f0 1a c9 3a b0 04 c9 30 b0 12 c9 5b
>3a4ec8		b0 04 c9 41 b0 0a c9 7b b0 04 c9 61 b0 02 18 60
>3a4ed8		38 60 08 e2 20 c2 10 a0 00 00 b7 0c f0 0a d7 e7
>3a4ee8		d0 13 c8 c0 08 00 d0 f2 b7 e7 20 08 04 20 ba 4e
>3a4ef8		b0 03 28 38 60 28 18 60 08 e2 20 c2 10 a0 00 00
>3a4f08		a2 00 00 b7 e7 f0 0b 20 08 04 9f 00 4e 00 c8 e8
>3a4f18		80 f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e 85 e7 e2
>3a4f28		20 a9 00 85 e9 c2 20 a5 e4 85 08 d0 06 e2 20 a5
>3a4f38		e6 f0 4d e2 20 a5 e6 85 0a a5 ea a0 00 00 d7 08
>3a4f48		d0 17 c2 20 18 a5 08 69 01 00 85 0c e2 20 a5 0a
>3a4f58		69 00 85 0e 20 da 4e b0 2a a0 0d 00 c2 20 b7 08
>3a4f68		85 0c c8 c8 e2 20 b7 08 85 0e d0 06 c2 20 a5 0c
>3a4f78		f0 0e c2 20 a5 0c 85 08 e2 20 a5 0e 85 0a 80 b9
>3a4f88		28 18 60 28 38 60 08 20 00 4f b0 1f 08 c2 20 48
>3a4f98		a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20
>3a4fa8		29 ff 00 20 9f 1c e2 20 dc d4 08 c2 30 a0 09 00
>3a4fb8		b7 08 85 23 c8 c8 b7 08 85 25 e2 20 a0 00 00 b7
>3a4fc8		08 85 27 28 60 08 c2 20 18 a5 e1 69 10 00 85 08
>3a4fd8		e2 20 a5 e3 69 00 85 0a c5 bc 90 27 c2 20 a5 08
>3a4fe8		c5 ba 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4ff8		a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>3a5008		dc d4 08 c2 20 a5 e1 85 c0 e2 20 a5 e3 85 c2 c2
>3a5018		20 a5 08 85 e1 e2 20 a5 0a 85 e3 28 60 08 e2 20
>3a5028		a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20 03 05 80
>3a5038		2f c9 01 d0 05 20 71 06 80 26 08 c2 20 48 a9 00
>3a5048		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a5058		00 20 9f 1c e2 20 dc d4 08 c9 02 d0 03 20 a0 15
>3a5068		c2 10 20 cd 4f c2 30 18 a5 c0 69 01 00 85 08 e2
>3a5078		20 a5 c2 69 00 85 0a a0 00 00 a9 00 97 08 c8 c0
>3a5088		08 00 d0 f8 a0 00 00 b7 e7 f0 10 20 08 04 20 ba
>3a5098		4e 90 08 97 08 c8 c0 08 00 d0 ec c2 20 a0 09 00
>3a50a8		a5 23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0 0d 00 97
>3a50b8		c0 c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0 85 e4 e2
>3a50c8		20 a5 c2 85 e6 e2 20 a0 00 00 a5 27 97 c0 c9 02
>3a50d8		f0 02 28 60 c2 20 a5 23 85 c0 e2 20 a5 25 85 c2
>3a50e8		20 bc 11 20 d1 11 80 ea 08 c2 30 a5 e4 d0 06 e2
>3a50f8		20 a5 e6 f0 05 20 00 4f b0 05 20 25 50 80 4e e2
>3a5108		20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20 03 05
>3a5118		80 2c c9 01 d0 05 20 71 06 80 23 08 c2 20 48 a9
>3a5128		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a5138		ff 00 20 9f 1c e2 20 dc d4 08 c9 02 f0 11 c2 30
>3a5148		a0 09 00 a5 23 97 08 c8 c8 a5 25 97 08 28 60 20
>3a5158		a0 15 a0 09 00 b7 08 85 c0 c8 c8 e2 20 b7 08 85
>3a5168		c2 20 bc 11 20 f0 11 e2 20 a5 27 c9 02 f0 02 80
>3a5178		cd c2 20 a5 23 85 c0 e2 20 a5 25 85 c2 20 bc 11
>3a5188		20 d1 11 80 b9 08 20 7f 1f e2 20 a7 00 20 94 03
>3a5198		90 42 c2 20 a5 00 85 e7 e2 20 a5 02 85 e9 20 5e
>3a51a8		1f a7 00 f0 0d c9 24 f0 14 c9 25 f0 09 20 ba 4e
>3a51b8		b0 ec a9 01 80 0c 20 5e 1f a9 00 80 05 20 5e 1f
>3a51c8		a9 02 85 ea 20 bf 20 c9 8f d0 06 a5 ea 09 80 85
>3a51d8		ea 28 38 60 28 18 60 08 c2 20 18 a5 23 65 29 85
>3a51e8		23 a5 25 65 2b 85 25 28 60 08 c2 20 38 a5 23 e5
>3a51f8		29 85 23 a5 25 e5 2b 85 25 28 60 08 c2 20 3b 38
>3a5208		e9 0a 00 1b c2 30 a9 00 00 83 01 83 03 83 05 83
>3a5218		07 83 09 a5 25 10 18 a9 00 80 83 01 a5 25 49 ff
>3a5228		ff 85 25 a5 23 49 ff ff 1a 85 23 d0 02 e6 25 a5
>3a5238		2b 10 1a a3 01 49 00 80 83 01 a5 2b 49 ff ff 85
>3a5248		2b a5 29 49 ff ff 1a 85 29 d0 02 e6 2b a5 25 f0
>3a5258		04 a5 2b d0 5a a5 23 8f 00 01 00 a5 29 8f 02 01
>3a5268		00 af 04 01 00 83 03 af 06 01 00 83 05 a5 25 8f
>3a5278		00 01 00 a5 29 8f 02 01 00 18 af 04 01 00 63 05
>3a5288		83 05 af 06 01 00 63 07 83 07 a5 23 8f 00 01 00
>3a5298		a5 2b 8f 02 01 00 18 af 04 01 00 63 05 83 05 af
>3a52a8		06 01 00 63 07 83 07 a3 07 f0 23 a3 09 f0 1f 08
>3a52b8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d 8f d3 08
>3a52c8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 c2 30
>3a52d8		a3 01 10 16 a3 05 49 ff ff 83 05 a3 03 49 ff ff
>3a52e8		1a 83 03 d0 05 a3 05 1a 83 05 a3 03 85 23 a3 05
>3a52f8		85 25 c2 20 3b 18 69 0a 00 1b 28 60 08 c2 20 a5
>3a5308		23 c5 29 a5 25 e5 2b 50 03 49 00 80 30 06 64 23
>3a5318		64 25 80 07 a9 ff ff 85 23 85 25 28 60 08 c2 20
>3a5328		a5 23 c5 29 d0 0c a5 25 c5 2b d0 06 64 23 64 25
>3a5338		80 16 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80 10
>3a5348		eb a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 2b c5
>3a5358		25 d0 0f a5 29 c5 23 d0 09 a9 ff ff 85 23 85 25
>3a5368		80 04 64 23 64 25 28 60 08 c2 20 a5 2b c5 25 d0
>3a5378		0c a5 29 c5 23 d0 06 64 23 64 25 80 07 a9 ff ff
>3a5388		85 23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5
>3a5398		25 c5 2b d0 09 a9 ff ff 85 23 85 25 80 13 a5 29
>3a53a8		c5 23 a5 2b e5 25 50 03 49 00 80 30 e8 64 23 64
>3a53b8		25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5 25 c5 2b
>3a53c8		d0 09 a9 ff ff 85 23 85 25 80 13 a5 23 c5 29 a5
>3a53d8		25 e5 2b 50 03 49 00 80 30 e8 64 23 64 25 28 60
>3a53e8		08 c2 20 8f 12 01 00 8a 8f 10 01 00 af 16 01 00
>3a53f8		aa af 14 01 00 28 60 08 e2 20 a9 03 8f 00 e2 af
>3a5408		a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25
>3a5418		8f 0a e2 af a9 00 00 8f 0c e2 af a9 00 01 8f 0e
>3a5428		e2 af ea ea ea ea ea ea af 08 e2 af 85 23 af 0a
>3a5438		e2 af 85 25 a9 01 00 85 27 28 60 08 e2 20 a9 40
>3a5448		8f 00 e2 af 80 09 08 e2 20 a9 48 8f 00 e2 af a9
>3a5458		02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f
>3a5468		0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea
>3a5478		ea ea e2 20 af 06 e2 af 29 07 d0 10 c2 20 af 08
>3a5488		e2 af 85 23 af 0a e2 af 85 25 28 60 20 2f 55 80
>3a5498		f9 08 e2 20 a9 01 8f 01 e2 af a9 00 8f 00 e2 af
>3a54a8		c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29
>3a54b8		8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af
>3a54c8		05 e2 af 29 17 d0 10 c2 20 af 08 e2 af 85 23 af
>3a54d8		0a e2 af 85 25 28 60 20 2f 55 80 f9 08 e2 20 a9
>3a54e8		00 8f 01 e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f
>3a54f8		08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5
>3a5508		2b 8f 0e e2 af ea ea ea e2 20 af 04 e2 af 29 07
>3a5518		d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>3a5528		28 60 20 2f 55 80 f9 e2 20 89 01 f0 20 00 08 c2
>3a5538		20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f d3 08 00
>3a5548		c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 89 02 f0
>3a5558		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d 8f
>3a5568		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>3a5578		89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5588		a9 0e 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>3a5598		dc d4 08 60 08 e2 20 a9 00 8f 01 e2 af a9 02 8f
>3a55a8		00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f
>3a55b8		0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea
>3a55c8		ea ea e2 20 af 04 e2 af 89 07 f0 01 00 c2 20 af
>3a55d8		08 e2 af 85 23 af 0a e2 af 85 25 28 60 08 e2 20
>3a55e8		a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9 00
>3a55f8		a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f 08
>3a5608		e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85
>3a5618		23 af 0a e2 af 85 25 28 60 08 c2 20 a5 23 d0 0a
>3a5628		a5 25 29 ff 7f d0 03 28 38 60 28 18 60 08 e2 20
>3a5638		38 e9 30 20 2c 04 c2 20 29 ff 00 18 65 23 85 23
>3a5648		a5 25 69 00 00 85 25 28 60 08 e2 20 c9 30 90 04
>3a5658		c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9 41 90 04
>3a5668		c9 47 90 07 80 31 38 e9 57 80 08 38 e9 37 80 03
>3a5678		38 e9 30 06 23 26 24 26 25 26 26 06 23 26 24 26
>3a5688		25 26 26 06 23 26 24 26 25 26 26 06 23 26 24 26
>3a5698		25 26 26 05 23 85 23 28 60 08 e2 20 c9 30 f0 06
>3a56a8		c9 31 f0 0a 80 0f c2 20 06 23 26 25 80 07 c2 20
>3a56b8		38 26 23 26 25 28 60 08 e2 30 a5 61 f0 0d aa a5
>3a56c8		69 d0 15 a9 00 8f 01 e2 af 80 15 e2 20 a9 03 8f
>3a56d8		01 e2 af ea ea ea 80 62 e2 20 a9 01 8f 01 e2 af
>3a56e8		e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10 8f 08 e2
>3a56f8		af a9 00 00 8f 0a e2 af c2 20 a9 00 a0 8f 0c e2
>3a5708		af a9 00 00 8f 0e e2 af ea ea ea ca f0 2c af 08
>3a5718		e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08 00 e2 20
>3a5728		a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f 08 e2 af
>3a5738		af 0e 08 00 8f 0a e2 af 80 be c2 20 af 08 e2 af
>3a5748		85 23 af 0a e2 af 85 25 e2 20 a9 01 85 27 28 60
>3a5758		08 c2 20 a5 5d 85 23 a5 5f 85 25 20 71 59 c2 20
>3a5768		a5 23 85 29 a5 25 85 2b c2 20 a5 59 85 23 a5 5b
>3a5778		85 25 20 99 54 c2 20 a5 55 85 29 a5 57 85 2b 20
>3a5788		4e 54 c2 20 a5 23 85 29 a5 25 85 2b 20 bf 56 20
>3a5798		e4 54 c2 20 a5 65 f0 07 a5 25 09 00 80 85 25 e2
>3a57a8		20 a9 01 85 27 28 60 5a 08 c2 30 64 23 64 25 64
>3a57b8		55 64 57 64 65 64 59 64 5b a9 01 00 85 5d 64 5f
>3a57c8		64 61 64 63 64 69 e2 20 a0 00 00 b7 00 c9 2b f0
>3a57d8		33 c9 2d f0 2b c9 26 f0 3a 20 ad 03 90 03 82 ac
>3a57e8		00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a57f8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>3a5808		a9 01 85 65 c8 b7 00 c9 26 f0 08 20 ad 03 90 d1
>3a5818		82 7a 00 c8 b7 00 c9 68 f0 0e c9 48 f0 0a c9 62
>3a5828		f0 4c c9 42 f0 48 80 b9 c8 b7 00 20 be 03 b0 02
>3a5838		80 af 20 51 56 c8 b7 00 20 be 03 b0 f5 e2 20 a5
>3a5848		65 f0 11 c2 20 38 a9 00 00 e5 23 85 23 a9 00 00
>3a5858		e5 25 85 25 e2 20 a9 00 85 27 c2 20 18 98 65 00
>3a5868		85 00 a5 02 69 00 00 85 02 e2 20 28 7a 60 c8 b7
>3a5878		00 c9 30 f0 07 c9 31 f0 03 82 65 ff 20 a1 56 c8
>3a5888		b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff 20 35 56
>3a5898		c8 b7 00 c9 2e f0 08 20 ad 03 b0 f1 82 9e ff c2
>3a58a8		20 20 71 59 c2 20 a5 23 85 55 a5 25 85 57 64 23
>3a58b8		64 25 e2 20 80 36 20 35 56 c2 20 a5 5f 8f 00 01
>3a58c8		00 a9 0a 00 8f 02 01 00 af 04 01 00 85 5f a5 5d
>3a58d8		8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85
>3a58e8		5d af 06 01 00 18 65 5f 85 5f e2 20 c8 b7 00 c9
>3a58f8		65 f0 24 c9 45 f0 20 20 ad 03 b0 ba c2 20 20 71
>3a5908		59 c2 20 a5 23 85 59 a5 25 85 5b 64 23 64 25 20
>3a5918		58 57 e2 20 82 43 ff c2 20 20 71 59 c2 20 a5 23
>3a5928		85 59 a5 25 85 5b 64 23 64 25 e2 20 c8 b7 00 c9
>3a5938		2b f0 10 c9 2d f0 08 20 ad 03 b0 12 82 a2 fe a9
>3a5948		01 85 69 c8 b7 00 20 ad 03 b0 03 82 93 fe 20 35
>3a5958		56 c8 b7 00 20 ad 03 b0 f5 c2 20 a5 23 85 61 a5
>3a5968		25 85 63 20 58 57 82 f1 fe 08 20 ff 53 28 60 08
>3a5978		c2 20 a9 6e 5c 85 29 a9 3a 00 85 2b e2 20 a9 01
>3a5988		85 2d c2 20 20 4a 5a c9 ff ff d0 0c a9 00 00 8d
>3a5998		23 08 8d 25 08 82 a1 00 f4 00 00 f4 00 00 f4 00
>3a59a8		00 e2 20 ad 26 08 29 80 83 01 ad 25 08 2a ad 26
>3a59b8		08 2a 83 02 a9 00 83 06 ad 25 08 09 80 83 05 ad
>3a59c8		24 08 83 04 ad 23 08 83 03 a3 02 c9 96 f0 3a 90
>3a59d8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d 8f
>3a59e8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>3a59f8		c2 20 a3 05 4a 83 05 a3 03 6a 83 03 e2 20 a3 02
>3a5a08		1a 83 02 c9 96 f0 02 80 e7 a3 01 f0 1b c2 20 a3
>3a5a18		03 49 ff ff 18 69 01 00 8d 23 08 a3 05 49 ff ff
>3a5a28		69 00 00 8d 25 08 80 0c c2 20 a3 03 8d 23 08 a3
>3a5a38		05 8d 25 08 c2 20 68 68 68 e2 20 a9 00 8d 27 08
>3a5a48		28 60 da 08 c2 20 a5 25 48 a5 23 48 20 43 54 20
>3a5a58		21 56 b0 11 a5 25 89 00 80 d0 05 a9 01 00 80 08
>3a5a68		a9 ff ff 80 03 a9 00 00 fa 86 23 fa 86 25 28 fa
>3a5a78		60 08 c2 30 20 4a 5a c9 ff ff d0 05 20 df 04 80
>3a5a88		03 20 f1 04 28 60 08 c2 30 20 4a 5a c9 01 00 d0
>3a5a98		05 20 df 04 80 03 20 f1 04 28 60 08 c2 30 20 4a
>3a5aa8		5a c9 00 00 d0 05 20 df 04 80 03 20 f1 04 28 60
>3a5ab8		08 c2 30 20 4a 5a c9 01 00 f0 05 20 df 04 80 03
>3a5ac8		20 f1 04 28 60 08 c2 30 20 4a 5a c9 ff ff f0 05
>3a5ad8		20 df 04 80 03 20 f1 04 28 60 08 c2 30 20 4a 5a
>3a5ae8		c9 00 00 f0 05 20 df 04 80 03 20 f1 04 28 60 08
>3a5af8		e2 20 97 23 c8 a9 00 97 23 28 60 da 08 e2 20 c9
>3a5b08		80 90 0a 48 a9 2d 20 f7 5a 68 49 ff 1a c2 30 29
>3a5b18		ff 00 c9 64 00 90 0e a2 64 00 20 e8 53 18 69 30
>3a5b28		00 20 f7 5a 8a a2 0a 00 20 e8 53 18 69 30 00 20
>3a5b38		f7 5a 8a 18 69 30 00 20 f7 5a 28 fa 60 08 e2 20
>3a5b48		c2 10 a0 00 00 b7 23 f0 03 c8 80 f9 28 60 08 e2
>3a5b58		20 c2 10 f4 00 00 f4 00 00 f4 00 00 20 21 56 90
>3a5b68		19 20 ae 13 e2 20 a0 00 00 a9 20 97 16 c8 a9 30
>3a5b78		97 16 c8 a9 00 97 16 82 ce 00 e2 20 a5 26 10 08
>3a5b88		29 7f 85 26 a9 01 83 01 c2 20 a9 00 00 83 03 c2
>3a5b98		20 af 6a 5c 3a 85 29 af 6c 5c 3a 85 2b 20 4a 5a
>3a5ba8		89 00 80 d0 12 20 e5 55 a3 03 1a 83 03 20 4a 5a
>3a5bb8		c9 ff ff f0 12 80 ee 20 9c 55 a3 03 3a 83 03 20
>3a5bc8		4a 5a c9 ff ff f0 f0 e2 30 a5 25 0a a5 26 2a 83
>3a5bd8		05 38 a9 96 e3 05 aa f0 0f a5 25 09 80 85 25 46
>3a5be8		25 66 24 66 23 ca d0 f7 c2 10 e2 20 64 26 a9 00
>3a5bf8		85 27 a3 01 f0 11 c2 20 38 a9 00 00 e5 23 85 23
>3a5c08		a9 00 00 e5 25 85 25 20 0d 14 c2 20 a5 16 85 23
>3a5c18		a5 18 85 25 20 45 5b e2 20 c8 a9 00 97 23 88 88
>3a5c28		b7 23 c8 97 23 c0 02 00 d0 f4 a9 2e 97 23 e2 20
>3a5c38		18 a3 03 69 05 83 06 f0 19 20 45 5b a9 45 20 f7
>3a5c48		5a a3 06 20 03 5b 80 0a c2 20 a5 16 85 23 a5 18
>3a5c58		85 25 e2 20 a9 02 85 27 c2 20 3b 18 69 06 00 1b
>3a5c68		28 60 00 50 c3 47 00 00 80 3f f3 04 b5 3f f3 04
>3a5c78		35 3f e2 20 a9 48 8f 00 e2 af c2 20 bd 00 00 8f
>3a5c88		08 e2 af bd 02 00 8f 0a e2 af 88 e8 e8 e8 e8 e2
>3a5c98		20 a9 00 8f 01 e2 af c2 20 af 23 08 00 8f 0c e2
>3a5ca8		af af 25 08 00 8f 0e e2 af ea ea ea af 08 e2 af
>3a5cb8		48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2 af e2 20
>3a5cc8		a9 02 8f 01 e2 af c2 20 bd 00 00 8f 0c e2 af bd
>3a5cd8		02 00 8f 0e e2 af ea ea ea 88 f0 14 af 08 e2 af
>3a5ce8		48 af 0a e2 af 8f 0a e2 af 68 8f 08 e2 af 80 9b
>3a5cf8		af 08 e2 af 8f 23 08 00 af 0a e2 af 8f 25 08 00
>3a5d08		60 e2 20 a9 00 8f 00 e2 af a9 00 8f 01 e2 af c2
>3a5d18		20 a5 23 8f 08 e2 af 8f 0c e2 af af 25 08 00 8f
>3a5d28		0a e2 af 8f 0e e2 af ea ea ea af 08 e2 af 85 23
>3a5d38		af 0a e2 af 85 25 60 e2 20 a9 00 8f 00 e2 af a9
>3a5d48		01 8f 01 e2 af c2 20 a5 23 8f 0c e2 af af 25 08
>3a5d58		00 8f 0e e2 af af 93 63 3a 8f 08 e2 af af 95 63
>3a5d68		3a 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af 0a
>3a5d78		e2 af 85 25 60 a2 00 00 a5 23 c5 29 a5 25 e5 2b
>3a5d88		90 1e a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea
>3a5d98		ea af 08 e2 af 85 23 af 0a e2 af 85 25 e8 80 d8
>3a5da8		60 e2 20 a5 26 10 09 29 7f 85 26 a9 01 48 80 03
>3a5db8		a9 00 48 a9 40 8f 00 e2 af a9 02 8f 01 e2 af c2
>3a5dc8		30 af fb 63 3a 85 29 8f 0c e2 af af fd 63 3a 85
>3a5dd8		2b 8f 0e e2 af 20 7d 5d e2 20 68 c2 20 f0 1e a5
>3a5de8		23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08
>3a5df8		e2 af 85 23 af 0a e2 af 29 ff 7f 85 25 60 5a a2
>3a5e08		00 00 a0 00 00 a5 23 df ff 63 3a a5 25 ff 01 64
>3a5e18		3a 90 2c bf fb 63 3a 8f 08 e2 af bf fd 63 3a 8f
>3a5e28		0a e2 af a5 23 8f 0c e2 af a5 25 8f 0e e2 af ea
>3a5e38		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 38 98
>3a5e48		2a a8 e8 e8 e8 e8 e0 0c 00 d0 ba 98 aa 7a 60 08
>3a5e58		c2 30 48 da 20 09 5d 8b e2 20 a9 3a 48 ab c2 20
>3a5e68		a2 3b 63 5a a0 05 00 20 7a 5c 7a a9 01 00 8f 27
>3a5e78		08 00 ab fa 68 28 60 08 c2 30 48 da a5 23 85 29
>3a5e88		a5 25 85 2b 20 09 5d 8b e2 20 a9 3a 48 ab c2 20
>3a5e98		a2 4f 63 5a a0 05 00 20 7a 5c 7a ab 20 e4 54 fa
>3a5ea8		68 28 60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b
>3a5eb8		20 09 5d 8b e2 20 a9 3a 48 ab c2 20 a2 63 63 5a
>3a5ec8		a0 05 00 20 7a 5c 7a ab 20 e4 54 fa 68 28 60 08
>3a5ed8		c2 30 48 da e2 20 a9 40 8f 00 e2 af a9 02 8f 01
>3a5ee8		e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>3a5ef8		af 93 63 3a 8f 0c e2 af af 95 63 3a 8f 0e e2 af
>3a5f08		ea ea ea af 08 e2 af 85 0c af 0a e2 af 85 0e e2
>3a5f18		20 a9 48 8f 00 e2 af c2 20 ea ea ea af 08 e2 af
>3a5f28		85 10 af 0a e2 af 85 12 e2 20 a9 01 8f 01 e2 af
>3a5f38		c2 20 a5 0c 8f 08 e2 af a5 0e 8f 0a e2 af a5 10
>3a5f48		8f 0c e2 af a5 12 8f 0e e2 af ea ea ea af 08 e2
>3a5f58		af 85 23 af 0a e2 af 85 25 e2 20 a9 08 8f 00 e2
>3a5f68		af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5
>3a5f78		25 8f 0a e2 af ea ea ea af 08 e2 af 85 29 af 0a
>3a5f88		e2 af 85 2b 20 09 5d 8b e2 20 a9 3a 48 ab c2 20
>3a5f98		a2 77 63 5a a0 08 00 20 7a 5c 7a a9 01 00 8f 27
>3a5fa8		08 00 8f 2d 08 00 20 e4 54 ab fa 68 28 60 08 c2
>3a5fb8		30 48 da 20 a9 5d 20 06 5e da 8a 29 01 00 d0 05
>3a5fc8		20 7f 5e 80 03 20 57 5e fa 8a 29 04 00 f0 0a e2
>3a5fd8		20 a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30
>3a5fe8		48 da 20 a9 5d 20 06 5e da 8a 29 01 00 d0 05 20
>3a5ff8		57 5e 80 03 20 7f 5e fa 8a 29 02 00 f0 0a e2 20
>3a6008		a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30 48
>3a6018		da 20 a9 5d 20 06 5e 20 ab 5e 8a 29 01 00 f0 03
>3a6028		20 3f 5d 8a e2 20 4a 4a 69 00 29 01 f0 06 a5 26
>3a6038		09 80 85 26 c2 20 fa 68 28 60 08 c2 30 48 da 5a
>3a6048		a5 25 10 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a6058		a9 17 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20
>3a6068		dc d4 08 c2 30 a5 23 cf 93 63 3a a5 25 cf 95 63
>3a6078		3a b0 04 20 3f 5d 18 a9 00 00 a8 2a 48 e2 20 a9
>3a6088		00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 af eb 63
>3a6098		3a 85 29 8f 0c e2 af af ed 63 3a 85 2b 8f 0e e2
>3a60a8		af 20 7d 5d 8a f0 07 0a 0a 0a 0a 0a 0a a8 af ef
>3a60b8		63 3a 85 29 8f 0c e2 af af f1 63 3a 85 2b 8f 0e
>3a60c8		e2 af 20 7d 5d 8a f0 0b 0a 0a 0a 0a 85 29 18 98
>3a60d8		65 29 a8 af f3 63 3a 85 29 8f 0c e2 af af f5 63
>3a60e8		3a 85 2b 8f 0e e2 af 20 7d 5d 8a f0 09 0a 0a 85
>3a60f8		29 18 98 65 29 a8 af f7 63 3a 85 29 8f 0c e2 af
>3a6108		af f9 63 3a 85 2b 8f 0e e2 af 20 7d 5d 86 29 18
>3a6118		98 65 29 a8 20 d7 5e a5 23 85 29 a5 25 85 2b 98
>3a6128		85 23 64 25 20 71 59 20 4e 54 68 d0 07 a5 25 09
>3a6138		00 80 85 25 7a fa 68 28 60 08 c2 30 48 da a5 23
>3a6148		85 29 a5 25 85 2b 20 09 5d 8b e2 20 a9 3a 48 ab
>3a6158		c2 20 a2 9b 63 a0 05 00 20 7a 5c ab 20 e4 54 fa
>3a6168		68 28 60 08 c2 30 48 da 20 41 61 af 03 64 3a 85
>3a6178		29 af 05 64 3a 85 2b 20 43 54 a5 25 49 00 80 85
>3a6188		25 fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5 25
>3a6198		85 2b 20 09 5d 8b e2 20 a9 3a 48 ab c2 20 a2 af
>3a61a8		63 a0 05 00 20 7a 5c ab 20 e4 54 fa 68 28 60 c2
>3a61b8		20 a5 23 85 29 a5 25 85 2b c2 20 af 93 63 3a 85
>3a61c8		23 af 95 63 3a 85 25 8a f0 30 4a aa 90 03 20 e4
>3a61d8		54 c2 20 a5 25 48 a5 23 48 c2 20 a5 29 85 23 a5
>3a61e8		2b 85 25 20 09 5d c2 20 a5 23 85 29 a5 25 85 2b
>3a61f8		c2 20 68 85 23 68 85 25 80 cd 60 08 c2 30 48 da
>3a6208		8b e2 20 a9 3a 48 ab c2 20 a2 c3 63 5a a0 0a 00
>3a6218		20 7a 5c 7a ab fa 68 28 60 08 c2 30 48 da 5a a5
>3a6228		23 05 25 d0 10 c2 20 af 93 63 3a 85 23 af 95 63
>3a6238		3a 85 25 80 61 a5 25 29 00 80 a8 f0 07 a5 25 29
>3a6248		ff 7f 85 25 c2 20 a5 25 48 a5 23 48 20 03 05 a6
>3a6258		23 20 71 06 c2 20 a5 23 85 29 a5 25 85 2b c2 20
>3a6268		68 85 23 68 85 25 20 43 54 20 03 62 c2 20 a5 25
>3a6278		48 a5 23 48 c2 20 af f7 63 3a 85 23 af f9 63 3a
>3a6288		85 25 20 b7 61 c2 20 68 85 29 68 85 2b 20 e4 54
>3a6298		98 f0 03 20 3f 5d 7a fa 68 28 60 08 c2 30 48 a5
>3a62a8		25 10 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a62b8		17 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>3a62c8		d4 08 c2 30 05 23 f0 68 c2 20 af 97 63 3a 85 29
>3a62d8		af 99 63 3a 85 2b e2 20 a9 01 85 2d c2 20 c2 20
>3a62e8		a5 25 48 a5 23 48 20 99 54 a5 25 c5 2b d0 09 a5
>3a62f8		23 45 29 29 f8 ff f0 30 20 4e 54 c2 20 af 97 63
>3a6308		3a 85 29 af 99 63 3a 85 2b 20 99 54 c2 20 a5 23
>3a6318		85 29 a5 25 85 2b c2 20 68 85 23 68 85 25 c2 20
>3a6328		a5 25 48 a5 23 48 80 be c2 20 68 85 29 68 85 2b
>3a6338		68 28 60 01 0d d0 37 61 0b b6 ba ab aa 2a 3d 00
>3a6348		00 00 bf 00 00 80 3f 1d ef 38 36 01 0d 50 b9 89
>3a6358		88 08 3c ab aa 2a be 00 00 80 3f a4 27 b3 3c d1
>3a6368		0d 5d 3d 89 88 08 3e ab aa aa 3e 00 00 80 3f 89
>3a6378		88 88 3d d9 89 9d 3d 8c 2e ba 3d 39 8e e3 3d 25
>3a6388		49 12 3e cd cc 4c 3e ab aa aa 3e 00 00 80 3f 00
>3a6398		00 00 40 8e e3 f8 3c 6e db 36 3d 9a 99 99 3d ab
>3a63a8		aa 2a 3e 00 00 80 3f 39 8e e3 3d 25 49 12 be cd
>3a63b8		cc 4c 3e ab aa aa be 00 00 80 3f 1d ef 38 36 01
>3a63c8		0d d0 37 01 0d 50 39 61 0b b6 3a 89 88 08 3c ab
>3a63d8		aa 2a 3d ab aa 2a 3e 00 00 00 3f 00 00 80 3f 00
>3a63e8		00 80 3f c1 2c a1 6d 5f 97 07 4b 81 64 5a 42 54
>3a63f8		f8 2d 40 db 0f c9 40 db 0f 49 40 db 0f c9 3f db
>3a6408		0f 49 3f 08 20 bc 11 c2 20 a9 01 00 85 23 a9 00
>3a6418		00 85 25 e2 20 af 00 4d 00 c2 20 29 ff 00 85 8f
>3a6428		a8 a2 01 00 c2 20 bf 00 4d 00 85 29 a9 00 00 85
>3a6438		2b 20 94 26 e8 e8 88 d0 eb c2 20 a9 04 00 85 29
>3a6448		a9 00 00 85 2b 20 94 26 e2 20 af 00 4d 00 85 0c
>3a6458		a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c 85 23 a5
>3a6468		25 69 00 00 85 25 d0 29 e2 20 a5 ea 09 80 a6 23
>3a6478		20 80 0f e2 20 af 00 4d 00 87 c0 a0 01 00 a2 00
>3a6488		00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23 e8 c8 80
>3a6498		f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a64a8		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>3a64b8		e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5
>3a64c8		c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c
>3a64d8		e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08
>3a64e8		c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a64f8		0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>3a6508		64 08 64 0a e2 20 af 00 4d 00 85 8f 64 90 a2 01
>3a6518		00 e2 20 a7 c0 c5 8f f0 1f 08 c2 20 48 a9 00 08
>3a6528		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>3a6538		20 9f 1c e2 20 dc d4 08 c9 01 f0 3a a0 01 00 e2
>3a6548		20 bf 00 4d 00 85 23 64 24 64 25 64 26 b7 c0 85
>3a6558		29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68 20 94 26
>3a6568		c2 20 18 a5 08 65 23 85 08 a5 0a 65 25 85 0a e8
>3a6578		e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00 85 90 65
>3a6588		08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>3a6598		85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5
>3a65a8		08 65 8f 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69
>3a65b8		00 00 85 0a 18 a5 08 65 c0 85 08 e2 20 a5 0a 65
>3a65c8		c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a65d8		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2
>3a65e8		20 dc d4 08 08 20 bc 11 e2 20 a0 00 00 b7 c3 29
>3a65f8		7f c5 27 d0 28 a5 27 48 c2 20 a5 25 48 a5 23 48
>3a6608		20 05 65 68 85 23 68 85 25 e2 20 68 85 27 c2 20
>3a6618		a5 23 87 08 a0 02 00 a5 25 97 08 28 60 08 c2 20
>3a6628		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a6638		20 29 ff 00 20 9f 1c e2 20 dc d4 08 08 20 bc 11
>3a6648		f4 00 00 f4 00 00 e2 20 48 20 05 65 e2 20 68 c2
>3a6658		20 68 68 c2 20 a7 08 85 23 a0 02 00 b7 08 85 25
>3a6668		e2 20 a0 00 00 b7 c3 29 7f 85 27 28 60 da 0b 08
>3a6678		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a5 25 89 f0
>3a6688		ff d0 29 89 0f 00 d0 0c a5 23 89 00 fc d0 05 20
>3a6698		07 44 80 2e a2 0a 00 46 25 66 23 ca d0 f9 20 07
>3a66a8		44 e2 20 a9 4b 20 18 00 c2 20 80 16 a2 14 00 46
>3a66b8		25 66 23 ca d0 f9 20 07 44 e2 20 a9 4d 20 18 00
>3a66c8		c2 20 28 2b fa 60 0b 08 c2 30 a9 00 00 8f b6 08
>3a66d8		00 8f b8 08 00 e2 20 20 bf 20 c9 00 f0 08 20 4d
>3a66e8		1b 20 95 05 80 11 c2 20 a9 00 00 85 23 85 25 e2
>3a66f8		20 a9 02 85 27 c2 20 20 2f 68 22 08 11 00 b0 22
>3a6708		20 e0 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6718		10 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>3a6728		d4 08 20 89 02 08 c2 20 48 a9 20 03 5b 68 28 e2
>3a6738		20 a0 00 00 b7 18 d0 03 82 a9 00 c9 e5 d0 03 82
>3a6748		96 00 a0 0b 00 b7 18 89 08 f0 03 82 a9 00 89 02
>3a6758		f0 03 82 83 00 29 0f c9 0f d0 03 82 7a 00 a0 00
>3a6768		00 b7 18 20 18 00 c8 c0 08 00 d0 f5 a9 20 20 18
>3a6778		00 a0 08 00 b7 18 20 18 00 c8 c0 0b 00 d0 f5 a9
>3a6788		09 20 18 00 a0 0b 00 b7 18 89 10 d0 1e c2 20 a0
>3a6798		1c 00 b7 18 8f 23 08 00 c8 c8 b7 18 8f 25 08 00
>3a67a8		e2 20 a9 00 8f 27 08 00 20 75 66 a9 09 20 18 00
>3a67b8		a0 0b 00 b7 18 89 08 d0 1c 89 01 f0 05 a9 52 20
>3a67c8		18 00 89 04 f0 05 a9 53 20 18 00 89 10 f0 05 a9
>3a67d8		44 20 18 00 ea 20 89 02 20 a0 02 22 0c 11 00 90
>3a67e8		03 82 41 ff 20 e0 68 08 c2 20 48 a9 00 08 5b 68
>3a67f8		28 20 a3 1f 28 2b 60 08 c2 20 48 a9 20 03 5b 68
>3a6808		28 e2 20 29 0f c9 0f f0 cf a9 5b 20 18 00 a0 00
>3a6818		00 b7 18 c9 20 f0 09 20 18 00 c8 c0 08 00 d0 f1
>3a6828		a9 5d 20 18 00 80 ae 0b 08 08 c2 20 48 a9 20 03
>3a6838		5b 68 28 c2 30 a9 73 f2 85 20 a9 3a 00 85 22 a0
>3a6848		00 00 e2 20 a9 00 97 20 c8 c0 1e 00 d0 f8 c2 20
>3a6858		a9 73 f0 8f 81 f2 3a a9 3a 00 8f 83 f2 3a af 23
>3a6868		08 00 8f 75 f2 3a af 25 08 00 8f 77 f2 3a 28 2b
>3a6878		60 08 c2 30 20 7f 1f 20 4d 1b 20 95 05 20 2f 68
>3a6888		e2 20 a9 2c 85 37 20 a0 20 b0 0f c2 20 a9 ff ff
>3a6898		8f 54 03 00 8f 56 03 00 80 17 20 5e 1f 20 4d 1b
>3a68a8		20 03 05 c2 20 a5 23 8f 54 03 00 a5 25 8f 56 03
>3a68b8		00 22 18 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a68c8		28 e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a68d8		1c e2 20 dc d4 08 28 60 8b 0b 08 08 c2 20 48 a9
>3a68e8		00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>3a68f8		20 af 2e 03 00 85 23 a9 00 85 24 85 25 85 26 a9
>3a6908		00 85 27 85 ea a9 3a 85 e9 c2 20 a9 43 69 85 e7
>3a6918		20 f0 50 e2 20 af 20 03 00 85 23 a9 00 85 24 85
>3a6928		25 85 26 a9 00 85 27 85 ea a9 3a 85 e9 c2 20 a9
>3a6938		4b 69 85 e7 20 f0 50 28 2b ab 60 44 4f 53 53 54
>3a6948		41 54 00 42 49 4f 53 53 54 41 54 00 08 c2 30 20
>3a6958		7f 1f 20 4d 1b 20 95 05 a5 23 8f 60 03 00 a5 25
>3a6968		8f 62 03 00 a9 ff ff 8f 54 03 00 8f 56 03 00 22
>3a6978		24 11 00 b0 25 20 9f 1c 20 e0 68 08 c2 20 48 a9
>3a6988		00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2 20 29
>3a6998		ff 00 20 9f 1c e2 20 dc d4 08 20 9f 1c 28 60 08
>3a69a8		c2 30 20 7f 1f 20 4d 1b 20 95 05 20 2f 68 a9 00
>3a69b8		00 8f 54 03 00 a9 01 00 8f 56 03 00 20 c1 4d 22
>3a69c8		18 11 00 b0 22 20 e0 68 08 c2 20 48 a9 00 08 5b
>3a69d8		68 28 e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20
>3a69e8		9f 1c e2 20 dc d4 08 20 e0 68 c2 20 a2 12 00 18
>3a69f8		bf 73 f2 3a 69 00 00 85 92 bf 75 f2 3a 69 01 00
>3a6a08		85 94 e2 20 a9 00 87 92 c2 20 a9 00 00 85 7a a9
>3a6a18		01 00 85 7c a2 00 00 e2 20 a7 7a f0 2a c9 0d f0
>3a6a28		12 c9 0a f0 04 9d 00 4f e8 c2 20 e6 7a d0 e8 e6
>3a6a38		7c 80 e4 e2 20 a9 00 9d 00 4f 20 cb 25 c2 20 e6
>3a6a48		7a d0 d1 e6 7c 80 cd e0 00 00 f0 0a e2 20 a9 00
>3a6a58		9d 00 4f 20 cb 25 28 60 08 c2 30 20 7f 1f 20 4d
>3a6a68		1b 20 95 05 20 2f 68 e2 20 a9 2c 20 6b 20 c2 20
>3a6a78		20 4d 1b 20 03 05 a5 23 8f 50 03 00 a5 25 8f 52
>3a6a88		03 00 e2 20 a9 2c c2 20 20 6b 20 20 4d 1b 20 03
>3a6a98		05 a5 23 8f 58 03 00 a5 25 8f 5a 03 00 22 1c 11
>3a6aa8		00 b0 22 20 e0 68 08 c2 20 48 a9 00 08 5b 68 28
>3a6ab8		e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00 20 9f 1c
>3a6ac8		e2 20 dc d4 08 20 e0 68 28 60 da 5a 08 a2 00 00
>3a6ad8		a0 00 00 e2 20 b7 23 9d 00 04 f0 04 e8 c8 80 f5
>3a6ae8		28 7a fa 60 08 c2 30 20 7f 1f 20 4d 1b 20 95 05
>3a6af8		20 2f 68 a9 00 00 85 a6 e2 20 a9 01 85 a8 a9 20
>3a6b08		85 b4 c2 20 a9 00 00 85 ab a9 ff ff 85 a9 c2 20
>3a6b18		a9 00 00 85 55 85 57 a9 ff ff 85 59 a9 ff 7f 85
>3a6b28		5b 20 10 17 e2 20 a9 80 85 b4 c2 20 c6 ab 18 a9
>3a6b38		00 00 8f 50 03 00 65 ab 8f 58 03 00 a9 01 00 8f
>3a6b48		52 03 00 69 00 00 8f 5a 03 00 22 1c 11 00 b0 22
>3a6b58		20 e0 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6b68		12 8f d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc
>3a6b78		d4 08 20 e0 68 28 60 08 c2 30 20 7f 1f 20 4d 1b
>3a6b88		20 95 05 20 d2 6a 22 04 11 00 b0 22 20 e0 68 08
>3a6b98		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 13 8f d3 08
>3a6ba8		00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08 20 e0
>3a6bb8		68 28 60 da 08 e2 20 c9 61 90 08 c9 7b b0 04 29
>3a6bc8		df 80 13 c9 20 90 13 a2 00 00 df e6 6b 3a f0 0a
>3a6bd8		e8 e0 0f 00 d0 f4 28 38 fa 6b 28 18 fa 6b 2a 2b
>3a6be8		2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d 7c 22 08 08 c2
>3a6bf8		20 48 a9 00 08 5b 68 28 c2 30 20 4d 1b 20 95 05
>3a6c08		20 d2 6a 22 10 11 00 b0 22 20 e0 68 08 c2 20 48
>3a6c18		a9 00 08 5b 68 28 e2 20 a9 14 8f d3 08 00 c2 20
>3a6c28		29 ff 00 20 9f 1c e2 20 dc d4 08 e2 20 a9 2c 20
>3a6c38		6b 20 c2 20 20 4d 1b 20 95 05 ad 38 03 85 08 ad
>3a6c48		3a 03 85 0a e2 20 a2 00 00 a9 20 95 7e e8 e0 0b
>3a6c58		00 d0 f8 a2 00 00 a0 00 00 b7 23 f0 76 c9 2e f0
>3a6c68		39 22 bb 6b 3a b0 1f 08 c2 20 48 a9 00 08 5b 68
>3a6c78		28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 9f
>3a6c88		1c e2 20 dc d4 08 95 7e c8 e8 c0 08 00 d0 ca b7
>3a6c98		23 f0 40 c9 2e f0 03 c8 80 f5 c8 a2 08 00 b7 23
>3a6ca8		f0 31 22 bb 6b 3a b0 22 20 e0 68 08 c2 20 48 a9
>3a6cb8		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>3a6cc8		ff 00 20 9f 1c e2 20 dc d4 08 95 7e c8 e8 c0 0c
>3a6cd8		00 d0 cb a2 00 00 a0 00 00 b5 7e 97 08 e8 c8 c0
>3a6ce8		0b 00 d0 f5 22 14 11 00 b0 22 20 e0 68 08 c2 20
>3a6cf8		48 a9 00 08 5b 68 28 e2 20 a9 15 8f d3 08 00 c2
>3a6d08		20 29 ff 00 20 9f 1c e2 20 dc d4 08 20 e0 68 28
>3a6d18		60 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 4d
>3a6d28		1b 20 95 05 a5 23 8f 64 03 00 a5 25 8f 66 03 00
>3a6d38		e2 20 a9 2c 20 6b 20 c2 20 20 4d 1b 20 95 05 a5
>3a6d48		23 8f 68 03 00 a5 25 8f 6a 03 00 22 30 11 00 b0
>3a6d58		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 16 8f
>3a6d68		d3 08 00 c2 20 29 ff 00 20 9f 1c e2 20 dc d4 08
>3a6d78		28 60 5c 3a 87 3a 5c 8b 85 3a 5c 3b 87 3a 5c b7
>3a6d88		76 3a 5c 14 77 3a 5c 47 76 3a 5c cd 75 3a 5c 4a
>3a6d98		7b 3a 5c 38 72 3a 5c 65 75 3a 5c 20 75 3a 5c aa
>3a6da8		74 3a 5c 49 86 3a 5c 46 73 3a 5c 99 71 3a 5c c4
>3a6db8		86 3a 5c 74 72 3a 5c 3d 87 3a 5c 36 87 3a 5c 63
>3a6dc8		74 3a 5c 3e 87 3a 18 fb c2 20 a9 ff fe 1b 58 5c
>3a6dd8		db 6d 3a c2 30 22 99 71 3a 20 08 00 20 0c 00 8b
>3a6de8		e2 20 a9 00 48 ab a2 00 4f 20 17 04 ab 22 7e 6d
>3a6df8		3a 22 86 6d 3a 80 e2 08 8b e2 20 a9 3a 48 ab c2
>3a6e08		10 a2 12 6e 20 16 03 ab 28 6b 41 20 3c 73 74 61
>3a6e18		72 74 3e 20 3c 61 73 73 65 6d 62 6c 79 3e 0d 20
>3a6e28		20 41 73 73 65 6d 62 6c 65 20 61 20 70 72 6f 67
>3a6e38		72 61 6d 0d 0d 43 20 3c 73 74 61 72 74 31 3e 20
>3a6e48		3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e 20 28 31
>3a6e58		20 69 66 20 62 6c 61 6e 6b 29 5d 0d 20 20 43 6f
>3a6e68		6d 70 61 72 65 20 74 6f 20 73 65 63 74 69 6f 6e
>3a6e78		73 20 6f 66 20 6d 65 6d 6f 72 79 0d 0d 44 20 3c
>3a6e88		73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20 20 44
>3a6e98		69 73 61 73 73 65 6d 62 6c 65 20 61 20 70 72 6f
>3a6ea8		67 72 61 6d 0d 0d 46 20 3c 73 74 61 72 74 3e 20
>3a6eb8		3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d 20 20 46
>3a6ec8		69 6c 6c 20 61 20 62 6c 6f 63 6b 20 6f 66 20 6d
>3a6ed8		65 6d 6f 72 79 20 77 69 74 68 20 61 20 62 79 74
>3a6ee8		65 0d 0d 47 20 5b 61 64 64 72 65 73 73 5d 0d 20
>3a6ef8		20 53 74 61 72 74 20 65 78 65 63 75 74 69 6f 6e
>3a6f08		20 61 74 20 61 20 6c 6f 63 61 74 69 6f 6e 0d 0d
>3a6f18		4a 20 5b 61 64 64 72 65 73 73 5d 20 2d 20 4a 75
>3a6f28		6d 70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e
>3a6f38		20 69 6e 20 6d 65 6d 6f 72 79 0d 20 20 4a 75 6d
>3a6f48		70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f 6e 20
>3a6f58		69 6e 20 6d 65 6d 6f 72 79 0d 0d 48 20 3c 73 74
>3a6f68		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>3a6f78		3e 20 5b 62 79 74 65 5d 2e 2e 0d 20 20 48 75 6e
>3a6f88		74 20 66 6f 72 20 76 61 6c 75 65 73 20 69 6e 20
>3a6f98		6d 65 6d 6f 72 79 0d 0d 4c 20 20 20 20 20 4c 4f
>3a6fa8		41 44 20 20 20 20 20 20 20 20 20 22 46 69 6c 65
>3a6fb8		22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e 5d 0d
>3a6fc8		4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d
>3a6fd8		20 20 44 75 6d 70 20 74 68 65 20 76 61 6c 75 65
>3a6fe8		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52 20 2d 20
>3a6ff8		44 69 73 70 6c 61 79 20 74 68 65 20 76 61 6c 75
>3a7008		65 73 20 6f 66 20 74 68 65 20 72 65 67 69 73 74
>3a7018		65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c 41 3e 20
>3a7028		3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20 3c 44 42
>3a7038		52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58 44 49 5a
>3a7048		43 3e 0d 20 20 43 68 61 6e 67 65 20 74 68 65 20
>3a7058		63 6f 6e 74 65 6e 74 73 20 6f 66 20 74 68 65 20
>3a7068		72 65 67 69 73 74 65 72 73 0d 0d 53 20 20 20 20
>3a7078		20 53 41 56 45 20 20 20 20 20 20 20 20 20 22 46
>3a7088		69 6c 65 22 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>3a7098		64 3e 0d 54 20 3c 73 74 61 72 74 3e 20 3c 65 6e
>3a70a8		64 3e 20 3c 64 65 73 74 69 6e 61 74 69 6f 6e 3e
>3a70b8		0d 20 20 54 72 61 6e 73 66 65 72 20 28 63 6f 70
>3a70c8		79 29 20 64 61 74 61 20 77 69 74 68 69 6e 20 6d
>3a70d8		65 6d 6f 72 79 0d 0d 57 20 3c 62 79 74 65 3e 0d
>3a70e8		20 20 53 65 74 20 74 68 65 20 72 65 67 69 73 74
>3a70f8		65 72 20 77 69 64 74 68 20 66 6c 61 67 73 20 66
>3a7108		6f 72 20 74 68 65 20 64 69 73 61 73 73 65 6d 62
>3a7118		6c 65 72 0d 0d 58 20 2d 20 52 65 74 75 72 6e 20
>3a7128		74 6f 20 42 41 53 49 43 0d 0d 3e 20 3c 73 74 61
>3a7138		72 74 3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65
>3a7148		5d 2e 2e 2e 0d 20 20 45 64 69 74 20 64 61 74 61
>3a7158		20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20 2d 20
>3a7168		44 69 73 70 6c 61 79 20 61 20 73 68 6f 72 74 20
>3a7178		68 65 6c 70 20 73 63 72 65 65 6e 0d 0d 00 08 08
>3a7188		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0d 85 4e 28
>3a7198		6b 20 e4 00 08 e2 20 48 a9 3a 48 ab 68 28 a2 7b
>3a71a8		87 20 16 03 e2 20 a9 3b 20 18 00 a9 20 20 18 00
>3a71b8		c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03 00 a2
>3a71c8		42 02 20 99 02 c2 20 a9 20 00 20 18 00 af 44 02
>3a71d8		00 20 26 03 a9 20 00 20 18 00 af 46 02 00 20 26
>3a71e8		03 a9 20 00 20 18 00 af 48 02 00 20 26 03 a9 20
>3a71f8		00 20 18 00 af 4a 02 00 20 26 03 a9 20 00 20 18
>3a7208		00 af 4e 02 00 20 40 03 a9 20 00 20 18 00 20 18
>3a7218		00 af 4c 02 00 20 26 03 a9 20 00 20 18 00 08 e2
>3a7228		20 ad 4f 02 22 94 84 3a 28 20 89 02 20 89 02 6b
>3a7238		08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 15
>3a7248		87 0d e2 20 a5 0f c5 13 d0 0e c2 20 a5 0d c5 11
>3a7258		d0 06 20 89 02 2b 28 6b c2 20 18 a5 0d 69 01 00
>3a7268		85 0d e2 20 a5 0e 69 00 85 0e 80 d0 08 0b 08 c2
>3a7278		20 48 a9 48 08 5b 68 28 e2 20 a5 0f c5 17 90 45
>3a7288		c2 20 a5 0d c5 15 90 3d e2 20 a7 0d 87 15 a5 0f
>3a7298		c5 13 d0 0b c2 20 a5 0d c5 11 d0 03 4c 2b 73 c2
>3a72a8		20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00 85
>3a72b8		0e c2 20 18 a5 15 69 01 00 85 15 e2 20 a5 16 69
>3a72c8		00 85 16 80 c3 c2 20 38 a5 11 e5 0d 85 19 e2 20
>3a72d8		a5 13 e5 0f 85 1b c2 20 18 a5 19 65 15 85 15 e2
>3a72e8		20 a5 1b 65 17 85 17 e2 20 a7 11 87 15 a5 13 c5
>3a72f8		0f d0 0a c2 20 a5 11 c5 0d d0 02 80 26 c2 20 38
>3a7308		a5 11 e9 01 00 85 11 e2 20 a5 12 e9 00 85 12 c2
>3a7318		20 38 a5 15 e9 01 00 85 15 e2 20 a5 16 e9 00 85
>3a7328		16 80 c4 20 89 02 2b 28 6b 08 e2 20 c9 21 90 0b
>3a7338		c9 7f 90 04 c9 a0 90 03 28 38 6b 28 18 6b 08 8b
>3a7348		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a9 00 8f
>3a7358		b6 08 00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18
>3a7368		a5 0d 69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2
>3a7378		20 a5 0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18
>3a7388		a5 32 69 00 01 85 11 e2 20 a5 34 69 00 85 13 e2
>3a7398		20 a0 00 00 c2 20 a5 32 85 19 e2 20 a5 34 85 1b
>3a73a8		e2 20 a7 19 22 31 73 3a b0 02 a9 3f 99 7e 08 c2
>3a73b8		20 18 a5 19 69 01 00 85 19 e2 20 a5 1b 69 00 85
>3a73c8		1b c8 c0 08 00 90 db a9 00 99 7e 08 a9 3e 20 18
>3a73d8		00 a9 20 20 18 00 e2 20 a5 34 20 40 03 a9 3a 20
>3a73e8		18 00 c2 20 a5 32 20 26 03 c2 20 a9 08 00 85 47
>3a73f8		e2 20 a9 20 20 18 00 a7 32 20 40 03 22 73 84 3a
>3a7408		e2 20 c6 47 d0 ea a9 20 20 18 00 a9 20 20 18 00
>3a7418		08 e2 20 48 a9 00 48 ab 68 28 a2 7e 08 20 16 03
>3a7428		20 89 02 20 a0 02 a5 34 c5 13 90 0f c2 20 a5 32
>3a7438		c5 11 90 07 20 89 02 2b ab 28 6b 4c 97 73 08 8d
>3a7448		92 08 e2 20 bd 00 00 99 00 00 ad 92 08 f0 0a c8
>3a7458		e8 e8 e8 e8 ce 92 08 80 eb 28 6b 08 0b 8b 08 c2
>3a7468		20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a7478		68 28 c2 30 a5 0d 85 32 a5 0f 85 34 e2 20 a5 31
>3a7488		3a 85 47 a2 59 08 a0 7e 08 22 46 74 3a a0 00 00
>3a7498		b9 7e 08 87 32 22 73 84 3a c8 c4 47 d0 f2 ab 2b
>3a74a8		28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 08
>3a74b8		e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a5 31 3a
>3a74c8		3a 85 47 a2 5d 08 a0 7e 08 22 46 74 3a c2 20 a5
>3a74d8		0d 85 32 a5 0f 85 34 c2 20 a5 34 c5 13 d0 06 a5
>3a74e8		32 c5 11 f0 2c e2 20 a0 00 00 b7 32 d9 7e 08 d0
>3a74f8		1a c8 c4 47 d0 f4 c2 20 a5 32 85 4a a5 34 85 4c
>3a7508		22 1d 7f 3a e2 20 a9 20 20 18 00 22 73 84 3a 80
>3a7518		c6 20 89 02 ab 2b 28 6b 08 c2 20 48 a9 48 08 5b
>3a7528		68 28 e2 20 a5 31 f0 0e c2 30 a5 0d 8f 40 02 00
>3a7538		a5 0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8
>3a7548		af 4a 02 00 1b af 4c 02 00 5b e2 20 a9 3a 48 a9
>3a7558		75 48 a9 60 48 4c 97 75 ea 5c 04 00 3a 08 c2 20
>3a7568		48 a9 48 08 5b 68 28 e2 20 a5 31 f0 c9 c2 30 a5
>3a7578		0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa
>3a7588		af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2
>3a7598		20 af 4e 02 00 48 ab a9 5c 8f a2 08 00 af 42 02
>3a75a8		00 8f a5 08 00 af 41 02 00 8f a4 08 00 af 40 02
>3a75b8		00 8f a3 08 00 af 4f 02 00 48 c2 20 af 44 02 00
>3a75c8		28 5c a2 08 00 08 0b 8b 08 e2 20 48 a9 3a 48 ab
>3a75d8		68 28 08 c2 20 48 a9 48 08 5b 68 28 c2 10 e2 20
>3a75e8		a5 31 c9 02 f0 0c c9 03 d0 11 c2 20 a5 15 85 47
>3a75f8		80 11 c2 20 a9 01 00 85 47 80 08 a2 3f 87 20 16
>3a7608		03 80 35 a5 0d 85 4a a5 0f 85 4c a0 00 00 e2 20
>3a7618		a7 4a d7 11 f0 09 22 1d 7f 3a a9 20 20 18 00 c2
>3a7628		20 18 a5 4a 69 01 00 85 4a a5 4c 69 00 00 85 4c
>3a7638		c8 c4 47 d0 d9 20 89 02 20 89 02 ab 2b 28 6b 08
>3a7648		0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48
>3a7658		a9 48 08 5b 68 28 e2 20 a5 31 f0 4f a6 0d 8e 40
>3a7668		02 a6 0f 8e 42 02 c9 01 f0 41 a6 11 8e 44 02 c9
>3a7678		02 f0 38 a6 15 8e 46 02 c9 03 f0 2f a6 19 8e 48
>3a7688		02 c9 04 f0 26 a6 1d 8e 4a 02 c9 05 f0 1d e2 10
>3a7698		a6 21 8e 4e 02 c9 06 f0 12 c2 10 a6 25 8e 4c 02
>3a76a8		c9 07 f0 07 e2 10 a6 29 8e 4f 02 ab 2b 28 6b 08
>3a76b8		0b 8b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2 10
>3a76c8		a2 00 00 bf ac 87 3a f0 18 c7 08 f0 03 e8 80 f3
>3a76d8		c2 20 8a 0a aa bf ed 76 3a 8f 2f 08 00 22 11 77
>3a76e8		3a ab 2b 28 6b 8a 6d 92 6d 96 6d 9a 6d 9e 6d a2
>3a76f8		6d a6 6d aa 6d ae 6d b2 6d 8e 6d b6 6d ba 6d be
>3a7708		6d 86 71 c2 6d c6 6d ff 6d 6c 2f 08 08 8b 0b 08
>3a7718		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 c9 02 b0
>3a7728		03 4c ba 78 c2 20 a5 0d 85 32 a5 0f 85 34 c2 20
>3a7738		22 bc 7a 3a c9 ff ff f0 10 85 54 e2 20 a5 31 c9
>3a7748		03 f0 36 a9 13 85 4f 80 4c 20 89 02 08 e2 20 48
>3a7758		a9 3a 48 ab 68 28 c2 10 a2 f1 78 20 16 03 4c ba
>3a7768		78 20 89 02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10
>3a7778		a2 00 79 20 16 03 4c ba 78 e2 20 22 f2 7a 3a c9
>3a7788		ff f0 de 85 4f c9 03 f0 62 c9 0b f0 5e c9 13 f0
>3a7798		04 c9 08 f0 00 22 ea 79 3a b0 03 4c 83 78 87 32
>3a77a8		22 73 84 3a 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>3a77b8		a5 32 85 56 a5 34 85 58 e2 20 a5 4f c9 12 f0 6c
>3a77c8		c9 16 f0 68 c9 14 f0 7c 29 3f c9 02 d0 03 4c b1
>3a77d8		78 c2 20 29 ff 00 aa e2 20 bf b9 83 3a c9 03 f0
>3a77e8		57 c9 02 f0 5f c9 01 f0 67 80 71 c2 20 a5 54 c9
>3a77f8		31 80 f0 26 c9 95 80 f0 2a c9 15 80 f0 1c c9 19
>3a7808		80 f0 17 c9 21 80 f0 12 c9 09 80 f0 0d c9 1d 80
>3a7818		f0 08 c9 05 80 f0 03 4c 9d 77 e2 20 a9 12 85 4f
>3a7828		4c 9d 77 e2 20 a9 16 85 4f 4c 9d 77 22 2d 79 3a
>3a7838		90 60 c9 02 f0 0e 80 18 a0 02 00 b9 98 08 97 56
>3a7848		22 73 84 3a a0 01 00 b9 98 08 97 56 22 73 84 3a
>3a7858		a0 00 00 b9 98 08 97 56 22 73 84 3a e2 20 a9 41
>3a7868		20 18 00 a9 20 20 18 00 a6 32 86 4a a6 34 86 4c
>3a7878		22 1d 7f 3a a9 20 20 18 00 80 37 20 89 02 08 e2
>3a7888		20 48 a9 3a 48 ab 68 28 c2 10 a2 be 78 20 16 03
>3a7898		80 20 20 89 02 08 e2 20 48 a9 3a 48 ab 68 28 c2
>3a78a8		10 a2 0e 79 20 16 03 80 09 a5 4f 29 c0 d0 95 4c
>3a78b8		58 78 2b ab 28 6b 41 64 64 72 65 73 73 69 6e 67
>3a78c8		20 6d 6f 64 65 20 6e 6f 74 20 64 65 66 69 6e 65
>3a78d8		64 20 66 6f 72 20 74 68 61 74 20 69 6e 73 74 72
>3a78e8		75 63 74 69 6f 6e 2e 0d 00 42 61 64 20 6d 6e 65
>3a78f8		6d 6f 6e 69 63 2e 0d 00 42 61 64 20 6f 70 65 72
>3a7908		61 6e 64 2e 0d 00 52 65 6c 61 74 69 76 65 20 6f
>3a7918		66 66 73 65 74 20 69 73 20 74 6f 6f 20 6c 61 72
>3a7928		67 65 2e 0d 00 08 0b 08 c2 20 48 a9 48 08 5b 68
>3a7938		28 e2 20 a5 4f c9 12 f0 0a c2 20 18 a5 32 69 02
>3a7948		00 80 08 c2 20 18 a5 32 69 01 00 85 4a a5 34 69
>3a7958		00 00 85 4c 38 a5 50 e5 4a 85 50 a5 52 e5 4c 85
>3a7968		52 e2 20 a5 4f c9 16 f0 1e a5 50 30 0c a5 51 d0
>3a7978		2a a5 52 d0 26 a9 01 80 26 a5 51 c9 ff d0 1c a5
>3a7988		52 c9 ff d0 16 80 18 a5 51 30 06 a5 52 d0 0c 80
>3a7998		0e a5 52 c9 ff d0 04 a9 02 80 04 2b 28 18 6b 2b
>3a79a8		28 38 6b 08 0b c2 10 da 08 c2 20 48 a9 48 08 5b
>3a79b8		68 28 e2 20 a2 00 00 df 00 d0 3a f0 08 e8 e0 10
>3a79c8		00 f0 1b 80 f2 c2 20 06 50 26 52 06 50 26 52 06
>3a79d8		50 26 52 06 50 26 52 e2 20 8a 05 50 85 50 fa 2b
>3a79e8		28 6b 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2
>3a79f8		20 48 a9 3a 48 ab 68 28 e2 20 a5 4f 29 3f 85 4a
>3a7a08		c2 30 a2 00 00 a0 00 00 bd b7 80 f0 1b c5 54 d0
>3a7a18		0d e2 20 b9 b9 82 29 3f c5 4a f0 07 c2 20 e8 e8
>3a7a28		c8 80 e5 98 38 ab 2b 6b 18 ab 2b 6b 08 0b 08 c2
>3a7a38		20 48 a9 48 08 5b 68 28 e2 20 c2 10 a0 00 00 64
>3a7a48		50 64 52 b7 03 f0 11 c9 64 f0 19 48 b7 36 85 4a
>3a7a58		68 c5 4a d0 0b c8 80 eb b7 36 d0 04 2b 28 38 6b
>3a7a68		2b 28 18 6b e2 20 b7 36 c9 3a b0 04 c9 30 b0 14
>3a7a78		c9 47 b0 04 c9 41 b0 0c c9 67 b0 e4 c9 61 b0 02
>3a7a88		80 de 29 df 22 ab 79 3a 80 cb 0b 08 c2 20 48 a9
>3a7a98		48 08 5b 68 28 a0 00 00 e2 20 b7 03 f0 03 c8 80
>3a7aa8		f9 c2 20 c8 5a 68 18 65 03 85 03 a5 05 69 00 00
>3a7ab8		85 05 2b 6b 0b 08 c2 20 48 a9 48 08 5b 68 28 c2
>3a7ac8		20 a5 11 85 36 a5 13 85 38 a9 45 7f 85 03 a9 3a
>3a7ad8		00 85 05 22 34 7a 3a b0 0d 22 92 7a 3a a7 03 d0
>3a7ae8		f2 a9 ff ff 80 02 a5 03 2b 6b 08 0b 08 c2 20 48
>3a7af8		a9 48 08 5b 68 28 c2 30 a5 15 85 36 a5 17 85 38
>3a7b08		a9 d1 83 85 03 a9 3a 00 85 05 22 34 7a 3a b0 22
>3a7b18		22 92 7a 3a c2 20 18 a5 03 69 01 00 85 03 a5 05
>3a7b28		69 00 00 85 05 e2 20 a7 03 d0 df c2 20 a9 ff ff
>3a7b38		80 0d 22 92 7a 3a e2 20 a7 03 c2 20 29 ff 00 2b
>3a7b48		28 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a7b58		20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01 90
>3a7b68		20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f 69
>3a7b78		00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34 80
>3a7b88		12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34 69
>3a7b98		00 85 13 22 b6 7b 3a e2 20 a5 34 c5 13 90 f4 c2
>3a7ba8		20 a5 32 c5 11 90 ec 20 89 02 2b ab 28 6b 08 0b
>3a7bb8		e2 20 a9 41 20 18 00 a9 20 20 18 00 08 c2 20 48
>3a7bc8		a9 7a 08 5b 68 28 c2 20 a5 00 85 18 e2 20 a5 02
>3a7bd8		85 1a 22 1d 7f 3a a9 20 20 18 00 c2 20 18 a5 00
>3a7be8		69 01 00 85 18 e2 20 a5 02 69 00 85 1a e2 20 c2
>3a7bf8		10 a7 00 c9 c2 d0 0b 48 a7 18 49 ff 2f 96 08 00
>3a7c08		80 0b c9 e2 d0 0c 48 a7 18 0f 96 08 00 8f 96 08
>3a7c18		00 68 c2 20 29 ff 00 0a aa bf b7 80 3a aa 22 97
>3a7c28		7e 3a e2 20 a7 00 aa bf b9 82 3a 22 73 84 3a 22
>3a7c38		44 7c 3a 20 89 02 20 a0 02 2b 28 6b 08 e2 20 48
>3a7c48		29 3f 0a c2 10 aa 68 7c 52 7c 82 7c 9d 7c a4 7c
>3a7c58		c9 7c d0 7c eb 7c 0d 7d 1e 7d 5b 7d 63 7d 74 7d
>3a7c68		85 7d 8c 7d b1 7d de 7d 4a 7d 2f 7d fc 7c d1 7d
>3a7c78		db 7d ef 7d 1e 7e cc 7d 2f 7e a9 28 20 18 00 22
>3a7c88		46 7e 3a a9 2c 20 18 00 a9 58 20 18 00 a9 29 20
>3a7c98		18 00 4c 40 7e 22 46 7e 3a 4c 40 7e e2 20 48 a9
>3a7ca8		23 20 18 00 68 29 c0 c9 00 f0 0f 4a 4a 2f 96 08
>3a7cb8		00 d0 07 22 50 7e 3a 4c 40 7e 22 46 7e 3a 4c 40
>3a7cc8		7e 22 50 7e 3a 4c 40 7e a9 28 20 18 00 22 46 7e
>3a7cd8		3a a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00
>3a7ce8		4c 40 7e 22 46 7e 3a a9 2c 20 18 00 a9 58 20 18
>3a7cf8		00 4c 40 7e 22 46 7e 3a a9 2c 20 18 00 a9 59 20
>3a7d08		18 00 4c 40 7e 22 50 7e 3a a9 2c 20 18 00 a9 59
>3a7d18		20 18 00 4c 40 7e 22 50 7e 3a a9 2c 20 18 00 a9
>3a7d28		58 20 18 00 4c 40 7e a9 28 20 18 00 22 50 7e 3a
>3a7d38		a9 2c 20 18 00 a9 58 20 18 00 a9 29 20 18 00 4c
>3a7d48		40 7e a9 28 20 18 00 22 46 7e 3a a9 29 20 18 00
>3a7d58		4c 40 7e a9 41 20 18 00 4c 44 7e 22 46 7e 3a a9
>3a7d68		2c 20 18 00 a9 53 20 18 00 4c 40 7e a9 5b 20 18
>3a7d78		00 22 46 7e 3a a9 5d 20 18 00 4c 40 7e 22 5e 7e
>3a7d88		3a 4c 44 7e a9 28 20 18 00 22 46 7e 3a a9 2c 20
>3a7d98		18 00 a9 53 20 18 00 a9 29 20 18 00 a9 2c 20 18
>3a7da8		00 a9 59 20 18 00 4c 40 7e a9 5b 20 18 00 22 46
>3a7db8		7e 3a a9 5d 20 18 00 a9 2c 20 18 00 a9 59 20 18
>3a7dc8		00 4c 40 7e a0 02 00 80 03 a0 01 00 22 c4 7e 3a
>3a7dd8		4c 44 7e 4c 44 7e 22 5e 7e 3a a9 2c 20 18 00 a9
>3a7de8		58 20 18 00 4c 44 7e a9 23 20 18 00 8b a5 02 48
>3a7df8		ab a6 00 e8 a0 01 00 22 99 02 3a a9 2c 20 18 00
>3a7e08		a9 23 20 18 00 a6 00 a0 01 00 22 99 02 3a ab 22
>3a7e18		73 84 3a 4c 40 7e a9 28 20 18 00 22 50 7e 3a a9
>3a7e28		29 20 18 00 4c 40 7e a9 5b 20 18 00 22 50 7e 3a
>3a7e38		a9 5d 20 18 00 4c 40 7e 22 73 84 3a 28 6b 08 e2
>3a7e48		20 a7 00 20 40 03 28 6b 08 c2 30 a7 00 20 26 03
>3a7e58		22 73 84 3a 28 6b 08 8b 0b c2 30 5a 08 c2 20 48
>3a7e68		a9 7a 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a7e78		e2 20 a0 00 00 a7 00 99 92 08 22 73 84 3a c8 c0
>3a7e88		03 00 d0 f1 22 1d 7f 3a c2 30 7a 2b ab 28 6b 08
>3a7e98		8b e2 20 c2 10 08 e2 20 48 a9 3a 48 ab 68 28 bd
>3a7ea8		00 00 20 18 00 e8 bd 00 00 20 18 00 e8 bd 00 00
>3a7eb8		20 18 00 e8 a9 20 20 18 00 ab 28 6b 08 0b 08 c2
>3a7ec8		20 48 a9 7a 08 5b 68 28 e2 20 c0 02 00 f0 14 a7
>3a7ed8		00 85 18 30 06 64 19 64 1a 80 1e a9 ff 85 19 85
>3a7ee8		1a 80 16 a7 00 85 18 22 73 84 3a a7 00 85 19 30
>3a7ef8		04 64 1a 80 04 a9 ff 85 1a c2 20 38 a5 00 65 18
>3a7f08		85 18 e2 20 a5 02 65 1a 85 1a 22 1d 7f 3a 22 73
>3a7f18		84 3a 2b 28 6b 08 0b c2 20 48 08 c2 20 48 a9 48
>3a7f28		08 5b 68 28 e2 20 a5 4c 20 40 03 e2 20 a9 3a 20
>3a7f38		18 00 c2 20 a5 4a 20 26 03 68 2b 28 6b 4f 52 41
>3a7f48		00 41 4e 44 00 45 4f 52 00 41 44 43 00 53 54 41
>3a7f58		00 4c 44 41 00 43 4d 50 00 53 42 43 00 41 53 4c
>3a7f68		00 52 4f 4c 00 4c 53 52 00 52 4f 52 00 53 54 58
>3a7f78		00 4c 44 58 00 44 45 43 00 49 4e 43 00 42 49 54
>3a7f88		00 4a 4d 50 00 53 54 59 00 4c 44 59 00 43 50 59
>3a7f98		00 43 50 58 00 42 52 4b 00 4a 53 52 00 52 54 49
>3a7fa8		00 52 54 53 00 50 48 50 00 50 4c 50 00 50 48 41
>3a7fb8		00 50 4c 41 00 44 45 59 00 54 41 59 00 49 4e 59
>3a7fc8		00 49 4e 58 00 43 4c 43 00 53 45 43 00 43 4c 49
>3a7fd8		00 53 45 49 00 54 59 41 00 43 4c 56 00 43 4c 44
>3a7fe8		00 53 45 44 00 54 58 41 00 54 58 53 00 54 41 58
>3a7ff8		00 54 53 58 00 44 45 58 00 4e 4f 50 00 42 50 4c
>3a8008		00 42 4d 49 00 42 56 43 00 42 56 53 00 42 43 43
>3a8018		00 42 43 53 00 42 4e 45 00 42 45 51 00 54 53 42
>3a8028		00 54 52 42 00 53 54 5a 00 42 52 41 00 50 48 59
>3a8038		00 50 4c 59 00 50 48 58 00 50 4c 58 00 50 48 44
>3a8048		00 50 4c 44 00 50 48 4b 00 52 54 4c 00 50 48 42
>3a8058		00 50 4c 42 00 57 41 49 00 58 42 41 00 54 43 53
>3a8068		00 54 53 43 00 54 43 44 00 54 44 43 00 54 58 59
>3a8078		00 54 59 58 00 53 54 50 00 58 43 45 00 43 4f 50
>3a8088		00 4a 53 4c 00 57 44 4d 00 50 45 52 00 42 52 4c
>3a8098		00 52 45 50 00 53 45 50 00 4d 56 50 00 4d 56 4e
>3a80a8		00 50 45 49 00 50 45 41 00 4a 4d 4c 00 00 00 9d
>3a80b8		7f 45 7f 85 80 45 7f 25 80 45 7f 65 7f 45 7f ad
>3a80c8		7f 45 7f 65 7f 45 80 25 80 45 7f 65 7f 45 7f 05
>3a80d8		80 45 7f 45 7f 45 7f 29 80 45 7f 65 7f 45 7f cd
>3a80e8		7f 45 7f 81 7f 65 80 29 80 45 7f 65 7f 45 7f a1
>3a80f8		7f 49 7f 89 80 49 7f 85 7f 49 7f 69 7f 49 7f b1
>3a8108		7f 49 7f 69 7f 49 80 85 7f 49 7f 69 7f 49 7f 09
>3a8118		80 49 7f 49 7f 49 7f 85 7f 49 7f 69 7f 49 7f d1
>3a8128		7f 49 7f 7d 7f 69 80 85 7f 49 7f 69 7f 49 7f a5
>3a8138		7f 4d 7f 8d 80 4d 7f a1 80 4d 7f 6d 7f 4d 7f b5
>3a8148		7f 4d 7f 6d 7f 4d 80 89 7f 4d 7f 6d 7f 4d 7f 0d
>3a8158		80 4d 7f 4d 7f 4d 7f a5 80 4d 7f 6d 7f 4d 7f d5
>3a8168		7f 4d 7f 35 80 6d 80 b1 80 4d 7f 6d 7f 4d 7f a9
>3a8178		7f 51 7f 91 80 51 7f 2d 80 51 7f 71 7f 51 7f b9
>3a8188		7f 51 7f 71 7f 51 80 89 7f 51 7f 71 7f 51 7f 11
>3a8198		80 51 7f 51 7f 51 7f 2d 80 51 7f 71 7f 51 7f d9
>3a81a8		7f 51 7f 39 80 71 80 89 7f 51 7f 71 7f 51 7f 31
>3a81b8		80 55 7f 95 80 55 7f 8d 7f 55 7f 75 7f 55 7f bd
>3a81c8		7f 85 7f ed 7f 55 80 8d 7f 55 7f 75 7f 55 7f 15
>3a81d8		80 55 7f 55 7f 55 7f 8d 7f 55 7f 75 7f 55 7f dd
>3a81e8		7f 55 7f f1 7f 75 80 2d 80 55 7f 2d 80 55 7f 91
>3a81f8		7f 59 7f 79 7f 59 7f 91 7f 59 7f 79 7f 59 7f c1
>3a8208		7f 59 7f f5 7f 59 80 91 7f 59 7f 79 7f 59 7f 19
>3a8218		80 59 7f 59 7f 59 7f 91 7f 59 7f 79 7f 59 7f e1
>3a8228		7f 59 7f f9 7f 79 80 91 7f 59 7f 79 7f 59 7f 95
>3a8238		7f 5d 7f 99 80 5d 7f 95 7f 5d 7f 7d 7f 5d 7f c5
>3a8248		7f 5d 7f fd 7f 5d 80 95 7f 5d 7f 7d 7f 5d 7f 1d
>3a8258		80 5d 7f 5d 7f 5d 7f a9 80 5d 7f 7d 7f 5d 7f e5
>3a8268		7f 5d 7f 3d 80 7d 80 b1 80 5d 7f 7d 7f 5d 7f 99
>3a8278		7f 61 7f 9d 80 61 7f 99 7f 61 7f 81 7f 61 7f c9
>3a8288		7f 61 7f 01 80 61 80 99 7f 61 7f 81 7f 61 7f 21
>3a8298		80 61 7f 61 7f 61 7f ad 80 61 7f 81 7f 61 7f e9
>3a82a8		7f 61 7f 41 80 81 80 a1 7f 61 7f 81 7f 61 7f 00
>3a82b8		00 13 00 02 09 01 01 01 0a 13 82 08 13 03 03 03
>3a82c8		0b 12 04 0f 0c 01 05 05 0d 13 06 08 13 03 07 07
>3a82d8		0e 03 00 0b 09 01 01 01 0a 13 82 08 13 03 03 03
>3a82e8		0b 12 04 0f 0c 05 05 05 0d 13 06 08 13 07 07 07
>3a82f8		0e 13 00 13 09 14 01 01 0a 13 82 08 13 03 03 03
>3a8308		0b 12 04 0f 0c 14 05 05 0d 13 06 13 13 0b 07 07
>3a8318		0b 13 00 16 09 01 01 01 0a 13 82 08 13 15 03 03
>3a8328		0b 12 04 0f 0c 05 05 05 0d 13 06 13 13 10 07 07
>3a8338		0e 12 00 16 09 01 01 01 0a 13 82 13 13 03 03 03
>3a8348		0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 03 07 07
>3a8358		0e 82 00 42 09 01 01 01 0a 13 82 13 13 03 03 03
>3a8368		0b 12 04 0f 0c 05 05 11 0d 13 06 13 13 07 07 06
>3a8378		0e 42 00 02 09 01 01 01 0a 13 82 13 13 03 03 03
>3a8388		0b 12 04 0f 0c 01 05 05 0d 13 06 13 13 17 07 07
>3a8398		0e 42 00 02 09 01 01 01 0f 13 82 13 13 03 03 03
>3a83a8		0b 12 04 0f 0c 03 05 05 0d 13 06 13 13 10 07 07
>3a83b8		0e 01 01 01 02 01 01 02 02 00 01 01 03 01 01 03
>3a83c8		01 02 01 01 00 02 02 02 02 41 00 08 64 64 3a 64
>3a83d8		64 64 64 2c 58 00 0e 64 64 3a 64 64 64 64 00 0b
>3a83e8		64 64 64 64 2c 58 00 07 64 64 64 64 2c 59 00 06
>3a83f8		64 64 64 64 00 03 64 64 2c 58 00 05 64 64 2c 59
>3a8408		00 11 64 64 2c 53 00 09 64 64 00 01 23 64 64 64
>3a8418		64 00 c2 23 64 64 2c 23 64 64 00 14 23 64 64 00
>3a8428		02 28 64 64 2c 53 29 2c 59 00 0c 28 64 64 64 64
>3a8438		2c 58 29 00 10 28 64 64 64 64 29 00 10 28 64 64
>3a8448		2c 58 29 00 00 28 64 64 29 2c 59 00 04 28 64 64
>3a8458		29 00 0f 5b 64 64 64 64 5d 00 17 5b 64 64 5d 2c
>3a8468		59 00 0d 5b 64 64 5d 00 0a 00 00 08 c2 20 48 18
>3a8478		af 7a 08 00 69 01 00 8f 7a 08 00 e2 20 af 7c 08
>3a8488		00 69 00 8f 7c 08 00 c2 20 68 28 6b 08 c2 10 e2
>3a8498		20 da a2 08 00 0a b0 08 48 a9 30 20 18 00 80 06
>3a84a8		48 a9 31 20 18 00 68 ca d0 eb fa 28 6b 08 c2 20
>3a84b8		48 a9 48 08 5b 68 28 e2 20 a7 32 f0 0a c9 20 d0
>3a84c8		06 22 73 84 3a 80 f2 6b 08 08 c2 20 48 a9 48 08
>3a84d8		5b 68 28 22 73 84 3a 22 b5 84 3a c2 30 a5 31 c2
>3a84e8		20 29 ff 00 0a 0a aa a5 32 95 0d a5 34 95 0f e2
>3a84f8		20 a7 32 f0 14 c9 22 f0 06 22 73 84 3a 80 f2 a9
>3a8508		00 87 32 22 73 84 3a e6 31 28 6b 08 c2 20 48 a9
>3a8518		48 08 5b 68 28 e2 20 64 4a c2 20 64 50 64 52 e2
>3a8528		20 a7 32 c9 3a f0 0d 20 be 03 90 0e 22 ab 79 3a
>3a8538		a9 01 85 4a 22 73 84 3a 80 e5 a5 4a f0 16 a5 31
>3a8548		c2 20 29 ff 00 0a 0a aa a5 50 95 0d a5 52 95 0f
>3a8558		e2 20 e6 31 6b e2 20 64 31 22 b5 84 3a a7 32 f0
>3a8568		21 c9 22 d0 06 22 d0 84 3a 80 0a 22 13 85 3a a5
>3a8578		31 c9 09 b0 0d a7 32 f0 09 c9 20 f0 dc 20 be 03
>3a8588		b0 d7 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 c2
>3a8598		10 e2 20 a2 31 00 74 00 ca d0 fb a9 00 85 02 85
>3a85a8		34 c2 20 a9 00 4f 85 00 85 32 e2 20 22 b5 84 3a
>3a85b8		c9 00 f0 38 c2 20 a5 32 85 08 e2 20 a5 34 85 0a
>3a85c8		a2 01 00 22 73 84 3a a7 32 d0 06 86 0b 64 31 80
>3a85d8		1b c9 20 f0 03 e8 80 eb 86 0b a9 00 87 32 22 73
>3a85e8		84 3a a7 08 c9 41 f0 07 22 5d 85 3a 2b 28 6b 22
>3a85f8		b5 84 3a a7 32 f0 f5 22 13 85 3a 22 b5 84 3a a7
>3a8608		32 f0 e9 c2 20 a5 32 85 11 e2 20 a5 34 85 13 22
>3a8618		73 84 3a a7 32 f0 26 c9 20 d0 f4 a9 00 87 32 e6
>3a8628		31 22 73 84 3a 22 b5 84 3a a7 32 f0 bf c2 20 a5
>3a8638		32 85 15 e2 20 a5 34 85 17 e6 31 80 af e6 31 80
>3a8648		ab 08 c2 10 e2 20 a5 31 d0 0f a2 3f 87 a9 3a 48
>3a8658		ab 20 16 03 20 89 02 80 61 c2 20 a5 0d 8f 23 08
>3a8668		00 a5 0f 8f 25 08 00 20 2f 68 e2 20 a5 31 c9 01
>3a8678		d0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00 80
>3a8688		0e c2 20 a5 11 8f 54 03 00 a5 13 8f 56 03 00 22
>3a8698		18 11 00 b0 25 e2 20 a2 65 87 a9 3a 48 ab 20 16
>3a86a8		03 af 2e 03 00 20 40 03 a9 20 20 18 00 af 20 03
>3a86b8		00 20 40 03 20 89 02 20 89 02 28 6b 8b 08 c2 10
>3a86c8		e2 20 a5 31 c9 03 f0 0f a2 3f 87 a9 3a 48 ab 20
>3a86d8		16 03 20 89 02 80 54 c2 20 a5 0d 8f 23 08 00 a5
>3a86e8		0f 8f 25 08 00 20 2f 68 a5 11 8f 50 03 00 a5 13
>3a86f8		8f 52 03 00 a5 15 8f 58 03 00 a5 17 8f 5a 03 00
>3a8708		22 1c 11 00 b0 25 e2 20 a2 4f 87 a9 3a 48 ab 20
>3a8718		16 03 af 2e 03 00 20 40 03 a9 20 20 18 00 af 20
>3a8728		03 00 20 40 03 20 89 02 20 89 02 28 ab 6b 5c fe
>3a8738		25 3a 6b 00 00 00 00 42 61 64 20 61 72 67 75 6d
>3a8748		65 6e 74 73 0d 0d 00 55 6e 61 62 6c 65 20 74 6f
>3a8758		20 73 61 76 65 20 66 69 6c 65 3a 20 00 55 6e 61
>3a8768		62 6c 65 20 74 6f 20 6c 6f 61 64 20 66 69 6c 65
>3a8778		3a 20 00 0d 20 20 50 43 20 20 20 20 20 41 20 20
>3a8788		20 20 58 20 20 20 20 59 20 20 20 20 53 50 20 20
>3a8798		20 44 42 52 20 44 50 20 20 20 4e 56 4d 58 44 49
>3a87a8		5a 43 0d 00 41 43 44 46 47 4a 48 4c 4d 52 3b 53
>3a87b8		54 56 57 58 3e 3f 00 18 fb 08 c2 20 48 a9 00 08
>3a87c8		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20
>3a87d8		fe 87 a9 ff fe 1b 08 e2 20 48 a9 3a 48 ab 68 28
>3a87e8		a2 71 d2 20 16 03 08 e2 20 48 a9 00 48 ab 68 28
>3a87f8		4c fe 25 4c fb 87 08 20 d0 01 20 c1 4d 28 60 00
>3a8808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1150 times (18400 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>3ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>3ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>3ad268		00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46 6f
>3ad278		65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76 30
>3ad288		2e 32 2e 30 2d 61 6c 70 68 61 2b 32 35 34 0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>3b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>3b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>3b004f		20
>3b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>3b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>3b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>3b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>3b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>3b009f		20
>3b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b00ef		20
>3b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b013f		20
>3b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>3b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>3b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>3b0168		6e 79 20 41 6c 6c 61 69 72 65
>3b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>3b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b018a		20 20 20 20 20 20
>3b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>3b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>3b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>3b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b01da		20 20 20 20 20 20
>3b01e0		20				                .text " "
>3b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0229		20 20 20 20 20 20 20
>3b0230		20				                .text " "
>3b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0279		20 20 20 20 20 20 20
>3b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>3b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>3b0298		53 3a
>3b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>3b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>3b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>3b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>3b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>3b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b031d		20 20 20
>3b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>3b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>3b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>3b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>3b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>3b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>3b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>3b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>3b0398		75 73 68
>3b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>3b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>3b03c8		54 68 61 6e 6b 73 3a
>3b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>3b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0407		20 20 20 20 20 20 20 20 20
>3b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>3b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>3b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>3b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>3b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>3b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b045f		20
>3b0460		20				                .text " "
>3b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04a9		20 20 20 20 20 20 20
>3b04b0		20				                .text " "
>3b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04f9		20 20 20 20 20 20 20
>3b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>3b0508		45 53 20 41 55 54 48 4f 52 53 3a
>3b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>3b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b054b		20 20 20 20 20
>3b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>3b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>3b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>3b0578		63 6f 72 65 73 2e 6f 72 67
>3b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>3b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0599		20 20 20 20 20 20 20
>3b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>3b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>3b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>3b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>3b05d8		6d
>3b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>3b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>3b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>3b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>3b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>3b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>3b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>3b063b		20 20 20 20 20
>3b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>3b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>3b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>3b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>3b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b068b		20 20 20 20 20
>3b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>3b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>3b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>3b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>3b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06da		20 20 20 20 20 20
>3b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>3b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>3b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>3b0708		6a 61 64 61 20 47 6f 6d 65 7a
>3b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b072a		20 20 20 20 20 20
>3b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>3b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>3b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>3b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>3b0768		6f 6d
>3b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>3b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>3b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>3b0798		6e 69 78 20 55 29 3a 20 54 42 44
>3b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>3b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07cb		20 20 20 20 20
>3b07d0		20				                .text " "
>3b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0819		20 20 20 20 20 20 20
>3b0820		20				                .text " "
>3b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0869		20 20 20 20 20 20 20
>3b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>3b0878		54 48 41 4e 4b 53 3a
>3b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>3b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b08b7		20 20 20 20 20 20 20 20 20
>3b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>3b08c8		56 61 6e 68 61 72 65 6e
>3b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>3b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0908		20 20 20 20 20 20 20 20
>3b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>3b0918		65 77
>3b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>3b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>3b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>3b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>3b0988		65 66 65 72 65 6e 63 65 73 29
>3b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>3b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b09aa		20 20 20 20 20 20
>3b09b0		20				                .text " "
>3b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b09f9		20 20 20 20 20 20 20
>3b0a00		20				                .text " "
>3b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0a49		20 20 20 20 20 20 20
>3b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0a9f		20
>3b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>3b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>3b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>3b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>3b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>3b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>3b0aec		20 20 20 20
>3b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>3b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>3b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>3b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>3b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>3b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>3b0b3c		20 20 20 20
>3b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>3b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>3b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>3b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>3b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>3b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>3b0b8d		20 20 20
>3b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>3b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>3b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>3b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>3b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>3b0bdd		20 20 20
>3b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>3b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>3b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>3b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>3b0c2d		20 20 20
>3b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0c7f		20
>3b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>3b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c98		53 74 65 66 61 6e 79
>3b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>3b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cc7		20 20 20 20 20 20 20 20 20
>3b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>3b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>3b1768		20 20 20 20 20 20 20 20
>3b1770						.align 256
>3b1800		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 80 * 60, $F3
>3b1808		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 298 times (4768 bytes)...
>3b2ab8		f3 f3 f3 f3 f3 f3 f3 f3
.3e0000						BOOT_MENU
.3e0000						SplashScreenMain:
.3e0000		48		pha		                PHA             ; begin setdp macro
.3e0001		08		php		                PHP
.3e0002		c2 20		rep #$20	                REP #$20        ; set A long
.3e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3e0007		5b		tcd		                TCD
.3e0008		28		plp		                PLP
.3e0009		68		pla		                PLA             ; end setdp macro
.3e000a		c2 10		rep #$10	                REP #$10        ; set X long
.3e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e000e		a9 00		lda #$00	                LDA #$00
.3e0010		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0012		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0014		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0016		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3e001a		29 04		and #$04	                AND #FNX0_INT02_TMR0
.3e001c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3e0020		20 e6 00	jsr $3e00e6	                JSR Splash_Get_Machine_ID
.3e0023		20 19 01	jsr $3e0119	                JSR Splash_Clear_Screen
.3e0026		20 03 01	jsr $3e0103	                JSR Splash_Load_FontSet
.3e0029		22 f8 02 3e	jsl $3e02f8	                JSL Splashscreen_BitMapSetup
.3e002d		20 0b 06	jsr $3e060b	                JSR Model_Update_Info_Field
.3e0030		20 ec 05	jsr $3e05ec	                JSR Set_Text_Color
.3e0033		a9 00		lda #$00	                LDA #$00
.3e0035		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.3e0037		85 a7		sta $a7		                STA LINE_INDEX + 1
.3e0039		20 93 08	jsr $3e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e003c						HAVE_FUN:
.3e003c		22 33 01 3e	jsl $3e0133	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.3e0040		a6 a6		ldx $a6		                LDX LINE_INDEX
.3e0042		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.3e0045		f0 08		beq $3e004f	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.3e0047		20 d0 08	jsr $3e08d0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.3e004a		90 21		bcc $3e006d	                BCC Still_Displaying_Char
.3e004c		20 93 08	jsr $3e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e004f						ByPassCharDisplay:
.3e004f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0051		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.3e0055		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.3e0057		f0 14		beq $3e006d	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.3e0059		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.3e005b		f0 1f		beq $3e007c	                BEQ return              ; Yes: return it
.3e005d		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.3e005f		f0 1b		beq $3e007c	                BEQ return              ; Yes: return it
.3e0061		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.3e0063		f0 17		beq $3e007c	                BEQ return              ; Yes: return it
.3e0065		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.3e0067		f0 13		beq $3e007c	                BEQ return              ; Yes: return it
.3e0069		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.3e006b		f0 0d		beq $3e007a	                BEQ exitshere
.3e006d						Still_Displaying_Char:
.3e006d						WaitForNextSOF:
.3e006d		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.3e0071		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e0073		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.3e0075		d0 f6		bne $3e006d	                BNE WaitForNextSOF;
.3e0077		4c 3c 00	jmp $3e003c	                JMP HAVE_FUN
.3e007a						exitshere:
.3e007a						timeout
.3e007a		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.3e007c						return
.3e007c		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.3e0080		a9 00		lda #$00	                LDA #$00
.3e0082		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.3e0086		22 2c 05 3e	jsl $3e052c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.3e008a		20 9f 00	jsr $3e009f	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.3e008d		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.3e0091		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.3e0095		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e0099		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.3e009d		ea		nop		                NOP
.3e009e		6b		rtl		                RTL
.3e009f						VickyII_Registers_Clear:
.3e009f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00a1		c2 10		rep #$10	                REP #$10        ; set X long
.3e00a3		a2 00 00	ldx #$0000	                LDX #$0000
.3e00a6		a9 00		lda #$00	                LDA #$00
.3e00a8						ClearSpriteRegisters:
.3e00a8		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.3e00ac		e8		inx		                INX
.3e00ad		e0 00 02	cpx #$0200	                CPX #$0200
.3e00b0		d0 f6		bne $3e00a8	                BNE ClearSpriteRegisters
.3e00b2		a2 00 00	ldx #$0000	                LDX #$0000
.3e00b5		a9 00		lda #$00	                LDA #$00
.3e00b7						ClearTiles0Registers:
.3e00b7		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.3e00bb		e8		inx		                INX
.3e00bc		e0 30 00	cpx #$0030	                CPX #$0030
.3e00bf		d0 f6		bne $3e00b7	                BNE ClearTiles0Registers
.3e00c1		ea		nop		                NOP
.3e00c2		a2 00 00	ldx #$0000	                LDX #$0000
.3e00c5		a9 00		lda #$00	                LDA #$00
.3e00c7						ClearTiles1Registers:
.3e00c7		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.3e00cb		e8		inx		                INX
.3e00cc		e0 20 00	cpx #$0020	                CPX #$0020
.3e00cf		d0 f6		bne $3e00c7	                BNE ClearTiles1Registers
.3e00d1		ea		nop		                NOP
.3e00d2		a2 00 00	ldx #$0000	                LDX #$0000
.3e00d5		a9 00		lda #$00	                LDA #$00
.3e00d7						ClearBitmapRegisters:
.3e00d7		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.3e00db		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.3e00df		e8		inx		                INX
.3e00e0		e0 10 00	cpx #$0010	                CPX #$0010
.3e00e3		d0 f2		bne $3e00d7	                BNE ClearBitmapRegisters
.3e00e5		60		rts		                RTS
.3e00e6						Splash_Get_Machine_ID
.3e00e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00e8		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00ec		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.3e00ee		85 b0		sta $b0		                STA MODEL
.3e00f0		c9 00		cmp #$00	                CMP #$00
.3e00f2		f0 0e		beq $3e0102	                BEQ DONE
.3e00f4		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00f8		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.3e00fa		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.3e00fc		f0 04		beq $3e0102	                BEQ DONE
.3e00fe		a9 02		lda #$02	                LDA #$02
.3e0100		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.3e0102						DONE:
.3e0102		60		rts		                RTS
.3e0103						Splash_Load_FontSet
.3e0103		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0105		c2 10		rep #$10	                REP #$10        ; set X long
.3e0107		a2 00 00	ldx #$0000	                LDX #$0000
.3e010a						DONE_LOADING_FONT:
.3e010a		bf 00 08 3f	lda $3f0800,x	                LDA @l FONT_4_SPLASH, X
.3e010e		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.3e0112		e8		inx		                INX
.3e0113		e0 00 08	cpx #$0800	                CPX #2048
.3e0116		d0 f2		bne $3e010a	                BNE DONE_LOADING_FONT
.3e0118		60		rts		                RTS
.3e0119						Splash_Clear_Screen
.3e0119		e2 20		sep #$20	                SEP #$20        ; set A short
.3e011b		c2 10		rep #$10	                REP #$10        ; set X long
.3e011d		a2 00 00	ldx #$0000	                LDX #$0000
.3e0120						Branch_Clear:
.3e0120		a9 20		lda #$20	                LDA #$20
.3e0122		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.3e0126		a9 f0		lda #$f0	                LDA #$F0
.3e0128		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.3e012c		e8		inx		                INX
.3e012d		e0 00 20	cpx #$2000	                CPX #$2000
.3e0130		d0 ee		bne $3e0120	                BNE Branch_Clear
.3e0132		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.3e0133						Splash_Moniker_Color_Rolling
.3e0133		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0135		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3e0139		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e013b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3e013f		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.3e0141		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.3e0143		f0 0c		beq $3e0151	                BEQ SERVE_STATE0
.3e0145		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.3e0147		f0 1a		beq $3e0163	                BEQ SERVE_STATE1
.3e0149		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.3e014b		d0 03		bne $3e0150	                BNE NOT_SERVE_STATE2
.3e014d		82 39 01	brl $3e0289	                BRL SERVE_STATE2
.3e0150						NOT_SERVE_STATE2
.3e0150		6b		rtl		                RTL
.3e0151						SERVE_STATE0
.3e0151		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.3e0153		c9 04		cmp #$04	                CMP #$04
.3e0155		f0 03		beq $3e015a	                BEQ SERVE_NEXT_STATE
.3e0157		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.3e0159		6b		rtl		                RTL
.3e015a						SERVE_NEXT_STATE
.3e015a		a9 00		lda #$00	                LDA #$00
.3e015c		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e015e		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.3e0160		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0162		6b		rtl		                RTL
.3e0163						SERVE_STATE1
.3e0163		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0165		a9 00 00	lda #$0000	                LDA #$0000
.3e0168		a2 00 00	ldx #$0000	                LDX #$0000
.3e016b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3e016d		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e016f		bf b0 02 3e	lda $3e02b0,x	                LDA @lCOLOR_POINTER+0, X
.3e0173		aa		tax		                TAX
.3e0174		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0178		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.3e017c		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e0180		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.3e0184		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0188		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.3e018c		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e018e		bf b1 02 3e	lda $3e02b1,x	                LDA @lCOLOR_POINTER+1, X
.3e0192		aa		tax		                TAX
.3e0193		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0197		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.3e019b		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e019f		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.3e01a3		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01a7		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.3e01ab		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01ad		bf b2 02 3e	lda $3e02b2,x	                LDA @lCOLOR_POINTER+2, X
.3e01b1		aa		tax		                TAX
.3e01b2		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01b6		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.3e01ba		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01be		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.3e01c2		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01c6		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.3e01ca		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01cc		bf b3 02 3e	lda $3e02b3,x	                LDA @lCOLOR_POINTER+3, X
.3e01d0		aa		tax		                TAX
.3e01d1		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01d5		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.3e01d9		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01dd		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.3e01e1		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01e5		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.3e01e9		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01eb		bf b4 02 3e	lda $3e02b4,x	                LDA @lCOLOR_POINTER+4, X
.3e01ef		aa		tax		                TAX
.3e01f0		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01f4		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.3e01f8		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01fc		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.3e0200		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0204		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.3e0208		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e020a		bf b5 02 3e	lda $3e02b5,x	                LDA @lCOLOR_POINTER+5, X
.3e020e		aa		tax		                TAX
.3e020f		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0213		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.3e0217		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e021b		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.3e021f		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0223		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.3e0227		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0229		bf b6 02 3e	lda $3e02b6,x	                LDA @lCOLOR_POINTER+6, X
.3e022d		aa		tax		                TAX
.3e022e		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0232		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.3e0236		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e023a		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.3e023e		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0242		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.3e0246		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0248		bf b7 02 3e	lda $3e02b7,x	                LDA @lCOLOR_POINTER+7, X
.3e024c		aa		tax		                TAX
.3e024d		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0251		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.3e0255		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.3e0259		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e025d		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.3e0261		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.3e0265		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0269		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.3e026d		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.3e0271						HERE
.3e0271		18		clc		                CLC
.3e0272		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e0274		69 09		adc #$09	                ADC #$09
.3e0276		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0278		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e027a		c9 48		cmp #$48	                CMP #$48
.3e027c		d0 04		bne $3e0282	                BNE EXIT_COLOR_CHANGE
.3e027e		a9 00		lda #$00	                LDA #$00
.3e0280		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0282						EXIT_COLOR_CHANGE
.3e0282		c2 10		rep #$10	                REP #$10        ; set X long
.3e0284		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e0286		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0288		6b		rtl		                RTL
.3e0289						SERVE_STATE2
.3e0289		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028b		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e028d		6b		rtl		                RTL
>3e028e						.align 16
>3e0290		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>3e0294		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>3e0298		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>3e029c		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>3e02a0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>3e02a4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>3e02a8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>3e02ac		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>3e02b0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>3e02b8		00
>3e02b9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>3e02c1		00
>3e02c2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>3e02ca		00
>3e02cb		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>3e02d3		00
>3e02d4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>3e02dc		00
>3e02dd		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>3e02e5		00
>3e02e6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>3e02ee		00
>3e02ef		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>3e02f7		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.3e02f8						Splashscreen_BitMapSetup
.3e02f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3e02fa		c2 10		rep #$10	                REP #$10        ; set X long
.3e02fc		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.3e02fe		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.3e0302		a9 00		lda #$00	        LDA #$00
.3e0304		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.3e0308		a9 00		lda #$00	        LDA #$00
.3e030a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.3e030e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.3e0310		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.3e0314		a9 00		lda #$00	        LDA #$00
.3e0316		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.3e031a		a9 00		lda #$00	        LDA #$00
.3e031c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.3e0320		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.3e0324		a9 01		lda #$01	        LDA #$01
.3e0326		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.3e032a		a9 08		lda #$08	        LDA #$08
.3e032c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.3e0330		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.3e0334		a9 80		lda #$80	        LDA #$80
.3e0336		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.3e033a		a9 00		lda #$00	        LDA #$00
.3e033c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.3e0340		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.3e0344		a9 a0		lda #$a0	        LDA #$A0
.3e0346		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.3e034a		a9 10		lda #$10	        LDA #$10
.3e034c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.3e0350		a9 10		lda #$10	        LDA #$10
.3e0352		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.3e0356		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.3e035a		e2 20		sep #$20	                SEP #$20        ; set A short
.3e035c		c2 10		rep #$10	                REP #$10        ; set X long
.3e035e		a2 00 00	ldx #$0000	        LDX #$0000
.3e0361						SS_LUT_BRANCH:
.3e0361		bf 00 0e 3e	lda $3e0e00,x	        LDA @l SS_MONIKER_LUT, X
.3e0365		ea		nop		        NOP
.3e0366		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.3e036a		e8		inx		        INX
.3e036b		e0 00 04	cpx #$0400	        CPX #1024
.3e036e		d0 f1		bne $3e0361	        BNE SS_LUT_BRANCH
.3e0370		a9 00		lda #$00	        LDA #$00
.3e0372		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.3e0376		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.3e037a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.3e037e		22 2c 05 3e	jsl $3e052c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.3e0382		c2 20		rep #$20	                REP #$20        ; set A long
.3e0384		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.3e0387		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e038b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.3e038e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e0392		a9 00 00	lda #$0000	        LDA #$0000
.3e0395		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0399		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.3e039c		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e03a0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.3e03a3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e03a7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.3e03aa		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e03ae		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e03b1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e03b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03b7		a9 3e		lda #$3e	        LDA #`SS_MONIKER
.3e03b9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e03bd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.3e03bf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e03c3		a9 00		lda #$00	        LDA #$00
.3e03c5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e03c9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.3e03cb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e03cf		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e03d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03d5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.3e03d9		29 03		and #$03	        AND #$03
.3e03db		c9 00		cmp #$00	        CMP #$00
.3e03dd		f0 0b		beq $3e03ea	        BEQ DMA_FMX_Moniker
.3e03df		c9 01		cmp #$01	        CMP #$01
.3e03e1		f0 5b		beq $3e043e	        BEQ DMA_UPlus_Moniker
.3e03e3		c9 02		cmp #$02	        CMP #$02
.3e03e5		d0 03		bne $3e03ea	        BNE BAD_MODEL_NUMBER
.3e03e7		82 a8 00	brl $3e0492	        BRL DMA_U_Moniker
.3e03ea						 BAD_MODEL_NUMBER:
.3e03ea						DMA_FMX_Moniker:
.3e03ea		c2 20		rep #$20	                REP #$20        ; set A long
.3e03ec		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.3e03ef		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e03f3		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e03f6		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e03fa		a9 00 00	lda #$0000	        LDA #$0000
.3e03fd		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0401		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.3e0404		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0408		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.3e040b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e040f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.3e0412		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e0416		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e0419		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e041d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e041f		a9 3e		lda #$3e	        LDA #`SS_FMX_TXT
.3e0421		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0425		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0427		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e042b		a9 00		lda #$00	        LDA #$00
.3e042d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0431		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.3e0433		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e0437		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e043b		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e043e						DMA_UPlus_Moniker:
.3e043e		c2 20		rep #$20	                REP #$20        ; set A long
.3e0440		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.3e0443		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0447		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e044a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e044e		a9 00 00	lda #$0000	        LDA #$0000
.3e0451		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0455		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.3e0458		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e045c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.3e045f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e0463		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.3e0466		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e046a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e046d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e0471		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0473		a9 3e		lda #$3e	        LDA #`SS_UPlus_TXT
.3e0475		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0479		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e047b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e047f		a9 00		lda #$00	        LDA #$00
.3e0481		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0485		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.3e0487		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e048b		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e048f		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e0492						DMA_U_Moniker:
.3e0492		c2 20		rep #$20	                REP #$20        ; set A long
.3e0494		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.3e0497		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e049b		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.3e049e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e04a2		a9 00 00	lda #$0000	        LDA #$0000
.3e04a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e04a9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.3e04ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e04b0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.3e04b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e04b7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.3e04ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e04be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e04c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e04c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04c7		a9 3e		lda #$3e	        LDA #`SS_U_TXT
.3e04c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e04cd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.3e04cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e04d3		a9 00		lda #$00	        LDA #$00
.3e04d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e04d9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.3e04db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e04df		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e04e3		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e04e6						Done_DMA_Model_Moniker
.3e04e6		6b		rtl		        RTL
.3e04e7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.3e04e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04e9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.3e04eb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e04ef		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.3e04f1		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e04f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04f7		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.3e04fb		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e04fd		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0501		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.3e0505		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.3e0507		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e050b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e050c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e050d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e050e		ea		nop		        NOP
.3e050f		ea		nop		        NOP
.3e0510		ea		nop		        NOP
.3e0511		ea		nop		        NOP
.3e0512		ea		nop		        NOP
.3e0513		ea		nop		        NOP
.3e0514		ea		nop		        NOP
.3e0515		a9 00		lda #$00	        LDA #$00
.3e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e051b						NOTFINISHED:
.3e051b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e051f		29 80		and #$80	        AND #$80
.3e0521		c9 80		cmp #$80	        CMP #$80
.3e0523		f0 f6		beq $3e051b	        BEQ NOTFINISHED
.3e0525		a9 00		lda #$00	        LDA #$00
.3e0527		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e052b		6b		rtl		        RTL
.3e052c						SS_VDMA_CLEAR_MEMORY_640_480
.3e052c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e052e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.3e0530		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0534		a9 00		lda #$00	        LDA #$00
.3e0536		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e053a		c2 20		rep #$20	                REP #$20        ; set A long
.3e053c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e053f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0543		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0545		a9 00		lda #$00	        LDA #$00
.3e0547		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e054b		c2 20		rep #$20	                REP #$20        ; set A long
.3e054d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.3e0550		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e0554		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0556		a9 04		lda #$04	        LDA #`(640*480)
.3e0558		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e055c		a9 00		lda #$00	        LDA #$00
.3e055e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0562		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e0566		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e0568		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e056c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e056d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e056e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e056f		ea		nop		        NOP
.3e0570		ea		nop		        NOP
.3e0571		ea		nop		        NOP
.3e0572		ea		nop		        NOP
.3e0573		ea		nop		        NOP
.3e0574						SS_VDMA_CLR_LOOPA:
.3e0574		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e0578		29 80		and #$80	        AND #$80
.3e057a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e057c		f0 f6		beq $3e0574	        BEQ SS_VDMA_CLR_LOOPA
.3e057e		ea		nop		        NOP
.3e057f		a9 00		lda #$00	        LDA #$00
.3e0581		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0585		6b		rtl		        RTL
.3e0586						SS_VDMA_TRANSFER_VRAM_2_VRAM
.3e0586		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0588		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.3e058a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e058e		a9 00		lda #$00	        LDA #$00
.3e0590		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e0594		c2 20		rep #$20	                REP #$20        ; set A long
.3e0596		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.3e0599		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.3e059d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e059f		a9 00		lda #$00	        LDA #$00
.3e05a1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.3e05a5		c2 20		rep #$20	                REP #$20        ; set A long
.3e05a7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e05aa		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e05ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05b0		a9 00		lda #$00	        LDA #$00
.3e05b2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e05b6		c2 20		rep #$20	                REP #$20        ; set A long
.3e05b8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.3e05bb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e05bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05c1		a9 00		lda #$00	        LDA #`(320*16)
.3e05c3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e05c7		a9 00		lda #$00	        LDA #$00
.3e05c9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e05cd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e05d1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e05d3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05d7		ea		nop		        NOP
.3e05d8		ea		nop		        NOP
.3e05d9		ea		nop		        NOP
.3e05da						SS_VDMA_CLR_LOOPB:
.3e05da		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e05de		29 80		and #$80	        AND #$80
.3e05e0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e05e2		f0 f6		beq $3e05da	        BEQ SS_VDMA_CLR_LOOPB
.3e05e4		ea		nop		        NOP
.3e05e5		a9 00		lda #$00	        LDA #$00
.3e05e7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05eb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=$000098					TEXT_SRC_PTR_L      = $000098
=$00009a					TEXT_SRC_PTR_H      = $00009A
=$00009c					TEXT_DST_PTR_L      = $00009C
=$00009e					TEXT_DST_PTR_H      = $00009E
=$0000a0					TEXT_INDEX          = $0000A0
=$0000a0					MOD_SELECT_L        = $0000A0
=$0000a2					MOD_SELECT_H        = $0000A2
=$0000a2					TEXT_CURSOR_X       = $0000A2
=$0000a4					TEXT_CURSOR_Y       = $0000A4
=$0000a6					LINE_INDEX          = $0000A6
=$0000a8					COLOR_DST_PTR_L     = $0000A8
=$0000aa					COLOR_DST_PTR_H     = $0000AA
=$0000b0					MODEL               = $0000B0
=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.3e05ec						Set_Text_Color:
.3e05ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e05ee		a9 00 00	lda #$0000	            LDA #00
.3e05f1		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e05f3		a9 30 00	lda #$0030	            LDA #48
.3e05f6		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e05f8		20 ec 08	jsr $3e08ec	            JSR Line_Display_Compute_Pointer
.3e05fb		a0 00 00	ldy #$0000	            LDY #$0000
.3e05fe		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0600		a9 40		lda #$40	            LDA #$40
.3e0602						SetColorBranch:
.3e0602		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.3e0604		c8		iny		            INY
.3e0605		c0 50 00	cpy #$0050	            CPY #80
.3e0608		d0 f8		bne $3e0602	            BNE SetColorBranch
.3e060a		60		rts		            RTS
.3e060b						Model_Update_Info_Field:
.3e060b		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e060d		a9 00 00	lda #$0000	            LDA #$0000
.3e0610		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0612		a5 b0		lda $b0		            LDA MODEL
.3e0614		0a		asl a		            ASL
.3e0615		0a		asl a		            ASL
.3e0616		aa		tax		            TAX
.3e0617		c2 20		rep #$20	                REP #$20        ; set A long
.3e0619		bf 9f 0c 3e	lda $3e0c9f,x	            LDA MODEL_TABLE, X
.3e061d		85 a0		sta $a0		            STA MOD_SELECT_L
.3e061f		bf a1 0c 3e	lda $3e0ca1,x	            LDA MODEL_TABLE + 2, X
.3e0623		85 a2		sta $a2		            STA MOD_SELECT_H
.3e0625		a0 00 00	ldy #$0000	            LDY #$0000
.3e0628		84 a6		sty $a6		            STY LINE_INDEX
.3e062a						Next_Change_Here:
.3e062a		c2 20		rep #$20	                REP #$20        ; set A long
.3e062c		a4 a6		ldy $a6		            LDY LINE_INDEX
.3e062e		bb		tyx		            TYX
.3e062f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e0631		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e0633		bf ef 0c 3e	lda $3e0cef,x	            LDA LINE_MOD, X
.3e0637		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0639		c8		iny		            INY
.3e063a		c8		iny		            INY
.3e063b		bb		tyx		            TYX
.3e063c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e063e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e0640		bf ef 0c 3e	lda $3e0cef,x	            LDA LINE_MOD, X
.3e0644		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0646		c8		iny		            INY
.3e0647		c8		iny		            INY
.3e0648		84 a6		sty $a6		            STY LINE_INDEX
.3e064a		c0 10 00	cpy #$0010	            CPY #16
.3e064d		f0 10		beq $3e065f	            BEQ LetsMoveOn
.3e064f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0651		a0 00 00	ldy #$0000	            LDY #$0000
.3e0654						nextchar:
.3e0654		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e0656		c9 00		cmp #$00	            CMP #$00
.3e0658		f0 d0		beq $3e062a	            BEQ Next_Change_Here
.3e065a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e065c		c8		iny		            INY
.3e065d		80 f5		bra $3e0654	            BRA nextchar
.3e065f						LetsMoveOn:
.3e065f		af fb 0c 3e	lda $3e0cfb	            LDA LINE_MOD + 12
.3e0663		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0665		a0 00 00	ldy #$0000	            LDY #$0000
.3e0668		e2 20		sep #$20	                SEP #$20        ; set A short
.3e066a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.3e066e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0670		c8		iny		            INY
.3e0671		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.3e0675		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0677		c8		iny		            INY
.3e0678		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.3e067c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e067e		18		clc		            CLC
.3e067f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.3e0683		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0686		8f ca 0a 3e	sta $3e0aca	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.3e068a		8f 03 0b 3e	sta $3e0b03	            STA @lLINE9 + 47    ; GABE in FMX
.3e068e		8f 49 0b 3e	sta $3e0b49	            STA @lLINE10 + 51   ; VICKY II in FMX
.3e0692		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.3e0696		29 0f		and #$0f	            AND #$0F
.3e0698		69 30		adc #$30	            ADC #$30
.3e069a		8f cb 0a 3e	sta $3e0acb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.3e069e		8f 04 0b 3e	sta $3e0b04	            STA @lLINE9 + 48    ; GABE in FMX
.3e06a2		8f 4a 0b 3e	sta $3e0b4a	            STA @lLINE10 + 52   ; VICKY II in FMX
.3e06a6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.3e06aa		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06ad		8f cd 0a 3e	sta $3e0acd	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.3e06b1		8f 06 0b 3e	sta $3e0b06	            STA @lLINE9 + 50    ; GABE in FMX
.3e06b5		8f 4c 0b 3e	sta $3e0b4c	            STA @lLINE10 + 54   ; VICKY II in FMX
.3e06b9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.3e06bd		29 0f		and #$0f	            AND #$0F
.3e06bf		69 30		adc #$30	            ADC #$30
.3e06c1		8f ce 0a 3e	sta $3e0ace	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.3e06c5		8f 07 0b 3e	sta $3e0b07	            STA @lLINE9 + 51    ; GABE in FMX
.3e06c9		8f 4d 0b 3e	sta $3e0b4d	            STA @lLINE10 + 55   ; VICKY II in FMX
.3e06cd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.3e06d1		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06d4		8f d0 0a 3e	sta $3e0ad0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.3e06d8		8f 09 0b 3e	sta $3e0b09	            STA @lLINE9 + 53    ; GABE in FMX
.3e06dc		8f 4f 0b 3e	sta $3e0b4f	            STA @lLINE10 + 57   ; VICKY II in FMX
.3e06e0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.3e06e4		29 0f		and #$0f	            AND #$0F
.3e06e6		69 30		adc #$30	            ADC #$30
.3e06e8		8f d1 0a 3e	sta $3e0ad1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.3e06ec		8f 0a 0b 3e	sta $3e0b0a	            STA @lLINE9 + 54    ; GABE in FMX
.3e06f0		8f 50 0b 3e	sta $3e0b50	            STA @lLINE10 + 58   ; VICKY II in FMX
.3e06f4		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e06f8		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06fb		8f c0 0a 3e	sta $3e0ac0	            STA @lLINE8 + 46    ; U/U+
.3e06ff		8f f9 0a 3e	sta $3e0af9	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.3e0703		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0707		29 0f		and #$0f	            AND #$0F
.3e0709		69 30		adc #$30	            ADC #$30
.3e070b		8f c1 0a 3e	sta $3e0ac1	            STA @lLINE8 + 47
.3e070f		8f fa 0a 3e	sta $3e0afa	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.3e0713		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0717		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e071a		8f 3f 0b 3e	sta $3e0b3f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.3e071e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0722		29 0f		and #$0f	            AND #$0F
.3e0724		69 30		adc #$30	            ADC #$30
.3e0726		8f 40 0b 3e	sta $3e0b40	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.3e072a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e072e		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0731		8f c2 0a 3e	sta $3e0ac2	            STA @lLINE8 + 48
.3e0735		8f fb 0a 3e	sta $3e0afb	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.3e0739		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e073d		29 0f		and #$0f	            AND #$0F
.3e073f		69 30		adc #$30	            ADC #$30
.3e0741		8f c3 0a 3e	sta $3e0ac3	            STA @lLINE8 + 49
.3e0745		8f fc 0a 3e	sta $3e0afc	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.3e0749		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e074d		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0750		8f 41 0b 3e	sta $3e0b41	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.3e0754		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e0758		29 0f		and #$0f	            AND #$0F
.3e075a		69 30		adc #$30	            ADC #$30
.3e075c		8f 42 0b 3e	sta $3e0b42	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.3e0760		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0764		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0767		8f b4 0a 3e	sta $3e0ab4	            STA @lLINE8 + 34
.3e076b		8f ed 0a 3e	sta $3e0aed	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.3e076f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0773		29 0f		and #$0f	            AND #$0F
.3e0775		69 30		adc #$30	            ADC #$30
.3e0777		8f b5 0a 3e	sta $3e0ab5	            STA @lLINE8 + 35
.3e077b		8f ee 0a 3e	sta $3e0aee	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.3e077f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e0783		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0786		8f 34 0b 3e	sta $3e0b34	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.3e078a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e078e		29 0f		and #$0f	            AND #$0F
.3e0790		69 30		adc #$30	            ADC #$30
.3e0792		8f 35 0b 3e	sta $3e0b35	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.3e0796		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e079a		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e079d		8f b6 0a 3e	sta $3e0ab6	            STA @lLINE8 + 36
.3e07a1		8f ef 0a 3e	sta $3e0aef	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.3e07a5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07a9		29 0f		and #$0f	            AND #$0F
.3e07ab		69 30		adc #$30	            ADC #$30
.3e07ad		8f b7 0a 3e	sta $3e0ab7	            STA @lLINE8 + 37
.3e07b1		8f f0 0a 3e	sta $3e0af0	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.3e07b5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07b9		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e07bc		8f 36 0b 3e	sta $3e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07c0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07c4		29 0f		and #$0f	            AND #$0F
.3e07c6		69 30		adc #$30	            ADC #$30
.3e07c8		8f 36 0b 3e	sta $3e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07cc		20 3f 08	jsr $3e083f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.3e07cf		20 60 08	jsr $3e0860	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.3e07d2		20 61 08	jsr $3e0861	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.3e07d5		a5 b0		lda $b0		            LDA MODEL
.3e07d7		29 03		and #$03	            AND #$03
.3e07d9		c9 00		cmp #$00	            CMP #$00
.3e07db		f0 12		beq $3e07ef	            BEQ Erase_FATVicky_Line;
.3e07dd		c9 01		cmp #$01	            CMP #$01
.3e07df		f0 29		beq $3e080a	            BEQ Erase_2Lines;
.3e07e1		c9 02		cmp #$02	            CMP #$02
.3e07e3		f0 25		beq $3e080a	            BEQ Erase_2Lines;
.3e07e5		60		rts		            RTS
.3e07e6						HighNibblerBCD:
.3e07e6		29 f0		and #$f0	            AND #$F0
.3e07e8		4a		lsr a		            LSR A
.3e07e9		4a		lsr a		            LSR A
.3e07ea		4a		lsr a		            LSR A
.3e07eb		4a		lsr a		            LSR A
.3e07ec		69 30		adc #$30	            ADC #$30
.3e07ee		60		rts		            RTS
.3e07ef						Erase_FATVicky_Line:
.3e07ef		c2 20		rep #$20	                REP #$20        ; set A long
.3e07f1		a9 92 0a	lda #$0a92	            LDA #<>LINE8
.3e07f4		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e07f6		a9 3e 00	lda #$003e	            LDA #`LINE8
.3e07f9		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e07fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3e07fd		a0 00 00	ldy #$0000	            LDY #$0000
.3e0800		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0802		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0804		c8		iny		            INY
.3e0805		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0807		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0809		60		rts		            RTS
.3e080a						Erase_2Lines
.3e080a		c2 20		rep #$20	                REP #$20        ; set A long
.3e080c		a9 d4 0a	lda #$0ad4	            LDA #<>LINE9
.3e080f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0811		a9 3e 00	lda #$003e	            LDA #`LINE9
.3e0814		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0816		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0818		a0 00 00	ldy #$0000	            LDY #$0000
.3e081b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e081d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e081f		c8		iny		            INY
.3e0820		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0822		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0824		c2 20		rep #$20	                REP #$20        ; set A long
.3e0826		a9 16 0b	lda #$0b16	            LDA #<>LINE10
.3e0829		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e082b		a9 3e 00	lda #$003e	            LDA #`LINE10
.3e082e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0830		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0832		a0 00 00	ldy #$0000	            LDY #$0000
.3e0835		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0837		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0839		c8		iny		            INY
.3e083a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e083c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e083e		60		rts		            RTS
.3e083f						GODETECTHIRES
.3e083f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0841		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.3e0845		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.3e0847		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.3e0849		f0 14		beq $3e085f	            BEQ WeAreDone
.3e084b		c2 10		rep #$10	                REP #$10        ; set X long
.3e084d		a2 00 00	ldx #$0000	            LDX #$0000
.3e0850						ChangeNextChar
.3e0850		bf 4f 0d 3e	lda $3e0d4f,x	            LDA @l ON_TEXT, X
.3e0854		c9 00		cmp #$00	            CMP #$00
.3e0856		f0 07		beq $3e085f	            BEQ WeAreDone
.3e0858		9f 43 0c 3e	sta $3e0c43,x	            STA @l LINE17 +13, X
.3e085c		e8		inx		            INX
.3e085d		d0 f1		bne $3e0850	            BNE ChangeNextChar
.3e085f						WeAreDone
.3e085f						NoExpansionCardPresent
.3e085f		60		rts		            RTS
.3e0860						GODETECTHDD
.3e0860		60		rts		            RTS
.3e0861						GODETECTEXP
.3e0861		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0863		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.3e0867		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.3e0869		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.3e086b		d0 25		bne $3e0892	            BNE NoExpansionCardPresent
.3e086d		c2 10		rep #$10	                REP #$10        ; set X long
.3e086f		a2 00 00	ldx #$0000	            LDX #$0000
.3e0872						ChangeNextChar
.3e0872		bf 53 0d 3e	lda $3e0d53,x	            LDA @l YES_TEXT, X
.3e0876		c9 00		cmp #$00	            CMP #$00
.3e0878		f0 07		beq $3e0881	            BEQ WeAreDone
.3e087a		9f 75 0c 3e	sta $3e0c75,x	            STA @l LINE19 +26, X
.3e087e		e8		inx		            INX
.3e087f		d0 f1		bne $3e0872	            BNE ChangeNextChar
.3e0881						WeAreDone
.3e0881		a2 00 00	ldx #$0000	            LDX #$0000
.3e0884						AddCardName
.3e0884		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.3e0888		9f 79 0c 3e	sta $3e0c79,x	            STA @l LINE20, X
.3e088c		e8		inx		            INX
.3e088d		e0 10 00	cpx #$0010	            CPX #$10
.3e0890		d0 f2		bne $3e0884	            BNE AddCardName
.3e0892						NoExpansionCardPresent
.3e0892		60		rts		            RTS
.3e0893						Line_Setup_Before_Display
.3e0893		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0895		a5 a6		lda $a6		            LDA LINE_INDEX
.3e0897		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.3e089a		f0 33		beq $3e08cf	            BEQ DONE
.3e089c		a5 a6		lda $a6		            LDA LINE_INDEX
.3e089e		0a		asl a		            ASL A
.3e089f		0a		asl a		            ASL A
.3e08a0		aa		tax		            TAX
.3e08a1		bf 14 09 3e	lda $3e0914,x	            LDA TEXT_TABLE, X
.3e08a5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e08a7		bf 16 09 3e	lda $3e0916,x	            LDA TEXT_TABLE + 2, X
.3e08ab		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e08ad		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08af		0a		asl a		            ASL A
.3e08b0		aa		tax		            TAX
.3e08b1		bf 70 09 3e	lda $3e0970,x	            LDA TEXT_POSX, X
.3e08b5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e08b7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08bb		bf 9e 09 3e	lda $3e099e,x	            LDA TEXT_POSY, X
.3e08bf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e08c1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.3e08c5		20 ec 08	jsr $3e08ec	            JSR Line_Display_Compute_Pointer
.3e08c8		a9 00 00	lda #$0000	            LDA #$0000
.3e08cb		85 a0		sta $a0		            STA TEXT_INDEX
.3e08cd		e6 a6		inc $a6		            INC LINE_INDEX
.3e08cf						DONE:
.3e08cf		60		rts		            RTS
.3e08d0						Line_Display_1_Character
.3e08d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08d2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.3e08d4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.3e08d6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08da		e2 20		sep #$20	                SEP #$20        ; set A short
.3e08dc		38		sec		            SEC
.3e08dd		a4 a0		ldy $a0		            LDY TEXT_INDEX
.3e08df		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e08e1		c9 00		cmp #$00	            CMP #$00
.3e08e3		f0 06		beq $3e08eb	            BEQ WE_ARE_DONE;
.3e08e5		18		clc		            CLC
.3e08e6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e08e8		c8		iny		            INY
.3e08e9		84 a0		sty $a0		            STY TEXT_INDEX
.3e08eb						WE_ARE_DONE:
.3e08eb		60		rts		            RTS
.3e08ec						Line_Display_Compute_Pointer
.3e08ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08ee		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.3e08f0		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.3e08f4		a9 50 00	lda #$0050	            LDA #80
.3e08f7		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.3e08fb		18		clc		            CLC
.3e08fc		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.3e0900		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.3e0902		69 00 a0	adc #$a000	            ADC #$A000
.3e0905		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0907		69 00 20	adc #$2000	            ADC #$2000
.3e090a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.3e090c		a9 af 00	lda #$00af	            LDA #$00AF
.3e090f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0911		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.3e0913		60		rts		            RTS
>3e0914		cc 09 3e 00 ed 09 3e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>3e091c		03 0a 3e 00 11 0a 3e 00 29 0a 3e 00 4c 0a 3e 00
>3e092c		70 0a 3e 00 85 0a 3e 00
>3e0934		92 0a 3e 00 d4 0a 3e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>3e093c		16 0b 3e 00 58 0b 3e 00 62 0b 3e 00 8b 0b 3e 00
>3e094c		c2 0b 3e 00 e5 0b 3e 00
>3e0954		f7 0b 3e 00 36 0c 3e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>3e095c		48 0c 3e 00 5b 0c 3e 00 79 0c 3e 00 8a 0c 3e 00
>3e096c		9d 0c 3e 00
>3e0970		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>3e0978		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>3e0988		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>3e0998		2d 00 1e 00 48 00
>3e099e		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>3e09a6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>3e09b6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>3e09c6		35 00 39 00 39 00
=6						leftAlign = 6
>3e09cc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>3e09d4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>3e09e4		20 20 20 20 20 20 20 20 00
>3e09ed		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>3e09f5		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>3e0a03		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>3e0a0b		4e 46 4f 3a 20 00
>3e0a11		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>3e0a19		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>3e0a29		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>3e0a31		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>3e0a41		20 20 20 20 20 20 20 20 20 20 00
>3e0a4c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>3e0a54		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>3e0a64		20 20 20 20 20 20 20 20 20 20 20 00
>3e0a70		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>3e0a78		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>3e0a85		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>3e0a8d		53 29 3a 20 00
>3e0a92		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>3e0a9a		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>3e0aaa		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>3e0aba		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>3e0aca		30 30 2f 30 30 2f 30 30 20 00
>3e0ad4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>3e0adc		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>3e0aec		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>3e0afc		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>3e0b0c		20 20 20 20 20 20 20 20 20 00
>3e0b16		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>3e0b1e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>3e0b2e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>3e0b3e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>3e0b4e		2f 30 30 20 20 20 20 20 20 00
>3e0b58		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>3e0b60		20 00
>3e0b62		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>3e0b6a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>3e0b7a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>3e0b8a		00
>3e0b8b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>3e0b93		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>3e0ba3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>3e0bb3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>3e0bc2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>3e0bca		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>3e0bda		4c 20 54 52 45 4d 42 4c 41 59 00
>3e0be5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>3e0bed		20 4d 45 4e 55 2d 2d 2d 2d 00
>3e0bf7		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>3e0bff		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>3e0c0f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>3e0c1f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>3e0c2f		46 41 55 4c 54 20 00
>3e0c36		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>3e0c3e		4f 44 45 3a 20 4f 46 46 20 00
>3e0c48		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>3e0c50		41 4c 4c 45 44 3a 20 2d 2d 20 00
>3e0c5b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>3e0c63		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>3e0c73		3a 20 4e 4f 20 00
>3e0c79		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3e0c81		00 00 00 00 00 00 00 00 00
>3e0c8a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>3e0c92		46 4f 45 4e 49 58 2e 43 4f 4d 00
>3e0c9d		20 00				LINE22 .text " ", $00
>3e0c9f		af 0c 3e 00 bf 0c 3e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>3e0ca7		cf 0c 3e 00 df 0c 3e 00
>3e0caf		ff 0c 3e 00 3f 0d 3e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>3e0cb7		3f 0d 3e 00 00 00 00 00
>3e0cbf		0f 0d 3e 00 3f 0d 3e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>3e0cc7		2f 0d 3e 00 00 00 00 00
>3e0ccf		1f 0d 3e 00 2f 0d 3e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>3e0cd7		2f 0d 3e 00 00 00 00 00
>3e0cdf		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>3e0ce7		00 00 00 00 00 00 00 00
>3e0cef		dc 09 3e 00 3b 0a 3e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>3e0cf7		5f 0a 3e 00 7e 0a 3e 00
>3e0cff		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>3e0d07		4e 49 58 20 46 4d 58 00
>3e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>3e0d17		4e 49 58 20 55 2b 20 00
>3e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>3e0d27		4e 49 58 20 55 20 20 00
>3e0d2f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>3e0d37		32 20 42 59 54 45 53 00
>3e0d3f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>3e0d47		34 20 42 59 54 45 53 00
>3e0d4f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>3e0d53		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>3e0d57						.align 256
.3e0e00						SS_MONIKER_LUT
>3e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>3e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>3e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>3e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>3e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>3e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>3e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>3e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>3e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>3e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>3e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>3e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>3e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>3e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>3e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>3e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>3e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>3e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>3e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>3e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>3e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>3e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>3e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>3e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>3e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>3e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>3e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>3e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>3e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>3e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>3e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>3e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>3e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>3e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>3e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>3e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>3e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>3e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>3e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>3e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>3e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>3e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>3e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>3e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>3e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>3e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>3e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>3e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>3e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>3e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>3e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>3e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>3e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>3e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>3e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>3e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>3e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>3e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>3e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>3e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>3e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>3e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>3e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>3e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>3e11f8		ff ff ff 00 e5 80 80 00
.3e1200						SS_MONIKER
>3e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>3e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>3e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>3e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>3e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>3e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>3e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>3e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>3e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>3e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>3e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>3e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>3e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>3e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>3e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>3e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>3e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>3e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>3e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>3e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>3e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>3e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>3e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>3e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>3e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>3e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>3e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>3e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>3e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>3e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>3e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>3e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>3e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>3e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>3e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>3e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>3e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>3e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>3e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>3e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>3e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>3e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>3e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>3e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>3e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>3e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>3e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>3e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>3e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>3e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>3e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>3e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>3e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>3e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>3e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>3e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>3e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>3e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>3e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>3e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>3e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>3e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>3e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>3e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>3e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>3e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>3e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>3e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>3e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>3e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>3e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>3e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>3e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>3e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>3e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>3e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>3e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>3e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>3e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>3e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>3e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>3e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>3e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>3e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>3e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>3e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>3e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>3e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>3e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>3e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>3e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>3e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>3e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>3e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>3e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>3e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>3e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>3e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>3e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>3e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>3e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>3e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>3e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>3e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>3e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>3e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>3e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>3e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>3e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>3e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>3e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>3e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>3e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>3e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>3e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>3e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>3e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>3e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>3e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>3e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>3e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>3e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>3e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>3e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>3e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>3e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>3e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>3e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>3e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>3e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>3e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>3e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>3e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>3e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>3e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>3e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>3e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>3e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>3e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>3e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>3e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>3e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>3e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>3e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>3e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>3e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>3e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>3e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>3e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>3e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>3e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>3e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>3e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>3e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>3e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>3e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>3e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>3e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>3e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>3e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>3e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>3e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>3e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>3e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>3e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>3e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>3e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>3e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>3e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>3e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>3e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>3e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>3e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>3e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>3e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>3e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>3e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>3e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>3e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>3e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>3e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>3e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>3e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>3e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>3e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>3e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>3e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>3e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>3e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>3e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>3e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>3e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>3e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>3e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>3e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>3e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>3e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>3e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>3e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>3e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>3e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>3e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>3e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>3e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>3e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>3e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>3e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>3e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>3e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>3e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>3e61f8		00 00 00 00 00 00 00 00
.3e6200						SS_FMX_TXT
>3e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>3e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>3e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>3e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>3e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>3e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>3e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>3e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>3e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>3e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>3e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>3e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>3e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>3e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>3e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>3e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>3e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>3e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>3e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>3e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>3e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>3e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>3e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>3e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>3e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>3e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>3e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>3e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>3e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>3e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>3e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>3e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>3e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>3e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>3e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>3e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>3e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>3e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>3e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>3e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>3e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>3e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>3e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>3e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>3e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>3e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>3e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>3e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>3e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>3e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>3e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>3e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>3e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>3e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>3e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>3e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>3e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>3e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>3e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>3e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>3e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>3e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>3e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>3e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>3e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>3e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>3e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>3e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>3e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>3e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>3e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>3e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>3e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>3e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>3e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>3e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>3e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>3e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>3e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>3e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>3e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>3e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>3e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>3e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>3e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>3e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>3e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>3e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>3e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>3e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>3e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>3e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>3e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>3e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>3e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>3e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>3e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>3e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>3e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>3e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>3e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>3e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>3e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>3e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>3e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>3e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>3e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>3e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>3e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>3e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>3e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>3e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>3e93f8		00 00 00 00 00 00 00 00
.3e9400						SS_UPlus_TXT
>3e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>3e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>3e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>3e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>3e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>3e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>3e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>3e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>3e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>3e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>3e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>3e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>3e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>3e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>3e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>3e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>3e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>3e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>3e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>3e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>3e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>3e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>3ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>3ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>3ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>3ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>3ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>3ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>3ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>3ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>3ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>3ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>3ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>3ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>3ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>3ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>3ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>3ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>3ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>3ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>3ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>3ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>3eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>3eabf8		00 00 00 00 00 00 00 00
.3eac00						SS_U_TXT
>3eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>3eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>3eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>3eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>3eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>3eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>3eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>3eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>3eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>3eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>3eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>3eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>3eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>3eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>3eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>3eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>3eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>3eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>3eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>3eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>3eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>3eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>3eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3ebbf8		00 00 00 00 00 00 00 00
.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_SPLASH
>3f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>3f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>3f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>3f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>3f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>3f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>3f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>3f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>3f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>3f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>3f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>3f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>3f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>3f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>3f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>3f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>3f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>3f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>3f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>3f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>3f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>3f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>3f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>3f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>3f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>3f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>3f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>3f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>3f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>3f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>3f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>3f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>3f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>3f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>3f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>3f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>3f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>3f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>3f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>3f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>3f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>3f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>3f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>3f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>3f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>3f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>3f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>3f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>3f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>3f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>3f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>3f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>3f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>3f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>3f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>3f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>3f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>3f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>3f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>3f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>3f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>3f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>3f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>3f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>3f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>3f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>3f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>3f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>3f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>3f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>3f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>3f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>3f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>3f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>3f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>3f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>3f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>3f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>3f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>3f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>3f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>3f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>3f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>3f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>3f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>3f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>3f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>3f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>3f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>3f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>3f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>3f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>3f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>3f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>3f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>3f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>3f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>3f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>3f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>3f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>3f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>3f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>3f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>3f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>3f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>3f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>3f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>3f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>3f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>3f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>3f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>3f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>3f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>3f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>3f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>3f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>3f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>3f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>3f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>3f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>3f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>3f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>3f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>3f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>3f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>3f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>3f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>3f0ff8		0f 0f 0f 0f f0 f0 f0 00
>3fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
