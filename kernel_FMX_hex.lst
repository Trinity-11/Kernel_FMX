
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=1 --long-address --flat --intel-hex -o kernel_FMX.hex --list kernel_FMX_hex.lst --labels=kernel_FMX_hex.lbl src\kernel.asm
; Thu Mar 25 19:24:50 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=1						TARGET_SYS=1

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$380000					  START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					  START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					  START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					  START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3e0000					  START_OF_SPLASH := $3E0000                  ; SplashScreen Code and Data $3E0000
=$3f0000					  START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 d5 18 38	jsl $3818d5	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 14 17 38	jsl $381714	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c fa 06 39	jmp $3906fa	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$3a0000					    BASIC = $3A0000
=3801092					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c 05 06 39	jmp $390605	RESTORE         JML IRESTORE
.381008	1008	5c 99 06 39	jmp $390699	BREAK           JML IBREAK
.38100c	100c	5c e0 06 39	jmp $3906e0	READY           JML IREADY
.381010	1010	5c 02 15 39	jmp $391502	SCINIT          JML ISCINIT
.381014	1014	5c 03 15 39	jmp $391503	IOINIT          JML IIOINIT
.381018	1018	5c 9c 07 39	jmp $39079c	PUTC            JML IPUTC
.38101c	101c	5c 85 07 39	jmp $390785	PUTS            JML IPUTS
.381020	1020	5c 14 09 39	jmp $390914	PUTB            JML IPUTB
.381024	1024	5c e7 3f 39	jmp $393fe7	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c 04 15 39	jmp $391504	SETLFS          JML ISETLFS
.38102c	102c	5c 05 15 39	jmp $391505	SETNAM          JML ISETNAM
.381030	1030	5c 06 15 39	jmp $391506	OPEN            JML IOPEN
.381034	1034	5c 07 15 39	jmp $391507	CLOSE           JML ICLOSE
.381038	1038	5c fb 06 39	jmp $3906fb	SETIN           JML ISETIN
.38103c	103c	5c 04 07 39	jmp $390704	SETOUT          JML ISETOUT
.381040	1040	5c 08 15 39	jmp $391508	GETB            JML IGETB
.381044	1044	5c 84 3f 39	jmp $393f84	GETBLOCK        JML IGETBLOCK
.381048	1048	5c 49 07 39	jmp $390749	GETCH           JML IGETCH
.38104c	104c	5c 16 07 39	jmp $390716	GETCHW          JML IGETCHW
.381050	1050	5c 0d 07 39	jmp $39070d	GETCHE          JML IGETCHE
.381054	1054	5c 09 15 39	jmp $391509	GETS            JML IGETS
.381058	1058	5c 0a 15 39	jmp $39150a	GETLINE         JML IGETLINE
.38105c	105c	5c 0b 15 39	jmp $39150b	GETFIELD        JML IGETFIELD
.381060	1060	5c 0c 15 39	jmp $39150c	TRIM            JML ITRIM
.381064	1064	5c 0d 15 39	jmp $39150d	PRINTC          JML IPRINTC
.381068	1068	5c 0e 15 39	jmp $39150e	PRINTS          JML IPRINTS
.38106c	106c	5c 15 09 39	jmp $390915	PRINTCR         JML IPRINTCR
.381070	1070	5c 0f 15 39	jmp $39150f	PRINTF          JML IPRINTF
.381074	1074	5c 10 15 39	jmp $391510	PRINTI          JML IPRINTI
.381078	1078	5c d5 0a 39	jmp $390ad5	PRINTH          JML IPRINTH
.38107c	107c	5c 11 15 39	jmp $391511	PRINTAI         JML IPRINTAI
.381080	1080	5c f2 0a 39	jmp $390af2	PRINTAH         JML IPRINTAH
.381084	1084	5c 19 0a 39	jmp $390a19	LOCATE          JML ILOCATE
.381088	1088	5c 12 15 39	jmp $391512	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c 13 15 39	jmp $391513	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c 75 09 39	jmp $390975	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c a8 09 39	jmp $3909a8	CSRLEFT         JML ICSRLEFT
.381098	1098	5c ce 09 39	jmp $3909ce	CSRUP           JML ICSRUP
.38109c	109c	5c f4 09 39	jmp $3909f4	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c 64 09 39	jmp $390964	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c 65 0a 39	jmp $390a65	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c 40 0b 39	jmp $390b40	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c 0b 0c 39	jmp $390c0b	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c df 0e 39	jmp $390edf	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c de 0f 39	jmp $390fde	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c 93 10 39	jmp $391093	INITMOUSE       JML IINITMOUSE
.3810bc	10bc	5c c0 0e 39	jmp $390ec0	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c 88 0e 39	jmp $390e88	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c 3a 0c 39	jmp $390c3a	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c 5a 0c 39	jmp $390c5a	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 20 0d 39	jmp $390d20	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c 4f 0e 39	jmp $390e4f	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c 87 0e 39	jmp $390e87	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810d8	10d8	5c 87 0e 39	jmp $390e87	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810dc	10dc	5c 50 11 39	jmp $391150	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c df 11 39	jmp $3911df	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c 4d 12 39	jmp $39124d	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c 02 12 39	jmp $391202	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c 90 35 39	jmp $393590	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c 6a 52 39	jmp $39526a	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c fd 52 39	jmp $3952fd	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c 37 53 39	jmp $395337	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c d0 53 39	jmp $3953d0	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c 6b 53 39	jmp $39536b	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c 7a 54 39	jmp $39547a	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c 3c 54 39	jmp $39543c	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c 76 54 39	jmp $395476	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c 13 55 39	jmp $395513	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c 3a 55 39	jmp $39553a	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c 3e 55 39	jmp $39553e	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c 2e 57 39	jmp $39572e	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c 5a 3f 39	jmp $393f5a	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c c7 57 39	jmp $3957c7	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c 85 43 39	jmp $394385	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c 9c 0d 39	jmp $390d9c	SETSIZES        JML ISETSIZES
.381130	1130	5c 16 59 39	jmp $395916	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c 60 58 39	jmp $395860	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c b4 58 39	jmp $3958b4	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.381700	1700	5c 91 68 39	jmp $396891	VEC_INT00_SOF   JML FDC_TIME_HANDLE ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c 16 15 39	jmp $391516	VEC_INT01_SOL   JML IRQHANDLESTUB   ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c 16 15 39	jmp $391516	VEC_INT02_TMR0  JML IRQHANDLESTUB   ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c 16 15 39	jmp $391516	VEC_INT03_TMR1  JML IRQHANDLESTUB   ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c 16 15 39	jmp $391516	VEC_INT04_TMR2  JML IRQHANDLESTUB   ; IRQ 0, 4 --- Timer 2 interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.381714						IRQ_HANDLER
.381714		e2 20		sep #$20	                SEP #$20        ; set A short
.381716		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38171a		c9 00		cmp #$00	                CMP #$00
.38171c		f0 7d		beq $38179b	                BEQ CHECK_PENDING_REG1
.38171e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381722		29 01		and #$01	                AND #FNX0_INT00_SOF
.381724		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.381726		d0 09		bne $381731	                BNE SERVICE_NEXT_IRQ1
.381728		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38172c		20 09 18	jsr $381809	                JSR SOF_INTERRUPT
.38172f		e2 20		sep #$20	                SEP #$20        ; set A short
.381731						SERVICE_NEXT_IRQ1
.381731		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381735		29 02		and #$02	                AND #FNX0_INT01_SOL
.381737		c9 02		cmp #$02	                CMP #FNX0_INT01_SOL
.381739		d0 07		bne $381742	                BNE SERVICE_NEXT_IRQ2
.38173b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.38173f		20 1a 18	jsr $38181a	                JSR SOL_INTERRUPT
.381742						SERVICE_NEXT_IRQ2
.381742		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381746		29 04		and #$04	                AND #FNX0_INT02_TMR0
.381748		c9 04		cmp #$04	                CMP #FNX0_INT02_TMR0
.38174a		d0 07		bne $381753	                BNE SERVICE_NEXT_IRQ3
.38174c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381750		20 2b 18	jsr $38182b	                JSR TIMER0_INTERRUPT
.381753						SERVICE_NEXT_IRQ3
.381753		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381757		29 08		and #$08	                AND #FNX0_INT03_TMR1
.381759		c9 08		cmp #$08	                CMP #FNX0_INT03_TMR1
.38175b		d0 07		bne $381764	                BNE SERVICE_NEXT_IRQ4
.38175d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381761		20 3c 18	jsr $38183c	                JSR TIMER1_INTERRUPT
.381764						SERVICE_NEXT_IRQ4
.381764		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381768		29 10		and #$10	                AND #FNX0_INT04_TMR2
.38176a		c9 10		cmp #$10	                CMP #FNX0_INT04_TMR2
.38176c		d0 09		bne $381777	                BNE SERVICE_NEXT_IRQ6
.38176e		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381772		20 4d 18	jsr $38184d	                JSR TIMER2_INTERRUPT
.381775		e2 20		sep #$20	                SEP #$20        ; set A short
.381777						SERVICE_NEXT_IRQ6
.381777		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38177b		29 40		and #$40	                AND #FNX0_INT06_FDC
.38177d		c9 40		cmp #$40	                CMP #FNX0_INT06_FDC
.38177f		d0 09		bne $38178a	                BNE SERVICE_NEXT_IRQ7
.381781		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381785		20 9e 18	jsr $38189e	                JSR FDC_INTERRUPT
.381788		e2 20		sep #$20	                SEP #$20        ; set A short
.38178a						SERVICE_NEXT_IRQ7
.38178a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38178e		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.381790		c9 80		cmp #$80	                CMP #FNX0_INT07_MOUSE
.381792		d0 07		bne $38179b	                BNE CHECK_PENDING_REG1
.381794		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381798		20 5e 18	jsr $38185e	                JSR MOUSE_INTERRUPT
.38179b						CHECK_PENDING_REG1
.38179b		e2 20		sep #$20	                SEP #$20        ; set A short
.38179d		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a1		c9 00		cmp #$00	                CMP #$00
.3817a3		f0 61		beq $381806	                BEQ EXIT_IRQ_HANDLE
.3817a5						SERVICE_NEXT_IRQ8
.3817a5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817a9		29 01		and #$01	                AND #FNX1_INT00_KBD
.3817ab		c9 01		cmp #$01	                CMP #FNX1_INT00_KBD
.3817ad		d0 0d		bne $3817bc	                BNE SERVICE_NEXT_IRQ11
.3817af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817b3		8b		phb		                PHB
.3817b4		0b		phd		                PHD
.3817b5		20 d6 18	jsr $3818d6	                JSR KEYBOARD_INTERRUPT
.3817b8		2b		pld		                PLD
.3817b9		ab		plb		                PLB
.3817ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3817bc						SERVICE_NEXT_IRQ11
.3817bc		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817c0		29 08		and #$08	                AND #FNX1_INT03_COM2
.3817c2		c9 08		cmp #$08	                CMP #FNX1_INT03_COM2
.3817c4		d0 09		bne $3817cf	                BNE SERVICE_NEXT_IRQ12
.3817c6		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817ca		20 a9 18	jsr $3818a9	                JSR COM2_INTERRUPT
.3817cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3817cf						SERVICE_NEXT_IRQ12
.3817cf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817d3		29 10		and #$10	                AND #FNX1_INT04_COM1
.3817d5		c9 10		cmp #$10	                CMP #FNX1_INT04_COM1
.3817d7		d0 09		bne $3817e2	                BNE SERVICE_NEXT_IRQ13
.3817d9		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817dd		20 b4 18	jsr $3818b4	                JSR COM1_INTERRUPT
.3817e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3817e2						SERVICE_NEXT_IRQ13
.3817e2		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817e6		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3817e8		c9 20		cmp #$20	                CMP #FNX1_INT05_MPU401
.3817ea		d0 09		bne $3817f5	                BNE SERVICE_NEXT_IRQ14
.3817ec		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3817f0		20 bf 18	jsr $3818bf	                JSR MPU401_INTERRUPT
.3817f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3817f5						SERVICE_NEXT_IRQ14
.3817f5		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3817f9		29 40		and #$40	                AND #FNX1_INT06_LPT
.3817fb		c9 40		cmp #$40	                CMP #FNX1_INT06_LPT
.3817fd		d0 07		bne $381806	                BNE EXIT_IRQ_HANDLE
.3817ff		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.381803		20 ca 18	jsr $3818ca	                JSR LPT1_INTERRUPT
.381806						EXIT_IRQ_HANDLE
.381806		c2 30		rep #$30	                REP #$30        ; set A&X long
.381808		6b		rtl		                RTL
.381809						SOF_INTERRUPT
.381809		e2 20		sep #$20	                SEP #$20        ; set A short
.38180b		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.38180f		29 01		and #$01	                AND #FNX0_INT00_SOF
.381811		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381815		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF
.381819		60		rts		                RTS
.38181a						SOL_INTERRUPT
.38181a		e2 20		sep #$20	                SEP #$20        ; set A short
.38181c		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.381820		29 02		and #$02	                AND #FNX0_INT01_SOL
.381822		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.381826		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL
.38182a		60		rts		                RTS
.38182b						TIMER0_INTERRUPT
.38182b		e2 20		sep #$20	                SEP #$20        ; set A short
.38182d		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381831		09 80		ora #$80	                ORA #TIMER0TRIGGER
.381833		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381837		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0
.38183b		60		rts		                RTS
.38183c						TIMER1_INTERRUPT
.38183c		e2 20		sep #$20	                SEP #$20        ; set A short
.38183e		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381842		09 40		ora #$40	                ORA #TIMER1TRIGGER
.381844		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381848		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1
.38184c		60		rts		                RTS
.38184d						TIMER2_INTERRUPT
.38184d		e2 20		sep #$20	                SEP #$20        ; set A short
.38184f		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381853		09 20		ora #$20	                ORA #TIMER2TRIGGER
.381855		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381859		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2
.38185d		60		rts		                RTS
.38185e						MOUSE_INTERRUPT
.38185e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.381860		af e0 00 00	lda $0000e0	                LDA @l MOUSE_PTR
.381864		aa		tax		                TAX
.381865		af 60 10 af	lda $af1060	                LDA @l KBD_INPT_BUF
.381869		9f 06 07 af	sta $af0706,x	                STA @lMOUSE_PTR_BYTE0, X
.38186d		e8		inx		                INX
.38186e		e0 03		cpx #$03	                CPX #$03
.381870		d0 24		bne $381896	                BNE EXIT_FOR_NEXT_VALUE
.381872		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.381876		8f e1 00 00	sta $0000e1	                STA @l MOUSE_POS_X_LO
.38187a		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.38187e		8f e2 00 00	sta $0000e2	                STA @l MOUSE_POS_X_HI
.381882		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.381886		8f e3 00 00	sta $0000e3	                STA @l MOUSE_POS_Y_LO
.38188a		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.38188e		8f e4 00 00	sta $0000e4	                STA @l MOUSE_POS_Y_HI
.381892		e2 20		sep #$20	                SEP #$20        ; set A short
.381894		a2 00		ldx #$00	                LDX #$00
.381896						EXIT_FOR_NEXT_VALUE
.381896		8a		txa		                TXA
.381897		8f e0 00 00	sta $0000e0	                STA @l MOUSE_PTR
.38189b		c2 10		rep #$10	                REP #$10        ; set X long
.38189d		60		rts		                RTS
.38189e						FDC_INTERRUPT
.38189e		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3818a2		29 40		and #$40	                AND #FNX0_INT06_FDC
.3818a4		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3818a8		60		rts		                RTS
.3818a9						COM2_INTERRUPT
.3818a9		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ad		29 08		and #$08	                AND #FNX1_INT03_COM2
.3818af		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818b3		60		rts		                RTS
.3818b4						COM1_INTERRUPT
.3818b4		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818b8		29 10		and #$10	                AND #FNX1_INT04_COM1
.3818ba		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818be		60		rts		                RTS
.3818bf						MPU401_INTERRUPT
.3818bf		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818c3		29 20		and #$20	                AND #FNX1_INT05_MPU401
.3818c5		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818c9		60		rts		                RTS
.3818ca						LPT1_INTERRUPT
.3818ca		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818ce		29 40		and #$40	                AND #FNX1_INT06_LPT
.3818d0		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818d4		60		rts		                RTS
.3818d5						NMI_HANDLER
.3818d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\keyboard.asm

.3818d6						KEYBOARD_INTERRUPT
.3818d6		48		pha		                PHA             ; begin setdp macro
.3818d7		08		php		                PHP
.3818d8		c2 20		rep #$20	                REP #$20        ; set A long
.3818da		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.3818dd		5b		tcd		                TCD
.3818de		28		plp		                PLP
.3818df		68		pla		                PLA             ; end setdp macro
.3818e0		a2 00 00	ldx #$0000	                ldx #$0000
.3818e3		e2 10		sep #$10	                SEP #$10        ; set X short
.3818e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3818e7		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1
.3818eb		29 01		and #$01	                AND #FNX1_INT00_KBD
.3818ed		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1
.3818f1						IRQ_HANDLER_FETCH
.3818f1		af 60 10 af	lda $af1060	                LDA @lKBD_INPT_BUF      ; Get Scan Code from KeyBoard
.3818f5		85 88		sta $0f88	                STA KEYBOARD_SC_TMP     ; Save Code Immediately
.3818f7		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the Prefix was picked up before
.3818f9		29 80		and #$80	                AND #$80
.3818fb		c9 80		cmp #$80	                CMP #$80
.3818fd		d0 10		bne $38190f	                BNE CHK_LSHIFT          ; No: do normal scan-code checks
.3818ff		a5 87		lda $0f87	PREFIX_ON       LDA KEYBOARD_SC_FLG     ; Otherwise: clear prefix
.381901		29 7f		and #$7f	                AND #$7F
.381903		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381905		a5 88		lda $0f88	                LDA KEYBOARD_SC_TMP     ; Get the prefixed scan-code's character
.381907		aa		tax		                TAX
.381908		bf 80 7a 39	lda $397a80,x	                LDA @lScanCode_Prefix_Set1, x
.38190c		4c b2 19	jmp $3819b2	                JMP KB_WR_2_SCREEN      ; And save it
.38190f		a5 88		lda $0f88	CHK_LSHIFT      LDA KEYBOARD_SC_TMP
.381911		c9 2a		cmp #$2a	                CMP #$2A                ; Left Shift Pressed
.381913		d0 03		bne $381918	                BNE NOT_KB_SET_LSHIFT
.381915		82 ad 00	brl $3819c5	                BRL KB_SET_SHIFT
.381918						NOT_KB_SET_LSHIFT
.381918		c9 aa		cmp #$aa	                CMP #$AA                ; Left Shift Unpressed
.38191a		d0 03		bne $38191f	                BNE NOT_KB_CLR_LSHIFT
.38191c		82 af 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38191f						NOT_KB_CLR_LSHIFT
.38191f		c9 36		cmp #$36	                CMP #$36                ; Right Shift Pressed
.381921		d0 03		bne $381926	                BNE NOT_KB_SET_RSHIFT
.381923		82 9f 00	brl $3819c5	                BRL KB_SET_SHIFT
.381926						NOT_KB_SET_RSHIFT
.381926		c9 b6		cmp #$b6	                CMP #$B6                ; Right Shift Unpressed
.381928		d0 03		bne $38192d	                BNE NOT_KB_CLR_RSHIFT
.38192a		82 a1 00	brl $3819ce	                BRL KB_CLR_SHIFT
.38192d						NOT_KB_CLR_RSHIFT
.38192d		c9 1d		cmp #$1d	                CMP #$1D                ; Left CTRL pressed
.38192f		d0 03		bne $381934	                BNE NOT_KB_SET_CTRL
.381931		82 a3 00	brl $3819d7	                BRL KB_SET_CTRL
.381934						NOT_KB_SET_CTRL
.381934		c9 9d		cmp #$9d	                CMP #$9D                ; Left CTRL Unpressed
.381936		d0 03		bne $38193b	                BNE NOT_KB_CLR_CTRL
.381938		82 a5 00	brl $3819e0	                BRL KB_CLR_CTRL
.38193b						NOT_KB_CLR_CTRL
.38193b		c9 38		cmp #$38	                CMP #$38                ; Left ALT Pressed
.38193d		d0 03		bne $381942	                BNE NOT_KB_SET_ALT
.38193f		82 a7 00	brl $3819e9	                BRL KB_SET_ALT
.381942						NOT_KB_SET_ALT
.381942		c9 b8		cmp #$b8	                CMP #$B8                ; Left ALT Unpressed
.381944		d0 03		bne $381949	                BNE NOT_KB_CLR_ALT
.381946		82 a9 00	brl $3819f2	                BRL KB_CLR_ALT
.381949		c9 e0		cmp #$e0	NOT_KB_CLR_ALT  CMP #$E0                ; Prefixed scan code
.38194b		d0 03		bne $381950	                BNE NOT_PREFIXED
.38194d		82 ab 00	brl $3819fb	                BRL KB_SET_PREFIX
.381950		c9 45		cmp #$45	NOT_PREFIXED    CMP #$45                ; Numlock Pressed
.381952		d0 03		bne $381957	                BNE NOT_KB_SET_NUM
.381954		82 b6 00	brl $381a0d	                BRL KB_TOG_NUMLOCK
.381957		c9 46		cmp #$46	NOT_KB_SET_NUM  CMP #$46                ; Scroll Lock Pressed
.381959		d0 03		bne $38195e	                BNE NOT_KB_SET_SCR
.38195b		82 a6 00	brl $381a04	                BRL KB_TOG_SCRLOCK
.38195e		c9 3a		cmp #$3a	NOT_KB_SET_SCR  CMP #$3A                ; Caps Lock Pressed
.381960		d0 03		bne $381965	                BNE NOT_KB_CAPSLOCK
.381962		82 bc 00	brl $381a21	                BRL KB_TOG_CAPLOCK
.381965		c9 58		cmp #$58	NOT_KB_CAPSLOCK CMP #$58                ; F12 Pressed
.381967		d0 09		bne $381972	                BNE KB_UNPRESSED
.381969		a9 60		lda #$60	                LDA #KB_CREDITS         ; Yes: flag that the CREDITS key has been pressed
.38196b		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.38196f		82 b5 00	brl $381a27	                BRL KB_CHECK_B_DONE
.381972		29 80		and #$80	KB_UNPRESSED    AND #$80                ; See if the Scan Code is press or Depressed
.381974		c9 80		cmp #$80	                CMP #$80                ; Depress Status - We will not do anything at this point
.381976		d0 03		bne $38197b	                BNE KB_NORM_SC
.381978		82 ac 00	brl $381a27	                BRL KB_CHECK_B_DONE
.38197b		a5 88		lda $0f88	KB_NORM_SC      LDA KEYBOARD_SC_TMP       ;
.38197d		aa		tax		                TAX
.38197e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the SHIFT Key is being Pushed
.381980		29 10		and #$10	                AND #$10
.381982		c9 10		cmp #$10	                CMP #$10
.381984		f0 17		beq $38199d	                BEQ SHIFT_KEY_ON
.381986		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the CTRL Key is being Pushed
.381988		29 20		and #$20	                AND #$20
.38198a		c9 20		cmp #$20	                CMP #$20
.38198c		f0 16		beq $3819a4	                BEQ CTRL_KEY_ON
.38198e		a5 87		lda $0f87	                LDA KEYBOARD_SC_FLG     ; Check to See if the ALT Key is being Pushed
.381990		29 40		and #$40	                AND #$40
.381992		c9 40		cmp #$40	                CMP #$40
.381994		f0 15		beq $3819ab	                BEQ ALT_KEY_ON
.381996		bf 00 78 39	lda $397800,x	                LDA @lScanCode_Press_Set1, x
.38199a		82 15 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.38199d		bf 80 78 39	lda $397880,x	SHIFT_KEY_ON    LDA @lScanCode_Shift_Set1, x
.3819a1		82 0e 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819a4		bf 00 79 39	lda $397900,x	CTRL_KEY_ON     LDA @lScanCode_Ctrl_Set1, x
.3819a8		82 07 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819ab		bf 80 79 39	lda $397980,x	ALT_KEY_ON      LDA @lScanCode_Alt_Set1, x
.3819af		82 00 00	brl $3819b2	                BRL KB_WR_2_SCREEN
.3819b2		c9 18		cmp #$18	KB_WR_2_SCREEN  CMP #$18                ; Is it SysRq?
.3819b4		d0 03		bne $3819b9	                BNE savechar
.3819b6		4c 37 1a	jmp $381a37	                JMP programmerKey       ; Yes: trigger the programmer key
.3819b9		48		pha		savechar        PHA
.3819ba		c2 10		rep #$10	                REP #$10        ; set X long
.3819bc		20 43 1a	jsr $381a43	                JSR SAVEKEY
.3819bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3819c1		68		pla		                PLA
.3819c2		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819c5		a5 87		lda $0f87	KB_SET_SHIFT    LDA KEYBOARD_SC_FLG
.3819c7		09 10		ora #$10	                ORA #$10
.3819c9		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819cb		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819ce		a5 87		lda $0f87	KB_CLR_SHIFT    LDA KEYBOARD_SC_FLG
.3819d0		29 ef		and #$ef	                AND #$EF
.3819d2		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819d4		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819d7		a5 87		lda $0f87	KB_SET_CTRL     LDA KEYBOARD_SC_FLG
.3819d9		09 20		ora #$20	                ORA #$20
.3819db		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819dd		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e0		a5 87		lda $0f87	KB_CLR_CTRL     LDA KEYBOARD_SC_FLG
.3819e2		29 df		and #$df	                AND #$DF
.3819e4		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819e6		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819e9		a5 87		lda $0f87	KB_SET_ALT      LDA KEYBOARD_SC_FLG
.3819eb		09 40		ora #$40	                ORA #$40
.3819ed		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819ef		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819f2		a5 87		lda $0f87	KB_CLR_ALT      LDA KEYBOARD_SC_FLG
.3819f4		29 bf		and #$bf	                AND #$BF
.3819f6		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.3819f8		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.3819fb		a5 87		lda $0f87	KB_SET_PREFIX   LDA KEYBOARD_SC_FLG
.3819fd		09 80		ora #$80	                ORA #$80
.3819ff		85 87		sta $0f87	                STA KEYBOARD_SC_FLG
.381a01		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a04		a5 89		lda $0f89	KB_TOG_SCRLOCK  LDA KEYBOARD_LOCKS
.381a06		49 01		eor #$01	                EOR #KB_SCROLL_LOCK         ; toggle the Scroll Lock flag
.381a08		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a0a		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a0d		a5 87		lda $0f87	KB_TOG_NUMLOCK  LDA KEYBOARD_SC_FLG         ; Check flags...
.381a0f		29 60		and #$60	                AND #$60                    ; ... is control-alt pressed?
.381a11		c9 60		cmp #$60	                CMP #$60
.381a13		d0 03		bne $381a18	                BNE KB_TOG_NUMLOC2
.381a15		82 63 ff	brl $38197b	                BRL KB_NORM_SC              ; No: treat as a BREAK key
.381a18		a5 89		lda $0f89	KB_TOG_NUMLOC2  LDA KEYBOARD_LOCKS
.381a1a		49 02		eor #$02	                EOR #KB_NUM_LOCK            ; toggle the Num Lock flag
.381a1c		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a1e		4c 27 1a	jmp $381a27	                JMP KB_CHECK_B_DONE
.381a21		a5 89		lda $0f89	KB_TOG_CAPLOCK  LDA KEYBOARD_LOCKS
.381a23		49 04		eor #$04	                EOR #KB_CAPS_LOCK           ; toggle the Caps Lock flag
.381a25		85 89		sta $0f89	                STA KEYBOARD_LOCKS
.381a27						KB_CHECK_B_DONE
.381a27		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.381a2b		29 01		and #$01	                AND #OUT_BUF_FULL           ; Test bit $01 (if 1, Full)
.381a2d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL           ; if Still Byte in the Buffer, fetch it out
.381a2f		d0 03		bne $381a34	                BNE SET_LED
.381a31		4c f1 18	jmp $3818f1	                JMP IRQ_HANDLER_FETCH
.381a34						SET_LED
.381a34						KB_DONE
.381a34		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a36		60		rts		                RTS
.381a37						programmerKey
.381a37		c2 30		rep #$30	                REP #$30        ; set A&X long
.381a39		68		pla		                PLA                     ; Get and throw-away the return address to the interrupt handler
.381a3a		2b		pld		                PLD                     ; Restore the registers that were present when the handler was invoked
.381a3b		ab		plb		                PLB
.381a3c		7a		ply		                PLY
.381a3d		fa		plx		                PLX
.381a3e		68		pla		                PLA
.381a3f		5c 08 10 00	jmp $001008	                JML BREAK               ; And go to the BRK handler directly to open the monitor
.381a43						SAVEKEY
.381a43		e2 20		sep #$20	                SEP #$20        ; set A short
.381a45		48		pha		                PHA                     ; Save the character
.381a46		a5 89		lda $0f89	                LDA KEYBOARD_LOCKS      ; Check the keyboard lock flags
.381a48		29 04		and #$04	                AND #KB_CAPS_LOCK       ; Is CAPS lock on?
.381a4a		f0 0d		beq $381a59	                BEQ no_caps             ; No... just use the character as-is
.381a4c		68		pla		                PLA                     ; Get the character back
.381a4d		c9 61		cmp #$61	                CMP #'a'                ; Is it < 'a'
.381a4f		90 09		bcc $381a5a	                BLT check_break         ; Yes: just use as-is
.381a51		c9 7b		cmp #$7b	                CMP #'z'+1              ; Is it > 'z'
.381a53		b0 05		bcs $381a5a	                BGE check_break         ; Yes: just us as-is
.381a55		29 df		and #$df	                AND #%11011111          ; Conver to upper case
.381a57		80 01		bra $381a5a	                BRA check_break
.381a59		68		pla		no_caps         PLA                     ; Restore the character
.381a5a		c9 00		cmp #$00	check_break     CMP #0
.381a5c		f0 18		beq $381a76	                BEQ done
.381a5e		c9 03		cmp #$03	                CMP #CHAR_CTRL_C        ; Is it CTRL-C?
.381a60		f0 15		beq $381a77	                BEQ flag_break          ; Yes: flag a break
.381a62		a6 8d		ldx $0f8d	no_break        LDX KEY_BUFFER_WPOS     ; So the Receive Character is saved in the Buffer
.381a64		e0 80 00	cpx #$0080	                CPX #KEY_BUFFER_SIZE    ; Make sure we haven't been overboard.
.381a67		b0 0d		bcs $381a76	                BCS done                ; Stop storing - An error should ensue here...
.381a69		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER,X
.381a6d		e8		inx		                INX
.381a6e		86 8d		stx $0f8d	                STX KEY_BUFFER_WPOS
.381a70		a9 00		lda #$00	                LDA #$00
.381a72		9f 00 0f 00	sta $000f00,x	                STA @lKEY_BUFFER, X       ; Store a EOL in the following location for good measure
.381a76		60		rts		done            RTS
.381a77						flag_break
.381a77		e2 20		sep #$20	                SEP #$20        ; set A short
.381a79		a9 80		lda #$80	                LDA #KB_CTRL_C          ; Flag that an interrupt key has been pressed
.381a7b		85 8a		sta $0f8a	                STA KEYFLAG             ; The interpreter should see this soon and throw a BREAK
.381a7d		60		rts		                RTS
.381a7e						KBD_GETCW
.381a7e		da		phx		                PHX
.381a7f		0b		phd		                PHD
.381a80		08		php		                PHP
.381a81		48		pha		                PHA             ; begin setdp macro
.381a82		08		php		                PHP
.381a83		c2 20		rep #$20	                REP #$20        ; set A long
.381a85		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381a88		5b		tcd		                TCD
.381a89		28		plp		                PLP
.381a8a		68		pla		                PLA             ; end setdp macro
.381a8b		e2 20		sep #$20	                SEP #$20        ; set A short
.381a8d		c2 10		rep #$10	                REP #$10        ; set X long
.381a8f		58		cli		                CLI                     ; Make sure interrupts can happen
.381a90		af 8a 0f 00	lda $000f8a	get_wait        LDA @lKEYFLAG           ; Check the keyboard control flag
.381a94		29 60		and #$60	                AND #KB_CREDITS         ; Are the credits flagged?
.381a96		c9 60		cmp #$60	                CMP #KB_CREDITS
.381a98		d0 0a		bne $381aa4	                BNE check_buffer        ; No: check the key buffer
.381a9a		a9 00		lda #$00	                LDA #0                  ; Yes: clear the flags
.381a9c		8f 8a 0f 00	sta $000f8a	                STA @lKEYFLAG
.381aa0		22 bc 14 39	jsl $3914bc	                JSL SHOW_CREDITS        ; Then show the credits screen and wait for a key press
.381aa4		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381aa6		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381aa8		90 02		bcc $381aac	                BCC read_buff           ; Yes: a key is present, read it
.381aaa		80 e4		bra $381a90	                BRA get_wait            ; Otherwise, keep waiting
.381aac		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381aad		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381aaf		e8		inx		                INX                     ; And move to the next key
.381ab0		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ab2		f0 07		beq $381abb	                BEQ reset_indexes       ; Yes: return to 0 position
.381ab4		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ab6		58		cli		                CLI
.381ab7		28		plp		done            PLP                     ; Restore status and interrupts
.381ab8		2b		pld		                PLD
.381ab9		fa		plx		                PLX
.381aba		6b		rtl		                RTL
.381abb		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381abd		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381abf		80 f6		bra $381ab7	                BRA done
.381ac1						KBD_GETC
.381ac1		da		phx		                PHX
.381ac2		0b		phd		                PHD
.381ac3		08		php		                PHP
.381ac4		48		pha		                PHA             ; begin setdp macro
.381ac5		08		php		                PHP
.381ac6		c2 20		rep #$20	                REP #$20        ; set A long
.381ac8		a9 00 0f	lda #$0f00	                LDA #KEY_BUFFER         ; set DP to page 0
.381acb		5b		tcd		                TCD
.381acc		28		plp		                PLP
.381acd		68		pla		                PLA             ; end setdp macro
.381ace		e2 20		sep #$20	                SEP #$20        ; set A short
.381ad0		c2 10		rep #$10	                REP #$10        ; set X long
.381ad2		58		cli		                CLI                     ; Make sure interrupts can happen
.381ad3		a6 8b		ldx $0f8b	check_buffer    LDX KEY_BUFFER_RPOS     ; Is KEY_BUFFER_RPOS < KEY_BUFFER_WPOS
.381ad5		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS
.381ad7		90 05		bcc $381ade	                BCC read_buff           ; Yes: a key is present, read it
.381ad9		a9 00		lda #$00	                LDA #0                  ; If no key, return zero and set carry bit
.381adb		38		sec		                SEC
.381adc		80 0b		bra $381ae9	                BRA done
.381ade		78		sei		read_buff       SEI                     ; Don't interrupt me!
.381adf		b5 00		lda $0f00,x	                LDA KEY_BUFFER,X        ; Get the key
.381ae1		e8		inx		                INX                     ; And move to the next key
.381ae2		e4 8d		cpx $0f8d	                CPX KEY_BUFFER_WPOS     ; Did we just read the last key?
.381ae4		f0 07		beq $381aed	                BEQ reset_indexes       ; Yes: return to 0 position
.381ae6		86 8b		stx $0f8b	                STX KEY_BUFFER_RPOS     ; Otherwise: Update the read index
.381ae8		58		cli		                CLI
.381ae9		28		plp		done            PLP                     ; Restore status and interrupts
.381aea		2b		pld		                PLD
.381aeb		fa		plx		                PLX
.381aec		6b		rtl		                RTL
.381aed		64 8b		stz $0f8b	reset_indexes   STZ KEY_BUFFER_RPOS     ; Reset read index to the beginning
.381aef		64 8d		stz $0f8d	                STZ KEY_BUFFER_WPOS     ; Reset the write index to the beginning
.381af1		80 f6		bra $381ae9	                BRA done

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1064					    STATUS_PORT 	= $AF1064
=$af1060					    KBD_OUT_BUF 	= $AF1060
=$af1060					    KBD_INPT_BUF	= $AF1060
=$af1064					    KBD_CMD_BUF		= $AF1064
=$af1060					    KBD_DATA_BUF	= $AF1060
=$af1060					    PORT_A		    = $AF1060
=$af1061					    PORT_B			= $AF1061
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		48		pha		                PHA             ; begin setdp macro
.390416		08		php		                PHP
.390417		c2 20		rep #$20	                REP #$20        ; set A long
.390419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c		5b		tcd		                TCD
.39041d		28		plp		                PLP
.39041e		68		pla		                PLA             ; end setdp macro
.39041f		e2 20		sep #$20	                SEP #$20        ; set A short
.390421		a2 00 00	ldx #$0000	                LDX #$0000
.390424		a9 00		lda #$00	                LDA #$00
.390426						CLEAR_MEM_LOOP
.390426		95 00		sta $00,x	                STA $0000, X
.390428		e8		inx		                INX
.390429		e0 00 01	cpx #$0100	                CPX #$0100
.39042c		d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e		ea		nop		                NOP
.39042f		a9 ff		lda #$ff	                LDA #$FF
.390431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451		22 35 11 39	jsl $391135	                JSL INITRTC               ; Initialize the RTC
.390455		e2 20		sep #$20	                SEP #$20        ; set A short
.390457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.39045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.39045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.39045f		d0 1e		bne $39047f	                BNE SkipInitExpC100C200
.390461		c2 20		rep #$20	                REP #$20        ; set A long
.390463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.390467		c9 64 00	cmp #$0064	                CMP #$0064
.39046a		f0 0f		beq $39047b	                BEQ InitC100ESID
.39046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.39046f		d0 0e		bne $39047f	                BNE SkipInitExpC100C200
.390471		22 97 6c 39	jsl $396c97	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390475		22 a2 70 39	jsl $3970a2	                JSL INIT_EVID_VID_MODE
.390479		80 04		bra $39047f	                BRA SkipInitExpC100C200
.39047b						InitC100ESID:
.39047b		22 97 6c 39	jsl $396c97	                JSL SIMPLE_INIT_ETHERNET_CTRL
.39047f						SkipInitExpC100C200:
.39047f		c2 30		rep #$30	                REP #$30        ; set A&X long
.390481		a2 48 00	ldx #$0048	                LDX #72                   ; Set these by default, but they will be changed later by Init Vicky Text Mode
.390484		86 0f		stx $0f		                STX COLS_VISIBLE
.390486		a0 34 00	ldy #$0034	                LDY #52
.390489		84 13		sty $13		                STY LINES_VISIBLE
.39048b		a2 80 00	ldx #$0080	                LDX #128
.39048e		86 11		stx $11		                STX COLS_PER_LINE
.390490		a0 40 00	ldy #$0040	                LDY #64
.390493		84 15		sty $15		                STY LINES_MAX
.390495		a9 00 a0	lda #$a000	                LDA #<>SCREEN_PAGE0      ; store the initial screen buffer location
.390498		85 0c		sta $0c		                STA SCREENBEGIN
.39049a		85 17		sta $17		                STA CURSORPOS
.39049c		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR   ; Set the initial COLOR cursor position
.39049f		85 1f		sta $1f		                STA COLORPOS
.3904a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3904a3		a9 af		lda #$af	                LDA #`SCREEN_PAGE0
.3904a5		85 0e		sta $0e		                STA SCREENBEGIN+2
.3904a7		85 19		sta $19		                STA CURSORPOS+2
.3904a9		a9 af		lda #$af	                LDA #`CS_COLOR_MEM_PTR    ; Set the initial COLOR cursor position
.3904ab		85 21		sta $21		                STA COLORPOS+2
.3904ad		a9 00		lda #$00	                LDA #$00
.3904af		8d 87 0f	sta $0f87	                STA KEYBOARD_SC_FLG     ; Clear the Keyboard Flag
.3904b2		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.3904b4		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904b8		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.3904ba		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904be		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.3904c0		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904c4		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.3904c6		8f 00 f1 af	sta $aff100	                STA $AFF100
.3904ca		a9 ed		lda #$ed	                LDA #$ED                  ; Set the default text color to light gray on dark gray
.3904cc		85 1e		sta $1e		                STA CURCOLOR
.3904ce		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.3904d2		29 01		and #$01	                AND #$01
.3904d4		c9 01		cmp #$01	                CMP #$01
.3904d6		d0 14		bne $3904ec	                BNE Alreadyin640480Mode
.3904d8		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904dc		29 fc		and #$fc	                AND #$FC
.3904de		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904e2		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904e6		09 01		ora #$01	                ORA #$01
.3904e8		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904ec						Alreadyin640480Mode
.3904ec		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904f0		29 fc		and #$fc	                AND #$FC
.3904f2		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.3904f6		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904fa		c2 30		rep #$30	                REP #$30        ; set A&X long
.3904fc		22 b0 10 00	jsl $0010b0	                JSL INITSUPERIO
.390500		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.390504		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.390508		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT
.39050c		22 a1 0e 39	jsl $390ea1	                JSL INITMOUSEPOINTER
.390510		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.390514		a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.390517		22 2e 5a 39	jsl $395a2e	                JSL UART_SELECT
.39051b		22 9a 5a 39	jsl $395a9a	                JSL UART_INIT
.39051f		a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.390522		22 2e 5a 39	jsl $395a2e	                JSL UART_SELECT
.390526		22 9a 5a 39	jsl $395a9a	                JSL UART_INIT
.39052a		a9 00 00	lda #$0000	                LDA #0
.39052d		22 38 10 00	jsl $001038	                JSL SETIN
.390531		22 3c 10 00	jsl $00103c	                JSL SETOUT
.390535		c2 20		rep #$20	                REP #$20        ; set A long
.390537		48		pha		                PHA             ; begin setdp macro
.390538		08		php		                PHP
.390539		c2 20		rep #$20	                REP #$20        ; set A long
.39053b		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39053e		5b		tcd		                TCD
.39053f		28		plp		                PLP
.390540		68		pla		                PLA             ; end setdp macro
.390541		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD ;
.390545		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE;  // I Seperated them
.390549		e2 20		sep #$20	                SEP #$20        ; set A short
.39054b		c2 10		rep #$10	                REP #$10        ; set X long
.39054d		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.39054f		8f 00 f1 af	sta $aff100	                STA $AFF100
.390553		a9 bf		lda #$bf	                LDA #$BF ; Channel Two - No Atteniation
.390555		8f 00 f1 af	sta $aff100	                STA $AFF100
.390559		a9 df		lda #$df	                LDA #$DF ; Channel Two - No Atteniation
.39055b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39055f		a9 ff		lda #$ff	                LDA #$FF ; Channel Two - No Atteniation
.390561		8f 00 f1 af	sta $aff100	                STA $AFF100
.390565		a9 83		lda #$83	                LDA #$83 ; Channel Zero - No Atteniation
.390567		8f 00 f1 af	sta $aff100	                STA $AFF100
.39056b		a9 12		lda #$12	                LDA #$12 ; Channel Zero - No Atteniation
.39056d		8f 00 f1 af	sta $aff100	                STA $AFF100
.390571		a9 90		lda #$90	                LDA #$90 ; Channel One - No Atteniation
.390573		8f 00 f1 af	sta $aff100	                STA $AFF100
.390577		a2 00 40	ldx #$4000	                LDX #16384      ; 400ms
.39057a		22 4a 14 39	jsl $39144a	                JSL ILOOP_MS
.39057e		a9 9f		lda #$9f	                LDA #$9F ; Channel Two - No Atteniation
.390580		8f 00 f1 af	sta $aff100	                STA $AFF100
.390584		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.390585		e2 20		sep #$20	                SEP #$20        ; set A short
.390587		c2 10		rep #$10	                REP #$10        ; set X long
.390589		48		pha		                PHA             ; begin setdbr macro
.39058a		08		php		                PHP
.39058b		e2 20		sep #$20	                SEP #$20        ; set A short
.39058d		a9 39		lda #$39	                LDA #`greet_msg
.39058f		48		pha		                PHA
.390590		ab		plb		                PLB
.390591		28		plp		                PLP
.390592		68		pla		                PLA             ; end setdbr macro
.390593		a2 00 00	ldx #$0000	                LDX #0
.390596		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.39059a		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.39059e		e8		inx		                INX
.39059f		e0 00 10	cpx #$1000	                CPX #$1000
.3905a2		d0 f2		bne $390596	                BNE jmpcopy
.3905a4						retry_boot
.3905a4		22 b3 42 39	jsl $3942b3	                JSL DOS_INIT          ; Initialize the "disc operating system"
.3905a8		22 00 00 3e	jsl $3e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.3905ac		22 40 0b 39	jsl $390b40	                JSL ICLRSCREEN  ; Clear Screen and Set a standard color in Color Memory
.3905b0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3905b2		a2 00 00	ldx #$0000	                LDX #0
.3905b5		a0 00 00	ldy #$0000	                LDY #0
.3905b8		22 19 0a 39	jsl $390a19	                JSL ILOCATE
.3905bc						greet
.3905bc		48		pha		                PHA             ; begin setdbr macro
.3905bd		08		php		                PHP
.3905be		e2 20		sep #$20	                SEP #$20        ; set A short
.3905c0		a9 39		lda #$39	                LDA #`greet_msg
.3905c2		48		pha		                PHA
.3905c3		ab		plb		                PLB
.3905c4		28		plp		                PLP
.3905c5		68		pla		                PLA             ; end setdbr macro
.3905c6		a2 03 72	ldx #$7203	                LDX #<>greet_msg
.3905c9		22 7c 07 39	jsl $39077c	                JSL IPRINT       ; print the first line
.3905cd		22 8b 0b 39	jsl $390b8b	                JSL ICOLORFLAG  ; This is to set the Color Memory for the TExt Logo
.3905d1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3905d3		a9 ff fe	lda #$feff	                LDA #STACK_END    ; We are the root, let's make sure from now on, that we start clean
.3905d6		1b		tcs		                TAS
.3905d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3905d9		c2 10		rep #$10	                REP #$10        ; set X long
.3905db		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.3905df		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.3905e1		f0 10		beq $3905f3	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.3905e3		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.3905e5		f0 1e		beq $390605	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.3905e7		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.3905e9		f0 62		beq $39064d	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.3905eb		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.3905ed		f0 1d		beq $39060c	                BEQ BOOTSDC           ; Yes: boot via the SDC
.3905ef		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.3905f1		f0 39		beq $39062c	                BEQ BOOTIDE           ; Yes: boot via the IDE
.3905f3		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.3905f7		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.3905f9		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.3905fb		f0 2f		beq $39062c	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.3905fd		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.3905ff		f0 0b		beq $39060c	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.390601		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.390603		f0 48		beq $39064d	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390605						IRESTORE
.390605		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390609		ea		nop		CREDIT_LOCK     NOP
.39060a		80 fd		bra $390609	                BRA CREDIT_LOCK
.39060c		a2 b3 76	ldx #$76b3	BOOTSDC         LDX #<>sdc_boot
.39060f		22 7c 07 39	jsl $39077c	                JSL IPRINT
.390613		e2 20		sep #$20	                SEP #$20        ; set A short
.390615		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.390617		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39061b		22 85 43 39	jsl $394385	                JSL DOS_MOUNT         ; Mount the SDC
.39061f		90 06		bcc $390627	                BCC sdc_error         ; Print an error message if couldn't get anything
.390621		22 40 45 39	jsl $394540	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.390625		80 de		bra $390605	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.390627		a2 37 76	ldx #$7637	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.39062a		80 40		bra $39066c	                BRA PR_BOOT_ERROR
.39062c		a2 ca 76	ldx #$76ca	BOOTIDE         LDX #<>ide_boot
.39062f		22 7c 07 39	jsl $39077c	                JSL IPRINT
.390633		e2 20		sep #$20	                SEP #$20        ; set A short
.390635		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.390637		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39063b		22 85 43 39	jsl $394385	                JSL DOS_MOUNT         ; Mount the IDE drive
.39063f		90 07		bcc $390648	                BCC hdc_error         ; Print an error message if couldn't get anything
.390641		22 40 45 39	jsl $394540	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.390645		82 bd ff	brl $390605	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.390648		a2 53 76	ldx #$7653	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.39064b		80 1f		bra $39066c	                BRA PR_BOOT_ERROR
.39064d		a2 9c 76	ldx #$769c	BOOTFLOPPY      LDX #<>fdc_boot
.390650		22 7c 07 39	jsl $39077c	                JSL IPRINT
.390654		e2 20		sep #$20	                SEP #$20        ; set A short
.390656		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.390658		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.39065c		22 2a 66 39	jsl $39662a	                JSL FDC_MOUNT         ; Mount the floppy drive
.390660		90 07		bcc $390669	                BCC fdc_error         ; Print an error message if couldn't get anything
.390662		22 40 45 39	jsl $394540	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.390666		82 9c ff	brl $390605	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390669		a2 76 76	ldx #$7676	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.39066c		22 7c 07 39	jsl $39077c	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.390670		a2 12 76	ldx #$7612	                LDX #<>boot_retry     ; Print the boot retry prompt
.390673		22 7c 07 39	jsl $39077c	                JSL IPRINT
.390677		22 16 07 39	jsl $390716	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.39067b		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.39067d		d0 03		bne $390682	                BNE chk_r_lc
.39067f		82 22 ff	brl $3905a4	                BRL retry_boot        ; Yes: retry the boot sequence
.390682		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.390684		d0 03		bne $390689	                BNE chk_b_lc
.390686		82 1b ff	brl $3905a4	                BRL retry_boot
.390689		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.39068b		d0 03		bne $390690	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.39068d		82 75 ff	brl $390605	                BRL BOOTBASIC
.390690						chk_b_lc_not:
.390690		c9 42		cmp #$42	                CMP #'B'
.390692		d0 03		bne $390697	                BNE chk_b_lc_not0
.390694		82 6e ff	brl $390605	                BRL BOOTBASIC
.390697						chk_b_lc_not0:
.390697		80 de		bra $390677	                BRA boot_wait_key     ; No: keep waiting
.390699						IBREAK
.390699		48		pha		                PHA             ; begin setdp macro
.39069a		08		php		                PHP
.39069b		c2 20		rep #$20	                REP #$20        ; set A long
.39069d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3906a0		5b		tcd		                TCD
.3906a1		28		plp		                PLP
.3906a2		68		pla		                PLA             ; end setdp macro
.3906a3		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.3906a4		8f 48 02 00	sta $000248	                STA CPUY
.3906a8		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.3906a9		8f 46 02 00	sta $000246	                STA CPUX
.3906ad		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.3906ae		8f 44 02 00	sta $000244	                STA CPUA
.3906b2		68		pla		                PLA
.3906b3		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.3906b7		e2 20		sep #$20	                SEP #$20        ; set A short
.3906b9		68		pla		                PLA             ; Pull Data Bank (8 bits)
.3906ba		8f 4e 02 00	sta $00024e	                STA CPUDBR
.3906be		68		pla		                PLA             ; Pull Flags (8 bits)
.3906bf		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.3906c3		c2 20		rep #$20	                REP #$20        ; set A long
.3906c5		68		pla		                PLA             ; Pull Program Counter (16 bits)
.3906c6		8f 40 02 00	sta $000240	                STA CPUPC
.3906ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3906cc		68		pla		                PLA             ; Pull Program Bank (8 bits)
.3906cd		8f 42 02 00	sta $000242	                STA CPUPBR
.3906d1		c2 20		rep #$20	                REP #$20        ; set A long
.3906d3		3b		tsc		                TSA             ; Get the stack
.3906d4		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.3906d8		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.3906db		1b		tcs		                TAS
.3906dc		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.3906e0						IREADY
.3906e0		48		pha		                PHA             ; begin setdbr macro
.3906e1		08		php		                PHP
.3906e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3906e4		a9 39		lda #$39	                LDA #`ready_msg
.3906e6		48		pha		                PHA
.3906e7		ab		plb		                PLB
.3906e8		28		plp		                PLP
.3906e9		68		pla		                PLA             ; end setdbr macro
.3906ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3906ec		a2 e5 76	ldx #$76e5	                LDX #<>ready_msg
.3906ef		22 7c 07 39	jsl $39077c	                JSL IPRINT
.3906f3						IREADYWAIT
.3906f3		22 0d 07 39	jsl $39070d	                JSL IGETCHE
.3906f7		80 fa		bra $3906f3	                BRA IREADYWAIT
.3906f9		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.3906fa		db		stp		IRETURN         STP
.3906fb		08		php		ISETIN          PHP
.3906fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3906fe		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390702		28		plp		                PLP
.390703		6b		rtl		                RTL
.390704		08		php		ISETOUT         PHP
.390705		e2 20		sep #$20	                SEP #$20        ; set A short
.390707		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39070b		28		plp		                PLP
.39070c		6b		rtl		                RTL
.39070d		22 16 07 39	jsl $390716	IGETCHE         JSL IGETCHW
.390711		22 9c 07 39	jsl $39079c	                JSL IPUTC
.390715		6b		rtl		                RTL
.390716						IGETCHW
.390716		da		phx		                PHX
.390717		5a		phy		                PHY
.390718		8b		phb		                PHB
.390719		0b		phd		                PHD
.39071a		08		php		                PHP
.39071b		e2 20		sep #$20	                SEP #$20        ; set A short
.39071d		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390721		f0 1b		beq $39073e	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390723		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390725		f0 0d		beq $390734	                BEQ getc_uart       ; Yes: handle reading from the UART
.390727		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390729		f0 09		beq $390734	                BEQ getc_uart       ; Yes: handle reading from the UART
.39072b		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.39072d		28		plp		                PLP
.39072e		38		sec		                SEC                 ; And return carry set
.39072f		2b		pld		                PLD
.390730		ab		plb		                PLB
.390731		7a		ply		                PLY
.390732		fa		plx		                PLX
.390733		6b		rtl		                RTL
.390734		22 2e 5a 39	jsl $395a2e	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390738		22 e2 5a 39	jsl $395ae2	                JSL UART_GETC       ; Get the charater from the COM port
.39073c		80 04		bra $390742	                BRA done
.39073e		22 7e 1a 38	jsl $381a7e	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.390742		28		plp		done            PLP
.390743		18		clc		                CLC                 ; Return carry clear for valid data
.390744		2b		pld		                PLD
.390745		ab		plb		                PLB
.390746		7a		ply		                PLY
.390747		fa		plx		                PLX
.390748		6b		rtl		                RTL
.390749						IGETCH
.390749		da		phx		                PHX
.39074a		5a		phy		                PHY
.39074b		8b		phb		                PHB
.39074c		0b		phd		                PHD
.39074d		08		php		                PHP
.39074e		e2 20		sep #$20	                SEP #$20        ; set A short
.390750		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.390754		f0 1b		beq $390771	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.390756		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390758		f0 0d		beq $390767	                BEQ getc_uart       ; Yes: handle reading from the UART
.39075a		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39075c		f0 09		beq $390767	                BEQ getc_uart       ; Yes: handle reading from the UART
.39075e		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.390760		28		plp		                PLP
.390761		38		sec		                SEC                 ; And return carry set
.390762		2b		pld		                PLD
.390763		ab		plb		                PLB
.390764		7a		ply		                PLY
.390765		fa		plx		                PLX
.390766		6b		rtl		                RTL
.390767		22 2e 5a 39	jsl $395a2e	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.39076b		22 e2 5a 39	jsl $395ae2	                JSL UART_GETC       ; Get the charater from the COM port
.39076f		80 04		bra $390775	                BRA done
.390771		22 c1 1a 38	jsl $381ac1	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390775		28		plp		done            PLP
.390776		18		clc		                CLC                 ; Return carry clear for valid data
.390777		2b		pld		                PLD
.390778		ab		plb		                PLB
.390779		7a		ply		                PLY
.39077a		fa		plx		                PLX
.39077b		6b		rtl		                RTL
.39077c		22 85 07 39	jsl $390785	IPRINT          JSL IPUTS
.390780		22 15 09 39	jsl $390915	                JSL IPRINTCR
.390784		6b		rtl		                RTL
.390785		48		pha		IPUTS           PHA
.390786		08		php		                PHP
.390787		e2 20		sep #$20	                SEP #$20        ; set A short
.390789		c2 10		rep #$10	                REP #$10        ; set X long
.39078b		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.39078e		f0 08		beq $390798	                BEQ iputs_done
.390790		22 9c 07 39	jsl $39079c	iputs2          JSL IPUTC
.390794		e8		inx		iputs3          INX
.390795		4c 8b 07	jmp $39078b	                JMP iputs1
.390798		e8		inx		iputs_done      INX
.390799		28		plp		                PLP
.39079a		68		pla		                PLA
.39079b		6b		rtl		                RTL
.39079c						IPUTC
.39079c		da		phx		                PHX
.39079d		5a		phy		                PHY
.39079e		0b		phd		                PHD
.39079f		8b		phb		                PHB
.3907a0		08		php		                PHP                 ; stash the flags (we'll be changing M)
.3907a1		48		pha		                PHA             ; begin setdp macro
.3907a2		08		php		                PHP
.3907a3		c2 20		rep #$20	                REP #$20        ; set A long
.3907a5		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907a8		5b		tcd		                TCD
.3907a9		28		plp		                PLP
.3907aa		68		pla		                PLA             ; end setdp macro
.3907ab		48		pha		                PHA             ; begin setdbr macro
.3907ac		08		php		                PHP
.3907ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3907af		a9 00		lda #$00	                LDA #0
.3907b1		48		pha		                PHA
.3907b2		ab		plb		                PLB
.3907b3		28		plp		                PLP
.3907b4		68		pla		                PLA             ; end setdbr macro
.3907b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3907b7		c2 10		rep #$10	                REP #$10        ; set X long
.3907b9		48		pha		                PHA                 ; Save the character to print
.3907ba		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.3907be		f0 16		beq $3907d6	                BEQ putc_screen     ; If it's 0: print to the screen
.3907c0		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907c2		f0 07		beq $3907cb	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907c4		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907c6		f0 03		beq $3907cb	                BEQ putc_uart       ; Yes: handle printing to the UART
.3907c8		68		pla		                PLA                 ; Otherwise, just exit
.3907c9		80 57		bra $390822	                BRA done
.3907cb		22 2e 5a 39	jsl $395a2e	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.3907cf		68		pla		                PLA                 ; Recover the character to send
.3907d0		22 03 5b 39	jsl $395b03	                JSL UART_PUTC       ; Send the character
.3907d4		80 4c		bra $390822	                BRA done
.3907d6		68		pla		putc_screen     PLA                 ; Get the character to print
.3907d7		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.3907d9		f0 69		beq $390844	                BEQ go_down
.3907db		c9 20		cmp #$20	                CMP #$20
.3907dd		90 19		bcc $3907f8	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.3907df		c9 7f		cmp #$7f	                CMP #$7F
.3907e1		f0 45		beq $390828	                BEQ do_del
.3907e3		b0 02		bcs $3907e7	                BCS check_A0        ; [$20..$7E]: print it
.3907e5		80 31		bra $390818	                BRA printc
.3907e7		c9 a0		cmp #$a0	check_A0        CMP #$A0
.3907e9		90 02		bcc $3907ed	                BCC check_ctrl1
.3907eb		80 2b		bra $390818	                BRA printc          ; [$A0..$FF]: print it
.3907ed		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.3907ef		f0 53		beq $390844	                BEQ go_down         ; ... move the cursor down one row
.3907f1		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.3907f3		f0 61		beq $390856	                BEQ go_left         ; ... move the cursor left one column
.3907f5		4c 22 08	jmp $390822	                JMP done
.3907f8		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.3907fa		f0 69		beq $390865	                BEQ do_TAB          ; ... move to the next TAB stop
.3907fc		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.3907fe		f0 34		beq $390834	                BEQ backspace       ; ... move the cursor back and replace with a space
.390800		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.390802		f0 3a		beq $39083e	                BEQ do_cr           ; ... move cursor down and to the first column
.390804		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.390806		f0 42		beq $39084a	                BEQ go_up           ; ... move the cursor up one row
.390808		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.39080a		f0 44		beq $390850	                BEQ go_right        ; ... move the cursor right one column
.39080c		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.39080e		f0 1e		beq $39082e	                BEQ do_ins          ; ... insert a space
.390810		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.390812		f0 48		beq $39085c	                BEQ go_sol          ; ... move the cursor to the start of the line
.390814		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.390816		f0 74		beq $39088c	                BEQ go_eol          ; ... move the cursor to the end of the line
.390818		87 17		sta [$17]	printc          STA [CURSORPOS]     ; Save the character on the screen
.39081a		a5 1e		lda $1e		                LDA CURCOLOR        ; Set the color based on CURCOLOR
.39081c		87 1f		sta [$1f]	                STA [COLORPOS]
.39081e		22 75 09 39	jsl $390975	                JSL ICSRRIGHT       ; And advance the cursor
.390822		28		plp		done            PLP
.390823		ab		plb		                PLB
.390824		2b		pld		                PLD
.390825		7a		ply		                PLY
.390826		fa		plx		                PLX
.390827		6b		rtl		                RTL
.390828		22 b9 08 39	jsl $3908b9	do_del          JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39082c		80 f4		bra $390822	                BRA done
.39082e		22 dd 08 39	jsl $3908dd	do_ins          JSL SCRSHIFTLR      ; Shift the current line right one space from the cursor
.390832		80 ee		bra $390822	                BRA done
.390834		22 a8 09 39	jsl $3909a8	backspace       JSL ICSRLEFT
.390838		22 b9 08 39	jsl $3908b9	                JSL SCRSHIFTLL      ; Shift the current line left one space into the cursor
.39083c		80 e4		bra $390822	                BRA done
.39083e		22 15 09 39	jsl $390915	do_cr           JSL IPRINTCR        ; Move the cursor to the beginning of the next line
.390842		80 de		bra $390822	                BRA done
.390844		22 f4 09 39	jsl $3909f4	go_down         JSL ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.390848		80 d8		bra $390822	                BRA done
.39084a		22 ce 09 39	jsl $3909ce	go_up           JSL ICSRUP          ; Move the cursor up one line
.39084e		80 d2		bra $390822	                BRA done
.390850		22 75 09 39	jsl $390975	go_right        JSL ICSRRIGHT       ; Move the cursor right one column
.390854		80 cc		bra $390822	                BRA done
.390856		22 a8 09 39	jsl $3909a8	go_left         JSL ICSRLEFT        ; Move the cursor left one column
.39085a		80 c6		bra $390822	                BRA done
.39085c						go_sol
.39085c		c2 20		rep #$20	                REP #$20        ; set A long
.39085e		a2 00 00	ldx #$0000	                LDX #0
.390861		a4 1c		ldy $1c		                LDY CURSORY
.390863		80 21		bra $390886	                BRA do_locate
.390865						do_TAB
.390865		c2 20		rep #$20	                REP #$20        ; set A long
.390867		a5 1a		lda $1a		                LDA CURSORX         ; Get the current column
.390869		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.39086c		18		clc		                CLC
.39086d		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.390870		aa		tax		                TAX
.390871		a4 1c		ldy $1c		                LDY CURSORY
.390873		e2 20		sep #$20	                SEP #$20        ; set A short
.390875		e4 0f		cpx $0f		set_xy          CPX COLS_VISIBLE    ; Check if we're still on screen horizontally
.390877		90 04		bcc $39087d	                BCC check_row       ; Yes: check the row
.390879		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.39087c		c8		iny		                INY                 ; ... and the next row
.39087d		c4 13		cpy $13		check_row       CPY LINES_VISIBLE   ; Check if we're still on the screen vertically
.39087f		90 05		bcc $390886	                BCC do_locate       ; Yes: reposition the cursor
.390881		22 65 0a 39	jsl $390a65	                JSL ISCROLLUP       ; No: scroll the screen
.390885		88		dey		                DEY                 ; And set the row to the last one
.390886		22 19 0a 39	jsl $390a19	do_locate       JSL ILOCATE         ; Set the cursor position
.39088a		80 96		bra $390822	                BRA done
.39088c		a6 0f		ldx $0f		go_eol          LDX COLS_VISIBLE    ; Move the cursor to the right most column
.39088e		ca		dex		                DEX
.39088f		a4 1c		ldy $1c		                LDY CURSORY
.390891		22 19 0a 39	jsl $390a19	                JSL ILOCATE
.390895		e2 20		sep #$20	                SEP #$20        ; set A short
.390897		a7 17		lda [$17]	eol_loop        LDA [CURSORPOS]     ; Get the character under the cursor
.390899		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.39089b		d0 0b		bne $3908a8	                BNE eol_done        ; No: exit the loop
.39089d		22 a8 09 39	jsl $3909a8	                JSL ICSRLEFT        ; Yes: move to the left
.3908a1		a6 1a		ldx $1a		                LDX CURSORX         ; Are we at column 0?
.3908a3		d0 f2		bne $390897	                BNE eol_loop        ; No: try again
.3908a5		82 7a ff	brl $390822	                BRL done            ; Yes: we're done
.3908a8		a6 1a		ldx $1a		eol_done        LDX CURSORX         ; Check the column
.3908aa		e8		inx		                INX
.3908ab		e4 0f		cpx $0f		                CPX COLS_VISIBLE    ; Is it the right most?
.3908ad		d0 03		bne $3908b2	                BNE eol_right
.3908af		82 70 ff	brl $390822	                BRL done            ; Yes: we're done
.3908b2		22 75 09 39	jsl $390975	eol_right       JSL ICSRRIGHT       ; No: move right one column
.3908b6		82 69 ff	brl $390822	                BRL done
.3908b9		da		phx		SCRSHIFTLL      PHX
.3908ba		5a		phy		                PHY
.3908bb		48		pha		                PHA
.3908bc		0b		phd		                PHD
.3908bd		08		php		                PHP
.3908be		48		pha		                PHA             ; begin setdp macro
.3908bf		08		php		                PHP
.3908c0		c2 20		rep #$20	                REP #$20        ; set A long
.3908c2		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908c5		5b		tcd		                TCD
.3908c6		28		plp		                PLP
.3908c7		68		pla		                PLA             ; end setdp macro
.3908c8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ca		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.3908cc		a8		tay		                TAY                 ; Set it as the destination
.3908cd		aa		tax		                TAX
.3908ce		e8		inx		                INX                 ; And set the next cell as the source
.3908cf		18		clc		                CLC                 ; Calculate the length of the block to move
.3908d0		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3908d2		e5 1a		sbc $1a		                SBC CURSORX
.3908d4		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.3908d7		28		plp		                PLP
.3908d8		2b		pld		                PLD
.3908d9		68		pla		                PLA
.3908da		7a		ply		                PLY
.3908db		fa		plx		                PLX
.3908dc		6b		rtl		                RTL
.3908dd		da		phx		SCRSHIFTLR      PHX
.3908de		48		pha		                PHA
.3908df		0b		phd		                PHD
.3908e0		08		php		                PHP
.3908e1		48		pha		                PHA             ; begin setdp macro
.3908e2		08		php		                PHP
.3908e3		c2 20		rep #$20	                REP #$20        ; set A long
.3908e5		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3908e8		5b		tcd		                TCD
.3908e9		28		plp		                PLP
.3908ea		68		pla		                PLA             ; end setdp macro
.3908eb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ed		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3908ef		1a		inc a		                INC A
.3908f0		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3908f2		b0 1b		bcs $39090f	                BGE done            ; Yes: just skip the whole thing
.3908f4		38		sec		                SEC                 ; Calculate the length of the block to move
.3908f5		a5 0f		lda $0f		                LDA COLS_VISIBLE
.3908f7		e5 1a		sbc $1a		                SBC CURSORX
.3908f9		1a		inc a		                INC A
.3908fa		18		clc		                CLC
.3908fb		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.3908fd		3a		dec a		                DEC A
.3908fe		a8		tay		                TAY                 ; Make it the destination
.3908ff		3a		dec a		                DEC A               ; Move to the previous column
.390900		aa		tax		                TAX                 ; Make it the source
.390901		38		sec		                SEC                 ; Calculate the length of the block to move
.390902		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390904		e5 1a		sbc $1a		                SBC CURSORX
.390906		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.390909		e2 20		sep #$20	                SEP #$20        ; set A short
.39090b		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.39090d		87 17		sta [$17]	                STA [CURSORPOS]
.39090f		28		plp		done            PLP
.390910		2b		pld		                PLD
.390911		68		pla		                PLA
.390912		fa		plx		                PLX
.390913		6b		rtl		                RTL
.390914						IPUTB
.390914		6b		rtl		                RTL
.390915						IPRINTCR
.390915		da		phx		                PHX
.390916		5a		phy		                PHY
.390917		8b		phb		                PHB
.390918		0b		phd		                PHD
.390919		08		php		                PHP
.39091a		48		pha		                PHA             ; begin setdbr macro
.39091b		08		php		                PHP
.39091c		e2 20		sep #$20	                SEP #$20        ; set A short
.39091e		a9 00		lda #$00	                LDA #0
.390920		48		pha		                PHA
.390921		ab		plb		                PLB
.390922		28		plp		                PLP
.390923		68		pla		                PLA             ; end setdbr macro
.390924		48		pha		                PHA             ; begin setdp macro
.390925		08		php		                PHP
.390926		c2 20		rep #$20	                REP #$20        ; set A long
.390928		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39092b		5b		tcd		                TCD
.39092c		28		plp		                PLP
.39092d		68		pla		                PLA             ; end setdp macro
.39092e		e2 20		sep #$20	                SEP #$20        ; set A short
.390930		c2 10		rep #$10	                REP #$10        ; set X long
.390932		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.390936		f0 1c		beq $390954	                BEQ scr_printcr
.390938		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39093a		f0 06		beq $390942	                BEQ uart_printcr    ; Yes: handle printing to the UART
.39093c		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39093e		f0 02		beq $390942	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390940		80 1c		bra $39095e	                BRA done
.390942		22 2e 5a 39	jsl $395a2e	uart_printcr    JSL UART_SELECT
.390946		a9 0d		lda #$0d	                LDA #CHAR_CR
.390948		22 9c 07 39	jsl $39079c	                JSL IPUTC
.39094c		a9 0a		lda #$0a	                LDA #CHAR_LF
.39094e		22 9c 07 39	jsl $39079c	                JSL IPUTC
.390952		80 0a		bra $39095e	                BRA done
.390954		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.390957		a4 1c		ldy $1c		                LDY CURSORY
.390959		c8		iny		                INY
.39095a		22 19 0a 39	jsl $390a19	                JSL ILOCATE
.39095e		28		plp		done            PLP
.39095f		2b		pld		                PLD
.390960		ab		plb		                PLB
.390961		7a		ply		                PLY
.390962		fa		plx		                PLX
.390963		6b		rtl		                RTL
.390964		da		phx		ICSRHOME        PHX
.390965		5a		phy		                PHY
.390966		08		php		                PHP
.390967		a2 00 00	ldx #$0000	                LDX #0
.39096a		a0 00 00	ldy #$0000	                LDY #0
.39096d		22 19 0a 39	jsl $390a19	                JSL ILOCATE
.390971		28		plp		                PLP
.390972		7a		ply		                PLY
.390973		fa		plx		                PLX
.390974		6b		rtl		                RTL
.390975		da		phx		ICSRRIGHT       PHX
.390976		5a		phy		                PHY
.390977		48		pha		                PHA
.390978		0b		phd		                PHD
.390979		08		php		                PHP
.39097a		c2 20		rep #$20	                REP #$20        ; set A long
.39097c		c2 10		rep #$10	                REP #$10        ; set X long
.39097e		48		pha		                PHA             ; begin setdp macro
.39097f		08		php		                PHP
.390980		c2 20		rep #$20	                REP #$20        ; set A long
.390982		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390985		5b		tcd		                TCD
.390986		28		plp		                PLP
.390987		68		pla		                PLA             ; end setdp macro
.390988		a6 1a		ldx $1a		                LDX CURSORX           ; Get the new column
.39098a		e8		inx		                INX
.39098b		a4 1c		ldy $1c		                LDY CURSORY           ; Get the current row
.39098d		e4 0f		cpx $0f		                CPX COLS_VISIBLE      ; Are we off screen?
.39098f		90 0d		bcc $39099e	                BCC icsrright_nowrap  ; No: just set the position
.390991		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.390994		c8		iny		                INY                   ; And move to the next row
.390995		c4 13		cpy $13		                CPY LINES_VISIBLE     ; Are we still off screen?
.390997		90 05		bcc $39099e	                BCC icsrright_nowrap  ; No: just set the position
.390999		88		dey		                DEY                   ; Yes: lock to the last row
.39099a		22 65 0a 39	jsl $390a65	                JSL ISCROLLUP         ; But scroll the screen up
.39099e						icsrright_nowrap
.39099e		22 19 0a 39	jsl $390a19	                JSL ILOCATE           ; Set the cursor position
.3909a2		28		plp		                PLP
.3909a3		2b		pld		                PLD
.3909a4		68		pla		                PLA
.3909a5		7a		ply		                PLY
.3909a6		fa		plx		                PLX
.3909a7		6b		rtl		                RTL
.3909a8						ICSRLEFT
.3909a8		da		phx		                PHX
.3909a9		5a		phy		                PHY
.3909aa		48		pha		                PHA
.3909ab		0b		phd		                PHD
.3909ac		08		php		                PHP
.3909ad		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909af		48		pha		                PHA             ; begin setdp macro
.3909b0		08		php		                PHP
.3909b1		c2 20		rep #$20	                REP #$20        ; set A long
.3909b3		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909b6		5b		tcd		                TCD
.3909b7		28		plp		                PLP
.3909b8		68		pla		                PLA             ; end setdp macro
.3909b9		a5 1a		lda $1a		                LDA CURSORX
.3909bb		f0 0b		beq $3909c8	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.3909bd		a6 1a		ldx $1a		                LDX CURSORX
.3909bf		ca		dex		                DEX
.3909c0		86 1a		stx $1a		                STX CURSORX
.3909c2		a4 1c		ldy $1c		                LDY CURSORY
.3909c4		22 19 0a 39	jsl $390a19	                JSL ILOCATE
.3909c8						icsrleft_done_already_zero
.3909c8		28		plp		                PLP
.3909c9		2b		pld		                PLD
.3909ca		68		pla		                PLA
.3909cb		7a		ply		                PLY
.3909cc		fa		plx		                PLX
.3909cd		6b		rtl		                RTL
.3909ce						ICSRUP
.3909ce		da		phx		                PHX
.3909cf		5a		phy		                PHY
.3909d0		48		pha		                PHA
.3909d1		0b		phd		                PHD
.3909d2		08		php		                PHP
.3909d3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909d5		48		pha		                PHA             ; begin setdp macro
.3909d6		08		php		                PHP
.3909d7		c2 20		rep #$20	                REP #$20        ; set A long
.3909d9		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.3909dc		5b		tcd		                TCD
.3909dd		28		plp		                PLP
.3909de		68		pla		                PLA             ; end setdp macro
.3909df		a5 1c		lda $1c		                LDA CURSORY
.3909e1		f0 0b		beq $3909ee	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.3909e3		a4 1c		ldy $1c		                LDY CURSORY
.3909e5		88		dey		                DEY
.3909e6		84 1c		sty $1c		                STY CURSORY
.3909e8		a6 1a		ldx $1a		                LDX CURSORX
.3909ea		22 19 0a 39	jsl $390a19	                JSL ILOCATE
.3909ee						isrup_done_already_zero
.3909ee		28		plp		                PLP
.3909ef		2b		pld		                PLD
.3909f0		68		pla		                PLA
.3909f1		7a		ply		                PLY
.3909f2		fa		plx		                PLX
.3909f3		6b		rtl		                RTL
.3909f4		da		phx		ICSRDOWN        PHX
.3909f5		5a		phy		                PHY
.3909f6		0b		phd		                PHD
.3909f7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909f9		48		pha		                PHA             ; begin setdp macro
.3909fa		08		php		                PHP
.3909fb		c2 20		rep #$20	                REP #$20        ; set A long
.3909fd		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.390a00		5b		tcd		                TCD
.390a01		28		plp		                PLP
.390a02		68		pla		                PLA             ; end setdp macro
.390a03		a6 1a		ldx $1a		                LDX CURSORX                 ; Get the current column
.390a05		a4 1c		ldy $1c		                LDY CURSORY                 ; Get the new row
.390a07		c8		iny		                INY
.390a08		c4 13		cpy $13		                CPY LINES_VISIBLE           ; Check to see if we're off screen
.390a0a		90 05		bcc $390a11	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.390a0c		88		dey		                DEY                         ; Yes: go back to the last row
.390a0d		22 65 0a 39	jsl $390a65	                JSL ISCROLLUP               ; But scroll the screen up
.390a11						icsrdown_noscroll
.390a11		22 19 0a 39	jsl $390a19	                JSL ILOCATE                 ; And set the cursor position
.390a15		2b		pld		                PLD
.390a16		7a		ply		                PLY
.390a17		fa		plx		                PLX
.390a18		6b		rtl		                RTL
.390a19		48		pha		ILOCATE         PHA
.390a1a		0b		phd		                PHD
.390a1b		08		php		                PHP
.390a1c		48		pha		                PHA             ; begin setdp macro
.390a1d		08		php		                PHP
.390a1e		c2 20		rep #$20	                REP #$20        ; set A long
.390a20		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a23		5b		tcd		                TCD
.390a24		28		plp		                PLP
.390a25		68		pla		                PLA             ; end setdp macro
.390a26		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a28						ilocate_scroll
.390a28		c4 13		cpy $13		                CPY LINES_VISIBLE
.390a2a		90 07		bcc $390a33	                BCC ilocate_scrolldone
.390a2c		22 65 0a 39	jsl $390a65	                JSL ISCROLLUP
.390a30		88		dey		                DEY
.390a31		80 f5		bra $390a28	                BRA ilocate_scroll
.390a33						ilocate_scrolldone
.390a33		86 1a		stx $1a		                STX CURSORX
.390a35		84 1c		sty $1c		                STY CURSORY
.390a37		a5 0c		lda $0c		                LDA SCREENBEGIN
.390a39						ilocate_row
.390a39		c0 00 00	cpy #$0000	                CPY #$0
.390a3c		f0 08		beq $390a46	                BEQ ilocate_right
.390a3e		18		clc		ilocate_down    CLC
.390a3f		65 11		adc $11		                ADC COLS_PER_LINE
.390a41		88		dey		                DEY
.390a42		f0 02		beq $390a46	                BEQ ilocate_right
.390a44		80 f8		bra $390a3e	                BRA ilocate_down
.390a46		18		clc		ilocate_right   CLC
.390a47		65 1a		adc $1a		                ADC CURSORX             ; move the cursor right X columns
.390a49		85 17		sta $17		                STA CURSORPOS
.390a4b		a4 1c		ldy $1c		                LDY CURSORY
.390a4d		98		tya		                TYA
.390a4e		8f 16 00 af	sta $af0016	                STA @lVKY_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.390a52		8a		txa		                TXA
.390a53		8f 14 00 af	sta $af0014	                STA @lVKY_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.390a57		c2 20		rep #$20	                REP #$20        ; set A long
.390a59		18		clc		                CLC
.390a5a		a5 17		lda $17		                LDA CURSORPOS
.390a5c		69 00 20	adc #$2000	                ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.390a5f		85 1f		sta $1f		                STA COLORPOS
.390a61		28		plp		ilocate_done    PLP
.390a62		2b		pld		                PLD
.390a63		68		pla		                PLA
.390a64		6b		rtl		                RTL
.390a65						ISCROLLUP
.390a65		48		pha		                PHA
.390a66		da		phx		                PHX
.390a67		5a		phy		                PHY
.390a68		8b		phb		                PHB
.390a69		0b		phd		                PHD
.390a6a		08		php		                PHP
.390a6b		48		pha		                PHA             ; begin setdp macro
.390a6c		08		php		                PHP
.390a6d		c2 20		rep #$20	                REP #$20        ; set A long
.390a6f		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390a72		5b		tcd		                TCD
.390a73		28		plp		                PLP
.390a74		68		pla		                PLA             ; end setdp macro
.390a75		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a77		a5 11		lda $11		                LDA COLS_PER_LINE
.390a79		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.390a7d		a5 13		lda $13		                LDA LINES_VISIBLE
.390a7f		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.390a83		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.390a87		85 00		sta $00		                STA TMPPTR1
.390a89		18		clc		                CLC
.390a8a		a9 00 a0	lda #$a000	                LDA #$A000
.390a8d		a8		tay		                TAY
.390a8e		65 11		adc $11		                ADC COLS_PER_LINE
.390a90		aa		tax		                TAX
.390a91		a5 00		lda $00		                LDA TMPPTR1
.390a93		54 af af	mvn $af,$af	                MVN $AF,$AF
.390a96		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a98		18		clc		                CLC
.390a99		a9 00 c0	lda #$c000	                LDA #$C000
.390a9c		a8		tay		                TAY
.390a9d		65 11		adc $11		                ADC COLS_PER_LINE
.390a9f		aa		tax		                TAX
.390aa0		a5 00		lda $00		                LDA TMPPTR1
.390aa2		54 af af	mvn $af,$af	                MVN $AF,$AF
.390aa5		a5 00		lda $00		                LDA TMPPTR1
.390aa7		48		pha		                PHA
.390aa8		18		clc		                CLC
.390aa9		69 00 a0	adc #$a000	                ADC #<>CS_TEXT_MEM_PTR
.390aac		85 00		sta $00		                STA TMPPTR1
.390aae		a0 00 00	ldy #$0000	                LDY #0
.390ab1		a9 20 00	lda #$0020	                LDA #' '
.390ab4		97 00		sta [$00],y	clr_text        STA [TMPPTR1],Y
.390ab6		c8		iny		                INY
.390ab7		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390ab9		d0 f9		bne $390ab4	                BNE clr_text
.390abb		68		pla		                PLA
.390abc		18		clc		                CLC
.390abd		69 00 c0	adc #$c000	                ADC #<>CS_COLOR_MEM_PTR
.390ac0		85 00		sta $00		                STA TMPPTR1
.390ac2		a0 00 00	ldy #$0000	                LDY #0
.390ac5		a5 1e		lda $1e		                LDA CURCOLOR
.390ac7		97 00		sta [$00],y	clr_color       STA [TMPPTR1],Y
.390ac9		c8		iny		                INY
.390aca		c4 0f		cpy $0f		                CPY COLS_VISIBLE
.390acc		d0 f9		bne $390ac7	                BNE clr_color
.390ace		28		plp		                PLP
.390acf		2b		pld		                PLD
.390ad0		ab		plb		                PLB
.390ad1		7a		ply		                PLY
.390ad2		fa		plx		                PLX
.390ad3		68		pla		                PLA
.390ad4		6b		rtl		                RTL
.390ad5		08		php		IPRINTH         PHP
.390ad6		48		pha		                PHA
.390ad7						iprinth1
.390ad7		e2 20		sep #$20	                SEP #$20        ; set A short
.390ad9		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390adc		4a		lsr a		                LSR
.390add		4a		lsr a		                LSR
.390ade		4a		lsr a		                LSR
.390adf		4a		lsr a		                LSR
.390ae0		22 2f 0b 39	jsl $390b2f	                JSL iprint_digit
.390ae4		bd 00 00	lda $0000,x	                LDA #0,b,x
.390ae7		22 2f 0b 39	jsl $390b2f	                JSL iprint_digit
.390aeb		ca		dex		                DEX
.390aec		88		dey		                DEY
.390aed		d0 e8		bne $390ad7	                BNE iprinth1
.390aef		68		pla		                PLA
.390af0		28		plp		                PLP
.390af1		6b		rtl		                RTL
.390af2						IPRINTAH
.390af2		48		pha		                PHA
.390af3		08		php		                PHP
.390af4		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390af8		08		php		                PHP                   ; Get the processor status into A
.390af9		e2 20		sep #$20	                SEP #$20        ; set A short
.390afb		c2 10		rep #$10	                REP #$10        ; set X long
.390afd		68		pla		                PLA
.390afe		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.390b00		c9 20		cmp #$20	                CMP #%00100000
.390b02		f0 14		beq $390b18	                BEQ eight_bit
.390b04		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.390b08		4a		lsr a		                LSR A
.390b09		4a		lsr a		                LSR A
.390b0a		4a		lsr a		                LSR A
.390b0b		4a		lsr a		                LSR A
.390b0c		22 2f 0b 39	jsl $390b2f	                JSL iprint_digit      ; And print it
.390b10		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.390b14		22 2f 0b 39	jsl $390b2f	                JSL iprint_digit      ; And print it
.390b18		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.390b1c		4a		lsr a		                LSR A
.390b1d		4a		lsr a		                LSR A
.390b1e		4a		lsr a		                LSR A
.390b1f		4a		lsr a		                LSR A
.390b20		22 2f 0b 39	jsl $390b2f	                JSL iprint_digit      ; And print it
.390b24		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.390b28		22 2f 0b 39	jsl $390b2f	                JSL iprint_digit      ; And print it
.390b2c		28		plp		                PLP
.390b2d		68		pla		                PLA
.390b2e		6b		rtl		                RTL
.390b2f		da		phx		iprint_digit    PHX
.390b30		c2 20		rep #$20	                REP #$20        ; set A long
.390b32		29 0f 00	and #$000f	                AND #$0F
.390b35		aa		tax		                TAX
.390b36		bf f9 76 39	lda $3976f9,x	                LDA hex_digits,X
.390b3a		22 9c 07 39	jsl $39079c	                JSL IPUTC       ; Print the digit
.390b3e		fa		plx		                PLX
.390b3f		6b		rtl		                RTL
.390b40		48		pha		ICLRSCREEN	    PHA
.390b41		da		phx		                PHX
.390b42		08		php		                PHP
.390b43		e2 20		sep #$20	                SEP #$20        ; set A short
.390b45		c2 10		rep #$10	                REP #$10        ; set X long
.390b47		a2 00 00	ldx #$0000	                LDX #$0000		          ; Only Use One Pointer
.390b4a		a9 20		lda #$20	                LDA #$20		            ; Fill the Entire Screen with Space
.390b4c		9f 00 a0 af	sta $afa000,x	iclearloop0	STA CS_TEXT_MEM_PTR, x	;
.390b50		e8		inx		                inx
.390b51		e0 00 20	cpx #$2000	                cpx #$2000
.390b54		d0 f6		bne $390b4c	                bne iclearloop0
.390b56		a2 00 00	ldx #$0000	                LDX	#$0000		          ; Only Use One Pointer
.390b59		af 1e 00 00	lda $00001e	                LDA @lCURCOLOR          ; Fill the Color Memory with the current color
.390b5d		9f 00 c0 af	sta $afc000,x	iclearloop1     STA CS_COLOR_MEM_PTR, x	;
.390b61		e8		inx		                inx
.390b62		e0 00 20	cpx #$2000	                cpx #$2000
.390b65		d0 f6		bne $390b5d	                bne iclearloop1
.390b67		28		plp		                PLP
.390b68		fa		plx		                PLX
.390b69		68		pla		                PLA
.390b6a		6b		rtl		                RTL
.390b6b						COPYBYTES42
.390b6b		08		php		                PHP
.390b6c		0b		phd		                PHD
.390b6d		48		pha		                PHA             ; begin setdp macro
.390b6e		08		php		                PHP
.390b6f		c2 20		rep #$20	                REP #$20        ; set A long
.390b71		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.390b74		5b		tcd		                TCD
.390b75		28		plp		                PLP
.390b76		68		pla		                PLA             ; end setdp macro
.390b77		e2 20		sep #$20	                SEP #$20        ; set A short
.390b79		c2 10		rep #$10	                REP #$10        ; set X long
.390b7b		a0 00 00	ldy #$0000	                LDY #0
.390b7e		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.390b80		97 04		sta [$04],y	                STA [TMPPTR2],Y
.390b82		c8		iny		                INY
.390b83		c0 2a 00	cpy #$002a	                CPY #42
.390b86		d0 f6		bne $390b7e	                BNE copy_loop
.390b88		2b		pld		                PLD
.390b89		28		plp		                PLP
.390b8a		60		rts		                RTS
.390b8b						ICOLORFLAG
.390b8b		48		pha		                PHA
.390b8c		da		phx		                PHX
.390b8d		5a		phy		                PHY
.390b8e		08		php		                PHP
.390b8f		8b		phb		                PHB
.390b90		0b		phd		                PHD
.390b91		48		pha		                PHA             ; begin setdp macro
.390b92		08		php		                PHP
.390b93		c2 20		rep #$20	                REP #$20        ; set A long
.390b95		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390b98		5b		tcd		                TCD
.390b99		28		plp		                PLP
.390b9a		68		pla		                PLA             ; end setdp macro
.390b9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b9d		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.390ba0		85 04		sta $04		                STA TMPPTR2
.390ba2		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390ba5		85 06		sta $06		                STA TMPPTR2+2
.390ba7		a9 56 73	lda #$7356	                LDA #<>greet_clr_line1
.390baa		85 00		sta $00		                STA TMPPTR1
.390bac		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390baf		85 02		sta $02		                STA TMPPTR1+2
.390bb1		20 6b 0b	jsr $390b6b	                JSR COPYBYTES42
.390bb4		18		clc		                CLC
.390bb5		a5 04		lda $04		                LDA TMPPTR2
.390bb7		65 11		adc $11		                ADC COLS_PER_LINE
.390bb9		85 04		sta $04		                STA TMPPTR2
.390bbb		a9 80 73	lda #$7380	                LDA #<>greet_clr_line2
.390bbe		85 00		sta $00		                STA TMPPTR1
.390bc0		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390bc3		85 02		sta $02		                STA TMPPTR1+2
.390bc5		20 6b 0b	jsr $390b6b	                JSR COPYBYTES42
.390bc8		18		clc		                CLC
.390bc9		a5 04		lda $04		                LDA TMPPTR2
.390bcb		65 11		adc $11		                ADC COLS_PER_LINE
.390bcd		85 04		sta $04		                STA TMPPTR2
.390bcf		a9 aa 73	lda #$73aa	                LDA #<>greet_clr_line3
.390bd2		85 00		sta $00		                STA TMPPTR1
.390bd4		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390bd7		85 02		sta $02		                STA TMPPTR1+2
.390bd9		20 6b 0b	jsr $390b6b	                JSR COPYBYTES42
.390bdc		18		clc		                CLC
.390bdd		a5 04		lda $04		                LDA TMPPTR2
.390bdf		65 11		adc $11		                ADC COLS_PER_LINE
.390be1		85 04		sta $04		                STA TMPPTR2
.390be3		a9 d4 73	lda #$73d4	                LDA #<>greet_clr_line4
.390be6		85 00		sta $00		                STA TMPPTR1
.390be8		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390beb		85 02		sta $02		                STA TMPPTR1+2
.390bed		20 6b 0b	jsr $390b6b	                JSR COPYBYTES42
.390bf0		18		clc		                CLC
.390bf1		a5 04		lda $04		                LDA TMPPTR2
.390bf3		65 11		adc $11		                ADC COLS_PER_LINE
.390bf5		85 04		sta $04		                STA TMPPTR2
.390bf7		a9 fe 73	lda #$73fe	                LDA #<>greet_clr_line5
.390bfa		85 00		sta $00		                STA TMPPTR1
.390bfc		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390bff		85 02		sta $02		                STA TMPPTR1+2
.390c01		20 6b 0b	jsr $390b6b	                JSR COPYBYTES42
.390c04		2b		pld		                PLD
.390c05		ab		plb		                PLB
.390c06		28		plp		                PLP
.390c07		7a		ply		                PLY
.390c08		fa		plx		                PLX
.390c09		68		pla		                PLA
.390c0a		6b		rtl		                RTL
.390c0b		0b		phd		IINITCHLUT		  PHD
.390c0c		08		php		                PHP
.390c0d		48		pha		                PHA
.390c0e		da		phx		                PHX
.390c0f		e2 20		sep #$20	                SEP #$20        ; set A short
.390c11		e2 10		sep #$10	                SEP #$10        ; set X short
.390c13		a2 00		ldx #$00					        LDX	#$00
.390c15		bf 28 74 39	lda $397428,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data
.390c19		9f 40 1f af	sta $af1f40,x	                STA FG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c1d		e8		inx		                inx
.390c1e		e0 40		cpx #$40	                cpx #$40
.390c20		d0 f3		bne $390c15	                bne lutinitloop0
.390c22		a2 00		ldx #$00	                LDX	#$00
.390c24		bf 68 74 39	lda $397468,x	lutinitloop1	  LDA @lbg_color_lut,x		; get Local Data
.390c28		9f 80 1f af	sta $af1f80,x	                STA BG_CHAR_LUT_PTR,x	; Write in LUT Memory
.390c2c		e8		inx		                INX
.390c2d		e0 40		cpx #$40	                CPX #$40
.390c2f		d0 f3		bne $390c24	                bne lutinitloop1
.390c31		c2 20		rep #$20	                REP #$20        ; set A long
.390c33		c2 10		rep #$10	                REP #$10        ; set X long
.390c35		fa		plx		                PLX
.390c36		68		pla		                PLA
.390c37		28		plp		                PLP
.390c38		2b		pld		                PLD
.390c39		6b		rtl		                RTL
.390c3a						IINITGAMMATABLE
.390c3a		e2 20		sep #$20	                SEP #$20        ; set A short
.390c3c		c2 10		rep #$10	                REP #$10        ; set X long
.390c3e		a2 00 00	ldx #$0000	                ldx #$0000
.390c41		bf 00 7c 39	lda $397c00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390c45		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390c49		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.390c4d		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390c51		e8		inx		                inx
.390c52		e0 00 01	cpx #$0100	                cpx #$0100
.390c55		d0 ea		bne $390c41	                bne initgammaloop
.390c57		c2 30		rep #$30	                REP #$30        ; set A&X long
.390c59		6b		rtl		                RTL
.390c5a		48		pha		IINITALLLUT     PHA
.390c5b		da		phx		                PHX
.390c5c		a2 00 00	ldx #$0000	                LDX #$0000
.390c5f		e2 20		sep #$20	                SEP #$20        ; set A short
.390c61		a9 00		lda #$00	                LDA #$00
.390c63		85 0a		sta $0a		                STA $0A     ; Temp Location
.390c65						iinit_lut_loop
.390c65		86 02		stx $02		                STX $02
.390c67		a6 0a		ldx $0a		                LDX $0A
.390c69		bf 00 7b 39	lda $397b00,x	                LDA GAMMA_2_2_Tbl, x
.390c6d		49 55		eor #$55	                EOR  #$55
.390c6f		a6 02		ldx $02		                LDX $02
.390c71		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390c75		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390c79		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390c7d		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390c81		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390c85		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390c89		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390c8d		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390c91		e8		inx		                inx
.390c92		86 02		stx $02		                STX $02
.390c94		a6 0a		ldx $0a		                LDX $0A
.390c96		bf 00 7d 39	lda $397d00,x	                LDA RANDOM_LUT_Tbl, x
.390c9a		a6 02		ldx $02		                LDX $02
.390c9c		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ca0		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390ca4		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390ca8		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cac		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cb0		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390cb4		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390cb8		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390cbc		e8		inx		                inx
.390cbd		86 02		stx $02		                STX $02
.390cbf		a6 0a		ldx $0a		                LDX $0A
.390cc1		bf 00 7c 39	lda $397c00,x	                LDA GAMMA_1_8_Tbl, x
.390cc5		49 aa		eor #$aa	                EOR  #$AA
.390cc7		a6 02		ldx $02		                LDX $02
.390cc9		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390ccd		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cd1		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cd5		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cd9		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390cdd		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390ce1		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390ce5		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390ce9		e8		inx		                inx
.390cea		a9 ff		lda #$ff	                LDA #$FF
.390cec		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390cf0		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390cf4		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390cf8		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390cfc		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390d00		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390d04		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390d08		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390d0c		e6 0a		inc $0a		                inc $0A
.390d0e		e8		inx		                inx
.390d0f		e0 00 04	cpx #$0400	                cpx #$0400
.390d12		f0 03		beq $390d17	                beq iinit_lut_exit
.390d14		82 4e ff	brl $390c65	                brl iinit_lut_loop
.390d17						iinit_lut_exit
.390d17		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d19		fa		plx		                PLX
.390d1a		68		pla		                PLA
.390d1b		6b		rtl		                RTL
.390d1c						INITVKYTXTMODE_BYPASS_DPSW
.390d1c		48		pha		                PHA
.390d1d		08		php		                PHP
.390d1e		80 24		bra $390d44	                BRA WeNeed640480Here
.390d20						IINITVKYTXTMODE
.390d20		48		pha		                PHA
.390d21		08		php		                PHP
.390d22		e2 20		sep #$20	                SEP #$20        ; set A short
.390d24		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.390d28		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.390d2a		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.390d2c		f0 16		beq $390d44	                BEQ WeNeed640480Here
.390d2e		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d32		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390d34		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.390d36		f0 33		beq $390d6b	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.390d38		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390d3c		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.390d3e		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d42		80 27		bra $390d6b	                BRA INITVICKYMODEHIRES
.390d44						WeNeed640480Here:
.390d44		e2 20		sep #$20	                SEP #$20        ; set A short
.390d46		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390d4a		29 01		and #$01	                AND #$01
.390d4c		c9 01		cmp #$01	                CMP #$01
.390d4e		d0 15		bne $390d65	                BNE INITVICKYMODE
.390d50		a9 00		lda #$00	                LDA #$00
.390d52		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d56		ea		nop		                NOP
.390d57		ea		nop		                NOP
.390d58		ea		nop		                NOP
.390d59		ea		nop		                NOP
.390d5a		ea		nop		                NOP
.390d5b		a9 01		lda #$01	                LDA #$01
.390d5d		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390d61		ea		nop		                NOP
.390d62		ea		nop		                NOP
.390d63		ea		nop		                NOP
.390d64		ea		nop		                NOP
.390d65						INITVICKYMODE
.390d65		a9 00		lda #$00	                LDA #$00
.390d67		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.390d6b						INITVICKYMODEHIRES
.390d6b		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390d6d		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390d71		e2 20		sep #$20	                SEP #$20        ; set A short
.390d73		a9 20		lda #$20	                LDA #$20
.390d75		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390d79		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390d7d		a9 00		lda #$00	                LDA #$00
.390d7f		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390d83		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390d85		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390d89		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390d8b		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390d8f		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390d93		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d95		22 9c 0d 39	jsl $390d9c	                JSL ISETSIZES                     ; Calculate the size of the text screen
.390d99		28		plp		                PLP
.390d9a		68		pla		                PLA
.390d9b		6b		rtl		                RTL
.390d9c						ISETSIZES
.390d9c		48		pha		                PHA
.390d9d		da		phx		                PHX
.390d9e		5a		phy		                PHY
.390d9f		8b		phb		                PHB
.390da0		0b		phd		                PHD
.390da1		08		php		                PHP
.390da2		48		pha		                PHA             ; begin setdp macro
.390da3		08		php		                PHP
.390da4		c2 20		rep #$20	                REP #$20        ; set A long
.390da6		a9 00 00	lda #$0000	                LDA #<>BANK0_BEGIN         ; set DP to page 0
.390da9		5b		tcd		                TCD
.390daa		28		plp		                PLP
.390dab		68		pla		                PLA             ; end setdp macro
.390dac		48		pha		                PHA             ; begin setdbr macro
.390dad		08		php		                PHP
.390dae		e2 20		sep #$20	                SEP #$20        ; set A short
.390db0		a9 00		lda #$00	                LDA #0
.390db2		48		pha		                PHA
.390db3		ab		plb		                PLB
.390db4		28		plp		                PLP
.390db5		68		pla		                PLA             ; end setdbr macro
.390db6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.390db8		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390dbc		29 03		and #$03	                AND #$03                    ; Mask off the resolution bits
.390dbe		0a		asl a		                ASL A
.390dbf		aa		tax		                TAX                         ; Index to the col/line count in X
.390dc0		c2 20		rep #$20	                REP #$20        ; set A long
.390dc2		bf 3f 0e 39	lda $390e3f,x	                LDA cols_by_res,X           ; Get the number of columns
.390dc6		85 11		sta $11		                STA COLS_PER_LINE           ; This is how many columns there are per line in the memory
.390dc8		85 0f		sta $0f		                STA COLS_VISIBLE            ; This is how many would be visible with no border
.390dca		bf 47 0e 39	lda $390e47,x	                LDA lines_by_res,X          ; Get the number of lines
.390dce		85 15		sta $15		                STA LINES_MAX               ; This is the total number of lines in memory
.390dd0		85 13		sta $13		                STA LINES_VISIBLE           ; This is how many lines would be visible with no border
.390dd2		e2 20		sep #$20	                SEP #$20        ; set A short
.390dd4		af 04 00 af	lda $af0004	                LDA @l BORDER_CTRL_REG      ; Check to see if we have a border
.390dd8		89 01		bit #$01	                BIT #Border_Ctrl_Enable
.390dda		f0 5c		beq $390e38	                BEQ done                    ; No border... the sizes are correct now
.390ddc		af 08 00 af	lda $af0008	                LDA @l BORDER_X_SIZE        ; Get the horizontal border width
.390de0		29 3f		and #$3f	                AND #$3F
.390de2		89 03		bit #$03	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390de4		d0 04		bne $390dea	                BNE frac_width
.390de6		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390de7		4a		lsr a		                LSR A
.390de8		80 03		bra $390ded	                BRA store_width
.390dea		4a		lsr a		frac_width      LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390deb		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390dec		1a		inc a		                INC A
.390ded		85 00		sta $00		store_width     STA TMPPTR1
.390def		64 01		stz $01		                STZ TMPPTR1+1
.390df1		e2 20		sep #$20	                SEP #$20        ; set A short
.390df3		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390df7		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390df9		f0 04		beq $390dff	                BEQ adjust_width            ; No... just adjust the width of the screen
.390dfb		c2 20		rep #$20	                REP #$20        ; set A long
.390dfd		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390dff						adjust_width
.390dff		c2 20		rep #$20	                REP #$20        ; set A long
.390e01		38		sec		                SEC
.390e02		a5 11		lda $11		                LDA COLS_PER_LINE
.390e04		e5 00		sbc $00		                SBC TMPPTR1
.390e06		85 0f		sta $0f		                STA COLS_VISIBLE
.390e08		af 09 00 af	lda $af0009	                LDA @l BORDER_Y_SIZE        ; Get the horizontal border width
.390e0c		29 3f 00	and #$003f	                AND #$3F
.390e0f		89 03 00	bit #$0003	                BIT #$03                    ; Check the lower two bits... indicates a partial column is eaten
.390e12		d0 04		bne $390e18	                BNE frac_height
.390e14		4a		lsr a		                LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.390e15		4a		lsr a		                LSR A
.390e16		80 03		bra $390e1b	                BRA store_height
.390e18		4a		lsr a		frac_height     LSR A                       ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.390e19		4a		lsr a		                LSR A                       ; because a column is partially hidden
.390e1a		1a		inc a		                INC A
.390e1b		85 00		sta $00		store_height    STA TMPPTR1
.390e1d		64 01		stz $01		                STZ TMPPTR1+1
.390e1f		e2 20		sep #$20	                SEP #$20        ; set A short
.390e21		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H    ; Check if we're pixel doubling
.390e25		89 02		bit #$02	                BIT #Mstr_Ctrl_Video_Mode1
.390e27		f0 04		beq $390e2d	                BEQ adjust_height           ; No... just adjust the height of the screen
.390e29		c2 20		rep #$20	                REP #$20        ; set A long
.390e2b		46 00		lsr $00		                LSR TMPPTR1                 ; Yes... cut the adjustment in half
.390e2d						adjust_height
.390e2d		c2 20		rep #$20	                REP #$20        ; set A long
.390e2f		38		sec		                SEC
.390e30		a5 15		lda $15		                LDA LINES_MAX
.390e32		e5 00		sbc $00		                SBC TMPPTR1
.390e34		85 13		sta $13		                STA LINES_VISIBLE
.390e36		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e38		28		plp		done            PLP
.390e39		2b		pld		                PLD
.390e3a		ab		plb		                PLB
.390e3b		7a		ply		                PLY
.390e3c		fa		plx		                PLX
.390e3d		68		pla		                PLA
.390e3e		6b		rtl		                RTL
>390e3f		50 00 64 00 28 00 32 00		cols_by_res     .word 80,100,40,50
>390e47		3c 00 4b 00 1e 00 25 00		lines_by_res    .word 60,75,30,37
.390e4f						IINITVKYGRPMODE
.390e4f		48		pha		                PHA
.390e50		e2 20		sep #$20	                SEP #$20        ; set A short
.390e52		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e54		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390e58		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e5a		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390e5e		a9 c0		lda #$c0	                LDA #$C0
.390e60		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390e64		a9 00		lda #$00	                LDA #$00
.390e66		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390e6a		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390e6c		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390e70		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390e72		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390e76		a9 c0		lda #$c0	                LDA #$C0
.390e78		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390e7c		a9 00		lda #$00	                LDA #$00
.390e7e		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390e82		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e84		68		pla		                PLA
.390e85		6b		rtl		                RTL
.390e86						IINITTILEMODE
.390e86		6b		rtl		                RTL
.390e87		6b		rtl		INOP            RTL
.390e88						IINITFONTSET
.390e88		48		pha		                PHA
.390e89		da		phx		                PHX
.390e8a		5a		phy		                PHY
.390e8b		8b		phb		                PHB
.390e8c		08		php		                PHP
.390e8d		c2 30		rep #$30	                REP #$30        ; set A&X long
.390e8f		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390e92		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390e95		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390e98		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390e9b		28		plp		                PLP
.390e9c		ab		plb		                PLB
.390e9d		7a		ply		                PLY
.390e9e		fa		plx		                PLX
.390e9f		68		pla		                PLA
.390ea0		6b		rtl		                RTL
.390ea1						INITMOUSEPOINTER
.390ea1		e2 20		sep #$20	                SEP #$20        ; set A short
.390ea3		c2 10		rep #$10	                REP #$10        ; set X long
.390ea5		a2 00 00	ldx #$0000	                LDX #$0000
.390ea8						FILL_MOUSE_MARKER
.390ea8		bf 00 7e 39	lda $397e00,x	                LDA @lMOUSE_POINTER_PTR,X
.390eac		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390eb0		e8		inx		                INX
.390eb1		e0 00 01	cpx #$0100	                CPX #$0100
.390eb4		d0 f2		bne $390ea8	                BNE FILL_MOUSE_MARKER
.390eb6		ea		nop		                nop
.390eb7		a9 01		lda #$01	                LDA #$01
.390eb9		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390ebd		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ebf		6b		rtl		                RTL
.390ec0						IINITCURSOR
.390ec0		e2 20		sep #$20	                SEP #$20        ; set A short
.390ec2		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390ec4		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390ec8		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390eca		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390ece		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ed0		a9 00 00	lda #$0000	                LDA #$0000;
.390ed3		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390ed7		a9 06 00	lda #$0006	                LDA #$0006;
.390eda		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390ede		6b		rtl		                RTL
.390edf		0b		phd		IINITSUPERIO	  PHD
.390ee0		08		php		                PHP
.390ee1		48		pha		                PHA
.390ee2		e2 20		sep #$20	                SEP #$20        ; set A short
.390ee4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ee6		8f 23 11 af	sta $af1123	                STA GP10_REG
.390eea		af 23 11 af	lda $af1123	                LDA GP10_REG
.390eee		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ef0		8f 24 11 af	sta $af1124	                STA GP11_REG
.390ef4		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ef6		8f 25 11 af	sta $af1125	                STA GP12_REG
.390efa		a9 01		lda #$01	        	LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390efc		8f 26 11 af	sta $af1126	        	STA GP13_REG
.390f00		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390f02		8f 27 11 af	sta $af1127	        	STA GP14_REG
.390f06		a9 05		lda #$05	        	LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390f08		8f 28 11 af	sta $af1128	        	STA GP15_REG
.390f0c		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390f0e		8f 29 11 af	sta $af1129	        	STA GP16_REG
.390f12		a9 05		lda #$05	        	LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390f14		8f 2a 11 af	sta $af112a	        	STA GP17_REG
.390f18		a9 00		lda #$00	        	LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390f1a		8f 2b 11 af	sta $af112b	        	STA GP20_REG
.390f1e		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f20		8f 2f 11 af	sta $af112f			STA GP24_REG
.390f24		a9 05		lda #$05			LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390f26		8f 30 11 af	sta $af1130			STA GP25_REG
.390f2a		a9 84		lda #$84			LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390f2c		8f 31 11 af	sta $af1131			STA GP26_REG
.390f30		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390f32		8f 33 11 af	sta $af1133			STA GP30_REG
.390f36		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390f38		8f 34 11 af	sta $af1134			STA GP31_REG
.390f3c		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390f3e		8f 35 11 af	sta $af1135			STA GP32_REG
.390f42		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390f44		8f 36 11 af	sta $af1136			STA GP33_REG
.390f48		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390f4a		8f 37 11 af	sta $af1137			STA GP34_REG
.390f4e		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390f50		8f 38 11 af	sta $af1138			STA GP35_REG
.390f54		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390f56		8f 39 11 af	sta $af1139			STA GP36_REG
.390f5a		a9 01		lda #$01			LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390f5c		8f 3a 11 af	sta $af113a			STA GP37_REG
.390f60		a9 01		lda #$01			LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390f62		8f 3d 11 af	sta $af113d			STA GP42_REG
.390f66		a9 01		lda #$01			LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390f68		8f 3e 11 af	sta $af113e			STA GP43_REG
.390f6c		a9 05		lda #$05			LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390f6e		8f 3f 11 af	sta $af113f			STA GP50_REG
.390f72		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390f74		8f 40 11 af	sta $af1140	                STA GP51_REG
.390f78		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390f7a		8f 41 11 af	sta $af1141	                STA GP52_REG
.390f7e		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390f80		8f 42 11 af	sta $af1142	                STA GP53_REG
.390f84		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390f86		8f 43 11 af	sta $af1143	                STA GP54_REG
.390f8a		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390f8c		8f 44 11 af	sta $af1144	                STA GP55_REG
.390f90		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390f92		8f 45 11 af	sta $af1145	                STA GP56_REG
.390f96		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390f98		8f 46 11 af	sta $af1146	                STA GP57_REG
.390f9c		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.390f9e		8f 47 11 af	sta $af1147	                STA GP60_REG
.390fa2		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.390fa4		8f 48 11 af	sta $af1148	                STA GP61_REG
.390fa8		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390faa		8f 4b 11 af	sta $af114b	                STA GP1_REG
.390fae		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390fb0		8f 4c 11 af	sta $af114c	                STA GP2_REG
.390fb4		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390fb6		8f 4d 11 af	sta $af114d	                STA GP3_REG
.390fba		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390fbc		8f 4e 11 af	sta $af114e	                STA GP4_REG
.390fc0		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390fc2		8f 4f 11 af	sta $af114f	                STA GP5_REG
.390fc6		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390fc8		8f 50 11 af	sta $af1150	                STA GP6_REG
.390fcc		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390fce		8f 5d 11 af	sta $af115d	                STA LED1_REG
.390fd2		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390fd4		8f 5e 11 af	sta $af115e	                STA LED2_REG
.390fd8		c2 20		rep #$20	                REP #$20        ; set A long
.390fda		68		pla		                PLA
.390fdb		28		plp			        PLP
.390fdc		2b		pld				PLD
.390fdd		6b		rtl		                RTL
.390fde		0b		phd		IINITKEYBOARD	PHD
.390fdf		08		php				PHP
.390fe0		48		pha				PHA
.390fe1		da		phx				PHX
.390fe2		e2 20		sep #$20	                SEP #$20        ; set A short
.390fe4		c2 10		rep #$10	                REP #$10        ; set X long
.390fe6		18		clc		                CLC
.390fe7		20 7d 10	jsr $39107d	                JSR Poll_Inbuf ;
.390fea		a9 aa		lda #$aa			LDA #$AA			;Send self test command
.390fec		8f 64 10 af	sta $af1064			STA KBD_CMD_BUF
.390ff0		20 88 10	jsr $391088	                JSR Poll_Outbuf ;
.390ff3		af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF		;Check self test result
.390ff7		c9 55		cmp #$55	                CMP #$55
.390ff9		f0 03		beq $390ffe	                BEQ	passAAtest
.390ffb		82 72 00	brl $391070	                BRL initkb_loop_out
.390ffe						passAAtest
.390ffe		a9 ab		lda #$ab			LDA #$AB			;Send test Interface command
.391000		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391004		20 88 10	jsr $391088	                JSR Poll_Outbuf ;
.391007		af 60 10 af	lda $af1060			LDA KBD_OUT_BUF		;Display Interface test results
.39100b		c9 00		cmp #$00			CMP #$00			;Should be 00
.39100d		f0 03		beq $391012			BEQ	passABtest
.39100f		82 5e 00	brl $391070	                BRL initkb_loop_out
.391012						passABtest
.391012		a9 60		lda #$60	                LDA #$60            ; Send Command 0x60 so to Enable Interrupt
.391014		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.391018		20 7d 10	jsr $39107d	                JSR Poll_Inbuf ;
.39101b		a9 43		lda #$43	                LDA #%01000011      ; Enable Interrupt - Translation from CODE 2 to CODE 1 Scan code is enable
.39101d		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.391021		20 7d 10	jsr $39107d	                JSR Poll_Inbuf ;
.391024		a9 ff		lda #$ff	                LDA #$FF      ; Send Keyboard Reset command
.391026		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF
.39102a		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39102d		ca		dex		DLY_LOOP1       DEX
.39102e		ea		nop		                NOP
.39102f		ea		nop		                NOP
.391030		ea		nop		                NOP
.391031		ea		nop		                NOP
.391032		ea		nop		                NOP
.391033		ea		nop		                NOP
.391034		ea		nop		                NOP
.391035		ea		nop		                NOP
.391036		e0 00 00	cpx #$0000	                CPX #$0000
.391039		d0 f2		bne $39102d	                BNE DLY_LOOP1
.39103b		20 88 10	jsr $391088	                JSR Poll_Outbuf ;
.39103e		af 60 10 af	lda $af1060	                LDA KBD_OUT_BUF   ; Read Output Buffer
.391042						DO_CMD_F4_AGAIN
.391042		20 7d 10	jsr $39107d	                JSR Poll_Inbuf ;
.391045		a9 f4		lda #$f4					        LDA #$F4			; Enable the Keyboard
.391047		8f 60 10 af	sta $af1060					        STA KBD_DATA_BUF
.39104b		20 88 10	jsr $391088	                JSR Poll_Outbuf ;
.39104e		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.391052		c9 fa		cmp #$fa	                CMP #$FA
.391054		d0 ec		bne $391042	                BNE DO_CMD_F4_AGAIN
.391056		af 41 01 00	lda $000141	                LDA @lINT_PENDING_REG1  ; Read the Pending Register &
.39105a		29 01		and #$01	                AND #FNX1_INT00_KBD
.39105c		8f 41 01 00	sta $000141	                STA @lINT_PENDING_REG1  ; Writing it back will clear the Active Bit
.391060		af 4d 01 00	lda $00014d	                LDA @lINT_MASK_REG1
.391064		29 fe		and #$fe	                AND #~FNX1_INT00_KBD
.391066		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.39106a		a2 24 75	ldx #$7524	                LDX #<>Success_kb_init
.39106d		38		sec		                SEC
.39106e		b0 00		bcs $391070	                BCS InitKbSuccess
.391070						initkb_loop_out
.391070		22 7c 07 39	jsl $39077c	InitKbSuccess   JSL IPRINT       ; print Message
.391074		c2 20		rep #$20	                REP #$20        ; set A long
.391076		c2 10		rep #$10	                REP #$10        ; set X long
.391078		fa		plx		                PLX
.391079		68		pla		                PLA
.39107a		28		plp						        PLP
.39107b		2b		pld						        PLD
.39107c		6b		rtl		                RTL
.39107d						Poll_Inbuf
.39107d		af 64 10 af	lda $af1064	                LDA STATUS_PORT		; Load Status Byte
.391081		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.391083		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.391085		f0 f6		beq $39107d					        BEQ Poll_Inbuf
.391087		60		rts		                RTS
.391088						Poll_Outbuf
.391088		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.39108c		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.39108e		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.391090		d0 f6		bne $391088	                BNE Poll_Outbuf
.391092		60		rts		                RTS
.391093		0b		phd		IINITMOUSE      PHD
.391094		08		php						        PHP
.391095		48		pha						        PHA
.391096		da		phx						        PHX
.391097		e2 20		sep #$20	                SEP #$20        ; set A short
.391099		c2 10		rep #$10	                REP #$10        ; set X long
.39109b		18		clc		                CLC
.39109c		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.39109f						DO_CMD_A9_AGAIN
.39109f		20 7d 10	jsr $39107d	                JSR Poll_Inbuf
.3910a2		a9 a9		lda #$a9	                LDA #$A9          ; Tests second PS2 Channel
.3910a4		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF
.3910a8		20 22 11	jsr $391122	                JSR Poll_Outbuf_Mouse_TimeOut ;
.3910ab		af 60 10 af	lda $af1060					        LDA KBD_OUT_BUF		; Clear the Output buffer
.3910af		c9 00		cmp #$00	                CMP #$00
.3910b1		d0 ec		bne $39109f	                BNE DO_CMD_A9_AGAIN
.3910b3		a9 f6		lda #$f6	                LDA #$F6        ;Tell the mouse to use default settings
.3910b5		20 fc 10	jsr $3910fc	                JSR MOUSE_WRITE
.3910b8		20 0f 11	jsr $39110f	                JSR MOUSE_READ ;***
.3910bb		a9 e8		lda #$e8	                LDA #$E8
.3910bd		20 fc 10	jsr $3910fc	                JSR MOUSE_WRITE
.3910c0		20 0f 11	jsr $39110f	                JSR MOUSE_READ ;***
.3910c3		a9 00		lda #$00	                LDA #$00
.3910c5		20 fc 10	jsr $3910fc	                JSR MOUSE_WRITE
.3910c8		20 0f 11	jsr $39110f	                JSR MOUSE_READ ;***
.3910cb		a9 f4		lda #$f4	                LDA #$F4        ; Enable the Mouse
.3910cd		20 fc 10	jsr $3910fc	                JSR MOUSE_WRITE
.3910d0		20 0f 11	jsr $39110f	                JSR MOUSE_READ ;***
.3910d3		a9 00		lda #$00	                LDA #$00
.3910d5		85 e0		sta $e0		                STA MOUSE_PTR
.3910d7		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3910db		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.3910dd		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3910e1		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.3910e5		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.3910e7		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.3910eb		c2 10		rep #$10	                REP #$10        ; set X long
.3910ed		a2 36 75	ldx #$7536	                LDX #<>Success_ms_init
.3910f0		80 03		bra $3910f5	                BRA InitMsSuccess
.3910f2		a2 6d 75	ldx #$756d	initms_loop_out LDX #<>Failed_ms_init
.3910f5						InitMsSuccess
.3910f5		c2 20		rep #$20	                REP #$20        ; set A long
.3910f7		fa		plx		                PLX
.3910f8		68		pla		                PLA
.3910f9		28		plp				PLP
.3910fa		2b		pld				PLD
.3910fb		6b		rtl		                RTL
.3910fc						MOUSE_WRITE
.3910fc		48		pha		                PHA
.3910fd		20 7d 10	jsr $39107d	                JSR Poll_Inbuf    ; Test bit $01 (if 2, Full)
.391100		a9 d4		lda #$d4	                LDA #$D4
.391102		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF   ; KBD_CMD_BUF		= $AF1064
.391106		20 7d 10	jsr $39107d	                JSR Poll_Inbuf
.391109		68		pla		                PLA
.39110a		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF  ; KBD_DATA_BUF	= $AF1060
.39110e		60		rts		                RTS
.39110f						MOUSE_READ
.39110f		20 17 11	jsr $391117	                JSR Poll_Outbuf_Mouse   ; Test bit $01 (if 1, Full)
.391112		af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF  ; KBD_INPT_BUF	= $AF1060
.391116		60		rts		                RTS
.391117						Poll_Outbuf_Mouse
.391117		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.39111b		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.39111d		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.39111f		d0 f6		bne $391117	                BNE Poll_Outbuf_Mouse
.391121		60		rts		                RTS
.391122						Poll_Outbuf_Mouse_TimeOut
.391122		af 64 10 af	lda $af1064	                LDA STATUS_PORT
.391126		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.391128		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.39112a		f0 08		beq $391134	                BEQ Poll_OutbufWeAreDone
.39112c		ca		dex		                DEX
.39112d		e0 00 00	cpx #$0000	                CPX #$0000
.391130		d0 f0		bne $391122	                BNE Poll_Outbuf_Mouse_TimeOut
.391132		80 be		bra $3910f2	                BRA initms_loop_out
.391134						Poll_OutbufWeAreDone:
.391134		60		rts		                RTS
.391135		48		pha		INITRTC         PHA
.391136		08		php		                PHP
.391137		e2 20		sep #$20	                SEP #$20        ; set A short
.391139		a9 00		lda #$00	                LDA #0
.39113b		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.39113f		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.391143		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.391147		09 04		ora #$04	                ORA #%00000100
.391149		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.39114d		28		plp		                PLP
.39114e		68		pla		                PLA
.39114f		6b		rtl		                RTL
.391150		48		pha		IINITCODEC      PHA
.391151		08		php		                PHP
.391152		c2 20		rep #$20	                REP #$20        ; set A long
.391154		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.391157		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39115b		a9 01 00	lda #$0001	                LDA #$0001
.39115e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391162		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.391165		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.391168		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39116c		a9 01 00	lda #$0001	                LDA #$0001
.39116f		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391173		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.391176		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.391179		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39117d		a9 01 00	lda #$0001	                LDA #$0001
.391180		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391184		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.391187		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.39118a		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39118e		a9 01 00	lda #$0001	                LDA #$0001
.391191		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.391195		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.391198		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.39119b		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.39119f		a9 01 00	lda #$0001	                LDA #$0001
.3911a2		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911a6		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.3911a9		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.3911ac		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911b0		a9 01 00	lda #$0001	                LDA #$0001
.3911b3		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911b7		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.3911ba		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.3911bd		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911c1		a9 01 00	lda #$0001	                LDA #$0001
.3911c4		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911c8		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.3911cb		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.3911ce		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911d2		a9 01 00	lda #$0001	                LDA #$0001
.3911d5		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911d9		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.3911dc		28		plp		                PLP
.3911dd		68		pla		                PLA
.3911de		6b		rtl		                RTL
.3911df						IRESETCODEC
.3911df		c2 20		rep #$20	                REP #$20        ; set A long
.3911e1		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.3911e4		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.3911e8		a9 01 00	lda #$0001	                LDA #$0001
.3911eb		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.3911ef		20 f3 11	jsr $3911f3	                JSR CODEC_TRF_FINISHED
.3911f2		6b		rtl		                RTL
.3911f3						CODEC_TRF_FINISHED
.3911f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3911f5		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.3911f9		29 01		and #$01	                AND #$01
.3911fb		c9 01		cmp #$01	                CMP #$01
.3911fd		f0 f6		beq $3911f5	                BEQ CODEC_LOOP
.3911ff		c2 20		rep #$20	                REP #$20        ; set A long
.391201		60		rts		                RTS
.391202						IBM_FILL_SCREEN
.391202		c2 30		rep #$30	                REP #$30        ; set A&X long
.391204		a9 00 00	lda #$0000	                LDA #$0000
.391207		a2 00 00	ldx #$0000	                LDX #$0000
.39120a						BM_FILL_SCREEN_LOOPY
.39120a		a0 00 00	ldy #$0000	                LDY #$0000
.39120d		e2 20		sep #$20	                SEP #$20        ; set A short
.39120f						BM_FILL_SCREEN_LOOPX
.39120f		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.391211		c8		iny		                INY
.391212		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.391214		d0 f9		bne $39120f	                BNE BM_FILL_SCREEN_LOOPX
.391216		20 21 12	jsr $391221	                JSR BM_FILL_COMPUTE_Y_DST
.391219		e8		inx		                INX
.39121a		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.39121c		d0 ec		bne $39120a	                BNE BM_FILL_SCREEN_LOOPY
.39121e		c2 30		rep #$30	                REP #$30        ; set A&X long
.391220		6b		rtl		                RTL
.391221						BM_FILL_COMPUTE_Y_DST
.391221		c2 20		rep #$20	                REP #$20        ; set A long
.391223		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.391225		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391229		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.39122b		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.39122f		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.391232		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391236		a9 00 00	lda #$0000	                LDA #$0000
.391239		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.39123d		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391241		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391243		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391247		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391249		a9 00 00	lda #$0000	                LDA #$0000
.39124c		60		rts		                RTS
.39124d						IBMP_PARSER
.39124d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39124f		a0 00 00	ldy #$0000	                LDY #$0000
.391252		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.391254		c9 42 4d	cmp #$4d42	                CMP #$4D42
.391257		f0 03		beq $39125c	                BEQ IBMP_PARSER_CONT
.391259		82 04 01	brl $391360	                BRL BMP_PARSER_END_WITH_ERROR
.39125c						IBMP_PARSER_CONT
.39125c		a0 02 00	ldy #$0002	                LDY #$0002
.39125f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.391261		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.391265		a0 04 00	ldy #$0004	                LDY #$0004
.391268		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.39126a		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.39126e		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.391271		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.391275		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391279		18		clc		                CLC
.39127a		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.39127e		85 50		sta $50		                STA BMP_FILE_SIZE
.391280		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391284		85 52		sta $52		                STA BMP_FILE_SIZE+2
.391286		a0 12 00	ldy #$0012	                LDY #$0012
.391289		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.39128b		85 40		sta $40		                STA BMP_X_SIZE
.39128d		a0 16 00	ldy #$0016	                LDY #$0016
.391290		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391292		85 42		sta $42		                STA BMP_Y_SIZE
.391294		a0 2e 00	ldy #$002e	                LDY #$002E
.391297		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.391299		0a		asl a		                ASL A; Multiply by 2
.39129a		0a		asl a		                ASL A; Multiply by 2
.39129b		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.39129d		e0 00 00	cpx #$0000	                CPX #$0000
.3912a0		d0 05		bne $3912a7	                BNE BMP_LUT1_PICK
.3912a2		20 68 13	jsr $391368	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.3912a5		80 08		bra $3912af	                BRA DONE_TRANSFER_LUT;
.3912a7						  BMP_LUT1_PICK
.3912a7		e0 01 00	cpx #$0001	                CPX #$0001
.3912aa		d0 03		bne $3912af	                BNE BMP_LUT2_PICK
.3912ac		20 98 13	jsr $391398	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.3912af						  BMP_LUT2_PICK
.3912af						  DONE_TRANSFER_LUT
.3912af		a5 56		lda $56		                LDA BMP_POSITION_Y
.3912b1		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.3912b5		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.3912b7		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.3912bb		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.3912bf		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3912c3		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.3912c7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3912cb		a5 54		lda $54		                LDA BMP_POSITION_X
.3912cd		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.3912d1		a9 00 00	lda #$0000	                LDA #$0000
.3912d4		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.3912d8		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.3912dc		85 f0		sta $f0		                STA USER_TEMP
.3912de		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.3912e2		85 f2		sta $f2		                STA USER_TEMP+2
.3912e4		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.3912e6		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.3912ea		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.3912ec		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.3912f0		a5 f0		lda $f0		                LDA USER_TEMP
.3912f2		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.3912f6		a5 f2		lda $f2		                LDA USER_TEMP+2
.3912f8		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.3912fc		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.391300		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391302		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.391306		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391308		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.39130a		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.39130e		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.391310		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391314		a5 50		lda $50		                LDA BMP_FILE_SIZE
.391316		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.39131a		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.39131c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.391320		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391324		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391326		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.39132a		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.39132c		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.39132e		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.391332		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.391334		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.391338		18		clc		                CLC
.391339		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.39133b		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.39133e		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.391341		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.391345		a9 ff ff	lda #$ffff	                LDA #$FFFF
.391348		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.39134c		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.391350		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.391352		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.391356		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.391358		20 c8 13	jsr $3913c8	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.39135b		a2 ba 75	ldx #$75ba	                LDX #<>bmp_parser_msg0
.39135e		80 03		bra $391363	                BRA BMP_PARSER_END_NO_ERROR
.391360						BMP_PARSER_END_WITH_ERROR
.391360		a2 a6 75	ldx #$75a6	                LDX #<>bmp_parser_err0
.391363						BMP_PARSER_END_NO_ERROR
.391363		22 7c 07 39	jsl $39077c	                JSL IPRINT       ; print the first line
.391367		6b		rtl		                RTL
.391368						BMP_PARSER_UPDATE_LUT0
.391368		38		sec		                SEC
.391369		a0 7a 00	ldy #$007a	                LDY #$007A
.39136c		a2 00 00	ldx #$0000	                LDX #$0000
.39136f		e2 20		sep #$20	                SEP #$20        ; set A short
.391371						BMP_PARSER_UPDATE_LOOP
.391371		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.391373		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.391377		c8		iny		                INY
.391378		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.39137a		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.39137e		c8		iny		                INY
.39137f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.391381		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.391385		c8		iny		                INY
.391386		a9 80		lda #$80	                LDA #$80
.391388		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.39138c		c8		iny		                INY ; For the Alpha Value, nobody cares
.39138d		e8		inx		                INX
.39138e		e8		inx		                INX
.39138f		e8		inx		                INX
.391390		e8		inx		                INX
.391391		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.391393		d0 dc		bne $391371	                BNE BMP_PARSER_UPDATE_LOOP
.391395		c2 20		rep #$20	                REP #$20        ; set A long
.391397		60		rts		                RTS
.391398						BMP_PARSER_UPDATE_LUT1
.391398		38		sec		                SEC
.391399		a0 36 00	ldy #$0036	                LDY #$0036
.39139c		a2 00 00	ldx #$0000	                LDX #$0000
.39139f		e2 20		sep #$20	                SEP #$20        ; set A short
.3913a1						PALETTE_LUT1_LOOP
.3913a1		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.3913a3		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.3913a7		c8		iny		                INY
.3913a8		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.3913aa		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.3913ae		c8		iny		                INY
.3913af		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.3913b1		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.3913b5		c8		iny		                INY
.3913b6		a9 80		lda #$80	                LDA #$80
.3913b8		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.3913bc		c8		iny		                INY ; For the Alpha Value, nobody cares
.3913bd		e8		inx		                INX
.3913be		e8		inx		                INX
.3913bf		e8		inx		                INX
.3913c0		e8		inx		                INX
.3913c1		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.3913c3		d0 dc		bne $3913a1	                BNE PALETTE_LUT1_LOOP
.3913c5		c2 20		rep #$20	                REP #$20        ; set A long
.3913c7		60		rts		                RTS
.3913c8						BMP_PARSER_DMA_SHIT_OUT
.3913c8		a2 00 00	ldx #$0000	                LDX #$0000
.3913cb						BMP_PARSER_LOOPY
.3913cb		a0 00 00	ldy #$0000	                LDY #$0000
.3913ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3913d0						BMP_PARSER_LOOPX
.3913d0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.3913d2		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.3913d4		c8		iny		                INY
.3913d5		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.3913d7		d0 f7		bne $3913d0	                BNE BMP_PARSER_LOOPX
.3913d9		20 e5 13	jsr $3913e5	                JSR BMP_PARSER_COMPUTE_Y_SRC
.3913dc		20 00 14	jsr $391400	                JSR BMP_PARSER_COMPUTE_Y_DST
.3913df		e8		inx		                INX
.3913e0		e4 42		cpx $42		                CPX BMP_Y_SIZE
.3913e2		d0 e7		bne $3913cb	                BNE BMP_PARSER_LOOPY
.3913e4		60		rts		                RTS
.3913e5						BMP_PARSER_COMPUTE_Y_SRC
.3913e5		c2 20		rep #$20	                REP #$20        ; set A long
.3913e7		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.3913e9		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.3913ed		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.3913ef		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.3913f3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.3913f7		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.3913f9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.3913fd		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.3913ff		60		rts		                RTS
.391400						BMP_PARSER_COMPUTE_Y_DST
.391400		c2 20		rep #$20	                REP #$20        ; set A long
.391402		18		clc		                CLC
.391403		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.391405		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.391407		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.391409		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.39140b		69 00 00	adc #$0000	                ADC #$0000
.39140e		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.391410		60		rts		                RTS
.391411		ea		nop		ILOOP           NOP
.391412		ea		nop		                NOP
.391413		ea		nop		                NOP
.391414		ea		nop		                NOP
.391415		ea		nop		                NOP
.391416		ea		nop		                NOP
.391417		ea		nop		                NOP
.391418		ea		nop		                NOP
.391419		ea		nop		                NOP
.39141a		ea		nop		                NOP
.39141b		6b		rtl		                RTL
.39141c		22 11 14 39	jsl $391411	ILOOP_1         JSL ILOOP
.391420		22 11 14 39	jsl $391411	                JSL ILOOP
.391424		22 11 14 39	jsl $391411	                JSL ILOOP
.391428		22 11 14 39	jsl $391411	                JSL ILOOP
.39142c		22 11 14 39	jsl $391411	                JSL ILOOP
.391430		22 11 14 39	jsl $391411	                JSL ILOOP
.391434		22 11 14 39	jsl $391411	                JSL ILOOP
.391438		22 11 14 39	jsl $391411	                JSL ILOOP
.39143c		22 11 14 39	jsl $391411	                JSL ILOOP
.391440		22 11 14 39	jsl $391411	                JSL ILOOP
.391444		6b		rtl		                RTL
.391445		22 1c 14 39	jsl $39141c	ILOOP_1MS       JSL ILOOP_1
.391449		6b		rtl		                RTL
.39144a		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.39144d		f0 07		beq $391456	                BEQ LOOP_MS_END
.39144f		22 45 14 39	jsl $391445	                JSL ILOOP_1MS
.391453		ca		dex		                DEX
.391454		80 f4		bra $39144a	                BRA ILOOP_MS
.391456		6b		rtl		LOOP_MS_END     RTL
.391457						IDELAY
.391457		8b		phb		                PHB
.391458		08		php		                PHP
.391459		48		pha		                PHA             ; begin setdbr macro
.39145a		08		php		                PHP
.39145b		e2 20		sep #$20	                SEP #$20        ; set A short
.39145d		a9 00		lda #$00	                LDA #0
.39145f		48		pha		                PHA
.391460		ab		plb		                PLB
.391461		28		plp		                PLP
.391462		68		pla		                PLA             ; end setdbr macro
.391463		e2 20		sep #$20	                SEP #$20        ; set A short
.391465		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.391467		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39146b		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.39146f		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391471		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391475		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391477		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39147a		a9 00		lda #$00	                LDA #0
.39147c		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391480		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.391484		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.391488		c2 30		rep #$30	                REP #$30        ; set A&X long
.39148a		8a		txa		                TXA
.39148b		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.39148f		98		tya		                TYA
.391490		e2 20		sep #$20	                SEP #$20        ; set A short
.391492		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.391496		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.391498		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.39149c		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.39149e		cb		wai		loop            WAI                         ; Wait for an interrupt
.39149f		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.3914a2		f0 fa		beq $39149e	                BEQ loop                    ; Keep checking until it's set
.3914a4		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.3914a6		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.3914aa		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.3914ac		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.3914af		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.3914b3		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.3914b5		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.3914b9		28		plp		                PLP
.3914ba		ab		plb		                PLB
.3914bb		6b		rtl		                RTL
.3914bc						SHOW_CREDITS
.3914bc		48		pha		                PHA
.3914bd		da		phx		                PHX
.3914be		5a		phy		                PHY
.3914bf		08		php		                PHP
.3914c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3914c2		c2 10		rep #$10	                REP #$10        ; set X long
.3914c4		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.3914c8		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.3914ca		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3914ce		a2 00 00	ldx #$0000	                LDX #0
.3914d1		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.3914d5		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.3914d9		bf 00 18 3b	lda $3b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.3914dd		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.3914e1		e8		inx		                INX
.3914e2		e0 00 20	cpx #$2000	                CPX #128 * 64
.3914e5		d0 ea		bne $3914d1	                BNE credit_loop
.3914e7		22 16 07 39	jsl $390716	                JSL IGETCHW                     ; Wait for a keypress
.3914eb		22 40 0b 39	jsl $390b40	                JSL ICLRSCREEN                  ; Then clear the screen and return
.3914ef		22 64 09 39	jsl $390964	                JSL ICSRHOME                    ; Move cursor to the home position
.3914f3		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.3914f7		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.3914f9		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.3914fd		28		plp		                PLP
.3914fe		7a		ply		                PLY
.3914ff		fa		plx		                PLX
.391500		68		pla		                PLA
.391501		6b		rtl		                RTL
.391502		00		brk #		ISCINIT         BRK ;
.391503		00		brk #		IIOINIT         BRK ;
.391504		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391505		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391506		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391507		00		brk #		ICLOSE          BRK ; Close a channel
.391508		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391509		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.39150a		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.39150b		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39150c		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39150d		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39150e		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39150f		00		brk #		IPRINTF         BRK ; Print a float value
.391510		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.391511		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391512		00		brk #		IPUSHKEY        BRK ;
.391513		00		brk #		IPUSHKEYS       BRK ;
.391514		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391515		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391516		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>391517		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>39151f		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>39152f		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391537		12
>391538		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>391540		15
>391541		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>391547		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>39154c		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>391552		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>39155a		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>391568		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391570		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>39157e		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>391586		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>391594		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>39159c		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>3915aa		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>3915b2		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>3915c0		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>3915c8		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>3915d6		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>3915de		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>3915ec		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>3915f4		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>391602		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>39160a		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391618		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>391620		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>39162e		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391636		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>391644		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>39164c		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>39165a		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>391662		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391670		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>391678		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>391686		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>39168e		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>39169c		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>3916a4		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>3916b2		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>3916ba		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>3916c8		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>3916d0		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>3916de		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>3916e6		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>3916f4		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>3916fc		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>39170a		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>391712		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>391720		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391728		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391736		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39173e		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>39174c		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>391754		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>391762		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>39176a		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>391778		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391780		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>39178e		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>391796		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>3917a4		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>3917ac		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>3917ba		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>3917c2		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>3917d0		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>3917d8		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>3917e6		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>3917ee		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>3917fc		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>391804		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>391812		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>39181a		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391828		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>391830		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>39183e		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>391846		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>391854		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>39185c		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>39186a		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391872		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391880		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>391888		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>391896		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>39189e		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>3918ac		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>3918b4		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>3918c2		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>3918ca		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>3918d8		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>3918e0		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>3918ee		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>3918f6		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391904		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>39190c		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>39191a		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391922		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>391930		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391938		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>391946		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>39194e		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>39195c		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>391964		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391972		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>39197a		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>391988		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391990		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>39199e		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>3919a6		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>3919b4		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>3919bc		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>3919ca		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>3919d2		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>3919e0		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>3919e8		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>3919f6		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>3919fe		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>391a0c		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391a14		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391a22		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391a2a		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391a38		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>391a40		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>391a4e		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>391a56		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>391a64		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391a6c		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391a7a		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391a82		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391a90		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>391a98		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391aa6		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391aae		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391abc		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391ac4		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391ad2		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391ada		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391ae8		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391af0		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391afe		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391b06		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391b14		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>391b1c		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391b2a		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391b32		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>391b40		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>391b48		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>391b56		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>391b5e		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391b6c		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>391b74		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391b82		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391b8a		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>391b98		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391ba0		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391bae		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391bb6		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391bc4		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391bcc		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391bda		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391be2		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391bf0		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391bf8		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391c06		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>391c0e		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>391c1c		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391c24		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391c32		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391c3a		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>391c48		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>391c50		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>391c5e		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>391c66		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>391c74		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391c7c		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391c8a		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391c92		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391ca0		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391ca8		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391cb6		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391cbe		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391ccc		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391cd4		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391ce2		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391cea		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391cf8		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391d00		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>391d0e		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391d16		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391d24		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>391d2c		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391d3a		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>391d42		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>391d50		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>391d58		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>391d66		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391d6e		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391d7c		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>391d84		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391d92		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391d9a		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391da8		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391db0		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391dbe		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391dc6		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391dd4		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391ddc		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391dea		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391df2		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391e00		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391e08		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391e16		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>391e1e		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>391e2c		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391e34		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>391e42		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>391e4a		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>391e58		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>391e60		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391e6e		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391e76		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391e84		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391e8c		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391e9a		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391ea2		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391eb0		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391eb8		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391ec6		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391ece		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391edc		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391ee4		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391ef2		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391efa		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391f08		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391f10		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391f1e		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391f26		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391f34		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391f3c		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391f4a		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391f52		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391f60		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391f68		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391f76		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391f7e		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391f8c		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391f94		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391fa2		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391faa		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391fb8		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391fc0		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391fce		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391fd6		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391fe4		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391fec		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391ffa		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>392002		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>392010		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>392018		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>392026		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>39202e		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>39203c		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>392044		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>392052		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>39205a		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>392068		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>392070		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>39207e		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>392086		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>392094		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>39209c		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>3920aa		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>3920b2		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>3920c0		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>3920c8		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>3920d6		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>3920de		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>3920ec		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>3920f4		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>392102		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>39210a		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>392118		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>392120		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>39212e		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>392136		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>392144		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>39214c		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>39215a		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>392162		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>392170		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>392178		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>392186		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>39218e		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>39219c		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>3921a4		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>3921b2		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>3921ba		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>3921c8		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>3921d0		00 87 fa 00
>3921d4		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3921dc		00 88 98 03
>3921e0		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>3921e8		00 88 98 03
>3921ec		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>3921f4		00 f9 69 00
>3921f8		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>392200		80 e8 4a 00
>392204		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39220c		00 f6 9a 00
>392210		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392218		1b f2 34 00
>39221c		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>392224		00 f7 8a 00
>392228		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>392230		00 f6 47 00
>392234		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39223c		00 f9 69 00
>392240		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392248		00 f7 a9 00
>39224c		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>392254		00 87 fa 00
>392258		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>392260		00 f7 a9 00
>392264		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39226c		00 f5 f5 00
>392270		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392278		06 b8 d8 03
>39227c		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>392284		00 f5 f5 00
>392288		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>392290		06 b8 d8 03
>392294		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>39229c		00 f5 f5 00
>3922a0		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>3922a8		10 74 f8 03
>3922ac		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3922b4		00 f5 f5 00
>3922b8		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3922c0		00 f5 f5 00
>3922c4		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3922cc		05 c5 d4 03
>3922d0		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>3922d8		00 f5 f5 00
>3922dc		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3922e4		04 f9 44 03
>3922e8		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>3922f0		05 c5 d4 03
>3922f4		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>3922fc		04 f9 44 03
>392300		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>392308		03 87 f7 03
>39230c		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>392314		05 c5 d4 03
>392318		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>392320		00 f6 28 00
>392324		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>39232c		05 c5 d4 03
>392330		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>392338		00 f5 f7 01
>39233c		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>392344		04 f9 44 03
>392348		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392350		00 99 f9 00
>392354		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>39235c		00 a8 f7 00
>392360		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>392368		00 99 f9 00
>39236c		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392374		00 a6 f6 00
>392378		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>392380		00 a6 f6 00
>392384		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>39238c		00 f6 36 02
>392390		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>392398		00 f6 36 02
>39239c		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3923a4		00 96 e8 01
>3923a8		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>3923b0		00 96 e8 01
>3923b4		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3923bc		02 79 77 03
>3923c0		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>3923c8		02 79 77 03
>3923cc		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>3923d4		00 a5 2b 02
>3923d8		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>3923e0		00 93 3b 02
>3923e4		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>3923ec		01 89 3b 03
>3923f0		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>3923f8		0a 53 2b 02
>3923fc		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>392404		00 f6 89 00
>392408		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392410		00 f6 9a 00
>392414		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39241c		00 f6 9a 00
>392420		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>392428		00 87 4b 01
>39242c		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>392434		00 78 67 01
>392438		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>392440		02 f8 fc 00
>392444		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>39244c		40 f5 f5 00
>392450		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>392458		02 79 77 03
>39245c		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392464		40 f5 f5 00
>392468		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392470		40 f5 f5 00
>392474		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39247c		00 f9 69 00
>392480		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392488		00 f9 69 00
>39248c		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392494		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>392498		c8 21 39 00 d4 21 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>3924a0		e0 21 39 00 ec 21 39 00
>3924a8		f8 21 39 00 04 22 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>3924b0		10 22 39 00 1c 22 39 00
>3924b8		28 22 39 00 34 22 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>3924c0		40 22 39 00 4c 22 39 00
>3924c8		58 22 39 00 64 22 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>3924d0		70 22 39 00 7c 22 39 00
>3924d8		88 22 39 00 94 22 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>3924e0		a0 22 39 00 ac 22 39 00
>3924e8		b8 22 39 00 c4 22 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>3924f0		d0 22 39 00 dc 22 39 00
>3924f8		e8 22 39 00 f4 22 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>392500		00 23 39 00 0c 23 39 00
>392508		18 23 39 00 24 23 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>392510		30 23 39 00 3c 23 39 00
>392518		48 23 39 00 54 23 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>392520		60 23 39 00 6c 23 39 00
>392528		78 23 39 00 84 23 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>392530		90 23 39 00 9c 23 39 00
>392538		a8 23 39 00 b4 23 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>392540		c0 23 39 00 cc 23 39 00
>392548		d8 23 39 00 e4 23 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>392550		f0 23 39 00 fc 23 39 00
>392558		08 24 39 00 14 24 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>392560		20 24 39 00 2c 24 39 00
>392568		38 24 39 00 44 24 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392570		50 24 39 00 5c 24 39 00
>392578		68 24 39 00 74 24 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392580		80 24 39 00 8c 24 39 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>392588		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392590		00 b1 f5 01
>392594		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>39259c		03 f1 f5 00
>3925a0		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>3925a8		03 c1 f5 00
>3925ac		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>3925b4		00 92 f5 01
>3925b8		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>3925c0		00 f1 f9 00
>3925c4		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>3925cc		00 f1 f5 00
>3925d0		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>3925d8		02 81 f6 01
>3925dc		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>3925e4		00 c2 b9 01
>3925e8		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>3925f0		05 b2 35 00
>3925f4		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>3925fc		1b f2 34 00
>392600		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392608		01 f5 74 00
>39260c		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>392614		00 61 e3 00
>392618		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>392620		00 a4 64 00
>392624		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>39262c		07 b5 f5 00
>392630		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392638		00 f3 74 00
>39263c		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>392644		00 c3 94 01
>392648		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>392650		00 f4 0d 01
>392654		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>39265c		00 f5 0b 01
>392660		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>392668		00 bf 07 00
>39266c		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>392674		00 6d 08 01
>392678		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392680		00 51 17 01
>392684		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>39268c		00 51 17 01
>392690		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>392698		00 53 08 01
>39269c		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>3926a4		00 53 06 01
>3926a8		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>3926b0		00 d2 f8 00
>3926b4		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>3926bc		00 e2 c7 01
>3926c0		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>3926c8		00 f1 9c 00
>3926cc		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>3926d4		02 f2 c9 01
>3926d8		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>3926e0		03 95 fb 00
>3926e4		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>3926ec		04 a1 59 00
>3926f0		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>3926f8		03 91 fc 03
>3926fc		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>392704		02 b4 ec 00
>392708		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>392710		00 93 f7 00
>392714		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>39271c		04 c1 58 00
>392720		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392728		02 c3 6a 00
>39272c		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392734		00 62 87 00
>392738		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>392740		00 f3 97 00
>392744		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>39274c		00 b3 97 00
>392750		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>392758		04 f3 cc 00
>39275c		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>392764		00 93 aa 00
>392768		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392770		00 78 08 01
>392774		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>39277c		00 78 08 01
>392780		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>392788		00 54 27 01
>39278c		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>392794		00 61 56 00
>392798		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3927a0		00 75 16 01
>3927a4		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>3927ac		00 f5 f6 01
>3927b0		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>3927b8		80 f3 e3 00
>3927bc		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>3927c4		00 b5 f5 00
>3927c8		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>3927d0		80 71 16 00
>3927d4		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>3927dc		00 30 55 01
>3927e0		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>3927e8		00 62 36 01
>3927ec		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>3927f4		02 51 07 00
>3927f8		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>392800		00 62 39 00
>392804		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>39280c		00 66 27 00
>392810		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392818		00 73 46 00
>39281c		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>392824		00 74 76 01
>392828		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>392830		81 92 38 00
>392834		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>39283c		02 71 19 00
>392840		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>392848		01 81 09 00
>39284c		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>392854		00 83 4b 02
>392858		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>392860		05 71 59 00
>392864		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>39286c		03 82 39 00
>392870		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>392878		82 84 17 00
>39287c		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>392884		02 72 16 00
>392888		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392890		00 7b 0a 00
>392894		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>39289c		00 85 0c 01
>3928a0		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>3928a8		00 7b 0a 01
>3928ac		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>3928b4		00 79 18 01
>3928b8		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>3928c0		01 73 08 00
>3928c4		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>3928cc		04 77 0a 00
>3928d0		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>3928d8		00 51 19 00
>3928dc		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>3928e4		01 74 09 00
>3928e8		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>3928f0		01 63 28 00
>3928f4		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>3928fc		00 65 0a 00
>392900		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392908		00 67 29 00
>39290c		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392914		00 67 09 00
>392918		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>392920		01 6a 28 00
>392924		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>39292c		00 55 27 00
>392930		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392938		00 6f 08 00
>39293c		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>392944		00 7a 07 00
>392948		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>392950		06 a2 0d 00
>392954		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>39295c		00 a3 5f 00
>392960		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>392968		00 42 27 00
>39296c		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>392974		05 b2 49 00
>392978		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392980		00 b2 79 01
>392984		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>39298c		00 7a 1a 00
>392990		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>392998		00 82 28 01
>39299c		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>3929a4		02 c3 5f 00
>3929a8		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>3929b0		86 c4 95 01
>3929b4		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>3929bc		00 44 15 00
>3929c0		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>3929c8		00 d1 06 00
>3929cc		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>3929d4		00 82 37 00
>3929d8		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>3929e0		00 41 35 00
>3929e4		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>3929ec		02 32 f5 01
>3929f0		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>3929f8		00 61 26 00
>3929fc		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392a04		84 3f 05 01
>392a08		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>392a10		01 d1 f6 00
>392a14		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>392a1c		00 41 05 01
>392a20		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392a28		05 f3 e4 00
>392a2c		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392a34		00 92 f5 01
>392a38		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>392a40		04 f2 e4 01
>392a44		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>392a4c		00 45 25 00
>392a50		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>392a58		01 a3 36 00
>392a5c		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>392a64		01 98 05 01
>392a68		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392a70		02 a3 f6 01
>392a74		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392a7c		00 f6 f8 00
>392a80		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>392a88		00 f3 f5 00
>392a8c		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>392a94		00 94 e5 01
>392a98		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392aa0		00 84 44 00
>392aa4		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392aac		03 83 18 01
>392ab0		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392ab8		01 78 08 01
>392abc		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392ac4		03 8e 08 01
>392ac8		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392ad0		09 f2 46 00
>392ad4		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392adc		00 96 e8 01
>392ae0		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392ae8		00 f6 f6 01
>392aec		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392af4		00 f6 9a 00
>392af8		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392b00		00 c6 45 00
>392b04		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>392b0c		00 f4 b4 00
>392b10		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392b18		00 d5 25 00
>392b1c		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392b24		0e 21 2d 00
>392b28		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>392b30		00 55 87 02
>392b34		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>392b3c		08 98 87 01
>392b40		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>392b48		04 17 04 03
>392b4c		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>392b54		05 77 f9 02
>392b58		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>392b60		02 f4 08 00
>392b64		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392b6c		00 36 05 01
>392b70		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>392b78		05 32 55 03
>392b7c		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>392b84		00 f3 df 00
>392b88		88 25 39 00 94 25 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392b90		a0 25 39 00 ac 25 39 00 b8 25 39 00 c4 25 39 00
>392ba0		d0 25 39 00 dc 25 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392ba8		e8 25 39 00 f4 25 39 00 00 26 39 00 0c 26 39 00
>392bb8		18 26 39 00 24 26 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392bc0		30 26 39 00 3c 26 39 00 48 26 39 00 54 26 39 00
>392bd0		60 26 39 00 6c 26 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392bd8		78 26 39 00 84 26 39 00 90 26 39 00 9c 26 39 00
>392be8		a8 26 39 00 b4 26 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392bf0		c0 26 39 00 cc 26 39 00 d8 26 39 00 e4 26 39 00
>392c00		f0 26 39 00 fc 26 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392c08		08 27 39 00 14 27 39 00 20 27 39 00 2c 27 39 00
>392c18		38 27 39 00 44 27 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>392c20		50 27 39 00 5c 27 39 00 68 27 39 00 74 27 39 00
>392c30		80 27 39 00 8c 27 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392c38		98 27 39 00 a4 27 39 00 b0 27 39 00 bc 27 39 00
>392c48		c8 27 39 00 d4 27 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>392c50		e0 27 39 00 ec 27 39 00 f8 27 39 00 04 28 39 00
>392c60		10 28 39 00 1c 28 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>392c68		28 28 39 00 34 28 39 00 40 28 39 00 4c 28 39 00
>392c78		58 28 39 00 64 28 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392c80		70 28 39 00 7c 28 39 00 88 28 39 00 94 28 39 00
>392c90		a0 28 39 00 ac 28 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>392c98		b8 28 39 00 c4 28 39 00 d0 28 39 00 dc 28 39 00
>392ca8		e8 28 39 00 f4 28 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392cb0		00 29 39 00 0c 29 39 00 18 29 39 00 24 29 39 00
>392cc0		30 29 39 00 3c 29 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392cc8		48 29 39 00 54 29 39 00 60 29 39 00 6c 29 39 00
>392cd8		78 29 39 00 84 29 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392ce0		90 29 39 00 9c 29 39 00 a8 29 39 00 b4 29 39 00
>392cf0		c0 29 39 00 cc 29 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392cf8		d8 29 39 00 e4 29 39 00 f0 29 39 00 fc 29 39 00
>392d08		08 2a 39 00 14 2a 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>392d10		20 2a 39 00 2c 2a 39 00 38 2a 39 00 44 2a 39 00
>392d20		50 2a 39 00 5c 2a 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392d28		68 2a 39 00 74 2a 39 00 80 2a 39 00 8c 2a 39 00
>392d38		98 2a 39 00 a4 2a 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>392d40		b0 2a 39 00 bc 2a 39 00 c8 2a 39 00 d4 2a 39 00
>392d50		e0 2a 39 00 ec 2a 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>392d58		f8 2a 39 00 04 2b 39 00 10 2b 39 00 1c 2b 39 00
>392d68		28 2b 39 00 34 2b 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392d70		40 2b 39 00 4c 2b 39 00 58 2b 39 00 64 2b 39 00
>392d80		70 2b 39 00 7c 2b 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>392d88		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392d90		0d f2 f7 00
>392d94		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392d9c		07 f2 f7 00
>392da0		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392da8		07 f2 f6 00
>392dac		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392db4		07 f2 f7 00
>392db8		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392dc0		07 f2 f7 00
>392dc4		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392dcc		07 f2 f7 00
>392dd0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dd8		00 00 00 00
>392ddc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392de4		00 00 00 00
>392de8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392df0		00 00 00 00
>392df4		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392dfc		87 f2 f1 00
>392e00		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392e08		07 f4 f4 00
>392e0c		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392e14		07 f2 f6 00
>392e18		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>392e20		07 e7 f7 00
>392e24		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>392e2c		07 f6 f6 00
>392e30		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392e38		87 a3 f3 00
>392e3c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e44		00 00 00 00
>392e48		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e50		00 00 00 00
>392e54		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e5c		00 00 00 00
>392e60		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>392e68		07 8a 08 00
>392e6c		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392e74		07 55 14 00
>392e78		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392e80		87 55 04 00
>392e84		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392e8c		07 46 1a 00
>392e90		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392e98		07 61 07 00
>392e9c		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392ea4		90 61 07 00
>392ea8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eb0		00 00 00 00
>392eb4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ebc		00 00 00 00
>392ec0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ec8		00 00 00 00
>392ecc		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392ed4		87 f3 f8 00
>392ed8		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392ee0		07 f6 3a 00
>392ee4		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392eec		0c 84 19 00
>392ef0		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392ef8		07 94 19 00
>392efc		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392f04		87 d1 f8 00
>392f08		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392f10		07 c3 a6 00
>392f14		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f1c		00 00 00 00
>392f20		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f28		00 00 00 00
>392f2c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f34		00 00 00 00
>392f38		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392f40		47 f2 df 00
>392f44		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392f4c		0f a1 df 00
>392f50		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392f58		07 f1 78 00
>392f5c		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392f64		07 f1 18 00
>392f68		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392f70		07 56 26 00
>392f74		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392f7c		07 66 06 00
>392f80		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f88		00 00 00 00
>392f8c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f94		00 00 00 00
>392f98		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392fa0		00 00 00 00
>392fa4		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392fac		87 85 35 00
>392fb0		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392fb8		87 f3 f4 00
>392fbc		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392fc4		07 f2 c3 00
>392fc8		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392fd0		08 72 08 00
>392fd4		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392fdc		07 3f 07 01
>392fe0		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392fe8		07 4f 05 00
>392fec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ff4		00 00 00 00
>392ff8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393000		00 00 00 00
>393004		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39300c		00 00 00 00
>393010		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>393018		07 7a 05 00
>39301c		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>393024		07 a5 45 00
>393028		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>393030		08 8f 09 00
>393034		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>39303c		0c 8f 09 00
>393040		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>393048		07 82 37 00
>39304c		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>393054		07 62 2c 01
>393058		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393060		00 00 00 00
>393064		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39306c		00 00 00 00
>393070		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393078		00 00 00 00
>39307c		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>393084		07 a6 1c 00
>393088		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>393090		07 72 0b 00
>393094		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>39309c		07 72 09 00
>3930a0		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>3930a8		07 82 09 00
>3930ac		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>3930b4		07 72 0f 00
>3930b8		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>3930c0		07 8f 0a 00
>3930c4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930cc		00 00 00 00
>3930d0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930d8		00 00 00 00
>3930dc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3930e4		00 00 00 00
>3930e8		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3930f0		07 65 1a 00
>3930f4		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>3930fc		07 65 1a 00
>393100		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>393108		07 75 0a 00
>39310c		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>393114		07 65 1a 00
>393118		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>393120		07 65 26 00
>393124		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>39312c		07 55 36 00
>393130		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393138		00 00 00 00
>39313c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393144		00 00 00 00
>393148		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393150		00 00 00 00
>393154		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>39315c		07 ff 0f 01
>393160		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>393168		87 64 18 00
>39316c		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>393174		07 96 0a 00
>393178		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>393180		07 91 2a 00
>393184		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>39318c		47 6f 07 00
>393190		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>393198		07 8f 06 02
>39319c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931a4		00 00 00 00
>3931a8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931b0		00 00 00 00
>3931b4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3931bc		00 00 00 00
>3931c0		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>3931c8		07 55 16 00
>3931cc		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>3931d4		07 6a 03 00
>3931d8		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>3931e0		07 42 35 00
>3931e4		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>3931ec		07 31 47 01
>3931f0		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>3931f8		0a 42 25 00
>3931fc		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>393204		07 cf 07 00
>393208		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393210		00 00 00 00
>393214		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39321c		00 00 00 00
>393220		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393228		00 00 00 00
>39322c		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>393234		8a f2 26 00
>393238		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>393240		07 f2 f5 00
>393244		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>39324c		87 11 13 00
>393250		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>393258		87 1d 03 00
>39325c		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>393264		07 81 23 00
>393268		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>393270		0a f2 f6 01
>393274		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39327c		00 00 00 00
>393280		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393288		00 00 00 00
>39328c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393294		00 00 00 00
>393298		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>3932a0		07 c2 05 00
>3932a4		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>3932ac		07 6f 0c 01
>3932b0		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>3932b8		07 56 16 00
>3932bc		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>3932c4		88 8f 0b 00
>3932c8		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>3932d0		87 c3 e5 00
>3932d4		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>3932dc		07 f8 16 00
>3932e0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932e8		00 00 00 00
>3932ec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3932f4		00 00 00 00
>3932f8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393300		00 00 00 00
>393304		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>39330c		0a f3 03 00
>393310		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>393318		07 f3 02 00
>39331c		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>393324		07 1f ff 03
>393328		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>393330		8f 56 84 02
>393334		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>39333c		0c 34 04 03
>393340		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>393348		07 1f 02 03
>39334c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393354		00 00 00 00
>393358		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>393360		00 00 00 00
>393364		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39336c		00 00 00 00
>393370		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>393378		07 12 16 01
>39337c		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>393384		07 f6 c9 02
>393388		88 2d 39 00 94 2d 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>393390		a0 2d 39 00 ac 2d 39 00 b8 2d 39 00 c4 2d 39 00
>3933a0		d0 2d 39 00 dc 2d 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>3933a8		e8 2d 39 00 f4 2d 39 00 00 2e 39 00 0c 2e 39 00
>3933b8		18 2e 39 00 24 2e 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>3933c0		30 2e 39 00 3c 2e 39 00 48 2e 39 00 54 2e 39 00
>3933d0		60 2e 39 00 6c 2e 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>3933d8		78 2e 39 00 84 2e 39 00 90 2e 39 00 9c 2e 39 00
>3933e8		a8 2e 39 00 b4 2e 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>3933f0		c0 2e 39 00 cc 2e 39 00 d8 2e 39 00 e4 2e 39 00
>393400		f0 2e 39 00 fc 2e 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>393408		08 2f 39 00 14 2f 39 00 20 2f 39 00 2c 2f 39 00
>393418		38 2f 39 00 44 2f 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>393420		50 2f 39 00 5c 2f 39 00 68 2f 39 00 74 2f 39 00
>393430		80 2f 39 00 8c 2f 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>393438		98 2f 39 00 a4 2f 39 00 b0 2f 39 00 bc 2f 39 00
>393448		c8 2f 39 00 d4 2f 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>393450		e0 2f 39 00 ec 2f 39 00 f8 2f 39 00 04 30 39 00
>393460		10 30 39 00 1c 30 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>393468		28 30 39 00 34 30 39 00 40 30 39 00 4c 30 39 00
>393478		58 30 39 00 64 30 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393480		70 30 39 00 7c 30 39 00 88 30 39 00 94 30 39 00
>393490		a0 30 39 00 ac 30 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>393498		b8 30 39 00 c4 30 39 00 d0 30 39 00 dc 30 39 00
>3934a8		e8 30 39 00 f4 30 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>3934b0		00 31 39 00 0c 31 39 00 18 31 39 00 24 31 39 00
>3934c0		30 31 39 00 3c 31 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>3934c8		48 31 39 00 54 31 39 00 60 31 39 00 6c 31 39 00
>3934d8		78 31 39 00 84 31 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>3934e0		90 31 39 00 9c 31 39 00 a8 31 39 00 b4 31 39 00
>3934f0		c0 31 39 00 cc 31 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>3934f8		d8 31 39 00 e4 31 39 00 f0 31 39 00 fc 31 39 00
>393508		08 32 39 00 14 32 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>393510		20 32 39 00 2c 32 39 00 38 32 39 00 44 32 39 00
>393520		50 32 39 00 5c 32 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393528		68 32 39 00 74 32 39 00 80 32 39 00 8c 32 39 00
>393538		98 32 39 00 a4 32 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>393540		b0 32 39 00 bc 32 39 00 c8 32 39 00 d4 32 39 00
>393550		e0 32 39 00 ec 32 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>393558		f8 32 39 00 04 33 39 00 10 33 39 00 1c 33 39 00
>393568		28 33 39 00 34 33 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393570		40 33 39 00 4c 33 39 00 58 33 39 00 64 33 39 00
>393580		70 33 39 00 7c 33 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>393588		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393590						IOPL2_TONE_TEST
.393590		e2 20		sep #$20	                SEP #$20        ; set A short
.393592		c2 10		rep #$10	                REP #$10        ; set X long
.393594		a2 00 00	ldx #$0000	                LDX #0
.393597						OPL2_TONE_TESTING_L1
.393597		bf 88 35 39	lda $393588,x	                LDA NOTE_INTRO, X
.39359b		29 0f		and #$0f	                AND #$F
.39359d		85 30		sta $30		                STA OPL2_NOTE ; start at C
.39359f		bf 88 35 39	lda $393588,x	                LDA NOTE_INTRO, X
.3935a3		29 70		and #$70	                AND #$70
.3935a5		4a		lsr a		                LSR A
.3935a6		4a		lsr a		                LSR A
.3935a7		4a		lsr a		                LSR A
.3935a8		4a		lsr a		                LSR A
.3935a9		85 31		sta $31		                STA OPL2_OCTAVE
.3935ab		8a		txa		                TXA
.3935ac		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.3935ae		85 27		sta $27		                STA OPL2_CHANNEL
.3935b0		22 80 37 39	jsl $393780	                JSL OPL2_PLAYNOTE
.3935b4		a0 00 00	ldy #$0000	                LDY #$0000
.3935b7						OPL2_TONE_TESTING_L2
.3935b7		ea		nop		                NOP
.3935b8		ea		nop		                NOP
.3935b9		ea		nop		                NOP
.3935ba		ea		nop		                NOP
.3935bb		c8		iny		                INY
.3935bc		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.3935bf		d0 f6		bne $3935b7	                BNE OPL2_TONE_TESTING_L2
.3935c1		e8		inx		                INX
.3935c2		e0 08 00	cpx #$0008	                CPX #8
.3935c5		d0 d0		bne $393597	                BNE OPL2_TONE_TESTING_L1
.3935c7		6b		rtl		                RTL
.3935c8						OPL2_INIT
.3935c8		c2 20		rep #$20	                REP #$20        ; set A long
.3935ca		a9 00 00	lda #$0000	                LDA #$0000
.3935cd		85 28		sta $28		                STA OPL2_REG_REGION
.3935cf		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3935d1		85 30		sta $30		                STA OPL2_NOTE
.3935d3		85 32		sta $32		                STA OPL2_PARAMETER0
.3935d5		85 34		sta $34		                STA OPL2_PARAMETER2
.3935d7		a9 52 15	lda #$1552	                LDA #<>INSTRUMENT_ACCORDN
.3935da		85 50		sta $50		                STA RAD_ADDR
.3935dc		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.3935df		85 52		sta $52		                STA RAD_ADDR + 2
.3935e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3935e3		6b		rtl		                RTL
.3935e4						OPL2_Reset
.3935e4		6b		rtl		                RTL
.3935e5						OPL2_Get_FrequencyBlock
.3935e5		6b		rtl		                RTL
.3935e6						OPL2_GET_REGISTER
.3935e6		48		pha		                PHA             ; begin setdp macro
.3935e7		08		php		                PHP
.3935e8		c2 20		rep #$20	                REP #$20        ; set A long
.3935ea		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935ed		5b		tcd		                TCD
.3935ee		28		plp		                PLP
.3935ef		68		pla		                PLA             ; end setdp macro
.3935f0		c2 20		rep #$20	                REP #$20        ; set A long
.3935f2		18		clc		              CLC
.3935f3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3935f6		65 32		adc $32		              ADC OPL2_PARAMETER0
.3935f8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3935fa		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3935fd		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3935ff		e2 20		sep #$20	                SEP #$20        ; set A short
.393601		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393603		6b		rtl		              RTL
.393604						OPL2_GET_WAVEFORM_SELECT
.393604		48		pha		                PHA             ; begin setdp macro
.393605		08		php		                PHP
.393606		c2 20		rep #$20	                REP #$20        ; set A long
.393608		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39360b		5b		tcd		                TCD
.39360c		28		plp		                PLP
.39360d		68		pla		                PLA             ; end setdp macro
.39360e		c2 20		rep #$20	                REP #$20        ; set A long
.393610		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393613		69 01 00	adc #$0001	              ADC #$0001
.393616		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393618		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39361b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39361d		e2 20		sep #$20	                SEP #$20        ; set A short
.39361f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393621		29 20		and #$20	              AND #$20
.393623		6b		rtl		              RTL
.393624						OPL2_GET_SCALINGLEVEL
.393624		48		pha		                PHA             ; begin setdp macro
.393625		08		php		                PHP
.393626		c2 20		rep #$20	                REP #$20        ; set A long
.393628		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39362b		5b		tcd		                TCD
.39362c		28		plp		                PLP
.39362d		68		pla		                PLA             ; end setdp macro
.39362e		c2 20		rep #$20	                REP #$20        ; set A long
.393630		a9 40 00	lda #$0040	              LDA #$0040  ;
.393633		85 28		sta $28		              STA OPL2_REG_REGION
.393635		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393638		e2 20		sep #$20	                SEP #$20        ; set A short
.39363a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39363c		29 c0		and #$c0	              AND #$C0
.39363e		4a		lsr a		              LSR A
.39363f		4a		lsr a		              LSR A
.393640		4a		lsr a		              LSR A
.393641		4a		lsr a		              LSR A
.393642		4a		lsr a		              LSR A
.393643		4a		lsr a		              LSR A
.393644		6b		rtl		              RTL
.393645						OPL2_GET_BLOCK
.393645		48		pha		                PHA             ; begin setdp macro
.393646		08		php		                PHP
.393647		c2 20		rep #$20	                REP #$20        ; set A long
.393649		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39364c		5b		tcd		                TCD
.39364d		28		plp		                PLP
.39364e		68		pla		                PLA             ; end setdp macro
.39364f		e2 20		sep #$20	                SEP #$20        ; set A short
.393651		18		clc		              CLC
.393652		a5 27		lda $27		              LDA OPL2_CHANNEL
.393654		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393656		69 b0		adc #$b0	              ADC #$B0
.393658		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39365a		a9 00		lda #$00	              LDA #$00
.39365c		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39365e		c2 30		rep #$30	                REP #$30        ; set A&X long
.393660		18		clc		              CLC
.393661		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393664		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393666		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393668		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39366b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39366d		e2 20		sep #$20	                SEP #$20        ; set A short
.39366f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393671		29 1c		and #$1c	              AND #$1C
.393673		4a		lsr a		              LSR A
.393674		4a		lsr a		              LSR A
.393675		6b		rtl		              RTL
.393676						OPL2_GET_KEYON
.393676		48		pha		                PHA             ; begin setdp macro
.393677		08		php		                PHP
.393678		c2 20		rep #$20	                REP #$20        ; set A long
.39367a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39367d		5b		tcd		                TCD
.39367e		28		plp		                PLP
.39367f		68		pla		                PLA             ; end setdp macro
.393680		e2 20		sep #$20	                SEP #$20        ; set A short
.393682		18		clc		              CLC
.393683		a5 27		lda $27		              LDA OPL2_CHANNEL
.393685		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393687		69 b0		adc #$b0	              ADC #$B0
.393689		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39368b		a9 00		lda #$00	              LDA #$00
.39368d		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39368f		c2 30		rep #$30	                REP #$30        ; set A&X long
.393691		18		clc		              CLC
.393692		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393695		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393697		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393699		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39369c		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39369e		e2 20		sep #$20	                SEP #$20        ; set A short
.3936a0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936a2		29 20		and #$20	              AND #$20
.3936a4		6b		rtl		              RTL
.3936a5						OPL2_GET_FEEDBACK
.3936a5		48		pha		                PHA             ; begin setdp macro
.3936a6		08		php		                PHP
.3936a7		c2 20		rep #$20	                REP #$20        ; set A long
.3936a9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936ac		5b		tcd		                TCD
.3936ad		28		plp		                PLP
.3936ae		68		pla		                PLA             ; end setdp macro
.3936af		e2 20		sep #$20	                SEP #$20        ; set A short
.3936b1		18		clc		              CLC
.3936b2		a5 27		lda $27		              LDA OPL2_CHANNEL
.3936b4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3936b6		69 c0		adc #$c0	              ADC #$C0
.3936b8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3936ba		a9 00		lda #$00	              LDA #$00
.3936bc		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3936be		c2 30		rep #$30	                REP #$30        ; set A&X long
.3936c0		18		clc		              CLC
.3936c1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936c4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3936c6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936c8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936cb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3936cf		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3936d1		29 e0		and #$e0	              AND #$E0
.3936d3		4a		lsr a		              LSR
.3936d4		6b		rtl		              RTL
.3936d5						OPL2_GET_SYNTHMODE
.3936d5		48		pha		                PHA             ; begin setdp macro
.3936d6		08		php		                PHP
.3936d7		c2 20		rep #$20	                REP #$20        ; set A long
.3936d9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936dc		5b		tcd		                TCD
.3936dd		28		plp		                PLP
.3936de		68		pla		                PLA             ; end setdp macro
.3936df		e2 20		sep #$20	                SEP #$20        ; set A short
.3936e1		18		clc		              CLC
.3936e2		a5 27		lda $27		              LDA OPL2_CHANNEL
.3936e4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3936e6		69 c0		adc #$c0	              ADC #$C0
.3936e8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3936ea		a9 00		lda #$00	              LDA #$00
.3936ec		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3936ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.3936f0		18		clc		              CLC
.3936f1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3936f4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3936f6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3936f8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3936fb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3936fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3936ff		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393701		29 01		and #$01	              AND #$01
.393703		6b		rtl		              RTL
.393704						OPL2_GET_DEEPTREMOLO
.393704		48		pha		                PHA             ; begin setdp macro
.393705		08		php		                PHP
.393706		c2 20		rep #$20	                REP #$20        ; set A long
.393708		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39370b		5b		tcd		                TCD
.39370c		28		plp		                PLP
.39370d		68		pla		                PLA             ; end setdp macro
.39370e		c2 20		rep #$20	                REP #$20        ; set A long
.393710		a9 bd 00	lda #$00bd	              LDA #$00BD;
.393713		85 28		sta $28		              STA OPL2_REG_REGION
.393715		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393718		e2 20		sep #$20	                SEP #$20        ; set A short
.39371a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39371c		29 80		and #$80	              AND #$80
.39371e		6b		rtl		              RTL
.39371f						OPL2_GET_DEEPVIBRATO
.39371f		48		pha		                PHA             ; begin setdp macro
.393720		08		php		                PHP
.393721		c2 20		rep #$20	                REP #$20        ; set A long
.393723		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393726		5b		tcd		                TCD
.393727		28		plp		                PLP
.393728		68		pla		                PLA             ; end setdp macro
.393729		c2 20		rep #$20	                REP #$20        ; set A long
.39372b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39372e		69 bd 00	adc #$00bd	              ADC #$00BD
.393731		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393733		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393736		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393738		e2 20		sep #$20	                SEP #$20        ; set A short
.39373a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39373c		29 40		and #$40	              AND #$40
.39373e		6b		rtl		              RTL
.39373f						OPL2_GET_PERCUSSION
.39373f		48		pha		                PHA             ; begin setdp macro
.393740		08		php		                PHP
.393741		c2 20		rep #$20	                REP #$20        ; set A long
.393743		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393746		5b		tcd		                TCD
.393747		28		plp		                PLP
.393748		68		pla		                PLA             ; end setdp macro
.393749		c2 20		rep #$20	                REP #$20        ; set A long
.39374b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39374e		69 bd 00	adc #$00bd	              ADC #$00BD
.393751		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393753		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393756		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393758		e2 20		sep #$20	                SEP #$20        ; set A short
.39375a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39375c		29 20		and #$20	              AND #$20
.39375e		6b		rtl		              RTL
.39375f						OPL2_GET_DRUMS
.39375f		48		pha		                PHA             ; begin setdp macro
.393760		08		php		                PHP
.393761		c2 20		rep #$20	                REP #$20        ; set A long
.393763		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393766		5b		tcd		                TCD
.393767		28		plp		                PLP
.393768		68		pla		                PLA             ; end setdp macro
.393769		c2 20		rep #$20	                REP #$20        ; set A long
.39376b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39376e		69 bd 00	adc #$00bd	              ADC #$00BD
.393771		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393773		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393776		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393778		e2 20		sep #$20	                SEP #$20        ; set A short
.39377a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39377c		29 1f		and #$1f	              AND #$1F
.39377e		6b		rtl		              RTL
.39377f						OPL2_Get_WaveForm
.39377f		6b		rtl		                RTL
.393780						OPL2_PLAYNOTE
.393780		48		pha		                PHA             ; begin setdp macro
.393781		08		php		                PHP
.393782		c2 20		rep #$20	                REP #$20        ; set A long
.393784		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393787		5b		tcd		                TCD
.393788		28		plp		                PLP
.393789		68		pla		                PLA             ; end setdp macro
.39378a		e2 20		sep #$20	                SEP #$20        ; set A short
.39378c		da		phx		                PHX
.39378d		a9 00		lda #$00	                LDA #$00
.39378f		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393791		20 68 3d	jsr $393d68	                JSR OPL2_SET_KEYON
.393794		20 2d 3d	jsr $393d2d	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.393797		e2 10		sep #$10	                SEP #$10        ; set X short
.393799		a5 30		lda $30		                LDA OPL2_NOTE
.39379b		3a		dec a		                DEC A
.39379c		0a		asl a		                ASL A
.39379d		aa		tax		                TAX
.39379e		bf 17 15 39	lda $391517,x	                LDA @lnoteFNumbers,X
.3937a2		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3937a4		e8		inx		                INX
.3937a5		bf 17 15 39	lda $391517,x	                LDA @lnoteFNumbers,X
.3937a9		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3937ab		22 ab 3c 39	jsl $393cab	                JSL OPL2_SET_FNUMBER
.3937af		a9 01		lda #$01	                LDA #$01
.3937b1		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3937b3		20 68 3d	jsr $393d68	                JSR OPL2_SET_KEYON
.3937b6		c2 10		rep #$10	                REP #$10        ; set X long
.3937b8		fa		plx		                PLX
.3937b9		6b		rtl		                RTL
.3937ba						OPL2_PLAYDRUM
.3937ba		6b		rtl		                RTL
.3937bb						OPL2_SET_INSTRUMENT
.3937bb		48		pha		                PHA             ; begin setdp macro
.3937bc		08		php		                PHP
.3937bd		c2 20		rep #$20	                REP #$20        ; set A long
.3937bf		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937c2		5b		tcd		                TCD
.3937c3		28		plp		                PLP
.3937c4		68		pla		                PLA             ; end setdp macro
.3937c5		38		sec		              SEC ; Set the WaveFormSelect to True
.3937c6		22 a9 39 39	jsl $3939a9	              JSL OPL2_SET_WAVEFORMSELECT;
.3937ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3937cc		c2 10		rep #$10	                REP #$10        ; set X long
.3937ce		a0 00 00	ldy #$0000	              LDY #$0000
.3937d1		a2 00 00	ldx #$0000	              LDX #$0000
.3937d4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3937d6		85 35		sta $35		              STA OPL2_PARAMETER3
.3937d8		c8		iny		              INY
.3937d9		c9 06		cmp #$06	              CMP #$06
.3937db		d0 03		bne $3937e0	              BNE PERCUSSION_NEXT07
.3937dd		82 70 01	brl $393950	              BRL Percussion_6
.3937e0						PERCUSSION_NEXT07
.3937e0		c9 07		cmp #$07	              CMP #$07
.3937e2		d0 03		bne $3937e7	              BNE PERCUSSION_NEXT08
.3937e4		82 44 01	brl $39392b	              BRL Percussion_7
.3937e7						PERCUSSION_NEXT08
.3937e7		c9 08		cmp #$08	              CMP #$08
.3937e9		d0 03		bne $3937ee	              BNE PERCUSSION_NEXT09
.3937eb		82 18 01	brl $393906	              BRL Percussion_8
.3937ee						PERCUSSION_NEXT09
.3937ee		c9 09		cmp #$09	              CMP #$09
.3937f0		d0 03		bne $3937f5	              BNE PERCUSSION_NEXT0A
.3937f2		82 ec 00	brl $3938e1	              BRL Percussion_9
.3937f5						PERCUSSION_NEXT0A
.3937f5		c9 0a		cmp #$0a	              CMP #$0A
.3937f7		d0 03		bne $3937fc	              BNE Percussion_Default
.3937f9		82 c0 00	brl $3938bc	              BRL Percussion_A
.3937fc						Percussion_Default
.3937fc		a9 00		lda #$00	              LDA #$00
.3937fe		85 26		sta $26		              STA OPL2_OPERATOR
.393800		c2 20		rep #$20	                REP #$20        ; set A long
.393802		a9 20 00	lda #$0020	              LDA #$0020;
.393805		85 28		sta $28		              STA OPL2_REG_REGION
.393807		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.39380a		e2 20		sep #$20	                SEP #$20        ; set A short
.39380c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39380e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393810		c8		iny		              INY
.393811		c2 20		rep #$20	                REP #$20        ; set A long
.393813		a9 40 00	lda #$0040	              LDA #$0040;
.393816		85 28		sta $28		              STA OPL2_REG_REGION
.393818		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.39381b		e2 20		sep #$20	                SEP #$20        ; set A short
.39381d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39381f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393821		c8		iny		              INY
.393822		c2 20		rep #$20	                REP #$20        ; set A long
.393824		a9 60 00	lda #$0060	              LDA #$0060;
.393827		85 28		sta $28		              STA OPL2_REG_REGION
.393829		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.39382c		e2 20		sep #$20	                SEP #$20        ; set A short
.39382e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393830		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393832		c8		iny		              INY
.393833		c2 20		rep #$20	                REP #$20        ; set A long
.393835		a9 80 00	lda #$0080	              LDA #$0080;
.393838		85 28		sta $28		              STA OPL2_REG_REGION
.39383a		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.39383d		e2 20		sep #$20	                SEP #$20        ; set A short
.39383f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393841		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393843		c8		iny		              INY
.393844		c2 20		rep #$20	                REP #$20        ; set A long
.393846		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393849		85 28		sta $28		              STA OPL2_REG_REGION
.39384b		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.39384e		e2 20		sep #$20	                SEP #$20        ; set A short
.393850		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393852		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393854		c8		iny		              INY
.393855		e2 10		sep #$10	                SEP #$10        ; set X short
.393857		a5 27		lda $27		              LDA OPL2_CHANNEL
.393859		29 0f		and #$0f	              AND #$0F
.39385b		aa		tax		              TAX
.39385c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.39385e		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393862		c8		iny		              INY
.393863		a9 01		lda #$01	              LDA #$01
.393865		85 26		sta $26		              STA OPL2_OPERATOR
.393867		c2 20		rep #$20	                REP #$20        ; set A long
.393869		a9 20 00	lda #$0020	              LDA #$0020;
.39386c		85 28		sta $28		              STA OPL2_REG_REGION
.39386e		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393871		e2 20		sep #$20	                SEP #$20        ; set A short
.393873		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393875		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393877		c8		iny		              INY
.393878		c2 20		rep #$20	                REP #$20        ; set A long
.39387a		a9 40 00	lda #$0040	              LDA #$0040;
.39387d		85 28		sta $28		              STA OPL2_REG_REGION
.39387f		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393882		e2 20		sep #$20	                SEP #$20        ; set A short
.393884		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393886		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393888		c8		iny		              INY
.393889		c2 20		rep #$20	                REP #$20        ; set A long
.39388b		a9 60 00	lda #$0060	              LDA #$0060;
.39388e		85 28		sta $28		              STA OPL2_REG_REGION
.393890		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393893		e2 20		sep #$20	                SEP #$20        ; set A short
.393895		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.393897		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393899		c8		iny		              INY
.39389a		c2 20		rep #$20	                REP #$20        ; set A long
.39389c		a9 80 00	lda #$0080	              LDA #$0080;
.39389f		85 28		sta $28		              STA OPL2_REG_REGION
.3938a1		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.3938a4		e2 20		sep #$20	                SEP #$20        ; set A short
.3938a6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.3938a8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938aa		c8		iny		              INY
.3938ab		c2 20		rep #$20	                REP #$20        ; set A long
.3938ad		a9 e0 00	lda #$00e0	              LDA #$00E0;
.3938b0		85 28		sta $28		              STA OPL2_REG_REGION
.3938b2		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.3938b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3938b7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3938b9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938bb		6b		rtl		                RTL
.3938bc						Percussion_A
.3938bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3938be		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3938c0		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3938c4		c8		iny		              INY
.3938c5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3938c7		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3938cb		c8		iny		              INY
.3938cc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3938ce		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.3938d2		c8		iny		              INY
.3938d3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3938d5		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.3938d9		c8		iny		              INY
.3938da		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3938dc		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.3938e0		6b		rtl		                RTL
.3938e1						Percussion_9
.3938e1		e2 20		sep #$20	                SEP #$20        ; set A short
.3938e3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3938e5		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.3938e9		c8		iny		              INY
.3938ea		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3938ec		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.3938f0		c8		iny		              INY
.3938f1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3938f3		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.3938f7		c8		iny		              INY
.3938f8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3938fa		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.3938fe		c8		iny		              INY
.3938ff		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393901		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393905		6b		rtl		              RTL
.393906						Percussion_8
.393906		e2 20		sep #$20	                SEP #$20        ; set A short
.393908		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39390a		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.39390e		c8		iny		              INY
.39390f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393911		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393915		c8		iny		              INY
.393916		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393918		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.39391c		c8		iny		              INY
.39391d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39391f		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393923		c8		iny		              INY
.393924		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393926		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.39392a		6b		rtl		              RTL
.39392b						Percussion_7
.39392b		e2 20		sep #$20	                SEP #$20        ; set A short
.39392d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39392f		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393933		c8		iny		              INY
.393934		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393936		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.39393a		c8		iny		              INY
.39393b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39393d		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393941		c8		iny		              INY
.393942		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393944		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393948		c8		iny		              INY
.393949		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39394b		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.39394f		6b		rtl		              RTL
.393950						Percussion_6
.393950		e2 20		sep #$20	                SEP #$20        ; set A short
.393952		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393954		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393958		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.39395c		c8		iny		              INY
.39395d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39395f		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393963		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393967		c8		iny		              INY
.393968		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39396a		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.39396e		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393972		c8		iny		              INY
.393973		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393975		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393979		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.39397d		c8		iny		              INY
.39397e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393980		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393984		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393988		6b		rtl		              RTL
.393989						OPL2_SET_REGISTER
.393989		48		pha		                PHA             ; begin setdp macro
.39398a		08		php		                PHP
.39398b		c2 20		rep #$20	                REP #$20        ; set A long
.39398d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393990		5b		tcd		                TCD
.393991		28		plp		                PLP
.393992		68		pla		                PLA             ; end setdp macro
.393993		c2 20		rep #$20	                REP #$20        ; set A long
.393995		18		clc		              CLC
.393996		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393999		65 32		adc $32		              ADC OPL2_PARAMETER0
.39399b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39399d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3939a0		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3939a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3939a4		a5 33		lda $33		              LDA OPL2_PARAMETER1
.3939a6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939a8		6b		rtl		              RTL
.3939a9						OPL2_SET_WAVEFORMSELECT
.3939a9		48		pha		                PHA             ; begin setdp macro
.3939aa		08		php		                PHP
.3939ab		c2 20		rep #$20	                REP #$20        ; set A long
.3939ad		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939b0		5b		tcd		                TCD
.3939b1		28		plp		                PLP
.3939b2		68		pla		                PLA             ; end setdp macro
.3939b3		c2 20		rep #$20	                REP #$20        ; set A long
.3939b5		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3939b8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3939ba		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3939bd		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3939bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3939c1		b0 07		bcs $3939ca	              BCS OPL2_Set_WaveFormSelect_set
.3939c3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939c5		29 df		and #$df	              AND #$DF
.3939c7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939c9		6b		rtl		              RTL
.3939ca						OPL2_Set_WaveFormSelect_set
.3939ca		48		pha		                PHA             ; begin setdp macro
.3939cb		08		php		                PHP
.3939cc		c2 20		rep #$20	                REP #$20        ; set A long
.3939ce		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939d1		5b		tcd		                TCD
.3939d2		28		plp		                PLP
.3939d3		68		pla		                PLA             ; end setdp macro
.3939d4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939d6		09 20 00	ora #$0020	              ORA #$20
.3939d9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939db		6b		rtl		                RTL
.3939dc						OPL2_SET_TREMOLO
.3939dc		48		pha		                PHA             ; begin setdp macro
.3939dd		08		php		                PHP
.3939de		c2 20		rep #$20	                REP #$20        ; set A long
.3939e0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939e3		5b		tcd		                TCD
.3939e4		28		plp		                PLP
.3939e5		68		pla		                PLA             ; end setdp macro
.3939e6		08		php		                PHP ; Push the Carry
.3939e7		c2 20		rep #$20	                REP #$20        ; set A long
.3939e9		18		clc		                CLC
.3939ea		a9 20 00	lda #$0020	                LDA #$0020 ;
.3939ed		85 28		sta $28		                STA OPL2_REG_REGION
.3939ef		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.3939f2		28		plp		                PLP ; Pull the Carry out
.3939f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3939f5		b0 08		bcs $3939ff	                BCS OPL2_Set_Tremolo_Set;
.3939f7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3939f9		29 7f		and #$7f	                AND #$7F
.3939fb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3939fd		80 06		bra $393a05	                BRA OPL2_Set_Tremolo_Exit
.3939ff						OPL2_Set_Tremolo_Set
.3939ff		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a01		09 80		ora #$80	                ORA #$80
.393a03		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a05						OPL2_Set_Tremolo_Exit
.393a05		6b		rtl		                RTL
.393a06						OPL2_GET_TREMOLO
.393a06		48		pha		                PHA             ; begin setdp macro
.393a07		08		php		                PHP
.393a08		c2 20		rep #$20	                REP #$20        ; set A long
.393a0a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a0d		5b		tcd		                TCD
.393a0e		28		plp		                PLP
.393a0f		68		pla		                PLA             ; end setdp macro
.393a10		c2 20		rep #$20	                REP #$20        ; set A long
.393a12		a9 20 00	lda #$0020	                LDA #$0020;
.393a15		85 28		sta $28		                STA OPL2_REG_REGION
.393a17		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393a1a		e2 20		sep #$20	                SEP #$20        ; set A short
.393a1c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a1e		29 80		and #$80	                AND #$80
.393a20		6b		rtl		                RTL
.393a21						OPL2_SET_VIBRATO
.393a21		48		pha		                PHA             ; begin setdp macro
.393a22		08		php		                PHP
.393a23		c2 20		rep #$20	                REP #$20        ; set A long
.393a25		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a28		5b		tcd		                TCD
.393a29		28		plp		                PLP
.393a2a		68		pla		                PLA             ; end setdp macro
.393a2b		08		php		                PHP ; Push the Carry
.393a2c		c2 20		rep #$20	                REP #$20        ; set A long
.393a2e		18		clc		                CLC
.393a2f		a9 20 00	lda #$0020	                LDA #$0020;
.393a32		85 28		sta $28		                STA OPL2_REG_REGION
.393a34		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393a37		28		plp		                PLP ; Pull the Carry out
.393a38		e2 20		sep #$20	                SEP #$20        ; set A short
.393a3a		b0 08		bcs $393a44	                BCS OPL2_Set_Vibrato_Set;
.393a3c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a3e		29 bf		and #$bf	                AND #$BF
.393a40		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a42		80 06		bra $393a4a	                BRA OPL2_Set_Vibrato_Exit
.393a44						OPL2_Set_Vibrato_Set
.393a44		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a46		09 40		ora #$40	                ORA #$40
.393a48		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a4a						OPL2_Set_Vibrato_Exit
.393a4a		6b		rtl		                RTL
.393a4b						OPL2_GET_VIBRATO
.393a4b		48		pha		                PHA             ; begin setdp macro
.393a4c		08		php		                PHP
.393a4d		c2 20		rep #$20	                REP #$20        ; set A long
.393a4f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a52		5b		tcd		                TCD
.393a53		28		plp		                PLP
.393a54		68		pla		                PLA             ; end setdp macro
.393a55		c2 20		rep #$20	                REP #$20        ; set A long
.393a57		a9 20 00	lda #$0020	                LDA #$0020;
.393a5a		85 28		sta $28		                STA OPL2_REG_REGION
.393a5c		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393a5f		e2 20		sep #$20	                SEP #$20        ; set A short
.393a61		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a63		29 40		and #$40	                AND #$40
.393a65		6b		rtl		                RTL
.393a66						OPL2_SET_MAINTAINSUSTAIN
.393a66		48		pha		                PHA             ; begin setdp macro
.393a67		08		php		                PHP
.393a68		c2 20		rep #$20	                REP #$20        ; set A long
.393a6a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a6d		5b		tcd		                TCD
.393a6e		28		plp		                PLP
.393a6f		68		pla		                PLA             ; end setdp macro
.393a70		08		php		              PHP ; Push the Carry
.393a71		c2 20		rep #$20	                REP #$20        ; set A long
.393a73		18		clc		              CLC
.393a74		a9 20 00	lda #$0020	              LDA #$0020;
.393a77		85 28		sta $28		              STA OPL2_REG_REGION
.393a79		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393a7c		28		plp		              PLP ; Pull the Carry out
.393a7d		e2 20		sep #$20	                SEP #$20        ; set A short
.393a7f		b0 08		bcs $393a89	              BCS OPL2_Set_MaintainSustain_Set;
.393a81		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a83		29 df		and #$df	              AND #$DF
.393a85		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a87		80 06		bra $393a8f	              BRA OPL2_Set_MaintainSustain_Exit
.393a89						OPL2_Set_MaintainSustain_Set
.393a89		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a8b		09 20		ora #$20	              ORA #$20
.393a8d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a8f						OPL2_Set_MaintainSustain_Exit
.393a8f		6b		rtl		                RTL
.393a90						OPL2_GET_MAINTAINSUSTAIN
.393a90		48		pha		                PHA             ; begin setdp macro
.393a91		08		php		                PHP
.393a92		c2 20		rep #$20	                REP #$20        ; set A long
.393a94		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a97		5b		tcd		                TCD
.393a98		28		plp		                PLP
.393a99		68		pla		                PLA             ; end setdp macro
.393a9a		c2 20		rep #$20	                REP #$20        ; set A long
.393a9c		a9 20 00	lda #$0020	              LDA #$0020;
.393a9f		85 28		sta $28		              STA OPL2_REG_REGION
.393aa1		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393aa4		e2 20		sep #$20	                SEP #$20        ; set A short
.393aa6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393aa8		29 20		and #$20	              AND #$20
.393aaa		6b		rtl		                RTL
.393aab						OPL2_SET_ENVELOPESCALING
.393aab		48		pha		                PHA             ; begin setdp macro
.393aac		08		php		                PHP
.393aad		c2 20		rep #$20	                REP #$20        ; set A long
.393aaf		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ab2		5b		tcd		                TCD
.393ab3		28		plp		                PLP
.393ab4		68		pla		                PLA             ; end setdp macro
.393ab5		08		php		              PHP ; Push the Carry
.393ab6		c2 20		rep #$20	                REP #$20        ; set A long
.393ab8		18		clc		              CLC
.393ab9		a9 20 00	lda #$0020	              LDA #$0020;
.393abc		85 28		sta $28		              STA OPL2_REG_REGION
.393abe		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393ac1		28		plp		              PLP ; Pull the Carry out
.393ac2		e2 20		sep #$20	                SEP #$20        ; set A short
.393ac4		b0 08		bcs $393ace	              BCS OPL2_Set_EnvelopeScaling_Set;
.393ac6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ac8		29 ef		and #$ef	              AND #$EF
.393aca		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393acc		80 06		bra $393ad4	              BRA OPL2_Set_EnvelopeScaling_Exit
.393ace						OPL2_Set_EnvelopeScaling_Set
.393ace		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393ad0		09 10		ora #$10	              ORA #$10
.393ad2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393ad4						OPL2_Set_EnvelopeScaling_Exit
.393ad4		6b		rtl		                RTL
.393ad5						OPL2_GET_ENVELOPESCALING
.393ad5		48		pha		                PHA             ; begin setdp macro
.393ad6		08		php		                PHP
.393ad7		c2 20		rep #$20	                REP #$20        ; set A long
.393ad9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393adc		5b		tcd		                TCD
.393add		28		plp		                PLP
.393ade		68		pla		                PLA             ; end setdp macro
.393adf		c2 20		rep #$20	                REP #$20        ; set A long
.393ae1		a9 20 00	lda #$0020	              LDA #$0020;
.393ae4		85 28		sta $28		              STA OPL2_REG_REGION
.393ae6		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393ae9		e2 20		sep #$20	                SEP #$20        ; set A short
.393aeb		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393aed		29 10		and #$10	              AND #$10
.393aef		6b		rtl		                RTL
.393af0						OPL2_GET_MODFREQMULTIPLE
.393af0		48		pha		                PHA             ; begin setdp macro
.393af1		08		php		                PHP
.393af2		c2 20		rep #$20	                REP #$20        ; set A long
.393af4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393af7		5b		tcd		                TCD
.393af8		28		plp		                PLP
.393af9		68		pla		                PLA             ; end setdp macro
.393afa		c2 20		rep #$20	                REP #$20        ; set A long
.393afc		a9 20 00	lda #$0020	              LDA #$0020;
.393aff		85 28		sta $28		              STA OPL2_REG_REGION
.393b01		20 e7 3e	jsr $393ee7	              JSR OPL2_GET_REG_OFFSET
.393b04		e2 20		sep #$20	                SEP #$20        ; set A short
.393b06		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393b08		29 0f		and #$0f	              AND #$0F
.393b0a		6b		rtl		              RTL
.393b0b						OPL2_SET_MODFREQMULTIPLE
.393b0b		48		pha		                PHA             ; begin setdp macro
.393b0c		08		php		                PHP
.393b0d		c2 20		rep #$20	                REP #$20        ; set A long
.393b0f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b12		5b		tcd		                TCD
.393b13		28		plp		                PLP
.393b14		68		pla		                PLA             ; end setdp macro
.393b15		c2 20		rep #$20	                REP #$20        ; set A long
.393b17		a9 20 00	lda #$0020	                LDA #$0020;
.393b1a		85 28		sta $28		                STA OPL2_REG_REGION
.393b1c		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393b1f		e2 20		sep #$20	                SEP #$20        ; set A short
.393b21		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393b23		29 0f		and #$0f	                AND #$0F
.393b25		85 32		sta $32		                STA OPL2_PARAMETER0
.393b27		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b29		29 f0		and #$f0	                AND #$F0
.393b2b		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b2d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b2f		6b		rtl		                RTL
.393b30						OPL2_SET_SCALINGLEVEL
.393b30		48		pha		                PHA             ; begin setdp macro
.393b31		08		php		                PHP
.393b32		c2 20		rep #$20	                REP #$20        ; set A long
.393b34		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b37		5b		tcd		                TCD
.393b38		28		plp		                PLP
.393b39		68		pla		                PLA             ; end setdp macro
.393b3a		c2 20		rep #$20	                REP #$20        ; set A long
.393b3c		a9 40 00	lda #$0040	                LDA #$0040;
.393b3f		85 28		sta $28		                STA OPL2_REG_REGION
.393b41		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393b44		e2 20		sep #$20	                SEP #$20        ; set A short
.393b46		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393b48		29 03		and #$03	                AND #$03
.393b4a		0a		asl a		                ASL
.393b4b		0a		asl a		                ASL
.393b4c		0a		asl a		                ASL
.393b4d		0a		asl a		                ASL
.393b4e		0a		asl a		                ASL
.393b4f		0a		asl a		                ASL
.393b50		85 32		sta $32		                STA OPL2_PARAMETER0
.393b52		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b54		29 3f		and #$3f	                AND #$3F
.393b56		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b58		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b5a		6b		rtl		                RTL
.393b5b						OPL2_SET_VOLUME
.393b5b		48		pha		                PHA             ; begin setdp macro
.393b5c		08		php		                PHP
.393b5d		c2 20		rep #$20	                REP #$20        ; set A long
.393b5f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b62		5b		tcd		                TCD
.393b63		28		plp		                PLP
.393b64		68		pla		                PLA             ; end setdp macro
.393b65		c2 20		rep #$20	                REP #$20        ; set A long
.393b67		a9 40 00	lda #$0040	                LDA #$0040  ;
.393b6a		85 28		sta $28		                STA OPL2_REG_REGION
.393b6c		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393b6f		e2 20		sep #$20	                SEP #$20        ; set A short
.393b71		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393b73		29 3f		and #$3f	                AND #$3F
.393b75		85 32		sta $32		                STA OPL2_PARAMETER0
.393b77		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b79		29 c0		and #$c0	                AND #$C0
.393b7b		05 32		ora $32		                ORA OPL2_PARAMETER0
.393b7d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393b7f		6b		rtl		                RTL
.393b80						OPL2_GET_VOLUME
.393b80		48		pha		                PHA             ; begin setdp macro
.393b81		08		php		                PHP
.393b82		c2 20		rep #$20	                REP #$20        ; set A long
.393b84		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393b87		5b		tcd		                TCD
.393b88		28		plp		                PLP
.393b89		68		pla		                PLA             ; end setdp macro
.393b8a		c2 20		rep #$20	                REP #$20        ; set A long
.393b8c		a9 40 00	lda #$0040	                LDA #$0040  ;
.393b8f		85 28		sta $28		                STA OPL2_REG_REGION
.393b91		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393b94		e2 20		sep #$20	                SEP #$20        ; set A short
.393b96		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393b98		29 3f		and #$3f	                AND #$3F
.393b9a		6b		rtl		                RTL
.393b9b						OPL2_SET_ATTACK
.393b9b		48		pha		                PHA             ; begin setdp macro
.393b9c		08		php		                PHP
.393b9d		c2 20		rep #$20	                REP #$20        ; set A long
.393b9f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ba2		5b		tcd		                TCD
.393ba3		28		plp		                PLP
.393ba4		68		pla		                PLA             ; end setdp macro
.393ba5		c2 20		rep #$20	                REP #$20        ; set A long
.393ba7		a9 60 00	lda #$0060	                LDA #$0060  ;
.393baa		85 28		sta $28		                STA OPL2_REG_REGION
.393bac		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393baf		e2 20		sep #$20	                SEP #$20        ; set A short
.393bb1		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393bb3		29 0f		and #$0f	                AND #$0F
.393bb5		0a		asl a		                ASL
.393bb6		0a		asl a		                ASL
.393bb7		0a		asl a		                ASL
.393bb8		0a		asl a		                ASL
.393bb9		85 32		sta $32		                STA OPL2_PARAMETER0
.393bbb		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bbd		29 0f		and #$0f	                AND #$0F
.393bbf		05 32		ora $32		                ORA OPL2_PARAMETER0
.393bc1		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393bc3		6b		rtl		                RTL
.393bc4						OPL2_GET_ATTACK
.393bc4		48		pha		                PHA             ; begin setdp macro
.393bc5		08		php		                PHP
.393bc6		c2 20		rep #$20	                REP #$20        ; set A long
.393bc8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bcb		5b		tcd		                TCD
.393bcc		28		plp		                PLP
.393bcd		68		pla		                PLA             ; end setdp macro
.393bce		c2 20		rep #$20	                REP #$20        ; set A long
.393bd0		a9 60 00	lda #$0060	                LDA #$0060
.393bd3		85 28		sta $28		                STA OPL2_REG_REGION
.393bd5		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393bd8		e2 20		sep #$20	                SEP #$20        ; set A short
.393bda		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393bdc		29 f0		and #$f0	                AND #$F0
.393bde		4a		lsr a		                LSR
.393bdf		4a		lsr a		                LSR
.393be0		4a		lsr a		                LSR
.393be1		4a		lsr a		                LSR
.393be2		6b		rtl		                RTL
.393be3						OPL2_SET_DECAY
.393be3		48		pha		                PHA             ; begin setdp macro
.393be4		08		php		                PHP
.393be5		c2 20		rep #$20	                REP #$20        ; set A long
.393be7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393bea		5b		tcd		                TCD
.393beb		28		plp		                PLP
.393bec		68		pla		                PLA             ; end setdp macro
.393bed		c2 20		rep #$20	                REP #$20        ; set A long
.393bef		a9 60 00	lda #$0060	                LDA #$0060;
.393bf2		85 28		sta $28		                STA OPL2_REG_REGION
.393bf4		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393bf7		e2 20		sep #$20	                SEP #$20        ; set A short
.393bf9		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393bfb		29 0f		and #$0f	                AND #$0F
.393bfd		85 32		sta $32		                STA OPL2_PARAMETER0
.393bff		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c01		29 f0		and #$f0	                AND #$F0
.393c03		05 32		ora $32		                ORA OPL2_PARAMETER0
.393c05		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c07		6b		rtl		                RTL
.393c08						OPL2_GET_DECAY
.393c08		48		pha		                PHA             ; begin setdp macro
.393c09		08		php		                PHP
.393c0a		c2 20		rep #$20	                REP #$20        ; set A long
.393c0c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c0f		5b		tcd		                TCD
.393c10		28		plp		                PLP
.393c11		68		pla		                PLA             ; end setdp macro
.393c12		c2 20		rep #$20	                REP #$20        ; set A long
.393c14		a9 60 00	lda #$0060	                LDA #$0060
.393c17		85 28		sta $28		                STA OPL2_REG_REGION
.393c19		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393c1c		e2 20		sep #$20	                SEP #$20        ; set A short
.393c1e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c20		29 0f		and #$0f	                AND #$0F
.393c22		6b		rtl		                RTL
.393c23						OPL2_SET_SUSTAIN
.393c23		48		pha		                PHA             ; begin setdp macro
.393c24		08		php		                PHP
.393c25		c2 20		rep #$20	                REP #$20        ; set A long
.393c27		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c2a		5b		tcd		                TCD
.393c2b		28		plp		                PLP
.393c2c		68		pla		                PLA             ; end setdp macro
.393c2d		c2 20		rep #$20	                REP #$20        ; set A long
.393c2f		a9 80 00	lda #$0080	                LDA #$0080;
.393c32		85 28		sta $28		                STA OPL2_REG_REGION
.393c34		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393c37		e2 20		sep #$20	                SEP #$20        ; set A short
.393c39		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c3b		29 0f		and #$0f	                AND #$0F
.393c3d		0a		asl a		                ASL
.393c3e		0a		asl a		                ASL
.393c3f		0a		asl a		                ASL
.393c40		0a		asl a		                ASL
.393c41		85 32		sta $32		                STA OPL2_PARAMETER0
.393c43		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c45		29 0f		and #$0f	                AND #$0F
.393c47		05 32		ora $32		                ORA OPL2_PARAMETER0
.393c49		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c4b		6b		rtl		                RTL
.393c4c						OPL2_GET_SUSTAIN
.393c4c		48		pha		                PHA             ; begin setdp macro
.393c4d		08		php		                PHP
.393c4e		c2 20		rep #$20	                REP #$20        ; set A long
.393c50		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c53		5b		tcd		                TCD
.393c54		28		plp		                PLP
.393c55		68		pla		                PLA             ; end setdp macro
.393c56		c2 20		rep #$20	                REP #$20        ; set A long
.393c58		a9 80 00	lda #$0080	                LDA #$0080
.393c5b		85 28		sta $28		                STA OPL2_REG_REGION
.393c5d		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393c60		e2 20		sep #$20	                SEP #$20        ; set A short
.393c62		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c64		29 f0		and #$f0	                AND #$F0
.393c66		4a		lsr a		                LSR
.393c67		4a		lsr a		                LSR
.393c68		4a		lsr a		                LSR
.393c69		4a		lsr a		                LSR
.393c6a		6b		rtl		                RTL
.393c6b						OPL2_SET_RELEASE
.393c6b		48		pha		                PHA             ; begin setdp macro
.393c6c		08		php		                PHP
.393c6d		c2 20		rep #$20	                REP #$20        ; set A long
.393c6f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c72		5b		tcd		                TCD
.393c73		28		plp		                PLP
.393c74		68		pla		                PLA             ; end setdp macro
.393c75		c2 20		rep #$20	                REP #$20        ; set A long
.393c77		a9 80 00	lda #$0080	                LDA #$0080;
.393c7a		85 28		sta $28		                STA OPL2_REG_REGION
.393c7c		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393c7f		e2 20		sep #$20	                SEP #$20        ; set A short
.393c81		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393c83		29 0f		and #$0f	                AND #$0F
.393c85		85 32		sta $32		                STA OPL2_PARAMETER0
.393c87		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393c89		29 f0		and #$f0	                AND #$F0
.393c8b		05 32		ora $32		                ORA OPL2_PARAMETER0
.393c8d		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393c8f		6b		rtl		                RTL
.393c90						OPL2_GET_RELEASE
.393c90		48		pha		                PHA             ; begin setdp macro
.393c91		08		php		                PHP
.393c92		c2 20		rep #$20	                REP #$20        ; set A long
.393c94		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393c97		5b		tcd		                TCD
.393c98		28		plp		                PLP
.393c99		68		pla		                PLA             ; end setdp macro
.393c9a		c2 20		rep #$20	                REP #$20        ; set A long
.393c9c		a9 80 00	lda #$0080	                LDA #$0080
.393c9f		85 28		sta $28		                STA OPL2_REG_REGION
.393ca1		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393ca4		e2 20		sep #$20	                SEP #$20        ; set A short
.393ca6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ca8		29 0f		and #$0f	                AND #$0F
.393caa		6b		rtl		                RTL
.393cab						OPL2_SET_FNUMBER
.393cab		48		pha		                PHA             ; begin setdp macro
.393cac		08		php		                PHP
.393cad		c2 20		rep #$20	                REP #$20        ; set A long
.393caf		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cb2		5b		tcd		                TCD
.393cb3		28		plp		                PLP
.393cb4		68		pla		                PLA             ; end setdp macro
.393cb5		e2 20		sep #$20	                SEP #$20        ; set A short
.393cb7		18		clc		                CLC
.393cb8		a5 27		lda $27		                LDA OPL2_CHANNEL
.393cba		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393cbc		69 a0		adc #$a0	                ADC #$A0
.393cbe		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393cc0		a9 00		lda #$00	                LDA #$00
.393cc2		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393cc4		c2 30		rep #$30	                REP #$30        ; set A&X long
.393cc6		18		clc		                CLC
.393cc7		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393cca		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393ccc		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393cce		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393cd1		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393cd3		e2 20		sep #$20	                SEP #$20        ; set A short
.393cd5		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393cd7		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393cd9		18		clc		                CLC
.393cda		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393cdc		69 10		adc #$10	                ADC #$10
.393cde		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ce0		a5 33		lda $33		                LDA OPL2_PARAMETER1
.393ce2		29 03		and #$03	                AND #$03
.393ce4		85 33		sta $33		                STA OPL2_PARAMETER1
.393ce6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ce8		29 fc		and #$fc	                AND #$FC
.393cea		05 33		ora $33		                ORA OPL2_PARAMETER1
.393cec		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393cee		6b		rtl		                RTL
.393cef						OPL2_GET_FNUMBER
.393cef		48		pha		                PHA             ; begin setdp macro
.393cf0		08		php		                PHP
.393cf1		c2 20		rep #$20	                REP #$20        ; set A long
.393cf3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393cf6		5b		tcd		                TCD
.393cf7		28		plp		                PLP
.393cf8		68		pla		                PLA             ; end setdp macro
.393cf9		e2 20		sep #$20	                SEP #$20        ; set A short
.393cfb		18		clc		                CLC
.393cfc		a5 27		lda $27		                LDA OPL2_CHANNEL
.393cfe		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d00		69 a0		adc #$a0	                ADC #$A0
.393d02		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d04		a9 00		lda #$00	                LDA #$00
.393d06		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d08		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d0a		18		clc		                CLC
.393d0b		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d0e		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d10		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d12		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d15		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d17		e2 20		sep #$20	                SEP #$20        ; set A short
.393d19		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d1b		85 32		sta $32		                STA OPL2_PARAMETER0
.393d1d		18		clc		                CLC
.393d1e		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393d20		69 10		adc #$10	                ADC #$10
.393d22		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d24		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d26		29 03		and #$03	                AND #$03
.393d28		85 33		sta $33		                STA OPL2_PARAMETER1
.393d2a		6b		rtl		                RTL
.393d2b						OPL2_Set_Frequency
.393d2b		6b		rtl		                RTL
.393d2c						OPL2_Get_Frequency
.393d2c		6b		rtl		                RTL
.393d2d						OPL2_SET_BLOCK
.393d2d		48		pha		                PHA             ; begin setdp macro
.393d2e		08		php		                PHP
.393d2f		c2 20		rep #$20	                REP #$20        ; set A long
.393d31		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d34		5b		tcd		                TCD
.393d35		28		plp		                PLP
.393d36		68		pla		                PLA             ; end setdp macro
.393d37		e2 20		sep #$20	                SEP #$20        ; set A short
.393d39		18		clc		                CLC
.393d3a		a5 27		lda $27		                LDA OPL2_CHANNEL
.393d3c		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d3e		69 b0		adc #$b0	                ADC #$B0
.393d40		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d42		a9 00		lda #$00	                LDA #$00
.393d44		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d46		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d48		18		clc		                CLC
.393d49		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d4c		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d4e		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d50		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d53		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d55		e2 20		sep #$20	                SEP #$20        ; set A short
.393d57		a5 31		lda $31		                LDA OPL2_OCTAVE
.393d59		29 07		and #$07	                AND #$07
.393d5b		0a		asl a		                ASL
.393d5c		0a		asl a		                ASL
.393d5d		85 31		sta $31		                STA OPL2_OCTAVE
.393d5f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d61		29 e3		and #$e3	                AND #$E3
.393d63		05 31		ora $31		                ORA OPL2_OCTAVE
.393d65		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393d67		60		rts		                RTS
.393d68						OPL2_SET_KEYON
.393d68		48		pha		                PHA             ; begin setdp macro
.393d69		08		php		                PHP
.393d6a		c2 20		rep #$20	                REP #$20        ; set A long
.393d6c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393d6f		5b		tcd		                TCD
.393d70		28		plp		                PLP
.393d71		68		pla		                PLA             ; end setdp macro
.393d72		e2 20		sep #$20	                SEP #$20        ; set A short
.393d74		18		clc		                CLC
.393d75		a5 27		lda $27		                LDA OPL2_CHANNEL
.393d77		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393d79		69 b0		adc #$b0	                ADC #$B0
.393d7b		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393d7d		a9 00		lda #$00	                LDA #$00
.393d7f		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393d81		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d83		18		clc		                CLC
.393d84		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393d87		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393d89		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393d8b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393d8e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393d90		e2 20		sep #$20	                SEP #$20        ; set A short
.393d92		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393d94		29 01		and #$01	                AND #$01
.393d96		f0 02		beq $393d9a	                BEQ SET_KEYON_OFF
.393d98		a9 20		lda #$20	                LDA #$20
.393d9a						    SET_KEYON_OFF
.393d9a		85 32		sta $32		                STA OPL2_PARAMETER0
.393d9c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393d9e		29 df		and #$df	                AND #$DF
.393da0		05 32		ora $32		                ORA OPL2_PARAMETER0
.393da2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393da4		60		rts		                RTS
.393da5						OPL2_SET_FEEDBACK
.393da5		48		pha		                PHA             ; begin setdp macro
.393da6		08		php		                PHP
.393da7		c2 20		rep #$20	                REP #$20        ; set A long
.393da9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393dac		5b		tcd		                TCD
.393dad		28		plp		                PLP
.393dae		68		pla		                PLA             ; end setdp macro
.393daf		e2 20		sep #$20	                SEP #$20        ; set A short
.393db1		18		clc		              CLC
.393db2		a5 27		lda $27		              LDA OPL2_CHANNEL
.393db4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393db6		69 c0		adc #$c0	              ADC #$C0
.393db8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393dba		a9 00		lda #$00	              LDA #$00
.393dbc		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393dbe		c2 30		rep #$30	                REP #$30        ; set A&X long
.393dc0		18		clc		              CLC
.393dc1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393dc4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393dc6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393dc8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393dcb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393dcd		e2 20		sep #$20	                SEP #$20        ; set A short
.393dcf		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393dd1		29 07		and #$07	              AND #$07
.393dd3		0a		asl a		              ASL
.393dd4		85 32		sta $32		              STA OPL2_PARAMETER0
.393dd6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393dd8		29 01		and #$01	              AND #$01
.393dda		05 32		ora $32		              ORA OPL2_PARAMETER0
.393ddc		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393dde		6b		rtl		                RTL
.393ddf						OPL2_SET_SYNTHMODE
.393ddf		48		pha		                PHA             ; begin setdp macro
.393de0		08		php		                PHP
.393de1		c2 20		rep #$20	                REP #$20        ; set A long
.393de3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393de6		5b		tcd		                TCD
.393de7		28		plp		                PLP
.393de8		68		pla		                PLA             ; end setdp macro
.393de9		08		php		              PHP ; Push the Carry
.393dea		e2 20		sep #$20	                SEP #$20        ; set A short
.393dec		18		clc		              CLC
.393ded		a5 27		lda $27		              LDA OPL2_CHANNEL
.393def		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393df1		69 c0		adc #$c0	              ADC #$C0
.393df3		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393df5		a9 00		lda #$00	              LDA #$00
.393df7		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393df9		c2 30		rep #$30	                REP #$30        ; set A&X long
.393dfb		18		clc		              CLC
.393dfc		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393dff		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393e01		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e03		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e06		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393e08		28		plp		              PLP ; Pull the Carry out
.393e09		e2 20		sep #$20	                SEP #$20        ; set A short
.393e0b		b0 08		bcs $393e15	              BCS OPL2_Set_Synthmode_Set;
.393e0d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e0f		29 fe		and #$fe	              AND #$FE
.393e11		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e13		80 06		bra $393e1b	              BRA OPL2_Set_Synthmode_Exit
.393e15						OPL2_Set_Synthmode_Set
.393e15		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e17		09 01		ora #$01	              ORA #$01
.393e19		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e1b						OPL2_Set_Synthmode_Exit
.393e1b		6b		rtl		                RTL
.393e1c						OPL2_SET_DEEPTREMOLO
.393e1c		48		pha		                PHA             ; begin setdp macro
.393e1d		08		php		                PHP
.393e1e		c2 20		rep #$20	                REP #$20        ; set A long
.393e20		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e23		5b		tcd		                TCD
.393e24		28		plp		                PLP
.393e25		68		pla		                PLA             ; end setdp macro
.393e26		c2 20		rep #$20	                REP #$20        ; set A long
.393e28		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393e2b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e2d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e30		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393e32		e2 20		sep #$20	                SEP #$20        ; set A short
.393e34		b0 08		bcs $393e3e	              BCS OPL2_Set_DeepTremolo_Set;
.393e36		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e38		29 7f		and #$7f	              AND #$7F
.393e3a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e3c		80 06		bra $393e44	              BRA OPL2_Set_DeepTremolo_Exit
.393e3e						OPL2_Set_DeepTremolo_Set
.393e3e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e40		09 80		ora #$80	              ORA #$80
.393e42		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e44						OPL2_Set_DeepTremolo_Exit
.393e44		6b		rtl		                RTL
.393e45						OPL2_SET_DEEPVIBRATO
.393e45		48		pha		                PHA             ; begin setdp macro
.393e46		08		php		                PHP
.393e47		c2 20		rep #$20	                REP #$20        ; set A long
.393e49		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e4c		5b		tcd		                TCD
.393e4d		28		plp		                PLP
.393e4e		68		pla		                PLA             ; end setdp macro
.393e4f		c2 20		rep #$20	                REP #$20        ; set A long
.393e51		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393e54		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393e56		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393e59		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393e5b		e2 20		sep #$20	                SEP #$20        ; set A short
.393e5d		b0 08		bcs $393e67	              BCS OPL2_Set_DeepVibrato_Set;
.393e5f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e61		29 bf		and #$bf	              AND #$BF
.393e63		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e65		80 06		bra $393e6d	              BRA OPL2_Set_DeepVibrato_Exit
.393e67						OPL2_Set_DeepVibrato_Set
.393e67		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393e69		09 40		ora #$40	              ORA #$40
.393e6b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393e6d						OPL2_Set_DeepVibrato_Exit
.393e6d		6b		rtl		                RTL
.393e6e						OPL2_SET_PERCUSSION
.393e6e		48		pha		                PHA             ; begin setdp macro
.393e6f		08		php		                PHP
.393e70		c2 20		rep #$20	                REP #$20        ; set A long
.393e72		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e75		5b		tcd		                TCD
.393e76		28		plp		                PLP
.393e77		68		pla		                PLA             ; end setdp macro
.393e78		c2 20		rep #$20	                REP #$20        ; set A long
.393e7a		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393e7d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393e7f		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393e82		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393e84		e2 20		sep #$20	                SEP #$20        ; set A short
.393e86		b0 08		bcs $393e90	                BCS OPL2_Set_Percussion_Set;
.393e88		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e8a		29 df		and #$df	                AND #$DF
.393e8c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e8e		80 06		bra $393e96	                BRA OPL2_Set_Percussion_Exit
.393e90						OPL2_Set_Percussion_Set
.393e90		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393e92		09 20		ora #$20	                ORA #$20
.393e94		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393e96						OPL2_Set_Percussion_Exit
.393e96		6b		rtl		                RTL
.393e97						OPL2_SET_DRUMS
.393e97		48		pha		                PHA             ; begin setdp macro
.393e98		08		php		                PHP
.393e99		c2 20		rep #$20	                REP #$20        ; set A long
.393e9b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393e9e		5b		tcd		                TCD
.393e9f		28		plp		                PLP
.393ea0		68		pla		                PLA             ; end setdp macro
.393ea1		c2 20		rep #$20	                REP #$20        ; set A long
.393ea3		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393ea6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393ea8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393eab		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393ead		e2 20		sep #$20	                SEP #$20        ; set A short
.393eaf		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393eb1		29 1f		and #$1f	                AND #$1F
.393eb3		85 32		sta $32		                STA OPL2_PARAMETER0
.393eb5		49 ff		eor #$ff	                EOR #$FF
.393eb7		85 33		sta $33		                STA OPL2_PARAMETER1
.393eb9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ebb		25 33		and $33		                AND OPL2_PARAMETER1
.393ebd		05 32		ora $32		                ORA OPL2_PARAMETER0
.393ebf		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ec1		6b		rtl		                RTL
.393ec2						OPL2_SET_WAVEFORM
.393ec2		48		pha		                PHA             ; begin setdp macro
.393ec3		08		php		                PHP
.393ec4		c2 20		rep #$20	                REP #$20        ; set A long
.393ec6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393ec9		5b		tcd		                TCD
.393eca		28		plp		                PLP
.393ecb		68		pla		                PLA             ; end setdp macro
.393ecc		c2 20		rep #$20	                REP #$20        ; set A long
.393ece		a9 e0 00	lda #$00e0	                LDA #$00E0;
.393ed1		85 28		sta $28		                STA OPL2_REG_REGION
.393ed3		20 e7 3e	jsr $393ee7	                JSR OPL2_GET_REG_OFFSET
.393ed6		e2 20		sep #$20	                SEP #$20        ; set A short
.393ed8		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393eda		29 03		and #$03	                AND #$03
.393edc		85 32		sta $32		                STA OPL2_PARAMETER0
.393ede		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393ee0		29 fc		and #$fc	                AND #$FC
.393ee2		05 32		ora $32		                ORA OPL2_PARAMETER0
.393ee4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393ee6		6b		rtl		                RTL
.393ee7						OPL2_GET_REG_OFFSET
.393ee7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.393ee9		a5 27		lda $27		                LDA OPL2_CHANNEL
.393eeb		29 0f		and #$0f	                AND #$0F
.393eed		aa		tax		                TAX
.393eee		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393ef0		d0 06		bne $393ef8	                BNE OPL2_Get_Register_Offset_l0
.393ef2		bf 2f 15 39	lda $39152f,x	                LDA @lregisterOffsets_operator0, X
.393ef6		80 04		bra $393efc	                BRA OPL2_Get_Register_Offset_exit
.393ef8						OPL2_Get_Register_Offset_l0
.393ef8		bf 38 15 39	lda $391538,x	                LDA @lregisterOffsets_operator1, X
.393efc						OPL2_Get_Register_Offset_exit
.393efc		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393efe		a9 00		lda #$00	                LDA #$00
.393f00		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393f02		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f04		18		clc		                CLC
.393f05		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393f08		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393f0a		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393f0c		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393f0e		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393f11		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393f13		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393f14						ITRACE
.393f14		08		php		                PHP
.393f15		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f17		8b		phb		                PHB                 ; Print the text
.393f18		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393f1a		aa		tax		                TAX                 ; ... into X
.393f1b		e2 20		sep #$20	                SEP #$20        ; set A short
.393f1d		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393f1f		48		pha		                PHA
.393f20		ab		plb		                PLB                 ; ... into B
.393f21		22 85 07 39	jsl $390785	                JSL IPUTS           ; Print the string
.393f25		c2 20		rep #$20	                REP #$20        ; set A long
.393f27		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393f29		83 08		sta $08,s	                STA #8,S
.393f2b		a3 02		lda $02,s	                LDA #2,S
.393f2d		83 06		sta $06,s	                STA #6,S
.393f2f		ab		plb		                PLB
.393f30		68		pla		                PLA                 ; Clean up the stack
.393f31		68		pla		                PLA
.393f32		28		plp		                PLP
.393f33		6b		rtl		                RTL
.393f34						ISETTIMEOUT
.393f34		8b		phb		                PHB
.393f35		0b		phd		                PHD
.393f36		08		php		                PHP
.393f37		48		pha		                PHA             ; begin setdbr macro
.393f38		08		php		                PHP
.393f39		e2 20		sep #$20	                SEP #$20        ; set A short
.393f3b		a9 00		lda #$00	                LDA #0
.393f3d		48		pha		                PHA
.393f3e		ab		plb		                PLB
.393f3f		28		plp		                PLP
.393f40		68		pla		                PLA             ; end setdbr macro
.393f41		48		pha		                PHA             ; begin setdp macro
.393f42		08		php		                PHP
.393f43		c2 20		rep #$20	                REP #$20        ; set A long
.393f45		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f48		5b		tcd		                TCD
.393f49		28		plp		                PLP
.393f4a		68		pla		                PLA             ; end setdp macro
.393f4b		78		sei		                SEI                             ; We don't want to be interrupted
.393f4c		e2 20		sep #$20	                SEP #$20        ; set A short
.393f4e		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393f50		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.393f52		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.393f54		85 0c		sta $032c	                STA @b BIOS_FLAGS
.393f56		28		plp		done            PLP
.393f57		2b		pld		                PLD
.393f58		ab		plb		                PLB
.393f59		6b		rtl		                RTL
.393f5a						ICMDBLOCK
.393f5a		0b		phd		                PHD
.393f5b		08		php		                PHP
.393f5c		48		pha		                PHA             ; begin setdp macro
.393f5d		08		php		                PHP
.393f5e		c2 20		rep #$20	                REP #$20        ; set A long
.393f60		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f63		5b		tcd		                TCD
.393f64		28		plp		                PLP
.393f65		68		pla		                PLA             ; end setdp macro
.393f66		e2 20		sep #$20	                SEP #$20        ; set A short
.393f68		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393f6a		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393f6c		d0 06		bne $393f74	                BNE ret_success             ; No: just return
.393f6e		22 54 67 39	jsl $396754	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393f72		90 0c		bcc $393f80	                BCC pass_failure
.393f74						ret_success
.393f74		e2 20		sep #$20	                SEP #$20        ; set A short
.393f76		64 00		stz $0320	                STZ BIOS_STATUS
.393f78		28		plp		                PLP
.393f79		2b		pld		                PLD
.393f7a		38		sec		                SEC
.393f7b		6b		rtl		                RTL
.393f7c						ret_failure
.393f7c		e2 20		sep #$20	                SEP #$20        ; set A short
.393f7e		85 00		sta $0320	                STA BIOS_STATUS
.393f80		28		plp		pass_failure    PLP
.393f81		2b		pld		                PLD
.393f82		18		clc		                CLC
.393f83		6b		rtl		                RTL
.393f84						IGETBLOCK
.393f84		5a		phy		                PHY
.393f85		0b		phd		                PHD
.393f86		8b		phb		                PHB
.393f87		08		php		                PHP
.393f88		48		pha		                PHA             ; begin setdbr macro
.393f89		08		php		                PHP
.393f8a		e2 20		sep #$20	                SEP #$20        ; set A short
.393f8c		a9 00		lda #$00	                LDA #0
.393f8e		48		pha		                PHA
.393f8f		ab		plb		                PLB
.393f90		28		plp		                PLP
.393f91		68		pla		                PLA             ; end setdbr macro
.393f92		48		pha		                PHA             ; begin setdp macro
.393f93		08		php		                PHP
.393f94		c2 20		rep #$20	                REP #$20        ; set A long
.393f96		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f99		5b		tcd		                TCD
.393f9a		28		plp		                PLP
.393f9b		68		pla		                PLA             ; end setdp macro
.393f9c		e2 20		sep #$20	                SEP #$20        ; set A short
.393f9e		a0 00 00	ldy #$0000	                LDY #0
.393fa1		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.393fa3		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.393fa5		c8		iny		                INY
.393fa6		c0 00 02	cpy #$0200	                CPY #512
.393fa9		d0 f8		bne $393fa3	                BNE clr_loop
.393fab		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393fad		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393faf		f0 14		beq $393fc5	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393fb1		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.393fb3		f0 18		beq $393fcd	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.393fb5		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393fb7		f0 1c		beq $393fd5	                BEQ hd_getblock
.393fb9		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393fbb						ret_failure
.393fbb		e2 20		sep #$20	                SEP #$20        ; set A short
.393fbd		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393fbf		28		plp		                PLP
.393fc0		ab		plb		                PLB
.393fc1		2b		pld		                PLD
.393fc2		7a		ply		                PLY
.393fc3		38		sec		                SEC                                 ; Return failure
.393fc4		6b		rtl		                RTL
.393fc5		22 60 5c 39	jsl $395c60	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.393fc9		b0 12		bcs $393fdd	                BCS ret_success
.393fcb		80 ee		bra $393fbb	                BRA ret_failure
.393fcd		22 59 65 39	jsl $396559	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.393fd1		b0 0a		bcs $393fdd	                BCS ret_success
.393fd3		80 e6		bra $393fbb	                BRA ret_failure
.393fd5		22 6d 6b 39	jsl $396b6d	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.393fd9		b0 02		bcs $393fdd	                BCS ret_success
.393fdb		80 de		bra $393fbb	                BRA ret_failure
.393fdd						ret_success
.393fdd		e2 20		sep #$20	                SEP #$20        ; set A short
.393fdf		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393fe1		28		plp		                PLP
.393fe2		ab		plb		                PLB
.393fe3		2b		pld		                PLD
.393fe4		7a		ply		                PLY
.393fe5		38		sec		                SEC                                 ; Return success
.393fe6		6b		rtl		                RTL
.393fe7						IPUTBLOCK
.393fe7		0b		phd		                PHD
.393fe8		8b		phb		                PHB
.393fe9		08		php		                PHP
.393fea		48		pha		                PHA             ; begin setdbr macro
.393feb		08		php		                PHP
.393fec		e2 20		sep #$20	                SEP #$20        ; set A short
.393fee		a9 00		lda #$00	                LDA #0
.393ff0		48		pha		                PHA
.393ff1		ab		plb		                PLB
.393ff2		28		plp		                PLP
.393ff3		68		pla		                PLA             ; end setdbr macro
.393ff4		48		pha		                PHA             ; begin setdp macro
.393ff5		08		php		                PHP
.393ff6		c2 20		rep #$20	                REP #$20        ; set A long
.393ff8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393ffb		5b		tcd		                TCD
.393ffc		28		plp		                PLP
.393ffd		68		pla		                PLA             ; end setdp macro
.393ffe		e2 20		sep #$20	                SEP #$20        ; set A short
.394000		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.394002		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.394004		f0 13		beq $394019	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.394006		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.394008		f0 17		beq $394021	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.39400a		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.39400c		f0 1b		beq $394029	                BEQ hd_putblock
.39400e		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.394010						ret_failure
.394010		e2 20		sep #$20	                SEP #$20        ; set A short
.394012		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.394014		28		plp		                PLP
.394015		ab		plb		                PLB
.394016		2b		pld		                PLD
.394017		18		clc		                CLC                                 ; Return failure
.394018		6b		rtl		                RTL
.394019		22 07 5d 39	jsl $395d07	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.39401d		90 f1		bcc $394010	                BCC ret_failure
.39401f		80 10		bra $394031	                BRA ret_success
.394021		22 be 65 39	jsl $3965be	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.394025		90 e9		bcc $394010	                BCC ret_failure
.394027		80 08		bra $394031	                BRA ret_success
.394029		22 fe 6b 39	jsl $396bfe	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.39402d		90 e1		bcc $394010	                BCC ret_failure
.39402f		80 00		bra $394031	                BRA ret_success
.394031						ret_success
.394031		e2 20		sep #$20	                SEP #$20        ; set A short
.394033		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.394035		28		plp		                PLP
.394036		ab		plb		                PLB
.394037		2b		pld		                PLD
.394038		38		sec		                SEC                                 ; Return success
.394039		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.39403a						DOS_DIROPEN
.39403a		da		phx		                PHX
.39403b		5a		phy		                PHY
.39403c		0b		phd		                PHD
.39403d		8b		phb		                PHB
.39403e		08		php		                PHP
.39403f		48		pha		                PHA             ; begin setdbr macro
.394040		08		php		                PHP
.394041		e2 20		sep #$20	                SEP #$20        ; set A short
.394043		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394045		48		pha		                PHA
.394046		ab		plb		                PLB
.394047		28		plp		                PLP
.394048		68		pla		                PLA             ; end setdbr macro
.394049		48		pha		                PHA             ; begin setdp macro
.39404a		08		php		                PHP
.39404b		c2 20		rep #$20	                REP #$20        ; set A long
.39404d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394050		5b		tcd		                TCD
.394051		28		plp		                PLP
.394052		68		pla		                PLA             ; end setdp macro
.394053		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.394056		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.394059		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.39405c		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.39405f		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.394062		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394064		85 18		sta $0338	                STA DOS_DIR_PTR
.394066		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394069		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39406b		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.39406d		e2 20		sep #$20	                SEP #$20        ; set A short
.39406f		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.394072		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.394074		d0 24		bne $39409a	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.394076						fetch_fat12
.394076		e2 20		sep #$20	                SEP #$20        ; set A short
.394078		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.39407a		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.39407d		c2 20		rep #$20	                REP #$20        ; set A long
.39407f		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.394081		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394083		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.394085		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394087		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.39408a		85 02		sta $0322	                STA BIOS_LBA
.39408c		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39408f		85 04		sta $0324	                STA BIOS_LBA+2
.394091		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.394095		b0 1f		bcs $3940b6	                BCS do_success              ; If sucessful, set the directory cursor
.394097		82 19 17	brl $3957b3	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39409a						fetch_fat32
.39409a		e2 20		sep #$20	                SEP #$20        ; set A short
.39409c		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.39409e		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.3940a1		c2 20		rep #$20	                REP #$20        ; set A long
.3940a3		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.3940a6		85 10		sta $0330	                STA DOS_CLUS_ID
.3940a8		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.3940ab		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3940ad		22 1d 46 39	jsl $39461d	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.3940b1		b0 03		bcs $3940b6	                BCS do_success              ; If successful: set the directory cursor
.3940b3		82 fd 16	brl $3957b3	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.3940b6		82 01 17	brl $3957ba	do_success      BRL IF_SUCCESS
.3940b9						DOS_DIRFIRST
.3940b9		0b		phd		                PHD
.3940ba		08		php		                PHP
.3940bb		48		pha		                PHA             ; begin setdp macro
.3940bc		08		php		                PHP
.3940bd		c2 20		rep #$20	                REP #$20        ; set A long
.3940bf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940c2		5b		tcd		                TCD
.3940c3		28		plp		                PLP
.3940c4		68		pla		                PLA             ; end setdp macro
.3940c5		c2 20		rep #$20	                REP #$20        ; set A long
.3940c7		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.3940ca		85 18		sta $0338	                STA DOS_DIR_PTR
.3940cc		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3940cf		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3940d1		28		plp		                PLP
.3940d2		2b		pld		                PLD
.3940d3		6b		rtl		                RTL
.3940d4						DOS_DIRNEXT
.3940d4		da		phx		                PHX
.3940d5		5a		phy		                PHY
.3940d6		0b		phd		                PHD
.3940d7		8b		phb		                PHB
.3940d8		08		php		                PHP
.3940d9		48		pha		                PHA             ; begin setdbr macro
.3940da		08		php		                PHP
.3940db		e2 20		sep #$20	                SEP #$20        ; set A short
.3940dd		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3940df		48		pha		                PHA
.3940e0		ab		plb		                PLB
.3940e1		28		plp		                PLP
.3940e2		68		pla		                PLA             ; end setdbr macro
.3940e3		48		pha		                PHA             ; begin setdp macro
.3940e4		08		php		                PHP
.3940e5		c2 20		rep #$20	                REP #$20        ; set A long
.3940e7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940ea		5b		tcd		                TCD
.3940eb		28		plp		                PLP
.3940ec		68		pla		                PLA             ; end setdp macro
.3940ed		c2 20		rep #$20	                REP #$20        ; set A long
.3940ef		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.3940f0		a5 18		lda $0338	                LDA DOS_DIR_PTR
.3940f2		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.3940f5		85 18		sta $0338	                STA DOS_DIR_PTR
.3940f7		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.3940f9		69 00 00	adc #$0000	                ADC #0
.3940fc		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3940fe		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.3940ff		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.394102		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.394104		85 28		sta $0348	                STA DOS_TEMP
.394106		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.394109		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.39410b		85 2a		sta $034a	                STA DOS_TEMP+2
.39410d		30 0c		bmi $39411b	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.39410f		f0 03		beq $394114	                BEQ check_lower
.394111		82 a6 16	brl $3957ba	                BRL IF_SUCCESS
.394114		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.394116		f0 03		beq $39411b	                BEQ get_next_block
.394118		82 9f 16	brl $3957ba	                BRL IF_SUCCESS
.39411b						get_next_block
.39411b		e2 20		sep #$20	                SEP #$20        ; set A short
.39411d		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394120		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.394122		f0 38		beq $39415c	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.394124						next_sector
.394124		c2 20		rep #$20	                REP #$20        ; set A long
.394126		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.394129		1a		inc a		                INC A
.39412a		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.39412d		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.394130		d0 07		bne $394139	                BNE read_sector
.394132		e2 20		sep #$20	                SEP #$20        ; set A short
.394134		a9 00		lda #$00	                LDA #0
.394136		82 76 16	brl $3957af	                BRL IF_FAILURE
.394139						read_sector
.394139		c2 20		rep #$20	                REP #$20        ; set A long
.39413b		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.39413e		85 02		sta $0322	                STA BIOS_LBA
.394140		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394143		85 04		sta $0324	                STA BIOS_LBA+2
.394145		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.394148		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39414a		85 18		sta $0338	                STA DOS_DIR_PTR
.39414c		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.39414f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394151		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394153		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.394157		b0 39		bcs $394192	                BCS do_success              ; If successful: set the directory cursor
.394159		82 57 16	brl $3957b3	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.39415c						next_cluster
.39415c		c2 20		rep #$20	                REP #$20        ; set A long
.39415e		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.394161		85 10		sta $0330	                STA DOS_CLUS_ID
.394163		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394166		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394168		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.39416b		85 1c		sta $033c	                STA DOS_BUFF_PTR
.39416d		85 18		sta $0338	                STA DOS_DIR_PTR
.39416f		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394172		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394174		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.394176		22 31 4a 39	jsl $394a31	                JSL NEXTCLUSTER             ; Try to find the next cluster
.39417a		b0 03		bcs $39417f	                BCS set_next
.39417c		82 34 16	brl $3957b3	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.39417f		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.394181		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394184		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394186		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394189		22 1d 46 39	jsl $39461d	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.39418d		b0 03		bcs $394192	                BCS do_success              ; If successful: set the directory cursor
.39418f		82 21 16	brl $3957b3	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.394192		82 25 16	brl $3957ba	do_success      BRL IF_SUCCESS
.394195						DOS_DIRFINDFREE
.394195		da		phx		                PHX
.394196		5a		phy		                PHY
.394197		0b		phd		                PHD
.394198		8b		phb		                PHB
.394199		08		php		                PHP
.39419a		48		pha		                PHA             ; begin setdbr macro
.39419b		08		php		                PHP
.39419c		e2 20		sep #$20	                SEP #$20        ; set A short
.39419e		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941a0		48		pha		                PHA
.3941a1		ab		plb		                PLB
.3941a2		28		plp		                PLP
.3941a3		68		pla		                PLA             ; end setdbr macro
.3941a4		48		pha		                PHA             ; begin setdp macro
.3941a5		08		php		                PHP
.3941a6		c2 20		rep #$20	                REP #$20        ; set A long
.3941a8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941ab		5b		tcd		                TCD
.3941ac		28		plp		                PLP
.3941ad		68		pla		                PLA             ; end setdp macro
.3941ae		22 3c 54 39	jsl $39543c	                JSL IF_DIROPEN
.3941b2		b0 06		bcs $3941ba	                BCS start_walk
.3941b4		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.3941b7		82 28 00	brl $3941e2	                BRL ret_failure
.3941ba		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.3941bd						chk_entry
.3941bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3941bf		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.3941c1		f0 1c		beq $3941df	                BEQ ret_success             ; If 0: we have a blank... return it
.3941c3		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.3941c5		f0 18		beq $3941df	                BEQ ret_success             ; Yes: return it
.3941c7		22 76 54 39	jsl $395476	                JSL IF_DIRNEXT              ; Go to the next directory entry
.3941cb		b0 ed		bcs $3941ba	                BCS start_walk              ; If we got one, start walking it
.3941cd		22 e5 41 39	jsl $3941e5	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.3941d1		90 0f		bcc $3941e2	                BCC ret_failure             ; If that didn't work, return the failure
.3941d3		c2 20		rep #$20	                REP #$20        ; set A long
.3941d5		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.3941d8		85 18		sta $0338	                STA DOS_DIR_PTR
.3941da		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3941dd		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.3941df		82 d8 15	brl $3957ba	ret_success     BRL IF_SUCCESS
.3941e2		82 ca 15	brl $3957af	ret_failure     BRL IF_FAILURE
.3941e5						DOS_DIRAPPEND
.3941e5		da		phx		                PHX
.3941e6		8b		phb		                PHB
.3941e7		0b		phd		                PHD
.3941e8		08		php		                PHP
.3941e9		48		pha		                PHA             ; begin setdbr macro
.3941ea		08		php		                PHP
.3941eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3941ed		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3941ef		48		pha		                PHA
.3941f0		ab		plb		                PLB
.3941f1		28		plp		                PLP
.3941f2		68		pla		                PLA             ; end setdbr macro
.3941f3		48		pha		                PHA             ; begin setdp macro
.3941f4		08		php		                PHP
.3941f5		c2 20		rep #$20	                REP #$20        ; set A long
.3941f7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941fa		5b		tcd		                TCD
.3941fb		28		plp		                PLP
.3941fc		68		pla		                PLA             ; end setdp macro
.3941fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3941ff		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.394202		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.394204		f0 09		beq $39420f	                BEQ clr_sector                  ; Yes: clear out the directory data
.394206						ret_failure
.394206		e2 20		sep #$20	                SEP #$20        ; set A short
.394208		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.39420a		85 0e		sta $032e	                STA DOS_STATUS
.39420c		82 3e 00	brl $39424d	                BRL pass_failure
.39420f						clr_sector
.39420f		c2 20		rep #$20	                REP #$20        ; set A long
.394211		a9 00 00	lda #$0000	                LDA #0
.394214		a2 00 00	ldx #$0000	                LDX #0
.394217		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.39421a		e8		inx		                INX
.39421b		e8		inx		                INX
.39421c		e0 00 02	cpx #$0200	                CPX #512
.39421f		d0 f6		bne $394217	                BNE clr_loop
.394221		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.394224		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394226		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394229		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39422b		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.39422e		85 10		sta $0330	                STA DOS_CLUS_ID
.394230		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.394233		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394235		22 52 4e 39	jsl $394e52	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.394239		90 12		bcc $39424d	                BCC pass_failure                ; If there was an error, pass it up the chain
.39423b		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.39423e		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.394241		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394244		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.394247		28		plp		ret_success     PLP
.394248		2b		pld		                PLD
.394249		ab		plb		                PLB
.39424a		fa		plx		                PLX
.39424b		38		sec		                SEC
.39424c		6b		rtl		                RTL
.39424d		28		plp		pass_failure    PLP
.39424e		2b		pld		                PLD
.39424f		ab		plb		                PLB
.394250		fa		plx		                PLX
.394251		18		clc		                CLC
.394252		6b		rtl		                RTL
.394253						DOS_DIRWRITE
.394253		da		phx		                PHX
.394254		5a		phy		                PHY
.394255		0b		phd		                PHD
.394256		8b		phb		                PHB
.394257		08		php		                PHP
.394258		48		pha		                PHA             ; begin setdbr macro
.394259		08		php		                PHP
.39425a		e2 20		sep #$20	                SEP #$20        ; set A short
.39425c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39425e		48		pha		                PHA
.39425f		ab		plb		                PLB
.394260		28		plp		                PLP
.394261		68		pla		                PLA             ; end setdbr macro
.394262		48		pha		                PHA             ; begin setdp macro
.394263		08		php		                PHP
.394264		c2 20		rep #$20	                REP #$20        ; set A long
.394266		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394269		5b		tcd		                TCD
.39426a		28		plp		                PLP
.39426b		68		pla		                PLA             ; end setdp macro
.39426c		e2 20		sep #$20	                SEP #$20        ; set A short
.39426e		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.394271		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.394273		f0 1f		beq $394294	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.394275						write_sector
.394275		c2 20		rep #$20	                REP #$20        ; set A long
.394277		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.39427a		85 02		sta $0322	                STA BIOS_LBA
.39427c		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39427f		85 04		sta $0324	                STA BIOS_LBA+2
.394281		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.394284		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394286		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.394289		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39428b		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.39428f		b0 1f		bcs $3942b0	                BCS ret_success
.394291		82 1b 15	brl $3957af	ret_failure     BRL IF_FAILURE
.394294						write_cluster
.394294		c2 20		rep #$20	                REP #$20        ; set A long
.394296		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.394299		85 10		sta $0330	                STA DOS_CLUS_ID
.39429b		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.39429e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3942a0		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.3942a3		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3942a5		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.3942a8		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3942aa		22 5a 46 39	jsl $39465a	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.3942ae		90 e1		bcc $394291	                BCC ret_failure
.3942b0		82 07 15	brl $3957ba	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_fmx_inc.asm

=$38a000					DOS_HIGH_VARIABLES      = $38A000
=$38a000					DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					    DOS_FILE_BUFFS          = $38B000
=3719168					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.3942b3						DOS_INIT
.3942b3		8b		phb		                PHB
.3942b4		0b		phd		                PHD
.3942b5		08		php		                PHP
.3942b6		48		pha		                PHA             ; begin setdbr macro
.3942b7		08		php		                PHP
.3942b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3942ba		a9 00		lda #$00	                LDA #0
.3942bc		48		pha		                PHA
.3942bd		ab		plb		                PLB
.3942be		28		plp		                PLP
.3942bf		68		pla		                PLA             ; end setdbr macro
.3942c0		48		pha		                PHA             ; begin setdp macro
.3942c1		08		php		                PHP
.3942c2		c2 20		rep #$20	                REP #$20        ; set A long
.3942c4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942c7		5b		tcd		                TCD
.3942c8		28		plp		                PLP
.3942c9		68		pla		                PLA             ; end setdp macro
.3942ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3942cc		c2 10		rep #$10	                REP #$10        ; set X long
.3942ce		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.3942d1		a9 00		lda #$00	                LDA #0
.3942d3		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.3942d6		e8		inx		                INX
.3942d7		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.3942da		d0 f7		bne $3942d3	                BNE b0_clr_loop
.3942dc		48		pha		                PHA             ; begin setdbr macro
.3942dd		08		php		                PHP
.3942de		e2 20		sep #$20	                SEP #$20        ; set A short
.3942e0		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3942e2		48		pha		                PHA
.3942e3		ab		plb		                PLB
.3942e4		28		plp		                PLP
.3942e5		68		pla		                PLA             ; end setdbr macro
.3942e6		48		pha		                PHA             ; begin setdp macro
.3942e7		08		php		                PHP
.3942e8		c2 20		rep #$20	                REP #$20        ; set A long
.3942ea		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942ed		5b		tcd		                TCD
.3942ee		28		plp		                PLP
.3942ef		68		pla		                PLA             ; end setdp macro
.3942f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3942f2		c2 10		rep #$10	                REP #$10        ; set X long
.3942f4		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.3942f7		a9 00		lda #$00	                LDA #0
.3942f9		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.3942fc		e8		inx		                INX
.3942fd		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.394300		d0 f7		bne $3942f9	                BNE b38_clr_loop
.394302		c2 20		rep #$20	                REP #$20        ; set A long
.394304		a9 b2 46	lda #$46b2	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.394307		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.39430b		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.39430e		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.394312		e2 20		sep #$20	                SEP #$20        ; set A short
.394314		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.394316		85 01		sta $0321	                STA BIOS_DEV
.394318		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.39431a		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.39431e		a9 00		lda #$00	                LDA #0
.394320		a2 00 00	ldx #$0000	                LDX #0
.394323		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.394326		e8		inx		                INX
.394327		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.39432a		d0 f7		bne $394323	                BNE fd_zero_loop
.39432c		a9 00		lda #$00	                LDA #0
.39432e		a2 00 00	ldx #$0000	                LDX #0
.394331		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.394334		e8		inx		                INX
.394335		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.394338		d0 f7		bne $394331	                BNE sect_zero_loop
.39433a		c2 20		rep #$20	                REP #$20        ; set A long
.39433c		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.39433f		85 20		sta $0340	                STA @b DOS_FD_PTR
.394341		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.394344		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.394346		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.394349		85 28		sta $0348	                STA @b DOS_TEMP
.39434b		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.39434e		85 2a		sta $034a	                STA @b DOS_TEMP+2
.394350		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.394353		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.394356		a5 28		lda $0348	                LDA @b DOS_TEMP
.394358		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39435a		c8		iny		                INY
.39435b		c8		iny		                INY
.39435c		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.39435e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394360		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.394361		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.394363		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.394366		85 20		sta $0340	                STA @b DOS_FD_PTR
.394368		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.39436a		69 00 00	adc #$0000	                ADC #0
.39436d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39436f		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.394370		a5 28		lda $0348	                LDA @b DOS_TEMP
.394372		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.394375		85 28		sta $0348	                STA @b DOS_TEMP
.394377		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.394379		69 00 00	adc #$0000	                ADC #0
.39437c		85 2a		sta $034a	                STA @b DOS_TEMP+2
.39437e		ca		dex		                DEX                     ; Count down the descriptors...
.39437f		d0 d2		bne $394353	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.394381		28		plp		                PLP
.394382		2b		pld		                PLD
.394383		ab		plb		                PLB
.394384		6b		rtl		                RTL
.394385						DOS_MOUNT
.394385		8b		phb		                PHB
.394386		0b		phd		                PHD
.394387		08		php		                PHP
.394388		48		pha		                PHA             ; begin setdbr macro
.394389		08		php		                PHP
.39438a		e2 20		sep #$20	                SEP #$20        ; set A short
.39438c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39438e		48		pha		                PHA
.39438f		ab		plb		                PLB
.394390		28		plp		                PLP
.394391		68		pla		                PLA             ; end setdbr macro
.394392		48		pha		                PHA             ; begin setdp macro
.394393		08		php		                PHP
.394394		c2 20		rep #$20	                REP #$20        ; set A long
.394396		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394399		5b		tcd		                TCD
.39439a		28		plp		                PLP
.39439b		68		pla		                PLA             ; end setdp macro
.39439c		e2 20		sep #$20	                SEP #$20        ; set A short
.39439e		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.3943a0		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.3943a4		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.3943a6		f0 1f		beq $3943c7	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.3943a8		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.3943aa		f0 26		beq $3943d2	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.3943ac		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.3943ae		f0 0b		beq $3943bb	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.3943b0		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.3943b2		85 0e		sta $032e	                STA DOS_STATUS
.3943b4		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.3943b6		85 00		sta $0320	                STA BIOS_STATUS
.3943b8		82 7c 01	brl $394537	                BRL ret_failure
.3943bb		22 2a 66 39	jsl $39662a	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.3943bf		b0 03		bcs $3943c4	                BCS fdc_success
.3943c1		82 73 01	brl $394537	                BRL ret_failure
.3943c4		82 67 01	brl $39452e	fdc_success     BRL ret_success
.3943c7		22 12 5c 39	jsl $395c12	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.3943cb		b0 10		bcs $3943dd	                BCS get_mbr             ; Continue if success
.3943cd		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3943cf		82 65 01	brl $394537	                BRL ret_failure
.3943d2		22 72 6a 39	jsl $396a72	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.3943d6		b0 05		bcs $3943dd	                BCS get_mbr             ; Continue if success
.3943d8		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.3943da		82 5a 01	brl $394537	                BRL ret_failure
.3943dd						get_mbr
.3943dd		c2 30		rep #$30	                REP #$30        ; set A&X long
.3943df		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.3943e1		64 04		stz $0324	                STZ BIOS_LBA+2
.3943e3		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.3943e6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3943e8		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3943eb		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3943ed		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.3943f1		b0 07		bcs $3943fa	                BCS chk_signature       ; If success, check the signature bytes
.3943f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3943f5		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.3943f7		82 3d 01	brl $394537	                BRL ret_failure
.3943fa						chk_signature
.3943fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3943fc		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.3943ff		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394401		d0 07		bne $39440a	                BNE not_mbr             ; No: signal we could find the MBR
.394403		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.394406		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394408		f0 05		beq $39440f	                BEQ chk_part_type       ; Yes: we have an MBR
.39440a		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.39440c		82 28 01	brl $394537	                BRL ret_failure
.39440f		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.394412		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.394414		f0 05		beq $39441b	                BEQ get_LBA             ; Is FAT32 with LBA?
.394416		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.394418		82 1c 01	brl $394537	                BRL ret_failure
.39441b		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.39441e		c2 20		rep #$20	                REP #$20        ; set A long
.394420		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.394423		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.394426		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.394429		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.39442c		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.39442f		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.394432		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.394435		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.394438		e2 20		sep #$20	                SEP #$20        ; set A short
.39443a		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.39443c		8d 00 a0	sta $38a000	                STA DEVICE
.39443f		a9 00		lda #$00	                LDA #0
.394441		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.394444		c2 20		rep #$20	                REP #$20        ; set A long
.394446		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.394449		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39444b		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39444e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394450		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394453		85 02		sta $0322	                STA BIOS_LBA
.394455		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394458		85 04		sta $0324	                STA BIOS_LBA+2
.39445a		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.39445e		b0 1c		bcs $39447c	                BCS get_first_sec       ; Got it? Start parsing it
.394460		e2 20		sep #$20	                SEP #$20        ; set A short
.394462		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.394464		82 d0 00	brl $394537	                BRL ret_failure
.394467						chk_bpb_sig
.394467		e2 20		sep #$20	                SEP #$20        ; set A short
.394469		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.39446c		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.39446e		d0 07		bne $394477	                BNE not_bpb             ; No: signal we could find the volume ID
.394470		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.394473		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.394475		f0 05		beq $39447c	                BEQ get_first_sec       ; Yes: we have an volume ID
.394477		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394479		82 bb 00	brl $394537	                BRL ret_failure
.39447c						get_first_sec
.39447c		c2 20		rep #$20	                REP #$20        ; set A long
.39447e		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.394481		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.394484		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.394487		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.39448a		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.39448d		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394490		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.394491		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.394494		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.394497		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.39449a		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.39449d		69 00 00	adc #$0000	                ADC #0
.3944a0		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.3944a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3944a5		a2 00 00	ldx #$0000	                LDX #0
.3944a8		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.3944ac		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.3944b0		e8		inx		                INX
.3944b1		e0 04 00	cpx #$0004	                CPX #4
.3944b4		d0 f2		bne $3944a8	                BNE cpy_secperfat
.3944b6		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.3944b9		0a		asl a		                ASL A
.3944ba		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3944bd		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.3944c0		2a		rol a		                ROL A
.3944c1		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3944c4		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.3944c7		2a		rol a		                ROL A
.3944c8		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3944cb		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.3944ce		2a		rol a		                ROL A
.3944cf		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3944d2		18		clc		                CLC
.3944d3		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.3944d6		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.3944d9		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.3944dc		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.3944df		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.3944e2		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.3944e5		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.3944e8		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3944eb		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.3944ee		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.3944f1		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.3944f4		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.3944f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3944f9		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.3944fc		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.3944ff		18		clc		                CLC
.394500		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.394503		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.394506		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.394509		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.39450c		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.39450f		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.394512		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394515		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.394518		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.39451b		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.39451e		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.394521		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.394524		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.394526		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.394529		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.39452b		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.39452e						ret_success
.39452e		e2 20		sep #$20	                SEP #$20        ; set A short
.394530		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.394532		28		plp		                PLP
.394533		2b		pld		                PLD
.394534		ab		plb		                PLB
.394535		38		sec		                SEC
.394536		6b		rtl		                RTL
.394537						ret_failure
.394537		e2 20		sep #$20	                SEP #$20        ; set A short
.394539		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.39453b		28		plp		                PLP
.39453c		2b		pld		                PLD
.39453d		ab		plb		                PLB
.39453e		18		clc		                CLC
.39453f		6b		rtl		                RTL
.394540						DOS_TESTBOOT
.394540		8b		phb		                PHB
.394541		0b		phd		                PHD
.394542		da		phx		                PHX
.394543		08		php		                PHP
.394544		48		pha		                PHA             ; begin setdbr macro
.394545		08		php		                PHP
.394546		e2 20		sep #$20	                SEP #$20        ; set A short
.394548		a9 00		lda #$00	                LDA #0
.39454a		48		pha		                PHA
.39454b		ab		plb		                PLB
.39454c		28		plp		                PLP
.39454d		68		pla		                PLA             ; end setdbr macro
.39454e		48		pha		                PHA             ; begin setdp macro
.39454f		08		php		                PHP
.394550		c2 20		rep #$20	                REP #$20        ; set A long
.394552		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394555		5b		tcd		                TCD
.394556		28		plp		                PLP
.394557		68		pla		                PLA             ; end setdp macro
.394558		c2 10		rep #$10	                REP #$10        ; set X long
.39455a						chk_dev
.39455a		e2 20		sep #$20	                SEP #$20        ; set A short
.39455c		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.39455e		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.394560		f0 24		beq $394586	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.394562		c2 30		rep #$30	                REP #$30        ; set A&X long
.394564		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.394567		85 02		sta $0322	                STA @b BIOS_LBA
.394569		85 04		sta $0324	                STA @b BIOS_LBA+2
.39456b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.39456e		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394570		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394573		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.394575		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.394579		b0 03		bcs $39457e	                BCS chk_mbr_brl
.39457b		82 47 00	brl $3945c5	                BRL done                    ; If failed... just return
.39457e						chk_mbr_brl
.39457e		e2 20		sep #$20	                SEP #$20        ; set A short
.394580		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.394584		80 04		bra $39458a	                BRA chk_brl
.394586		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.39458a		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.39458c		f0 06		beq $394594	                BEQ chk_magic               ; Yes: check for the magic text
.39458e		c9 82		cmp #$82	                CMP #$82
.394590		f0 02		beq $394594	                BEQ chk_magic
.394592		80 31		bra $3945c5	                BRA done                    ; No: just return
.394594		a2 00 00	ldx #$0000	chk_magic       LDX #0
.394597		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.39459b		df ca 45 39	cmp $3945ca,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.39459f		d0 24		bne $3945c5	                BNE done                    ; If it's not equal, just return
.3945a1		e8		inx		                INX                         ; Otherwise, check the next one
.3945a2		e0 08 00	cpx #$0008	                CPX #8
.3945a5		d0 f0		bne $394597	                BNE magic_loop              ; Until we've checked all 8 bytes
.3945a7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3945a9		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.3945ac		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.3945af		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.3945b2		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.3945b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3945b7		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.3945b9		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.3945bb		f0 04		beq $3945c1	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.3945bd		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.3945c1		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.3945c5		28		plp		done            PLP
.3945c6		2b		pld		                PLD
.3945c7		ab		plb		                PLB
.3945c8		fa		plx		                PLX
.3945c9		6b		rtl		                RTL
>3945ca		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.3945d2						DOS_CALC_LBA
.3945d2		8b		phb		                PHB
.3945d3		0b		phd		                PHD
.3945d4		08		php		                PHP
.3945d5		48		pha		                PHA             ; begin setdbr macro
.3945d6		08		php		                PHP
.3945d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3945d9		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3945db		48		pha		                PHA
.3945dc		ab		plb		                PLB
.3945dd		28		plp		                PLP
.3945de		68		pla		                PLA             ; end setdbr macro
.3945df		48		pha		                PHA             ; begin setdp macro
.3945e0		08		php		                PHP
.3945e1		c2 20		rep #$20	                REP #$20        ; set A long
.3945e3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945e6		5b		tcd		                TCD
.3945e7		28		plp		                PLP
.3945e8		68		pla		                PLA             ; end setdp macro
.3945e9		c2 20		rep #$20	                REP #$20        ; set A long
.3945eb		38		sec		                SEC
.3945ec		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.3945ee		e9 02 00	sbc #$0002	                SBC #2
.3945f1		85 28		sta $0348	                STA DOS_TEMP
.3945f3		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3945f5		e9 00 00	sbc #$0000	                SBC #0
.3945f8		85 2a		sta $034a	                STA DOS_TEMP+2
.3945fa		e2 10		sep #$10	                SEP #$10        ; set X short
.3945fc		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.3945ff		e0 01		cpx #$01	mult_loop       CPX #1
.394601		f0 07		beq $39460a	                BEQ add_offset
.394603		06 28		asl $0348	                ASL DOS_TEMP
.394605		26 28		rol $0348	                ROL DOS_TEMP
.394607		ca		dex		                DEX
.394608		80 f5		bra $3945ff	                BRA mult_loop
.39460a		18		clc		add_offset      CLC
.39460b		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.39460d		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.394610		85 02		sta $0322	                STA BIOS_LBA
.394612		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394614		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.394617		85 04		sta $0324	                STA BIOS_LBA+2
.394619		28		plp		                PLP
.39461a		2b		pld		                PLD
.39461b		ab		plb		                PLB
.39461c		6b		rtl		                RTL
.39461d						DOS_GETCLUSTER
.39461d		8b		phb		                PHB
.39461e		0b		phd		                PHD
.39461f		08		php		                PHP
.394620		48		pha		                PHA             ; begin setdbr macro
.394621		08		php		                PHP
.394622		e2 20		sep #$20	                SEP #$20        ; set A short
.394624		a9 00		lda #$00	                LDA #0
.394626		48		pha		                PHA
.394627		ab		plb		                PLB
.394628		28		plp		                PLP
.394629		68		pla		                PLA             ; end setdbr macro
.39462a		48		pha		                PHA             ; begin setdp macro
.39462b		08		php		                PHP
.39462c		c2 20		rep #$20	                REP #$20        ; set A long
.39462e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394631		5b		tcd		                TCD
.394632		28		plp		                PLP
.394633		68		pla		                PLA             ; end setdp macro
.394634		c2 20		rep #$20	                REP #$20        ; set A long
.394636		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394638		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39463a		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39463c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39463e		22 d2 45 39	jsl $3945d2	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394642		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.394646		90 09		bcc $394651	                BCC ret_failure
.394648						ret_success
.394648		e2 20		sep #$20	                SEP #$20        ; set A short
.39464a		64 0e		stz $032e	                STZ DOS_STATUS
.39464c		28		plp		                PLP
.39464d		2b		pld		                PLD
.39464e		ab		plb		                PLB
.39464f		38		sec		                SEC
.394650		6b		rtl		                RTL
.394651						ret_failure
.394651		e2 20		sep #$20	                SEP #$20        ; set A short
.394653		85 0e		sta $032e	                STA DOS_STATUS
.394655		28		plp		                PLP
.394656		2b		pld		                PLD
.394657		ab		plb		                PLB
.394658		18		clc		                CLC
.394659		6b		rtl		                RTL
.39465a						DOS_PUTCLUSTER
.39465a		8b		phb		                PHB
.39465b		0b		phd		                PHD
.39465c		08		php		                PHP
.39465d		48		pha		                PHA             ; begin setdbr macro
.39465e		08		php		                PHP
.39465f		e2 20		sep #$20	                SEP #$20        ; set A short
.394661		a9 00		lda #$00	                LDA #0
.394663		48		pha		                PHA
.394664		ab		plb		                PLB
.394665		28		plp		                PLP
.394666		68		pla		                PLA             ; end setdbr macro
.394667		48		pha		                PHA             ; begin setdp macro
.394668		08		php		                PHP
.394669		c2 20		rep #$20	                REP #$20        ; set A long
.39466b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39466e		5b		tcd		                TCD
.39466f		28		plp		                PLP
.394670		68		pla		                PLA             ; end setdp macro
.394671		c2 20		rep #$20	                REP #$20        ; set A long
.394673		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.394675		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394677		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394679		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39467b		22 d2 45 39	jsl $3945d2	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.39467f		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394683		90 09		bcc $39468e	                BCC ret_failure
.394685						ret_success
.394685		e2 20		sep #$20	                SEP #$20        ; set A short
.394687		64 0e		stz $032e	                STZ DOS_STATUS
.394689		28		plp		                PLP
.39468a		2b		pld		                PLD
.39468b		ab		plb		                PLB
.39468c		38		sec		                SEC
.39468d		6b		rtl		                RTL
.39468e						ret_failure
.39468e		e2 20		sep #$20	                SEP #$20        ; set A short
.394690		85 0e		sta $032e	                STA DOS_STATUS
.394692		28		plp		                PLP
.394693		2b		pld		                PLD
.394694		ab		plb		                PLB
.394695		18		clc		                CLC
.394696		6b		rtl		                RTL
>394697		40 46 00			DOS_FDC_NAME    .null "@F"
.39469a						DOS_FDC_DESC
>39469a		97 46 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>39469e		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>39469f		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>3946a3		40 53 00			DOS_SDC_NAME    .null "@S"
.3946a6						DOS_SDC_DESC
>3946a6		a3 46 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>3946aa		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>3946ab		9a 46 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>3946af		40 48 00			DOS_HDC_NAME    .null "@H"
.3946b2						DOS_HD_DESC
>3946b2		af 46 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>3946b6		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>3946b7		a6 46 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.3946bb						DOS_PARSE_DEV
.3946bb		8b		phb		                PHB
.3946bc		0b		phd		                PHD
.3946bd		08		php		                PHP
.3946be		48		pha		                PHA             ; begin setdbr macro
.3946bf		08		php		                PHP
.3946c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3946c2		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3946c4		48		pha		                PHA
.3946c5		ab		plb		                PLB
.3946c6		28		plp		                PLP
.3946c7		68		pla		                PLA             ; end setdbr macro
.3946c8		48		pha		                PHA             ; begin setdp macro
.3946c9		08		php		                PHP
.3946ca		c2 20		rep #$20	                REP #$20        ; set A long
.3946cc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946cf		5b		tcd		                TCD
.3946d0		28		plp		                PLP
.3946d1		68		pla		                PLA             ; end setdp macro
.3946d2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3946d4		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.3946d8		85 28		sta $0348	                STA DOS_TEMP
.3946da		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.3946de		85 2a		sta $034a	                STA DOS_TEMP+2
.3946e0		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.3946e3		85 48		sta $0368	                STA DOS_STR2_PTR
.3946e5		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.3946e8		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.3946ea		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.3946ed		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3946ef		85 44		sta $0364	                STA DOS_STR1_PTR
.3946f1		c8		iny		                INY
.3946f2		c8		iny		                INY
.3946f3		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3946f5		85 46		sta $0366	                STA DOS_STR1_PTR+2
.3946f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3946f9		a0 00 00	ldy #$0000	                LDY #0
.3946fc		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.3946fe		f0 24		beq $394724	                BEQ found                   ; If it's NULL, we found a match
.394700		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.394702		d0 03		bne $394707	                BNE next_device             ; If no match, try to load the next device
.394704		c8		iny		                INY                         ; Go to the next character
.394705		80 f5		bra $3946fc	                BRA cmp_loop
.394707						next_device
.394707		c2 20		rep #$20	                REP #$20        ; set A long
.394709		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.39470c		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39470e		48		pha		                PHA
.39470f		c8		iny		                INY
.394710		c8		iny		                INY
.394711		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394713		85 2a		sta $034a	                STA DOS_TEMP+2
.394715		68		pla		                PLA
.394716		85 28		sta $0348	                STA DOS_TEMP
.394718		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.39471a		d0 ce		bne $3946ea	                BNE dev_loop                ; No: check this device
.39471c		a5 2a		lda $034a	                LDA DOS_TEMP+2
.39471e		d0 ca		bne $3946ea	                BNE dev_loop
.394720		28		plp		done            PLP                         ; Otherwise, return having not found a match
.394721		2b		pld		                PLD
.394722		ab		plb		                PLB
.394723		6b		rtl		                RTL
.394724		22 35 47 39	jsl $394735	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.394728		e2 20		sep #$20	                SEP #$20        ; set A short
.39472a		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.39472d		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39472f		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.394733		80 eb		bra $394720	                BRA done
.394735						DOS_ADJUSTPATH
.394735		da		phx		                PHX
.394736		5a		phy		                PHY
.394737		8b		phb		                PHB
.394738		0b		phd		                PHD
.394739		08		php		                PHP
.39473a		48		pha		                PHA             ; begin setdbr macro
.39473b		08		php		                PHP
.39473c		e2 20		sep #$20	                SEP #$20        ; set A short
.39473e		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394740		48		pha		                PHA
.394741		ab		plb		                PLB
.394742		28		plp		                PLP
.394743		68		pla		                PLA             ; end setdbr macro
.394744		48		pha		                PHA             ; begin setdp macro
.394745		08		php		                PHP
.394746		c2 20		rep #$20	                REP #$20        ; set A long
.394748		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39474b		5b		tcd		                TCD
.39474c		28		plp		                PLP
.39474d		68		pla		                PLA             ; end setdp macro
.39474e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394750		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.394752		98		tya		                TYA                             ; Compute the address of the first source byte
.394753		18		clc		                CLC
.394754		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.394757		aa		tax		                TAX
.394758		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.39475b		a8		tay		                TAY
.39475c		38		sec		                SEC                             ; Compute the number of bytes to copy
.39475d		a9 00 01	lda #$0100	                LDA #256
.394760		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.394762		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.394765		28		plp		                PLP
.394766		2b		pld		                PLD
.394767		ab		plb		                PLB
.394768		7a		ply		                PLY
.394769		fa		plx		                PLX
.39476a		6b		rtl		                RTL
.39476b						DOS_PARSE_PATH
.39476b		8b		phb		                PHB
.39476c		0b		phd		                PHD
.39476d		08		php		                PHP
.39476e		48		pha		                PHA             ; begin setdbr macro
.39476f		08		php		                PHP
.394770		e2 20		sep #$20	                SEP #$20        ; set A short
.394772		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394774		48		pha		                PHA
.394775		ab		plb		                PLB
.394776		28		plp		                PLP
.394777		68		pla		                PLA             ; end setdbr macro
.394778		48		pha		                PHA             ; begin setdp macro
.394779		08		php		                PHP
.39477a		c2 20		rep #$20	                REP #$20        ; set A long
.39477c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39477f		5b		tcd		                TCD
.394780		28		plp		                PLP
.394781		68		pla		                PLA             ; end setdp macro
.394782		c2 10		rep #$10	                REP #$10        ; set X long
.394784		e2 20		sep #$20	                SEP #$20        ; set A short
.394786		a2 00 00	ldx #$0000	                LDX #0
.394789		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.39478b		f0 1b		beq $3947a8	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.39478d		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.39478f		b0 05		bcs $394796	                BGE check_case          ; No: check the case
.394791		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.394793		82 64 00	brl $3947fa	                BRL ret_failure
.394796		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.394798		90 08		bcc $3947a2	                BLT next_char
.39479a		c9 7b		cmp #$7b	                CMP #'z'+1
.39479c		b0 04		bcs $3947a2	                BGE next_char
.39479e		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.3947a0		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.3947a2		e8		inx		next_char       INX                     ; Move to the next character
.3947a3		e0 00 01	cpx #$0100	                CPX #$100
.3947a6		d0 e1		bne $394789	                BNE upcase_loop
.3947a8		22 bb 46 39	jsl $3946bb	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.3947ac		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.3947ae		c9 3a		cmp #$3a	                CMP #':'
.3947b0		d0 07		bne $3947b9	                BNE clr_name            ; If not colon, treat it as a file name
.3947b2		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.3947b5		22 35 47 39	jsl $394735	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.3947b9		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.3947bc		a9 20		lda #$20	                LDA #' '
.3947be		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.3947c1		c8		iny		                INY
.3947c2		c0 0b 00	cpy #$000b	                CPY #11
.3947c5		d0 f7		bne $3947be	                BNE clr_loop
.3947c7		a2 00 00	ldx #$0000	                LDX #0
.3947ca		a0 00 00	ldy #$0000	                LDY #0
.3947cd		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.3947cf		f0 20		beq $3947f1	                BEQ ret_success         ; If NULL: we've finished parsing the path
.3947d1		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.3947d3		f0 0a		beq $3947df	                BEQ cpy_ext             ; And move to the extension
.3947d5		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.3947d8		e8		inx		                INX
.3947d9		c8		iny		                INY                     ; Move to the next character
.3947da		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.3947dd		d0 ee		bne $3947cd	                BNE cpy_name_loop       ; No: process this one
.3947df		e8		inx		cpy_ext         INX                     ; Skip the dot
.3947e0		a0 08 00	ldy #$0008	                LDY #8
.3947e3		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.3947e5		f0 0a		beq $3947f1	                BEQ ret_success         ; If it's NULL, we've finished
.3947e7		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.3947ea		e8		inx		                INX
.3947eb		c8		iny		                INY                     ; Move to the next character
.3947ec		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.3947ef		d0 f2		bne $3947e3	                BNE cpy_ext_loop        ; No: process this one
.3947f1						ret_success
.3947f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3947f3		64 0e		stz $032e	                STZ DOS_STATUS
.3947f5		28		plp		                PLP
.3947f6		2b		pld		                PLD
.3947f7		ab		plb		                PLB
.3947f8		38		sec		                SEC
.3947f9		6b		rtl		                RTL
.3947fa						ret_failure
.3947fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3947fc		85 0e		sta $032e	                STA DOS_STATUS
.3947fe		28		plp		                PLP
.3947ff		2b		pld		                PLD
.394800		ab		plb		                PLB
.394801		18		clc		                CLC
.394802		6b		rtl		                RTL
.394803						DOS_FINDFILE
.394803		8b		phb		                PHB
.394804		0b		phd		                PHD
.394805		08		php		                PHP
.394806		48		pha		                PHA             ; begin setdbr macro
.394807		08		php		                PHP
.394808		e2 20		sep #$20	                SEP #$20        ; set A short
.39480a		a9 00		lda #$00	                LDA #0
.39480c		48		pha		                PHA
.39480d		ab		plb		                PLB
.39480e		28		plp		                PLP
.39480f		68		pla		                PLA             ; end setdbr macro
.394810		48		pha		                PHA             ; begin setdp macro
.394811		08		php		                PHP
.394812		c2 20		rep #$20	                REP #$20        ; set A long
.394814		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394817		5b		tcd		                TCD
.394818		28		plp		                PLP
.394819		68		pla		                PLA             ; end setdp macro
.39481a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39481c		22 6b 47 39	jsl $39476b	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.394820		b0 05		bcs $394827	                BCS mount                       ; If success: try to open the directory
.394822		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.394823		2b		pld		                PLD
.394824		ab		plb		                PLB
.394825		18		clc		                CLC
.394826		6b		rtl		                RTL
.394827		22 85 43 39	jsl $394385	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.39482b		b0 07		bcs $394834	                BCS get_directory
.39482d		e2 20		sep #$20	                SEP #$20        ; set A short
.39482f		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.394831		82 56 00	brl $39488a	                BRL ret_failure
.394834						get_directory
.394834		c2 20		rep #$20	                REP #$20        ; set A long
.394836		22 3a 40 39	jsl $39403a	                JSL DOS_DIROPEN                 ; Get the directory
.39483a		b0 07		bcs $394843	                BCS scan_entries                ; If success: start scanning the directory entries
.39483c		e2 20		sep #$20	                SEP #$20        ; set A short
.39483e		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.394840		82 47 00	brl $39488a	                BRL ret_failure
.394843		22 b9 40 39	jsl $3940b9	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.394847						scan_loop
.394847		e2 20		sep #$20	                SEP #$20        ; set A short
.394849		a0 00 00	ldy #$0000	                LDY #0
.39484c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.39484e		d0 05		bne $394855	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.394850		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.394852		82 35 00	brl $39488a	                BRL ret_failure
.394855		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.394857		f0 26		beq $39487f	                BEQ next_entry                  ; Go to the next entry
.394859		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.39485c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39485e		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.394860		d0 1d		bne $39487f	                BNE next_entry                  ; Yes: skip it!
.394862		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.394864		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.394866		f0 17		beq $39487f	                BEQ next_entry                  ; Yes: skip it!
.394868		a2 00 00	ldx #$0000	                LDX #0
.39486b		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.39486e		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394870		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.394874		d0 09		bne $39487f	                BNE next_entry                  ; If not equal: try the next entry
.394876		c8		iny		                INY                             ; Advance to the next character
.394877		e8		inx		                INX
.394878		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.39487b		f0 16		beq $394893	                BEQ match                       ; Yes: we have a match!
.39487d		80 ef		bra $39486e	                BRA scan_cmp_loop               ; No: keep checking
.39487f		22 d4 40 39	jsl $3940d4	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.394883		90 05		bcc $39488a	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.394885		82 bf ff	brl $394847	                BRL scan_loop                   ; If found: keep scanning
.394888		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.39488a						ret_failure
.39488a		e2 20		sep #$20	                SEP #$20        ; set A short
.39488c		85 0e		sta $032e	                STA DOS_STATUS
.39488e		28		plp		                PLP
.39488f		2b		pld		                PLD
.394890		ab		plb		                PLB
.394891		18		clc		                CLC
.394892		6b		rtl		                RTL
.394893						match
.394893		c2 20		rep #$20	                REP #$20        ; set A long
.394895		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.394898		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39489a		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.39489c		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.39489f		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3948a1		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3948a3						ret_success
.3948a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3948a5		64 0e		stz $032e	                STZ DOS_STATUS
.3948a7		28		plp		                PLP
.3948a8		2b		pld		                PLD
.3948a9		ab		plb		                PLB
.3948aa		38		sec		                SEC
.3948ab		6b		rtl		                RTL
.3948ac						DOS_READFILE
.3948ac		8b		phb		                PHB
.3948ad		0b		phd		                PHD
.3948ae		08		php		                PHP
.3948af		48		pha		                PHA             ; begin setdbr macro
.3948b0		08		php		                PHP
.3948b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3948b3		a9 00		lda #$00	                LDA #0
.3948b5		48		pha		                PHA
.3948b6		ab		plb		                PLB
.3948b7		28		plp		                PLP
.3948b8		68		pla		                PLA             ; end setdbr macro
.3948b9		48		pha		                PHA             ; begin setdp macro
.3948ba		08		php		                PHP
.3948bb		c2 20		rep #$20	                REP #$20        ; set A long
.3948bd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948c0		5b		tcd		                TCD
.3948c1		28		plp		                PLP
.3948c2		68		pla		                PLA             ; end setdp macro
.3948c3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3948c5		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3948c7		48		pha		                PHA
.3948c8		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.3948ca		48		pha		                PHA
.3948cb		22 03 48 39	jsl $394803	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.3948cf		68		pla		                PLA
.3948d0		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3948d2		68		pla		                PLA
.3948d3		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3948d5		90 0f		bcc $3948e6	                BCC pass_failure                    ; If found: try to load the cluster
.3948d7		22 1d 46 39	jsl $39461d	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.3948db		90 09		bcc $3948e6	                BCC pass_failure                    ; If there's an error... pass it up the chain
.3948dd						ret_success
.3948dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3948df		64 0e		stz $032e	                STZ DOS_STATUS
.3948e1		28		plp		                PLP
.3948e2		2b		pld		                PLD
.3948e3		ab		plb		                PLB
.3948e4		38		sec		                SEC
.3948e5		6b		rtl		                RTL
.3948e6		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.3948e7		2b		pld		                PLD
.3948e8		ab		plb		                PLB
.3948e9		18		clc		                CLC
.3948ea		6b		rtl		                RTL
.3948eb						ENTRYFORCLUS12
.3948eb		8b		phb		                PHB
.3948ec		0b		phd		                PHD
.3948ed		08		php		                PHP
.3948ee		48		pha		                PHA             ; begin setdbr macro
.3948ef		08		php		                PHP
.3948f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3948f2		a9 00		lda #$00	                LDA #0
.3948f4		48		pha		                PHA
.3948f5		ab		plb		                PLB
.3948f6		28		plp		                PLP
.3948f7		68		pla		                PLA             ; end setdbr macro
.3948f8		48		pha		                PHA             ; begin setdp macro
.3948f9		08		php		                PHP
.3948fa		c2 20		rep #$20	                REP #$20        ; set A long
.3948fc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3948ff		5b		tcd		                TCD
.394900		28		plp		                PLP
.394901		68		pla		                PLA             ; end setdp macro
.394902		c2 30		rep #$30	                REP #$30        ; set A&X long
.394904		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.394906		0a		asl a		                ASL A
.394907		85 28		sta $0348	                STA DOS_TEMP
.394909		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39490b		2a		rol a		                ROL A
.39490c		85 2a		sta $034a	                STA DOS_TEMP+2
.39490e		18		clc		                CLC
.39490f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394911		65 28		adc $0348	                ADC DOS_TEMP
.394913		85 28		sta $0348	                STA DOS_TEMP
.394915		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394917		65 2a		adc $034a	                ADC DOS_TEMP+2
.394919		85 2a		sta $034a	                STA DOS_TEMP+2
.39491b		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.39491d		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.39491f		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394921		29 ff 03	and #$03ff	                AND #$003FF
.394924		aa		tax		                TAX
.394925		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394927		66 28		ror $0348	                ROR DOS_TEMP
.394929		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39492b		66 28		ror $0348	                ROR DOS_TEMP
.39492d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39492f		66 28		ror $0348	                ROR DOS_TEMP
.394931		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394933		66 28		ror $0348	                ROR DOS_TEMP
.394935		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394937		66 28		ror $0348	                ROR DOS_TEMP
.394939		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39493b		66 28		ror $0348	                ROR DOS_TEMP
.39493d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39493f		66 28		ror $0348	                ROR DOS_TEMP
.394941		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394943		66 28		ror $0348	                ROR DOS_TEMP
.394945		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394947		66 28		ror $0348	                ROR DOS_TEMP
.394949		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.39494a		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.39494e		65 28		adc $0348	                ADC DOS_TEMP
.394950		85 24		sta $0344	                STA DOS_FAT_LBA
.394952		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394956		65 2a		adc $034a	                ADC DOS_TEMP+2
.394958		85 26		sta $0346	                STA DOS_FAT_LBA+2
.39495a		28		plp		                PLP
.39495b		2b		pld		                PLD
.39495c		ab		plb		                PLB
.39495d		6b		rtl		                RTL
.39495e						FATFORCLUSTER12
.39495e		8b		phb		                PHB
.39495f		0b		phd		                PHD
.394960		08		php		                PHP
.394961		48		pha		                PHA             ; begin setdbr macro
.394962		08		php		                PHP
.394963		e2 20		sep #$20	                SEP #$20        ; set A short
.394965		a9 00		lda #$00	                LDA #0
.394967		48		pha		                PHA
.394968		ab		plb		                PLB
.394969		28		plp		                PLP
.39496a		68		pla		                PLA             ; end setdbr macro
.39496b		48		pha		                PHA             ; begin setdp macro
.39496c		08		php		                PHP
.39496d		c2 20		rep #$20	                REP #$20        ; set A long
.39496f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394972		5b		tcd		                TCD
.394973		28		plp		                PLP
.394974		68		pla		                PLA             ; end setdp macro
.394975		c2 30		rep #$30	                REP #$30        ; set A&X long
.394977		a2 00 00	ldx #$0000	                LDX #0
.39497a		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.39497d		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394981		e8		inx		                INX
.394982		e8		inx		                INX
.394983		e0 00 04	cpx #$0400	                CPX #1024
.394986		d0 f5		bne $39497d	                BNE clr_loop
.394988		22 eb 48 39	jsl $3948eb	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.39498c		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.39498e		85 02		sta $0322	                STA BIOS_LBA
.394990		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394992		85 04		sta $0324	                STA BIOS_LBA+2
.394994		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.394997		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394999		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.39499c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39499e		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3949a2		90 17		bcc $3949bb	                BCC error
.3949a4		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.3949a6		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.3949a9		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3949ab		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3949ae		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3949b0		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3949b4		90 05		bcc $3949bb	                BCC error
.3949b6		28		plp		                PLP
.3949b7		2b		pld		                PLD
.3949b8		ab		plb		                PLB
.3949b9		38		sec		                SEC
.3949ba		6b		rtl		                RTL
.3949bb						error
.3949bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3949bd		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3949bf		85 0e		sta $032e	                STA DOS_STATUS
.3949c1		28		plp		                PLP
.3949c2		2b		pld		                PLD
.3949c3		ab		plb		                PLB
.3949c4		18		clc		                CLC
.3949c5		6b		rtl		                RTL
.3949c6						FATFORCLUSTER32
.3949c6		8b		phb		                PHB
.3949c7		0b		phd		                PHD
.3949c8		48		pha		                PHA             ; begin setdbr macro
.3949c9		08		php		                PHP
.3949ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3949cc		a9 00		lda #$00	                LDA #0
.3949ce		48		pha		                PHA
.3949cf		ab		plb		                PLB
.3949d0		28		plp		                PLP
.3949d1		68		pla		                PLA             ; end setdbr macro
.3949d2		48		pha		                PHA             ; begin setdp macro
.3949d3		08		php		                PHP
.3949d4		c2 20		rep #$20	                REP #$20        ; set A long
.3949d6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949d9		5b		tcd		                TCD
.3949da		28		plp		                PLP
.3949db		68		pla		                PLA             ; end setdp macro
.3949dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3949de		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3949e0		85 24		sta $0344	                STA DOS_FAT_LBA
.3949e2		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3949e4		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3949e6		a2 07 00	ldx #$0007	                LDX #7
.3949e9		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.3949eb		66 24		ror $0344	                ROR DOS_FAT_LBA
.3949ed		ca		dex		                DEX
.3949ee		d0 f9		bne $3949e9	                BNE div_loop
.3949f0		18		clc		                CLC
.3949f1		a5 24		lda $0344	                LDA DOS_FAT_LBA
.3949f3		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.3949f7		85 24		sta $0344	                STA DOS_FAT_LBA
.3949f9		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3949fb		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.3949ff		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394a01		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394a03		85 02		sta $0322	                STA BIOS_LBA
.394a05		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394a07		85 04		sta $0324	                STA BIOS_LBA+2
.394a09		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.394a0c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394a0e		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394a11		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394a13		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.394a17		b0 06		bcs $394a1f	                BCS find_entry
.394a19		e2 20		sep #$20	                SEP #$20        ; set A short
.394a1b		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394a1d		80 0e		bra $394a2d	                BRA ret_failure
.394a1f						find_entry
.394a1f		c2 20		rep #$20	                REP #$20        ; set A long
.394a21		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a23		0a		asl a		                ASL A
.394a24		0a		asl a		                ASL A                           ; * 4
.394a25		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394a28		aa		tax		                TAX                             ; X should be the offset within the sector
.394a29		2b		pld		ret_success     PLD
.394a2a		ab		plb		                PLB
.394a2b		38		sec		                SEC                             ; return success
.394a2c		6b		rtl		                RTL
.394a2d		2b		pld		ret_failure     PLD
.394a2e		ab		plb		                PLB
.394a2f		18		clc		                CLC                             ; Return failure
.394a30		6b		rtl		                RTL
.394a31						NEXTCLUSTER
.394a31		08		php		                PHP
.394a32		e2 20		sep #$20	                SEP #$20        ; set A short
.394a34		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394a38		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394a3a		d0 08		bne $394a44	                BNE fat32                       ; No: assume it's FAT32
.394a3c		22 52 4a 39	jsl $394a52	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.394a40		90 0d		bcc $394a4f	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a42		80 06		bra $394a4a	                BRA ret_success
.394a44		22 ba 4a 39	jsl $394aba	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394a48		90 05		bcc $394a4f	                BCC pass_failure                ; If there was an error, pass it up the chain
.394a4a		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394a4c		28		plp		                PLP
.394a4d		38		sec		                SEC
.394a4e		6b		rtl		                RTL
.394a4f		28		plp		pass_failure    PLP
.394a50		18		clc		                CLC
.394a51		6b		rtl		                RTL
.394a52						NEXTCLUSTER12
.394a52		8b		phb		                    PHB
.394a53		0b		phd		                    PHD
.394a54		08		php		                    PHP
.394a55		48		pha		                PHA             ; begin setdbr macro
.394a56		08		php		                PHP
.394a57		e2 20		sep #$20	                SEP #$20        ; set A short
.394a59		a9 00		lda #$00	                LDA #0
.394a5b		48		pha		                PHA
.394a5c		ab		plb		                PLB
.394a5d		28		plp		                PLP
.394a5e		68		pla		                PLA             ; end setdbr macro
.394a5f		48		pha		                PHA             ; begin setdp macro
.394a60		08		php		                PHP
.394a61		c2 20		rep #$20	                REP #$20        ; set A long
.394a63		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394a66		5b		tcd		                TCD
.394a67		28		plp		                PLP
.394a68		68		pla		                PLA             ; end setdp macro
.394a69		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a6b		22 5e 49 39	jsl $39495e	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394a6f		b0 03		bcs $394a74	                    BCS chk_clus_id
.394a71		82 41 00	brl $394ab5	                    BRL pass_failure
.394a74		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394a76		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394a79		d0 0d		bne $394a88	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394a7b						is_even
.394a7b		c2 20		rep #$20	                REP #$20        ; set A long
.394a7d		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394a81		29 ff 0f	and #$0fff	                    AND #$0FFF
.394a84		85 28		sta $0348	                    STA DOS_TEMP
.394a86		80 0c		bra $394a94	                    BRA check_id
.394a88						is_odd
.394a88		c2 20		rep #$20	                REP #$20        ; set A long
.394a8a		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394a8e		4a		lsr a		                    LSR A
.394a8f		4a		lsr a		                    LSR A
.394a90		4a		lsr a		                    LSR A
.394a91		4a		lsr a		                    LSR A
.394a92		85 28		sta $0348	                    STA DOS_TEMP
.394a94						check_id
.394a94		c2 20		rep #$20	                REP #$20        ; set A long
.394a96		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.394a98		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394a9b		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394a9e		f0 0f		beq $394aaf	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394aa0		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394aa2		85 10		sta $0330	                    STA DOS_CLUS_ID
.394aa4		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.394aa6						ret_success
.394aa6		e2 20		sep #$20	                SEP #$20        ; set A short
.394aa8		64 0e		stz $032e	                    STZ DOS_STATUS
.394aaa		28		plp		                    PLP
.394aab		2b		pld		                    PLD
.394aac		ab		plb		                    PLB
.394aad		38		sec		                    SEC
.394aae		6b		rtl		                    RTL
.394aaf						no_more
.394aaf		e2 20		sep #$20	                SEP #$20        ; set A short
.394ab1		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.394ab3		85 0e		sta $032e	                    STA DOS_STATUS
.394ab5		28		plp		pass_failure        PLP
.394ab6		2b		pld		                    PLD
.394ab7		ab		plb		                    PLB
.394ab8		18		clc		                    CLC
.394ab9		6b		rtl		                    RTL
.394aba						NEXTCLUSTER32
.394aba		8b		phb		                PHB
.394abb		0b		phd		                PHD
.394abc		08		php		                PHP
.394abd		48		pha		                PHA             ; begin setdbr macro
.394abe		08		php		                PHP
.394abf		e2 20		sep #$20	                SEP #$20        ; set A short
.394ac1		a9 00		lda #$00	                LDA #0
.394ac3		48		pha		                PHA
.394ac4		ab		plb		                PLB
.394ac5		28		plp		                PLP
.394ac6		68		pla		                PLA             ; end setdbr macro
.394ac7		48		pha		                PHA             ; begin setdp macro
.394ac8		08		php		                PHP
.394ac9		c2 20		rep #$20	                REP #$20        ; set A long
.394acb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ace		5b		tcd		                TCD
.394acf		28		plp		                PLP
.394ad0		68		pla		                PLA             ; end setdp macro
.394ad1		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ad3		22 c6 49 39	jsl $3949c6	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.394ad7		90 53		bcc $394b2c	                BCC ret_failure                 ; If it did not work, return the error
.394ad9		e2 20		sep #$20	                SEP #$20        ; set A short
.394adb		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.394adf		85 28		sta $0348	                STA DOS_TEMP
.394ae1		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.394ae5		85 29		sta $0349	                STA DOS_TEMP+1
.394ae7		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394aeb		85 2a		sta $034a	                STA DOS_TEMP+2
.394aed		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394af1		85 2b		sta $034b	                STA DOS_TEMP+3
.394af3		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.394af5		c9 ff		cmp #$ff	                CMP #$FF
.394af7		d0 18		bne $394b11	                BNE found_next
.394af9		a5 29		lda $0349	                LDA DOS_TEMP+1
.394afb		c9 ff		cmp #$ff	                CMP #$FF
.394afd		d0 12		bne $394b11	                BNE found_next
.394aff		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394b01		c9 ff		cmp #$ff	                CMP #$FF
.394b03		d0 0c		bne $394b11	                BNE found_next
.394b05		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394b07		c9 0f		cmp #$0f	                CMP #$0F
.394b09		d0 06		bne $394b11	                BNE found_next                  ; No: return this cluster as the next
.394b0b		e2 20		sep #$20	                SEP #$20        ; set A short
.394b0d		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394b0f		80 1b		bra $394b2c	                BRA ret_failure
.394b11						found_next
.394b11		e2 20		sep #$20	                SEP #$20        ; set A short
.394b13		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.394b15		85 10		sta $0330	                STA DOS_CLUS_ID
.394b17		a5 29		lda $0349	                LDA DOS_TEMP+1
.394b19		85 11		sta $0331	                STA DOS_CLUS_ID+1
.394b1b		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394b1d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394b1f		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394b21		85 13		sta $0333	                STA DOS_CLUS_ID+3
.394b23						ret_success
.394b23		e2 20		sep #$20	                SEP #$20        ; set A short
.394b25		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.394b27		28		plp		                PLP
.394b28		2b		pld		                PLD
.394b29		ab		plb		                PLB
.394b2a		38		sec		                SEC
.394b2b		6b		rtl		                RTL
.394b2c						ret_failure
.394b2c		e2 20		sep #$20	                SEP #$20        ; set A short
.394b2e		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394b30		28		plp		                PLP
.394b31		2b		pld		                PLD
.394b32		ab		plb		                PLB
.394b33		18		clc		                CLC
.394b34		6b		rtl		                RTL
.394b35						DOS_READNEXT
.394b35		08		php		                PHP
.394b36		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b38		22 31 4a 39	jsl $394a31	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394b3c		90 09		bcc $394b47	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394b3e		22 1d 46 39	jsl $39461d	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.394b42		90 03		bcc $394b47	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.394b44		28		plp		ret_success     PLP
.394b45		38		sec		                SEC
.394b46		6b		rtl		                RTL
.394b47		28		plp		pass_failure    PLP
.394b48		18		clc		                CLC
.394b49		6b		rtl		                RTL
.394b4a						DOS_FREECLUS
.394b4a		08		php		                PHP
.394b4b		48		pha		                PHA             ; begin setdp macro
.394b4c		08		php		                PHP
.394b4d		c2 20		rep #$20	                REP #$20        ; set A long
.394b4f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b52		5b		tcd		                TCD
.394b53		28		plp		                PLP
.394b54		68		pla		                PLA             ; end setdp macro
.394b55		e2 20		sep #$20	                SEP #$20        ; set A short
.394b57		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394b5b		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394b5d		d0 08		bne $394b67	                BNE fat32                       ; No: assume it's FAT32
.394b5f		22 db 4b 39	jsl $394bdb	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394b63		90 0d		bcc $394b72	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b65		80 06		bra $394b6d	                BRA ret_success
.394b67		22 b3 4c 39	jsl $394cb3	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394b6b		90 05		bcc $394b72	                BCC pass_failure                ; If there was an error, pass it up the chain
.394b6d		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394b6f		28		plp		                PLP
.394b70		38		sec		                SEC
.394b71		6b		rtl		                RTL
.394b72		28		plp		pass_failure    PLP
.394b73		18		clc		                CLC
.394b74		6b		rtl		                RTL
.394b75						FDC_READ2FAT12
.394b75		8b		phb		                    PHB
.394b76		0b		phd		                    PHD
.394b77		08		php		                    PHP
.394b78		48		pha		                PHA             ; begin setdbr macro
.394b79		08		php		                PHP
.394b7a		e2 20		sep #$20	                SEP #$20        ; set A short
.394b7c		a9 00		lda #$00	                LDA #0
.394b7e		48		pha		                PHA
.394b7f		ab		plb		                PLB
.394b80		28		plp		                PLP
.394b81		68		pla		                PLA             ; end setdbr macro
.394b82		48		pha		                PHA             ; begin setdp macro
.394b83		08		php		                PHP
.394b84		c2 20		rep #$20	                REP #$20        ; set A long
.394b86		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b89		5b		tcd		                TCD
.394b8a		28		plp		                PLP
.394b8b		68		pla		                PLA             ; end setdp macro
.394b8c		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b8e		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394b91		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394b93		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.394b96		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394b98		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394b9a		85 02		sta $0322	                    STA BIOS_LBA
.394b9c		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394b9e		85 04		sta $0324	                    STA BIOS_LBA+2
.394ba0		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.394ba4		b0 07		bcs $394bad	                    BCS inc_sect2                   ; If success: start getting the second sector
.394ba6		e2 20		sep #$20	                SEP #$20        ; set A short
.394ba8		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394baa		82 1c 00	brl $394bc9	                    BRL ret_failure
.394bad						inc_sect2
.394bad		c2 20		rep #$20	                REP #$20        ; set A long
.394baf		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394bb1		d0 02		bne $394bb5	                    BNE inc_buff_ptr
.394bb3		e6 04		inc $0324	                    INC BIOS_LBA+2
.394bb5		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394bb8		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394bba		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394bbd		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394bbf		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.394bc3		b0 0d		bcs $394bd2	                    BCS ret_success                 ; If success, return success
.394bc5		e2 20		sep #$20	                SEP #$20        ; set A short
.394bc7		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394bc9						ret_failure
.394bc9		e2 20		sep #$20	                SEP #$20        ; set A short
.394bcb		85 00		sta $0320	                    STA BIOS_STATUS
.394bcd		28		plp		                    PLP
.394bce		2b		pld		                    PLD
.394bcf		ab		plb		                    PLB
.394bd0		18		clc		                    CLC
.394bd1		6b		rtl		                    RTL
.394bd2						ret_success
.394bd2		e2 20		sep #$20	                SEP #$20        ; set A short
.394bd4		64 00		stz $0320	                    STZ BIOS_STATUS
.394bd6		28		plp		                    PLP
.394bd7		2b		pld		                    PLD
.394bd8		ab		plb		                    PLB
.394bd9		38		sec		                    SEC
.394bda		6b		rtl		                    RTL
.394bdb						DOS_FREECLUS12
.394bdb		da		phx		                PHX
.394bdc		8b		phb		                PHB
.394bdd		0b		phd		                PHD
.394bde		08		php		                PHP
.394bdf		48		pha		                PHA             ; begin setdbr macro
.394be0		08		php		                PHP
.394be1		e2 20		sep #$20	                SEP #$20        ; set A short
.394be3		a9 00		lda #$00	                LDA #0
.394be5		48		pha		                PHA
.394be6		ab		plb		                PLB
.394be7		28		plp		                PLP
.394be8		68		pla		                PLA             ; end setdbr macro
.394be9		48		pha		                PHA             ; begin setdp macro
.394bea		08		php		                PHP
.394beb		c2 20		rep #$20	                REP #$20        ; set A long
.394bed		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394bf0		5b		tcd		                TCD
.394bf1		28		plp		                PLP
.394bf2		68		pla		                PLA             ; end setdp macro
.394bf3		c2 30		rep #$30	                REP #$30        ; set A&X long
.394bf5		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.394bf8		85 10		sta $0330	                STA DOS_CLUS_ID
.394bfa		a9 00 00	lda #$0000	                LDA #0
.394bfd		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394bff		22 eb 48 39	jsl $3948eb	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.394c03		22 75 4b 39	jsl $394b75	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394c07		b0 07		bcs $394c10	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394c09		e2 20		sep #$20	                SEP #$20        ; set A short
.394c0b		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394c0d		82 99 00	brl $394ca9	                BRL ret_failure
.394c10						start_of_fat
.394c10		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c12		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394c14		89 01 00	bit #$0001	                BIT #1
.394c17		d0 09		bne $394c22	                BNE is_odd
.394c19		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394c1d		29 ff 0f	and #$0fff	                AND #$0FFF
.394c20		80 08		bra $394c2a	                BRA chk_available
.394c22		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394c26		4a		lsr a		                LSR A
.394c27		4a		lsr a		                LSR A
.394c28		4a		lsr a		                LSR A
.394c29		4a		lsr a		                LSR A
.394c2a						chk_available
.394c2a		85 28		sta $0348	                STA DOS_TEMP
.394c2c		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.394c2f		f0 03		beq $394c34	                BEQ chk_found
.394c31		82 39 00	brl $394c6d	                BRL next_cluster                ; No: advance to the next cluster
.394c34		8a		txa		chk_found       TXA
.394c35		85 2a		sta $034a	                STA DOS_TEMP+2
.394c37		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394c39		89 01 00	bit #$0001	                BIT #1
.394c3c		d0 0d		bne $394c4b	                BNE is_odd2
.394c3e						is_even2
.394c3e		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.394c42		09 ff 0f	ora #$0fff	                ORA #$0FFF
.394c45		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394c49		80 0b		bra $394c56	                BRA write_fat
.394c4b						is_odd2
.394c4b		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.394c4f		09 f0 ff	ora #$fff0	                ORA #$FFF0
.394c52		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394c56		22 7d 4d 39	jsl $394d7d	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394c5a		b0 07		bcs $394c63	                BCS ret_success                 ; If success: return success
.394c5c		e2 20		sep #$20	                SEP #$20        ; set A short
.394c5e		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.394c60		82 46 00	brl $394ca9	                BRL ret_failure
.394c63						ret_success
.394c63		e2 20		sep #$20	                SEP #$20        ; set A short
.394c65		64 0e		stz $032e	                STZ DOS_STATUS
.394c67		28		plp		                PLP
.394c68		2b		pld		                PLD
.394c69		ab		plb		                PLB
.394c6a		fa		plx		                PLX
.394c6b		38		sec		                SEC
.394c6c		6b		rtl		                RTL
.394c6d						next_cluster
.394c6d		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394c6f		d0 02		bne $394c73	                BNE calc_entry
.394c71		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394c73		22 eb 48 39	jsl $3948eb	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394c77		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394c7a		f0 03		beq $394c7f	                BEQ chk_end_of_fat
.394c7c		82 93 ff	brl $394c12	                BRL chk_cluster                 ; No: go back and check it too
.394c7f						chk_end_of_fat
.394c7f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394c81		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394c85		d0 0f		bne $394c96	                BNE next_2
.394c87		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394c89		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394c8d		d0 07		bne $394c96	                BNE next_2                      ; No: get the next to sectors
.394c8f		e2 20		sep #$20	                SEP #$20        ; set A short
.394c91		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.394c93		82 13 00	brl $394ca9	                BRL ret_failure
.394c96						next_2
.394c96		22 75 4b 39	jsl $394b75	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394c9a		90 06		bcc $394ca2	                BCC fat_fail                    ; If failed: return error
.394c9c		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394c9f		82 70 ff	brl $394c12	                BRL chk_cluster                 ; And start checking from there
.394ca2						fat_fail
.394ca2		e2 20		sep #$20	                SEP #$20        ; set A short
.394ca4		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394ca6		82 00 00	brl $394ca9	                BRL ret_failure
.394ca9						ret_failure
.394ca9		e2 20		sep #$20	                SEP #$20        ; set A short
.394cab		85 0e		sta $032e	                STA DOS_STATUS
.394cad		28		plp		                PLP
.394cae		2b		pld		                PLD
.394caf		ab		plb		                PLB
.394cb0		fa		plx		                PLX
.394cb1		18		clc		                CLC
.394cb2		6b		rtl		                RTL
.394cb3						DOS_FREECLUS32
.394cb3		8b		phb		                PHB
.394cb4		0b		phd		                PHD
.394cb5		08		php		                PHP
.394cb6		48		pha		                PHA             ; begin setdbr macro
.394cb7		08		php		                PHP
.394cb8		e2 20		sep #$20	                SEP #$20        ; set A short
.394cba		a9 00		lda #$00	                LDA #0
.394cbc		48		pha		                PHA
.394cbd		ab		plb		                PLB
.394cbe		28		plp		                PLP
.394cbf		68		pla		                PLA             ; end setdbr macro
.394cc0		48		pha		                PHA             ; begin setdp macro
.394cc1		08		php		                PHP
.394cc2		c2 20		rep #$20	                REP #$20        ; set A long
.394cc4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394cc7		5b		tcd		                TCD
.394cc8		28		plp		                PLP
.394cc9		68		pla		                PLA             ; end setdp macro
.394cca		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ccc		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394ccf		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394cd1		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.394cd4		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394cd6		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394cda		85 02		sta $0322	                STA BIOS_LBA
.394cdc		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394ce0		85 04		sta $0324	                STA BIOS_LBA+2
.394ce2		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.394ce6		b0 07		bcs $394cef	                BCS initial_entry               ; If OK: set the initial entry to check
.394ce8		e2 20		sep #$20	                SEP #$20        ; set A short
.394cea		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394cec		82 6b 00	brl $394d5a	                BRL ret_failure
.394cef						initial_entry
.394cef		c2 20		rep #$20	                REP #$20        ; set A long
.394cf1		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.394cf4		85 10		sta $0330	                STA DOS_CLUS_ID
.394cf6		a9 00 00	lda #$0000	                LDA #0
.394cf9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394cfb		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394cfe		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394d02		d0 06		bne $394d0a	                BNE next_entry                  ; No: move to the next entry
.394d04		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.394d08		f0 36		beq $394d40	                BEQ found_free                  ; Yes: go to allocate and return it
.394d0a		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.394d0c		d0 02		bne $394d10	                BNE inc_ptr
.394d0e		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394d10		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394d11		e8		inx		                INX
.394d12		e8		inx		                INX
.394d13		e8		inx		                INX
.394d14		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394d17		90 e5		bcc $394cfe	                BLT chk_entry                   ; No: check this entry
.394d19		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394d1b		d0 18		bne $394d35	                BNE get_block
.394d1d		e6 04		inc $0324	                INC BIOS_LBA+2
.394d1f		a5 04		lda $0324	                LDA BIOS_LBA+2
.394d21		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394d25		90 0e		bcc $394d35	                BLT get_block
.394d27		a5 02		lda $0322	                LDA BIOS_LBA
.394d29		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.394d2d		90 06		bcc $394d35	                BLT get_block
.394d2f		e2 20		sep #$20	                SEP #$20        ; set A short
.394d31		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.394d33		80 25		bra $394d5a	                BRA ret_failure
.394d35		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.394d39		90 1b		bcc $394d56	                BCC ret_fat_error               ; If error: throw a FAT error
.394d3b		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.394d3e		80 be		bra $394cfe	                BRA chk_entry                   ; Check this entry
.394d40						found_free
.394d40		c2 20		rep #$20	                REP #$20        ; set A long
.394d42		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394d45		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.394d49		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.394d4c		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394d50		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394d54		b0 0d		bcs $394d63	                BCS ret_success                 ; If OK: return success
.394d56						ret_fat_error
.394d56		e2 20		sep #$20	                SEP #$20        ; set A short
.394d58		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.394d5a						ret_failure
.394d5a		e2 20		sep #$20	                SEP #$20        ; set A short
.394d5c		85 0e		sta $032e	                STA DOS_STATUS
.394d5e		28		plp		                PLP
.394d5f		2b		pld		                PLD
.394d60		ab		plb		                PLB
.394d61		18		clc		                CLC
.394d62		6b		rtl		                RTL
.394d63						ret_success
.394d63		e2 20		sep #$20	                SEP #$20        ; set A short
.394d65		64 0e		stz $032e	                STZ DOS_STATUS
.394d67		28		plp		                PLP
.394d68		2b		pld		                PLD
.394d69		ab		plb		                PLB
.394d6a		38		sec		                SEC
.394d6b		6b		rtl		                RTL
.394d6c						DELCLUSTER
.394d6c		e2 20		sep #$20	                SEP #$20        ; set A short
.394d6e		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394d72		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394d74		d0 04		bne $394d7a	                BNE fat32                       ; No: assume it's FAT32
.394d76		5c c4 4d 39	jmp $394dc4	fat12           JML DELCLUSTER12
.394d7a		4c 12 4e	jmp $394e12	fat32           JMP DELCLUSTER32
.394d7d						WRITEFAT12
.394d7d		8b		phb		                PHB
.394d7e		0b		phd		                PHD
.394d7f		48		pha		                PHA             ; begin setdbr macro
.394d80		08		php		                PHP
.394d81		e2 20		sep #$20	                SEP #$20        ; set A short
.394d83		a9 00		lda #$00	                LDA #0
.394d85		48		pha		                PHA
.394d86		ab		plb		                PLB
.394d87		28		plp		                PLP
.394d88		68		pla		                PLA             ; end setdbr macro
.394d89		48		pha		                PHA             ; begin setdp macro
.394d8a		08		php		                PHP
.394d8b		c2 20		rep #$20	                REP #$20        ; set A long
.394d8d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d90		5b		tcd		                TCD
.394d91		28		plp		                PLP
.394d92		68		pla		                PLA             ; end setdp macro
.394d93		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d95		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.394d98		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394d9a		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394d9d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394d9f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394da1		85 02		sta $0322	                STA BIOS_LBA
.394da3		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394da5		85 04		sta $0324	                STA BIOS_LBA+2
.394da7		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394dab		90 14		bcc $394dc1	                BCC done
.394dad		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394db0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394db2		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394db5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394db7		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394db9		d0 02		bne $394dbd	                BNE put_second
.394dbb		e6 04		inc $0324	                INC BIOS_LBA+2
.394dbd		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394dc1		2b		pld		done            PLD
.394dc2		ab		plb		                PLB
.394dc3		6b		rtl		                RTL
.394dc4						DELCLUSTER12
.394dc4		8b		phb		                PHB
.394dc5		0b		phd		                PHD
.394dc6		08		php		                PHP
.394dc7		48		pha		                PHA             ; begin setdbr macro
.394dc8		08		php		                PHP
.394dc9		e2 20		sep #$20	                SEP #$20        ; set A short
.394dcb		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394dcd		48		pha		                PHA
.394dce		ab		plb		                PLB
.394dcf		28		plp		                PLP
.394dd0		68		pla		                PLA             ; end setdbr macro
.394dd1		48		pha		                PHA             ; begin setdp macro
.394dd2		08		php		                PHP
.394dd3		c2 20		rep #$20	                REP #$20        ; set A long
.394dd5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394dd8		5b		tcd		                TCD
.394dd9		28		plp		                PLP
.394dda		68		pla		                PLA             ; end setdp macro
.394ddb		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ddd		22 5e 49 39	jsl $39495e	                JSL FATFORCLUSTER12
.394de1		8a		txa		                TXA                             ; Check to see if the index is odd or even
.394de2		89 01 00	bit #$0001	                BIT #1
.394de5		d0 08		bne $394def	                BNE is_odd
.394de7		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394dea		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394ded		80 06		bra $394df5	                BRA save_update
.394def		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394df2		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.394df5		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.394df8		22 7d 4d 39	jsl $394d7d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394dfc		b0 0b		bcs $394e09	                BCS ret_success
.394dfe						ret_failure
.394dfe		e2 20		sep #$20	                SEP #$20        ; set A short
.394e00		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e02		85 0e		sta $032e	                STA DOS_STATUS
.394e04		28		plp		                PLP
.394e05		2b		pld		                PLD
.394e06		ab		plb		                PLB
.394e07		18		clc		                CLC
.394e08		6b		rtl		                RTL
.394e09						ret_success
.394e09		e2 20		sep #$20	                SEP #$20        ; set A short
.394e0b		64 0e		stz $032e	                STZ DOS_STATUS
.394e0d		28		plp		                PLP
.394e0e		2b		pld		                PLD
.394e0f		ab		plb		                PLB
.394e10		38		sec		                SEC
.394e11		6b		rtl		                RTL
.394e12						DELCLUSTER32
.394e12		8b		phb		                PHB
.394e13		0b		phd		                PHD
.394e14		08		php		                PHP
.394e15		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e17		48		pha		                PHA             ; begin setdbr macro
.394e18		08		php		                PHP
.394e19		e2 20		sep #$20	                SEP #$20        ; set A short
.394e1b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e1d		48		pha		                PHA
.394e1e		ab		plb		                PLB
.394e1f		28		plp		                PLP
.394e20		68		pla		                PLA             ; end setdbr macro
.394e21		48		pha		                PHA             ; begin setdp macro
.394e22		08		php		                PHP
.394e23		c2 20		rep #$20	                REP #$20        ; set A long
.394e25		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e28		5b		tcd		                TCD
.394e29		28		plp		                PLP
.394e2a		68		pla		                PLA             ; end setdp macro
.394e2b		22 c6 49 39	jsl $3949c6	                JSL FATFORCLUSTER32
.394e2f		a9 00 00	lda #$0000	                LDA #0
.394e32		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394e35		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394e38		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394e3c		b0 0b		bcs $394e49	                BCS ret_success
.394e3e						ret_failure
.394e3e		e2 20		sep #$20	                SEP #$20        ; set A short
.394e40		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394e42		85 0e		sta $032e	                STA DOS_STATUS
.394e44		28		plp		                PLP
.394e45		2b		pld		                PLD
.394e46		ab		plb		                PLB
.394e47		18		clc		                CLC
.394e48		6b		rtl		                RTL
.394e49						ret_success
.394e49		e2 20		sep #$20	                SEP #$20        ; set A short
.394e4b		64 0e		stz $032e	                STZ DOS_STATUS
.394e4d		28		plp		                PLP
.394e4e		2b		pld		                PLD
.394e4f		ab		plb		                PLB
.394e50		38		sec		                SEC
.394e51		6b		rtl		                RTL
.394e52						DOS_APPENDCLUS
.394e52		8b		phb		                PHB
.394e53		0b		phd		                PHD
.394e54		08		php		                PHP
.394e55		48		pha		                PHA             ; begin setdbr macro
.394e56		08		php		                PHP
.394e57		e2 20		sep #$20	                SEP #$20        ; set A short
.394e59		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e5b		48		pha		                PHA
.394e5c		ab		plb		                PLB
.394e5d		28		plp		                PLP
.394e5e		68		pla		                PLA             ; end setdbr macro
.394e5f		48		pha		                PHA             ; begin setdp macro
.394e60		08		php		                PHP
.394e61		c2 20		rep #$20	                REP #$20        ; set A long
.394e63		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e66		5b		tcd		                TCD
.394e67		28		plp		                PLP
.394e68		68		pla		                PLA             ; end setdp macro
.394e69		c2 30		rep #$30	                REP #$30        ; set A&X long
.394e6b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394e6d		48		pha		                PHA
.394e6e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394e70		48		pha		                PHA
.394e71		22 4a 4b 39	jsl $394b4a	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394e75		b0 09		bcs $394e80	                BCS save_cluster                ; If we got a cluster, write the data to it
.394e77		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394e78		85 10		sta $0330	                STA DOS_CLUS_ID
.394e7a		68		pla		                PLA
.394e7b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e7d		82 7d 00	brl $394efd	                BRL pass_failure                ; Pass the failure back up the chain
.394e80		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394e82		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394e85		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394e87		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394e8a		22 5a 46 39	jsl $39465a	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394e8e		90 e7		bcc $394e77	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394e90		68		pla		                PLA                             ; Restore the cluster of the file
.394e91		85 10		sta $0330	                STA DOS_CLUS_ID
.394e93		68		pla		                PLA
.394e94		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394e96		22 31 4a 39	jsl $394a31	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394e9a		b0 fa		bcs $394e96	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394e9c		e2 20		sep #$20	                SEP #$20        ; set A short
.394e9e		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394ea2		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394ea4		d0 3d		bne $394ee3	                BNE fat32                       ; No: assume it's FAT32
.394ea6						fat12
.394ea6		c2 20		rep #$20	                REP #$20        ; set A long
.394ea8		22 eb 48 39	jsl $3948eb	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394eac		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394eae		89 01 00	bit #$0001	                BIT #1
.394eb1		d0 11		bne $394ec4	                BNE is_odd
.394eb3		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394eb6		29 ff 0f	and #$0fff	                AND #$0FFF
.394eb9		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394ebc		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394ebf		29 00 f0	and #$f000	                AND #$F000
.394ec2		80 10		bra $394ed4	                BRA update_fat12
.394ec4		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394ec7		0a		asl a		                ASL A
.394ec8		0a		asl a		                ASL A
.394ec9		0a		asl a		                ASL A
.394eca		0a		asl a		                ASL A
.394ecb		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394ece		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394ed1		29 0f 00	and #$000f	                AND #$000F
.394ed4		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394ed7		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394eda		22 7d 4d 39	jsl $394d7d	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394ede		b0 22		bcs $394f02	                BCS ret_success
.394ee0		82 1a 00	brl $394efd	                BRL pass_failure
.394ee3						fat32
.394ee3		c2 20		rep #$20	                REP #$20        ; set A long
.394ee5		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394ee8		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394eeb		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394eee		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394ef1		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394ef5		b0 0b		bcs $394f02	                BCS ret_success
.394ef7		e2 20		sep #$20	                SEP #$20        ; set A short
.394ef9		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394efb		85 0e		sta $032e	                STA DOS_STATUS
.394efd		28		plp		pass_failure    PLP
.394efe		2b		pld		                PLD
.394eff		ab		plb		                PLB
.394f00		18		clc		                CLC
.394f01		6b		rtl		                RTL
.394f02						ret_success
.394f02		e2 20		sep #$20	                SEP #$20        ; set A short
.394f04		64 0e		stz $032e	                STZ DOS_STATUS
.394f06		28		plp		                PLP
.394f07		2b		pld		                PLD
.394f08		ab		plb		                PLB
.394f09		38		sec		                SEC
.394f0a		6b		rtl		                RTL
.394f0b						BCD2BIN
.394f0b		8b		phb		                PHB
.394f0c		0b		phd		                PHD
.394f0d		08		php		                PHP
.394f0e		48		pha		                PHA             ; begin setdbr macro
.394f0f		08		php		                PHP
.394f10		e2 20		sep #$20	                SEP #$20        ; set A short
.394f12		a9 00		lda #$00	                LDA #0
.394f14		48		pha		                PHA
.394f15		ab		plb		                PLB
.394f16		28		plp		                PLP
.394f17		68		pla		                PLA             ; end setdbr macro
.394f18		48		pha		                PHA             ; begin setdp macro
.394f19		08		php		                PHP
.394f1a		c2 20		rep #$20	                REP #$20        ; set A long
.394f1c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f1f		5b		tcd		                TCD
.394f20		28		plp		                PLP
.394f21		68		pla		                PLA             ; end setdp macro
.394f22		c2 30		rep #$30	                REP #$30        ; set A&X long
.394f24		85 28		sta $0348	                STA DOS_TEMP
.394f26		29 0f 00	and #$000f	                AND #$000F
.394f29		85 2a		sta $034a	                STA DOS_TEMP+2
.394f2b		a5 28		lda $0348	                LDA DOS_TEMP
.394f2d		4a		lsr a		                LSR A
.394f2e		4a		lsr a		                LSR A
.394f2f		4a		lsr a		                LSR A
.394f30		4a		lsr a		                LSR A
.394f31		85 28		sta $0348	                STA DOS_TEMP
.394f33		29 0f 00	and #$000f	                AND #$000F
.394f36		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f3a		a9 0a 00	lda #$000a	                LDA #10
.394f3d		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f41		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f45		18		clc		                CLC
.394f46		65 2a		adc $034a	                ADC DOS_TEMP+2
.394f48		85 2a		sta $034a	                STA DOS_TEMP+2
.394f4a		a5 28		lda $0348	                LDA DOS_TEMP
.394f4c		4a		lsr a		                LSR A
.394f4d		4a		lsr a		                LSR A
.394f4e		4a		lsr a		                LSR A
.394f4f		4a		lsr a		                LSR A
.394f50		85 28		sta $0348	                STA DOS_TEMP
.394f52		29 0f 00	and #$000f	                AND #$000F
.394f55		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f59		a9 64 00	lda #$0064	                LDA #100
.394f5c		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f60		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f64		18		clc		                CLC
.394f65		65 2a		adc $034a	                ADC DOS_TEMP+2
.394f67		85 2a		sta $034a	                STA DOS_TEMP+2
.394f69		a5 28		lda $0348	                LDA DOS_TEMP
.394f6b		4a		lsr a		                LSR A
.394f6c		4a		lsr a		                LSR A
.394f6d		4a		lsr a		                LSR A
.394f6e		4a		lsr a		                LSR A
.394f6f		29 0f 00	and #$000f	                AND #$000F
.394f72		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394f76		a9 e8 03	lda #$03e8	                LDA #1000
.394f79		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394f7d		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394f81		18		clc		                CLC
.394f82		65 2a		adc $034a	                ADC DOS_TEMP+2
.394f84		28		plp		                PLP
.394f85		2b		pld		                PLD
.394f86		ab		plb		                PLB
.394f87		6b		rtl		                RTL
.394f88						DOS_RTCCREATE
.394f88		8b		phb		                PHB
.394f89		0b		phd		                PHD
.394f8a		08		php		                PHP
.394f8b		48		pha		                PHA             ; begin setdbr macro
.394f8c		08		php		                PHP
.394f8d		e2 20		sep #$20	                SEP #$20        ; set A short
.394f8f		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f91		48		pha		                PHA
.394f92		ab		plb		                PLB
.394f93		28		plp		                PLP
.394f94		68		pla		                PLA             ; end setdbr macro
.394f95		48		pha		                PHA             ; begin setdp macro
.394f96		08		php		                PHP
.394f97		c2 20		rep #$20	                REP #$20        ; set A long
.394f99		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f9c		5b		tcd		                TCD
.394f9d		28		plp		                PLP
.394f9e		68		pla		                PLA             ; end setdp macro
.394f9f		c2 10		rep #$10	                REP #$10        ; set X long
.394fa1		e2 20		sep #$20	                SEP #$20        ; set A short
.394fa3		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394fa7		09 08		ora #$08	                ORA #%00001000
.394fa9		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394fad		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394fb1		85 29		sta $0349	                STA DOS_TEMP+1
.394fb3		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394fb7		85 28		sta $0348	                STA DOS_TEMP
.394fb9		c2 20		rep #$20	                REP #$20        ; set A long
.394fbb		a5 28		lda $0348	                LDA DOS_TEMP
.394fbd		22 0b 4f 39	jsl $394f0b	                JSL BCD2BIN                 ; Convert it to binary
.394fc1		85 28		sta $0348	                STA DOS_TEMP
.394fc3		38		sec		                SEC                         ; Year is relative to 1980
.394fc4		e9 bc 07	sbc #$07bc	                SBC #1980
.394fc7		c2 20		rep #$20	                REP #$20        ; set A long
.394fc9		0a		asl a		                ASL A
.394fca		0a		asl a		                ASL A
.394fcb		0a		asl a		                ASL A
.394fcc		0a		asl a		                ASL A
.394fcd		0a		asl a		                ASL A
.394fce		0a		asl a		                ASL A
.394fcf		0a		asl a		                ASL A
.394fd0		0a		asl a		                ASL A
.394fd1		0a		asl a		                ASL A
.394fd2		29 00 fe	and #$fe00	                AND #$FE00
.394fd5		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394fd8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394fda		e2 20		sep #$20	                SEP #$20        ; set A short
.394fdc		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394fe0		c2 20		rep #$20	                REP #$20        ; set A long
.394fe2		29 ff 00	and #$00ff	                AND #$00FF
.394fe5		22 0b 4f 39	jsl $394f0b	                JSL BCD2BIN                 ; Convert it to binary
.394fe9		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394fec		0a		asl a		                ASL A
.394fed		0a		asl a		                ASL A
.394fee		0a		asl a		                ASL A
.394fef		0a		asl a		                ASL A
.394ff0		0a		asl a		                ASL A
.394ff1		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394ff4		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394ff7		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394ff9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ffb		e2 20		sep #$20	                SEP #$20        ; set A short
.394ffd		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.395001		c2 20		rep #$20	                REP #$20        ; set A long
.395003		29 ff 00	and #$00ff	                AND #$00FF
.395006		22 0b 4f 39	jsl $394f0b	                JSL BCD2BIN                 ; Convert it to binary
.39500a		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.39500d		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.395010		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395012		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395014		e2 20		sep #$20	                SEP #$20        ; set A short
.395016		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.39501a		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.39501c		c2 20		rep #$20	                REP #$20        ; set A long
.39501e		29 ff 00	and #$00ff	                AND #$00FF
.395021		22 0b 4f 39	jsl $394f0b	                JSL BCD2BIN                 ; Convert it to binary
.395025		c2 20		rep #$20	                REP #$20        ; set A long
.395027		0a		asl a		                ASL A
.395028		0a		asl a		                ASL A
.395029		0a		asl a		                ASL A
.39502a		0a		asl a		                ASL A
.39502b		0a		asl a		                ASL A
.39502c		0a		asl a		                ASL A
.39502d		0a		asl a		                ASL A
.39502e		0a		asl a		                ASL A
.39502f		0a		asl a		                ASL A
.395030		0a		asl a		                ASL A
.395031		0a		asl a		                ASL A
.395032		29 00 f8	and #$f800	                AND #$F800
.395035		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395038		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39503a		e2 20		sep #$20	                SEP #$20        ; set A short
.39503c		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.395040		c2 20		rep #$20	                REP #$20        ; set A long
.395042		29 ff 00	and #$00ff	                AND #$00FF
.395045		22 0b 4f 39	jsl $394f0b	                JSL BCD2BIN                 ; Convert it to binary
.395049		c2 20		rep #$20	                REP #$20        ; set A long
.39504b		0a		asl a		                ASL A
.39504c		0a		asl a		                ASL A
.39504d		0a		asl a		                ASL A
.39504e		0a		asl a		                ASL A
.39504f		0a		asl a		                ASL A
.395050		29 e0 07	and #$07e0	                AND #$07E0
.395053		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395056		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395058		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39505a		e2 20		sep #$20	                SEP #$20        ; set A short
.39505c		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.395060		c2 20		rep #$20	                REP #$20        ; set A long
.395062		29 ff 00	and #$00ff	                AND #$00FF
.395065		22 0b 4f 39	jsl $394f0b	                JSL BCD2BIN                 ; Convert it to binary
.395069		c2 20		rep #$20	                REP #$20        ; set A long
.39506b		29 1f 00	and #$001f	                AND #$001F
.39506e		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.395071		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.395073		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395075		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.395079		29 f7 00	and #$00f7	                AND #%11110111
.39507c		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.395080		28		plp		                PLP
.395081		2b		pld		                PLD
.395082		ab		plb		                PLB
.395083		6b		rtl		                RTL
.395084						DOS_CREATE
.395084		8b		phb		                PHB
.395085		0b		phd		                PHD
.395086		08		php		                PHP
.395087		48		pha		                PHA             ; begin setdbr macro
.395088		08		php		                PHP
.395089		e2 20		sep #$20	                SEP #$20        ; set A short
.39508b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39508d		48		pha		                PHA
.39508e		ab		plb		                PLB
.39508f		28		plp		                PLP
.395090		68		pla		                PLA             ; end setdbr macro
.395091		48		pha		                PHA             ; begin setdp macro
.395092		08		php		                PHP
.395093		c2 20		rep #$20	                REP #$20        ; set A long
.395095		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395098		5b		tcd		                TCD
.395099		28		plp		                PLP
.39509a		68		pla		                PLA             ; end setdp macro
.39509b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39509d		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.3950a0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950a2		85 28		sta $0348	                STA DOS_TEMP
.3950a4		c8		iny		                INY
.3950a5		c8		iny		                INY
.3950a6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950a8		85 2a		sta $034a	                STA DOS_TEMP+2
.3950aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3950ac		a0 00 00	ldy #$0000	                LDY #0
.3950af		a2 00 00	ldx #$0000	                LDX #0
.3950b2		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.3950b4		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.3950b6		f0 04		beq $3950bc	                BEQ find_file                   ; If it's NULL, we're done
.3950b8		e8		inx		                INX
.3950b9		c8		iny		                INY
.3950ba		80 f6		bra $3950b2	                BRA path_loop
.3950bc		22 6b 47 39	jsl $39476b	find_file       JSL DOS_PARSE_PATH
.3950c0		22 03 48 39	jsl $394803	                JSL DOS_FINDFILE
.3950c4		90 07		bcc $3950cd	                BCC set_device
.3950c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3950c8		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.3950ca		82 d2 00	brl $39519f	                BRL ret_failure
.3950cd						set_device
.3950cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3950cf		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3950d2		a5 01		lda $0321	                LDA BIOS_DEV
.3950d4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950d6						validate_name
.3950d6		22 4a 4b 39	jsl $394b4a	                JSL DOS_FREECLUS
.3950da		b0 03		bcs $3950df	                BCS save_data
.3950dc		82 c4 00	brl $3951a3	                BRL pass_failure
.3950df						save_data
.3950df		c2 20		rep #$20	                REP #$20        ; set A long
.3950e1		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.3950e4		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.3950e6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950e8		c8		iny		                INY
.3950e9		c8		iny		                INY
.3950ea		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3950ec		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950ee		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.3950f1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950f3		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3950f5		c8		iny		                INY
.3950f6		c8		iny		                INY
.3950f7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950f9		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3950fb		22 5a 46 39	jsl $39465a	                JSL DOS_PUTCLUSTER
.3950ff		b0 00		bcs $395101	                BCS find_dir
.395101						find_dir
.395101		c2 20		rep #$20	                REP #$20        ; set A long
.395103		22 95 41 39	jsl $394195	                JSL DOS_DIRFINDFREE
.395107		b0 1a		bcs $395123	                BCS set_entry
.395109		c2 20		rep #$20	                REP #$20        ; set A long
.39510b		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.39510e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.395110		85 10		sta $0330	                STA DOS_CLUS_ID
.395112		c8		iny		                INY
.395113		c8		iny		                INY
.395114		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395116		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395118		22 12 4e 39	jsl $394e12	                JSL DELCLUSTER32                ; Delete the cluster
.39511c		e2 20		sep #$20	                SEP #$20        ; set A short
.39511e		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.395120		82 7c 00	brl $39519f	                BRL ret_failure
.395123						set_entry
.395123		e2 20		sep #$20	                SEP #$20        ; set A short
.395125		a0 00 00	ldy #$0000	                LDY #0
.395128		a9 00		lda #$00	                LDA #0                          ; NULL
.39512a		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.39512c		c8		iny		                INY
.39512d		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.395130		d0 f8		bne $39512a	                BNE copy_dir_loop
.395132		a0 00 00	ldy #$0000	                LDY #0
.395135		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.395138		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39513a		c8		iny		                INY
.39513b		c0 0b 00	cpy #$000b	                CPY #11
.39513e		d0 f5		bne $395135	                BNE name_loop
.395140		c2 20		rep #$20	                REP #$20        ; set A long
.395142		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.395145		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395147		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.39514a		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39514c		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.39514f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395151		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.395154		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395156		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.395159		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39515b		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.39515e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395160		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.395163		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395165		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.395168		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39516a		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.39516d		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.395170		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395172		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.395175		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395177		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.39517a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39517c		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.39517f		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395181		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.395184		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395186		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.395189		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39518b		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.39518e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395190		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.395193		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395195		c2 20		rep #$20	                REP #$20        ; set A long
.395197		22 53 42 39	jsl $394253	                JSL DOS_DIRWRITE
.39519b		b0 0b		bcs $3951a8	                BCS ret_success
.39519d		80 04		bra $3951a3	                BRA pass_failure
.39519f						ret_failure
.39519f		e2 20		sep #$20	                SEP #$20        ; set A short
.3951a1		85 0e		sta $032e	                STA DOS_STATUS
.3951a3		28		plp		pass_failure    PLP
.3951a4		2b		pld		                PLD
.3951a5		ab		plb		                PLB
.3951a6		18		clc		                CLC
.3951a7		6b		rtl		                RTL
.3951a8						ret_success
.3951a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3951aa		64 0e		stz $032e	                STZ DOS_STATUS
.3951ac		28		plp		                PLP
.3951ad		2b		pld		                PLD
.3951ae		ab		plb		                PLB
.3951af		38		sec		                SEC
.3951b0		6b		rtl		                RTL
.3951b1						DOS_COPYPATH
.3951b1		da		phx		                PHX
.3951b2		5a		phy		                PHY
.3951b3		8b		phb		                PHB
.3951b4		0b		phd		                PHD
.3951b5		08		php		                PHP
.3951b6		48		pha		                PHA             ; begin setdbr macro
.3951b7		08		php		                PHP
.3951b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3951ba		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3951bc		48		pha		                PHA
.3951bd		ab		plb		                PLB
.3951be		28		plp		                PLP
.3951bf		68		pla		                PLA             ; end setdbr macro
.3951c0		48		pha		                PHA             ; begin setdp macro
.3951c1		08		php		                PHP
.3951c2		c2 20		rep #$20	                REP #$20        ; set A long
.3951c4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3951c7		5b		tcd		                TCD
.3951c8		28		plp		                PLP
.3951c9		68		pla		                PLA             ; end setdp macro
.3951ca		c2 30		rep #$30	                REP #$30        ; set A&X long
.3951cc		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.3951cf		a2 00 00	ldx #$0000	                LDX #0
.3951d2		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.3951d4		e8		inx		                INX
.3951d5		e8		inx		                INX
.3951d6		e0 00 01	cpx #$0100	                CPX #256
.3951d9		d0 f7		bne $3951d2	                BNE clr_loop
.3951db		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.3951dd		d0 04		bne $3951e3	                BNE get_path            ; No: attempt to fetch the path
.3951df		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.3951e1		f0 27		beq $39520a	                BEQ done                ; Yes: return an empty buffer
.3951e3		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.3951e6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951e8		85 28		sta $0348	                STA DOS_TEMP
.3951ea		c8		iny		                INY
.3951eb		c8		iny		                INY
.3951ec		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3951ee		85 2a		sta $034a	                STA DOS_TEMP+2
.3951f0		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.3951f2		d0 04		bne $3951f8	                BNE start_copy          ; No: start copying it
.3951f4		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3951f6		f0 12		beq $39520a	                BEQ done                ; Yes: return an empty buffer
.3951f8						start_copy
.3951f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3951fa		a2 00 00	ldx #$0000	                LDX #0
.3951fd		a0 00 00	ldy #$0000	                LDY #0
.395200		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.395202		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.395204		f0 04		beq $39520a	                BEQ done
.395206		e8		inx		                INX
.395207		c8		iny		                INY
.395208		d0 f6		bne $395200	                BNE loop
.39520a		28		plp		done            PLP
.39520b		2b		pld		                PLD
.39520c		ab		plb		                PLB
.39520d		7a		ply		                PLY
.39520e		fa		plx		                PLX
.39520f		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.395210						DOS_TEST
.395210		8b		phb		                PHB
.395211		0b		phd		                PHD
.395212		08		php		                PHP
.395213		48		pha		                PHA             ; begin setdbr macro
.395214		08		php		                PHP
.395215		e2 20		sep #$20	                SEP #$20        ; set A short
.395217		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395219		48		pha		                PHA
.39521a		ab		plb		                PLB
.39521b		28		plp		                PLP
.39521c		68		pla		                PLA             ; end setdbr macro
.39521d		48		pha		                PHA             ; begin setdp macro
.39521e		08		php		                PHP
.39521f		c2 20		rep #$20	                REP #$20        ; set A long
.395221		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395224		5b		tcd		                TCD
.395225		28		plp		                PLP
.395226		68		pla		                PLA             ; end setdp macro
.395227		c2 30		rep #$30	                REP #$30        ; set A&X long
.395229		a9 4f 52	lda #$524f	                LDA #<>src_file
.39522c		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.395230		a9 39 00	lda #$0039	                LDA #`src_file
.395233		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.395237		a9 5c 52	lda #$525c	                LDA #<>dst_file
.39523a		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.39523e		a9 39 00	lda #$0039	                LDA #`dst_file
.395241		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.395245		22 16 59 39	jsl $395916	                JSL IF_COPY
.395249		b0 00		bcs $39524b	                BCS done
.39524b		28		plp		done            PLP
.39524c		2b		pld		                PLD
.39524d		ab		plb		                PLB
.39524e		6b		rtl		                RTL
>39524f		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>395257		2e 62 61 73 00
>39525c		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>395264		32 2e 62 61 73 00
.39526a						IF_OPEN
.39526a		da		phx		                PHX
.39526b		5a		phy		                PHY
.39526c		0b		phd		                PHD
.39526d		8b		phb		                PHB
.39526e		08		php		                PHP
.39526f		48		pha		                PHA             ; begin setdbr macro
.395270		08		php		                PHP
.395271		e2 20		sep #$20	                SEP #$20        ; set A short
.395273		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395275		48		pha		                PHA
.395276		ab		plb		                PLB
.395277		28		plp		                PLP
.395278		68		pla		                PLA             ; end setdbr macro
.395279		48		pha		                PHA             ; begin setdp macro
.39527a		08		php		                PHP
.39527b		c2 20		rep #$20	                REP #$20        ; set A long
.39527d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395280		5b		tcd		                TCD
.395281		28		plp		                PLP
.395282		68		pla		                PLA             ; end setdp macro
.395283		e2 20		sep #$20	                SEP #$20        ; set A short
.395285		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.395288		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39528a		89 20		bit #$20	                BIT #FD_STAT_OPEN
.39528c		f0 05		beq $395293	                BEQ ok_to_open
.39528e		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.395290		82 1c 05	brl $3957af	                BRL IF_FAILURE
.395293		22 b1 51 39	jsl $3951b1	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.395297		22 03 48 39	jsl $394803	                JSL DOS_FINDFILE                ; Attempt to find the file
.39529b		b0 03		bcs $3952a0	                BCS is_found                    ; If OK: we found the file
.39529d		82 13 05	brl $3957b3	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.3952a0						is_found
.3952a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3952a2		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.3952a5		a5 01		lda $0321	                LDA BIOS_DEV
.3952a7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952a9		c2 20		rep #$20	                REP #$20        ; set A long
.3952ab		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.3952ae		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952b0		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3952b2		c8		iny		                INY
.3952b3		c8		iny		                INY
.3952b4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3952b6		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3952b8		22 1d 46 39	jsl $39461d	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.3952bc		b0 03		bcs $3952c1	                BCS read_cluster
.3952be		82 f2 04	brl $3957b3	                BRL IF_PASSFAILURE
.3952c1		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.3952c4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952c6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952c8		c8		iny		                INY
.3952c9		c8		iny		                INY
.3952ca		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952cc		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952ce		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.3952d1		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3952d3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952d5		c8		iny		                INY
.3952d6		c8		iny		                INY
.3952d7		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3952d9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952db		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.3952de		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952e0		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.3952e3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952e5		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.3952e8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3952ea		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.3952ed		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3952f1		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.3952f4		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.3952f6		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3952f8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3952fa		82 bd 04	brl $3957ba	                BRL IF_SUCCESS
.3952fd						IF_CREATE
.3952fd		da		phx		                PHX
.3952fe		5a		phy		                PHY
.3952ff		0b		phd		                PHD
.395300		8b		phb		                PHB
.395301		08		php		                PHP
.395302		48		pha		                PHA             ; begin setdbr macro
.395303		08		php		                PHP
.395304		e2 20		sep #$20	                SEP #$20        ; set A short
.395306		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395308		48		pha		                PHA
.395309		ab		plb		                PLB
.39530a		28		plp		                PLP
.39530b		68		pla		                PLA             ; end setdbr macro
.39530c		48		pha		                PHA             ; begin setdp macro
.39530d		08		php		                PHP
.39530e		c2 20		rep #$20	                REP #$20        ; set A long
.395310		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395313		5b		tcd		                TCD
.395314		28		plp		                PLP
.395315		68		pla		                PLA             ; end setdp macro
.395316		22 84 50 39	jsl $395084	                JSL DOS_CREATE                  ; Attempt to create the file
.39531a		90 18		bcc $395334	                BCC pass_failure                ; If it fails: pass the failure up the chain
.39531c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39531e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.395321		a9 00 00	lda #$0000	                LDA #0
.395324		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395326		c8		iny		                INY
.395327		c8		iny		                INY
.395328		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39532a		e2 20		sep #$20	                SEP #$20        ; set A short
.39532c		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.39532f		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.395331		82 86 04	brl $3957ba	                BRL IF_SUCCESS
.395334		82 78 04	brl $3957af	pass_failure    BRL IF_FAILURE
.395337						IF_CLOSE
.395337		da		phx		                PHX
.395338		5a		phy		                PHY
.395339		0b		phd		                PHD
.39533a		8b		phb		                PHB
.39533b		08		php		                PHP
.39533c		48		pha		                PHA             ; begin setdbr macro
.39533d		08		php		                PHP
.39533e		e2 20		sep #$20	                SEP #$20        ; set A short
.395340		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395342		48		pha		                PHA
.395343		ab		plb		                PLB
.395344		28		plp		                PLP
.395345		68		pla		                PLA             ; end setdbr macro
.395346		48		pha		                PHA             ; begin setdp macro
.395347		08		php		                PHP
.395348		c2 20		rep #$20	                REP #$20        ; set A long
.39534a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39534d		5b		tcd		                TCD
.39534e		28		plp		                PLP
.39534f		68		pla		                PLA             ; end setdp macro
.395350		e2 20		sep #$20	                SEP #$20        ; set A short
.395352		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.395355		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395357		89 02		bit #$02	                BIT #FD_STAT_WRITE
.395359		f0 09		beq $395364	                BEQ set_flag                    ; No, just mark it closed
.39535b		22 d0 53 39	jsl $3953d0	                JSL IF_WRITE                    ; Attempt to write the cluster
.39535f		b0 03		bcs $395364	                BCS set_flag
.395361		82 4f 04	brl $3957b3	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.395364		22 b4 58 39	jsl $3958b4	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.395368		82 4f 04	brl $3957ba	                BRL IF_SUCCESS
.39536b						IF_READ
.39536b		da		phx		                PHX
.39536c		5a		phy		                PHY
.39536d		0b		phd		                PHD
.39536e		8b		phb		                PHB
.39536f		08		php		                PHP
.395370		48		pha		                PHA             ; begin setdbr macro
.395371		08		php		                PHP
.395372		e2 20		sep #$20	                SEP #$20        ; set A short
.395374		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395376		48		pha		                PHA
.395377		ab		plb		                PLB
.395378		28		plp		                PLP
.395379		68		pla		                PLA             ; end setdbr macro
.39537a		48		pha		                PHA             ; begin setdp macro
.39537b		08		php		                PHP
.39537c		c2 20		rep #$20	                REP #$20        ; set A long
.39537e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395381		5b		tcd		                TCD
.395382		28		plp		                PLP
.395383		68		pla		                PLA             ; end setdp macro
.395384		c2 10		rep #$10	                REP #$10        ; set X long
.395386		e2 20		sep #$20	                SEP #$20        ; set A short
.395388						get_dev
.395388		e2 20		sep #$20	                SEP #$20        ; set A short
.39538a		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.39538d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39538f		85 01		sta $0321	                STA BIOS_DEV
.395391		22 85 43 39	jsl $394385	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.395395		c2 20		rep #$20	                REP #$20        ; set A long
.395397		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.39539a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39539c		85 10		sta $0330	                STA DOS_CLUS_ID
.39539e		c8		iny		                INY
.39539f		c8		iny		                INY
.3953a0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953a2		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3953a4		22 31 4a 39	jsl $394a31	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.3953a8		90 13		bcc $3953bd	                BCC pass_failure                ; If not OK: pass the failure up the chain
.3953aa		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3953ad		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953af		85 1c		sta $033c	                STA DOS_BUFF_PTR
.3953b1		c8		iny		                INY
.3953b2		c8		iny		                INY
.3953b3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953b5		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.3953b7		22 1d 46 39	jsl $39461d	                JSL DOS_GETCLUSTER              ; Get the cluster
.3953bb		b0 03		bcs $3953c0	                BCS ret_success                 ; If ok: return success
.3953bd						pass_failure
.3953bd		82 f3 03	brl $3957b3	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.3953c0		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.3953c3		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3953c5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953c7		c8		iny		                INY
.3953c8		c8		iny		                INY
.3953c9		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3953cb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3953cd		82 ea 03	brl $3957ba	                BRL IF_SUCCESS
.3953d0						IF_WRITE
.3953d0		da		phx		                PHX
.3953d1		5a		phy		                PHY
.3953d2		0b		phd		                PHD
.3953d3		8b		phb		                PHB
.3953d4		08		php		                PHP
.3953d5		48		pha		                PHA             ; begin setdbr macro
.3953d6		08		php		                PHP
.3953d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3953d9		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953db		48		pha		                PHA
.3953dc		ab		plb		                PLB
.3953dd		28		plp		                PLP
.3953de		68		pla		                PLA             ; end setdbr macro
.3953df		48		pha		                PHA             ; begin setdp macro
.3953e0		08		php		                PHP
.3953e1		c2 20		rep #$20	                REP #$20        ; set A long
.3953e3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953e6		5b		tcd		                TCD
.3953e7		28		plp		                PLP
.3953e8		68		pla		                PLA             ; end setdp macro
.3953e9		c2 10		rep #$10	                REP #$10        ; set X long
.3953eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3953ed		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.3953f0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953f2		85 01		sta $0321	                STA BIOS_DEV
.3953f4		22 85 43 39	jsl $394385	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.3953f8		c2 20		rep #$20	                REP #$20        ; set A long
.3953fa		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.3953fd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953ff		85 1c		sta $033c	                STA DOS_BUFF_PTR
.395401		c8		iny		                INY
.395402		c8		iny		                INY
.395403		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395405		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.395407		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.39540a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39540c		85 10		sta $0330	                STA DOS_CLUS_ID
.39540e		c8		iny		                INY
.39540f		c8		iny		                INY
.395410		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395412		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395414		d0 1a		bne $395430	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.395416		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395418		d0 16		bne $395430	                BNE rewrite_cluster
.39541a		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.39541d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39541f		85 10		sta $0330	                STA DOS_CLUS_ID
.395421		c8		iny		                INY
.395422		c8		iny		                INY
.395423		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395425		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395427		22 52 4e 39	jsl $394e52	                JSL DOS_APPENDCLUS              ; Append the cluster
.39542b		b0 0c		bcs $395439	                BCS ret_success                 ; If OK: return success
.39542d		82 83 03	brl $3957b3	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395430		22 5a 46 39	jsl $39465a	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.395434		b0 03		bcs $395439	                BCS ret_success                 ; If ok: return success
.395436		82 7a 03	brl $3957b3	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.395439		82 7e 03	brl $3957ba	ret_success     BRL IF_SUCCESS
.39543c						IF_DIROPEN
.39543c		da		phx		                PHX
.39543d		5a		phy		                PHY
.39543e		0b		phd		                PHD
.39543f		8b		phb		                PHB
.395440		08		php		                PHP
.395441		48		pha		                PHA             ; begin setdbr macro
.395442		08		php		                PHP
.395443		e2 20		sep #$20	                SEP #$20        ; set A short
.395445		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395447		48		pha		                PHA
.395448		ab		plb		                PLB
.395449		28		plp		                PLP
.39544a		68		pla		                PLA             ; end setdbr macro
.39544b		48		pha		                PHA             ; begin setdp macro
.39544c		08		php		                PHP
.39544d		c2 20		rep #$20	                REP #$20        ; set A long
.39544f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395452		5b		tcd		                TCD
.395453		28		plp		                PLP
.395454		68		pla		                PLA             ; end setdp macro
.395455		c2 30		rep #$30	                REP #$30        ; set A&X long
.395457		22 b1 51 39	jsl $3951b1	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.39545b		22 6b 47 39	jsl $39476b	                JSL DOS_PARSE_PATH          ; Parse the path
.39545f		22 85 43 39	jsl $394385	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.395463		b0 03		bcs $395468	                BCS get_root_dir            ; If successful: get the root directory
.395465		82 4b 03	brl $3957b3	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.395468						get_root_dir
.395468		c2 30		rep #$30	                REP #$30        ; set A&X long
.39546a		22 3a 40 39	jsl $39403a	                JSL DOS_DIROPEN
.39546e		b0 03		bcs $395473	                BCS success
.395470		82 40 03	brl $3957b3	                BRL IF_PASSFAILURE
.395473		82 44 03	brl $3957ba	success         BRL IF_SUCCESS
.395476						IF_DIRNEXT
.395476		5c d4 40 39	jmp $3940d4	                JML DOS_DIRNEXT
.39547a						IF_DELETE
.39547a		da		phx		                PHX
.39547b		5a		phy		                PHY
.39547c		0b		phd		                PHD
.39547d		8b		phb		                PHB
.39547e		08		php		                PHP
.39547f		48		pha		                PHA             ; begin setdbr macro
.395480		08		php		                PHP
.395481		e2 20		sep #$20	                SEP #$20        ; set A short
.395483		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395485		48		pha		                PHA
.395486		ab		plb		                PLB
.395487		28		plp		                PLP
.395488		68		pla		                PLA             ; end setdbr macro
.395489		48		pha		                PHA             ; begin setdp macro
.39548a		08		php		                PHP
.39548b		c2 20		rep #$20	                REP #$20        ; set A long
.39548d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395490		5b		tcd		                TCD
.395491		28		plp		                PLP
.395492		68		pla		                PLA             ; end setdp macro
.395493		c2 30		rep #$30	                REP #$30        ; set A&X long
.395495		22 03 48 39	jsl $394803	                JSL DOS_FINDFILE
.395499		b0 03		bcs $39549e	                BCS get_first_clus
.39549b		82 15 03	brl $3957b3	                BRL IF_PASSFAILURE
.39549e						get_first_clus
.39549e		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3954a1		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954a3		85 10		sta $0330	                STA DOS_CLUS_ID
.3954a5		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3954a8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3954aa		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954ac		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954ae		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3954b1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954b3		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3954b6		22 31 4a 39	jsl $394a31	del_loop        JSL NEXTCLUSTER
.3954ba		90 2f		bcc $3954eb	                BCC del_one
.3954bc		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3954be		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.3954c1		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3954c3		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.3954c6		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3954c9		85 10		sta $0330	                STA DOS_CLUS_ID
.3954cb		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3954ce		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954d0		22 12 4e 39	jsl $394e12	                JSL DELCLUSTER32
.3954d4		b0 03		bcs $3954d9	                BCS go_next
.3954d6		82 da 02	brl $3957b3	                BRL IF_PASSFAILURE
.3954d9						go_next
.3954d9		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.3954dc		85 10		sta $0330	                STA DOS_CLUS_ID
.3954de		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.3954e1		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.3954e4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954e6		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.3954e9		80 cb		bra $3954b6	                BRA del_loop
.3954eb						del_one
.3954eb		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.3954ee		85 10		sta $0330	                STA DOS_CLUS_ID
.3954f0		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.3954f3		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3954f5		22 6c 4d 39	jsl $394d6c	                JSL DELCLUSTER
.3954f9		b0 03		bcs $3954fe	                BCS free_dir_entry
.3954fb		82 b5 02	brl $3957b3	                BRL IF_PASSFAILURE
.3954fe						free_dir_entry
.3954fe		e2 20		sep #$20	                SEP #$20        ; set A short
.395500		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.395503		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.395505		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.395507		22 53 42 39	jsl $394253	                JSL DOS_DIRWRITE                ; Write the directory entry back
.39550b		b0 03		bcs $395510	                BCS ret_success
.39550d		82 a3 02	brl $3957b3	                BRL IF_PASSFAILURE
.395510		82 a7 02	brl $3957ba	ret_success     BRL IF_SUCCESS
.395513						IF_DIRREAD
.395513		da		phx		                PHX
.395514		5a		phy		                PHY
.395515		0b		phd		                PHD
.395516		8b		phb		                PHB
.395517		08		php		                PHP
.395518		48		pha		                PHA             ; begin setdbr macro
.395519		08		php		                PHP
.39551a		e2 20		sep #$20	                SEP #$20        ; set A short
.39551c		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39551e		48		pha		                PHA
.39551f		ab		plb		                PLB
.395520		28		plp		                PLP
.395521		68		pla		                PLA             ; end setdbr macro
.395522		48		pha		                PHA             ; begin setdp macro
.395523		08		php		                PHP
.395524		c2 20		rep #$20	                REP #$20        ; set A long
.395526		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395529		5b		tcd		                TCD
.39552a		28		plp		                PLP
.39552b		68		pla		                PLA             ; end setdp macro
.39552c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39552e		22 03 48 39	jsl $394803	                JSL DOS_FINDFILE
.395532		b0 03		bcs $395537	                BCS success
.395534		82 78 02	brl $3957af	                BRL IF_FAILURE
.395537		82 80 02	brl $3957ba	success         BRL IF_SUCCESS
.39553a						IF_DIRWRITE
.39553a		5c 53 42 39	jmp $394253	                JML DOS_DIRWRITE
.39553e						IF_LOAD
.39553e		da		phx		                PHX
.39553f		5a		phy		                PHY
.395540		0b		phd		                PHD
.395541		8b		phb		                PHB
.395542		08		php		                PHP
.395543		48		pha		                PHA             ; begin setdbr macro
.395544		08		php		                PHP
.395545		e2 20		sep #$20	                SEP #$20        ; set A short
.395547		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395549		48		pha		                PHA
.39554a		ab		plb		                PLB
.39554b		28		plp		                PLP
.39554c		68		pla		                PLA             ; end setdbr macro
.39554d		48		pha		                PHA             ; begin setdp macro
.39554e		08		php		                PHP
.39554f		c2 20		rep #$20	                REP #$20        ; set A long
.395551		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395554		5b		tcd		                TCD
.395555		28		plp		                PLP
.395556		68		pla		                PLA             ; end setdp macro
.395557		c2 30		rep #$30	                REP #$30        ; set A&X long
.395559		22 6a 52 39	jsl $39526a	                JSL IF_OPEN
.39555d		b0 03		bcs $395562	                BCS setup                   ; If success: start setting things up
.39555f		82 51 02	brl $3957b3	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.395562						setup
.395562		c2 20		rep #$20	                REP #$20        ; set A long
.395564		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.395567		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395569		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39556b		c8		iny		                INY
.39556c		c8		iny		                INY
.39556d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39556f		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395571		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.395574		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395576		85 30		sta $0350	                STA DOS_SRC_PTR
.395578		c8		iny		                INY
.395579		c8		iny		                INY
.39557a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39557c		85 32		sta $0352	                STA DOS_SRC_PTR+2
.39557e		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395580		c9 40 00	cmp #$0040	                CMP #$0040
.395583		b0 04		bcs $395589	                BGE load_by_type            ; No: try to load it by type
.395585		5c 64 56 39	jmp $395664	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395589		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.39558c		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.39558f						type_loop
.39558f		e2 20		sep #$20	                SEP #$20        ; set A short
.395591		bf d5 55 39	lda $3955d5,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.395595		f0 37		beq $3955ce	                BEQ no_match                ; If NULL... we didn't get a match
.395597		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.39559a		d0 28		bne $3955c4	                BNE next_entry              ; If they don't match, try the next entry
.39559c		bf d6 55 39	lda $3955d6,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.3955a0		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.3955a3		d0 1f		bne $3955c4	                BNE next_entry              ; If they don't match, try the next entry
.3955a5		bf d7 55 39	lda $3955d7,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.3955a9		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.3955ac		d0 16		bne $3955c4	                BNE next_entry              ; If they don't match, try the next entry
.3955ae		c2 20		rep #$20	                REP #$20        ; set A long
.3955b0		bf d8 55 39	lda $3955d8,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.3955b4		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.3955b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3955b8		bf da 55 39	lda $3955da,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.3955bc		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.3955be		a2 00 00	ldx #$0000	                LDX #0
.3955c1		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.3955c4						next_entry
.3955c4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3955c6		8a		txa		                TXA
.3955c7		18		clc		                CLC
.3955c8		69 06 00	adc #$0006	                ADC #6
.3955cb		aa		tax		                TAX
.3955cc		80 c1		bra $39558f	                BRA type_loop               ; And check it against the file
.3955ce						no_match
.3955ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3955d0		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.3955d2		82 da 01	brl $3957af	                BRL IF_FAILURE
>3955d5		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>3955d8		dc 55				                .word <>IF_LOADPGX
>3955da		39				                .byte `IF_LOADPGX
>3955db		00				                .byte 0
.3955dc						IF_LOADPGX
.3955dc		c2 10		rep #$10	                REP #$10        ; set X long
.3955de		e2 20		sep #$20	                SEP #$20        ; set A short
.3955e0		a0 00 00	ldy #$0000	                LDY #0
.3955e3		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.3955e5		c9 50		cmp #$50	                CMP #'P'
.3955e7		d0 15		bne $3955fe	                BNE fail_sig                        ; If not found, fail
.3955e9		c8		iny		                INY
.3955ea		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955ec		c9 47		cmp #$47	                CMP #'G'
.3955ee		d0 0e		bne $3955fe	                BNE fail_sig
.3955f0		c8		iny		                INY
.3955f1		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955f3		c9 58		cmp #$58	                CMP #'X'
.3955f5		d0 07		bne $3955fe	                BNE fail_sig
.3955f7		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.3955f8		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955fa		c9 01		cmp #$01	                CMP #$01
.3955fc		f0 17		beq $395615	                BEQ get_dest                        ; All passes: go to get the destination address
.3955fe		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.395600		22 af 57 39	jsl $3957af	                JSL IF_FAILURE
.395604						adjust_size
.395604		c2 20		rep #$20	                REP #$20        ; set A long
.395606		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.395607		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395609		e9 08 00	sbc #$0008	                SBC #8
.39560c		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39560e		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395610		e9 00 00	sbc #$0000	                SBC #0
.395613		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395615						get_dest
.395615		c2 20		rep #$20	                REP #$20        ; set A long
.395617		c8		iny		                INY
.395618		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.39561a		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.39561c		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.39561e		c8		iny		                INY
.39561f		c8		iny		                INY
.395620		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.395622		85 36		sta $0356	                STA DOS_DST_PTR+2
.395624		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395626		c8		iny		                INY                                 ; Point to the first data byte
.395627		c8		iny		                INY
.395628						copy_loop
.395628		e2 20		sep #$20	                SEP #$20        ; set A short
.39562a		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.39562c		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.39562e		c2 20		rep #$20	                REP #$20        ; set A long
.395630		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.395632		d0 02		bne $395636	                BNE dec_file_size
.395634		e6 36		inc $0356	                INC DOS_DST_PTR+2
.395636		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.395637		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395639		e9 01 00	sbc #$0001	                SBC #1
.39563c		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39563e		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395640		e9 00 00	sbc #$0000	                SBC #0
.395643		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395645		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.395647		d0 04		bne $39564d	                BNE next_byte
.395649		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39564b		f0 14		beq $395661	                BEQ done                            ; Yes: we're done
.39564d		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.39564e		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.395651		d0 d5		bne $395628	                BNE copy_loop                       ; No: keep copying
.395653		22 35 4b 39	jsl $394b35	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.395657		b0 03		bcs $39565c	                BCS next_cluster
.395659		82 57 01	brl $3957b3	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.39565c		a0 00 00	ldy #$0000	next_cluster    LDY #0
.39565f		80 c7		bra $395628	                BRA copy_loop                       ; Go back to copying
.395661		82 56 01	brl $3957ba	done            BRL IF_SUCCESS
.395664						IF_LOADRAW
.395664		c2 30		rep #$30	                REP #$30        ; set A&X long
.395666		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.395669						copy_loop
.395669		e2 20		sep #$20	                SEP #$20        ; set A short
.39566b		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.39566d		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39566f		c2 20		rep #$20	                REP #$20        ; set A long
.395671		38		sec		                SEC                         ; Count down the number of bytes left
.395672		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395674		e9 01 00	sbc #$0001	                SBC #1
.395677		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395679		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39567b		e9 00 00	sbc #$0000	                SBC #0
.39567e		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395680		d0 04		bne $395686	                BNE continue
.395682		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395684		f0 1b		beq $3956a1	                BEQ close_file              ; If not: we're done
.395686		c8		iny		continue        INY
.395687		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.39568a		d0 dd		bne $395669	                BNE copy_loop               ; No: keep processing the bytes
.39568c		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.39568d		a5 34		lda $0354	                LDA DOS_DST_PTR
.39568f		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395692		85 34		sta $0354	                STA DOS_DST_PTR
.395694		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.395696		69 00 00	adc #$0000	                ADC #0
.395699		85 36		sta $0356	                STA DOS_DST_PTR+2
.39569b		22 6b 53 39	jsl $39536b	                JSL IF_READ                 ; Yes: load the next cluster
.39569f		b0 c5		bcs $395666	                BCS copy_cluster            ; And start copying it
.3956a1						close_file
.3956a1		82 16 01	brl $3957ba	ret_success     BRL IF_SUCCESS
.3956a4						IF_NULLBUFFER
.3956a4		5a		phy		                PHY
.3956a5		8b		phb		                PHB
.3956a6		0b		phd		                PHD
.3956a7		08		php		                PHP
.3956a8		48		pha		                PHA             ; begin setdbr macro
.3956a9		08		php		                PHP
.3956aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3956ac		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956ae		48		pha		                PHA
.3956af		ab		plb		                PLB
.3956b0		28		plp		                PLP
.3956b1		68		pla		                PLA             ; end setdbr macro
.3956b2		48		pha		                PHA             ; begin setdp macro
.3956b3		08		php		                PHP
.3956b4		c2 20		rep #$20	                REP #$20        ; set A long
.3956b6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956b9		5b		tcd		                TCD
.3956ba		28		plp		                PLP
.3956bb		68		pla		                PLA             ; end setdp macro
.3956bc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3956be		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3956c1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956c3		85 28		sta $0348	                STA DOS_TEMP
.3956c5		c8		iny		                INY
.3956c6		c8		iny		                INY
.3956c7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956c9		85 2a		sta $034a	                STA DOS_TEMP+2
.3956cb		a0 00 00	ldy #$0000	                LDY #0
.3956ce		a9 00 00	lda #$0000	                LDA #0
.3956d1		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3956d3		c8		iny		                INY
.3956d4		c8		iny		                INY
.3956d5		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3956d8		d0 f7		bne $3956d1	                BNE loop
.3956da		28		plp		                PLP
.3956db		2b		pld		                PLD
.3956dc		ab		plb		                PLB
.3956dd		7a		ply		                PLY
.3956de		6b		rtl		                RTL
.3956df						IF_COPY2BUFF
.3956df		5a		phy		                PHY
.3956e0		8b		phb		                PHB
.3956e1		0b		phd		                PHD
.3956e2		08		php		                PHP
.3956e3		48		pha		                PHA             ; begin setdbr macro
.3956e4		08		php		                PHP
.3956e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3956e7		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3956e9		48		pha		                PHA
.3956ea		ab		plb		                PLB
.3956eb		28		plp		                PLP
.3956ec		68		pla		                PLA             ; end setdbr macro
.3956ed		48		pha		                PHA             ; begin setdp macro
.3956ee		08		php		                PHP
.3956ef		c2 20		rep #$20	                REP #$20        ; set A long
.3956f1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3956f4		5b		tcd		                TCD
.3956f5		28		plp		                PLP
.3956f6		68		pla		                PLA             ; end setdp macro
.3956f7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3956f9		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3956fc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3956fe		85 28		sta $0348	                STA DOS_TEMP
.395700		c8		iny		                INY
.395701		c8		iny		                INY
.395702		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395704		85 2a		sta $034a	                STA DOS_TEMP+2
.395706		a0 00 00	ldy #$0000	                LDY #0
.395709						copy_loop
.395709		e2 20		sep #$20	                SEP #$20        ; set A short
.39570b		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.39570d		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.39570f		c2 20		rep #$20	                REP #$20        ; set A long
.395711		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.395713		d0 02		bne $395717	                BNE adv_dest
.395715		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395717		c8		iny		adv_dest        INY                         ; Count it
.395718		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.39571b		f0 0c		beq $395729	                BEQ done                    ; Yes: we're done
.39571d		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.39571f		c5 38		cmp $0358	                CMP DOS_END_PTR
.395721		d0 e6		bne $395709	                BNE copy_loop               ; No: keep copying
.395723		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395725		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395727		d0 e0		bne $395709	                BNE copy_loop
.395729		28		plp		done            PLP
.39572a		2b		pld		                PLD
.39572b		ab		plb		                PLB
.39572c		7a		ply		                PLY
.39572d		6b		rtl		                RTL
.39572e						IF_SAVE
.39572e		da		phx		                PHX
.39572f		5a		phy		                PHY
.395730		0b		phd		                PHD
.395731		8b		phb		                PHB
.395732		08		php		                PHP
.395733		48		pha		                PHA             ; begin setdbr macro
.395734		08		php		                PHP
.395735		e2 20		sep #$20	                SEP #$20        ; set A short
.395737		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395739		48		pha		                PHA
.39573a		ab		plb		                PLB
.39573b		28		plp		                PLP
.39573c		68		pla		                PLA             ; end setdbr macro
.39573d		48		pha		                PHA             ; begin setdp macro
.39573e		08		php		                PHP
.39573f		c2 20		rep #$20	                REP #$20        ; set A long
.395741		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395744		5b		tcd		                TCD
.395745		28		plp		                PLP
.395746		68		pla		                PLA             ; end setdp macro
.395747		c2 30		rep #$30	                REP #$30        ; set A&X long
.395749		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.39574c		38		sec		                SEC
.39574d		a5 38		lda $0358	                LDA DOS_END_PTR
.39574f		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395751		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395753		c8		iny		                INY
.395754		c8		iny		                INY
.395755		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395757		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.395759		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39575b		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.39575e		18		clc		                CLC
.39575f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395761		69 01 00	adc #$0001	                ADC #1
.395764		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395766		90 09		bcc $395771	                BCC first_block
.395768		c8		iny		                INY
.395769		c8		iny		                INY
.39576a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39576c		69 00 00	adc #$0000	                ADC #0
.39576f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395771		22 a4 56 39	jsl $3956a4	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395775		22 df 56 39	jsl $3956df	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.395779		22 fd 52 39	jsl $3952fd	                JSL IF_CREATE           ; Create file.
.39577d		b0 03		bcs $395782	                BCS check_for_end
.39577f		82 31 00	brl $3957b3	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395782		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395784		c5 38		cmp $0358	                CMP DOS_END_PTR
.395786		d0 06		bne $39578e	                BNE next_block
.395788		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39578a		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39578c		f0 1d		beq $3957ab	                BEQ done                ; Yes: we're done
.39578e		22 a4 56 39	jsl $3956a4	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395792		22 df 56 39	jsl $3956df	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.395796		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.395799		a9 00 00	lda #$0000	                LDA #0
.39579c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39579e		c8		iny		                INY
.39579f		c8		iny		                INY
.3957a0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3957a2		22 d0 53 39	jsl $3953d0	                JSL IF_WRITE            ; Append to the file
.3957a6		b0 da		bcs $395782	                BCS check_for_end       ; And try again
.3957a8		82 08 00	brl $3957b3	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.3957ab		5c ba 57 39	jmp $3957ba	done            JML IF_SUCCESS
.3957af						IF_FAILURE
.3957af		e2 20		sep #$20	                SEP #$20        ; set A short
.3957b1		85 0e		sta $032e	                STA DOS_STATUS
.3957b3		28		plp		IF_PASSFAILURE  PLP
.3957b4		18		clc		                CLC
.3957b5		ab		plb		                PLB
.3957b6		2b		pld		                PLD
.3957b7		7a		ply		                PLY
.3957b8		fa		plx		                PLX
.3957b9		6b		rtl		                RTL
.3957ba						IF_SUCCESS
.3957ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3957bc		64 00		stz $0320	                STZ BIOS_STATUS
.3957be		64 0e		stz $032e	                STZ DOS_STATUS
.3957c0		28		plp		                PLP
.3957c1		38		sec		                SEC
.3957c2		ab		plb		                PLB
.3957c3		2b		pld		                PLD
.3957c4		7a		ply		                PLY
.3957c5		fa		plx		                PLX
.3957c6		6b		rtl		                RTL
.3957c7						IF_RUN
.3957c7		da		phx		                PHX
.3957c8		5a		phy		                PHY
.3957c9		0b		phd		                PHD
.3957ca		8b		phb		                PHB
.3957cb		08		php		                PHP
.3957cc		48		pha		                PHA             ; begin setdbr macro
.3957cd		08		php		                PHP
.3957ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3957d0		a9 00		lda #$00	                LDA #0
.3957d2		48		pha		                PHA
.3957d3		ab		plb		                PLB
.3957d4		28		plp		                PLP
.3957d5		68		pla		                PLA             ; end setdbr macro
.3957d6		48		pha		                PHA             ; begin setdp macro
.3957d7		08		php		                PHP
.3957d8		c2 20		rep #$20	                REP #$20        ; set A long
.3957da		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3957dd		5b		tcd		                TCD
.3957de		28		plp		                PLP
.3957df		68		pla		                PLA             ; end setdp macro
.3957e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3957e2		c2 10		rep #$10	                REP #$10        ; set X long
.3957e4		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3957e6		a2 00 00	ldx #$0000	                LDX #0
.3957e9		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3957ed		e8		inx		                INX
.3957ee		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3957f1		d0 f6		bne $3957e9	                BNE clr_fd_loop
.3957f3		c2 20		rep #$20	                REP #$20        ; set A long
.3957f5		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3957f8		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3957fc		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.3957ff		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.395803		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.395805		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395809		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.39580b		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.39580f		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395812		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395814		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395816		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395819		85 20		sta $0340	                STA DOS_FD_PTR
.39581b		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.39581e		85 22		sta $0342	                STA DOS_FD_PTR+2
.395820		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395823		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395827		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.39582b		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.39582f		b0 14		bcs $395845	                BCS try_execute
.395831		82 7f ff	brl $3957b3	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395834						chk_execute
.395834		c2 20		rep #$20	                REP #$20        ; set A long
.395836		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395838		d0 0b		bne $395845	                BNE try_execute                         ; If so: call it
.39583a		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.39583c		d0 07		bne $395845	                BNE try_execute
.39583e		e2 20		sep #$20	                SEP #$20        ; set A short
.395840		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395842		82 6a ff	brl $3957af	                BRL IF_FAILURE
.395845						try_execute
.395845		e2 20		sep #$20	                SEP #$20        ; set A short
.395847		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395849		48		pha		                PHA
.39584a		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.39584c		48		pha		                PHA
.39584d		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.39584f		48		pha		                PHA
.395850		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395852		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395854		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.395858		e2 20		sep #$20	                SEP #$20        ; set A short
.39585a		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.39585b		68		pla		                PLA
.39585c		68		pla		                PLA
.39585d		82 5a ff	brl $3957ba	                BRL IF_SUCCESS                          ; Return success
.395860						IF_ALLOCFD
.395860		da		phx		                PHX
.395861		5a		phy		                PHY
.395862		0b		phd		                PHD
.395863		8b		phb		                PHB
.395864		08		php		                PHP
.395865		48		pha		                PHA             ; begin setdbr macro
.395866		08		php		                PHP
.395867		e2 20		sep #$20	                SEP #$20        ; set A short
.395869		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39586b		48		pha		                PHA
.39586c		ab		plb		                PLB
.39586d		28		plp		                PLP
.39586e		68		pla		                PLA             ; end setdbr macro
.39586f		48		pha		                PHA             ; begin setdp macro
.395870		08		php		                PHP
.395871		c2 20		rep #$20	                REP #$20        ; set A long
.395873		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395876		5b		tcd		                TCD
.395877		28		plp		                PLP
.395878		68		pla		                PLA             ; end setdp macro
.395879		c2 10		rep #$10	                REP #$10        ; set X long
.39587b		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.39587e						chk_fd
.39587e		e2 20		sep #$20	                SEP #$20        ; set A short
.395880		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395883		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395885		f0 14		beq $39589b	                BEQ found                           ; No: flag and return the found descriptor
.395887						next_fd
.395887		c2 20		rep #$20	                REP #$20        ; set A long
.395889		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.39588a		18		clc		                CLC
.39588b		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.39588e		aa		tax		                TAX
.39588f		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395892		90 ea		bcc $39587e	                BLT chk_fd                          ; No: check this new file descriptor
.395894		e2 20		sep #$20	                SEP #$20        ; set A short
.395896		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.395898		82 14 ff	brl $3957af	                BRL IF_FAILURE
.39589b		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.39589d		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.3958a0		c2 20		rep #$20	                REP #$20        ; set A long
.3958a2		8a		txa		                TXA
.3958a3		18		clc		                CLC
.3958a4		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.3958a7		85 20		sta $0340	                STA @b DOS_FD_PTR
.3958a9		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3958ac		69 00 00	adc #$0000	                ADC #0
.3958af		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3958b1		82 06 ff	brl $3957ba	                BRL IF_SUCCESS                      ; Return this file descriptor
.3958b4						IF_FREEFD
.3958b4		da		phx		                PHX
.3958b5		5a		phy		                PHY
.3958b6		0b		phd		                PHD
.3958b7		8b		phb		                PHB
.3958b8		08		php		                PHP
.3958b9		48		pha		                PHA             ; begin setdbr macro
.3958ba		08		php		                PHP
.3958bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3958bd		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3958bf		48		pha		                PHA
.3958c0		ab		plb		                PLB
.3958c1		28		plp		                PLP
.3958c2		68		pla		                PLA             ; end setdbr macro
.3958c3		48		pha		                PHA             ; begin setdp macro
.3958c4		08		php		                PHP
.3958c5		c2 20		rep #$20	                REP #$20        ; set A long
.3958c7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958ca		5b		tcd		                TCD
.3958cb		28		plp		                PLP
.3958cc		68		pla		                PLA             ; end setdp macro
.3958cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3958cf		c2 10		rep #$10	                REP #$10        ; set X long
.3958d1		a9 00		lda #$00	                LDA #0
.3958d3		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3958d5		82 e2 fe	brl $3957ba	                BRL IF_SUCCESS
.3958d8						DOS_SRC2DST
.3958d8		da		phx		                PHX
.3958d9		5a		phy		                PHY
.3958da		0b		phd		                PHD
.3958db		8b		phb		                PHB
.3958dc		08		php		                PHP
.3958dd		48		pha		                PHA             ; begin setdp macro
.3958de		08		php		                PHP
.3958df		c2 20		rep #$20	                REP #$20        ; set A long
.3958e1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958e4		5b		tcd		                TCD
.3958e5		28		plp		                PLP
.3958e6		68		pla		                PLA             ; end setdp macro
.3958e7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3958e9		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3958ec		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3958ee		aa		tax		                TAX                                     ; X := source buffer address
.3958ef		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.3958f1		a8		tay		                TAY                                     ; Y := destination buffer address
.3958f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3958f4		a9 38		lda #$38	                LDA #`DOS_FILE_BUFFS
.3958f6		48		pha		                PHA
.3958f7		ab		plb		                PLB
.3958f8		c2 20		rep #$20	                REP #$20        ; set A long
.3958fa		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.3958fd		f0 11		beq $395910	loop            BEQ done
.3958ff		48		pha		                PHA
.395900		e2 20		sep #$20	                SEP #$20        ; set A short
.395902		bd 00 00	lda $380000,x	                LDA #0,B,X
.395905		99 00 00	sta $380000,y	                STA #0,B,Y
.395908		c2 20		rep #$20	                REP #$20        ; set A long
.39590a		68		pla		                PLA
.39590b		3a		dec a		                DEC A
.39590c		e8		inx		                INX
.39590d		c8		iny		                INY
.39590e		80 ed		bra $3958fd	                BRA loop
.395910		28		plp		done            PLP
.395911		ab		plb		                PLB
.395912		2b		pld		                PLD
.395913		7a		ply		                PLY
.395914		fa		plx		                PLX
.395915		6b		rtl		                RTL
.395916						IF_COPY
.395916		da		phx		                PHX
.395917		5a		phy		                PHY
.395918		0b		phd		                PHD
.395919		8b		phb		                PHB
.39591a		08		php		                PHP
.39591b		48		pha		                PHA             ; begin setdbr macro
.39591c		08		php		                PHP
.39591d		e2 20		sep #$20	                SEP #$20        ; set A short
.39591f		a9 00		lda #$00	                LDA #0
.395921		48		pha		                PHA
.395922		ab		plb		                PLB
.395923		28		plp		                PLP
.395924		68		pla		                PLA             ; end setdbr macro
.395925		48		pha		                PHA             ; begin setdp macro
.395926		08		php		                PHP
.395927		c2 20		rep #$20	                REP #$20        ; set A long
.395929		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39592c		5b		tcd		                TCD
.39592d		28		plp		                PLP
.39592e		68		pla		                PLA             ; end setdp macro
.39592f		22 60 58 39	jsl $395860	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395933		b0 03		bcs $395938	                BCS set_src_path
.395935		82 7b fe	brl $3957b3	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.395938						set_src_path
.395938		c2 30		rep #$30	                REP #$30        ; set A&X long
.39593a		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.39593d		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.39593f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395941		c8		iny		                INY
.395942		c8		iny		                INY
.395943		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395945		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395947						alloc_dest
.395947		c2 30		rep #$30	                REP #$30        ; set A&X long
.395949		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.39594b		85 30		sta $0350	                STA @b DOS_SRC_PTR
.39594d		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.39594f		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395951		22 60 58 39	jsl $395860	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395955		b0 0f		bcs $395966	                BCS set_paths                   ; If everything is ok... start setting the paths
.395957		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395959		85 20		sta $0340	                STA @b DOS_FD_PTR
.39595b		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39595d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39595f		22 b4 58 39	jsl $3958b4	                JSL IF_FREEFD                   ; And free it
.395963		82 4d fe	brl $3957b3	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395966						set_paths
.395966		c2 30		rep #$30	                REP #$30        ; set A&X long
.395968		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.39596a		85 34		sta $0354	                STA @b DOS_DST_PTR
.39596c		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.39596e		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395970		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395973		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395975		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395977		c8		iny		                INY
.395978		c8		iny		                INY
.395979		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.39597b		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39597d		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39597f		85 20		sta $0340	                STA @b DOS_FD_PTR
.395981		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395983		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395985		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.395989		b0 10		bcs $39599b	                BCS src_open                    ; If success, work with the openned file
.39598b		00		brk #		                BRK
.39598c		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.39598e		85 20		sta $0340	                STA @b DOS_FD_PTR
.395990		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395992		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395994		22 b4 58 39	jsl $3958b4	                JSL IF_FREEFD                   ; And free it
.395998		82 bc ff	brl $395957	                BRL err_free_src_fd             ; Free the source file descriptor
.39599b		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.39599e		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3959a0		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3959a2		c8		iny		                INY
.3959a3		c8		iny		                INY
.3959a4		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3959a6		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3959a8		22 d8 58 39	jsl $3958d8	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.3959ac		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3959ae		85 20		sta $0340	                STA @b DOS_FD_PTR
.3959b0		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3959b2		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959b4		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.3959b8		b0 0f		bcs $3959c9	                BCS read_next                   ; If sucessful, try to get the next cluster
.3959ba		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3959bc		85 20		sta $0340	                STA @b DOS_FD_PTR
.3959be		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3959c0		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959c2		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.3959c6		82 c3 ff	brl $39598c	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.3959c9						read_next
.3959c9		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3959cb		85 20		sta $0340	                STA @b DOS_FD_PTR
.3959cd		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3959cf		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959d1		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.3959d5		b0 19		bcs $3959f0	                BCS copy2dest                   ; If successful, copy the sector
.3959d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3959d9		a5 0e		lda $032e	                LDA @b DOS_STATUS
.3959db		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.3959dd		f0 32		beq $395a11	                BEQ file_copied                 ; Yes: we're done copying
.3959df						err_dest_close
.3959df		c2 20		rep #$20	                REP #$20        ; set A long
.3959e1		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3959e3		85 20		sta $0340	                STA @b DOS_FD_PTR
.3959e5		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3959e7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3959e9		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.3959ed		82 ca ff	brl $3959ba	                BRL err_src_close               ; Close the source and throw an error
.3959f0						copy2dest
.3959f0		22 d8 58 39	jsl $3958d8	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.3959f4		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.3959f7		a9 00 00	lda #$0000	                LDA #0
.3959fa		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3959fc		c8		iny		                INY
.3959fd		c8		iny		                INY
.3959fe		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395a00		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395a02		85 20		sta $0340	                STA @b DOS_FD_PTR
.395a04		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395a06		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a08		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.395a0c		90 d1		bcc $3959df	                BCC err_dest_close              ; If error: close all files and throw the error
.395a0e		82 b8 ff	brl $3959c9	                BRL read_next                   ; Otherwise: repeat the loop
.395a11						file_copied
.395a11		c2 20		rep #$20	                REP #$20        ; set A long
.395a13		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395a15		85 20		sta $0340	                STA @b DOS_FD_PTR
.395a17		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395a19		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a1b		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395a1f		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395a21		85 20		sta $0340	                STA @b DOS_FD_PTR
.395a23		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395a25		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395a27		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.395a2b		82 8c fd	brl $3957ba	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8					    UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8					    UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395a2e						UART_SELECT
.395a2e		08		php		            PHP
.395a2f		c2 20		rep #$20	                REP #$20        ; set A long
.395a31		c9 02 00	cmp #$0002	            CMP #2
.395a34		f0 07		beq $395a3d	            BEQ is_COM2
.395a36		c2 20		rep #$20	                REP #$20        ; set A long
.395a38		a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.395a3b		80 05		bra $395a42	            BRA setaddr
.395a3d						is_COM2
.395a3d		c2 20		rep #$20	                REP #$20        ; set A long
.395a3f		a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395a42		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395a46		e2 20		sep #$20	                SEP #$20        ; set A short
.395a48		a9 af		lda #$af	            LDA #`UART1_BASE
.395a4a		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395a4e		28		plp		            PLP
.395a4f		6b		rtl		            RTL
.395a50						UART_SETBPS
.395a50		08		php		            PHP
.395a51		0b		phd		            PHD
.395a52		48		pha		                PHA             ; begin setdp macro
.395a53		08		php		                PHP
.395a54		c2 20		rep #$20	                REP #$20        ; set A long
.395a56		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a59		5b		tcd		                TCD
.395a5a		28		plp		                PLP
.395a5b		68		pla		                PLA             ; end setdp macro
.395a5c		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a5e		48		pha		            PHA
.395a5f		e2 20		sep #$20	                SEP #$20        ; set A short
.395a61		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395a64		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395a66		09 80		ora #$80	            ORA #LCR_DLB
.395a68		97 00		sta [$0700],y	            STA [CURRUART],Y
.395a6a		c2 20		rep #$20	                REP #$20        ; set A long
.395a6c		68		pla		            PLA
.395a6d		a0 00 00	ldy #$0000	            LDY #UART_DLL
.395a70		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395a72		e2 20		sep #$20	                SEP #$20        ; set A short
.395a74		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395a77		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395a79		49 80		eor #$80	            EOR #LCR_DLB
.395a7b		97 00		sta [$0700],y	            STA [CURRUART],Y
.395a7d		2b		pld		            PLD
.395a7e		28		plp		            PLP
.395a7f		6b		rtl		            RTL
.395a80						UART_SETLCR
.395a80		08		php		            PHP
.395a81		0b		phd		            PHD
.395a82		48		pha		                PHA             ; begin setdp macro
.395a83		08		php		                PHP
.395a84		c2 20		rep #$20	                REP #$20        ; set A long
.395a86		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395a89		5b		tcd		                TCD
.395a8a		28		plp		                PLP
.395a8b		68		pla		                PLA             ; end setdp macro
.395a8c		e2 20		sep #$20	                SEP #$20        ; set A short
.395a8e		c2 10		rep #$10	                REP #$10        ; set X long
.395a90		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395a92		a0 03 00	ldy #$0003	            LDY #UART_LCR
.395a95		97 00		sta [$0700],y	            STA [CURRUART],Y
.395a97		2b		pld		            PLD
.395a98		28		plp		            PLP
.395a99		6b		rtl		            RTL
.395a9a						UART_INIT
.395a9a		08		php		            PHP
.395a9b		0b		phd		            PHD
.395a9c		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a9e		48		pha		                PHA             ; begin setdp macro
.395a9f		08		php		                PHP
.395aa0		c2 20		rep #$20	                REP #$20        ; set A long
.395aa2		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395aa5		5b		tcd		                TCD
.395aa6		28		plp		                PLP
.395aa7		68		pla		                PLA             ; end setdp macro
.395aa8		a9 01 00	lda #$0001	            LDA #UART_115200
.395aab		22 50 5a 39	jsl $395a50	            JSL UART_SETBPS
.395aaf		e2 20		sep #$20	                SEP #$20        ; set A short
.395ab1		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.395ab3		22 80 5a 39	jsl $395a80	            JSL UART_SETLCR
.395ab7		a9 e1		lda #$e1	            LDA #%11100001
.395ab9		a0 02 00	ldy #$0002	            LDY #UART_FCR
.395abc		97 00		sta [$0700],y	            STA [CURRUART],Y
.395abe		2b		pld		            PLD
.395abf		28		plp		            PLP
.395ac0		6b		rtl		            RTL
.395ac1						UART_HASBYT
.395ac1		08		php		            PHP
.395ac2		0b		phd		            PHD
.395ac3		c2 30		rep #$30	                REP #$30        ; set A&X long
.395ac5		48		pha		                PHA             ; begin setdp macro
.395ac6		08		php		                PHP
.395ac7		c2 20		rep #$20	                REP #$20        ; set A long
.395ac9		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395acc		5b		tcd		                TCD
.395acd		28		plp		                PLP
.395ace		68		pla		                PLA             ; end setdp macro
.395acf		e2 20		sep #$20	                SEP #$20        ; set A short
.395ad1		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395ad4		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395ad6		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395ad8		d0 04		bne $395ade	            BNE ret_true            ; If flag is set, return true
.395ada		2b		pld		ret_false   PLD                     ; Return false
.395adb		28		plp		            PLP
.395adc		18		clc		            CLC
.395add		6b		rtl		            RTL
.395ade		2b		pld		ret_true    PLD                     ; Return true
.395adf		28		plp		            PLP
.395ae0		38		sec		            SEC
.395ae1		6b		rtl		            RTL
.395ae2						UART_GETC
.395ae2		08		php		            PHP
.395ae3		0b		phd		            PHD
.395ae4		c2 30		rep #$30	                REP #$30        ; set A&X long
.395ae6		48		pha		                PHA             ; begin setdp macro
.395ae7		08		php		                PHP
.395ae8		c2 20		rep #$20	                REP #$20        ; set A long
.395aea		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395aed		5b		tcd		                TCD
.395aee		28		plp		                PLP
.395aef		68		pla		                PLA             ; end setdp macro
.395af0		e2 20		sep #$20	                SEP #$20        ; set A short
.395af2		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.395af5		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.395af7		29 01		and #$01	            AND #LSR_DATA_AVAIL
.395af9		f0 fa		beq $395af5	            BEQ wait_getc           ; If the flag is clear, wait
.395afb		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395afe		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395b00		2b		pld		            PLD
.395b01		28		plp		            PLP
.395b02		6b		rtl		            RTL
.395b03						UART_PUTC
.395b03		08		php		            PHP
.395b04		0b		phd		            PHD
.395b05		c2 30		rep #$30	                REP #$30        ; set A&X long
.395b07		48		pha		                PHA             ; begin setdp macro
.395b08		08		php		                PHP
.395b09		c2 20		rep #$20	                REP #$20        ; set A long
.395b0b		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395b0e		5b		tcd		                TCD
.395b0f		28		plp		                PLP
.395b10		68		pla		                PLA             ; end setdp macro
.395b11		e2 20		sep #$20	                SEP #$20        ; set A short
.395b13		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395b14		a0 05 00	ldy #$0005	            LDY #UART_LSR
.395b17		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395b19		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395b1b		f0 fa		beq $395b17	            BEQ wait_putc
.395b1d		68		pla		            PLA
.395b1e		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395b21		97 00		sta [$0700],y	            STA [CURRUART],Y
.395b23		2b		pld		            PLD
.395b24		28		plp		            PLP
.395b25		6b		rtl		            RTL
.395b26						UART_PUTS
.395b26		08		php		            PHP
.395b27		e2 20		sep #$20	                SEP #$20        ; set A short
.395b29		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.395b2c		f0 07		beq $395b35	            BEQ done
.395b2e		22 03 5b 39	jsl $395b03	            JSL UART_PUTC
.395b32		e8		inx		            INX
.395b33		80 f4		bra $395b29	            BRA put_loop
.395b35		28		plp		done        PLP
.395b36		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395b37						JOYSTICK_SET_NES_MODE
.395b37		e2 20		sep #$20	                SEP #$20        ; set A short
.395b39		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b3d		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395b3f		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b43		6b		rtl		          RTL
.395b44						JOYSTICK_SET_SNES_MODE
.395b44		e2 20		sep #$20	                SEP #$20        ; set A short
.395b46		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b4a		29 fb		and #$fb	          AND #~NES_SNES_JOY
.395b4c		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395b4e		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b52		6b		rtl		          RTL
.395b53						JOYSTICK_ENABLE_NES_SNES_PORT0
.395b53		e2 20		sep #$20	                SEP #$20        ; set A short
.395b55		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b59		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395b5b		09 01		ora #$01	          ORA #NES_SNES_EN0
.395b5d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b61		6b		rtl		          RTL
.395b62						JOYSTICK_ENABLE_NES_SNES_PORT1
.395b62		e2 20		sep #$20	                SEP #$20        ; set A short
.395b64		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b68		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395b6a		09 02		ora #$02	          ORA #NES_SNES_EN1
.395b6c		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b70		6b		rtl		          RTL
.395b71						JOYSTICK_DISABLE_NES_SNES_PORT0
.395b71		e2 20		sep #$20	                SEP #$20        ; set A short
.395b73		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b77		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395b79		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b7d		6b		rtl		          RTL
.395b7e						JOYSTICK_DISABLE_NES_SNES_PORT1
.395b7e		e2 20		sep #$20	                SEP #$20        ; set A short
.395b80		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b84		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395b86		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395b8a		6b		rtl		          RTL
.395b8b						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395b8b		e2 20		sep #$20	                SEP #$20        ; set A short
.395b8d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b91		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395b93		c9 00		cmp #$00	          CMP #$00
.395b95		f0 14		beq $395bab	          BEQ END_OF_JOYSTICK_POLL
.395b97		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395b9b		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.395b9d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395ba1						JOYSTICK_POLLING_ISNOTOVER
.395ba1		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.395ba5		29 40		and #$40	          AND #NES_SNES_DONE
.395ba7		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.395ba9		d0 f6		bne $395ba1	          BNE JOYSTICK_POLLING_ISNOTOVER
.395bab						END_OF_JOYSTICK_POLL
.395bab		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.395bac						SDC_TEST
.395bac		8b		phb		                PHB
.395bad		0b		phd		                PHD
.395bae		08		php		                PHP
.395baf		48		pha		                PHA             ; begin setdbr macro
.395bb0		08		php		                PHP
.395bb1		e2 20		sep #$20	                SEP #$20        ; set A short
.395bb3		a9 00		lda #$00	                LDA #0
.395bb5		48		pha		                PHA
.395bb6		ab		plb		                PLB
.395bb7		28		plp		                PLP
.395bb8		68		pla		                PLA             ; end setdbr macro
.395bb9		48		pha		                PHA             ; begin setdp macro
.395bba		08		php		                PHP
.395bbb		c2 20		rep #$20	                REP #$20        ; set A long
.395bbd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395bc0		5b		tcd		                TCD
.395bc1		28		plp		                PLP
.395bc2		68		pla		                PLA             ; end setdp macro
.395bc3		e2 20		sep #$20	                SEP #$20        ; set A short
.395bc5		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.395bc7		8d 1e 00	sta $001e	                STA @w CURCOLOR
.395bca		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.395bce		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.395bd2		22 12 5c 39	jsl $395c12	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.395bd6		b0 03		bcs $395bdb	                BCS init_ok
.395bd8		82 15 00	brl $395bf0	                BRL done
.395bdb		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.395bdd		85 01		sta $0321	                STA BIOS_DEV
.395bdf		22 85 43 39	jsl $394385	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.395be3		b0 03		bcs $395be8	                BCS mount_ok
.395be5		82 08 00	brl $395bf0	                BRL done
.395be8		22 3c 54 39	jsl $39543c	mount_ok        JSL IF_DIROPEN
.395bec		b0 02		bcs $395bf0	                BCS all_ok
.395bee		80 00		bra $395bf0	                BRA done
.395bf0						all_ok
.395bf0		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.395bf4		28		plp		                PLP
.395bf5		2b		pld		                PLD
.395bf6		ab		plb		                PLB
.395bf7		6b		rtl		                RTL
.395bf8						SDC_WAITBUSY
.395bf8		08		php		                PHP
.395bf9		e2 20		sep #$20	                SEP #$20        ; set A short
.395bfb		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395bff		29 01		and #$01	                AND #SDC_TRANS_BUSY
.395c01		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395c03		f0 f6		beq $395bfb	                BEQ wait_xact
.395c05		28		plp		                PLP
.395c06		6b		rtl		                RTL
.395c07						SDC_RESET
.395c07		08		php		                PHP
.395c08		e2 20		sep #$20	                SEP #$20        ; set A short
.395c0a		a9 01		lda #$01	                LDA #1
.395c0c		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395c10		28		plp		                PLP
.395c11		6b		rtl		                RTL
.395c12						SDC_INIT
.395c12		0b		phd		                PHD
.395c13		8b		phb		                PHB
.395c14		08		php		                PHP
.395c15		48		pha		                PHA             ; begin setdbr macro
.395c16		08		php		                PHP
.395c17		e2 20		sep #$20	                SEP #$20        ; set A short
.395c19		a9 00		lda #$00	                LDA #0
.395c1b		48		pha		                PHA
.395c1c		ab		plb		                PLB
.395c1d		28		plp		                PLP
.395c1e		68		pla		                PLA             ; end setdbr macro
.395c1f		48		pha		                PHA             ; begin setdp macro
.395c20		08		php		                PHP
.395c21		c2 20		rep #$20	                REP #$20        ; set A long
.395c23		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395c26		5b		tcd		                TCD
.395c27		28		plp		                PLP
.395c28		68		pla		                PLA             ; end setdp macro
.395c29		e2 20		sep #$20	                SEP #$20        ; set A short
.395c2b		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395c2f		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395c31		f0 04		beq $395c37	                BEQ start_trans                     ; Yes: start the transaction
.395c33		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395c35		80 22		bra $395c59	                BRA set_error
.395c37		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.395c39		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.395c3d		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395c3f		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395c43		22 f8 5b 39	jsl $395bf8	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395c47		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395c4b		d0 07		bne $395c54	                BNE ret_error                       ; Is there one? Process the error
.395c4d		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395c4f		28		plp		                PLP
.395c50		ab		plb		                PLB
.395c51		2b		pld		                PLD
.395c52		38		sec		                SEC
.395c53		6b		rtl		                RTL
.395c54		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395c57		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.395c59		85 00		sta $0320	set_error       STA BIOS_STATUS
.395c5b		28		plp		                PLP
.395c5c		ab		plb		                PLB
.395c5d		2b		pld		                PLD
.395c5e		18		clc		                CLC
.395c5f		6b		rtl		                RTL
.395c60						SDC_GETBLOCK
.395c60		0b		phd		                PHD
.395c61		8b		phb		                PHB
.395c62		08		php		                PHP
.395c63		48		pha		                PHA             ; begin setdbr macro
.395c64		08		php		                PHP
.395c65		e2 20		sep #$20	                SEP #$20        ; set A short
.395c67		a9 00		lda #$00	                LDA #0
.395c69		48		pha		                PHA
.395c6a		ab		plb		                PLB
.395c6b		28		plp		                PLP
.395c6c		68		pla		                PLA             ; end setdbr macro
.395c6d		48		pha		                PHA             ; begin setdp macro
.395c6e		08		php		                PHP
.395c6f		c2 20		rep #$20	                REP #$20        ; set A long
.395c71		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395c74		5b		tcd		                TCD
.395c75		28		plp		                PLP
.395c76		68		pla		                PLA             ; end setdp macro
.395c77		e2 20		sep #$20	                SEP #$20        ; set A short
.395c79		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395c7d		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395c7f		f0 04		beq $395c85	                BEQ led_on                          ; Yes: turn on the LED
.395c81		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395c83		80 71		bra $395cf6	                BRA ret_error
.395c85		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395c89		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395c8b		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395c8f		a9 00		lda #$00	                LDA #0
.395c91		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395c95		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395c97		0a		asl a		                ASL A
.395c98		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395c9c		a5 03		lda $0323	                LDA BIOS_LBA+1
.395c9e		2a		rol a		                ROL A
.395c9f		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395ca3		a5 04		lda $0324	                LDA BIOS_LBA+2
.395ca5		2a		rol a		                ROL A
.395ca6		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395caa		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395cac		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395cb0		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395cb2		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395cb6		22 f8 5b 39	jsl $395bf8	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395cba		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395cbe		d0 36		bne $395cf6	                BNE ret_error                       ; Is there one? Process the error
.395cc0		e2 20		sep #$20	                SEP #$20        ; set A short
.395cc2		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.395cc6		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.395cc8		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395ccc		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395cce		c2 10		rep #$10	                REP #$10        ; set X long
.395cd0		a0 00 00	ldy #$0000	                LDY #0
.395cd3		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.395cd7		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.395cd9		c8		iny		                INY                                 ; Advance to the next byte
.395cda		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395cdd		d0 f4		bne $395cd3	                BNE loop_rd                         ; No: keep reading
.395cdf		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395ce3		d0 11		bne $395cf6	                BNE ret_error                       ; Is there one? Process the error
.395ce5		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395ce7		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395ceb		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395ced		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395cf1		28		plp		                PLP
.395cf2		ab		plb		                PLB
.395cf3		2b		pld		                PLD
.395cf4		38		sec		                SEC
.395cf5		6b		rtl		                RTL
.395cf6		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395cf8		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395cfc		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395cfe		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d02		28		plp		                PLP
.395d03		ab		plb		                PLB
.395d04		2b		pld		                PLD
.395d05		18		clc		                CLC
.395d06		6b		rtl		                RTL
.395d07						SDC_PUTBLOCK
.395d07		0b		phd		                PHD
.395d08		8b		phb		                PHB
.395d09		08		php		                PHP
.395d0a		48		pha		                PHA             ; begin setdbr macro
.395d0b		08		php		                PHP
.395d0c		e2 20		sep #$20	                SEP #$20        ; set A short
.395d0e		a9 00		lda #$00	                LDA #0
.395d10		48		pha		                PHA
.395d11		ab		plb		                PLB
.395d12		28		plp		                PLP
.395d13		68		pla		                PLA             ; end setdbr macro
.395d14		48		pha		                PHA             ; begin setdp macro
.395d15		08		php		                PHP
.395d16		c2 20		rep #$20	                REP #$20        ; set A long
.395d18		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395d1b		5b		tcd		                TCD
.395d1c		28		plp		                PLP
.395d1d		68		pla		                PLA             ; end setdp macro
.395d1e		e2 20		sep #$20	                SEP #$20        ; set A short
.395d20		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395d24		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395d26		f0 04		beq $395d2c	                BEQ check_wp                        ; Yes: check for write protect
.395d28		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395d2a		80 65		bra $395d91	                BRA ret_error
.395d2c		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.395d2e		f0 04		beq $395d34	                BEQ led_on                          ; Yes: start the transaction
.395d30		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.395d32		80 5d		bra $395d91	                BRA ret_error
.395d34		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395d38		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395d3a		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d3e		c2 10		rep #$10	                REP #$10        ; set X long
.395d40		a0 00 00	ldy #$0000	                LDY #0
.395d43		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395d45		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395d49		c8		iny		                INY                                 ; Advance to the next byte
.395d4a		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395d4d		d0 f4		bne $395d43	                BNE loop_wr                         ; No: keep writing
.395d4f		a9 00		lda #$00	                LDA #0
.395d51		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395d55		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395d57		0a		asl a		                ASL A
.395d58		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395d5c		a5 03		lda $0323	                LDA BIOS_LBA+1
.395d5e		2a		rol a		                ROL A
.395d5f		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395d63		a5 04		lda $0324	                LDA BIOS_LBA+2
.395d65		2a		rol a		                ROL A
.395d66		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395d6a		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395d6c		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395d70		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395d72		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395d76		22 f8 5b 39	jsl $395bf8	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395d7a		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395d7e		d0 11		bne $395d91	                BNE ret_error                       ; Is there one? Process the error
.395d80		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395d82		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d86		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d88		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d8c		28		plp		                PLP
.395d8d		ab		plb		                PLB
.395d8e		2b		pld		                PLD
.395d8f		38		sec		                SEC
.395d90		6b		rtl		                RTL
.395d91		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395d93		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395d97		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395d99		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395d9d		28		plp		                PLP
.395d9e		ab		plb		                PLB
.395d9f		2b		pld		                PLD
.395da0		18		clc		                CLC
.395da1		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395da2						FDC_TEST
.395da2		8b		phb		                    PHB
.395da3		0b		phd		                    PHD
.395da4		08		php		                    PHP
.395da5		48		pha		                PHA             ; begin setdbr macro
.395da6		08		php		                PHP
.395da7		e2 20		sep #$20	                SEP #$20        ; set A short
.395da9		a9 00		lda #$00	                LDA #0
.395dab		48		pha		                PHA
.395dac		ab		plb		                PLB
.395dad		28		plp		                PLP
.395dae		68		pla		                PLA             ; end setdbr macro
.395daf		48		pha		                PHA             ; begin setdp macro
.395db0		08		php		                PHP
.395db1		c2 20		rep #$20	                REP #$20        ; set A long
.395db3		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395db6		5b		tcd		                TCD
.395db7		28		plp		                PLP
.395db8		68		pla		                PLA             ; end setdp macro
.395db9		e2 20		sep #$20	                SEP #$20        ; set A short
.395dbb		a9 f0		lda #$f0	                    LDA #$F0
.395dbd		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395dc0		22 40 0b 39	jsl $390b40	                    JSL ICLRSCREEN
.395dc4		22 64 09 39	jsl $390964	                    JSL ICSRHOME
.395dc8		c2 30		rep #$30	                REP #$30        ; set A&X long
.395dca		22 98 60 39	jsl $396098	                    JSL FDC_Init
.395dce		b0 03		bcs $395dd3	                    BCS init_ok
.395dd0		82 20 00	brl $395df3	                    BRL motor_off
.395dd3		22 97 67 39	jsl $396797	init_ok             JSL FDC_CHK_MEDIA
.395dd7		90 03		bcc $395ddc	                    BCC no_media
.395dd9		82 03 00	brl $395ddf	                    BRL is_ok1
.395ddc						no_media
.395ddc		82 14 00	brl $395df3	                    BRL motor_off
.395ddf		22 2a 66 39	jsl $39662a	is_ok1              JSL FDC_MOUNT
.395de3		90 03		bcc $395de8	                    BCC mount_err
.395de5		82 03 00	brl $395deb	                    BRL is_ok2
.395de8						mount_err
.395de8		82 08 00	brl $395df3	                    BRL motor_off
.395deb		22 ff 5d 39	jsl $395dff	is_ok2              JSL FDC_TEST_PUTBLOCK
.395def		b0 02		bcs $395df3	                    BCS all_ok
.395df1		80 00		bra $395df3	                    BRA motor_off
.395df3						all_ok
.395df3		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.395df7		22 48 61 39	jsl $396148	                    JSL FDC_Motor_Off
.395dfb		28		plp		                    PLP
.395dfc		2b		pld		                    PLD
.395dfd		ab		plb		                    PLB
.395dfe		6b		rtl		                    RTL
.395dff						FDC_TEST_PUTBLOCK
.395dff		e2 20		sep #$20	                SEP #$20        ; set A short
.395e01		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395e03		a2 00 00	ldx #$0000	                    LDX #0
.395e06		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395e0a		1a		inc a		                    INC A
.395e0b		e8		inx		                    INX
.395e0c		e0 00 02	cpx #$0200	                    CPX #512
.395e0f		d0 f5		bne $395e06	                    BNE init_loop
.395e11		c2 20		rep #$20	                REP #$20        ; set A long
.395e13		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395e16		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395e1a		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395e1d		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395e21		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395e24		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395e28		a9 00 00	lda #$0000	                    LDA #0
.395e2b		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395e2f		22 be 65 39	jsl $3965be	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395e33		6b		rtl		                    RTL
>395e34		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395e3c		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395e4c		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395e50						FDC_Check_RQM
.395e50		0b		phd		                    PHD
.395e51		08		php		                    PHP
.395e52		48		pha		                PHA             ; begin setdp macro
.395e53		08		php		                PHP
.395e54		c2 20		rep #$20	                REP #$20        ; set A long
.395e56		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e59		5b		tcd		                TCD
.395e5a		28		plp		                PLP
.395e5b		68		pla		                PLA             ; end setdp macro
.395e5c		e2 20		sep #$20	                SEP #$20        ; set A short
.395e5e		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e60		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395e64		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e66		30 12		bmi $395e7a	                    BMI time_out            ; If so: signal a time out
.395e68		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e6c		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395e6e		f0 f4		beq $395e64	                    BEQ loop
.395e70		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395e72		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395e76		28		plp		                    PLP
.395e77		2b		pld		                    PLD
.395e78		38		sec		                    SEC
.395e79		60		rts		                    RTS
.395e7a		28		plp		time_out            PLP
.395e7b		2b		pld		                    PLD
.395e7c		18		clc		                    CLC
.395e7d		60		rts		                    RTS
.395e7e						FDC_Check_DRV0_BSY
.395e7e		0b		phd		                    PHD
.395e7f		08		php		                    PHP
.395e80		48		pha		                PHA             ; begin setdp macro
.395e81		08		php		                PHP
.395e82		c2 20		rep #$20	                REP #$20        ; set A long
.395e84		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e87		5b		tcd		                TCD
.395e88		28		plp		                PLP
.395e89		68		pla		                PLA             ; end setdp macro
.395e8a		e2 20		sep #$20	                SEP #$20        ; set A short
.395e8c		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395e8e		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395e92		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395e94		30 12		bmi $395ea8	                    BMI time_out            ; If so: signal a time out
.395e96		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395e9a		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395e9c		d0 f4		bne $395e92	                    BNE loop
.395e9e		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395ea0		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395ea4		28		plp		                    PLP
.395ea5		2b		pld		                    PLD
.395ea6		38		sec		                    SEC
.395ea7		60		rts		                    RTS
.395ea8		28		plp		time_out            PLP
.395ea9		2b		pld		                    PLD
.395eaa		18		clc		                    CLC
.395eab		60		rts		                    RTS
.395eac						FDC_Check_CMD_BSY
.395eac		0b		phd		                    PHD
.395ead		08		php		                    PHP
.395eae		48		pha		                PHA             ; begin setdp macro
.395eaf		08		php		                PHP
.395eb0		c2 20		rep #$20	                REP #$20        ; set A long
.395eb2		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395eb5		5b		tcd		                TCD
.395eb6		28		plp		                PLP
.395eb7		68		pla		                PLA             ; end setdp macro
.395eb8		e2 20		sep #$20	                SEP #$20        ; set A short
.395eba		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395ebc		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395ec0		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395ec2		30 12		bmi $395ed6	                    BMI time_out            ; If so: signal a time out
.395ec4		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395ec8		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395eca		d0 f4		bne $395ec0	                    BNE loop
.395ecc		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395ece		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395ed2		28		plp		                    PLP
.395ed3		2b		pld		                    PLD
.395ed4		38		sec		                    SEC
.395ed5		60		rts		                    RTS
.395ed6		28		plp		time_out            PLP
.395ed7		2b		pld		                    PLD
.395ed8		18		clc		                    CLC
.395ed9		60		rts		                    RTS
.395eda						FDC_Can_Read_Data
.395eda		0b		phd		                    PHD
.395edb		08		php		                    PHP
.395edc		48		pha		                PHA             ; begin setdp macro
.395edd		08		php		                PHP
.395ede		c2 20		rep #$20	                REP #$20        ; set A long
.395ee0		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ee3		5b		tcd		                TCD
.395ee4		28		plp		                PLP
.395ee5		68		pla		                PLA             ; end setdp macro
.395ee6		e2 20		sep #$20	                SEP #$20        ; set A short
.395ee8		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395eea		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395eee		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395ef0		30 14		bmi $395f06	                    BMI time_out            ; If so: signal a time out
.395ef2		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395ef6		29 40		and #$40	                    AND #FDC_MSR_DIO
.395ef8		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395efa		d0 f2		bne $395eee	                    BNE loop
.395efc		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395efe		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395f02		28		plp		                    PLP
.395f03		2b		pld		                    PLD
.395f04		38		sec		                    SEC
.395f05		60		rts		                    RTS
.395f06		28		plp		time_out            PLP
.395f07		2b		pld		                    PLD
.395f08		18		clc		                    CLC
.395f09		60		rts		                    RTS
.395f0a						FDC_CAN_WRITE
.395f0a		0b		phd		                    PHD
.395f0b		08		php		                    PHP
.395f0c		48		pha		                PHA             ; begin setdp macro
.395f0d		08		php		                PHP
.395f0e		c2 20		rep #$20	                REP #$20        ; set A long
.395f10		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f13		5b		tcd		                TCD
.395f14		28		plp		                PLP
.395f15		68		pla		                PLA             ; end setdp macro
.395f16		e2 20		sep #$20	                SEP #$20        ; set A short
.395f18		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395f1a		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395f1e		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395f20		30 14		bmi $395f36	                    BMI time_out            ; If so: signal a time out
.395f22		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395f26		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395f28		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395f2a		d0 f2		bne $395f1e	                    BNE loop
.395f2c		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395f2e		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.395f32		28		plp		                    PLP
.395f33		2b		pld		                    PLD
.395f34		38		sec		                    SEC
.395f35		60		rts		                    RTS
.395f36		28		plp		time_out            PLP
.395f37		2b		pld		                    PLD
.395f38		18		clc		                    CLC
.395f39		60		rts		                    RTS
.395f3a						FDC_DELAY_10MS
.395f3a		da		phx		                    PHX
.395f3b		08		php		                    PHP
.395f3c		c2 10		rep #$10	                REP #$10        ; set X long
.395f3e		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395f41		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395f42		ca		dex		                    DEX
.395f43		e0 00 00	cpx #$0000	                    CPX #0
.395f46		d0 f9		bne $395f41	                    BNE loop
.395f48		28		plp		                    PLP
.395f49		fa		plx		                    PLX
.395f4a		6b		rtl		                    RTL
.395f4b						FDC_COMMAND
.395f4b		da		phx		                    PHX
.395f4c		8b		phb		                    PHB
.395f4d		0b		phd		                    PHD
.395f4e		08		php		                    PHP
.395f4f		48		pha		                PHA             ; begin setdbr macro
.395f50		08		php		                PHP
.395f51		e2 20		sep #$20	                SEP #$20        ; set A short
.395f53		a9 00		lda #$00	                LDA #0
.395f55		48		pha		                PHA
.395f56		ab		plb		                PLB
.395f57		28		plp		                PLP
.395f58		68		pla		                PLA             ; end setdbr macro
.395f59		48		pha		                PHA             ; begin setdp macro
.395f5a		08		php		                PHP
.395f5b		c2 20		rep #$20	                REP #$20        ; set A long
.395f5d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f60		5b		tcd		                TCD
.395f61		28		plp		                PLP
.395f62		68		pla		                PLA             ; end setdp macro
.395f63		22 3a 5f 39	jsl $395f3a	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395f67		e2 30		sep #$30	                SEP #$30        ; set A&X short
.395f69		a2 00		ldx #$00	                    LDX #0
.395f6b		a9 00		lda #$00	                    LDA #0
.395f6d		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395f70		e8		inx		                    INX
.395f71		e0 10		cpx #$10	                    CPX #16
.395f73		d0 f8		bne $395f6d	                    BNE clr_results
.395f75		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395f79		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395f7b		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395f7d		f0 04		beq $395f83	                    BEQ start_send                          ; If so, start sending
.395f7f		22 98 60 39	jsl $396098	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395f83						start_send
.395f83		e2 10		sep #$10	                SEP #$10        ; set X short
.395f85		a2 00		ldx #$00	                    LDX #0
.395f87		20 50 5e	jsr $395e50	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395f8a		b0 03		bcs $395f8f	                    BCS send_param
.395f8c		82 5e 00	brl $395fed	                    BRL time_out                            ; If there was a timeout, flag the time out
.395f8f		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395f92		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395f96		22 3a 5f 39	jsl $395f3a	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395f9a		e8		inx		                    INX                                     ; Advance to the next byte
.395f9b		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395f9e		d0 e7		bne $395f87	                    BNE send_loop                           ; Keep sending until we've sent them all
.395fa0		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395fa3		d0 03		bne $395fa8	                    BNE chk_data_dir
.395fa5		82 80 00	brl $396028	                    BRL result_phase                        ; If 0: we just want a result
.395fa8		10 3c		bpl $395fe6	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.395faa						wr_data
.395faa		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395fac		30 03		bmi $395fb1	                    BMI wr_chk_rqm
.395fae		82 3c 00	brl $395fed	                    BRL time_out                            ; If not, raise an error
.395fb1		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395fb5		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395fb7		f0 f1		beq $395faa	                    BEQ wr_data_rdy
.395fb9		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395fbb		d0 03		bne $395fc0	                    BNE wr_data_phase                       ; If so: transfer the data
.395fbd		82 68 00	brl $396028	                    BRL result_phase                          ; If not: it's an error
.395fc0						wr_data_phase
.395fc0		c2 10		rep #$10	                REP #$10        ; set X long
.395fc2		a0 00 00	ldy #$0000	                    LDY #0
.395fc5		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395fc7		30 03		bmi $395fcc	                    BMI wr_chk_nondma
.395fc9		82 21 00	brl $395fed	                    BRL time_out                            ; If not, raise an error
.395fcc		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395fd0		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395fd2		f0 54		beq $396028	                    BEQ result_phase                        ; If not: break out to result phase
.395fd4		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395fd6		f0 ed		beq $395fc5	                    BEQ wr_data_loop                        ; No: keep waiting
.395fd8		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395fda		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395fde		c8		iny		                    INY                                     ; Move to the next position
.395fdf		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395fe2		d0 e1		bne $395fc5	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395fe4		80 42		bra $396028	                    BRA result_phase                        ; ready for the result phase
.395fe6		20 da 5e	jsr $395eda	rd_data             JSR FDC_Can_Read_Data
.395fe9		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395feb		30 07		bmi $395ff4	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395fed						time_out
.395fed		e2 20		sep #$20	                SEP #$20        ; set A short
.395fef		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395ff1		82 9c 00	brl $396090	                    BRL pass_error
.395ff4		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395ff8		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395ffa		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395ffc		d0 eb		bne $395fe9	                    BNE rd_data_rdy
.395ffe		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.396002		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.396004		d0 03		bne $396009	                    BNE rd_data_phase                       ; If so: transfer the data
.396006		82 83 00	brl $39608c	                    BRL error                               ; If not: it's an error
.396009						rd_data_phase
.396009		c2 10		rep #$10	                REP #$10        ; set X long
.39600b		a0 00 00	ldy #$0000	                    LDY #0
.39600e		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.396010		10 db		bpl $395fed	                    BPL time_out                            ; If not: throw a timeout error
.396012		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.396016		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.396018		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.39601a		d0 f2		bne $39600e	                    BNE rd_data_loop
.39601c		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.396020		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.396022		c8		iny		                    INY                                     ; Move to the next position
.396023		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.396026		d0 e6		bne $39600e	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.396028		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.39602b		f0 34		beq $396061	                    BEQ chk_busy                            ; Then we're done
.39602d		e2 10		sep #$10	                SEP #$10        ; set X short
.39602f		a2 00		ldx #$00	                    LDX #0
.396031		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.396033		22 34 3f 39	jsl $393f34	                    JSL ISETTIMEOUT
.396037		20 da 5e	jsr $395eda	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.39603a		90 b1		bcc $395fed	                    BCC time_out                            ; If there was a time out, raise an error
.39603c		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.396040		20 da 5e	jsr $395eda	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396043		90 a8		bcc $395fed	                    BCC time_out                            ; If there was a time out, raise an error
.396045		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.396049		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.39604c		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM
.39604f		90 9c		bcc $395fed	                    BCC time_out                            ; If there was a time out, flag the error
.396051		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.396055		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.396057		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.396059		d0 06		bne $396061	                    BNE chk_busy
.39605b		e8		inx		                    INX                                     ; Move to the next result positions
.39605c		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.39605f		d0 e4		bne $396045	                    BNE read_result                         ; And keep looping until we've read all
.396061						chk_busy
.396061		c2 10		rep #$10	                REP #$10        ; set X long
.396063		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.396066		22 4a 14 39	jsl $39144a	                    JSL ILOOP_MS
.39606a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.39606e		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.396070		f0 12		beq $396084	                    BEQ done                                ; If not set: we're done
.396072		20 da 5e	jsr $395eda	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.396075		b0 03		bcs $39607a	                    BCS get_result_byte
.396077		82 73 ff	brl $395fed	                    BRL time_out                            ; If there was a time out, flag the error
.39607a		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.39607e		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.396081		e8		inx		                    INX
.396082		80 dd		bra $396061	                    BRA chk_busy                            ; And keep checking
.396084						done
.396084		64 20		stz $0320	                    STZ BIOS_STATUS
.396086		28		plp		                    PLP
.396087		2b		pld		                    PLD
.396088		ab		plb		                    PLB
.396089		fa		plx		                    PLX
.39608a		38		sec		                    SEC
.39608b		6b		rtl		                    RTL
.39608c						error
.39608c		e2 20		sep #$20	                SEP #$20        ; set A short
.39608e		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.396090		85 20		sta $0320	pass_error          STA BIOS_STATUS
.396092		28		plp		                    PLP
.396093		2b		pld		                    PLD
.396094		ab		plb		                    PLB
.396095		fa		plx		                    PLX
.396096		18		clc		                    CLC
.396097		6b		rtl		                    RTL
.396098						FDC_Init
.396098		08		php		                    PHP
.396099		c2 10		rep #$10	                REP #$10        ; set X long
.39609b		e2 20		sep #$20	                SEP #$20        ; set A short
.39609d		a9 00		lda #$00	                    LDA #0
.39609f		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3960a3		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.3960a6		a0 00 00	ldy #$0000	                    LDY #0
.3960a9		22 57 14 39	jsl $391457	                    JSL IDELAY
.3960ad		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.3960af		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3960b3		ea		nop		                    NOP
.3960b4		ea		nop		                    NOP
.3960b5		ea		nop		                    NOP
.3960b6		ea		nop		                    NOP
.3960b7		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.3960b9		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.3960bd		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.3960bf		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.3960c3		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.3960c6		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.3960c9		22 57 14 39	jsl $391457	                    JSL IDELAY
.3960cd		22 a8 61 39	jsl $3961a8	                    JSL FDC_Sense_Int_Status
.3960d1		90 25		bcc $3960f8	                    BCC pass_failure
.3960d3		22 a8 61 39	jsl $3961a8	                    JSL FDC_Sense_Int_Status
.3960d7		90 1f		bcc $3960f8	                    BCC pass_failure
.3960d9		22 a8 61 39	jsl $3961a8	                    JSL FDC_Sense_Int_Status
.3960dd		90 19		bcc $3960f8	                    BCC pass_failure
.3960df		22 a8 61 39	jsl $3961a8	                    JSL FDC_Sense_Int_Status
.3960e3		90 13		bcc $3960f8	                    BCC pass_failure
.3960e5		22 6a 62 39	jsl $39626a	                    JSL FDC_Configure_Command
.3960e9		90 0d		bcc $3960f8	                    BCC pass_failure
.3960eb		22 11 62 39	jsl $396211	                    JSL FDC_Specify_Command
.3960ef		90 07		bcc $3960f8	                    BCC pass_failure
.3960f1		22 14 61 39	jsl $396114	                    JSL FDC_Motor_On
.3960f5		28		plp		                    PLP
.3960f6		38		sec		                    SEC
.3960f7		6b		rtl		                    RTL
.3960f8		28		plp		pass_failure        PLP
.3960f9		18		clc		                    CLC
.3960fa		6b		rtl		                    RTL
.3960fb						FDC_MOTOR_NEEDED
.3960fb		08		php		                    PHP
.3960fc		c2 20		rep #$20	                REP #$20        ; set A long
.3960fe		78		sei		                    SEI                         ; Turn off interrupts
.3960ff		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.396102		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.396106		e2 20		sep #$20	                SEP #$20        ; set A short
.396108		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.39610c		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.39610e		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396112		28		plp		                    PLP
.396113		6b		rtl		                    RTL
.396114						FDC_Motor_On
.396114		08		php		                    PHP
.396115		22 fb 60 39	jsl $3960fb	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396119		e2 20		sep #$20	                SEP #$20        ; set A short
.39611b		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.39611f		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.396121		d0 1f		bne $396142	                    BNE done                    ; If so: skip
.396123		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.396125		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.396129		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.39612c		90 17		bcc $396145	                    BCC time_out
.39612e		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.396131		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.396134		22 57 14 39	jsl $391457	                    JSL IDELAY
.396138		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.39613c		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.39613e		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396142		28		plp		done                PLP
.396143		38		sec		                    SEC
.396144		6b		rtl		                    RTL
.396145		28		plp		time_out            PLP                         ; Return a timeout error
.396146		18		clc		                    CLC
.396147		6b		rtl		                    RTL
.396148						FDC_Motor_Off
.396148		08		php		                    PHP
.396149		e2 20		sep #$20	                SEP #$20        ; set A short
.39614b		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.39614d		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.396151		c2 20		rep #$20	                REP #$20        ; set A long
.396153		78		sei		                    SEI                         ; Turn off interrupts
.396154		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.396157		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39615b		e2 20		sep #$20	                SEP #$20        ; set A short
.39615d		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.396161		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.396163		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.396167		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.39616b		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.39616d		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.396171		28		plp		                    PLP
.396172		6b		rtl		                    RTL
.396173						FDC_Recalibrate_Command
.396173		0b		phd		                    PHD
.396174		08		php		                    PHP
.396175		48		pha		                PHA             ; begin setdp macro
.396176		08		php		                PHP
.396177		c2 20		rep #$20	                REP #$20        ; set A long
.396179		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39617c		5b		tcd		                TCD
.39617d		28		plp		                PLP
.39617e		68		pla		                PLA             ; end setdp macro
.39617f		22 fb 60 39	jsl $3960fb	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.396183		e2 20		sep #$20	                SEP #$20        ; set A short
.396185		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.396187		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39618a		a5 00		lda $0300	                    LDA FDC_DRIVE
.39618c		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.39618f		a9 02		lda #$02	                    LDA #2
.396191		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.396194		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.396197		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.39619a		22 4b 5f 39	jsl $395f4b	                    JSL FDC_COMMAND             ; Issue the command
.39619e		90 04		bcc $3961a4	                    BCC pass_failure            ; If failure, pass the failure up
.3961a0		28		plp		                    PLP
.3961a1		2b		pld		                    PLD
.3961a2		38		sec		                    SEC
.3961a3		6b		rtl		                    RTL
.3961a4		28		plp		pass_failure        PLP
.3961a5		2b		pld		                    PLD
.3961a6		18		clc		                    CLC
.3961a7		6b		rtl		                    RTL
.3961a8						FDC_Sense_Int_Status
.3961a8		8b		phb		                    PHB
.3961a9		0b		phd		                    PHD
.3961aa		08		php		                    PHP
.3961ab		48		pha		                PHA             ; begin setdbr macro
.3961ac		08		php		                PHP
.3961ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3961af		a9 00		lda #$00	                LDA #0
.3961b1		48		pha		                PHA
.3961b2		ab		plb		                PLB
.3961b3		28		plp		                PLP
.3961b4		68		pla		                PLA             ; end setdbr macro
.3961b5		48		pha		                PHA             ; begin setdp macro
.3961b6		08		php		                PHP
.3961b7		c2 20		rep #$20	                REP #$20        ; set A long
.3961b9		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3961bc		5b		tcd		                TCD
.3961bd		28		plp		                PLP
.3961be		68		pla		                PLA             ; end setdp macro
.3961bf		c2 30		rep #$30	                REP #$30        ; set A&X long
.3961c1		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.3961c4		22 4a 14 39	jsl $39144a	                    JSL ILOOP_MS
.3961c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3961ca		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.3961cc		a9 ff		lda #$ff	                    LDA #$FF
.3961ce		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.3961d0		20 ac 5e	jsr $395eac	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.3961d3		90 30		bcc $396205	                    BCC time_out                        ; If there was a time out, raise an error
.3961d5		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3961d8		90 2b		bcc $396205	                    BCC time_out                        ; If there was a time out, raise an error
.3961da		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.3961dc		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3961e0		20 da 5e	jsr $395eda	                    JSR FDC_Can_Read_Data
.3961e3		90 20		bcc $396205	                    BCC time_out                        ; If there was a time out, raise an error
.3961e5		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3961e8		90 1b		bcc $396205	                    BCC time_out                        ; If there was a time out, raise an error
.3961ea		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.3961ee		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3961f0		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.3961f3		90 10		bcc $396205	                    BCC time_out                        ; If there was a time out, raise an error
.3961f5		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.3961f9		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.3961fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3961fd		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.396200		28		plp		                    PLP
.396201		2b		pld		                    PLD
.396202		ab		plb		                    PLB
.396203		38		sec		                    SEC
.396204		6b		rtl		                    RTL
.396205						time_out
.396205		e2 20		sep #$20	                SEP #$20        ; set A short
.396207		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.396209		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39620c		28		plp		                    PLP
.39620d		2b		pld		                    PLD
.39620e		ab		plb		                    PLB
.39620f		18		clc		                    CLC
.396210		6b		rtl		                    RTL
.396211						FDC_Specify_Command
.396211		8b		phb		                    PHB
.396212		0b		phd		                    PHD
.396213		08		php		                    PHP
.396214		48		pha		                PHA             ; begin setdbr macro
.396215		08		php		                PHP
.396216		e2 20		sep #$20	                SEP #$20        ; set A short
.396218		a9 00		lda #$00	                LDA #0
.39621a		48		pha		                PHA
.39621b		ab		plb		                PLB
.39621c		28		plp		                PLP
.39621d		68		pla		                PLA             ; end setdbr macro
.39621e		48		pha		                PHA             ; begin setdp macro
.39621f		08		php		                PHP
.396220		c2 20		rep #$20	                REP #$20        ; set A long
.396222		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396225		5b		tcd		                TCD
.396226		28		plp		                PLP
.396227		68		pla		                PLA             ; end setdp macro
.396228		c2 30		rep #$30	                REP #$30        ; set A&X long
.39622a		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.39622d		22 4a 14 39	jsl $39144a	                    JSL ILOOP_MS
.396231		e2 20		sep #$20	                SEP #$20        ; set A short
.396233		20 ac 5e	jsr $395eac	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.396236		90 26		bcc $39625e	                    BCC time_out            ; If there was a time out, raise an error
.396238		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39623b		90 21		bcc $39625e	                    BCC time_out            ; If there was a time out, raise an error
.39623d		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.39623f		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396243		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396246		90 16		bcc $39625e	                    BCC time_out            ; If there was a time out, raise an error
.396248		a9 cf		lda #$cf	                    LDA #$CF
.39624a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39624e		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396251		90 0b		bcc $39625e	                    BCC time_out            ; If there was a time out, raise an error
.396253		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.396255		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.396259		28		plp		                    PLP
.39625a		2b		pld		                    PLD
.39625b		ab		plb		                    PLB
.39625c		38		sec		                    SEC
.39625d		6b		rtl		                    RTL
.39625e						time_out
.39625e		e2 20		sep #$20	                SEP #$20        ; set A short
.396260		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.396262		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396265		28		plp		                    PLP
.396266		2b		pld		                    PLD
.396267		ab		plb		                    PLB
.396268		18		clc		                    CLC
.396269		6b		rtl		                    RTL
.39626a						FDC_Configure_Command
.39626a		8b		phb		                    PHB
.39626b		0b		phd		                    PHD
.39626c		08		php		                    PHP
.39626d		48		pha		                PHA             ; begin setdbr macro
.39626e		08		php		                PHP
.39626f		e2 20		sep #$20	                SEP #$20        ; set A short
.396271		a9 00		lda #$00	                LDA #0
.396273		48		pha		                PHA
.396274		ab		plb		                PLB
.396275		28		plp		                PLP
.396276		68		pla		                PLA             ; end setdbr macro
.396277		48		pha		                PHA             ; begin setdp macro
.396278		08		php		                PHP
.396279		c2 20		rep #$20	                REP #$20        ; set A long
.39627b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39627e		5b		tcd		                TCD
.39627f		28		plp		                PLP
.396280		68		pla		                PLA             ; end setdp macro
.396281		c2 30		rep #$30	                REP #$30        ; set A&X long
.396283		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.396286		22 4a 14 39	jsl $39144a	                    JSL ILOOP_MS
.39628a		e2 20		sep #$20	                SEP #$20        ; set A short
.39628c		20 ac 5e	jsr $395eac	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.39628f		90 36		bcc $3962c7	                    BCC time_out            ; If there was a time out, raise an error
.396291		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.396294		90 31		bcc $3962c7	                    BCC time_out            ; If there was a time out, raise an error
.396296		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.396298		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.39629c		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.39629f		90 26		bcc $3962c7	                    BCC time_out            ; If there was a time out, raise an error
.3962a1		a9 00		lda #$00	                    LDA #$00
.3962a3		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962a7		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3962aa		90 1b		bcc $3962c7	                    BCC time_out            ; If there was a time out, raise an error
.3962ac		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.3962ae		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962b2		20 50 5e	jsr $395e50	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.3962b5		90 10		bcc $3962c7	                    BCC time_out            ; If there was a time out, raise an error
.3962b7		a9 00		lda #$00	                    LDA #$00
.3962b9		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.3962bd		20 ac 5e	jsr $395eac	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.3962c0		90 05		bcc $3962c7	                    BCC time_out            ; If there was a time out, raise an error
.3962c2		28		plp		                    PLP
.3962c3		2b		pld		                    PLD
.3962c4		ab		plb		                    PLB
.3962c5		38		sec		                    SEC
.3962c6		6b		rtl		                    RTL
.3962c7						time_out
.3962c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3962c9		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.3962cb		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3962ce		28		plp		                    PLP
.3962cf		2b		pld		                    PLD
.3962d0		ab		plb		                    PLB
.3962d1		18		clc		                    CLC
.3962d2		6b		rtl		                    RTL
.3962d3						FDC_Read_ID_Command
.3962d3		8b		phb		                    PHB
.3962d4		0b		phd		                    PHD
.3962d5		08		php		                    PHP
.3962d6		48		pha		                PHA             ; begin setdbr macro
.3962d7		08		php		                PHP
.3962d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3962da		a9 00		lda #$00	                LDA #0
.3962dc		48		pha		                PHA
.3962dd		ab		plb		                PLB
.3962de		28		plp		                PLP
.3962df		68		pla		                PLA             ; end setdbr macro
.3962e0		48		pha		                PHA             ; begin setdp macro
.3962e1		08		php		                PHP
.3962e2		c2 20		rep #$20	                REP #$20        ; set A long
.3962e4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962e7		5b		tcd		                TCD
.3962e8		28		plp		                PLP
.3962e9		68		pla		                PLA             ; end setdp macro
.3962ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3962ec		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.3962ee		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3962f1		a9 01		lda #$01	                    LDA #1
.3962f3		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.3962f6		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.3962f9		a9 07		lda #$07	                    LDA #7
.3962fb		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.3962fe		22 4b 5f 39	jsl $395f4b	                    JSL FDC_COMMAND                     ; Issue the command
.396302		90 27		bcc $39632b	                    BCC pass_failure
.396304		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.396307		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.396309		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39630c		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.39630e		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396311		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.396313		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396316		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.396318		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39631b		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.39631d		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396320		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.396322		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396325		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.396327		28		plp		                    PLP
.396328		2b		pld		                    PLD
.396329		ab		plb		                    PLB
.39632a		6b		rtl		                    RTL
.39632b		28		plp		pass_failure        PLP
.39632c		2b		pld		                    PLD
.39632d		ab		plb		                    PLB
.39632e		18		clc		                    CLC
.39632f		6b		rtl		                    RTL
.396330						FDC_DumpReg_Command
.396330		0b		phd		                    PHD
.396331		08		php		                    PHP
.396332		e2 20		sep #$20	                SEP #$20        ; set A short
.396334		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.396336		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396339		a9 01		lda #$01	                    LDA #1
.39633b		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.39633e		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396341		a9 0a		lda #$0a	                    LDA #10
.396343		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.396346		22 4b 5f 39	jsl $395f4b	                    JSL FDC_COMMAND                     ; Issue the command
.39634a		90 03		bcc $39634f	                    BCC pass_failure
.39634c		28		plp		                    PLP
.39634d		2b		pld		                    PLD
.39634e		6b		rtl		                    RTL
.39634f		28		plp		pass_failure        PLP
.396350		2b		pld		                    PLD
.396351		18		clc		                    CLC
.396352		6b		rtl		                    RTL
.396353						FDC_Seek_Track
.396353		8b		phb		                    PHB
.396354		0b		phd		                    PHD
.396355		08		php		                    PHP
.396356		48		pha		                PHA             ; begin setdbr macro
.396357		08		php		                PHP
.396358		e2 20		sep #$20	                SEP #$20        ; set A short
.39635a		a9 00		lda #$00	                LDA #0
.39635c		48		pha		                PHA
.39635d		ab		plb		                PLB
.39635e		28		plp		                PLP
.39635f		68		pla		                PLA             ; end setdbr macro
.396360		48		pha		                PHA             ; begin setdp macro
.396361		08		php		                PHP
.396362		c2 20		rep #$20	                REP #$20        ; set A long
.396364		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396367		5b		tcd		                TCD
.396368		28		plp		                PLP
.396369		68		pla		                PLA             ; end setdp macro
.39636a		22 fb 60 39	jsl $3960fb	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.39636e		e2 20		sep #$20	                SEP #$20        ; set A short
.396370		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396372		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396375		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396377		29 01		and #$01	                    AND #$01
.396379		0a		asl a		                    ASL A
.39637a		0a		asl a		                    ASL A
.39637b		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39637d		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396380		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396382		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396385		a9 03		lda #$03	                    LDA #3
.396387		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39638a		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39638d		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396390		22 4b 5f 39	jsl $395f4b	                    JSL FDC_COMMAND                     ; Issue the command
.396394		90 05		bcc $39639b	                    BCC pass_failure
.396396		28		plp		                    PLP
.396397		2b		pld		                    PLD
.396398		ab		plb		                    PLB
.396399		38		sec		                    SEC
.39639a		6b		rtl		                    RTL
.39639b		28		plp		pass_failure        PLP
.39639c		2b		pld		                    PLD
.39639d		ab		plb		                    PLB
.39639e		18		clc		                    CLC
.39639f		6b		rtl		                    RTL
.3963a0						FDC_Read_Sector
.3963a0		8b		phb		                    PHB
.3963a1		0b		phd		                    PHD
.3963a2		08		php		                    PHP
.3963a3		48		pha		                PHA             ; begin setdbr macro
.3963a4		08		php		                PHP
.3963a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3963a7		a9 00		lda #$00	                LDA #0
.3963a9		48		pha		                PHA
.3963aa		ab		plb		                PLB
.3963ab		28		plp		                PLP
.3963ac		68		pla		                PLA             ; end setdbr macro
.3963ad		48		pha		                PHA             ; begin setdp macro
.3963ae		08		php		                PHP
.3963af		c2 20		rep #$20	                REP #$20        ; set A long
.3963b1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3963b4		5b		tcd		                TCD
.3963b5		28		plp		                PLP
.3963b6		68		pla		                PLA             ; end setdp macro
.3963b7		22 fb 60 39	jsl $3960fb	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3963bb		e2 20		sep #$20	                SEP #$20        ; set A short
.3963bd		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.3963bf		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3963c1		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3963c4		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3963c6		29 01		and #$01	                    AND #$01
.3963c8		0a		asl a		                    ASL A
.3963c9		0a		asl a		                    ASL A
.3963ca		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3963cc		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3963cf		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3963d1		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3963d4		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3963d6		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3963d9		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3963db		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3963de		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3963e0		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3963e3		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3963e5		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3963e8		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3963ea		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3963ed		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3963ef		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.3963f2		a9 09		lda #$09	                    LDA #9
.3963f4		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3963f7		a9 01		lda #$01	                    LDA #1
.3963f9		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.3963fc		a9 07		lda #$07	                    LDA #7
.3963fe		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396401		22 4b 5f 39	jsl $395f4b	command             JSL FDC_COMMAND                     ; Issue the command
.396405		08		php		                    PHP
.396406		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.396409		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.39640b		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39640e		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.396410		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396413		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.396415		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396418		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.39641a		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39641d		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.39641f		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396422		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396424		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396427		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.396429		28		plp		                    PLP
.39642a		90 04		bcc $396430	                    BCC pass_failure
.39642c		28		plp		done                PLP
.39642d		2b		pld		                    PLD
.39642e		ab		plb		                    PLB
.39642f		6b		rtl		                    RTL
.396430		28		plp		pass_failure        PLP
.396431		2b		pld		                    PLD
.396432		ab		plb		                    PLB
.396433		18		clc		                    CLC
.396434		6b		rtl		                    RTL
.396435						FDC_Write_Sector
.396435		8b		phb		                    PHB
.396436		0b		phd		                    PHD
.396437		08		php		                    PHP
.396438		48		pha		                PHA             ; begin setdbr macro
.396439		08		php		                PHP
.39643a		e2 20		sep #$20	                SEP #$20        ; set A short
.39643c		a9 00		lda #$00	                LDA #0
.39643e		48		pha		                PHA
.39643f		ab		plb		                PLB
.396440		28		plp		                PLP
.396441		68		pla		                PLA             ; end setdbr macro
.396442		48		pha		                PHA             ; begin setdp macro
.396443		08		php		                PHP
.396444		c2 20		rep #$20	                REP #$20        ; set A long
.396446		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396449		5b		tcd		                TCD
.39644a		28		plp		                PLP
.39644b		68		pla		                PLA             ; end setdp macro
.39644c		e2 20		sep #$20	                SEP #$20        ; set A short
.39644e		22 fb 60 39	jsl $3960fb	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396452		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.396454		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396456		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396459		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39645b		29 01		and #$01	                    AND #$01
.39645d		0a		asl a		                    ASL A
.39645e		0a		asl a		                    ASL A
.39645f		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396461		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396464		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396466		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396469		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39646b		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.39646e		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396470		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396473		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396475		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.396478		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39647a		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39647d		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.39647f		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396482		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396484		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396487		a9 09		lda #$09	                    LDA #9
.396489		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39648c		a9 ff		lda #$ff	                    LDA #$FF
.39648e		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396491		a9 07		lda #$07	                    LDA #7
.396493		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396496		22 4b 5f 39	jsl $395f4b	command             JSL FDC_COMMAND                     ; Issue the command
.39649a		08		php		                    PHP
.39649b		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39649e		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3964a0		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3964a3		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.3964a5		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3964a8		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.3964aa		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3964ad		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.3964af		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3964b2		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3964b4		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3964b7		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3964b9		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3964bc		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3964be		28		plp		check_status        PLP
.3964bf		90 04		bcc $3964c5	                    BCC pass_failure
.3964c1		28		plp		done                PLP
.3964c2		2b		pld		                    PLD
.3964c3		ab		plb		                    PLB
.3964c4		6b		rtl		                    RTL
.3964c5		28		plp		pass_failure        PLP
.3964c6		2b		pld		                    PLD
.3964c7		ab		plb		                    PLB
.3964c8		18		clc		                    CLC
.3964c9		6b		rtl		                    RTL
.3964ca						DIVIDE32
.3964ca		da		phx		                    PHX
.3964cb		5a		phy		                    PHY
.3964cc		0b		phd		                    PHD
.3964cd		08		php		                    PHP
.3964ce		48		pha		                PHA             ; begin setdp macro
.3964cf		08		php		                PHP
.3964d0		c2 20		rep #$20	                REP #$20        ; set A long
.3964d2		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.3964d5		5b		tcd		                TCD
.3964d6		28		plp		                PLP
.3964d7		68		pla		                PLA             ; end setdp macro
.3964d8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3964da		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.3964dc		64 0a		stz $0316	                    STZ REMAINDER+2
.3964de		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.3964e1		06 00		asl $030c	loop                ASL DIVIDEND
.3964e3		26 02		rol $030e	                    ROL DIVIDEND+2
.3964e5		26 08		rol $0314	                    ROL REMAINDER
.3964e7		26 0a		rol $0316	                    ROL REMAINDER+2
.3964e9		a5 08		lda $0314	                    LDA REMAINDER
.3964eb		38		sec		                    SEC
.3964ec		e5 04		sbc $0310	                    SBC DIVISOR
.3964ee		a8		tay		                    TAY
.3964ef		a5 0a		lda $0316	                    LDA REMAINDER+2
.3964f1		e5 06		sbc $0312	                    SBC DIVISOR+2
.3964f3		90 06		bcc $3964fb	                    BCC skip
.3964f5		85 0a		sta $0316	                    STA REMAINDER+2
.3964f7		84 08		sty $0314	                    STY REMAINDER
.3964f9		e6 00		inc $030c	                    INC DIVIDEND
.3964fb		ca		dex		skip                DEX
.3964fc		d0 e3		bne $3964e1	                    BNE loop
.3964fe		28		plp		                    PLP
.3964ff		2b		pld		                    PLD
.396500		7a		ply		                    PLY
.396501		fa		plx		                    PLX
.396502		60		rts		                    RTS
.396503						LBA2CHS
.396503		8b		phb		                    PHB
.396504		0b		phd		                    PHD
.396505		08		php		                    PHP
.396506		48		pha		                PHA             ; begin setdbr macro
.396507		08		php		                PHP
.396508		e2 20		sep #$20	                SEP #$20        ; set A short
.39650a		a9 00		lda #$00	                LDA #0
.39650c		48		pha		                PHA
.39650d		ab		plb		                PLB
.39650e		28		plp		                PLP
.39650f		68		pla		                PLA             ; end setdbr macro
.396510		48		pha		                PHA             ; begin setdp macro
.396511		08		php		                PHP
.396512		c2 20		rep #$20	                REP #$20        ; set A long
.396514		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396517		5b		tcd		                TCD
.396518		28		plp		                PLP
.396519		68		pla		                PLA             ; end setdp macro
.39651a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39651c		a5 22		lda $0322	                    LDA BIOS_LBA
.39651e		85 0c		sta $030c	                    STA DIVIDEND
.396520		a5 24		lda $0324	                    LDA BIOS_LBA+2
.396522		85 0e		sta $030e	                    STA DIVIDEND+2
.396524		a9 24 00	lda #$0024	                    LDA #36
.396527		85 10		sta $0310	                    STA DIVISOR
.396529		64 12		stz $0312	                    STZ DIVISOR+2
.39652b		20 ca 64	jsr $3964ca	                    JSR DIVIDE32
.39652e		e2 20		sep #$20	                SEP #$20        ; set A short
.396530		a5 0c		lda $030c	                    LDA DIVIDEND
.396532		85 02		sta $0302	                    STA FDC_CYLINDER
.396534		c2 20		rep #$20	                REP #$20        ; set A long
.396536		a5 14		lda $0314	                    LDA REMAINDER
.396538		85 0c		sta $030c	                    STA DIVIDEND
.39653a		a5 16		lda $0316	                    LDA REMAINDER+2
.39653c		85 0e		sta $030e	                    STA DIVIDEND+2
.39653e		a9 12 00	lda #$0012	                    LDA #18
.396541		85 10		sta $0310	                    STA DIVISOR
.396543		64 12		stz $0312	                    STZ DIVISOR+2
.396545		20 ca 64	jsr $3964ca	                    JSR DIVIDE32
.396548		e2 20		sep #$20	                SEP #$20        ; set A short
.39654a		a5 0c		lda $030c	                    LDA DIVIDEND
.39654c		29 01		and #$01	                    AND #$01
.39654e		85 01		sta $0301	                    STA FDC_HEAD
.396550		a5 14		lda $0314	                    LDA REMAINDER
.396552		1a		inc a		                    INC A
.396553		85 03		sta $0303	                    STA FDC_SECTOR
.396555		28		plp		                    PLP
.396556		2b		pld		                    PLD
.396557		ab		plb		                    PLB
.396558		6b		rtl		                    RTL
.396559						FDC_GETBLOCK
.396559		8b		phb		                    PHB
.39655a		0b		phd		                    PHD
.39655b		08		php		                    PHP
.39655c		48		pha		                PHA             ; begin setdbr macro
.39655d		08		php		                PHP
.39655e		e2 20		sep #$20	                SEP #$20        ; set A short
.396560		a9 00		lda #$00	                LDA #0
.396562		48		pha		                PHA
.396563		ab		plb		                PLB
.396564		28		plp		                PLP
.396565		68		pla		                PLA             ; end setdbr macro
.396566		48		pha		                PHA             ; begin setdp macro
.396567		08		php		                PHP
.396568		c2 20		rep #$20	                REP #$20        ; set A long
.39656a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39656d		5b		tcd		                TCD
.39656e		28		plp		                PLP
.39656f		68		pla		                PLA             ; end setdp macro
.396570		e2 20		sep #$20	                SEP #$20        ; set A short
.396572		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396574		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.396577		c2 30		rep #$30	                REP #$30        ; set A&X long
.396579		22 03 65 39	jsl $396503	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.39657d		e2 20		sep #$20	                SEP #$20        ; set A short
.39657f		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396581		f0 29		beq $3965ac	                    BEQ read_failure
.396583						try_read
.396583		c2 20		rep #$20	                REP #$20        ; set A long
.396585		22 a0 63 39	jsl $3963a0	                    JSL FDC_Read_Sector         ; Read the sector
.396589		90 14		bcc $39659f	                    BCC retry
.39658b		e2 20		sep #$20	                SEP #$20        ; set A short
.39658d		a5 06		lda $0306	                    LDA FDC_ST0
.39658f		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396591		d0 19		bne $3965ac	                    BNE read_failure
.396593						ret_success
.396593		e2 20		sep #$20	                SEP #$20        ; set A short
.396595		a9 00		lda #$00	                    LDA #0
.396597		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39659a		28		plp		                    PLP
.39659b		2b		pld		                    PLD
.39659c		ab		plb		                    PLB
.39659d		38		sec		                    SEC
.39659e		6b		rtl		                    RTL
.39659f						retry
.39659f		e2 20		sep #$20	                SEP #$20        ; set A short
.3965a1		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.3965a4		30 13		bmi $3965b9	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.3965a6		22 98 60 39	jsl $396098	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.3965aa		80 d7		bra $396583	                    BRA try_read                ; And try the read again
.3965ac						read_failure
.3965ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3965ae		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.3965b0		80 04		bra $3965b6	                    BRA ret_failure
.3965b2						seek_failure
.3965b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3965b4		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3965b6		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.3965b9		28		plp		pass_failure        PLP
.3965ba		2b		pld		                    PLD
.3965bb		ab		plb		                    PLB
.3965bc		18		clc		                    CLC
.3965bd		6b		rtl		                    RTL
.3965be						FDC_PUTBLOCK
.3965be		8b		phb		                    PHB
.3965bf		0b		phd		                    PHD
.3965c0		08		php		                    PHP
.3965c1		48		pha		                PHA             ; begin setdbr macro
.3965c2		08		php		                PHP
.3965c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3965c5		a9 00		lda #$00	                LDA #0
.3965c7		48		pha		                PHA
.3965c8		ab		plb		                PLB
.3965c9		28		plp		                PLP
.3965ca		68		pla		                PLA             ; end setdbr macro
.3965cb		48		pha		                PHA             ; begin setdp macro
.3965cc		08		php		                PHP
.3965cd		c2 20		rep #$20	                REP #$20        ; set A long
.3965cf		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3965d2		5b		tcd		                TCD
.3965d3		28		plp		                PLP
.3965d4		68		pla		                PLA             ; end setdp macro
.3965d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3965d7		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.3965d9		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.3965dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3965de		22 03 65 39	jsl $396503	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3965e2		22 35 64 39	jsl $396435	retry               JSL FDC_Write_Sector        ; Write the sector
.3965e6		b0 03		bcs $3965eb	                    BCS chk_st0
.3965e8		82 28 00	brl $396613	                    BRL attempt_retry
.3965eb						chk_st0
.3965eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3965ed		a5 06		lda $0306	                    LDA FDC_ST0
.3965ef		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3965f1		d0 0c		bne $3965ff	                    BNE write_failure
.3965f3						ret_success
.3965f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3965f5		a9 00		lda #$00	                    LDA #0
.3965f7		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3965fa		28		plp		                    PLP
.3965fb		2b		pld		                    PLD
.3965fc		ab		plb		                    PLB
.3965fd		38		sec		                    SEC
.3965fe		6b		rtl		                    RTL
.3965ff						write_failure
.3965ff		e2 20		sep #$20	                SEP #$20        ; set A short
.396601		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396603		89 02		bit #$02	                    BIT #FDC_ST1_NW
.396605		f0 04		beq $39660b	                    BEQ generic_err
.396607		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.396609		80 17		bra $396622	                    BRA ret_failure
.39660b		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.39660d		d0 e4		bne $3965f3	                    BNE ret_success
.39660f		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.396611		d0 e0		bne $3965f3	                    BNE ret_success
.396613						attempt_retry
.396613		e2 20		sep #$20	                SEP #$20        ; set A short
.396615		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.396618		d0 c8		bne $3965e2	                    BNE retry                           ; And retry unless we have none left
.39661a		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.39661c		80 04		bra $396622	                    BRA ret_failure
.39661e						seek_failure
.39661e		e2 20		sep #$20	                SEP #$20        ; set A short
.396620		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396622						ret_failure
.396622		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396625		28		plp		pass_failure        PLP
.396626		2b		pld		                    PLD
.396627		ab		plb		                    PLB
.396628		18		clc		                    CLC
.396629		6b		rtl		                    RTL
.39662a						FDC_MOUNT
.39662a		8b		phb		                    PHB
.39662b		0b		phd		                    PHD
.39662c		08		php		                    PHP
.39662d		48		pha		                PHA             ; begin setdbr macro
.39662e		08		php		                PHP
.39662f		e2 20		sep #$20	                SEP #$20        ; set A short
.396631		a9 00		lda #$00	                LDA #0
.396633		48		pha		                PHA
.396634		ab		plb		                PLB
.396635		28		plp		                PLP
.396636		68		pla		                PLA             ; end setdbr macro
.396637		48		pha		                PHA             ; begin setdp macro
.396638		08		php		                PHP
.396639		c2 20		rep #$20	                REP #$20        ; set A long
.39663b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39663e		5b		tcd		                TCD
.39663f		28		plp		                PLP
.396640		68		pla		                PLA             ; end setdp macro
.396641		22 98 60 39	jsl $396098	                    JSL FDC_INIT
.396645		e2 20		sep #$20	                SEP #$20        ; set A short
.396647		c2 10		rep #$10	                REP #$10        ; set X long
.396649		a9 00		lda #$00	                    LDA #0
.39664b		a2 00 00	ldx #$0000	                    LDX #0
.39664e		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.396652		e8		inx		                    INX
.396653		e0 00 02	cpx #$0200	                    CPX #512
.396656		d0 f6		bne $39664e	                    BNE zero_loop
.396658		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.39665a		85 00		sta $0300	                    STA FDC_DRIVE
.39665c		22 14 61 39	jsl $396114	                    JSL FDC_Motor_On                        ; Turn the motor on
.396660		c2 30		rep #$30	                REP #$30        ; set A&X long
.396662		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.396665		85 22		sta $0322	                    STA BIOS_LBA
.396667		85 24		sta $0324	                    STA BIOS_LBA+2
.396669		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.39666c		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.39666e		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396671		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396673		22 59 65 39	jsl $396559	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.396677		b0 03		bcs $39667c	                    BCS parse_boot                          ; If ok: start parsing the boot record
.396679		82 d3 00	brl $39674f	                    BRL pass_failure                        ; Pass the error up the chain
.39667c						parse_boot
.39667c		e2 20		sep #$20	                SEP #$20        ; set A short
.39667e		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396680		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396684		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396686		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.39668a		e2 20		sep #$20	                SEP #$20        ; set A short
.39668c		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396690		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396694		c2 20		rep #$20	                REP #$20        ; set A long
.396696		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.396699		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.39669d		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.3966a1		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.3966a5		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.3966a9		a9 00 00	lda #$0000	                    LDA #0
.3966ac		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.3966b0		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.3966b3		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.3966b7		18		clc		                    CLC
.3966b8		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3966bc		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.3966c0		a9 00 00	lda #$0000	                    LDA #0
.3966c3		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.3966c7		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.3966cb		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.3966cc		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.3966d0		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3966d4		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.3966d8		a9 00 00	lda #$0000	                    LDA #0
.3966db		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.3966df		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.3966e3		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.3966e7		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.3966e8		4a		lsr a		                    LSR A
.3966e9		4a		lsr a		                    LSR A
.3966ea		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.3966eb		18		clc		                    CLC
.3966ec		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.3966f0		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.3966f4		a9 00 00	lda #$0000	                    LDA #0
.3966f7		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.3966fb		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.3966ff		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396703		a9 00 00	lda #$0000	                    LDA #0
.396706		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.39670a		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.39670e		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.396712		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.396715		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.396719		e2 20		sep #$20	                SEP #$20        ; set A short
.39671b		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.39671f		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.396721		80 14		bra $396737	                    BRA no_volume_id                        ; No: there is no volume ID
.396723						is_extended
.396723		c2 20		rep #$20	                REP #$20        ; set A long
.396725		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.396729		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.39672d		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.396731		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.396735		80 0d		bra $396744	                    BRA ret_success
.396737						no_volume_id
.396737		c2 20		rep #$20	                REP #$20        ; set A long
.396739		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.39673c		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.396740		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.396744						ret_success
.396744		e2 20		sep #$20	                SEP #$20        ; set A short
.396746		a9 00		lda #$00	                    LDA #0
.396748		85 20		sta $0320	                    STA BIOS_STATUS
.39674a		28		plp		                    PLP
.39674b		2b		pld		                    PLD
.39674c		ab		plb		                    PLB
.39674d		38		sec		                    SEC
.39674e		6b		rtl		                    RTL
.39674f		28		plp		pass_failure        PLP
.396750		2b		pld		                    PLD
.396751		ab		plb		                    PLB
.396752		18		clc		                    CLC
.396753		6b		rtl		                    RTL
.396754						FDC_CMDBLOCK
.396754		8b		phb		                    PHB
.396755		0b		phd		                    PHD
.396756		08		php		                    PHP
.396757		48		pha		                PHA             ; begin setdbr macro
.396758		08		php		                PHP
.396759		e2 20		sep #$20	                SEP #$20        ; set A short
.39675b		a9 00		lda #$00	                LDA #0
.39675d		48		pha		                PHA
.39675e		ab		plb		                PLB
.39675f		28		plp		                PLP
.396760		68		pla		                PLA             ; end setdbr macro
.396761		48		pha		                PHA             ; begin setdp macro
.396762		08		php		                PHP
.396763		c2 20		rep #$20	                REP #$20        ; set A long
.396765		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396768		5b		tcd		                TCD
.396769		28		plp		                PLP
.39676a		68		pla		                PLA             ; end setdp macro
.39676b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39676d		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.39676f		f0 0f		beq $396780	                    BEQ motor_on
.396771		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396773		f0 11		beq $396786	                    BEQ motor_off
.396775		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.396777		f0 13		beq $39678c	                    BEQ recalibrate
.396779		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.39677b		28		plp		                    PLP
.39677c		2b		pld		                    PLD
.39677d		ab		plb		                    PLB
.39677e		38		sec		                    SEC
.39677f		6b		rtl		                    RTL
.396780		22 14 61 39	jsl $396114	motor_on            JSL FDC_Motor_On
.396784		80 f3		bra $396779	                    BRA ret_success
.396786		22 48 61 39	jsl $396148	motor_off           JSL FDC_Motor_Off
.39678a		80 ed		bra $396779	                    BRA ret_success
.39678c		22 73 61 39	jsl $396173	recalibrate         JSL FDC_Recalibrate_Command
.396790		b0 e7		bcs $396779	                    BCS ret_success
.396792		28		plp		pass_failure        PLP
.396793		2b		pld		                    PLD
.396794		ab		plb		                    PLB
.396795		18		clc		                    CLC
.396796		6b		rtl		                    RTL
.396797						FDC_CHK_MEDIA
.396797		0b		phd		                    PHD
.396798		08		php		                    PHP
.396799		48		pha		                PHA             ; begin setdp macro
.39679a		08		php		                PHP
.39679b		c2 20		rep #$20	                REP #$20        ; set A long
.39679d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3967a0		5b		tcd		                TCD
.3967a1		28		plp		                PLP
.3967a2		68		pla		                PLA             ; end setdp macro
.3967a3		22 14 61 39	jsl $396114	                    JSL FDC_Motor_On                ; Turn on the motor
.3967a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3967a9		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.3967ad		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.3967af		f0 42		beq $3967f3	                    BEQ ret_true                    ; If not: assume the disk is present
.3967b1		a9 00		lda #$00	                    LDA #0
.3967b3		85 00		sta $0300	                    STA FDC_DRIVE
.3967b5		a9 00		lda #$00	                    LDA #0
.3967b7		85 01		sta $0301	                    STA FDC_HEAD
.3967b9		a9 50		lda #$50	                    LDA #80
.3967bb		85 02		sta $0302	                    STA FDC_CYLINDER
.3967bd		22 53 63 39	jsl $396353	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.3967c1		90 34		bcc $3967f7	                    BCC ret_false                   ; If fail: return false
.3967c3		c2 10		rep #$10	                REP #$10        ; set X long
.3967c5		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3967c8		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3967cb		22 57 14 39	jsl $391457	                    JSL IDELAY
.3967cf		22 a8 61 39	jsl $3961a8	                    JSL FDC_Sense_Int_Status
.3967d3		a5 06		lda $0306	                    LDA FDC_ST0
.3967d5		29 d0		and #$d0	                    AND #%11010000
.3967d7		d0 1e		bne $3967f7	                    BNE ret_false
.3967d9		22 73 61 39	jsl $396173	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.3967dd		90 18		bcc $3967f7	                    BCC ret_false                   ; If fail: return false
.3967df		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3967e2		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3967e5		22 57 14 39	jsl $391457	                    JSL IDELAY
.3967e9		22 a8 61 39	jsl $3961a8	                    JSL FDC_Sense_Int_Status
.3967ed		a5 06		lda $0306	                    LDA FDC_ST0
.3967ef		29 d0		and #$d0	                    AND #%11010000
.3967f1		d0 04		bne $3967f7	                    BNE ret_false
.3967f3						ret_true
.3967f3		28		plp		                    PLP
.3967f4		2b		pld		                    PLD
.3967f5		38		sec		                    SEC
.3967f6		6b		rtl		                    RTL
.3967f7						ret_false
.3967f7		28		plp		                    PLP
.3967f8		2b		pld		                    PLD
.3967f9		18		clc		                    CLC
.3967fa		6b		rtl		                    RTL
.3967fb						FDC_WRITEVBR
.3967fb		8b		phb		                    PHB
.3967fc		0b		phd		                    PHD
.3967fd		08		php		                    PHP
.3967fe		48		pha		                PHA             ; begin setdbr macro
.3967ff		08		php		                PHP
.396800		e2 20		sep #$20	                SEP #$20        ; set A short
.396802		a9 00		lda #$00	                LDA #0
.396804		48		pha		                PHA
.396805		ab		plb		                PLB
.396806		28		plp		                PLP
.396807		68		pla		                PLA             ; end setdbr macro
.396808		48		pha		                PHA             ; begin setdp macro
.396809		08		php		                PHP
.39680a		c2 20		rep #$20	                REP #$20        ; set A long
.39680c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39680f		5b		tcd		                TCD
.396810		28		plp		                PLP
.396811		68		pla		                PLA             ; end setdp macro
.396812		22 2a 66 39	jsl $39662a	                    JSL FDC_MOUNT               ; Mount the floppy disk
.396816		c2 30		rep #$30	                REP #$30        ; set A&X long
.396818		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.39681b		a2 00 00	ldx #$0000	                    LDX #0
.39681e		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.396822		e8		inx		                    INX
.396823		e8		inx		                    INX
.396824		e0 00 02	cpx #$0200	                    CPX #512
.396827		d0 f5		bne $39681e	                    BNE clr_loop
.396829		e2 20		sep #$20	                SEP #$20        ; set A short
.39682b		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.39682e		bf e3 68 39	lda $3968e3,x	copy_loop           LDA FDC_VBR_BEGIN,X
.396832		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396836		e8		inx		                    INX
.396837		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.39683a		d0 f2		bne $39682e	                    BNE copy_loop
.39683c		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.39683f		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.396842		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.396844		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396848		f0 07		beq $396851	                    BEQ path_copy_done
.39684a		e8		inx		                    INX
.39684b		c8		iny		                    INY
.39684c		c0 80 00	cpy #$0080	                    CPY #128
.39684f		d0 f1		bne $396842	                    BNE path_copy_loop
.396851						path_copy_done
.396851		c2 20		rep #$20	                REP #$20        ; set A long
.396853		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.396856		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.39685a		c2 20		rep #$20	                REP #$20        ; set A long
.39685c		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.39685f		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396861		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396864		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.396866		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.396869		85 02		sta $0322	                    STA BIOS_LBA
.39686b		85 04		sta $0324	                    STA BIOS_LBA+2
.39686d		e2 20		sep #$20	                SEP #$20        ; set A short
.39686f		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396871		85 01		sta $0321	                    STA BIOS_DEV
.396873		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396877		b0 09		bcs $396882	                    BCS ret_success
.396879		22 48 61 39	jsl $396148	                    JSL FDC_Motor_Off
.39687d		28		plp		                    PLP                         ; Return the failure
.39687e		2b		pld		                    PLD
.39687f		ab		plb		                    PLB
.396880		18		clc		                    CLC
.396881		6b		rtl		                    RTL
.396882		22 48 61 39	jsl $396148	ret_success         JSL FDC_Motor_Off
.396886		e2 20		sep #$20	                SEP #$20        ; set A short
.396888		a9 00		lda #$00	                    LDA #0
.39688a		85 00		sta $0320	                    STA BIOS_STATUS
.39688c		28		plp		                    PLP
.39688d		2b		pld		                    PLD
.39688e		ab		plb		                    PLB
.39688f		38		sec		                    SEC
.396890		6b		rtl		                    RTL
.396891						FDC_TIME_HANDLE
.396891		08		php		                    PHP
.396892		e2 20		sep #$20	                SEP #$20        ; set A short
.396894		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.396898		d0 06		bne $3968a0	                    BNE dec_motor                   ; If not zero: decrement the timer
.39689a		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.39689e		f0 28		beq $3968c8	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.3968a0		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.3968a4		3a		dec a		                    DEC A
.3968a5		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3968a9		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.3968ab		d0 0b		bne $3968b8	                    BNE chk_motor_end               ; No: check to see if we're a the end
.3968ad		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.3968b1		3a		dec a		                    DEC A
.3968b2		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.3968b6		80 10		bra $3968c8	                    BRA sof_timeout                 ; And move on to the next timer
.3968b8		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.3968bc		d0 0a		bne $3968c8	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.3968be		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.3968c2		d0 04		bne $3968c8	                    BNE sof_timeout
.3968c4		22 48 61 39	jsl $396148	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.3968c8						sof_timeout
.3968c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3968ca		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.3968ce		f0 11		beq $3968e1	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.3968d0		3a		dec a		                    DEC A                           ; Count down one tick
.3968d1		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.3968d5		d0 0a		bne $3968e1	                    BNE sof_int_done                ; If not 0, we're done
.3968d7		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.3968db		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.3968dd		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.3968e1		28		plp		sof_int_done        PLP
.3968e2		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.3968e3						FDC_VBR_BEGIN
>3968e3		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>3968e6		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>3968ee		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>3968f0		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>3968f1		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>3968f3		02				num_fat             .byte 2                 ; Number of FATs
>3968f4		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>3968f6		40 0b				total_sectors       .word 2880              ; Total sectors
>3968f8		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>3968f9		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>3968fb		12 00				sec_per_track       .word 18                ; Sectors per track
>3968fd		02 00				num_head            .word 2                 ; Number of heads
>3968ff		00 00 00 00			ignore2             .dword 0
>396903		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396907		00 00				ignore3             .word 0
>396909		29				boot_signature      .byte $29
>39690a		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>39690e		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396916		20 20 20
>396919		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396921		80 40		bra $396963	                    BRA vbr_start
>396923						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396963						vbr_start
.396963		c2 20		rep #$20	                REP #$20        ; set A long
.396965		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396968		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.39696c		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.39696f		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396973		22 c7 57 39	jsl $3957c7	                    JSL IF_RUN              ; And try to execute the binary file
.396977		b0 0c		bcs $396985	                    BCS lock                ; If it returned success... lock up... I guess?
.396979						error
.396979		e2 20		sep #$20	                SEP #$20        ; set A short
.39697b		4b		phk		                    PHK                     ; Otherwise, print an error message
.39697c		ab		plb		                    PLB
.39697d		62 08 00	per $396988	                    PER message
.396980		fa		plx		                    PLX
.396981		22 1c 10 00	jsl $00101c	                    JSL PUTS
.396985		ea		nop		lock                NOP                     ; And lock up
.396986		80 fd		bra $396985	                    BRA lock
>396988		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396990		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>3969a0		65 20 62 69 6e 61 72 79 2e 0d 00
.3969ab						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.3969ab						IDE_TEST
.3969ab		08		php		                PHP
.3969ac		c2 20		rep #$20	                REP #$20        ; set A long
.3969ae		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.3969b1		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3969b5		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3969b8		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3969bc		22 df 6a 39	jsl $396adf	                JSL IDE_IDENTIFY
.3969c0		b0 03		bcs $3969c5	                BCS id_ok
.3969c2		82 ab 00	brl $396a70	                BRL done
.3969c5						id_ok
.3969c5		c2 10		rep #$10	                REP #$10        ; set X long
.3969c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3969c9		a0 28 00	ldy #$0028	                LDY #40
.3969cc		a2 36 00	ldx #$0036	                LDX #27*2
.3969cf		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.3969d3		22 18 10 00	jsl $001018	                JSL PUTC
.3969d7		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.3969db		22 18 10 00	jsl $001018	                JSL PUTC
.3969df		e8		inx		                INX
.3969e0		e8		inx		                INX
.3969e1		88		dey		                DEY
.3969e2		88		dey		                DEY
.3969e3		d0 ea		bne $3969cf	                BNE pr_model
.3969e5		c2 10		rep #$10	                REP #$10        ; set X long
.3969e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3969e9		a0 14 00	ldy #$0014	                LDY #20
.3969ec		a2 14 00	ldx #$0014	                LDX #10*2
.3969ef		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.3969f3		22 18 10 00	jsl $001018	                JSL PUTC
.3969f7		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.3969fb		22 18 10 00	jsl $001018	                JSL PUTC
.3969ff		e8		inx		                INX
.396a00		e8		inx		                INX
.396a01		88		dey		                DEY
.396a02		88		dey		                DEY
.396a03		d0 ea		bne $3969ef	                BNE pr_serial
.396a05		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396a09		c2 30		rep #$30	                REP #$30        ; set A&X long
.396a0b		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396a0e		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396a12		a9 00 00	lda #$0000	                LDA #0
.396a15		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396a19		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396a1c		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396a20		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396a23		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396a27		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.396a2a		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.396a2d		9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396a31		e8		inx		                INX
.396a32		e8		inx		                INX
.396a33		e0 00 02	cpx #$0200	                CPX #512
.396a36		d0 f5		bne $396a2d	                BNE init_loop
.396a38		22 fe 6b 39	jsl $396bfe	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.396a3c		b0 06		bcs $396a44	                BCS read_sect1
.396a3e		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396a42		80 2c		bra $396a70	                BRA done
.396a44		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396a47		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396a4b		a9 00 00	lda #$0000	                LDA #0
.396a4e		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396a52		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396a55		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396a59		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.396a5c		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396a60		22 6d 6b 39	jsl $396b6d	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396a64		b0 06		bcs $396a6c	                BCS all_ok
.396a66		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396a6a		80 04		bra $396a70	                BRA done
.396a6c						all_ok
.396a6c		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396a70		28		plp		done            PLP
.396a71		6b		rtl		                RTL
.396a72						IDE_INIT
.396a72		e2 20		sep #$20	                SEP #$20        ; set A short
.396a74		a9 00		lda #$00	              LDA #$00
.396a76		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.396a7a		20 9b 6a	jsr $396a9b	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.396a7d		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.396a7f		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396a83		a9 01		lda #$01	              LDA #$01
.396a85		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.396a89		a9 00		lda #$00	              LDA #$00
.396a8b		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396a8f		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396a93		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396a97		20 b9 6a	jsr $396ab9	              JSR IDE_DRV_READY_NOTBUSY
.396a9a		6b		rtl		              RTL
.396a9b						IDE_DRIVE_BSY
.396a9b		08		php		                PHP
.396a9c		e2 20		sep #$20	                SEP #$20        ; set A short
.396a9e		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396aa2		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396aa4		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396aa6		f0 f6		beq $396a9e	                BEQ loop
.396aa8		28		plp		                PLP
.396aa9		60		rts		                RTS
.396aaa						IDE_DRIVE_READY
.396aaa		08		php		                PHP
.396aab		e2 20		sep #$20	                SEP #$20        ; set A short
.396aad		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396ab1		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396ab3		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396ab5		d0 f6		bne $396aad	                BNE loop
.396ab7		28		plp		                PLP
.396ab8		60		rts		                RTS
.396ab9						IDE_DRV_READY_NOTBUSY
.396ab9		08		php		                PHP
.396aba		e2 20		sep #$20	                SEP #$20        ; set A short
.396abc		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.396ac0		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396ac2		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396ac4		d0 f6		bne $396abc	                BNE loop                            ; No: keep waiting
.396ac6		28		plp		ret_success     PLP                                 ; Return success
.396ac7		38		sec		                SEC
.396ac8		60		rts		                RTS
.396ac9		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.396acd		28		plp		                PLP                                 ; Return failure
.396ace		18		clc		                CLC
.396acf		60		rts		                RTS
.396ad0						IDE_NOT_DRQ
.396ad0		08		php		                PHP
.396ad1		e2 20		sep #$20	                SEP #$20        ; set A short
.396ad3		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396ad7		29 08		and #$08	                AND #IDE_STAT_DRQ
.396ad9		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396adb		d0 f6		bne $396ad3	                BNE loop                ; No: keep waiting
.396add		28		plp		                PLP
.396ade		60		rts		                RTS
.396adf						IDE_IDENTIFY
.396adf		5a		phy		                PHY
.396ae0		8b		phb		                PHB
.396ae1		0b		phd		                PHD
.396ae2		08		php		                PHP
.396ae3		48		pha		                PHA             ; begin setdbr macro
.396ae4		08		php		                PHP
.396ae5		e2 20		sep #$20	                SEP #$20        ; set A short
.396ae7		a9 00		lda #$00	                LDA #0
.396ae9		48		pha		                PHA
.396aea		ab		plb		                PLB
.396aeb		28		plp		                PLP
.396aec		68		pla		                PLA             ; end setdbr macro
.396aed		48		pha		                PHA             ; begin setdp macro
.396aee		08		php		                PHP
.396aef		c2 20		rep #$20	                REP #$20        ; set A long
.396af1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396af4		5b		tcd		                TCD
.396af5		28		plp		                PLP
.396af6		68		pla		                PLA             ; end setdp macro
.396af7		e2 20		sep #$20	                SEP #$20        ; set A short
.396af9		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396afc		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396afe		29 07		and #$07	                AND #$07
.396b00		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396b02		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396b06		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396b09		e2 20		sep #$20	                SEP #$20        ; set A short
.396b0b		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396b0d		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396b11		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396b15		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396b19		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396b1d		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396b1f		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396b23		f0 29		beq $396b4e	                BEQ no_media                    ; If 0: there is no drive
.396b25		20 9b 6a	jsr $396a9b	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.396b28		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396b2b		90 2d		bcc $396b5a	                BCC ret_failure                 ; If an error occurred, return it
.396b2d		c2 30		rep #$30	                REP #$30        ; set A&X long
.396b2f		a0 00 00	ldy #$0000	                LDY #0
.396b32		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396b36		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396b38		c8		iny		                INY                             ; Move to the next position
.396b39		c8		iny		                INY
.396b3a		c0 00 02	cpy #$0200	                CPY #512
.396b3d		d0 f3		bne $396b32	                BNE read_loop
.396b3f						ret_success
.396b3f		e2 20		sep #$20	                SEP #$20        ; set A short
.396b41		a9 00		lda #$00	                LDA #0
.396b43		85 00		sta $0320	                STA BIOS_STATUS
.396b45		8d 06 03	sta $0306	                STA @w FDC_ST0
.396b48		28		plp		                PLP                             ; Return success
.396b49		2b		pld		                PLD
.396b4a		ab		plb		                PLB
.396b4b		7a		ply		                PLY
.396b4c		38		sec		                SEC
.396b4d		6b		rtl		                RTL
.396b4e						no_media
.396b4e		e2 20		sep #$20	                SEP #$20        ; set A short
.396b50		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396b52		80 0a		bra $396b5e	                BRA pass_failure
.396b54						not_ata
.396b54		e2 20		sep #$20	                SEP #$20        ; set A short
.396b56		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.396b58		80 04		bra $396b5e	                BRA pass_failure
.396b5a						ret_failure
.396b5a		e2 20		sep #$20	                SEP #$20        ; set A short
.396b5c		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396b5e		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396b60		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396b64		8d 06 03	sta $0306	                STA @w FDC_ST0
.396b67		28		plp		                PLP
.396b68		2b		pld		                PLD
.396b69		ab		plb		                PLB
.396b6a		7a		ply		                PLY
.396b6b		18		clc		                CLC
.396b6c		6b		rtl		                RTL
.396b6d						IDE_GETBLOCK
.396b6d		5a		phy		                PHY
.396b6e		8b		phb		                PHB
.396b6f		0b		phd		                PHD
.396b70		08		php		                PHP
.396b71		48		pha		                PHA             ; begin setdbr macro
.396b72		08		php		                PHP
.396b73		e2 20		sep #$20	                SEP #$20        ; set A short
.396b75		a9 00		lda #$00	                LDA #0
.396b77		48		pha		                PHA
.396b78		ab		plb		                PLB
.396b79		28		plp		                PLP
.396b7a		68		pla		                PLA             ; end setdbr macro
.396b7b		48		pha		                PHA             ; begin setdp macro
.396b7c		08		php		                PHP
.396b7d		c2 20		rep #$20	                REP #$20        ; set A long
.396b7f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396b82		5b		tcd		                TCD
.396b83		28		plp		                PLP
.396b84		68		pla		                PLA             ; end setdp macro
.396b85		e2 20		sep #$20	                SEP #$20        ; set A short
.396b87		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396b8a		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396b8c		29 07		and #$07	                AND #$07
.396b8e		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396b90		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396b94		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396b97		e2 20		sep #$20	                SEP #$20        ; set A short
.396b99		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396b9b		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396b9f		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396ba1		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396ba5		a5 03		lda $0323	                LDA BIOS_LBA+1
.396ba7		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396bab		a5 04		lda $0324	                LDA BIOS_LBA+2
.396bad		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396bb1		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.396bb3		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396bb7		ea		nop		                NOP                             ; Wait about 500ns
.396bb8		ea		nop		                NOP
.396bb9		ea		nop		                NOP
.396bba		ea		nop		                NOP
.396bbb		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396bbe		90 2b		bcc $396beb	                BCC ret_failure                 ; If an error occurred, return it
.396bc0		e2 20		sep #$20	                SEP #$20        ; set A short
.396bc2		af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.396bc6		a0 00 00	ldy #$0000	                LDY #0
.396bc9		c2 20		rep #$20	                REP #$20        ; set A long
.396bcb		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396bcf		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396bd1		c8		iny		                INY                             ; Move to the next position
.396bd2		c8		iny		                INY
.396bd3		c0 00 02	cpy #$0200	                CPY #512
.396bd6		d0 f3		bne $396bcb	                BNE read_loop
.396bd8		ea		nop		                NOP                             ; Wait about 500ns
.396bd9		ea		nop		                NOP
.396bda		ea		nop		                NOP
.396bdb		ea		nop		                NOP
.396bdc						ret_success
.396bdc		e2 20		sep #$20	                SEP #$20        ; set A short
.396bde		a9 00		lda #$00	                LDA #0
.396be0		85 00		sta $0320	                STA BIOS_STATUS
.396be2		8d 06 03	sta $0306	                STA @w FDC_ST0
.396be5		28		plp		                PLP                             ; Return success
.396be6		2b		pld		                PLD
.396be7		ab		plb		                PLB
.396be8		7a		ply		                PLY
.396be9		38		sec		                SEC
.396bea		6b		rtl		                RTL
.396beb						ret_failure
.396beb		e2 20		sep #$20	                SEP #$20        ; set A short
.396bed		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396bf1		8d 06 03	sta $0306	                STA @w FDC_ST0
.396bf4		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396bf6		85 00		sta $0320	                STA BIOS_STATUS
.396bf8		28		plp		                PLP
.396bf9		2b		pld		                PLD
.396bfa		ab		plb		                PLB
.396bfb		7a		ply		                PLY
.396bfc		18		clc		                CLC
.396bfd		6b		rtl		                RTL
.396bfe						IDE_PUTBLOCK
.396bfe		5a		phy		                PHY
.396bff		8b		phb		                PHB
.396c00		0b		phd		                PHD
.396c01		08		php		                PHP
.396c02		48		pha		                PHA             ; begin setdbr macro
.396c03		08		php		                PHP
.396c04		e2 20		sep #$20	                SEP #$20        ; set A short
.396c06		a9 00		lda #$00	                LDA #0
.396c08		48		pha		                PHA
.396c09		ab		plb		                PLB
.396c0a		28		plp		                PLP
.396c0b		68		pla		                PLA             ; end setdbr macro
.396c0c		48		pha		                PHA             ; begin setdp macro
.396c0d		08		php		                PHP
.396c0e		c2 20		rep #$20	                REP #$20        ; set A long
.396c10		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396c13		5b		tcd		                TCD
.396c14		28		plp		                PLP
.396c15		68		pla		                PLA             ; end setdp macro
.396c16		e2 20		sep #$20	                SEP #$20        ; set A short
.396c18		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396c1b		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396c1d		29 07		and #$07	                AND #$07
.396c1f		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396c21		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396c25		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396c28		e2 20		sep #$20	                SEP #$20        ; set A short
.396c2a		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396c2c		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396c30		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396c32		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396c36		a5 03		lda $0323	                LDA BIOS_LBA+1
.396c38		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396c3c		a5 04		lda $0324	                LDA BIOS_LBA+2
.396c3e		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396c42		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396c44		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396c48		ea		nop		                NOP                             ; Wait about 500ns
.396c49		ea		nop		                NOP
.396c4a		ea		nop		                NOP
.396c4b		ea		nop		                NOP
.396c4c		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c4f		90 33		bcc $396c84	                BCC ret_failure                 ; If an error occurred, return it
.396c51		c2 30		rep #$30	                REP #$30        ; set A&X long
.396c53		a0 00 00	ldy #$0000	                LDY #0
.396c56		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.396c58		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.396c5c		c8		iny		                INY                             ; Move to the next position
.396c5d		c8		iny		                INY
.396c5e		c0 00 02	cpy #$0200	                CPY #512
.396c61		d0 f3		bne $396c56	                BNE read_loop
.396c63		ea		nop		                NOP                             ; Wait about 500ns
.396c64		ea		nop		                NOP
.396c65		ea		nop		                NOP
.396c66		ea		nop		                NOP
.396c67		20 b9 6a	jsr $396ab9	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396c6a		90 18		bcc $396c84	                BCC ret_failure                 ; If an error occurred, return it
.396c6c		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396c70		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396c73		d0 0f		bne $396c84	                BNE ret_failure                 ; If error: return failure
.396c75						ret_success
.396c75		e2 20		sep #$20	                SEP #$20        ; set A short
.396c77		a9 00		lda #$00	                LDA #0
.396c79		85 00		sta $0320	                STA BIOS_STATUS
.396c7b		8d 06 03	sta $0306	                STA @w FDC_ST0
.396c7e		28		plp		                PLP                             ; Return success
.396c7f		2b		pld		                PLD
.396c80		ab		plb		                PLB
.396c81		7a		ply		                PLY
.396c82		38		sec		                SEC
.396c83		6b		rtl		                RTL
.396c84						ret_failure
.396c84		e2 20		sep #$20	                SEP #$20        ; set A short
.396c86		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396c8a		8d 06 03	sta $0306	                STA @w FDC_ST0
.396c8d		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396c8f		85 00		sta $0320	                STA BIOS_STATUS
.396c91		28		plp		                PLP
.396c92		2b		pld		                PLD
.396c93		ab		plb		                PLB
.396c94		7a		ply		                PLY
.396c95		18		clc		                CLC
.396c96		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.396c97						SIMPLE_INIT_ETHERNET_CTRL
.396c97						WaitforittobeReady:
.396c97		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.396c9b		29 01 00	and #$0001	                AND #$0001
.396c9e		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.396ca1		d0 f4		bne $396c97	                BNE WaitforittobeReady
.396ca3		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.396ca7		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.396cab		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.396caf		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.396cb3		a9 00 00	lda #$0000	                LDA #$0000
.396cb6		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.396cba		a9 00 70	lda #$7000	                LDA #$7000
.396cbd		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.396cc1		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.396cc4		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396cc8		a9 0b 00	lda #$000b	                LDA #$000B
.396ccb		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396ccf		a9 00 00	lda #$0000	                LDA #$0000
.396cd2		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396cd6		20 0a 6d	jsr $396d0a	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396cd9		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.396cdc		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396ce0		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.396ce3		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396ce7		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.396cea		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396cee		20 0a 6d	jsr $396d0a	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396cf1		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.396cf4		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396cf8		a9 0c 00	lda #$000c	                LDA #$000C
.396cfb		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396cff		a9 04 00	lda #$0004	                LDA #$0004
.396d02		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396d06		20 0a 6d	jsr $396d0a	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396d09		6b		rtl		                RTL
.396d0a						MAC_ACCESS_WAIT_FOR_COMPLETION
.396d0a		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.396d0d		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.396d11						WaitForCompletion:
.396d11		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.396d15		29 00 80	and #$8000	                AND #$8000
.396d18		c9 00 80	cmp #$8000	                CMP #$8000
.396d1b		f0 f4		beq $396d11	                BEQ WaitForCompletion
.396d1d		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000064					EVID_COLS_VISIBLE     = $000064 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000066					EVID_COLS_PER_LINE    = $000066 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000068					EVID_LINES_VISIBLE    = $000068 ;2 Bytes The number of rows visible on the screen. Default=25
=$00006a					EVID_LINES_MAX        = $00006A ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006c					EVID_CURSORPOS        = $00006C ;3 Bytes The next character written to the screen will be written in this location.
=$000070					EVID_CURSORX          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURSORY          = $000072 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000074					EVID_CURCOLOR         = $000074 ;1 Byte Color of next character to be printed to the screen.
=$000075					EVID_COLORPOS         = $000075 ;3 Byte address of cursor's position in the color matrix
=$000076					EVID_TMPPTR1          = $000076 ; 4 byte temporary pointer
=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.396d1e						EVID_IPRINT
.396d1e		22 27 6d 39	jsl $396d27	                JSL EVID_IPUTS
.396d22		22 99 6e 39	jsl $396e99	                JSL EVID_IPRINTCR
.396d26		6b		rtl		                RTL
.396d27						EVID_IPUTS
.396d27		48		pha		                PHA
.396d28		08		php		                PHP
.396d29		e2 20		sep #$20	                SEP #$20        ; set A short
.396d2b		c2 10		rep #$10	                REP #$10        ; set X long
.396d2d		bd 00 00	lda $0000,x	iputs1          LDA $0,b,x      ; read from the string
.396d30		f0 08		beq $396d3a	                BEQ iputs_done
.396d32		22 3e 6d 39	jsl $396d3e	iputs2          JSL EVID_IPUTC
.396d36		e8		inx		iputs3          INX
.396d37		4c 2d 6d	jmp $396d2d	                JMP iputs1
.396d3a		e8		inx		iputs_done      INX
.396d3b		28		plp		                PLP
.396d3c		68		pla		                PLA
.396d3d		6b		rtl		                RTL
.396d3e						EVID_IPUTC
.396d3e		da		phx		                PHX
.396d3f		5a		phy		                PHY
.396d40		0b		phd		                PHD
.396d41		8b		phb		                PHB
.396d42		08		php		                PHP                 ; stash the flags (we'll be changing M)
.396d43		48		pha		                PHA             ; begin setdp macro
.396d44		08		php		                PHP
.396d45		c2 20		rep #$20	                REP #$20        ; set A long
.396d47		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396d4a		5b		tcd		                TCD
.396d4b		28		plp		                PLP
.396d4c		68		pla		                PLA             ; end setdp macro
.396d4d		48		pha		                PHA             ; begin setdbr macro
.396d4e		08		php		                PHP
.396d4f		e2 20		sep #$20	                SEP #$20        ; set A short
.396d51		a9 00		lda #$00	                LDA #0
.396d53		48		pha		                PHA
.396d54		ab		plb		                PLB
.396d55		28		plp		                PLP
.396d56		68		pla		                PLA             ; end setdbr macro
.396d57		e2 20		sep #$20	                SEP #$20        ; set A short
.396d59		c2 10		rep #$10	                REP #$10        ; set X long
.396d5b		c9 0a		cmp #$0a	                CMP #CHAR_LF        ; Linefeed moves cursor down one line
.396d5d		f0 69		beq $396dc8	                BEQ go_down
.396d5f		c9 20		cmp #$20	                CMP #$20
.396d61		90 19		bcc $396d7c	                BCC check_ctrl0     ; [$00..$1F]: check for arrows
.396d63		c9 7f		cmp #$7f	                CMP #$7F
.396d65		f0 45		beq $396dac	                BEQ do_del
.396d67		b0 02		bcs $396d6b	                BCS check_A0        ; [$20..$7E]: print it
.396d69		80 31		bra $396d9c	                BRA printc
.396d6b		c9 a0		cmp #$a0	check_A0        CMP #$A0
.396d6d		90 02		bcc $396d71	                BCC check_ctrl1
.396d6f		80 2b		bra $396d9c	                BRA printc          ; [$A0..$FF]: print it
.396d71		c9 91		cmp #$91	check_ctrl1     CMP #CHAR_DOWN      ; If the down arrow key was pressed
.396d73		f0 53		beq $396dc8	                BEQ go_down         ; ... move the cursor down one row
.396d75		c9 9d		cmp #$9d	                CMP #CHAR_LEFT      ; If the left arrow key was pressed
.396d77		f0 61		beq $396dda	                BEQ go_left         ; ... move the cursor left one column
.396d79		4c a6 6d	jmp $396da6	                JMP done
.396d7c		c9 09		cmp #$09	check_ctrl0     CMP #CHAR_TAB       ; If it's a TAB...
.396d7e		f0 69		beq $396de9	                BEQ do_TAB          ; ... move to the next TAB stop
.396d80		c9 08		cmp #$08	                CMP #CHAR_BS        ; If it's a backspace...
.396d82		f0 34		beq $396db8	                BEQ backspace       ; ... move the cursor back and replace with a space
.396d84		c9 0d		cmp #$0d	                CMP #CHAR_CR        ; If the carriage return was pressed
.396d86		f0 3a		beq $396dc2	                BEQ do_cr           ; ... move cursor down and to the first column
.396d88		c9 11		cmp #$11	                CMP #CHAR_UP        ; If the up arrow key was pressed
.396d8a		f0 42		beq $396dce	                BEQ go_up           ; ... move the cursor up one row
.396d8c		c9 1d		cmp #$1d	                CMP #CHAR_RIGHT     ; If the right arrow key was pressed
.396d8e		f0 44		beq $396dd4	                BEQ go_right        ; ... move the cursor right one column
.396d90		c9 0f		cmp #$0f	                CMP #CHAR_INS       ; If the insert key was pressed
.396d92		f0 1e		beq $396db2	                BEQ do_ins          ; ... insert a space
.396d94		c9 01		cmp #$01	                CMP #CHAR_CTRL_A    ; Check for CTRL-A (start of line)
.396d96		f0 48		beq $396de0	                BEQ go_sol          ; ... move the cursor to the start of the line
.396d98		c9 05		cmp #$05	                CMP #CHAR_CTRL_E    ; Check for CTRL-E (end of line)
.396d9a		f0 74		beq $396e10	                BEQ go_eol          ; ... move the cursor to the end of the line
.396d9c		87 6c		sta [$6c]	printc          STA [EVID_CURSORPOS]     ; Save the character on the screen
.396d9e		a5 74		lda $74		                LDA EVID_CURCOLOR        ; Set the color based on CURCOLOR
.396da0		87 75		sta [$75]	                STA [EVID_COLORPOS]
.396da2		22 d7 6e 39	jsl $396ed7	                JSL EVID_ICSRRIGHT       ; And advance the cursor
.396da6		28		plp		done            PLP
.396da7		ab		plb		                PLB
.396da8		2b		pld		                PLD
.396da9		7a		ply		                PLY
.396daa		fa		plx		                PLX
.396dab		6b		rtl		                RTL
.396dac		22 3d 6e 39	jsl $396e3d	do_del          JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.396db0		80 f4		bra $396da6	                BRA done
.396db2		22 61 6e 39	jsl $396e61	do_ins          JSL EVID_SCRSHIFTLR      ; Shift the current line right one space from the cursor
.396db6		80 ee		bra $396da6	                BRA done
.396db8		22 0a 6f 39	jsl $396f0a	backspace       JSL EVID_ICSRLEFT
.396dbc		22 3d 6e 39	jsl $396e3d	                JSL EVID_SCRSHIFTLL      ; Shift the current line left one space into the cursor
.396dc0		80 e4		bra $396da6	                BRA done
.396dc2		22 99 6e 39	jsl $396e99	do_cr           JSL EVID_IPRINTCR        ; Move the cursor to the beginning of the next line
.396dc6		80 de		bra $396da6	                BRA done
.396dc8		22 56 6f 39	jsl $396f56	go_down         JSL EVID_ICSRDOWN        ; Move the cursor down one row (might force a scroll)
.396dcc		80 d8		bra $396da6	                BRA done
.396dce		22 30 6f 39	jsl $396f30	go_up           JSL EVID_ICSRUP          ; Move the cursor up one line
.396dd2		80 d2		bra $396da6	                BRA done
.396dd4		22 d7 6e 39	jsl $396ed7	go_right        JSL EVID_ICSRRIGHT       ; Move the cursor right one column
.396dd8		80 cc		bra $396da6	                BRA done
.396dda		22 0a 6f 39	jsl $396f0a	go_left         JSL EVID_ICSRLEFT        ; Move the cursor left one column
.396dde		80 c6		bra $396da6	                BRA done
.396de0						go_sol
.396de0		c2 20		rep #$20	                REP #$20        ; set A long
.396de2		a2 00 00	ldx #$0000	                LDX #0
.396de5		a4 72		ldy $72		                LDY EVID_CURSORY
.396de7		80 21		bra $396e0a	                BRA do_locate
.396de9						do_TAB
.396de9		c2 20		rep #$20	                REP #$20        ; set A long
.396deb		a5 70		lda $70		                LDA EVID_CURSORX         ; Get the current column
.396ded		29 f8 ff	and #$fff8	                AND #$FFF8          ; See which group of 8 it's in
.396df0		18		clc		                CLC
.396df1		69 08 00	adc #$0008	                ADC #$0008          ; And move it to the next one
.396df4		aa		tax		                TAX
.396df5		a4 72		ldy $72		                LDY EVID_CURSORY
.396df7		e2 20		sep #$20	                SEP #$20        ; set A short
.396df9		e4 64		cpx $64		set_xy          CPX EVID_COLS_VISIBLE    ; Check if we're still on screen horizontally
.396dfb		90 04		bcc $396e01	                BCC check_row       ; Yes: check the row
.396dfd		a2 00 00	ldx #$0000	                LDX #0              ; No: move to the first column...
.396e00		c8		iny		                INY                 ; ... and the next row
.396e01		c4 68		cpy $68		check_row       CPY EVID_LINES_VISIBLE   ; Check if we're still on the screen vertically
.396e03		90 05		bcc $396e0a	                BCC do_locate       ; Yes: reposition the cursor
.396e05		22 c7 6f 39	jsl $396fc7	                JSL EVID_ISCROLLUP       ; No: scroll the screen
.396e09		88		dey		                DEY                 ; And set the row to the last one
.396e0a		22 7b 6f 39	jsl $396f7b	do_locate       JSL EVID_ILOCATE         ; Set the cursor position
.396e0e		80 96		bra $396da6	                BRA done
.396e10		a6 64		ldx $64		go_eol          LDX EVID_COLS_VISIBLE    ; Move the cursor to the right most column
.396e12		ca		dex		                DEX
.396e13		a4 72		ldy $72		                LDY EVID_CURSORY
.396e15		22 7b 6f 39	jsl $396f7b	                JSL EVID_ILOCATE
.396e19		e2 20		sep #$20	                SEP #$20        ; set A short
.396e1b		a7 6c		lda [$6c]	eol_loop        LDA [EVID_CURSORPOS]     ; Get the character under the cursor
.396e1d		c9 20		cmp #$20	                CMP #CHAR_SP        ; Is it blank?
.396e1f		d0 0b		bne $396e2c	                BNE eol_done        ; No: exit the loop
.396e21		22 0a 6f 39	jsl $396f0a	                JSL EVID_ICSRLEFT        ; Yes: move to the left
.396e25		a6 70		ldx $70		                LDX EVID_CURSORX         ; Are we at column 0?
.396e27		d0 f2		bne $396e1b	                BNE eol_loop        ; No: try again
.396e29		82 7a ff	brl $396da6	                BRL done            ; Yes: we're done
.396e2c		a6 70		ldx $70		eol_done        LDX EVID_CURSORX         ; Check the column
.396e2e		e8		inx		                INX
.396e2f		e4 64		cpx $64		                CPX EVID_COLS_VISIBLE    ; Is it the right most?
.396e31		d0 03		bne $396e36	                BNE eol_right
.396e33		82 70 ff	brl $396da6	                BRL done            ; Yes: we're done
.396e36		22 d7 6e 39	jsl $396ed7	eol_right       JSL EVID_ICSRRIGHT       ; No: move right one column
.396e3a		82 69 ff	brl $396da6	                BRL done
.396e3d						EVID_SCRSHIFTLL
.396e3d		da		phx		                PHX
.396e3e		5a		phy		                PHY
.396e3f		48		pha		                PHA
.396e40		0b		phd		                PHD
.396e41		08		php		                PHP
.396e42		48		pha		                PHA             ; begin setdp macro
.396e43		08		php		                PHP
.396e44		c2 20		rep #$20	                REP #$20        ; set A long
.396e46		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396e49		5b		tcd		                TCD
.396e4a		28		plp		                PLP
.396e4b		68		pla		                PLA             ; end setdp macro
.396e4c		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e4e		a5 6c		lda $6c		                LDA EVID_CURSORPOS       ; Get the current cursor position
.396e50		a8		tay		                TAY                 ; Set it as the destination
.396e51		aa		tax		                TAX
.396e52		e8		inx		                INX                 ; And set the next cell as the source
.396e53		18		clc		                CLC                 ; Calculate the length of the block to move
.396e54		a5 64		lda $64		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.396e56		e5 70		sbc $70		                SBC EVID_CURSORX
.396e58		54 ae ae	mvn $ae,$ae	                MVN $AE, $AE        ; And move the block
.396e5b		28		plp		                PLP
.396e5c		2b		pld		                PLD
.396e5d		68		pla		                PLA
.396e5e		7a		ply		                PLY
.396e5f		fa		plx		                PLX
.396e60		6b		rtl		                RTL
.396e61						EVID_SCRSHIFTLR
.396e61		da		phx		                PHX
.396e62		48		pha		                PHA
.396e63		0b		phd		                PHD
.396e64		08		php		                PHP
.396e65		48		pha		                PHA             ; begin setdp macro
.396e66		08		php		                PHP
.396e67		c2 20		rep #$20	                REP #$20        ; set A long
.396e69		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396e6c		5b		tcd		                TCD
.396e6d		28		plp		                PLP
.396e6e		68		pla		                PLA             ; end setdp macro
.396e6f		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e71		a5 70		lda $70		                LDA EVID_CURSORX         ; What column are we on
.396e73		1a		inc a		                INC A
.396e74		c5 64		cmp $64		                CMP EVID_COLS_VISIBLE    ; >= the # visible?
.396e76		b0 1b		bcs $396e93	                BGE done            ; Yes: just skip the whole thing
.396e78		38		sec		                SEC                 ; Calculate the length of the block to move
.396e79		a5 64		lda $64		                LDA EVID_COLS_VISIBLE
.396e7b		e5 70		sbc $70		                SBC EVID_CURSORX
.396e7d		1a		inc a		                INC A
.396e7e		18		clc		                CLC
.396e7f		65 6c		adc $6c		                ADC EVID_CURSORPOS       ; Add the current cursor position
.396e81		3a		dec a		                DEC A
.396e82		a8		tay		                TAY                 ; Make it the destination
.396e83		3a		dec a		                DEC A               ; Move to the previous column
.396e84		aa		tax		                TAX                 ; Make it the source
.396e85		38		sec		                SEC                 ; Calculate the length of the block to move
.396e86		a5 64		lda $64		                LDA EVID_COLS_VISIBLE    ; as columns visible - X
.396e88		e5 70		sbc $70		                SBC EVID_CURSORX
.396e8a		44 ae ae	mvp $ae,$ae	                MVP $AE, $AE        ; And move the block
.396e8d		e2 20		sep #$20	                SEP #$20        ; set A short
.396e8f		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.396e91		87 6c		sta [$6c]	                STA [EVID_CURSORPOS]
.396e93		28		plp		done            PLP
.396e94		2b		pld		                PLD
.396e95		68		pla		                PLA
.396e96		fa		plx		                PLX
.396e97		6b		rtl		                RTL
.396e98						EVID_IPUTB
.396e98		6b		rtl		                RTL
.396e99						EVID_IPRINTCR
.396e99		da		phx		                PHX
.396e9a		5a		phy		                PHY
.396e9b		8b		phb		                PHB
.396e9c		0b		phd		                PHD
.396e9d		08		php		                PHP
.396e9e		48		pha		                PHA             ; begin setdbr macro
.396e9f		08		php		                PHP
.396ea0		e2 20		sep #$20	                SEP #$20        ; set A short
.396ea2		a9 00		lda #$00	                LDA #0
.396ea4		48		pha		                PHA
.396ea5		ab		plb		                PLB
.396ea6		28		plp		                PLP
.396ea7		68		pla		                PLA             ; end setdbr macro
.396ea8		48		pha		                PHA             ; begin setdp macro
.396ea9		08		php		                PHP
.396eaa		c2 20		rep #$20	                REP #$20        ; set A long
.396eac		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396eaf		5b		tcd		                TCD
.396eb0		28		plp		                PLP
.396eb1		68		pla		                PLA             ; end setdp macro
.396eb2		e2 20		sep #$20	                SEP #$20        ; set A short
.396eb4		c2 10		rep #$10	                REP #$10        ; set X long
.396eb6		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.396eb9		a4 72		ldy $72		                LDY EVID_CURSORY
.396ebb		c8		iny		                INY
.396ebc		22 7b 6f 39	jsl $396f7b	                JSL EVID_ILOCATE
.396ec0		28		plp		done            PLP
.396ec1		2b		pld		                PLD
.396ec2		ab		plb		                PLB
.396ec3		7a		ply		                PLY
.396ec4		fa		plx		                PLX
.396ec5		6b		rtl		                RTL
.396ec6						EVID_ICSRHOME
.396ec6		da		phx		                PHX
.396ec7		5a		phy		                PHY
.396ec8		08		php		                PHP
.396ec9		a2 00 00	ldx #$0000	                LDX #0
.396ecc		a0 00 00	ldy #$0000	                LDY #0
.396ecf		22 7b 6f 39	jsl $396f7b	                JSL EVID_ILOCATE
.396ed3		28		plp		                PLP
.396ed4		7a		ply		                PLY
.396ed5		fa		plx		                PLX
.396ed6		6b		rtl		                RTL
.396ed7						EVID_ICSRRIGHT
.396ed7		da		phx		                PHX
.396ed8		5a		phy		                PHY
.396ed9		48		pha		                PHA
.396eda		0b		phd		                PHD
.396edb		08		php		                PHP
.396edc		c2 20		rep #$20	                REP #$20        ; set A long
.396ede		c2 10		rep #$10	                REP #$10        ; set X long
.396ee0		48		pha		                PHA             ; begin setdp macro
.396ee1		08		php		                PHP
.396ee2		c2 20		rep #$20	                REP #$20        ; set A long
.396ee4		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396ee7		5b		tcd		                TCD
.396ee8		28		plp		                PLP
.396ee9		68		pla		                PLA             ; end setdp macro
.396eea		a6 70		ldx $70		                LDX EVID_CURSORX           ; Get the new column
.396eec		e8		inx		                INX
.396eed		a4 72		ldy $72		                LDY EVID_CURSORY           ; Get the current row
.396eef		e4 64		cpx $64		                CPX EVID_COLS_VISIBLE      ; Are we off screen?
.396ef1		90 0d		bcc $396f00	                BCC icsrright_nowrap  ; No: just set the position
.396ef3		a2 00 00	ldx #$0000	                LDX #0                ; Yes: move to the first column
.396ef6		c8		iny		                INY                   ; And move to the next row
.396ef7		c4 68		cpy $68		                CPY EVID_LINES_VISIBLE     ; Are we still off screen?
.396ef9		90 05		bcc $396f00	                BCC icsrright_nowrap  ; No: just set the position
.396efb		88		dey		                DEY                   ; Yes: lock to the last row
.396efc		22 c7 6f 39	jsl $396fc7	                JSL EVID_ISCROLLUP         ; But scroll the screen up
.396f00						icsrright_nowrap
.396f00		22 7b 6f 39	jsl $396f7b	                JSL EVID_ILOCATE           ; Set the cursor position
.396f04		28		plp		                PLP
.396f05		2b		pld		                PLD
.396f06		68		pla		                PLA
.396f07		7a		ply		                PLY
.396f08		fa		plx		                PLX
.396f09		6b		rtl		                RTL
.396f0a						EVID_ICSRLEFT
.396f0a		da		phx		                PHX
.396f0b		5a		phy		                PHY
.396f0c		48		pha		                PHA
.396f0d		0b		phd		                PHD
.396f0e		08		php		                PHP
.396f0f		c2 30		rep #$30	                REP #$30        ; set A&X long
.396f11		48		pha		                PHA             ; begin setdp macro
.396f12		08		php		                PHP
.396f13		c2 20		rep #$20	                REP #$20        ; set A long
.396f15		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396f18		5b		tcd		                TCD
.396f19		28		plp		                PLP
.396f1a		68		pla		                PLA             ; end setdp macro
.396f1b		a5 70		lda $70		                LDA EVID_CURSORX
.396f1d		f0 0b		beq $396f2a	                BEQ icsrleft_done_already_zero ; Check that we are not already @ Zero
.396f1f		a6 70		ldx $70		                LDX EVID_CURSORX
.396f21		ca		dex		                DEX
.396f22		86 70		stx $70		                STX EVID_CURSORX
.396f24		a4 72		ldy $72		                LDY EVID_CURSORY
.396f26		22 7b 6f 39	jsl $396f7b	                JSL EVID_ILOCATE
.396f2a						icsrleft_done_already_zero
.396f2a		28		plp		                PLP
.396f2b		2b		pld		                PLD
.396f2c		68		pla		                PLA
.396f2d		7a		ply		                PLY
.396f2e		fa		plx		                PLX
.396f2f		6b		rtl		                RTL
.396f30						EVID_ICSRUP
.396f30		da		phx		                PHX
.396f31		5a		phy		                PHY
.396f32		48		pha		                PHA
.396f33		0b		phd		                PHD
.396f34		08		php		                PHP
.396f35		c2 30		rep #$30	                REP #$30        ; set A&X long
.396f37		48		pha		                PHA             ; begin setdp macro
.396f38		08		php		                PHP
.396f39		c2 20		rep #$20	                REP #$20        ; set A long
.396f3b		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396f3e		5b		tcd		                TCD
.396f3f		28		plp		                PLP
.396f40		68		pla		                PLA             ; end setdp macro
.396f41		a5 72		lda $72		                LDA EVID_CURSORY
.396f43		f0 0b		beq $396f50	                BEQ isrup_done_already_zero ; Check if we are not already @ Zero
.396f45		a4 72		ldy $72		                LDY EVID_CURSORY
.396f47		88		dey		                DEY
.396f48		84 72		sty $72		                STY EVID_CURSORY
.396f4a		a6 70		ldx $70		                LDX EVID_CURSORX
.396f4c		22 7b 6f 39	jsl $396f7b	                JSL EVID_ILOCATE
.396f50						isrup_done_already_zero
.396f50		28		plp		                PLP
.396f51		2b		pld		                PLD
.396f52		68		pla		                PLA
.396f53		7a		ply		                PLY
.396f54		fa		plx		                PLX
.396f55		6b		rtl		                RTL
.396f56						EVID_ICSRDOWN
.396f56		da		phx		                PHX
.396f57		5a		phy		                PHY
.396f58		0b		phd		                PHD
.396f59		c2 30		rep #$30	                REP #$30        ; set A&X long
.396f5b		48		pha		                PHA             ; begin setdp macro
.396f5c		08		php		                PHP
.396f5d		c2 20		rep #$20	                REP #$20        ; set A long
.396f5f		a9 00 00	lda #$0000	                LDA #$0         ; set DP to page 0
.396f62		5b		tcd		                TCD
.396f63		28		plp		                PLP
.396f64		68		pla		                PLA             ; end setdp macro
.396f65		a6 70		ldx $70		                LDX EVID_CURSORX                 ; Get the current column
.396f67		a4 72		ldy $72		                LDY EVID_CURSORY                 ; Get the new row
.396f69		c8		iny		                INY
.396f6a		c4 68		cpy $68		                CPY EVID_LINES_VISIBLE           ; Check to see if we're off screen
.396f6c		90 05		bcc $396f73	                BCC icsrdown_noscroll       ; No: go ahead and set the position
.396f6e		88		dey		                DEY                         ; Yes: go back to the last row
.396f6f		22 c7 6f 39	jsl $396fc7	                JSL EVID_ISCROLLUP               ; But scroll the screen up
.396f73						icsrdown_noscroll
.396f73		22 7b 6f 39	jsl $396f7b	                JSL EVID_ILOCATE                 ; And set the cursor position
.396f77		2b		pld		                PLD
.396f78		7a		ply		                PLY
.396f79		fa		plx		                PLX
.396f7a		6b		rtl		                RTL
.396f7b						EVID_ILOCATE
.396f7b		48		pha		                PHA
.396f7c		0b		phd		                PHD
.396f7d		08		php		                PHP
.396f7e		48		pha		                PHA             ; begin setdp macro
.396f7f		08		php		                PHP
.396f80		c2 20		rep #$20	                REP #$20        ; set A long
.396f82		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396f85		5b		tcd		                TCD
.396f86		28		plp		                PLP
.396f87		68		pla		                PLA             ; end setdp macro
.396f88		c2 30		rep #$30	                REP #$30        ; set A&X long
.396f8a						ilocate_scroll
.396f8a		c4 68		cpy $68		                CPY EVID_LINES_VISIBLE
.396f8c		90 07		bcc $396f95	                BCC ilocate_scrolldone
.396f8e		22 c7 6f 39	jsl $396fc7	                JSL EVID_ISCROLLUP
.396f92		88		dey		                DEY
.396f93		80 f5		bra $396f8a	                BRA ilocate_scroll
.396f95						ilocate_scrolldone
.396f95		86 70		stx $70		                STX EVID_CURSORX
.396f97		84 72		sty $72		                STY EVID_CURSORY
.396f99		a5 60		lda $60		                LDA EVID_SCREENBEGIN
.396f9b						ilocate_row
.396f9b		c0 00 00	cpy #$0000	                CPY #$0
.396f9e		f0 08		beq $396fa8	                BEQ ilocate_right
.396fa0		18		clc		ilocate_down    CLC
.396fa1		65 66		adc $66		                ADC EVID_COLS_PER_LINE
.396fa3		88		dey		                DEY
.396fa4		f0 02		beq $396fa8	                BEQ ilocate_right
.396fa6		80 f8		bra $396fa0	                BRA ilocate_down
.396fa8		18		clc		ilocate_right   CLC
.396fa9		65 70		adc $70		                ADC EVID_CURSORX             ; move the cursor right X columns
.396fab		85 6c		sta $6c		                STA EVID_CURSORPOS
.396fad		a4 72		ldy $72		                LDY EVID_CURSORY
.396faf		98		tya		                TYA
.396fb0		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L  ;Store in Vicky's registers
.396fb4		8a		txa		                TXA
.396fb5		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L  ;Store in Vicky's register
.396fb9		c2 20		rep #$20	                REP #$20        ; set A long
.396fbb		18		clc		                CLC
.396fbc		a5 6c		lda $6c		                LDA EVID_CURSORPOS
.396fbe		69 00 20	adc #$2000	                ADC #<>(EVID_COLOR_MEM - EVID_TEXT_MEM)
.396fc1		85 75		sta $75		                STA EVID_COLORPOS
.396fc3		28		plp		ilocate_done    PLP
.396fc4		2b		pld		                PLD
.396fc5		68		pla		                PLA
.396fc6		6b		rtl		                RTL
.396fc7						EVID_ISCROLLUP
.396fc7		48		pha		                PHA
.396fc8		da		phx		                PHX
.396fc9		5a		phy		                PHY
.396fca		8b		phb		                PHB
.396fcb		0b		phd		                PHD
.396fcc		08		php		                PHP
.396fcd		48		pha		                PHA             ; begin setdp macro
.396fce		08		php		                PHP
.396fcf		c2 20		rep #$20	                REP #$20        ; set A long
.396fd1		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.396fd4		5b		tcd		                TCD
.396fd5		28		plp		                PLP
.396fd6		68		pla		                PLA             ; end setdp macro
.396fd7		c2 30		rep #$30	                REP #$30        ; set A&X long
.396fd9		a5 66		lda $66		                LDA EVID_COLS_PER_LINE
.396fdb		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.396fdf		a5 68		lda $68		                LDA EVID_LINES_VISIBLE
.396fe1		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.396fe5		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.396fe9		85 76		sta $76		                STA EVID_TMPPTR1
.396feb		18		clc		                CLC
.396fec		a9 00 20	lda #$2000	                LDA #$2000
.396fef		a8		tay		                TAY
.396ff0		65 66		adc $66		                ADC EVID_COLS_PER_LINE
.396ff2		aa		tax		                TAX
.396ff3		a5 76		lda $76		                LDA EVID_TMPPTR1
.396ff5		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.396ff8		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ffa		18		clc		                CLC
.396ffb		a9 00 40	lda #$4000	                LDA #$4000
.396ffe		a8		tay		                TAY
.396fff		65 66		adc $66		                ADC EVID_COLS_PER_LINE
.397001		aa		tax		                TAX
.397002		a5 76		lda $76		                LDA EVID_TMPPTR1
.397004		54 ae ae	mvn $ae,$ae	                MVN $AE,$AE
.397007		a5 76		lda $76		                LDA EVID_TMPPTR1
.397009		48		pha		                PHA
.39700a		18		clc		                CLC
.39700b		69 00 20	adc #$2000	                ADC #<>EVID_TEXT_MEM
.39700e		85 76		sta $76		                STA EVID_TMPPTR1
.397010		a0 00 00	ldy #$0000	                LDY #0
.397013		a9 20 00	lda #$0020	                LDA #' '
.397016		97 76		sta [$76],y	clr_text        STA [EVID_TMPPTR1],Y
.397018		c8		iny		                INY
.397019		c4 64		cpy $64		                CPY EVID_COLS_VISIBLE
.39701b		d0 f9		bne $397016	                BNE clr_text
.39701d		68		pla		                PLA
.39701e		18		clc		                CLC
.39701f		69 00 40	adc #$4000	                ADC #<>EVID_COLOR_MEM
.397022		85 76		sta $76		                STA EVID_TMPPTR1
.397024		a0 00 00	ldy #$0000	                LDY #0
.397027		a5 74		lda $74		                LDA EVID_CURCOLOR
.397029		97 76		sta [$76],y	clr_color       STA [EVID_TMPPTR1],Y
.39702b		c8		iny		                INY
.39702c		c4 64		cpy $64		                CPY EVID_COLS_VISIBLE
.39702e		d0 f9		bne $397029	                BNE clr_color
.397030		28		plp		                PLP
.397031		2b		pld		                PLD
.397032		ab		plb		                PLB
.397033		7a		ply		                PLY
.397034		fa		plx		                PLX
.397035		68		pla		                PLA
.397036		6b		rtl		                RTL
.397037						EVID_IPRINTH
.397037		08		php		                PHP
.397038		48		pha		                PHA
.397039						iprinth1
.397039		e2 20		sep #$20	                SEP #$20        ; set A short
.39703b		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.39703e		4a		lsr a		                LSR
.39703f		4a		lsr a		                LSR
.397040		4a		lsr a		                LSR
.397041		4a		lsr a		                LSR
.397042		22 91 70 39	jsl $397091	                JSL EVID_iprint_digit
.397046		bd 00 00	lda $0000,x	                LDA #0,b,x
.397049		22 91 70 39	jsl $397091	                JSL EVID_iprint_digit
.39704d		ca		dex		                DEX
.39704e		88		dey		                DEY
.39704f		d0 e8		bne $397039	                BNE iprinth1
.397051		68		pla		                PLA
.397052		28		plp		                PLP
.397053		6b		rtl		                RTL
.397054						EVID_IPRINTAH
.397054		48		pha		                PHA
.397055		08		php		                PHP
.397056		8f 44 02 00	sta $000244	                STA @lCPUA              ; Save A where we can use it multiple times
.39705a		08		php		                PHP                     ; Get the processor status into A
.39705b		e2 20		sep #$20	                SEP #$20        ; set A short
.39705d		c2 10		rep #$10	                REP #$10        ; set X long
.39705f		68		pla		                PLA
.397060		29 20		and #$20	                AND #%00100000          ; Is M = 1?
.397062		c9 20		cmp #$20	                CMP #%00100000
.397064		f0 14		beq $39707a	                BEQ eight_bit
.397066		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [15..12]
.39706a		4a		lsr a		                LSR A
.39706b		4a		lsr a		                LSR A
.39706c		4a		lsr a		                LSR A
.39706d		4a		lsr a		                LSR A
.39706e		22 91 70 39	jsl $397091	                JSL EVID_iprint_digit   ; And print it
.397072		af 45 02 00	lda $000245	                LDA @lCPUA+1            ; Get nibble [11..8]
.397076		22 91 70 39	jsl $397091	                JSL EVID_iprint_digit   ; And print it
.39707a		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA              ; Get nibble [7..4]
.39707e		4a		lsr a		                LSR A
.39707f		4a		lsr a		                LSR A
.397080		4a		lsr a		                LSR A
.397081		4a		lsr a		                LSR A
.397082		22 91 70 39	jsl $397091	                JSL EVID_iprint_digit   ; And print it
.397086		af 44 02 00	lda $000244	                LDA @lCPUA              ; Get nibble [3..0]
.39708a		22 91 70 39	jsl $397091	                JSL EVID_iprint_digit   ; And print it
.39708e		28		plp		                PLP
.39708f		68		pla		                PLA
.397090		6b		rtl		                RTL
.397091						EVID_iprint_digit
.397091		da		phx		                PHX
.397092		c2 20		rep #$20	                REP #$20        ; set A long
.397094		29 0f 00	and #$000f	                AND #$0F
.397097		aa		tax		                TAX
.397098		bf f9 76 39	lda $3976f9,x	                LDA hex_digits,X
.39709c		22 3e 6d 39	jsl $396d3e	                JSL EVID_IPUTC       ; Print the digit
.3970a0		fa		plx		                PLX
.3970a1		6b		rtl		                RTL
.3970a2						INIT_EVID_VID_MODE
.3970a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3970a4		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable          ; 0 - 80x60, 1- 100x75
.3970a6		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.3970aa		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable           ; Enable the Border
.3970ac		8f 04 1e ae	sta $ae1e04	                STA EVID_BORDER_CTRL_REG
.3970b0		a9 08		lda #$08	                LDA #8                           ; Set the border to the standard 8 pixels
.3970b2		8f 08 1e ae	sta $ae1e08	                STA EVID_BORDER_X_SIZE          ; Let's use maximum space
.3970b6		8f 09 1e ae	sta $ae1e09	                STA EVID_BORDER_Y_SIZE
.3970ba		a9 20		lda #$20	                LDA #$20
.3970bc		8f 07 1e ae	sta $ae1e07	                STA EVID_BORDER_COLOR_R        ; R
.3970c0		a9 00		lda #$00	                LDA #$00
.3970c2		8f 06 1e ae	sta $ae1e06	                STA EVID_BORDER_COLOR_G        ; G
.3970c6		a9 20		lda #$20	                LDA #$20
.3970c8		8f 05 1e ae	sta $ae1e05	                STA EVID_BORDER_COLOR_B        ; B
.3970cc		22 9e 71 39	jsl $39719e	                JSL INIT_EVID_EVID_LUT
.3970d0		22 87 71 39	jsl $397187	                JSL INIT_EVID_EVID_FONTSET
.3970d4		22 c2 71 39	jsl $3971c2	                JSL INIT_EVID_EVID_CURSOR
.3970d8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3970da		a2 62 00	ldx #$0062	                LDX #(100-2)
.3970dd		86 64		stx $64		                STX EVID_COLS_VISIBLE
.3970df		a0 49 00	ldy #$0049	                LDY #(75-2)
.3970e2		84 68		sty $68		                STY EVID_LINES_VISIBLE
.3970e4		a2 64 00	ldx #$0064	                LDX #100
.3970e7		86 66		stx $66		                STX EVID_COLS_PER_LINE
.3970e9		a0 4b 00	ldy #$004b	                LDY #75
.3970ec		84 6a		sty $6a		                STY EVID_LINES_MAX
.3970ee		a9 f0 00	lda #$00f0	                LDA #$F0                  ; Set the default text color to light gray on dark gray
.3970f1		85 74		sta $74		                STA EVID_CURCOLOR
.3970f3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3970f5		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM      ; store the initial screen buffer location
.3970f8		85 60		sta $60		                STA EVID_SCREENBEGIN
.3970fa		85 6c		sta $6c		                STA EVID_CURSORPOS
.3970fc		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM   ; Set the initial COLOR cursor position
.3970ff		85 75		sta $75		                STA EVID_COLORPOS
.397101		e2 20		sep #$20	                SEP #$20        ; set A short
.397103		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.397105		85 0e		sta $0e		                STA SCREENBEGIN + 2
.397107		85 6e		sta $6e		                STA EVID_CURSORPOS+2
.397109		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM    ; Set the initial COLOR cursor position
.39710b		85 77		sta $77		                STA EVID_COLORPOS + 2
.39710d		22 e0 71 39	jsl $3971e0	                JSL INIT_EVID_EVID_CLRSCREEN
.397111		c2 10		rep #$10	                REP #$10        ; set X long
.397113		0b		phd		                PHD
.397114		48		pha		                PHA             ; begin setdbr macro
.397115		08		php		                PHP
.397116		e2 20		sep #$20	                SEP #$20        ; set A short
.397118		a9 39		lda #$39	                LDA #`EVID_DEV_RDY0
.39711a		48		pha		                PHA
.39711b		ab		plb		                PLB
.39711c		28		plp		                PLP
.39711d		68		pla		                PLA             ; end setdbr macro
.39711e		a2 3f 71	ldx #$713f	                LDX #<>EVID_DEV_RDY0
.397121		22 1e 6d 39	jsl $396d1e	                JSL EVID_IPRINT
.397125		a2 6f 71	ldx #$716f	                LDX #<>EVID_DEV_RDY1
.397128		22 1e 6d 39	jsl $396d1e	                JSL EVID_IPRINT
.39712c		2b		pld		                PLD
.39712d		a2 00 00	ldx #$0000	                LDX #$0000
.397130						LifeIsFullOfColors:
.397130		bf 65 71 39	lda $397165,x	                LDA @l EVID_DEV_RDY0_CLR, X
.397134		9f 00 40 ae	sta $ae4000,x	                STA @l EVID_COLOR_MEM, X
.397138		e8		inx		                INX
.397139		e0 0a 00	cpx #$000a	                CPX #10
.39713c		d0 f2		bne $397130	                BNE LifeIsFullOfColors
.39713e		6b		rtl		                RTL
>39713f		0b 0c 0b 0c 0b 0c 0b 0c		EVID_DEV_RDY0  .null $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "C256 Foenix EXP-C200-EVID", $0D
>397147		0b 0c 20 43 32 35 36 20 46 6f 65 6e 69 78 20 45
>397157		58 50 2d 43 32 30 30 2d 45 56 49 44 0d 00
>397165		1d 1d 8d 8d 4d 4d 2d 2d		EVID_DEV_RDY0_CLR .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D
>39716d		5d 5d
>39716f		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1  .null "Your Device is Ready..."
>397177		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
=100						TXTLINESIZE = 100
.397187						INIT_EVID_EVID_FONTSET
.397187		e2 20		sep #$20	                SEP #$20        ; set A short
.397189		c2 10		rep #$10	                REP #$10        ; set X long
.39718b		a2 00 00	ldx #$0000	                LDX #$0000
.39718e						initFontsetbranch0
.39718e		bf 00 00 3f	lda $3f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.397192		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X ; Vicky FONT RAM Bank
.397196		e8		inx		                INX
.397197		e0 00 08	cpx #$0800	                CPX #$0800
.39719a		d0 f2		bne $39718e	                BNE initFontsetbranch0
.39719c		ea		nop		                NOP
.39719d		6b		rtl		                RTL
.39719e						INIT_EVID_EVID_LUT
.39719e		e2 20		sep #$20	                SEP #$20        ; set A short
.3971a0		e2 10		sep #$10	                SEP #$10        ; set X short
.3971a2		a2 00		ldx #$00					        LDX	#$00
.3971a4		bf 28 74 39	lda $397428,x	lutinitloop0	LDA @lfg_color_lut,x		; get Local Data c64_character_Color_LUT_4_Txt
.3971a8		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	; Write in LUT Memory
.3971ac		e8		inx		                inx
.3971ad		e0 40		cpx #$40	                cpx #$40
.3971af		d0 f3		bne $3971a4	                bne lutinitloop0
.3971b1		a2 00		ldx #$00	                LDX	#$00
.3971b3		bf 68 74 39	lda $397468,x	lutinitloop1	LDA @lbg_color_lut,x		; get Local Data
.3971b7		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	; Write in LUT Memory
.3971bb		e8		inx		                INX
.3971bc		e0 40		cpx #$40	                CPX #$40
.3971be		d0 f3		bne $3971b3	                bne lutinitloop1
.3971c0		ea		nop		                NOP
.3971c1		6b		rtl		                RTL
.3971c2						INIT_EVID_EVID_CURSOR
.3971c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3971c4		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.3971c6		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.3971ca		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0)      ;Set Cursor Enable And Flash Rate @1Hz
.3971cc		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG ;
.3971d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3971d2		a9 00 00	lda #$0000	                LDA #$0000;
.3971d5		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L ;; // Set the X to Position 1
.3971d9		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L ; // Set the Y to Position 6 (Below)
.3971dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3971df		6b		rtl		                RTL
.3971e0						INIT_EVID_EVID_CLRSCREEN
.3971e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3971e2		c2 10		rep #$10	                REP #$10        ; set X long
.3971e4		a2 00 00	ldx #$0000	                LDX #$0000		; Only Use One Pointer
.3971e7		a9 20		lda #$20	                LDA #$20		; Fill the Entire Screen with Space
.3971e9		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA EVID_TEXT_MEM, x	;
.3971ed		e8		inx		                inx
.3971ee		e0 00 20	cpx #$2000	                cpx #$2000
.3971f1		d0 f6		bne $3971e9	                bne iclearloop0
.3971f3		a2 00 00	ldx #$0000	                LDX	#$0000		; Only Use One Pointer
.3971f6		a9 f0		lda #$f0	                LDA #$F0		; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.3971f8		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA EVID_COLOR_MEM, x	;
.3971fc		e8		inx		                inx
.3971fd		e0 00 20	cpx #$2000	                cpx #$2000
.397200		d0 f6		bne $3971f8	                bne iclearloop1
.397202		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.397203						KERNEL_DATA
>397203		20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>39720b		0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>39721b		4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>39722b		58 20 0d
>39722e		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>397236		0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>397246		20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>397256		20 20 0d
>397259		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>397261		0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>397271		4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>397281		20 20 0d
>397284		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>39728c		0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>39729c		4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3972ac		20 20 0d
>3972af		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3972b7		0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3972c7		20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3972d7		20 20 0d
>3972da		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3972e2		45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>3972f2		30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>397302		0d
>397303		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com - Kernel Date: March 13th, 2021",$0D
>39730b		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 20 4b 65 72
>39731b		6e 65 6c 20 44 61 74 65 3a 20 4d 61 72 63 68 20
>39732b		31 33 74 68 2c 20 32 30 32 31 0d

;******  Processing file: src\version.asm

>397336		76 30 2e 33 2e 30 2d 61		.text "v0.3.0-alpha+1398 (2021-03-25)"
>39733e		6c 70 68 61 2b 31 33 39 38 20 28 32 30 32 31 2d
>39734e		30 33 2d 32 35 29

;******  Return to file: src\kernel.asm

>397354		0d 00				                .text $0D,$00
>397356		1d 1d 1d 1d 1d 1d 8d 8d		  greet_clr_line1 .text $1D, $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>39735e		4d 4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd
>39736e		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>39737e		fd fd
>397380		1d 1d 1d 1d 1d 8d 8d 4d		  greet_clr_line2 .text $1D, $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397388		4d 2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd
>397398		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3973a8		fd fd
>3973aa		1d 1d 1d 1d 8d 8d 4d 4d		  greet_clr_line3 .text $1D, $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3973b2		2d 2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd
>3973c2		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3973d2		fd fd
>3973d4		1d 1d 1d 8d 8d 4d 4d 2d		  greet_clr_line4 .text $1D, $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>3973dc		2d 5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd
>3973ec		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3973fc		fd fd
>3973fe		1d 1d 8d 8d 4d 4d 2d 2d		  greet_clr_line5 .text $1D, $1D, $8D, $8D, $4D, $4D, $2D, $2D, $5D, $5D, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD, $FD
>397406		5d 5d fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397416		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>397426		fd fd
>397428		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>39742c		00 00 80 ff			                .text $00, $00, $80, $FF
>397430		00 80 00 ff			                .text $00, $80, $00, $FF
>397434		80 00 00 ff			                .text $80, $00, $00, $FF
>397438		00 80 80 ff			                .text $00, $80, $80, $FF
>39743c		80 80 00 ff			                .text $80, $80, $00, $FF
>397440		80 00 80 ff			                .text $80, $00, $80, $FF
>397444		80 80 80 ff			                .text $80, $80, $80, $FF
>397448		00 45 ff ff			                .text $00, $45, $FF, $FF
>39744c		13 45 8b ff			                .text $13, $45, $8B, $FF
>397450		00 00 20 ff			                .text $00, $00, $20, $FF
>397454		00 20 00 ff			                .text $00, $20, $00, $FF
>397458		20 00 00 ff			                .text $20, $00, $00, $FF
>39745c		20 20 20 ff			                .text $20, $20, $20, $FF
>397460		40 40 40 ff			                .text $40, $40, $40, $FF
>397464		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>397468		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>39746c		00 00 80 ff			                .text $00, $00, $80, $FF
>397470		00 80 00 ff			                .text $00, $80, $00, $FF
>397474		80 00 00 ff			                .text $80, $00, $00, $FF
>397478		00 20 20 ff			                .text $00, $20, $20, $FF
>39747c		20 20 00 ff			                .text $20, $20, $00, $FF
>397480		20 00 20 ff			                .text $20, $00, $20, $FF
>397484		20 20 20 ff			                .text $20, $20, $20, $FF
>397488		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>39748c		13 45 8b ff			                .text $13, $45, $8B, $FF
>397490		00 00 20 ff			                .text $00, $00, $20, $FF
>397494		00 20 00 ff			                .text $00, $20, $00, $FF
>397498		40 00 00 ff			                .text $40, $00, $00, $FF
>39749c		10 10 10 ff			                .text $10, $10, $10, $FF
>3974a0		40 40 40 ff			                .text $40, $40, $40, $FF
>3974a4		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>3974a8		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>3974b0		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3974c0		00
>3974c1		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>3974c9		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3974d9		00
>3974da		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>3974e2		20 45 78 65 63 75 74 65 64 2e 0d 00
>3974ee		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>3974f6		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>397506		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>39750e		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>39751e		64 2e 2e 2e 0d 00
>397524		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>39752c		20 50 72 65 73 65 6e 74 0d 00
>397536		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>39753e		65 73 65 6e 74 0d 00
>397545		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>39754d		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>39755d		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>39756d		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>397575		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>397585		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>397592		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>39759a		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>3975a6		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>3975ae		54 55 52 45 20 46 4f 55 4e 44 2e 00
>3975ba		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3975c2		45 44 2e 00
>3975c6		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3975ce		47 20 42 4d 50 20 50 41 52 53 45 52 00
>3975db		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3975e3		50 72 65 73 65 6e 74 3a 00
>3975ec		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>3975f4		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>397604		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>397612		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>39761a		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>39762a		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>397637		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>39763f		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>39764f		72 64 2e 00
>397653		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>39765b		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>39766b		49 44 45 20 64 72 69 76 65 2e 00
>397676		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>39767e		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>39768e		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>39769c		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>3976a4		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>3976b3		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>3976bb		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>3976ca		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>3976d2		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>3976e2		2e 2e 00
>3976e5		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3976ed		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3976f5		52 4f 52 00
>3976f9		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>397701		38 39 41 42 43 44 45 46 00
>39770a						.align 256
>397800		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397808		37 38 39 30 2d 3d 08 09
>397810		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397818		6f 70 5b 5d 0d 00 61 73
>397820		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397828		27 60 00 5c 7a 78 63 76
>397830		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>397838		00 20 00 81 82 83 84 85
>397840		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>397848		11 00 00 9d 00 1d 00 00
>397850		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>397858		8c 00 00 00 00 00 00 00
>397860		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397868		00 00 00 00 00 00 00 00
>397870		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397878		00 00 00 00 00 00 00 00
>397880		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>397888		26 2a 28 29 5f 2b 08 09
>397890		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>397898		4f 50 7b 7d 0d 00 41 53
>3978a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>3978a8		22 7e 00 7c 5a 58 43 56
>3978b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3978b8		00 20 00 00 00 00 00 00
>3978c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3978c8		00 00 00 00 00 00 00 00
>3978d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3978d8		00 00 00 00 00 00 00 00
>3978e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3978e8		00 00 00 00 00 00 00 00
>3978f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3978f8		00 00 00 00 00 00 00 00
>397900		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397908		37 38 39 30 2d 3d 08 09
>397910		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>397918		0f 10 5b 5d 0d 00 01 13
>397920		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>397928		27 00 00 5c 1a 18 03 16
>397930		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397938		00 20 00 00 00 00 00 00
>397940		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397948		00 00 00 00 00 00 00 00
>397950		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397958		00 00 00 00 00 00 00 00
>397960		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397968		00 00 00 00 00 00 00 00
>397970		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397978		00 00 00 00 00 00 00 00
>397980		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397988		37 38 39 30 2d 3d 08 09
>397990		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397998		6f 70 5b 5d 0d 00 61 73
>3979a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3979a8		27 60 00 5c 7a 78 63 76
>3979b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3979b8		00 20 00 00 00 00 00 00
>3979c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3979c8		00 00 00 00 00 00 00 00
>3979d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3979d8		00 00 00 00 00 00 00 00
>3979e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3979e8		00 00 00 00 00 00 00 00
>3979f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3979f8		00 00 00 00 00 00 00 00
>397a00		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>397a08		37 38 39 30 2d 3d 08 09
>397a10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>397a18		6f 70 5b 5d 0d 00 61 73
>397a20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>397a28		27 60 00 5c 7a 78 63 76
>397a30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>397a38		00 20 00 00 00 00 00 00
>397a40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>397a48		00 00 00 00 00 00 00 00
>397a50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397a58		00 00 00 00 00 00 00 00
>397a60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397a68		00 00 00 00 00 00 00 00
>397a70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397a78		00 00 00 00 00 00 00 00
>397a80		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>397a88		00 00 00 00 00 00 00 00
>397a90		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>397a98		00 00 00 00 00 00 00 00
>397aa0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>397aa8		00 00 00 00 00 00 00 00
>397ab0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>397ab8		00 00 00 00 00 00 00 00
>397ac0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>397ac8		11 00 00 9d 00 1d 00 05
>397ad0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>397ad8		00 00 00 00 00 00 00 00
>397ae0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>397ae8		00 00 00 00 00 00 00 00
>397af0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>397af8		00 00 00 00 00 00 00 00
>397b00						.align 256
>397b00		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>397b08		34 37 3a 3d 3f 41 44 46
>397b10		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>397b18		57 58 5a 5b 5d 5e 60 61
>397b20		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>397b28		6d 6f 70 71 72 73 75 76
>397b30		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>397b38		80 81 82 83 84 85 86 87
>397b40		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>397b48		8f 90 91 92 93 93 94 95
>397b50		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>397b58		9d 9e 9e 9f a0 a1 a2 a2
>397b60		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>397b68		a9 aa ab ab ac ad ae ae
>397b70		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>397b78		b5 b5 b6 b7 b7 b8 b9 b9
>397b80		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>397b88		bf c0 c0 c1 c2 c2 c3 c4
>397b90		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>397b98		c9 ca ca cb cb cc cd cd
>397ba0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>397ba8		d2 d3 d4 d4 d5 d5 d6 d6
>397bb0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>397bb8		db dc dc dd de de df df
>397bc0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>397bc8		e4 e4 e5 e5 e6 e6 e7 e7
>397bd0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>397bd8		ec ec ed ed ee ee ef ef
>397be0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>397be8		f4 f4 f5 f5 f6 f6 f7 f7
>397bf0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>397bf8		fb fc fc fd fd fe fe ff
>397c00						.align 256
>397c00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>397c08		25 27 2a 2c 2e 30 32 34
>397c10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>397c18		44 46 47 49 4a 4c 4d 4f
>397c20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>397c28		5b 5c 5d 5e 60 61 62 63
>397c30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>397c38		6d 6e 70 71 72 73 74 75
>397c40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>397c48		7e 7f 80 81 82 83 84 84
>397c50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>397c58		8d 8e 8e 8f 90 91 92 93
>397c60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>397c68		9a 9b 9c 9d 9e 9f 9f a0
>397c70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>397c78		a7 a8 a9 aa aa ab ac ad
>397c80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>397c88		b3 b4 b5 b6 b6 b7 b8 b8
>397c90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>397c98		bf bf c0 c1 c2 c2 c3 c4
>397ca0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>397ca8		ca ca cb cc cc cd ce ce
>397cb0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>397cb8		d4 d5 d6 d6 d7 d7 d8 d9
>397cc0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>397cc8		de df e0 e0 e1 e1 e2 e3
>397cd0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>397cd8		e8 e9 e9 ea ea eb ec ec
>397ce0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>397ce8		f1 f2 f3 f3 f4 f4 f5 f5
>397cf0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>397cf8		fb fb fc fc fd fd fe ff
>397d00						.align 256
>397d00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>397d08		83 dd ce 39 cd c5 3b 15
>397d10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>397d18		87 12 31 65 89 27 88 42
>397d20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>397d28		94 ce 56 ec fe da 58 c9
>397d30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>397d38		d0 10 2c b2 4b ea 32 61
>397d40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>397d48		a1 e6 ca 2d b3 ce b0 79
>397d50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>397d58		5f e3 fb bd 15 2e be f5
>397d60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>397d68		8d 8f 2c 80 0a 5e 99 36
>397d70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>397d78		13 52 44 2f e3 ef 44 a2
>397d80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>397d88		be 23 02 58 0a 52 5e b4
>397d90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>397d98		d5 cf 3e df c4 9e da bb
>397da0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>397da8		77 7d b1 3b 4a 68 35 6e
>397db0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>397db8		b5 8f 44 63 55 6f e1 50
>397dc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>397dc8		57 74 b9 bd 05 14 50 eb
>397dd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>397dd8		44 bc ec db 22 58 fc be
>397de0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>397de8		24 aa 82 11 5c 9f 43 4d
>397df0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>397df8		3e 3d 66 7e 0a 1c 6b 74
>397e00						.align 16
>397e00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>397e08		01 01 01 00 00 00 00 00
>397e10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>397e18		ff ff ff 01 00 00 00 00
>397e20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>397e28		01 55 ff ff 01 00 00 00
>397e30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>397e38		ff ff ff ff 01 00 00 00
>397e40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>397e48		ff ff 01 ff ff 01 00 00
>397e50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>397e58		01 ff ff 01 ff 01 00 00
>397e60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>397e68		ff 01 ff ff ff 01 00 00
>397e70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>397e78		ff ff ff ff ff 01 01 00
>397e80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>397e88		ff ff ff ff 01 ff ff 01
>397e90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>397e98		ff ff ff ff ff ff ff 01
>397ea0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>397ea8		55 55 01 ff ff 55 01 00
>397eb0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>397eb8		01 01 55 ff 55 01 00 00
>397ec0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>397ec8		01 55 55 55 01 00 00 00
>397ed0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>397ed8		01 55 55 01 00 00 00 00
>397ee0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>397ee8		00 01 01 00 00 00 00 00
>397ef0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>397ef8		00 00 00 00 00 00 00 00
>3a0000		5c 24 85 3a 5c 33 6b 3a		        .binary "binaries/basic816_3A0000.bin"
>3a0008		5c 96 25 3a 5c 5b 01 3a 5c 58 00 3a 5c d6 00 3a
>3a0018		5c c1 02 3a 5c ff 00 3a 5c 1a 01 3a 5c 21 01 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c cf 00 c9 9d d0 08 e0 00 00 f0 ed ca
>3a0088		80 39 c9 1d d0 0e bf 00 4c 00 f0 e0 e0 4f 00 f0
>3a0098		db e8 80 27 c9 08 d0 1a e0 00 00 f0 cf da bf 01
>3a00a8		4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0 fa ca
>3a00b8		80 0e c9 20 90 b6 9f 00 4c 00 e8 20 18 00 80 ac
>3a00c8		a9 08 20 18 00 80 a5 a9 00 20 1c 00 28 60 22 4c
>3a00d8		10 00 60 20 14 00 48 20 18 00 68 60 08 e2 20 af
>3a00e8		00 00 af 89 3c f0 08 09 03 8f 00 00 af 80 06 09
>3a00f8		01 8f 00 00 af 28 60 08 e2 20 c9 00 f0 08 af 10
>3a0108		00 af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af
>3a0118		28 60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20
>3a0128		c2 10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f
>3a0138		00 c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00
>3a0148		5b 68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a
>3a0158		fa 68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a0168		28 c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2
>3a0178		20 29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c
>3a0188		00 00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08
>3a0198		a5 0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0
>3a01a8		00 00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0
>3a01b8		f4 ca bf 00 4f 00 c9 20 d0 09 a9 00 9f 00 4f 00
>3a01c8		ca 10 ef 28 2b 7a fa 60 e2 20 20 1b 02 a9 48 8f
>3a01d8		0f 00 00 a9 34 8f 13 00 00 a9 20 8f 08 00 af 8f
>3a01e8		09 00 af a2 00 00 a9 00 9f 18 f0 3a e8 e0 40 00
>3a01f8		d0 f6 a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00
>3a0208		a9 00 8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24
>3a0218		02 af 60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af
>3a0228		af 00 08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af
>3a0238		a9 03 8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af
>3a0248		ea ea ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48
>3a0258		a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f 00 29
>3a0268		01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10
>3a0278		00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28
>3a0288		60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28
>3a0298		60 08 22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00
>3a02a8		08 5b 68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90
>3a02b8		05 20 14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20
>3a02c8		48 a9 00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af
>3a02d8		b4 08 00 29 20 f0 07 af b5 08 00 20 28 00 af b4
>3a02e8		08 00 29 80 f0 07 af b5 08 00 20 53 02 af b4 08
>3a02f8		00 29 40 f0 14 af b5 08 00 20 6e 02 af b5 08 00
>3a0308		c9 0d d0 05 a9 0a 20 6e 02 28 2b 7a fa 60 08 e2
>3a0318		20 bd 00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2
>3a0328		20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 40 03 68 29
>3a0338		ff 00 20 40 03 68 28 60 08 c2 20 48 e2 20 48 4a
>3a0348		4a 4a 4a 20 57 03 68 20 57 03 c2 20 68 28 60 08
>3a0358		c2 30 da 29 0f 00 aa bf 00 d0 3a 20 18 00 fa 28
>3a0368		60 08 c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03
>3a0378		00 aa e2 20 a9 3a 48 ab bd 00 00 f0 06 20 53 02
>3a0388		e8 80 f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9
>3a0398		5b b0 04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28
>3a03a8		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03
>3a03b8		28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0
>3a03c8		13 c9 67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0
>3a03d8		03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30
>3a03e8		b0 12 c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41
>3a03f8		b0 09 28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2
>3a0408		08 e2 20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08
>3a0418		e2 20 c2 10 bd 00 00 f0 09 20 08 04 9d 00 00 e8
>3a0428		80 f2 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a0438		c2 20 48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06
>3a0448		0c 26 0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25
>3a0458		65 0e 85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a0468		08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f
>3a0478		18 01 00 af 1c 01 00 85 23 64 25 af 1e 01 00 85
>3a0488		29 64 2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b
>3a0498		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a
>3a04a8		01 00 a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64
>3a04b8		25 af 1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85
>3a04c8		2d 2b 28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28
>3a04d8		e2 02 60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85
>3a04e8		25 e2 20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85
>3a04f8		23 85 25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27
>3a0508		c9 00 f0 07 c9 01 d0 05 20 3a 59 28 60 08 c2 20
>3a0518		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a0528		20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 e2 20 a5
>3a0538		2d c9 00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23
>3a0548		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85
>3a0558		27 20 3a 59 c2 20 a5 23 85 29 a5 25 85 2b e2 20
>3a0568		a9 00 85 2d c2 20 68 85 23 68 85 25 28 60 08 c2
>3a0578		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a0588		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 e2 20
>3a0598		a5 27 c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b
>3a05a8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>3a05b8		7f 1c e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07
>3a05c8		c9 01 d0 0b 20 3a 59 c2 20 a5 25 d0 21 28 60 08
>3a05d8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a05e8		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2
>3a05f8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a0608		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 e2 20
>3a0618		a5 27 c9 00 f0 07 c9 01 d0 11 20 3a 59 a5 26 d0
>3a0628		29 a5 25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9
>3a0638		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a0648		ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00
>3a0658		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>3a0668		00 20 7f 1c e2 20 dc d4 08 08 e2 20 a5 27 c9 01
>3a0678		f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a0688		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a0698		e2 20 dc d4 08 20 34 59 28 60 08 e2 20 a5 2d c9
>3a06a8		01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a06b8		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f
>3a06c8		1c e2 20 dc d4 08 20 d3 06 28 60 c2 20 a5 25 48
>3a06d8		a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9
>3a06e8		00 85 27 20 34 59 c2 20 a5 23 85 29 a5 25 85 2b
>3a06f8		e2 20 a9 01 85 2d c2 20 68 85 23 68 85 25 60 08
>3a0708		e2 20 a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48
>3a0718		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a0728		29 ff 00 20 7f 1c e2 20 dc d4 08 a5 2d c9 00 f0
>3a0738		16 c9 01 d0 d7 20 34 59 80 0d a5 2d c9 01 f0 07
>3a0748		c9 00 d0 c8 20 d3 06 e2 20 a5 27 28 60 08 e2 20
>3a0758		a5 27 c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48
>3a0768		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a0778		29 ff 00 20 7f 1c e2 20 dc d4 08 20 07 07 a5 27
>3a0788		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a0798		64 23 64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20
>3a07a8		a7 00 20 ad 03 90 76 20 2c 04 38 e9 30 c2 20 29
>3a07b8		ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 20 3e
>3a07c8		1f 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a07d8		02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a07e8		d4 08 20 3e 1f a7 00 c9 48 f0 04 c9 68 d0 d4 20
>3a07f8		3e 1f e2 20 a7 00 20 be 03 90 22 20 df 03 c2 20
>3a0808		06 23 26 25 06 23 26 25 06 23 26 25 06 23 26 25
>3a0818		29 ff 00 18 65 23 85 23 20 3e 1f 80 d5 2b 28 60
>3a0828		08 c2 30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7
>3a0838		1a f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff
>3a0848		ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a0858		68 28 c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 5f
>3a0868		1f a7 00 20 ad 03 90 0c 20 8a 07 c2 20 a5 23 85
>3a0878		d7 20 5f 1f c2 20 a5 00 85 1a e2 20 a5 02 85 1c
>3a0888		20 9c 08 e2 20 20 0d 09 c9 00 f0 05 20 bb 0a 80
>3a0898		f4 2b 28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2
>3a08a8		00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53
>3a08b8		c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0
>3a08c8		10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0
>3a08d8		1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7
>3a08e8		00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 3e 1f 80
>3a08f8		b3 a7 00 c9 3a d0 03 20 3e 1f a9 03 85 1e a9 91
>3a0908		20 bb 0a 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a0918		28 e2 20 a9 7f 85 1e c2 10 20 70 0a a5 1e d0 03
>3a0928		4c b0 09 c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2
>3a0938		20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0
>3a0948		d6 c8 c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 d2
>3a0958		09 80 28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0
>3a0968		08 e2 20 a5 02 c5 1c f0 09 e2 20 a7 04 20 7d 4e
>3a0978		b0 09 e2 20 20 e2 09 c9 00 d0 11 c2 20 a5 00 85
>3a0988		04 e2 20 a5 02 85 06 20 3e 1f 80 a9 c9 81 d0 18
>3a0998		20 28 08 c9 00 f0 14 89 80 10 0b 20 5c 0b c9 30
>3a09a8		f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9
>3a09b8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a09c8		ff 00 20 7f 1c e2 20 dc d4 08 08 e2 20 20 3e 1f
>3a09d8		a7 00 f0 04 c9 22 d0 f5 28 60 da 5a 08 0b 08 c2
>3a09e8		20 48 a9 00 08 5b 68 28 c2 20 a5 04 d0 0a e2 20
>3a09f8		a5 04 d0 04 a9 00 80 0a e2 20 a7 04 20 7d 4e a9
>3a0a08		00 2a 85 28 c2 30 a9 b0 0b 85 08 e2 20 a9 3a 85
>3a0a18		0a a2 80 00 e2 20 a0 01 00 b7 08 f0 31 c5 1e d0
>3a0a28		32 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 3a 85 0e
>3a0a38		a5 28 f0 07 a7 0c 20 7d 4e b0 18 e2 10 a0 00 b7
>3a0a48		00 20 08 04 d7 0c d0 0b c8 c4 1e 90 f2 8a 2b 28
>3a0a58		7a fa 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5
>3a0a68		0a 69 00 85 0a e8 80 ac 08 0b 8b 08 c2 20 48 a9
>3a0a78		00 08 5b 68 28 c2 30 a9 b0 0b 85 08 a9 3a 00 85
>3a0a88		0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e b0 06
>3a0a98		c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08
>3a0aa8		a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1e ab
>3a0ab8		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0ac8		20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69
>3a0ad8		00 00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87 08 f0
>3a0ae8		13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00
>3a0af8		85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a
>3a0b08		18 69 b0 0b aa 28 60 08 8b 0b 08 c2 20 48 a9 00
>3a0b18		08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20
>3a0b28		c2 10 20 ff 0a bd 00 00 c2 20 29 0f 00 2b ab 28
>3a0b38		60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a0b48		20 48 a9 3a 48 ab 68 28 c2 30 20 ff 0a bd 04 00
>3a0b58		2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>3a0b68		28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20
>3a0b78		ff 0a bd 00 00 c2 20 29 f0 00 2b ab 28 60 08 8b
>3a0b88		0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a0b98		3a 48 ab 68 28 e2 20 c2 10 20 ff 0a bd 06 00 c2
>3a0ba8		20 29 ff 00 2b ab 28 60 03 01 10 d0 fd 25 02 00
>3a0bb8		03 01 12 d0 3d 26 02 00 02 01 14 d0 74 26 02 00
>3a0bc8		02 01 16 d0 ab 26 02 00 02 03 18 d0 b5 26 02 00
>3a0bd8		00 01 1c d0 00 00 02 00 04 02 1e d0 4c 28 02 00
>3a0be8		04 02 21 d0 0c 28 02 00 04 02 24 d0 cc 27 02 00
>3a0bf8		04 01 27 d0 0c 27 02 00 04 01 29 d0 8c 27 02 00
>3a0c08		04 01 2b d0 4c 27 02 00 05 03 2d d0 f6 26 01 00
>3a0c18		06 03 31 d0 c8 26 02 00 07 02 35 d0 df 26 02 00
>3a0c28		ff 01 38 d0 00 00 00 00 40 01 3a d0 00 00 00 00
>3a0c38		20 03 3c d0 e6 3e 00 00 20 05 40 d0 eb 42 00 00
>3a0c48		20 03 46 d0 36 42 00 00 20 04 4a d0 d6 41 00 00
>3a0c58		20 03 4f d0 cd 41 00 00 20 02 53 d0 65 41 00 00
>3a0c68		50 04 56 d0 00 00 00 00 50 04 5b d0 00 00 00 00
>3a0c78		20 05 60 d0 a8 40 00 00 20 06 66 d0 21 41 00 00
>3a0c88		20 03 6d d0 fd 3e 00 00 50 02 71 d0 00 00 00 00
>3a0c98		50 04 74 d0 00 00 00 00 20 04 79 d0 f1 3f 00 00
>3a0ca8		20 02 7e d0 f7 3e 00 00 20 04 81 d0 fa 3e 00 00
>3a0cb8		50 05 86 d0 00 00 00 00 50 05 8c d0 00 00 00 00
>3a0cc8		20 04 92 d0 f4 3e 00 00 20 03 97 d0 2c 42 00 00
>3a0cd8		20 04 9b d0 c7 3e 00 00 20 04 a0 d0 57 3e 00 00
>3a0ce8		20 05 a5 d0 ed 3d 00 00 20 05 ab d0 7a 3d 00 00
>3a0cf8		20 03 b1 d0 76 3d 00 00 20 04 b5 d0 57 3c 00 00
>3a0d08		20 04 ba d0 69 3d 00 00 20 07 bf d0 6d 3d 00 00
>3a0d18		20 03 c7 d0 aa 3b 00 00 20 04 cb d0 13 3b 00 00
>3a0d28		00 01 d0 d0 8c 28 01 00 30 03 d2 d0 e1 48 00 00
>3a0d38		30 04 d6 d0 31 49 00 00 30 05 db d0 c2 49 00 00
>3a0d48		30 05 e1 d0 74 49 00 00 30 04 e7 d0 01 4a 00 00
>3a0d58		30 03 ec d0 56 4a 00 00 30 03 f0 d0 9b 4a 00 00
>3a0d68		30 03 f4 d0 24 4b 00 00 30 03 f8 d0 ad 4b 00 00
>3a0d78		30 03 fc d0 0f 4c 00 00 30 04 00 d1 53 48 00 00
>3a0d88		30 03 05 d1 f2 47 00 00 30 04 09 d1 a4 47 00 00
>3a0d98		30 03 0e d1 4e 47 00 00 30 05 12 d1 85 46 00 00
>3a0da8		30 06 18 d1 a4 45 00 00 30 04 1f d1 ef 44 00 00
>3a0db8		10 03 24 d1 b9 4d 00 00 10 03 28 d1 84 4d 00 00
>3a0dc8		10 04 2c d1 0c 67 00 00 10 04 31 d1 d0 4d 00 00
>3a0dd8		10 03 36 d1 33 64 00 00 20 05 3a d1 de 65 00 00
>3a0de8		10 04 40 d1 b9 66 00 00 20 05 45 d1 c5 67 00 00
>3a0df8		20 03 4b d1 e4 68 00 00 10 04 4f d1 51 68 00 00
>3a0e08		20 06 54 d1 5a 69 00 00 20 04 5b d1 7e 6a 00 00
>3a0e18		10 07 60 d1 81 4d 00 00 20 03 68 d1 a2 3a 00 00
>3a0e28		20 05 6c d1 d7 39 00 00 20 09 72 d1 4b 2a 00 00
>3a0e38		20 09 7c d1 d8 29 00 00 20 0a 86 d1 08 2a 00 00
>3a0e48		20 07 91 d1 45 29 00 00 30 08 99 d1 ca 43 00 00
>3a0e58		20 07 a2 d1 da 28 00 00 30 08 aa d1 34 44 00 00
>3a0e68		20 08 b3 d1 90 2b 00 00 20 08 bc d1 c4 2a 00 00
>3a0e78		20 06 c5 d1 ca 2c 00 00 20 09 cc d1 d2 2d 00 00
>3a0e88		20 04 d6 d1 e2 2e 00 00 20 04 db d1 53 2f 00 00
>3a0e98		20 04 e0 d1 ec 2f 00 00 20 06 e5 d1 28 31 00 00
>3a0ea8		20 08 ec d1 c4 31 00 00 20 0a f5 d1 10 32 00 00
>3a0eb8		20 07 00 d2 45 33 00 00 20 07 08 d2 c3 33 00 00
>3a0ec8		20 08 10 d2 35 34 00 00 20 06 19 d2 72 34 00 00
>3a0ed8		20 07 20 d2 a2 37 00 00 50 06 28 d2 00 00 00 00
>3a0ee8		50 04 2f d2 00 00 00 00 20 06 34 d2 b7 39 00 00
>3a0ef8		30 03 3b d2 65 4c 00 00 30 03 3f d2 99 44 00 00
>3a0f08		30 03 43 d2 78 4c 00 00 30 03 47 d2 ad 4c 00 00
>3a0f18		30 03 4b d2 e2 4c 00 00 30 02 4f d2 4c 4d 00 00
>3a0f28		30 08 52 d2 17 4d 00 00 00 00 00 00 00 00 00 00
>3a0f38		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 ff
>3a0f48		ff 85 ba e2 20 a9 37 85 bc c2 20 64 b7 64 bd e2
>3a0f58		20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85 ea c2 10
>3a0f68		86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10 48
>3a0f78		20 10 10 b0 03 20 94 0f 20 9c 11 c2 20 68 85 10
>3a0f88		68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08 c2
>3a0f98		20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca 86 0c e8
>3a0fa8		c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc e9 00 85
>3a0fb8		c2 20 9c 11 e2 20 a5 ea a0 00 00 97 c3 a9 00 a0
>3a0fc8		01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00 00 97 c3
>3a0fd8		c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3 e2 20 c8
>3a0fe8		c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7 e2 20 a5
>3a0ff8		c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba e2 20 a5
>3a1008		c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20 48 a9 00
>3a1018		08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2 20 a5 bf
>3a1028		85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2 20 a9 00
>3a1038		00 85 cf e2 20 a9 00 85 d1 2b 28 18 60 c2 20 a0
>3a1048		05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85 ce c2 20
>3a1058		18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00 85 0e c2
>3a1068		20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00 85
>3a1078		0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e c5 ce d0
>3a1088		20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57 c2 20 a0
>3a1098		02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85 bf 4c 4d
>3a10a8		11 c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69 00
>3a10b8		85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2 20 a5 c6
>3a10c8		c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5 cb 85 d1
>3a10d8		c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8 b7 cf 85
>3a10e8		cb 4c 2a 10 c2 20 a0 02 00 b7 c9 97 cf e2 20 c8
>3a10f8		c8 b7 c9 97 cf 4c 4d 11 c2 20 a0 05 00 b7 c9 97
>3a1108		0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02 00 b7 c9
>3a1118		97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5 cf d0 14
>3a1128		e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2 20 a5 0e
>3a1138		85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf e2 20 c8
>3a1148		c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20 a5 cb 85
>3a1158		c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9 c2 20 a0
>3a1168		05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97 c3 c2 20
>3a1178		a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97 c3 e2 20
>3a1188		a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9 00 97 c3
>3a1198		2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00 85 c3 e2
>3a11a8		20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5 c5 f0 04
>3a11b8		c9 38 b0 12 c2 20 a5 c3 f0 0c e2 20 a0 01 00 b7
>3a11c8		c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5 f0 04 c9
>3a11d8		38 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01 00 b7 c3
>3a11e8		3a 97 c3 d0 03 20 f4 11 28 60 00 ea 08 c2 20 a5
>3a11f8		bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf c2 20 a5
>3a1208		c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8 e2 20 97
>3a1218		c3 4c db 12 e2 20 a5 bf c5 c5 90 28 c2 20 a5 bd
>3a1228		c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3 e2 20 c8
>3a1238		c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20 a5 c5 85
>3a1248		bf 4c db 12 c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a
>3a1258		e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b c2 20 a0
>3a1268		02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00 b7 08 97
>3a1278		c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3 a0 02 00
>3a1288		97 08 e2 20 a5 c5 c8 c8 97 08 4c db 12 c2 20 a0
>3a1298		02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20
>3a12a8		a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a c2
>3a12b8		20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02 00 97 08
>3a12c8		e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2 20 a0 02
>3a12d8		00 97 c3 20 e0 12 28 60 08 c2 20 a5 bd 85 c3 e2
>3a12e8		20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20 a5 c5 d0
>3a12f8		03 4c 83 13 c2 20 a0 02 00 b7 c3 85 0c e2 20 c8
>3a1308		c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85 10 e2 20
>3a1318		c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0 08 e2 20
>3a1328		a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3 85 0c e2
>3a1338		20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3 e2 20 a5
>3a1348		0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85 0c e2 20
>3a1358		c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c 97 c3 e2
>3a1368		20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7 0c 97 c3
>3a1378		e2 20 c8 c8 b7 0c 97 c3 4c fc 12 28 60 08 c2 20
>3a1388		64 16 64 18 28 60 08 c2 30 a5 16 d0 16 a5 18 d0
>3a1398		12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3 85 18 64
>3a13a8		19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5 bb 3a c5
>3a13b8		17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a13c8		20 a9 03 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>3a13d8		20 dc d4 08 28 60 c9 00 d0 05 c0 01 00 f0 05 09
>3a13e8		30 97 16 c8 60 08 c2 30 64 0c a5 25 10 1a 18 a5
>3a13f8		23 49 ff ff 69 01 00 85 23 a5 25 49 ff ff 69 00
>3a1408		00 85 25 a9 ff ff 85 0c 64 10 64 12 64 14 a2 1f
>3a1418		00 f8 06 23 26 25 a5 10 65 10 85 10 a5 12 65 12
>3a1428		85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2 20 20 8e
>3a1438		13 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20 97 16
>3a1448		c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20 de 13 b5
>3a1458		10 29 0f 20 de 13 ca 10 eb c0 01 00 d0 0c a9 20
>3a1468		87 16 a0 01 00 a9 30 97 16 c8 a9 00 97 16 28 60
>3a1478		00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8
>3a1488		c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1498		28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7 29 f0 25
>3a14a8		b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20 a9 01 00
>3a14b8		85 23 e2 20 64 25 80 15 c2 20 a9 ff ff 85 23 e2
>3a14c8		20 85 25 80 08 c2 20 64 23 e2 20 64 25 e2 20 a9
>3a14d8		00 85 27 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a14e8		5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 25 48
>3a14f8		ab c2 20 68 28 a6 23 20 7a 14 84 0c 08 c2 20 48
>3a1508		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20 7a 14 c2
>3a1518		20 98 38 65 0c aa e2 20 a9 02 20 60 0f c2 20 a5
>3a1528		b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08 c2 20 48
>3a1538		e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd 00 00 f0
>3a1548		06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5
>3a1558		2b 48 ab c2 20 68 28 a6 29 bd 00 00 97 08 f0 04
>3a1568		e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5 0a 85 25
>3a1578		a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b 08 c2 20
>3a1588		48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5 08 48 c2
>3a1598		30 08 c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6
>3a15a8		23 20 7a 14 98 aa e8 e2 20 a9 02 20 60 0f c2 20
>3a15b8		a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20 b7 23 97
>3a15c8		08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5 0a 85 25
>3a15d8		c2 20 68 85 08 68 85 0a ab 2b 28 7a fa 60 08 e2
>3a15e8		20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9 84 92 c2
>3a15f8		30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b c4 8f b0
>3a1608		12 a5 29 d0 0e 4c 64 16 20 8e 13 e2 20 a9 00 87
>3a1618		16 80 39 20 8e 13 c2 30 18 a5 23 65 29 85 23 a5
>3a1628		25 69 00 00 85 25 a0 00 00 e2 20 a7 23 97 16 f0
>3a1638		1b c2 20 18 a5 23 69 01 00 85 23 a5 25 69 00 00
>3a1648		85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2 20 a5 16
>3a1658		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 60 08 c2
>3a1668		30 20 8d 14 a5 23 c9 ff ff d0 05 20 df 04 80 03
>3a1678		20 f1 04 28 60 08 c2 30 20 8d 14 a5 23 c9 01 00
>3a1688		d0 05 20 df 04 80 03 20 f1 04 28 60 08 c2 30 20
>3a1698		8d 14 a5 23 c9 00 00 d0 05 20 df 04 80 03 20 f1
>3a16a8		04 28 60 08 c2 30 20 8d 14 a5 23 c9 00 00 f0 05
>3a16b8		20 df 04 80 03 20 f1 04 28 60 08 c2 30 20 8d 14
>3a16c8		a5 23 c9 ff ff f0 05 20 df 04 80 03 20 f1 04 28
>3a16d8		60 08 c2 30 20 8d 14 a5 23 c9 01 00 f0 05 20 df
>3a16e8		04 80 03 20 f1 04 28 60 48 5a 0b 08 08 c2 20 48
>3a16f8		a9 00 08 5b 68 28 c2 30 a9 00 00 85 00 85 1a a9
>3a1708		36 00 85 02 85 1c ad 8a 0f 30 20 a0 02 00 b7 1a
>3a1718		f0 0f c5 55 90 10 c5 59 f0 02 b0 05 20 52 17 80
>3a1728		e5 28 2b 7a 68 60 20 1b 20 80 db 08 c2 20 48 a9
>3a1738		00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29
>3a1748		ff 00 20 7f 1c e2 20 dc d4 08 08 c2 30 85 23 64
>3a1758		25 20 ed 13 a5 16 1a 85 23 a5 18 85 25 20 67 43
>3a1768		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 e2
>3a1778		20 a9 20 20 18 00 c2 20 20 91 17 90 fb e2 20 a9
>3a1788		0d 20 18 00 20 1b 20 28 60 08 0b 8b 08 c2 20 48
>3a1798		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a17a8		e2 20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29 c2
>3a17b8		20 29 7f 00 0a 0a 0a 18 69 b0 0b 85 08 a9 3a 00
>3a17c8		69 00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28 a0
>3a17d8		02 00 b7 08 aa 20 16 03 c2 20 20 3e 1f ab 2b 28
>3a17e8		18 60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1f a9
>3a17f8		ff 7f 85 21 a9 ff ff 85 23 85 25 85 29 85 2b e2
>3a1808		20 85 27 85 2d 28 60 08 0b 8b 08 c2 20 48 a9 00
>3a1818		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30
>3a1828		5a a4 1f bd 00 00 99 00 00 bd 02 00 99 02 00 e2
>3a1838		20 bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85 1f
>3a1848		7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1858		68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a 18
>3a1868		a5 1f 69 05 00 85 1f a8 b9 00 00 9d 00 00 b9 02
>3a1878		00 9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00 7a
>3a1888		ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>3a1898		28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 5a
>3a18a8		a4 21 99 00 00 88 84 21 7a ab 2b 28 60 08 0b 8b
>3a18b8		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a18c8		48 ab 68 28 e2 20 c2 10 5a a4 21 c8 84 21 b9 00
>3a18d8		00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9 01
>3a18e8		20 8c 18 28 60 5a 08 8b 08 e2 20 48 a9 00 48 ab
>3a18f8		68 28 e2 20 a4 21 b9 01 00 c9 01 d0 08 c2 20 e6
>3a1908		21 ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1918		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>3a1928		20 dc d4 08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21
>3a1948		c0 ff 7f f0 11 20 0f 0b 85 0c b9 01 00 20 0f 0b
>3a1958		c5 0c f0 02 90 08 c2 20 ab 2b 28 68 18 60 c2 20
>3a1968		ab 2b 28 68 38 60 4c 8a 07 08 e2 20 a9 00 8f 00
>3a1978		4d 00 a2 01 00 20 2d 1b 20 bf 05 c2 20 a5 23 9f
>3a1988		00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f 00 4d 00
>3a1998		e8 e8 20 5f 1f e2 20 a7 00 c9 90 f0 09 c9 2c d0
>3a19a8		0a 20 3e 1f 80 cf 20 3e 1f 28 60 08 c2 20 48 a9
>3a19b8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a19c8		ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00
>3a19d8		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>3a19e8		00 20 7f 1c e2 20 dc d4 08 08 20 50 51 90 23 e2
>3a19f8		20 a5 ea 29 80 d0 06 20 51 4f 4c 18 1a e2 20 a9
>3a1a08		8f 20 4b 20 20 e3 18 20 71 19 20 a9 63 20 ed 18
>3a1a18		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a1a28		8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4
>3a1a38		08 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2
>3a1a48		10 20 3e 1f a0 00 00 b7 00 f0 24 c9 22 f0 03 c8
>3a1a58		80 f5 84 0c e2 20 a9 02 a6 0c e8 20 8e 13 a0 00
>3a1a68		00 c4 0c f0 29 a7 00 97 16 c8 20 3e 1f 80 f2 08
>3a1a78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a1a88		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 a9 00
>3a1a98		97 16 c2 20 a5 16 85 23 a5 18 85 25 a9 02 00 85
>3a1aa8		27 20 3e 1f 2b 28 60 08 e2 20 a7 00 c2 20 29 ff
>3a1ab8		00 20 39 0b 85 2f 20 e3 18 08 e2 20 48 a9 00 48
>3a1ac8		ab 68 28 20 d3 1a 20 ed 18 28 60 20 3e 1f 6c 2f
>3a1ad8		08 48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1ae8		30 20 b5 18 89 80 00 f0 37 48 20 39 0b 85 2f 68
>3a1af8		20 86 0b c9 01 00 f0 08 c2 30 a2 29 08 20 4d 18
>3a1b08		c2 30 a2 23 08 20 4d 18 08 e2 20 48 a9 00 48 ab
>3a1b18		68 28 20 2a 1b a2 23 08 20 0f 18 ab 2b 28 68 60
>3a1b28		00 ea 6c 2f 08 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1b38		08 e2 20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7
>3a1b48		00 d0 03 4c f0 1b 30 33 c9 20 d0 03 4c ea 1b c9
>3a1b58		3a b0 04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c
>3a1b68		03 1c c9 5b b0 07 c9 41 90 03 4c 0f 1c c9 7b b0
>3a1b78		07 c9 61 90 03 4c 0f 1c 4c f0 1b c9 8f f0 40 c9
>3a1b88		90 f0 41 20 5c 0b c9 30 d0 0c 20 af 1a a2 23 08
>3a1b98		20 0f 18 4c 45 1b c9 00 d0 4e a7 00 a6 21 e0 ff
>3a1ba8		7f f0 05 20 2c 19 b0 12 20 8c 18 80 35 c2 20 20
>3a1bb8		72 57 a2 23 08 20 0f 18 80 83 20 d9 1a 80 dd 20
>3a1bc8		8c 18 80 1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9
>3a1bd8		01 00 c9 01 f0 3d c9 8f f0 05 20 d9 1a 80 ee 20
>3a1be8		b5 18 20 3e 1f 4c 45 1b a6 21 e0 ff 7f b0 24 bd
>3a1bf8		01 00 c9 01 f0 1d 20 d9 1a 80 ed 20 39 1a a2 23
>3a1c08		08 20 0f 18 4c 45 1b 20 f1 19 a2 23 08 20 0f 18
>3a1c18		4c 45 1b a2 23 08 20 4d 18 fa 28 60 08 0b 8b 08
>3a1c28		e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08
>3a1c38		5b 68 28 c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b
>3a1c48		08 c2 20 48 a9 00 08 5b 68 28 c2 30 92 33 c6 33
>3a1c58		c6 33 2b 28 60 08 c2 30 29 ff 00 20 46 1c 28 60
>3a1c68		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33
>3a1c78		e6 33 b2 33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00
>3a1c88		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20
>3a1c98		85 23 a9 00 00 85 25 e2 20 a9 00 85 27 85 ea a9
>3a1ca8		3a 85 e9 c2 20 a9 d9 1c 85 e7 20 b3 50 c2 20 a5
>3a1cb8		d7 85 23 a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9
>3a1cc8		3a 85 e9 c2 20 a9 dd 1c 85 e7 20 b3 50 28 2b ab
>3a1cd8		60 45 52 52 00 45 52 4c 00 e2 20 c2 10 20 89 02
>3a1ce8		af d3 08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9
>3a1cf8		3a 48 ab 68 28 be 33 1d 20 16 03 c2 20 a5 d7 f0
>3a1d08		27 a2 63 1d 20 16 03 08 e2 20 48 a9 00 48 ab 68
>3a1d18		28 c2 20 af d7 08 00 8f 23 08 00 a9 00 00 8f 25
>3a1d28		08 00 20 87 43 20 89 02 4c de 25 67 1d 6a 1d 70
>3a1d38		1d 7d 1d 8b 1d 99 1d ac 1d c2 1d d2 1d e1 1d ee
>3a1d48		1d ff 1d 0e 1e 1b 1e 29 1e 38 1e 49 1e 62 1e 76
>3a1d58		1e 8a 1e a0 1e b4 1e cf 1e e7 1e 20 61 74 00 4f
>3a1d68		4b 00 42 72 65 61 6b 00 53 79 6e 74 61 78 20 65
>3a1d78		72 72 6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f
>3a1d88		72 79 00 54 79 70 65 20 6d 69 73 6d 61 74 63 68
>3a1d98		00 56 61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f
>3a1da8		75 6e 64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20
>3a1db8		6e 6f 74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20
>3a1dc8		75 6e 64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20
>3a1dd8		6f 76 65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20
>3a1de8		72 61 6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72
>3a1df8		67 75 6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20
>3a1e08		66 6f 75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62
>3a1e18		65 72 00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77
>3a1e28		00 4d 61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00
>3a1e38		44 69 76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f
>3a1e48		00 55 6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20
>3a1e58		64 69 72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65
>3a1e68		20 74 6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e
>3a1e78		61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c
>3a1e88		65 00 55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65
>3a1e98		74 65 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>3a1ea8		74 20 66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c
>3a1eb8		64 20 6e 6f 74 20 75 70 64 61 74 65 20 64 69 72
>3a1ec8		65 63 74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74
>3a1ed8		20 63 6f 70 79 20 74 68 65 20 66 69 6c 65 00 41
>3a1ee8		72 67 75 6d 65 6e 74 20 6f 75 74 73 69 64 65 20
>3a1ef8		64 6f 6d 61 69 6e 00 08 0b 08 c2 20 48 a9 00 08
>3a1f08		5b 68 28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2
>3a1f18		20 48 a9 00 08 5b 68 28 08 c2 20 a9 e1 1c 8f d4
>3a1f28		08 00 e2 20 a9 3a 8f d6 08 00 28 20 2c 42 20 6d
>3a1f38		3d 64 31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a1f48		68 28 c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02
>3a1f58		69 00 85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08
>3a1f68		5b 68 28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0
>3a1f78		02 80 05 20 3e 1f 80 ed 2b 28 60 08 e2 20 a7 00
>3a1f88		f0 09 c9 3a f0 05 20 3e 1f 80 f3 28 60 08 e2 20
>3a1f98		64 36 a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f
>3a1fa8		f0 1a c9 9e f0 1a c9 a0 f0 16 20 3e 1f 80 e3 20
>3a1fb8		1b 20 c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea
>3a1fc8		c6 36 30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da
>3a1fd8		20 3e 1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a1fe8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>3a1ff8		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2008		a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>3a2018		dc d4 08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a
>3a2028		65 0c 85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a
>3a2038		85 d7 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85
>3a2048		02 28 60 08 e2 20 48 20 5f 1f 68 e2 20 c7 00 d0
>3a2058		08 20 3e 1f 20 5f 1f 28 60 08 c2 20 48 a9 00 08
>3a2068		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a2078		20 7f 1c e2 20 dc d4 08 08 e2 20 20 5f 1f e2 20
>3a2088		a7 00 f0 10 c9 3a f0 0c c5 37 f0 05 20 3e 1f 80
>3a2098		ef 28 38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00
>3a20a8		f0 0d c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28
>3a20b8		7a 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20
>3a20c8		ef 17 e2 20 a9 00 85 dc ad 8a 0f 30 4b a7 00 c9
>3a20d8		3a d0 03 20 3e 1f 20 5f 1f a7 00 d0 03 4c 6a 21
>3a20e8		20 94 03 b0 52 a7 00 10 10 20 5c 0b 85 0c c9 20
>3a20f8		d0 03 4c 58 21 a5 d2 f0 51 08 c2 20 48 a9 00 08
>3a2108		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a2118		20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a2128		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>3a2138		7f 1c e2 20 dc d4 08 20 36 42 4c 6a 21 08 e2 20
>3a2148		48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9
>3a2158		a7 00 20 39 0b c2 20 85 2f 20 ef 17 20 3e 1f 20
>3a2168		45 21 ab 2b 28 60 08 58 20 ff 1e 20 24 1c e2 20
>3a2178		9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c af 21
>3a2188		08 c2 20 a0 02 00 b7 1a 85 d7 20 85 13 e2 20 a5
>3a2198		dc c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2
>3a21a8		20 a5 1c 69 00 85 02 c2 20 20 ba 20 e2 20 a5 dc
>3a21b8		c9 03 f0 f3 c9 00 d0 31 e2 20 20 5f 1f a7 00 f0
>3a21c8		28 c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a21d8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>3a21e8		20 dc d4 08 20 3e 1f 80 be 28 60 08 58 e2 20 a9
>3a21f8		80 85 d2 9c 8a 0f 20 24 1c c2 30 64 31 a0 02 00
>3a2208		b7 1a f0 29 20 88 21 e2 20 a5 dc c9 01 f0 1e c9
>3a2218		02 f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77
>3a2228		1a 85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9
>3a2238		00 85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9
>3a2248		36 00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0
>3a2258		1e b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2
>3a2268		20 a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2
>3a2278		20 a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18
>3a2288		60 08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08
>3a2298		e2 20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00
>3a22a8		85 0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69
>3a22b8		01 00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60
>3a22c8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5
>3a22d8		0e c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2
>3a22e8		20 a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85
>3a22f8		08 e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00
>3a2308		00 c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00
>3a2318		85 0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db
>3a2328		69 00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9
>3a2338		e2 20 a5 db e9 00 85 db 20 89 22 20 2c 42 28 60
>3a2348		08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00
>3a2358		97 d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00
>3a2368		85 0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7
>3a2378		c2 20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c
>3a2388		97 d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69
>3a2398		00 85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00
>3a23a8		00 97 d9 c8 c0 05 00 d0 f8 20 2c 42 28 60 0b 08
>3a23b8		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85
>3a23c8		08 a9 36 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0
>3a23d8		25 b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69
>3a23e8		00 00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60
>3a23f8		a9 01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9
>3a2408		05 00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6
>3a2418		10 c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5
>3a2428		d9 69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9
>3a2438		65 10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04
>3a2448		00 85 08 a5 db 69 00 00 85 0a 20 c8 22 c2 20 a5
>3a2458		10 a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00
>3a2468		69 04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2
>3a2478		20 b7 1a 97 00 f0 03 c8 80 f7 20 2c 42 28 60 08
>3a2488		c2 30 85 d7 20 b6 23 c9 00 00 f0 2c c9 01 00 f0
>3a2498		22 c2 20 a5 08 48 a5 0a 48 20 05 23 68 85 0a 68
>3a24a8		85 08 a5 1a 85 00 a5 1c 85 02 20 5f 1f e2 20 a7
>3a24b8		00 f0 0a 20 04 24 80 05 a5 d7 20 48 23 28 60 0b
>3a24c8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2
>3a24d8		00 00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9
>3a24e8		02 00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c
>3a24f8		3a 8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b
>3a2508		54 00 3a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22
>3a2518		9d 00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00
>3a2528		e8 9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48
>3a2538		a9 00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0
>3a2548		0a c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00
>3a2558		85 8f a9 75 25 85 55 20 c7 24 80 e9 c2 20 a9 04
>3a2568		00 85 8f a9 79 25 85 55 20 c7 24 80 d8 44 49 52
>3a2578		00 42 52 55 4e 00 8b 08 20 e4 00 08 e2 20 48 a9
>3a2588		3a 48 ab 68 28 a2 5b d2 20 16 03 28 ab 60 08 e2
>3a2598		30 a9 01 20 1c 00 20 db 00 f0 06 c9 0d f0 02 80
>3a25a8		f5 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a25b8		30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 4e 08
>3a25c8		c2 20 a5 d7 d0 05 20 6e 21 80 07 20 87 24 28 2b
>3a25d8		38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 7e 25 20
>3a25e8		08 00 20 0c 00 a9 00 00 20 1c 00 20 2f 25 20 ab
>3a25f8		25 b0 ec 80 e7 08 e2 20 20 55 07 c9 00 f0 2c c9
>3a2608		01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a2618		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f
>3a2628		1c e2 20 dc d4 08 20 de 14 80 08 20 a2 51 80 03
>3a2638		20 11 54 28 60 08 e2 20 20 07 07 c9 00 f0 23 c9
>3a2648		01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2658		04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a2668		d4 08 20 b4 51 80 03 20 06 54 28 60 08 e2 20 20
>3a2678		07 07 c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00
>3a2688		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a2698		00 20 7f 1c e2 20 dc d4 08 20 c6 51 80 03 20 a7
>3a26a8		54 28 60 20 71 06 20 a2 06 20 5c 54 60 a5 23 8f
>3a26b8		1a 01 00 a5 29 8f 18 01 00 af 1e 01 00 85 23 60
>3a26c8		08 20 03 05 20 34 05 c2 20 a5 23 25 29 85 23 a5
>3a26d8		25 25 2b 85 25 28 60 08 20 03 05 20 34 05 c2 20
>3a26e8		a5 23 05 29 85 23 a5 25 05 2b 85 25 28 60 08 20
>3a26f8		03 05 c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff
>3a2708		85 25 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>3a2718		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2728		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a2738		e2 20 dc d4 08 20 66 16 80 08 20 c7 52 80 03 20
>3a2748		3c 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>3a2758		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2768		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a2778		e2 20 dc d4 08 20 7d 16 80 08 20 e8 52 80 03 20
>3a2788		51 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>3a2798		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a27a8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a27b8		e2 20 dc d4 08 20 94 16 80 08 20 15 53 80 03 20
>3a27c8		66 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>3a27d8		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a27e8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a27f8		e2 20 dc d4 08 20 ab 16 80 08 20 33 53 80 03 20
>3a2808		a5 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>3a2818		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2828		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a2838		e2 20 dc d4 08 20 c2 16 80 08 20 51 53 80 03 20
>3a2848		90 5a 28 60 08 e2 20 20 55 07 c9 00 f0 2c c9 01
>3a2858		f0 2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2868		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a2878		e2 20 dc d4 08 20 d9 16 80 08 20 7e 53 80 03 20
>3a2888		7b 5a 28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0
>3a2898		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a28a8		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>3a28b8		e2 20 a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff
>3a28c8		ff 85 23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25
>3a28d8		28 60 08 e2 20 20 2d 1b 20 15 06 20 60 04 a5 23
>3a28e8		0a 0a 0a 0a 05 29 48 a9 2c 20 4b 20 20 2d 1b 20
>3a28f8		15 06 20 60 04 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>3a2908		20 4b 20 20 2d 1b 20 15 06 20 60 04 a5 23 0a 0a
>3a2918		0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68
>3a2928		8f 00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e
>3a2938		08 af 29 f7 8f 0e 08 af 20 83 1f 28 60 08 e2 20
>3a2948		20 2d 1b 20 15 06 20 60 04 a5 23 0a 0a 0a 0a 05
>3a2958		29 48 a9 2c 20 4b 20 20 2d 1b 20 15 06 20 60 04
>3a2968		a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 4b 20 20 2d
>3a2978		1b 20 03 05 20 96 04 c2 20 a5 23 85 92 a5 29 85
>3a2988		23 20 60 04 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2
>3a2998		20 a5 92 85 23 20 60 04 e2 20 a5 23 0a 0a 0a 0a
>3a29a8		05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f
>3a29b8		08 af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08
>3a29c8		af af 0e 08 af 29 f7 8f 0e 08 af 20 83 1f 28 60
>3a29d8		08 e2 20 48 20 2d 1b 20 15 06 e2 20 a5 23 29 0f
>3a29e8		0a 0a 0a 0a 83 01 a9 2c 20 4b 20 20 2d 1b 20 15
>3a29f8		06 a5 23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60
>3a2a08		08 c2 20 f4 00 00 e2 20 20 2d 1b 20 15 06 a5 23
>3a2a18		83 01 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23 83
>3a2a28		02 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23 8f 0d
>3a2a38		00 af a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20
>3a2a48		68 28 60 08 c2 20 f4 00 00 e2 20 20 2d 1b 20 03
>3a2a58		05 a5 23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00
>3a2a68		af 8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00
>3a2a78		af 22 2c 11 00 a9 2c 85 37 20 80 20 90 39 20 3e
>3a2a88		1f 20 2d 1b 20 15 06 a5 23 83 01 a9 2c 20 4b 20
>3a2a98		20 2d 1b 20 15 06 a5 23 83 02 a9 2c 20 4b 20 20
>3a2aa8		2d 1b 20 15 06 a5 23 8f 05 00 af a3 02 8f 06 00
>3a2ab8		af a3 01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b
>3a2ac8		38 e9 05 00 1b e2 20 20 2d 1b 20 15 06 a5 23 c9
>3a2ad8		0a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2ae8		0a 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a2af8		d4 08 83 01 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5
>3a2b08		23 83 02 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23
>3a2b18		83 03 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23 83
>3a2b28		04 a9 2c 20 4b 20 20 2d 1b 20 15 06 a5 23 83 05
>3a2b38		a9 af 85 a0 a3 01 0a c2 20 29 ff 00 aa bf 7c 2b
>3a2b48		3a 85 9e e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65
>3a2b58		9e 85 9e e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3
>3a2b68		04 97 9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05
>3a2b78		00 1b 28 60 00 20 00 24 00 28 00 2c 00 30 00 34
>3a2b88		00 38 00 3c 40 1f 80 1f da 5a 08 20 2d 1b 20 03
>3a2b98		05 c2 20 a5 23 89 00 01 d0 17 af 00 00 af 89 00
>3a2ba8		01 f0 0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00
>3a2bb8		af c2 20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29
>3a2bc8		03 00 0a aa c2 20 bf 17 2c 3a 8f 10 f0 3a bf 1f
>3a2bd8		2c 3a 8f 12 f0 3a af 10 f0 3a 8f 08 01 00 af 12
>3a2be8		f0 3a 8f 0a 01 00 af 0c 01 00 8f 14 f0 3a e2 20
>3a2bf8		af 0e 01 00 8f 16 f0 3a 22 2c 11 00 c2 20 af 1a
>3a2c08		00 00 aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80
>3a2c18		02 20 03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50
>3a2c28		00 64 00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48
>3a2c38		00 5c 00 20 00 2a 00 34 00 43 00 16 00 34 00 da
>3a2c48		08 c2 30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 3a 85
>3a2c58		9e bf 02 f0 3a 85 a0 c9 f0 00 b0 08 c9 b0 00 90
>3a2c68		03 28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a2c78		a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>3a2c88		dc d4 08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf
>3a2c98		08 f0 3a 85 9e bf 0a f0 3a 85 a0 c9 40 00 b0 03
>3a2ca8		28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2cb8		09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a2cc8		d4 08 08 c2 30 3b 38 e9 07 00 1b 20 2d 1b 20 15
>3a2cd8		06 c2 20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c
>3a2ce8		20 4b 20 20 2d 1b 20 15 06 a5 23 83 03 a9 2c 20
>3a2cf8		4b 20 20 2d 1b 20 15 06 a3 01 0a 0a 0a aa a3 03
>3a2d08		d0 05 a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2
>3a2d18		20 a9 2c 00 85 37 20 80 20 b0 37 c2 20 08 c2 20
>3a2d28		a9 00 00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27
>3a2d38		28 80 27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a2d48		09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a2d58		d4 08 c2 20 20 3e 1f 20 2d 1b c2 20 a3 01 0a 0a
>3a2d68		aa a5 23 9f 00 f0 3a 9f 08 f0 3a 83 04 a5 25 9f
>3a2d78		02 f0 3a 38 e9 b0 00 9f 0a f0 3a 83 06 a3 01 0a
>3a2d88		0a 0a aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01
>3a2d98		af a3 06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01
>3a2da8		af c2 30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9
>3a2db8		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>3a2dc8		ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20 20 2d 1b
>3a2dd8		20 15 06 a5 23 20 8b 2c c2 20 a5 9e 8f 05 04 af
>3a2de8		af 14 f0 3a 8f 08 04 af e2 20 a5 a0 8f 07 04 af
>3a2df8		af 16 f0 3a 8f 0a 04 af a9 00 8f 01 04 af a9 85
>3a2e08		8f 00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af
>3a2e18		28 60 08 c2 20 a5 5d 8f 08 01 00 af 10 f0 3a 8f
>3a2e28		0a 01 00 18 af 0c 01 00 65 59 85 0c af 0e 01 00
>3a2e38		69 00 00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0
>3a2e48		85 0e e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85
>3a2e58		dd 38 a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69
>3a2e68		a9 ff ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85
>3a2e78		6d 10 0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d
>3a2e88		c5 69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a
>3a2e98		68 6a 85 71 20 1a 2e a5 59 c5 61 d0 06 a5 5d c5
>3a2ea8		65 f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5 75 10
>3a2eb8		10 f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85
>3a2ec8		59 a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71
>3a2ed8		18 a5 5d 65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9
>3a2ee8		06 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a2ef8		48 a9 00 48 ab 68 28 c2 30 20 2d 1b 20 15 06 83
>3a2f08		01 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83
>3a2f18		03 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83
>3a2f28		05 a9 2c 00 20 4b 20 20 2d 1b 20 15 06 a5 23 85
>3a2f38		55 a3 03 85 59 a3 05 85 5d a3 01 20 47 2c 20 1a
>3a2f48		2e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38
>3a2f58		e9 0a 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a2f68		20 48 a9 00 48 ab 68 28 c2 30 20 2d 1b 20 15 06
>3a2f78		83 01 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23
>3a2f88		83 03 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23
>3a2f98		83 05 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23
>3a2fa8		83 07 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23
>3a2fb8		83 09 a9 2c 00 20 4b 20 20 2d 1b 20 15 06 a5 23
>3a2fc8		85 55 a3 03 85 59 a3 05 85 5d a3 07 85 61 a3 09
>3a2fd8		85 65 a3 01 20 47 2c 20 52 2e c2 20 3b 18 69 0a
>3a2fe8		00 1b 28 60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20
>3a2ff8		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a3008		28 c2 30 20 2d 1b 20 15 06 83 01 a9 2c 00 20 4b
>3a3018		20 20 2d 1b 20 03 05 a5 23 83 03 a9 2c 00 20 4b
>3a3028		20 20 2d 1b 20 03 05 a5 23 83 05 a9 2c 00 20 4b
>3a3038		20 20 2d 1b 20 03 05 a5 23 83 07 a9 2c 00 20 4b
>3a3048		20 20 2d 1b 20 03 05 a5 23 83 09 a9 2c 00 20 4b
>3a3058		20 20 2d 1b 20 15 06 a5 23 83 0b a3 01 20 8b 2c
>3a3068		a9 07 00 8f 00 04 af c2 20 a3 05 8f 00 01 00 af
>3a3078		10 f0 3a 8f 02 01 00 18 af 04 01 00 63 03 85 0c
>3a3088		e2 20 af 06 01 00 69 00 85 0e c2 20 18 a5 9e 65
>3a3098		0c 8f 05 04 af e2 20 a5 a0 65 0e 8f 07 04 af c2
>3a30a8		20 38 a3 07 e3 03 85 0c 8f 08 04 af 38 af 10 f0
>3a30b8		3a 8f 0e 04 af 38 a3 09 e3 05 8f 0a 04 af e2 20
>3a30c8		a3 0b 8f 01 04 af af 00 04 af 09 80 8f 00 04 af
>3a30d8		af 01 04 af 30 fa a9 00 8f 00 04 af c2 20 3b 18
>3a30e8		69 0c 00 1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a
>3a30f8		0a 18 69 00 0c 85 9e a9 af 00 69 00 00 85 a0 28
>3a3108		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3118		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>3a3128		08 c2 20 3b 38 e9 03 00 1b c2 30 20 2d 1b 20 15
>3a3138		06 83 01 a9 2c 00 20 4b 20 e2 20 20 2d 1b 20 15
>3a3148		06 a5 23 c9 08 b0 56 83 03 a9 2c 20 4b 20 20 2d
>3a3158		1b 20 03 05 c2 20 38 a5 23 e9 00 00 85 23 a5 25
>3a3168		e9 b0 00 85 25 30 36 c2 20 a3 01 aa 20 ee 30 a5
>3a3178		23 a0 01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf 18
>3a3188		f0 3a 29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e 9f
>3a3198		18 f0 3a c2 20 3b 18 69 03 00 1b 28 60 08 c2 20
>3a31a8		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a31b8		20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20 3b
>3a31c8		38 e9 04 00 1b c2 30 20 2d 1b 20 15 06 83 01 a9
>3a31d8		2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83 03 a9
>3a31e8		2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01 20 ee 30
>3a31f8		a3 03 a0 04 00 97 9e a5 23 a0 06 00 97 9e c2 20
>3a3208		3b 18 69 04 00 1b 28 60 08 c2 20 3b 38 e9 03 00
>3a3218		1b c2 30 20 2d 1b 20 15 06 83 01 a9 2c 00 20 4b
>3a3228		20 e2 20 20 2d 1b 20 03 05 a5 23 d0 04 83 03 80
>3a3238		04 a9 01 83 03 a9 2c 85 37 20 80 20 b0 20 c2 30
>3a3248		a3 01 aa 20 ee 30 e2 20 bf 18 f0 3a 29 fe 85 0c
>3a3258		a3 03 29 01 05 0c 9f 18 f0 3a 87 9e 80 36 c2 30
>3a3268		20 3e 1f 20 2d 1b 20 15 06 a5 23 c9 08 00 b0 2e
>3a3278		0a 0a 0a 0a 85 0c a3 01 aa 20 ee 30 e2 20 a3 03
>3a3288		29 01 05 0c 85 0c bf 18 f0 3a 29 8e 05 0c 87 9e
>3a3298		9f 18 f0 3a c2 20 3b 18 69 03 00 1b 28 60 08 c2
>3a32a8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a32b8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>3a32c8		c9 04 00 b0 19 8d 00 01 a9 04 00 8d 02 01 18 ad
>3a32d8		04 01 69 80 02 85 9e a9 af 00 85 a0 28 60 08 c2
>3a32e8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a32f8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>3a3308		c9 04 00 b0 19 8d 00 01 a9 0c 00 8d 02 01 18 ad
>3a3318		04 01 69 00 02 85 9e a9 af 00 85 a0 28 60 08 c2
>3a3328		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a3338		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>3a3348		3b 38 e9 06 00 1b c2 20 20 2d 1b 20 15 06 a5 23
>3a3358		83 01 a9 2c 00 20 4b 20 20 2d 1b 20 15 06 a5 23
>3a3368		83 03 a9 2c 00 20 4b 20 20 2d 1b 20 15 06 a5 23
>3a3378		83 05 a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01
>3a3388		20 c5 32 a5 23 87 9e e2 20 38 a5 25 e9 b0 a0 02
>3a3398		00 97 9e a3 05 d0 0d e2 20 a3 03 29 07 a0 03 00
>3a33a8		97 9e 80 0d e2 20 a3 03 29 07 09 08 a0 03 00 97
>3a33b8		9e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38
>3a33c8		e9 06 00 1b c2 20 20 2d 1b 20 15 06 a5 23 83 01
>3a33d8		a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83 03
>3a33e8		a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83 05
>3a33f8		a9 2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01 20 05
>3a3408		33 a5 23 a0 01 00 97 9e e2 20 38 a5 25 e9 b0 c8
>3a3418		c8 97 9e c2 20 a3 03 a0 04 00 97 9e a3 05 a0 06
>3a3428		00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20
>3a3438		f4 00 00 c2 20 20 2d 1b 20 15 06 a5 23 83 01 a9
>3a3448		2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01 20 05 33
>3a3458		a5 23 d0 06 e2 20 a9 00 80 04 e2 20 a9 01 e2 20
>3a3468		a0 00 00 97 9e c2 20 68 28 60 08 c2 20 3b 38 e9
>3a3478		04 00 1b c2 20 20 2d 1b 20 15 06 a5 23 83 01 a9
>3a3488		2c 00 20 4b 20 20 2d 1b 20 03 05 a5 23 83 03 a9
>3a3498		2c 00 20 4b 20 20 2d 1b 20 03 05 a3 01 20 05 33
>3a34a8		a5 23 a0 0a 00 97 9e a3 03 a0 08 00 97 9e c2 20
>3a34b8		3b 18 69 04 00 1b 28 60 0b 08 08 c2 20 48 a9 00
>3a34c8		08 5b 68 28 e2 20 a9 00 8f 58 f0 3a af 5c f0 3a
>3a34d8		c9 b0 b0 1c 8f 24 04 af af 5b f0 3a 8f 23 04 af
>3a34e8		af 5a f0 3a 8f 22 04 af a9 10 8f 58 f0 3a 80 17
>3a34f8		38 e9 b0 8f 04 04 af af 5b f0 3a 8f 03 04 af af
>3a3508		5a f0 3a 8f 02 04 af af 59 f0 3a d0 3c af 58 f0
>3a3518		3a f0 1b af 5d f0 3a 8f 28 04 af af 5e f0 3a 8f
>3a3528		29 04 af af 5f f0 3a 8f 2a 04 af 82 8b 00 af 5d
>3a3538		f0 3a 8f 08 04 af af 5e f0 3a 8f 09 04 af af 5f
>3a3548		f0 3a 8f 0a 04 af 82 70 00 af 58 f0 3a 09 01 8f
>3a3558		58 f0 3a 89 10 f0 32 af 60 f0 3a 8f 28 04 af af
>3a3568		61 f0 3a 8f 29 04 af af 62 f0 3a 8f 2a 04 af af
>3a3578		63 f0 3a 8f 2b 04 af af 64 f0 3a 8f 2c 04 af af
>3a3588		65 f0 3a 8f 2d 04 af 80 30 af 60 f0 3a 8f 08 04
>3a3598		af af 61 f0 3a 8f 09 04 af af 62 f0 3a 8f 0a 04
>3a35a8		af af 63 f0 3a 8f 0b 04 af af 64 f0 3a 8f 0c 04
>3a35b8		af af 65 f0 3a 8f 0d 04 af e2 20 af 69 f0 3a c9
>3a35c8		b0 b0 20 8f 27 04 af af 68 f0 3a 8f 26 04 af af
>3a35d8		67 f0 3a 8f 25 04 af af 58 f0 3a 09 20 8f 58 f0
>3a35e8		3a 80 17 38 e9 b0 8f 07 04 af af 68 f0 3a 8f 06
>3a35f8		04 af af 67 f0 3a 8f 05 04 af af 66 f0 3a d0 3e
>3a3608		af 58 f0 3a 89 20 f0 1b af 6a f0 3a 8f 28 04 af
>3a3618		af 6b f0 3a 8f 29 04 af af 6c f0 3a 8f 2a 04 af
>3a3628		82 8b 00 af 6a f0 3a 8f 08 04 af af 6b f0 3a 8f
>3a3638		09 04 af af 6c f0 3a 8f 0a 04 af 82 70 00 af 58
>3a3648		f0 3a 09 02 8f 58 f0 3a 89 20 f0 32 af 6d f0 3a
>3a3658		8f 28 04 af af 6e f0 3a 8f 29 04 af af 6f f0 3a
>3a3668		8f 2a 04 af af 70 f0 3a 8f 2b 04 af af 71 f0 3a
>3a3678		8f 2e 04 af af 72 f0 3a 8f 2f 04 af 80 30 af 6d
>3a3688		f0 3a 8f 08 04 af af 6e f0 3a 8f 09 04 af af 6f
>3a3698		f0 3a 8f 0a 04 af af 70 f0 3a 8f 0b 04 af af 71
>3a36a8		f0 3a 8f 0e 04 af af 72 f0 3a 8f 0f 04 af af 58
>3a36b8		f0 3a 29 30 f0 43 c9 10 f0 76 c9 20 d0 03 82 8a
>3a36c8		00 af 58 f0 3a 29 03 f0 23 c9 03 f0 23 08 c2 20
>3a36d8		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>3a36e8		20 29 ff 00 20 7f 1c e2 20 dc d4 08 a9 01 80 02
>3a36f8		a9 03 8f 20 04 af 82 7d 00 af 58 f0 3a 29 03 f0
>3a3708		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3718		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>3a3728		20 dc d4 08 a9 01 80 02 a9 03 8f 00 04 af 80 34
>3a3738		af 58 f0 3a 29 01 0a 09 11 8f 20 04 af af 58 f0
>3a3748		3a 29 02 09 11 8f 00 04 af 80 19 af 58 f0 3a 29
>3a3758		02 09 21 8f 20 04 af af 58 f0 3a 29 01 0a 09 21
>3a3768		8f 00 04 af af 00 04 af 09 80 8f 00 04 af af 58
>3a3778		f0 3a 29 30 f0 0f af 20 04 af 09 80 8f 20 04 af
>3a3788		ea ea ea ea ea af 01 04 af 89 80 d0 f8 a9 00 8f
>3a3798		20 04 af 8f 00 04 af 28 2b 60 0b 08 e2 20 c2 10
>3a37a8		a9 00 a2 00 00 8f 59 f0 3a e8 e0 1a 00 d0 f6 20
>3a37b8		9f 20 c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00
>3a37c8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a37d8		00 20 7f 1c e2 20 dc d4 08 20 4b 20 20 2d 1b 20
>3a37e8		03 05 c2 20 a5 23 8f 5a f0 3a e2 20 a5 25 8f 5c
>3a37f8		f0 3a a9 2c 20 4b 20 20 2d 1b 20 03 05 c2 20 a5
>3a3808		23 8f 5d f0 3a e2 20 a5 25 8f 5f f0 3a e2 20 a9
>3a3818		00 8f 59 f0 3a 82 74 00 20 4b 20 20 2d 1b 20 03
>3a3828		05 c2 20 a5 23 8f 5a f0 3a e2 20 a5 25 8f 5c f0
>3a3838		3a a9 2c 20 4b 20 20 2d 1b 20 bf 05 c2 20 a5 23
>3a3848		8f 60 f0 3a 8d 00 01 a9 2c 00 20 4b 20 20 2d 1b
>3a3858		20 bf 05 c2 20 a5 23 8f 62 f0 3a 8d 02 01 a9 2c
>3a3868		00 20 4b 20 20 2d 1b 20 bf 05 c2 20 a5 23 8f 64
>3a3878		f0 3a c2 20 ad 04 01 8f 5d f0 3a e2 20 ad 06 01
>3a3888		8f 5f f0 3a e2 20 a9 01 8f 59 f0 3a e2 20 a9 9c
>3a3898		20 4b 20 20 9f 20 c9 e6 f0 23 c9 e7 f0 5e 08 c2
>3a38a8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a38b8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 20 4b 20
>3a38c8		20 2d 1b 20 03 05 c2 20 a5 23 8f 67 f0 3a e2 20
>3a38d8		a5 25 8f 69 f0 3a a9 2c 20 4b 20 20 2d 1b 20 03
>3a38e8		05 c2 20 a5 23 8f 6a f0 3a e2 20 a5 25 8f 6c f0
>3a38f8		3a e2 20 a9 00 8f 66 f0 3a 82 74 00 20 4b 20 20
>3a3908		2d 1b 20 03 05 c2 20 a5 23 8f 67 f0 3a e2 20 a5
>3a3918		25 8f 69 f0 3a a9 2c 20 4b 20 20 2d 1b 20 bf 05
>3a3928		c2 20 a5 23 8f 6d f0 3a 8d 00 01 a9 2c 00 20 4b
>3a3938		20 20 2d 1b 20 bf 05 c2 20 a5 23 8f 6f f0 3a 8d
>3a3948		02 01 a9 2c 00 20 4b 20 20 2d 1b 20 bf 05 c2 20
>3a3958		a5 23 8f 71 f0 3a c2 20 ad 04 01 8f 6a f0 3a e2
>3a3968		20 ad 06 01 8f 6c f0 3a e2 20 a9 01 8f 66 f0 3a
>3a3978		c2 20 af 5d f0 3a cf 6a f0 3a d0 14 e2 20 af 5f
>3a3988		f0 3a cf 6c f0 3a d0 08 c2 20 20 c0 34 28 2b 60
>3a3998		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a39a8		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08
>3a39b8		c2 30 20 2d 1b 20 15 06 a5 23 48 a9 2c 00 20 4b
>3a39c8		20 20 2d 1b 20 15 06 a4 23 fa 20 20 00 28 60 08
>3a39d8		20 5f 1f e2 20 a7 00 d0 03 4c 7c 3a c9 3a d0 03
>3a39e8		4c 7c 3a c9 22 d0 0b 20 39 1a 20 67 43 a9 3b 20
>3a39f8		4b 20 20 94 03 90 41 20 50 51 90 3c a9 3f 20 18
>3a3a08		00 a9 20 20 18 00 20 10 00 e2 20 a5 ea c9 02 f0
>3a3a18		46 c9 00 f0 62 c9 01 f0 5d 08 c2 20 48 a9 00 08
>3a3a28		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a3a38		20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a3a48		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a3a58		7f 1c e2 20 dc d4 08 c2 20 a9 00 4c 85 23 a9 00
>3a3a68		00 85 25 e2 20 a9 02 85 27 c2 20 20 b3 50 a9 0d
>3a3a78		00 20 18 00 28 60 ea c2 20 a5 00 85 40 a5 02 85
>3a3a88		42 a9 00 4c 85 00 a9 00 00 85 02 20 8a 07 c2 20
>3a3a98		a5 40 85 00 a5 42 85 02 80 cf 08 20 5f 1f e2 20
>3a3aa8		a7 00 f0 46 c9 3a f0 42 20 94 03 90 3f 20 50 51
>3a3ab8		90 3a 20 14 00 e2 20 8f 00 4e 00 a9 00 8f 01 4e
>3a3ac8		00 c2 20 a9 00 4e 85 23 a9 00 00 85 25 e2 20 a9
>3a3ad8		02 85 27 20 b3 50 20 5f 1f a7 00 f0 0d c9 3a f0
>3a3ae8		09 c9 2c d0 07 20 3e 1f 80 b1 28 60 08 c2 20 48
>3a3af8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a3b08		29 ff 00 20 7f 1c e2 20 dc d4 08 08 20 2d 1b 20
>3a3b18		03 05 e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20
>3a3b28		a5 25 85 a5 e2 20 a9 2c 85 37 20 80 20 90 41 20
>3a3b38		3e 1f 20 2d 1b 20 bf 05 c2 20 a5 23 85 55 e2 20
>3a3b48		a9 2c 85 37 20 80 20 90 27 20 3e 1f 20 2d 1b 20
>3a3b58		bf 05 c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 80
>3a3b68		20 90 0d 20 3e 1f 20 2d 1b 20 bf 05 c2 20 a4 23
>3a3b78		a6 59 a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 83
>3a3b88		1f 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3b98		04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a3ba8		d4 08 08 e2 20 20 5f 1f 20 50 51 90 64 a9 8f 20
>3a3bb8		4b 20 a9 01 20 8c 18 a2 01 00 a9 00 8f 00 4d 00
>3a3bc8		20 2d 1b 20 bf 05 c2 20 a5 23 9f 00 4d 00 e2 20
>3a3bd8		af 00 4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 5f 1f
>3a3be8		a7 00 c9 2c f0 25 c9 90 d0 27 20 3e 1f 20 70 61
>3a3bf8		c2 20 a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea
>3a3c08		09 80 85 ea 85 27 20 b3 50 28 60 20 3e 1f 4c c8
>3a3c18		3b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3c28		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>3a3c38		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a3c48		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08
>3a3c58		20 5f 1f e2 20 a7 00 f0 28 c9 3a f0 24 20 94 03
>3a3c68		90 21 20 50 51 90 1c 20 aa 3c 20 b3 50 20 5f 1f
>3a3c78		a7 00 f0 0d c9 3a f0 09 c9 2c d0 07 20 3e 1f 80
>3a3c88		cf 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3c98		02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a3ca8		d4 08 08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5
>3a3cb8		1a 85 44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85
>3a3cc8		00 a5 3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7
>3a3cd8		00 f0 53 c9 3a f0 4f c9 2c d0 03 20 3e 1f 20 5f
>3a3ce8		1f a7 00 c9 22 f0 4e 20 ad 03 b0 4e 08 c2 20 48
>3a3cf8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a3d08		29 ff 00 20 7f 1c e2 20 dc d4 08 c2 20 a9 00 00
>3a3d18		85 1a a9 36 00 85 1c 18 a5 1a 69 04 00 85 00 a5
>3a3d28		1c 69 00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37
>3a3d38		20 95 1f 80 a9 20 39 1a 80 03 20 6e 19 c2 20 a5
>3a3d48		00 85 38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5
>3a3d58		44 85 1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28
>3a3d68		60 20 83 1f 60 64 38 64 3a 64 3c 64 3e 60 20 24
>3a3d78		00 60 20 2d 1b c2 20 a5 25 48 a5 23 48 e2 20 a7
>3a3d88		00 c9 2c d0 22 20 3e 1f 20 2d 1b c2 20 a5 26 d0
>3a3d98		35 68 85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0
>3a3da8		02 00 a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68
>3a3db8		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f
>3a3dc8		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a3dd8		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a3de8		e2 20 dc d4 08 20 2d 1b c2 20 a5 25 48 a5 23 48
>3a3df8		e2 20 a7 00 c9 2c d0 19 20 3e 1f 20 2d 1b c2 20
>3a3e08		a5 25 d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08
>3a3e18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3e28		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>3a3e38		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a3e48		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 20
>3a3e58		2d 1b c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c
>3a3e68		d0 1f 20 3e 1f 20 2d 1b e2 20 a5 24 d0 32 c2 20
>3a3e78		a5 25 d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08
>3a3e88		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3e98		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>3a3ea8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>3a3eb8		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08
>3a3ec8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08
>3a3ed8		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 e2
>3a3ee8		20 a7 00 f0 05 20 3e 1f 80 f7 28 60 08 28 60 08
>3a3ef8		28 60 08 28 60 08 c2 20 a5 1c 20 46 1c a5 1a 20
>3a3f08		46 1c a5 02 48 a5 00 48 20 83 1f a5 02 20 46 1c
>3a3f18		a5 00 20 46 1c 68 85 00 68 85 02 20 5f 1f 20 50
>3a3f28		51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3f38		05 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a3f48		d4 08 e2 20 a5 ea 20 5d 1c a5 e9 20 5d 1c c2 20
>3a3f58		a5 e7 20 46 1c 20 5f 1f e2 20 a7 00 c9 8a d0 6a
>3a3f68		a5 ea c9 00 f0 04 c9 01 f0 00 20 3e 1f 20 2d 1b
>3a3f78		20 b3 50 e2 20 a9 9c 20 4b 20 20 2d 1b c2 20 a5
>3a3f88		27 20 46 1c a5 25 20 46 1c a5 23 20 46 1c e2 20
>3a3f98		a9 9d 85 37 20 80 20 90 1b 20 3e 1f 20 2d 1b e2
>3a3fa8		20 a5 27 20 46 1c c2 20 a5 25 20 46 1c a5 23 20
>3a3fb8		46 1c 80 14 c2 20 a9 00 00 20 46 1c a9 00 00 20
>3a3fc8		46 1c a9 01 00 20 46 1c 28 60 08 c2 20 48 a9 00
>3a3fd8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3fe8		00 20 7f 1c e2 20 dc d4 08 08 8b 08 e2 20 48 a9
>3a3ff8		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a4008		30 a4 33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2
>3a4018		20 85 e9 b9 10 00 85 ea c2 20 5a 20 51 4f 7a c2
>3a4028		20 b9 00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00
>3a4038		85 2d c2 20 5a 20 fd 25 20 b3 50 7a c2 20 b9 06
>3a4048		00 85 29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2
>3a4058		20 b9 02 00 30 0a 20 4c 28 20 cc 04 f0 28 80 08
>3a4068		20 0c 28 20 cc 04 f0 1e c2 20 b9 12 00 85 00 b9
>3a4078		14 00 85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20
>3a4088		a9 03 85 dc 80 17 a2 23 08 20 4d 18 c2 20 18 a5
>3a4098		33 69 1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60
>3a40a8		08 a5 1a 48 a5 1c 48 20 5f 1f 20 8a 07 a5 23 f0
>3a40b8		26 20 3d 22 90 42 e2 20 a9 02 85 dc 20 83 1f c2
>3a40c8		20 68 20 46 1c 68 20 46 1c a5 02 20 46 1c a5 00
>3a40d8		20 46 1c e6 31 28 60 68 68 08 c2 20 48 a9 00 08
>3a40e8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a40f8		20 7f 1c e2 20 dc d4 08 68 68 08 c2 20 48 a9 00
>3a4108		08 5b 68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff
>3a4118		00 20 7f 1c e2 20 dc d4 08 08 c2 30 a5 31 f0 1e
>3a4128		20 68 1c 85 00 20 68 1c 85 02 20 68 1c 85 1a 20
>3a4138		68 1c 85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2
>3a4148		20 48 a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00
>3a4158		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 20 2d
>3a4168		1b 20 cc 04 f0 1c e2 20 a9 97 20 4b 20 20 8a 07
>3a4178		20 cc 04 f0 12 20 3d 22 90 2c e2 20 a9 02 85 dc
>3a4188		80 03 20 83 1f 28 60 08 c2 20 48 a9 00 08 5b 68
>3a4198		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f
>3a41a8		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a41b8		e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a41c8		e2 20 dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20
>3a41d8		5f 1f 20 8a 07 a5 23 f0 0d 20 3d 22 90 27 e2 20
>3a41e8		a9 02 85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a41f8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a4208		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4218		20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>3a4228		20 dc d4 08 20 ef 17 20 38 0f 20 50 4e 60 08 a7
>3a4238		00 10 03 20 3e 1f 20 50 51 b0 03 4c ad 42 e2 20
>3a4248		20 9f 20 c9 8f d0 0e a9 8f 20 4b 20 a9 00 8f 00
>3a4258		4d 00 20 71 19 20 5f 1f e2 20 a7 00 c9 8a f0 03
>3a4268		4c ad 42 20 3e 1f a5 ea 48 a5 e9 48 a5 e8 48 a5
>3a4278		e7 48 20 2d 1b 68 85 e7 68 85 e8 68 85 e9 68 85
>3a4288		ea 29 80 f0 1b 20 c3 4e 90 3a c2 20 a0 09 00 b7
>3a4298		08 85 c0 e2 20 c8 c8 b7 08 85 c2 20 51 63 80 03
>3a42a8		20 b3 50 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a42b8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>3a42c8		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a42d8		a9 05 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>3a42e8		dc d4 08 08 e2 20 20 9f 20 c9 00 f0 6d 20 2d 1b
>3a42f8		e2 20 a5 27 c9 ff f0 1b c9 02 d0 05 20 67 43 80
>3a4308		12 c9 00 d0 05 20 87 43 80 09 c9 01 d0 4f 20 9a
>3a4318		43 80 00 20 5f 1f a7 00 f0 40 c9 3a f0 3c c9 2c
>3a4328		f0 23 c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28
>3a4338		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a4348		e2 20 dc d4 08 a9 09 20 18 00 20 3e 1f 20 5f 1f
>3a4358		a7 00 f0 09 c9 3a f0 05 80 93 20 89 02 28 60 08
>3a4368		8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0
>3a4378		00 00 b7 23 f0 06 20 18 00 c8 80 f6 ab 28 60 08
>3a4388		c2 20 20 ed 13 a5 16 85 23 a5 18 85 25 20 67 43
>3a4398		28 60 08 20 19 5b c2 20 a5 16 85 23 a5 18 85 25
>3a43a8		20 67 43 28 60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f
>3a43b8		18 69 30 97 16 c8 a5 b5 29 0f 18 69 30 97 16 c8
>3a43c8		28 60 e2 20 a9 8f 20 4b 20 08 20 2d 1b e2 20 c2
>3a43d8		10 af 0e 08 af 09 08 8f 0e 08 af 20 8e 13 a0 00
>3a43e8		00 af 06 08 af 20 ad 43 a9 2f 97 16 c8 af 09 08
>3a43f8		af 20 ad 43 a9 2f 97 16 c8 af 0f 08 af 20 ad 43
>3a4408		af 0a 08 af 20 ad 43 a9 00 97 16 af 0e 08 af 29
>3a4418		f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2
>3a4428		20 a9 02 85 27 28 e2 20 20 3e 1f 60 e2 20 a9 8f
>3a4438		20 4b 20 08 20 2d 1b e2 20 c2 10 af 0e 08 af 09
>3a4448		08 8f 0e 08 af 20 8e 13 a0 00 00 af 04 08 af 29
>3a4458		7f 20 ad 43 a9 3a 97 16 c8 af 02 08 af 20 ad 43
>3a4468		a9 3a 97 16 c8 af 00 08 af 20 ad 43 a9 00 97 16
>3a4478		af 0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16 85 23
>3a4488		a5 18 85 25 e2 20 a9 02 85 27 28 e2 20 20 3e 1f
>3a4498		60 e2 20 a9 8f 20 4b 20 08 20 2d 1b e2 20 a9 01
>3a44a8		85 27 a9 03 8f 00 e2 af a9 01 8f 01 e2 af c2 30
>3a44b8		af 84 e8 af 8f 08 e2 af af 84 e8 af 29 ff 7f 8f
>3a44c8		0a e2 af a9 ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2
>3a44d8		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>3a44e8		28 e2 20 20 3e 1f 60 e2 20 a9 8f 20 4b 20 08 c2
>3a44f8		30 20 2d 1b 20 95 05 c2 20 a5 25 48 a5 23 48 20
>3a4508		5f 1f e2 20 a7 00 c9 2c f0 03 4c 66 45 20 3e 1f
>3a4518		20 2d 1b 20 bf 05 c2 20 a5 23 48 20 5f 1f e2 20
>3a4528		a7 00 c9 2c f0 03 4c 66 45 20 3e 1f 20 2d 1b 20
>3a4538		bf 05 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>3a4548		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>3a4558		a9 02 85 27 20 e6 15 e2 20 20 3e 1f 28 60 08 c2
>3a4568		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a4578		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>3a4588		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a4598		20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f
>3a45a8		20 4b 20 08 c2 30 20 2d 1b e2 20 a5 27 c9 02 f0
>3a45b8		03 4c 28 46 c2 20 a5 25 48 a5 23 48 20 5f 1f e2
>3a45c8		20 a7 00 c9 2c f0 03 4c 47 46 20 3e 1f 20 2d 1b
>3a45d8		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>3a45e8		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>3a45f8		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>3a4608		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>3a4618		e2 20 a9 00 85 2d 20 e6 15 e2 20 20 3e 1f 28 60
>3a4628		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a4638		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08
>3a4648		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4658		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2
>3a4668		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4678		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9
>3a4688		8f 20 4b 20 08 c2 30 20 2d 1b e2 20 a5 27 c9 02
>3a4698		f0 03 4c f1 46 c2 20 a5 25 48 a5 23 48 20 5f 1f
>3a46a8		e2 20 a7 00 c9 2c f0 03 4c 10 47 20 3e 1f 20 2d
>3a46b8		1b e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>3a46c8		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>3a46d8		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>3a46e8		e6 15 e2 20 20 3e 1f 28 60 08 c2 20 48 a9 00 08
>3a46f8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a4708		20 7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a4718		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a4728		7f 1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a4738		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f
>3a4748		1c e2 20 dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b
>3a4758		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>3a4768		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 8a 07 a5
>3a4778		40 85 00 a5 42 85 02 e2 20 20 3e 1f 60 08 c2 20
>3a4788		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a4798		20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f
>3a47a8		20 4b 20 08 20 2d 1b c2 10 e2 20 a5 27 c9 00 d0
>3a47b8		1a 20 ed 13 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>3a47c8		a9 02 85 27 28 e2 20 20 3e 1f 60 08 c2 20 48 a9
>3a47d8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a47e8		ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b
>3a47f8		20 08 20 2d 1b 20 95 05 c2 20 64 0c 64 0e e2 30
>3a4808		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>3a4818		23 20 be 03 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>3a4828		06 0c 26 0e 06 0c 26 0e e2 20 20 df 03 05 0c 85
>3a4838		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>3a4848		a9 00 85 27 28 e2 20 20 3e 1f 60 e2 20 a9 8f 20
>3a4858		4b 20 08 20 2d 1b 20 03 05 20 8e 13 e2 30 a0 ff
>3a4868		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 3a 97 16
>3a4878		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 16
>3a4888		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>3a4898		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>3a48a8		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>3a48b8		02 85 27 28 e2 20 20 3e 1f 60 08 c2 20 48 a9 00
>3a48c8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a48d8		00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b 20
>3a48e8		20 2d 1b e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>3a48f8		c2 10 a6 23 20 7a 14 ab 84 23 c2 20 64 25 e2 20
>3a4908		a9 00 85 27 e2 20 20 3e 1f 60 08 c2 20 48 a9 00
>3a4918		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4928		00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b 20
>3a4938		20 2d 1b e2 20 a5 27 c9 00 d0 12 e2 20 a7 23 85
>3a4948		23 64 24 64 25 64 30 e2 20 20 3e 1f 60 08 c2 20
>3a4958		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a4968		20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f
>3a4978		20 4b 20 20 2d 1b e2 20 a5 27 c9 00 d0 1d c2 20
>3a4988		a7 23 85 0c e2 20 a0 02 00 b7 23 85 25 64 26 c2
>3a4998		20 a5 0c 85 23 e2 20 20 3e 1f 60 08 c2 20 48 a9
>3a49a8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a49b8		ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b
>3a49c8		20 20 2d 1b e2 20 a5 27 c9 00 d0 0e c2 20 a7 23
>3a49d8		85 23 64 25 e2 20 20 3e 1f 60 08 c2 20 48 a9 00
>3a49e8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a49f8		00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b 20
>3a4a08		20 2d 1b e2 20 a5 27 c9 00 d0 24 20 8e 13 a5 23
>3a4a18		87 16 a9 00 a0 01 00 97 16 c2 20 a5 16 85 23 a5
>3a4a28		18 85 25 e2 20 a9 02 85 27 e2 20 20 3e 1f 60 08
>3a4a38		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a4a48		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20
>3a4a58		a9 8f 20 4b 20 20 2d 1b e2 20 a5 27 c9 02 d0 14
>3a4a68		a7 23 85 23 64 24 64 25 64 26 a9 00 85 27 e2 20
>3a4a78		20 3e 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4a88		a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>3a4a98		dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b e2 20 a5
>3a4aa8		27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e a5
>3a4ab8		24 d0 4a c2 10 20 8e 13 a4 23 e2 20 a9 00 97 16
>3a4ac8		88 30 07 a9 20 97 16 88 10 fb a9 02 85 27 c2 20
>3a4ad8		a5 16 85 23 a5 18 85 25 e2 20 20 3e 1f 60 08 c2
>3a4ae8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a4af8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 08 c2 20
>3a4b08		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a4b18		20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f
>3a4b28		20 4b 20 20 2d 1b e2 20 a5 27 c9 00 d0 39 e2 20
>3a4b38		a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 8e
>3a4b48		13 a4 23 e2 20 a9 00 97 16 88 30 07 a9 09 97 16
>3a4b58		88 10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85
>3a4b68		25 e2 20 20 3e 1f 60 08 c2 20 48 a9 00 08 5b 68
>3a4b78		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f
>3a4b88		1c e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a4b98		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a4ba8		e2 20 dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b e2
>3a4bb8		20 a5 27 c9 00 f0 23 c9 01 f0 3e 08 c2 20 48 a9
>3a4bc8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4bd8		ff 00 20 7f 1c e2 20 dc d4 08 c2 20 a5 25 10 21
>3a4be8		49 ff ff 85 25 a5 23 49 ff ff 18 69 01 00 85 23
>3a4bf8		a5 25 69 00 00 85 25 80 08 e2 20 a5 26 29 7f 85
>3a4c08		26 e2 20 20 3e 1f 60 e2 20 a9 8f 20 4b 20 20 2d
>3a4c18		1b e2 20 a5 27 c9 00 d0 25 c2 20 a5 25 30 12 d0
>3a4c28		04 a5 23 f0 13 a9 00 00 85 25 a9 01 00 85 23 80
>3a4c38		07 a9 ff ff 85 25 85 23 e2 20 20 3e 1f 60 08 c2
>3a4c48		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a4c58		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9
>3a4c68		8f 20 4b 20 20 2d 1b 20 03 05 e2 20 20 3e 1f 60
>3a4c78		e2 20 a9 8f 20 4b 20 20 2d 1b 20 71 06 20 75 5f
>3a4c88		e2 20 20 3e 1f 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4c98		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a4ca8		e2 20 dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b 20
>3a4cb8		71 06 20 a4 5f e2 20 20 3e 1f 60 08 c2 20 48 a9
>3a4cc8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4cd8		ff 00 20 7f 1c e2 20 dc d4 08 e2 20 a9 8f 20 4b
>3a4ce8		20 20 2d 1b 20 71 06 20 d3 5f e2 20 20 3e 1f 60
>3a4cf8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a4d08		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 e2
>3a4d18		20 a9 8f 20 4b 20 20 2d 1b 20 71 06 20 1e 5e e2
>3a4d28		20 20 3e 1f 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4d38		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2
>3a4d48		20 dc d4 08 e2 20 a9 8f 20 4b 20 20 2d 1b 20 71
>3a4d58		06 20 01 60 e2 20 20 3e 1f 60 08 c2 20 48 a9 00
>3a4d68		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4d78		00 20 7f 1c e2 20 dc d4 08 00 ea 60 08 0b 08 c2
>3a4d88		20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00 00 85
>3a4d98		d9 e2 20 a9 36 85 db c2 30 a9 00 00 a0 00 00 97
>3a4da8		d9 a0 02 00 97 d9 a0 04 00 97 d9 20 14 1f 2b 28
>3a4db8		60 8b 08 c2 20 a9 00 00 85 1a a9 36 00 85 1c 20
>3a4dc8		14 1f 20 f3 21 28 ab 60 08 c2 20 64 55 a9 ff 7f
>3a4dd8		85 59 20 89 02 20 9f 20 29 ff 00 c9 00 00 f0 2c
>3a4de8		c9 81 00 f0 1a 20 5f 1f 20 8a 07 a5 23 85 55 20
>3a4df8		9f 20 29 ff 00 c9 00 00 f0 12 c9 81 00 d0 2a 20
>3a4e08		4b 20 20 5f 1f 20 8a 07 a5 23 85 59 a5 1c 48 a5
>3a4e18		1a 48 a5 02 48 a5 00 48 20 f0 16 68 85 00 68 85
>3a4e28		02 68 85 1a 68 85 1c 28 60 08 c2 20 48 a9 00 08
>3a4e38		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a4e48		20 7f 1c e2 20 dc d4 08 08 08 c2 20 48 a9 00 08
>3a4e58		5b 68 28 c2 20 64 e4 64 e7 e2 20 64 e6 64 e9 64
>3a4e68		ea c2 20 38 a5 d9 69 04 00 85 e1 e2 20 a5 db 69
>3a4e78		00 85 e3 28 60 c9 5f f0 1a c9 3a b0 04 c9 30 b0
>3a4e88		12 c9 5b b0 04 c9 41 b0 0a c9 7b b0 04 c9 61 b0
>3a4e98		02 18 60 38 60 08 e2 20 c2 10 a0 00 00 b7 0c f0
>3a4ea8		0a d7 e7 d0 13 c8 c0 08 00 d0 f2 b7 e7 20 08 04
>3a4eb8		20 7d 4e b0 03 28 38 60 28 18 60 08 e2 20 c2 10
>3a4ec8		a0 00 00 a2 00 00 b7 e7 f0 0b 20 08 04 9f 00 4e
>3a4ed8		00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2 20 a9 00 4e
>3a4ee8		85 e7 e2 20 a9 00 85 e9 c2 20 a5 e4 85 08 d0 06
>3a4ef8		e2 20 a5 e6 f0 4d e2 20 a5 e6 85 0a a5 ea a0 00
>3a4f08		00 d7 08 d0 17 c2 20 18 a5 08 69 01 00 85 0c e2
>3a4f18		20 a5 0a 69 00 85 0e 20 9d 4e b0 2a a0 0d 00 c2
>3a4f28		20 b7 08 85 0c c8 c8 e2 20 b7 08 85 0e d0 06 c2
>3a4f38		20 a5 0c f0 0e c2 20 a5 0c 85 08 e2 20 a5 0e 85
>3a4f48		0a 80 b9 28 18 60 28 38 60 08 20 c3 4e b0 1f 08
>3a4f58		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08
>3a4f68		00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 c2 30
>3a4f78		a0 09 00 b7 08 85 23 c8 c8 b7 08 85 25 e2 20 a0
>3a4f88		00 00 b7 08 85 27 28 60 08 c2 20 18 a5 e1 69 10
>3a4f98		00 85 08 e2 20 a5 e3 69 00 85 0a c5 bc 90 27 c2
>3a4fa8		20 a5 08 c5 ba 90 1f 08 c2 20 48 a9 00 08 5b 68
>3a4fb8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f
>3a4fc8		1c e2 20 dc d4 08 c2 20 a5 e1 85 c0 e2 20 a5 e3
>3a4fd8		85 c2 c2 20 a5 08 85 e1 e2 20 a5 0a 85 e3 28 60
>3a4fe8		08 e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05 20
>3a4ff8		03 05 80 2f c9 01 d0 05 20 71 06 80 26 08 c2 20
>3a5008		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a5018		20 29 ff 00 20 7f 1c e2 20 dc d4 08 c9 02 d0 03
>3a5028		20 80 15 c2 10 20 90 4f c2 30 18 a5 c0 69 01 00
>3a5038		85 08 e2 20 a5 c2 69 00 85 0a a0 00 00 a9 00 97
>3a5048		08 c8 c0 08 00 d0 f8 a0 00 00 b7 e7 f0 10 20 08
>3a5058		04 20 7d 4e 90 08 97 08 c8 c0 08 00 d0 ec c2 20
>3a5068		a0 09 00 a5 23 97 c0 a5 25 c8 c8 97 c0 a5 e4 a0
>3a5078		0d 00 97 c0 c8 c8 e2 20 a5 e6 97 c0 c2 20 a5 c0
>3a5088		85 e4 e2 20 a5 c2 85 e6 e2 20 a0 00 00 a5 27 97
>3a5098		c0 c9 02 f0 02 28 60 c2 20 a5 23 85 c0 e2 20 a5
>3a50a8		25 85 c2 20 9c 11 20 b1 11 80 ea 08 c2 30 a5 e4
>3a50b8		d0 06 e2 20 a5 e6 f0 05 20 c3 4e b0 05 20 e8 4f
>3a50c8		80 4e e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0 05
>3a50d8		20 03 05 80 2c c9 01 d0 05 20 71 06 80 23 08 c2
>3a50e8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a50f8		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 c9 02 f0
>3a5108		11 c2 30 a0 09 00 a5 23 97 08 c8 c8 a5 25 97 08
>3a5118		28 60 20 80 15 a0 09 00 b7 08 85 c0 c8 c8 e2 20
>3a5128		b7 08 85 c2 20 9c 11 20 d0 11 e2 20 a5 27 c9 02
>3a5138		f0 02 80 cd c2 20 a5 23 85 c0 e2 20 a5 25 85 c2
>3a5148		20 9c 11 20 b1 11 80 b9 08 20 5f 1f e2 20 a7 00
>3a5158		20 94 03 90 42 c2 20 a5 00 85 e7 e2 20 a5 02 85
>3a5168		e9 20 3e 1f a7 00 f0 0d c9 24 f0 14 c9 25 f0 09
>3a5178		20 7d 4e b0 ec a9 01 80 0c 20 3e 1f a9 00 80 05
>3a5188		20 3e 1f a9 02 85 ea 20 9f 20 c9 8f d0 06 a5 ea
>3a5198		09 80 85 ea 28 38 60 28 18 60 08 c2 20 18 a5 23
>3a51a8		65 29 85 23 a5 25 65 2b 85 25 28 60 08 c2 20 38
>3a51b8		a5 23 e5 29 85 23 a5 25 e5 2b 85 25 28 60 08 c2
>3a51c8		20 3b 38 e9 0a 00 1b c2 30 a9 00 00 83 01 83 03
>3a51d8		83 05 83 07 83 09 a5 25 10 18 a9 00 80 83 01 a5
>3a51e8		25 49 ff ff 85 25 a5 23 49 ff ff 1a 85 23 d0 02
>3a51f8		e6 25 a5 2b 10 1a a3 01 49 00 80 83 01 a5 2b 49
>3a5208		ff ff 85 2b a5 29 49 ff ff 1a 85 29 d0 02 e6 2b
>3a5218		a5 25 f0 04 a5 2b d0 5a a5 23 8f 00 01 00 a5 29
>3a5228		8f 02 01 00 af 04 01 00 83 03 af 06 01 00 83 05
>3a5238		a5 25 8f 00 01 00 a5 29 8f 02 01 00 18 af 04 01
>3a5248		00 63 05 83 05 af 06 01 00 63 07 83 07 a5 23 8f
>3a5258		00 01 00 a5 2b 8f 02 01 00 18 af 04 01 00 63 05
>3a5268		83 05 af 06 01 00 63 07 83 07 a3 07 f0 23 a3 09
>3a5278		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0d
>3a5288		8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4
>3a5298		08 c2 30 a3 01 10 16 a3 05 49 ff ff 83 05 a3 03
>3a52a8		49 ff ff 1a 83 03 d0 05 a3 05 1a 83 05 a3 03 85
>3a52b8		23 a3 05 85 25 c2 20 3b 18 69 0a 00 1b 28 60 08
>3a52c8		c2 20 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80 30
>3a52d8		06 64 23 64 25 80 07 a9 ff ff 85 23 85 25 28 60
>3a52e8		08 c2 20 a5 23 c5 29 d0 0c a5 25 c5 2b d0 06 64
>3a52f8		23 64 25 80 16 a5 29 c5 23 a5 2b e5 25 50 03 49
>3a5308		00 80 10 eb a9 ff ff 85 23 85 25 28 60 08 c2 20
>3a5318		a5 2b c5 25 d0 0f a5 29 c5 23 d0 09 a9 ff ff 85
>3a5328		23 85 25 80 04 64 23 64 25 28 60 08 c2 20 a5 2b
>3a5338		c5 25 d0 0c a5 29 c5 23 d0 06 64 23 64 25 80 07
>3a5348		a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 23 c5 29
>3a5358		d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85 25 80
>3a5368		13 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80 30 e8
>3a5378		64 23 64 25 28 60 08 c2 20 a5 23 c5 29 d0 0f a5
>3a5388		25 c5 2b d0 09 a9 ff ff 85 23 85 25 80 13 a5 23
>3a5398		c5 29 a5 25 e5 2b 50 03 49 00 80 30 e8 64 23 64
>3a53a8		25 28 60 08 c2 20 8f 12 01 00 8a 8f 10 01 00 af
>3a53b8		16 01 00 aa af 14 01 00 28 60 08 e2 20 a9 03 8f
>3a53c8		00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2
>3a53d8		af a5 25 8f 0a e2 af a9 00 00 8f 0c e2 af a9 00
>3a53e8		01 8f 0e e2 af ea ea ea ea ea ea af 08 e2 af 85
>3a53f8		23 af 0a e2 af 85 25 a9 01 00 85 27 28 60 08 e2
>3a5408		20 a9 40 8f 00 e2 af 80 09 08 e2 20 a9 48 8f 00
>3a5418		e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af
>3a5428		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>3a5438		e2 af ea ea ea e2 20 af 06 e2 af 29 07 d0 10 c2
>3a5448		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>3a5458		f2 54 80 f9 08 e2 20 a9 01 8f 01 e2 af a9 00 8f
>3a5468		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>3a5478		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>3a5488		e2 20 af 05 e2 af 29 17 d0 10 c2 20 af 08 e2 af
>3a5498		85 23 af 0a e2 af 85 25 28 60 20 f2 54 80 f9 08
>3a54a8		e2 20 a9 00 8f 01 e2 af a9 00 8f 00 e2 af c2 20
>3a54b8		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c
>3a54c8		e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af 04 e2
>3a54d8		af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2
>3a54e8		af 85 25 28 60 20 f2 54 80 f9 e2 20 89 01 f0 20
>3a54f8		00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0c 8f
>3a5508		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>3a5518		89 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5528		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>3a5538		dc d4 08 89 04 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a5548		28 e2 20 a9 0e 8f d3 08 00 c2 20 29 ff 00 20 7f
>3a5558		1c e2 20 dc d4 08 60 08 e2 20 a9 00 8f 01 e2 af
>3a5568		a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9
>3a5578		00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a
>3a5588		e2 af ea ea ea e2 20 af 04 e2 af 89 07 f0 01 00
>3a5598		c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60
>3a55a8		08 e2 20 a9 01 8f 01 e2 af a9 02 8f 00 e2 af c2
>3a55b8		20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5
>3a55c8		23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08
>3a55d8		e2 af 85 23 af 0a e2 af 85 25 28 60 08 c2 20 a5
>3a55e8		23 d0 0a a5 25 29 ff 7f d0 03 28 38 60 28 18 60
>3a55f8		08 e2 20 38 e9 30 20 2c 04 c2 20 29 ff 00 18 65
>3a5608		23 85 23 a5 25 69 00 00 85 25 28 60 08 e2 20 c9
>3a5618		30 90 04 c9 3a 90 1c c9 61 90 04 c9 67 90 0a c9
>3a5628		41 90 04 c9 47 90 07 80 31 38 e9 57 80 08 38 e9
>3a5638		37 80 03 38 e9 30 06 23 26 24 26 25 26 26 06 23
>3a5648		26 24 26 25 26 26 06 23 26 24 26 25 26 26 06 23
>3a5658		26 24 26 25 26 26 05 23 85 23 28 60 08 e2 20 c9
>3a5668		30 f0 06 c9 31 f0 0a 80 0f c2 20 06 23 26 25 80
>3a5678		07 c2 20 38 26 23 26 25 28 60 08 e2 30 a5 61 f0
>3a5688		0d aa a5 69 d0 15 a9 00 8f 01 e2 af 80 15 e2 20
>3a5698		a9 03 8f 01 e2 af ea ea ea 80 62 e2 20 a9 01 8f
>3a56a8		01 e2 af e2 20 a9 43 8f 00 e2 af c2 20 a9 00 10
>3a56b8		8f 08 e2 af a9 00 00 8f 0a e2 af c2 20 a9 00 a0
>3a56c8		8f 0c e2 af a9 00 00 8f 0e e2 af ea ea ea ca f0
>3a56d8		2c af 08 e2 af 8f 0c 08 00 af 0a e2 af 8f 0e 08
>3a56e8		00 e2 20 a9 42 8f 00 e2 af c2 20 af 0c 08 00 8f
>3a56f8		08 e2 af af 0e 08 00 8f 0a e2 af 80 be c2 20 af
>3a5708		08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9 01 85
>3a5718		27 28 60 08 c2 20 a5 5d 85 23 a5 5f 85 25 20 34
>3a5728		59 c2 20 a5 23 85 29 a5 25 85 2b c2 20 a5 59 85
>3a5738		23 a5 5b 85 25 20 5c 54 c2 20 a5 55 85 29 a5 57
>3a5748		85 2b 20 11 54 c2 20 a5 23 85 29 a5 25 85 2b 20
>3a5758		82 56 20 a7 54 c2 20 a5 65 f0 07 a5 25 09 00 80
>3a5768		85 25 e2 20 a9 01 85 27 28 60 5a 08 c2 30 64 23
>3a5778		64 25 64 55 64 57 64 65 64 59 64 5b a9 01 00 85
>3a5788		5d 64 5f 64 61 64 63 64 69 e2 20 a0 00 00 b7 00
>3a5798		c9 2b f0 33 c9 2d f0 2b c9 26 f0 3a 20 ad 03 90
>3a57a8		03 82 ac 00 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a57b8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>3a57c8		dc d4 08 a9 01 85 65 c8 b7 00 c9 26 f0 08 20 ad
>3a57d8		03 90 d1 82 7a 00 c8 b7 00 c9 68 f0 0e c9 48 f0
>3a57e8		0a c9 62 f0 4c c9 42 f0 48 80 b9 c8 b7 00 20 be
>3a57f8		03 b0 02 80 af 20 14 56 c8 b7 00 20 be 03 b0 f5
>3a5808		e2 20 a5 65 f0 11 c2 20 38 a9 00 00 e5 23 85 23
>3a5818		a9 00 00 e5 25 85 25 e2 20 a9 00 85 27 c2 20 18
>3a5828		98 65 00 85 00 a5 02 69 00 00 85 02 e2 20 28 7a
>3a5838		60 c8 b7 00 c9 30 f0 07 c9 31 f0 03 82 65 ff 20
>3a5848		64 56 c8 b7 00 c9 30 f0 f6 c9 31 f0 f2 82 b0 ff
>3a5858		20 f8 55 c8 b7 00 c9 2e f0 08 20 ad 03 b0 f1 82
>3a5868		9e ff c2 20 20 34 59 c2 20 a5 23 85 55 a5 25 85
>3a5878		57 64 23 64 25 e2 20 80 36 20 f8 55 c2 20 a5 5f
>3a5888		8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01 00 85
>3a5898		5f a5 5d 8f 00 01 00 a9 0a 00 8f 02 01 00 af 04
>3a58a8		01 00 85 5d af 06 01 00 18 65 5f 85 5f e2 20 c8
>3a58b8		b7 00 c9 65 f0 24 c9 45 f0 20 20 ad 03 b0 ba c2
>3a58c8		20 20 34 59 c2 20 a5 23 85 59 a5 25 85 5b 64 23
>3a58d8		64 25 20 1b 57 e2 20 82 43 ff c2 20 20 34 59 c2
>3a58e8		20 a5 23 85 59 a5 25 85 5b 64 23 64 25 e2 20 c8
>3a58f8		b7 00 c9 2b f0 10 c9 2d f0 08 20 ad 03 b0 12 82
>3a5908		a2 fe a9 01 85 69 c8 b7 00 20 ad 03 b0 03 82 93
>3a5918		fe 20 f8 55 c8 b7 00 20 ad 03 b0 f5 c2 20 a5 23
>3a5928		85 61 a5 25 85 63 20 1b 57 82 f1 fe 08 20 c2 53
>3a5938		28 60 08 c2 20 a9 31 5c 85 29 a9 3a 00 85 2b e2
>3a5948		20 a9 01 85 2d c2 20 20 0d 5a c9 ff ff d0 0c a9
>3a5958		00 00 8d 23 08 8d 25 08 82 a1 00 f4 00 00 f4 00
>3a5968		00 f4 00 00 e2 20 ad 26 08 29 80 83 01 ad 25 08
>3a5978		2a ad 26 08 2a 83 02 a9 00 83 06 ad 25 08 09 80
>3a5988		83 05 ad 24 08 83 04 ad 23 08 83 03 a3 02 c9 96
>3a5998		f0 3a 90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a59a8		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>3a59b8		dc d4 08 c2 20 a3 05 4a 83 05 a3 03 6a 83 03 e2
>3a59c8		20 a3 02 1a 83 02 c9 96 f0 02 80 e7 a3 01 f0 1b
>3a59d8		c2 20 a3 03 49 ff ff 18 69 01 00 8d 23 08 a3 05
>3a59e8		49 ff ff 69 00 00 8d 25 08 80 0c c2 20 a3 03 8d
>3a59f8		23 08 a3 05 8d 25 08 c2 20 68 68 68 e2 20 a9 00
>3a5a08		8d 27 08 28 60 da 08 c2 20 a5 25 48 a5 23 48 20
>3a5a18		06 54 20 e4 55 b0 11 a5 25 89 00 80 d0 05 a9 01
>3a5a28		00 80 08 a9 ff ff 80 03 a9 00 00 fa 86 23 fa 86
>3a5a38		25 28 fa 60 08 c2 30 20 0d 5a c9 ff ff d0 05 20
>3a5a48		df 04 80 03 20 f1 04 28 60 08 c2 30 20 0d 5a c9
>3a5a58		01 00 d0 05 20 df 04 80 03 20 f1 04 28 60 08 c2
>3a5a68		30 20 0d 5a c9 00 00 d0 05 20 df 04 80 03 20 f1
>3a5a78		04 28 60 08 c2 30 20 0d 5a c9 01 00 f0 05 20 df
>3a5a88		04 80 03 20 f1 04 28 60 08 c2 30 20 0d 5a c9 ff
>3a5a98		ff f0 05 20 df 04 80 03 20 f1 04 28 60 08 c2 30
>3a5aa8		20 0d 5a c9 00 00 f0 05 20 df 04 80 03 20 f1 04
>3a5ab8		28 60 08 e2 20 97 23 c8 a9 00 97 23 28 60 da 08
>3a5ac8		e2 20 c9 80 90 0a 48 a9 2d 20 ba 5a 68 49 ff 1a
>3a5ad8		c2 30 29 ff 00 c9 64 00 90 0e a2 64 00 20 ab 53
>3a5ae8		18 69 30 00 20 ba 5a 8a a2 0a 00 20 ab 53 18 69
>3a5af8		30 00 20 ba 5a 8a 18 69 30 00 20 ba 5a 28 fa 60
>3a5b08		08 e2 20 c2 10 a0 00 00 b7 23 f0 03 c8 80 f9 28
>3a5b18		60 08 e2 20 c2 10 f4 00 00 f4 00 00 f4 00 00 20
>3a5b28		e4 55 90 19 20 8e 13 e2 20 a0 00 00 a9 20 97 16
>3a5b38		c8 a9 30 97 16 c8 a9 00 97 16 82 ce 00 e2 20 a5
>3a5b48		26 10 08 29 7f 85 26 a9 01 83 01 c2 20 a9 00 00
>3a5b58		83 03 c2 20 af 2d 5c 3a 85 29 af 2f 5c 3a 85 2b
>3a5b68		20 0d 5a 89 00 80 d0 12 20 a8 55 a3 03 1a 83 03
>3a5b78		20 0d 5a c9 ff ff f0 12 80 ee 20 5f 55 a3 03 3a
>3a5b88		83 03 20 0d 5a c9 ff ff f0 f0 e2 30 a5 25 0a a5
>3a5b98		26 2a 83 05 38 a9 96 e3 05 aa f0 0f a5 25 09 80
>3a5ba8		85 25 46 25 66 24 66 23 ca d0 f7 c2 10 e2 20 64
>3a5bb8		26 a9 00 85 27 a3 01 f0 11 c2 20 38 a9 00 00 e5
>3a5bc8		23 85 23 a9 00 00 e5 25 85 25 20 ed 13 c2 20 a5
>3a5bd8		16 85 23 a5 18 85 25 20 08 5b e2 20 c8 a9 00 97
>3a5be8		23 88 88 b7 23 c8 97 23 c0 02 00 d0 f4 a9 2e 97
>3a5bf8		23 e2 20 18 a3 03 69 05 83 06 f0 19 20 08 5b a9
>3a5c08		45 20 ba 5a a3 06 20 c6 5a 80 0a c2 20 a5 16 85
>3a5c18		23 a5 18 85 25 e2 20 a9 02 85 27 c2 20 3b 18 69
>3a5c28		06 00 1b 28 60 00 50 c3 47 00 00 80 3f f3 04 b5
>3a5c38		3f f3 04 35 3f 5a e2 20 a9 48 8f 00 e2 af c2 20
>3a5c48		bd 00 00 8f 08 e2 af bd 02 00 8f 0a e2 af a0 04
>3a5c58		00 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af c2 20 af
>3a5c68		23 08 00 8f 0c e2 af af 25 08 00 8f 0e e2 af ea
>3a5c78		ea ea af 08 e2 af 48 af 0a e2 af 8f 0a e2 af 68
>3a5c88		8f 08 e2 af e2 20 a9 02 8f 01 e2 af c2 20 bd 00
>3a5c98		00 8f 0c e2 af bd 02 00 8f 0e e2 af ea ea ea 88
>3a5ca8		f0 14 af 08 e2 af 48 af 0a e2 af 8f 0a e2 af 68
>3a5cb8		8f 08 e2 af 80 9b af 08 e2 af 8f 23 08 00 af 0a
>3a5cc8		e2 af 8f 25 08 00 7a 60 e2 20 a9 00 8f 00 e2 af
>3a5cd8		a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af 8f 0c
>3a5ce8		e2 af af 25 08 00 8f 0a e2 af 8f 0e e2 af ea ea
>3a5cf8		ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 e2 20
>3a5d08		a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 a5 23
>3a5d18		8f 0c e2 af af 25 08 00 8f 0e e2 af af 4c 61 3a
>3a5d28		8f 08 e2 af af 4e 61 3a 8f 0a e2 af ea ea ea af
>3a5d38		08 e2 af 85 23 af 0a e2 af 85 25 60 a2 00 00 a5
>3a5d48		23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08 e2 af a5
>3a5d58		25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af 0a
>3a5d68		e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10 09 29 7f
>3a5d78		85 26 a9 01 48 80 03 a9 00 48 a9 40 8f 00 e2 af
>3a5d88		a9 02 8f 01 e2 af c2 30 af 60 61 3a 85 29 8f 0c
>3a5d98		e2 af af 62 61 3a 85 2b 8f 0e e2 af 20 44 5d e2
>3a5da8		20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5 25 8f 0a
>3a5db8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 29
>3a5dc8		ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5 23 df 64
>3a5dd8		61 3a a5 25 ff 66 61 3a 90 2c bf 60 61 3a 8f 08
>3a5de8		e2 af bf 62 61 3a 8f 0a e2 af a5 23 8f 0c e2 af
>3a5df8		a5 25 8f 0e e2 af ea ea ea af 08 e2 af 85 23 af
>3a5e08		0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8 e0 0c 00
>3a5e18		d0 ba 98 aa 7a 60 08 c2 30 48 da 20 70 5d fa 7a
>3a5e28		28 60 08 c2 30 48 da 20 d0 5c 8b e2 20 a9 3a 48
>3a5e38		ab c2 20 a2 00 61 20 3d 5c a9 01 00 8f 27 08 00
>3a5e48		ab fa 68 28 60 08 c2 30 48 da a5 23 85 29 a5 25
>3a5e58		85 2b 20 d0 5c 8b e2 20 a9 3a 48 ab c2 20 a2 14
>3a5e68		61 20 3d 5c ab 20 a7 54 fa 68 28 60 08 c2 30 48
>3a5e78		da a5 23 85 29 a5 25 85 2b 20 d0 5c 8b e2 20 a9
>3a5e88		3a 48 ab c2 20 a2 28 61 20 3d 5c ab 20 a7 54 fa
>3a5e98		68 28 60 08 c2 30 48 da e2 20 a9 40 8f 00 e2 af
>3a5ea8		a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5 25
>3a5eb8		8f 0a e2 af af 4c 61 3a 8f 0c e2 af af 4e 61 3a
>3a5ec8		8f 0e e2 af ea ea ea af 08 e2 af 85 0c af 0a e2
>3a5ed8		af 85 0e e2 20 a9 48 8f 00 e2 af c2 20 ea ea ea
>3a5ee8		af 08 e2 af 85 10 af 0a e2 af 85 12 e2 20 a9 01
>3a5ef8		8f 01 e2 af c2 20 a5 0c 8f 08 e2 af a5 0e 8f 0a
>3a5f08		e2 af a5 10 8f 0c e2 af a5 12 8f 0e e2 af ea ea
>3a5f18		ea af 08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9
>3a5f28		08 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f
>3a5f38		08 e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af
>3a5f48		85 29 af 0a e2 af 85 2b 20 d0 5c 8b e2 20 a9 3a
>3a5f58		48 ab c2 20 a2 3c 61 20 3d 5c a9 01 00 8f 27 08
>3a5f68		00 8f 27 08 00 20 a7 54 ab fa 68 28 60 08 c2 30
>3a5f78		48 da 20 70 5d 20 cd 5d da 8a 29 01 00 d0 05 20
>3a5f88		4d 5e 80 03 20 2a 5e fa 8a 29 04 00 f0 0a e2 20
>3a5f98		a5 26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30 48
>3a5fa8		da 20 70 5d 20 cd 5d da 8a 29 01 00 d0 05 20 2a
>3a5fb8		5e 80 03 20 4d 5e fa 8a 29 02 00 f0 0a e2 20 a5
>3a5fc8		26 09 80 85 26 c2 20 fa 68 28 60 08 c2 30 48 da
>3a5fd8		20 70 5d 20 cd 5d 20 74 5e 8a 29 01 00 f0 03 20
>3a5fe8		06 5d 8a e2 20 4a 4a 69 00 29 01 f0 06 a5 26 09
>3a5ff8		80 85 26 c2 20 fa 68 28 60 08 c2 30 48 da 5a a5
>3a6008		25 10 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6018		17 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc
>3a6028		d4 08 c2 30 a5 23 cf 4c 61 3a a5 25 cf 4e 61 3a
>3a6038		b0 04 20 06 5d 18 a9 00 00 a8 2a 48 e2 20 a9 00
>3a6048		8f 00 e2 af a9 01 8f 01 e2 af c2 20 af 50 61 3a
>3a6058		85 29 8f 0c e2 af af 52 61 3a 85 2b 8f 0e e2 af
>3a6068		20 44 5d 8a f0 07 0a 0a 0a 0a 0a 0a a8 af 54 61
>3a6078		3a 85 29 8f 0c e2 af af 56 61 3a 85 2b 8f 0e e2
>3a6088		af 20 44 5d 8a f0 0b 0a 0a 0a 0a 85 29 18 98 65
>3a6098		29 a8 af 58 61 3a 85 29 8f 0c e2 af af 5a 61 3a
>3a60a8		85 2b 8f 0e e2 af 20 44 5d 8a f0 09 0a 0a 85 29
>3a60b8		18 98 65 29 a8 af 5c 61 3a 85 29 8f 0c e2 af af
>3a60c8		5e 61 3a 85 2b 8f 0e e2 af 20 44 5d 86 29 18 98
>3a60d8		65 29 a8 20 9b 5e a5 23 85 29 a5 25 85 2b 98 85
>3a60e8		23 64 25 20 34 59 20 11 54 68 d0 07 a5 25 09 00
>3a60f8		80 85 25 7a fa 68 28 60 01 0d d0 37 61 0b b6 ba
>3a6108		ab aa 2a 3d 00 00 00 bf 00 00 80 3f 1d ef 38 36
>3a6118		01 0d 50 b9 89 88 08 3c ab aa 2a be 00 00 80 3f
>3a6128		a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e ab aa aa 3e
>3a6138		00 00 80 3f 39 8e e3 3d 25 49 12 3e cd cc 4c 3e
>3a6148		ab aa aa 3e 00 00 80 3f c1 2c a1 6d 5f 97 07 4b
>3a6158		81 64 5a 42 54 f8 2d 40 db 0f c9 40 db 0f 49 40
>3a6168		db 0f c9 3f db 0f 49 3f 08 20 9c 11 c2 20 a9 01
>3a6178		00 85 23 a9 00 00 85 25 e2 20 af 00 4d 00 c2 20
>3a6188		29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00 4d 00 85
>3a6198		29 a9 00 00 85 2b 20 74 26 e8 e8 88 d0 eb c2 20
>3a61a8		a9 04 00 85 29 a9 00 00 85 2b 20 74 26 e2 20 af
>3a61b8		00 4d 00 85 0c a9 00 85 0d c2 20 06 0c 38 a5 23
>3a61c8		65 0c 85 23 a5 25 69 00 00 85 25 d0 29 e2 20 a5
>3a61d8		ea 09 80 a6 23 20 60 0f e2 20 af 00 4d 00 87 c0
>3a61e8		a0 01 00 a2 00 00 e2 20 bf 01 4d 00 97 c0 e4 8f
>3a61f8		f0 23 e8 c8 80 f0 08 c2 20 48 a9 00 08 5b 68 28
>3a6208		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a6218		e2 20 dc d4 08 e2 20 38 a5 c0 67 c0 85 08 a5 c1
>3a6228		69 00 85 09 a5 c2 69 00 85 0a 64 0b c2 20 a0 05
>3a6238		00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e 64 0f e2
>3a6248		20 a9 00 87 08 c2 20 18 a5 08 69 01 00 85 08 a5
>3a6258		0a 69 00 00 85 0a c5 0e d0 e5 a5 08 c5 0c d0 df
>3a6268		28 60 08 c2 20 64 08 64 0a e2 20 af 00 4d 00 85
>3a6278		8f 64 90 a2 01 00 e2 20 a7 c0 c5 8f f0 1f 08 c2
>3a6288		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a6298		c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 c9 01 f0
>3a62a8		3a a0 01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25
>3a62b8		64 26 b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29
>3a62c8		b0 68 20 74 26 c2 20 18 a5 08 65 23 85 08 a5 0a
>3a62d8		65 25 85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00
>3a62e8		4d 00 85 90 65 08 85 08 a5 09 69 00 85 09 c2 20
>3a62f8		a5 0a 69 00 00 85 0a c2 20 06 08 26 0a 06 08 26
>3a6308		0a e2 20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09
>3a6318		c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08
>3a6328		e2 20 a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00
>3a6338		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>3a6348		00 20 7f 1c e2 20 dc d4 08 08 20 9c 11 e2 20 a0
>3a6358		00 00 b7 c3 29 7f c5 27 d0 28 a5 27 48 c2 20 a5
>3a6368		25 48 a5 23 48 20 6a 62 68 85 23 68 85 25 e2 20
>3a6378		68 85 27 c2 20 a5 23 87 08 a0 02 00 a5 25 97 08
>3a6388		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a6398		8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4
>3a63a8		08 08 20 9c 11 f4 00 00 f4 00 00 e2 20 48 20 6a
>3a63b8		62 e2 20 68 c2 20 68 68 c2 20 a7 08 85 23 a0 02
>3a63c8		00 b7 08 85 25 e2 20 a0 00 00 b7 c3 29 7f 85 27
>3a63d8		28 60 da 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a63e8		30 a5 25 89 f0 ff d0 29 89 0f 00 d0 0c a5 23 89
>3a63f8		00 fc d0 05 20 87 43 80 2e a2 0a 00 46 25 66 23
>3a6408		ca d0 f9 20 87 43 e2 20 a9 4b 20 18 00 c2 20 80
>3a6418		16 a2 14 00 46 25 66 23 ca d0 f9 20 87 43 e2 20
>3a6428		a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08 c2 30 a9
>3a6438		00 00 8f b6 08 00 8f b8 08 00 e2 20 20 9f 20 c9
>3a6448		00 f0 08 20 2d 1b 20 95 05 80 11 c2 20 a9 00 00
>3a6458		85 23 85 25 e2 20 a9 02 85 27 c2 20 20 94 65 22
>3a6468		08 11 00 b0 22 20 45 66 08 c2 20 48 a9 00 08 5b
>3a6478		68 28 e2 20 a9 10 8f d3 08 00 c2 20 29 ff 00 20
>3a6488		7f 1c e2 20 dc d4 08 20 89 02 08 c2 20 48 a9 20
>3a6498		03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03 82 a9 00
>3a64a8		c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89 08 f0 03
>3a64b8		82 a9 00 89 02 f0 03 82 83 00 29 0f c9 0f d0 03
>3a64c8		82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0 08 00 d0
>3a64d8		f5 a9 20 20 18 00 a0 08 00 b7 18 20 18 00 c8 c0
>3a64e8		0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7 18 89 10
>3a64f8		d0 1e c2 20 a0 1c 00 b7 18 8f 23 08 00 c8 c8 b7
>3a6508		18 8f 25 08 00 e2 20 a9 00 8f 27 08 00 20 da 63
>3a6518		a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0 1c 89 01
>3a6528		f0 05 a9 52 20 18 00 89 04 f0 05 a9 53 20 18 00
>3a6538		89 10 f0 05 a9 44 20 18 00 ea 20 89 02 20 a0 02
>3a6548		22 0c 11 00 90 03 82 41 ff 20 45 66 08 c2 20 48
>3a6558		a9 00 08 5b 68 28 20 83 1f 28 2b 60 08 c2 20 48
>3a6568		a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0 cf a9 5b
>3a6578		20 18 00 a0 00 00 b7 18 c9 20 f0 09 20 18 00 c8
>3a6588		c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b 08 08 c2
>3a6598		20 48 a9 20 03 5b 68 28 c2 30 a9 73 f2 85 20 a9
>3a65a8		3a 00 85 22 a0 00 00 e2 20 a9 00 97 20 c8 c0 1e
>3a65b8		00 d0 f8 c2 20 a9 73 f0 8f 81 f2 3a a9 3a 00 8f
>3a65c8		83 f2 3a af 23 08 00 8f 75 f2 3a af 25 08 00 8f
>3a65d8		77 f2 3a 28 2b 60 08 c2 30 20 5f 1f 20 2d 1b 20
>3a65e8		95 05 20 94 65 e2 20 a9 2c 85 37 20 80 20 b0 0f
>3a65f8		c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00 80 17 20
>3a6608		3e 1f 20 2d 1b 20 03 05 c2 20 a5 23 8f 54 03 00
>3a6618		a5 25 8f 56 03 00 22 18 11 00 b0 1f 08 c2 20 48
>3a6628		a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2 20
>3a6638		29 ff 00 20 7f 1c e2 20 dc d4 08 28 60 8b 0b 08
>3a6648		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>3a6658		48 ab 68 28 e2 20 af 2e 03 00 85 23 a9 00 85 24
>3a6668		85 25 85 26 a9 00 85 27 85 ea a9 3a 85 e9 c2 20
>3a6678		a9 a8 66 85 e7 20 b3 50 e2 20 af 20 03 00 85 23
>3a6688		a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea a9 3a
>3a6698		85 e9 c2 20 a9 b0 66 85 e7 20 b3 50 28 2b ab 60
>3a66a8		44 4f 53 53 54 41 54 00 42 49 4f 53 53 54 41 54
>3a66b8		00 08 c2 30 20 5f 1f 20 2d 1b 20 95 05 a5 23 8f
>3a66c8		60 03 00 a5 25 8f 62 03 00 a9 ff ff 8f 54 03 00
>3a66d8		8f 56 03 00 22 24 11 00 b0 25 20 7f 1c 20 45 66
>3a66e8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3
>3a66f8		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 20
>3a6708		7f 1c 28 60 08 c2 30 20 5f 1f 20 2d 1b 20 95 05
>3a6718		20 94 65 a9 00 00 8f 54 03 00 a9 01 00 8f 56 03
>3a6728		00 20 84 4d 22 18 11 00 b0 22 20 45 66 08 c2 20
>3a6738		48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08 00 c2
>3a6748		20 29 ff 00 20 7f 1c e2 20 dc d4 08 20 45 66 c2
>3a6758		20 a2 12 00 18 bf 73 f2 3a 69 00 00 85 92 bf 75
>3a6768		f2 3a 69 01 00 85 94 e2 20 a9 00 87 92 c2 20 a9
>3a6778		00 00 85 7a a9 01 00 85 7c a2 00 00 e2 20 a7 7a
>3a6788		f0 2a c9 0d f0 12 c9 0a f0 04 9d 00 4f e8 c2 20
>3a6798		e6 7a d0 e8 e6 7c 80 e4 e2 20 a9 00 9d 00 4f 20
>3a67a8		ab 25 c2 20 e6 7a d0 d1 e6 7c 80 cd e0 00 00 f0
>3a67b8		0a e2 20 a9 00 9d 00 4f 20 ab 25 28 60 08 c2 30
>3a67c8		20 5f 1f 20 2d 1b 20 95 05 20 94 65 e2 20 a9 2c
>3a67d8		20 4b 20 c2 20 20 2d 1b 20 03 05 a5 23 8f 50 03
>3a67e8		00 a5 25 8f 52 03 00 e2 20 a9 2c c2 20 20 4b 20
>3a67f8		20 2d 1b 20 03 05 a5 23 8f 58 03 00 a5 25 8f 5a
>3a6808		03 00 22 1c 11 00 b0 22 20 45 66 08 c2 20 48 a9
>3a6818		00 08 5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20 29
>3a6828		ff 00 20 7f 1c e2 20 dc d4 08 20 45 66 28 60 da
>3a6838		5a 08 a2 00 00 a0 00 00 e2 20 b7 23 9d 00 04 f0
>3a6848		04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20 5f 1f 20
>3a6858		2d 1b 20 95 05 20 94 65 a9 00 00 85 a6 e2 20 a9
>3a6868		01 85 a8 a9 20 85 b4 c2 20 a9 00 00 85 ab a9 ff
>3a6878		ff 85 a9 c2 20 a9 00 00 85 55 85 57 a9 ff ff 85
>3a6888		59 a9 ff 7f 85 5b 20 f0 16 e2 20 a9 80 85 b4 c2
>3a6898		20 c6 ab 18 a9 00 00 8f 50 03 00 65 ab 8f 58 03
>3a68a8		00 a9 01 00 8f 52 03 00 69 00 00 8f 5a 03 00 22
>3a68b8		1c 11 00 b0 22 20 45 66 08 c2 20 48 a9 00 08 5b
>3a68c8		68 28 e2 20 a9 12 8f d3 08 00 c2 20 29 ff 00 20
>3a68d8		7f 1c e2 20 dc d4 08 20 45 66 28 60 08 c2 30 20
>3a68e8		5f 1f 20 2d 1b 20 95 05 20 37 68 22 04 11 00 b0
>3a68f8		22 20 45 66 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a6908		a9 13 8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20
>3a6918		dc d4 08 20 45 66 28 60 da 08 e2 20 c9 61 90 08
>3a6928		c9 7b b0 04 29 df 80 13 c9 20 90 13 a2 00 00 df
>3a6938		4b 69 3a f0 0a e8 e0 0f 00 d0 f4 28 38 fa 6b 28
>3a6948		18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f 5c 5b 5d
>3a6958		7c 22 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20
>3a6968		2d 1b 20 95 05 20 37 68 22 10 11 00 b0 22 20 45
>3a6978		66 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 14 8f
>3a6988		d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08
>3a6998		e2 20 a9 2c 20 4b 20 c2 20 20 2d 1b 20 95 05 ad
>3a69a8		38 03 85 08 ad 3a 03 85 0a e2 20 a2 00 00 a9 20
>3a69b8		95 7e e8 e0 0b 00 d0 f8 a2 00 00 a0 00 00 b7 23
>3a69c8		f0 76 c9 2e f0 39 22 20 69 3a b0 1f 08 c2 20 48
>3a69d8		a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20
>3a69e8		29 ff 00 20 7f 1c e2 20 dc d4 08 95 7e c8 e8 c0
>3a69f8		08 00 d0 ca b7 23 f0 40 c9 2e f0 03 c8 80 f5 c8
>3a6a08		a2 08 00 b7 23 f0 31 22 20 69 3a b0 22 20 45 66
>3a6a18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a6a28		08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4 08 95
>3a6a38		7e c8 e8 c0 0c 00 d0 cb a2 00 00 a0 00 00 b5 7e
>3a6a48		97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00 b0 22 20
>3a6a58		45 66 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 15
>3a6a68		8f d3 08 00 c2 20 29 ff 00 20 7f 1c e2 20 dc d4
>3a6a78		08 20 45 66 28 60 08 08 c2 20 48 a9 00 08 5b 68
>3a6a88		28 c2 30 20 2d 1b 20 95 05 a5 23 8f 64 03 00 a5
>3a6a98		25 8f 66 03 00 e2 20 a9 2c 20 4b 20 c2 20 20 2d
>3a6aa8		1b 20 95 05 a5 23 8f 68 03 00 a5 25 8f 6a 03 00
>3a6ab8		22 30 11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a6ac8		e2 20 a9 16 8f d3 08 00 c2 20 29 ff 00 20 7f 1c
>3a6ad8		e2 20 dc d4 08 28 60 5c 9f 84 3a 5c f0 82 3a 5c
>3a6ae8		a0 84 3a 5c 1c 74 3a 5c 79 74 3a 5c ac 73 3a 5c
>3a6af8		32 73 3a 5c af 78 3a 5c 9d 6f 3a 5c ca 72 3a 5c
>3a6b08		85 72 3a 5c 0f 72 3a 5c ae 83 3a 5c ab 70 3a 5c
>3a6b18		fe 6e 3a 5c 29 84 3a 5c d9 6f 3a 5c a2 84 3a 5c
>3a6b28		9b 84 3a 5c c8 71 3a 5c a3 84 3a 18 fb c2 20 a9
>3a6b38		ff fe 1b 58 5c 40 6b 3a c2 30 22 fe 6e 3a 20 08
>3a6b48		00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 17
>3a6b58		04 ab 22 e3 6a 3a 22 eb 6a 3a 80 e2 08 8b e2 20
>3a6b68		a9 3a 48 ab c2 10 a2 77 6b 20 16 03 ab 28 6b 41
>3a6b78		20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>3a6b88		6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>3a6b98		20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>3a6ba8		72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>3a6bb8		65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>3a6bc8		0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>3a6bd8		63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>3a6be8		0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>3a6bf8		5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>3a6c08		61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>3a6c18		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>3a6c28		3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>3a6c38		20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>3a6c48		61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>3a6c58		73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>3a6c68		75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>3a6c78		69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>3a6c88		20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a6c98		61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a6ca8		20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>3a6cb8		74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a6cc8		48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>3a6cd8		3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>3a6ce8		20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>3a6cf8		73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>3a6d08		20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>3a6d18		22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>3a6d28		69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>3a6d38		65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>3a6d48		76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a6d58		0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>3a6d68		20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>3a6d78		65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>3a6d88		20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>3a6d98		3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>3a6da8		4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>3a6db8		20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a6dc8		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a6dd8		53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>3a6de8		20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>3a6df8		3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>3a6e08		3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a6e18		74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>3a6e28		20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>3a6e38		68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>3a6e48		79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>3a6e58		65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>3a6e68		61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>3a6e78		73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>3a6e88		74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>3a6e98		20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>3a6ea8		5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>3a6eb8		20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a6ec8		0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>3a6ed8		68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>3a6ee8		0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a6ef8		a5 0d 85 4e 28 6b 20 e4 00 08 e2 20 48 a9 3a 48
>3a6f08		ab 68 28 a2 e0 84 20 16 03 e2 20 a9 3b 20 18 00
>3a6f18		a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68
>3a6f28		28 a0 03 00 a2 42 02 20 99 02 c2 20 a9 20 00 20
>3a6f38		18 00 af 44 02 00 20 26 03 a9 20 00 20 18 00 af
>3a6f48		46 02 00 20 26 03 a9 20 00 20 18 00 af 48 02 00
>3a6f58		20 26 03 a9 20 00 20 18 00 af 4a 02 00 20 26 03
>3a6f68		a9 20 00 20 18 00 af 4e 02 00 20 40 03 a9 20 00
>3a6f78		20 18 00 20 18 00 af 4c 02 00 20 26 03 a9 20 00
>3a6f88		20 18 00 08 e2 20 ad 4f 02 22 f9 81 3a 28 20 89
>3a6f98		02 20 89 02 6b 08 0b 08 c2 20 48 a9 48 08 5b 68
>3a6fa8		28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2
>3a6fb8		20 a5 0d c5 11 d0 06 20 89 02 2b 28 6b c2 20 18
>3a6fc8		a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80
>3a6fd8		d0 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5
>3a6fe8		0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7
>3a6ff8		0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0
>3a7008		03 4c 90 70 c2 20 18 a5 0d 69 01 00 85 0d e2 20
>3a7018		a5 0e 69 00 85 0e c2 20 18 a5 15 69 01 00 85 15
>3a7028		e2 20 a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5
>3a7038		0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19
>3a7048		65 15 85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11
>3a7058		87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02
>3a7068		80 26 c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12
>3a7078		e9 00 85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20
>3a7088		a5 16 e9 00 85 16 80 c4 20 89 02 2b 28 6b 08 e2
>3a7098		20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b
>3a70a8		28 18 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28
>3a70b8		e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01
>3a70c8		90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f
>3a70d8		69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34
>3a70e8		80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34
>3a70f8		69 00 85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2
>3a7108		20 a5 34 85 1b e2 20 a7 19 22 96 70 3a b0 02 a9
>3a7118		3f 99 7e 08 c2 20 18 a5 19 69 01 00 85 19 e2 20
>3a7128		a5 1b 69 00 85 1b c8 c0 08 00 90 db a9 00 99 7e
>3a7138		08 a9 3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20
>3a7148		40 03 a9 3a 20 18 00 c2 20 a5 32 20 26 03 c2 20
>3a7158		a9 08 00 85 47 e2 20 a9 20 20 18 00 a7 32 20 40
>3a7168		03 22 d8 81 3a e2 20 c6 47 d0 ea a9 20 20 18 00
>3a7178		a9 20 20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2
>3a7188		7e 08 20 16 03 20 89 02 20 a0 02 a5 34 c5 13 90
>3a7198		0f c2 20 a5 32 c5 11 90 07 20 89 02 2b ab 28 6b
>3a71a8		4c fc 70 08 8d 92 08 e2 20 bd 00 00 99 00 00 ad
>3a71b8		92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08 80 eb 28 6b
>3a71c8		08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2 20
>3a71d8		48 a9 00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85
>3a71e8		34 e2 20 a5 31 3a 85 47 a2 59 08 a0 7e 08 22 ab
>3a71f8		71 3a a0 00 00 b9 7e 08 87 32 22 d8 81 3a c8 c4
>3a7208		47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48
>3a7218		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a7228		c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0 7e 08 22 ab
>3a7238		71 3a c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34
>3a7248		c5 13 d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7
>3a7258		32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85
>3a7268		4a a5 34 85 4c 22 82 7c 3a e2 20 a9 20 20 18 00
>3a7278		22 d8 81 3a 80 c6 20 89 02 ab 2b 28 6b 08 c2 20
>3a7288		48 a9 48 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5
>3a7298		0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa
>3a72a8		af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2
>3a72b8		20 a9 3a 48 a9 72 48 a9 c5 48 4c fc 72 ea 5c 04
>3a72c8		00 3a 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>3a72d8		f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00
>3a72e8		af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af
>3a72f8		4c 02 00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a2
>3a7308		08 00 af 42 02 00 8f a5 08 00 af 41 02 00 8f a4
>3a7318		08 00 af 40 02 00 8f a3 08 00 af 4f 02 00 48 c2
>3a7328		20 af 44 02 00 28 5c a2 08 00 08 0b 8b 08 e2 20
>3a7338		48 a9 3a 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68
>3a7348		28 c2 10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2
>3a7358		20 a5 15 85 47 80 11 c2 20 a9 01 00 85 47 80 08
>3a7368		a2 a4 84 20 16 03 80 35 a5 0d 85 4a a5 0f 85 4c
>3a7378		a0 00 00 e2 20 a7 4a d7 11 f0 09 22 82 7c 3a a9
>3a7388		20 20 18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c
>3a7398		69 00 00 85 4c c8 c4 47 d0 d9 20 89 02 20 89 02
>3a73a8		ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68
>3a73b8		28 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0
>3a73c8		4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6
>3a73d8		11 8e 44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0
>3a73e8		2f a6 19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9
>3a73f8		05 f0 1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10
>3a7408		a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02
>3a7418		ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68
>3a7428		28 e2 20 c2 10 a2 00 00 bf 11 85 3a f0 18 c7 08
>3a7438		f0 03 e8 80 f3 c2 20 8a 0a aa bf 52 74 3a 8f 2f
>3a7448		08 00 22 76 74 3a ab 2b 28 6b ef 6a f7 6a fb 6a
>3a7458		ff 6a 03 6b 07 6b 0b 6b 0f 6b 13 6b 17 6b f3 6a
>3a7468		1b 6b 1f 6b 23 6b eb 6e 27 6b 2b 6b 64 6b 6c 2f
>3a7478		08 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a7488		a5 31 c9 02 b0 03 4c 1f 76 c2 20 a5 0d 85 32 a5
>3a7498		0f 85 34 c2 20 22 21 78 3a c9 ff ff f0 10 85 54
>3a74a8		e2 20 a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 89
>3a74b8		02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2 56 76
>3a74c8		20 16 03 4c 1f 76 20 89 02 08 e2 20 48 a9 3a 48
>3a74d8		ab 68 28 c2 10 a2 65 76 20 16 03 4c 1f 76 e2 20
>3a74e8		22 57 78 3a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b
>3a74f8		f0 5e c9 13 f0 04 c9 08 f0 00 22 4f 77 3a b0 03
>3a7508		4c e8 75 87 32 22 d8 81 3a 08 e2 20 48 a9 00 48
>3a7518		ab 68 28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5
>3a7528		4f c9 12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9
>3a7538		02 d0 03 4c 16 76 c2 20 29 ff 00 aa e2 20 bf 1e
>3a7548		81 3a c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71
>3a7558		c2 20 a5 54 c9 96 7d f0 26 c9 fa 7d f0 2a c9 7a
>3a7568		7d f0 1c c9 7e 7d f0 17 c9 86 7d f0 12 c9 6e 7d
>3a7578		f0 0d c9 82 7d f0 08 c9 6a 7d f0 03 4c 02 75 e2
>3a7588		20 a9 12 85 4f 4c 02 75 e2 20 a9 16 85 4f 4c 02
>3a7598		75 22 92 76 3a 90 60 c9 02 f0 0e 80 18 a0 02 00
>3a75a8		b9 98 08 97 56 22 d8 81 3a a0 01 00 b9 98 08 97
>3a75b8		56 22 d8 81 3a a0 00 00 b9 98 08 97 56 22 d8 81
>3a75c8		3a e2 20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86
>3a75d8		4a a6 34 86 4c 22 82 7c 3a a9 20 20 18 00 80 37
>3a75e8		20 89 02 08 e2 20 48 a9 3a 48 ab 68 28 c2 10 a2
>3a75f8		23 76 20 16 03 80 20 20 89 02 08 e2 20 48 a9 3a
>3a7608		48 ab 68 28 c2 10 a2 73 76 20 16 03 80 09 a5 4f
>3a7618		29 c0 d0 95 4c bd 75 2b ab 28 6b 41 64 64 72 65
>3a7628		73 73 69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64
>3a7638		65 66 69 6e 65 64 20 66 6f 72 20 74 68 61 74 20
>3a7648		69 6e 73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61
>3a7658		64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64
>3a7668		20 6f 70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74
>3a7678		69 76 65 20 6f 66 66 73 65 74 20 69 73 20 74 6f
>3a7688		6f 20 6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48
>3a7698		a9 48 08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20
>3a76a8		18 a5 32 69 02 00 80 08 c2 20 18 a5 32 69 01 00
>3a76b8		85 4a a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50
>3a76c8		a5 52 e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50
>3a76d8		30 0c a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51
>3a76e8		c9 ff d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06
>3a76f8		a5 52 d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04
>3a7708		2b 28 18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20
>3a7718		48 a9 48 08 5b 68 28 e2 20 a2 00 00 df 00 d0 3a
>3a7728		f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52
>3a7738		06 50 26 52 06 50 26 52 06 50 26 52 e2 20 8a 05
>3a7748		50 85 50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 48 08
>3a7758		5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 a5
>3a7768		4f 29 3f 85 4a c2 30 a2 00 00 a0 00 00 bd 1c 7e
>3a7778		f0 1b c5 54 d0 0d e2 20 b9 1e 80 29 3f c5 4a f0
>3a7788		07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b
>3a7798		6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2
>3a77a8		10 a0 00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19
>3a77b8		48 b7 36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0
>3a77c8		04 2b 28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0
>3a77d8		04 c9 30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0
>3a77e8		e4 c9 61 b0 02 80 de 29 df 22 10 77 3a 80 cb 0b
>3a77f8		08 c2 20 48 a9 48 08 5b 68 28 a0 00 00 e2 20 b7
>3a7808		03 f0 03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03
>3a7818		a5 05 69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 48
>3a7828		08 5b 68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 aa
>3a7838		7c 85 03 a9 3a 00 85 05 22 99 77 3a b0 0d 22 f7
>3a7848		77 3a a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08
>3a7858		0b 08 c2 20 48 a9 48 08 5b 68 28 c2 30 a5 15 85
>3a7868		36 a5 17 85 38 a9 36 81 85 03 a9 3a 00 85 05 22
>3a7878		99 77 3a b0 22 22 f7 77 3a c2 20 18 a5 03 69 01
>3a7888		00 85 03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df
>3a7898		c2 20 a9 ff ff 80 0d 22 f7 77 3a e2 20 a7 03 c2
>3a78a8		20 29 ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 48
>3a78b8		08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02
>3a78c8		b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11
>3a78d8		e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20
>3a78e8		a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11
>3a78f8		e2 20 a5 34 69 00 85 13 22 1b 79 3a e2 20 a5 34
>3a7908		c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20 89 02 2b
>3a7918		ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18
>3a7928		00 08 c2 20 48 a9 7a 08 5b 68 28 c2 20 a5 00 85
>3a7938		18 e2 20 a5 02 85 1a 22 82 7c 3a a9 20 20 18 00
>3a7948		c2 20 18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00
>3a7958		85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49
>3a7968		ff 2f 96 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 96
>3a7978		08 00 8f 96 08 00 68 c2 20 29 ff 00 0a aa bf 1c
>3a7988		7e 3a aa 22 fc 7b 3a e2 20 a7 00 aa bf 1e 80 3a
>3a7998		22 d8 81 3a 22 a9 79 3a 20 89 02 20 a0 02 2b 28
>3a79a8		6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c b7 79 e7
>3a79b8		79 02 7a 09 7a 2e 7a 35 7a 50 7a 72 7a 83 7a c0
>3a79c8		7a c8 7a d9 7a ea 7a f1 7a 16 7b 43 7b af 7a 94
>3a79d8		7a 61 7a 36 7b 40 7b 54 7b 83 7b 31 7b 94 7b a9
>3a79e8		28 20 18 00 22 ab 7b 3a a9 2c 20 18 00 a9 58 20
>3a79f8		18 00 a9 29 20 18 00 4c a5 7b 22 ab 7b 3a 4c a5
>3a7a08		7b e2 20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f
>3a7a18		4a 4a 2f 96 08 00 d0 07 22 b5 7b 3a 4c a5 7b 22
>3a7a28		ab 7b 3a 4c a5 7b 22 b5 7b 3a 4c a5 7b a9 28 20
>3a7a38		18 00 22 ab 7b 3a a9 29 20 18 00 a9 2c 20 18 00
>3a7a48		a9 59 20 18 00 4c a5 7b 22 ab 7b 3a a9 2c 20 18
>3a7a58		00 a9 58 20 18 00 4c a5 7b 22 ab 7b 3a a9 2c 20
>3a7a68		18 00 a9 59 20 18 00 4c a5 7b 22 b5 7b 3a a9 2c
>3a7a78		20 18 00 a9 59 20 18 00 4c a5 7b 22 b5 7b 3a a9
>3a7a88		2c 20 18 00 a9 58 20 18 00 4c a5 7b a9 28 20 18
>3a7a98		00 22 b5 7b 3a a9 2c 20 18 00 a9 58 20 18 00 a9
>3a7aa8		29 20 18 00 4c a5 7b a9 28 20 18 00 22 ab 7b 3a
>3a7ab8		a9 29 20 18 00 4c a5 7b a9 41 20 18 00 4c a9 7b
>3a7ac8		22 ab 7b 3a a9 2c 20 18 00 a9 53 20 18 00 4c a5
>3a7ad8		7b a9 5b 20 18 00 22 ab 7b 3a a9 5d 20 18 00 4c
>3a7ae8		a5 7b 22 c3 7b 3a 4c a9 7b a9 28 20 18 00 22 ab
>3a7af8		7b 3a a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18
>3a7b08		00 a9 2c 20 18 00 a9 59 20 18 00 4c a5 7b a9 5b
>3a7b18		20 18 00 22 ab 7b 3a a9 5d 20 18 00 a9 2c 20 18
>3a7b28		00 a9 59 20 18 00 4c a5 7b a0 02 00 80 03 a0 01
>3a7b38		00 22 29 7c 3a 4c a9 7b 4c a9 7b 22 c3 7b 3a a9
>3a7b48		2c 20 18 00 a9 58 20 18 00 4c a9 7b a9 23 20 18
>3a7b58		00 8b a5 02 48 ab a6 00 e8 a0 01 00 22 99 02 3a
>3a7b68		a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22
>3a7b78		99 02 3a ab 22 d8 81 3a 4c a5 7b a9 28 20 18 00
>3a7b88		22 b5 7b 3a a9 29 20 18 00 4c a5 7b a9 5b 20 18
>3a7b98		00 22 b5 7b 3a a9 5d 20 18 00 4c a5 7b 22 d8 81
>3a7ba8		3a 28 6b 08 e2 20 a7 00 20 40 03 28 6b 08 c2 30
>3a7bb8		a7 00 20 26 03 22 d8 81 3a 28 6b 08 8b 0b c2 30
>3a7bc8		5a 08 c2 20 48 a9 7a 08 5b 68 28 08 e2 20 48 a9
>3a7bd8		00 48 ab 68 28 e2 20 a0 00 00 a7 00 99 92 08 22
>3a7be8		d8 81 3a c8 c0 03 00 d0 f1 22 82 7c 3a c2 30 7a
>3a7bf8		2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 3a
>3a7c08		48 ab 68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18
>3a7c18		00 e8 bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28
>3a7c28		6b 08 0b 08 c2 20 48 a9 7a 08 5b 68 28 e2 20 c0
>3a7c38		02 00 f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e
>3a7c48		a9 ff 85 19 85 1a 80 16 a7 00 85 18 22 d8 81 3a
>3a7c58		a7 00 85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20
>3a7c68		38 a5 00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22
>3a7c78		82 7c 3a 22 d8 81 3a 2b 28 6b 08 0b c2 20 48 08
>3a7c88		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4c 20 40 03
>3a7c98		e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 26 03 68 2b
>3a7ca8		28 6b 4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44
>3a7cb8		43 00 53 54 41 00 4c 44 41 00 43 4d 50 00 53 42
>3a7cc8		43 00 41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f
>3a7cd8		52 00 53 54 58 00 4c 44 58 00 44 45 43 00 49 4e
>3a7ce8		43 00 42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44
>3a7cf8		59 00 43 50 59 00 43 50 58 00 42 52 4b 00 4a 53
>3a7d08		52 00 52 54 49 00 52 54 53 00 50 48 50 00 50 4c
>3a7d18		50 00 50 48 41 00 50 4c 41 00 44 45 59 00 54 41
>3a7d28		59 00 49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45
>3a7d38		43 00 43 4c 49 00 53 45 49 00 54 59 41 00 43 4c
>3a7d48		56 00 43 4c 44 00 53 45 44 00 54 58 41 00 54 58
>3a7d58		53 00 54 41 58 00 54 53 58 00 44 45 58 00 4e 4f
>3a7d68		50 00 42 50 4c 00 42 4d 49 00 42 56 43 00 42 56
>3a7d78		53 00 42 43 43 00 42 43 53 00 42 4e 45 00 42 45
>3a7d88		51 00 54 53 42 00 54 52 42 00 53 54 5a 00 42 52
>3a7d98		41 00 50 48 59 00 50 4c 59 00 50 48 58 00 50 4c
>3a7da8		58 00 50 48 44 00 50 4c 44 00 50 48 4b 00 52 54
>3a7db8		4c 00 50 48 42 00 50 4c 42 00 57 41 49 00 58 42
>3a7dc8		41 00 54 43 53 00 54 53 43 00 54 43 44 00 54 44
>3a7dd8		43 00 54 58 59 00 54 59 58 00 53 54 50 00 58 43
>3a7de8		45 00 43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45
>3a7df8		52 00 42 52 4c 00 52 45 50 00 53 45 50 00 4d 56
>3a7e08		50 00 4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d
>3a7e18		4c 00 00 00 02 7d aa 7c ea 7d aa 7c 8a 7d aa 7c
>3a7e28		ca 7c aa 7c 12 7d aa 7c ca 7c aa 7d 8a 7d aa 7c
>3a7e38		ca 7c aa 7c 6a 7d aa 7c aa 7c aa 7c 8e 7d aa 7c
>3a7e48		ca 7c aa 7c 32 7d aa 7c e6 7c ca 7d 8e 7d aa 7c
>3a7e58		ca 7c aa 7c 06 7d ae 7c ee 7d ae 7c ea 7c ae 7c
>3a7e68		ce 7c ae 7c 16 7d ae 7c ce 7c ae 7d ea 7c ae 7c
>3a7e78		ce 7c ae 7c 6e 7d ae 7c ae 7c ae 7c ea 7c ae 7c
>3a7e88		ce 7c ae 7c 36 7d ae 7c e2 7c ce 7d ea 7c ae 7c
>3a7e98		ce 7c ae 7c 0a 7d b2 7c f2 7d b2 7c 06 7e b2 7c
>3a7ea8		d2 7c b2 7c 1a 7d b2 7c d2 7c b2 7d ee 7c b2 7c
>3a7eb8		d2 7c b2 7c 72 7d b2 7c b2 7c b2 7c 0a 7e b2 7c
>3a7ec8		d2 7c b2 7c 3a 7d b2 7c 9a 7d d2 7d 16 7e b2 7c
>3a7ed8		d2 7c b2 7c 0e 7d b6 7c f6 7d b6 7c 92 7d b6 7c
>3a7ee8		d6 7c b6 7c 1e 7d b6 7c d6 7c b6 7d ee 7c b6 7c
>3a7ef8		d6 7c b6 7c 76 7d b6 7c b6 7c b6 7c 92 7d b6 7c
>3a7f08		d6 7c b6 7c 3e 7d b6 7c 9e 7d d6 7d ee 7c b6 7c
>3a7f18		d6 7c b6 7c 96 7d ba 7c fa 7d ba 7c f2 7c ba 7c
>3a7f28		da 7c ba 7c 22 7d ea 7c 52 7d ba 7d f2 7c ba 7c
>3a7f38		da 7c ba 7c 7a 7d ba 7c ba 7c ba 7c f2 7c ba 7c
>3a7f48		da 7c ba 7c 42 7d ba 7c 56 7d da 7d 92 7d ba 7c
>3a7f58		92 7d ba 7c f6 7c be 7c de 7c be 7c f6 7c be 7c
>3a7f68		de 7c be 7c 26 7d be 7c 5a 7d be 7d f6 7c be 7c
>3a7f78		de 7c be 7c 7e 7d be 7c be 7c be 7c f6 7c be 7c
>3a7f88		de 7c be 7c 46 7d be 7c 5e 7d de 7d f6 7c be 7c
>3a7f98		de 7c be 7c fa 7c c2 7c fe 7d c2 7c fa 7c c2 7c
>3a7fa8		e2 7c c2 7c 2a 7d c2 7c 62 7d c2 7d fa 7c c2 7c
>3a7fb8		e2 7c c2 7c 82 7d c2 7c c2 7c c2 7c 0e 7e c2 7c
>3a7fc8		e2 7c c2 7c 4a 7d c2 7c a2 7d e2 7d 16 7e c2 7c
>3a7fd8		e2 7c c2 7c fe 7c c6 7c 02 7e c6 7c fe 7c c6 7c
>3a7fe8		e6 7c c6 7c 2e 7d c6 7c 66 7d c6 7d fe 7c c6 7c
>3a7ff8		e6 7c c6 7c 86 7d c6 7c c6 7c c6 7c 12 7e c6 7c
>3a8008		e6 7c c6 7c 4e 7d c6 7c a6 7d e6 7d 06 7d c6 7c
>3a8018		e6 7c c6 7c 00 00 13 00 02 09 01 01 01 0a 13 82
>3a8028		08 13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06
>3a8038		08 13 03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82
>3a8048		08 13 03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06
>3a8058		08 13 07 07 07 0e 13 00 13 09 14 01 01 0a 13 82
>3a8068		08 13 03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06
>3a8078		13 13 0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82
>3a8088		08 13 15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06
>3a8098		13 13 10 07 07 0e 12 00 16 09 01 01 01 0a 13 82
>3a80a8		13 13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06
>3a80b8		13 13 03 07 07 0e 82 00 42 09 01 01 01 0a 13 82
>3a80c8		13 13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06
>3a80d8		13 13 07 07 06 0e 42 00 02 09 01 01 01 0a 13 82
>3a80e8		13 13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06
>3a80f8		13 13 17 07 07 0e 42 00 02 09 01 01 01 0f 13 82
>3a8108		13 13 03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06
>3a8118		13 13 10 07 07 0e 01 01 01 02 01 01 02 02 00 01
>3a8128		01 03 01 01 03 01 02 01 01 00 02 02 02 02 41 00
>3a8138		08 64 64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64
>3a8148		64 64 64 00 0b 64 64 64 64 2c 58 00 07 64 64 64
>3a8158		64 2c 59 00 06 64 64 64 64 00 03 64 64 2c 58 00
>3a8168		05 64 64 2c 59 00 11 64 64 2c 53 00 09 64 64 00
>3a8178		01 23 64 64 64 64 00 c2 23 64 64 2c 23 64 64 00
>3a8188		14 23 64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c
>3a8198		28 64 64 64 64 2c 58 29 00 10 28 64 64 64 64 29
>3a81a8		00 10 28 64 64 2c 58 29 00 00 28 64 64 29 2c 59
>3a81b8		00 04 28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17
>3a81c8		5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00
>3a81d8		08 c2 20 48 18 af 7a 08 00 69 01 00 8f 7a 08 00
>3a81e8		e2 20 af 7c 08 00 69 00 8f 7c 08 00 c2 20 68 28
>3a81f8		6b 08 c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30
>3a8208		20 18 00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa
>3a8218		28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a7 32
>3a8228		f0 0a c9 20 d0 06 22 d8 81 3a 80 f2 6b 08 08 c2
>3a8238		20 48 a9 48 08 5b 68 28 22 d8 81 3a 22 1a 82 3a
>3a8248		c2 30 a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d
>3a8258		a5 34 95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 d8
>3a8268		81 3a 80 f2 a9 00 87 32 22 d8 81 3a e6 31 28 6b
>3a8278		08 c2 20 48 a9 48 08 5b 68 28 e2 20 64 4a c2 20
>3a8288		64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20 be 03 90
>3a8298		0e 22 10 77 3a a9 01 85 4a 22 d8 81 3a 80 e5 a5
>3a82a8		4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95
>3a82b8		0d a5 52 95 0f e2 20 e6 31 6b e2 20 64 31 22 1a
>3a82c8		82 3a a7 32 f0 21 c9 22 d0 06 22 35 82 3a 80 0a
>3a82d8		22 78 82 3a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20
>3a82e8		f0 dc 20 be 03 b0 d7 6b 08 0b 08 c2 20 48 a9 48
>3a82f8		08 5b 68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb
>3a8308		a9 00 85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2
>3a8318		20 22 1a 82 3a c9 00 f0 38 c2 20 a5 32 85 08 e2
>3a8328		20 a5 34 85 0a a2 01 00 22 d8 81 3a a7 32 d0 06
>3a8338		86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9
>3a8348		00 87 32 22 d8 81 3a a7 08 c9 41 f0 07 22 c2 82
>3a8358		3a 2b 28 6b 22 1a 82 3a a7 32 f0 f5 22 78 82 3a
>3a8368		22 1a 82 3a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20
>3a8378		a5 34 85 13 22 d8 81 3a a7 32 f0 26 c9 20 d0 f4
>3a8388		a9 00 87 32 e6 31 22 d8 81 3a 22 1a 82 3a a7 32
>3a8398		f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31
>3a83a8		80 af e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2
>3a83b8		a4 84 a9 3a 48 ab 20 16 03 20 89 02 80 61 c2 20
>3a83c8		a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 94 65 e2
>3a83d8		20 a5 31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00
>3a83e8		8f 56 03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13
>3a83f8		8f 56 03 00 22 18 11 00 b0 25 e2 20 a2 ca 84 a9
>3a8408		3a 48 ab 20 16 03 af 2e 03 00 20 40 03 a9 20 20
>3a8418		18 00 af 20 03 00 20 40 03 20 89 02 20 89 02 28
>3a8428		6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 a4 84
>3a8438		a9 3a 48 ab 20 16 03 20 89 02 80 54 c2 20 a5 0d
>3a8448		8f 23 08 00 a5 0f 8f 25 08 00 20 94 65 a5 11 8f
>3a8458		50 03 00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5
>3a8468		17 8f 5a 03 00 22 1c 11 00 b0 25 e2 20 a2 b4 84
>3a8478		a9 3a 48 ab 20 16 03 af 2e 03 00 20 40 03 a9 20
>3a8488		20 18 00 af 20 03 00 20 40 03 20 89 02 20 89 02
>3a8498		28 ab 6b 5c de 25 3a 6b 00 00 00 00 42 61 64 20
>3a84a8		61 72 67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62
>3a84b8		6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a
>3a84c8		20 00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64
>3a84d8		20 66 69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20
>3a84e8		20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>3a84f8		20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>3a8508		56 4d 58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48
>3a8518		4c 4d 52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2
>3a8528		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a8538		68 28 c2 30 20 63 85 a9 ff fe 1b 08 e2 20 48 a9
>3a8548		3a 48 ab 68 28 a2 63 d2 20 16 03 08 e2 20 48 a9
>3a8558		00 48 ab 68 28 4c de 25 4c 60 85 08 20 d0 01 20
>3a8568		84 4d 28 60 00 00 00 00 00 00 00 00 00 00 00 00
>3a8578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1191 times (19056 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>3ad248		4f 53 00 54 41 4e 00 4c 4e 00 53 43 41 4c 45 54
>3ad258		41 55 00 0d 52 45 41 44 59 0d 00 43 32 35 36 20
>3ad268		46 6f 65 6e 69 78 20 42 41 53 49 43 38 31 36 20
>3ad278		76 30 2e 32 2e 30 2d 61 6c 70 68 61 2b 32 35 30
>3ad288		0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>3b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>3b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>3b004f		20
>3b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>3b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>3b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>3b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>3b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>3b009f		20
>3b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b00ef		20
>3b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b013f		20
>3b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>3b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>3b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>3b0168		6e 79 20 41 6c 6c 61 69 72 65
>3b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>3b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b018a		20 20 20 20 20 20
>3b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>3b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>3b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>3b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b01da		20 20 20 20 20 20
>3b01e0		20				                .text " "
>3b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0229		20 20 20 20 20 20 20
>3b0230		20				                .text " "
>3b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0279		20 20 20 20 20 20 20
>3b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>3b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>3b0298		53 3a
>3b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>3b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>3b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>3b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>3b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>3b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b031d		20 20 20
>3b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>3b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>3b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>3b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>3b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>3b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>3b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>3b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>3b0398		75 73 68
>3b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>3b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>3b03c8		54 68 61 6e 6b 73 3a
>3b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>3b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0407		20 20 20 20 20 20 20 20 20
>3b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>3b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>3b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>3b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>3b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>3b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b045f		20
>3b0460		20				                .text " "
>3b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04a9		20 20 20 20 20 20 20
>3b04b0		20				                .text " "
>3b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04f9		20 20 20 20 20 20 20
>3b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>3b0508		45 53 20 41 55 54 48 4f 52 53 3a
>3b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>3b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b054b		20 20 20 20 20
>3b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>3b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>3b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>3b0578		63 6f 72 65 73 2e 6f 72 67
>3b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>3b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0599		20 20 20 20 20 20 20
>3b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>3b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>3b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>3b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>3b05d8		6d
>3b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>3b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>3b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>3b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>3b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>3b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>3b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>3b063b		20 20 20 20 20
>3b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>3b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>3b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>3b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>3b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b068b		20 20 20 20 20
>3b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>3b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>3b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>3b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>3b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06da		20 20 20 20 20 20
>3b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>3b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>3b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>3b0708		6a 61 64 61 20 47 6f 6d 65 7a
>3b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b072a		20 20 20 20 20 20
>3b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>3b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>3b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>3b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>3b0768		6f 6d
>3b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>3b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>3b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>3b0798		6e 69 78 20 55 29 3a 20 54 42 44
>3b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>3b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07cb		20 20 20 20 20
>3b07d0		20				                .text " "
>3b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0819		20 20 20 20 20 20 20
>3b0820		20				                .text " "
>3b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0869		20 20 20 20 20 20 20
>3b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>3b0878		54 48 41 4e 4b 53 3a
>3b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>3b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b08b7		20 20 20 20 20 20 20 20 20
>3b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>3b08c8		56 61 6e 68 61 72 65 6e
>3b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>3b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0908		20 20 20 20 20 20 20 20
>3b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>3b0918		65 77
>3b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>3b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>3b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>3b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>3b0988		65 66 65 72 65 6e 63 65 73 29
>3b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>3b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b09aa		20 20 20 20 20 20
>3b09b0		20				                .text " "
>3b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b09f9		20 20 20 20 20 20 20
>3b0a00		20				                .text " "
>3b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0a49		20 20 20 20 20 20 20
>3b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0a9f		20
>3b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>3b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>3b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>3b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>3b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>3b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>3b0aec		20 20 20 20
>3b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>3b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>3b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>3b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>3b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>3b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>3b0b3c		20 20 20 20
>3b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>3b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>3b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>3b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>3b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>3b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>3b0b8d		20 20 20
>3b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>3b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>3b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>3b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>3b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>3b0bdd		20 20 20
>3b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>3b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>3b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>3b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>3b0c2d		20 20 20
>3b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0c7f		20
>3b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>3b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c98		53 74 65 66 61 6e 79
>3b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>3b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cc7		20 20 20 20 20 20 20 20 20
>3b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>3b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>3b1768		20 20 20 20 20 20 20 20
>3b1770						.align 256
>3b1800		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 80 * 60, $F3
>3b1808		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 298 times (4768 bytes)...
>3b2ab8		f3 f3 f3 f3 f3 f3 f3 f3
=$000068					INTERRUPT_STATE  = $000068
=$000069					INTERRUPT_COUNT  = $000069
=$00006a					IRQ_COLOR_CHOICE = $00006A
.3e0000						BOOT_MENU
.3e0000						SplashScreenMain:
.3e0000		48		pha		                PHA             ; begin setdp macro
.3e0001		08		php		                PHP
.3e0002		c2 20		rep #$20	                REP #$20        ; set A long
.3e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3e0007		5b		tcd		                TCD
.3e0008		28		plp		                PLP
.3e0009		68		pla		                PLA             ; end setdp macro
.3e000a		c2 10		rep #$10	                REP #$10        ; set X long
.3e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e000e		a9 00		lda #$00	                LDA #$00
.3e0010		85 68		sta $68		                STA INTERRUPT_STATE
.3e0012		85 69		sta $69		                STA INTERRUPT_COUNT
.3e0014		85 6a		sta $6a		                STA IRQ_COLOR_CHOICE
.3e0016		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3e001a		29 04		and #$04	                AND #FNX0_INT02_TMR0
.3e001c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3e0020		20 e6 00	jsr $3e00e6	                JSR Splash_Get_Machine_ID
.3e0023		20 19 01	jsr $3e0119	                JSR Splash_Clear_Screen
.3e0026		20 03 01	jsr $3e0103	                JSR Splash_Load_FontSet
.3e0029		22 f8 02 3e	jsl $3e02f8	                JSL Splashscreen_BitMapSetup
.3e002d		20 0b 06	jsr $3e060b	                JSR Model_Update_Info_Field
.3e0030		20 ec 05	jsr $3e05ec	                JSR Set_Text_Color
.3e0033		a9 00		lda #$00	                LDA #$00
.3e0035		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.3e0037		85 a7		sta $a7		                STA LINE_INDEX + 1
.3e0039		20 93 08	jsr $3e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e003c						HAVE_FUN:
.3e003c		22 33 01 3e	jsl $3e0133	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.3e0040		a6 a6		ldx $a6		                LDX LINE_INDEX
.3e0042		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.3e0045		f0 08		beq $3e004f	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.3e0047		20 d0 08	jsr $3e08d0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.3e004a		90 21		bcc $3e006d	                BCC Still_Displaying_Char
.3e004c		20 93 08	jsr $3e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e004f						ByPassCharDisplay:
.3e004f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0051		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.3e0055		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.3e0057		f0 14		beq $3e006d	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.3e0059		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.3e005b		f0 1f		beq $3e007c	                BEQ return              ; Yes: return it
.3e005d		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.3e005f		f0 1b		beq $3e007c	                BEQ return              ; Yes: return it
.3e0061		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.3e0063		f0 17		beq $3e007c	                BEQ return              ; Yes: return it
.3e0065		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.3e0067		f0 13		beq $3e007c	                BEQ return              ; Yes: return it
.3e0069		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.3e006b		f0 0d		beq $3e007a	                BEQ exitshere
.3e006d						Still_Displaying_Char:
.3e006d						WaitForNextSOF:
.3e006d		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.3e0071		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e0073		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.3e0075		d0 f6		bne $3e006d	                BNE WaitForNextSOF;
.3e0077		4c 3c 00	jmp $3e003c	                JMP HAVE_FUN
.3e007a						exitshere:
.3e007a						timeout
.3e007a		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.3e007c						return
.3e007c		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.3e0080		a9 00		lda #$00	                LDA #$00
.3e0082		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.3e0086		22 2c 05 3e	jsl $3e052c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.3e008a		20 9f 00	jsr $3e009f	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.3e008d		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.3e0091		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.3e0095		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e0099		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.3e009d		ea		nop		                NOP
.3e009e		6b		rtl		                RTL
.3e009f						VickyII_Registers_Clear:
.3e009f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00a1		c2 10		rep #$10	                REP #$10        ; set X long
.3e00a3		a2 00 00	ldx #$0000	                LDX #$0000
.3e00a6		a9 00		lda #$00	                LDA #$00
.3e00a8						ClearSpriteRegisters:
.3e00a8		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.3e00ac		e8		inx		                INX
.3e00ad		e0 00 02	cpx #$0200	                CPX #$0200
.3e00b0		d0 f6		bne $3e00a8	                BNE ClearSpriteRegisters
.3e00b2		a2 00 00	ldx #$0000	                LDX #$0000
.3e00b5		a9 00		lda #$00	                LDA #$00
.3e00b7						ClearTiles0Registers:
.3e00b7		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.3e00bb		e8		inx		                INX
.3e00bc		e0 30 00	cpx #$0030	                CPX #$0030
.3e00bf		d0 f6		bne $3e00b7	                BNE ClearTiles0Registers
.3e00c1		ea		nop		                NOP
.3e00c2		a2 00 00	ldx #$0000	                LDX #$0000
.3e00c5		a9 00		lda #$00	                LDA #$00
.3e00c7						ClearTiles1Registers:
.3e00c7		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.3e00cb		e8		inx		                INX
.3e00cc		e0 20 00	cpx #$0020	                CPX #$0020
.3e00cf		d0 f6		bne $3e00c7	                BNE ClearTiles1Registers
.3e00d1		ea		nop		                NOP
.3e00d2		a2 00 00	ldx #$0000	                LDX #$0000
.3e00d5		a9 00		lda #$00	                LDA #$00
.3e00d7						ClearBitmapRegisters:
.3e00d7		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.3e00db		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.3e00df		e8		inx		                INX
.3e00e0		e0 10 00	cpx #$0010	                CPX #$0010
.3e00e3		d0 f2		bne $3e00d7	                BNE ClearBitmapRegisters
.3e00e5		60		rts		                RTS
.3e00e6						Splash_Get_Machine_ID
.3e00e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00e8		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00ec		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.3e00ee		85 b0		sta $b0		                STA MODEL
.3e00f0		c9 00		cmp #$00	                CMP #$00
.3e00f2		f0 0e		beq $3e0102	                BEQ DONE
.3e00f4		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00f8		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.3e00fa		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.3e00fc		f0 04		beq $3e0102	                BEQ DONE
.3e00fe		a9 02		lda #$02	                LDA #$02
.3e0100		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.3e0102						DONE:
.3e0102		60		rts		                RTS
.3e0103						Splash_Load_FontSet
.3e0103		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0105		c2 10		rep #$10	                REP #$10        ; set X long
.3e0107		a2 00 00	ldx #$0000	                LDX #$0000
.3e010a						DONE_LOADING_FONT:
.3e010a		bf 00 08 3f	lda $3f0800,x	                LDA @l FONT_4_SPLASH, X
.3e010e		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.3e0112		e8		inx		                INX
.3e0113		e0 00 08	cpx #$0800	                CPX #2048
.3e0116		d0 f2		bne $3e010a	                BNE DONE_LOADING_FONT
.3e0118		60		rts		                RTS
.3e0119						Splash_Clear_Screen
.3e0119		e2 20		sep #$20	                SEP #$20        ; set A short
.3e011b		c2 10		rep #$10	                REP #$10        ; set X long
.3e011d		a2 00 00	ldx #$0000	                LDX #$0000
.3e0120						Branch_Clear:
.3e0120		a9 20		lda #$20	                LDA #$20
.3e0122		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.3e0126		a9 f0		lda #$f0	                LDA #$F0
.3e0128		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.3e012c		e8		inx		                INX
.3e012d		e0 00 20	cpx #$2000	                CPX #$2000
.3e0130		d0 ee		bne $3e0120	                BNE Branch_Clear
.3e0132		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.3e0133						Splash_Moniker_Color_Rolling
.3e0133		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0135		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3e0139		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e013b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3e013f		a5 68		lda $68		                LDA INTERRUPT_STATE
.3e0141		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.3e0143		f0 0c		beq $3e0151	                BEQ SERVE_STATE0
.3e0145		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.3e0147		f0 1a		beq $3e0163	                BEQ SERVE_STATE1
.3e0149		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.3e014b		d0 03		bne $3e0150	                BNE NOT_SERVE_STATE2
.3e014d		82 39 01	brl $3e0289	                BRL SERVE_STATE2
.3e0150						NOT_SERVE_STATE2
.3e0150		6b		rtl		                RTL
.3e0151						SERVE_STATE0
.3e0151		a5 69		lda $69		                LDA INTERRUPT_COUNT
.3e0153		c9 04		cmp #$04	                CMP #$04
.3e0155		f0 03		beq $3e015a	                BEQ SERVE_NEXT_STATE
.3e0157		e6 69		inc $69		                INC INTERRUPT_COUNT
.3e0159		6b		rtl		                RTL
.3e015a						SERVE_NEXT_STATE
.3e015a		a9 00		lda #$00	                LDA #$00
.3e015c		85 69		sta $69		                STA INTERRUPT_COUNT
.3e015e		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.3e0160		85 68		sta $68		                STA INTERRUPT_STATE
.3e0162		6b		rtl		                RTL
.3e0163						SERVE_STATE1
.3e0163		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0165		a9 00 00	lda #$0000	                LDA #$0000
.3e0168		a2 00 00	ldx #$0000	                LDX #$0000
.3e016b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3e016d		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.3e016f		bf b0 02 3e	lda $3e02b0,x	                LDA @lCOLOR_POINTER+0, X
.3e0173		aa		tax		                TAX
.3e0174		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0178		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.3e017c		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e0180		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.3e0184		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0188		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.3e018c		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.3e018e		bf b1 02 3e	lda $3e02b1,x	                LDA @lCOLOR_POINTER+1, X
.3e0192		aa		tax		                TAX
.3e0193		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0197		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.3e019b		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e019f		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.3e01a3		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01a7		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.3e01ab		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.3e01ad		bf b2 02 3e	lda $3e02b2,x	                LDA @lCOLOR_POINTER+2, X
.3e01b1		aa		tax		                TAX
.3e01b2		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01b6		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.3e01ba		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01be		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.3e01c2		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01c6		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.3e01ca		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.3e01cc		bf b3 02 3e	lda $3e02b3,x	                LDA @lCOLOR_POINTER+3, X
.3e01d0		aa		tax		                TAX
.3e01d1		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01d5		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.3e01d9		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01dd		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.3e01e1		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01e5		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.3e01e9		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.3e01eb		bf b4 02 3e	lda $3e02b4,x	                LDA @lCOLOR_POINTER+4, X
.3e01ef		aa		tax		                TAX
.3e01f0		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01f4		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.3e01f8		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01fc		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.3e0200		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0204		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.3e0208		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.3e020a		bf b5 02 3e	lda $3e02b5,x	                LDA @lCOLOR_POINTER+5, X
.3e020e		aa		tax		                TAX
.3e020f		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0213		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.3e0217		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e021b		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.3e021f		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0223		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.3e0227		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.3e0229		bf b6 02 3e	lda $3e02b6,x	                LDA @lCOLOR_POINTER+6, X
.3e022d		aa		tax		                TAX
.3e022e		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0232		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.3e0236		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e023a		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.3e023e		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0242		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.3e0246		a6 6a		ldx $6a		                LDX IRQ_COLOR_CHOICE
.3e0248		bf b7 02 3e	lda $3e02b7,x	                LDA @lCOLOR_POINTER+7, X
.3e024c		aa		tax		                TAX
.3e024d		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0251		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.3e0255		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.3e0259		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e025d		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.3e0261		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.3e0265		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0269		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.3e026d		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.3e0271						HERE
.3e0271		18		clc		                CLC
.3e0272		a5 6a		lda $6a		                LDA IRQ_COLOR_CHOICE
.3e0274		69 09		adc #$09	                ADC #$09
.3e0276		85 6a		sta $6a		                STA IRQ_COLOR_CHOICE
.3e0278		a5 6a		lda $6a		                LDA IRQ_COLOR_CHOICE
.3e027a		c9 48		cmp #$48	                CMP #$48
.3e027c		d0 04		bne $3e0282	                BNE EXIT_COLOR_CHANGE
.3e027e		a9 00		lda #$00	                LDA #$00
.3e0280		85 6a		sta $6a		                STA IRQ_COLOR_CHOICE
.3e0282						EXIT_COLOR_CHANGE
.3e0282		c2 10		rep #$10	                REP #$10        ; set X long
.3e0284		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e0286		85 68		sta $68		                STA INTERRUPT_STATE
.3e0288		6b		rtl		                RTL
.3e0289						SERVE_STATE2
.3e0289		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028b		85 68		sta $68		                STA INTERRUPT_STATE
.3e028d		6b		rtl		                RTL
>3e028e						.align 16
>3e0290		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>3e0294		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>3e0298		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>3e029c		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>3e02a0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>3e02a4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>3e02a8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>3e02ac		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>3e02b0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>3e02b8		00
>3e02b9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>3e02c1		00
>3e02c2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>3e02ca		00
>3e02cb		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>3e02d3		00
>3e02d4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>3e02dc		00
>3e02dd		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>3e02e5		00
>3e02e6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>3e02ee		00
>3e02ef		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>3e02f7		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.3e02f8						Splashscreen_BitMapSetup
.3e02f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3e02fa		c2 10		rep #$10	                REP #$10        ; set X long
.3e02fc		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.3e02fe		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.3e0302		a9 00		lda #$00	        LDA #$00
.3e0304		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.3e0308		a9 00		lda #$00	        LDA #$00
.3e030a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.3e030e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.3e0310		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.3e0314		a9 00		lda #$00	        LDA #$00
.3e0316		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.3e031a		a9 00		lda #$00	        LDA #$00
.3e031c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.3e0320		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.3e0324		a9 01		lda #$01	        LDA #$01
.3e0326		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.3e032a		a9 08		lda #$08	        LDA #$08
.3e032c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.3e0330		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.3e0334		a9 80		lda #$80	        LDA #$80
.3e0336		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.3e033a		a9 00		lda #$00	        LDA #$00
.3e033c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.3e0340		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.3e0344		a9 a0		lda #$a0	        LDA #$A0
.3e0346		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.3e034a		a9 10		lda #$10	        LDA #$10
.3e034c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.3e0350		a9 10		lda #$10	        LDA #$10
.3e0352		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.3e0356		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.3e035a		e2 20		sep #$20	                SEP #$20        ; set A short
.3e035c		c2 10		rep #$10	                REP #$10        ; set X long
.3e035e		a2 00 00	ldx #$0000	        LDX #$0000
.3e0361						SS_LUT_BRANCH:
.3e0361		bf 00 0e 3e	lda $3e0e00,x	        LDA @l SS_MONIKER_LUT, X
.3e0365		ea		nop		        NOP
.3e0366		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.3e036a		e8		inx		        INX
.3e036b		e0 00 04	cpx #$0400	        CPX #1024
.3e036e		d0 f1		bne $3e0361	        BNE SS_LUT_BRANCH
.3e0370		a9 00		lda #$00	        LDA #$00
.3e0372		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.3e0376		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.3e037a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.3e037e		22 2c 05 3e	jsl $3e052c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.3e0382		c2 20		rep #$20	                REP #$20        ; set A long
.3e0384		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.3e0387		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e038b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.3e038e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e0392		a9 00 00	lda #$0000	        LDA #$0000
.3e0395		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0399		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.3e039c		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e03a0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.3e03a3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e03a7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.3e03aa		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e03ae		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e03b1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e03b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03b7		a9 3e		lda #$3e	        LDA #`SS_MONIKER
.3e03b9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e03bd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.3e03bf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e03c3		a9 00		lda #$00	        LDA #$00
.3e03c5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e03c9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.3e03cb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e03cf		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e03d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03d5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.3e03d9		29 03		and #$03	        AND #$03
.3e03db		c9 00		cmp #$00	        CMP #$00
.3e03dd		f0 0b		beq $3e03ea	        BEQ DMA_FMX_Moniker
.3e03df		c9 01		cmp #$01	        CMP #$01
.3e03e1		f0 5b		beq $3e043e	        BEQ DMA_UPlus_Moniker
.3e03e3		c9 02		cmp #$02	        CMP #$02
.3e03e5		d0 03		bne $3e03ea	        BNE BAD_MODEL_NUMBER
.3e03e7		82 a8 00	brl $3e0492	        BRL DMA_U_Moniker
.3e03ea						 BAD_MODEL_NUMBER:
.3e03ea						DMA_FMX_Moniker:
.3e03ea		c2 20		rep #$20	                REP #$20        ; set A long
.3e03ec		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.3e03ef		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e03f3		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e03f6		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e03fa		a9 00 00	lda #$0000	        LDA #$0000
.3e03fd		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0401		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.3e0404		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0408		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.3e040b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e040f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.3e0412		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e0416		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e0419		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e041d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e041f		a9 3e		lda #$3e	        LDA #`SS_FMX_TXT
.3e0421		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0425		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0427		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e042b		a9 00		lda #$00	        LDA #$00
.3e042d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0431		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.3e0433		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e0437		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e043b		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e043e						DMA_UPlus_Moniker:
.3e043e		c2 20		rep #$20	                REP #$20        ; set A long
.3e0440		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.3e0443		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0447		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e044a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e044e		a9 00 00	lda #$0000	        LDA #$0000
.3e0451		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0455		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.3e0458		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e045c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.3e045f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e0463		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.3e0466		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e046a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e046d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e0471		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0473		a9 3e		lda #$3e	        LDA #`SS_UPlus_TXT
.3e0475		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0479		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e047b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e047f		a9 00		lda #$00	        LDA #$00
.3e0481		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0485		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.3e0487		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e048b		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e048f		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e0492						DMA_U_Moniker:
.3e0492		c2 20		rep #$20	                REP #$20        ; set A long
.3e0494		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.3e0497		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e049b		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.3e049e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e04a2		a9 00 00	lda #$0000	        LDA #$0000
.3e04a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e04a9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.3e04ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e04b0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.3e04b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e04b7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.3e04ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e04be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e04c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e04c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04c7		a9 3e		lda #$3e	        LDA #`SS_U_TXT
.3e04c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e04cd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.3e04cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e04d3		a9 00		lda #$00	        LDA #$00
.3e04d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e04d9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.3e04db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e04df		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e04e3		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e04e6						Done_DMA_Model_Moniker
.3e04e6		6b		rtl		        RTL
.3e04e7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.3e04e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04e9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.3e04eb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e04ef		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.3e04f1		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e04f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04f7		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.3e04fb		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e04fd		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0501		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.3e0505		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.3e0507		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e050b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e050c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e050d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e050e		ea		nop		        NOP
.3e050f		ea		nop		        NOP
.3e0510		ea		nop		        NOP
.3e0511		ea		nop		        NOP
.3e0512		ea		nop		        NOP
.3e0513		ea		nop		        NOP
.3e0514		ea		nop		        NOP
.3e0515		a9 00		lda #$00	        LDA #$00
.3e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e051b						NOTFINISHED:
.3e051b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e051f		29 80		and #$80	        AND #$80
.3e0521		c9 80		cmp #$80	        CMP #$80
.3e0523		f0 f6		beq $3e051b	        BEQ NOTFINISHED
.3e0525		a9 00		lda #$00	        LDA #$00
.3e0527		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e052b		6b		rtl		        RTL
.3e052c						SS_VDMA_CLEAR_MEMORY_640_480
.3e052c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e052e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.3e0530		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0534		a9 00		lda #$00	        LDA #$00
.3e0536		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e053a		c2 20		rep #$20	                REP #$20        ; set A long
.3e053c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e053f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0543		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0545		a9 00		lda #$00	        LDA #$00
.3e0547		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e054b		c2 20		rep #$20	                REP #$20        ; set A long
.3e054d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.3e0550		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e0554		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0556		a9 04		lda #$04	        LDA #`(640*480)
.3e0558		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e055c		a9 00		lda #$00	        LDA #$00
.3e055e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0562		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e0566		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e0568		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e056c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e056d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e056e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e056f		ea		nop		        NOP
.3e0570		ea		nop		        NOP
.3e0571		ea		nop		        NOP
.3e0572		ea		nop		        NOP
.3e0573		ea		nop		        NOP
.3e0574						SS_VDMA_CLR_LOOPA:
.3e0574		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e0578		29 80		and #$80	        AND #$80
.3e057a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e057c		f0 f6		beq $3e0574	        BEQ SS_VDMA_CLR_LOOPA
.3e057e		ea		nop		        NOP
.3e057f		a9 00		lda #$00	        LDA #$00
.3e0581		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0585		6b		rtl		        RTL
.3e0586						SS_VDMA_TRANSFER_VRAM_2_VRAM
.3e0586		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0588		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.3e058a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e058e		a9 00		lda #$00	        LDA #$00
.3e0590		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e0594		c2 20		rep #$20	                REP #$20        ; set A long
.3e0596		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.3e0599		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.3e059d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e059f		a9 00		lda #$00	        LDA #$00
.3e05a1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.3e05a5		c2 20		rep #$20	                REP #$20        ; set A long
.3e05a7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e05aa		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e05ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05b0		a9 00		lda #$00	        LDA #$00
.3e05b2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e05b6		c2 20		rep #$20	                REP #$20        ; set A long
.3e05b8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.3e05bb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e05bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05c1		a9 00		lda #$00	        LDA #`(320*16)
.3e05c3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e05c7		a9 00		lda #$00	        LDA #$00
.3e05c9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e05cd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e05d1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e05d3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05d7		ea		nop		        NOP
.3e05d8		ea		nop		        NOP
.3e05d9		ea		nop		        NOP
.3e05da						SS_VDMA_CLR_LOOPB:
.3e05da		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e05de		29 80		and #$80	        AND #$80
.3e05e0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e05e2		f0 f6		beq $3e05da	        BEQ SS_VDMA_CLR_LOOPB
.3e05e4		ea		nop		        NOP
.3e05e5		a9 00		lda #$00	        LDA #$00
.3e05e7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05eb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=$000098					TEXT_SRC_PTR_L      = $000098
=$00009a					TEXT_SRC_PTR_H      = $00009A
=$00009c					TEXT_DST_PTR_L      = $00009C
=$00009e					TEXT_DST_PTR_H      = $00009E
=$0000a0					TEXT_INDEX          = $0000A0
=$0000a0					MOD_SELECT_L        = $0000A0
=$0000a2					MOD_SELECT_H        = $0000A2
=$0000a2					TEXT_CURSOR_X       = $0000A2
=$0000a4					TEXT_CURSOR_Y       = $0000A4
=$0000a6					LINE_INDEX          = $0000A6
=$0000a8					COLOR_DST_PTR_L     = $0000A8
=$0000aa					COLOR_DST_PTR_H     = $0000AA
=$0000b0					MODEL               = $0000B0
=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.3e05ec						Set_Text_Color:
.3e05ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e05ee		a9 00 00	lda #$0000	            LDA #00
.3e05f1		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e05f3		a9 30 00	lda #$0030	            LDA #48
.3e05f6		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e05f8		20 ec 08	jsr $3e08ec	            JSR Line_Display_Compute_Pointer
.3e05fb		a0 00 00	ldy #$0000	            LDY #$0000
.3e05fe		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0600		a9 40		lda #$40	            LDA #$40
.3e0602						SetColorBranch:
.3e0602		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.3e0604		c8		iny		            INY
.3e0605		c0 50 00	cpy #$0050	            CPY #80
.3e0608		d0 f8		bne $3e0602	            BNE SetColorBranch
.3e060a		60		rts		            RTS
.3e060b						Model_Update_Info_Field:
.3e060b		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e060d		a9 00 00	lda #$0000	            LDA #$0000
.3e0610		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0612		a5 b0		lda $b0		            LDA MODEL
.3e0614		0a		asl a		            ASL
.3e0615		0a		asl a		            ASL
.3e0616		aa		tax		            TAX
.3e0617		c2 20		rep #$20	                REP #$20        ; set A long
.3e0619		bf 9f 0c 3e	lda $3e0c9f,x	            LDA MODEL_TABLE, X
.3e061d		85 a0		sta $a0		            STA MOD_SELECT_L
.3e061f		bf a1 0c 3e	lda $3e0ca1,x	            LDA MODEL_TABLE + 2, X
.3e0623		85 a2		sta $a2		            STA MOD_SELECT_H
.3e0625		a0 00 00	ldy #$0000	            LDY #$0000
.3e0628		84 a6		sty $a6		            STY LINE_INDEX
.3e062a						Next_Change_Here:
.3e062a		c2 20		rep #$20	                REP #$20        ; set A long
.3e062c		a4 a6		ldy $a6		            LDY LINE_INDEX
.3e062e		bb		tyx		            TYX
.3e062f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e0631		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e0633		bf ef 0c 3e	lda $3e0cef,x	            LDA LINE_MOD, X
.3e0637		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0639		c8		iny		            INY
.3e063a		c8		iny		            INY
.3e063b		bb		tyx		            TYX
.3e063c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e063e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e0640		bf ef 0c 3e	lda $3e0cef,x	            LDA LINE_MOD, X
.3e0644		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0646		c8		iny		            INY
.3e0647		c8		iny		            INY
.3e0648		84 a6		sty $a6		            STY LINE_INDEX
.3e064a		c0 10 00	cpy #$0010	            CPY #16
.3e064d		f0 10		beq $3e065f	            BEQ LetsMoveOn
.3e064f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0651		a0 00 00	ldy #$0000	            LDY #$0000
.3e0654						nextchar:
.3e0654		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e0656		c9 00		cmp #$00	            CMP #$00
.3e0658		f0 d0		beq $3e062a	            BEQ Next_Change_Here
.3e065a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e065c		c8		iny		            INY
.3e065d		80 f5		bra $3e0654	            BRA nextchar
.3e065f						LetsMoveOn:
.3e065f		af fb 0c 3e	lda $3e0cfb	            LDA LINE_MOD + 12
.3e0663		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0665		a0 00 00	ldy #$0000	            LDY #$0000
.3e0668		e2 20		sep #$20	                SEP #$20        ; set A short
.3e066a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.3e066e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0670		c8		iny		            INY
.3e0671		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.3e0675		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0677		c8		iny		            INY
.3e0678		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.3e067c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e067e		18		clc		            CLC
.3e067f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.3e0683		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0686		8f ca 0a 3e	sta $3e0aca	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.3e068a		8f 03 0b 3e	sta $3e0b03	            STA @lLINE9 + 47    ; GABE in FMX
.3e068e		8f 49 0b 3e	sta $3e0b49	            STA @lLINE10 + 51   ; VICKY II in FMX
.3e0692		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.3e0696		29 0f		and #$0f	            AND #$0F
.3e0698		69 30		adc #$30	            ADC #$30
.3e069a		8f cb 0a 3e	sta $3e0acb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.3e069e		8f 04 0b 3e	sta $3e0b04	            STA @lLINE9 + 48    ; GABE in FMX
.3e06a2		8f 4a 0b 3e	sta $3e0b4a	            STA @lLINE10 + 52   ; VICKY II in FMX
.3e06a6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.3e06aa		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06ad		8f cd 0a 3e	sta $3e0acd	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.3e06b1		8f 06 0b 3e	sta $3e0b06	            STA @lLINE9 + 50    ; GABE in FMX
.3e06b5		8f 4c 0b 3e	sta $3e0b4c	            STA @lLINE10 + 54   ; VICKY II in FMX
.3e06b9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.3e06bd		29 0f		and #$0f	            AND #$0F
.3e06bf		69 30		adc #$30	            ADC #$30
.3e06c1		8f ce 0a 3e	sta $3e0ace	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.3e06c5		8f 07 0b 3e	sta $3e0b07	            STA @lLINE9 + 51    ; GABE in FMX
.3e06c9		8f 4d 0b 3e	sta $3e0b4d	            STA @lLINE10 + 55   ; VICKY II in FMX
.3e06cd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.3e06d1		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06d4		8f d0 0a 3e	sta $3e0ad0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.3e06d8		8f 09 0b 3e	sta $3e0b09	            STA @lLINE9 + 53    ; GABE in FMX
.3e06dc		8f 4f 0b 3e	sta $3e0b4f	            STA @lLINE10 + 57   ; VICKY II in FMX
.3e06e0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.3e06e4		29 0f		and #$0f	            AND #$0F
.3e06e6		69 30		adc #$30	            ADC #$30
.3e06e8		8f d1 0a 3e	sta $3e0ad1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.3e06ec		8f 0a 0b 3e	sta $3e0b0a	            STA @lLINE9 + 54    ; GABE in FMX
.3e06f0		8f 50 0b 3e	sta $3e0b50	            STA @lLINE10 + 58   ; VICKY II in FMX
.3e06f4		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e06f8		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06fb		8f c0 0a 3e	sta $3e0ac0	            STA @lLINE8 + 46    ; U/U+
.3e06ff		8f f9 0a 3e	sta $3e0af9	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.3e0703		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0707		29 0f		and #$0f	            AND #$0F
.3e0709		69 30		adc #$30	            ADC #$30
.3e070b		8f c1 0a 3e	sta $3e0ac1	            STA @lLINE8 + 47
.3e070f		8f fa 0a 3e	sta $3e0afa	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.3e0713		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0717		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e071a		8f 3f 0b 3e	sta $3e0b3f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.3e071e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0722		29 0f		and #$0f	            AND #$0F
.3e0724		69 30		adc #$30	            ADC #$30
.3e0726		8f 40 0b 3e	sta $3e0b40	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.3e072a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e072e		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0731		8f c2 0a 3e	sta $3e0ac2	            STA @lLINE8 + 48
.3e0735		8f fb 0a 3e	sta $3e0afb	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.3e0739		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e073d		29 0f		and #$0f	            AND #$0F
.3e073f		69 30		adc #$30	            ADC #$30
.3e0741		8f c3 0a 3e	sta $3e0ac3	            STA @lLINE8 + 49
.3e0745		8f fc 0a 3e	sta $3e0afc	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.3e0749		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e074d		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0750		8f 41 0b 3e	sta $3e0b41	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.3e0754		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e0758		29 0f		and #$0f	            AND #$0F
.3e075a		69 30		adc #$30	            ADC #$30
.3e075c		8f 42 0b 3e	sta $3e0b42	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.3e0760		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0764		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0767		8f b4 0a 3e	sta $3e0ab4	            STA @lLINE8 + 34
.3e076b		8f ed 0a 3e	sta $3e0aed	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.3e076f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0773		29 0f		and #$0f	            AND #$0F
.3e0775		69 30		adc #$30	            ADC #$30
.3e0777		8f b5 0a 3e	sta $3e0ab5	            STA @lLINE8 + 35
.3e077b		8f ee 0a 3e	sta $3e0aee	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.3e077f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e0783		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0786		8f 34 0b 3e	sta $3e0b34	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.3e078a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e078e		29 0f		and #$0f	            AND #$0F
.3e0790		69 30		adc #$30	            ADC #$30
.3e0792		8f 35 0b 3e	sta $3e0b35	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.3e0796		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e079a		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e079d		8f b6 0a 3e	sta $3e0ab6	            STA @lLINE8 + 36
.3e07a1		8f ef 0a 3e	sta $3e0aef	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.3e07a5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07a9		29 0f		and #$0f	            AND #$0F
.3e07ab		69 30		adc #$30	            ADC #$30
.3e07ad		8f b7 0a 3e	sta $3e0ab7	            STA @lLINE8 + 37
.3e07b1		8f f0 0a 3e	sta $3e0af0	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.3e07b5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07b9		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e07bc		8f 36 0b 3e	sta $3e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07c0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07c4		29 0f		and #$0f	            AND #$0F
.3e07c6		69 30		adc #$30	            ADC #$30
.3e07c8		8f 36 0b 3e	sta $3e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07cc		20 3f 08	jsr $3e083f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.3e07cf		20 60 08	jsr $3e0860	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.3e07d2		20 61 08	jsr $3e0861	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.3e07d5		a5 b0		lda $b0		            LDA MODEL
.3e07d7		29 03		and #$03	            AND #$03
.3e07d9		c9 00		cmp #$00	            CMP #$00
.3e07db		f0 12		beq $3e07ef	            BEQ Erase_FATVicky_Line;
.3e07dd		c9 01		cmp #$01	            CMP #$01
.3e07df		f0 29		beq $3e080a	            BEQ Erase_2Lines;
.3e07e1		c9 02		cmp #$02	            CMP #$02
.3e07e3		f0 25		beq $3e080a	            BEQ Erase_2Lines;
.3e07e5		60		rts		            RTS
.3e07e6						HighNibblerBCD:
.3e07e6		29 f0		and #$f0	            AND #$F0
.3e07e8		4a		lsr a		            LSR A
.3e07e9		4a		lsr a		            LSR A
.3e07ea		4a		lsr a		            LSR A
.3e07eb		4a		lsr a		            LSR A
.3e07ec		69 30		adc #$30	            ADC #$30
.3e07ee		60		rts		            RTS
.3e07ef						Erase_FATVicky_Line:
.3e07ef		c2 20		rep #$20	                REP #$20        ; set A long
.3e07f1		a9 92 0a	lda #$0a92	            LDA #<>LINE8
.3e07f4		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e07f6		a9 3e 00	lda #$003e	            LDA #`LINE8
.3e07f9		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e07fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3e07fd		a0 00 00	ldy #$0000	            LDY #$0000
.3e0800		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0802		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0804		c8		iny		            INY
.3e0805		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0807		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0809		60		rts		            RTS
.3e080a						Erase_2Lines
.3e080a		c2 20		rep #$20	                REP #$20        ; set A long
.3e080c		a9 d4 0a	lda #$0ad4	            LDA #<>LINE9
.3e080f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0811		a9 3e 00	lda #$003e	            LDA #`LINE9
.3e0814		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0816		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0818		a0 00 00	ldy #$0000	            LDY #$0000
.3e081b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e081d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e081f		c8		iny		            INY
.3e0820		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0822		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0824		c2 20		rep #$20	                REP #$20        ; set A long
.3e0826		a9 16 0b	lda #$0b16	            LDA #<>LINE10
.3e0829		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e082b		a9 3e 00	lda #$003e	            LDA #`LINE10
.3e082e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0830		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0832		a0 00 00	ldy #$0000	            LDY #$0000
.3e0835		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0837		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0839		c8		iny		            INY
.3e083a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e083c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e083e		60		rts		            RTS
.3e083f						GODETECTHIRES
.3e083f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0841		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.3e0845		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.3e0847		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.3e0849		f0 14		beq $3e085f	            BEQ WeAreDone
.3e084b		c2 10		rep #$10	                REP #$10        ; set X long
.3e084d		a2 00 00	ldx #$0000	            LDX #$0000
.3e0850						ChangeNextChar
.3e0850		bf 4f 0d 3e	lda $3e0d4f,x	            LDA @l ON_TEXT, X
.3e0854		c9 00		cmp #$00	            CMP #$00
.3e0856		f0 07		beq $3e085f	            BEQ WeAreDone
.3e0858		9f 43 0c 3e	sta $3e0c43,x	            STA @l LINE17 +13, X
.3e085c		e8		inx		            INX
.3e085d		d0 f1		bne $3e0850	            BNE ChangeNextChar
.3e085f						WeAreDone
.3e085f						NoExpansionCardPresent
.3e085f		60		rts		            RTS
.3e0860						GODETECTHDD
.3e0860		60		rts		            RTS
.3e0861						GODETECTEXP
.3e0861		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0863		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.3e0867		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.3e0869		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.3e086b		d0 25		bne $3e0892	            BNE NoExpansionCardPresent
.3e086d		c2 10		rep #$10	                REP #$10        ; set X long
.3e086f		a2 00 00	ldx #$0000	            LDX #$0000
.3e0872						ChangeNextChar
.3e0872		bf 53 0d 3e	lda $3e0d53,x	            LDA @l YES_TEXT, X
.3e0876		c9 00		cmp #$00	            CMP #$00
.3e0878		f0 07		beq $3e0881	            BEQ WeAreDone
.3e087a		9f 75 0c 3e	sta $3e0c75,x	            STA @l LINE19 +26, X
.3e087e		e8		inx		            INX
.3e087f		d0 f1		bne $3e0872	            BNE ChangeNextChar
.3e0881						WeAreDone
.3e0881		a2 00 00	ldx #$0000	            LDX #$0000
.3e0884						AddCardName
.3e0884		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.3e0888		9f 79 0c 3e	sta $3e0c79,x	            STA @l LINE20, X
.3e088c		e8		inx		            INX
.3e088d		e0 10 00	cpx #$0010	            CPX #$10
.3e0890		d0 f2		bne $3e0884	            BNE AddCardName
.3e0892						NoExpansionCardPresent
.3e0892		60		rts		            RTS
.3e0893						Line_Setup_Before_Display
.3e0893		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0895		a5 a6		lda $a6		            LDA LINE_INDEX
.3e0897		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.3e089a		f0 33		beq $3e08cf	            BEQ DONE
.3e089c		a5 a6		lda $a6		            LDA LINE_INDEX
.3e089e		0a		asl a		            ASL A
.3e089f		0a		asl a		            ASL A
.3e08a0		aa		tax		            TAX
.3e08a1		bf 14 09 3e	lda $3e0914,x	            LDA TEXT_TABLE, X
.3e08a5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e08a7		bf 16 09 3e	lda $3e0916,x	            LDA TEXT_TABLE + 2, X
.3e08ab		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e08ad		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08af		0a		asl a		            ASL A
.3e08b0		aa		tax		            TAX
.3e08b1		bf 70 09 3e	lda $3e0970,x	            LDA TEXT_POSX, X
.3e08b5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e08b7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08bb		bf 9e 09 3e	lda $3e099e,x	            LDA TEXT_POSY, X
.3e08bf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e08c1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.3e08c5		20 ec 08	jsr $3e08ec	            JSR Line_Display_Compute_Pointer
.3e08c8		a9 00 00	lda #$0000	            LDA #$0000
.3e08cb		85 a0		sta $a0		            STA TEXT_INDEX
.3e08cd		e6 a6		inc $a6		            INC LINE_INDEX
.3e08cf						DONE:
.3e08cf		60		rts		            RTS
.3e08d0						Line_Display_1_Character
.3e08d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08d2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.3e08d4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.3e08d6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08da		e2 20		sep #$20	                SEP #$20        ; set A short
.3e08dc		38		sec		            SEC
.3e08dd		a4 a0		ldy $a0		            LDY TEXT_INDEX
.3e08df		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e08e1		c9 00		cmp #$00	            CMP #$00
.3e08e3		f0 06		beq $3e08eb	            BEQ WE_ARE_DONE;
.3e08e5		18		clc		            CLC
.3e08e6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e08e8		c8		iny		            INY
.3e08e9		84 a0		sty $a0		            STY TEXT_INDEX
.3e08eb						WE_ARE_DONE:
.3e08eb		60		rts		            RTS
.3e08ec						Line_Display_Compute_Pointer
.3e08ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08ee		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.3e08f0		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.3e08f4		a9 50 00	lda #$0050	            LDA #80
.3e08f7		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.3e08fb		18		clc		            CLC
.3e08fc		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.3e0900		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.3e0902		69 00 a0	adc #$a000	            ADC #$A000
.3e0905		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0907		69 00 20	adc #$2000	            ADC #$2000
.3e090a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.3e090c		a9 af 00	lda #$00af	            LDA #$00AF
.3e090f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0911		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.3e0913		60		rts		            RTS
>3e0914		cc 09 3e 00 ed 09 3e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>3e091c		03 0a 3e 00 11 0a 3e 00 29 0a 3e 00 4c 0a 3e 00
>3e092c		70 0a 3e 00 85 0a 3e 00
>3e0934		92 0a 3e 00 d4 0a 3e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>3e093c		16 0b 3e 00 58 0b 3e 00 62 0b 3e 00 8b 0b 3e 00
>3e094c		c2 0b 3e 00 e5 0b 3e 00
>3e0954		f7 0b 3e 00 36 0c 3e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>3e095c		48 0c 3e 00 5b 0c 3e 00 79 0c 3e 00 8a 0c 3e 00
>3e096c		9d 0c 3e 00
>3e0970		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>3e0978		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>3e0988		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>3e0998		2d 00 1e 00 48 00
>3e099e		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>3e09a6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>3e09b6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>3e09c6		35 00 39 00 39 00
=6						leftAlign = 6
>3e09cc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>3e09d4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>3e09e4		20 20 20 20 20 20 20 20 00
>3e09ed		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>3e09f5		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>3e0a03		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>3e0a0b		4e 46 4f 3a 20 00
>3e0a11		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>3e0a19		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>3e0a29		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>3e0a31		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>3e0a41		20 20 20 20 20 20 20 20 20 20 00
>3e0a4c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>3e0a54		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>3e0a64		20 20 20 20 20 20 20 20 20 20 20 00
>3e0a70		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>3e0a78		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>3e0a85		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>3e0a8d		53 29 3a 20 00
>3e0a92		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>3e0a9a		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>3e0aaa		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>3e0aba		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>3e0aca		30 30 2f 30 30 2f 30 30 20 00
>3e0ad4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>3e0adc		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>3e0aec		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>3e0afc		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>3e0b0c		20 20 20 20 20 20 20 20 20 00
>3e0b16		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>3e0b1e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>3e0b2e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>3e0b3e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>3e0b4e		2f 30 30 20 20 20 20 20 20 00
>3e0b58		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>3e0b60		20 00
>3e0b62		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>3e0b6a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>3e0b7a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>3e0b8a		00
>3e0b8b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>3e0b93		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>3e0ba3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>3e0bb3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>3e0bc2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>3e0bca		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>3e0bda		4c 20 54 52 45 4d 42 4c 41 59 00
>3e0be5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>3e0bed		20 4d 45 4e 55 2d 2d 2d 2d 00
>3e0bf7		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>3e0bff		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>3e0c0f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>3e0c1f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>3e0c2f		46 41 55 4c 54 20 00
>3e0c36		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>3e0c3e		4f 44 45 3a 20 4f 46 46 20 00
>3e0c48		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>3e0c50		41 4c 4c 45 44 3a 20 2d 2d 20 00
>3e0c5b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>3e0c63		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>3e0c73		3a 20 4e 4f 20 00
>3e0c79		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3e0c81		00 00 00 00 00 00 00 00 00
>3e0c8a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>3e0c92		46 4f 45 4e 49 58 2e 43 4f 4d 00
>3e0c9d		20 00				LINE22 .text " ", $00
>3e0c9f		af 0c 3e 00 bf 0c 3e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>3e0ca7		cf 0c 3e 00 df 0c 3e 00
>3e0caf		ff 0c 3e 00 3f 0d 3e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>3e0cb7		3f 0d 3e 00 00 00 00 00
>3e0cbf		0f 0d 3e 00 3f 0d 3e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>3e0cc7		2f 0d 3e 00 00 00 00 00
>3e0ccf		1f 0d 3e 00 2f 0d 3e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>3e0cd7		2f 0d 3e 00 00 00 00 00
>3e0cdf		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>3e0ce7		00 00 00 00 00 00 00 00
>3e0cef		dc 09 3e 00 3b 0a 3e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>3e0cf7		5f 0a 3e 00 7e 0a 3e 00
>3e0cff		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>3e0d07		4e 49 58 20 46 4d 58 00
>3e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>3e0d17		4e 49 58 20 55 2b 20 00
>3e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>3e0d27		4e 49 58 20 55 20 20 00
>3e0d2f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>3e0d37		32 20 42 59 54 45 53 00
>3e0d3f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>3e0d47		34 20 42 59 54 45 53 00
>3e0d4f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>3e0d53		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>3e0d57						.align 256
.3e0e00						SS_MONIKER_LUT
>3e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>3e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>3e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>3e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>3e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>3e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>3e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>3e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>3e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>3e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>3e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>3e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>3e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>3e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>3e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>3e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>3e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>3e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>3e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>3e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>3e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>3e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>3e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>3e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>3e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>3e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>3e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>3e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>3e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>3e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>3e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>3e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>3e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>3e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>3e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>3e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>3e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>3e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>3e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>3e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>3e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>3e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>3e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>3e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>3e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>3e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>3e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>3e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>3e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>3e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>3e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>3e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>3e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>3e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>3e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>3e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>3e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>3e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>3e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>3e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>3e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>3e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>3e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>3e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>3e11f8		ff ff ff 00 e5 80 80 00
.3e1200						SS_MONIKER
>3e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>3e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>3e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>3e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>3e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>3e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>3e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>3e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>3e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>3e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>3e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>3e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>3e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>3e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>3e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>3e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>3e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>3e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>3e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>3e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>3e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>3e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>3e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>3e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>3e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>3e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>3e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>3e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>3e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>3e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>3e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>3e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>3e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>3e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>3e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>3e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>3e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>3e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>3e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>3e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>3e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>3e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>3e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>3e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>3e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>3e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>3e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>3e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>3e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>3e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>3e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>3e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>3e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>3e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>3e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>3e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>3e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>3e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>3e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>3e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>3e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>3e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>3e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>3e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>3e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>3e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>3e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>3e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>3e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>3e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>3e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>3e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>3e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>3e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>3e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>3e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>3e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>3e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>3e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>3e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>3e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>3e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>3e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>3e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>3e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>3e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>3e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>3e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>3e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>3e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>3e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>3e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>3e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>3e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>3e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>3e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>3e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>3e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>3e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>3e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>3e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>3e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>3e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>3e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>3e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>3e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>3e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>3e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>3e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>3e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>3e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>3e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>3e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>3e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>3e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>3e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>3e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>3e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>3e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>3e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>3e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>3e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>3e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>3e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>3e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>3e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>3e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>3e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>3e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>3e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>3e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>3e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>3e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>3e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>3e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>3e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>3e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>3e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>3e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>3e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>3e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>3e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>3e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>3e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>3e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>3e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>3e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>3e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>3e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>3e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>3e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>3e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>3e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>3e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>3e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>3e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>3e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>3e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>3e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>3e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>3e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>3e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>3e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>3e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>3e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>3e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>3e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>3e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>3e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>3e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>3e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>3e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>3e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>3e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>3e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>3e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>3e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>3e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>3e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>3e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>3e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>3e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>3e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>3e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>3e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>3e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>3e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>3e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>3e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>3e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>3e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>3e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>3e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>3e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>3e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>3e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>3e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>3e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>3e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>3e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>3e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>3e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>3e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>3e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>3e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>3e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>3e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>3e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>3e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>3e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>3e61f8		00 00 00 00 00 00 00 00
.3e6200						SS_FMX_TXT
>3e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>3e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>3e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>3e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>3e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>3e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>3e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>3e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>3e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>3e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>3e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>3e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>3e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>3e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>3e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>3e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>3e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>3e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>3e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>3e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>3e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>3e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>3e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>3e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>3e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>3e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>3e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>3e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>3e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>3e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>3e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>3e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>3e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>3e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>3e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>3e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>3e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>3e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>3e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>3e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>3e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>3e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>3e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>3e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>3e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>3e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>3e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>3e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>3e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>3e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>3e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>3e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>3e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>3e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>3e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>3e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>3e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>3e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>3e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>3e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>3e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>3e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>3e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>3e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>3e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>3e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>3e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>3e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>3e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>3e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>3e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>3e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>3e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>3e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>3e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>3e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>3e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>3e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>3e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>3e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>3e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>3e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>3e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>3e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>3e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>3e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>3e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>3e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>3e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>3e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>3e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>3e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>3e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>3e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>3e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>3e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>3e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>3e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>3e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>3e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>3e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>3e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>3e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>3e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>3e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>3e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>3e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>3e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>3e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>3e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>3e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>3e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>3e93f8		00 00 00 00 00 00 00 00
.3e9400						SS_UPlus_TXT
>3e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>3e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>3e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>3e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>3e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>3e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>3e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>3e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>3e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>3e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>3e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>3e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>3e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>3e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>3e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>3e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>3e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>3e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>3e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>3e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>3e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>3e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>3ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>3ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>3ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>3ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>3ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>3ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>3ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>3ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>3ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>3ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>3ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>3ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>3ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>3ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>3ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>3ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>3ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>3ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>3ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>3ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>3eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>3eabf8		00 00 00 00 00 00 00 00
.3eac00						SS_U_TXT
>3eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>3eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>3eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>3eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>3eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>3eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>3eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>3eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>3eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>3eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>3eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>3eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>3eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>3eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>3eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>3eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>3eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>3eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>3eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>3eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>3eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>3eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>3eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3ebbf8		00 00 00 00 00 00 00 00
.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_SPLASH
>3f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>3f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>3f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>3f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>3f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>3f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>3f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>3f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>3f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>3f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>3f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>3f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>3f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>3f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>3f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>3f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>3f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>3f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>3f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>3f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>3f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>3f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>3f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>3f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>3f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>3f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>3f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>3f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>3f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>3f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>3f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>3f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>3f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>3f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>3f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>3f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>3f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>3f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>3f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>3f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>3f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>3f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>3f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>3f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>3f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>3f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>3f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>3f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>3f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>3f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>3f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>3f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>3f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>3f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>3f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>3f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>3f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>3f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>3f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>3f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>3f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>3f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>3f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>3f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>3f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>3f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>3f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>3f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>3f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>3f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>3f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>3f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>3f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>3f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>3f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>3f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>3f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>3f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>3f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>3f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>3f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>3f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>3f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>3f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>3f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>3f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>3f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>3f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>3f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>3f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>3f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>3f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>3f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>3f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>3f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>3f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>3f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>3f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>3f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>3f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>3f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>3f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>3f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>3f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>3f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>3f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>3f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>3f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>3f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>3f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>3f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>3f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>3f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>3f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>3f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>3f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>3f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>3f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>3f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>3f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>3f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>3f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>3f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>3f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>3f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>3f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>3f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>3f0ff8		0f 0f 0f 0f f0 f0 f0 00
>3fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
