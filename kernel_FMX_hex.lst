
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=1 --long-address --flat --intel-hex -o kernel_FMX.hex --list kernel_FMX_hex.lst --labels=kernel_FMX_hex.lbl src\kernel.asm
; Wed Jul 19 12:55:44 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=1						TARGET_SYS=1

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$aee000					LAN = ESID_ETHERNET_REG
=$380000					  START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					  START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					  START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					  START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3c0000					  PACKETS := $3C0000                          ; RAM for IP Stack packet buffers
=$3e0000					  START_OF_SPLASH := $3E0000                  ; SplashScreen Code and Data $3E0000
=$3f0000					  START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$3b						CHAR_F1 = $3B       ; Function key scan codes
=$3c						CHAR_F2 = $3C
=$3d						CHAR_F3 = $3D
=$3e						CHAR_F4 = $3E
=$3f						CHAR_F5 = $3F
=$40						CHAR_F6 = $40
=$41						CHAR_F7 = $41
=$42						CHAR_F8 = $42
=$43						CHAR_F9 = $43
=$44						CHAR_F10 = $44
=$57						CHAR_F11 = $57
=$58						CHAR_F12 = $58
=$39						SCAN_SP = $39
=$1c						SCAN_CR = $1C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_IDX        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000e6					MOUSE_BUTTONS    = $0000E6
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 27 19 38	jsl $381927	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 bb 17 38	jsl $3817bb	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c 7a 06 39	jmp $39067a	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$3a0000					    BASIC = $3A0000
=3801092					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c 90 05 39	jmp $390590	RESTORE         JML IRESTORE
.381008	1008	5c 24 06 39	jmp $390624	BREAK           JML IBREAK
.38100c	100c	5c 65 06 39	jmp $390665	READY           JML IREADY
.381010	1010	5c 60 10 39	jmp $391060	SCINIT          JML ISCINIT
.381014	1014	5c 61 10 39	jmp $391061	IOINIT          JML IIOINIT
.381018	1018	5c 1c 07 39	jmp $39071c	PUTC            JML IPUTC
.38101c	101c	5c 05 07 39	jmp $390705	PUTS            JML IPUTS
.381020	1020	5c a9 07 39	jmp $3907a9	PUTB            JML IPUTB
.381024	1024	5c 04 3a 39	jmp $393a04	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c ec 71 39	jmp $3971ec	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.38102c	102c	5c 84 72 39	jmp $397284	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.381030	1030	5c 64 10 39	jmp $391064	OPEN            JML IOPEN
.381034	1034	5c 65 10 39	jmp $391065	CLOSE           JML ICLOSE
.381038	1038	5c 7b 06 39	jmp $39067b	SETIN           JML ISETIN
.38103c	103c	5c 84 06 39	jmp $390684	SETOUT          JML ISETOUT
.381040	1040	5c 66 10 39	jmp $391066	GETB            JML IGETB
.381044	1044	5c b0 39 39	jmp $3939b0	GETBLOCK        JML IGETBLOCK
.381048	1048	5c c9 06 39	jmp $3906c9	GETCH           JML IGETCH
.38104c	104c	5c 96 06 39	jmp $390696	GETCHW          JML IGETCHW
.381050	1050	5c 8d 06 39	jmp $39068d	GETCHE          JML IGETCHE
.381054	1054	5c 67 10 39	jmp $391067	GETS            JML IGETS
.381058	1058	5c 68 10 39	jmp $391068	GETLINE         JML IGETLINE
.38105c	105c	5c 69 10 39	jmp $391069	GETFIELD        JML IGETFIELD
.381060	1060	5c 6a 10 39	jmp $39106a	TRIM            JML ITRIM
.381064	1064	5c 6b 10 39	jmp $39106b	PRINTC          JML IPRINTC
.381068	1068	5c 6c 10 39	jmp $39106c	PRINTS          JML IPRINTS
.38106c	106c	5c aa 07 39	jmp $3907aa	PRINTCR         JML IPRINTCR
.381070	1070	5c 6d 10 39	jmp $39106d	PRINTF          JML IPRINTF
.381074	1074	5c 6e 10 39	jmp $39106e	PRINTI          JML IPRINTI
.381078	1078	5c 53 08 39	jmp $390853	PRINTH          JML IPRINTH
.38107c	107c	5c 6f 10 39	jmp $39106f	PRINTAI         JML IPRINTAI
.381080	1080	5c 70 08 39	jmp $390870	PRINTAH         JML IPRINTAH
.381084	1084	5c 37 08 39	jmp $390837	LOCATE          JML ILOCATE
.381088	1088	5c 70 10 39	jmp $391070	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c 71 10 39	jmp $391071	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c ff 07 39	jmp $3907ff	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c 0e 08 39	jmp $39080e	CSRLEFT         JML ICSRLEFT
.381098	1098	5c 1d 08 39	jmp $39081d	CSRUP           JML ICSRUP
.38109c	109c	5c 2c 08 39	jmp $39082c	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c ee 07 39	jmp $3907ee	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c 42 08 39	jmp $390842	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c be 08 39	jmp $3908be	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c 5d 09 39	jmp $39095d	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c 84 0b 39	jmp $390b84	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c 4f 6f 39	jmp $396f4f	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c 00 7a 39	jmp $397a00	INITMOUSE       JML IINITMOUSE
.3810bc	10bc	5c 65 0b 39	jmp $390b65	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c 2d 0b 39	jmp $390b2d	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c 6a 09 39	jmp $39096a	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c 8a 09 39	jmp $39098a	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 50 0a 39	jmp $390a50	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c d1 0a 39	jmp $390ad1	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c 2c 0b 39	jmp $390b2c	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810d8	10d8	5c 2c 0b 39	jmp $390b2c	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810dc	10dc	5c 9e 0c 39	jmp $390c9e	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c 2d 0d 39	jmp $390d2d	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c 9b 0d 39	jmp $390d9b	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c 50 0d 39	jmp $390d50	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c ee 30 39	jmp $3930ee	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c f8 4a 39	jmp $394af8	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c 80 4b 39	jmp $394b80	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c af 4b 39	jmp $394baf	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c 32 4c 39	jmp $394c32	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c d8 4b 39	jmp $394bd8	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c c6 4c 39	jmp $394cc6	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c 93 4c 39	jmp $394c93	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c c2 4c 39	jmp $394cc2	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c 54 4d 39	jmp $394d54	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c 70 4d 39	jmp $394d70	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c 74 4d 39	jmp $394d74	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c 8d 50 39	jmp $39508d	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c 8c 39 39	jmp $39398c	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c 1b 51 39	jmp $39511b	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c 42 3d 39	jmp $393d42	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c cc 0a 39	jmp $390acc	SETSIZES        JML ISETSIZES       ; Set the size information in the kernel's text screen routines based on the screen configuration
.381130	1130	5c 43 52 39	jmp $395243	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c a9 51 39	jmp $3951a9	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c f2 51 39	jmp $3951f2	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.38113c	113c	5c 3b 72 39	jmp $39723b	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.381140	1140	5c 51 74 39	jmp $397451	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.381144	1144	5c 09 0b 39	jmp $390b09	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
.381148	1148	5c 6c 17 38	jmp $38176c	SETHANDLER      JML ISETHANDLER     ; Set the handler for the interrupt # in A to the FAR routine at Y:X
.38114c	114c	5c a5 0f 39	jmp $390fa5	DELAY           JML IDELAY          ; Wait at least Y:X ticks of the system clock.
.381150	1150	5c 00 80 39	jmp $398000	IP_INIT         JML kernel.net.user.init        ; Initialize the network stack; B:Y->ip_info
.381154	1154	5c 06 80 39	jmp $398006	UDP_SEND        JML kernel.net.user.udp_send    ; Send a UDP packet; 0:X->udp_info
.381158	1158	5c 0c 80 39	jmp $39800c	UDP_RECV        JML kernel.net.user.udp_recv    ; Recv a UDP packet; 0:X->udp_info
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.381700	1700	5c 37 60 39	jmp $396037	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c 74 10 39	jmp $391074	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c 74 10 39	jmp $391074	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c 74 10 39	jmp $391074	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c 74 10 39	jmp $391074	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.381714	1714	5c 74 10 39	jmp $391074	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.381718	1718	5c 74 10 39	jmp $391074	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.38171c	171c	5c 1d 7b 39	jmp $397b1d	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.381720	1720	5c b7 70 39	jmp $3970b7	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.381724	1724	5c 74 10 39	jmp $391074	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.381728	1728	5c 74 10 39	jmp $391074	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.38172c	172c	5c 74 10 39	jmp $391074	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.381730	1730	5c 74 10 39	jmp $391074	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.381734	1734	5c 74 10 39	jmp $391074	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.381738	1738	5c 74 10 39	jmp $391074	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.38173c	173c	5c 74 10 39	jmp $391074	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.381740	1740	5c 74 10 39	jmp $391074	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.381744	1744	5c 74 10 39	jmp $391074	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.381748	1748	5c 74 10 39	jmp $391074	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.38174c	174c	5c 74 10 39	jmp $391074	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.381750	1750	5c 74 10 39	jmp $391074	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.381754	1754	5c 74 10 39	jmp $391074	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.381758	1758	5c 74 10 39	jmp $391074	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.38175c	175c	5c 74 10 39	jmp $391074	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.381760	1760	5c 74 10 39	jmp $391074	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.381764	1764	5c 74 10 39	jmp $391074	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.381768	1768	5c 74 10 39	jmp $391074	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38176c						ISETHANDLER
.38176c		8b		phb		                PHB
.38176d		08		php		                PHP
.38176e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.381771		ab		plb		                PLB
.381772		ab		plb		                PLB
.381773		e2 20		sep #$20	                SEP #$20        ; set A short
.381775		c2 10		rep #$10	                REP #$10        ; set X long
.381777		48		pha		                PHA                     ; Save the interrupt number
.381778		5a		phy		                PHY                     ; Save the handler's bank
.381779		da		phx		                PHX                     ; Save the handler's address
.38177a		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.38177d						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.38177d		29 30		and #$30	                AND #$30                ; Isolate the block #
.38177f		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.381780		83 01		sta $01,s	                STA l_vector
.381782		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.381784		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.381786		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.381787		0a		asl a		                ASL A
.381788		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.38178a		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.38178c		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.38178d		a9 00		lda #$00	                LDA #<VEC_INT_START
.38178f		63 01		adc $01,s	                ADC l_vector
.381791		83 01		sta $01,s	                STA l_vector
.381793		a9 17		lda #$17	                LDA #>VEC_INT_START
.381795		63 02		adc $02,s	                ADC l_vector+1
.381797		83 02		sta $02,s	                STA l_vector+1
.381799		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.38179a		a0 00 00	ldy #$0000	                LDY #0
.38179d		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.38179f		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.3817a1		c8		iny		                INY                     ; Move to the low byte of the vector address
.3817a2		a3 03		lda $03,s	                LDA l_handler
.3817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817a6		c8		iny		                INY                     ; Move to the high byte of the vector address
.3817a7		a3 04		lda $04,s	                LDA l_handler+1
.3817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817ab		c8		iny		                INY                     ; Move to the bank of the vector address
.3817ac		a3 05		lda $05,s	                LDA l_handler+2
.3817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817b0		c2 20		rep #$20	                REP #$20        ; set A long
.3817b2		18		clc		                CLC                     ; Clean up the locals off the stack
.3817b3		3b		tsc		                TSC
.3817b4		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.3817b7		1b		tcs		                TCS
.3817b8		28		plp		                PLP
.3817b9		ab		plb		                PLB
.3817ba		6b		rtl		                RTL
.3817bb						IRQ_HANDLER
.3817bb		08		php		                PHP
.3817bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3817be		af 4c 01 00	lda $00014c					LDA @l INT_MASK_REG0
.3817c2		49 ff		eor #$ff					EOR #$FF
.3817c4		48		pha						PHA			; 1,s
.3817c5		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.3817c9		23 01		and $01,s					AND 1,s
.3817cb		d0 03		bne $3817d0	                BNE process_reg0
.3817cd		4c 24 18	jmp $381824	                JMP skip_block0      ; If nothing: skip to block 1
.3817d0		8f 40 01 00	sta $000140	process_reg0    STA @l INT_PENDING_REG0
.3817d4		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.3817d6		f0 06		beq $3817de	                BEQ continue            ; If not: skip the rest of this macro
.3817d8		48		pha						PHA
.3817d9		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.3817dd		68		pla						PLA
.3817de						continue
.3817de		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.3817e0		f0 06		beq $3817e8	                BEQ continue            ; If not: skip the rest of this macro
.3817e2		48		pha						PHA
.3817e3		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.3817e7		68		pla						PLA
.3817e8						continue
.3817e8		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.3817ea		f0 06		beq $3817f2	                BEQ continue            ; If not: skip the rest of this macro
.3817ec		48		pha						PHA
.3817ed		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.3817f1		68		pla						PLA
.3817f2						continue
.3817f2		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.3817f4		f0 06		beq $3817fc	                BEQ continue            ; If not: skip the rest of this macro
.3817f6		48		pha						PHA
.3817f7		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.3817fb		68		pla						PLA
.3817fc						continue
.3817fc		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.3817fe		f0 06		beq $381806	                BEQ continue            ; If not: skip the rest of this macro
.381800		48		pha						PHA
.381801		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.381805		68		pla						PLA
.381806						continue
.381806		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.381808		f0 06		beq $381810	                BEQ continue            ; If not: skip the rest of this macro
.38180a		48		pha						PHA
.38180b		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.38180f		68		pla						PLA
.381810						continue
.381810		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.381812		f0 06		beq $38181a	                BEQ continue            ; If not: skip the rest of this macro
.381814		48		pha						PHA
.381815		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.381819		68		pla						PLA
.38181a						continue
.38181a		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.38181c		f0 06		beq $381824	                BEQ continue            ; If not: skip the rest of this macro
.38181e		48		pha						PHA
.38181f		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.381823		68		pla						PLA
.381824						continue
.381824		68		pla		skip_block0     PLA
.381825						CHECK_PENDING_REG1
.381825		af 4d 01 00	lda $00014d					LDA @l INT_MASK_REG1
.381829		49 ff		eor #$ff					EOR #$FF
.38182b		48		pha						PHA			; 1,s
.38182c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.381830		23 01		and $01,s					AND 1,s
.381832		d0 03		bne $381837	                BNE process_reg1
.381834		4c 8b 18	jmp $38188b	                JMP skip_block1
.381837		8f 41 01 00	sta $000141	process_reg1    STA @l INT_PENDING_REG1
.38183b		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.38183d		f0 06		beq $381845	                BEQ continue            ; If not: skip the rest of this macro
.38183f		48		pha						PHA
.381840		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.381844		68		pla						PLA
.381845						continue
.381845		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.381847		f0 06		beq $38184f	                BEQ continue            ; If not: skip the rest of this macro
.381849		48		pha						PHA
.38184a		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.38184e		68		pla						PLA
.38184f						continue
.38184f		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.381851		f0 06		beq $381859	                BEQ continue            ; If not: skip the rest of this macro
.381853		48		pha						PHA
.381854		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.381858		68		pla						PLA
.381859						continue
.381859		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.38185b		f0 06		beq $381863	                BEQ continue            ; If not: skip the rest of this macro
.38185d		48		pha						PHA
.38185e		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.381862		68		pla						PLA
.381863						continue
.381863		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.381865		f0 06		beq $38186d	                BEQ continue            ; If not: skip the rest of this macro
.381867		48		pha						PHA
.381868		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.38186c		68		pla						PLA
.38186d						continue
.38186d		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.38186f		f0 06		beq $381877	                BEQ continue            ; If not: skip the rest of this macro
.381871		48		pha						PHA
.381872		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.381876		68		pla						PLA
.381877						continue
.381877		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.381879		f0 06		beq $381881	                BEQ continue            ; If not: skip the rest of this macro
.38187b		48		pha						PHA
.38187c		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.381880		68		pla						PLA
.381881						continue
.381881		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.381883		f0 06		beq $38188b	                BEQ continue            ; If not: skip the rest of this macro
.381885		48		pha						PHA
.381886		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.38188a		68		pla						PLA
.38188b						continue
.38188b		68		pla		skip_block1     PLA
.38188c						CHECK_PENDING_REG2
.38188c		af 4e 01 00	lda $00014e					LDA @l INT_MASK_REG2
.381890		49 ff		eor #$ff					EOR #$FF
.381892		48		pha						PHA			; 1,s
.381893		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.381897		23 01		and $01,s					AND 1,s
.381899		d0 03		bne $38189e	                BNE process_reg2
.38189b		4c f2 18	jmp $3818f2	                JMP skip_block2
.38189e		8f 42 01 00	sta $000142	process_reg2    STA @l INT_PENDING_REG2
.3818a2		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.3818a4		f0 06		beq $3818ac	                BEQ continue            ; If not: skip the rest of this macro
.3818a6		48		pha						PHA
.3818a7		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.3818ab		68		pla						PLA
.3818ac						continue
.3818ac		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.3818ae		f0 06		beq $3818b6	                BEQ continue            ; If not: skip the rest of this macro
.3818b0		48		pha						PHA
.3818b1		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.3818b5		68		pla						PLA
.3818b6						continue
.3818b6		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.3818b8		f0 06		beq $3818c0	                BEQ continue            ; If not: skip the rest of this macro
.3818ba		48		pha						PHA
.3818bb		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.3818bf		68		pla						PLA
.3818c0						continue
.3818c0		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.3818c2		f0 06		beq $3818ca	                BEQ continue            ; If not: skip the rest of this macro
.3818c4		48		pha						PHA
.3818c5		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.3818c9		68		pla						PLA
.3818ca						continue
.3818ca		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.3818cc		f0 06		beq $3818d4	                BEQ continue            ; If not: skip the rest of this macro
.3818ce		48		pha						PHA
.3818cf		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.3818d3		68		pla						PLA
.3818d4						continue
.3818d4		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.3818d6		f0 06		beq $3818de	                BEQ continue            ; If not: skip the rest of this macro
.3818d8		48		pha						PHA
.3818d9		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.3818dd		68		pla						PLA
.3818de						continue
.3818de		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.3818e0		f0 06		beq $3818e8	                BEQ continue            ; If not: skip the rest of this macro
.3818e2		48		pha						PHA
.3818e3		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.3818e7		68		pla						PLA
.3818e8						continue
.3818e8		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.3818ea		f0 06		beq $3818f2	                BEQ continue            ; If not: skip the rest of this macro
.3818ec		48		pha						PHA
.3818ed		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.3818f1		68		pla						PLA
.3818f2						continue
.3818f2		68		pla		skip_block2     PLA
.3818f3						CHECK_PENDING_REG3
.3818f3		af 4f 01 00	lda $00014f					LDA @l INT_MASK_REG3
.3818f7		49 ff		eor #$ff					EOR #$FF
.3818f9		48		pha						PHA			; 1,s
.3818fa		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.3818fe		23 01		and $01,s					AND 1,s
.381900		f0 22		beq $381924	                BEQ skip_block3
.381902		8f 43 01 00	sta $000143					STA @l INT_PENDING_REG3
.381906		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.381908		f0 06		beq $381910	                BEQ continue            ; If not: skip the rest of this macro
.38190a		48		pha						PHA
.38190b		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.38190f		68		pla						PLA
.381910						continue
.381910		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.381912		f0 06		beq $38191a	                BEQ continue            ; If not: skip the rest of this macro
.381914		48		pha						PHA
.381915		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.381919		68		pla						PLA
.38191a						continue
.38191a		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.38191c		f0 06		beq $381924	                BEQ continue            ; If not: skip the rest of this macro
.38191e		48		pha						PHA
.38191f		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.381923		68		pla						PLA
.381924						continue
.381924		68		pla		skip_block3     PLA
.381925						EXIT_IRQ_HANDLE
.381925		28		plp		                PLP
.381926		6b		rtl		                RTL
.381927		6b		rtl		NMI_HANDLER     RTL
.381928						HANDLE_TIMER0
.381928		48		pha		                PHA
.381929		08		php		                PHP
.38192a		e2 20		sep #$20	                SEP #$20        ; set A short
.38192c		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.381930		09 80		ora #$80	                ORA #TIMER0TRIGGER
.381932		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.381936		28		plp		                PLP
.381937		68		pla		                PLA
.381938		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1060					SIO_KB                  = $AF1060
=$af1100					PME_STS_REG             = $AF1100
=$af1102					PME_EN_REG		        = $AF1102
=$af1104					PME_STS1_REG		    = $AF1104
=$af1105					PME_STS2_REG		    = $AF1105
=$af1106					PME_STS3_REG		    = $AF1106
=$af1107					PME_STS4_REG		    = $AF1107
=$af1108					PME_STS5_REG		    = $AF1108
=$af110a					PME_EN1_REG             = $AF110A
=$af110b					PME_EN2_REG             = $AF110B
=$af110c					PME_EN3_REG             = $AF110C
=$af110d					PME_EN4_REG             = $AF110D
=$af110e					PME_EN5_REG             = $AF110E
=$af1110					SMI_STS1_REG		    = $AF1110
=$af1111					SMI_STS2_REG		    = $AF1111
=$af1112					SMI_STS3_REG		    = $AF1112
=$af1113					SMI_STS4_REG		    = $AF1113
=$af1114					SMI_STS5_REG		    = $AF1114
=$af1116					SMI_EN1_REG             = $AF1116
=$af1117					SMI_EN2_REG             = $AF1117
=$af1118					SMI_EN3_REG             = $AF1118
=$af1119					SMI_EN4_REG             = $AF1119
=$af111a					SMI_EN5_REG             = $AF111A
=$af111c					MSC_ST_REG              = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		    = $AF1123
=$af1124					GP11_REG    		    = $AF1124
=$af1125					GP12_REG    		    = $AF1125
=$af1126					GP13_REG    		    = $AF1126
=$af1127					GP14_REG    		    = $AF1127
=$af1128					GP15_REG    		    = $AF1128
=$af1129					GP16_REG    		    = $AF1129
=$af112a					GP17_REG    		    = $AF112A
=$af112b					GP20_REG    		    = $AF112B
=$af112c					GP21_REG    		    = $AF112C
=$af112d					GP22_REG		        = $AF112D
=$af112f					GP24_REG		        = $AF112F
=$af1130					GP25_REG		        = $AF1130
=$af1131					GP26_REG		        = $AF1131
=$af1132					GP27_REG		        = $AF1132
=$af1133					GP30_REG		        = $AF1133
=$af1134					GP31_REG		        = $AF1134
=$af1135					GP32_REG		        = $AF1135
=$af1136					GP33_REG		        = $AF1136
=$af1137					GP34_REG		        = $AF1137
=$af1138					GP35_REG		        = $AF1138
=$af1139					GP36_REG		        = $AF1139
=$af113a					GP37_REG		        = $AF113A
=$af113b					GP40_REG		        = $AF113B
=$af113c					GP41_REG		        = $AF113C
=$af113d					GP42_REG		        = $AF113D
=$af113e					GP43_REG		        = $AF113E
=$af113f					GP50_REG		        = $AF113F
=$af1140					GP51_REG		        = $AF1140
=$af1141					GP52_REG		        = $AF1141
=$af1142					GP53_REG		        = $AF1142
=$af1143					GP54_REG		        = $AF1143
=$af1144					GP55_REG		        = $AF1144
=$af1145					GP56_REG		        = $AF1145
=$af1146					GP57_REG		        = $AF1146
=$af1147					GP60_REG		        = $AF1147
=$af1148					GP61_REG		        = $AF1148
=$af114b					GP1_REG			        = $AF114B
=$af114c					GP2_REG			        = $AF114C
=$af114d					GP3_REG			        = $AF114D
=$af114e					GP4_REG			        = $AF114E
=$af114f					GP5_REG			        = $AF114F
=$af1150					GP6_REG			        = $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG                = $AF1157
=$af1158					FAN_CTRL_REG  	        = $AF1158
=$af1159					FAN1_TACH_REG           = $AF1159
=$af115a					FAN2_TACH_REG           = $AF115A
=$af115b					FAN1_PRELOAD_REG        = $AF115B
=$af115c					FAN2_PRELOAD_REG        = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE      = $AF115F
=$af1200					SIO_JOY                 = $AF1200
=$af12f8					SIO_COM1                = $AF12F8
=$af1330					SIO_MPU                 = $AF1330
=$af1378					SIO_LPT0                = $AF1378
=$af13f0					SIO_FDC                 = $AF13F0
=$af13f0					SIO_FDC_SRA             = $AF13F0 ; Read Only - Status Register A
=$af13f1					SIO_FDC_SRB             = $AF13F1 ; Read Only - Status Register B
=$af13f2					SIO_FDC_DOR             = $AF13F2 ; Read/Write - Digital Output Register
=$af13f3					SIO_FDC_TSR             = $AF13F3 ; Read/Write - Tape Drive Status
=$af13f4					SIO_FDC_MSR             = $AF13F4 ; Read - Main Status Register
=$af13f4					SIO_FDC_DSR             = $AF13F4 ; Write - Data Select Register
=$af13f5					SIO_FDC_DTA             = $AF13F5 ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV             = $AF13F6 ; Reserved
=$af13f7					SIO_FDC_DIR             = $AF13F7 ; Read - Digital Input Register
=$af13f8					SIO_FDC_CCR             = $AF13F8 ; Write - Configuration Control Register
=$af13f8					SIO_COM0                = $AF13F8

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1064					    STATUS_PORT 	= $AF1064
=$af1064					    KBD_STATUS      = $AF1064
=$af1060					    KBD_OUT_BUF 	= $AF1060
=$af1060					    KBD_INPT_BUF	= $AF1060
=$af1064					    KBD_CMD_BUF		= $AF1064
=$af1060					    KBD_DATA_BUF	= $AF1060
=$af1060					    PORT_A		    = $AF1060
=$af1061					    PORT_B			= $AF1061
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$04						SYNC_Turn_Off           = $04 ; 0 = Normal Operation, 1 = Turn Off Sync to get sleep mode from Monitor
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select, Bit[6] - Collision On
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390418		2b		pld		                PLD
.390419		e2 20		sep #$20	                SEP #$20        ; set A short
.39041b		a2 00 00	ldx #$0000	                LDX #$0000
.39041e		a9 00		lda #$00	                LDA #$00
.390420						CLEAR_MEM_LOOP
.390420		95 00		sta $00,x	                STA $0000, X
.390422		e8		inx		                INX
.390423		e0 00 01	cpx #$0100	                CPX #$0100
.390426		d0 f8		bne $390420	                BNE CLEAR_MEM_LOOP
.390428		ea		nop		                NOP
.390429		a9 ff		lda #$ff	                LDA #$FF
.39042b		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.39042f		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390433		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.390437		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.39043b		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.39043f		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390443		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.390447		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.39044b		22 83 0c 39	jsl $390c83	                JSL INITRTC               ; Initialize the RTC
.39044f		e2 20		sep #$20	                SEP #$20        ; set A short
.390451		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.390455		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.390457		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.390459		d0 1e		bne $390479	                BNE SkipInitExpC100C200
.39045b		c2 20		rep #$20	                REP #$20        ; set A long
.39045d		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.390461		c9 64 00	cmp #$0064	                CMP #$0064
.390464		f0 0f		beq $390475	                BEQ InitC100ESID
.390466		c9 c8 00	cmp #$00c8	                CMP #$00C8
.390469		d0 0e		bne $390479	                BNE SkipInitExpC100C200
.39046b		22 04 64 39	jsl $396404	                JSL SIMPLE_INIT_ETHERNET_CTRL
.39046f		22 15 65 39	jsl $396515	                JSL INIT_EVID_VID_MODE
.390473		80 04		bra $390479	                BRA SkipInitExpC100C200
.390475						InitC100ESID:
.390475		22 04 64 39	jsl $396404	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390479						SkipInitExpC100C200:
.390479		e2 20		sep #$20	                SEP #$20        ; set A short
.39047b		c2 10		rep #$10	                REP #$10        ; set X long
.39047d		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.39047f		8f 00 f1 af	sta $aff100	                STA $AFF100
.390483		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.390485		8f 00 f1 af	sta $aff100	                STA $AFF100
.390489		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.39048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39048f		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.390491		8f 00 f1 af	sta $aff100	                STA $AFF100
.390495		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.390497		85 1e		sta $1e		                STA CURCOLOR
.390499		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.39049d		29 01		and #$01	                AND #$01
.39049f		c9 01		cmp #$01	                CMP #$01
.3904a1		d0 14		bne $3904b7	                BNE Alreadyin640480Mode
.3904a3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904a7		29 fc		and #$fc	                AND #$FC
.3904a9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904ad		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904b1		09 01		ora #$01	                ORA #$01
.3904b3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904b7						Alreadyin640480Mode
.3904b7		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904bb		29 fc		and #$fc	                AND #$FC
.3904bd		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.3904c1		a9 00		lda #$00	                LDA #0
.3904c3		22 38 10 00	jsl $001038	                JSL SETIN
.3904c7		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3904cb		22 a8 66 39	jsl $3966a8	                JSL ANSI_INIT
.3904cf		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.3904d3		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904d7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3904d9		22 b0 10 00	jsl $0010b0	                JSL INITSUPERIO
.3904dd		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904e1		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.3904e5		22 46 0b 39	jsl $390b46	                JSL INITMOUSEPOINTER
.3904e9		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.3904ed		a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904f0		22 50 53 39	jsl $395350	                JSL UART_SELECT
.3904f4		22 b0 53 39	jsl $3953b0	                JSL UART_INIT
.3904f8		a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.3904fb		22 50 53 39	jsl $395350	                JSL UART_SELECT
.3904ff		22 b0 53 39	jsl $3953b0	                JSL UART_INIT
.390503		c2 20		rep #$20	                REP #$20        ; set A long
.390505		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390508		2b		pld		                PLD
.390509		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD        ; Initialize the keyboard
.39050d		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.390511		58		cli		                CLI
.390512		e2 20		sep #$20	                SEP #$20        ; set A short
.390514		c2 10		rep #$10	                REP #$10        ; set X long
.390516		f4 39 39	pea #$3939	                PEA #((`greet_msg) * 256) + (`greet_msg)
.390519		ab		plb		                PLB
.39051a		ab		plb		                PLB
.39051b		a2 00 00	ldx #$0000	                LDX #0
.39051e		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.390522		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390526		e8		inx		                INX
.390527		e0 00 10	cpx #$1000	                CPX #$1000
.39052a		d0 f2		bne $39051e	                BNE jmpcopy
.39052c						retry_boot
.39052c		22 86 3c 39	jsl $393c86	                JSL DOS_INIT            ; Initialize the "disc operating system"
.390530		22 5d 7b 39	jsl $397b5d	                JSL BOOT_SOUND          ; Play the boot sound
.390534		a9 00		lda #$00	                LDA #0
.390536		8f e0 00 00	sta $0000e0	                STA @l MOUSE_IDX
.39053a		22 00 00 3e	jsl $3e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.39053e		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.390542		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.390546						greet
.390546		c2 30		rep #$30	                REP #$30        ; set A&X long
.390548		f4 39 39	pea #$3939	                PEA #((`greet_msg) * 256) + (`greet_msg)
.39054b		ab		plb		                PLB
.39054c		ab		plb		                PLB
.39054d		a2 1b 88	ldx #$881b	                LDX #<>greet_msg
.390550		22 fc 06 39	jsl $3906fc	                JSL IPRINT              ; print the first line
.390554		22 e3 08 39	jsl $3908e3	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.390558		22 f5 65 39	jsl $3965f5	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.39055c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39055e		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.390561		1b		tcs		                TAS
.390562		e2 20		sep #$20	                SEP #$20        ; set A short
.390564		c2 10		rep #$10	                REP #$10        ; set X long
.390566		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.39056a		c9 39		cmp #$39	                CMP #SCAN_SP          ; Did the user press SPACE?
.39056c		f0 10		beq $39057e	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39056e		c9 1c		cmp #$1c	                CMP #SCAN_CR          ; Did the user press RETURN?
.390570		f0 1e		beq $390590	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.390572		c9 3b		cmp #$3b	                CMP #CHAR_F1          ; Did the user press F1?
.390574		f0 62		beq $3905d8	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390576		c9 3c		cmp #$3c	                CMP #CHAR_F2          ; Did the user press F2?
.390578		f0 1d		beq $390597	                BEQ BOOTSDC           ; Yes: boot via the SDC
.39057a		c9 3d		cmp #$3d	                CMP #CHAR_F3          ; Did the user press F3?
.39057c		f0 39		beq $3905b7	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39057e		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390582		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390584		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390586		f0 2f		beq $3905b7	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390588		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.39058a		f0 0b		beq $390597	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.39058c		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.39058e		f0 48		beq $3905d8	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.390590						IRESTORE
.390590		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.390594		ea		nop		CREDIT_LOCK     NOP
.390595		80 fd		bra $390594	                BRA CREDIT_LOCK
.390597		a2 b3 8c	ldx #$8cb3	BOOTSDC         LDX #<>sdc_boot
.39059a		22 fc 06 39	jsl $3906fc	                JSL IPRINT
.39059e		e2 20		sep #$20	                SEP #$20        ; set A short
.3905a0		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905a2		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905a6		22 42 3d 39	jsl $393d42	                JSL DOS_MOUNT         ; Mount the SDC
.3905aa		90 06		bcc $3905b2	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905ac		22 f2 3e 39	jsl $393ef2	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905b0		80 de		bra $390590	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905b2		a2 37 8c	ldx #$8c37	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905b5		80 40		bra $3905f7	                BRA PR_BOOT_ERROR
.3905b7		a2 ca 8c	ldx #$8cca	BOOTIDE         LDX #<>ide_boot
.3905ba		22 fc 06 39	jsl $3906fc	                JSL IPRINT
.3905be		e2 20		sep #$20	                SEP #$20        ; set A short
.3905c0		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905c2		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905c6		22 42 3d 39	jsl $393d42	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905ca		90 07		bcc $3905d3	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905cc		22 f2 3e 39	jsl $393ef2	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905d0		82 bd ff	brl $390590	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905d3		a2 53 8c	ldx #$8c53	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905d6		80 1f		bra $3905f7	                BRA PR_BOOT_ERROR
.3905d8		a2 9c 8c	ldx #$8c9c	BOOTFLOPPY      LDX #<>fdc_boot
.3905db		22 fc 06 39	jsl $3906fc	                JSL IPRINT
.3905df		e2 20		sep #$20	                SEP #$20        ; set A short
.3905e1		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905e3		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905e7		22 f7 5d 39	jsl $395df7	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905eb		90 07		bcc $3905f4	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905ed		22 f2 3e 39	jsl $393ef2	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.3905f1		82 9c ff	brl $390590	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.3905f4		a2 76 8c	ldx #$8c76	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905f7		22 fc 06 39	jsl $3906fc	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.3905fb		a2 12 8c	ldx #$8c12	                LDX #<>boot_retry     ; Print the boot retry prompt
.3905fe		22 fc 06 39	jsl $3906fc	                JSL IPRINT
.390602		22 96 06 39	jsl $390696	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390606		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390608		d0 03		bne $39060d	                BNE chk_r_lc
.39060a		82 1f ff	brl $39052c	                BRL retry_boot        ; Yes: retry the boot sequence
.39060d		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.39060f		d0 03		bne $390614	                BNE chk_b_lc
.390611		82 18 ff	brl $39052c	                BRL retry_boot
.390614		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390616		d0 03		bne $39061b	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.390618		82 75 ff	brl $390590	                BRL BOOTBASIC
.39061b						chk_b_lc_not:
.39061b		c9 42		cmp #$42	                CMP #'B'
.39061d		d0 03		bne $390622	                BNE chk_b_lc_not0
.39061f		82 6e ff	brl $390590	                BRL BOOTBASIC
.390622						chk_b_lc_not0:
.390622		80 de		bra $390602	                BRA boot_wait_key     ; No: keep waiting
.390624						IBREAK
.390624		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390627		2b		pld		                PLD
.390628		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.390629		8f 48 02 00	sta $000248	                STA CPUY
.39062d		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.39062e		8f 46 02 00	sta $000246	                STA CPUX
.390632		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.390633		8f 44 02 00	sta $000244	                STA CPUA
.390637		68		pla		                PLA
.390638		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.39063c		e2 20		sep #$20	                SEP #$20        ; set A short
.39063e		68		pla		                PLA             ; Pull Data Bank (8 bits)
.39063f		8f 4e 02 00	sta $00024e	                STA CPUDBR
.390643		68		pla		                PLA             ; Pull Flags (8 bits)
.390644		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.390648		c2 20		rep #$20	                REP #$20        ; set A long
.39064a		68		pla		                PLA             ; Pull Program Counter (16 bits)
.39064b		8f 40 02 00	sta $000240	                STA CPUPC
.39064f		e2 20		sep #$20	                SEP #$20        ; set A short
.390651		68		pla		                PLA             ; Pull Program Bank (8 bits)
.390652		8f 42 02 00	sta $000242	                STA CPUPBR
.390656		c2 20		rep #$20	                REP #$20        ; set A long
.390658		3b		tsc		                TSA             ; Get the stack
.390659		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.39065d		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.390660		1b		tcs		                TAS
.390661		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.390665						IREADY
.390665		f4 39 39	pea #$3939	                PEA #((`ready_msg) * 256) + (`ready_msg)
.390668		ab		plb		                PLB
.390669		ab		plb		                PLB
.39066a		e2 20		sep #$20	                SEP #$20        ; set A short
.39066c		a2 e5 8c	ldx #$8ce5	                LDX #<>ready_msg
.39066f		22 fc 06 39	jsl $3906fc	                JSL IPRINT
.390673						IREADYWAIT
.390673		22 8d 06 39	jsl $39068d	                JSL IGETCHE
.390677		80 fa		bra $390673	                BRA IREADYWAIT
.390679		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.39067a		db		stp		IRETURN         STP
.39067b		08		php		ISETIN          PHP
.39067c		e2 20		sep #$20	                SEP #$20        ; set A short
.39067e		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.390682		28		plp		                PLP
.390683		6b		rtl		                RTL
.390684		08		php		ISETOUT         PHP
.390685		e2 20		sep #$20	                SEP #$20        ; set A short
.390687		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.39068b		28		plp		                PLP
.39068c		6b		rtl		                RTL
.39068d		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.390691		22 18 10 00	jsl $001018	                JSL PUTC
.390695		6b		rtl		                RTL
.390696						IGETCHW
.390696		da		phx		                PHX
.390697		5a		phy		                PHY
.390698		8b		phb		                PHB
.390699		0b		phd		                PHD
.39069a		08		php		                PHP
.39069b		e2 20		sep #$20	                SEP #$20        ; set A short
.39069d		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.3906a1		f0 1b		beq $3906be	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.3906a3		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906a5		f0 0d		beq $3906b4	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906a7		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906a9		f0 09		beq $3906b4	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906ab		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906ad		28		plp		                PLP
.3906ae		38		sec		                SEC                 ; And return carry set
.3906af		2b		pld		                PLD
.3906b0		ab		plb		                PLB
.3906b1		7a		ply		                PLY
.3906b2		fa		plx		                PLX
.3906b3		6b		rtl		                RTL
.3906b4		22 50 53 39	jsl $395350	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906b8		22 ec 53 39	jsl $3953ec	                JSL UART_GETC       ; Get the charater from the COM port
.3906bc		80 04		bra $3906c2	                BRA done
.3906be		22 bf 72 39	jsl $3972bf	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.3906c2		28		plp		done            PLP
.3906c3		18		clc		                CLC                 ; Return carry clear for valid data
.3906c4		2b		pld		                PLD
.3906c5		ab		plb		                PLB
.3906c6		7a		ply		                PLY
.3906c7		fa		plx		                PLX
.3906c8		6b		rtl		                RTL
.3906c9						IGETCH
.3906c9		da		phx		                PHX
.3906ca		5a		phy		                PHY
.3906cb		8b		phb		                PHB
.3906cc		0b		phd		                PHD
.3906cd		08		php		                PHP
.3906ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3906d0		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.3906d4		f0 1b		beq $3906f1	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.3906d6		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906d8		f0 0d		beq $3906e7	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906da		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906dc		f0 09		beq $3906e7	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906de		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906e0		28		plp		                PLP
.3906e1		38		sec		                SEC                 ; And return carry set
.3906e2		2b		pld		                PLD
.3906e3		ab		plb		                PLB
.3906e4		7a		ply		                PLY
.3906e5		fa		plx		                PLX
.3906e6		6b		rtl		                RTL
.3906e7		22 50 53 39	jsl $395350	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906eb		22 ec 53 39	jsl $3953ec	                JSL UART_GETC       ; Get the charater from the COM port
.3906ef		80 04		bra $3906f5	                BRA done
.3906f1		22 cb 72 39	jsl $3972cb	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.3906f5		28		plp		done            PLP
.3906f6		18		clc		                CLC                 ; Return carry clear for valid data
.3906f7		2b		pld		                PLD
.3906f8		ab		plb		                PLB
.3906f9		7a		ply		                PLY
.3906fa		fa		plx		                PLX
.3906fb		6b		rtl		                RTL
.3906fc		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.390700		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.390704		6b		rtl		                RTL
.390705		48		pha		IPUTS           PHA
.390706		08		php		                PHP
.390707		e2 20		sep #$20	                SEP #$20        ; set A short
.390709		c2 10		rep #$10	                REP #$10        ; set X long
.39070b		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.39070e		f0 08		beq $390718	                BEQ iputs_done
.390710		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.390714		e8		inx		iputs3          INX
.390715		4c 0b 07	jmp $39070b	                JMP iputs1
.390718		e8		inx		iputs_done      INX
.390719		28		plp		                PLP
.39071a		68		pla		                PLA
.39071b		6b		rtl		                RTL
.39071c						IPUTC
.39071c		da		phx		                PHX
.39071d		5a		phy		                PHY
.39071e		0b		phd		                PHD
.39071f		8b		phb		                PHB
.390720		08		php		                PHP                 ; stash the flags (we'll be changing M)
.390721		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390724		2b		pld		                PLD
.390725		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.390728		ab		plb		                PLB
.390729		ab		plb		                PLB
.39072a		e2 20		sep #$20	                SEP #$20        ; set A short
.39072c		c2 10		rep #$10	                REP #$10        ; set X long
.39072e		48		pha		                PHA                 ; Save the character to print
.39072f		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390733		f0 1a		beq $39074f	                BEQ putc_ansi       ; If it's 0: print to the screen
.390735		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.390737		f0 16		beq $39074f	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.390739		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.39073b		f0 07		beq $390744	                BEQ putc_uart       ; Yes: handle printing to the UART
.39073d		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.39073f		f0 03		beq $390744	                BEQ putc_uart       ; Yes: handle printing to the UART
.390741		68		pla		                PLA                 ; Otherwise, just exit
.390742		80 10		bra $390754	                BRA done
.390744		22 50 53 39	jsl $395350	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.390748		68		pla		                PLA                 ; Recover the character to send
.390749		22 07 54 39	jsl $395407	                JSL UART_PUTC       ; Send the character
.39074d		80 05		bra $390754	                BRA done
.39074f		68		pla		putc_ansi       PLA                 ; Recover the character to send
.390750		22 e7 68 39	jsl $3968e7	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.390754		28		plp		done            PLP
.390755		ab		plb		                PLB
.390756		2b		pld		                PLD
.390757		7a		ply		                PLY
.390758		fa		plx		                PLX
.390759		6b		rtl		                RTL
.39075a		da		phx		SCRSHIFTLL      PHX
.39075b		5a		phy		                PHY
.39075c		48		pha		                PHA
.39075d		0b		phd		                PHD
.39075e		08		php		                PHP
.39075f		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.390762		2b		pld		                PLD
.390763		c2 30		rep #$30	                REP #$30        ; set A&X long
.390765		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390767		a8		tay		                TAY                 ; Set it as the destination
.390768		aa		tax		                TAX
.390769		e8		inx		                INX                 ; And set the next cell as the source
.39076a		18		clc		                CLC                 ; Calculate the length of the block to move
.39076b		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.39076d		e5 1a		sbc $1a		                SBC CURSORX
.39076f		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.390772		28		plp		                PLP
.390773		2b		pld		                PLD
.390774		68		pla		                PLA
.390775		7a		ply		                PLY
.390776		fa		plx		                PLX
.390777		6b		rtl		                RTL
.390778		da		phx		SCRSHIFTLR      PHX
.390779		48		pha		                PHA
.39077a		0b		phd		                PHD
.39077b		08		php		                PHP
.39077c		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.39077f		2b		pld		                PLD
.390780		c2 30		rep #$30	                REP #$30        ; set A&X long
.390782		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.390784		1a		inc a		                INC A
.390785		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.390787		b0 1b		bcs $3907a4	                BGE done            ; Yes: just skip the whole thing
.390789		38		sec		                SEC                 ; Calculate the length of the block to move
.39078a		a5 0f		lda $0f		                LDA COLS_VISIBLE
.39078c		e5 1a		sbc $1a		                SBC CURSORX
.39078e		1a		inc a		                INC A
.39078f		18		clc		                CLC
.390790		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.390792		3a		dec a		                DEC A
.390793		a8		tay		                TAY                 ; Make it the destination
.390794		3a		dec a		                DEC A               ; Move to the previous column
.390795		aa		tax		                TAX                 ; Make it the source
.390796		38		sec		                SEC                 ; Calculate the length of the block to move
.390797		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390799		e5 1a		sbc $1a		                SBC CURSORX
.39079b		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.39079e		e2 20		sep #$20	                SEP #$20        ; set A short
.3907a0		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3907a2		87 17		sta [$17]	                STA [CURSORPOS]
.3907a4		28		plp		done            PLP
.3907a5		2b		pld		                PLD
.3907a6		68		pla		                PLA
.3907a7		fa		plx		                PLX
.3907a8		6b		rtl		                RTL
.3907a9						IPUTB
.3907a9		6b		rtl		                RTL
.3907aa						IPRINTCR
.3907aa		da		phx		                PHX
.3907ab		5a		phy		                PHY
.3907ac		8b		phb		                PHB
.3907ad		0b		phd		                PHD
.3907ae		08		php		                PHP
.3907af		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3907b2		ab		plb		                PLB
.3907b3		ab		plb		                PLB
.3907b4		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.3907b7		2b		pld		                PLD
.3907b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3907ba		c2 10		rep #$10	                REP #$10        ; set X long
.3907bc		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3907c0		f0 1c		beq $3907de	                BEQ scr_printcr
.3907c2		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3907c4		f0 06		beq $3907cc	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907c6		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3907c8		f0 02		beq $3907cc	                BEQ uart_printcr    ; Yes: handle printing to the UART
.3907ca		80 1c		bra $3907e8	                BRA done
.3907cc		22 50 53 39	jsl $395350	uart_printcr    JSL UART_SELECT
.3907d0		a9 0d		lda #$0d	                LDA #CHAR_CR
.3907d2		22 18 10 00	jsl $001018	                JSL PUTC
.3907d6		a9 0a		lda #$0a	                LDA #CHAR_LF
.3907d8		22 18 10 00	jsl $001018	                JSL PUTC
.3907dc		80 0a		bra $3907e8	                BRA done
.3907de		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.3907e1		a4 1c		ldy $1c		                LDY CURSORY
.3907e3		c8		iny		                INY
.3907e4		22 84 10 00	jsl $001084	                JSL LOCATE
.3907e8		28		plp		done            PLP
.3907e9		2b		pld		                PLD
.3907ea		ab		plb		                PLB
.3907eb		7a		ply		                PLY
.3907ec		fa		plx		                PLX
.3907ed		6b		rtl		                RTL
.3907ee		da		phx		ICSRHOME        PHX
.3907ef		5a		phy		                PHY
.3907f0		08		php		                PHP
.3907f1		a2 00 00	ldx #$0000	                LDX #0
.3907f4		a0 00 00	ldy #$0000	                LDY #0
.3907f7		22 84 10 00	jsl $001084	                JSL LOCATE
.3907fb		28		plp		                PLP
.3907fc		7a		ply		                PLY
.3907fd		fa		plx		                PLX
.3907fe		6b		rtl		                RTL
.3907ff		da		phx		ICSRRIGHT       PHX
.390800		5a		phy		                PHY
.390801		48		pha		                PHA
.390802		0b		phd		                PHD
.390803		08		php		                PHP
.390804		22 9f 6d 39	jsl $396d9f	                JSL ANSI_CSRRIGHT
.390808		28		plp		                PLP
.390809		2b		pld		                PLD
.39080a		68		pla		                PLA
.39080b		7a		ply		                PLY
.39080c		fa		plx		                PLX
.39080d		6b		rtl		                RTL
.39080e						ICSRLEFT
.39080e		da		phx		                PHX
.39080f		5a		phy		                PHY
.390810		48		pha		                PHA
.390811		0b		phd		                PHD
.390812		08		php		                PHP
.390813		22 ca 6d 39	jsl $396dca	                JSL ANSI_CSRLEFT
.390817		28		plp		                PLP
.390818		2b		pld		                PLD
.390819		68		pla		                PLA
.39081a		7a		ply		                PLY
.39081b		fa		plx		                PLX
.39081c		6b		rtl		                RTL
.39081d						ICSRUP
.39081d		da		phx		                PHX
.39081e		5a		phy		                PHY
.39081f		48		pha		                PHA
.390820		0b		phd		                PHD
.390821		08		php		                PHP
.390822		22 e8 6d 39	jsl $396de8	                JSL ANSI_CSRUP
.390826		28		plp		                PLP
.390827		2b		pld		                PLD
.390828		68		pla		                PLA
.390829		7a		ply		                PLY
.39082a		fa		plx		                PLX
.39082b		6b		rtl		                RTL
.39082c		da		phx		ICSRDOWN        PHX
.39082d		5a		phy		                PHY
.39082e		0b		phd		                PHD
.39082f		22 06 6e 39	jsl $396e06	                JSL ANSI_CSRDOWN
.390833		2b		pld		                PLD
.390834		7a		ply		                PLY
.390835		fa		plx		                PLX
.390836		6b		rtl		                RTL
.390837		48		pha		ILOCATE         PHA
.390838		0b		phd		                PHD
.390839		08		php		                PHP
.39083a		22 29 6e 39	jsl $396e29	                JSL ANSI_LOCATE
.39083e		28		plp		ilocate_done    PLP
.39083f		2b		pld		                PLD
.390840		68		pla		                PLA
.390841		6b		rtl		                RTL
.390842						ISCROLLUP
.390842		48		pha		                PHA
.390843		da		phx		                PHX
.390844		5a		phy		                PHY
.390845		8b		phb		                PHB
.390846		0b		phd		                PHD
.390847		08		php		                PHP
.390848		22 8d 6e 39	jsl $396e8d	                JSL ANSI_SCROLLUP
.39084c		28		plp		                PLP
.39084d		2b		pld		                PLD
.39084e		ab		plb		                PLB
.39084f		7a		ply		                PLY
.390850		fa		plx		                PLX
.390851		68		pla		                PLA
.390852		6b		rtl		                RTL
.390853		08		php		IPRINTH         PHP
.390854		48		pha		                PHA
.390855						iprinth1
.390855		e2 20		sep #$20	                SEP #$20        ; set A short
.390857		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.39085a		4a		lsr a		                LSR
.39085b		4a		lsr a		                LSR
.39085c		4a		lsr a		                LSR
.39085d		4a		lsr a		                LSR
.39085e		22 ad 08 39	jsl $3908ad	                JSL iprint_digit
.390862		bd 00 00	lda $0000,x	                LDA #0,b,x
.390865		22 ad 08 39	jsl $3908ad	                JSL iprint_digit
.390869		ca		dex		                DEX
.39086a		88		dey		                DEY
.39086b		d0 e8		bne $390855	                BNE iprinth1
.39086d		68		pla		                PLA
.39086e		28		plp		                PLP
.39086f		6b		rtl		                RTL
.390870						IPRINTAH
.390870		48		pha		                PHA
.390871		08		php		                PHP
.390872		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.390876		08		php		                PHP                   ; Get the processor status into A
.390877		e2 20		sep #$20	                SEP #$20        ; set A short
.390879		c2 10		rep #$10	                REP #$10        ; set X long
.39087b		68		pla		                PLA
.39087c		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.39087e		c9 20		cmp #$20	                CMP #%00100000
.390880		f0 14		beq $390896	                BEQ eight_bit
.390882		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.390886		4a		lsr a		                LSR A
.390887		4a		lsr a		                LSR A
.390888		4a		lsr a		                LSR A
.390889		4a		lsr a		                LSR A
.39088a		22 ad 08 39	jsl $3908ad	                JSL iprint_digit      ; And print it
.39088e		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.390892		22 ad 08 39	jsl $3908ad	                JSL iprint_digit      ; And print it
.390896		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.39089a		4a		lsr a		                LSR A
.39089b		4a		lsr a		                LSR A
.39089c		4a		lsr a		                LSR A
.39089d		4a		lsr a		                LSR A
.39089e		22 ad 08 39	jsl $3908ad	                JSL iprint_digit      ; And print it
.3908a2		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.3908a6		22 ad 08 39	jsl $3908ad	                JSL iprint_digit      ; And print it
.3908aa		28		plp		                PLP
.3908ab		68		pla		                PLA
.3908ac		6b		rtl		                RTL
.3908ad		da		phx		iprint_digit    PHX
.3908ae		c2 20		rep #$20	                REP #$20        ; set A long
.3908b0		29 0f 00	and #$000f	                AND #$0F
.3908b3		aa		tax		                TAX
.3908b4		bf f9 8c 39	lda $398cf9,x	                LDA hex_digits,X
.3908b8		22 1c 07 39	jsl $39071c	                JSL IPUTC       ; Print the digit
.3908bc		fa		plx		                PLX
.3908bd		6b		rtl		                RTL
.3908be		48		pha		ICLRSCREEN	    PHA
.3908bf		da		phx		                PHX
.3908c0		08		php		                PHP
.3908c1		22 22 6f 39	jsl $396f22	                JSL ANSI_CLRSCREEN
.3908c5		28		plp		                PLP
.3908c6		fa		plx		                PLX
.3908c7		68		pla		                PLA
.3908c8		6b		rtl		                RTL
.3908c9						COPYBYTES42
.3908c9		08		php		                PHP
.3908ca		0b		phd		                PHD
.3908cb		f4 00 00	pea #$0000	                PEA #TMPPTR1         ; set DP to page 0
.3908ce		2b		pld		                PLD
.3908cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3908d1		c2 10		rep #$10	                REP #$10        ; set X long
.3908d3		a0 00 00	ldy #$0000	                LDY #0
.3908d6		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.3908d8		97 04		sta [$04],y	                STA [TMPPTR2],Y
.3908da		c8		iny		                INY
.3908db		c0 2a 00	cpy #$002a	                CPY #42
.3908de		d0 f6		bne $3908d6	                BNE copy_loop
.3908e0		2b		pld		                PLD
.3908e1		28		plp		                PLP
.3908e2		60		rts		                RTS
.3908e3						ICOLORFLAG
.3908e3		48		pha		                PHA
.3908e4		da		phx		                PHX
.3908e5		5a		phy		                PHY
.3908e6		08		php		                PHP
.3908e7		8b		phb		                PHB
.3908e8		0b		phd		                PHD
.3908e9		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.3908ec		2b		pld		                PLD
.3908ed		c2 30		rep #$30	                REP #$30        ; set A&X long
.3908ef		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.3908f2		85 04		sta $04		                STA TMPPTR2
.3908f4		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.3908f7		85 06		sta $06		                STA TMPPTR2+2
.3908f9		a9 56 89	lda #$8956	                LDA #<>greet_clr_line1
.3908fc		85 00		sta $00		                STA TMPPTR1
.3908fe		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.390901		85 02		sta $02		                STA TMPPTR1+2
.390903		20 c9 08	jsr $3908c9	                JSR COPYBYTES42
.390906		18		clc		                CLC
.390907		a5 04		lda $04		                LDA TMPPTR2
.390909		65 11		adc $11		                ADC COLS_PER_LINE
.39090b		85 04		sta $04		                STA TMPPTR2
.39090d		a9 80 89	lda #$8980	                LDA #<>greet_clr_line2
.390910		85 00		sta $00		                STA TMPPTR1
.390912		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.390915		85 02		sta $02		                STA TMPPTR1+2
.390917		20 c9 08	jsr $3908c9	                JSR COPYBYTES42
.39091a		18		clc		                CLC
.39091b		a5 04		lda $04		                LDA TMPPTR2
.39091d		65 11		adc $11		                ADC COLS_PER_LINE
.39091f		85 04		sta $04		                STA TMPPTR2
.390921		a9 aa 89	lda #$89aa	                LDA #<>greet_clr_line3
.390924		85 00		sta $00		                STA TMPPTR1
.390926		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390929		85 02		sta $02		                STA TMPPTR1+2
.39092b		20 c9 08	jsr $3908c9	                JSR COPYBYTES42
.39092e		18		clc		                CLC
.39092f		a5 04		lda $04		                LDA TMPPTR2
.390931		65 11		adc $11		                ADC COLS_PER_LINE
.390933		85 04		sta $04		                STA TMPPTR2
.390935		a9 d4 89	lda #$89d4	                LDA #<>greet_clr_line4
.390938		85 00		sta $00		                STA TMPPTR1
.39093a		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.39093d		85 02		sta $02		                STA TMPPTR1+2
.39093f		20 c9 08	jsr $3908c9	                JSR COPYBYTES42
.390942		18		clc		                CLC
.390943		a5 04		lda $04		                LDA TMPPTR2
.390945		65 11		adc $11		                ADC COLS_PER_LINE
.390947		85 04		sta $04		                STA TMPPTR2
.390949		a9 fe 89	lda #$89fe	                LDA #<>greet_clr_line5
.39094c		85 00		sta $00		                STA TMPPTR1
.39094e		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.390951		85 02		sta $02		                STA TMPPTR1+2
.390953		20 c9 08	jsr $3908c9	                JSR COPYBYTES42
.390956		2b		pld		                PLD
.390957		ab		plb		                PLB
.390958		28		plp		                PLP
.390959		7a		ply		                PLY
.39095a		fa		plx		                PLX
.39095b		68		pla		                PLA
.39095c		6b		rtl		                RTL
.39095d		0b		phd		IINITCHLUT		PHD
.39095e		08		php		                PHP
.39095f		48		pha		                PHA
.390960		da		phx		                PHX
.390961		22 ed 66 39	jsl $3966ed	                JSL ANSI_INIT_LUTS
.390965		fa		plx		                PLX
.390966		68		pla		                PLA
.390967		28		plp		                PLP
.390968		2b		pld		                PLD
.390969		6b		rtl		                RTL
.39096a						IINITGAMMATABLE
.39096a		e2 20		sep #$20	                SEP #$20        ; set A short
.39096c		c2 10		rep #$10	                REP #$10        ; set X long
.39096e		a2 00 00	ldx #$0000	                ldx #$0000
.390971		bf 00 92 39	lda $399200,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.390975		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.390979		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.39097d		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.390981		e8		inx		                inx
.390982		e0 00 01	cpx #$0100	                cpx #$0100
.390985		d0 ea		bne $390971	                bne initgammaloop
.390987		c2 30		rep #$30	                REP #$30        ; set A&X long
.390989		6b		rtl		                RTL
.39098a		48		pha		IINITALLLUT     PHA
.39098b		da		phx		                PHX
.39098c		a2 00 00	ldx #$0000	                LDX #$0000
.39098f		e2 20		sep #$20	                SEP #$20        ; set A short
.390991		a9 00		lda #$00	                LDA #$00
.390993		85 0a		sta $0a		                STA $0A     ; Temp Location
.390995						iinit_lut_loop
.390995		86 02		stx $02		                STX $02
.390997		a6 0a		ldx $0a		                LDX $0A
.390999		bf 00 91 39	lda $399100,x	                LDA GAMMA_2_2_Tbl, x
.39099d		49 55		eor #$55	                EOR  #$55
.39099f		a6 02		ldx $02		                LDX $02
.3909a1		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909a5		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909a9		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909ad		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909b1		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909b5		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3909b9		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3909bd		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3909c1		e8		inx		                inx
.3909c2		86 02		stx $02		                STX $02
.3909c4		a6 0a		ldx $0a		                LDX $0A
.3909c6		bf 00 93 39	lda $399300,x	                LDA RANDOM_LUT_Tbl, x
.3909ca		a6 02		ldx $02		                LDX $02
.3909cc		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909d0		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909d4		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909d8		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909dc		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909e0		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.3909e4		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.3909e8		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.3909ec		e8		inx		                inx
.3909ed		86 02		stx $02		                STX $02
.3909ef		a6 0a		ldx $0a		                LDX $0A
.3909f1		bf 00 92 39	lda $399200,x	                LDA GAMMA_1_8_Tbl, x
.3909f5		49 aa		eor #$aa	                EOR  #$AA
.3909f7		a6 02		ldx $02		                LDX $02
.3909f9		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909fd		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a01		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a05		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a09		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a0d		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a11		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a15		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a19		e8		inx		                inx
.390a1a		a9 ff		lda #$ff	                LDA #$FF
.390a1c		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a20		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a24		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a28		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a2c		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a30		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a34		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a38		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a3c		e6 0a		inc $0a		                inc $0A
.390a3e		e8		inx		                inx
.390a3f		e0 00 04	cpx #$0400	                cpx #$0400
.390a42		f0 03		beq $390a47	                beq iinit_lut_exit
.390a44		82 4e ff	brl $390995	                brl iinit_lut_loop
.390a47						iinit_lut_exit
.390a47		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a49		fa		plx		                PLX
.390a4a		68		pla		                PLA
.390a4b		6b		rtl		                RTL
.390a4c						INITVKYTXTMODE_BYPASS_DPSW
.390a4c		48		pha		                PHA
.390a4d		08		php		                PHP
.390a4e		80 24		bra $390a74	                BRA WeNeed640480Here
.390a50						IINITVKYTXTMODE
.390a50		48		pha		                PHA
.390a51		08		php		                PHP
.390a52		e2 20		sep #$20	                SEP #$20        ; set A short
.390a54		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.390a58		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.390a5a		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.390a5c		f0 16		beq $390a74	                BEQ WeNeed640480Here
.390a5e		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390a62		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390a64		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.390a66		f0 33		beq $390a9b	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.390a68		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390a6c		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.390a6e		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390a72		80 27		bra $390a9b	                BRA INITVICKYMODEHIRES
.390a74						WeNeed640480Here:
.390a74		e2 20		sep #$20	                SEP #$20        ; set A short
.390a76		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390a7a		29 01		and #$01	                AND #$01
.390a7c		c9 01		cmp #$01	                CMP #$01
.390a7e		d0 15		bne $390a95	                BNE INITVICKYMODE
.390a80		a9 00		lda #$00	                LDA #$00
.390a82		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390a86		ea		nop		                NOP
.390a87		ea		nop		                NOP
.390a88		ea		nop		                NOP
.390a89		ea		nop		                NOP
.390a8a		ea		nop		                NOP
.390a8b		a9 01		lda #$01	                LDA #$01
.390a8d		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390a91		ea		nop		                NOP
.390a92		ea		nop		                NOP
.390a93		ea		nop		                NOP
.390a94		ea		nop		                NOP
.390a95						INITVICKYMODE
.390a95		a9 00		lda #$00	                LDA #$00
.390a97		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.390a9b						INITVICKYMODEHIRES
.390a9b		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390a9d		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390aa1		e2 20		sep #$20	                SEP #$20        ; set A short
.390aa3		a9 20		lda #$20	                LDA #$20
.390aa5		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390aa9		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390aad		a9 00		lda #$00	                LDA #$00
.390aaf		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390ab3		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390ab5		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390ab9		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390abb		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390abf		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390ac3		c2 30		rep #$30	                REP #$30        ; set A&X long
.390ac5		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.390ac9		28		plp		                PLP
.390aca		68		pla		                PLA
.390acb		6b		rtl		                RTL
.390acc						ISETSIZES
.390acc		22 be 67 39	jsl $3967be	                JSL ANSI_SETSIZES
.390ad0		6b		rtl		                RTL
.390ad1						IINITVKYGRPMODE
.390ad1		48		pha		                PHA
.390ad2		e2 20		sep #$20	                SEP #$20        ; set A short
.390ad4		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390ad6		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390ada		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390adc		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390ae0		a9 c0		lda #$c0	                LDA #$C0
.390ae2		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390ae6		a9 00		lda #$00	                LDA #$00
.390ae8		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390aec		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390aee		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390af2		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390af4		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390af8		a9 c0		lda #$c0	                LDA #$C0
.390afa		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390afe		a9 00		lda #$00	                LDA #$00
.390b00		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390b04		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b06		68		pla		                PLA
.390b07		6b		rtl		                RTL
.390b08						IINITTILEMODE
.390b08		6b		rtl		                RTL
.390b09						IREADVRAM
.390b09		08		php		                PHP
.390b0a		e2 20		sep #$20	                SEP #$20        ; set A short
.390b0c		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.390b0f		c2 20		rep #$20	                REP #$20        ; set A long
.390b11		a2 64 00	ldx #$0064	                LDX #100
.390b14		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.390b18		89 00 80	bit #$8000	                BIT #$8000
.390b1b		f0 06		beq $390b23	                BEQ read_byte                   ; If it has data, go read the byte
.390b1d		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.390b1e		d0 f4		bne $390b14	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.390b20		28		plp		ret_failure     PLP                             ; Return failure
.390b21		18		clc		                CLC
.390b22		6b		rtl		                RTL
.390b23						read_byte
.390b23		e2 20		sep #$20	                SEP #$20        ; set A short
.390b25		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.390b29		28		plp		ret_success     PLP                             ; Return success
.390b2a		18		clc		                CLC
.390b2b		6b		rtl		                RTL
.390b2c		6b		rtl		INOP            RTL
.390b2d						IINITFONTSET
.390b2d		48		pha		                PHA
.390b2e		da		phx		                PHX
.390b2f		5a		phy		                PHY
.390b30		8b		phb		                PHB
.390b31		08		php		                PHP
.390b32		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b34		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390b37		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390b3a		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390b3d		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390b40		28		plp		                PLP
.390b41		ab		plb		                PLB
.390b42		7a		ply		                PLY
.390b43		fa		plx		                PLX
.390b44		68		pla		                PLA
.390b45		6b		rtl		                RTL
.390b46						INITMOUSEPOINTER
.390b46		e2 20		sep #$20	                SEP #$20        ; set A short
.390b48		c2 10		rep #$10	                REP #$10        ; set X long
.390b4a		a2 00 00	ldx #$0000	                LDX #$0000
.390b4d						FILL_MOUSE_MARKER
.390b4d		bf 00 94 39	lda $399400,x	                LDA @lMOUSE_POINTER_PTR,X
.390b51		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390b55		e8		inx		                INX
.390b56		e0 00 01	cpx #$0100	                CPX #$0100
.390b59		d0 f2		bne $390b4d	                BNE FILL_MOUSE_MARKER
.390b5b		ea		nop		                nop
.390b5c		a9 01		lda #$01	                LDA #$01
.390b5e		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390b62		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b64		6b		rtl		                RTL
.390b65						IINITCURSOR
.390b65		e2 20		sep #$20	                SEP #$20        ; set A short
.390b67		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390b69		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390b6d		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390b6f		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390b73		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b75		a9 00 00	lda #$0000	                LDA #$0000;
.390b78		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390b7c		a9 06 00	lda #$0006	                LDA #$0006;
.390b7f		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390b83		6b		rtl		                RTL
.390b84		0b		phd		IINITSUPERIO	PHD
.390b85		08		php		                PHP
.390b86		48		pha		                PHA
.390b87		e2 20		sep #$20	                SEP #$20        ; set A short
.390b89		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b8b		8f 23 11 af	sta $af1123	                STA GP10_REG
.390b8f		af 23 11 af	lda $af1123	                LDA GP10_REG
.390b93		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b95		8f 24 11 af	sta $af1124	                STA GP11_REG
.390b99		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390b9b		8f 25 11 af	sta $af1125	                STA GP12_REG
.390b9f		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390ba1		8f 26 11 af	sta $af1126	                STA GP13_REG
.390ba5		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390ba7		8f 27 11 af	sta $af1127	                STA GP14_REG
.390bab		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390bad		8f 28 11 af	sta $af1128	                STA GP15_REG
.390bb1		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390bb3		8f 29 11 af	sta $af1129	                STA GP16_REG
.390bb7		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390bb9		8f 2a 11 af	sta $af112a	                STA GP17_REG
.390bbd		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390bbf		8f 2b 11 af	sta $af112b	                STA GP20_REG
.390bc3		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390bc5		8f 2f 11 af	sta $af112f	                STA GP24_REG
.390bc9		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390bcb		8f 30 11 af	sta $af1130	                STA GP25_REG
.390bcf		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390bd1		8f 31 11 af	sta $af1131	                STA GP26_REG
.390bd5		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390bd7		8f 33 11 af	sta $af1133	                STA GP30_REG
.390bdb		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390bdd		8f 34 11 af	sta $af1134	                STA GP31_REG
.390be1		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390be3		8f 35 11 af	sta $af1135	                STA GP32_REG
.390be7		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390be9		8f 36 11 af	sta $af1136	                STA GP33_REG
.390bed		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390bef		8f 37 11 af	sta $af1137	                STA GP34_REG
.390bf3		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390bf5		8f 38 11 af	sta $af1138	                STA GP35_REG
.390bf9		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390bfb		8f 39 11 af	sta $af1139	                STA GP36_REG
.390bff		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390c01		8f 3a 11 af	sta $af113a	                STA GP37_REG
.390c05		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c07		8f 3d 11 af	sta $af113d	                STA GP42_REG
.390c0b		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390c0d		8f 3e 11 af	sta $af113e	                STA GP43_REG
.390c11		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390c13		8f 3f 11 af	sta $af113f	                STA GP50_REG
.390c17		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390c19		8f 40 11 af	sta $af1140	                STA GP51_REG
.390c1d		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390c1f		8f 41 11 af	sta $af1141	                STA GP52_REG
.390c23		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390c25		8f 42 11 af	sta $af1142	                STA GP53_REG
.390c29		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390c2b		8f 43 11 af	sta $af1143	                STA GP54_REG
.390c2f		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390c31		8f 44 11 af	sta $af1144	                STA GP55_REG
.390c35		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390c37		8f 45 11 af	sta $af1145	                STA GP56_REG
.390c3b		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390c3d		8f 46 11 af	sta $af1146	                STA GP57_REG
.390c41		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.390c43		8f 47 11 af	sta $af1147	                STA GP60_REG
.390c47		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.390c49		8f 48 11 af	sta $af1148	                STA GP61_REG
.390c4d		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390c4f		8f 4b 11 af	sta $af114b	                STA GP1_REG
.390c53		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390c55		8f 4c 11 af	sta $af114c	                STA GP2_REG
.390c59		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390c5b		8f 4d 11 af	sta $af114d	                STA GP3_REG
.390c5f		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390c61		8f 4e 11 af	sta $af114e	                STA GP4_REG
.390c65		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390c67		8f 4f 11 af	sta $af114f	                STA GP5_REG
.390c6b		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390c6d		8f 50 11 af	sta $af1150	                STA GP6_REG
.390c71		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390c73		8f 5d 11 af	sta $af115d	                STA LED1_REG
.390c77		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390c79		8f 5e 11 af	sta $af115e	                STA LED2_REG
.390c7d		c2 20		rep #$20	                REP #$20        ; set A long
.390c7f		68		pla		                PLA
.390c80		28		plp			              PLP
.390c81		2b		pld				            PLD
.390c82		6b		rtl		                RTL
.390c83		48		pha		INITRTC         PHA
.390c84		08		php		                PHP
.390c85		e2 20		sep #$20	                SEP #$20        ; set A short
.390c87		a9 00		lda #$00	                LDA #0
.390c89		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390c8d		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390c91		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390c95		09 04		ora #$04	                ORA #%00000100
.390c97		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390c9b		28		plp		                PLP
.390c9c		68		pla		                PLA
.390c9d		6b		rtl		                RTL
.390c9e		48		pha		IINITCODEC      PHA
.390c9f		08		php		                PHP
.390ca0		c2 20		rep #$20	                REP #$20        ; set A long
.390ca2		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.390ca5		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ca9		a9 01 00	lda #$0001	                LDA #$0001
.390cac		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cb0		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390cb3		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390cb6		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390cba		a9 01 00	lda #$0001	                LDA #$0001
.390cbd		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cc1		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390cc4		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.390cc7		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ccb		a9 01 00	lda #$0001	                LDA #$0001
.390cce		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cd2		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390cd5		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390cd8		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390cdc		a9 01 00	lda #$0001	                LDA #$0001
.390cdf		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390ce3		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390ce6		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.390ce9		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390ced		a9 01 00	lda #$0001	                LDA #$0001
.390cf0		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cf4		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390cf7		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.390cfa		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390cfe		a9 01 00	lda #$0001	                LDA #$0001
.390d01		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d05		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390d08		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.390d0b		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d0f		a9 01 00	lda #$0001	                LDA #$0001
.390d12		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d16		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390d19		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.390d1c		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d20		a9 01 00	lda #$0001	                LDA #$0001
.390d23		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d27		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390d2a		28		plp		                PLP
.390d2b		68		pla		                PLA
.390d2c		6b		rtl		                RTL
.390d2d						IRESETCODEC
.390d2d		c2 20		rep #$20	                REP #$20        ; set A long
.390d2f		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.390d32		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d36		a9 01 00	lda #$0001	                LDA #$0001
.390d39		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d3d		20 41 0d	jsr $390d41	                JSR CODEC_TRF_FINISHED
.390d40		6b		rtl		                RTL
.390d41						CODEC_TRF_FINISHED
.390d41		e2 20		sep #$20	                SEP #$20        ; set A short
.390d43		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.390d47		29 01		and #$01	                AND #$01
.390d49		c9 01		cmp #$01	                CMP #$01
.390d4b		f0 f6		beq $390d43	                BEQ CODEC_LOOP
.390d4d		c2 20		rep #$20	                REP #$20        ; set A long
.390d4f		60		rts		                RTS
.390d50						IBM_FILL_SCREEN
.390d50		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d52		a9 00 00	lda #$0000	                LDA #$0000
.390d55		a2 00 00	ldx #$0000	                LDX #$0000
.390d58						BM_FILL_SCREEN_LOOPY
.390d58		a0 00 00	ldy #$0000	                LDY #$0000
.390d5b		e2 20		sep #$20	                SEP #$20        ; set A short
.390d5d						BM_FILL_SCREEN_LOOPX
.390d5d		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390d5f		c8		iny		                INY
.390d60		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.390d62		d0 f9		bne $390d5d	                BNE BM_FILL_SCREEN_LOOPX
.390d64		20 6f 0d	jsr $390d6f	                JSR BM_FILL_COMPUTE_Y_DST
.390d67		e8		inx		                INX
.390d68		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.390d6a		d0 ec		bne $390d58	                BNE BM_FILL_SCREEN_LOOPY
.390d6c		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d6e		6b		rtl		                RTL
.390d6f						BM_FILL_COMPUTE_Y_DST
.390d6f		c2 20		rep #$20	                REP #$20        ; set A long
.390d71		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390d73		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390d77		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.390d79		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390d7d		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.390d80		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390d84		a9 00 00	lda #$0000	                LDA #$0000
.390d87		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390d8b		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390d8f		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390d91		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390d95		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390d97		a9 00 00	lda #$0000	                LDA #$0000
.390d9a		60		rts		                RTS
.390d9b						IBMP_PARSER
.390d9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d9d		a0 00 00	ldy #$0000	                LDY #$0000
.390da0		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.390da2		c9 42 4d	cmp #$4d42	                CMP #$4D42
.390da5		f0 03		beq $390daa	                BEQ IBMP_PARSER_CONT
.390da7		82 04 01	brl $390eae	                BRL BMP_PARSER_END_WITH_ERROR
.390daa						IBMP_PARSER_CONT
.390daa		a0 02 00	ldy #$0002	                LDY #$0002
.390dad		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.390daf		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390db3		a0 04 00	ldy #$0004	                LDY #$0004
.390db6		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.390db8		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390dbc		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.390dbf		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390dc3		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390dc7		18		clc		                CLC
.390dc8		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390dcc		85 50		sta $50		                STA BMP_FILE_SIZE
.390dce		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390dd2		85 52		sta $52		                STA BMP_FILE_SIZE+2
.390dd4		a0 12 00	ldy #$0012	                LDY #$0012
.390dd7		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390dd9		85 40		sta $40		                STA BMP_X_SIZE
.390ddb		a0 16 00	ldy #$0016	                LDY #$0016
.390dde		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390de0		85 42		sta $42		                STA BMP_Y_SIZE
.390de2		a0 2e 00	ldy #$002e	                LDY #$002E
.390de5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390de7		0a		asl a		                ASL A; Multiply by 2
.390de8		0a		asl a		                ASL A; Multiply by 2
.390de9		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.390deb		e0 00 00	cpx #$0000	                CPX #$0000
.390dee		d0 05		bne $390df5	                BNE BMP_LUT1_PICK
.390df0		20 b6 0e	jsr $390eb6	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.390df3		80 08		bra $390dfd	                BRA DONE_TRANSFER_LUT;
.390df5						  BMP_LUT1_PICK
.390df5		e0 01 00	cpx #$0001	                CPX #$0001
.390df8		d0 03		bne $390dfd	                BNE BMP_LUT2_PICK
.390dfa		20 e6 0e	jsr $390ee6	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.390dfd						  BMP_LUT2_PICK
.390dfd						  DONE_TRANSFER_LUT
.390dfd		a5 56		lda $56		                LDA BMP_POSITION_Y
.390dff		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.390e03		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.390e05		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.390e09		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.390e0d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390e11		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.390e15		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390e19		a5 54		lda $54		                LDA BMP_POSITION_X
.390e1b		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.390e1f		a9 00 00	lda #$0000	                LDA #$0000
.390e22		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390e26		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.390e2a		85 f0		sta $f0		                STA USER_TEMP
.390e2c		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.390e30		85 f2		sta $f2		                STA USER_TEMP+2
.390e32		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390e34		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390e38		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390e3a		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390e3e		a5 f0		lda $f0		                LDA USER_TEMP
.390e40		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.390e44		a5 f2		lda $f2		                LDA USER_TEMP+2
.390e46		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.390e4a		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.390e4e		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390e50		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.390e54		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390e56		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.390e58		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390e5c		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.390e5e		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390e62		a5 50		lda $50		                LDA BMP_FILE_SIZE
.390e64		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390e68		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.390e6a		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390e6e		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390e72		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390e74		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390e78		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390e7a		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390e7c		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390e80		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.390e82		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390e86		18		clc		                CLC
.390e87		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.390e89		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.390e8c		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.390e8f		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.390e93		a9 ff ff	lda #$ffff	                LDA #$FFFF
.390e96		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.390e9a		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390e9e		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390ea0		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390ea4		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390ea6		20 16 0f	jsr $390f16	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.390ea9		a2 ba 8b	ldx #$8bba	                LDX #<>bmp_parser_msg0
.390eac		80 03		bra $390eb1	                BRA BMP_PARSER_END_NO_ERROR
.390eae						BMP_PARSER_END_WITH_ERROR
.390eae		a2 a6 8b	ldx #$8ba6	                LDX #<>bmp_parser_err0
.390eb1						BMP_PARSER_END_NO_ERROR
.390eb1		22 fc 06 39	jsl $3906fc	                JSL IPRINT       ; print the first line
.390eb5		6b		rtl		                RTL
.390eb6						BMP_PARSER_UPDATE_LUT0
.390eb6		38		sec		                SEC
.390eb7		a0 7a 00	ldy #$007a	                LDY #$007A
.390eba		a2 00 00	ldx #$0000	                LDX #$0000
.390ebd		e2 20		sep #$20	                SEP #$20        ; set A short
.390ebf						BMP_PARSER_UPDATE_LOOP
.390ebf		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390ec1		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.390ec5		c8		iny		                INY
.390ec6		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390ec8		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.390ecc		c8		iny		                INY
.390ecd		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390ecf		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.390ed3		c8		iny		                INY
.390ed4		a9 80		lda #$80	                LDA #$80
.390ed6		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.390eda		c8		iny		                INY ; For the Alpha Value, nobody cares
.390edb		e8		inx		                INX
.390edc		e8		inx		                INX
.390edd		e8		inx		                INX
.390ede		e8		inx		                INX
.390edf		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.390ee1		d0 dc		bne $390ebf	                BNE BMP_PARSER_UPDATE_LOOP
.390ee3		c2 20		rep #$20	                REP #$20        ; set A long
.390ee5		60		rts		                RTS
.390ee6						BMP_PARSER_UPDATE_LUT1
.390ee6		38		sec		                SEC
.390ee7		a0 36 00	ldy #$0036	                LDY #$0036
.390eea		a2 00 00	ldx #$0000	                LDX #$0000
.390eed		e2 20		sep #$20	                SEP #$20        ; set A short
.390eef						PALETTE_LUT1_LOOP
.390eef		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390ef1		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.390ef5		c8		iny		                INY
.390ef6		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390ef8		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.390efc		c8		iny		                INY
.390efd		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390eff		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.390f03		c8		iny		                INY
.390f04		a9 80		lda #$80	                LDA #$80
.390f06		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.390f0a		c8		iny		                INY ; For the Alpha Value, nobody cares
.390f0b		e8		inx		                INX
.390f0c		e8		inx		                INX
.390f0d		e8		inx		                INX
.390f0e		e8		inx		                INX
.390f0f		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.390f11		d0 dc		bne $390eef	                BNE PALETTE_LUT1_LOOP
.390f13		c2 20		rep #$20	                REP #$20        ; set A long
.390f15		60		rts		                RTS
.390f16						BMP_PARSER_DMA_SHIT_OUT
.390f16		a2 00 00	ldx #$0000	                LDX #$0000
.390f19						BMP_PARSER_LOOPY
.390f19		a0 00 00	ldy #$0000	                LDY #$0000
.390f1c		e2 20		sep #$20	                SEP #$20        ; set A short
.390f1e						BMP_PARSER_LOOPX
.390f1e		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.390f20		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390f22		c8		iny		                INY
.390f23		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.390f25		d0 f7		bne $390f1e	                BNE BMP_PARSER_LOOPX
.390f27		20 33 0f	jsr $390f33	                JSR BMP_PARSER_COMPUTE_Y_SRC
.390f2a		20 4e 0f	jsr $390f4e	                JSR BMP_PARSER_COMPUTE_Y_DST
.390f2d		e8		inx		                INX
.390f2e		e4 42		cpx $42		                CPX BMP_Y_SIZE
.390f30		d0 e7		bne $390f19	                BNE BMP_PARSER_LOOPY
.390f32		60		rts		                RTS
.390f33						BMP_PARSER_COMPUTE_Y_SRC
.390f33		c2 20		rep #$20	                REP #$20        ; set A long
.390f35		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390f37		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390f3b		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.390f3d		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390f41		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390f45		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390f47		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390f4b		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390f4d		60		rts		                RTS
.390f4e						BMP_PARSER_COMPUTE_Y_DST
.390f4e		c2 20		rep #$20	                REP #$20        ; set A long
.390f50		18		clc		                CLC
.390f51		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390f53		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.390f55		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390f57		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390f59		69 00 00	adc #$0000	                ADC #$0000
.390f5c		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390f5e		60		rts		                RTS
.390f5f		ea		nop		ILOOP           NOP
.390f60		ea		nop		                NOP
.390f61		ea		nop		                NOP
.390f62		ea		nop		                NOP
.390f63		ea		nop		                NOP
.390f64		ea		nop		                NOP
.390f65		ea		nop		                NOP
.390f66		ea		nop		                NOP
.390f67		ea		nop		                NOP
.390f68		ea		nop		                NOP
.390f69		6b		rtl		                RTL
.390f6a		22 5f 0f 39	jsl $390f5f	ILOOP_1         JSL ILOOP
.390f6e		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f72		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f76		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f7a		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f7e		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f82		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f86		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f8a		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f8e		22 5f 0f 39	jsl $390f5f	                JSL ILOOP
.390f92		6b		rtl		                RTL
.390f93		22 6a 0f 39	jsl $390f6a	ILOOP_1MS       JSL ILOOP_1
.390f97		6b		rtl		                RTL
.390f98		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.390f9b		f0 07		beq $390fa4	                BEQ LOOP_MS_END
.390f9d		22 93 0f 39	jsl $390f93	                JSL ILOOP_1MS
.390fa1		ca		dex		                DEX
.390fa2		80 f4		bra $390f98	                BRA ILOOP_MS
.390fa4		6b		rtl		LOOP_MS_END     RTL
.390fa5						IDELAY
.390fa5		48		pha		                PHA
.390fa6		8b		phb		                PHB
.390fa7		08		php		                PHP
.390fa8		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.390fab		ab		plb		                PLB
.390fac		ab		plb		                PLB
.390fad		c2 30		rep #$30	                REP #$30        ; set A&X long
.390faf		da		phx		                PHX                         ; Save the delay amount
.390fb0		5a		phy		                PHY
.390fb1		a9 02 00	lda #$0002	                LDA #$02                    ; Set the handler for TIMER0 interrupts
.390fb4		a0 38 00	ldy #$0038	                LDY #`HANDLE_TIMER0
.390fb7		a2 28 19	ldx #$1928	                LDX #<>HANDLE_TIMER0
.390fba		22 48 11 00	jsl $001148	                JSL SETHANDLER
.390fbe		7a		ply		                PLY                         ; Restore the delay amount
.390fbf		fa		plx		                PLX
.390fc0		e2 20		sep #$20	                SEP #$20        ; set A short
.390fc2		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.390fc4		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.390fc8		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.390fcc		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.390fce		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.390fd2		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.390fd4		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.390fd7		a9 00		lda #$00	                LDA #0
.390fd9		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.390fdd		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.390fe1		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.390fe5		c2 30		rep #$30	                REP #$30        ; set A&X long
.390fe7		8a		txa		                TXA
.390fe8		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.390fec		98		tya		                TYA
.390fed		e2 20		sep #$20	                SEP #$20        ; set A short
.390fef		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.390ff3		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.390ff5		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.390ff9		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.390ffb		cb		wai		loop            WAI                         ; Wait for an interrupt
.390ffc		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.390fff		f0 fa		beq $390ffb	                BEQ loop                    ; Keep checking until it's set
.391001		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.391003		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391007		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391009		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.39100c		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.391010		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.391012		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391016		28		plp		                PLP
.391017		ab		plb		                PLB
.391018		68		pla		                PLA
.391019		6b		rtl		                RTL
.39101a						SHOW_CREDITS
.39101a		48		pha		                PHA
.39101b		da		phx		                PHX
.39101c		5a		phy		                PHY
.39101d		08		php		                PHP
.39101e		e2 20		sep #$20	                SEP #$20        ; set A short
.391020		c2 10		rep #$10	                REP #$10        ; set X long
.391022		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.391026		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391028		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39102c		a2 00 00	ldx #$0000	                LDX #0
.39102f		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.391033		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391037		bf 00 18 3b	lda $3b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.39103b		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.39103f		e8		inx		                INX
.391040		e0 00 20	cpx #$2000	                CPX #128 * 64
.391043		d0 ea		bne $39102f	                BNE credit_loop
.391045		22 96 06 39	jsl $390696	                JSL IGETCHW                     ; Wait for a keypress
.391049		22 be 08 39	jsl $3908be	                JSL ICLRSCREEN                  ; Then clear the screen and return
.39104d		22 ee 07 39	jsl $3907ee	                JSL ICSRHOME                    ; Move cursor to the home position
.391051		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.391055		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391057		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.39105b		28		plp		                PLP
.39105c		7a		ply		                PLY
.39105d		fa		plx		                PLX
.39105e		68		pla		                PLA
.39105f		6b		rtl		                RTL
.391060		00		brk #		ISCINIT         BRK ;
.391061		00		brk #		IIOINIT         BRK ;
.391062		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.391063		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.391064		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.391065		00		brk #		ICLOSE          BRK ; Close a channel
.391066		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.391067		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.391068		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.391069		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.39106a		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.39106b		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.39106c		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.39106d		00		brk #		IPRINTF         BRK ; Print a float value
.39106e		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.39106f		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.391070		00		brk #		IPUSHKEY        BRK ;
.391071		00		brk #		IPUSHKEYS       BRK ;
.391072		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.391073		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.391074		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>391075		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>39107d		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>39108d		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>391095		12
>391096		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>39109e		15
>39109f		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3910a5		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3910aa		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>3910b0		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>3910b8		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>3910c6		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>3910ce		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>3910dc		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>3910e4		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>3910f2		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>3910fa		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391108		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>391110		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>39111e		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>391126		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>391134		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>39113c		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>39114a		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>391152		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>391160		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>391168		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>391176		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>39117e		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>39118c		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>391194		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3911a2		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3911aa		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>3911b8		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>3911c0		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>3911ce		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>3911d6		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>3911e4		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>3911ec		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>3911fa		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>391202		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>391210		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391218		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>391226		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>39122e		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>39123c		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>391244		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>391252		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>39125a		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>391268		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>391270		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>39127e		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>391286		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>391294		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>39129c		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3912aa		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>3912b2		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>3912c0		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>3912c8		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>3912d6		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>3912de		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>3912ec		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>3912f4		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>391302		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>39130a		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391318		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>391320		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>39132e		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>391336		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>391344		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>39134c		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>39135a		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>391362		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>391370		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>391378		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>391386		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>39138e		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>39139c		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3913a4		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>3913b2		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>3913ba		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>3913c8		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>3913d0		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>3913de		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>3913e6		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>3913f4		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>3913fc		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>39140a		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>391412		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391420		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391428		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>391436		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>39143e		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>39144c		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>391454		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>391462		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>39146a		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>391478		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>391480		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>39148e		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>391496		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>3914a4		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>3914ac		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>3914ba		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>3914c2		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>3914d0		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>3914d8		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>3914e6		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>3914ee		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>3914fc		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>391504		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>391512		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>39151a		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391528		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391530		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>39153e		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>391546		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>391554		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>39155c		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>39156a		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>391572		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>391580		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>391588		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>391596		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>39159e		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>3915ac		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>3915b4		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>3915c2		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>3915ca		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>3915d8		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>3915e0		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>3915ee		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>3915f6		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>391604		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>39160c		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>39161a		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>391622		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391630		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391638		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>391646		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>39164e		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>39165c		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>391664		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>391672		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>39167a		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>391688		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>391690		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>39169e		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>3916a6		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>3916b4		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>3916bc		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>3916ca		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>3916d2		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>3916e0		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>3916e8		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>3916f6		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>3916fe		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>39170c		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>391714		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>391722		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>39172a		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391738		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391740		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>39174e		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>391756		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>391764		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>39176c		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>39177a		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>391782		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>391790		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>391798		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>3917a6		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>3917ae		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>3917bc		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>3917c4		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>3917d2		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>3917da		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>3917e8		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>3917f0		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>3917fe		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>391806		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>391814		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>39181c		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>39182a		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>391832		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391840		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391848		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>391856		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>39185e		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>39186c		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>391874		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>391882		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>39188a		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>391898		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>3918a0		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>3918ae		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>3918b6		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>3918c4		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>3918cc		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>3918da		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>3918e2		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>3918f0		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>3918f8		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>391906		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>39190e		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>39191c		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>391924		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>391932		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>39193a		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391948		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391950		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>39195e		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>391966		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>391974		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>39197c		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>39198a		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>391992		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>3919a0		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>3919a8		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>3919b6		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>3919be		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>3919cc		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>3919d4		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>3919e2		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>3919ea		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>3919f8		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391a00		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391a0e		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391a16		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391a24		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391a2c		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391a3a		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391a42		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391a50		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391a58		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391a66		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391a6e		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391a7c		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391a84		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391a92		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391a9a		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391aa8		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391ab0		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391abe		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391ac6		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391ad4		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391adc		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391aea		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391af2		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391b00		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391b08		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391b16		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391b1e		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391b2c		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391b34		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391b42		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391b4a		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391b58		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391b60		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391b6e		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391b76		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391b84		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391b8c		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391b9a		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391ba2		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391bb0		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391bb8		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391bc6		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391bce		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391bdc		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391be4		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391bf2		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391bfa		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391c08		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391c10		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391c1e		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391c26		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391c34		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>391c3c		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391c4a		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>391c52		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>391c60		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>391c68		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>391c76		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>391c7e		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>391c8c		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>391c94		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>391ca2		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>391caa		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>391cb8		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>391cc0		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>391cce		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>391cd6		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>391ce4		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>391cec		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>391cfa		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>391d02		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>391d10		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>391d18		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>391d26		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391d2e		00 87 fa 00
>391d32		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391d3a		00 88 98 03
>391d3e		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391d46		00 88 98 03
>391d4a		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391d52		00 f9 69 00
>391d56		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>391d5e		80 e8 4a 00
>391d62		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391d6a		00 f6 9a 00
>391d6e		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>391d76		1b f2 34 00
>391d7a		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>391d82		00 f7 8a 00
>391d86		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>391d8e		00 f6 47 00
>391d92		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391d9a		00 f9 69 00
>391d9e		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391da6		00 f7 a9 00
>391daa		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391db2		00 87 fa 00
>391db6		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391dbe		00 f7 a9 00
>391dc2		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391dca		00 f5 f5 00
>391dce		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391dd6		06 b8 d8 03
>391dda		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391de2		00 f5 f5 00
>391de6		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391dee		06 b8 d8 03
>391df2		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391dfa		00 f5 f5 00
>391dfe		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>391e06		10 74 f8 03
>391e0a		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e12		00 f5 f5 00
>391e16		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e1e		00 f5 f5 00
>391e22		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e2a		05 c5 d4 03
>391e2e		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e36		00 f5 f5 00
>391e3a		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391e42		04 f9 44 03
>391e46		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e4e		05 c5 d4 03
>391e52		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391e5a		04 f9 44 03
>391e5e		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>391e66		03 87 f7 03
>391e6a		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e72		05 c5 d4 03
>391e76		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>391e7e		00 f6 28 00
>391e82		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e8a		05 c5 d4 03
>391e8e		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>391e96		00 f5 f7 01
>391e9a		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391ea2		04 f9 44 03
>391ea6		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391eae		00 99 f9 00
>391eb2		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>391eba		00 a8 f7 00
>391ebe		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391ec6		00 99 f9 00
>391eca		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391ed2		00 a6 f6 00
>391ed6		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391ede		00 a6 f6 00
>391ee2		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391eea		00 f6 36 02
>391eee		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391ef6		00 f6 36 02
>391efa		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391f02		00 96 e8 01
>391f06		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391f0e		00 96 e8 01
>391f12		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391f1a		02 79 77 03
>391f1e		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391f26		02 79 77 03
>391f2a		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>391f32		00 a5 2b 02
>391f36		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>391f3e		00 93 3b 02
>391f42		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>391f4a		01 89 3b 03
>391f4e		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>391f56		0a 53 2b 02
>391f5a		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>391f62		00 f6 89 00
>391f66		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391f6e		00 f6 9a 00
>391f72		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391f7a		00 f6 9a 00
>391f7e		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>391f86		00 87 4b 01
>391f8a		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>391f92		00 78 67 01
>391f96		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>391f9e		02 f8 fc 00
>391fa2		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391faa		40 f5 f5 00
>391fae		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391fb6		02 79 77 03
>391fba		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391fc2		40 f5 f5 00
>391fc6		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391fce		40 f5 f5 00
>391fd2		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391fda		00 f9 69 00
>391fde		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391fe6		00 f9 69 00
>391fea		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>391ff2		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>391ff6		26 1d 39 00 32 1d 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>391ffe		3e 1d 39 00 4a 1d 39 00
>392006		56 1d 39 00 62 1d 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>39200e		6e 1d 39 00 7a 1d 39 00
>392016		86 1d 39 00 92 1d 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>39201e		9e 1d 39 00 aa 1d 39 00
>392026		b6 1d 39 00 c2 1d 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>39202e		ce 1d 39 00 da 1d 39 00
>392036		e6 1d 39 00 f2 1d 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>39203e		fe 1d 39 00 0a 1e 39 00
>392046		16 1e 39 00 22 1e 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>39204e		2e 1e 39 00 3a 1e 39 00
>392056		46 1e 39 00 52 1e 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>39205e		5e 1e 39 00 6a 1e 39 00
>392066		76 1e 39 00 82 1e 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>39206e		8e 1e 39 00 9a 1e 39 00
>392076		a6 1e 39 00 b2 1e 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>39207e		be 1e 39 00 ca 1e 39 00
>392086		d6 1e 39 00 e2 1e 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>39208e		ee 1e 39 00 fa 1e 39 00
>392096		06 1f 39 00 12 1f 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>39209e		1e 1f 39 00 2a 1f 39 00
>3920a6		36 1f 39 00 42 1f 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3920ae		4e 1f 39 00 5a 1f 39 00
>3920b6		66 1f 39 00 72 1f 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>3920be		7e 1f 39 00 8a 1f 39 00
>3920c6		96 1f 39 00 a2 1f 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>3920ce		ae 1f 39 00 ba 1f 39 00
>3920d6		c6 1f 39 00 d2 1f 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>3920de		de 1f 39 00 ea 1f 39 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>3920e6		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>3920ee		00 b1 f5 01
>3920f2		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>3920fa		03 f1 f5 00
>3920fe		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>392106		03 c1 f5 00
>39210a		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>392112		00 92 f5 01
>392116		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>39211e		00 f1 f9 00
>392122		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>39212a		00 f1 f5 00
>39212e		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>392136		02 81 f6 01
>39213a		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>392142		00 c2 b9 01
>392146		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>39214e		05 b2 35 00
>392152		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>39215a		1b f2 34 00
>39215e		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>392166		01 f5 74 00
>39216a		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>392172		00 61 e3 00
>392176		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>39217e		00 a4 64 00
>392182		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>39218a		07 b5 f5 00
>39218e		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>392196		00 f3 74 00
>39219a		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3921a2		00 c3 94 01
>3921a6		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3921ae		00 f4 0d 01
>3921b2		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>3921ba		00 f5 0b 01
>3921be		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>3921c6		00 bf 07 00
>3921ca		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>3921d2		00 6d 08 01
>3921d6		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>3921de		00 51 17 01
>3921e2		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>3921ea		00 51 17 01
>3921ee		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>3921f6		00 53 08 01
>3921fa		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>392202		00 53 06 01
>392206		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>39220e		00 d2 f8 00
>392212		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>39221a		00 e2 c7 01
>39221e		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>392226		00 f1 9c 00
>39222a		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>392232		02 f2 c9 01
>392236		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>39223e		03 95 fb 00
>392242		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>39224a		04 a1 59 00
>39224e		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>392256		03 91 fc 03
>39225a		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>392262		02 b4 ec 00
>392266		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>39226e		00 93 f7 00
>392272		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>39227a		04 c1 58 00
>39227e		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>392286		02 c3 6a 00
>39228a		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>392292		00 62 87 00
>392296		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>39229e		00 f3 97 00
>3922a2		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3922aa		00 b3 97 00
>3922ae		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>3922b6		04 f3 cc 00
>3922ba		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>3922c2		00 93 aa 00
>3922c6		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3922ce		00 78 08 01
>3922d2		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>3922da		00 78 08 01
>3922de		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>3922e6		00 54 27 01
>3922ea		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>3922f2		00 61 56 00
>3922f6		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>3922fe		00 75 16 01
>392302		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>39230a		00 f5 f6 01
>39230e		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>392316		80 f3 e3 00
>39231a		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>392322		00 b5 f5 00
>392326		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>39232e		80 71 16 00
>392332		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>39233a		00 30 55 01
>39233e		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>392346		00 62 36 01
>39234a		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>392352		02 51 07 00
>392356		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>39235e		00 62 39 00
>392362		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>39236a		00 66 27 00
>39236e		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>392376		00 73 46 00
>39237a		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>392382		00 74 76 01
>392386		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>39238e		81 92 38 00
>392392		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>39239a		02 71 19 00
>39239e		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3923a6		01 81 09 00
>3923aa		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>3923b2		00 83 4b 02
>3923b6		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>3923be		05 71 59 00
>3923c2		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>3923ca		03 82 39 00
>3923ce		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>3923d6		82 84 17 00
>3923da		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>3923e2		02 72 16 00
>3923e6		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>3923ee		00 7b 0a 00
>3923f2		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>3923fa		00 85 0c 01
>3923fe		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>392406		00 7b 0a 01
>39240a		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>392412		00 79 18 01
>392416		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>39241e		01 73 08 00
>392422		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>39242a		04 77 0a 00
>39242e		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>392436		00 51 19 00
>39243a		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>392442		01 74 09 00
>392446		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>39244e		01 63 28 00
>392452		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>39245a		00 65 0a 00
>39245e		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>392466		00 67 29 00
>39246a		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>392472		00 67 09 00
>392476		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>39247e		01 6a 28 00
>392482		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>39248a		00 55 27 00
>39248e		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>392496		00 6f 08 00
>39249a		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>3924a2		00 7a 07 00
>3924a6		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>3924ae		06 a2 0d 00
>3924b2		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>3924ba		00 a3 5f 00
>3924be		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>3924c6		00 42 27 00
>3924ca		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>3924d2		05 b2 49 00
>3924d6		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>3924de		00 b2 79 01
>3924e2		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>3924ea		00 7a 1a 00
>3924ee		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>3924f6		00 82 28 01
>3924fa		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>392502		02 c3 5f 00
>392506		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>39250e		86 c4 95 01
>392512		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>39251a		00 44 15 00
>39251e		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>392526		00 d1 06 00
>39252a		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>392532		00 82 37 00
>392536		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>39253e		00 41 35 00
>392542		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>39254a		02 32 f5 01
>39254e		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>392556		00 61 26 00
>39255a		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>392562		84 3f 05 01
>392566		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>39256e		01 d1 f6 00
>392572		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>39257a		00 41 05 01
>39257e		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>392586		05 f3 e4 00
>39258a		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>392592		00 92 f5 01
>392596		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>39259e		04 f2 e4 01
>3925a2		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>3925aa		00 45 25 00
>3925ae		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>3925b6		01 a3 36 00
>3925ba		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>3925c2		01 98 05 01
>3925c6		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>3925ce		02 a3 f6 01
>3925d2		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>3925da		00 f6 f8 00
>3925de		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>3925e6		00 f3 f5 00
>3925ea		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>3925f2		00 94 e5 01
>3925f6		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>3925fe		00 84 44 00
>392602		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>39260a		03 83 18 01
>39260e		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>392616		01 78 08 01
>39261a		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>392622		03 8e 08 01
>392626		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>39262e		09 f2 46 00
>392632		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>39263a		00 96 e8 01
>39263e		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>392646		00 f6 f6 01
>39264a		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>392652		00 f6 9a 00
>392656		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39265e		00 c6 45 00
>392662		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>39266a		00 f4 b4 00
>39266e		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>392676		00 d5 25 00
>39267a		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>392682		0e 21 2d 00
>392686		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>39268e		00 55 87 02
>392692		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>39269a		08 98 87 01
>39269e		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>3926a6		04 17 04 03
>3926aa		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>3926b2		05 77 f9 02
>3926b6		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>3926be		02 f4 08 00
>3926c2		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>3926ca		00 36 05 01
>3926ce		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>3926d6		05 32 55 03
>3926da		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>3926e2		00 f3 df 00
>3926e6		e6 20 39 00 f2 20 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>3926ee		fe 20 39 00 0a 21 39 00 16 21 39 00 22 21 39 00
>3926fe		2e 21 39 00 3a 21 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>392706		46 21 39 00 52 21 39 00 5e 21 39 00 6a 21 39 00
>392716		76 21 39 00 82 21 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>39271e		8e 21 39 00 9a 21 39 00 a6 21 39 00 b2 21 39 00
>39272e		be 21 39 00 ca 21 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>392736		d6 21 39 00 e2 21 39 00 ee 21 39 00 fa 21 39 00
>392746		06 22 39 00 12 22 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>39274e		1e 22 39 00 2a 22 39 00 36 22 39 00 42 22 39 00
>39275e		4e 22 39 00 5a 22 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>392766		66 22 39 00 72 22 39 00 7e 22 39 00 8a 22 39 00
>392776		96 22 39 00 a2 22 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>39277e		ae 22 39 00 ba 22 39 00 c6 22 39 00 d2 22 39 00
>39278e		de 22 39 00 ea 22 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>392796		f6 22 39 00 02 23 39 00 0e 23 39 00 1a 23 39 00
>3927a6		26 23 39 00 32 23 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>3927ae		3e 23 39 00 4a 23 39 00 56 23 39 00 62 23 39 00
>3927be		6e 23 39 00 7a 23 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>3927c6		86 23 39 00 92 23 39 00 9e 23 39 00 aa 23 39 00
>3927d6		b6 23 39 00 c2 23 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>3927de		ce 23 39 00 da 23 39 00 e6 23 39 00 f2 23 39 00
>3927ee		fe 23 39 00 0a 24 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>3927f6		16 24 39 00 22 24 39 00 2e 24 39 00 3a 24 39 00
>392806		46 24 39 00 52 24 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>39280e		5e 24 39 00 6a 24 39 00 76 24 39 00 82 24 39 00
>39281e		8e 24 39 00 9a 24 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>392826		a6 24 39 00 b2 24 39 00 be 24 39 00 ca 24 39 00
>392836		d6 24 39 00 e2 24 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>39283e		ee 24 39 00 fa 24 39 00 06 25 39 00 12 25 39 00
>39284e		1e 25 39 00 2a 25 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>392856		36 25 39 00 42 25 39 00 4e 25 39 00 5a 25 39 00
>392866		66 25 39 00 72 25 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>39286e		7e 25 39 00 8a 25 39 00 96 25 39 00 a2 25 39 00
>39287e		ae 25 39 00 ba 25 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>392886		c6 25 39 00 d2 25 39 00 de 25 39 00 ea 25 39 00
>392896		f6 25 39 00 02 26 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>39289e		0e 26 39 00 1a 26 39 00 26 26 39 00 32 26 39 00
>3928ae		3e 26 39 00 4a 26 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>3928b6		56 26 39 00 62 26 39 00 6e 26 39 00 7a 26 39 00
>3928c6		86 26 39 00 92 26 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>3928ce		9e 26 39 00 aa 26 39 00 b6 26 39 00 c2 26 39 00
>3928de		ce 26 39 00 da 26 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>3928e6		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>3928ee		0d f2 f7 00
>3928f2		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>3928fa		07 f2 f7 00
>3928fe		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>392906		07 f2 f6 00
>39290a		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>392912		07 f2 f7 00
>392916		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>39291e		07 f2 f7 00
>392922		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>39292a		07 f2 f7 00
>39292e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392936		00 00 00 00
>39293a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392942		00 00 00 00
>392946		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39294e		00 00 00 00
>392952		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>39295a		87 f2 f1 00
>39295e		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>392966		07 f4 f4 00
>39296a		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>392972		07 f2 f6 00
>392976		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>39297e		07 e7 f7 00
>392982		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>39298a		07 f6 f6 00
>39298e		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>392996		87 a3 f3 00
>39299a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3929a2		00 00 00 00
>3929a6		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3929ae		00 00 00 00
>3929b2		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3929ba		00 00 00 00
>3929be		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>3929c6		07 8a 08 00
>3929ca		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>3929d2		07 55 14 00
>3929d6		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>3929de		87 55 04 00
>3929e2		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>3929ea		07 46 1a 00
>3929ee		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>3929f6		07 61 07 00
>3929fa		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392a02		90 61 07 00
>392a06		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a0e		00 00 00 00
>392a12		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a1a		00 00 00 00
>392a1e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a26		00 00 00 00
>392a2a		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392a32		87 f3 f8 00
>392a36		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392a3e		07 f6 3a 00
>392a42		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392a4a		0c 84 19 00
>392a4e		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392a56		07 94 19 00
>392a5a		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392a62		87 d1 f8 00
>392a66		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392a6e		07 c3 a6 00
>392a72		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a7a		00 00 00 00
>392a7e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a86		00 00 00 00
>392a8a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a92		00 00 00 00
>392a96		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392a9e		47 f2 df 00
>392aa2		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392aaa		0f a1 df 00
>392aae		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392ab6		07 f1 78 00
>392aba		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392ac2		07 f1 18 00
>392ac6		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392ace		07 56 26 00
>392ad2		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392ada		07 66 06 00
>392ade		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ae6		00 00 00 00
>392aea		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392af2		00 00 00 00
>392af6		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392afe		00 00 00 00
>392b02		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392b0a		87 85 35 00
>392b0e		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392b16		87 f3 f4 00
>392b1a		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392b22		07 f2 c3 00
>392b26		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392b2e		08 72 08 00
>392b32		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392b3a		07 3f 07 01
>392b3e		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392b46		07 4f 05 00
>392b4a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b52		00 00 00 00
>392b56		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b5e		00 00 00 00
>392b62		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b6a		00 00 00 00
>392b6e		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392b76		07 7a 05 00
>392b7a		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392b82		07 a5 45 00
>392b86		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392b8e		08 8f 09 00
>392b92		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392b9a		0c 8f 09 00
>392b9e		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392ba6		07 82 37 00
>392baa		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392bb2		07 62 2c 01
>392bb6		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bbe		00 00 00 00
>392bc2		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bca		00 00 00 00
>392bce		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bd6		00 00 00 00
>392bda		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392be2		07 a6 1c 00
>392be6		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392bee		07 72 0b 00
>392bf2		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392bfa		07 72 09 00
>392bfe		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392c06		07 82 09 00
>392c0a		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392c12		07 72 0f 00
>392c16		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392c1e		07 8f 0a 00
>392c22		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c2a		00 00 00 00
>392c2e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c36		00 00 00 00
>392c3a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c42		00 00 00 00
>392c46		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392c4e		07 65 1a 00
>392c52		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392c5a		07 65 1a 00
>392c5e		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>392c66		07 75 0a 00
>392c6a		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>392c72		07 65 1a 00
>392c76		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>392c7e		07 65 26 00
>392c82		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>392c8a		07 55 36 00
>392c8e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c96		00 00 00 00
>392c9a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ca2		00 00 00 00
>392ca6		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cae		00 00 00 00
>392cb2		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>392cba		07 ff 0f 01
>392cbe		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>392cc6		87 64 18 00
>392cca		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>392cd2		07 96 0a 00
>392cd6		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>392cde		07 91 2a 00
>392ce2		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>392cea		47 6f 07 00
>392cee		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>392cf6		07 8f 06 02
>392cfa		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d02		00 00 00 00
>392d06		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d0e		00 00 00 00
>392d12		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d1a		00 00 00 00
>392d1e		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>392d26		07 55 16 00
>392d2a		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>392d32		07 6a 03 00
>392d36		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>392d3e		07 42 35 00
>392d42		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>392d4a		07 31 47 01
>392d4e		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>392d56		0a 42 25 00
>392d5a		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>392d62		07 cf 07 00
>392d66		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d6e		00 00 00 00
>392d72		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d7a		00 00 00 00
>392d7e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d86		00 00 00 00
>392d8a		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>392d92		8a f2 26 00
>392d96		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>392d9e		07 f2 f5 00
>392da2		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>392daa		87 11 13 00
>392dae		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>392db6		87 1d 03 00
>392dba		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>392dc2		07 81 23 00
>392dc6		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>392dce		0a f2 f6 01
>392dd2		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dda		00 00 00 00
>392dde		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392de6		00 00 00 00
>392dea		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392df2		00 00 00 00
>392df6		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>392dfe		07 c2 05 00
>392e02		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>392e0a		07 6f 0c 01
>392e0e		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>392e16		07 56 16 00
>392e1a		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>392e22		88 8f 0b 00
>392e26		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>392e2e		87 c3 e5 00
>392e32		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>392e3a		07 f8 16 00
>392e3e		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e46		00 00 00 00
>392e4a		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e52		00 00 00 00
>392e56		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e5e		00 00 00 00
>392e62		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>392e6a		0a f3 03 00
>392e6e		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>392e76		07 f3 02 00
>392e7a		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>392e82		07 1f ff 03
>392e86		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>392e8e		8f 56 84 02
>392e92		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>392e9a		0c 34 04 03
>392e9e		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>392ea6		07 1f 02 03
>392eaa		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eb2		00 00 00 00
>392eb6		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ebe		00 00 00 00
>392ec2		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eca		00 00 00 00
>392ece		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>392ed6		07 12 16 01
>392eda		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>392ee2		07 f6 c9 02
>392ee6		e6 28 39 00 f2 28 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>392eee		fe 28 39 00 0a 29 39 00 16 29 39 00 22 29 39 00
>392efe		2e 29 39 00 3a 29 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>392f06		46 29 39 00 52 29 39 00 5e 29 39 00 6a 29 39 00
>392f16		76 29 39 00 82 29 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>392f1e		8e 29 39 00 9a 29 39 00 a6 29 39 00 b2 29 39 00
>392f2e		be 29 39 00 ca 29 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>392f36		d6 29 39 00 e2 29 39 00 ee 29 39 00 fa 29 39 00
>392f46		06 2a 39 00 12 2a 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>392f4e		1e 2a 39 00 2a 2a 39 00 36 2a 39 00 42 2a 39 00
>392f5e		4e 2a 39 00 5a 2a 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>392f66		66 2a 39 00 72 2a 39 00 7e 2a 39 00 8a 2a 39 00
>392f76		96 2a 39 00 a2 2a 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>392f7e		ae 2a 39 00 ba 2a 39 00 c6 2a 39 00 d2 2a 39 00
>392f8e		de 2a 39 00 ea 2a 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>392f96		f6 2a 39 00 02 2b 39 00 0e 2b 39 00 1a 2b 39 00
>392fa6		26 2b 39 00 32 2b 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>392fae		3e 2b 39 00 4a 2b 39 00 56 2b 39 00 62 2b 39 00
>392fbe		6e 2b 39 00 7a 2b 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>392fc6		86 2b 39 00 92 2b 39 00 9e 2b 39 00 aa 2b 39 00
>392fd6		b6 2b 39 00 c2 2b 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>392fde		ce 2b 39 00 da 2b 39 00 e6 2b 39 00 f2 2b 39 00
>392fee		fe 2b 39 00 0a 2c 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>392ff6		16 2c 39 00 22 2c 39 00 2e 2c 39 00 3a 2c 39 00
>393006		46 2c 39 00 52 2c 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>39300e		5e 2c 39 00 6a 2c 39 00 76 2c 39 00 82 2c 39 00
>39301e		8e 2c 39 00 9a 2c 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>393026		a6 2c 39 00 b2 2c 39 00 be 2c 39 00 ca 2c 39 00
>393036		d6 2c 39 00 e2 2c 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>39303e		ee 2c 39 00 fa 2c 39 00 06 2d 39 00 12 2d 39 00
>39304e		1e 2d 39 00 2a 2d 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>393056		36 2d 39 00 42 2d 39 00 4e 2d 39 00 5a 2d 39 00
>393066		66 2d 39 00 72 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>39306e		7e 2d 39 00 8a 2d 39 00 96 2d 39 00 a2 2d 39 00
>39307e		ae 2d 39 00 ba 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>393086		c6 2d 39 00 d2 2d 39 00 de 2d 39 00 ea 2d 39 00
>393096		f6 2d 39 00 02 2e 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>39309e		0e 2e 39 00 1a 2e 39 00 26 2e 39 00 32 2e 39 00
>3930ae		3e 2e 39 00 4a 2e 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>3930b6		56 2e 39 00 62 2e 39 00 6e 2e 39 00 7a 2e 39 00
>3930c6		86 2e 39 00 92 2e 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>3930ce		9e 2e 39 00 aa 2e 39 00 b6 2e 39 00 c2 2e 39 00
>3930de		ce 2e 39 00 da 2e 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>3930e6		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.3930ee						IOPL2_TONE_TEST
.3930ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3930f0		c2 10		rep #$10	                REP #$10        ; set X long
.3930f2		a2 00 00	ldx #$0000	                LDX #0
.3930f5						OPL2_TONE_TESTING_L1
.3930f5		bf e6 30 39	lda $3930e6,x	                LDA NOTE_INTRO, X
.3930f9		29 0f		and #$0f	                AND #$F
.3930fb		85 30		sta $30		                STA OPL2_NOTE ; start at C
.3930fd		bf e6 30 39	lda $3930e6,x	                LDA NOTE_INTRO, X
.393101		29 70		and #$70	                AND #$70
.393103		4a		lsr a		                LSR A
.393104		4a		lsr a		                LSR A
.393105		4a		lsr a		                LSR A
.393106		4a		lsr a		                LSR A
.393107		85 31		sta $31		                STA OPL2_OCTAVE
.393109		8a		txa		                TXA
.39310a		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.39310c		85 27		sta $27		                STA OPL2_CHANNEL
.39310e		22 9c 32 39	jsl $39329c	                JSL OPL2_PLAYNOTE
.393112		a0 00 00	ldy #$0000	                LDY #$0000
.393115						OPL2_TONE_TESTING_L2
.393115		ea		nop		                NOP
.393116		ea		nop		                NOP
.393117		ea		nop		                NOP
.393118		ea		nop		                NOP
.393119		c8		iny		                INY
.39311a		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.39311d		d0 f6		bne $393115	                BNE OPL2_TONE_TESTING_L2
.39311f		e8		inx		                INX
.393120		e0 08 00	cpx #$0008	                CPX #8
.393123		d0 d0		bne $3930f5	                BNE OPL2_TONE_TESTING_L1
.393125		6b		rtl		                RTL
.393126						OPL2_INIT
.393126		c2 20		rep #$20	                REP #$20        ; set A long
.393128		a9 00 00	lda #$0000	                LDA #$0000
.39312b		85 28		sta $28		                STA OPL2_REG_REGION
.39312d		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39312f		85 30		sta $30		                STA OPL2_NOTE
.393131		85 32		sta $32		                STA OPL2_PARAMETER0
.393133		85 34		sta $34		                STA OPL2_PARAMETER2
.393135		a9 b0 10	lda #$10b0	                LDA #<>INSTRUMENT_ACCORDN
.393138		85 50		sta $50		                STA RAD_ADDR
.39313a		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.39313d		85 52		sta $52		                STA RAD_ADDR + 2
.39313f		e2 20		sep #$20	                SEP #$20        ; set A short
.393141		6b		rtl		                RTL
.393142						OPL2_Reset
.393142		6b		rtl		                RTL
.393143						OPL2_Get_FrequencyBlock
.393143		6b		rtl		                RTL
.393144						OPL2_GET_REGISTER
.393144		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393147		2b		pld		                PLD
.393148		c2 20		rep #$20	                REP #$20        ; set A long
.39314a		18		clc		              CLC
.39314b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39314e		65 32		adc $32		              ADC OPL2_PARAMETER0
.393150		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393152		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393155		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393157		e2 20		sep #$20	                SEP #$20        ; set A short
.393159		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39315b		6b		rtl		              RTL
.39315c						OPL2_GET_WAVEFORM_SELECT
.39315c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39315f		2b		pld		                PLD
.393160		c2 20		rep #$20	                REP #$20        ; set A long
.393162		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393165		69 01 00	adc #$0001	              ADC #$0001
.393168		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39316a		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39316d		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39316f		e2 20		sep #$20	                SEP #$20        ; set A short
.393171		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393173		29 20		and #$20	              AND #$20
.393175		6b		rtl		              RTL
.393176						OPL2_GET_SCALINGLEVEL
.393176		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393179		2b		pld		                PLD
.39317a		c2 20		rep #$20	                REP #$20        ; set A long
.39317c		a9 40 00	lda #$0040	              LDA #$0040  ;
.39317f		85 28		sta $28		              STA OPL2_REG_REGION
.393181		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.393184		e2 20		sep #$20	                SEP #$20        ; set A short
.393186		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393188		29 c0		and #$c0	              AND #$C0
.39318a		4a		lsr a		              LSR A
.39318b		4a		lsr a		              LSR A
.39318c		4a		lsr a		              LSR A
.39318d		4a		lsr a		              LSR A
.39318e		4a		lsr a		              LSR A
.39318f		4a		lsr a		              LSR A
.393190		6b		rtl		              RTL
.393191						OPL2_GET_BLOCK
.393191		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393194		2b		pld		                PLD
.393195		e2 20		sep #$20	                SEP #$20        ; set A short
.393197		18		clc		              CLC
.393198		a5 27		lda $27		              LDA OPL2_CHANNEL
.39319a		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39319c		69 b0		adc #$b0	              ADC #$B0
.39319e		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3931a0		a9 00		lda #$00	              LDA #$00
.3931a2		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3931a4		c2 30		rep #$30	                REP #$30        ; set A&X long
.3931a6		18		clc		              CLC
.3931a7		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3931aa		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3931ac		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3931ae		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3931b1		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3931b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3931b5		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3931b7		29 1c		and #$1c	              AND #$1C
.3931b9		4a		lsr a		              LSR A
.3931ba		4a		lsr a		              LSR A
.3931bb		6b		rtl		              RTL
.3931bc						OPL2_GET_KEYON
.3931bc		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3931bf		2b		pld		                PLD
.3931c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3931c2		18		clc		              CLC
.3931c3		a5 27		lda $27		              LDA OPL2_CHANNEL
.3931c5		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3931c7		69 b0		adc #$b0	              ADC #$B0
.3931c9		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3931cb		a9 00		lda #$00	              LDA #$00
.3931cd		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3931cf		c2 30		rep #$30	                REP #$30        ; set A&X long
.3931d1		18		clc		              CLC
.3931d2		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3931d5		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3931d7		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3931d9		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3931dc		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3931de		e2 20		sep #$20	                SEP #$20        ; set A short
.3931e0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3931e2		29 20		and #$20	              AND #$20
.3931e4		6b		rtl		              RTL
.3931e5						OPL2_GET_FEEDBACK
.3931e5		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3931e8		2b		pld		                PLD
.3931e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3931eb		18		clc		              CLC
.3931ec		a5 27		lda $27		              LDA OPL2_CHANNEL
.3931ee		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3931f0		69 c0		adc #$c0	              ADC #$C0
.3931f2		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3931f4		a9 00		lda #$00	              LDA #$00
.3931f6		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3931f8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3931fa		18		clc		              CLC
.3931fb		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3931fe		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393200		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393202		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393205		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393207		e2 20		sep #$20	                SEP #$20        ; set A short
.393209		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39320b		29 e0		and #$e0	              AND #$E0
.39320d		4a		lsr a		              LSR
.39320e		6b		rtl		              RTL
.39320f						OPL2_GET_SYNTHMODE
.39320f		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393212		2b		pld		                PLD
.393213		e2 20		sep #$20	                SEP #$20        ; set A short
.393215		18		clc		              CLC
.393216		a5 27		lda $27		              LDA OPL2_CHANNEL
.393218		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39321a		69 c0		adc #$c0	              ADC #$C0
.39321c		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39321e		a9 00		lda #$00	              LDA #$00
.393220		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393222		c2 30		rep #$30	                REP #$30        ; set A&X long
.393224		18		clc		              CLC
.393225		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393228		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39322a		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39322c		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39322f		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393231		e2 20		sep #$20	                SEP #$20        ; set A short
.393233		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393235		29 01		and #$01	              AND #$01
.393237		6b		rtl		              RTL
.393238						OPL2_GET_DEEPTREMOLO
.393238		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39323b		2b		pld		                PLD
.39323c		c2 20		rep #$20	                REP #$20        ; set A long
.39323e		a9 bd 00	lda #$00bd	              LDA #$00BD;
.393241		85 28		sta $28		              STA OPL2_REG_REGION
.393243		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.393246		e2 20		sep #$20	                SEP #$20        ; set A short
.393248		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39324a		29 80		and #$80	              AND #$80
.39324c		6b		rtl		              RTL
.39324d						OPL2_GET_DEEPVIBRATO
.39324d		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393250		2b		pld		                PLD
.393251		c2 20		rep #$20	                REP #$20        ; set A long
.393253		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393256		69 bd 00	adc #$00bd	              ADC #$00BD
.393259		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39325b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39325e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393260		e2 20		sep #$20	                SEP #$20        ; set A short
.393262		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393264		29 40		and #$40	              AND #$40
.393266		6b		rtl		              RTL
.393267						OPL2_GET_PERCUSSION
.393267		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39326a		2b		pld		                PLD
.39326b		c2 20		rep #$20	                REP #$20        ; set A long
.39326d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393270		69 bd 00	adc #$00bd	              ADC #$00BD
.393273		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393275		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393278		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39327a		e2 20		sep #$20	                SEP #$20        ; set A short
.39327c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39327e		29 20		and #$20	              AND #$20
.393280		6b		rtl		              RTL
.393281						OPL2_GET_DRUMS
.393281		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393284		2b		pld		                PLD
.393285		c2 20		rep #$20	                REP #$20        ; set A long
.393287		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39328a		69 bd 00	adc #$00bd	              ADC #$00BD
.39328d		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39328f		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393292		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393294		e2 20		sep #$20	                SEP #$20        ; set A short
.393296		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393298		29 1f		and #$1f	              AND #$1F
.39329a		6b		rtl		              RTL
.39329b						OPL2_Get_WaveForm
.39329b		6b		rtl		                RTL
.39329c						OPL2_PLAYNOTE
.39329c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39329f		2b		pld		                PLD
.3932a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3932a2		da		phx		                PHX
.3932a3		a9 00		lda #$00	                LDA #$00
.3932a5		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3932a7		20 d5 37	jsr $3937d5	                JSR OPL2_SET_KEYON
.3932aa		20 a0 37	jsr $3937a0	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.3932ad		e2 10		sep #$10	                SEP #$10        ; set X short
.3932af		a5 30		lda $30		                LDA OPL2_NOTE
.3932b1		3a		dec a		                DEC A
.3932b2		0a		asl a		                ASL A
.3932b3		aa		tax		                TAX
.3932b4		bf 75 10 39	lda $391075,x	                LDA @lnoteFNumbers,X
.3932b8		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.3932ba		e8		inx		                INX
.3932bb		bf 75 10 39	lda $391075,x	                LDA @lnoteFNumbers,X
.3932bf		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.3932c1		22 2a 37 39	jsl $39372a	                JSL OPL2_SET_FNUMBER
.3932c5		a9 01		lda #$01	                LDA #$01
.3932c7		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.3932c9		20 d5 37	jsr $3937d5	                JSR OPL2_SET_KEYON
.3932cc		c2 10		rep #$10	                REP #$10        ; set X long
.3932ce		fa		plx		                PLX
.3932cf		6b		rtl		                RTL
.3932d0						OPL2_PLAYDRUM
.3932d0		6b		rtl		                RTL
.3932d1						OPL2_SET_INSTRUMENT
.3932d1		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3932d4		2b		pld		                PLD
.3932d5		38		sec		              SEC ; Set the WaveFormSelect to True
.3932d6		22 b3 34 39	jsl $3934b3	              JSL OPL2_SET_WAVEFORMSELECT;
.3932da		e2 20		sep #$20	                SEP #$20        ; set A short
.3932dc		c2 10		rep #$10	                REP #$10        ; set X long
.3932de		a0 00 00	ldy #$0000	              LDY #$0000
.3932e1		a2 00 00	ldx #$0000	              LDX #$0000
.3932e4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.3932e6		85 35		sta $35		              STA OPL2_PARAMETER3
.3932e8		c8		iny		              INY
.3932e9		c9 06		cmp #$06	              CMP #$06
.3932eb		d0 03		bne $3932f0	              BNE PERCUSSION_NEXT07
.3932ed		82 70 01	brl $393460	              BRL Percussion_6
.3932f0						PERCUSSION_NEXT07
.3932f0		c9 07		cmp #$07	              CMP #$07
.3932f2		d0 03		bne $3932f7	              BNE PERCUSSION_NEXT08
.3932f4		82 44 01	brl $39343b	              BRL Percussion_7
.3932f7						PERCUSSION_NEXT08
.3932f7		c9 08		cmp #$08	              CMP #$08
.3932f9		d0 03		bne $3932fe	              BNE PERCUSSION_NEXT09
.3932fb		82 18 01	brl $393416	              BRL Percussion_8
.3932fe						PERCUSSION_NEXT09
.3932fe		c9 09		cmp #$09	              CMP #$09
.393300		d0 03		bne $393305	              BNE PERCUSSION_NEXT0A
.393302		82 ec 00	brl $3933f1	              BRL Percussion_9
.393305						PERCUSSION_NEXT0A
.393305		c9 0a		cmp #$0a	              CMP #$0A
.393307		d0 03		bne $39330c	              BNE Percussion_Default
.393309		82 c0 00	brl $3933cc	              BRL Percussion_A
.39330c						Percussion_Default
.39330c		a9 00		lda #$00	              LDA #$00
.39330e		85 26		sta $26		              STA OPL2_OPERATOR
.393310		c2 20		rep #$20	                REP #$20        ; set A long
.393312		a9 20 00	lda #$0020	              LDA #$0020;
.393315		85 28		sta $28		              STA OPL2_REG_REGION
.393317		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.39331a		e2 20		sep #$20	                SEP #$20        ; set A short
.39331c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39331e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393320		c8		iny		              INY
.393321		c2 20		rep #$20	                REP #$20        ; set A long
.393323		a9 40 00	lda #$0040	              LDA #$0040;
.393326		85 28		sta $28		              STA OPL2_REG_REGION
.393328		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.39332b		e2 20		sep #$20	                SEP #$20        ; set A short
.39332d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39332f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393331		c8		iny		              INY
.393332		c2 20		rep #$20	                REP #$20        ; set A long
.393334		a9 60 00	lda #$0060	              LDA #$0060;
.393337		85 28		sta $28		              STA OPL2_REG_REGION
.393339		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.39333c		e2 20		sep #$20	                SEP #$20        ; set A short
.39333e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393340		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393342		c8		iny		              INY
.393343		c2 20		rep #$20	                REP #$20        ; set A long
.393345		a9 80 00	lda #$0080	              LDA #$0080;
.393348		85 28		sta $28		              STA OPL2_REG_REGION
.39334a		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.39334d		e2 20		sep #$20	                SEP #$20        ; set A short
.39334f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393351		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393353		c8		iny		              INY
.393354		c2 20		rep #$20	                REP #$20        ; set A long
.393356		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393359		85 28		sta $28		              STA OPL2_REG_REGION
.39335b		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.39335e		e2 20		sep #$20	                SEP #$20        ; set A short
.393360		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393362		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393364		c8		iny		              INY
.393365		e2 10		sep #$10	                SEP #$10        ; set X short
.393367		a5 27		lda $27		              LDA OPL2_CHANNEL
.393369		29 0f		and #$0f	              AND #$0F
.39336b		aa		tax		              TAX
.39336c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.39336e		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.393372		c8		iny		              INY
.393373		a9 01		lda #$01	              LDA #$01
.393375		85 26		sta $26		              STA OPL2_OPERATOR
.393377		c2 20		rep #$20	                REP #$20        ; set A long
.393379		a9 20 00	lda #$0020	              LDA #$0020;
.39337c		85 28		sta $28		              STA OPL2_REG_REGION
.39337e		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.393381		e2 20		sep #$20	                SEP #$20        ; set A short
.393383		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.393385		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393387		c8		iny		              INY
.393388		c2 20		rep #$20	                REP #$20        ; set A long
.39338a		a9 40 00	lda #$0040	              LDA #$0040;
.39338d		85 28		sta $28		              STA OPL2_REG_REGION
.39338f		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.393392		e2 20		sep #$20	                SEP #$20        ; set A short
.393394		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.393396		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393398		c8		iny		              INY
.393399		c2 20		rep #$20	                REP #$20        ; set A long
.39339b		a9 60 00	lda #$0060	              LDA #$0060;
.39339e		85 28		sta $28		              STA OPL2_REG_REGION
.3933a0		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.3933a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3933a5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.3933a7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933a9		c8		iny		              INY
.3933aa		c2 20		rep #$20	                REP #$20        ; set A long
.3933ac		a9 80 00	lda #$0080	              LDA #$0080;
.3933af		85 28		sta $28		              STA OPL2_REG_REGION
.3933b1		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.3933b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3933b6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.3933b8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933ba		c8		iny		              INY
.3933bb		c2 20		rep #$20	                REP #$20        ; set A long
.3933bd		a9 e0 00	lda #$00e0	              LDA #$00E0;
.3933c0		85 28		sta $28		              STA OPL2_REG_REGION
.3933c2		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.3933c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3933c7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.3933c9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933cb		6b		rtl		                RTL
.3933cc						Percussion_A
.3933cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3933ce		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3933d0		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.3933d4		c8		iny		              INY
.3933d5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3933d7		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.3933db		c8		iny		              INY
.3933dc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3933de		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.3933e2		c8		iny		              INY
.3933e3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3933e5		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.3933e9		c8		iny		              INY
.3933ea		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3933ec		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.3933f0		6b		rtl		                RTL
.3933f1						Percussion_9
.3933f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3933f3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3933f5		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.3933f9		c8		iny		              INY
.3933fa		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3933fc		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393400		c8		iny		              INY
.393401		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393403		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.393407		c8		iny		              INY
.393408		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39340a		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.39340e		c8		iny		              INY
.39340f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393411		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.393415		6b		rtl		              RTL
.393416						Percussion_8
.393416		e2 20		sep #$20	                SEP #$20        ; set A short
.393418		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39341a		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.39341e		c8		iny		              INY
.39341f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393421		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.393425		c8		iny		              INY
.393426		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393428		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.39342c		c8		iny		              INY
.39342d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39342f		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.393433		c8		iny		              INY
.393434		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393436		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.39343a		6b		rtl		              RTL
.39343b						Percussion_7
.39343b		e2 20		sep #$20	                SEP #$20        ; set A short
.39343d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39343f		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.393443		c8		iny		              INY
.393444		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393446		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.39344a		c8		iny		              INY
.39344b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39344d		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.393451		c8		iny		              INY
.393452		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393454		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.393458		c8		iny		              INY
.393459		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.39345b		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.39345f		6b		rtl		              RTL
.393460						Percussion_6
.393460		e2 20		sep #$20	                SEP #$20        ; set A short
.393462		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393464		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.393468		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.39346c		c8		iny		              INY
.39346d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39346f		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.393473		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.393477		c8		iny		              INY
.393478		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39347a		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.39347e		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393482		c8		iny		              INY
.393483		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393485		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393489		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.39348d		c8		iny		              INY
.39348e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393490		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.393494		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.393498		6b		rtl		              RTL
.393499						OPL2_SET_REGISTER
.393499		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39349c		2b		pld		                PLD
.39349d		c2 20		rep #$20	                REP #$20        ; set A long
.39349f		18		clc		              CLC
.3934a0		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3934a3		65 32		adc $32		              ADC OPL2_PARAMETER0
.3934a5		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3934a7		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3934aa		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3934ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3934ae		a5 33		lda $33		              LDA OPL2_PARAMETER1
.3934b0		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934b2		6b		rtl		              RTL
.3934b3						OPL2_SET_WAVEFORMSELECT
.3934b3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3934b6		2b		pld		                PLD
.3934b7		c2 20		rep #$20	                REP #$20        ; set A long
.3934b9		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.3934bc		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3934be		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3934c1		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3934c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3934c5		b0 07		bcs $3934ce	              BCS OPL2_Set_WaveFormSelect_set
.3934c7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934c9		29 df		and #$df	              AND #$DF
.3934cb		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934cd		6b		rtl		              RTL
.3934ce						OPL2_Set_WaveFormSelect_set
.3934ce		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3934d1		2b		pld		                PLD
.3934d2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3934d4		09 20		ora #$20	              ORA #$20
.3934d6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3934d8		6b		rtl		                RTL
.3934d9						OPL2_SET_TREMOLO
.3934d9		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3934dc		2b		pld		                PLD
.3934dd		08		php		                PHP ; Push the Carry
.3934de		c2 20		rep #$20	                REP #$20        ; set A long
.3934e0		18		clc		                CLC
.3934e1		a9 20 00	lda #$0020	                LDA #$0020 ;
.3934e4		85 28		sta $28		                STA OPL2_REG_REGION
.3934e6		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.3934e9		28		plp		                PLP ; Pull the Carry out
.3934ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3934ec		b0 08		bcs $3934f6	                BCS OPL2_Set_Tremolo_Set;
.3934ee		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3934f0		29 7f		and #$7f	                AND #$7F
.3934f2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3934f4		80 06		bra $3934fc	                BRA OPL2_Set_Tremolo_Exit
.3934f6						OPL2_Set_Tremolo_Set
.3934f6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3934f8		09 80		ora #$80	                ORA #$80
.3934fa		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3934fc						OPL2_Set_Tremolo_Exit
.3934fc		6b		rtl		                RTL
.3934fd						OPL2_GET_TREMOLO
.3934fd		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393500		2b		pld		                PLD
.393501		c2 20		rep #$20	                REP #$20        ; set A long
.393503		a9 20 00	lda #$0020	                LDA #$0020;
.393506		85 28		sta $28		                STA OPL2_REG_REGION
.393508		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.39350b		e2 20		sep #$20	                SEP #$20        ; set A short
.39350d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39350f		29 80		and #$80	                AND #$80
.393511		6b		rtl		                RTL
.393512						OPL2_SET_VIBRATO
.393512		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393515		2b		pld		                PLD
.393516		08		php		                PHP ; Push the Carry
.393517		c2 20		rep #$20	                REP #$20        ; set A long
.393519		18		clc		                CLC
.39351a		a9 20 00	lda #$0020	                LDA #$0020;
.39351d		85 28		sta $28		                STA OPL2_REG_REGION
.39351f		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393522		28		plp		                PLP ; Pull the Carry out
.393523		e2 20		sep #$20	                SEP #$20        ; set A short
.393525		b0 08		bcs $39352f	                BCS OPL2_Set_Vibrato_Set;
.393527		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393529		29 bf		and #$bf	                AND #$BF
.39352b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39352d		80 06		bra $393535	                BRA OPL2_Set_Vibrato_Exit
.39352f						OPL2_Set_Vibrato_Set
.39352f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393531		09 40		ora #$40	                ORA #$40
.393533		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393535						OPL2_Set_Vibrato_Exit
.393535		6b		rtl		                RTL
.393536						OPL2_GET_VIBRATO
.393536		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393539		2b		pld		                PLD
.39353a		c2 20		rep #$20	                REP #$20        ; set A long
.39353c		a9 20 00	lda #$0020	                LDA #$0020;
.39353f		85 28		sta $28		                STA OPL2_REG_REGION
.393541		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393544		e2 20		sep #$20	                SEP #$20        ; set A short
.393546		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393548		29 40		and #$40	                AND #$40
.39354a		6b		rtl		                RTL
.39354b						OPL2_SET_MAINTAINSUSTAIN
.39354b		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39354e		2b		pld		                PLD
.39354f		08		php		              PHP ; Push the Carry
.393550		c2 20		rep #$20	                REP #$20        ; set A long
.393552		18		clc		              CLC
.393553		a9 20 00	lda #$0020	              LDA #$0020;
.393556		85 28		sta $28		              STA OPL2_REG_REGION
.393558		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.39355b		28		plp		              PLP ; Pull the Carry out
.39355c		e2 20		sep #$20	                SEP #$20        ; set A short
.39355e		b0 08		bcs $393568	              BCS OPL2_Set_MaintainSustain_Set;
.393560		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393562		29 df		and #$df	              AND #$DF
.393564		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393566		80 06		bra $39356e	              BRA OPL2_Set_MaintainSustain_Exit
.393568						OPL2_Set_MaintainSustain_Set
.393568		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39356a		09 20		ora #$20	              ORA #$20
.39356c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39356e						OPL2_Set_MaintainSustain_Exit
.39356e		6b		rtl		                RTL
.39356f						OPL2_GET_MAINTAINSUSTAIN
.39356f		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393572		2b		pld		                PLD
.393573		c2 20		rep #$20	                REP #$20        ; set A long
.393575		a9 20 00	lda #$0020	              LDA #$0020;
.393578		85 28		sta $28		              STA OPL2_REG_REGION
.39357a		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.39357d		e2 20		sep #$20	                SEP #$20        ; set A short
.39357f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393581		29 20		and #$20	              AND #$20
.393583		6b		rtl		                RTL
.393584						OPL2_SET_ENVELOPESCALING
.393584		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393587		2b		pld		                PLD
.393588		08		php		              PHP ; Push the Carry
.393589		c2 20		rep #$20	                REP #$20        ; set A long
.39358b		18		clc		              CLC
.39358c		a9 20 00	lda #$0020	              LDA #$0020;
.39358f		85 28		sta $28		              STA OPL2_REG_REGION
.393591		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.393594		28		plp		              PLP ; Pull the Carry out
.393595		e2 20		sep #$20	                SEP #$20        ; set A short
.393597		b0 08		bcs $3935a1	              BCS OPL2_Set_EnvelopeScaling_Set;
.393599		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39359b		29 ef		and #$ef	              AND #$EF
.39359d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39359f		80 06		bra $3935a7	              BRA OPL2_Set_EnvelopeScaling_Exit
.3935a1						OPL2_Set_EnvelopeScaling_Set
.3935a1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935a3		09 10		ora #$10	              ORA #$10
.3935a5		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3935a7						OPL2_Set_EnvelopeScaling_Exit
.3935a7		6b		rtl		                RTL
.3935a8						OPL2_GET_ENVELOPESCALING
.3935a8		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3935ab		2b		pld		                PLD
.3935ac		c2 20		rep #$20	                REP #$20        ; set A long
.3935ae		a9 20 00	lda #$0020	              LDA #$0020;
.3935b1		85 28		sta $28		              STA OPL2_REG_REGION
.3935b3		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.3935b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3935b8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935ba		29 10		and #$10	              AND #$10
.3935bc		6b		rtl		                RTL
.3935bd						OPL2_GET_MODFREQMULTIPLE
.3935bd		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3935c0		2b		pld		                PLD
.3935c1		c2 20		rep #$20	                REP #$20        ; set A long
.3935c3		a9 20 00	lda #$0020	              LDA #$0020;
.3935c6		85 28		sta $28		              STA OPL2_REG_REGION
.3935c8		20 24 39	jsr $393924	              JSR OPL2_GET_REG_OFFSET
.3935cb		e2 20		sep #$20	                SEP #$20        ; set A short
.3935cd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3935cf		29 0f		and #$0f	              AND #$0F
.3935d1		6b		rtl		              RTL
.3935d2						OPL2_SET_MODFREQMULTIPLE
.3935d2		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3935d5		2b		pld		                PLD
.3935d6		c2 20		rep #$20	                REP #$20        ; set A long
.3935d8		a9 20 00	lda #$0020	                LDA #$0020;
.3935db		85 28		sta $28		                STA OPL2_REG_REGION
.3935dd		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.3935e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3935e2		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3935e4		29 0f		and #$0f	                AND #$0F
.3935e6		85 32		sta $32		                STA OPL2_PARAMETER0
.3935e8		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3935ea		29 f0		and #$f0	                AND #$F0
.3935ec		05 32		ora $32		                ORA OPL2_PARAMETER0
.3935ee		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3935f0		6b		rtl		                RTL
.3935f1						OPL2_SET_SCALINGLEVEL
.3935f1		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3935f4		2b		pld		                PLD
.3935f5		c2 20		rep #$20	                REP #$20        ; set A long
.3935f7		a9 40 00	lda #$0040	                LDA #$0040;
.3935fa		85 28		sta $28		                STA OPL2_REG_REGION
.3935fc		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.3935ff		e2 20		sep #$20	                SEP #$20        ; set A short
.393601		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393603		29 03		and #$03	                AND #$03
.393605		0a		asl a		                ASL
.393606		0a		asl a		                ASL
.393607		0a		asl a		                ASL
.393608		0a		asl a		                ASL
.393609		0a		asl a		                ASL
.39360a		0a		asl a		                ASL
.39360b		85 32		sta $32		                STA OPL2_PARAMETER0
.39360d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39360f		29 3f		and #$3f	                AND #$3F
.393611		05 32		ora $32		                ORA OPL2_PARAMETER0
.393613		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393615		6b		rtl		                RTL
.393616						OPL2_SET_VOLUME
.393616		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393619		2b		pld		                PLD
.39361a		c2 20		rep #$20	                REP #$20        ; set A long
.39361c		a9 40 00	lda #$0040	                LDA #$0040  ;
.39361f		85 28		sta $28		                STA OPL2_REG_REGION
.393621		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393624		e2 20		sep #$20	                SEP #$20        ; set A short
.393626		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.393628		29 3f		and #$3f	                AND #$3F
.39362a		85 32		sta $32		                STA OPL2_PARAMETER0
.39362c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39362e		29 c0		and #$c0	                AND #$C0
.393630		05 32		ora $32		                ORA OPL2_PARAMETER0
.393632		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393634		6b		rtl		                RTL
.393635						OPL2_GET_VOLUME
.393635		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393638		2b		pld		                PLD
.393639		c2 20		rep #$20	                REP #$20        ; set A long
.39363b		a9 40 00	lda #$0040	                LDA #$0040  ;
.39363e		85 28		sta $28		                STA OPL2_REG_REGION
.393640		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393643		e2 20		sep #$20	                SEP #$20        ; set A short
.393645		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393647		29 3f		and #$3f	                AND #$3F
.393649		6b		rtl		                RTL
.39364a						OPL2_SET_ATTACK
.39364a		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39364d		2b		pld		                PLD
.39364e		c2 20		rep #$20	                REP #$20        ; set A long
.393650		a9 60 00	lda #$0060	                LDA #$0060  ;
.393653		85 28		sta $28		                STA OPL2_REG_REGION
.393655		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393658		e2 20		sep #$20	                SEP #$20        ; set A short
.39365a		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39365c		29 0f		and #$0f	                AND #$0F
.39365e		0a		asl a		                ASL
.39365f		0a		asl a		                ASL
.393660		0a		asl a		                ASL
.393661		0a		asl a		                ASL
.393662		85 32		sta $32		                STA OPL2_PARAMETER0
.393664		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393666		29 0f		and #$0f	                AND #$0F
.393668		05 32		ora $32		                ORA OPL2_PARAMETER0
.39366a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39366c		6b		rtl		                RTL
.39366d						OPL2_GET_ATTACK
.39366d		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393670		2b		pld		                PLD
.393671		c2 20		rep #$20	                REP #$20        ; set A long
.393673		a9 60 00	lda #$0060	                LDA #$0060
.393676		85 28		sta $28		                STA OPL2_REG_REGION
.393678		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.39367b		e2 20		sep #$20	                SEP #$20        ; set A short
.39367d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39367f		29 f0		and #$f0	                AND #$F0
.393681		4a		lsr a		                LSR
.393682		4a		lsr a		                LSR
.393683		4a		lsr a		                LSR
.393684		4a		lsr a		                LSR
.393685		6b		rtl		                RTL
.393686						OPL2_SET_DECAY
.393686		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393689		2b		pld		                PLD
.39368a		c2 20		rep #$20	                REP #$20        ; set A long
.39368c		a9 60 00	lda #$0060	                LDA #$0060;
.39368f		85 28		sta $28		                STA OPL2_REG_REGION
.393691		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393694		e2 20		sep #$20	                SEP #$20        ; set A short
.393696		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393698		29 0f		and #$0f	                AND #$0F
.39369a		85 32		sta $32		                STA OPL2_PARAMETER0
.39369c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39369e		29 f0		and #$f0	                AND #$F0
.3936a0		05 32		ora $32		                ORA OPL2_PARAMETER0
.3936a2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3936a4		6b		rtl		                RTL
.3936a5						OPL2_GET_DECAY
.3936a5		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3936a8		2b		pld		                PLD
.3936a9		c2 20		rep #$20	                REP #$20        ; set A long
.3936ab		a9 60 00	lda #$0060	                LDA #$0060
.3936ae		85 28		sta $28		                STA OPL2_REG_REGION
.3936b0		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.3936b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3936b5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936b7		29 0f		and #$0f	                AND #$0F
.3936b9		6b		rtl		                RTL
.3936ba						OPL2_SET_SUSTAIN
.3936ba		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3936bd		2b		pld		                PLD
.3936be		c2 20		rep #$20	                REP #$20        ; set A long
.3936c0		a9 80 00	lda #$0080	                LDA #$0080;
.3936c3		85 28		sta $28		                STA OPL2_REG_REGION
.3936c5		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.3936c8		e2 20		sep #$20	                SEP #$20        ; set A short
.3936ca		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3936cc		29 0f		and #$0f	                AND #$0F
.3936ce		0a		asl a		                ASL
.3936cf		0a		asl a		                ASL
.3936d0		0a		asl a		                ASL
.3936d1		0a		asl a		                ASL
.3936d2		85 32		sta $32		                STA OPL2_PARAMETER0
.3936d4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936d6		29 0f		and #$0f	                AND #$0F
.3936d8		05 32		ora $32		                ORA OPL2_PARAMETER0
.3936da		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3936dc		6b		rtl		                RTL
.3936dd						OPL2_GET_SUSTAIN
.3936dd		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3936e0		2b		pld		                PLD
.3936e1		c2 20		rep #$20	                REP #$20        ; set A long
.3936e3		a9 80 00	lda #$0080	                LDA #$0080
.3936e6		85 28		sta $28		                STA OPL2_REG_REGION
.3936e8		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.3936eb		e2 20		sep #$20	                SEP #$20        ; set A short
.3936ed		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936ef		29 f0		and #$f0	                AND #$F0
.3936f1		4a		lsr a		                LSR
.3936f2		4a		lsr a		                LSR
.3936f3		4a		lsr a		                LSR
.3936f4		4a		lsr a		                LSR
.3936f5		6b		rtl		                RTL
.3936f6						OPL2_SET_RELEASE
.3936f6		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3936f9		2b		pld		                PLD
.3936fa		c2 20		rep #$20	                REP #$20        ; set A long
.3936fc		a9 80 00	lda #$0080	                LDA #$0080;
.3936ff		85 28		sta $28		                STA OPL2_REG_REGION
.393701		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393704		e2 20		sep #$20	                SEP #$20        ; set A short
.393706		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393708		29 0f		and #$0f	                AND #$0F
.39370a		85 32		sta $32		                STA OPL2_PARAMETER0
.39370c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39370e		29 f0		and #$f0	                AND #$F0
.393710		05 32		ora $32		                ORA OPL2_PARAMETER0
.393712		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393714		6b		rtl		                RTL
.393715						OPL2_GET_RELEASE
.393715		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393718		2b		pld		                PLD
.393719		c2 20		rep #$20	                REP #$20        ; set A long
.39371b		a9 80 00	lda #$0080	                LDA #$0080
.39371e		85 28		sta $28		                STA OPL2_REG_REGION
.393720		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393723		e2 20		sep #$20	                SEP #$20        ; set A short
.393725		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393727		29 0f		and #$0f	                AND #$0F
.393729		6b		rtl		                RTL
.39372a						OPL2_SET_FNUMBER
.39372a		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39372d		2b		pld		                PLD
.39372e		e2 20		sep #$20	                SEP #$20        ; set A short
.393730		18		clc		                CLC
.393731		a5 27		lda $27		                LDA OPL2_CHANNEL
.393733		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393735		69 a0		adc #$a0	                ADC #$A0
.393737		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393739		a9 00		lda #$00	                LDA #$00
.39373b		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39373d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39373f		18		clc		                CLC
.393740		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393743		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393745		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393747		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39374a		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39374c		e2 20		sep #$20	                SEP #$20        ; set A short
.39374e		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.393750		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393752		18		clc		                CLC
.393753		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393755		69 10		adc #$10	                ADC #$10
.393757		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393759		a5 33		lda $33		                LDA OPL2_PARAMETER1
.39375b		29 03		and #$03	                AND #$03
.39375d		85 33		sta $33		                STA OPL2_PARAMETER1
.39375f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393761		29 fc		and #$fc	                AND #$FC
.393763		05 33		ora $33		                ORA OPL2_PARAMETER1
.393765		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393767		6b		rtl		                RTL
.393768						OPL2_GET_FNUMBER
.393768		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39376b		2b		pld		                PLD
.39376c		e2 20		sep #$20	                SEP #$20        ; set A short
.39376e		18		clc		                CLC
.39376f		a5 27		lda $27		                LDA OPL2_CHANNEL
.393771		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393773		69 a0		adc #$a0	                ADC #$A0
.393775		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393777		a9 00		lda #$00	                LDA #$00
.393779		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39377b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39377d		18		clc		                CLC
.39377e		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393781		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393783		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393785		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393788		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39378a		e2 20		sep #$20	                SEP #$20        ; set A short
.39378c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39378e		85 32		sta $32		                STA OPL2_PARAMETER0
.393790		18		clc		                CLC
.393791		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393793		69 10		adc #$10	                ADC #$10
.393795		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393797		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393799		29 03		and #$03	                AND #$03
.39379b		85 33		sta $33		                STA OPL2_PARAMETER1
.39379d		6b		rtl		                RTL
.39379e						OPL2_Set_Frequency
.39379e		6b		rtl		                RTL
.39379f						OPL2_Get_Frequency
.39379f		6b		rtl		                RTL
.3937a0						OPL2_SET_BLOCK
.3937a0		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3937a3		2b		pld		                PLD
.3937a4		e2 20		sep #$20	                SEP #$20        ; set A short
.3937a6		18		clc		                CLC
.3937a7		a5 27		lda $27		                LDA OPL2_CHANNEL
.3937a9		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3937ab		69 b0		adc #$b0	                ADC #$B0
.3937ad		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3937af		a9 00		lda #$00	                LDA #$00
.3937b1		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3937b3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3937b5		18		clc		                CLC
.3937b6		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3937b9		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3937bb		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3937bd		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3937c0		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3937c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3937c4		a5 31		lda $31		                LDA OPL2_OCTAVE
.3937c6		29 07		and #$07	                AND #$07
.3937c8		0a		asl a		                ASL
.3937c9		0a		asl a		                ASL
.3937ca		85 31		sta $31		                STA OPL2_OCTAVE
.3937cc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937ce		29 e3		and #$e3	                AND #$E3
.3937d0		05 31		ora $31		                ORA OPL2_OCTAVE
.3937d2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937d4		60		rts		                RTS
.3937d5						OPL2_SET_KEYON
.3937d5		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3937d8		2b		pld		                PLD
.3937d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3937db		18		clc		                CLC
.3937dc		a5 27		lda $27		                LDA OPL2_CHANNEL
.3937de		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3937e0		69 b0		adc #$b0	                ADC #$B0
.3937e2		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3937e4		a9 00		lda #$00	                LDA #$00
.3937e6		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3937e8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3937ea		18		clc		                CLC
.3937eb		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3937ee		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3937f0		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3937f2		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3937f5		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3937f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3937f9		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3937fb		29 01		and #$01	                AND #$01
.3937fd		f0 02		beq $393801	                BEQ SET_KEYON_OFF
.3937ff		a9 20		lda #$20	                LDA #$20
.393801						    SET_KEYON_OFF
.393801		85 32		sta $32		                STA OPL2_PARAMETER0
.393803		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393805		29 df		and #$df	                AND #$DF
.393807		05 32		ora $32		                ORA OPL2_PARAMETER0
.393809		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39380b		60		rts		                RTS
.39380c						OPL2_SET_FEEDBACK
.39380c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39380f		2b		pld		                PLD
.393810		e2 20		sep #$20	                SEP #$20        ; set A short
.393812		18		clc		              CLC
.393813		a5 27		lda $27		              LDA OPL2_CHANNEL
.393815		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393817		69 c0		adc #$c0	              ADC #$C0
.393819		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39381b		a9 00		lda #$00	              LDA #$00
.39381d		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.39381f		c2 30		rep #$30	                REP #$30        ; set A&X long
.393821		18		clc		              CLC
.393822		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393825		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393827		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393829		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39382c		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39382e		e2 20		sep #$20	                SEP #$20        ; set A short
.393830		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393832		29 07		and #$07	              AND #$07
.393834		0a		asl a		              ASL
.393835		85 32		sta $32		              STA OPL2_PARAMETER0
.393837		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393839		29 01		and #$01	              AND #$01
.39383b		05 32		ora $32		              ORA OPL2_PARAMETER0
.39383d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39383f		6b		rtl		                RTL
.393840						OPL2_SET_SYNTHMODE
.393840		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393843		2b		pld		                PLD
.393844		08		php		              PHP ; Push the Carry
.393845		e2 20		sep #$20	                SEP #$20        ; set A short
.393847		18		clc		              CLC
.393848		a5 27		lda $27		              LDA OPL2_CHANNEL
.39384a		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39384c		69 c0		adc #$c0	              ADC #$C0
.39384e		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393850		a9 00		lda #$00	              LDA #$00
.393852		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393854		c2 30		rep #$30	                REP #$30        ; set A&X long
.393856		18		clc		              CLC
.393857		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39385a		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39385c		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39385e		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393861		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393863		28		plp		              PLP ; Pull the Carry out
.393864		e2 20		sep #$20	                SEP #$20        ; set A short
.393866		b0 08		bcs $393870	              BCS OPL2_Set_Synthmode_Set;
.393868		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39386a		29 fe		and #$fe	              AND #$FE
.39386c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39386e		80 06		bra $393876	              BRA OPL2_Set_Synthmode_Exit
.393870						OPL2_Set_Synthmode_Set
.393870		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393872		09 01		ora #$01	              ORA #$01
.393874		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393876						OPL2_Set_Synthmode_Exit
.393876		6b		rtl		                RTL
.393877						OPL2_SET_DEEPTREMOLO
.393877		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39387a		2b		pld		                PLD
.39387b		c2 20		rep #$20	                REP #$20        ; set A long
.39387d		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.393880		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393882		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393885		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393887		e2 20		sep #$20	                SEP #$20        ; set A short
.393889		b0 08		bcs $393893	              BCS OPL2_Set_DeepTremolo_Set;
.39388b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39388d		29 7f		and #$7f	              AND #$7F
.39388f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393891		80 06		bra $393899	              BRA OPL2_Set_DeepTremolo_Exit
.393893						OPL2_Set_DeepTremolo_Set
.393893		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393895		09 80		ora #$80	              ORA #$80
.393897		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393899						OPL2_Set_DeepTremolo_Exit
.393899		6b		rtl		                RTL
.39389a						OPL2_SET_DEEPVIBRATO
.39389a		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.39389d		2b		pld		                PLD
.39389e		c2 20		rep #$20	                REP #$20        ; set A long
.3938a0		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.3938a3		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3938a5		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3938a8		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3938aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3938ac		b0 08		bcs $3938b6	              BCS OPL2_Set_DeepVibrato_Set;
.3938ae		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938b0		29 bf		and #$bf	              AND #$BF
.3938b2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938b4		80 06		bra $3938bc	              BRA OPL2_Set_DeepVibrato_Exit
.3938b6						OPL2_Set_DeepVibrato_Set
.3938b6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3938b8		09 40		ora #$40	              ORA #$40
.3938ba		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3938bc						OPL2_Set_DeepVibrato_Exit
.3938bc		6b		rtl		                RTL
.3938bd						OPL2_SET_PERCUSSION
.3938bd		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3938c0		2b		pld		                PLD
.3938c1		c2 20		rep #$20	                REP #$20        ; set A long
.3938c3		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.3938c6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3938c8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3938cb		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3938cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3938cf		b0 08		bcs $3938d9	                BCS OPL2_Set_Percussion_Set;
.3938d1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938d3		29 df		and #$df	                AND #$DF
.3938d5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938d7		80 06		bra $3938df	                BRA OPL2_Set_Percussion_Exit
.3938d9						OPL2_Set_Percussion_Set
.3938d9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938db		09 20		ora #$20	                ORA #$20
.3938dd		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938df						OPL2_Set_Percussion_Exit
.3938df		6b		rtl		                RTL
.3938e0						OPL2_SET_DRUMS
.3938e0		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.3938e3		2b		pld		                PLD
.3938e4		c2 20		rep #$20	                REP #$20        ; set A long
.3938e6		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.3938e9		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3938eb		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3938ee		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3938f0		e2 20		sep #$20	                SEP #$20        ; set A short
.3938f2		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3938f4		29 1f		and #$1f	                AND #$1F
.3938f6		85 32		sta $32		                STA OPL2_PARAMETER0
.3938f8		49 ff		eor #$ff	                EOR #$FF
.3938fa		85 33		sta $33		                STA OPL2_PARAMETER1
.3938fc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938fe		25 33		and $33		                AND OPL2_PARAMETER1
.393900		05 32		ora $32		                ORA OPL2_PARAMETER0
.393902		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393904		6b		rtl		                RTL
.393905						OPL2_SET_WAVEFORM
.393905		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.393908		2b		pld		                PLD
.393909		c2 20		rep #$20	                REP #$20        ; set A long
.39390b		a9 e0 00	lda #$00e0	                LDA #$00E0;
.39390e		85 28		sta $28		                STA OPL2_REG_REGION
.393910		20 24 39	jsr $393924	                JSR OPL2_GET_REG_OFFSET
.393913		e2 20		sep #$20	                SEP #$20        ; set A short
.393915		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393917		29 03		and #$03	                AND #$03
.393919		85 32		sta $32		                STA OPL2_PARAMETER0
.39391b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39391d		29 fc		and #$fc	                AND #$FC
.39391f		05 32		ora $32		                ORA OPL2_PARAMETER0
.393921		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393923		6b		rtl		                RTL
.393924						OPL2_GET_REG_OFFSET
.393924		e2 30		sep #$30	                SEP #$30        ; set A&X short
.393926		a5 27		lda $27		                LDA OPL2_CHANNEL
.393928		29 0f		and #$0f	                AND #$0F
.39392a		aa		tax		                TAX
.39392b		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.39392d		d0 06		bne $393935	                BNE OPL2_Get_Register_Offset_l0
.39392f		bf 8d 10 39	lda $39108d,x	                LDA @lregisterOffsets_operator0, X
.393933		80 04		bra $393939	                BRA OPL2_Get_Register_Offset_exit
.393935						OPL2_Get_Register_Offset_l0
.393935		bf 96 10 39	lda $391096,x	                LDA @lregisterOffsets_operator1, X
.393939						OPL2_Get_Register_Offset_exit
.393939		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39393b		a9 00		lda #$00	                LDA #$00
.39393d		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39393f		c2 30		rep #$30	                REP #$30        ; set A&X long
.393941		18		clc		                CLC
.393942		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393945		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393947		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393949		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.39394b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.39394e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393950		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SDCard_Controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393951						ITRACE
.393951		08		php		                PHP
.393952		c2 30		rep #$30	                REP #$30        ; set A&X long
.393954		8b		phb		                PHB                 ; Print the text
.393955		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393957		aa		tax		                TAX                 ; ... into X
.393958		e2 20		sep #$20	                SEP #$20        ; set A short
.39395a		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.39395c		48		pha		                PHA
.39395d		ab		plb		                PLB                 ; ... into B
.39395e		22 05 07 39	jsl $390705	                JSL IPUTS           ; Print the string
.393962		c2 20		rep #$20	                REP #$20        ; set A long
.393964		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393966		83 08		sta $08,s	                STA #8,S
.393968		a3 02		lda $02,s	                LDA #2,S
.39396a		83 06		sta $06,s	                STA #6,S
.39396c		ab		plb		                PLB
.39396d		68		pla		                PLA                 ; Clean up the stack
.39396e		68		pla		                PLA
.39396f		28		plp		                PLP
.393970		6b		rtl		                RTL
.393971						ISETTIMEOUT
.393971		8b		phb		                PHB
.393972		0b		phd		                PHD
.393973		08		php		                PHP
.393974		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393977		ab		plb		                PLB
.393978		ab		plb		                PLB
.393979		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39397c		2b		pld		                PLD
.39397d		78		sei		                SEI                             ; We don't want to be interrupted
.39397e		e2 20		sep #$20	                SEP #$20        ; set A short
.393980		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393982		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.393984		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.393986		85 0c		sta $032c	                STA @b BIOS_FLAGS
.393988		28		plp		done            PLP
.393989		2b		pld		                PLD
.39398a		ab		plb		                PLB
.39398b		6b		rtl		                RTL
.39398c						ICMDBLOCK
.39398c		0b		phd		                PHD
.39398d		08		php		                PHP
.39398e		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393991		2b		pld		                PLD
.393992		e2 20		sep #$20	                SEP #$20        ; set A short
.393994		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393996		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393998		d0 06		bne $3939a0	                BNE ret_success             ; No: just return
.39399a		22 16 5f 39	jsl $395f16	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.39399e		90 0c		bcc $3939ac	                BCC pass_failure
.3939a0						ret_success
.3939a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3939a2		64 00		stz $0320	                STZ BIOS_STATUS
.3939a4		28		plp		                PLP
.3939a5		2b		pld		                PLD
.3939a6		38		sec		                SEC
.3939a7		6b		rtl		                RTL
.3939a8						ret_failure
.3939a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3939aa		85 00		sta $0320	                STA BIOS_STATUS
.3939ac		28		plp		pass_failure    PLP
.3939ad		2b		pld		                PLD
.3939ae		18		clc		                CLC
.3939af		6b		rtl		                RTL
.3939b0						IGETBLOCK
.3939b0		5a		phy		                PHY
.3939b1		0b		phd		                PHD
.3939b2		8b		phb		                PHB
.3939b3		08		php		                PHP
.3939b4		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3939b7		ab		plb		                PLB
.3939b8		ab		plb		                PLB
.3939b9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3939bc		2b		pld		                PLD
.3939bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3939bf		a0 00 00	ldy #$0000	                LDY #0
.3939c2		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.3939c4		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.3939c6		c8		iny		                INY
.3939c7		c0 00 02	cpy #$0200	                CPY #512
.3939ca		d0 f8		bne $3939c4	                BNE clr_loop
.3939cc		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.3939ce		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.3939d0		f0 10		beq $3939e2	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.3939d2		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.3939d4		f0 14		beq $3939ea	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.3939d6		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.3939d8		f0 18		beq $3939f2	                BEQ hd_getblock
.3939da		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.3939dc		28		plp		ret_failure     PLP
.3939dd		ab		plb		                PLB
.3939de		2b		pld		                PLD
.3939df		7a		ply		                PLY
.3939e0		38		sec		                SEC                                 ; Return failure
.3939e1		6b		rtl		                RTL
.3939e2		22 fb 54 39	jsl $3954fb	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.3939e6		b0 12		bcs $3939fa	                BCS ret_success
.3939e8		80 f2		bra $3939dc	                BRA ret_failure
.3939ea		22 3c 5d 39	jsl $395d3c	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.3939ee		b0 0a		bcs $3939fa	                BCS ret_success
.3939f0		80 ea		bra $3939dc	                BRA ret_failure
.3939f2		22 d0 62 39	jsl $3962d0	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.3939f6		b0 02		bcs $3939fa	                BCS ret_success
.3939f8		80 e2		bra $3939dc	                BRA ret_failure
.3939fa						ret_success
.3939fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3939fc		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.3939fe		28		plp		                PLP
.3939ff		ab		plb		                PLB
.393a00		2b		pld		                PLD
.393a01		7a		ply		                PLY
.393a02		38		sec		                SEC                                 ; Return success
.393a03		6b		rtl		                RTL
.393a04						IPUTBLOCK
.393a04		0b		phd		                PHD
.393a05		8b		phb		                PHB
.393a06		08		php		                PHP
.393a07		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393a0a		ab		plb		                PLB
.393a0b		ab		plb		                PLB
.393a0c		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393a0f		2b		pld		                PLD
.393a10		e2 20		sep #$20	                SEP #$20        ; set A short
.393a12		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393a14		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393a16		f0 0f		beq $393a27	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393a18		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393a1a		f0 13		beq $393a2f	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393a1c		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393a1e		f0 17		beq $393a37	                BEQ hd_putblock
.393a20		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393a22		28		plp		ret_failure     PLP
.393a23		ab		plb		                PLB
.393a24		2b		pld		                PLD
.393a25		18		clc		                CLC                                 ; Return failure
.393a26		6b		rtl		                RTL
.393a27		22 8d 55 39	jsl $39558d	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.393a2b		90 f5		bcc $393a22	                BCC ret_failure
.393a2d		80 10		bra $393a3f	                BRA ret_success
.393a2f		22 96 5d 39	jsl $395d96	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.393a33		90 ed		bcc $393a22	                BCC ret_failure
.393a35		80 08		bra $393a3f	                BRA ret_success
.393a37		22 56 63 39	jsl $396356	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.393a3b		90 e5		bcc $393a22	                BCC ret_failure
.393a3d		80 00		bra $393a3f	                BRA ret_success
.393a3f						ret_success
.393a3f		e2 20		sep #$20	                SEP #$20        ; set A short
.393a41		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393a43		28		plp		                PLP
.393a44		ab		plb		                PLB
.393a45		2b		pld		                PLD
.393a46		38		sec		                SEC                                 ; Return success
.393a47		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.393a48						DOS_DIROPEN
.393a48		da		phx		                PHX
.393a49		5a		phy		                PHY
.393a4a		0b		phd		                PHD
.393a4b		8b		phb		                PHB
.393a4c		08		php		                PHP
.393a4d		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393a50		ab		plb		                PLB
.393a51		ab		plb		                PLB
.393a52		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393a55		2b		pld		                PLD
.393a56		c2 20		rep #$20	                REP #$20        ; set A long
.393a58		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.393a5b		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.393a5e		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.393a61		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393a64		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.393a67		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393a69		85 18		sta $0338	                STA DOS_DIR_PTR
.393a6b		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393a6e		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393a70		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393a72		e2 20		sep #$20	                SEP #$20        ; set A short
.393a74		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.393a77		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.393a79		d0 24		bne $393a9f	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.393a7b						fetch_fat12
.393a7b		e2 20		sep #$20	                SEP #$20        ; set A short
.393a7d		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.393a7f		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393a82		c2 20		rep #$20	                REP #$20        ; set A long
.393a84		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.393a86		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393a88		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393a8a		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393a8c		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.393a8f		85 02		sta $0322	                STA BIOS_LBA
.393a91		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393a94		85 04		sta $0324	                STA BIOS_LBA+2
.393a96		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.393a9a		b0 1f		bcs $393abb	                BCS do_success              ; If sucessful, set the directory cursor
.393a9c		82 68 16	brl $395107	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393a9f						fetch_fat32
.393a9f		e2 20		sep #$20	                SEP #$20        ; set A short
.393aa1		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.393aa3		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393aa6		c2 20		rep #$20	                REP #$20        ; set A long
.393aa8		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393aab		85 10		sta $0330	                STA DOS_CLUS_ID
.393aad		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393ab0		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393ab2		22 b9 3f 39	jsl $393fb9	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393ab6		b0 03		bcs $393abb	                BCS do_success              ; If successful: set the directory cursor
.393ab8		82 4c 16	brl $395107	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393abb		82 50 16	brl $39510e	do_success      BRL IF_SUCCESS
.393abe						DOS_DIRFIRST
.393abe		0b		phd		                PHD
.393abf		08		php		                PHP
.393ac0		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393ac3		2b		pld		                PLD
.393ac4		c2 20		rep #$20	                REP #$20        ; set A long
.393ac6		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393ac9		85 18		sta $0338	                STA DOS_DIR_PTR
.393acb		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393ace		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393ad0		28		plp		                PLP
.393ad1		2b		pld		                PLD
.393ad2		6b		rtl		                RTL
.393ad3						DOS_DIRNEXT
.393ad3		da		phx		                PHX
.393ad4		5a		phy		                PHY
.393ad5		0b		phd		                PHD
.393ad6		8b		phb		                PHB
.393ad7		08		php		                PHP
.393ad8		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393adb		ab		plb		                PLB
.393adc		ab		plb		                PLB
.393add		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393ae0		2b		pld		                PLD
.393ae1		c2 20		rep #$20	                REP #$20        ; set A long
.393ae3		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.393ae4		a5 18		lda $0338	                LDA DOS_DIR_PTR
.393ae6		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.393ae9		85 18		sta $0338	                STA DOS_DIR_PTR
.393aeb		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393aed		69 00 00	adc #$0000	                ADC #0
.393af0		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393af2		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.393af3		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.393af6		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.393af8		85 28		sta $0348	                STA DOS_TEMP
.393afa		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.393afd		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.393aff		85 2a		sta $034a	                STA DOS_TEMP+2
.393b01		30 0c		bmi $393b0f	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.393b03		f0 03		beq $393b08	                BEQ check_lower
.393b05		82 06 16	brl $39510e	                BRL IF_SUCCESS
.393b08		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.393b0a		f0 03		beq $393b0f	                BEQ get_next_block
.393b0c		82 ff 15	brl $39510e	                BRL IF_SUCCESS
.393b0f						get_next_block
.393b0f		e2 20		sep #$20	                SEP #$20        ; set A short
.393b11		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393b14		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.393b16		f0 38		beq $393b50	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.393b18						next_sector
.393b18		c2 20		rep #$20	                REP #$20        ; set A long
.393b1a		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393b1d		1a		inc a		                INC A
.393b1e		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.393b21		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.393b24		d0 07		bne $393b2d	                BNE read_sector
.393b26		e2 20		sep #$20	                SEP #$20        ; set A short
.393b28		a9 00		lda #$00	                LDA #0
.393b2a		82 d6 15	brl $395103	                BRL IF_FAILURE
.393b2d						read_sector
.393b2d		c2 20		rep #$20	                REP #$20        ; set A long
.393b2f		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.393b32		85 02		sta $0322	                STA BIOS_LBA
.393b34		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393b37		85 04		sta $0324	                STA BIOS_LBA+2
.393b39		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.393b3c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393b3e		85 18		sta $0338	                STA DOS_DIR_PTR
.393b40		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393b43		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393b45		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393b47		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.393b4b		b0 39		bcs $393b86	                BCS do_success              ; If successful: set the directory cursor
.393b4d		82 b7 15	brl $395107	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393b50						next_cluster
.393b50		c2 20		rep #$20	                REP #$20        ; set A long
.393b52		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.393b55		85 10		sta $0330	                STA DOS_CLUS_ID
.393b57		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393b5a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393b5c		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393b5f		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393b61		85 18		sta $0338	                STA DOS_DIR_PTR
.393b63		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393b66		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393b68		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393b6a		22 5f 43 39	jsl $39435f	                JSL NEXTCLUSTER             ; Try to find the next cluster
.393b6e		b0 03		bcs $393b73	                BCS set_next
.393b70		82 94 15	brl $395107	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.393b73		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.393b75		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393b78		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.393b7a		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393b7d		22 b9 3f 39	jsl $393fb9	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393b81		b0 03		bcs $393b86	                BCS do_success              ; If successful: set the directory cursor
.393b83		82 81 15	brl $395107	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393b86		82 85 15	brl $39510e	do_success      BRL IF_SUCCESS
.393b89						DOS_DIRFINDFREE
.393b89		da		phx		                PHX
.393b8a		5a		phy		                PHY
.393b8b		0b		phd		                PHD
.393b8c		8b		phb		                PHB
.393b8d		08		php		                PHP
.393b8e		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393b91		ab		plb		                PLB
.393b92		ab		plb		                PLB
.393b93		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393b96		2b		pld		                PLD
.393b97		22 93 4c 39	jsl $394c93	                JSL IF_DIROPEN
.393b9b		b0 06		bcs $393ba3	                BCS start_walk
.393b9d		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.393ba0		82 28 00	brl $393bcb	                BRL ret_failure
.393ba3		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.393ba6						chk_entry
.393ba6		e2 20		sep #$20	                SEP #$20        ; set A short
.393ba8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.393baa		f0 1c		beq $393bc8	                BEQ ret_success             ; If 0: we have a blank... return it
.393bac		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.393bae		f0 18		beq $393bc8	                BEQ ret_success             ; Yes: return it
.393bb0		22 c2 4c 39	jsl $394cc2	                JSL IF_DIRNEXT              ; Go to the next directory entry
.393bb4		b0 ed		bcs $393ba3	                BCS start_walk              ; If we got one, start walking it
.393bb6		22 ce 3b 39	jsl $393bce	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.393bba		90 0f		bcc $393bcb	                BCC ret_failure             ; If that didn't work, return the failure
.393bbc		c2 20		rep #$20	                REP #$20        ; set A long
.393bbe		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.393bc1		85 18		sta $0338	                STA DOS_DIR_PTR
.393bc3		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393bc6		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393bc8		82 43 15	brl $39510e	ret_success     BRL IF_SUCCESS
.393bcb		82 35 15	brl $395103	ret_failure     BRL IF_FAILURE
.393bce						DOS_DIRAPPEND
.393bce		da		phx		                PHX
.393bcf		8b		phb		                PHB
.393bd0		0b		phd		                PHD
.393bd1		08		php		                PHP
.393bd2		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393bd5		ab		plb		                PLB
.393bd6		ab		plb		                PLB
.393bd7		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393bda		2b		pld		                PLD
.393bdb		e2 20		sep #$20	                SEP #$20        ; set A short
.393bdd		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.393be0		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.393be2		f0 09		beq $393bed	                BEQ clr_sector                  ; Yes: clear out the directory data
.393be4						ret_failure
.393be4		e2 20		sep #$20	                SEP #$20        ; set A short
.393be6		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.393be8		85 0e		sta $032e	                STA DOS_STATUS
.393bea		82 3e 00	brl $393c2b	                BRL pass_failure
.393bed						clr_sector
.393bed		c2 20		rep #$20	                REP #$20        ; set A long
.393bef		a9 00 00	lda #$0000	                LDA #0
.393bf2		a2 00 00	ldx #$0000	                LDX #0
.393bf5		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.393bf8		e8		inx		                INX
.393bf9		e8		inx		                INX
.393bfa		e0 00 02	cpx #$0200	                CPX #512
.393bfd		d0 f6		bne $393bf5	                BNE clr_loop
.393bff		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.393c02		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393c04		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393c07		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393c09		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.393c0c		85 10		sta $0330	                STA DOS_CLUS_ID
.393c0e		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393c11		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393c13		22 22 47 39	jsl $394722	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.393c17		90 12		bcc $393c2b	                BCC pass_failure                ; If there was an error, pass it up the chain
.393c19		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.393c1c		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393c1f		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.393c22		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393c25		28		plp		ret_success     PLP
.393c26		2b		pld		                PLD
.393c27		ab		plb		                PLB
.393c28		fa		plx		                PLX
.393c29		38		sec		                SEC
.393c2a		6b		rtl		                RTL
.393c2b		28		plp		pass_failure    PLP
.393c2c		2b		pld		                PLD
.393c2d		ab		plb		                PLB
.393c2e		fa		plx		                PLX
.393c2f		18		clc		                CLC
.393c30		6b		rtl		                RTL
.393c31						DOS_DIRWRITE
.393c31		da		phx		                PHX
.393c32		5a		phy		                PHY
.393c33		0b		phd		                PHD
.393c34		8b		phb		                PHB
.393c35		08		php		                PHP
.393c36		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393c39		ab		plb		                PLB
.393c3a		ab		plb		                PLB
.393c3b		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393c3e		2b		pld		                PLD
.393c3f		e2 20		sep #$20	                SEP #$20        ; set A short
.393c41		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393c44		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.393c46		f0 1f		beq $393c67	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.393c48						write_sector
.393c48		c2 20		rep #$20	                REP #$20        ; set A long
.393c4a		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.393c4d		85 02		sta $0322	                STA BIOS_LBA
.393c4f		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393c52		85 04		sta $0324	                STA BIOS_LBA+2
.393c54		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393c57		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393c59		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393c5c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393c5e		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.393c62		b0 1f		bcs $393c83	                BCS ret_success
.393c64		82 9c 14	brl $395103	ret_failure     BRL IF_FAILURE
.393c67						write_cluster
.393c67		c2 20		rep #$20	                REP #$20        ; set A long
.393c69		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.393c6c		85 10		sta $0330	                STA DOS_CLUS_ID
.393c6e		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393c71		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393c73		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393c76		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393c78		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393c7b		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393c7d		22 eb 3f 39	jsl $393feb	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.393c81		90 e1		bcc $393c64	                BCC ret_failure
.393c83		82 88 14	brl $39510e	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_fmx_inc.asm

=$38a000					DOS_HIGH_VARIABLES      = $38A000
=$38a000					DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					    DOS_FILE_BUFFS          = $38B000
=3719168					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.393c86						DOS_INIT
.393c86		8b		phb		                PHB
.393c87		0b		phd		                PHD
.393c88		08		php		                PHP
.393c89		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393c8c		ab		plb		                PLB
.393c8d		ab		plb		                PLB
.393c8e		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393c91		2b		pld		                PLD
.393c92		e2 20		sep #$20	                SEP #$20        ; set A short
.393c94		c2 10		rep #$10	                REP #$10        ; set X long
.393c96		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.393c99		a9 00		lda #$00	                LDA #0
.393c9b		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.393c9e		e8		inx		                INX
.393c9f		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.393ca2		d0 f7		bne $393c9b	                BNE b0_clr_loop
.393ca4		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393ca7		ab		plb		                PLB
.393ca8		ab		plb		                PLB
.393ca9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393cac		2b		pld		                PLD
.393cad		e2 20		sep #$20	                SEP #$20        ; set A short
.393caf		c2 10		rep #$10	                REP #$10        ; set X long
.393cb1		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.393cb4		a9 00		lda #$00	                LDA #0
.393cb6		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.393cb9		e8		inx		                INX
.393cba		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.393cbd		d0 f7		bne $393cb6	                BNE b38_clr_loop
.393cbf		c2 20		rep #$20	                REP #$20        ; set A long
.393cc1		a9 38 40	lda #$4038	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.393cc4		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.393cc8		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.393ccb		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.393ccf		e2 20		sep #$20	                SEP #$20        ; set A short
.393cd1		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.393cd3		85 01		sta $0321	                STA BIOS_DEV
.393cd5		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.393cd7		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.393cdb		a9 00		lda #$00	                LDA #0
.393cdd		a2 00 00	ldx #$0000	                LDX #0
.393ce0		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.393ce3		e8		inx		                INX
.393ce4		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.393ce7		d0 f7		bne $393ce0	                BNE fd_zero_loop
.393ce9		a9 00		lda #$00	                LDA #0
.393ceb		a2 00 00	ldx #$0000	                LDX #0
.393cee		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.393cf1		e8		inx		                INX
.393cf2		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.393cf5		d0 f7		bne $393cee	                BNE sect_zero_loop
.393cf7		c2 20		rep #$20	                REP #$20        ; set A long
.393cf9		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.393cfc		85 20		sta $0340	                STA @b DOS_FD_PTR
.393cfe		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.393d01		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393d03		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.393d06		85 28		sta $0348	                STA @b DOS_TEMP
.393d08		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.393d0b		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393d0d		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.393d10		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.393d13		a5 28		lda $0348	                LDA @b DOS_TEMP
.393d15		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393d17		c8		iny		                INY
.393d18		c8		iny		                INY
.393d19		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393d1b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393d1d		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.393d1e		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.393d20		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.393d23		85 20		sta $0340	                STA @b DOS_FD_PTR
.393d25		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.393d27		69 00 00	adc #$0000	                ADC #0
.393d2a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393d2c		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.393d2d		a5 28		lda $0348	                LDA @b DOS_TEMP
.393d2f		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.393d32		85 28		sta $0348	                STA @b DOS_TEMP
.393d34		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393d36		69 00 00	adc #$0000	                ADC #0
.393d39		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393d3b		ca		dex		                DEX                     ; Count down the descriptors...
.393d3c		d0 d2		bne $393d10	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.393d3e		28		plp		                PLP
.393d3f		2b		pld		                PLD
.393d40		ab		plb		                PLB
.393d41		6b		rtl		                RTL
.393d42						DOS_MOUNT
.393d42		8b		phb		                PHB
.393d43		0b		phd		                PHD
.393d44		08		php		                PHP
.393d45		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393d48		ab		plb		                PLB
.393d49		ab		plb		                PLB
.393d4a		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393d4d		2b		pld		                PLD
.393d4e		e2 20		sep #$20	                SEP #$20        ; set A short
.393d50		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.393d52		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.393d56		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.393d58		f0 1f		beq $393d79	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.393d5a		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.393d5c		f0 26		beq $393d84	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.393d5e		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.393d60		f0 0b		beq $393d6d	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.393d62		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.393d64		85 0e		sta $032e	                STA DOS_STATUS
.393d66		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.393d68		85 00		sta $0320	                STA BIOS_STATUS
.393d6a		82 7c 01	brl $393ee9	                BRL ret_failure
.393d6d		22 f7 5d 39	jsl $395df7	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.393d71		b0 03		bcs $393d76	                BCS fdc_success
.393d73		82 73 01	brl $393ee9	                BRL ret_failure
.393d76		82 67 01	brl $393ee0	fdc_success     BRL ret_success
.393d79		22 c4 54 39	jsl $3954c4	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.393d7d		b0 10		bcs $393d8f	                BCS get_mbr             ; Continue if success
.393d7f		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393d81		82 65 01	brl $393ee9	                BRL ret_failure
.393d84		22 e0 61 39	jsl $3961e0	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.393d88		b0 05		bcs $393d8f	                BCS get_mbr             ; Continue if success
.393d8a		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393d8c		82 5a 01	brl $393ee9	                BRL ret_failure
.393d8f						get_mbr
.393d8f		c2 30		rep #$30	                REP #$30        ; set A&X long
.393d91		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.393d93		64 04		stz $0324	                STZ BIOS_LBA+2
.393d95		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.393d98		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393d9a		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393d9d		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393d9f		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.393da3		b0 07		bcs $393dac	                BCS chk_signature       ; If success, check the signature bytes
.393da5		e2 20		sep #$20	                SEP #$20        ; set A short
.393da7		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.393da9		82 3d 01	brl $393ee9	                BRL ret_failure
.393dac						chk_signature
.393dac		e2 20		sep #$20	                SEP #$20        ; set A short
.393dae		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.393db1		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.393db3		d0 07		bne $393dbc	                BNE not_mbr             ; No: signal we could find the MBR
.393db5		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.393db8		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.393dba		f0 05		beq $393dc1	                BEQ chk_part_type       ; Yes: we have an MBR
.393dbc		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.393dbe		82 28 01	brl $393ee9	                BRL ret_failure
.393dc1		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.393dc4		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.393dc6		f0 05		beq $393dcd	                BEQ get_LBA             ; Is FAT32 with LBA?
.393dc8		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.393dca		82 1c 01	brl $393ee9	                BRL ret_failure
.393dcd		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.393dd0		c2 20		rep #$20	                REP #$20        ; set A long
.393dd2		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.393dd5		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.393dd8		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.393ddb		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.393dde		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.393de1		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.393de4		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.393de7		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.393dea		e2 20		sep #$20	                SEP #$20        ; set A short
.393dec		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.393dee		8d 00 a0	sta $38a000	                STA DEVICE
.393df1		a9 00		lda #$00	                LDA #0
.393df3		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.393df6		c2 20		rep #$20	                REP #$20        ; set A long
.393df8		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.393dfb		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393dfd		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393e00		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393e02		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.393e05		85 02		sta $0322	                STA BIOS_LBA
.393e07		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.393e0a		85 04		sta $0324	                STA BIOS_LBA+2
.393e0c		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.393e10		b0 1c		bcs $393e2e	                BCS get_first_sec       ; Got it? Start parsing it
.393e12		e2 20		sep #$20	                SEP #$20        ; set A short
.393e14		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.393e16		82 d0 00	brl $393ee9	                BRL ret_failure
.393e19						chk_bpb_sig
.393e19		e2 20		sep #$20	                SEP #$20        ; set A short
.393e1b		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.393e1e		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.393e20		d0 07		bne $393e29	                BNE not_bpb             ; No: signal we could find the volume ID
.393e22		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.393e25		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.393e27		f0 05		beq $393e2e	                BEQ get_first_sec       ; Yes: we have an volume ID
.393e29		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.393e2b		82 bb 00	brl $393ee9	                BRL ret_failure
.393e2e						get_first_sec
.393e2e		c2 20		rep #$20	                REP #$20        ; set A long
.393e30		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.393e33		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.393e36		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.393e39		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.393e3c		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.393e3f		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.393e42		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.393e43		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.393e46		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.393e49		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.393e4c		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.393e4f		69 00 00	adc #$0000	                ADC #0
.393e52		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.393e55		e2 20		sep #$20	                SEP #$20        ; set A short
.393e57		a2 00 00	ldx #$0000	                LDX #0
.393e5a		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.393e5e		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.393e62		e8		inx		                INX
.393e63		e0 04 00	cpx #$0004	                CPX #4
.393e66		d0 f2		bne $393e5a	                BNE cpy_secperfat
.393e68		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.393e6b		0a		asl a		                ASL A
.393e6c		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.393e6f		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.393e72		2a		rol a		                ROL A
.393e73		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.393e76		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.393e79		2a		rol a		                ROL A
.393e7a		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.393e7d		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.393e80		2a		rol a		                ROL A
.393e81		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.393e84		18		clc		                CLC
.393e85		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.393e88		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.393e8b		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.393e8e		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.393e91		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.393e94		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.393e97		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.393e9a		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.393e9d		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.393ea0		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.393ea3		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.393ea6		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.393ea9		e2 20		sep #$20	                SEP #$20        ; set A short
.393eab		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.393eae		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.393eb1		18		clc		                CLC
.393eb2		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.393eb5		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.393eb8		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.393ebb		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.393ebe		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.393ec1		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.393ec4		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.393ec7		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.393eca		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.393ecd		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.393ed0		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.393ed3		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.393ed6		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.393ed8		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.393edb		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.393edd		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.393ee0						ret_success
.393ee0		e2 20		sep #$20	                SEP #$20        ; set A short
.393ee2		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.393ee4		28		plp		                PLP
.393ee5		2b		pld		                PLD
.393ee6		ab		plb		                PLB
.393ee7		38		sec		                SEC
.393ee8		6b		rtl		                RTL
.393ee9						ret_failure
.393ee9		e2 20		sep #$20	                SEP #$20        ; set A short
.393eeb		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.393eed		28		plp		                PLP
.393eee		2b		pld		                PLD
.393eef		ab		plb		                PLB
.393ef0		18		clc		                CLC
.393ef1		6b		rtl		                RTL
.393ef2						DOS_TESTBOOT
.393ef2		8b		phb		                PHB
.393ef3		0b		phd		                PHD
.393ef4		da		phx		                PHX
.393ef5		08		php		                PHP
.393ef6		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393ef9		ab		plb		                PLB
.393efa		ab		plb		                PLB
.393efb		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393efe		2b		pld		                PLD
.393eff		c2 10		rep #$10	                REP #$10        ; set X long
.393f01						chk_dev
.393f01		e2 20		sep #$20	                SEP #$20        ; set A short
.393f03		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.393f05		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.393f07		f0 24		beq $393f2d	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.393f09		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f0b		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.393f0e		85 02		sta $0322	                STA @b BIOS_LBA
.393f10		85 04		sta $0324	                STA @b BIOS_LBA+2
.393f12		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.393f15		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.393f17		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393f1a		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.393f1c		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.393f20		b0 03		bcs $393f25	                BCS chk_mbr_brl
.393f22		82 47 00	brl $393f6c	                BRL done                    ; If failed... just return
.393f25						chk_mbr_brl
.393f25		e2 20		sep #$20	                SEP #$20        ; set A short
.393f27		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.393f2b		80 04		bra $393f31	                BRA chk_brl
.393f2d		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.393f31		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.393f33		f0 06		beq $393f3b	                BEQ chk_magic               ; Yes: check for the magic text
.393f35		c9 82		cmp #$82	                CMP #$82
.393f37		f0 02		beq $393f3b	                BEQ chk_magic
.393f39		80 31		bra $393f6c	                BRA done                    ; No: just return
.393f3b		a2 00 00	ldx #$0000	chk_magic       LDX #0
.393f3e		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.393f42		df 71 3f 39	cmp $393f71,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.393f46		d0 24		bne $393f6c	                BNE done                    ; If it's not equal, just return
.393f48		e8		inx		                INX                         ; Otherwise, check the next one
.393f49		e0 08 00	cpx #$0008	                CPX #8
.393f4c		d0 f0		bne $393f3e	                BNE magic_loop              ; Until we've checked all 8 bytes
.393f4e		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f50		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.393f53		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.393f56		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.393f59		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.393f5c		e2 20		sep #$20	                SEP #$20        ; set A short
.393f5e		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.393f60		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.393f62		f0 04		beq $393f68	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.393f64		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.393f68		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.393f6c		28		plp		done            PLP
.393f6d		2b		pld		                PLD
.393f6e		ab		plb		                PLB
.393f6f		fa		plx		                PLX
.393f70		6b		rtl		                RTL
>393f71		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.393f79						DOS_CALC_LBA
.393f79		8b		phb		                PHB
.393f7a		0b		phd		                PHD
.393f7b		08		php		                PHP
.393f7c		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.393f7f		ab		plb		                PLB
.393f80		ab		plb		                PLB
.393f81		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393f84		2b		pld		                PLD
.393f85		c2 20		rep #$20	                REP #$20        ; set A long
.393f87		38		sec		                SEC
.393f88		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.393f8a		e9 02 00	sbc #$0002	                SBC #2
.393f8d		85 28		sta $0348	                STA DOS_TEMP
.393f8f		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.393f91		e9 00 00	sbc #$0000	                SBC #0
.393f94		85 2a		sta $034a	                STA DOS_TEMP+2
.393f96		e2 10		sep #$10	                SEP #$10        ; set X short
.393f98		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.393f9b		e0 01		cpx #$01	mult_loop       CPX #1
.393f9d		f0 07		beq $393fa6	                BEQ add_offset
.393f9f		06 28		asl $0348	                ASL DOS_TEMP
.393fa1		26 28		rol $0348	                ROL DOS_TEMP
.393fa3		ca		dex		                DEX
.393fa4		80 f5		bra $393f9b	                BRA mult_loop
.393fa6		18		clc		add_offset      CLC
.393fa7		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.393fa9		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.393fac		85 02		sta $0322	                STA BIOS_LBA
.393fae		a5 2a		lda $034a	                LDA DOS_TEMP+2
.393fb0		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.393fb3		85 04		sta $0324	                STA BIOS_LBA+2
.393fb5		28		plp		                PLP
.393fb6		2b		pld		                PLD
.393fb7		ab		plb		                PLB
.393fb8		6b		rtl		                RTL
.393fb9						DOS_GETCLUSTER
.393fb9		8b		phb		                PHB
.393fba		0b		phd		                PHD
.393fbb		08		php		                PHP
.393fbc		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393fbf		ab		plb		                PLB
.393fc0		ab		plb		                PLB
.393fc1		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393fc4		2b		pld		                PLD
.393fc5		c2 20		rep #$20	                REP #$20        ; set A long
.393fc7		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.393fc9		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393fcb		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.393fcd		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393fcf		22 79 3f 39	jsl $393f79	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.393fd3		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.393fd7		90 09		bcc $393fe2	                BCC ret_failure
.393fd9						ret_success
.393fd9		e2 20		sep #$20	                SEP #$20        ; set A short
.393fdb		64 0e		stz $032e	                STZ DOS_STATUS
.393fdd		28		plp		                PLP
.393fde		2b		pld		                PLD
.393fdf		ab		plb		                PLB
.393fe0		38		sec		                SEC
.393fe1		6b		rtl		                RTL
.393fe2						ret_failure
.393fe2		e2 20		sep #$20	                SEP #$20        ; set A short
.393fe4		85 0e		sta $032e	                STA DOS_STATUS
.393fe6		28		plp		                PLP
.393fe7		2b		pld		                PLD
.393fe8		ab		plb		                PLB
.393fe9		18		clc		                CLC
.393fea		6b		rtl		                RTL
.393feb						DOS_PUTCLUSTER
.393feb		8b		phb		                PHB
.393fec		0b		phd		                PHD
.393fed		08		php		                PHP
.393fee		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.393ff1		ab		plb		                PLB
.393ff2		ab		plb		                PLB
.393ff3		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.393ff6		2b		pld		                PLD
.393ff7		c2 20		rep #$20	                REP #$20        ; set A long
.393ff9		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.393ffb		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393ffd		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.393fff		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394001		22 79 3f 39	jsl $393f79	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394005		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.394009		90 09		bcc $394014	                BCC ret_failure
.39400b						ret_success
.39400b		e2 20		sep #$20	                SEP #$20        ; set A short
.39400d		64 0e		stz $032e	                STZ DOS_STATUS
.39400f		28		plp		                PLP
.394010		2b		pld		                PLD
.394011		ab		plb		                PLB
.394012		38		sec		                SEC
.394013		6b		rtl		                RTL
.394014						ret_failure
.394014		e2 20		sep #$20	                SEP #$20        ; set A short
.394016		85 0e		sta $032e	                STA DOS_STATUS
.394018		28		plp		                PLP
.394019		2b		pld		                PLD
.39401a		ab		plb		                PLB
.39401b		18		clc		                CLC
.39401c		6b		rtl		                RTL
>39401d		40 46 00			DOS_FDC_NAME    .null "@F"
.394020						DOS_FDC_DESC
>394020		1d 40 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>394024		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>394025		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>394029		40 53 00			DOS_SDC_NAME    .null "@S"
.39402c						DOS_SDC_DESC
>39402c		29 40 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>394030		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>394031		20 40 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>394035		40 48 00			DOS_HDC_NAME    .null "@H"
.394038						DOS_HD_DESC
>394038		35 40 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>39403c		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>39403d		2c 40 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.394041						DOS_PARSE_DEV
.394041		8b		phb		                PHB
.394042		0b		phd		                PHD
.394043		08		php		                PHP
.394044		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394047		ab		plb		                PLB
.394048		ab		plb		                PLB
.394049		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39404c		2b		pld		                PLD
.39404d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39404f		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.394053		85 28		sta $0348	                STA DOS_TEMP
.394055		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.394059		85 2a		sta $034a	                STA DOS_TEMP+2
.39405b		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.39405e		85 48		sta $0368	                STA DOS_STR2_PTR
.394060		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.394063		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.394065		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394068		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39406a		85 44		sta $0364	                STA DOS_STR1_PTR
.39406c		c8		iny		                INY
.39406d		c8		iny		                INY
.39406e		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394070		85 46		sta $0366	                STA DOS_STR1_PTR+2
.394072		e2 20		sep #$20	                SEP #$20        ; set A short
.394074		a0 00 00	ldy #$0000	                LDY #0
.394077		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394079		f0 24		beq $39409f	                BEQ found                   ; If it's NULL, we found a match
.39407b		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.39407d		d0 03		bne $394082	                BNE next_device             ; If no match, try to load the next device
.39407f		c8		iny		                INY                         ; Go to the next character
.394080		80 f5		bra $394077	                BRA cmp_loop
.394082						next_device
.394082		c2 20		rep #$20	                REP #$20        ; set A long
.394084		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.394087		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394089		48		pha		                PHA
.39408a		c8		iny		                INY
.39408b		c8		iny		                INY
.39408c		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39408e		85 2a		sta $034a	                STA DOS_TEMP+2
.394090		68		pla		                PLA
.394091		85 28		sta $0348	                STA DOS_TEMP
.394093		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.394095		d0 ce		bne $394065	                BNE dev_loop                ; No: check this device
.394097		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394099		d0 ca		bne $394065	                BNE dev_loop
.39409b		28		plp		done            PLP                         ; Otherwise, return having not found a match
.39409c		2b		pld		                PLD
.39409d		ab		plb		                PLB
.39409e		6b		rtl		                RTL
.39409f		22 b0 40 39	jsl $3940b0	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.3940a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3940a5		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.3940a8		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3940aa		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3940ae		80 eb		bra $39409b	                BRA done
.3940b0						DOS_ADJUSTPATH
.3940b0		da		phx		                PHX
.3940b1		5a		phy		                PHY
.3940b2		8b		phb		                PHB
.3940b3		0b		phd		                PHD
.3940b4		08		php		                PHP
.3940b5		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3940b8		ab		plb		                PLB
.3940b9		ab		plb		                PLB
.3940ba		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3940bd		2b		pld		                PLD
.3940be		c2 30		rep #$30	                REP #$30        ; set A&X long
.3940c0		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.3940c2		98		tya		                TYA                             ; Compute the address of the first source byte
.3940c3		18		clc		                CLC
.3940c4		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.3940c7		aa		tax		                TAX
.3940c8		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.3940cb		a8		tay		                TAY
.3940cc		38		sec		                SEC                             ; Compute the number of bytes to copy
.3940cd		a9 00 01	lda #$0100	                LDA #256
.3940d0		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.3940d2		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.3940d5		28		plp		                PLP
.3940d6		2b		pld		                PLD
.3940d7		ab		plb		                PLB
.3940d8		7a		ply		                PLY
.3940d9		fa		plx		                PLX
.3940da		6b		rtl		                RTL
.3940db						DOS_PARSE_PATH
.3940db		8b		phb		                PHB
.3940dc		0b		phd		                PHD
.3940dd		08		php		                PHP
.3940de		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3940e1		ab		plb		                PLB
.3940e2		ab		plb		                PLB
.3940e3		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3940e6		2b		pld		                PLD
.3940e7		c2 10		rep #$10	                REP #$10        ; set X long
.3940e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3940eb		a2 00 00	ldx #$0000	                LDX #0
.3940ee		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.3940f0		f0 1b		beq $39410d	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.3940f2		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.3940f4		b0 05		bcs $3940fb	                BGE check_case          ; No: check the case
.3940f6		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.3940f8		82 64 00	brl $39415f	                BRL ret_failure
.3940fb		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.3940fd		90 08		bcc $394107	                BLT next_char
.3940ff		c9 7b		cmp #$7b	                CMP #'z'+1
.394101		b0 04		bcs $394107	                BGE next_char
.394103		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.394105		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394107		e8		inx		next_char       INX                     ; Move to the next character
.394108		e0 00 01	cpx #$0100	                CPX #$100
.39410b		d0 e1		bne $3940ee	                BNE upcase_loop
.39410d		22 41 40 39	jsl $394041	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.394111		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.394113		c9 3a		cmp #$3a	                CMP #':'
.394115		d0 07		bne $39411e	                BNE clr_name            ; If not colon, treat it as a file name
.394117		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.39411a		22 b0 40 39	jsl $3940b0	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.39411e		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394121		a9 20		lda #$20	                LDA #' '
.394123		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.394126		c8		iny		                INY
.394127		c0 0b 00	cpy #$000b	                CPY #11
.39412a		d0 f7		bne $394123	                BNE clr_loop
.39412c		a2 00 00	ldx #$0000	                LDX #0
.39412f		a0 00 00	ldy #$0000	                LDY #0
.394132		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394134		f0 20		beq $394156	                BEQ ret_success         ; If NULL: we've finished parsing the path
.394136		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.394138		f0 0a		beq $394144	                BEQ cpy_ext             ; And move to the extension
.39413a		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.39413d		e8		inx		                INX
.39413e		c8		iny		                INY                     ; Move to the next character
.39413f		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394142		d0 ee		bne $394132	                BNE cpy_name_loop       ; No: process this one
.394144		e8		inx		cpy_ext         INX                     ; Skip the dot
.394145		a0 08 00	ldy #$0008	                LDY #8
.394148		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.39414a		f0 0a		beq $394156	                BEQ ret_success         ; If it's NULL, we've finished
.39414c		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.39414f		e8		inx		                INX
.394150		c8		iny		                INY                     ; Move to the next character
.394151		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394154		d0 f2		bne $394148	                BNE cpy_ext_loop        ; No: process this one
.394156						ret_success
.394156		e2 20		sep #$20	                SEP #$20        ; set A short
.394158		64 0e		stz $032e	                STZ DOS_STATUS
.39415a		28		plp		                PLP
.39415b		2b		pld		                PLD
.39415c		ab		plb		                PLB
.39415d		38		sec		                SEC
.39415e		6b		rtl		                RTL
.39415f						ret_failure
.39415f		e2 20		sep #$20	                SEP #$20        ; set A short
.394161		85 0e		sta $032e	                STA DOS_STATUS
.394163		28		plp		                PLP
.394164		2b		pld		                PLD
.394165		ab		plb		                PLB
.394166		18		clc		                CLC
.394167		6b		rtl		                RTL
.394168						DOS_FINDFILE
.394168		8b		phb		                PHB
.394169		0b		phd		                PHD
.39416a		08		php		                PHP
.39416b		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39416e		ab		plb		                PLB
.39416f		ab		plb		                PLB
.394170		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394173		2b		pld		                PLD
.394174		c2 30		rep #$30	                REP #$30        ; set A&X long
.394176		22 db 40 39	jsl $3940db	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.39417a		b0 05		bcs $394181	                BCS mount                       ; If success: try to open the directory
.39417c		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.39417d		2b		pld		                PLD
.39417e		ab		plb		                PLB
.39417f		18		clc		                CLC
.394180		6b		rtl		                RTL
.394181		22 42 3d 39	jsl $393d42	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.394185		b0 07		bcs $39418e	                BCS get_directory
.394187		e2 20		sep #$20	                SEP #$20        ; set A short
.394189		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.39418b		82 56 00	brl $3941e4	                BRL ret_failure
.39418e						get_directory
.39418e		c2 20		rep #$20	                REP #$20        ; set A long
.394190		22 48 3a 39	jsl $393a48	                JSL DOS_DIROPEN                 ; Get the directory
.394194		b0 07		bcs $39419d	                BCS scan_entries                ; If success: start scanning the directory entries
.394196		e2 20		sep #$20	                SEP #$20        ; set A short
.394198		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.39419a		82 47 00	brl $3941e4	                BRL ret_failure
.39419d		22 be 3a 39	jsl $393abe	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3941a1						scan_loop
.3941a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3941a3		a0 00 00	ldy #$0000	                LDY #0
.3941a6		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.3941a8		d0 05		bne $3941af	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.3941aa		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.3941ac		82 35 00	brl $3941e4	                BRL ret_failure
.3941af		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.3941b1		f0 26		beq $3941d9	                BEQ next_entry                  ; Go to the next entry
.3941b3		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.3941b6		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3941b8		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3941ba		d0 1d		bne $3941d9	                BNE next_entry                  ; Yes: skip it!
.3941bc		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3941be		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3941c0		f0 17		beq $3941d9	                BEQ next_entry                  ; Yes: skip it!
.3941c2		a2 00 00	ldx #$0000	                LDX #0
.3941c5		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.3941c8		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.3941ca		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.3941ce		d0 09		bne $3941d9	                BNE next_entry                  ; If not equal: try the next entry
.3941d0		c8		iny		                INY                             ; Advance to the next character
.3941d1		e8		inx		                INX
.3941d2		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.3941d5		f0 16		beq $3941ed	                BEQ match                       ; Yes: we have a match!
.3941d7		80 ef		bra $3941c8	                BRA scan_cmp_loop               ; No: keep checking
.3941d9		22 d3 3a 39	jsl $393ad3	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.3941dd		90 05		bcc $3941e4	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.3941df		82 bf ff	brl $3941a1	                BRL scan_loop                   ; If found: keep scanning
.3941e2		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.3941e4						ret_failure
.3941e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3941e6		85 0e		sta $032e	                STA DOS_STATUS
.3941e8		28		plp		                PLP
.3941e9		2b		pld		                PLD
.3941ea		ab		plb		                PLB
.3941eb		18		clc		                CLC
.3941ec		6b		rtl		                RTL
.3941ed						match
.3941ed		c2 20		rep #$20	                REP #$20        ; set A long
.3941ef		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.3941f2		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3941f4		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.3941f6		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3941f9		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3941fb		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3941fd						ret_success
.3941fd		e2 20		sep #$20	                SEP #$20        ; set A short
.3941ff		64 0e		stz $032e	                STZ DOS_STATUS
.394201		28		plp		                PLP
.394202		2b		pld		                PLD
.394203		ab		plb		                PLB
.394204		38		sec		                SEC
.394205		6b		rtl		                RTL
.394206						DOS_READFILE
.394206		8b		phb		                PHB
.394207		0b		phd		                PHD
.394208		08		php		                PHP
.394209		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39420c		ab		plb		                PLB
.39420d		ab		plb		                PLB
.39420e		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394211		2b		pld		                PLD
.394212		c2 30		rep #$30	                REP #$30        ; set A&X long
.394214		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394216		48		pha		                PHA
.394217		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394219		48		pha		                PHA
.39421a		22 68 41 39	jsl $394168	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.39421e		68		pla		                PLA
.39421f		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394221		68		pla		                PLA
.394222		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394224		90 0f		bcc $394235	                BCC pass_failure                    ; If found: try to load the cluster
.394226		22 b9 3f 39	jsl $393fb9	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.39422a		90 09		bcc $394235	                BCC pass_failure                    ; If there's an error... pass it up the chain
.39422c						ret_success
.39422c		e2 20		sep #$20	                SEP #$20        ; set A short
.39422e		64 0e		stz $032e	                STZ DOS_STATUS
.394230		28		plp		                PLP
.394231		2b		pld		                PLD
.394232		ab		plb		                PLB
.394233		38		sec		                SEC
.394234		6b		rtl		                RTL
.394235		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.394236		2b		pld		                PLD
.394237		ab		plb		                PLB
.394238		18		clc		                CLC
.394239		6b		rtl		                RTL
.39423a						ENTRYFORCLUS12
.39423a		8b		phb		                PHB
.39423b		0b		phd		                PHD
.39423c		08		php		                PHP
.39423d		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.394240		ab		plb		                PLB
.394241		ab		plb		                PLB
.394242		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394245		2b		pld		                PLD
.394246		c2 30		rep #$30	                REP #$30        ; set A&X long
.394248		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.39424a		0a		asl a		                ASL A
.39424b		85 28		sta $0348	                STA DOS_TEMP
.39424d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39424f		2a		rol a		                ROL A
.394250		85 2a		sta $034a	                STA DOS_TEMP+2
.394252		18		clc		                CLC
.394253		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394255		65 28		adc $0348	                ADC DOS_TEMP
.394257		85 28		sta $0348	                STA DOS_TEMP
.394259		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39425b		65 2a		adc $034a	                ADC DOS_TEMP+2
.39425d		85 2a		sta $034a	                STA DOS_TEMP+2
.39425f		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.394261		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.394263		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.394265		29 ff 03	and #$03ff	                AND #$003FF
.394268		aa		tax		                TAX
.394269		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39426b		66 28		ror $0348	                ROR DOS_TEMP
.39426d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39426f		66 28		ror $0348	                ROR DOS_TEMP
.394271		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394273		66 28		ror $0348	                ROR DOS_TEMP
.394275		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394277		66 28		ror $0348	                ROR DOS_TEMP
.394279		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39427b		66 28		ror $0348	                ROR DOS_TEMP
.39427d		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39427f		66 28		ror $0348	                ROR DOS_TEMP
.394281		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394283		66 28		ror $0348	                ROR DOS_TEMP
.394285		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.394287		66 28		ror $0348	                ROR DOS_TEMP
.394289		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.39428b		66 28		ror $0348	                ROR DOS_TEMP
.39428d		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.39428e		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.394292		65 28		adc $0348	                ADC DOS_TEMP
.394294		85 24		sta $0344	                STA DOS_FAT_LBA
.394296		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.39429a		65 2a		adc $034a	                ADC DOS_TEMP+2
.39429c		85 26		sta $0346	                STA DOS_FAT_LBA+2
.39429e		28		plp		                PLP
.39429f		2b		pld		                PLD
.3942a0		ab		plb		                PLB
.3942a1		6b		rtl		                RTL
.3942a2						FATFORCLUSTER12
.3942a2		8b		phb		                PHB
.3942a3		0b		phd		                PHD
.3942a4		08		php		                PHP
.3942a5		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3942a8		ab		plb		                PLB
.3942a9		ab		plb		                PLB
.3942aa		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3942ad		2b		pld		                PLD
.3942ae		c2 30		rep #$30	                REP #$30        ; set A&X long
.3942b0		a2 00 00	ldx #$0000	                LDX #0
.3942b3		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.3942b6		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.3942ba		e8		inx		                INX
.3942bb		e8		inx		                INX
.3942bc		e0 00 04	cpx #$0400	                CPX #1024
.3942bf		d0 f5		bne $3942b6	                BNE clr_loop
.3942c1		22 3a 42 39	jsl $39423a	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.3942c5		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.3942c7		85 02		sta $0322	                STA BIOS_LBA
.3942c9		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.3942cb		85 04		sta $0324	                STA BIOS_LBA+2
.3942cd		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.3942d0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942d2		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3942d5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942d7		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3942db		90 17		bcc $3942f4	                BCC error
.3942dd		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.3942df		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.3942e2		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3942e4		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3942e7		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3942e9		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.3942ed		90 05		bcc $3942f4	                BCC error
.3942ef		28		plp		                PLP
.3942f0		2b		pld		                PLD
.3942f1		ab		plb		                PLB
.3942f2		38		sec		                SEC
.3942f3		6b		rtl		                RTL
.3942f4						error
.3942f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3942f6		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3942f8		85 0e		sta $032e	                STA DOS_STATUS
.3942fa		28		plp		                PLP
.3942fb		2b		pld		                PLD
.3942fc		ab		plb		                PLB
.3942fd		18		clc		                CLC
.3942fe		6b		rtl		                RTL
.3942ff						FATFORCLUSTER32
.3942ff		8b		phb		                PHB
.394300		0b		phd		                PHD
.394301		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.394304		ab		plb		                PLB
.394305		ab		plb		                PLB
.394306		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394309		2b		pld		                PLD
.39430a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39430c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.39430e		85 24		sta $0344	                STA DOS_FAT_LBA
.394310		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394312		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394314		a2 07 00	ldx #$0007	                LDX #7
.394317		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394319		66 24		ror $0344	                ROR DOS_FAT_LBA
.39431b		ca		dex		                DEX
.39431c		d0 f9		bne $394317	                BNE div_loop
.39431e		18		clc		                CLC
.39431f		a5 24		lda $0344	                LDA DOS_FAT_LBA
.394321		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.394325		85 24		sta $0344	                STA DOS_FAT_LBA
.394327		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394329		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.39432d		85 26		sta $0346	                STA DOS_FAT_LBA+2
.39432f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.394331		85 02		sta $0322	                STA BIOS_LBA
.394333		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394335		85 04		sta $0324	                STA BIOS_LBA+2
.394337		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.39433a		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39433c		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.39433f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394341		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.394345		b0 06		bcs $39434d	                BCS find_entry
.394347		e2 20		sep #$20	                SEP #$20        ; set A short
.394349		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39434b		80 0e		bra $39435b	                BRA ret_failure
.39434d						find_entry
.39434d		c2 20		rep #$20	                REP #$20        ; set A long
.39434f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394351		0a		asl a		                ASL A
.394352		0a		asl a		                ASL A                           ; * 4
.394353		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.394356		aa		tax		                TAX                             ; X should be the offset within the sector
.394357		2b		pld		ret_success     PLD
.394358		ab		plb		                PLB
.394359		38		sec		                SEC                             ; return success
.39435a		6b		rtl		                RTL
.39435b		2b		pld		ret_failure     PLD
.39435c		ab		plb		                PLB
.39435d		18		clc		                CLC                             ; Return failure
.39435e		6b		rtl		                RTL
.39435f						NEXTCLUSTER
.39435f		08		php		                PHP
.394360		e2 20		sep #$20	                SEP #$20        ; set A short
.394362		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394366		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394368		d0 08		bne $394372	                BNE fat32                       ; No: assume it's FAT32
.39436a		22 80 43 39	jsl $394380	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.39436e		90 0d		bcc $39437d	                BCC pass_failure                ; If there was an error, pass it up the chain
.394370		80 06		bra $394378	                BRA ret_success
.394372		22 dd 43 39	jsl $3943dd	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.394376		90 05		bcc $39437d	                BCC pass_failure                ; If there was an error, pass it up the chain
.394378		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.39437a		28		plp		                PLP
.39437b		38		sec		                SEC
.39437c		6b		rtl		                RTL
.39437d		28		plp		pass_failure    PLP
.39437e		18		clc		                CLC
.39437f		6b		rtl		                RTL
.394380						NEXTCLUSTER12
.394380		8b		phb		                    PHB
.394381		0b		phd		                    PHD
.394382		08		php		                    PHP
.394383		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.394386		ab		plb		                PLB
.394387		ab		plb		                PLB
.394388		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39438b		2b		pld		                PLD
.39438c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39438e		22 a2 42 39	jsl $3942a2	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394392		b0 03		bcs $394397	                    BCS chk_clus_id
.394394		82 41 00	brl $3943d8	                    BRL pass_failure
.394397		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.394399		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.39439c		d0 0d		bne $3943ab	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.39439e						is_even
.39439e		c2 20		rep #$20	                REP #$20        ; set A long
.3943a0		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.3943a4		29 ff 0f	and #$0fff	                    AND #$0FFF
.3943a7		85 28		sta $0348	                    STA DOS_TEMP
.3943a9		80 0c		bra $3943b7	                    BRA check_id
.3943ab						is_odd
.3943ab		c2 20		rep #$20	                REP #$20        ; set A long
.3943ad		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.3943b1		4a		lsr a		                    LSR A
.3943b2		4a		lsr a		                    LSR A
.3943b3		4a		lsr a		                    LSR A
.3943b4		4a		lsr a		                    LSR A
.3943b5		85 28		sta $0348	                    STA DOS_TEMP
.3943b7						check_id
.3943b7		c2 20		rep #$20	                REP #$20        ; set A long
.3943b9		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.3943bb		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.3943be		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.3943c1		f0 0f		beq $3943d2	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.3943c3		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.3943c5		85 10		sta $0330	                    STA DOS_CLUS_ID
.3943c7		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.3943c9						ret_success
.3943c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3943cb		64 0e		stz $032e	                    STZ DOS_STATUS
.3943cd		28		plp		                    PLP
.3943ce		2b		pld		                    PLD
.3943cf		ab		plb		                    PLB
.3943d0		38		sec		                    SEC
.3943d1		6b		rtl		                    RTL
.3943d2						no_more
.3943d2		e2 20		sep #$20	                SEP #$20        ; set A short
.3943d4		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.3943d6		85 0e		sta $032e	                    STA DOS_STATUS
.3943d8		28		plp		pass_failure        PLP
.3943d9		2b		pld		                    PLD
.3943da		ab		plb		                    PLB
.3943db		18		clc		                    CLC
.3943dc		6b		rtl		                    RTL
.3943dd						NEXTCLUSTER32
.3943dd		8b		phb		                PHB
.3943de		0b		phd		                PHD
.3943df		08		php		                PHP
.3943e0		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3943e3		ab		plb		                PLB
.3943e4		ab		plb		                PLB
.3943e5		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3943e8		2b		pld		                PLD
.3943e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3943eb		22 ff 42 39	jsl $3942ff	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.3943ef		90 53		bcc $394444	                BCC ret_failure                 ; If it did not work, return the error
.3943f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3943f3		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.3943f7		85 28		sta $0348	                STA DOS_TEMP
.3943f9		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.3943fd		85 29		sta $0349	                STA DOS_TEMP+1
.3943ff		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394403		85 2a		sta $034a	                STA DOS_TEMP+2
.394405		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394409		85 2b		sta $034b	                STA DOS_TEMP+3
.39440b		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.39440d		c9 ff		cmp #$ff	                CMP #$FF
.39440f		d0 18		bne $394429	                BNE found_next
.394411		a5 29		lda $0349	                LDA DOS_TEMP+1
.394413		c9 ff		cmp #$ff	                CMP #$FF
.394415		d0 12		bne $394429	                BNE found_next
.394417		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394419		c9 ff		cmp #$ff	                CMP #$FF
.39441b		d0 0c		bne $394429	                BNE found_next
.39441d		a5 2b		lda $034b	                LDA DOS_TEMP+3
.39441f		c9 0f		cmp #$0f	                CMP #$0F
.394421		d0 06		bne $394429	                BNE found_next                  ; No: return this cluster as the next
.394423		e2 20		sep #$20	                SEP #$20        ; set A short
.394425		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.394427		80 1b		bra $394444	                BRA ret_failure
.394429						found_next
.394429		e2 20		sep #$20	                SEP #$20        ; set A short
.39442b		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.39442d		85 10		sta $0330	                STA DOS_CLUS_ID
.39442f		a5 29		lda $0349	                LDA DOS_TEMP+1
.394431		85 11		sta $0331	                STA DOS_CLUS_ID+1
.394433		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394435		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394437		a5 2b		lda $034b	                LDA DOS_TEMP+3
.394439		85 13		sta $0333	                STA DOS_CLUS_ID+3
.39443b						ret_success
.39443b		e2 20		sep #$20	                SEP #$20        ; set A short
.39443d		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.39443f		28		plp		                PLP
.394440		2b		pld		                PLD
.394441		ab		plb		                PLB
.394442		38		sec		                SEC
.394443		6b		rtl		                RTL
.394444						ret_failure
.394444		e2 20		sep #$20	                SEP #$20        ; set A short
.394446		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.394448		28		plp		                PLP
.394449		2b		pld		                PLD
.39444a		ab		plb		                PLB
.39444b		18		clc		                CLC
.39444c		6b		rtl		                RTL
.39444d						DOS_READNEXT
.39444d		08		php		                PHP
.39444e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394450		22 5f 43 39	jsl $39435f	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.394454		90 09		bcc $39445f	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.394456		22 b9 3f 39	jsl $393fb9	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.39445a		90 03		bcc $39445f	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.39445c		28		plp		ret_success     PLP
.39445d		38		sec		                SEC
.39445e		6b		rtl		                RTL
.39445f		28		plp		pass_failure    PLP
.394460		18		clc		                CLC
.394461		6b		rtl		                RTL
.394462						DOS_FREECLUS
.394462		08		php		                PHP
.394463		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394466		2b		pld		                PLD
.394467		e2 20		sep #$20	                SEP #$20        ; set A short
.394469		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.39446d		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39446f		d0 08		bne $394479	                BNE fat32                       ; No: assume it's FAT32
.394471		22 e2 44 39	jsl $3944e2	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.394475		90 0d		bcc $394484	                BCC pass_failure                ; If there was an error, pass it up the chain
.394477		80 06		bra $39447f	                BRA ret_success
.394479		22 af 45 39	jsl $3945af	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.39447d		90 05		bcc $394484	                BCC pass_failure                ; If there was an error, pass it up the chain
.39447f		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394481		28		plp		                PLP
.394482		38		sec		                SEC
.394483		6b		rtl		                RTL
.394484		28		plp		pass_failure    PLP
.394485		18		clc		                CLC
.394486		6b		rtl		                RTL
.394487						FDC_READ2FAT12
.394487		8b		phb		                    PHB
.394488		0b		phd		                    PHD
.394489		08		php		                    PHP
.39448a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39448d		ab		plb		                PLB
.39448e		ab		plb		                PLB
.39448f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394492		2b		pld		                PLD
.394493		c2 30		rep #$30	                REP #$30        ; set A&X long
.394495		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394498		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.39449a		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.39449d		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39449f		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.3944a1		85 02		sta $0322	                    STA BIOS_LBA
.3944a3		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.3944a5		85 04		sta $0324	                    STA BIOS_LBA+2
.3944a7		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.3944ab		b0 07		bcs $3944b4	                    BCS inc_sect2                   ; If success: start getting the second sector
.3944ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3944af		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.3944b1		82 1c 00	brl $3944d0	                    BRL ret_failure
.3944b4						inc_sect2
.3944b4		c2 20		rep #$20	                REP #$20        ; set A long
.3944b6		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.3944b8		d0 02		bne $3944bc	                    BNE inc_buff_ptr
.3944ba		e6 04		inc $0324	                    INC BIOS_LBA+2
.3944bc		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.3944bf		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.3944c1		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.3944c4		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.3944c6		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.3944ca		b0 0d		bcs $3944d9	                    BCS ret_success                 ; If success, return success
.3944cc		e2 20		sep #$20	                SEP #$20        ; set A short
.3944ce		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.3944d0						ret_failure
.3944d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3944d2		85 0e		sta $032e	                    STA DOS_STATUS
.3944d4		28		plp		                    PLP
.3944d5		2b		pld		                    PLD
.3944d6		ab		plb		                    PLB
.3944d7		18		clc		                    CLC
.3944d8		6b		rtl		                    RTL
.3944d9						ret_success
.3944d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3944db		64 0e		stz $032e	                    STZ DOS_STATUS
.3944dd		28		plp		                    PLP
.3944de		2b		pld		                    PLD
.3944df		ab		plb		                    PLB
.3944e0		38		sec		                    SEC
.3944e1		6b		rtl		                    RTL
.3944e2						DOS_FREECLUS12
.3944e2		da		phx		                PHX
.3944e3		8b		phb		                PHB
.3944e4		0b		phd		                PHD
.3944e5		08		php		                PHP
.3944e6		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3944e9		ab		plb		                PLB
.3944ea		ab		plb		                PLB
.3944eb		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3944ee		2b		pld		                PLD
.3944ef		c2 30		rep #$30	                REP #$30        ; set A&X long
.3944f1		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.3944f4		85 10		sta $0330	                STA DOS_CLUS_ID
.3944f6		a9 00 00	lda #$0000	                LDA #0
.3944f9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3944fb		22 3a 42 39	jsl $39423a	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.3944ff		22 87 44 39	jsl $394487	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.394503		b0 07		bcs $39450c	                BCS start_of_fat                ; If success, move X to the start of the FAT
.394505		e2 20		sep #$20	                SEP #$20        ; set A short
.394507		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394509		82 99 00	brl $3945a5	                BRL ret_failure
.39450c						start_of_fat
.39450c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39450e		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394510		89 01 00	bit #$0001	                BIT #1
.394513		d0 09		bne $39451e	                BNE is_odd
.394515		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.394519		29 ff 0f	and #$0fff	                AND #$0FFF
.39451c		80 08		bra $394526	                BRA chk_available
.39451e		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.394522		4a		lsr a		                LSR A
.394523		4a		lsr a		                LSR A
.394524		4a		lsr a		                LSR A
.394525		4a		lsr a		                LSR A
.394526						chk_available
.394526		85 28		sta $0348	                STA DOS_TEMP
.394528		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.39452b		f0 03		beq $394530	                BEQ chk_found
.39452d		82 39 00	brl $394569	                BRL next_cluster                ; No: advance to the next cluster
.394530		8a		txa		chk_found       TXA
.394531		85 2a		sta $034a	                STA DOS_TEMP+2
.394533		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.394535		89 01 00	bit #$0001	                BIT #1
.394538		d0 0d		bne $394547	                BNE is_odd2
.39453a						is_even2
.39453a		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.39453e		09 ff 0f	ora #$0fff	                ORA #$0FFF
.394541		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394545		80 0b		bra $394552	                BRA write_fat
.394547						is_odd2
.394547		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.39454b		09 f0 ff	ora #$fff0	                ORA #$FFF0
.39454e		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394552		22 6e 46 39	jsl $39466e	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.394556		b0 07		bcs $39455f	                BCS ret_success                 ; If success: return success
.394558		e2 20		sep #$20	                SEP #$20        ; set A short
.39455a		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.39455c		82 46 00	brl $3945a5	                BRL ret_failure
.39455f						ret_success
.39455f		e2 20		sep #$20	                SEP #$20        ; set A short
.394561		64 0e		stz $032e	                STZ DOS_STATUS
.394563		28		plp		                PLP
.394564		2b		pld		                PLD
.394565		ab		plb		                PLB
.394566		fa		plx		                PLX
.394567		38		sec		                SEC
.394568		6b		rtl		                RTL
.394569						next_cluster
.394569		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.39456b		d0 02		bne $39456f	                BNE calc_entry
.39456d		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.39456f		22 3a 42 39	jsl $39423a	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.394573		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394576		f0 03		beq $39457b	                BEQ chk_end_of_fat
.394578		82 93 ff	brl $39450e	                BRL chk_cluster                 ; No: go back and check it too
.39457b						chk_end_of_fat
.39457b		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.39457d		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.394581		d0 0f		bne $394592	                BNE next_2
.394583		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394585		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394589		d0 07		bne $394592	                BNE next_2                      ; No: get the next to sectors
.39458b		e2 20		sep #$20	                SEP #$20        ; set A short
.39458d		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.39458f		82 13 00	brl $3945a5	                BRL ret_failure
.394592						next_2
.394592		22 87 44 39	jsl $394487	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394596		90 06		bcc $39459e	                BCC fat_fail                    ; If failed: return error
.394598		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.39459b		82 70 ff	brl $39450e	                BRL chk_cluster                 ; And start checking from there
.39459e						fat_fail
.39459e		e2 20		sep #$20	                SEP #$20        ; set A short
.3945a0		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3945a2		82 00 00	brl $3945a5	                BRL ret_failure
.3945a5						ret_failure
.3945a5		e2 20		sep #$20	                SEP #$20        ; set A short
.3945a7		85 0e		sta $032e	                STA DOS_STATUS
.3945a9		28		plp		                PLP
.3945aa		2b		pld		                PLD
.3945ab		ab		plb		                PLB
.3945ac		fa		plx		                PLX
.3945ad		18		clc		                CLC
.3945ae		6b		rtl		                RTL
.3945af						DOS_FREECLUS32
.3945af		8b		phb		                PHB
.3945b0		0b		phd		                PHD
.3945b1		08		php		                PHP
.3945b2		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3945b5		ab		plb		                PLB
.3945b6		ab		plb		                PLB
.3945b7		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3945ba		2b		pld		                PLD
.3945bb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3945bd		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.3945c0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945c2		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3945c5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945c7		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.3945cb		85 02		sta $0322	                STA BIOS_LBA
.3945cd		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3945d1		85 04		sta $0324	                STA BIOS_LBA+2
.3945d3		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.3945d7		b0 07		bcs $3945e0	                BCS initial_entry               ; If OK: set the initial entry to check
.3945d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3945db		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.3945dd		82 6b 00	brl $39464b	                BRL ret_failure
.3945e0						initial_entry
.3945e0		c2 20		rep #$20	                REP #$20        ; set A long
.3945e2		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.3945e5		85 10		sta $0330	                STA DOS_CLUS_ID
.3945e7		a9 00 00	lda #$0000	                LDA #0
.3945ea		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3945ec		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.3945ef		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.3945f3		d0 06		bne $3945fb	                BNE next_entry                  ; No: move to the next entry
.3945f5		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.3945f9		f0 36		beq $394631	                BEQ found_free                  ; Yes: go to allocate and return it
.3945fb		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.3945fd		d0 02		bne $394601	                BNE inc_ptr
.3945ff		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.394601		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.394602		e8		inx		                INX
.394603		e8		inx		                INX
.394604		e8		inx		                INX
.394605		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.394608		90 e5		bcc $3945ef	                BLT chk_entry                   ; No: check this entry
.39460a		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.39460c		d0 18		bne $394626	                BNE get_block
.39460e		e6 04		inc $0324	                INC BIOS_LBA+2
.394610		a5 04		lda $0324	                LDA BIOS_LBA+2
.394612		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394616		90 0e		bcc $394626	                BLT get_block
.394618		a5 02		lda $0322	                LDA BIOS_LBA
.39461a		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.39461e		90 06		bcc $394626	                BLT get_block
.394620		e2 20		sep #$20	                SEP #$20        ; set A short
.394622		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.394624		80 25		bra $39464b	                BRA ret_failure
.394626		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.39462a		90 1b		bcc $394647	                BCC ret_fat_error               ; If error: throw a FAT error
.39462c		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.39462f		80 be		bra $3945ef	                BRA chk_entry                   ; Check this entry
.394631						found_free
.394631		c2 20		rep #$20	                REP #$20        ; set A long
.394633		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.394636		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.39463a		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.39463d		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.394641		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.394645		b0 0d		bcs $394654	                BCS ret_success                 ; If OK: return success
.394647						ret_fat_error
.394647		e2 20		sep #$20	                SEP #$20        ; set A short
.394649		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.39464b						ret_failure
.39464b		e2 20		sep #$20	                SEP #$20        ; set A short
.39464d		85 0e		sta $032e	                STA DOS_STATUS
.39464f		28		plp		                PLP
.394650		2b		pld		                PLD
.394651		ab		plb		                PLB
.394652		18		clc		                CLC
.394653		6b		rtl		                RTL
.394654						ret_success
.394654		e2 20		sep #$20	                SEP #$20        ; set A short
.394656		64 0e		stz $032e	                STZ DOS_STATUS
.394658		28		plp		                PLP
.394659		2b		pld		                PLD
.39465a		ab		plb		                PLB
.39465b		38		sec		                SEC
.39465c		6b		rtl		                RTL
.39465d						DELCLUSTER
.39465d		e2 20		sep #$20	                SEP #$20        ; set A short
.39465f		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394663		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394665		d0 04		bne $39466b	                BNE fat32                       ; No: assume it's FAT32
.394667		5c aa 46 39	jmp $3946aa	fat12           JML DELCLUSTER12
.39466b		4c ed 46	jmp $3946ed	fat32           JMP DELCLUSTER32
.39466e						WRITEFAT12
.39466e		8b		phb		                PHB
.39466f		0b		phd		                PHD
.394670		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.394673		ab		plb		                PLB
.394674		ab		plb		                PLB
.394675		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394678		2b		pld		                PLD
.394679		c2 30		rep #$30	                REP #$30        ; set A&X long
.39467b		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.39467e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394680		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394683		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394685		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394687		85 02		sta $0322	                STA BIOS_LBA
.394689		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39468b		85 04		sta $0324	                STA BIOS_LBA+2
.39468d		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394691		90 14		bcc $3946a7	                BCC done
.394693		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394696		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394698		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.39469b		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39469d		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.39469f		d0 02		bne $3946a3	                BNE put_second
.3946a1		e6 04		inc $0324	                INC BIOS_LBA+2
.3946a3		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.3946a7		2b		pld		done            PLD
.3946a8		ab		plb		                PLB
.3946a9		6b		rtl		                RTL
.3946aa						DELCLUSTER12
.3946aa		8b		phb		                PHB
.3946ab		0b		phd		                PHD
.3946ac		08		php		                PHP
.3946ad		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3946b0		ab		plb		                PLB
.3946b1		ab		plb		                PLB
.3946b2		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3946b5		2b		pld		                PLD
.3946b6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3946b8		22 a2 42 39	jsl $3942a2	                JSL FATFORCLUSTER12
.3946bc		8a		txa		                TXA                             ; Check to see if the index is odd or even
.3946bd		89 01 00	bit #$0001	                BIT #1
.3946c0		d0 08		bne $3946ca	                BNE is_odd
.3946c2		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.3946c5		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.3946c8		80 06		bra $3946d0	                BRA save_update
.3946ca		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.3946cd		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.3946d0		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.3946d3		22 6e 46 39	jsl $39466e	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.3946d7		b0 0b		bcs $3946e4	                BCS ret_success
.3946d9						ret_failure
.3946d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3946db		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3946dd		85 0e		sta $032e	                STA DOS_STATUS
.3946df		28		plp		                PLP
.3946e0		2b		pld		                PLD
.3946e1		ab		plb		                PLB
.3946e2		18		clc		                CLC
.3946e3		6b		rtl		                RTL
.3946e4						ret_success
.3946e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3946e6		64 0e		stz $032e	                STZ DOS_STATUS
.3946e8		28		plp		                PLP
.3946e9		2b		pld		                PLD
.3946ea		ab		plb		                PLB
.3946eb		38		sec		                SEC
.3946ec		6b		rtl		                RTL
.3946ed						DELCLUSTER32
.3946ed		8b		phb		                PHB
.3946ee		0b		phd		                PHD
.3946ef		08		php		                PHP
.3946f0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3946f2		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3946f5		ab		plb		                PLB
.3946f6		ab		plb		                PLB
.3946f7		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3946fa		2b		pld		                PLD
.3946fb		22 ff 42 39	jsl $3942ff	                JSL FATFORCLUSTER32
.3946ff		a9 00 00	lda #$0000	                LDA #0
.394702		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.394705		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394708		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.39470c		b0 0b		bcs $394719	                BCS ret_success
.39470e						ret_failure
.39470e		e2 20		sep #$20	                SEP #$20        ; set A short
.394710		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394712		85 0e		sta $032e	                STA DOS_STATUS
.394714		28		plp		                PLP
.394715		2b		pld		                PLD
.394716		ab		plb		                PLB
.394717		18		clc		                CLC
.394718		6b		rtl		                RTL
.394719						ret_success
.394719		e2 20		sep #$20	                SEP #$20        ; set A short
.39471b		64 0e		stz $032e	                STZ DOS_STATUS
.39471d		28		plp		                PLP
.39471e		2b		pld		                PLD
.39471f		ab		plb		                PLB
.394720		38		sec		                SEC
.394721		6b		rtl		                RTL
.394722						DOS_APPENDCLUS
.394722		8b		phb		                PHB
.394723		0b		phd		                PHD
.394724		08		php		                PHP
.394725		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394728		ab		plb		                PLB
.394729		ab		plb		                PLB
.39472a		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39472d		2b		pld		                PLD
.39472e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394730		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394732		48		pha		                PHA
.394733		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394735		48		pha		                PHA
.394736		22 62 44 39	jsl $394462	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.39473a		b0 09		bcs $394745	                BCS save_cluster                ; If we got a cluster, write the data to it
.39473c		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.39473d		85 10		sta $0330	                STA DOS_CLUS_ID
.39473f		68		pla		                PLA
.394740		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394742		82 7d 00	brl $3947c2	                BRL pass_failure                ; Pass the failure back up the chain
.394745		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394747		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.39474a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39474c		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.39474f		22 eb 3f 39	jsl $393feb	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394753		90 e7		bcc $39473c	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394755		68		pla		                PLA                             ; Restore the cluster of the file
.394756		85 10		sta $0330	                STA DOS_CLUS_ID
.394758		68		pla		                PLA
.394759		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39475b		22 5f 43 39	jsl $39435f	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.39475f		b0 fa		bcs $39475b	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394761		e2 20		sep #$20	                SEP #$20        ; set A short
.394763		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394767		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394769		d0 3d		bne $3947a8	                BNE fat32                       ; No: assume it's FAT32
.39476b						fat12
.39476b		c2 20		rep #$20	                REP #$20        ; set A long
.39476d		22 3a 42 39	jsl $39423a	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394771		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394773		89 01 00	bit #$0001	                BIT #1
.394776		d0 11		bne $394789	                BNE is_odd
.394778		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.39477b		29 ff 0f	and #$0fff	                AND #$0FFF
.39477e		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394781		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394784		29 00 f0	and #$f000	                AND #$F000
.394787		80 10		bra $394799	                BRA update_fat12
.394789		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.39478c		0a		asl a		                ASL A
.39478d		0a		asl a		                ASL A
.39478e		0a		asl a		                ASL A
.39478f		0a		asl a		                ASL A
.394790		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394793		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394796		29 0f 00	and #$000f	                AND #$000F
.394799		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.39479c		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.39479f		22 6e 46 39	jsl $39466e	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.3947a3		b0 22		bcs $3947c7	                BCS ret_success
.3947a5		82 1a 00	brl $3947c2	                BRL pass_failure
.3947a8						fat32
.3947a8		c2 20		rep #$20	                REP #$20        ; set A long
.3947aa		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.3947ad		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3947b0		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.3947b3		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.3947b6		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.3947ba		b0 0b		bcs $3947c7	                BCS ret_success
.3947bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3947be		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.3947c0		85 0e		sta $032e	                STA DOS_STATUS
.3947c2		28		plp		pass_failure    PLP
.3947c3		2b		pld		                PLD
.3947c4		ab		plb		                PLB
.3947c5		18		clc		                CLC
.3947c6		6b		rtl		                RTL
.3947c7						ret_success
.3947c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3947c9		64 0e		stz $032e	                STZ DOS_STATUS
.3947cb		28		plp		                PLP
.3947cc		2b		pld		                PLD
.3947cd		ab		plb		                PLB
.3947ce		38		sec		                SEC
.3947cf		6b		rtl		                RTL
.3947d0						BCD2BIN
.3947d0		8b		phb		                PHB
.3947d1		0b		phd		                PHD
.3947d2		08		php		                PHP
.3947d3		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3947d6		ab		plb		                PLB
.3947d7		ab		plb		                PLB
.3947d8		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3947db		2b		pld		                PLD
.3947dc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3947de		85 28		sta $0348	                STA DOS_TEMP
.3947e0		29 0f 00	and #$000f	                AND #$000F
.3947e3		85 2a		sta $034a	                STA DOS_TEMP+2
.3947e5		a5 28		lda $0348	                LDA DOS_TEMP
.3947e7		4a		lsr a		                LSR A
.3947e8		4a		lsr a		                LSR A
.3947e9		4a		lsr a		                LSR A
.3947ea		4a		lsr a		                LSR A
.3947eb		85 28		sta $0348	                STA DOS_TEMP
.3947ed		29 0f 00	and #$000f	                AND #$000F
.3947f0		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.3947f4		a9 0a 00	lda #$000a	                LDA #10
.3947f7		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.3947fb		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.3947ff		18		clc		                CLC
.394800		65 2a		adc $034a	                ADC DOS_TEMP+2
.394802		85 2a		sta $034a	                STA DOS_TEMP+2
.394804		a5 28		lda $0348	                LDA DOS_TEMP
.394806		4a		lsr a		                LSR A
.394807		4a		lsr a		                LSR A
.394808		4a		lsr a		                LSR A
.394809		4a		lsr a		                LSR A
.39480a		85 28		sta $0348	                STA DOS_TEMP
.39480c		29 0f 00	and #$000f	                AND #$000F
.39480f		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394813		a9 64 00	lda #$0064	                LDA #100
.394816		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.39481a		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.39481e		18		clc		                CLC
.39481f		65 2a		adc $034a	                ADC DOS_TEMP+2
.394821		85 2a		sta $034a	                STA DOS_TEMP+2
.394823		a5 28		lda $0348	                LDA DOS_TEMP
.394825		4a		lsr a		                LSR A
.394826		4a		lsr a		                LSR A
.394827		4a		lsr a		                LSR A
.394828		4a		lsr a		                LSR A
.394829		29 0f 00	and #$000f	                AND #$000F
.39482c		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394830		a9 e8 03	lda #$03e8	                LDA #1000
.394833		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394837		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.39483b		18		clc		                CLC
.39483c		65 2a		adc $034a	                ADC DOS_TEMP+2
.39483e		28		plp		                PLP
.39483f		2b		pld		                PLD
.394840		ab		plb		                PLB
.394841		6b		rtl		                RTL
.394842						DOS_RTCCREATE
.394842		8b		phb		                PHB
.394843		0b		phd		                PHD
.394844		08		php		                PHP
.394845		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394848		ab		plb		                PLB
.394849		ab		plb		                PLB
.39484a		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39484d		2b		pld		                PLD
.39484e		c2 10		rep #$10	                REP #$10        ; set X long
.394850		e2 20		sep #$20	                SEP #$20        ; set A short
.394852		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394856		09 08		ora #$08	                ORA #%00001000
.394858		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39485c		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394860		85 29		sta $0349	                STA DOS_TEMP+1
.394862		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394866		85 28		sta $0348	                STA DOS_TEMP
.394868		c2 20		rep #$20	                REP #$20        ; set A long
.39486a		a5 28		lda $0348	                LDA DOS_TEMP
.39486c		22 d0 47 39	jsl $3947d0	                JSL BCD2BIN                 ; Convert it to binary
.394870		85 28		sta $0348	                STA DOS_TEMP
.394872		38		sec		                SEC                         ; Year is relative to 1980
.394873		e9 bc 07	sbc #$07bc	                SBC #1980
.394876		c2 20		rep #$20	                REP #$20        ; set A long
.394878		0a		asl a		                ASL A
.394879		0a		asl a		                ASL A
.39487a		0a		asl a		                ASL A
.39487b		0a		asl a		                ASL A
.39487c		0a		asl a		                ASL A
.39487d		0a		asl a		                ASL A
.39487e		0a		asl a		                ASL A
.39487f		0a		asl a		                ASL A
.394880		0a		asl a		                ASL A
.394881		29 00 fe	and #$fe00	                AND #$FE00
.394884		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394887		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394889		e2 20		sep #$20	                SEP #$20        ; set A short
.39488b		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.39488f		c2 20		rep #$20	                REP #$20        ; set A long
.394891		29 ff 00	and #$00ff	                AND #$00FF
.394894		22 d0 47 39	jsl $3947d0	                JSL BCD2BIN                 ; Convert it to binary
.394898		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.39489b		0a		asl a		                ASL A
.39489c		0a		asl a		                ASL A
.39489d		0a		asl a		                ASL A
.39489e		0a		asl a		                ASL A
.39489f		0a		asl a		                ASL A
.3948a0		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.3948a3		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3948a6		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3948a8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3948aa		e2 20		sep #$20	                SEP #$20        ; set A short
.3948ac		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.3948b0		c2 20		rep #$20	                REP #$20        ; set A long
.3948b2		29 ff 00	and #$00ff	                AND #$00FF
.3948b5		22 d0 47 39	jsl $3947d0	                JSL BCD2BIN                 ; Convert it to binary
.3948b9		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.3948bc		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.3948bf		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.3948c1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3948c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3948c5		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.3948c9		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.3948cb		c2 20		rep #$20	                REP #$20        ; set A long
.3948cd		29 ff 00	and #$00ff	                AND #$00FF
.3948d0		22 d0 47 39	jsl $3947d0	                JSL BCD2BIN                 ; Convert it to binary
.3948d4		c2 20		rep #$20	                REP #$20        ; set A long
.3948d6		0a		asl a		                ASL A
.3948d7		0a		asl a		                ASL A
.3948d8		0a		asl a		                ASL A
.3948d9		0a		asl a		                ASL A
.3948da		0a		asl a		                ASL A
.3948db		0a		asl a		                ASL A
.3948dc		0a		asl a		                ASL A
.3948dd		0a		asl a		                ASL A
.3948de		0a		asl a		                ASL A
.3948df		0a		asl a		                ASL A
.3948e0		0a		asl a		                ASL A
.3948e1		29 00 f8	and #$f800	                AND #$F800
.3948e4		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.3948e7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3948e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3948eb		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.3948ef		c2 20		rep #$20	                REP #$20        ; set A long
.3948f1		29 ff 00	and #$00ff	                AND #$00FF
.3948f4		22 d0 47 39	jsl $3947d0	                JSL BCD2BIN                 ; Convert it to binary
.3948f8		c2 20		rep #$20	                REP #$20        ; set A long
.3948fa		0a		asl a		                ASL A
.3948fb		0a		asl a		                ASL A
.3948fc		0a		asl a		                ASL A
.3948fd		0a		asl a		                ASL A
.3948fe		0a		asl a		                ASL A
.3948ff		29 e0 07	and #$07e0	                AND #$07E0
.394902		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394905		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394907		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394909		e2 20		sep #$20	                SEP #$20        ; set A short
.39490b		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.39490f		c2 20		rep #$20	                REP #$20        ; set A long
.394911		29 ff 00	and #$00ff	                AND #$00FF
.394914		22 d0 47 39	jsl $3947d0	                JSL BCD2BIN                 ; Convert it to binary
.394918		c2 20		rep #$20	                REP #$20        ; set A long
.39491a		29 1f 00	and #$001f	                AND #$001F
.39491d		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394920		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394922		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394924		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.394928		29 f7 00	and #$00f7	                AND #%11110111
.39492b		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.39492f		28		plp		                PLP
.394930		2b		pld		                PLD
.394931		ab		plb		                PLB
.394932		6b		rtl		                RTL
.394933						DOS_CREATE
.394933		8b		phb		                PHB
.394934		0b		phd		                PHD
.394935		08		php		                PHP
.394936		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394939		ab		plb		                PLB
.39493a		ab		plb		                PLB
.39493b		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39493e		2b		pld		                PLD
.39493f		c2 30		rep #$30	                REP #$30        ; set A&X long
.394941		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.394944		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394946		85 28		sta $0348	                STA DOS_TEMP
.394948		c8		iny		                INY
.394949		c8		iny		                INY
.39494a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39494c		85 2a		sta $034a	                STA DOS_TEMP+2
.39494e		e2 20		sep #$20	                SEP #$20        ; set A short
.394950		a0 00 00	ldy #$0000	                LDY #0
.394953		a2 00 00	ldx #$0000	                LDX #0
.394956		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.394958		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.39495a		f0 04		beq $394960	                BEQ find_file                   ; If it's NULL, we're done
.39495c		e8		inx		                INX
.39495d		c8		iny		                INY
.39495e		80 f6		bra $394956	                BRA path_loop
.394960		22 db 40 39	jsl $3940db	find_file       JSL DOS_PARSE_PATH
.394964		22 68 41 39	jsl $394168	                JSL DOS_FINDFILE
.394968		90 07		bcc $394971	                BCC set_device
.39496a		e2 20		sep #$20	                SEP #$20        ; set A short
.39496c		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.39496e		82 d2 00	brl $394a43	                BRL ret_failure
.394971						set_device
.394971		e2 20		sep #$20	                SEP #$20        ; set A short
.394973		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394976		a5 01		lda $0321	                LDA BIOS_DEV
.394978		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39497a						validate_name
.39497a		22 62 44 39	jsl $394462	                JSL DOS_FREECLUS
.39497e		b0 03		bcs $394983	                BCS save_data
.394980		82 c4 00	brl $394a47	                BRL pass_failure
.394983						save_data
.394983		c2 20		rep #$20	                REP #$20        ; set A long
.394985		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.394988		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.39498a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39498c		c8		iny		                INY
.39498d		c8		iny		                INY
.39498e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394990		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394992		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.394995		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394997		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394999		c8		iny		                INY
.39499a		c8		iny		                INY
.39499b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39499d		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39499f		22 eb 3f 39	jsl $393feb	                JSL DOS_PUTCLUSTER
.3949a3		b0 00		bcs $3949a5	                BCS find_dir
.3949a5						find_dir
.3949a5		c2 20		rep #$20	                REP #$20        ; set A long
.3949a7		22 89 3b 39	jsl $393b89	                JSL DOS_DIRFINDFREE
.3949ab		b0 1a		bcs $3949c7	                BCS set_entry
.3949ad		c2 20		rep #$20	                REP #$20        ; set A long
.3949af		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.3949b2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.3949b4		85 10		sta $0330	                STA DOS_CLUS_ID
.3949b6		c8		iny		                INY
.3949b7		c8		iny		                INY
.3949b8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949ba		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3949bc		22 ed 46 39	jsl $3946ed	                JSL DELCLUSTER32                ; Delete the cluster
.3949c0		e2 20		sep #$20	                SEP #$20        ; set A short
.3949c2		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.3949c4		82 7c 00	brl $394a43	                BRL ret_failure
.3949c7						set_entry
.3949c7		e2 20		sep #$20	                SEP #$20        ; set A short
.3949c9		a0 00 00	ldy #$0000	                LDY #0
.3949cc		a9 00		lda #$00	                LDA #0                          ; NULL
.3949ce		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.3949d0		c8		iny		                INY
.3949d1		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.3949d4		d0 f8		bne $3949ce	                BNE copy_dir_loop
.3949d6		a0 00 00	ldy #$0000	                LDY #0
.3949d9		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.3949dc		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3949de		c8		iny		                INY
.3949df		c0 0b 00	cpy #$000b	                CPY #11
.3949e2		d0 f5		bne $3949d9	                BNE name_loop
.3949e4		c2 20		rep #$20	                REP #$20        ; set A long
.3949e6		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.3949e9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949eb		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.3949ee		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3949f0		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.3949f3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949f5		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.3949f8		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.3949fa		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.3949fd		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3949ff		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.394a02		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a04		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394a07		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a09		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394a0c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a0e		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.394a11		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.394a14		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394a16		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.394a19		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394a1b		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394a1e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a20		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394a23		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a25		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.394a28		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a2a		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.394a2d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a2f		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394a32		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a34		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.394a37		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394a39		c2 20		rep #$20	                REP #$20        ; set A long
.394a3b		22 31 3c 39	jsl $393c31	                JSL DOS_DIRWRITE
.394a3f		b0 0b		bcs $394a4c	                BCS ret_success
.394a41		80 04		bra $394a47	                BRA pass_failure
.394a43						ret_failure
.394a43		e2 20		sep #$20	                SEP #$20        ; set A short
.394a45		85 0e		sta $032e	                STA DOS_STATUS
.394a47		28		plp		pass_failure    PLP
.394a48		2b		pld		                PLD
.394a49		ab		plb		                PLB
.394a4a		18		clc		                CLC
.394a4b		6b		rtl		                RTL
.394a4c						ret_success
.394a4c		e2 20		sep #$20	                SEP #$20        ; set A short
.394a4e		64 0e		stz $032e	                STZ DOS_STATUS
.394a50		28		plp		                PLP
.394a51		2b		pld		                PLD
.394a52		ab		plb		                PLB
.394a53		38		sec		                SEC
.394a54		6b		rtl		                RTL
.394a55						DOS_COPYPATH
.394a55		da		phx		                PHX
.394a56		5a		phy		                PHY
.394a57		8b		phb		                PHB
.394a58		0b		phd		                PHD
.394a59		08		php		                PHP
.394a5a		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394a5d		ab		plb		                PLB
.394a5e		ab		plb		                PLB
.394a5f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394a62		2b		pld		                PLD
.394a63		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a65		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.394a68		a2 00 00	ldx #$0000	                LDX #0
.394a6b		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.394a6d		e8		inx		                INX
.394a6e		e8		inx		                INX
.394a6f		e0 00 01	cpx #$0100	                CPX #256
.394a72		d0 f7		bne $394a6b	                BNE clr_loop
.394a74		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.394a76		d0 04		bne $394a7c	                BNE get_path            ; No: attempt to fetch the path
.394a78		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.394a7a		f0 27		beq $394aa3	                BEQ done                ; Yes: return an empty buffer
.394a7c		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.394a7f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a81		85 28		sta $0348	                STA DOS_TEMP
.394a83		c8		iny		                INY
.394a84		c8		iny		                INY
.394a85		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394a87		85 2a		sta $034a	                STA DOS_TEMP+2
.394a89		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.394a8b		d0 04		bne $394a91	                BNE start_copy          ; No: start copying it
.394a8d		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394a8f		f0 12		beq $394aa3	                BEQ done                ; Yes: return an empty buffer
.394a91						start_copy
.394a91		e2 20		sep #$20	                SEP #$20        ; set A short
.394a93		a2 00 00	ldx #$0000	                LDX #0
.394a96		a0 00 00	ldy #$0000	                LDY #0
.394a99		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.394a9b		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394a9d		f0 04		beq $394aa3	                BEQ done
.394a9f		e8		inx		                INX
.394aa0		c8		iny		                INY
.394aa1		d0 f6		bne $394a99	                BNE loop
.394aa3		28		plp		done            PLP
.394aa4		2b		pld		                PLD
.394aa5		ab		plb		                PLB
.394aa6		7a		ply		                PLY
.394aa7		fa		plx		                PLX
.394aa8		6b		rtl		                RTL

;******  Return to file: src\SDOS.asm

.394aa9						DOS_TEST
.394aa9		8b		phb		                PHB
.394aaa		0b		phd		                PHD
.394aab		08		php		                PHP
.394aac		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394aaf		ab		plb		                PLB
.394ab0		ab		plb		                PLB
.394ab1		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394ab4		2b		pld		                PLD
.394ab5		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ab7		a9 dd 4a	lda #$4add	                LDA #<>src_file
.394aba		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.394abe		a9 39 00	lda #$0039	                LDA #`src_file
.394ac1		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.394ac5		a9 ea 4a	lda #$4aea	                LDA #<>dst_file
.394ac8		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.394acc		a9 39 00	lda #$0039	                LDA #`dst_file
.394acf		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.394ad3		22 43 52 39	jsl $395243	                JSL IF_COPY
.394ad7		b0 00		bcs $394ad9	                BCS done
.394ad9		28		plp		done            PLP
.394ada		2b		pld		                PLD
.394adb		ab		plb		                PLB
.394adc		6b		rtl		                RTL
>394add		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>394ae5		2e 62 61 73 00
>394aea		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>394af2		32 2e 62 61 73 00
.394af8						IF_OPEN
.394af8		da		phx		                PHX
.394af9		5a		phy		                PHY
.394afa		0b		phd		                PHD
.394afb		8b		phb		                PHB
.394afc		08		php		                PHP
.394afd		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394b00		ab		plb		                PLB
.394b01		ab		plb		                PLB
.394b02		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394b05		2b		pld		                PLD
.394b06		e2 20		sep #$20	                SEP #$20        ; set A short
.394b08		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.394b0b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b0d		89 20		bit #$20	                BIT #FD_STAT_OPEN
.394b0f		f0 05		beq $394b16	                BEQ ok_to_open
.394b11		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.394b13		82 ed 05	brl $395103	                BRL IF_FAILURE
.394b16		22 55 4a 39	jsl $394a55	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.394b1a		22 68 41 39	jsl $394168	                JSL DOS_FINDFILE                ; Attempt to find the file
.394b1e		b0 03		bcs $394b23	                BCS is_found                    ; If OK: we found the file
.394b20		82 e4 05	brl $395107	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.394b23						is_found
.394b23		e2 20		sep #$20	                SEP #$20        ; set A short
.394b25		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394b28		a5 01		lda $0321	                LDA BIOS_DEV
.394b2a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b2c		c2 20		rep #$20	                REP #$20        ; set A long
.394b2e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.394b31		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b33		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394b35		c8		iny		                INY
.394b36		c8		iny		                INY
.394b37		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394b39		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394b3b		22 b9 3f 39	jsl $393fb9	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.394b3f		b0 03		bcs $394b44	                BCS read_cluster
.394b41		82 c3 05	brl $395107	                BRL IF_PASSFAILURE
.394b44		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.394b47		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b49		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b4b		c8		iny		                INY
.394b4c		c8		iny		                INY
.394b4d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b4f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b51		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.394b54		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394b56		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b58		c8		iny		                INY
.394b59		c8		iny		                INY
.394b5a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394b5c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b5e		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.394b61		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394b63		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.394b66		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b68		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394b6b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394b6d		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394b70		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b72		e2 20		sep #$20	                SEP #$20        ; set A short
.394b74		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.394b77		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.394b79		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394b7b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b7d		82 8e 05	brl $39510e	                BRL IF_SUCCESS
.394b80						IF_CREATE
.394b80		da		phx		                PHX
.394b81		5a		phy		                PHY
.394b82		0b		phd		                PHD
.394b83		8b		phb		                PHB
.394b84		08		php		                PHP
.394b85		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394b88		ab		plb		                PLB
.394b89		ab		plb		                PLB
.394b8a		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394b8d		2b		pld		                PLD
.394b8e		22 33 49 39	jsl $394933	                JSL DOS_CREATE                  ; Attempt to create the file
.394b92		90 18		bcc $394bac	                BCC pass_failure                ; If it fails: pass the failure up the chain
.394b94		c2 30		rep #$30	                REP #$30        ; set A&X long
.394b96		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.394b99		a9 00 00	lda #$0000	                LDA #0
.394b9c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b9e		c8		iny		                INY
.394b9f		c8		iny		                INY
.394ba0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ba2		e2 20		sep #$20	                SEP #$20        ; set A short
.394ba4		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.394ba7		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.394ba9		82 62 05	brl $39510e	                BRL IF_SUCCESS
.394bac		82 54 05	brl $395103	pass_failure    BRL IF_FAILURE
.394baf						IF_CLOSE
.394baf		da		phx		                PHX
.394bb0		5a		phy		                PHY
.394bb1		0b		phd		                PHD
.394bb2		8b		phb		                PHB
.394bb3		08		php		                PHP
.394bb4		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394bb7		ab		plb		                PLB
.394bb8		ab		plb		                PLB
.394bb9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394bbc		2b		pld		                PLD
.394bbd		e2 20		sep #$20	                SEP #$20        ; set A short
.394bbf		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.394bc2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bc4		89 02		bit #$02	                BIT #FD_STAT_WRITE
.394bc6		f0 09		beq $394bd1	                BEQ set_flag                    ; No, just mark it closed
.394bc8		22 32 4c 39	jsl $394c32	                JSL IF_WRITE                    ; Attempt to write the cluster
.394bcc		b0 03		bcs $394bd1	                BCS set_flag
.394bce		82 36 05	brl $395107	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.394bd1		22 f2 51 39	jsl $3951f2	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.394bd5		82 36 05	brl $39510e	                BRL IF_SUCCESS
.394bd8						IF_READ
.394bd8		da		phx		                PHX
.394bd9		5a		phy		                PHY
.394bda		0b		phd		                PHD
.394bdb		8b		phb		                PHB
.394bdc		08		php		                PHP
.394bdd		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394be0		ab		plb		                PLB
.394be1		ab		plb		                PLB
.394be2		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394be5		2b		pld		                PLD
.394be6		c2 10		rep #$10	                REP #$10        ; set X long
.394be8		e2 20		sep #$20	                SEP #$20        ; set A short
.394bea						get_dev
.394bea		e2 20		sep #$20	                SEP #$20        ; set A short
.394bec		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394bef		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bf1		85 01		sta $0321	                STA BIOS_DEV
.394bf3		22 42 3d 39	jsl $393d42	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.394bf7		c2 20		rep #$20	                REP #$20        ; set A long
.394bf9		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394bfc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394bfe		85 10		sta $0330	                STA DOS_CLUS_ID
.394c00		c8		iny		                INY
.394c01		c8		iny		                INY
.394c02		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c04		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c06		22 5f 43 39	jsl $39435f	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.394c0a		90 13		bcc $394c1f	                BCC pass_failure                ; If not OK: pass the failure up the chain
.394c0c		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394c0f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c11		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394c13		c8		iny		                INY
.394c14		c8		iny		                INY
.394c15		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c17		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394c19		22 b9 3f 39	jsl $393fb9	                JSL DOS_GETCLUSTER              ; Get the cluster
.394c1d		b0 03		bcs $394c22	                BCS ret_success                 ; If ok: return success
.394c1f						pass_failure
.394c1f		82 e5 04	brl $395107	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394c22		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.394c25		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394c27		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c29		c8		iny		                INY
.394c2a		c8		iny		                INY
.394c2b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394c2d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c2f		82 dc 04	brl $39510e	                BRL IF_SUCCESS
.394c32						IF_WRITE
.394c32		da		phx		                PHX
.394c33		5a		phy		                PHY
.394c34		0b		phd		                PHD
.394c35		8b		phb		                PHB
.394c36		08		php		                PHP
.394c37		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394c3a		ab		plb		                PLB
.394c3b		ab		plb		                PLB
.394c3c		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394c3f		2b		pld		                PLD
.394c40		c2 10		rep #$10	                REP #$10        ; set X long
.394c42		e2 20		sep #$20	                SEP #$20        ; set A short
.394c44		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394c47		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c49		85 01		sta $0321	                STA BIOS_DEV
.394c4b		22 42 3d 39	jsl $393d42	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.394c4f		c2 20		rep #$20	                REP #$20        ; set A long
.394c51		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394c54		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c56		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394c58		c8		iny		                INY
.394c59		c8		iny		                INY
.394c5a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c5c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394c5e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394c61		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c63		85 10		sta $0330	                STA DOS_CLUS_ID
.394c65		c8		iny		                INY
.394c66		c8		iny		                INY
.394c67		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c69		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c6b		d0 1a		bne $394c87	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.394c6d		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394c6f		d0 16		bne $394c87	                BNE rewrite_cluster
.394c71		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.394c74		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c76		85 10		sta $0330	                STA DOS_CLUS_ID
.394c78		c8		iny		                INY
.394c79		c8		iny		                INY
.394c7a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c7c		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394c7e		22 22 47 39	jsl $394722	                JSL DOS_APPENDCLUS              ; Append the cluster
.394c82		b0 0c		bcs $394c90	                BCS ret_success                 ; If OK: return success
.394c84		82 80 04	brl $395107	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394c87		22 eb 3f 39	jsl $393feb	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.394c8b		b0 03		bcs $394c90	                BCS ret_success                 ; If ok: return success
.394c8d		82 77 04	brl $395107	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394c90		82 7b 04	brl $39510e	ret_success     BRL IF_SUCCESS
.394c93						IF_DIROPEN
.394c93		da		phx		                PHX
.394c94		5a		phy		                PHY
.394c95		0b		phd		                PHD
.394c96		8b		phb		                PHB
.394c97		08		php		                PHP
.394c98		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394c9b		ab		plb		                PLB
.394c9c		ab		plb		                PLB
.394c9d		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394ca0		2b		pld		                PLD
.394ca1		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ca3		22 55 4a 39	jsl $394a55	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.394ca7		22 db 40 39	jsl $3940db	                JSL DOS_PARSE_PATH          ; Parse the path
.394cab		22 42 3d 39	jsl $393d42	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.394caf		b0 03		bcs $394cb4	                BCS get_root_dir            ; If successful: get the root directory
.394cb1		82 53 04	brl $395107	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.394cb4						get_root_dir
.394cb4		c2 30		rep #$30	                REP #$30        ; set A&X long
.394cb6		22 48 3a 39	jsl $393a48	                JSL DOS_DIROPEN
.394cba		b0 03		bcs $394cbf	                BCS success
.394cbc		82 48 04	brl $395107	                BRL IF_PASSFAILURE
.394cbf		82 4c 04	brl $39510e	success         BRL IF_SUCCESS
.394cc2						IF_DIRNEXT
.394cc2		5c d3 3a 39	jmp $393ad3	                JML DOS_DIRNEXT
.394cc6						IF_DELETE
.394cc6		da		phx		                PHX
.394cc7		5a		phy		                PHY
.394cc8		0b		phd		                PHD
.394cc9		8b		phb		                PHB
.394cca		08		php		                PHP
.394ccb		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394cce		ab		plb		                PLB
.394ccf		ab		plb		                PLB
.394cd0		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394cd3		2b		pld		                PLD
.394cd4		c2 30		rep #$30	                REP #$30        ; set A&X long
.394cd6		22 68 41 39	jsl $394168	                JSL DOS_FINDFILE
.394cda		b0 03		bcs $394cdf	                BCS get_first_clus
.394cdc		82 28 04	brl $395107	                BRL IF_PASSFAILURE
.394cdf						get_first_clus
.394cdf		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394ce2		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394ce4		85 10		sta $0330	                STA DOS_CLUS_ID
.394ce6		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394ce9		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394ceb		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394ced		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394cef		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.394cf2		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394cf4		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.394cf7		22 5f 43 39	jsl $39435f	del_loop        JSL NEXTCLUSTER
.394cfb		90 2f		bcc $394d2c	                BCC del_one
.394cfd		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394cff		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.394d02		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394d04		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.394d07		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.394d0a		85 10		sta $0330	                STA DOS_CLUS_ID
.394d0c		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.394d0f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d11		22 ed 46 39	jsl $3946ed	                JSL DELCLUSTER32
.394d15		b0 03		bcs $394d1a	                BCS go_next
.394d17		82 ed 03	brl $395107	                BRL IF_PASSFAILURE
.394d1a						go_next
.394d1a		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.394d1d		85 10		sta $0330	                STA DOS_CLUS_ID
.394d1f		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.394d22		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.394d25		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d27		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.394d2a		80 cb		bra $394cf7	                BRA del_loop
.394d2c						del_one
.394d2c		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.394d2f		85 10		sta $0330	                STA DOS_CLUS_ID
.394d31		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.394d34		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394d36		22 5d 46 39	jsl $39465d	                JSL DELCLUSTER
.394d3a		b0 03		bcs $394d3f	                BCS free_dir_entry
.394d3c		82 c8 03	brl $395107	                BRL IF_PASSFAILURE
.394d3f						free_dir_entry
.394d3f		e2 20		sep #$20	                SEP #$20        ; set A short
.394d41		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.394d44		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.394d46		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394d48		22 31 3c 39	jsl $393c31	                JSL DOS_DIRWRITE                ; Write the directory entry back
.394d4c		b0 03		bcs $394d51	                BCS ret_success
.394d4e		82 b6 03	brl $395107	                BRL IF_PASSFAILURE
.394d51		82 ba 03	brl $39510e	ret_success     BRL IF_SUCCESS
.394d54						IF_DIRREAD
.394d54		da		phx		                PHX
.394d55		5a		phy		                PHY
.394d56		0b		phd		                PHD
.394d57		8b		phb		                PHB
.394d58		08		php		                PHP
.394d59		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394d5c		ab		plb		                PLB
.394d5d		ab		plb		                PLB
.394d5e		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394d61		2b		pld		                PLD
.394d62		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d64		22 68 41 39	jsl $394168	                JSL DOS_FINDFILE
.394d68		b0 03		bcs $394d6d	                BCS success
.394d6a		82 96 03	brl $395103	                BRL IF_FAILURE
.394d6d		82 9e 03	brl $39510e	success         BRL IF_SUCCESS
.394d70						IF_DIRWRITE
.394d70		5c 31 3c 39	jmp $393c31	                JML DOS_DIRWRITE
.394d74						IF_LOAD
.394d74		da		phx		                PHX
.394d75		5a		phy		                PHY
.394d76		0b		phd		                PHD
.394d77		8b		phb		                PHB
.394d78		08		php		                PHP
.394d79		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394d7c		ab		plb		                PLB
.394d7d		ab		plb		                PLB
.394d7e		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394d81		2b		pld		                PLD
.394d82		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d84		22 f8 4a 39	jsl $394af8	                JSL IF_OPEN
.394d88		b0 03		bcs $394d8d	                BCS setup                   ; If success: start setting things up
.394d8a		82 7a 03	brl $395107	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.394d8d						setup
.394d8d		c2 20		rep #$20	                REP #$20        ; set A long
.394d8f		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.394d92		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d94		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394d96		c8		iny		                INY
.394d97		c8		iny		                INY
.394d98		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d9a		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394d9c		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.394d9f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394da1		85 30		sta $0350	                STA DOS_SRC_PTR
.394da3		c8		iny		                INY
.394da4		c8		iny		                INY
.394da5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394da7		85 32		sta $0352	                STA DOS_SRC_PTR+2
.394da9		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.394dab		c9 40 00	cmp #$0040	                CMP #$0040
.394dae		b0 04		bcs $394db4	                BGE load_by_type            ; No: try to load it by type
.394db0		5c d9 4f 39	jmp $394fd9	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.394db4		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.394db7		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.394dba						type_loop
.394dba		e2 20		sep #$20	                SEP #$20        ; set A short
.394dbc		bf 00 4e 39	lda $394e00,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.394dc0		f0 37		beq $394df9	                BEQ no_match                ; If NULL... we didn't get a match
.394dc2		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.394dc5		d0 28		bne $394def	                BNE next_entry              ; If they don't match, try the next entry
.394dc7		bf 01 4e 39	lda $394e01,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.394dcb		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.394dce		d0 1f		bne $394def	                BNE next_entry              ; If they don't match, try the next entry
.394dd0		bf 02 4e 39	lda $394e02,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.394dd4		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.394dd7		d0 16		bne $394def	                BNE next_entry              ; If they don't match, try the next entry
.394dd9		c2 20		rep #$20	                REP #$20        ; set A long
.394ddb		bf 03 4e 39	lda $394e03,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.394ddf		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.394de1		e2 20		sep #$20	                SEP #$20        ; set A short
.394de3		bf 05 4e 39	lda $394e05,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.394de7		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.394de9		a2 00 00	ldx #$0000	                LDX #0
.394dec		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.394def						next_entry
.394def		c2 30		rep #$30	                REP #$30        ; set A&X long
.394df1		8a		txa		                TXA
.394df2		18		clc		                CLC
.394df3		69 06 00	adc #$0006	                ADC #6
.394df6		aa		tax		                TAX
.394df7		80 c1		bra $394dba	                BRA type_loop               ; And check it against the file
.394df9						no_match
.394df9		e2 20		sep #$20	                SEP #$20        ; set A short
.394dfb		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.394dfd		82 03 03	brl $395103	                BRL IF_FAILURE
>394e00		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>394e03		0d 4e				                .word <>IF_LOADPGX
>394e05		39				                .byte `IF_LOADPGX
>394e06		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>394e09		95 4e				                .word <>IF_LOADPGZ
>394e0b		39				                .byte `IF_LOADPGZ
>394e0c		00				                .byte 0
.394e0d						IF_LOADPGX
.394e0d		c2 10		rep #$10	                REP #$10        ; set X long
.394e0f		e2 20		sep #$20	                SEP #$20        ; set A short
.394e11		a0 00 00	ldy #$0000	                LDY #0
.394e14		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.394e16		c9 50		cmp #$50	                CMP #'P'
.394e18		d0 15		bne $394e2f	                BNE fail_sig                        ; If not found, fail
.394e1a		c8		iny		                INY
.394e1b		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394e1d		c9 47		cmp #$47	                CMP #'G'
.394e1f		d0 0e		bne $394e2f	                BNE fail_sig
.394e21		c8		iny		                INY
.394e22		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394e24		c9 58		cmp #$58	                CMP #'X'
.394e26		d0 07		bne $394e2f	                BNE fail_sig
.394e28		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.394e29		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.394e2b		c9 01		cmp #$01	                CMP #$01
.394e2d		f0 17		beq $394e46	                BEQ get_dest                        ; All passes: go to get the destination address
.394e2f		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.394e31		22 03 51 39	jsl $395103	                JSL IF_FAILURE
.394e35						adjust_size
.394e35		c2 20		rep #$20	                REP #$20        ; set A long
.394e37		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.394e38		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394e3a		e9 08 00	sbc #$0008	                SBC #8
.394e3d		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394e3f		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394e41		e9 00 00	sbc #$0000	                SBC #0
.394e44		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394e46						get_dest
.394e46		c2 20		rep #$20	                REP #$20        ; set A long
.394e48		c8		iny		                INY
.394e49		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.394e4b		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.394e4d		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.394e4f		c8		iny		                INY
.394e50		c8		iny		                INY
.394e51		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.394e53		85 36		sta $0356	                STA DOS_DST_PTR+2
.394e55		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.394e57		c8		iny		                INY                                 ; Point to the first data byte
.394e58		c8		iny		                INY
.394e59						copy_loop
.394e59		e2 20		sep #$20	                SEP #$20        ; set A short
.394e5b		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.394e5d		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.394e5f		c2 20		rep #$20	                REP #$20        ; set A long
.394e61		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.394e63		d0 02		bne $394e67	                BNE dec_file_size
.394e65		e6 36		inc $0356	                INC DOS_DST_PTR+2
.394e67		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.394e68		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394e6a		e9 01 00	sbc #$0001	                SBC #1
.394e6d		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394e6f		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394e71		e9 00 00	sbc #$0000	                SBC #0
.394e74		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394e76		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.394e78		d0 04		bne $394e7e	                BNE next_byte
.394e7a		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394e7c		f0 14		beq $394e92	                BEQ done                            ; Yes: we're done
.394e7e		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.394e7f		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.394e82		d0 d5		bne $394e59	                BNE copy_loop                       ; No: keep copying
.394e84		22 4d 44 39	jsl $39444d	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.394e88		b0 03		bcs $394e8d	                BCS next_cluster
.394e8a		82 7a 02	brl $395107	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.394e8d		a0 00 00	ldy #$0000	next_cluster    LDY #0
.394e90		80 c7		bra $394e59	                BRA copy_loop                       ; Go back to copying
.394e92		82 79 02	brl $39510e	done            BRL IF_SUCCESS
.394e95						IF_LOADPGZ
.394e95		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394e98		ab		plb		                PLB
.394e99		ab		plb		                PLB
.394e9a		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394e9d		2b		pld		                PLD
.394e9e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394ea0		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.394ea3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ea5		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.394ea7		c8		iny		                INY
.394ea8		c8		iny		                INY
.394ea9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394eab		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394ead		e2 20		sep #$20	                SEP #$20        ; set A short
.394eaf		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.394eb2		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.394eb4		c9 5a		cmp #$5a	                CMP #'Z'
.394eb6		f0 06		beq $394ebe	                BEQ start_block                     ; If found, get the starting address
.394eb8		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.394eba		22 03 51 39	jsl $395103	                JSL IF_FAILURE
.394ebe		c8		iny		start_block     INY
.394ebf						get_addr
.394ebf		e2 20		sep #$20	                SEP #$20        ; set A short
.394ec1		22 44 4f 39	jsl $394f44	                JSL IF_FILE_EOF                     ; Check if EOF
.394ec5		90 03		bcc $394eca	                BCC get_addr_lo
.394ec7		82 44 02	brl $39510e	done            BRL IF_SUCCESS                      ; If so: we're done
.394eca		22 77 4f 39	jsl $394f77	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.394ece		90 47		bcc $394f17	                BCC ret_failure                     ; Got an error: pass it on
.394ed0		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.394ed2		22 77 4f 39	jsl $394f77	                JSL IF_READ_NEXT                    ; Get the next byte
.394ed6		90 3f		bcc $394f17	                BCC ret_failure                     ; Got an error: pass it on
.394ed8		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.394eda		22 77 4f 39	jsl $394f77	                JSL IF_READ_NEXT                    ; Get the next byte
.394ede		90 37		bcc $394f17	                BCC ret_failure                     ; Got an error: pass it on
.394ee0		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.394ee2		22 77 4f 39	jsl $394f77	                JSL IF_READ_NEXT                    ; Get the next byte
.394ee6		90 2f		bcc $394f17	                BCC ret_failure                     ; Got an error: pass it on
.394ee8		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.394eea		22 77 4f 39	jsl $394f77	                JSL IF_READ_NEXT                    ; Get the next byte
.394eee		90 27		bcc $394f17	                BCC ret_failure                     ; Got an error: pass it on
.394ef0		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.394ef2		22 77 4f 39	jsl $394f77	                JSL IF_READ_NEXT                    ; Get the next byte
.394ef6		90 1f		bcc $394f17	                BCC ret_failure                     ; Got an error: pass it on
.394ef8		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.394efa		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.394efc		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.394efe		d0 1a		bne $394f1a	                BNE read_data
.394f00		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.394f02		d0 16		bne $394f1a	                BNE read_data
.394f04		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.394f06		d0 12		bne $394f1a	                BNE read_data
.394f08		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.394f0a		85 3c		sta $035c	                STA DOS_RUN_PTR
.394f0c		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.394f0e		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.394f10		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.394f12		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.394f14		82 f7 01	brl $39510e	                BRL IF_SUCCESS                      ; And finish
.394f17		82 e9 01	brl $395103	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.394f1a						read_data
.394f1a		e2 20		sep #$20	                SEP #$20        ; set A short
.394f1c		22 77 4f 39	jsl $394f77	                JSL IF_READ_NEXT                    ; Get the next byte
.394f20		90 f5		bcc $394f17	                BCC ret_failure
.394f22		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.394f24		c2 20		rep #$20	                REP #$20        ; set A long
.394f26		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.394f28		d0 02		bne $394f2c	                BNE dec_block_size
.394f2a		e6 36		inc $0356	                INC DOS_DST_PTR+2
.394f2c		38		sec		dec_block_size  SEC
.394f2d		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.394f2f		e9 01 00	sbc #$0001	                SBC #1
.394f32		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.394f34		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.394f36		e9 00 00	sbc #$0000	                SBC #0
.394f39		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.394f3b		d0 dd		bne $394f1a	                BNE read_data
.394f3d		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.394f3f		d0 d9		bne $394f1a	                BNE read_data                       ; No: keep reading data
.394f41		82 7b ff	brl $394ebf	                BRL get_addr                        ; Yes: check for another block
.394f44						IF_FILE_EOF
.394f44		48		pha		                PHA
.394f45		5a		phy		                PHY
.394f46		8b		phb		                PHB
.394f47		0b		phd		                PHD
.394f48		08		php		                PHP
.394f49		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394f4c		ab		plb		                PLB
.394f4d		ab		plb		                PLB
.394f4e		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394f51		2b		pld		                PLD
.394f52		e2 20		sep #$20	                SEP #$20        ; set A short
.394f54		c2 10		rep #$10	                REP #$10        ; set X long
.394f56		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.394f59		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.394f5b		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.394f5d		f0 07		beq $394f66	                BEQ chk_file_size                   ; If not: check the file size
.394f5f		28		plp		ret_true        PLP                                 ; Return true
.394f60		2b		pld		                PLD
.394f61		ab		plb		                PLB
.394f62		7a		ply		                PLY
.394f63		68		pla		                PLA
.394f64		38		sec		                SEC
.394f65		6b		rtl		                RTL
.394f66						chk_file_size
.394f66		c2 20		rep #$20	                REP #$20        ; set A long
.394f68		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.394f6a		d0 04		bne $394f70	                BNE ret_false
.394f6c		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394f6e		f0 ef		beq $394f5f	                BEQ ret_true
.394f70		28		plp		ret_false       PLP                                 ; Return false
.394f71		2b		pld		                PLD
.394f72		ab		plb		                PLB
.394f73		7a		ply		                PLY
.394f74		68		pla		                PLA
.394f75		18		clc		                CLC
.394f76		6b		rtl		                RTL
.394f77						IF_READ_NEXT
.394f77		8b		phb		                PHB
.394f78		0b		phd		                PHD
.394f79		08		php		                PHP
.394f7a		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.394f7d		ab		plb		                PLB
.394f7e		ab		plb		                PLB
.394f7f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.394f82		2b		pld		                PLD
.394f83		e2 20		sep #$20	                SEP #$20        ; set A short
.394f85		c2 10		rep #$10	                REP #$10        ; set X long
.394f87		22 44 4f 39	jsl $394f44	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.394f8b		90 06		bcc $394f93	                BCC get_byte                        ; If not: get the next byte
.394f8d		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.394f8f		85 0e		sta $032e	                STA DOS_STATUS
.394f91		80 3f		bra $394fd2	                BRA ret_failure
.394f93		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.394f95		48		pha		                PHA                                 ; And save it for the moment
.394f96		c2 20		rep #$20	                REP #$20        ; set A long
.394f98		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.394f9a		d0 02		bne $394f9e	                BNE dec_low
.394f9c		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.394f9e		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.394fa0		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.394fa2		d0 04		bne $394fa8	                BNE next_byte
.394fa4		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394fa6		f0 1b		beq $394fc3	                BEQ ret_eof                         ; Yes: mark the file as EOF
.394fa8						next_byte
.394fa8		e2 20		sep #$20	                SEP #$20        ; set A short
.394faa		c8		iny		                INY                                 ; Move to the next byte
.394fab		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.394fae		90 0b		bcc $394fbb	                BLT ret_success                     ; No: just return the byte
.394fb0		22 4d 44 39	jsl $39444d	                JSL DOS_READNEXT                    ; Yes: read the next sector
.394fb4		b0 02		bcs $394fb8	                BCS reset_index
.394fb6		80 1a		bra $394fd2	                BRA ret_failure                     ; If failure: pass the error up the chain
.394fb8		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.394fbb						ret_success
.394fbb		e2 20		sep #$20	                SEP #$20        ; set A short
.394fbd		68		pla		                PLA                                 ; Return the byte retrieved
.394fbe		28		plp		                PLP
.394fbf		2b		pld		                PLD
.394fc0		ab		plb		                PLB
.394fc1		38		sec		                SEC
.394fc2		6b		rtl		                RTL
.394fc3						ret_eof
.394fc3		e2 20		sep #$20	                SEP #$20        ; set A short
.394fc5		5a		phy		                PHY                                 ; Save the index
.394fc6		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.394fc9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fcb		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.394fcd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.394fcf		7a		ply		                PLY                                 ; Restore the index
.394fd0		80 e9		bra $394fbb	                BRA ret_success
.394fd2						ret_failure
.394fd2		e2 20		sep #$20	                SEP #$20        ; set A short
.394fd4		28		plp		                PLP
.394fd5		2b		pld		                PLD
.394fd6		ab		plb		                PLB
.394fd7		18		clc		                CLC
.394fd8		6b		rtl		                RTL
.394fd9						IF_LOADRAW
.394fd9		c2 30		rep #$30	                REP #$30        ; set A&X long
.394fdb		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.394fde						copy_loop
.394fde		e2 20		sep #$20	                SEP #$20        ; set A short
.394fe0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.394fe2		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.394fe4		c2 20		rep #$20	                REP #$20        ; set A long
.394fe6		38		sec		                SEC                         ; Count down the number of bytes left
.394fe7		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394fe9		e9 01 00	sbc #$0001	                SBC #1
.394fec		85 2c		sta $034c	                STA DOS_FILE_SIZE
.394fee		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.394ff0		e9 00 00	sbc #$0000	                SBC #0
.394ff3		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.394ff5		d0 04		bne $394ffb	                BNE continue
.394ff7		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.394ff9		f0 1b		beq $395016	                BEQ close_file              ; If not: we're done
.394ffb		c8		iny		continue        INY
.394ffc		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.394fff		d0 dd		bne $394fde	                BNE copy_loop               ; No: keep processing the bytes
.395001		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.395002		a5 34		lda $0354	                LDA DOS_DST_PTR
.395004		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395007		85 34		sta $0354	                STA DOS_DST_PTR
.395009		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.39500b		69 00 00	adc #$0000	                ADC #0
.39500e		85 36		sta $0356	                STA DOS_DST_PTR+2
.395010		22 d8 4b 39	jsl $394bd8	                JSL IF_READ                 ; Yes: load the next cluster
.395014		b0 c5		bcs $394fdb	                BCS copy_cluster            ; And start copying it
.395016						close_file
.395016		82 f5 00	brl $39510e	ret_success     BRL IF_SUCCESS
.395019						IF_NULLBUFFER
.395019		5a		phy		                PHY
.39501a		8b		phb		                PHB
.39501b		0b		phd		                PHD
.39501c		08		php		                PHP
.39501d		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.395020		ab		plb		                PLB
.395021		ab		plb		                PLB
.395022		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395025		2b		pld		                PLD
.395026		c2 30		rep #$30	                REP #$30        ; set A&X long
.395028		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.39502b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39502d		85 28		sta $0348	                STA DOS_TEMP
.39502f		c8		iny		                INY
.395030		c8		iny		                INY
.395031		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395033		85 2a		sta $034a	                STA DOS_TEMP+2
.395035		a0 00 00	ldy #$0000	                LDY #0
.395038		a9 00 00	lda #$0000	                LDA #0
.39503b		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.39503d		c8		iny		                INY
.39503e		c8		iny		                INY
.39503f		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.395042		d0 f7		bne $39503b	                BNE loop
.395044		28		plp		                PLP
.395045		2b		pld		                PLD
.395046		ab		plb		                PLB
.395047		7a		ply		                PLY
.395048		6b		rtl		                RTL
.395049						IF_COPY2BUFF
.395049		5a		phy		                PHY
.39504a		8b		phb		                PHB
.39504b		0b		phd		                PHD
.39504c		08		php		                PHP
.39504d		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.395050		ab		plb		                PLB
.395051		ab		plb		                PLB
.395052		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395055		2b		pld		                PLD
.395056		c2 30		rep #$30	                REP #$30        ; set A&X long
.395058		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.39505b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39505d		85 28		sta $0348	                STA DOS_TEMP
.39505f		c8		iny		                INY
.395060		c8		iny		                INY
.395061		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395063		85 2a		sta $034a	                STA DOS_TEMP+2
.395065		a0 00 00	ldy #$0000	                LDY #0
.395068						copy_loop
.395068		e2 20		sep #$20	                SEP #$20        ; set A short
.39506a		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.39506c		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.39506e		c2 20		rep #$20	                REP #$20        ; set A long
.395070		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.395072		d0 02		bne $395076	                BNE adv_dest
.395074		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395076		c8		iny		adv_dest        INY                         ; Count it
.395077		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.39507a		f0 0c		beq $395088	                BEQ done                    ; Yes: we're done
.39507c		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.39507e		c5 38		cmp $0358	                CMP DOS_END_PTR
.395080		d0 e6		bne $395068	                BNE copy_loop               ; No: keep copying
.395082		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395084		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395086		d0 e0		bne $395068	                BNE copy_loop
.395088		28		plp		done            PLP
.395089		2b		pld		                PLD
.39508a		ab		plb		                PLB
.39508b		7a		ply		                PLY
.39508c		6b		rtl		                RTL
.39508d						IF_SAVE
.39508d		da		phx		                PHX
.39508e		5a		phy		                PHY
.39508f		0b		phd		                PHD
.395090		8b		phb		                PHB
.395091		08		php		                PHP
.395092		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.395095		ab		plb		                PLB
.395096		ab		plb		                PLB
.395097		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.39509a		2b		pld		                PLD
.39509b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39509d		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.3950a0		38		sec		                SEC
.3950a1		a5 38		lda $0358	                LDA DOS_END_PTR
.3950a3		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.3950a5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950a7		c8		iny		                INY
.3950a8		c8		iny		                INY
.3950a9		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.3950ab		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.3950ad		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950af		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.3950b2		18		clc		                CLC
.3950b3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950b5		69 01 00	adc #$0001	                ADC #1
.3950b8		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950ba		90 09		bcc $3950c5	                BCC first_block
.3950bc		c8		iny		                INY
.3950bd		c8		iny		                INY
.3950be		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3950c0		69 00 00	adc #$0000	                ADC #0
.3950c3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950c5		22 19 50 39	jsl $395019	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3950c9		22 49 50 39	jsl $395049	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.3950cd		22 80 4b 39	jsl $394b80	                JSL IF_CREATE           ; Create file.
.3950d1		b0 03		bcs $3950d6	                BCS check_for_end
.3950d3		82 31 00	brl $395107	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.3950d6		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.3950d8		c5 38		cmp $0358	                CMP DOS_END_PTR
.3950da		d0 06		bne $3950e2	                BNE next_block
.3950dc		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.3950de		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.3950e0		f0 1d		beq $3950ff	                BEQ done                ; Yes: we're done
.3950e2		22 19 50 39	jsl $395019	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.3950e6		22 49 50 39	jsl $395049	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.3950ea		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.3950ed		a9 00 00	lda #$0000	                LDA #0
.3950f0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950f2		c8		iny		                INY
.3950f3		c8		iny		                INY
.3950f4		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3950f6		22 32 4c 39	jsl $394c32	                JSL IF_WRITE            ; Append to the file
.3950fa		b0 da		bcs $3950d6	                BCS check_for_end       ; And try again
.3950fc		82 08 00	brl $395107	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.3950ff		5c 0e 51 39	jmp $39510e	done            JML IF_SUCCESS
.395103						IF_FAILURE
.395103		e2 20		sep #$20	                SEP #$20        ; set A short
.395105		85 0e		sta $032e	                STA DOS_STATUS
.395107		28		plp		IF_PASSFAILURE  PLP
.395108		18		clc		                CLC
.395109		ab		plb		                PLB
.39510a		2b		pld		                PLD
.39510b		7a		ply		                PLY
.39510c		fa		plx		                PLX
.39510d		6b		rtl		                RTL
.39510e						IF_SUCCESS
.39510e		e2 20		sep #$20	                SEP #$20        ; set A short
.395110		64 00		stz $0320	                STZ BIOS_STATUS
.395112		64 0e		stz $032e	                STZ DOS_STATUS
.395114		28		plp		                PLP
.395115		38		sec		                SEC
.395116		ab		plb		                PLB
.395117		2b		pld		                PLD
.395118		7a		ply		                PLY
.395119		fa		plx		                PLX
.39511a		6b		rtl		                RTL
.39511b						IF_RUN
.39511b		da		phx		                PHX
.39511c		5a		phy		                PHY
.39511d		0b		phd		                PHD
.39511e		8b		phb		                PHB
.39511f		08		php		                PHP
.395120		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395123		ab		plb		                PLB
.395124		ab		plb		                PLB
.395125		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395128		2b		pld		                PLD
.395129		e2 20		sep #$20	                SEP #$20        ; set A short
.39512b		c2 10		rep #$10	                REP #$10        ; set X long
.39512d		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.39512f		a2 00 00	ldx #$0000	                LDX #0
.395132		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.395136		e8		inx		                INX
.395137		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.39513a		d0 f6		bne $395132	                BNE clr_fd_loop
.39513c		c2 20		rep #$20	                REP #$20        ; set A long
.39513e		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.395141		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.395145		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.395148		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.39514c		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.39514e		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.395152		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395154		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395158		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.39515b		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.39515d		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39515f		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.395162		85 20		sta $0340	                STA DOS_FD_PTR
.395164		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.395167		85 22		sta $0342	                STA DOS_FD_PTR+2
.395169		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.39516c		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395170		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.395174		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.395178		b0 03		bcs $39517d	                BCS chk_execute
.39517a		82 8a ff	brl $395107	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.39517d						chk_execute
.39517d		c2 20		rep #$20	                REP #$20        ; set A long
.39517f		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.395181		d0 0b		bne $39518e	                BNE try_execute                         ; If so: call it
.395183		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.395185		d0 07		bne $39518e	                BNE try_execute
.395187		e2 20		sep #$20	                SEP #$20        ; set A short
.395189		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.39518b		82 75 ff	brl $395103	                BRL IF_FAILURE
.39518e						try_execute
.39518e		e2 20		sep #$20	                SEP #$20        ; set A short
.395190		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.395192		48		pha		                PHA
.395193		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.395195		48		pha		                PHA
.395196		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.395198		48		pha		                PHA
.395199		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.39519b		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.39519d		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.3951a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3951a3		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.3951a4		68		pla		                PLA
.3951a5		68		pla		                PLA
.3951a6		82 65 ff	brl $39510e	                BRL IF_SUCCESS                          ; Return success
.3951a9						IF_ALLOCFD
.3951a9		da		phx		                PHX
.3951aa		5a		phy		                PHY
.3951ab		0b		phd		                PHD
.3951ac		8b		phb		                PHB
.3951ad		08		php		                PHP
.3951ae		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3951b1		ab		plb		                PLB
.3951b2		ab		plb		                PLB
.3951b3		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3951b6		2b		pld		                PLD
.3951b7		c2 10		rep #$10	                REP #$10        ; set X long
.3951b9		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.3951bc						chk_fd
.3951bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3951be		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.3951c1		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.3951c3		f0 14		beq $3951d9	                BEQ found                           ; No: flag and return the found descriptor
.3951c5						next_fd
.3951c5		c2 20		rep #$20	                REP #$20        ; set A long
.3951c7		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.3951c8		18		clc		                CLC
.3951c9		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.3951cc		aa		tax		                TAX
.3951cd		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.3951d0		90 ea		bcc $3951bc	                BLT chk_fd                          ; No: check this new file descriptor
.3951d2		e2 20		sep #$20	                SEP #$20        ; set A short
.3951d4		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.3951d6		82 2a ff	brl $395103	                BRL IF_FAILURE
.3951d9		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.3951db		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.3951de		c2 20		rep #$20	                REP #$20        ; set A long
.3951e0		8a		txa		                TXA
.3951e1		18		clc		                CLC
.3951e2		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.3951e5		85 20		sta $0340	                STA @b DOS_FD_PTR
.3951e7		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3951ea		69 00 00	adc #$0000	                ADC #0
.3951ed		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3951ef		82 1c ff	brl $39510e	                BRL IF_SUCCESS                      ; Return this file descriptor
.3951f2						IF_FREEFD
.3951f2		da		phx		                PHX
.3951f3		5a		phy		                PHY
.3951f4		0b		phd		                PHD
.3951f5		8b		phb		                PHB
.3951f6		08		php		                PHP
.3951f7		f4 38 38	pea #$3838	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.3951fa		ab		plb		                PLB
.3951fb		ab		plb		                PLB
.3951fc		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3951ff		2b		pld		                PLD
.395200		e2 20		sep #$20	                SEP #$20        ; set A short
.395202		c2 10		rep #$10	                REP #$10        ; set X long
.395204		a9 00		lda #$00	                LDA #0
.395206		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.395208		82 03 ff	brl $39510e	                BRL IF_SUCCESS
.39520b						DOS_SRC2DST
.39520b		da		phx		                PHX
.39520c		5a		phy		                PHY
.39520d		0b		phd		                PHD
.39520e		8b		phb		                PHB
.39520f		08		php		                PHP
.395210		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395213		2b		pld		                PLD
.395214		c2 30		rep #$30	                REP #$30        ; set A&X long
.395216		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.395219		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.39521b		aa		tax		                TAX                                     ; X := source buffer address
.39521c		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.39521e		a8		tay		                TAY                                     ; Y := destination buffer address
.39521f		e2 20		sep #$20	                SEP #$20        ; set A short
.395221		a9 38		lda #$38	                LDA #`DOS_FILE_BUFFS
.395223		48		pha		                PHA
.395224		ab		plb		                PLB
.395225		c2 20		rep #$20	                REP #$20        ; set A long
.395227		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.39522a		f0 11		beq $39523d	loop            BEQ done
.39522c		48		pha		                PHA
.39522d		e2 20		sep #$20	                SEP #$20        ; set A short
.39522f		bd 00 00	lda $380000,x	                LDA #0,B,X
.395232		99 00 00	sta $380000,y	                STA #0,B,Y
.395235		c2 20		rep #$20	                REP #$20        ; set A long
.395237		68		pla		                PLA
.395238		3a		dec a		                DEC A
.395239		e8		inx		                INX
.39523a		c8		iny		                INY
.39523b		80 ed		bra $39522a	                BRA loop
.39523d		28		plp		done            PLP
.39523e		ab		plb		                PLB
.39523f		2b		pld		                PLD
.395240		7a		ply		                PLY
.395241		fa		plx		                PLX
.395242		6b		rtl		                RTL
.395243						IF_COPY
.395243		da		phx		                PHX
.395244		5a		phy		                PHY
.395245		0b		phd		                PHD
.395246		8b		phb		                PHB
.395247		08		php		                PHP
.395248		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39524b		ab		plb		                PLB
.39524c		ab		plb		                PLB
.39524d		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395250		2b		pld		                PLD
.395251		22 a9 51 39	jsl $3951a9	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395255		b0 03		bcs $39525a	                BCS set_src_path
.395257		82 ad fe	brl $395107	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.39525a						set_src_path
.39525a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39525c		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.39525f		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395261		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395263		c8		iny		                INY
.395264		c8		iny		                INY
.395265		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395267		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395269						alloc_dest
.395269		c2 30		rep #$30	                REP #$30        ; set A&X long
.39526b		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.39526d		85 30		sta $0350	                STA @b DOS_SRC_PTR
.39526f		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395271		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395273		22 a9 51 39	jsl $3951a9	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395277		b0 0f		bcs $395288	                BCS set_paths                   ; If everything is ok... start setting the paths
.395279		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39527b		85 20		sta $0340	                STA @b DOS_FD_PTR
.39527d		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39527f		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395281		22 f2 51 39	jsl $3951f2	                JSL IF_FREEFD                   ; And free it
.395285		82 7f fe	brl $395107	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395288						set_paths
.395288		c2 30		rep #$30	                REP #$30        ; set A&X long
.39528a		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.39528c		85 34		sta $0354	                STA @b DOS_DST_PTR
.39528e		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395290		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395292		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395295		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395297		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395299		c8		iny		                INY
.39529a		c8		iny		                INY
.39529b		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.39529d		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39529f		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3952a1		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952a3		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3952a5		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952a7		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.3952ab		b0 10		bcs $3952bd	                BCS src_open                    ; If success, work with the openned file
.3952ad		00		brk #		                BRK
.3952ae		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3952b0		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952b2		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3952b4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952b6		22 f2 51 39	jsl $3951f2	                JSL IF_FREEFD                   ; And free it
.3952ba		82 bc ff	brl $395279	                BRL err_free_src_fd             ; Free the source file descriptor
.3952bd		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.3952c0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3952c2		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3952c4		c8		iny		                INY
.3952c5		c8		iny		                INY
.3952c6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3952c8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3952ca		22 0b 52 39	jsl $39520b	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.3952ce		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3952d0		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952d2		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3952d4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952d6		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.3952da		b0 0f		bcs $3952eb	                BCS read_next                   ; If sucessful, try to get the next cluster
.3952dc		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3952de		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952e0		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3952e2		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952e4		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.3952e8		82 c3 ff	brl $3952ae	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.3952eb						read_next
.3952eb		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3952ed		85 20		sta $0340	                STA @b DOS_FD_PTR
.3952ef		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3952f1		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3952f3		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.3952f7		b0 19		bcs $395312	                BCS copy2dest                   ; If successful, copy the sector
.3952f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3952fb		a5 0e		lda $032e	                LDA @b DOS_STATUS
.3952fd		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.3952ff		f0 32		beq $395333	                BEQ file_copied                 ; Yes: we're done copying
.395301						err_dest_close
.395301		c2 20		rep #$20	                REP #$20        ; set A long
.395303		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395305		85 20		sta $0340	                STA @b DOS_FD_PTR
.395307		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395309		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39530b		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.39530f		82 ca ff	brl $3952dc	                BRL err_src_close               ; Close the source and throw an error
.395312						copy2dest
.395312		22 0b 52 39	jsl $39520b	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.395316		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.395319		a9 00 00	lda #$0000	                LDA #0
.39531c		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39531e		c8		iny		                INY
.39531f		c8		iny		                INY
.395320		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395322		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395324		85 20		sta $0340	                STA @b DOS_FD_PTR
.395326		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395328		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39532a		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.39532e		90 d1		bcc $395301	                BCC err_dest_close              ; If error: close all files and throw the error
.395330		82 b8 ff	brl $3952eb	                BRL read_next                   ; Otherwise: repeat the loop
.395333						file_copied
.395333		c2 20		rep #$20	                REP #$20        ; set A long
.395335		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395337		85 20		sta $0340	                STA @b DOS_FD_PTR
.395339		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39533b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39533d		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395341		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395343		85 20		sta $0340	                STA @b DOS_FD_PTR
.395345		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395347		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395349		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.39534d		82 be fd	brl $39510e	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/uart.asm

=$af13f8					    UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8					    UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395350						UART_SELECT
.395350		08		php		            PHP
.395351		c2 20		rep #$20	                REP #$20        ; set A long
.395353		c9 02 00	cmp #$0002	            CMP #2
.395356		f0 07		beq $39535f	            BEQ is_COM2
.395358		c2 20		rep #$20	                REP #$20        ; set A long
.39535a		a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.39535d		80 05		bra $395364	            BRA setaddr
.39535f						is_COM2
.39535f		c2 20		rep #$20	                REP #$20        ; set A long
.395361		a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395364		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395368		e2 20		sep #$20	                SEP #$20        ; set A short
.39536a		a9 af		lda #$af	            LDA #`UART1_BASE
.39536c		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395370		28		plp		            PLP
.395371		6b		rtl		            RTL
.395372						UART_SETBPS
.395372		08		php		            PHP
.395373		0b		phd		            PHD
.395374		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.395377		2b		pld		                PLD
.395378		c2 30		rep #$30	                REP #$30        ; set A&X long
.39537a		48		pha		            PHA
.39537b		e2 20		sep #$20	                SEP #$20        ; set A short
.39537d		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395380		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395382		09 80		ora #$80	            ORA #LCR_DLB
.395384		97 00		sta [$0700],y	            STA [CURRUART],Y
.395386		c2 20		rep #$20	                REP #$20        ; set A long
.395388		68		pla		            PLA
.395389		a0 00 00	ldy #$0000	            LDY #UART_DLL
.39538c		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.39538e		e2 20		sep #$20	                SEP #$20        ; set A short
.395390		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395393		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395395		49 80		eor #$80	            EOR #LCR_DLB
.395397		97 00		sta [$0700],y	            STA [CURRUART],Y
.395399		2b		pld		            PLD
.39539a		28		plp		            PLP
.39539b		6b		rtl		            RTL
.39539c						UART_SETLCR
.39539c		08		php		            PHP
.39539d		0b		phd		            PHD
.39539e		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.3953a1		2b		pld		                PLD
.3953a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3953a4		c2 10		rep #$10	                REP #$10        ; set X long
.3953a6		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.3953a8		a0 03 00	ldy #$0003	            LDY #UART_LCR
.3953ab		97 00		sta [$0700],y	            STA [CURRUART],Y
.3953ad		2b		pld		            PLD
.3953ae		28		plp		            PLP
.3953af		6b		rtl		            RTL
.3953b0						UART_INIT
.3953b0		08		php		            PHP
.3953b1		0b		phd		            PHD
.3953b2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953b4		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.3953b7		2b		pld		                PLD
.3953b8		a9 01 00	lda #$0001	            LDA #UART_115200
.3953bb		22 72 53 39	jsl $395372	            JSL UART_SETBPS
.3953bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3953c1		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3953c3		22 9c 53 39	jsl $39539c	            JSL UART_SETLCR
.3953c7		a9 e1		lda #$e1	            LDA #%11100001
.3953c9		a0 02 00	ldy #$0002	            LDY #UART_FCR
.3953cc		97 00		sta [$0700],y	            STA [CURRUART],Y
.3953ce		2b		pld		            PLD
.3953cf		28		plp		            PLP
.3953d0		6b		rtl		            RTL
.3953d1						UART_HASBYT
.3953d1		08		php		            PHP
.3953d2		0b		phd		            PHD
.3953d3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953d5		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.3953d8		2b		pld		                PLD
.3953d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3953db		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3953de		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3953e0		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3953e2		d0 04		bne $3953e8	            BNE ret_true            ; If flag is set, return true
.3953e4		2b		pld		ret_false   PLD                     ; Return false
.3953e5		28		plp		            PLP
.3953e6		18		clc		            CLC
.3953e7		6b		rtl		            RTL
.3953e8		2b		pld		ret_true    PLD                     ; Return true
.3953e9		28		plp		            PLP
.3953ea		38		sec		            SEC
.3953eb		6b		rtl		            RTL
.3953ec						UART_GETC
.3953ec		08		php		            PHP
.3953ed		0b		phd		            PHD
.3953ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953f0		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.3953f3		2b		pld		                PLD
.3953f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3953f6		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3953f9		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.3953fb		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3953fd		f0 fa		beq $3953f9	            BEQ wait_getc           ; If the flag is clear, wait
.3953ff		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395402		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395404		2b		pld		            PLD
.395405		28		plp		            PLP
.395406		6b		rtl		            RTL
.395407						UART_PUTC
.395407		08		php		            PHP
.395408		0b		phd		            PHD
.395409		c2 30		rep #$30	                REP #$30        ; set A&X long
.39540b		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.39540e		2b		pld		                PLD
.39540f		e2 20		sep #$20	                SEP #$20        ; set A short
.395411		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395412		a0 05 00	ldy #$0005	            LDY #UART_LSR
.395415		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.395417		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.395419		f0 fa		beq $395415	            BEQ wait_putc
.39541b		68		pla		            PLA
.39541c		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.39541f		97 00		sta [$0700],y	            STA [CURRUART],Y
.395421		2b		pld		            PLD
.395422		28		plp		            PLP
.395423		6b		rtl		            RTL
.395424						UART_PUTS
.395424		08		php		            PHP
.395425		e2 20		sep #$20	                SEP #$20        ; set A short
.395427		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.39542a		f0 07		beq $395433	            BEQ done
.39542c		22 07 54 39	jsl $395407	            JSL UART_PUTC
.395430		e8		inx		            INX
.395431		80 f4		bra $395427	            BRA put_loop
.395433		28		plp		done        PLP
.395434		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Joystick.asm

.395435						JOYSTICK_SET_NES_MODE
.395435		e2 20		sep #$20	                SEP #$20        ; set A short
.395437		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39543b		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.39543d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395441		6b		rtl		          RTL
.395442						JOYSTICK_SET_SNES_MODE
.395442		e2 20		sep #$20	                SEP #$20        ; set A short
.395444		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395448		29 fb		and #$fb	          AND #~NES_SNES_JOY
.39544a		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.39544c		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395450		6b		rtl		          RTL
.395451						JOYSTICK_ENABLE_NES_SNES_PORT0
.395451		e2 20		sep #$20	                SEP #$20        ; set A short
.395453		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395457		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395459		09 01		ora #$01	          ORA #NES_SNES_EN0
.39545b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39545f		6b		rtl		          RTL
.395460						JOYSTICK_ENABLE_NES_SNES_PORT1
.395460		e2 20		sep #$20	                SEP #$20        ; set A short
.395462		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395466		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395468		09 02		ora #$02	          ORA #NES_SNES_EN1
.39546a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39546e		6b		rtl		          RTL
.39546f						JOYSTICK_DISABLE_NES_SNES_PORT0
.39546f		e2 20		sep #$20	                SEP #$20        ; set A short
.395471		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395475		29 fe		and #$fe	          AND #~NES_SNES_EN0
.395477		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39547b		6b		rtl		          RTL
.39547c						JOYSTICK_DISABLE_NES_SNES_PORT1
.39547c		e2 20		sep #$20	                SEP #$20        ; set A short
.39547e		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395482		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395484		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395488		6b		rtl		          RTL
.395489						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.395489		e2 20		sep #$20	                SEP #$20        ; set A short
.39548b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39548f		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395491		c9 00		cmp #$00	          CMP #$00
.395493		f0 14		beq $3954a9	          BEQ END_OF_JOYSTICK_POLL
.395495		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395499		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.39549b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39549f						JOYSTICK_POLLING_ISNOTOVER
.39549f		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.3954a3		29 40		and #$40	          AND #NES_SNES_DONE
.3954a5		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.3954a7		d0 f6		bne $39549f	          BNE JOYSTICK_POLLING_ISNOTOVER
.3954a9						END_OF_JOYSTICK_POLL
.3954a9		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.3954aa						SDC_WAITBUSY
.3954aa		08		php		                PHP
.3954ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3954ad		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.3954b1		29 01		and #$01	                AND #SDC_TRANS_BUSY
.3954b3		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.3954b5		f0 f6		beq $3954ad	                BEQ wait_xact
.3954b7		28		plp		                PLP
.3954b8		6b		rtl		                RTL
.3954b9						SDC_RESET
.3954b9		08		php		                PHP
.3954ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3954bc		a9 01		lda #$01	                LDA #1
.3954be		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.3954c2		28		plp		                PLP
.3954c3		6b		rtl		                RTL
.3954c4						SDC_INIT
.3954c4		0b		phd		                PHD
.3954c5		8b		phb		                PHB
.3954c6		08		php		                PHP
.3954c7		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3954ca		ab		plb		                PLB
.3954cb		ab		plb		                PLB
.3954cc		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3954cf		2b		pld		                PLD
.3954d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3954d2		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.3954d4		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.3954d8		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3954da		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3954de		22 aa 54 39	jsl $3954aa	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.3954e2		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3954e6		d0 07		bne $3954ef	                BNE ret_error                       ; Is there one? Process the error
.3954e8		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.3954ea		28		plp		                PLP
.3954eb		ab		plb		                PLB
.3954ec		2b		pld		                PLD
.3954ed		38		sec		                SEC
.3954ee		6b		rtl		                RTL
.3954ef		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.3954f2		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.3954f4		85 00		sta $0320	set_error       STA BIOS_STATUS
.3954f6		28		plp		                PLP
.3954f7		ab		plb		                PLB
.3954f8		2b		pld		                PLD
.3954f9		18		clc		                CLC
.3954fa		6b		rtl		                RTL
.3954fb						SDC_GETBLOCK
.3954fb		0b		phd		                PHD
.3954fc		8b		phb		                PHB
.3954fd		08		php		                PHP
.3954fe		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395501		ab		plb		                PLB
.395502		ab		plb		                PLB
.395503		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395506		2b		pld		                PLD
.395507		e2 20		sep #$20	                SEP #$20        ; set A short
.395509		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.39550d		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.39550f		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395513		a9 00		lda #$00	                LDA #0
.395515		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395519		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.39551b		0a		asl a		                ASL A
.39551c		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395520		a5 03		lda $0323	                LDA BIOS_LBA+1
.395522		2a		rol a		                ROL A
.395523		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395527		a5 04		lda $0324	                LDA BIOS_LBA+2
.395529		2a		rol a		                ROL A
.39552a		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.39552e		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.395530		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395534		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395536		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.39553a		22 aa 54 39	jsl $3954aa	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.39553e		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395542		d0 36		bne $39557a	                BNE ret_error                       ; Is there one? Process the error
.395544		e2 20		sep #$20	                SEP #$20        ; set A short
.395546		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.39554a		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.39554c		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.395550		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.395552		c2 10		rep #$10	                REP #$10        ; set X long
.395554		a0 00 00	ldy #$0000	                LDY #0
.395557		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.39555b		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.39555d		c8		iny		                INY                                 ; Advance to the next byte
.39555e		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395561		d0 f4		bne $395557	                BNE loop_rd                         ; No: keep reading
.395563		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395567		d0 11		bne $39557a	                BNE ret_error                       ; Is there one? Process the error
.395569		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.39556b		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.39556f		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395571		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395575		28		plp		                PLP
.395576		ab		plb		                PLB
.395577		2b		pld		                PLD
.395578		38		sec		                SEC
.395579		6b		rtl		                RTL
.39557a		a9 82		lda #$82	ret_error       LDA #BIOS_ERR_READ                  ; Return a read error
.39557c		85 00		sta $0320	                STA BIOS_STATUS
.39557e		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395582		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395584		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395588		28		plp		                PLP
.395589		ab		plb		                PLB
.39558a		2b		pld		                PLD
.39558b		18		clc		                CLC
.39558c		6b		rtl		                RTL
.39558d						SDC_PUTBLOCK
.39558d		0b		phd		                PHD
.39558e		8b		phb		                PHB
.39558f		08		php		                PHP
.395590		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395593		ab		plb		                PLB
.395594		ab		plb		                PLB
.395595		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395598		2b		pld		                PLD
.395599		e2 20		sep #$20	                SEP #$20        ; set A short
.39559b		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.39559f		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.3955a1		f0 04		beq $3955a7	                BEQ led_on                          ; Yes: start the transaction
.3955a3		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.3955a5		80 65		bra $39560c	                BRA save_error
.3955a7		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.3955ab		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.3955ad		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3955b1		c2 10		rep #$10	                REP #$10        ; set X long
.3955b3		a0 00 00	ldy #$0000	                LDY #0
.3955b6		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.3955b8		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.3955bc		c8		iny		                INY                                 ; Advance to the next byte
.3955bd		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.3955c0		d0 f4		bne $3955b6	                BNE loop_wr                         ; No: keep writing
.3955c2		a9 00		lda #$00	                LDA #0
.3955c4		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.3955c8		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.3955ca		0a		asl a		                ASL A
.3955cb		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.3955cf		a5 03		lda $0323	                LDA BIOS_LBA+1
.3955d1		2a		rol a		                ROL A
.3955d2		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.3955d6		a5 04		lda $0324	                LDA BIOS_LBA+2
.3955d8		2a		rol a		                ROL A
.3955d9		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.3955dd		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.3955df		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.3955e3		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3955e5		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3955e9		22 aa 54 39	jsl $3954aa	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.3955ed		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3955f1		8d 06 03	sta $0306	                STA FDC_ST0                         ; Save any to the hardware status byte
.3955f4		d0 14		bne $39560a	                BNE ret_error                       ; Is there one? Process the error
.3955f6		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.3955f8		9c 06 03	stz $0306	                STZ FDC_ST0
.3955fb		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3955ff		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395601		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395605		28		plp		                PLP
.395606		ab		plb		                PLB
.395607		2b		pld		                PLD
.395608		38		sec		                SEC
.395609		6b		rtl		                RTL
.39560a		a9 83		lda #$83	ret_error       LDA #BIOS_ERR_WRITE                 ; Return a write error
.39560c		85 00		sta $0320	save_error      STA BIOS_STATUS
.39560e		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395612		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395614		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395618		28		plp		                PLP
.395619		ab		plb		                PLB
.39561a		2b		pld		                PLD
.39561b		18		clc		                CLC
.39561c		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.39561d						FDC_TEST
.39561d		8b		phb		                    PHB
.39561e		0b		phd		                    PHD
.39561f		08		php		                    PHP
.395620		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395623		ab		plb		                PLB
.395624		ab		plb		                PLB
.395625		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395628		2b		pld		                PLD
.395629		e2 20		sep #$20	                SEP #$20        ; set A short
.39562b		a9 f0		lda #$f0	                    LDA #$F0
.39562d		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395630		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.395634		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.395638		c2 30		rep #$30	                REP #$30        ; set A&X long
.39563a		22 df 58 39	jsl $3958df	                    JSL FDC_Init
.39563e		b0 03		bcs $395643	                    BCS init_ok
.395640		82 20 00	brl $395663	                    BRL motor_off
.395643		22 4e 5f 39	jsl $395f4e	init_ok             JSL FDC_CHK_MEDIA
.395647		90 03		bcc $39564c	                    BCC no_media
.395649		82 03 00	brl $39564f	                    BRL is_ok1
.39564c						no_media
.39564c		82 14 00	brl $395663	                    BRL motor_off
.39564f		22 f7 5d 39	jsl $395df7	is_ok1              JSL FDC_MOUNT
.395653		90 03		bcc $395658	                    BCC mount_err
.395655		82 03 00	brl $39565b	                    BRL is_ok2
.395658						mount_err
.395658		82 08 00	brl $395663	                    BRL motor_off
.39565b		22 6f 56 39	jsl $39566f	is_ok2              JSL FDC_TEST_PUTBLOCK
.39565f		b0 02		bcs $395663	                    BCS all_ok
.395661		80 00		bra $395663	                    BRA motor_off
.395663						all_ok
.395663		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.395667		22 8f 59 39	jsl $39598f	                    JSL FDC_Motor_Off
.39566b		28		plp		                    PLP
.39566c		2b		pld		                    PLD
.39566d		ab		plb		                    PLB
.39566e		6b		rtl		                    RTL
.39566f						FDC_TEST_PUTBLOCK
.39566f		e2 20		sep #$20	                SEP #$20        ; set A short
.395671		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395673		a2 00 00	ldx #$0000	                    LDX #0
.395676		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.39567a		1a		inc a		                    INC A
.39567b		e8		inx		                    INX
.39567c		e0 00 02	cpx #$0200	                    CPX #512
.39567f		d0 f5		bne $395676	                    BNE init_loop
.395681		c2 20		rep #$20	                REP #$20        ; set A long
.395683		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395686		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.39568a		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.39568d		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395691		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395694		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395698		a9 00 00	lda #$0000	                    LDA #0
.39569b		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.39569f		22 96 5d 39	jsl $395d96	                    JSL FDC_PUTBLOCK                ; Try to write the data
.3956a3		6b		rtl		                    RTL
>3956a4		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>3956ac		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>3956bc		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.3956c0						FDC_Check_RQM
.3956c0		0b		phd		                    PHD
.3956c1		08		php		                    PHP
.3956c2		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3956c5		2b		pld		                PLD
.3956c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3956c8		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.3956ca		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.3956ce		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.3956d0		30 12		bmi $3956e4	                    BMI time_out            ; If so: signal a time out
.3956d2		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3956d6		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.3956d8		f0 f4		beq $3956ce	                    BEQ loop
.3956da		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.3956dc		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.3956e0		28		plp		                    PLP
.3956e1		2b		pld		                    PLD
.3956e2		38		sec		                    SEC
.3956e3		60		rts		                    RTS
.3956e4		28		plp		time_out            PLP
.3956e5		2b		pld		                    PLD
.3956e6		18		clc		                    CLC
.3956e7		60		rts		                    RTS
.3956e8						FDC_Check_DRV0_BSY
.3956e8		0b		phd		                    PHD
.3956e9		08		php		                    PHP
.3956ea		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3956ed		2b		pld		                PLD
.3956ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3956f0		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.3956f2		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.3956f6		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.3956f8		30 12		bmi $39570c	                    BMI time_out            ; If so: signal a time out
.3956fa		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.3956fe		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395700		d0 f4		bne $3956f6	                    BNE loop
.395702		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395704		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.395708		28		plp		                    PLP
.395709		2b		pld		                    PLD
.39570a		38		sec		                    SEC
.39570b		60		rts		                    RTS
.39570c		28		plp		time_out            PLP
.39570d		2b		pld		                    PLD
.39570e		18		clc		                    CLC
.39570f		60		rts		                    RTS
.395710						FDC_Check_CMD_BSY
.395710		0b		phd		                    PHD
.395711		08		php		                    PHP
.395712		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395715		2b		pld		                PLD
.395716		e2 20		sep #$20	                SEP #$20        ; set A short
.395718		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39571a		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.39571e		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395720		30 12		bmi $395734	                    BMI time_out            ; If so: signal a time out
.395722		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395726		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395728		d0 f4		bne $39571e	                    BNE loop
.39572a		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.39572c		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.395730		28		plp		                    PLP
.395731		2b		pld		                    PLD
.395732		38		sec		                    SEC
.395733		60		rts		                    RTS
.395734		28		plp		time_out            PLP
.395735		2b		pld		                    PLD
.395736		18		clc		                    CLC
.395737		60		rts		                    RTS
.395738						FDC_Can_Read_Data
.395738		0b		phd		                    PHD
.395739		08		php		                    PHP
.39573a		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.39573d		2b		pld		                PLD
.39573e		e2 20		sep #$20	                SEP #$20        ; set A short
.395740		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395742		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.395746		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395748		30 14		bmi $39575e	                    BMI time_out            ; If so: signal a time out
.39574a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.39574e		29 40		and #$40	                    AND #FDC_MSR_DIO
.395750		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395752		d0 f2		bne $395746	                    BNE loop
.395754		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395756		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.39575a		28		plp		                    PLP
.39575b		2b		pld		                    PLD
.39575c		38		sec		                    SEC
.39575d		60		rts		                    RTS
.39575e		28		plp		time_out            PLP
.39575f		2b		pld		                    PLD
.395760		18		clc		                    CLC
.395761		60		rts		                    RTS
.395762						FDC_CAN_WRITE
.395762		0b		phd		                    PHD
.395763		08		php		                    PHP
.395764		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395767		2b		pld		                PLD
.395768		e2 20		sep #$20	                SEP #$20        ; set A short
.39576a		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.39576c		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.395770		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395772		30 14		bmi $395788	                    BMI time_out            ; If so: signal a time out
.395774		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395778		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39577a		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.39577c		d0 f2		bne $395770	                    BNE loop
.39577e		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395780		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.395784		28		plp		                    PLP
.395785		2b		pld		                    PLD
.395786		38		sec		                    SEC
.395787		60		rts		                    RTS
.395788		28		plp		time_out            PLP
.395789		2b		pld		                    PLD
.39578a		18		clc		                    CLC
.39578b		60		rts		                    RTS
.39578c						FDC_DELAY_10MS
.39578c		da		phx		                    PHX
.39578d		08		php		                    PHP
.39578e		c2 10		rep #$10	                REP #$10        ; set X long
.395790		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395793		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395794		ca		dex		                    DEX
.395795		e0 00 00	cpx #$0000	                    CPX #0
.395798		d0 f9		bne $395793	                    BNE loop
.39579a		28		plp		                    PLP
.39579b		fa		plx		                    PLX
.39579c		6b		rtl		                    RTL
.39579d						FDC_COMMAND
.39579d		da		phx		                    PHX
.39579e		8b		phb		                    PHB
.39579f		0b		phd		                    PHD
.3957a0		08		php		                    PHP
.3957a1		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3957a4		ab		plb		                PLB
.3957a5		ab		plb		                PLB
.3957a6		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3957a9		2b		pld		                PLD
.3957aa		22 8c 57 39	jsl $39578c	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.3957ae		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3957b0		a2 00		ldx #$00	                    LDX #0
.3957b2		a9 00		lda #$00	                    LDA #0
.3957b4		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.3957b7		e8		inx		                    INX
.3957b8		e0 10		cpx #$10	                    CPX #16
.3957ba		d0 f8		bne $3957b4	                    BNE clr_results
.3957bc		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.3957c0		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.3957c2		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.3957c4		f0 04		beq $3957ca	                    BEQ start_send                          ; If so, start sending
.3957c6		22 df 58 39	jsl $3958df	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.3957ca						start_send
.3957ca		e2 10		sep #$10	                SEP #$10        ; set X short
.3957cc		a2 00		ldx #$00	                    LDX #0
.3957ce		20 c0 56	jsr $3956c0	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.3957d1		b0 03		bcs $3957d6	                    BCS send_param
.3957d3		82 5e 00	brl $395834	                    BRL time_out                            ; If there was a timeout, flag the time out
.3957d6		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.3957d9		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.3957dd		22 8c 57 39	jsl $39578c	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.3957e1		e8		inx		                    INX                                     ; Advance to the next byte
.3957e2		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.3957e5		d0 e7		bne $3957ce	                    BNE send_loop                           ; Keep sending until we've sent them all
.3957e7		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.3957ea		d0 03		bne $3957ef	                    BNE chk_data_dir
.3957ec		82 80 00	brl $39586f	                    BRL result_phase                        ; If 0: we just want a result
.3957ef		10 3c		bpl $39582d	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.3957f1						wr_data
.3957f1		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.3957f3		30 03		bmi $3957f8	                    BMI wr_chk_rqm
.3957f5		82 3c 00	brl $395834	                    BRL time_out                            ; If not, raise an error
.3957f8		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.3957fc		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.3957fe		f0 f1		beq $3957f1	                    BEQ wr_data_rdy
.395800		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395802		d0 03		bne $395807	                    BNE wr_data_phase                       ; If so: transfer the data
.395804		82 68 00	brl $39586f	                    BRL result_phase                          ; If not: it's an error
.395807						wr_data_phase
.395807		c2 10		rep #$10	                REP #$10        ; set X long
.395809		a0 00 00	ldy #$0000	                    LDY #0
.39580c		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.39580e		30 03		bmi $395813	                    BMI wr_chk_nondma
.395810		82 21 00	brl $395834	                    BRL time_out                            ; If not, raise an error
.395813		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395817		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395819		f0 54		beq $39586f	                    BEQ result_phase                        ; If not: break out to result phase
.39581b		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.39581d		f0 ed		beq $39580c	                    BEQ wr_data_loop                        ; No: keep waiting
.39581f		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395821		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395825		c8		iny		                    INY                                     ; Move to the next position
.395826		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395829		d0 e1		bne $39580c	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.39582b		80 42		bra $39586f	                    BRA result_phase                        ; ready for the result phase
.39582d		20 38 57	jsr $395738	rd_data             JSR FDC_Can_Read_Data
.395830		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395832		30 07		bmi $39583b	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395834						time_out
.395834		e2 20		sep #$20	                SEP #$20        ; set A short
.395836		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395838		82 9c 00	brl $3958d7	                    BRL pass_error
.39583b		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.39583f		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395841		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395843		d0 eb		bne $395830	                    BNE rd_data_rdy
.395845		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395849		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.39584b		d0 03		bne $395850	                    BNE rd_data_phase                       ; If so: transfer the data
.39584d		82 83 00	brl $3958d3	                    BRL error                               ; If not: it's an error
.395850						rd_data_phase
.395850		c2 10		rep #$10	                REP #$10        ; set X long
.395852		a0 00 00	ldy #$0000	                    LDY #0
.395855		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395857		10 db		bpl $395834	                    BPL time_out                            ; If not: throw a timeout error
.395859		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.39585d		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.39585f		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395861		d0 f2		bne $395855	                    BNE rd_data_loop
.395863		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395867		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395869		c8		iny		                    INY                                     ; Move to the next position
.39586a		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.39586d		d0 e6		bne $395855	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.39586f		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395872		f0 34		beq $3958a8	                    BEQ chk_busy                            ; Then we're done
.395874		e2 10		sep #$10	                SEP #$10        ; set X short
.395876		a2 00		ldx #$00	                    LDX #0
.395878		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.39587a		22 71 39 39	jsl $393971	                    JSL ISETTIMEOUT
.39587e		20 38 57	jsr $395738	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395881		90 b1		bcc $395834	                    BCC time_out                            ; If there was a time out, raise an error
.395883		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395887		20 38 57	jsr $395738	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.39588a		90 a8		bcc $395834	                    BCC time_out                            ; If there was a time out, raise an error
.39588c		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395890		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395893		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM
.395896		90 9c		bcc $395834	                    BCC time_out                            ; If there was a time out, flag the error
.395898		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.39589c		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.39589e		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.3958a0		d0 06		bne $3958a8	                    BNE chk_busy
.3958a2		e8		inx		                    INX                                     ; Move to the next result positions
.3958a3		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.3958a6		d0 e4		bne $39588c	                    BNE read_result                         ; And keep looping until we've read all
.3958a8						chk_busy
.3958a8		c2 10		rep #$10	                REP #$10        ; set X long
.3958aa		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.3958ad		22 98 0f 39	jsl $390f98	                    JSL ILOOP_MS
.3958b1		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.3958b5		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.3958b7		f0 12		beq $3958cb	                    BEQ done                                ; If not set: we're done
.3958b9		20 38 57	jsr $395738	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.3958bc		b0 03		bcs $3958c1	                    BCS get_result_byte
.3958be		82 73 ff	brl $395834	                    BRL time_out                            ; If there was a time out, flag the error
.3958c1		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.3958c5		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.3958c8		e8		inx		                    INX
.3958c9		80 dd		bra $3958a8	                    BRA chk_busy                            ; And keep checking
.3958cb						done
.3958cb		64 20		stz $0320	                    STZ BIOS_STATUS
.3958cd		28		plp		                    PLP
.3958ce		2b		pld		                    PLD
.3958cf		ab		plb		                    PLB
.3958d0		fa		plx		                    PLX
.3958d1		38		sec		                    SEC
.3958d2		6b		rtl		                    RTL
.3958d3						error
.3958d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3958d5		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.3958d7		85 20		sta $0320	pass_error          STA BIOS_STATUS
.3958d9		28		plp		                    PLP
.3958da		2b		pld		                    PLD
.3958db		ab		plb		                    PLB
.3958dc		fa		plx		                    PLX
.3958dd		18		clc		                    CLC
.3958de		6b		rtl		                    RTL
.3958df						FDC_Init
.3958df		08		php		                    PHP
.3958e0		c2 10		rep #$10	                REP #$10        ; set X long
.3958e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3958e4		a9 00		lda #$00	                    LDA #0
.3958e6		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3958ea		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.3958ed		a0 00 00	ldy #$0000	                    LDY #0
.3958f0		22 a5 0f 39	jsl $390fa5	                    JSL IDELAY
.3958f4		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.3958f6		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.3958fa		ea		nop		                    NOP
.3958fb		ea		nop		                    NOP
.3958fc		ea		nop		                    NOP
.3958fd		ea		nop		                    NOP
.3958fe		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.395900		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.395904		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.395906		8f f8 13 af	sta $af13f8	                    STA @l SIO_FDC_CCR
.39590a		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.39590d		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.395910		22 a5 0f 39	jsl $390fa5	                    JSL IDELAY
.395914		22 e9 59 39	jsl $3959e9	                    JSL FDC_Sense_Int_Status
.395918		90 25		bcc $39593f	                    BCC pass_failure
.39591a		22 e9 59 39	jsl $3959e9	                    JSL FDC_Sense_Int_Status
.39591e		90 1f		bcc $39593f	                    BCC pass_failure
.395920		22 e9 59 39	jsl $3959e9	                    JSL FDC_Sense_Int_Status
.395924		90 19		bcc $39593f	                    BCC pass_failure
.395926		22 e9 59 39	jsl $3959e9	                    JSL FDC_Sense_Int_Status
.39592a		90 13		bcc $39593f	                    BCC pass_failure
.39592c		22 95 5a 39	jsl $395a95	                    JSL FDC_Configure_Command
.395930		90 0d		bcc $39593f	                    BCC pass_failure
.395932		22 47 5a 39	jsl $395a47	                    JSL FDC_Specify_Command
.395936		90 07		bcc $39593f	                    BCC pass_failure
.395938		22 5b 59 39	jsl $39595b	                    JSL FDC_Motor_On
.39593c		28		plp		                    PLP
.39593d		38		sec		                    SEC
.39593e		6b		rtl		                    RTL
.39593f		28		plp		pass_failure        PLP
.395940		18		clc		                    CLC
.395941		6b		rtl		                    RTL
.395942						FDC_MOTOR_NEEDED
.395942		08		php		                    PHP
.395943		c2 20		rep #$20	                REP #$20        ; set A long
.395945		78		sei		                    SEI                         ; Turn off interrupts
.395946		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.395949		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39594d		e2 20		sep #$20	                SEP #$20        ; set A short
.39594f		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395953		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.395955		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395959		28		plp		                    PLP
.39595a		6b		rtl		                    RTL
.39595b						FDC_Motor_On
.39595b		08		php		                    PHP
.39595c		22 42 59 39	jsl $395942	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395960		e2 20		sep #$20	                SEP #$20        ; set A short
.395962		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.395966		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.395968		d0 1f		bne $395989	                    BNE done                    ; If so: skip
.39596a		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.39596c		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395970		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395973		90 17		bcc $39598c	                    BCC time_out
.395975		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395978		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.39597b		22 a5 0f 39	jsl $390fa5	                    JSL IDELAY
.39597f		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395983		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.395985		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395989		28		plp		done                PLP
.39598a		38		sec		                    SEC
.39598b		6b		rtl		                    RTL
.39598c		28		plp		time_out            PLP                         ; Return a timeout error
.39598d		18		clc		                    CLC
.39598e		6b		rtl		                    RTL
.39598f						FDC_Motor_Off
.39598f		08		php		                    PHP
.395990		e2 20		sep #$20	                SEP #$20        ; set A short
.395992		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.395994		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.395998		c2 20		rep #$20	                REP #$20        ; set A long
.39599a		78		sei		                    SEI                         ; Turn off interrupts
.39599b		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.39599e		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3959a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3959a4		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.3959a8		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.3959aa		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.3959ae		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.3959b2		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.3959b4		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.3959b8		28		plp		                    PLP
.3959b9		6b		rtl		                    RTL
.3959ba						FDC_Recalibrate_Command
.3959ba		0b		phd		                    PHD
.3959bb		08		php		                    PHP
.3959bc		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3959bf		2b		pld		                PLD
.3959c0		22 42 59 39	jsl $395942	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.3959c4		e2 20		sep #$20	                SEP #$20        ; set A short
.3959c6		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.3959c8		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3959cb		a5 00		lda $0300	                    LDA FDC_DRIVE
.3959cd		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3959d0		a9 02		lda #$02	                    LDA #2
.3959d2		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.3959d5		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.3959d8		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.3959db		22 9d 57 39	jsl $39579d	                    JSL FDC_COMMAND             ; Issue the command
.3959df		90 04		bcc $3959e5	                    BCC pass_failure            ; If failure, pass the failure up
.3959e1		28		plp		                    PLP
.3959e2		2b		pld		                    PLD
.3959e3		38		sec		                    SEC
.3959e4		6b		rtl		                    RTL
.3959e5		28		plp		pass_failure        PLP
.3959e6		2b		pld		                    PLD
.3959e7		18		clc		                    CLC
.3959e8		6b		rtl		                    RTL
.3959e9						FDC_Sense_Int_Status
.3959e9		8b		phb		                    PHB
.3959ea		0b		phd		                    PHD
.3959eb		08		php		                    PHP
.3959ec		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3959ef		ab		plb		                PLB
.3959f0		ab		plb		                PLB
.3959f1		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.3959f4		2b		pld		                PLD
.3959f5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3959f7		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.3959fa		22 98 0f 39	jsl $390f98	                    JSL ILOOP_MS
.3959fe		e2 20		sep #$20	                SEP #$20        ; set A short
.395a00		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.395a02		a9 ff		lda #$ff	                    LDA #$FF
.395a04		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.395a06		20 10 57	jsr $395710	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.395a09		90 30		bcc $395a3b	                    BCC time_out                        ; If there was a time out, raise an error
.395a0b		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395a0e		90 2b		bcc $395a3b	                    BCC time_out                        ; If there was a time out, raise an error
.395a10		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.395a12		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395a16		20 38 57	jsr $395738	                    JSR FDC_Can_Read_Data
.395a19		90 20		bcc $395a3b	                    BCC time_out                        ; If there was a time out, raise an error
.395a1b		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395a1e		90 1b		bcc $395a3b	                    BCC time_out                        ; If there was a time out, raise an error
.395a20		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395a24		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395a26		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395a29		90 10		bcc $395a3b	                    BCC time_out                        ; If there was a time out, raise an error
.395a2b		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395a2f		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.395a31		e2 20		sep #$20	                SEP #$20        ; set A short
.395a33		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.395a36		28		plp		                    PLP
.395a37		2b		pld		                    PLD
.395a38		ab		plb		                    PLB
.395a39		38		sec		                    SEC
.395a3a		6b		rtl		                    RTL
.395a3b						time_out
.395a3b		e2 20		sep #$20	                SEP #$20        ; set A short
.395a3d		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.395a3f		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395a42		28		plp		                    PLP
.395a43		2b		pld		                    PLD
.395a44		ab		plb		                    PLB
.395a45		18		clc		                    CLC
.395a46		6b		rtl		                    RTL
.395a47						FDC_Specify_Command
.395a47		8b		phb		                    PHB
.395a48		0b		phd		                    PHD
.395a49		08		php		                    PHP
.395a4a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395a4d		ab		plb		                PLB
.395a4e		ab		plb		                PLB
.395a4f		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395a52		2b		pld		                PLD
.395a53		c2 30		rep #$30	                REP #$30        ; set A&X long
.395a55		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395a58		22 98 0f 39	jsl $390f98	                    JSL ILOOP_MS
.395a5c		e2 20		sep #$20	                SEP #$20        ; set A short
.395a5e		20 10 57	jsr $395710	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395a61		90 26		bcc $395a89	                    BCC time_out            ; If there was a time out, raise an error
.395a63		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395a66		90 21		bcc $395a89	                    BCC time_out            ; If there was a time out, raise an error
.395a68		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.395a6a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395a6e		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395a71		90 16		bcc $395a89	                    BCC time_out            ; If there was a time out, raise an error
.395a73		a9 cf		lda #$cf	                    LDA #$CF
.395a75		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395a79		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395a7c		90 0b		bcc $395a89	                    BCC time_out            ; If there was a time out, raise an error
.395a7e		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.395a80		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395a84		28		plp		                    PLP
.395a85		2b		pld		                    PLD
.395a86		ab		plb		                    PLB
.395a87		38		sec		                    SEC
.395a88		6b		rtl		                    RTL
.395a89						time_out
.395a89		e2 20		sep #$20	                SEP #$20        ; set A short
.395a8b		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395a8d		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395a90		28		plp		                    PLP
.395a91		2b		pld		                    PLD
.395a92		ab		plb		                    PLB
.395a93		18		clc		                    CLC
.395a94		6b		rtl		                    RTL
.395a95						FDC_Configure_Command
.395a95		8b		phb		                    PHB
.395a96		0b		phd		                    PHD
.395a97		08		php		                    PHP
.395a98		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395a9b		ab		plb		                PLB
.395a9c		ab		plb		                PLB
.395a9d		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395aa0		2b		pld		                PLD
.395aa1		c2 30		rep #$30	                REP #$30        ; set A&X long
.395aa3		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395aa6		22 98 0f 39	jsl $390f98	                    JSL ILOOP_MS
.395aaa		e2 20		sep #$20	                SEP #$20        ; set A short
.395aac		20 10 57	jsr $395710	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395aaf		90 36		bcc $395ae7	                    BCC time_out            ; If there was a time out, raise an error
.395ab1		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395ab4		90 31		bcc $395ae7	                    BCC time_out            ; If there was a time out, raise an error
.395ab6		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.395ab8		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395abc		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395abf		90 26		bcc $395ae7	                    BCC time_out            ; If there was a time out, raise an error
.395ac1		a9 00		lda #$00	                    LDA #$00
.395ac3		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ac7		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395aca		90 1b		bcc $395ae7	                    BCC time_out            ; If there was a time out, raise an error
.395acc		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.395ace		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ad2		20 c0 56	jsr $3956c0	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395ad5		90 10		bcc $395ae7	                    BCC time_out            ; If there was a time out, raise an error
.395ad7		a9 00		lda #$00	                    LDA #$00
.395ad9		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395add		20 10 57	jsr $395710	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395ae0		90 05		bcc $395ae7	                    BCC time_out            ; If there was a time out, raise an error
.395ae2		28		plp		                    PLP
.395ae3		2b		pld		                    PLD
.395ae4		ab		plb		                    PLB
.395ae5		38		sec		                    SEC
.395ae6		6b		rtl		                    RTL
.395ae7						time_out
.395ae7		e2 20		sep #$20	                SEP #$20        ; set A short
.395ae9		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395aeb		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395aee		28		plp		                    PLP
.395aef		2b		pld		                    PLD
.395af0		ab		plb		                    PLB
.395af1		18		clc		                    CLC
.395af2		6b		rtl		                    RTL
.395af3						FDC_Read_ID_Command
.395af3		8b		phb		                    PHB
.395af4		0b		phd		                    PHD
.395af5		08		php		                    PHP
.395af6		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395af9		ab		plb		                PLB
.395afa		ab		plb		                PLB
.395afb		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395afe		2b		pld		                PLD
.395aff		e2 20		sep #$20	                SEP #$20        ; set A short
.395b01		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.395b03		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395b06		a9 01		lda #$01	                    LDA #1
.395b08		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395b0b		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395b0e		a9 07		lda #$07	                    LDA #7
.395b10		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395b13		22 9d 57 39	jsl $39579d	                    JSL FDC_COMMAND                     ; Issue the command
.395b17		90 27		bcc $395b40	                    BCC pass_failure
.395b19		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.395b1c		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.395b1e		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395b21		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.395b23		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395b26		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.395b28		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395b2b		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.395b2d		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395b30		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.395b32		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395b35		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.395b37		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395b3a		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.395b3c		28		plp		                    PLP
.395b3d		2b		pld		                    PLD
.395b3e		ab		plb		                    PLB
.395b3f		6b		rtl		                    RTL
.395b40		28		plp		pass_failure        PLP
.395b41		2b		pld		                    PLD
.395b42		ab		plb		                    PLB
.395b43		18		clc		                    CLC
.395b44		6b		rtl		                    RTL
.395b45						FDC_DumpReg_Command
.395b45		0b		phd		                    PHD
.395b46		08		php		                    PHP
.395b47		e2 20		sep #$20	                SEP #$20        ; set A short
.395b49		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.395b4b		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395b4e		a9 01		lda #$01	                    LDA #1
.395b50		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395b53		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395b56		a9 0a		lda #$0a	                    LDA #10
.395b58		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.395b5b		22 9d 57 39	jsl $39579d	                    JSL FDC_COMMAND                     ; Issue the command
.395b5f		90 03		bcc $395b64	                    BCC pass_failure
.395b61		28		plp		                    PLP
.395b62		2b		pld		                    PLD
.395b63		6b		rtl		                    RTL
.395b64		28		plp		pass_failure        PLP
.395b65		2b		pld		                    PLD
.395b66		18		clc		                    CLC
.395b67		6b		rtl		                    RTL
.395b68						FDC_Seek_Track
.395b68		8b		phb		                    PHB
.395b69		0b		phd		                    PHD
.395b6a		08		php		                    PHP
.395b6b		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395b6e		ab		plb		                PLB
.395b6f		ab		plb		                PLB
.395b70		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395b73		2b		pld		                PLD
.395b74		22 42 59 39	jsl $395942	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395b78		e2 20		sep #$20	                SEP #$20        ; set A short
.395b7a		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.395b7c		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395b7f		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395b81		29 01		and #$01	                    AND #$01
.395b83		0a		asl a		                    ASL A
.395b84		0a		asl a		                    ASL A
.395b85		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395b87		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395b8a		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.395b8c		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395b8f		a9 03		lda #$03	                    LDA #3
.395b91		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.395b94		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395b97		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.395b9a		22 9d 57 39	jsl $39579d	                    JSL FDC_COMMAND                     ; Issue the command
.395b9e		90 05		bcc $395ba5	                    BCC pass_failure
.395ba0		28		plp		                    PLP
.395ba1		2b		pld		                    PLD
.395ba2		ab		plb		                    PLB
.395ba3		38		sec		                    SEC
.395ba4		6b		rtl		                    RTL
.395ba5		28		plp		pass_failure        PLP
.395ba6		2b		pld		                    PLD
.395ba7		ab		plb		                    PLB
.395ba8		18		clc		                    CLC
.395ba9		6b		rtl		                    RTL
.395baa						FDC_Read_Sector
.395baa		8b		phb		                    PHB
.395bab		0b		phd		                    PHD
.395bac		08		php		                    PHP
.395bad		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395bb0		ab		plb		                PLB
.395bb1		ab		plb		                PLB
.395bb2		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395bb5		2b		pld		                PLD
.395bb6		22 42 59 39	jsl $395942	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395bba		e2 20		sep #$20	                SEP #$20        ; set A short
.395bbc		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.395bbe		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395bc0		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395bc3		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395bc5		29 01		and #$01	                    AND #$01
.395bc7		0a		asl a		                    ASL A
.395bc8		0a		asl a		                    ASL A
.395bc9		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395bcb		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395bce		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395bd0		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395bd3		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395bd5		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395bd8		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395bda		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395bdd		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395bdf		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395be2		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395be4		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395be7		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395be9		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395bec		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395bee		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395bf1		a9 09		lda #$09	                    LDA #9
.395bf3		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395bf6		a9 01		lda #$01	                    LDA #1
.395bf8		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.395bfb		a9 07		lda #$07	                    LDA #7
.395bfd		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395c00		22 9d 57 39	jsl $39579d	command             JSL FDC_COMMAND                     ; Issue the command
.395c04		08		php		                    PHP
.395c05		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395c08		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.395c0a		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395c0d		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.395c0f		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395c12		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.395c14		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395c17		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.395c19		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395c1c		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395c1e		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395c21		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395c23		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395c26		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395c28		28		plp		                    PLP
.395c29		90 04		bcc $395c2f	                    BCC pass_failure
.395c2b		28		plp		done                PLP
.395c2c		2b		pld		                    PLD
.395c2d		ab		plb		                    PLB
.395c2e		6b		rtl		                    RTL
.395c2f		28		plp		pass_failure        PLP
.395c30		2b		pld		                    PLD
.395c31		ab		plb		                    PLB
.395c32		18		clc		                    CLC
.395c33		6b		rtl		                    RTL
.395c34						FDC_Write_Sector
.395c34		8b		phb		                    PHB
.395c35		0b		phd		                    PHD
.395c36		08		php		                    PHP
.395c37		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395c3a		ab		plb		                PLB
.395c3b		ab		plb		                PLB
.395c3c		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395c3f		2b		pld		                PLD
.395c40		e2 20		sep #$20	                SEP #$20        ; set A short
.395c42		22 42 59 39	jsl $395942	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.395c46		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.395c48		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.395c4a		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395c4d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.395c4f		29 01		and #$01	                    AND #$01
.395c51		0a		asl a		                    ASL A
.395c52		0a		asl a		                    ASL A
.395c53		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.395c55		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395c58		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.395c5a		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.395c5d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.395c5f		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.395c62		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.395c64		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.395c67		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.395c69		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.395c6c		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.395c6e		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.395c71		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.395c73		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.395c76		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.395c78		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.395c7b		a9 09		lda #$09	                    LDA #9
.395c7d		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.395c80		a9 ff		lda #$ff	                    LDA #$FF
.395c82		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.395c85		a9 07		lda #$07	                    LDA #7
.395c87		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.395c8a		22 9d 57 39	jsl $39579d	command             JSL FDC_COMMAND                     ; Issue the command
.395c8e		08		php		                    PHP
.395c8f		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.395c92		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395c94		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.395c97		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.395c99		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.395c9c		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.395c9e		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.395ca1		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.395ca3		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.395ca6		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.395ca8		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.395cab		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.395cad		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.395cb0		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.395cb2		28		plp		check_status        PLP
.395cb3		90 04		bcc $395cb9	                    BCC pass_failure
.395cb5		28		plp		done                PLP
.395cb6		2b		pld		                    PLD
.395cb7		ab		plb		                    PLB
.395cb8		6b		rtl		                    RTL
.395cb9		28		plp		pass_failure        PLP
.395cba		2b		pld		                    PLD
.395cbb		ab		plb		                    PLB
.395cbc		18		clc		                    CLC
.395cbd		6b		rtl		                    RTL
.395cbe						DIVIDE32
.395cbe		da		phx		                    PHX
.395cbf		5a		phy		                    PHY
.395cc0		0b		phd		                    PHD
.395cc1		08		php		                    PHP
.395cc2		f4 0c 03	pea #$030c	                PEA #DIVIDEND         ; set DP to page 0
.395cc5		2b		pld		                PLD
.395cc6		c2 30		rep #$30	                REP #$30        ; set A&X long
.395cc8		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.395cca		64 0a		stz $0316	                    STZ REMAINDER+2
.395ccc		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.395ccf		06 00		asl $030c	loop                ASL DIVIDEND
.395cd1		26 02		rol $030e	                    ROL DIVIDEND+2
.395cd3		26 08		rol $0314	                    ROL REMAINDER
.395cd5		26 0a		rol $0316	                    ROL REMAINDER+2
.395cd7		a5 08		lda $0314	                    LDA REMAINDER
.395cd9		38		sec		                    SEC
.395cda		e5 04		sbc $0310	                    SBC DIVISOR
.395cdc		a8		tay		                    TAY
.395cdd		a5 0a		lda $0316	                    LDA REMAINDER+2
.395cdf		e5 06		sbc $0312	                    SBC DIVISOR+2
.395ce1		90 06		bcc $395ce9	                    BCC skip
.395ce3		85 0a		sta $0316	                    STA REMAINDER+2
.395ce5		84 08		sty $0314	                    STY REMAINDER
.395ce7		e6 00		inc $030c	                    INC DIVIDEND
.395ce9		ca		dex		skip                DEX
.395cea		d0 e3		bne $395ccf	                    BNE loop
.395cec		28		plp		                    PLP
.395ced		2b		pld		                    PLD
.395cee		7a		ply		                    PLY
.395cef		fa		plx		                    PLX
.395cf0		60		rts		                    RTS
.395cf1						LBA2CHS
.395cf1		8b		phb		                    PHB
.395cf2		0b		phd		                    PHD
.395cf3		08		php		                    PHP
.395cf4		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395cf7		ab		plb		                PLB
.395cf8		ab		plb		                PLB
.395cf9		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395cfc		2b		pld		                PLD
.395cfd		c2 30		rep #$30	                REP #$30        ; set A&X long
.395cff		a5 22		lda $0322	                    LDA BIOS_LBA
.395d01		85 0c		sta $030c	                    STA DIVIDEND
.395d03		a5 24		lda $0324	                    LDA BIOS_LBA+2
.395d05		85 0e		sta $030e	                    STA DIVIDEND+2
.395d07		a9 24 00	lda #$0024	                    LDA #36
.395d0a		85 10		sta $0310	                    STA DIVISOR
.395d0c		64 12		stz $0312	                    STZ DIVISOR+2
.395d0e		20 be 5c	jsr $395cbe	                    JSR DIVIDE32
.395d11		e2 20		sep #$20	                SEP #$20        ; set A short
.395d13		a5 0c		lda $030c	                    LDA DIVIDEND
.395d15		85 02		sta $0302	                    STA FDC_CYLINDER
.395d17		c2 20		rep #$20	                REP #$20        ; set A long
.395d19		a5 14		lda $0314	                    LDA REMAINDER
.395d1b		85 0c		sta $030c	                    STA DIVIDEND
.395d1d		a5 16		lda $0316	                    LDA REMAINDER+2
.395d1f		85 0e		sta $030e	                    STA DIVIDEND+2
.395d21		a9 12 00	lda #$0012	                    LDA #18
.395d24		85 10		sta $0310	                    STA DIVISOR
.395d26		64 12		stz $0312	                    STZ DIVISOR+2
.395d28		20 be 5c	jsr $395cbe	                    JSR DIVIDE32
.395d2b		e2 20		sep #$20	                SEP #$20        ; set A short
.395d2d		a5 0c		lda $030c	                    LDA DIVIDEND
.395d2f		29 01		and #$01	                    AND #$01
.395d31		85 01		sta $0301	                    STA FDC_HEAD
.395d33		a5 14		lda $0314	                    LDA REMAINDER
.395d35		1a		inc a		                    INC A
.395d36		85 03		sta $0303	                    STA FDC_SECTOR
.395d38		28		plp		                    PLP
.395d39		2b		pld		                    PLD
.395d3a		ab		plb		                    PLB
.395d3b		6b		rtl		                    RTL
.395d3c						FDC_GETBLOCK
.395d3c		8b		phb		                    PHB
.395d3d		0b		phd		                    PHD
.395d3e		08		php		                    PHP
.395d3f		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395d42		ab		plb		                PLB
.395d43		ab		plb		                PLB
.395d44		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395d47		2b		pld		                PLD
.395d48		e2 20		sep #$20	                SEP #$20        ; set A short
.395d4a		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.395d4c		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.395d4f		c2 30		rep #$30	                REP #$30        ; set A&X long
.395d51		22 f1 5c 39	jsl $395cf1	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395d55		e2 20		sep #$20	                SEP #$20        ; set A short
.395d57		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.395d59		f0 29		beq $395d84	                    BEQ read_failure
.395d5b						try_read
.395d5b		c2 20		rep #$20	                REP #$20        ; set A long
.395d5d		22 aa 5b 39	jsl $395baa	                    JSL FDC_Read_Sector         ; Read the sector
.395d61		90 14		bcc $395d77	                    BCC retry
.395d63		e2 20		sep #$20	                SEP #$20        ; set A short
.395d65		a5 06		lda $0306	                    LDA FDC_ST0
.395d67		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.395d69		d0 19		bne $395d84	                    BNE read_failure
.395d6b						ret_success
.395d6b		e2 20		sep #$20	                SEP #$20        ; set A short
.395d6d		a9 00		lda #$00	                    LDA #0
.395d6f		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395d72		28		plp		                    PLP
.395d73		2b		pld		                    PLD
.395d74		ab		plb		                    PLB
.395d75		38		sec		                    SEC
.395d76		6b		rtl		                    RTL
.395d77						retry
.395d77		e2 20		sep #$20	                SEP #$20        ; set A short
.395d79		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.395d7c		30 13		bmi $395d91	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.395d7e		22 df 58 39	jsl $3958df	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.395d82		80 d7		bra $395d5b	                    BRA try_read                ; And try the read again
.395d84						read_failure
.395d84		e2 20		sep #$20	                SEP #$20        ; set A short
.395d86		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.395d88		80 04		bra $395d8e	                    BRA ret_failure
.395d8a						seek_failure
.395d8a		e2 20		sep #$20	                SEP #$20        ; set A short
.395d8c		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.395d8e		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.395d91		28		plp		pass_failure        PLP
.395d92		2b		pld		                    PLD
.395d93		ab		plb		                    PLB
.395d94		18		clc		                    CLC
.395d95		6b		rtl		                    RTL
.395d96						FDC_PUTBLOCK
.395d96		8b		phb		                    PHB
.395d97		0b		phd		                    PHD
.395d98		08		php		                    PHP
.395d99		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395d9c		ab		plb		                PLB
.395d9d		ab		plb		                PLB
.395d9e		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395da1		2b		pld		                PLD
.395da2		e2 20		sep #$20	                SEP #$20        ; set A short
.395da4		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.395da6		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.395da9		c2 30		rep #$30	                REP #$30        ; set A&X long
.395dab		22 f1 5c 39	jsl $395cf1	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.395daf		22 34 5c 39	jsl $395c34	retry               JSL FDC_Write_Sector        ; Write the sector
.395db3		b0 03		bcs $395db8	                    BCS chk_st0
.395db5		82 28 00	brl $395de0	                    BRL attempt_retry
.395db8						chk_st0
.395db8		e2 20		sep #$20	                SEP #$20        ; set A short
.395dba		a5 06		lda $0306	                    LDA FDC_ST0
.395dbc		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.395dbe		d0 0c		bne $395dcc	                    BNE write_failure
.395dc0						ret_success
.395dc0		e2 20		sep #$20	                SEP #$20        ; set A short
.395dc2		a9 00		lda #$00	                    LDA #0
.395dc4		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395dc7		28		plp		                    PLP
.395dc8		2b		pld		                    PLD
.395dc9		ab		plb		                    PLB
.395dca		38		sec		                    SEC
.395dcb		6b		rtl		                    RTL
.395dcc						write_failure
.395dcc		e2 20		sep #$20	                SEP #$20        ; set A short
.395dce		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.395dd0		89 02		bit #$02	                    BIT #FDC_ST1_NW
.395dd2		f0 04		beq $395dd8	                    BEQ generic_err
.395dd4		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.395dd6		80 17		bra $395def	                    BRA ret_failure
.395dd8		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.395dda		d0 e4		bne $395dc0	                    BNE ret_success
.395ddc		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.395dde		d0 e0		bne $395dc0	                    BNE ret_success
.395de0						attempt_retry
.395de0		e2 20		sep #$20	                SEP #$20        ; set A short
.395de2		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.395de5		d0 c8		bne $395daf	                    BNE retry                           ; And retry unless we have none left
.395de7		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.395de9		80 04		bra $395def	                    BRA ret_failure
.395deb						seek_failure
.395deb		e2 20		sep #$20	                SEP #$20        ; set A short
.395ded		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.395def						ret_failure
.395def		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395df2		28		plp		pass_failure        PLP
.395df3		2b		pld		                    PLD
.395df4		ab		plb		                    PLB
.395df5		18		clc		                    CLC
.395df6		6b		rtl		                    RTL
.395df7						FDC_MOUNT
.395df7		8b		phb		                    PHB
.395df8		0b		phd		                    PHD
.395df9		08		php		                    PHP
.395dfa		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395dfd		ab		plb		                PLB
.395dfe		ab		plb		                PLB
.395dff		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395e02		2b		pld		                PLD
.395e03		22 df 58 39	jsl $3958df	                    JSL FDC_INIT
.395e07		e2 20		sep #$20	                SEP #$20        ; set A short
.395e09		c2 10		rep #$10	                REP #$10        ; set X long
.395e0b		a9 00		lda #$00	                    LDA #0
.395e0d		a2 00 00	ldx #$0000	                    LDX #0
.395e10		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.395e14		e8		inx		                    INX
.395e15		e0 00 02	cpx #$0200	                    CPX #512
.395e18		d0 f6		bne $395e10	                    BNE zero_loop
.395e1a		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.395e1c		85 00		sta $0300	                    STA FDC_DRIVE
.395e1e		22 5b 59 39	jsl $39595b	                    JSL FDC_Motor_On                        ; Turn the motor on
.395e22		c2 30		rep #$30	                REP #$30        ; set A&X long
.395e24		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.395e27		85 22		sta $0322	                    STA BIOS_LBA
.395e29		85 24		sta $0324	                    STA BIOS_LBA+2
.395e2b		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.395e2e		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.395e30		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.395e33		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.395e35		22 3c 5d 39	jsl $395d3c	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.395e39		b0 03		bcs $395e3e	                    BCS parse_boot                          ; If ok: start parsing the boot record
.395e3b		82 d3 00	brl $395f11	                    BRL pass_failure                        ; Pass the error up the chain
.395e3e						parse_boot
.395e3e		e2 20		sep #$20	                SEP #$20        ; set A short
.395e40		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.395e42		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.395e46		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.395e48		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.395e4c		e2 20		sep #$20	                SEP #$20        ; set A short
.395e4e		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.395e52		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.395e56		c2 20		rep #$20	                REP #$20        ; set A long
.395e58		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.395e5b		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.395e5f		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.395e63		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.395e67		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.395e6b		a9 00 00	lda #$0000	                    LDA #0
.395e6e		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.395e72		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.395e75		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.395e79		18		clc		                    CLC
.395e7a		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.395e7e		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.395e82		a9 00 00	lda #$0000	                    LDA #0
.395e85		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.395e89		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.395e8d		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.395e8e		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.395e92		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.395e96		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.395e9a		a9 00 00	lda #$0000	                    LDA #0
.395e9d		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.395ea1		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.395ea5		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.395ea9		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.395eaa		4a		lsr a		                    LSR A
.395eab		4a		lsr a		                    LSR A
.395eac		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.395ead		18		clc		                    CLC
.395eae		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.395eb2		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.395eb6		a9 00 00	lda #$0000	                    LDA #0
.395eb9		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.395ebd		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.395ec1		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.395ec5		a9 00 00	lda #$0000	                    LDA #0
.395ec8		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.395ecc		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.395ed0		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.395ed4		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.395ed7		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.395edb		e2 20		sep #$20	                SEP #$20        ; set A short
.395edd		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.395ee1		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.395ee3		80 14		bra $395ef9	                    BRA no_volume_id                        ; No: there is no volume ID
.395ee5						is_extended
.395ee5		c2 20		rep #$20	                REP #$20        ; set A long
.395ee7		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.395eeb		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.395eef		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.395ef3		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.395ef7		80 0d		bra $395f06	                    BRA ret_success
.395ef9						no_volume_id
.395ef9		c2 20		rep #$20	                REP #$20        ; set A long
.395efb		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.395efe		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.395f02		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.395f06						ret_success
.395f06		e2 20		sep #$20	                SEP #$20        ; set A short
.395f08		a9 00		lda #$00	                    LDA #0
.395f0a		85 20		sta $0320	                    STA BIOS_STATUS
.395f0c		28		plp		                    PLP
.395f0d		2b		pld		                    PLD
.395f0e		ab		plb		                    PLB
.395f0f		38		sec		                    SEC
.395f10		6b		rtl		                    RTL
.395f11		28		plp		pass_failure        PLP
.395f12		2b		pld		                    PLD
.395f13		ab		plb		                    PLB
.395f14		18		clc		                    CLC
.395f15		6b		rtl		                    RTL
.395f16						FDC_CMDBLOCK
.395f16		8b		phb		                    PHB
.395f17		0b		phd		                    PHD
.395f18		08		php		                    PHP
.395f19		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395f1c		ab		plb		                PLB
.395f1d		ab		plb		                PLB
.395f1e		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395f21		2b		pld		                PLD
.395f22		e2 30		sep #$30	                SEP #$30        ; set A&X short
.395f24		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.395f26		f0 0f		beq $395f37	                    BEQ motor_on
.395f28		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.395f2a		f0 11		beq $395f3d	                    BEQ motor_off
.395f2c		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.395f2e		f0 13		beq $395f43	                    BEQ recalibrate
.395f30		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.395f32		28		plp		                    PLP
.395f33		2b		pld		                    PLD
.395f34		ab		plb		                    PLB
.395f35		38		sec		                    SEC
.395f36		6b		rtl		                    RTL
.395f37		22 5b 59 39	jsl $39595b	motor_on            JSL FDC_Motor_On
.395f3b		80 f3		bra $395f30	                    BRA ret_success
.395f3d		22 8f 59 39	jsl $39598f	motor_off           JSL FDC_Motor_Off
.395f41		80 ed		bra $395f30	                    BRA ret_success
.395f43		22 ba 59 39	jsl $3959ba	recalibrate         JSL FDC_Recalibrate_Command
.395f47		b0 e7		bcs $395f30	                    BCS ret_success
.395f49		28		plp		pass_failure        PLP
.395f4a		2b		pld		                    PLD
.395f4b		ab		plb		                    PLB
.395f4c		18		clc		                    CLC
.395f4d		6b		rtl		                    RTL
.395f4e						FDC_CHK_MEDIA
.395f4e		0b		phd		                    PHD
.395f4f		08		php		                    PHP
.395f50		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.395f53		2b		pld		                PLD
.395f54		22 5b 59 39	jsl $39595b	                    JSL FDC_Motor_On                ; Turn on the motor
.395f58		e2 20		sep #$20	                SEP #$20        ; set A short
.395f5a		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.395f5e		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.395f60		f0 42		beq $395fa4	                    BEQ ret_true                    ; If not: assume the disk is present
.395f62		a9 00		lda #$00	                    LDA #0
.395f64		85 00		sta $0300	                    STA FDC_DRIVE
.395f66		a9 00		lda #$00	                    LDA #0
.395f68		85 01		sta $0301	                    STA FDC_HEAD
.395f6a		a9 50		lda #$50	                    LDA #80
.395f6c		85 02		sta $0302	                    STA FDC_CYLINDER
.395f6e		22 68 5b 39	jsl $395b68	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.395f72		90 34		bcc $395fa8	                    BCC ret_false                   ; If fail: return false
.395f74		c2 10		rep #$10	                REP #$10        ; set X long
.395f76		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395f79		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395f7c		22 a5 0f 39	jsl $390fa5	                    JSL IDELAY
.395f80		22 e9 59 39	jsl $3959e9	                    JSL FDC_Sense_Int_Status
.395f84		a5 06		lda $0306	                    LDA FDC_ST0
.395f86		29 d0		and #$d0	                    AND #%11010000
.395f88		d0 1e		bne $395fa8	                    BNE ret_false
.395f8a		22 ba 59 39	jsl $3959ba	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.395f8e		90 18		bcc $395fa8	                    BCC ret_false                   ; If fail: return false
.395f90		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395f93		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395f96		22 a5 0f 39	jsl $390fa5	                    JSL IDELAY
.395f9a		22 e9 59 39	jsl $3959e9	                    JSL FDC_Sense_Int_Status
.395f9e		a5 06		lda $0306	                    LDA FDC_ST0
.395fa0		29 d0		and #$d0	                    AND #%11010000
.395fa2		d0 04		bne $395fa8	                    BNE ret_false
.395fa4						ret_true
.395fa4		28		plp		                    PLP
.395fa5		2b		pld		                    PLD
.395fa6		38		sec		                    SEC
.395fa7		6b		rtl		                    RTL
.395fa8						ret_false
.395fa8		28		plp		                    PLP
.395fa9		2b		pld		                    PLD
.395faa		18		clc		                    CLC
.395fab		6b		rtl		                    RTL
.395fac						FDC_WRITEVBR
.395fac		8b		phb		                    PHB
.395fad		0b		phd		                    PHD
.395fae		08		php		                    PHP
.395faf		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.395fb2		ab		plb		                PLB
.395fb3		ab		plb		                PLB
.395fb4		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.395fb7		2b		pld		                PLD
.395fb8		22 f7 5d 39	jsl $395df7	                    JSL FDC_MOUNT               ; Mount the floppy disk
.395fbc		c2 30		rep #$30	                REP #$30        ; set A&X long
.395fbe		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.395fc1		a2 00 00	ldx #$0000	                    LDX #0
.395fc4		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.395fc8		e8		inx		                    INX
.395fc9		e8		inx		                    INX
.395fca		e0 00 02	cpx #$0200	                    CPX #512
.395fcd		d0 f5		bne $395fc4	                    BNE clr_loop
.395fcf		e2 20		sep #$20	                SEP #$20        ; set A short
.395fd1		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.395fd4		bf 89 60 39	lda $396089,x	copy_loop           LDA FDC_VBR_BEGIN,X
.395fd8		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.395fdc		e8		inx		                    INX
.395fdd		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.395fe0		d0 f2		bne $395fd4	                    BNE copy_loop
.395fe2		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.395fe5		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.395fe8		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.395fea		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.395fee		f0 07		beq $395ff7	                    BEQ path_copy_done
.395ff0		e8		inx		                    INX
.395ff1		c8		iny		                    INY
.395ff2		c0 80 00	cpy #$0080	                    CPY #128
.395ff5		d0 f1		bne $395fe8	                    BNE path_copy_loop
.395ff7						path_copy_done
.395ff7		c2 20		rep #$20	                REP #$20        ; set A long
.395ff9		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.395ffc		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.396000		c2 20		rep #$20	                REP #$20        ; set A long
.396002		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.396005		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396007		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.39600a		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39600c		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.39600f		85 02		sta $0322	                    STA BIOS_LBA
.396011		85 04		sta $0324	                    STA BIOS_LBA+2
.396013		e2 20		sep #$20	                SEP #$20        ; set A short
.396015		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396017		85 01		sta $0321	                    STA BIOS_DEV
.396019		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.39601d		b0 09		bcs $396028	                    BCS ret_success
.39601f		22 8f 59 39	jsl $39598f	                    JSL FDC_Motor_Off
.396023		28		plp		                    PLP                         ; Return the failure
.396024		2b		pld		                    PLD
.396025		ab		plb		                    PLB
.396026		18		clc		                    CLC
.396027		6b		rtl		                    RTL
.396028		22 8f 59 39	jsl $39598f	ret_success         JSL FDC_Motor_Off
.39602c		e2 20		sep #$20	                SEP #$20        ; set A short
.39602e		a9 00		lda #$00	                    LDA #0
.396030		85 00		sta $0320	                    STA BIOS_STATUS
.396032		28		plp		                    PLP
.396033		2b		pld		                    PLD
.396034		ab		plb		                    PLB
.396035		38		sec		                    SEC
.396036		6b		rtl		                    RTL
.396037						FDC_TIME_HANDLE
.396037		08		php		                    PHP
.396038		e2 20		sep #$20	                SEP #$20        ; set A short
.39603a		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.39603e		d0 06		bne $396046	                    BNE dec_motor                   ; If not zero: decrement the timer
.396040		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.396044		f0 28		beq $39606e	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.396046		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.39604a		3a		dec a		                    DEC A
.39604b		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.39604f		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.396051		d0 0b		bne $39605e	                    BNE chk_motor_end               ; No: check to see if we're a the end
.396053		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.396057		3a		dec a		                    DEC A
.396058		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.39605c		80 10		bra $39606e	                    BRA sof_timeout                 ; And move on to the next timer
.39605e		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.396062		d0 0a		bne $39606e	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.396064		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.396068		d0 04		bne $39606e	                    BNE sof_timeout
.39606a		22 8f 59 39	jsl $39598f	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.39606e						sof_timeout
.39606e		e2 20		sep #$20	                SEP #$20        ; set A short
.396070		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.396074		f0 11		beq $396087	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.396076		3a		dec a		                    DEC A                           ; Count down one tick
.396077		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.39607b		d0 0a		bne $396087	                    BNE sof_int_done                ; If not 0, we're done
.39607d		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.396081		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.396083		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.396087		28		plp		sof_int_done        PLP
.396088		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.396089						FDC_VBR_BEGIN
>396089		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>39608c		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>396094		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>396096		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>396097		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>396099		02				num_fat             .byte 2                 ; Number of FATs
>39609a		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>39609c		40 0b				total_sectors       .word 2880              ; Total sectors
>39609e		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>39609f		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>3960a1		12 00				sec_per_track       .word 18                ; Sectors per track
>3960a3		02 00				num_head            .word 2                 ; Number of heads
>3960a5		00 00 00 00			ignore2             .dword 0
>3960a9		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>3960ad		00 00				ignore3             .word 0
>3960af		29				boot_signature      .byte $29
>3960b0		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>3960b4		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>3960bc		20 20 20
>3960bf		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.3960c7		80 40		bra $396109	                    BRA vbr_start
>3960c9						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396109						vbr_start
.396109		c2 20		rep #$20	                REP #$20        ; set A long
.39610b		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.39610e		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.396112		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396115		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396119		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.39611d		b0 0c		bcs $39612b	                    BCS lock                ; If it returned success... lock up... I guess?
.39611f						error
.39611f		e2 20		sep #$20	                SEP #$20        ; set A short
.396121		4b		phk		                    PHK                     ; Otherwise, print an error message
.396122		ab		plb		                    PLB
.396123		62 08 00	per $39612e	                    PER message
.396126		fa		plx		                    PLX
.396127		22 1c 10 00	jsl $00101c	                    JSL PUTS
.39612b		ea		nop		lock                NOP                     ; And lock up
.39612c		80 fd		bra $39612b	                    BRA lock
>39612e		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396136		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>396146		65 20 62 69 6e 61 72 79 2e 0d 00
.396151						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.396151						IDE_TEST
.396151		08		php		                PHP
.396152		c2 20		rep #$20	                REP #$20        ; set A long
.396154		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.396157		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.39615b		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39615e		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396162		22 4d 62 39	jsl $39624d	                JSL IDE_IDENTIFY
.396166		b0 03		bcs $39616b	                BCS id_ok
.396168		82 73 00	brl $3961de	                BRL done
.39616b						id_ok
.39616b		c2 10		rep #$10	                REP #$10        ; set X long
.39616d		e2 20		sep #$20	                SEP #$20        ; set A short
.39616f		a0 28 00	ldy #$0028	                LDY #40
.396172		a2 36 00	ldx #$0036	                LDX #27*2
.396175		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.396179		22 18 10 00	jsl $001018	                JSL PUTC
.39617d		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.396181		22 18 10 00	jsl $001018	                JSL PUTC
.396185		e8		inx		                INX
.396186		e8		inx		                INX
.396187		88		dey		                DEY
.396188		88		dey		                DEY
.396189		d0 ea		bne $396175	                BNE pr_model
.39618b		c2 10		rep #$10	                REP #$10        ; set X long
.39618d		e2 20		sep #$20	                SEP #$20        ; set A short
.39618f		a0 14 00	ldy #$0014	                LDY #20
.396192		a2 14 00	ldx #$0014	                LDX #10*2
.396195		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.396199		22 18 10 00	jsl $001018	                JSL PUTC
.39619d		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.3961a1		22 18 10 00	jsl $001018	                JSL PUTC
.3961a5		e8		inx		                INX
.3961a6		e8		inx		                INX
.3961a7		88		dey		                DEY
.3961a8		88		dey		                DEY
.3961a9		d0 ea		bne $396195	                BNE pr_serial
.3961ab		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3961af						read_sect1
.3961af		c2 20		rep #$20	                REP #$20        ; set A long
.3961b1		a9 00 00	lda #$0000	                LDA #0                 ; Set LBA = 0
.3961b4		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.3961b8		a9 00 00	lda #$0000	                LDA #0
.3961bb		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.3961bf		a9 00 a9	lda #$a900	                LDA #<>DOS_BOOT_SECTOR
.3961c2		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3961c6		a9 38 00	lda #$0038	                LDA #`DOS_BOOT_SECTOR
.3961c9		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3961cd		22 d0 62 39	jsl $3962d0	                JSL IDE_GETBLOCK        ; Attempt to read the block
.3961d1		b0 06		bcs $3961d9	                BCS all_ok
.3961d3		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3961d7		80 05		bra $3961de	                BRA done
.3961d9						all_ok
.3961d9		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.3961dd		00		brk #		                BRK
.3961de		28		plp		done            PLP
.3961df		6b		rtl		                RTL
.3961e0						IDE_INIT
.3961e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3961e2		a9 00		lda #$00	              LDA #$00
.3961e4		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.3961e8		20 09 62	jsr $396209	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.3961eb		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.3961ed		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.3961f1		a9 01		lda #$01	              LDA #$01
.3961f3		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.3961f7		a9 00		lda #$00	              LDA #$00
.3961f9		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.3961fd		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396201		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396205		20 27 62	jsr $396227	              JSR IDE_DRV_READY_NOTBUSY
.396208		6b		rtl		              RTL
.396209						IDE_DRIVE_BSY
.396209		08		php		                PHP
.39620a		e2 20		sep #$20	                SEP #$20        ; set A short
.39620c		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.396210		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.396212		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.396214		f0 f6		beq $39620c	                BEQ loop
.396216		28		plp		                PLP
.396217		60		rts		                RTS
.396218						IDE_DRIVE_READY
.396218		08		php		                PHP
.396219		e2 20		sep #$20	                SEP #$20        ; set A short
.39621b		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.39621f		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.396221		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.396223		d0 f6		bne $39621b	                BNE loop
.396225		28		plp		                PLP
.396226		60		rts		                RTS
.396227						IDE_DRV_READY_NOTBUSY
.396227		08		php		                PHP
.396228		e2 20		sep #$20	                SEP #$20        ; set A short
.39622a		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.39622e		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.396230		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.396232		d0 f6		bne $39622a	                BNE loop                            ; No: keep waiting
.396234		28		plp		ret_success     PLP                                 ; Return success
.396235		38		sec		                SEC
.396236		60		rts		                RTS
.396237		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.39623b		28		plp		                PLP                                 ; Return failure
.39623c		18		clc		                CLC
.39623d		60		rts		                RTS
.39623e						IDE_NOT_DRQ
.39623e		08		php		                PHP
.39623f		e2 20		sep #$20	                SEP #$20        ; set A short
.396241		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.396245		29 08		and #$08	                AND #IDE_STAT_DRQ
.396247		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.396249		d0 f6		bne $396241	                BNE loop                ; No: keep waiting
.39624b		28		plp		                PLP
.39624c		60		rts		                RTS
.39624d						IDE_IDENTIFY
.39624d		5a		phy		                PHY
.39624e		8b		phb		                PHB
.39624f		0b		phd		                PHD
.396250		08		php		                PHP
.396251		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.396254		ab		plb		                PLB
.396255		ab		plb		                PLB
.396256		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.396259		2b		pld		                PLD
.39625a		e2 20		sep #$20	                SEP #$20        ; set A short
.39625c		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.39625f		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396261		29 07		and #$07	                AND #$07
.396263		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396265		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396269		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.39626c		e2 20		sep #$20	                SEP #$20        ; set A short
.39626e		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.396270		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396274		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396278		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.39627c		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396280		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396282		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396286		f0 29		beq $3962b1	                BEQ no_media                    ; If 0: there is no drive
.396288		20 09 62	jsr $396209	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.39628b		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.39628e		90 2d		bcc $3962bd	                BCC ret_failure                 ; If an error occurred, return it
.396290		c2 30		rep #$30	                REP #$30        ; set A&X long
.396292		a0 00 00	ldy #$0000	                LDY #0
.396295		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396299		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.39629b		c8		iny		                INY                             ; Move to the next position
.39629c		c8		iny		                INY
.39629d		c0 00 02	cpy #$0200	                CPY #512
.3962a0		d0 f3		bne $396295	                BNE read_loop
.3962a2						ret_success
.3962a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3962a4		a9 00		lda #$00	                LDA #0
.3962a6		85 00		sta $0320	                STA BIOS_STATUS
.3962a8		8d 06 03	sta $0306	                STA @w FDC_ST0
.3962ab		28		plp		                PLP                             ; Return success
.3962ac		2b		pld		                PLD
.3962ad		ab		plb		                PLB
.3962ae		7a		ply		                PLY
.3962af		38		sec		                SEC
.3962b0		6b		rtl		                RTL
.3962b1						no_media
.3962b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3962b3		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.3962b5		80 0a		bra $3962c1	                BRA pass_failure
.3962b7						not_ata
.3962b7		e2 20		sep #$20	                SEP #$20        ; set A short
.3962b9		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.3962bb		80 04		bra $3962c1	                BRA pass_failure
.3962bd						ret_failure
.3962bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3962bf		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3962c1		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.3962c3		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3962c7		8d 06 03	sta $0306	                STA @w FDC_ST0
.3962ca		28		plp		                PLP
.3962cb		2b		pld		                PLD
.3962cc		ab		plb		                PLB
.3962cd		7a		ply		                PLY
.3962ce		18		clc		                CLC
.3962cf		6b		rtl		                RTL
.3962d0						IDE_GETBLOCK
.3962d0		5a		phy		                PHY
.3962d1		8b		phb		                PHB
.3962d2		0b		phd		                PHD
.3962d3		08		php		                PHP
.3962d4		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.3962d7		ab		plb		                PLB
.3962d8		ab		plb		                PLB
.3962d9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.3962dc		2b		pld		                PLD
.3962dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3962df		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3962e2		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.3962e4		29 07		and #$07	                AND #$07
.3962e6		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.3962e8		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.3962ec		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.3962ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3962f1		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.3962f3		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3962f7		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.3962f9		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3962fd		a5 03		lda $0323	                LDA BIOS_LBA+1
.3962ff		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396303		a5 04		lda $0324	                LDA BIOS_LBA+2
.396305		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396309		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.39630b		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.39630f		ea		nop		                NOP                             ; Wait about 500ns
.396310		ea		nop		                NOP
.396311		ea		nop		                NOP
.396312		ea		nop		                NOP
.396313		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396316		90 2b		bcc $396343	                BCC ret_failure                 ; If an error occurred, return it
.396318		e2 20		sep #$20	                SEP #$20        ; set A short
.39631a		af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.39631e		a0 00 00	ldy #$0000	                LDY #0
.396321		c2 30		rep #$30	                REP #$30        ; set A&X long
.396323		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396327		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.396329		c8		iny		                INY                             ; Move to the next position
.39632a		c8		iny		                INY
.39632b		c0 00 02	cpy #$0200	                CPY #512
.39632e		d0 f3		bne $396323	                BNE read_loop
.396330		ea		nop		                NOP                             ; Wait about 500ns
.396331		ea		nop		                NOP
.396332		ea		nop		                NOP
.396333		ea		nop		                NOP
.396334						ret_success
.396334		e2 20		sep #$20	                SEP #$20        ; set A short
.396336		a9 00		lda #$00	                LDA #0
.396338		85 00		sta $0320	                STA BIOS_STATUS
.39633a		8d 06 03	sta $0306	                STA @w FDC_ST0
.39633d		28		plp		                PLP                             ; Return success
.39633e		2b		pld		                PLD
.39633f		ab		plb		                PLB
.396340		7a		ply		                PLY
.396341		38		sec		                SEC
.396342		6b		rtl		                RTL
.396343						ret_failure
.396343		e2 20		sep #$20	                SEP #$20        ; set A short
.396345		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396349		8d 06 03	sta $0306	                STA @w FDC_ST0
.39634c		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.39634e		85 00		sta $0320	                STA BIOS_STATUS
.396350		28		plp		                PLP
.396351		2b		pld		                PLD
.396352		ab		plb		                PLB
.396353		7a		ply		                PLY
.396354		18		clc		                CLC
.396355		6b		rtl		                RTL
.396356						IDE_PUTBLOCK
.396356		5a		phy		                PHY
.396357		8b		phb		                PHB
.396358		0b		phd		                PHD
.396359		08		php		                PHP
.39635a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.39635d		ab		plb		                PLB
.39635e		ab		plb		                PLB
.39635f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.396362		2b		pld		                PLD
.396363		e2 20		sep #$20	                SEP #$20        ; set A short
.396365		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.396368		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.39636a		29 07		and #$07	                AND #$07
.39636c		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.39636e		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396372		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396375		e2 20		sep #$20	                SEP #$20        ; set A short
.396377		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.396379		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.39637d		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.39637f		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396383		a5 03		lda $0323	                LDA BIOS_LBA+1
.396385		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.396389		a5 04		lda $0324	                LDA BIOS_LBA+2
.39638b		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.39638f		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396391		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.396395		ea		nop		                NOP                             ; Wait about 500ns
.396396		ea		nop		                NOP
.396397		ea		nop		                NOP
.396398		ea		nop		                NOP
.396399		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.39639c		90 37		bcc $3963d5	                BCC ret_failure                 ; If an error occurred, return it
.39639e		c2 30		rep #$30	                REP #$30        ; set A&X long
.3963a0		a0 00 00	ldy #$0000	                LDY #0
.3963a3		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.3963a5		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.3963a9		c8		iny		                INY                             ; Move to the next position
.3963aa		c8		iny		                INY
.3963ab		c0 00 02	cpy #$0200	                CPY #512
.3963ae		d0 f3		bne $3963a3	                BNE read_loop
.3963b0		ea		nop		                NOP                             ; Wait about 500ns
.3963b1		ea		nop		                NOP
.3963b2		ea		nop		                NOP
.3963b3		ea		nop		                NOP
.3963b4		20 27 62	jsr $396227	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3963b7		90 1c		bcc $3963d5	                BCC ret_failure                 ; If an error occurred, return it
.3963b9		ea		nop		                NOP                             ; Wait about 500ns
.3963ba		ea		nop		                NOP
.3963bb		ea		nop		                NOP
.3963bc		ea		nop		                NOP
.3963bd		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.3963c1		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.3963c4		d0 0f		bne $3963d5	                BNE ret_failure                 ; If error: return failure
.3963c6						ret_success
.3963c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3963c8		a9 00		lda #$00	                LDA #0
.3963ca		85 00		sta $0320	                STA BIOS_STATUS
.3963cc		8d 06 03	sta $0306	                STA @w FDC_ST0
.3963cf		28		plp		                PLP                             ; Return success
.3963d0		2b		pld		                PLD
.3963d1		ab		plb		                PLB
.3963d2		7a		ply		                PLY
.3963d3		38		sec		                SEC
.3963d4		6b		rtl		                RTL
.3963d5		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.3963d6		ea		nop		                NOP
.3963d7		ea		nop		                NOP
.3963d8		ea		nop		                NOP
.3963d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3963db		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3963df		80 08		bra $3963e9	                BRA save_error
.3963e1		ea		nop		                NOP
.3963e2		ea		nop		                NOP
.3963e3		ea		nop		                NOP
.3963e4		ea		nop		                NOP
.3963e5		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3963e9		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.3963ec		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.3963ee		85 00		sta $0320	                STA BIOS_STATUS
.3963f0		28		plp		                PLP
.3963f1		2b		pld		                PLD
.3963f2		ab		plb		                PLB
.3963f3		7a		ply		                PLY
.3963f4		18		clc		                CLC
.3963f5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.3963f6						ip_info
>3963f6		c0 a8 01 7a			        .byte   192, 168, 1, 122
>3963fa		ff ff ff 00			        .byte   255,255,255,0
>3963fe		c0 a8 01 01			        .byte   192,168,1,1
>396402		00 00				HAS_ETHERNET    .word   0
.396404						SIMPLE_INIT_ETHERNET_CTRL
.396404		af 02 64 39	lda $396402	        lda     HAS_ETHERNET
.396408		1a		inc a		        inc     a
.396409		8f 02 64 39	sta $396402	        sta     HAS_ETHERNET
.39640d		6b		rtl		        rtl
.39640e		08		php		        php
.39640f		e2 30		sep #$30	        sep     #$30
.396411		af 80 e8 af	lda $afe880	        lda     GABE_MSTR_CTRL
.396415		09 01		ora #$01	        ora     #GABE_CTRL_PWR_LED
.396417		8f 80 e8 af	sta $afe880	        sta     GABE_MSTR_CTRL
.39641b		c2 30		rep #$30	        rep     #$30
.39641d		8b		phb		        phb
.39641e		4b		phk		        phk
.39641f		ab		plb		        plb
.396420		a0 f6 63	ldy #$63f6	        ldy     #<>ip_info
.396423		22 00 80 39	jsl $398000	        jsl     kernel.net.user.init
.396427		ab		plb		        plb
.396428		b0 5c		bcs $396486	        bcs     _done
.39642a		e2 30		sep #$30	        sep     #$30
.39642c		af 80 e8 af	lda $afe880	        lda     GABE_MSTR_CTRL
.396430		29 fe		and #$fe	        and     #~GABE_CTRL_PWR_LED
.396432		8f 80 e8 af	sta $afe880	        sta     GABE_MSTR_CTRL
.396436		c2 30		rep #$30	        rep     #$30
.396438		3b		tsc		        tsc
.396439		38		sec		        sec
.39643a		e9 10 00	sbc #$0010	        sbc     #kernel.net.user.udp_info.size
.39643d		1b		tcs		        tcs
.39643e		1a		inc a		        inc     a
.39643f		aa		tax		        tax
.396440		a9 00 a1	lda #$a100	        lda     #$a100
.396443		95 08		sta $0328,x	        sta     kernel.net.user.udp_info.buffer+0,d,x
.396445		a9 af 00	lda #$00af	        lda     #$af
.396448		95 0a		sta $032a,x	        sta     kernel.net.user.udp_info.buffer+2,d,x
.39644a		a9 05 00	lda #$0005	        lda     #5
.39644d		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.39644f		af 88 64 39	lda $396488	        lda     _ip+0
.396453		95 02		sta $0322,x	        sta     kernel.net.user.udp_info.remote_ip+0,d,x
.396455		af 8a 64 39	lda $39648a	        lda     _ip+2
.396459		95 04		sta $0324,x	        sta     kernel.net.user.udp_info.remote_ip+2,d,x
.39645b		af 8c 64 39	lda $39648c	        lda     _port
.39645f		95 00		sta $0320,x	        sta     kernel.net.user.udp_info.local_port,d,x
.396461		95 06		sta $0326,x	        sta     kernel.net.user.udp_info.remote_port,d,x
.396463		a9 06 00	lda #$0006	        lda     #6
.396466		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.396468		22 06 80 39	jsl $398006	_retry  jsl     kernel.net.user.udp_send
.39646c		b0 fa		bcs $396468	        bcs     _retry
.39646e						_loop
.39646e		a9 14 00	lda #$0014	        lda     #20
.396471		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.396473		22 0c 80 39	jsl $39800c	        jsl     kernel.net.user.udp_recv
.396477		b5 0e		lda $032e,x	        lda     kernel.net.user.udp_info.copied,d,x
.396479		f0 f3		beq $39646e	        beq     _loop
.39647b		b5 0e		lda $032e,x	        lda     kernel.net.user.udp_info.copied,d,x
.39647d		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.39647f		22 06 80 39	jsl $398006	        jsl     kernel.net.user.udp_send
.396483		4c 6e 64	jmp $39646e	        jmp     _loop
.396486		28		plp		_done   plp
.396487		6b		rtl		        rtl
.396488						_ip
>396488		c0 a8 01 05			        .byte   192, 168, 1, 5
>39648c		39 30				_port   .word   12345
.39648e						WaitforittobeReady:
.39648e		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.396492		29 01 00	and #$0001	                AND #$0001
.396495		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.396498		d0 f4		bne $39648e	                BNE WaitforittobeReady
.39649a		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.39649e		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.3964a2		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.3964a6		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.3964aa		a9 00 00	lda #$0000	                LDA #$0000
.3964ad		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.3964b1		a9 00 70	lda #$7000	                LDA #$7000
.3964b4		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.3964b8		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.3964bb		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.3964bf		a9 0b 00	lda #$000b	                LDA #$000B
.3964c2		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.3964c6		a9 00 00	lda #$0000	                LDA #$0000
.3964c9		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.3964cd		20 01 65	jsr $396501	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.3964d0		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.3964d3		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.3964d7		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.3964da		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.3964de		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.3964e1		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.3964e5		20 01 65	jsr $396501	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.3964e8		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.3964eb		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.3964ef		a9 0c 00	lda #$000c	                LDA #$000C
.3964f2		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.3964f6		a9 04 00	lda #$0004	                LDA #$0004
.3964f9		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.3964fd		20 01 65	jsr $396501	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396500		6b		rtl		                RTL
.396501						MAC_ACCESS_WAIT_FOR_COMPLETION
.396501		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.396504		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.396508						WaitForCompletion:
.396508		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.39650c		29 00 80	and #$8000	                AND #$8000
.39650f		c9 00 80	cmp #$8000	                CMP #$8000
.396512		f0 f4		beq $396508	                BEQ WaitForCompletion
.396514		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.396515						INIT_EVID_VID_MODE
.396515		e2 20		sep #$20	                SEP #$20        ; set A short
.396517		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.396519		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.39651d		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.39651f		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.396523		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.396525		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.396529		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.39652d		a9 20		lda #$20	                LDA #$20
.39652f		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.396533		a9 00		lda #$00	                LDA #$00
.396535		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.396539		a9 20		lda #$20	                LDA #$20
.39653b		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.39653f		22 41 66 39	jsl $396641	                JSL INIT_EVID_LUT
.396543		22 2a 66 39	jsl $39662a	                JSL INIT_EVID_FONTSET
.396547		22 65 66 39	jsl $396665	                JSL INIT_EVID_CURSOR
.39654b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39654d		a9 62 00	lda #$0062	                LDA #(100-2)
.396550		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.396554		a9 49 00	lda #$0049	                LDA #(75-2)
.396557		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.39655b		a9 64 00	lda #$0064	                LDA #100
.39655e		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.396562		a9 4b 00	lda #$004b	                LDA #75
.396565		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.396569		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.39656c		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.396570		c2 30		rep #$30	                REP #$30        ; set A&X long
.396572		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.396575		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.396579		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.39657d		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.396580		8d 76 00	sta $0076	                STA EVID_COLORPOS
.396583		e2 20		sep #$20	                SEP #$20        ; set A short
.396585		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.396587		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.39658b		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.39658f		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.396591		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.396595		6b		rtl		                RTL
>396596		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>39659e		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>3965ae		0c 1b
>3965b0		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>3965b8		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>3965c8		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>3965d8		56 49 44 0d 00
>3965dd		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>3965e5		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.3965f5						EVID_GREET
.3965f5		48		pha		                PHA
.3965f6		da		phx		                PHX
.3965f7		08		php		                PHP
.3965f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3965fa		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.3965fe		f0 26		beq $396626	                BEQ done                        ; If not, skip this routine
.396600		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.396602		22 3c 10 00	jsl $00103c	                JSL SETOUT
.396606		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.39660a		c2 10		rep #$10	                REP #$10        ; set X long
.39660c		8b		phb		                PHB                             ; Print the messages
.39660d		a9 39		lda #$39	                LDA #`EVID_DEV_RDY0
.39660f		48		pha		                PHA
.396610		ab		plb		                PLB
.396611		a2 96 65	ldx #$6596	                LDX #<>EVID_DEV_RDY0
.396614		22 fc 06 39	jsl $3906fc	                JSL IPRINT
.396618		a2 dd 65	ldx #$65dd	                LDX #<>EVID_DEV_RDY1
.39661b		22 fc 06 39	jsl $3906fc	                JSL IPRINT
.39661f		ab		plb		                PLB
.396620		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.396622		22 3c 10 00	jsl $00103c	                JSL SETOUT
.396626		28		plp		done            PLP
.396627		fa		plx		                PLX
.396628		68		pla		                PLA
.396629		6b		rtl		                RTL
.39662a						INIT_EVID_FONTSET
.39662a		e2 20		sep #$20	                SEP #$20        ; set A short
.39662c		c2 10		rep #$10	                REP #$10        ; set X long
.39662e		a2 00 00	ldx #$0000	                LDX #$0000
.396631						initFontsetbranch0
.396631		bf 00 00 3f	lda $3f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.396635		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.396639		e8		inx		                INX
.39663a		e0 00 08	cpx #$0800	                CPX #$0800
.39663d		d0 f2		bne $396631	                BNE initFontsetbranch0
.39663f		ea		nop		                NOP
.396640		6b		rtl		                RTL
.396641						INIT_EVID_LUT
.396641		e2 20		sep #$20	                SEP #$20        ; set A short
.396643		e2 10		sep #$10	                SEP #$10        ; set X short
.396645		a2 00		ldx #$00	                LDX	#$00
.396647		bf 28 8a 39	lda $398a28,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.39664b		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.39664f		e8		inx		                inx
.396650		e0 40		cpx #$40	                cpx #$40
.396652		d0 f3		bne $396647	                bne lutinitloop0
.396654		a2 00		ldx #$00	                LDX	#$00
.396656		bf 68 8a 39	lda $398a68,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.39665a		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.39665e		e8		inx		                INX
.39665f		e0 40		cpx #$40	                CPX #$40
.396661		d0 f3		bne $396656	                bne lutinitloop1
.396663		ea		nop		                NOP
.396664		6b		rtl		                RTL
.396665						INIT_EVID_CURSOR
.396665		08		php		                PHP
.396666		e2 20		sep #$20	                SEP #$20        ; set A short
.396668		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.39666a		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.39666e		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.396670		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.396674		c2 30		rep #$30	                REP #$30        ; set A&X long
.396676		a9 00 00	lda #$0000	                LDA #$0000;
.396679		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.39667d		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.396681		28		plp		                PLP
.396682		6b		rtl		                RTL
.396683						INIT_EVID_CLRSCREEN
.396683		08		php		                PHP
.396684		e2 20		sep #$20	                SEP #$20        ; set A short
.396686		c2 10		rep #$10	                REP #$10        ; set X long
.396688		a2 00 00	ldx #$0000	                LDX #$0000		        ; Only Use One Pointer
.39668b		a9 20		lda #$20	                LDA #$20		        ; Fill the Entire Screen with Space
.39668d		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA @l EVID_TEXT_MEM,X
.396691		e8		inx		                inx
.396692		e0 00 20	cpx #$2000	                cpx #$2000
.396695		d0 f6		bne $39668d	                bne iclearloop0
.396697		a2 00 00	ldx #$0000	                LDX	#$0000		        ; Only Use One Pointer
.39669a		a9 f0		lda #$f0	                LDA #$F0		        ; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.39669c		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA @l EVID_COLOR_MEM,X
.3966a0		e8		inx		                inx
.3966a1		e0 00 20	cpx #$2000	                cpx #$2000
.3966a4		d0 f6		bne $39669c	                bne iclearloop1
.3966a6		28		plp		                PLP
.3966a7		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.3966a8						ANSI_INIT
.3966a8		da		phx		                    PHX
.3966a9		5a		phy		                    PHY
.3966aa		8b		phb		                    PHB
.3966ab		0b		phd		                    PHD
.3966ac		08		php		                    PHP
.3966ad		c2 30		rep #$30	                REP #$30        ; set A&X long
.3966af		a0 00 00	ldy #$0000	                    LDY #0
.3966b2		22 5e 67 39	jsl $39675e	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.3966b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3966b8		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.3966bc		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.3966be		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.3966c0		d0 1d		bne $3966df	                    BNE no_evid
.3966c2		c2 20		rep #$20	                REP #$20        ; set A long
.3966c4		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.3966c8		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.3966cb		d0 12		bne $3966df	                    BNE no_evid                     ; No: mark the EVID screen as not present
.3966cd		e2 20		sep #$20	                SEP #$20        ; set A short
.3966cf		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.3966d1		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.3966d5		a0 01 00	ldy #$0001	                    LDY #1
.3966d8		22 5e 67 39	jsl $39675e	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.3966dc		80 09		bra $3966e7	                    BRA done
.3966de		00		brk #		                    BRK
.3966df						no_evid
.3966df		e2 20		sep #$20	                SEP #$20        ; set A short
.3966e1		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.3966e3		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.3966e7		28		plp		done                PLP
.3966e8		2b		pld		                    PLD
.3966e9		ab		plb		                    PLB
.3966ea		7a		ply		                    PLY
.3966eb		fa		plx		                    PLX
.3966ec		6b		rtl		                    RTL
.3966ed						ANSI_INIT_LUTS
.3966ed		08		php		                    PHP
.3966ee		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3966f0		a2 00		ldx #$00	                    LDX #0
.3966f2		bf 1e 67 39	lda $39671e,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.3966f6		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.3966fa		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.3966fe		e8		inx		                    INX
.3966ff		e0 40		cpx #$40	                    CPX #4*16
.396701		d0 ef		bne $3966f2	                    BNE vicky_loop
.396703		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.396707		f0 13		beq $39671c	                    BEQ done                        ; If not, we're done
.396709		a2 00		ldx #$00	                    LDX #0
.39670b		bf 1e 67 39	lda $39671e,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.39670f		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.396713		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.396717		e8		inx		                    INX
.396718		e0 40		cpx #$40	                    CPX #4*16
.39671a		d0 ef		bne $39670b	                    BNE evid_loop
.39671c		28		plp		done                PLP
.39671d		6b		rtl		                    RTL
.39671e						ANSI_TEXT_LUT
>39671e		00 00 00 00			                    .byte 0, 0, 0, 0
>396722		00 00 80 00			                    .byte 0, 0, 128, 0
>396726		00 80 00 00			                    .byte 0, 128, 0, 0
>39672a		00 80 80 00			                    .byte 0, 128, 128, 0
>39672e		80 00 00 00			                    .byte 128, 0, 0, 0
>396732		80 00 80 00			                    .byte 128, 0, 128, 0
>396736		80 80 00 00			                    .byte 128, 128, 0, 0
>39673a		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>39673e		80 80 80 00			                    .byte 128, 128, 128, 0
>396742		00 00 ff 00			                    .byte 0, 0, 255, 0
>396746		00 ff 00 00			                    .byte 0, 255, 0, 0
>39674a		00 ff ff 00			                    .byte 0, 255, 255, 0
>39674e		ff 00 00 00			                    .byte 255, 0, 0, 0
>396752		00 7f fc 00			                    .byte 0, 127, 252, 0
>396756		ff ff 00 00			                    .byte 255, 255, 0, 0
>39675a		ff ff ff 00			                    .byte 255, 255, 255, 0
.39675e						INIT_SCREEN_Y
.39675e		c2 30		rep #$30	                REP #$30        ; set A&X long
.396760		c0 00 00	cpy #$0000	                    CPY #0
.396763		f0 06		beq $39676b	                    BEQ setdp_0
.396765		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.396768		5b		tcd		                    TCD
.396769		80 04		bra $39676f	                    BRA set_addresses
.39676b		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.39676e		5b		tcd		                    TCD
.39676f		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.396770		0a		asl a		                    ASL A
.396771		0a		asl a		                    ASL A
.396772		aa		tax		                    TAX
.396773		bf ae 67 39	lda $3967ae,x	                    LDA @l text_address,X
.396777		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.396779		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.39677b		e2 20		sep #$20	                SEP #$20        ; set A short
.39677d		bf b0 67 39	lda $3967b0,x	                    LDA @l text_address+2,X
.396781		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.396783		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.396785		c2 20		rep #$20	                REP #$20        ; set A long
.396787		bf b6 67 39	lda $3967b6,x	                    LDA @l color_address,X
.39678b		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.39678d		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.39678f		e2 20		sep #$20	                SEP #$20        ; set A short
.396791		bf b8 67 39	lda $3967b8,x	                    LDA @l color_address+2,X
.396795		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.396797		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.396799		c2 20		rep #$20	                REP #$20        ; set A long
.39679b		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.39679d		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.39679f		e2 20		sep #$20	                SEP #$20        ; set A short
.3967a1		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.3967a3		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.3967a5		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.3967a7		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.3967a9		22 f7 67 39	jsl $3967f7	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.3967ad		6b		rtl		                    RTL
>3967ae		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>3967b6		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.3967be						ANSI_SETSIZES
.3967be		48		pha		                    PHA
.3967bf		da		phx		                    PHX
.3967c0		5a		phy		                    PHY
.3967c1		0b		phd		                    PHD
.3967c2		08		php		                    PHP
.3967c3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3967c5		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.3967c9		48		pha		                    PHA
.3967ca		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.3967cc		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.3967d0		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.3967d4		a0 00		ldy #$00	                    LDY #0
.3967d6		22 f7 67 39	jsl $3967f7	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.3967da		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.3967dc		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.3967e0		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.3967e4		b0 06		bcs $3967ec	                    BCS done                        ; Not present, just return
.3967e6		a0 01		ldy #$01	                    LDY #1
.3967e8		22 f7 67 39	jsl $3967f7	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.3967ec		68		pla		done                PLA
.3967ed		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.3967f1		28		plp		                    PLP
.3967f2		2b		pld		                    PLD
.3967f3		7a		ply		                    PLY
.3967f4		fa		plx		                    PLX
.3967f5		68		pla		                    PLA
.3967f6		6b		rtl		                    RTL
.3967f7						ANSI_SETSIZE_Y
.3967f7		08		php		                    PHP
.3967f8		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3967fa		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.3967fc		f0 06		beq $396804	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.3967fe		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.396802		80 04		bra $396808	                    BRA resolution
.396804		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.396808		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.39680a		0a		asl a		                    ASL A
.39680b		aa		tax		                    TAX                                 ; Index to the col/line count in X
.39680c		c2 20		rep #$20	                REP #$20        ; set A long
.39680e		bf aa 68 39	lda $3968aa,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.396812		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.396814		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.396816		bf b2 68 39	lda $3968b2,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.39681a		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.39681c		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.39681e		e2 20		sep #$20	                SEP #$20        ; set A short
.396820		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396822		f0 06		beq $39682a	                    BEQ vky_border                      ; Yes: get the border from Vicky
.396824		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.396828		80 04		bra $39682e	                    BRA border
.39682a		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.39682e		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.396830		f0 76		beq $3968a8	                    BEQ done                            ; No border... the sizes are correct now
.396832		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396834		f0 06		beq $39683c	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.396836		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.39683a		80 04		bra $396840	                    BRA get_border_x_size
.39683c		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.396840		29 3f		and #$3f	get_border_x_size   AND #$3F
.396842		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.396844		d0 04		bne $39684a	                    BNE frac_width
.396846		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.396847		4a		lsr a		                    LSR A
.396848		80 03		bra $39684d	                    BRA store_width
.39684a		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.39684b		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.39684c		1a		inc a		                    INC A
.39684d		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.39684f		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.396851		e2 20		sep #$20	                SEP #$20        ; set A short
.396853		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.396855		f0 0c		beq $396863	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.396857		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.39685b		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.39685d		f0 04		beq $396863	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.39685f		c2 20		rep #$20	                REP #$20        ; set A long
.396861		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.396863						adjust_width
.396863		c2 20		rep #$20	                REP #$20        ; set A long
.396865		38		sec		                    SEC
.396866		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.396868		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.39686a		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.39686c		e2 20		sep #$20	                SEP #$20        ; set A short
.39686e		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396870		f0 06		beq $396878	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.396872		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.396876		80 04		bra $39687c	                    BRA get_border_y_size
.396878		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.39687c		29 3f		and #$3f	get_border_y_size   AND #$3F
.39687e		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.396880		d0 04		bne $396886	                    BNE frac_height
.396882		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.396883		4a		lsr a		                    LSR A
.396884		80 03		bra $396889	                    BRA store_height
.396886		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.396887		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.396888		1a		inc a		                    INC A
.396889		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.39688b		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.39688d		e2 20		sep #$20	                SEP #$20        ; set A short
.39688f		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.396891		f0 0c		beq $39689f	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.396893		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.396897		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.396899		f0 04		beq $39689f	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.39689b		c2 20		rep #$20	                REP #$20        ; set A long
.39689d		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.39689f						adjust_height
.39689f		c2 20		rep #$20	                REP #$20        ; set A long
.3968a1		38		sec		                    SEC
.3968a2		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.3968a4		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.3968a6		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.3968a8		28		plp		done                PLP
.3968a9		6b		rtl		                    RTL
>3968aa		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>3968b2		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.3968ba						ANSI_SETDEVICE
.3968ba		48		pha		                    PHA
.3968bb		08		php		                    PHP
.3968bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3968be		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.3968c2		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.3968c4		f0 08		beq $3968ce	                    BEQ console                     ; Yes: point to the console
.3968c6		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.3968c8		f0 0b		beq $3968d5	                    BEQ evid                        ; Check to see if the EVID is present
.3968ca		28		plp		bad_device          PLP
.3968cb		68		pla		                    PLA
.3968cc		38		sec		                    SEC
.3968cd		6b		rtl		                    RTL
.3968ce						console
.3968ce		c2 20		rep #$20	                REP #$20        ; set A long
.3968d0		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.3968d3		80 0d		bra $3968e2	                    BRA set_dp
.3968d5						evid
.3968d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3968d7		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.3968db		f0 ed		beq $3968ca	                    BEQ bad_device                  ; No: return that the device is bad
.3968dd		c2 20		rep #$20	                REP #$20        ; set A long
.3968df		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.3968e2		5b		tcd		set_dp              TCD
.3968e3		28		plp		                    PLP
.3968e4		68		pla		                    PLA
.3968e5		18		clc		                    CLC
.3968e6		6b		rtl		                    RTL
.3968e7						ANSI_PUTC
.3968e7		da		phx		                    PHX
.3968e8		5a		phy		                    PHY
.3968e9		0b		phd		                    PHD
.3968ea		08		php		                    PHP
.3968eb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3968ed		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.3968f1		90 03		bcc $3968f6	                    BCC get_state               ; If valid, check the current state
.3968f3		82 9d 00	brl $396993	                    BRL done                    ; If invalid, just return
.3968f6		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.3968f8		f0 0c		beq $396906	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.3968fa		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.3968fc		f0 21		beq $39691f	                    BEQ do_st_escape
.3968fe		e0 02		cpx #$02	                    CPX #ST_CSI
.396900		f0 3f		beq $396941	                    BEQ do_st_csi
.396902		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.396904		80 06		bra $39690c	                    BRA print_raw
.396906		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.396908		f0 09		beq $396913	                    BEQ go_escape               ; Yes, handle the ESC
.39690a		90 0d		bcc $396919	                    BLT do_control              ; If less than, handle as a control code
.39690c		22 74 6a 39	jsl $396a74	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.396910		82 80 00	brl $396993	                    BRL done
.396913		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.396915		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.396917		80 7a		bra $396993	                    BRA done
.396919		22 2b 6a 39	jsl $396a2b	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.39691d		80 74		bra $396993	                    BRA done
.39691f		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.396921		f0 08		beq $39692b	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.396923		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.396925		d0 0a		bne $396931	                    BNE chk_csi                 ; No: check to see if we have a CSI
.396927		22 1a 10 39	jsl $39101a	                    JSL SHOW_CREDITS            ; Yes: show the credits
.39692b		a9 00		lda #$00	go_init             LDA #ST_INIT
.39692d		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.39692f		80 62		bra $396993	                    BRA done
.396931		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.396933		d0 cd		bne $396902	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.396935		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.396937		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.396939		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.39693b		a9 02		lda #$02	                    LDA #ST_CSI
.39693d		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.39693f		80 52		bra $396993	                    BRA done
.396941		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.396943		90 1d		bcc $396962	                    BLT csi_not_digit
.396945		c9 3a		cmp #$3a	                    CMP #'9'+1
.396947		b0 19		bcs $396962	                    BGE csi_not_digit
.396949		38		sec		                    SEC                         ; Have digit... convert to a number
.39694a		e9 30		sbc #$30	                    SBC #'0'
.39694c		48		pha		                    PHA                         ; Save it
.39694d		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.39694f		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.396951		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.396953		0a		asl a		                    ASL A                       ; A := arg * 4
.396954		0a		asl a		                    ASL A                       ; A := arg * 8
.396955		18		clc		                    CLC
.396956		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.396958		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.39695a		18		clc		                    CLC
.39695b		68		pla		                    PLA                         ; Get the digit back
.39695c		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.39695e		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.396960		80 31		bra $396993	                    BRA done                    ; And we're done with this particular character
.396962		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.396964		d0 0e		bne $396974	                    BNE csi_not_sep
.396966		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.396968		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.39696a		d0 03		bne $39696f	                    BNE csi_next_arg            ; No: move to the next argument
.39696c		82 93 ff	brl $396902	                    BRL pr_and_reset            ; Yes: print and reset state
.39696f		1a		inc a		csi_next_arg        INC A
.396970		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.396972		80 1f		bra $396993	                    BRA done                    ; And we're done with this character
.396974		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.396976		90 0a		bcc $396982	                    BLT csi_not_upper
.396978		c9 5b		cmp #$5b	                    CMP #'Z'+1
.39697a		b0 06		bcs $396982	                    BGE csi_not_upper
.39697c		22 a3 69 39	jsl $3969a3	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.396980		80 11		bra $396993	                    BRA done
.396982		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.396984		90 0a		bcc $396990	                    BLT csi_not_lower
.396986		c9 7b		cmp #$7b	                    CMP #'z'+1
.396988		b0 06		bcs $396990	                    BGE csi_not_lower
.39698a		22 e8 69 39	jsl $3969e8	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.39698e		80 03		bra $396993	                    BRA done
.396990		82 6f ff	brl $396902	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.396993		28		plp		done                PLP
.396994		2b		pld		                    PLD
.396995		7a		ply		                    PLY
.396996		fa		plx		                    PLX
.396997		6b		rtl		                    RTL
.396998						ANSI_INVALID
.396998		08		php		                    PHP
.396999		e2 20		sep #$20	                SEP #$20        ; set A short
.39699b		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.39699d		22 74 6a 39	jsl $396a74	                    JSL ANSI_PUTRAWC            ; Print the character
.3969a1		28		plp		                    PLP
.3969a2		6b		rtl		                    RTL
.3969a3						ANSI_ANSI_UPPER
.3969a3		08		php		                    PHP
.3969a4		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3969a6		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.3969a8		38		sec		                    SEC
.3969a9		e9 40		sbc #$40	                    SBC #'@'
.3969ab		0a		asl a		                    ASL A
.3969ac		aa		tax		                    TAX
.3969ad		fc b2 69	jsr ($3969b2,x)	                    JSR (ansi_table,X)
.3969b0		28		plp		                    PLP
.3969b1		6b		rtl		                    RTL
>3969b2		0c 6d				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>3969b4		8f 6a				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>3969b6		a3 6a				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>3969b8		b7 6a				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>3969ba		cb 6a				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>3969bc		98 69				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>3969be		98 69				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>3969c0		98 69				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>3969c2		df 6a				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>3969c4		98 69				                    .word <>ANSI_INVALID    ; 'I'
>3969c6		5e 6c				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>3969c8		bb 6c				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>3969ca		98 69				                    .word <>ANSI_INVALID    ; 'L'
>3969cc		98 69				                    .word <>ANSI_INVALID    ; 'M'
>3969ce		98 69				                    .word <>ANSI_INVALID    ; 'N'
>3969d0		98 69				                    .word <>ANSI_INVALID    ; 'O'
>3969d2		50 6d				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>3969d4		98 69				                    .word <>ANSI_INVALID    ; 'Q'
>3969d6		98 69				                    .word <>ANSI_INVALID    ; 'R'
>3969d8		98 69				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>3969da		98 69				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>3969dc		98 69				                    .word <>ANSI_INVALID    ; 'U'
>3969de		98 69				                    .word <>ANSI_INVALID    ; 'V'
>3969e0		98 69				                    .word <>ANSI_INVALID    ; 'W'
>3969e2		98 69				                    .word <>ANSI_INVALID    ; 'X'
>3969e4		98 69				                    .word <>ANSI_INVALID    ; 'Y'
>3969e6		98 69				                    .word <>ANSI_INVALID    ; 'Z'
.3969e8						ANSI_ANSI_LOWER
.3969e8		08		php		                    PHP
.3969e9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3969eb		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.3969ed		38		sec		                    SEC
.3969ee		e9 61		sbc #$61	                    SBC #'a'
.3969f0		0a		asl a		                    ASL A
.3969f1		aa		tax		                    TAX
.3969f2		fc f7 69	jsr ($3969f7,x)	                    JSR (ansi_table,X)
.3969f5		28		plp		                    PLP
.3969f6		6b		rtl		                    RTL
>3969f7		98 69				ansi_table          .word <>ANSI_INVALID    ; 'a'
>3969f9		98 69				                    .word <>ANSI_INVALID    ; 'b'
>3969fb		98 69				                    .word <>ANSI_INVALID    ; 'c'
>3969fd		98 69				                    .word <>ANSI_INVALID    ; 'd'
>3969ff		98 69				                    .word <>ANSI_INVALID    ; 'e'
>396a01		98 69				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>396a03		98 69				                    .word <>ANSI_INVALID    ; 'g'
>396a05		f8 6a				                    .word <>ANSI_SET_MODE   ; 'h'
>396a07		98 69				                    .word <>ANSI_INVALID    ; 'i'
>396a09		98 69				                    .word <>ANSI_INVALID    ; 'j'
>396a0b		98 69				                    .word <>ANSI_INVALID    ; 'k'
>396a0d		35 6b				                    .word <>ANSI_RESET_MODE ; 'l'
>396a0f		72 6b				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>396a11		98 69				                    .word <>ANSI_INVALID    ; 'n'
>396a13		98 69				                    .word <>ANSI_INVALID    ; 'o'
>396a15		98 69				                    .word <>ANSI_INVALID    ; 'p'
>396a17		98 69				                    .word <>ANSI_INVALID    ; 'q'
>396a19		98 69				                    .word <>ANSI_INVALID    ; 'r'
>396a1b		98 69				                    .word <>ANSI_INVALID    ; 's'
>396a1d		98 69				                    .word <>ANSI_INVALID    ; 't'
>396a1f		98 69				                    .word <>ANSI_INVALID    ; 'u'
>396a21		98 69				                    .word <>ANSI_INVALID    ; 'v'
>396a23		98 69				                    .word <>ANSI_INVALID    ; 'w'
>396a25		98 69				                    .word <>ANSI_INVALID    ; 'x'
>396a27		98 69				                    .word <>ANSI_INVALID    ; 'y'
>396a29		98 69				                    .word <>ANSI_INVALID    ; 'z'
.396a2b						ANSI_PR_CONTROL
.396a2b		08		php		                    PHP
.396a2c		e2 20		sep #$20	                SEP #$20        ; set A short
.396a2e		c2 10		rep #$10	                REP #$10        ; set X long
.396a30		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.396a32		f0 12		beq $396a46	                    BEQ do_cr
.396a34		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.396a36		f0 1a		beq $396a52	                    BEQ do_lf
.396a38		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.396a3a		f0 1c		beq $396a58	                    BEQ do_bs
.396a3c		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.396a3e		f0 1e		beq $396a5e	                    BEQ do_tab
.396a40		22 74 6a 39	jsl $396a74	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.396a44		80 2c		bra $396a72	                    BRA done
.396a46		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.396a49		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396a4b		c8		iny		                    INY
.396a4c		22 29 6e 39	jsl $396e29	                    JSL ANSI_LOCATE
.396a50		80 20		bra $396a72	                    BRA done
.396a52		22 06 6e 39	jsl $396e06	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.396a56		80 1a		bra $396a72	                    BRA done
.396a58		22 ca 6d 39	jsl $396dca	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.396a5c		80 14		bra $396a72	                    BRA done
.396a5e						do_tab
.396a5e		c2 30		rep #$30	                REP #$30        ; set A&X long
.396a60		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.396a62		29 f8 ff	and #$fff8	                    AND #$FFF8
.396a65		18		clc		                    CLC
.396a66		69 08 00	adc #$0008	                    ADC #$0008
.396a69		aa		tax		                    TAX
.396a6a		e2 20		sep #$20	                SEP #$20        ; set A short
.396a6c		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396a6e		22 29 6e 39	jsl $396e29	                    JSL ANSI_LOCATE
.396a72		28		plp		done                PLP
.396a73		6b		rtl		                    RTL
.396a74						ANSI_PUTRAWC
.396a74		da		phx		                    PHX
.396a75		5a		phy		                    PHY
.396a76		0b		phd		                    PHD
.396a77		08		php		                    PHP
.396a78		e2 20		sep #$20	                SEP #$20        ; set A short
.396a7a		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.396a7e		b0 0a		bcs $396a8a	                    BCS done                        ; If invalid, just return
.396a80		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.396a82		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.396a84		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.396a86		22 9f 6d 39	jsl $396d9f	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.396a8a		28		plp		done                PLP
.396a8b		2b		pld		                    PLD
.396a8c		7a		ply		                    PLY
.396a8d		fa		plx		                    PLX
.396a8e		6b		rtl		                    RTL
.396a8f						ANSI_CUU
.396a8f		08		php		                    PHP
.396a90		e2 20		sep #$20	                SEP #$20        ; set A short
.396a92		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396a94		d0 02		bne $396a98	                    BNE loop                        ; Move so long as not 0
.396a96		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396a98		48		pha		loop                PHA                             ; Save the count
.396a99		22 e8 6d 39	jsl $396de8	                    JSL ANSI_CSRUP                  ; Cursor Up
.396a9d		68		pla		                    PLA                             ; Restore the count
.396a9e		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396a9f		d0 f7		bne $396a98	                    BNE loop
.396aa1		28		plp		                    PLP
.396aa2		60		rts		                    RTS
.396aa3						ANSI_CUD
.396aa3		08		php		                    PHP
.396aa4		e2 20		sep #$20	                SEP #$20        ; set A short
.396aa6		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396aa8		d0 02		bne $396aac	                    BNE loop                        ; Move so long as not 0
.396aaa		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396aac		48		pha		loop                PHA                             ; Save the count
.396aad		22 06 6e 39	jsl $396e06	                    JSL ANSI_CSRDOWN                ; Cursor Down
.396ab1		68		pla		                    PLA                             ; Restore the count
.396ab2		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396ab3		d0 f7		bne $396aac	                    BNE loop
.396ab5		28		plp		                    PLP
.396ab6		60		rts		                    RTS
.396ab7						ANSI_CUF
.396ab7		08		php		                    PHP
.396ab8		e2 20		sep #$20	                SEP #$20        ; set A short
.396aba		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396abc		d0 02		bne $396ac0	                    BNE loop                        ; Move so long as not 0
.396abe		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396ac0		48		pha		loop                PHA                             ; Save the count
.396ac1		22 9f 6d 39	jsl $396d9f	                    JSL ANSI_CSRRIGHT               ; Cursor right
.396ac5		68		pla		                    PLA                             ; Restore the count
.396ac6		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396ac7		d0 f7		bne $396ac0	                    BNE loop
.396ac9		28		plp		                    PLP
.396aca		60		rts		                    RTS
.396acb						ANSI_CUB
.396acb		08		php		                    PHP
.396acc		e2 20		sep #$20	                SEP #$20        ; set A short
.396ace		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396ad0		d0 02		bne $396ad4	                    BNE loop                        ; Move so long as not 0
.396ad2		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396ad4		48		pha		loop                PHA                             ; Save the count
.396ad5		22 ca 6d 39	jsl $396dca	                    JSL ANSI_CSRLEFT                ; Cursor left
.396ad9		68		pla		                    PLA                             ; Restore the count
.396ada		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396adb		d0 f7		bne $396ad4	                    BNE loop
.396add		28		plp		                    PLP
.396ade		60		rts		                    RTS
.396adf						ANSI_CUP
.396adf		08		php		                    PHP
.396ae0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396ae2		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396ae4		d0 02		bne $396ae8	                    BNE get_row
.396ae6		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.396ae8		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.396aea		d0 02		bne $396aee	                    BNE adjust_coords
.396aec		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.396aee		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.396aef		88		dey		                    DEY
.396af0		c2 30		rep #$30	                REP #$30        ; set A&X long
.396af2		22 29 6e 39	jsl $396e29	                    JSL ANSI_LOCATE                 ; Set the cursor position
.396af6		28		plp		                    PLP
.396af7		60		rts		                    RTS
.396af8						ANSI_SET_MODE
.396af8		08		php		                    PHP
.396af9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396afb		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396afd		c9 19		cmp #$19	                    CMP #25
.396aff		d0 24		bne $396b25	                    BNE chk_break
.396b01		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.396b05		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.396b07		d0 0c		bne $396b15	                    BNE check_evid
.396b09		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.396b0d		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.396b0f		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.396b13		80 1e		bra $396b33	                    BRA done
.396b15		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.396b17		d0 1a		bne $396b33	                    BNE done
.396b19		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.396b1d		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.396b1f		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.396b23		80 0e		bra $396b33	                    BRA done
.396b25		c9 1c		cmp #$1c	chk_break           CMP #28
.396b27		d0 0a		bne $396b33	                    BNE done
.396b29		22 a5 72 39	jsl $3972a5	                    JSL KBD_GET_CONTROL
.396b2d		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.396b2f		22 b2 72 39	jsl $3972b2	                    JSL KBD_SET_CONTROL
.396b33		28		plp		done                PLP
.396b34		60		rts		                    RTS
.396b35						ANSI_RESET_MODE
.396b35		08		php		                    PHP
.396b36		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396b38		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396b3a		c9 19		cmp #$19	                    CMP #25
.396b3c		d0 24		bne $396b62	                    BNE chk_break
.396b3e		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.396b42		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.396b44		d0 0c		bne $396b52	                    BNE check_evid
.396b46		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.396b4a		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.396b4c		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.396b50		80 1e		bra $396b70	                    BRA done
.396b52		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.396b54		d0 1a		bne $396b70	                    BNE done
.396b56		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.396b5a		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.396b5c		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.396b60		80 0e		bra $396b70	                    BRA done
.396b62		c9 1c		cmp #$1c	chk_break           CMP #28
.396b64		d0 0a		bne $396b70	                    BNE done
.396b66		22 a5 72 39	jsl $3972a5	                    JSL KBD_GET_CONTROL
.396b6a		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.396b6c		22 b2 72 39	jsl $3972b2	                    JSL KBD_SET_CONTROL
.396b70		28		plp		done                PLP
.396b71		60		rts		                    RTS
.396b72						ANSI_SGR
.396b72		08		php		                    PHP
.396b73		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396b75		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396b77		d0 0d		bne $396b86	                    BNE chk_1
.396b79		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.396b7b		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396b7d		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.396b7f		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.396b81		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396b83		82 d6 00	brl $396c5c	                    BRL done
.396b86		c9 01		cmp #$01	chk_1               CMP #1
.396b88		d0 0f		bne $396b99	                    BNE chk_2
.396b8a		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.396b8c		09 80		ora #$80	                    ORA #$80
.396b8e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396b90		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.396b92		09 40		ora #$40	                    ORA #CONTROL_BOLD
.396b94		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396b96		82 c3 00	brl $396c5c	                    BRL done
.396b99		c9 02		cmp #$02	chk_2               CMP #2
.396b9b		f0 04		beq $396ba1	                    BEQ normal_intensity
.396b9d		c9 16		cmp #$16	chk_22              CMP #22
.396b9f		d0 0f		bne $396bb0	                    BNE chk_7
.396ba1		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.396ba3		29 7f		and #$7f	                    AND #~$80
.396ba5		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396ba7		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.396ba9		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.396bab		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396bad		82 ac 00	brl $396c5c	                    BRL done
.396bb0		c9 07		cmp #$07	chk_7               CMP #7
.396bb2		d0 2c		bne $396be0	                    BNE chk_27
.396bb4		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.396bb6		89 80		bit #$80	                    BIT #CONTROL_INVERT
.396bb8		f0 03		beq $396bbd	                    BEQ invert_on
.396bba		82 9f 00	brl $396c5c	                    BRL done                        ; Yes: just finish
.396bbd		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.396bbf		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396bc1		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.396bc3		0a		asl a		                    ASL  A
.396bc4		69 80		adc #$80	                    ADC  #$80
.396bc6		2a		rol a		                    ROL  A
.396bc7		0a		asl a		                    ASL  A
.396bc8		69 80		adc #$80	                    ADC  #$80
.396bca		2a		rol a		                    ROL  A
.396bcb		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.396bcd		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396bcf		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.396bd1		89 40		bit #$40	                    BIT #CONTROL_BOLD
.396bd3		d0 03		bne $396bd8	                    BNE bold_on
.396bd5		82 84 00	brl $396c5c	                    BRL done                        ; No: we're done
.396bd8		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.396bda		09 80		ora #$80	                    ORA #$80
.396bdc		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396bde		80 7c		bra $396c5c	                    BRA done
.396be0		c9 1b		cmp #$1b	chk_27              CMP #27
.396be2		d0 0c		bne $396bf0	                    BNE chk_39
.396be4		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.396be6		89 80		bit #$80	                    BIT #CONTROL_INVERT
.396be8		f0 72		beq $396c5c	                    BEQ done                        ; No: just finish
.396bea		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.396bec		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.396bee		80 d1		bra $396bc1	                    BRA swap_colors                 ; And go swap the colors
.396bf0		c9 27		cmp #$27	chk_39              CMP #39
.396bf2		d0 10		bne $396c04	                    BNE chk_49
.396bf4		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396bf6		29 0f		and #$0f	                    AND #$0F
.396bf8		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396bfa		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.396bfc		29 f0		and #$f0	                    AND #$F0
.396bfe		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396c00		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c02		80 58		bra $396c5c	                    BRA done
.396c04		c9 31		cmp #$31	chk_49              CMP #49
.396c06		d0 10		bne $396c18	                    BNE chk_foreground
.396c08		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c0a		29 f0		and #$f0	                    AND #$F0
.396c0c		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c0e		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.396c10		29 0f		and #$0f	                    AND #$0F
.396c12		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396c14		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c16		80 44		bra $396c5c	                    BRA done
.396c18		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.396c1a		90 29		bcc $396c45	                    BLT chk_background
.396c1c		c9 26		cmp #$26	                    CMP #38
.396c1e		b0 25		bcs $396c45	                    BGE chk_background
.396c20		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c22		29 0f		and #$0f	                    AND #$0F
.396c24		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c26		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.396c28		38		sec		                    SEC
.396c29		e9 1e		sbc #$1e	                    SBC #30
.396c2b		0a		asl a		                    ASL A
.396c2c		0a		asl a		                    ASL A
.396c2d		0a		asl a		                    ASL A
.396c2e		0a		asl a		                    ASL A
.396c2f		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396c31		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c33		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.396c35		89 40		bit #$40	                    BIT #CONTROL_BOLD
.396c37		d0 03		bne $396c3c	                    BNE bold_fore                   ; No: we're done
.396c39		82 20 00	brl $396c5c	                    BRL done
.396c3c		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.396c3e		09 80		ora #$80	                    ORA #$80
.396c40		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c42		82 17 00	brl $396c5c	                    BRL done
.396c45		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.396c47		90 13		bcc $396c5c	                    BLT done
.396c49		c9 30		cmp #$30	                    CMP #48
.396c4b		b0 0f		bcs $396c5c	                    BGE done
.396c4d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c4f		29 f0		and #$f0	                    AND #$F0
.396c51		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c53		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.396c55		38		sec		                    SEC
.396c56		e9 28		sbc #$28	                    SBC #40
.396c58		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.396c5a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.396c5c		28		plp		done                PLP
.396c5d		60		rts		                    RTS
.396c5e						ANSI_ED
.396c5e		5a		phy		                    PHY
.396c5f		08		php		                    PHP
.396c60		e2 20		sep #$20	                SEP #$20        ; set A short
.396c62		c2 10		rep #$10	                REP #$10        ; set X long
.396c64		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.396c66		d0 1b		bne $396c83	                    BNE not_0                           ; Is the code 0?
.396c68						code_0
.396c68		c2 20		rep #$20	                REP #$20        ; set A long
.396c6a		38		sec		                    SEC                                 ; Calculate min index to erase
.396c6b		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.396c6d		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.396c6f		a8		tay		                    TAY
.396c70		e2 20		sep #$20	                SEP #$20        ; set A short
.396c72		a9 20		lda #$20	code_2_loop         LDA #' '
.396c74		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.396c76		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c78		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.396c7a		c8		iny		                    INY
.396c7b		c0 00 20	cpy #$2000	                    CPY #$2000
.396c7e		d0 f2		bne $396c72	                    BNE code_2_loop
.396c80		82 35 00	brl $396cb8	                    BRL done
.396c83		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.396c85		d0 18		bne $396c9f	                    BNE not_1
.396c87						code_1
.396c87		c2 20		rep #$20	                REP #$20        ; set A long
.396c89		38		sec		                    SEC                                 ; Calculate max index to erase
.396c8a		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.396c8c		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.396c8e		a8		tay		                    TAY
.396c8f		e2 20		sep #$20	                SEP #$20        ; set A short
.396c91		a9 20		lda #$20	code_1_loop         LDA #' '
.396c93		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.396c95		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396c97		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.396c99		88		dey		                    DEY                                 ; Move to the previous index
.396c9a		10 f5		bpl $396c91	                    BPL code_1_loop                     ; And loop until we're done
.396c9c		82 19 00	brl $396cb8	                    BRL done
.396c9f		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.396ca1		f0 04		beq $396ca7	                    BEQ cls_all
.396ca3		c9 03		cmp #$03	                    CMP #3
.396ca5		d0 11		bne $396cb8	                    BNE done                            ; No: just ignore the sequence
.396ca7		a0 00 00	ldy #$0000	cls_all             LDY #0                              ; Start with the cursor's position
.396caa		a9 20		lda #$20	cls_all_loop        LDA #' '
.396cac		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.396cae		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396cb0		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.396cb2		c8		iny		                    INY                                 ; Go to the next position
.396cb3		c0 00 20	cpy #$2000	                    CPY #$2000                          ; Have we reached the end?
.396cb6		d0 f2		bne $396caa	                    BNE cls_all_loop                    ; No: keep going
.396cb8		28		plp		done                PLP
.396cb9		7a		ply		                    PLY
.396cba		60		rts		                    RTS
.396cbb						ANSI_EL
.396cbb		da		phx		                    PHX
.396cbc		5a		phy		                    PHY
.396cbd		08		php		                    PHP
.396cbe		c2 30		rep #$30	                REP #$30        ; set A&X long
.396cc0		38		sec		                    SEC
.396cc1		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.396cc3		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.396cc5		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396cc7		e2 20		sep #$20	                SEP #$20        ; set A short
.396cc9		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.396ccb		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.396ccd		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.396ccf		d0 0e		bne $396cdf	                    BNE not_0                           ; Is the code 0?
.396cd1						code_0
.396cd1		a9 20		lda #$20	                    LDA #' '
.396cd3		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.396cd5		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396cd7		c8		iny		                    INY
.396cd8		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.396cda		d0 f9		bne $396cd5	                    BNE code_0_loop                     ; No: keep looping
.396cdc		82 29 00	brl $396d08	                    BRL done
.396cdf		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.396ce1		d0 11		bne $396cf4	                    BNE not_1
.396ce3						code_1
.396ce3		a9 20		lda #$20	                    LDA #' '
.396ce5		a0 00 00	ldy #$0000	                    LDY #0
.396ce8		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396cea		c8		iny		                    INY
.396ceb		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.396ced		d0 f9		bne $396ce8	                    BNE code_1_loop                     ; No: keep looping
.396cef		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.396cf1		82 14 00	brl $396d08	                    BRL done
.396cf4		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.396cf6		f0 04		beq $396cfc	                    BEQ code_2_3
.396cf8		c9 03		cmp #$03	                    CMP #3
.396cfa		d0 0c		bne $396d08	                    BNE done                            ; No: just ignore the sequence
.396cfc						code_2_3
.396cfc		a9 20		lda #$20	                    LDA #' '
.396cfe		a0 00 00	ldy #$0000	                    LDY #0
.396d01		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.396d03		c8		iny		                    INY
.396d04		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.396d06		d0 f9		bne $396d01	                    BNE code_2_3_loop                   ; No: keep looping
.396d08		28		plp		done                PLP
.396d09		7a		ply		                    PLY
.396d0a		fa		plx		                    PLX
.396d0b		60		rts		                    RTS
.396d0c						ANSI_ICH
.396d0c		5a		phy		                    PHY
.396d0d		08		php		                    PHP
.396d0e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396d10		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.396d12		f0 04		beq $396d18	                    BEQ default_1                       ; If 0, default to 1
.396d14		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.396d16		d0 04		bne $396d1c	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.396d18		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.396d1a		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.396d1c		38		sec		calc_src_dest       SEC
.396d1d		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.396d1f		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.396d21		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396d23		38		sec		                    SEC
.396d24		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.396d26		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.396d28		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.396d2a		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d2c		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.396d2e		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d30		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.396d32		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.396d34		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.396d36		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.396d38		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.396d3a		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.396d3c		10 ea		bpl $396d28	                    BPL insert_loop                     ; Keep looping until we reach the end
.396d3e		a0 00		ldy #$00	                    LDY #0
.396d40		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.396d42		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d44		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396d46		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.396d48		c8		iny		                    INY                                 ; Move to the next byte
.396d49		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.396d4b		d0 f3		bne $396d40	                    BNE fill_loop
.396d4d		28		plp		                    PLP
.396d4e		7a		ply		                    PLY
.396d4f		60		rts		                    RTS
.396d50						ANSI_DCH
.396d50		5a		phy		                    PHY
.396d51		08		php		                    PHP
.396d52		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396d54		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.396d56		f0 04		beq $396d5c	                    BEQ default_1                       ; If 0, default to 1
.396d58		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.396d5a		d0 04		bne $396d60	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.396d5c		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.396d5e		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.396d60		a9 00		lda #$00	calc_src_dest       LDA #0
.396d62		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.396d64		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.396d66		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.396d68		38		sec		                    SEC                                 ; Calculate end offset
.396d69		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.396d6b		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.396d6d		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.396d6f		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.396d71		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d73		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.396d75		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d77		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.396d79		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.396d7b		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.396d7d		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.396d7f		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.396d81		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.396d83		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396d85		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.396d87		90 e6		bcc $396d6f	                    BLT del_loop                        ; Keep looping until we reach the end
.396d89		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.396d8a		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.396d8c		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.396d8e		a8		tay		                    TAY
.396d8f		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.396d91		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.396d93		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396d95		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.396d97		c8		iny		                    INY                                 ; Move to the next byte
.396d98		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.396d9a		90 f3		bcc $396d8f	                    BLT fill_loop
.396d9c		28		plp		                    PLP
.396d9d		7a		ply		                    PLY
.396d9e		60		rts		                    RTS
.396d9f						ANSI_CSRRIGHT
.396d9f		da		phx		                    PHX
.396da0		5a		phy		                    PHY
.396da1		0b		phd		                    PHD
.396da2		08		php		                    PHP
.396da3		c2 30		rep #$30	                REP #$30        ; set A&X long
.396da5		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396da9		b0 1a		bcs $396dc5	                    BCS done                            ; If invalid, just return
.396dab		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.396dad		e8		inx		                    INX
.396dae		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.396db0		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.396db2		90 0d		bcc $396dc1	                    BCC nowrap                          ; No: just set the position
.396db4		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.396db7		c8		iny		                    INY                                 ; And move to the next row
.396db8		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.396dba		90 05		bcc $396dc1	                    BCC nowrap                          ; No: just set the position
.396dbc		88		dey		                    DEY                                 ; Yes: lock to the last row
.396dbd		22 8d 6e 39	jsl $396e8d	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.396dc1		22 29 6e 39	jsl $396e29	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.396dc5		28		plp		done                PLP
.396dc6		2b		pld		                    PLD
.396dc7		7a		ply		                    PLY
.396dc8		fa		plx		                    PLX
.396dc9		6b		rtl		                    RTL
.396dca						ANSI_CSRLEFT
.396dca		da		phx		                    PHX
.396dcb		5a		phy		                    PHY
.396dcc		0b		phd		                    PHD
.396dcd		08		php		                    PHP
.396dce		c2 30		rep #$30	                REP #$30        ; set A&X long
.396dd0		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396dd4		b0 0d		bcs $396de3	                    BCS done                    ; If invalid, just return
.396dd6		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.396dd8		f0 09		beq $396de3	                    BEQ done                    ; If so, just ignore this call
.396dda		ca		dex		                    DEX
.396ddb		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.396ddd		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396ddf		22 29 6e 39	jsl $396e29	                    JSL ANSI_LOCATE
.396de3		28		plp		done                PLP
.396de4		2b		pld		                    PLD
.396de5		7a		ply		                    PLY
.396de6		fa		plx		                    PLX
.396de7		6b		rtl		                    RTL
.396de8						ANSI_CSRUP
.396de8		da		phx		                    PHX
.396de9		5a		phy		                    PHY
.396dea		0b		phd		                    PHD
.396deb		08		php		                    PHP
.396dec		c2 30		rep #$30	                REP #$30        ; set A&X long
.396dee		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396df2		b0 0d		bcs $396e01	                    BCS done                    ; If invalid, just return
.396df4		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.396df6		f0 09		beq $396e01	                    BEQ done                    ; If we are, just ignore the call
.396df8		88		dey		                    DEY
.396df9		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.396dfb		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.396dfd		22 29 6e 39	jsl $396e29	                    JSL ANSI_LOCATE
.396e01		28		plp		done                PLP
.396e02		2b		pld		                    PLD
.396e03		7a		ply		                    PLY
.396e04		fa		plx		                    PLX
.396e05		6b		rtl		                    RTL
.396e06						ANSI_CSRDOWN
.396e06		da		phx		                    PHX
.396e07		5a		phy		                    PHY
.396e08		0b		phd		                    PHD
.396e09		08		php		                    PHP
.396e0a		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e0c		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396e10		b0 12		bcs $396e24	                    BCS done                            ; If invalid, just return
.396e12		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.396e14		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.396e16		c8		iny		                    INY
.396e17		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.396e19		90 05		bcc $396e20	                    BCC noscroll                        ; No: go ahead and set the position
.396e1b		88		dey		                    DEY                                 ; Yes: go back to the last row
.396e1c		22 8d 6e 39	jsl $396e8d	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.396e20		22 29 6e 39	jsl $396e29	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.396e24		28		plp		done                PLP
.396e25		2b		pld		                    PLD
.396e26		7a		ply		                    PLY
.396e27		fa		plx		                    PLX
.396e28		6b		rtl		                    RTL
.396e29						ANSI_LOCATE
.396e29		da		phx		                    PHX
.396e2a		5a		phy		                    PHY
.396e2b		0b		phd		                    PHD
.396e2c		08		php		                    PHP
.396e2d		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396e31		b0 55		bcs $396e88	                    BCS done                    ; If invalid, just return
.396e33		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e35						locate_scroll
.396e35		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.396e37		90 07		bcc $396e40	                    BCC locate_scrolldone
.396e39		22 8d 6e 39	jsl $396e8d	                    JSL ANSI_SCROLLUP
.396e3d		88		dey		                    DEY
.396e3e		80 f5		bra $396e35	                    BRA locate_scroll
.396e40						locate_scrolldone
.396e40		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.396e42		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.396e44		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.396e46						locate_row
.396e46		c0 00 00	cpy #$0000	                    CPY #$0
.396e49		f0 08		beq $396e53	                    BEQ locate_right
.396e4b		18		clc		locate_down         CLC
.396e4c		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396e4e		88		dey		                    DEY
.396e4f		f0 02		beq $396e53	                    BEQ locate_right
.396e51		80 f8		bra $396e4b	                    BRA locate_down
.396e53		18		clc		locate_right        CLC
.396e54		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.396e56		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.396e58		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396e5a		e2 20		sep #$20	                SEP #$20        ; set A short
.396e5c		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.396e60		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396e62		f0 0e		beq $396e72	                    beq locate_evid
.396e64		c2 20		rep #$20	                REP #$20        ; set A long
.396e66		98		tya		                    TYA
.396e67		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.396e6b		8a		txa		                    TXA
.396e6c		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.396e70		80 0c		bra $396e7e	                    BRA update_colorpos
.396e72						locate_evid
.396e72		c2 20		rep #$20	                REP #$20        ; set A long
.396e74		98		tya		                    TYA
.396e75		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.396e79		8a		txa		                    TXA
.396e7a		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.396e7e						update_colorpos
.396e7e		c2 20		rep #$20	                REP #$20        ; set A long
.396e80		18		clc		                    CLC
.396e81		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.396e83		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.396e86		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.396e88		28		plp		done                PLP
.396e89		2b		pld		                    PLD
.396e8a		7a		ply		                    PLY
.396e8b		fa		plx		                    PLX
.396e8c		6b		rtl		                    RTL
.396e8d						ANSI_SCROLLUP
.396e8d		da		phx		                    PHX
.396e8e		5a		phy		                    PHY
.396e8f		8b		phb		                    PHB
.396e90		0b		phd		                    PHD
.396e91		08		php		                    PHP
.396e92		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396e96		90 03		bcc $396e9b	                    BCC calc_size
.396e98		82 81 00	brl $396f1c	                    BRL done                    ; If invalid, just return
.396e9b						calc_size
.396e9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.396e9d		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.396e9f		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.396ea3		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.396ea5		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.396ea9		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.396ead		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396eaf		18		clc		                    CLC
.396eb0		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.396eb2		a8		tay		                    TAY
.396eb3		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396eb5		aa		tax		                    TAX
.396eb6		e2 20		sep #$20	                SEP #$20        ; set A short
.396eb8		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.396ebc		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396ebe		f0 09		beq $396ec9	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.396ec0						move_text_0
.396ec0		c2 20		rep #$20	                REP #$20        ; set A long
.396ec2		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ec4		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.396ec7		80 07		bra $396ed0	                    BRA scroll_color
.396ec9						move_text_1
.396ec9		c2 20		rep #$20	                REP #$20        ; set A long
.396ecb		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ecd		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.396ed0						scroll_color
.396ed0		c2 30		rep #$30	                REP #$30        ; set A&X long
.396ed2		18		clc		                    CLC
.396ed3		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.396ed5		a8		tay		                    TAY
.396ed6		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.396ed8		aa		tax		                    TAX
.396ed9		e2 20		sep #$20	                SEP #$20        ; set A short
.396edb		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.396edf		c9 04		cmp #$04	                    CMP #CHAN_EVID
.396ee1		f0 09		beq $396eec	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.396ee3						move_color_0
.396ee3		c2 20		rep #$20	                REP #$20        ; set A long
.396ee5		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ee7		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.396eea		80 07		bra $396ef3	                    BRA vicky_lastline
.396eec						move_color_1
.396eec		c2 20		rep #$20	                REP #$20        ; set A long
.396eee		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ef0		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.396ef3						vicky_lastline
.396ef3		c2 20		rep #$20	                REP #$20        ; set A long
.396ef5		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.396ef7		48		pha		                    PHA
.396ef8		18		clc		                    CLC
.396ef9		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.396efb		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396efd		a0 00 00	ldy #$0000	start_clear         LDY #0
.396f00		a9 20 00	lda #$0020	                    LDA #' '
.396f03		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.396f05		c8		iny		                    INY
.396f06		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.396f08		d0 f9		bne $396f03	                    BNE clr_text
.396f0a		68		pla		vicky_lastcolor     PLA
.396f0b		18		clc		                    CLC
.396f0c		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.396f0e		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.396f10		a0 00 00	ldy #$0000	start_color         LDY #0
.396f13		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.396f15		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.396f17		c8		iny		                    INY
.396f18		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.396f1a		d0 f9		bne $396f15	                    BNE clr_color
.396f1c		28		plp		done                PLP
.396f1d		2b		pld		                    PLD
.396f1e		ab		plb		                    PLB
.396f1f		7a		ply		                    PLY
.396f20		fa		plx		                    PLX
.396f21		6b		rtl		                    RTL
.396f22						ANSI_CLRSCREEN
.396f22		da		phx		                    PHX
.396f23		5a		phy		                    PHY
.396f24		0b		phd		                    PHD
.396f25		08		php		                    PHP
.396f26		22 ba 68 39	jsl $3968ba	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.396f2a		b0 1e		bcs $396f4a	                    BCS done                            ; If invalid, just return
.396f2c		e2 20		sep #$20	                SEP #$20        ; set A short
.396f2e		c2 10		rep #$10	                REP #$10        ; set X long
.396f30		a0 00 00	ldy #$0000	                    LDY #0
.396f33		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.396f35		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.396f37		c8		iny		                    INY
.396f38		c0 00 20	cpy #$2000	                    CPY #$2000
.396f3b		d0 f8		bne $396f35	                    BNE iclearloop0
.396f3d		a0 00 00	ldy #$0000	                    LDY	#0
.396f40		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.396f42		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.396f44		c8		iny		                    INY
.396f45		c0 00 20	cpy #$2000	                    CPY #$2000
.396f48		d0 f8		bne $396f42	                    BNE evid_clearloop1
.396f4a		28		plp		done                PLP
.396f4b		2b		pld		                    PLD
.396f4c		7a		ply		                    PLY
.396f4d		fa		plx		                    PLX
.396f4e		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keyboard has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keyboard controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keyboard controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keyboard controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keyboard controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.396f4f						IINITKEYBOARD
.396f4f		da		phx		                    PHX
.396f50		5a		phy		                    PHY
.396f51		0b		phd		                    PHD
.396f52		08		php		                    PHP
.396f53		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.396f56		2b		pld		                PLD
.396f57		e2 20		sep #$20	                SEP #$20        ; set A short
.396f59		c2 10		rep #$10	                REP #$10        ; set X long
.396f5b		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.396f5f		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.396f61		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.396f65		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.396f67		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.396f69		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.396f6b		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.396f6d		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.396f6f		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.396f71		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.396f73		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.396f75		c2 20		rep #$20	                REP #$20        ; set A long
.396f77		a9 00 77	lda #$7700	                    LDA #<>SC_US_UNMOD
.396f7a		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.396f7c		a9 80 77	lda #$7780	                    LDA #<>SC_US_SHFT
.396f7f		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.396f81		a9 00 78	lda #$7800	                    LDA #<>SC_US_CTRL
.396f84		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.396f86		a9 80 78	lda #$7880	                    LDA #<>SC_US_LOCK
.396f89		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.396f8b		a9 00 79	lda #$7900	                    LDA #<>SC_US_LOCK_SHFT
.396f8e		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.396f90		a9 80 79	lda #$7980	                    LDA #<>SC_US_CTRL_SHFT
.396f93		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.396f95		e2 20		sep #$20	                SEP #$20        ; set A short
.396f97		a9 39		lda #$39	                    LDA #`SC_US_UNMOD
.396f99		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.396f9b		a9 39		lda #$39	                    LDA #`SC_US_SHFT
.396f9d		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.396f9f		a9 39		lda #$39	                    LDA #`SC_US_CTRL
.396fa1		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.396fa3		a9 39		lda #$39	                    LDA #`SC_US_LOCK
.396fa5		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.396fa7		a9 39		lda #$39	                    LDA #`SC_US_LOCK_SHFT
.396fa9		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.396fab		a9 39		lda #$39	                    LDA #`SC_US_CTRL_SHFT
.396fad		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.396faf		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.396fb1		22 40 70 39	jsl $397040	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.396fb5		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.396fb9		af 60 10 af	lda $af1060	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.396fbd		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.396fbf		22 4b 70 39	jsl $39704b	                    JSL KBD_CTRL_SND_CMD
.396fc3		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.396fc5		f0 05		beq $396fcc	                    BEQ test_AB
.396fc7		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.396fc9		82 64 00	brl $397030	                    BRL done
.396fcc		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.396fce		22 4b 70 39	jsl $39704b	                    JSL KBD_CTRL_SND_CMD
.396fd2		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.396fd4		f0 05		beq $396fdb	                    BEQ write_command
.396fd6		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.396fd8		82 55 00	brl $397030	                    BRL done
.396fdb		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.396fdd		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.396fe0		22 a5 70 39	jsl $3970a5	                    JSL KBD_CTRL_SND_CMD_P
.396fe4		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.396fe6		22 40 70 39	jsl $397040	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.396fea		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.396fee		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.396ff0		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.396ff3		22 5c 70 39	jsl $39705c	                    JSL KBD_SND_CMD
.396ff7		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.396ffa		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.396ffc		a2 00 00	ldx #$0000	                    LDX #0
.396fff		22 5c 70 39	jsl $39705c	                    JSL KBD_SND_CMD
.397003		c9 fa		cmp #$fa	                    CMP #KBD_RESP_ACK           ; Did the keyboard acknowledge the command?
.397005		f0 07		beq $39700e	                    BEQ set_led                 ; Yes: try to set the LEDs
.397007		88		dey		                    DEY                         ; No: try again... counting down
.397008		d0 f0		bne $396ffa	                    BNE enable_loop             ; If we are out of attempts...
.39700a		a9 05		lda #$05	                    LDA #5                      ; Return error #5
.39700c		80 22		bra $397030	                    BRA done
.39700e		a9 36		lda #$36	set_led             LDA #"6"
.397010		22 18 10 00	jsl $001018	                    JSL PUTC
.397014		a9 00		lda #$00	                    LDA #0                      ; Set the state of the locks
.397016		22 91 72 39	jsl $397291	                    JSL KBD_SETLOCKS
.39701a		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.39701e		29 01		and #$01	                    AND #FNX1_INT00_KBD
.397020		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.397024		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.397028		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.39702a		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.39702e		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.397030		28		plp		done                PLP
.397031		2b		pld		                    PLD
.397032		7a		ply		                    PLY
.397033		fa		plx		                    PLX
.397034		6b		rtl		                    RTL
.397035						KBD_WAIT_OUT
.397035		48		pha		                    PHA
.397036		af 64 10 af	lda $af1064	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.39703a		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.39703c		f0 f8		beq $397036	                    BEQ wait                ; If it isn't, keep waiting
.39703e		68		pla		                    PLA
.39703f		6b		rtl		                    RTL
.397040						KBD_WAIT_IN
.397040		48		pha		                    PHA
.397041		af 64 10 af	lda $af1064	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.397045		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.397047		d0 f8		bne $397041	                    BNE wait                ; If not, wait for it to have something
.397049		68		pla		                    PLA
.39704a		6b		rtl		                    RTL
.39704b						KBD_CTRL_SND_CMD
.39704b		22 40 70 39	jsl $397040	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.39704f		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.397053		22 35 70 39	jsl $397035	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.397057		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF
.39705b		6b		rtl		                    RTL
.39705c						KBD_SND_CMD
.39705c		22 40 70 39	jsl $397040	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.397060		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.397064		c2 10		rep #$10	                REP #$10        ; set X long
.397066		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.397069		f0 0b		beq $397076	                    BEQ get_response        ; If 0, check for a response
.39706b		ca		dex		                    DEX                     ; Count down
.39706c		ea		nop		                    NOP                     ; And do a delay
.39706d		ea		nop		                    NOP
.39706e		ea		nop		                    NOP
.39706f		ea		nop		                    NOP
.397070		ea		nop		                    NOP
.397071		ea		nop		                    NOP
.397072		ea		nop		                    NOP
.397073		ea		nop		                    NOP
.397074		80 f0		bra $397066	                    BRA delay
.397076		22 35 70 39	jsl $397035	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.39707a		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF
.39707e		6b		rtl		                    RTL
.39707f						KBD_SND_CMD_P
.39707f		22 40 70 39	jsl $397040	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.397083		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.397087		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.397088		c2 10		rep #$10	                REP #$10        ; set X long
.39708a		a2 e8 03	ldx #$03e8	                    LDX #1000
.39708d		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.397090		f0 0a		beq $39709c	                    BEQ send_data           ; If 0, check for a response
.397092		ca		dex		                    DEX                     ; Count down
.397093		ea		nop		                    NOP                     ; And do a delay
.397094		ea		nop		                    NOP
.397095		ea		nop		                    NOP
.397096		ea		nop		                    NOP
.397097		ea		nop		                    NOP
.397098		ea		nop		                    NOP
.397099		ea		nop		                    NOP
.39709a		80 f1		bra $39708d	                    BRA delay
.39709c		22 40 70 39	jsl $397040	send_data           JSL KBD_WAIT_IN
.3970a0		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.3970a4						get_response
.3970a4		6b		rtl		                    RTL
.3970a5						KBD_CTRL_SND_CMD_P
.3970a5		22 40 70 39	jsl $397040	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.3970a9		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.3970ad		8a		txa		                    TXA
.3970ae		22 40 70 39	jsl $397040	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.3970b2		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.3970b6		6b		rtl		                    RTL
.3970b7						KBD_PROCESS_BYTE
.3970b7		8b		phb		                    PHB
.3970b8		0b		phd		                    PHD
.3970b9		08		php		                    PHP
.3970ba		f4 39 39	pea #$3939	                PEA #((`KBD_STATE_MACH) * 256) + (`KBD_STATE_MACH)
.3970bd		ab		plb		                PLB
.3970be		ab		plb		                PLB
.3970bf		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.3970c2		2b		pld		                PLD
.3970c3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3970c5		a9 00		lda #$00	                    LDA #0
.3970c7		8f e0 00 00	sta $0000e0	                    STA @l MOUSE_IDX                    ; A bit of a hack to try to stabilize the mouse
.3970cb		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.3970cf		d0 03		bne $3970d4	                    BNE save_scancode
.3970d1		82 67 00	brl $39713b	                    BRL done                            ; If it's 0, just ignore it
.3970d4						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.3970d4		48		pha		save_scancode       PHA
.3970d5		48		pha		                    PHA
.3970d6		29 80		and #$80	                    AND #$80
.3970d8		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.3970da		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.3970dc		bf 00 76 39	lda $397600,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.3970e0		c9 ff		cmp #$ff	                    CMP #$FF
.3970e2		d0 03		bne $3970e7	                    BNE compare_state
.3970e4		82 54 00	brl $39713b	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.3970e7		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.3970e9		d0 0e		bne $3970f9	                    BNE next_transition                 ; If they don't match, go to the next transition
.3970eb		bf 01 76 39	lda $397601,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.3970ef		f0 0e		beq $3970ff	                    BEQ apply                           ; Is it 0? Yes: the default applies
.3970f1		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.3970f3		df 01 76 39	cmp $397601,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.3970f7		f0 06		beq $3970ff	                    BEQ apply                           ; If equal: this matches, apply the transition
.3970f9		e8		inx		next_transition     INX                                 ; Move to the next transition
.3970fa		e8		inx		                    INX
.3970fb		e8		inx		                    INX
.3970fc		e8		inx		                    INX
.3970fd		80 dd		bra $3970dc	                    BRA chk_transition                  ; Check to see if the next transition applies
.3970ff		bf 02 76 39	lda $397602,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.397103		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.397105		bf 03 76 39	lda $397603,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.397109		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.39710b		f0 2e		beq $39713b	                    BEQ done                            ; Yes: we're done for now
.39710d		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.39710f		f0 06		beq $397117	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.397111		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.397113		f0 0f		beq $397124	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.397115		80 18		bra $39712f	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.397117		a3 02		lda $02,s	emit_base           LDA l_code
.397119		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.39711b		aa		tax		                    TAX
.39711c		bf 00 75 39	lda $397500,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.397120		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.397122		80 0b		bra $39712f	                    BRA emit_A                          ; Emit the translation
.397124		a3 02		lda $02,s	emit_e0             LDA l_code
.397126		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.397128		aa		tax		                    TAX
.397129		bf 80 75 39	lda $397580,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.39712d		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.39712f		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.397131		f0 08		beq $39713b	                    BEQ done                            ; If so, skip enqueuing it
.397133		22 43 71 39	jsl $397143	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.397137		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.397139		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.39713b						done
.39713b		e2 20		sep #$20	                SEP #$20        ; set A short
.39713d		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.39713e		68		pla		                    PLA
.39713f		28		plp		                    PLP
.397140		2b		pld		                    PLD
.397141		ab		plb		                    PLB
.397142		6b		rtl		                    RTL
.397143						KBD_SC_ENQUEUE
.397143		0b		phd		                    PHD
.397144		08		php		                    PHP
.397145		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.397146		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397149		2b		pld		                PLD
.39714a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39714c		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.39714e		f0 2f		beq $39717f	                    BEQ done                        ; Yes: just ignore
.397150		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.397152		d0 10		bne $397164	                    BNE chk_locks                   ; No: check the various lock keys
.397154		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.397156		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.397158		f0 08		beq $397162	                    BEQ enqueue_break                   ; No: enqueue it as normal
.39715a		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.39715c		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.39715e		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.397160		80 1d		bra $39717f	                    BRA done                            ; And we're done
.397162		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.397164		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.397166		f0 1a		beq $397182	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.397168		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.39716a		f0 20		beq $39718c	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.39716c		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.39716e		f0 22		beq $397192	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.397170		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.397172		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.397174		f0 09		beq $39717f	                    BEQ done                        ; Yes: we're full... ignore the scancode
.397176		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.397178		e8		inx		                    INX                             ; Advance to the next location
.397179		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.39717b		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.39717d		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.39717f		28		plp		done                PLP
.397180		2b		pld		                    PLD
.397181		6b		rtl		                    RTL
.397182		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.397184		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.397186		22 91 72 39	jsl $397291	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.39718a		80 f3		bra $39717f	                    BRA done
.39718c		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.39718e		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.397190		80 f4		bra $397186	                    BRA save_locks
.397192		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.397194		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.397196		80 ee		bra $397186	                    BRA save_locks
.397198						KBD_CHAR_ENQUEUE
.397198		0b		phd		                    PHD
.397199		08		php		                    PHP
.39719a		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.39719b		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.39719e		2b		pld		                PLD
.39719f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3971a1		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.3971a3		f0 0f		beq $3971b4	                    BEQ done                        ; Yes: just ignore
.3971a5		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.3971a7		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.3971a9		f0 09		beq $3971b4	                    BEQ done                        ; Yes: we're full... ignore the scancode
.3971ab		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.3971ad		e8		inx		                    INX                             ; Advance to the next location
.3971ae		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.3971b0		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.3971b2		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.3971b4		28		plp		done                PLP
.3971b5		2b		pld		                    PLD
.3971b6		6b		rtl		                    RTL
.3971b7						KBD_CHAR_DEQUEUE
.3971b7		da		phx		                    PHX
.3971b8		0b		phd		                    PHD
.3971b9		08		php		                    PHP
.3971ba		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.3971bd		2b		pld		                PLD
.3971be		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.3971bf		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3971c1		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.3971c3		f0 21		beq $3971e6	                    BEQ return_empty                    ; If it's 0, we have no data
.3971c5		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.3971c7		48		pha		                    PHA                                 ; Save it
.3971c8		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.3971ca		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.3971cc		d0 08		bne $3971d6	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.3971ce		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.3971d0		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.3971d2		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.3971d4		80 0d		bra $3971e3	                    BRA return_head                     ; And return the character we found
.3971d6		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.3971d8		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.3971da		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.3971dc		e8		inx		                    INX                                 ; And move to the next byte
.3971dd		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.3971df		d0 f7		bne $3971d8	                    BNE loop                            ; No: keep copying bytes
.3971e1		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.3971e3		68		pla		return_head         PLA                                 ; Get the character back
.3971e4		80 02		bra $3971e8	                    BRA done                            ; And return it
.3971e6		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.3971e8		28		plp		done                PLP
.3971e9		2b		pld		                    PLD
.3971ea		fa		plx		                    PLX
.3971eb		6b		rtl		                    RTL
.3971ec						KBD_GET_SCANCODE
.3971ec		da		phx		                    PHX
.3971ed		0b		phd		                    PHD
.3971ee		08		php		                    PHP
.3971ef		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.3971f2		2b		pld		                PLD
.3971f3		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.3971f4		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3971f6		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.3971f8		f0 21		beq $39721b	                    BEQ return_empty                ; If it's 0, we have no data
.3971fa		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.3971fc		48		pha		                    PHA                             ; Save it
.3971fd		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.3971ff		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.397201		d0 08		bne $39720b	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.397203		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.397205		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.397207		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.397209		80 0d		bra $397218	                    BRA return_head                 ; And return the scan code we found
.39720b		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.39720d		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.39720f		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; Move it down
.397211		e8		inx		                    INX                             ; And move to the next byte
.397212		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.397214		d0 f7		bne $39720d	                    BNE loop                        ; No: keep copying bytes
.397216		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.397218		68		pla		return_head         PLA                             ; Get the scan code back
.397219		80 02		bra $39721d	                    BRA done                        ; And return it
.39721b		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.39721d		28		plp		done                PLP
.39721e		2b		pld		                    PLD
.39721f		fa		plx		                    PLX
.397220		6b		rtl		                    RTL
.397221						KBD_GETMODS
.397221		0b		phd		                PHD
.397222		08		php		                PHP
.397223		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397226		2b		pld		                PLD
.397227		e2 20		sep #$20	                SEP #$20        ; set A short
.397229		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.39722b		28		plp		                PLP
.39722c		2b		pld		                PLD
.39722d		6b		rtl		                RTL
.39722e						KBD_GET_STAT
.39722e		0b		phd		                PHD
.39722f		08		php		                PHP
.397230		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397233		2b		pld		                PLD
.397234		e2 20		sep #$20	                SEP #$20        ; set A short
.397236		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.397238		28		plp		                PLP
.397239		2b		pld		                PLD
.39723a		6b		rtl		                RTL
.39723b						KBD_TEST_BREAK
.39723b		0b		phd		                PHD
.39723c		08		php		                PHP
.39723d		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397240		2b		pld		                PLD
.397241		e2 20		sep #$20	                SEP #$20        ; set A short
.397243		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.397245		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.397247		d0 04		bne $39724d	                BNE ret_true                    ; If it was set, return TRUE
.397249		28		plp		ret_false       PLP                             ; Otherwise, return false
.39724a		2b		pld		                PLD
.39724b		18		clc		                CLC
.39724c		6b		rtl		                RTL
.39724d		28		plp		ret_true        PLP
.39724e		2b		pld		                PLD
.39724f		38		sec		                SEC
.397250		6b		rtl		                RTL
.397251						KBD_GETMODS_ANSI
.397251		0b		phd		                    PHD
.397252		08		php		                    PHP
.397253		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397256		2b		pld		                PLD
.397257		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397259		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.39725b		48		pha		                    PHA
>0001						l_result            .byte ?
.39725c		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.39725e		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.397260		f0 06		beq $397268	                    BEQ check_alt
.397262		a3 01		lda $01,s	                    LDA l_result
.397264		09 02		ora #$02	                    ORA #%00000010
.397266		83 01		sta $01,s	                    STA l_result
.397268		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.39726a		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.39726c		f0 06		beq $397274	                    BEQ check_ctrl
.39726e		a3 01		lda $01,s	                    LDA l_result
.397270		09 04		ora #$04	                    ORA #%00000100
.397272		83 01		sta $01,s	                    STA l_result
.397274		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.397276		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.397278		f0 06		beq $397280	                    BEQ return_result
.39727a		a3 01		lda $01,s	                    LDA l_result
.39727c		09 08		ora #$08	                    ORA #%00001000
.39727e		83 01		sta $01,s	                    STA l_result
.397280		68		pla		return_result       PLA
.397281		28		plp		                    PLP
.397282		2b		pld		                    PLD
.397283		6b		rtl		                    RTL
.397284						KBD_GETLOCKS
.397284		0b		phd		                PHD
.397285		08		php		                PHP
.397286		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397289		2b		pld		                PLD
.39728a		e2 20		sep #$20	                SEP #$20        ; set A short
.39728c		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.39728e		28		plp		                PLP
.39728f		2b		pld		                PLD
.397290		6b		rtl		                RTL
.397291						KBD_SETLOCKS
.397291		0b		phd		                PHD
.397292		08		php		                PHP
.397293		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397296		2b		pld		                PLD
.397297		e2 20		sep #$20	                SEP #$20        ; set A short
.397299		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.39729b		aa		tax		                TAX                         ; Move the new status to X...
.39729c		a9 ed		lda #$ed	                LDA #KBD_CMD_SET_LED        ; Set the LEDs...
.39729e		22 7f 70 39	jsl $39707f	                JSL KBD_SND_CMD_P
.3972a2		28		plp		                PLP
.3972a3		2b		pld		                PLD
.3972a4		6b		rtl		                RTL
.3972a5						KBD_GET_CONTROL
.3972a5		0b		phd		                PHD
.3972a6		08		php		                PHP
.3972a7		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.3972aa		2b		pld		                PLD
.3972ab		e2 20		sep #$20	                SEP #$20        ; set A short
.3972ad		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.3972af		28		plp		                PLP
.3972b0		2b		pld		                PLD
.3972b1		6b		rtl		                RTL
.3972b2						KBD_SET_CONTROL
.3972b2		0b		phd		                PHD
.3972b3		08		php		                PHP
.3972b4		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.3972b7		2b		pld		                PLD
.3972b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3972ba		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.3972bc		28		plp		                PLP
.3972bd		2b		pld		                PLD
.3972be		6b		rtl		                RTL
.3972bf						KBD_GETCW
.3972bf		22 cb 72 39	jsl $3972cb	                JSL KBD_GETC
.3972c3		c9 00		cmp #$00	                CMP #0
.3972c5		f0 01		beq $3972c8	                BEQ wait
.3972c7		6b		rtl		                RTL
.3972c8		cb		wai		wait            WAI
.3972c9		80 f4		bra $3972bf	                BRA KBD_GETCW
.3972cb						KBD_GETC
.3972cb		0b		phd		                PHD
.3972cc		08		php		                PHP
.3972cd		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.3972d0		2b		pld		                PLD
.3972d1		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3972d3		22 b7 71 39	jsl $3971b7	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.3972d7		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.3972d9		f0 03		beq $3972de	                BEQ get_scancode            ; No: try to get a scan code
.3972db		82 cb 00	brl $3973a9	                BRL done                    ; Yes: return the character we had queued
.3972de		22 ec 71 39	jsl $3971ec	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.3972e2		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.3972e4		d0 04		bne $3972ea	                BNE chk_make_break
.3972e6		28		plp		                PLP                         ; Yes: return 0... we got nothin
.3972e7		38		sec		                SEC
.3972e8		2b		pld		                PLD
.3972e9		6b		rtl		                RTL
.3972ea		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.3972ec		d0 08		bne $3972f6	                BNE handle_break            ; Yes: process the break
.3972ee		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.3972f0		d0 0c		bne $3972fe	                BNE not_make_ls
.3972f2		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.3972f4		80 4e		bra $397344	                BRA set_modifier
.3972f6		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.3972f8		d0 0c		bne $397306	                BNE not_break_ls
.3972fa		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.3972fc		80 50		bra $39734e	                BRA clr_modifier
.3972fe		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.397300		d0 0c		bne $39730e	                BNE not_make_lc
.397302		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.397304		80 3e		bra $397344	                BRA set_modifier
.397306		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.397308		d0 0c		bne $397316	                BNE not_break_lc
.39730a		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.39730c		80 40		bra $39734e	                BRA clr_modifier
.39730e		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.397310		d0 0c		bne $39731e	                BNE not_make_la
.397312		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.397314		80 2e		bra $397344	                BRA set_modifier
.397316		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.397318		d0 0c		bne $397326	                BNE not_break_la
.39731a		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.39731c		80 30		bra $39734e	                BRA clr_modifier
.39731e		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.397320		d0 0c		bne $39732e	                BNE not_make_rs
.397322		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.397324		80 1e		bra $397344	                BRA set_modifier
.397326		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.397328		d0 0c		bne $397336	                BNE not_break_rs
.39732a		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.39732c		80 20		bra $39734e	                BRA clr_modifier
.39732e		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.397330		d0 0c		bne $39733e	                BNE not_make_rc
.397332		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.397334		80 0e		bra $397344	                BRA set_modifier
.397336		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.397338		d0 0e		bne $397348	                BNE not_break_rc
.39733a		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.39733c		80 10		bra $39734e	                BRA clr_modifier
.39733e		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.397340		d0 12		bne $397354	                BNE not_make_ra
.397342		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.397344		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.397346		80 08		bra $397350	                BRA return_null
.397348		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.39734a		d0 04		bne $397350	                BNE return_null                 ; No: we don't use any other break scan codes
.39734c		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.39734e		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.397350		a9 00		lda #$00	return_null     LDA #0
.397352		80 55		bra $3973a9	                BRA done
.397354		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.397355		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.397357		90 0e		bcc $397367	                BLT below_38
.397359		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.39735b		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.39735d		f0 2a		beq $397389	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.39735f		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.397361		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.397363		d0 24		bne $397389	                BNE fetch_unmod                         ; If so: translate the keys as modified
.397365		80 30		bra $397397	                BRA fetch_caps                          ; No: translate the key using the lock table
.397367		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.397369		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.39736b		f0 0c		beq $397379	                BEQ chk_capslock                        ; No: check for capslock
.39736d		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.39736f		f0 04		beq $397375	                BEQ fetch_control                       ; No: translate just based off of control
.397371		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.397373		80 26		bra $39739b	                BRA chk_ansi
.397375		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.397377		80 22		bra $39739b	                BRA chk_ansi
.397379		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.39737b		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.39737d		d0 0e		bne $39738d	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.39737f		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.397381		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.397383		f0 04		beq $397389	                BEQ fetch_unmod                         ; No: translate just based off of control
.397385		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.397387		80 12		bra $39739b	                BRA chk_ansi
.397389		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.39738b		80 0e		bra $39739b	                BRA chk_ansi
.39738d		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.39738f		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.397391		f0 04		beq $397397	                BEQ fetch_caps                          ; No: translate just based off of control
.397393		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.397395		80 04		bra $39739b	                BRA chk_ansi
.397397		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.397399		80 00		bra $39739b	                BRA chk_ansi
.39739b		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.39739d		90 0a		bcc $3973a9	                BLT done                                ; If not, just return the character
.39739f		c9 96		cmp #$96	                CMP #$96
.3973a1		b0 06		bcs $3973a9	                BGE done
.3973a3		22 e5 73 39	jsl $3973e5	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.3973a7		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.3973a9		28		plp		done            PLP
.3973aa		2b		pld		                PLD
.3973ab		18		clc		                CLC
.3973ac		6b		rtl		                RTL
.3973ad						KBD_ENQUEUE_BCD
.3973ad		08		php		                PHP
.3973ae		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3973b0		48		pha		                PHA                     ; Save the value
.3973b1		4a		lsr a		                LSR A                   ; Get the 10s digit
.3973b2		4a		lsr a		                LSR A
.3973b3		4a		lsr a		                LSR A
.3973b4		4a		lsr a		                LSR A
.3973b5		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.3973b7		f0 0b		beq $3973c4	                BEQ enqueue_1
.3973b9		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.3973bb		b0 13		bcs $3973d0	                BGE done_A
.3973bd		18		clc		                CLC                     ; Enqueue the tens digit
.3973be		69 30		adc #$30	                ADC #'0'
.3973c0		22 98 71 39	jsl $397198	                JSL KBD_CHAR_ENQUEUE
.3973c4		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.3973c5		29 0f		and #$0f	                AND #$0F
.3973c7		18		clc		                CLC
.3973c8		69 30		adc #$30	                ADC #'0'
.3973ca		22 98 71 39	jsl $397198	                JSL KBD_CHAR_ENQUEUE
.3973ce		28		plp		done            PLP
.3973cf		6b		rtl		                RTL
.3973d0		68		pla		done_A          PLA
.3973d1		80 fb		bra $3973ce	                BRA done
.3973d3						KBD_BIN_TO_BCD
.3973d3		da		phx		                PHX
.3973d4		08		php		                PHP
.3973d5		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3973d7		aa		tax		                TAX
.3973d8		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.3973da		f8		sed		                SED                     ; Switch to Decimal arithmetic
.3973db		18		clc		loop            CLC
.3973dc		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.3973de		ca		dex		                DEX                     ; Decrement input value in X
.3973df		10 fa		bpl $3973db	                BPL loop                ; loop until input value < 0
.3973e1		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.3973e2		28		plp		                PLP
.3973e3		fa		plx		                PLX
.3973e4		6b		rtl		                RTL
.3973e5						KBD_ENQ_ANSI
.3973e5		08		php		                PHP
.3973e6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3973e8		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.3973ea		b0 03		bcs $3973ef	                BGE chk_high_end
.3973ec		82 4a 00	brl $397439	                BRL done                        ; Out of range, just ignore it
.3973ef		c9 96		cmp #$96	chk_high_end    CMP #$96
.3973f1		90 03		bcc $3973f6	                BLT save_value
.3973f3		82 43 00	brl $397439	                BRL done                        ; Out of range, just ignore it
.3973f6		48		pha		save_value      PHA
.3973f7		a9 5b		lda #$5b	                LDA #'['
.3973f9		22 98 71 39	jsl $397198	                JSL KBD_CHAR_ENQUEUE
.3973fd		68		pla		                PLA
.3973fe		38		sec		                SEC
.3973ff		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.397401		aa		tax		                TAX                     ; And use it as an index to...
.397402		bf 3b 74 39	lda $39743b,x	                LDA @l ENCODE_CODE,X    ; Get the number
.397406		10 0b		bpl $397413	                BPL send_number         ; If MSB is not set, send the number as-is
.397408		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.39740a		18		clc		                CLC
.39740b		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.39740d		22 98 71 39	jsl $397198	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.397411		80 26		bra $397439	                BRA done
.397413		22 d3 73 39	jsl $3973d3	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.397417		22 ad 73 39	jsl $3973ad	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.39741b		22 51 72 39	jsl $397251	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.39741f		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.397421		f0 10		beq $397433	                BEQ close               ; No: close the sequence
.397423		48		pha		                PHA
.397424		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.397426		22 98 71 39	jsl $397198	                JSL KBD_CHAR_ENQUEUE
.39742a		68		pla		                PLA
.39742b		22 d3 73 39	jsl $3973d3	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.39742f		22 ad 73 39	jsl $3973ad	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.397433		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.397435		22 98 71 39	jsl $397198	                JSL KBD_CHAR_ENQUEUE
.397439		28		plp		done            PLP
.39743a		6b		rtl		                RTL
>39743b		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>397441		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>397445		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>39744a		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>39744f		17 18				                .byte 23, 24                ; F11 - F12
.397451						KBD_SETTABLE
.397451		48		pha		                PHA
.397452		8b		phb		                PHB
.397453		0b		phd		                PHD
.397454		08		php		                PHP
.397455		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.397458		2b		pld		                PLD
.397459		e2 20		sep #$20	                SEP #$20        ; set A short
.39745b		8b		phb		                PHB                 ; Get the data bank into A
.39745c		68		pla		                PLA
.39745d		c2 20		rep #$20	                REP #$20        ; set A long
.39745f		29 ff 00	and #$00ff	                AND #$00FF
.397462		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.397464		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.397466		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.397468		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.39746a		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.39746c		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.39746e		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.397470		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.397472		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.397474		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.397476		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.397478		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.39747a		28		plp		                PLP
.39747b		2b		pld		                PLD
.39747c		ab		plb		                PLB
.39747d		68		pla		                PLA
.39747e		6b		rtl		                RTL
>39747f						.align 256
>397500		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>397508		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>397510		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>397518		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>397520		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>397528		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>397530		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>397538		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>397540		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>397548		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>397550		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>397558		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>397560		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>397568		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>397570		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>397578		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>397580		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>397588		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>397590		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>397598		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>3975a0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>3975a8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>3975b0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>3975b8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>3975c0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>3975c8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>3975d0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>3975d8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>3975e0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>3975e8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>3975f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>3975f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.397600						KBD_STATE_MACH
>397600		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>397604		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>397608		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>39760c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>397610		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>397614		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>397618		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>39761c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>397620		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>397624		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>397628		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>39762c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>397630		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>397634		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>397638		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>39763c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>397640		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>397644		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>397648		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>39764c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>397650		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>397654		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>397658		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>39765c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>397660		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>397664						.align 256
>397700		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>397708		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>397710		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>397718		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>397720		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>397728		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>397730		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>397738		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397740		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397748		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397750		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397758		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397760		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397768		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397770		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397778		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397780		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397788		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397790		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>397798		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>3977a0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>3977a8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>3977b0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>3977b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3977c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>3977c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>3977d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>3977d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3977e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3977e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3977f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3977f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397800		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>397808		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>397810		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>397818		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>397820		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>397828		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>397830		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>397838		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397840		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397848		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397850		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397858		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397860		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397868		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397870		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397878		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397880		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>397888		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>397890		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>397898		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>3978a0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>3978a8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>3978b0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>3978b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3978c0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>3978c8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>3978d0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>3978d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3978e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3978e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3978f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3978f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397900		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397908		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397910		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>397918		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>397920		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>397928		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>397930		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>397938		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>397940		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>397948		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>397950		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>397958		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397960		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397968		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397970		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397978		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397980		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397988		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397990		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>397998		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>3979a0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>3979a8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>3979b0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>3979b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>3979c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>3979c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>3979d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>3979d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>3979e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>3979e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>3979f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>3979f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/mouse_driver.asm

.397a00						IINITMOUSE
.397a00		48		pha		                PHA
.397a01		da		phx		                PHX
.397a02		8b		phb		                PHB
.397a03		0b		phd		                PHD
.397a04		08		php		                PHP
.397a05		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.397a08		ab		plb		                PLB
.397a09		ab		plb		                PLB
.397a0a		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.397a0d		2b		pld		                PLD
.397a0e		78		sei		                SEI
.397a0f		e2 20		sep #$20	                SEP #$20        ; set A short
.397a11		c2 10		rep #$10	                REP #$10        ; set X long
.397a13		18		clc		                CLC
.397a14		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397a17		20 02 7b	jsr $397b02	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.397a1a		b0 0b		bcs $397a27	                BCS mouse_init_fail
.397a1c		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.397a1e		8f 64 10 af	sta $af1064	                STA @l KBD_CMD_BUF
.397a22		20 da 7a	jsr $397ada	                JSR Poll_Outbuf_Mouse_TimeOut
.397a25		90 2b		bcc $397a52	                BCC mouse_found
.397a27		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.397a29		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.397a2d		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.397a31		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.397a33		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.397a37		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1         ; Read the Pending Register &
.397a3b		29 01		and #$01	                AND #FNX1_INT00_KBD
.397a3d		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1         ; Writing it back will clear the Active Bit
.397a41		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.397a45		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.397a47		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.397a4b		28		plp		                PLP                             ; Return failure
.397a4c		2b		pld		                PLD
.397a4d		ab		plb		                PLB
.397a4e		fa		plx		                PLX
.397a4f		68		pla		                PLA
.397a50		38		sec		                SEC
.397a51		6b		rtl		                RTL
.397a52		af 60 10 af	lda $af1060	mouse_found     LDA @l KBD_OUT_BUF              ; Clear the Output buffer
.397a56		c9 00		cmp #$00	                CMP #$00
.397a58		d0 bd		bne $397a17	                BNE DO_CMD_A9_AGAIN
.397a5a		a9 f5		lda #$f5	                LDA #$F5                        ; Disable the mouse
.397a5c		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a5f		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a62		b0 c3		bcs $397a27	                BCS mouse_init_fail
.397a64		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.397a66		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a69		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a6c		b0 b9		bcs $397a27	                BCS mouse_init_fail
.397a6e		a9 e8		lda #$e8	                LDA #$E8
.397a70		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a73		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a76		b0 af		bcs $397a27	                BCS mouse_init_fail
.397a78		a9 00		lda #$00	                LDA #$00
.397a7a		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a7d		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a80		b0 a5		bcs $397a27	                BCS mouse_init_fail
.397a82		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.397a84		20 ac 7a	jsr $397aac	                JSR MOUSE_WRITE
.397a87		20 c1 7a	jsr $397ac1	                JSR MOUSE_READ
.397a8a		b0 9b		bcs $397a27	                BCS mouse_init_fail
.397a8c		a9 00		lda #$00	                LDA #$00
.397a8e		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.397a91		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.397a95		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.397a97		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.397a9b		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.397a9f		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.397aa1		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.397aa5		28		plp		mouse_init_ok   PLP
.397aa6		2b		pld		                PLD
.397aa7		ab		plb		                PLB
.397aa8		fa		plx		                PLX
.397aa9		68		pla		                PLA
.397aaa		18		clc		                CLC
.397aab		6b		rtl		                RTL
.397aac						MOUSE_WRITE
.397aac		e2 20		sep #$20	                SEP #$20        ; set A short
.397aae		48		pha		                PHA
.397aaf		20 f5 7a	jsr $397af5	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.397ab2		a9 d4		lda #$d4	                LDA #$D4
.397ab4		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.397ab8		20 f5 7a	jsr $397af5	                JSR Poll_Inbuf
.397abb		68		pla		                PLA
.397abc		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.397ac0		60		rts		                RTS
.397ac1						MOUSE_READ
.397ac1		e2 20		sep #$20	                SEP #$20        ; set A short
.397ac3		20 da 7a	jsr $397ada	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.397ac6		b0 04		bcs $397acc	                BCS done
.397ac8		af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.397acc		60		rts		done            RTS
.397acd						Poll_Outbuf_Mouse
.397acd		e2 20		sep #$20	                SEP #$20        ; set A short
.397acf		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT
.397ad3		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.397ad5		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.397ad7		d0 f6		bne $397acf	                BNE wait
.397ad9		60		rts		                RTS
.397ada						Poll_Outbuf_Mouse_TimeOut
.397ada		e2 20		sep #$20	                SEP #$20        ; set A short
.397adc		c2 10		rep #$10	                REP #$10        ; set X long
.397ade		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397ae1		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT
.397ae5		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.397ae7		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.397ae9		f0 08		beq $397af3	                BEQ ret_success
.397aeb		ca		dex		                DEX
.397aec		e0 00 00	cpx #$0000	                CPX #$0000
.397aef		d0 f0		bne $397ae1	                BNE wait
.397af1		38		sec		                SEC                     ; Return timeout error
.397af2		60		rts		                RTS
.397af3		18		clc		ret_success     CLC                     ; Return success
.397af4		60		rts		                RTS
.397af5						Poll_Inbuf
.397af5		e2 20		sep #$20	                SEP #$20        ; set A short
.397af7		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT         ; Load Status Byte
.397afb		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.397afd		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.397aff		f0 f6		beq $397af7	                BEQ wait
.397b01		60		rts		                RTS
.397b02						Poll_Inbuf_Mouse_TimeOut
.397b02		e2 20		sep #$20	                SEP #$20        ; set A short
.397b04		c2 10		rep #$10	                REP #$10        ; set X long
.397b06		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397b09		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT
.397b0d		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.397b0f		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.397b11		d0 08		bne $397b1b	                BNE ret_success
.397b13		ca		dex		                DEX
.397b14		e0 00 00	cpx #$0000	                CPX #$0000
.397b17		d0 f0		bne $397b09	                BNE wait
.397b19		38		sec		                SEC                     ; Return timeout error
.397b1a		60		rts		                RTS
.397b1b		18		clc		ret_success     CLC                     ; Return success
.397b1c		60		rts		                RTS
.397b1d						MOUSE_INTERRUPT
.397b1d		8b		phb		                PHB
.397b1e		0b		phd		                PHD
.397b1f		08		php		                PHP
.397b20						                setasx
.397b20		78		sei		                SEI
.397b21		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.397b24		ab		plb		                PLB
.397b25		ab		plb		                PLB
.397b26		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.397b29		2b		pld		                PLD
.397b2a		ae e0 00	ldx $00e0	                LDX @w MOUSE_IDX                ; Get the # of the mouse byte to write
.397b2d		af 60 10 af	lda $af1060	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.397b31		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.397b35		e8		inx		next_byte       INX                             ; Move to the next byte
.397b36		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.397b39		d0 1b		bne $397b56	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.397b3b		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.397b3f		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.397b41		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.397b45		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.397b47		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.397b4b		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.397b4d		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.397b51		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.397b53		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.397b56		8e e0 00	stx $00e0	save_ptr        STX @w MOUSE_IDX                ; Save our next byte position (state)
.397b59		28		plp		                PLP
.397b5a		2b		pld		                PLD
.397b5b		ab		plb		                PLB
.397b5c		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/boot_sound.asm

.397b5d						BOOT_SOUND
.397b5d		48		pha		                PHA
.397b5e		da		phx		                PHX
.397b5f		08		php		                PHP
.397b60		e2 20		sep #$20	                SEP #$20        ; set A short
.397b62		a9 00		lda #$00	                LDA #0
.397b64		a2 00 00	ldx #$0000	                LDX #0
.397b67		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.397b6b		e8		inx		                INX                             ; Move to the next SID register
.397b6c		e0 18 00	cpx #$0018	                CPX #24
.397b6f		d0 f6		bne $397b67	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.397b71		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.397b73		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.397b77		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.397b7b		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.397b7f		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.397b81		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.397b85		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.397b89		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.397b8d		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.397b8f		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.397b93		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.397b95		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.397b99		a9 16		lda #$16	                LDA #22
.397b9b		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.397b9f		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.397ba1		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.397ba5		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.397ba8		22 98 0f 39	jsl $390f98	                JSL ILOOP_MS
.397bac		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.397bae		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.397bb2		a9 08		lda #$08	                LDA #8
.397bb4		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.397bb8		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.397bba		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.397bbe		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.397bc1		22 98 0f 39	jsl $390f98	                JSL ILOOP_MS
.397bc5		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.397bc7		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.397bcb		a9 21		lda #$21	                LDA #33
.397bcd		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.397bd1		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.397bd3		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.397bd7		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.397bda		22 98 0f 39	jsl $390f98	                JSL ILOOP_MS
.397bde		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.397be0		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.397be4		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.397be8		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.397bec		a9 0e		lda #$0e	                LDA #14
.397bee		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.397bf2		a2 64 00	ldx #$0064	                LDX #100
.397bf5		22 98 0f 39	jsl $390f98	                JSL ILOOP_MS
.397bf9		3a		dec a		                DEC A
.397bfa		d0 f2		bne $397bee	                BNE dampen
.397bfc		28		plp		                PLP
.397bfd		fa		plx		                PLX
.397bfe		68		pla		                PLA
.397bff		6b		rtl		                RTL
.397c00						BOOT_SOUND_OFF
.397c00		48		pha		                PHA
.397c01		da		phx		                PHX
.397c02		08		php		                PHP
.397c03		a2 00 00	ldx #$0000	                LDX #0
.397c06		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.397c0a		e8		inx		                INX                             ; Move to the next SID register
.397c0b		e0 18 00	cpx #$0018	                CPX #24
.397c0e		d0 f6		bne $397c06	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.397c10		28		plp		                PLP
.397c11		fa		plx		                PLX
.397c12		68		pla		                PLA
.397c13		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\networking/net.asm


;******  Processing file: src\networking/lib_deque.asm

.0000						deque_t
>0000		00 00				head    .word   0
>0002		00 00				tail    .word   0
.0004						end
.0000						link_t
>0000						next    .word   ?
.0002						size

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/lan9221.asm

>397c14						        .align 512
.397e00						eth_read:
.397e00		da		phx		        phx
.397e01		bb		tyx		        tyx
.397e02		08		php		        php
.397e03		78		sei		        sei
.397e04		bf 02 e0 ae	lda $aee002,x	        lda @l  LAN + 2,x
.397e08		a8		tay		        tay
.397e09		bf 00 e0 ae	lda $aee000,x	        lda @l  LAN + 0,x
.397e0d		28		plp		        plp
.397e0e		fa		plx		        plx
.397e0f		60		rts		        rts
.397e10						eth_write:
.397e10		da		phx		        phx
.397e11		48		pha		        pha                     ; MSB in y, LSB on stack.
.397e12		a3 07		lda $07,s	        lda     7,s
.397e14		aa		tax		        tax
.397e15		68		pla		        pla
.397e16		08		php		        php
.397e17		78		sei		        sei
.397e18		9f 00 e0 ae	sta $aee000,x	        sta @l  LAN + 0,x
.397e1c		98		tya		        tya
.397e1d		9f 02 e0 ae	sta $aee002,x	        sta @l  LAN + 2,x
.397e21		28		plp		        plp
.397e22		fa		plx		        plx
.397e23		a3 01		lda $01,s	        lda     1,s     ; load the return address
.397e25		83 03		sta $03,s	        sta     3,s     ; store it atop the register arg
.397e27		68		pla		        pla             ; drop the return address
.397e28		60		rts		        rts
.397e29						rx_status:
.397e29		08		php		        php
.397e2a		78		sei		        sei
.397e2b		af 40 e0 ae	lda $aee040	        lda @l  LAN + hardware.lan9221.RX_STATUS_FIFO + 0
.397e2f		a8		tay		        tay
.397e30		af 42 e0 ae	lda $aee042	        lda @l  LAN + hardware.lan9221.RX_STATUS_FIFO + 2
.397e34		28		plp		        plp
.397e35		60		rts		        rts
.397e36						copy_buffer
.397e36		da		phx		        phx
.397e37		20 5d 80	jsr $39805d	        jsr     kernel.net.pbuf_alloc_x
.397e3a		20 29 7e	jsr $397e29	        jsr     rx_status   ; Already local
.397e3d		29 ff 3f	and #$3fff	        and     #$3fff
.397e40		9f 04 00 3c	sta $3c0004,x	        sta @l  kernel.net.pbuf.length,x
.397e44		18		clc		        clc
.397e45		69 03 00	adc #$0003	        adc     #3
.397e48		4a		lsr a		        lsr     a
.397e49		4a		lsr a		        lsr     a
.397e4a		18		clc		        clc
.397e4b		a8		tay		        tay
.397e4c		da		phx		        phx
.397e4d		af 00 e0 ae	lda $aee000	_loop   lda     LAN + hardware.lan9221.RX_DATA_FIFO + 0
.397e51		9f 06 00 3c	sta $3c0006,x	        sta @l  kernel.net.pbuf.eth,x
.397e55		e8		inx		        inx
.397e56		e8		inx		        inx
.397e57		af 02 e0 ae	lda $aee002	        lda     LAN + hardware.lan9221.RX_DATA_FIFO + 2
.397e5b		9f 06 00 3c	sta $3c0006,x	        sta @l  kernel.net.pbuf.eth,x
.397e5f		e8		inx		        inx
.397e60		e8		inx		        inx
.397e61		88		dey		        dey
.397e62		d0 e9		bne $397e4d	        bne     _loop
.397e64		68		pla		        pla
.397e65		fa		plx		        plx
.397e66		60		rts		        rts
.397e67						send_buffer:
.397e67		bf 04 00 3c	lda $3c0004,x	        lda     kernel.net.pbuf.length,x
.397e6b		09 00 30	ora #$3000	        ora     #4096+8192  ; first and last segment.
.397e6e		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.397e72		a9 00 00	lda #$0000	        lda     #0
.397e75		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.397e79		bf 04 00 3c	lda $3c0004,x	        lda     kernel.net.pbuf.length,x
.397e7d		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.397e81		a9 00 00	lda #$0000	        lda     #0
.397e84		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.397e88		bf 04 00 3c	lda $3c0004,x	        lda     kernel.net.pbuf.length,x
.397e8c		18		clc		        clc
.397e8d		69 03 00	adc #$0003	        adc     #3
.397e90		4a		lsr a		        lsr     a
.397e91		4a		lsr a		        lsr     a
.397e92		a8		tay		        tay
.397e93		da		phx		        phx
.397e94		bf 06 00 3c	lda $3c0006,x	_loop   lda     kernel.net.pbuf.eth,x
.397e98		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.397e9c		e8		inx		        inx
.397e9d		e8		inx		        inx
.397e9e		bf 06 00 3c	lda $3c0006,x	        lda     kernel.net.pbuf.eth,x
.397ea2		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.397ea6		e8		inx		        inx
.397ea7		e8		inx		        inx
.397ea8		88		dey		        dey
.397ea9		d0 e9		bne $397e94	        bne     _loop
.397eab		fa		plx		        plx     ; Packet
.397eac		60		rts		        rts
.397ead						eth_open:
.397ead		20 36 7f	jsr $397f36	        jsr     eth_is_up
.397eb0		b0 49		bcs $397efb	        bcs     _out
.397eb2		20 27 7f	jsr $397f27	        jsr     eth_reset
.397eb5		a0 50 00	ldy #$0050	        ldy     #ETH_ID_REV
.397eb8		20 00 7e	jsr $397e00	        jsr     eth_read
.397ebb		c9 21 92	cmp #$9221	        cmp     #$9221
.397ebe		a0 64 00	ldy #$0064	        ldy     #ETH_BYTE_TEST
.397ec1		20 00 7e	jsr $397e00	        jsr     eth_read
.397ec4		a0 00 77	ldy #$7700	        ldy     #$7700  ; was 7000
.397ec7		a9 00 00	lda #$0000	        lda     #$0000
.397eca		f4 88 00	pea #$0088	        pea     #ETH_GPIO_CFG
.397ecd		20 10 7e	jsr $397e10	        jsr     eth_write
.397ed0		20 71 7f	jsr $397f71	        jsr     set_mac
.397ed3		a0 10 00	ldy #$0010	        ldy     #$0010  ; full-duplex (broadcast on by default)
.397ed6		a9 0c 00	lda #$000c	        lda     #$000c  ; rx+tx
.397ed9		f4 01 00	pea #$0001	        pea     #1  ; MAC CONTROL REGISTER
.397edc		20 db 7f	jsr $397fdb	        jsr     mac_write
.397edf		a0 08 00	ldy #$0008	        ldy     #$0008
.397ee2		a9 00 00	lda #$0000	        lda     #$0000
.397ee5		f4 5c 00	pea #$005c	        pea     #ETH_INT_EN
.397ee8		20 10 7e	jsr $397e10	        jsr     eth_write
.397eeb		20 1a 7f	jsr $397f1a	        jsr     eth_timer_reset
.397eee		a0 00 00	ldy #$0000	        ldy     #0
.397ef1		a9 06 00	lda #$0006	        lda     #6  ; tx enabled, allow status overrun.
.397ef4		f4 70 00	pea #$0070	        pea     #ETH_TX_CFG
.397ef7		20 10 7e	jsr $397e10	        jsr     eth_write
.397efa		18		clc		        clc
.397efb		60		rts		_out    rts
.397efc		38		sec		_err    sec
.397efd		4c fb 7e	jmp $397efb	        jmp     _out
.397f00						eth_tick:
.397f00		a0 58 00	ldy #$0058	        ldy     #ETH_INT_STS
.397f03		20 00 7e	jsr $397e00	        jsr     eth_read
.397f06		98		tya		        tya
.397f07		29 08 00	and #$0008	        and     #$0008
.397f0a		f0 0d		beq $397f19	        beq     _out
.397f0c		a8		tay		        tay
.397f0d		a9 00 00	lda #$0000	        lda     #0
.397f10		f4 58 00	pea #$0058	        pea     #ETH_INT_STS
.397f13		20 10 7e	jsr $397e10	        jsr     eth_write
.397f16		20 1a 7f	jsr $397f1a	        jsr     eth_timer_reset
.397f19		60		rts		_out    rts
.397f1a						eth_timer_reset
.397f1a		a0 00 20	ldy #$2000	        ldy     #$2000
.397f1d		a9 e8 03	lda #$03e8	        lda     #1000   ; 100ms
.397f20		f4 8c 00	pea #$008c	        pea     #ETH_GPT_CFG
.397f23		20 10 7e	jsr $397e10	        jsr     eth_write
.397f26		60		rts		        rts
.397f27						eth_reset:
.397f27		a0 00 00	ldy #$0000	        ldy     #$0000
.397f2a		a9 01 00	lda #$0001	        lda     #$0001
.397f2d		f4 74 00	pea #$0074	        pea     #ETH_HW_CFG
.397f30		20 10 7e	jsr $397e10	        jsr     eth_write
.397f33		4c 36 7f	jmp $397f36	        jmp     eth_is_up
.397f36						eth_is_up:
.397f36		a2 64 00	ldx #$0064	        ldx     #100    ; ms ish
.397f39		a0 84 00	ldy #$0084	_loop   ldy     #ETH_PMT_CTRL
.397f3c		20 00 7e	jsr $397e00	        jsr     eth_read
.397f3f		29 01 00	and #$0001	        and     #1
.397f42		f0 02		beq $397f46	        beq     _retry
.397f44		18		clc		        clc
.397f45		60		rts		_out    rts
.397f46		38		sec		_retry  sec
.397f47		ca		dex		        dex
.397f48		f0 fb		beq $397f45	        beq     _out
.397f4a		a9 10 27	lda #$2710	        lda     #10000
.397f4d		ea		nop		_delay  nop
.397f4e		ea		nop		        nop
.397f4f		ea		nop		        nop
.397f50		ea		nop		        nop
.397f51		3a		dec a		        dec     a
.397f52		d0 f9		bne $397f4d	        bne     _delay
.397f54		4c 39 7f	jmp $397f39	        jmp     _loop
.397f57						eth_packet_send
.397f57		20 67 7e	jsr $397e67	        jsr     send_buffer
.397f5a		4c 6e 80	jmp $39806e	        jmp     kernel.net.pbuf_free_x
.397f5d						eth_packet_recv
.397f5d		20 66 7f	jsr $397f66	        jsr     get_rx_count
.397f60		f0 03		beq $397f65	        beq     _done
.397f62		20 36 7e	jsr $397e36	        jsr     copy_buffer
.397f65		60		rts		_done   rts
.397f66						get_rx_count
.397f66		a0 7c 00	ldy #$007c	        ldy     #ETH_RX_FIFO_INF
.397f69		20 00 7e	jsr $397e00	        jsr     eth_read
.397f6c		98		tya		        tya
.397f6d		29 ff 00	and #$00ff	        and     #$ff
.397f70		60		rts		        rts
.397f71						set_mac:
.397f71		a0 00 00	ldy #$0000	        ldy     #0
.397f74		af 87 86 39	lda $398687	        lda     kernel.net.conf.eth_mac+4
.397f78		f4 02 00	pea #$0002	        pea     #ETH_MAC_ADDRH
.397f7b		20 db 7f	jsr $397fdb	        jsr     mac_write
.397f7e		af 85 86 39	lda $398685	        lda     kernel.net.conf.eth_mac+2
.397f82		a8		tay		        tay
.397f83		af 83 86 39	lda $398683	        lda     kernel.net.conf.eth_mac+0
.397f87		f4 03 00	pea #$0003	        pea     #ETH_MAC_ADDRL
.397f8a		20 db 7f	jsr $397fdb	        jsr     mac_write
.397f8d		60		rts		        rts
=31						ETH_PHY_SPECIAL = 31
.397f8e						get_phy_speed:
.397f8e		a0 1f 00	ldy #$001f	        ldy     #ETH_PHY_SPECIAL
.397f91		20 9b 7f	jsr $397f9b	        jsr     phy_read
.397f94		4a		lsr a		        lsr     a
.397f95		4a		lsr a		        lsr     a
.397f96		18		clc		        clc
.397f97		29 07 00	and #$0007	        and     #7
.397f9a		60		rts		        rts
.397f9b						phy_read:
.397f9b		20 ba 7f	jsr $397fba	        jsr     phy_wait
.397f9e		98		tya		        tya
.397f9f		a0 00 00	ldy #$0000	        ldy     #0              ; MSB
.397fa2		29 1f 00	and #$001f	        and     #31
.397fa5		eb		xba		        xba
.397fa6		4a		lsr a		        lsr     a
.397fa7		4a		lsr a		        lsr     a
.397fa8		09 01 08	ora #$0801	        ora     #2049           ; LSB: PHY #1 + MIIBZY
.397fab		f4 06 00	pea #$0006	        pea     #ETH_MAC_MII_ACC
.397fae		20 db 7f	jsr $397fdb	        jsr     mac_write       ; Request the read.
.397fb1		20 ba 7f	jsr $397fba	        jsr     phy_wait        ; Data should now be in MAC's MII_DATA.
.397fb4		a0 07 00	ldy #$0007	        ldy     #ETH_MAC_MII_DATA
.397fb7		4c c8 7f	jmp $397fc8	        jmp     mac_read
.397fba						phy_wait:
.397fba		5a		phy		        phy
.397fbb		a0 06 00	ldy #$0006	_loop   ldy     #ETH_MAC_MII_ACC
.397fbe		20 c8 7f	jsr $397fc8	        jsr     mac_read
.397fc1		29 01 00	and #$0001	        and     #1
.397fc4		d0 f5		bne $397fbb	        bne     _loop
.397fc6		7a		ply		        ply
.397fc7		60		rts		        rts
.397fc8						mac_read:
.397fc8		98		tya		        tya             ; Register.
.397fc9		a0 00 c0	ldy #$c000	        ldy     #$c000  ; Read operation.
.397fcc		f4 a4 00	pea #$00a4	        pea     #ETH_MAC_CSR_CMD
.397fcf		20 10 7e	jsr $397e10	        jsr     eth_write
.397fd2		20 f4 7f	jsr $397ff4	        jsr     mac_wait
.397fd5		a0 a8 00	ldy #$00a8	        ldy     #ETH_MAC_CSR_DATA
.397fd8		4c 00 7e	jmp $397e00	        jmp     eth_read
.397fdb						mac_write:
.397fdb		f4 a8 00	pea #$00a8	        pea     #ETH_MAC_CSR_DATA
.397fde		20 10 7e	jsr $397e10	        jsr     eth_write
.397fe1		a3 03		lda $03,s	        lda     3,s     ; Register to write
.397fe3		a0 00 80	ldy #$8000	        ldy     #$8000  ; Write operation
.397fe6		f4 a4 00	pea #$00a4	        pea     #ETH_MAC_CSR_CMD
.397fe9		20 10 7e	jsr $397e10	        jsr     eth_write
.397fec		a3 01		lda $01,s	        lda     1,s
.397fee		83 03		sta $03,s	        sta     3,s
.397ff0		68		pla		        pla
.397ff1		4c f4 7f	jmp $397ff4	        jmp     mac_wait
.397ff4						mac_wait:
.397ff4		a0 a4 00	ldy #$00a4	_loop   ldy     #ETH_MAC_CSR_CMD
.397ff7		20 00 7e	jsr $397e00	        jsr     eth_read
.397ffa		c0 00 80	cpy #$8000	        cpy     #$8000
.397ffd		10 f5		bpl $397ff4	        bpl     _loop
.397fff		60		rts		        rts
=$00						RX_DATA_FIFO    = $00   ; Through $1f
=$20						TX_DATA_FIFO    = $20   ; Through $3f
=$40						RX_STATUS_FIFO  = $40
=$48						TX_STATIS_FIFO  = $48
=$50						ETH_ID_REV      = $50
=$54						ETH_IRQ_CFG     = $54
=$58						ETH_INT_STS     = $58
=$5c						ETH_INT_EN      = $5c
=$64						ETH_BYTE_TEST   = $64
=$68						ETH_FIFO_INT    = $68
=$6c						ETH_RX_CFG      = $6c
=$70						ETH_TX_CFG      = $70
=$74						ETH_HW_CFG      = $74
=$78						ETH_RX_DP_CTL   = $78
=$7c						ETH_RX_FIFO_INF = $7c
=$80						ETH_TX_FIFO_INF = $80
=$84						ETH_PMT_CTRL    = $84
=$88						ETH_GPIO_CFG    = $88
=$8c						ETH_GPT_CFG     = $8c
=$90						ETH_GPT_CNT     = $90
=$98						ETH_WORD_SWAP   = $98
=$9c						ETH_FREE_RUN    = $9c
=$a0						ETH_RX_DROP     = $a0
=$a4						ETH_MAC_CSR_CMD = $a4
=$a8						ETH_MAC_CSR_DATA= $a8
=$ac						ETH_AFC_CFG     = $ac
=$b0						ETH_E2P_CMD     = $b0
=$b4						ETH_E2P_DATA    = $b4
=$1						ETH_MAC_MAC_CR  = $1
=$2						ETH_MAC_ADDRH   = $2
=$3						ETH_MAC_ADDRL   = $3
=$4						ETH_MAC_HASHH   = $4
=$5						ETH_MAC_HASHL   = $5
=$6						ETH_MAC_MII_ACC = $6
=$7						ETH_MAC_MII_DATA= $7
=$8						ETH_MAC_FLOW    = $8
=$9						ETH_MAC_VLAN1   = $9
=$a						ETH_MAC_VLAN2   = $a
=$b						ETH_MAC_WUFF    = $b
=$c						ETH_MAC_WUCSR   = $c
=$d						ETH_MAC_COE_CR  = $d
=$e						ETH_MAC_MAX     = $e

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/user.asm


;******  Processing file: src\networking/../Libraries/networking.asm

.0000						ip_info
>0000						ip          .fill   4   ; Local ipv4 address in network order
>0004						mask        .fill   4   ; Local ipv4 netmask in network order
>0008						default     .fill   4   ; Default ipv4 route in network order
.000c						size
.0000						udp_info
>0000						local_port  .word   ?   ; local port #, little-endian
>0002						remote_ip   .fill   4   ; ipv4 address of remote machine, network order
>0006						remote_port .word   ?   ; remote port #, little endian
>0008						buffer      .dword  ?   ; 24-bit address of your data
>000c						buflen      .word   ?   ; length of the above buffer in bytes
>000e						copied      .word   ?   ; number of bytes copied in/out of the above buffer
.0010						size

;******  Return to file: src\networking/user.asm

.398000						init
.398000		20 12 80	jsr $398012	            jsr     call
.398003		6b		rtl		            rtl
>398004		97 86				            .word   <>net.init
.398006						udp_send
.398006		20 12 80	jsr $398012	            jsr     call
.398009		6b		rtl		            rtl
>39800a		62 87				            .word   <>net.udp_send
.39800c						udp_recv
.39800c		20 12 80	jsr $398012	            jsr     call
.39800f		6b		rtl		            rtl
>398010		9a 87				            .word   <>net.udp_recv
.398012						call
=195						        czvn = 1+2+64+128
.398012		c2 c3		rep #$c3	        rep     #czvn       ; Clear czvn
.398014		08		php		        php
.398015		c2 f7		rep #$f7	        rep     #255-8      ; Clear all but i
.398017		5a		phy		        phy
.398018		da		phx		        phx
.398019		0b		phd		        phd
.39801a		8b		phb		        phb
.39801b		48		pha		        pha                 ; [a:b:d:x:y:p:rts:rtl]
.39801c		a3 0b		lda $0b,s	        lda     11,s        ; return vector
.39801e		aa		tax		        tax
.39801f		a3 06		lda $06,s	        lda     6,s         ; X (new D)
.398021		5b		tcd		        tcd
>398022		fc 02 00			        .byte   $fc,2,0   ; jsr (2,x), but the assembler won't let me...
.398025		08		php		        php
.398026		e2 20		sep #$20	        sep     #$20
.398028		a3 01		lda $01,s	        lda     1,s
.39802a		29 c3		and #$c3	        and     #czvn
.39802c		03 0b		ora $0b,s	        ora     11,s
.39802e		83 0b		sta $0b,s	        sta     11,s
.398030		28		plp		        plp
.398031		68		pla		        pla
.398032		ab		plb		        plb
.398033		2b		pld		        pld
.398034		fa		plx		        plx
.398035		7a		ply		        ply
.398036		28		plp		        plp
.398037		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/packet.asm

.0000						udp_t
>0000						sport   .word   ?
>0002						dport   .word   ?
>0004						length  .word   ?
>0006						check   .word   ?
.0008						data
.0008						size
.0000						icmp_t
>0000						type    .byte   ?
>0001						code    .byte   ?
>0002						check   .fill   2
>0004						ident   .word   ?
>0006						seq     .fill   2
.0000						ip_t
>0000						ihl     .fill   1
>0001						tos     .byte   ?
>0002						len     .fill   2
>0004						id      .fill   2
>0006						flags   .fill   2
>0008						ttl     .byte   ?
>0009						proto   .byte   ?
>000a						check   .fill   2
>000c						src     .fill   4
>0010						dest    .fill   4
.0014						size
>0014						sport       .word   ?
>0016						dport       .word   ?
.0014						udp
>0014						sport   .word   ?
>0016						dport   .word   ?
>0018						length  .word   ?
>001a						check   .word   ?
.001c						data
.001c						size
.0014						icmp
>0014						type    .byte   ?
>0015						code    .byte   ?
>0016						check   .fill   2
>0018						ident   .word   ?
>001a						seq     .fill   2
.0000						arp_t
>0000						htype   .word   ?
>0002						ptype   .word   ?
>0004						hlen    .byte   ?
>0005						plen    .byte   ?
>0006						oper    .word   ?
>0008						sha     .fill   6
>000e						spa     .fill   4
>0012						tha     .fill   6
>0018						tpa     .fill   4
.001c						size
.0000						eth_t
>0000						d_mac   .fill   6
>0006						s_mac   .fill   6
>000c						type    .word   ?
.000e						size
.000e						arp
>000e						htype   .word   ?
>0010						ptype   .word   ?
>0012						hlen    .byte   ?
>0013						plen    .byte   ?
>0014						oper    .word   ?
>0016						sha     .fill   6
>001c						spa     .fill   4
>0020						tha     .fill   6
>0026						tpa     .fill   4
.002a						size
.000e						ipv4
>000e						ihl     .fill   1
>000f						tos     .byte   ?
>0010						len     .fill   2
>0012						id      .fill   2
>0014						flags   .fill   2
>0016						ttl     .byte   ?
>0017						proto   .byte   ?
>0018						check   .fill   2
>001a						src     .fill   4
>001e						dest    .fill   4
.0022						size
>0022						sport       .word   ?
>0024						dport       .word   ?
.0022						udp
>0022						sport   .word   ?
>0024						dport   .word   ?
>0026						length  .word   ?
>0028						check   .word   ?
.002a						data
.002a						size
.0022						icmp
>0022						type    .byte   ?
>0023						code    .byte   ?
>0024						check   .fill   2
>0026						ident   .word   ?
>0028						seq     .fill   2
.0000						pbuf_t
.0000						stack
.0000						deque
>0000		00 00				head    .word   0
>0002		00 00				tail    .word   0
.0004						end
>0004						length  .word   ?
.0006						eth
>0006						d_mac   .fill   6
>000c						s_mac   .fill   6
>0012						type    .word   ?
.0014						size
.0014						arp
>0014						htype   .word   ?
>0016						ptype   .word   ?
>0018						hlen    .byte   ?
>0019						plen    .byte   ?
>001a						oper    .word   ?
>001c						sha     .fill   6
>0022						spa     .fill   4
>0026						tha     .fill   6
>002c						tpa     .fill   4
.0030						size
.0014						ipv4
>0014						ihl     .fill   1
>0015						tos     .byte   ?
>0016						len     .fill   2
>0018						id      .fill   2
>001a						flags   .fill   2
>001c						ttl     .byte   ?
>001d						proto   .byte   ?
>001e						check   .fill   2
>0020						src     .fill   4
>0024						dest    .fill   4
.0028						size
>0028						sport       .word   ?
>002a						dport       .word   ?
.0028						udp
>0028						sport   .word   ?
>002a						dport   .word   ?
>002c						length  .word   ?
>002e						check   .word   ?
.0030						data
.0030						size
.0028						icmp
>0028						type    .byte   ?
>0029						code    .byte   ?
>002a						check   .fill   2
>002c						ident   .word   ?
>002e						seq     .fill   2
>0006						        .fill       14      ; ethernet header
.0014						ipv4
>0014						ihl     .fill   1
>0015						tos     .byte   ?
>0016						len     .fill   2
>0018						id      .fill   2
>001a						flags   .fill   2
>001c						ttl     .byte   ?
>001d						proto   .byte   ?
>001e						check   .fill   2
>0020						src     .fill   4
>0024						dest    .fill   4
.0028						size
>0028						sport       .word   ?
>002a						dport       .word   ?
.0028						udp
>0028						sport   .word   ?
>002a						dport   .word   ?
>002c						length  .word   ?
>002e						check   .word   ?
.0030						data
.0030						size
.0028						icmp
>0028						type    .byte   ?
>0029						code    .byte   ?
>002a						check   .fill   2
>002c						ident   .word   ?
>002e						seq     .fill   2
.3c0000						pbuf
.3c0000						stack
.3c0000						deque
>3c0000		00 00				head    .word   0
>3c0002		00 00				tail    .word   0
.3c0004						end
>3c0004						length  .word   ?
.3c0006						eth
>3c0006						d_mac   .fill   6
>3c000c						s_mac   .fill   6
>3c0012						type    .word   ?
.3c0014						size
.3c0014						arp
>3c0014						htype   .word   ?
>3c0016						ptype   .word   ?
>3c0018						hlen    .byte   ?
>3c0019						plen    .byte   ?
>3c001a						oper    .word   ?
>3c001c						sha     .fill   6
>3c0022						spa     .fill   4
>3c0026						tha     .fill   6
>3c002c						tpa     .fill   4
.3c0030						size
.3c0014						ipv4
>3c0014						ihl     .fill   1
>3c0015						tos     .byte   ?
>3c0016						len     .fill   2
>3c0018						id      .fill   2
>3c001a						flags   .fill   2
>3c001c						ttl     .byte   ?
>3c001d						proto   .byte   ?
>3c001e						check   .fill   2
>3c0020						src     .fill   4
>3c0024						dest    .fill   4
.3c0028						size
>3c0028						sport       .word   ?
>3c002a						dport       .word   ?
.3c0028						udp
>3c0028						sport   .word   ?
>3c002a						dport   .word   ?
>3c002c						length  .word   ?
>3c002e						check   .word   ?
.3c0030						data
.3c0030						size
.3c0028						icmp
>3c0028						type    .byte   ?
>3c0029						code    .byte   ?
>3c002a						check   .fill   2
>3c002c						ident   .word   ?
>3c002e						seq     .fill   2
>3c0006						        .fill       14      ; ethernet header
.3c0014						ipv4
>3c0014						ihl     .fill   1
>3c0015						tos     .byte   ?
>3c0016						len     .fill   2
>3c0018						id      .fill   2
>3c001a						flags   .fill   2
>3c001c						ttl     .byte   ?
>3c001d						proto   .byte   ?
>3c001e						check   .fill   2
>3c0020						src     .fill   4
>3c0024						dest    .fill   4
.3c0028						size
>3c0028						sport       .word   ?
>3c002a						dport       .word   ?
.3c0028						udp
>3c0028						sport   .word   ?
>3c002a						dport   .word   ?
>3c002c						length  .word   ?
>3c002e						check   .word   ?
.3c0030						data
.3c0030						size
.3c0028						icmp
>3c0028						type    .byte   ?
>3c0029						code    .byte   ?
>3c002a						check   .fill   2
>3c002c						ident   .word   ?
>3c002e						seq     .fill   2
>398038		00 00				pbufs   .word   0   ; Free-pbufs stack.
.39803a						pbuf_init
.39803a		20 4c 80	jsr $39804c	        jsr     pbank_init
.39803d		18		clc		        clc
.39803e		a9 00 08	lda #$0800	        lda     #2048       ; 1st 2k normally reserved for socket descriptors...
.398041		aa		tax		_loop   tax
.398042		20 6e 80	jsr $39806e	        jsr     pbuf_free_x
.398045		8a		txa		        txa
.398046		69 00 08	adc #$0800	        adc     #2048
.398049		d0 f6		bne $398041	        bne     _loop
.39804b		60		rts		_done   rts
.39804c						pbank_init
.39804c		a9 00 00	lda #$0000	        lda     #0
.39804f		8f 00 00 3c	sta $3c0000	        sta     @l PACKETS
.398053		aa		tax		        tax
.398054		a8		tay		        tay
.398055		c8		iny		        iny
.398056		3a		dec a		        dec     a
.398057		8b		phb		        phb
.398058		54 3c 3c	mvn $3c,$3c	        mvn     `PACKETS,`PACKETS
.39805b		ab		plb		        plb
.39805c		60		rts		        rts
.39805d						pbuf_alloc_x:
.39805d		08		php		        php
.39805e		78		sei		        sei
.39805f		ae 38 80	ldx $8038	        ldx     <>pbufs,b
.398062		f0 07		beq $39806b	        beq     _done
.398064		bf 00 00 3c	lda $3c0000,x	        lda     pbuf.stack,x
.398068		8d 38 80	sta $8038	        sta     <>pbufs,b
.39806b		28		plp		_done   plp
.39806c		8a		txa		        txa
.39806d		60		rts		        rts
.39806e						pbuf_free_x:
.39806e		08		php		        php
.39806f		78		sei		        sei
.398070		ad 38 80	lda $8038	        lda     <>pbufs,b
.398073		9f 00 00 3c	sta $3c0000,x	        sta     pbuf.stack,x
.398077		8e 38 80	stx $8038	        stx     <>pbufs,b
.39807a		28		plp		        plp
.39807b		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/arp.asm

.39807c						recv
.39807c		bf 14 00 3c	lda $3c0014,x	        lda     pbuf.eth.arp.htype,x
.398080		eb		xba		        xba
.398081		c9 01 00	cmp #$0001	        cmp     #$0001  ; Ethernet
.398084		d0 3a		bne $3980c0	        bne     _drop
.398086		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.eth.arp.ptype,x
.39808a		eb		xba		        xba
.39808b		c9 00 08	cmp #$0800	        cmp     #$0800  ; IPv4
.39808e		d0 30		bne $3980c0	        bne     _drop
.398090		bf 18 00 3c	lda $3c0018,x	        lda     pbuf.eth.arp.hlen,x ; and plen
.398094		eb		xba		        xba
.398095		c9 04 06	cmp #$0604	        cmp     #$0604  ; 6 ether, 4 ip
.398098		d0 26		bne $3980c0	        bne     _drop
.39809a		bf 1a 00 3c	lda $3c001a,x	        lda     pbuf.eth.arp.oper,x
.39809e		eb		xba		        xba
.39809f		c9 02 00	cmp #$0002	        cmp     #$0002      ; reply
.3980a2		f0 19		beq $3980bd	        beq     _record
.3980a4		c9 01 00	cmp #$0001	        cmp     #$0001      ; request or broadcast
.3980a7		d0 17		bne $3980c0	        bne     _drop       ; Invalid arp packet
.3980a9		bf 2c 00 3c	lda $3c002c,x	        lda     kernel.net.pbuf.eth.arp.tpa+0,x
.3980ad		5f 22 00 3c	eor $3c0022,x	        eor     kernel.net.pbuf.eth.arp.spa+0,x
.3980b1		d0 10		bne $3980c3	        bne     _request    ; not a broadcast
.3980b3		bf 2e 00 3c	lda $3c002e,x	        lda     kernel.net.pbuf.eth.arp.tpa+2,x
.3980b7		5f 24 00 3c	eor $3c0024,x	        eor     kernel.net.pbuf.eth.arp.spa+2,x
.3980bb		d0 06		bne $3980c3	        bne     _request    ; not a broadcast
.3980bd						_record
.3980bd		20 66 82	jsr $398266	        jsr     cache_arp_reply
.3980c0		4c 6e 80	jmp $39806e	_drop   jmp     kernel.net.pbuf_free_x
.3980c3						_request
.3980c3		bf 2c 00 3c	lda $3c002c,x	        lda     kernel.net.pbuf.eth.arp.tpa+0,x
.3980c7		4f 85 86 39	eor $398685	        eor     kernel.net.conf.ip_addr+0
.3980cb		d0 f3		bne $3980c0	        bne     _drop
.3980cd		bf 2e 00 3c	lda $3c002e,x	        lda     kernel.net.pbuf.eth.arp.tpa+2,x
.3980d1		4f 87 86 39	eor $398687	        eor     kernel.net.conf.ip_addr+2
.3980d5		d0 e9		bne $3980c0	        bne     _drop
.3980d7		20 75 81	jsr $398175	        jsr     arp_reply
.3980da		4c 57 7f	jmp $397f57	        jmp     hardware.lan9221.eth_packet_send
.3980dd						arp_request
.3980dd		20 5d 80	jsr $39805d	        jsr     kernel.net.pbuf_alloc_x
.3980e0		d0 01		bne $3980e3	        bne     _good
.3980e2		60		rts		        rts
.3980e3		a9 ff ff	lda #$ffff	_good   lda     #$ffff
.3980e6		9f 06 00 3c	sta $3c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.3980ea		9f 08 00 3c	sta $3c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.3980ee		9f 0a 00 3c	sta $3c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.3980f2		a9 06 08	lda #$0806	        lda     #$0806  ; ARP packet
.3980f5		eb		xba		        xba
.3980f6		9f 12 00 3c	sta $3c0012,x	        sta     kernel.net.pbuf.eth.type,x
.3980fa		a9 01 00	lda #$0001	        lda     #1      ; ethernet request
.3980fd		eb		xba		        xba
.3980fe		9f 14 00 3c	sta $3c0014,x	        sta     kernel.net.pbuf.eth.arp.htype,x
.398102		a9 00 08	lda #$0800	        lda     #$0800  ; ethernet IPv4 type
.398105		eb		xba		        xba
.398106		9f 16 00 3c	sta $3c0016,x	        sta     kernel.net.pbuf.eth.arp.ptype,x
.39810a		a9 04 06	lda #$0604	        lda     #$0604      ; 6-byte hardware address (MAC)
.39810d		eb		xba		        xba                 ; 4-byte protocol address (IPv4)
.39810e		9f 18 00 3c	sta $3c0018,x	        sta     kernel.net.pbuf.eth.arp.hlen,x
.398112		a9 01 00	lda #$0001	        lda     #1      ; ARP request
.398115		eb		xba		        xba
.398116		9f 1a 00 3c	sta $3c001a,x	        sta     kernel.net.pbuf.eth.arp.oper,x
.39811a		a9 ff ff	lda #$ffff	        lda     #$ffff
.39811d		9f 06 00 3c	sta $3c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.398121		9f 08 00 3c	sta $3c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.398125		9f 0a 00 3c	sta $3c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.398129		af 83 86 39	lda $398683	        lda     kernel.net.conf.eth_mac+0
.39812d		9f 1c 00 3c	sta $3c001c,x	        sta     kernel.net.pbuf.eth.arp.sha+0,x
.398131		9f 0c 00 3c	sta $3c000c,x	        sta     kernel.net.pbuf.eth.s_mac+0,x
.398135		af 85 86 39	lda $398685	        lda     kernel.net.conf.eth_mac+2
.398139		9f 1e 00 3c	sta $3c001e,x	        sta     kernel.net.pbuf.eth.arp.sha+2,x
.39813d		9f 0e 00 3c	sta $3c000e,x	        sta     kernel.net.pbuf.eth.s_mac+2,x
.398141		af 87 86 39	lda $398687	        lda     kernel.net.conf.eth_mac+4
.398145		9f 20 00 3c	sta $3c0020,x	        sta     kernel.net.pbuf.eth.arp.sha+4,x
.398149		9f 10 00 3c	sta $3c0010,x	        sta     kernel.net.pbuf.eth.s_mac+4,x
.39814d		af 85 86 39	lda $398685	        lda     kernel.net.conf.ip_addr+0
.398151		9f 22 00 3c	sta $3c0022,x	        sta     kernel.net.pbuf.eth.arp.spa+0,x
.398155		af 87 86 39	lda $398687	        lda     kernel.net.conf.ip_addr+2
.398159		9f 24 00 3c	sta $3c0024,x	        sta     kernel.net.pbuf.eth.arp.spa+2,x
.39815d		b9 00 00	lda $0000,y	        lda     entry.ip+0,b,y
.398160		9f 2c 00 3c	sta $3c002c,x	        sta     kernel.net.pbuf.eth.arp.tpa+0,x
.398164		b9 02 00	lda $0002,y	        lda     entry.ip+2,b,y
.398167		9f 2e 00 3c	sta $3c002e,x	        sta     kernel.net.pbuf.eth.arp.tpa+2,x
.39816b		a9 2a 00	lda #$002a	        lda     #eth_t.arp.size
.39816e		9f 04 00 3c	sta $3c0004,x	        sta     kernel.net.pbuf.length,x
.398172		4c 57 7f	jmp $397f57	        jmp     hardware.lan9221.eth_packet_send
.398175						arp_reply
.398175		a9 02 00	lda #$0002	        lda     #$0002
.398178		eb		xba		        xba
.398179		9f 1a 00 3c	sta $3c001a,x	        sta     pbuf.eth.arp.oper,x
.39817d		bf 0c 00 3c	lda $3c000c,x	        lda     pbuf.eth.s_mac+0,x
.398181		9f 06 00 3c	sta $3c0006,x	        sta     pbuf.eth.d_mac+0,x
.398185		9f 26 00 3c	sta $3c0026,x	        sta     pbuf.eth.arp.tha+0,x
.398189		bf 0e 00 3c	lda $3c000e,x	        lda     pbuf.eth.s_mac+2,x
.39818d		9f 08 00 3c	sta $3c0008,x	        sta     pbuf.eth.d_mac+2,x
.398191		9f 28 00 3c	sta $3c0028,x	        sta     pbuf.eth.arp.tha+2,x
.398195		bf 10 00 3c	lda $3c0010,x	        lda     pbuf.eth.s_mac+4,x
.398199		9f 0a 00 3c	sta $3c000a,x	        sta     pbuf.eth.d_mac+4,x
.39819d		9f 2a 00 3c	sta $3c002a,x	        sta     pbuf.eth.arp.tha+4,x
.3981a1		20 c9 81	jsr $3981c9	        jsr     swap_ip
.3981a4		af 83 86 39	lda $398683	        lda     kernel.net.conf.eth_mac+0
.3981a8		9f 1c 00 3c	sta $3c001c,x	        sta     pbuf.eth.arp.sha+0,x
.3981ac		9f 0c 00 3c	sta $3c000c,x	        sta     pbuf.eth.s_mac+0,x
.3981b0		af 85 86 39	lda $398685	        lda     kernel.net.conf.eth_mac+2
.3981b4		9f 1e 00 3c	sta $3c001e,x	        sta     pbuf.eth.arp.sha+2,x
.3981b8		9f 0e 00 3c	sta $3c000e,x	        sta     pbuf.eth.s_mac+2,x
.3981bc		af 87 86 39	lda $398687	        lda     kernel.net.conf.eth_mac+4
.3981c0		9f 20 00 3c	sta $3c0020,x	        sta     pbuf.eth.arp.sha+4,x
.3981c4		9f 10 00 3c	sta $3c0010,x	        sta     pbuf.eth.s_mac+4,x
.3981c8		60		rts		        rts
.3981c9						swap_ip
.3981c9		5a		phy		        phy
.3981ca		bf 22 00 3c	lda $3c0022,x	        lda     pbuf.eth.arp.spa+0,x
.3981ce		a8		tay		        tay
.3981cf		bf 2c 00 3c	lda $3c002c,x	        lda     pbuf.eth.arp.tpa+0,x
.3981d3		9f 22 00 3c	sta $3c0022,x	        sta     pbuf.eth.arp.spa+0,x
.3981d7		98		tya		        tya
.3981d8		9f 2c 00 3c	sta $3c002c,x	        sta     pbuf.eth.arp.tpa+0,x
.3981dc		bf 24 00 3c	lda $3c0024,x	        lda     pbuf.eth.arp.spa+2,x
.3981e0		a8		tay		        tay
.3981e1		bf 2e 00 3c	lda $3c002e,x	        lda     pbuf.eth.arp.tpa+2,x
.3981e5		9f 24 00 3c	sta $3c0024,x	        sta     pbuf.eth.arp.spa+2,x
.3981e9		98		tya		        tya
.3981ea		9f 2e 00 3c	sta $3c002e,x	        sta     pbuf.eth.arp.tpa+2,x
.3981ee		7a		ply		        ply
.3981ef		60		rts		        rts
.0000						entry
>0000						ip      .fill   4
>0004						mac     .fill   6
>000a						pending .word   ?
>000c						last    .word   ?
.000e						size
>3981f0		00 00				count   .word   0
>3981f2		00 00 00 00 00 00 00 00		entries .fill   8*entry.size,0
>3981fa		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>39825a		00 00 00 00 00 00 00 00
.398262						entries_end
>398262						target  .fill   4
.398266						cache_arp_reply
.398266		bf 22 00 3c	lda $3c0022,x	        lda     kernel.net.pbuf.eth.arp.spa+0,x
.39826a		8f 20 00 3c	sta $3c0020	        sta     kernel.net.pbuf.ipv4.src+0
.39826e		bf 24 00 3c	lda $3c0024,x	        lda     kernel.net.pbuf.eth.arp.spa+2,x
.398272		8f 22 00 3c	sta $3c0022	        sta     kernel.net.pbuf.ipv4.src+2
.398276		bf 1c 00 3c	lda $3c001c,x	        lda     kernel.net.pbuf.eth.arp.sha+0,x
.39827a		8f 0c 00 3c	sta $3c000c	        sta     kernel.net.pbuf.eth.s_mac+0
.39827e		bf 1e 00 3c	lda $3c001e,x	        lda     kernel.net.pbuf.eth.arp.sha+2,x
.398282		8f 0e 00 3c	sta $3c000e	        sta     kernel.net.pbuf.eth.s_mac+2
.398286		bf 20 00 3c	lda $3c0020,x	        lda     kernel.net.pbuf.eth.arp.sha+4,x
.39828a		8f 10 00 3c	sta $3c0010	        sta     kernel.net.pbuf.eth.s_mac+4
.39828e		da		phx		        phx
.39828f		a2 00 00	ldx #$0000	        ldx     #0
.398292		20 97 82	jsr $398297	        jsr     cache_ip
.398295		fa		plx		        plx
.398296		60		rts		        rts
.398297						cache_ip
.398297		bf 20 00 3c	lda $3c0020,x	        lda     kernel.net.pbuf.ipv4.src+0,x
.39829b		8f 62 82 39	sta $398262	        sta     target+0
.39829f		bf 22 00 3c	lda $3c0022,x	        lda     kernel.net.pbuf.ipv4.src+2,x
.3982a3		8f 64 82 39	sta $398264	        sta     target+2
.3982a7		20 df 83	jsr $3983df	        jsr     find
.3982aa		90 11		bcc $3982bd	        bcc     _update         ; Found; update MAC.
.3982ac		20 11 84	jsr $398411	        jsr     find_oldest     ; Not found, make new entry.
.3982af		bf 20 00 3c	lda $3c0020,x	        lda     kernel.net.pbuf.ipv4.src+0,x
.3982b3		99 00 00	sta $0000,y	        sta     entry.ip+0,b,y
.3982b6		bf 22 00 3c	lda $3c0022,x	        lda     kernel.net.pbuf.ipv4.src+2,x
.3982ba		99 02 00	sta $0002,y	        sta     entry.ip+2,b,y
.3982bd						_update
.3982bd		bf 0c 00 3c	lda $3c000c,x	        lda     kernel.net.pbuf.eth.s_mac+0,x
.3982c1		99 04 00	sta $0004,y	        sta     entry.mac+0,b,y
.3982c4		bf 0e 00 3c	lda $3c000e,x	        lda     kernel.net.pbuf.eth.s_mac+2,x
.3982c8		99 06 00	sta $0006,y	        sta     entry.mac+2,b,y
.3982cb		bf 10 00 3c	lda $3c0010,x	        lda     kernel.net.pbuf.eth.s_mac+4,x
.3982cf		99 08 00	sta $0008,y	        sta     entry.mac+4,b,y
.3982d2		a9 00 00	lda #$0000	        lda     #0
.3982d5		99 0a 00	sta $000a,y	        sta     entry.pending,b,y
.3982d8		20 dc 82	jsr $3982dc	        jsr     touch
.3982db		60		rts		_out    rts
.3982dc						touch
.3982dc		af 95 86 39	lda $398695	        lda     kernel.net.conf.ticks
.3982e0		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.3982e3		60		rts		        rts
.3982e4						local:
.3982e4		bf 26 00 3c	lda $3c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.3982e8		4f 87 86 39	eor $398687	        eor     kernel.net.conf.ip_addr+2
.3982ec		2f 8b 86 39	and $39868b	        and     kernel.net.conf.ip_mask+2
.3982f0		d0 0c		bne $3982fe	        bne     _out
.3982f2		bf 24 00 3c	lda $3c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.3982f6		4f 85 86 39	eor $398685	        eor     kernel.net.conf.ip_addr+0
.3982fa		2f 89 86 39	and $398689	        and     kernel.net.conf.ip_mask+0
.3982fe		60		rts		_out    rts
.3982ff						bind:
.3982ff		bf 26 00 3c	lda $3c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.398303		4f 8f 86 39	eor $39868f	        eor     kernel.net.conf.broadcast+2
.398307		d0 1c		bne $398325	        bne     _lookup
.398309		bf 24 00 3c	lda $3c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.39830d		4f 8d 86 39	eor $39868d	        eor     kernel.net.conf.broadcast+0
.398311		d0 12		bne $398325	        bne     _lookup
.398313		a9 ff ff	lda #$ffff	        lda     #$ffff
.398316		9f 06 00 3c	sta $3c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.39831a		9f 08 00 3c	sta $3c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.39831e		9f 0a 00 3c	sta $3c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.398322		4c 77 83	jmp $398377	        jmp     _finish
.398325						_lookup
.398325		20 e4 82	jsr $3982e4	        jsr     local
.398328		d0 13		bne $39833d	        bne     _router
.39832a		bf 24 00 3c	lda $3c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.39832e		8f 62 82 39	sta $398262	        sta     target+0
.398332		bf 26 00 3c	lda $3c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.398336		8f 64 82 39	sta $398264	        sta     target+2
.39833a		4c 52 83	jmp $398352	        jmp     _find
.39833d						_router
.39833d		af 93 86 39	lda $398693	        lda     kernel.net.conf.default+2
.398341		c9 00 01	cmp #$0100	        cmp     #$0100
.398344		90 60		bcc $3983a6	        bcc     _fail   ; No default route
.398346		8f 64 82 39	sta $398264	        sta     target+2
.39834a		af 91 86 39	lda $398691	        lda     kernel.net.conf.default+0
.39834e		8f 62 82 39	sta $398262	        sta     target+0
.398352						_find
.398352		20 df 83	jsr $3983df	        jsr     find
.398355		b0 61		bcs $3983b8	        bcs     _arp
.398357		b9 0a 00	lda $000a,y	        lda     entry.pending,b,y
.39835a		f0 03		beq $39835f	        beq     _found
.39835c		4c a8 83	jmp $3983a8	        jmp     _retry
.39835f						_found
.39835f		b9 04 00	lda $0004,y	        lda     entry.mac+0,b,y
.398362		9f 06 00 3c	sta $3c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.398366		b9 06 00	lda $0006,y	        lda     entry.mac+2,b,y
.398369		9f 08 00 3c	sta $3c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.39836d		b9 08 00	lda $0008,y	        lda     entry.mac+4,b,y
.398370		9f 0a 00 3c	sta $3c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.398374		20 dc 82	jsr $3982dc	        jsr     touch   ; Keep this arp entry :).
.398377						_finish
.398377		a9 00 08	lda #$0800	        lda     #$0800
.39837a		eb		xba		        xba
.39837b		9f 12 00 3c	sta $3c0012,x	        sta     kernel.net.pbuf.eth.type+0,x
.39837f		af 83 86 39	lda $398683	        lda     kernel.net.conf.eth_mac+0
.398383		9f 0c 00 3c	sta $3c000c,x	        sta     kernel.net.pbuf.eth.s_mac+0,x
.398387		af 85 86 39	lda $398685	        lda     kernel.net.conf.eth_mac+2
.39838b		9f 0e 00 3c	sta $3c000e,x	        sta     kernel.net.pbuf.eth.s_mac+2,x
.39838f		af 87 86 39	lda $398687	        lda     kernel.net.conf.eth_mac+4
.398393		9f 10 00 3c	sta $3c0010,x	        sta     kernel.net.pbuf.eth.s_mac+4,x
.398397		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.ipv4.len,x
.39839b		eb		xba		        xba
.39839c		18		clc		        clc
.39839d		69 0e 00	adc #$000e	        adc     #eth_t.size
.3983a0		9f 04 00 3c	sta $3c0004,x	        sta     pbuf.length,x
.3983a4		18		clc		        clc
.3983a5		60		rts		        rts
.3983a6		38		sec		_fail   sec
.3983a7		60		rts		        rts
.3983a8		af 95 86 39	lda $398695	_retry  lda     kernel.net.conf.ticks
.3983ac		38		sec		        sec
.3983ad		f9 0c 00	sbc $000c,y	        sbc     entry.last,b,y
.3983b0		c9 05 00	cmp #$0005	        cmp     #5
.3983b3		90 f1		bcc $3983a6	        bcc     _fail    ; Too soon.
.3983b5		4c d6 83	jmp $3983d6	        jmp     _request
.3983b8						_arp
.3983b8		20 11 84	jsr $398411	        jsr     find_oldest
.3983bb		af 62 82 39	lda $398262	        lda     target+0
.3983bf		99 00 00	sta $0000,y	        sta     entry.ip+0,b,y
.3983c2		af 64 82 39	lda $398264	        lda     target+2
.3983c6		99 02 00	sta $0002,y	        sta     entry.ip+2,b,y
.3983c9		a9 01 00	lda #$0001	        lda     #1
.3983cc		99 0a 00	sta $000a,y	        sta     entry.pending,b,y
.3983cf		af 95 86 39	lda $398695	        lda     kernel.net.conf.ticks
.3983d3		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.3983d6						_request
.3983d6		20 dd 80	jsr $3980dd	        jsr     arp_request
.3983d9		20 dc 82	jsr $3982dc	        jsr     touch
.3983dc		4c a6 83	jmp $3983a6	        jmp     _fail
.3983df						find:
.3983df		a0 f2 81	ldy #$81f2	        ldy     #<>entries
.3983e2		c0 62 82	cpy #$8262	_loop   cpy     #<>entries_end
.3983e5		f0 0e		beq $3983f5	        beq     _none
.3983e7		20 00 84	jsr $398400	        jsr     compare
.3983ea		f0 0b		beq $3983f7	        beq     _done
.3983ec		98		tya		        tya
.3983ed		18		clc		        clc
.3983ee		69 0e 00	adc #$000e	        adc     #entry.size
.3983f1		a8		tay		        tay
.3983f2		4c e2 83	jmp $3983e2	        jmp     _loop
.3983f5		38		sec		_none   sec
.3983f6		60		rts		        rts
.3983f7		af 95 86 39	lda $398695	_done   lda     kernel.net.conf.ticks
.3983fb		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.3983fe		18		clc		        clc
.3983ff		60		rts		        rts
.398400						compare:
.398400		af 62 82 39	lda $398262	        lda     target+0
.398404		59 00 00	eor $0000,y	        eor     entry.ip+0,b,y
.398407		d0 07		bne $398410	        bne     _done
.398409		af 64 82 39	lda $398264	        lda     target+2
.39840d		59 02 00	eor $0002,y	        eor     entry.ip+2,b,y
.398410		60		rts		_done   rts
.398411						find_oldest:
.398411		da		phx		        phx
.398412		f4 00 00	pea #$0000	        pea     #0              ; Max age
.398415		a0 f2 81	ldy #$81f2	        ldy     #<>entries
.398418		bb		tyx		        tyx
.398419		b9 00 00	lda $0000,y	_loop   lda     entry.ip+0,b,y  ; Empty is free.
.39841c		f0 19		beq $398437	        beq     _done
.39841e		af 95 86 39	lda $398695	        lda     kernel.net.conf.ticks
.398422		38		sec		        sec
.398423		f9 0c 00	sbc $000c,y	        sbc     entry.last,b,y  ; Age of this entry in A.
.398426		c3 01		cmp $01,s	        cmp     1,s
.398428		90 01		bcc $39842b	        bcc     _next
.39842a		bb		tyx		        tyx                     ; X = new oldest
.39842b		98		tya		_next   tya
.39842c		18		clc		        clc
.39842d		69 0e 00	adc #$000e	        adc     #entry.size
.398430		a8		tay		        tay
.398431		c0 62 82	cpy #$8262	        cpy     #<>entries_end
.398434		d0 e3		bne $398419	        bne     _loop
.398436		9b		txy		        txy                     ; Y = X = oldest
.398437		68		pla		_done   pla                     ; Max age
.398438		fa		plx		        plx                     ; Original
.398439		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/net_ip.asm

.39843a						ip_check:
.39843a		a0 00 00	ldy #$0000	        ldy     #0  ; for now.
.39843d		bf 14 00 3c	lda $3c0014,x	        lda     pbuf.ipv4.ihl,x
.398441		29 ff 00	and #$00ff	        and     #255            ; little endian version/ihl
.398444		c9 45 00	cmp #$0045	        cmp     #$45            ; Version 4, minimal header.
.398447		d0 2e		bne $398477	        bne     _bad
.398449		20 0a 85	jsr $39850a	        jsr     compute_ip_checksum
.39844c		1a		inc a		        inc     a
.39844d		d0 28		bne $398477	        bne     _bad
.39844f		bf 1c 00 3c	lda $3c001c,x	        lda     pbuf.ipv4.ttl,x
.398453		3a		dec a		        dec     a
.398454		89 ff 00	bit #$00ff	        bit     #$ff
.398457		f0 1e		beq $398477	        beq     _bad
.398459		9f 1c 00 3c	sta $3c001c,x	        sta     pbuf.ipv4.ttl,x
.39845d		bf 1a 00 3c	lda $3c001a,x	        lda     pbuf.ipv4.flags,x
.398461		29 00 c0	and #$c000	        and     #65536-$4000
.398464		d0 11		bne $398477	        bne     _bad
.398466		bf 1d 00 3c	lda $3c001d,x	        lda     pbuf.ipv4.proto,x
.39846a		29 ff 00	and #$00ff	        and     #255
.39846d		c9 11 00	cmp #$0011	        cmp     #17
.398470		f0 08		beq $39847a	        beq     _udp
.398472		c9 01 00	cmp #$0001	        cmp     #1
.398475		f0 06		beq $39847d	        beq     ip_icmp
.398477		4c 6e 80	jmp $39806e	_bad    jmp     pbuf_free_x
.39847a		4c 73 85	jmp $398573	_udp    jmp     ip_udp
.39847d						ip_icmp:
.39847d		bf 28 00 3c	lda $3c0028,x	        lda     pbuf.ipv4.icmp.type,x
.398481		29 ff 00	and #$00ff	        and     #255
.398484		c9 08 00	cmp #$0008	        cmp     #8
.398487		d0 06		bne $39848f	        bne     _drop
.398489		20 29 85	jsr $398529	        jsr     compute_icmp_checksum
.39848c		1a		inc a		        inc     a
.39848d		f0 03		beq $398492	        beq     _good
.39848f		4c 6e 80	jmp $39806e	_drop   jmp     pbuf_free_x
.398492						_good
.398492		bf 28 00 3c	lda $3c0028,x	        lda     pbuf.ipv4.icmp.type,x
.398496		29 00 ff	and #$ff00	        and     #$ff00
.398499		9f 28 00 3c	sta $3c0028,x	        sta     pbuf.ipv4.icmp.type,x
.39849d		20 ac 84	jsr $3984ac	        jsr     swap_ip_addrs
.3984a0		20 16 85	jsr $398516	        jsr update_ip_checksum
.3984a3		20 42 85	jsr $398542	        jsr update_icmp_checksum
.3984a6		20 d1 84	jsr $3984d1	        jsr swap_mac
.3984a9		4c 57 7f	jmp $397f57	        jmp hardware.lan9221.eth_packet_send
.3984ac						swap_ip_addrs
.3984ac		bf 20 00 3c	lda $3c0020,x	        lda     pbuf.ipv4.src+0,x
.3984b0		48		pha		        pha
.3984b1		bf 22 00 3c	lda $3c0022,x	        lda     pbuf.ipv4.src+2,x
.3984b5		48		pha		        pha
.3984b6		bf 24 00 3c	lda $3c0024,x	        lda     pbuf.ipv4.dest+0,x
.3984ba		9f 20 00 3c	sta $3c0020,x	        sta     pbuf.ipv4.src+0,x
.3984be		bf 26 00 3c	lda $3c0026,x	        lda     pbuf.ipv4.dest+2,x
.3984c2		9f 22 00 3c	sta $3c0022,x	        sta     pbuf.ipv4.src+2,x
.3984c6		68		pla		        pla
.3984c7		9f 26 00 3c	sta $3c0026,x	        sta     pbuf.ipv4.dest+2,x
.3984cb		68		pla		        pla
.3984cc		9f 24 00 3c	sta $3c0024,x	        sta     pbuf.ipv4.dest+0,x
.3984d0		60		rts		        rts
.3984d1						swap_mac
.3984d1		5a		phy		        phy
.3984d2		bf 0c 00 3c	lda $3c000c,x	        lda     pbuf.eth.s_mac+0,x
.3984d6		a8		tay		        tay
.3984d7		bf 06 00 3c	lda $3c0006,x	        lda     pbuf.eth.d_mac+0,x
.3984db		9f 0c 00 3c	sta $3c000c,x	        sta     pbuf.eth.s_mac+0,x
.3984df		98		tya		        tya
.3984e0		9f 06 00 3c	sta $3c0006,x	        sta     pbuf.eth.d_mac+0,x
.3984e4		bf 0e 00 3c	lda $3c000e,x	        lda     pbuf.eth.s_mac+2,x
.3984e8		a8		tay		        tay
.3984e9		bf 08 00 3c	lda $3c0008,x	        lda     pbuf.eth.d_mac+2,x
.3984ed		9f 0e 00 3c	sta $3c000e,x	        sta     pbuf.eth.s_mac+2,x
.3984f1		98		tya		        tya
.3984f2		9f 08 00 3c	sta $3c0008,x	        sta     pbuf.eth.d_mac+2,x
.3984f6		bf 10 00 3c	lda $3c0010,x	        lda     pbuf.eth.s_mac+4,x
.3984fa		a8		tay		        tay
.3984fb		bf 0a 00 3c	lda $3c000a,x	        lda     pbuf.eth.d_mac+4,x
.3984ff		9f 10 00 3c	sta $3c0010,x	        sta     pbuf.eth.s_mac+4,x
.398503		98		tya		        tya
.398504		9f 0a 00 3c	sta $3c000a,x	        sta     pbuf.eth.d_mac+4,x
.398508		7a		ply		        ply
.398509		60		rts		        rts
.39850a						compute_ip_checksum:
.39850a		5a		phy		        phy
.39850b		a0 14 00	ldy #$0014	        ldy     #ip_t.size      ; size of header
.39850e		a9 00 00	lda #$0000	        lda     #0              ; starting from 0
.398511		20 55 85	jsr $398555	        jsr     header_checksum
.398514		7a		ply		        ply
.398515		60		rts		        rts
.398516						update_ip_checksum:
.398516		a9 00 00	lda #$0000	        lda     #0
.398519		9f 1e 00 3c	sta $3c001e,x	        sta     pbuf.ipv4.check,x
.39851d		20 0a 85	jsr $39850a	        jsr     compute_ip_checksum
.398520		49 ff ff	eor #$ffff	        eor     #$ffff
.398523		eb		xba		        xba
.398524		9f 1e 00 3c	sta $3c001e,x	        sta     pbuf.ipv4.check,x
.398528		60		rts		        rts
.398529						compute_icmp_checksum
.398529		5a		phy		        phy
.39852a		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.ipv4.len,x
.39852e		eb		xba		        xba
.39852f		89 01 00	bit #$0001	        bit     #1
.398532		f0 01		beq $398535	        beq     _check
.398534		1a		inc a		        inc     a       ; driver ensures a trailing zero.
.398535		38		sec		_check  sec
.398536		e9 14 00	sbc #$0014	        sbc     #ip_t.size
.398539		a8		tay		        tay
.39853a		a9 14 00	lda #$0014	        lda     #ip_t.size
.39853d		20 55 85	jsr $398555	        jsr     header_checksum
.398540		7a		ply		        ply
.398541		60		rts		        rts
.398542						update_icmp_checksum:
.398542		a9 00 00	lda #$0000	        lda     #0
.398545		9f 2a 00 3c	sta $3c002a,x	        sta     pbuf.ipv4.icmp.check,x
.398549		20 29 85	jsr $398529	        jsr     compute_icmp_checksum
.39854c		eb		xba		        xba
.39854d		49 ff ff	eor #$ffff	        eor     #$ffff
.398550		9f 2a 00 3c	sta $3c002a,x	        sta     pbuf.ipv4.icmp.check,x
.398554		60		rts		        rts
.398555						header_checksum:
.398555		da		phx		        phx
.398556		18		clc		        clc
.398557		63 01		adc $01,s	        adc     1,s
.398559		aa		tax		        tax
.39855a		f4 00 00	pea #$0000	        pea     #0
.39855d		18		clc		        clc
.39855e		bf 14 00 3c	lda $3c0014,x	_loop   lda     pbuf.ipv4,x
.398562		eb		xba		        xba
.398563		63 01		adc $01,s	        adc     1,s
.398565		83 01		sta $01,s	        sta     1,s
.398567		e8		inx		        inx
.398568		e8		inx		        inx
.398569		88		dey		        dey
.39856a		88		dey		        dey
.39856b		d0 f1		bne $39855e	        bne     _loop
.39856d		68		pla		        pla
.39856e		69 00 00	adc #$0000	        adc     #0
.398571		fa		plx		        plx
.398572		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/net_udp.asm

.398573						ip_udp
.398573		20 92 85	jsr $398592	        jsr     udp_checksum
.398576		1a		inc a		        inc     a
.398577		d0 03		bne $39857c	        bne     _done
.398579		4c 07 87	jmp $398707	        jmp     rx_enqueue
.39857c		4c 6e 80	jmp $39806e	_done   jmp     pbuf_free_x
.39857f						update_udp_checksum
.39857f		a9 00 00	lda #$0000	        lda     #0
.398582		9f 2e 00 3c	sta $3c002e,x	        sta     pbuf.ipv4.udp.check,x
.398586		20 92 85	jsr $398592	        jsr     udp_checksum
.398589		49 ff ff	eor #$ffff	        eor     #$ffff
.39858c		eb		xba		        xba
.39858d		9f 2e 00 3c	sta $3c002e,x	        sta     pbuf.ipv4.udp.check,x
.398591		60		rts		        rts
.398592						udp_checksum
.398592		5a		phy		        phy
.398593		da		phx		        phx
.398594		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.ipv4.len,x
.398598		eb		xba		        xba
.398599		18		clc		        clc
.39859a		63 01		adc $01,s	        adc     1,s
.39859c		aa		tax		        tax
.39859d		a9 00 00	lda #$0000	        lda     #0
.3985a0		9f 14 00 3c	sta $3c0014,x	        sta     pbuf.ipv4,x
.3985a4		fa		plx		        plx
.3985a5		bf 16 00 3c	lda $3c0016,x	        lda     pbuf.ipv4.len,x
.3985a9		eb		xba		        xba
.3985aa		38		sec		        sec
.3985ab		e9 14 00	sbc #$0014	        sbc     #ip_t.size
.3985ae		48		pha		        pha                 ; Save for pseudo-header.
.3985af		89 01 00	bit #$0001	        bit     #1
.3985b2		f0 01		beq $3985b5	        beq     _aligned
.3985b4		1a		inc a		        inc     a
.3985b5						_aligned
.3985b5		a8		tay		        tay
.3985b6		a9 14 00	lda #$0014	        lda     #ip_t.size
.3985b9		20 55 85	jsr $398555	        jsr     header_checksum
.3985bc		18		clc		        clc
.3985bd		63 01		adc $01,s	        adc     1,s
.3985bf		83 01		sta $01,s	        sta     1,s
.3985c1		bf 1d 00 3c	lda $3c001d,x	        lda     pbuf.ipv4.proto,x
.3985c5		29 ff 00	and #$00ff	        and     #$ff
.3985c8		63 01		adc $01,s	        adc     1,s
.3985ca		83 01		sta $01,s	        sta     1,s
.3985cc		bf 20 00 3c	lda $3c0020,x	        lda     pbuf.ipv4.src+0,x
.3985d0		20 ee 85	jsr $3985ee	        jsr     _sum
.3985d3		bf 22 00 3c	lda $3c0022,x	        lda     pbuf.ipv4.src+2,x
.3985d7		20 ee 85	jsr $3985ee	        jsr     _sum
.3985da		bf 24 00 3c	lda $3c0024,x	        lda     pbuf.ipv4.dest+0,x
.3985de		20 ee 85	jsr $3985ee	        jsr     _sum
.3985e1		bf 26 00 3c	lda $3c0026,x	        lda     pbuf.ipv4.dest+2,x
.3985e5		20 ee 85	jsr $3985ee	        jsr     _sum
.3985e8		68		pla		        pla
.3985e9		69 00 00	adc #$0000	        adc     #0
.3985ec		7a		ply		        ply
.3985ed		60		rts		        rts
.3985ee		eb		xba		_sum    xba
.3985ef		63 03		adc $03,s	        adc     3,s
.3985f1		83 03		sta $03,s	        sta     3,s
.3985f3		60		rts		        rts
.3985f4						udp_make:
.3985f4		20 5d 80	jsr $39805d	        jsr     pbuf_alloc_x
.3985f7		d0 02		bne $3985fb	        bne     _fill
.3985f9		38		sec		        sec
.3985fa		60		rts		        rts
.3985fb						_fill
.3985fb		a9 45 00	lda #$0045	        lda     #$45                ; Version=4, IHL=5, TOS=0
.3985fe		9f 14 00 3c	sta $3c0014,x	        sta     pbuf.ipv4.ihl,x
.398602		a9 00 00	lda #$0000	        lda     #0                  ; Frag ID=0 (no fragmentation)
.398605		9f 18 00 3c	sta $3c0018,x	        sta     pbuf.ipv4.id,x
.398609		a9 40 00	lda #$0040	        lda     #$40                ; May fragment
.39860c		9f 1a 00 3c	sta $3c001a,x	        sta     pbuf.ipv4.flags,x
.398610		a9 40 11	lda #$1140	        lda     #$1140              ; Protocol=UDP, TTL=$40
.398613		9f 1c 00 3c	sta $3c001c,x	        sta     pbuf.ipv4.ttl,x
.398617		af 85 86 39	lda $398685	        lda     conf.ip_addr+0
.39861b		9f 20 00 3c	sta $3c0020,x	        sta     pbuf.ipv4.src+0,x
.39861f		af 87 86 39	lda $398687	        lda     conf.ip_addr+2
.398623		9f 22 00 3c	sta $3c0022,x	        sta     pbuf.ipv4.src+2,x
.398627		a5 02		lda $02		        lda     user.udp_info.remote_ip+0,d
.398629		9f 24 00 3c	sta $3c0024,x	        sta     pbuf.ipv4.dest+0,x
.39862d		a5 04		lda $04		        lda     user.udp_info.remote_ip+2,d
.39862f		9f 26 00 3c	sta $3c0026,x	        sta     pbuf.ipv4.dest+2,x
.398633		a5 00		lda $00		        lda     user.udp_info.local_port,d
.398635		eb		xba		        xba
.398636		9f 28 00 3c	sta $3c0028,x	        sta     pbuf.ipv4.udp.sport,x
.39863a		a5 06		lda $06		        lda     user.udp_info.remote_port,d
.39863c		eb		xba		        xba
.39863d		9f 2a 00 3c	sta $3c002a,x	        sta     pbuf.ipv4.udp.dport,x
.398641		20 6a 86	jsr $39866a	        jsr     copy_msg_data
.398644		a5 0c		lda $0c		        lda     user.udp_info.buflen,d
.398646		c9 b2 05	cmp #$05b2	        cmp     #1500 - eth_t.ipv4.udp.size ; Max data size
.398649		90 03		bcc $39864e	        bcc     _size
.39864b		a9 b2 05	lda #$05b2	        lda     #1500 - eth_t.ipv4.udp.size ; limit to max data size
.39864e		85 0e		sta $0e		_size   sta     user.udp_info.copied,d
.398650		18		clc		        clc
.398651		69 08 00	adc #$0008	        adc     #udp_t.size
.398654		eb		xba		        xba
.398655		9f 2c 00 3c	sta $3c002c,x	        sta     pbuf.ipv4.udp.length,x
.398659		eb		xba		        xba
.39865a		18		clc		        clc
.39865b		69 14 00	adc #$0014	        adc     #ip_t.size
.39865e		eb		xba		        xba
.39865f		9f 16 00 3c	sta $3c0016,x	        sta     pbuf.ipv4.len,x
.398663		20 7f 85	jsr $39857f	        jsr     update_udp_checksum
.398666		20 16 85	jsr $398516	        jsr     update_ip_checksum
.398669		60		rts		        rts
.39866a						copy_msg_data
.39866a		a0 00 00	ldy #$0000	        ldy     #0
.39866d		da		phx		        phx
.39866e		c4 0e		cpy $0e		_loop   cpy     user.udp_info.copied,d
.398670		b0 0d		bcs $39867f	        bcs     _done
.398672		b7 08		lda [$08],y	        lda     [user.udp_info.buffer],y
.398674		9f 30 00 3c	sta $3c0030,x	        sta     kernel.net.pbuf.ipv4.udp.data,x
.398678		e8		inx		        inx
.398679		e8		inx		        inx
.39867a		c8		iny		        iny
.39867b		c8		iny		        iny
.39867c		4c 6e 86	jmp $39866e	        jmp     _loop
.39867f		fa		plx		_done   plx
.398680		60		rts		        rts

;******  Return to file: src\networking/net.asm

>398681		00 00				init        .word   0   ; NZ if init has succeeded
>398683		c2				eth_mac     .byte   $c2 ; NIC's MAC prefix; the rest is the IP address.
>398684		56				            .byte   $56 ; c2:56: just happens to be a "local assignment" prefix :).
>398685						ip_addr     .fill   4   ; Local IP address, MUST IMMEDIATELY FOLLOW THE MAC!
>398689						ip_mask     .fill   4   ; Local netmask
>39868d						broadcast   .fill   4   ; Broadcast address
>398691		00 00 00 00			default     .dword  0   ; Default route (0 = local only)
>398695		00 00				ticks       .word   0   ; virtual timer
.398697						init
.398697		af 02 64 39	lda $396402	            lda     HAS_ETHERNET
.39869b		d0 02		bne $39869f	            bne     _init
.39869d		38		sec		            sec
.39869e		60		rts		            rts
.39869f						_init
.39869f		a9 00 00	lda #$0000	            lda     #0
.3986a2		8f 03 87 39	sta $398703	            sta     rx_queue+0
.3986a6		8f 05 87 39	sta $398705	            sta     rx_queue+2
.3986aa		b9 00 00	lda $0000,y	            lda     0+user.ip_info.ip,y
.3986ad		8f 85 86 39	sta $398685	            sta @l  0+conf.ip_addr
.3986b1		b9 02 00	lda $0002,y	            lda     2+user.ip_info.ip,y
.3986b4		8f 87 86 39	sta $398687	            sta @l  2+conf.ip_addr
.3986b8		b9 04 00	lda $0004,y	            lda     0+user.ip_info.mask,y
.3986bb		8f 89 86 39	sta $398689	            sta @l  0+conf.ip_mask
.3986bf		b9 06 00	lda $0006,y	            lda     2+user.ip_info.mask,y
.3986c2		8f 8b 86 39	sta $39868b	            sta @l  2+conf.ip_mask
.3986c6		b9 08 00	lda $0008,y	            lda     0+user.ip_info.default,y
.3986c9		8f 91 86 39	sta $398691	            sta @l  0+conf.default
.3986cd		b9 0a 00	lda $000a,y	            lda     2+user.ip_info.default,y
.3986d0		8f 93 86 39	sta $398693	            sta @l  2+conf.default
.3986d4		af 89 86 39	lda $398689	            lda     conf.ip_mask+0
.3986d8		49 ff ff	eor #$ffff	            eor     #$ffff
.3986db		0f 85 86 39	ora $398685	            ora     conf.ip_addr+0
.3986df		8f 8d 86 39	sta $39868d	            sta     conf.broadcast+0
.3986e3		af 8b 86 39	lda $39868b	            lda     conf.ip_mask+2
.3986e7		49 ff ff	eor #$ffff	            eor     #$ffff
.3986ea		0f 87 86 39	ora $398687	            ora     conf.ip_addr+2
.3986ee		8f 8f 86 39	sta $39868f	            sta     conf.broadcast+2
.3986f2		4b		phk		            phk
.3986f3		ab		plb		            plb
.3986f4		20 3a 80	jsr $39803a	            jsr     pbuf_init
.3986f7		20 ad 7e	jsr $397ead	            jsr     hardware.lan9221.eth_open
.3986fa		a9 01 00	lda #$0001	            lda     #1
.3986fd		8f 81 86 39	sta $398681	            sta     conf.init
.398701		18		clc		            clc
.398702		60		rts		            rts
.398703						rx_queue
>398703		00 00				head    .word   0
>398705		00 00				tail    .word   0
.398707						end
.398707						rx_enqueue
.398707		ad 03 87	lda $8703	        lda     <>rx_queue+lib.deque_t.head  ; or tail
.39870a		d0 0d		bne $398719	        bne     _ins
.39870c		9f 00 00 3c	sta $3c0000,x	        sta @l  kernel.net.pbuf.deque,x
.398710		8e 03 87	stx $8703	        stx    <>rx_queue+lib.deque_t.head,b
.398713		8e 05 87	stx $8705	        stx    <>rx_queue+lib.deque_t.tail,b
.398716		4c 2b 87	jmp $39872b	        jmp     _done
.398719		a9 00 00	lda #$0000	_ins    lda     #0
.39871c		9f 00 00 3c	sta $3c0000,x	        sta @l  kernel.net.pbuf.deque,x
.398720		8a		txa		        txa
.398721		ae 05 87	ldx $8705	        ldx    <>rx_queue+lib.deque_t.tail,b
.398724		9f 00 00 3c	sta $3c0000,x	        sta @l  kernel.net.pbuf.deque,x
.398728		8d 05 87	sta $8705	        sta     <>rx_queue+lib.deque_t.tail,b
.39872b		60		rts		        rts
.39872c						packet_recv
.39872c		20 00 7f	jsr $397f00	_loop   jsr     hardware.lan9221.eth_tick   ; NZ if the 100ms timer has reset.
.39872f		f0 09		beq $39873a	        beq     _recv
.398731		af 95 86 39	lda $398695	        lda     conf.ticks
.398735		1a		inc a		        inc     a
.398736		8f 95 86 39	sta $398695	        sta     conf.ticks
.39873a		20 5d 7f	jsr $397f5d	_recv   jsr     hardware.lan9221.eth_packet_recv
.39873d		aa		tax		        tax
.39873e		f0 21		beq $398761	        beq     _done
.398740		bf 12 00 3c	lda $3c0012,x	        lda     pbuf.eth.type,x
.398744		eb		xba		        xba
.398745		c9 00 08	cmp #$0800	        cmp     #$0800
.398748		f0 11		beq $39875b	        beq     _ipv4
.39874a		c9 06 08	cmp #$0806	        cmp     #$0806
.39874d		f0 06		beq $398755	        beq     _arp
.39874f		20 6e 80	jsr $39806e	        jsr     kernel.net.pbuf_free_x  ; We don't handle anything else.
.398752		4c 2c 87	jmp $39872c	        jmp     _loop
.398755		20 7c 80	jsr $39807c	_arp    jsr     arp.recv
.398758		4c 2c 87	jmp $39872c	        jmp     _loop
.39875b		20 3a 84	jsr $39843a	_ipv4   jsr     ip_check
.39875e		4c 2c 87	jmp $39872c	        jmp     _loop
.398761		60		rts		_done   rts
.398762						udp_send
.398762		af 81 86 39	lda $398681	            lda     conf.init
.398766		f0 30		beq $398798	            beq     _error
.398768		4b		phk		            phk
.398769		ab		plb		            plb
.39876a		20 2c 87	jsr $39872c	            jsr     packet_recv
.39876d		20 f4 85	jsr $3985f4	            jsr     udp_make
.398770		b0 22		bcs $398794	            bcs     _out
.398772		bf 24 00 3c	lda $3c0024,x	            lda     pbuf.ipv4.dest+0,x
.398776		cf 85 86 39	cmp $398685	            cmp     conf.ip_addr+0
.39877a		d0 0f		bne $39878b	            bne     _extern
.39877c		bf 26 00 3c	lda $3c0026,x	            lda     pbuf.ipv4.dest+2,x
.398780		cf 87 86 39	cmp $398687	            cmp     conf.ip_addr+2
.398784		d0 05		bne $39878b	            bne     _extern
.398786		20 3a 84	jsr $39843a	            jsr     ip_check
.398789		80 08		bra $398793	            bra     _done
.39878b		20 ff 82	jsr $3982ff	_extern     jsr     arp.bind
.39878e		b0 05		bcs $398795	            bcs     _fail
.398790		20 57 7f	jsr $397f57	            jsr     hardware.lan9221.eth_packet_send
.398793		18		clc		_done       clc
.398794		60		rts		_out        rts
.398795		20 6e 80	jsr $39806e	_fail       jsr     kernel.net.pbuf_free_x
.398798		38		sec		_error      sec
.398799		60		rts		            rts
.39879a						udp_recv
.39879a		af 81 86 39	lda $398681	            lda     conf.init
.39879e		d0 05		bne $3987a5	            bne     _recv
.3987a0		a9 00 00	lda #$0000	            lda     #0
.3987a3		38		sec		            sec
.3987a4		60		rts		            rts
.3987a5						_recv
.3987a5		4b		phk		            phk
.3987a6		ab		plb		            plb
.3987a7		20 2c 87	jsr $39872c	            jsr     packet_recv
.3987aa		64 0e		stz $0e		            stz     user.udp_info.copied,d
.3987ac		ae 03 87	ldx $8703	        ldx    <>rx_queue+lib.deque_t.head,b
.3987af		f0 0d		beq $3987be	        beq     _done
.3987b1		bf 00 00 3c	lda $3c0000,x	        lda @l  kernel.net.pbuf.deque,x
.3987b5		8d 03 87	sta $8703	        sta     <>rx_queue+lib.deque_t.head,b
.3987b8		d0 03		bne $3987bd	        bne     _okay
.3987ba		8d 05 87	sta $8705	        sta     <>rx_queue+lib.deque_t.tail,b
.3987bd		8a		txa		_okay   txa
.3987be		f0 59		beq $398819	            beq     _out
.3987c0		20 97 82	jsr $398297	            jsr     arp.cache_ip
.3987c3		bf 20 00 3c	lda $3c0020,x	            lda     pbuf.ipv4.src+0,x
.3987c7		85 02		sta $02		            sta     user.udp_info.remote_ip,d
.3987c9		bf 22 00 3c	lda $3c0022,x	            lda     pbuf.ipv4.src+2,x
.3987cd		85 04		sta $04		            sta     user.udp_info.remote_ip+2,d
.3987cf		bf 28 00 3c	lda $3c0028,x	            lda     pbuf.ipv4.udp.sport,x
.3987d3		eb		xba		            xba
.3987d4		85 06		sta $06		            sta     user.udp_info.remote_port,d
.3987d6		bf 2a 00 3c	lda $3c002a,x	            lda     pbuf.ipv4.udp.dport,x
.3987da		eb		xba		            xba
.3987db		85 00		sta $00		            sta     user.udp_info.local_port,d
.3987dd		bf 2c 00 3c	lda $3c002c,x	            lda     pbuf.ipv4.udp.length,x
.3987e1		eb		xba		            xba
.3987e2		38		sec		            sec
.3987e3		e9 08 00	sbc #$0008	            sbc     #udp_t.size
.3987e6		c5 0c		cmp $0c		            cmp     user.udp_info.buflen,d
.3987e8		90 04		bcc $3987ee	            bcc     _length
.3987ea		f0 02		beq $3987ee	            beq     _length
.3987ec		a5 0c		lda $0c		            lda     user.udp_info.buflen,d    ; Limit copy to buflen.
.3987ee		85 0e		sta $0e		_length     sta     user.udp_info.copied,d    ; copied = # of bytes to copy
.3987f0		da		phx		            phx
.3987f1		a0 00 00	ldy #$0000	            ldy     #0
.3987f4		4a		lsr a		            lsr     a
.3987f5		90 0f		bcc $398806	            bcc     _even
.3987f7		e2 20		sep #$20	_odd        sep     #$20
.3987f9		bf 30 00 3c	lda $3c0030,x	            lda     pbuf.ipv4.udp.data,x
.3987fd		97 08		sta [$08],y	            sta     [user.udp_info.buffer],y
.3987ff		e8		inx		            inx
.398800		c8		iny		            iny
.398801		c2 20		rep #$20	            rep     #$20
.398803		4c 10 88	jmp $398810	            jmp     _next
.398806		bf 30 00 3c	lda $3c0030,x	_even       lda     pbuf.ipv4.udp.data,x
.39880a		97 08		sta [$08],y	            sta     [user.udp_info.buffer],y
.39880c		e8		inx		            inx
.39880d		e8		inx		            inx
.39880e		c8		iny		            iny
.39880f		c8		iny		            iny
.398810		c4 0e		cpy $0e		_next       cpy     user.udp_info.copied,d
.398812		d0 f2		bne $398806	            bne     _even
.398814		fa		plx		            plx
.398815		20 6e 80	jsr $39806e	            jsr     kernel.net.pbuf_free_x
.398818		8a		txa		            txa     ; Set the NZ condition code.
.398819						_out
.398819		18		clc		            clc
.39881a		60		rts		            rts

;******  Return to file: src\kernel.asm

.39881b						KERNEL_DATA
>39881b		20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>398823		0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>398833		4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>398843		58 20 0d
>398846		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>39884e		0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>39885e		20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>39886e		20 20 0d
>398871		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>398879		0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>398889		4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>398899		20 20 0d
>39889c		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>3988a4		0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>3988b4		4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3988c4		20 20 0d
>3988c7		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3988cf		0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3988df		20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3988ef		20 20 0d
>3988f2		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3988fa		45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>39890a		30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>39891a		0d
>39891b		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>398923		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>398933		72 6e 65 6c 3a 20

;******  Processing file: src\version.asm

>398939		76 30 2e 35 2e 30 2d 61		.text "v0.5.0-alpha+2 (2023-07-19)"
>398941		6c 70 68 61 2b 32 20 28 32 30 32 33 2d 30 37 2d
>398951		31 39 29

;******  Return to file: src\kernel.asm

>398954		0d 00				                .text $0D,$00
>398956		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>39895e		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>39896e		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>39897e		f0 f0
>398980		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>398988		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398998		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3989a8		f0 f0
>3989aa		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>3989b2		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3989c2		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3989d2		f0 f0
>3989d4		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>3989dc		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3989ec		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3989fc		f0 f0
>3989fe		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>398a06		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398a16		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398a26		f0 f0
>398a28		00 00 00 ff			fg_color_lut	.text $00, $00, $00, $FF
>398a2c		00 00 80 ff			                .text $00, $00, $80, $FF
>398a30		00 80 00 ff			                .text $00, $80, $00, $FF
>398a34		80 00 00 ff			                .text $80, $00, $00, $FF
>398a38		00 80 80 ff			                .text $00, $80, $80, $FF
>398a3c		80 80 00 ff			                .text $80, $80, $00, $FF
>398a40		80 00 80 ff			                .text $80, $00, $80, $FF
>398a44		80 80 80 ff			                .text $80, $80, $80, $FF
>398a48		00 45 ff ff			                .text $00, $45, $FF, $FF
>398a4c		13 45 8b ff			                .text $13, $45, $8B, $FF
>398a50		00 00 20 ff			                .text $00, $00, $20, $FF
>398a54		00 20 00 ff			                .text $00, $20, $00, $FF
>398a58		20 00 00 ff			                .text $20, $00, $00, $FF
>398a5c		20 20 20 ff			                .text $20, $20, $20, $FF
>398a60		40 40 40 ff			                .text $40, $40, $40, $FF
>398a64		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>398a68		00 00 00 ff			bg_color_lut	.text $00, $00, $00, $FF
>398a6c		00 00 80 ff			                .text $00, $00, $80, $FF
>398a70		00 80 00 ff			                .text $00, $80, $00, $FF
>398a74		80 00 00 ff			                .text $80, $00, $00, $FF
>398a78		00 20 20 ff			                .text $00, $20, $20, $FF
>398a7c		20 20 00 ff			                .text $20, $20, $00, $FF
>398a80		20 00 20 ff			                .text $20, $00, $20, $FF
>398a84		20 20 20 ff			                .text $20, $20, $20, $FF
>398a88		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>398a8c		13 45 8b ff			                .text $13, $45, $8B, $FF
>398a90		00 00 20 ff			                .text $00, $00, $20, $FF
>398a94		00 20 00 ff			                .text $00, $20, $00, $FF
>398a98		40 00 00 ff			                .text $40, $00, $00, $FF
>398a9c		10 10 10 ff			                .text $10, $10, $10, $FF
>398aa0		40 40 40 ff			                .text $40, $40, $40, $FF
>398aa4		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>398aa8		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>398ab0		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>398ac0		00
>398ac1		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>398ac9		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>398ad9		00
>398ada		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>398ae2		20 45 78 65 63 75 74 65 64 2e 0d 00
>398aee		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>398af6		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>398b06		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>398b0e		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>398b1e		64 2e 2e 2e 0d 00
>398b24		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>398b2c		20 50 72 65 73 65 6e 74 0d 00
>398b36		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>398b3e		65 73 65 6e 74 0d 00
>398b45		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>398b4d		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>398b5d		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>398b6d		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>398b75		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>398b85		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>398b92		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>398b9a		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>398ba6		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>398bae		54 55 52 45 20 46 4f 55 4e 44 2e 00
>398bba		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>398bc2		45 44 2e 00
>398bc6		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>398bce		47 20 42 4d 50 20 50 41 52 53 45 52 00
>398bdb		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>398be3		50 72 65 73 65 6e 74 3a 00
>398bec		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>398bf4		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>398c04		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>398c12		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>398c1a		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>398c2a		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>398c37		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>398c3f		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>398c4f		72 64 2e 00
>398c53		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>398c5b		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398c6b		49 44 45 20 64 72 69 76 65 2e 00
>398c76		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>398c7e		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398c8e		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>398c9c		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>398ca4		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>398cb3		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>398cbb		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>398cca		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>398cd2		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>398ce2		2e 2e 00
>398ce5		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>398ced		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>398cf5		52 4f 52 00
>398cf9		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>398d01		38 39 41 42 43 44 45 46 00
>398d0a						.align 256
>398e00		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398e08		37 38 39 30 2d 3d 08 09
>398e10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398e18		6f 70 5b 5d 0d 00 61 73
>398e20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398e28		27 60 00 5c 7a 78 63 76
>398e30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>398e38		00 20 00 81 82 83 84 85
>398e40		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>398e48		11 00 00 9d 00 1d 00 00
>398e50		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>398e58		8c 00 00 00 00 00 00 00
>398e60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398e68		00 00 00 00 00 00 00 00
>398e70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398e78		00 00 00 00 00 00 00 00
>398e80		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>398e88		26 2a 28 29 5f 2b 08 09
>398e90		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>398e98		4f 50 7b 7d 0d 00 41 53
>398ea0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>398ea8		22 7e 00 7c 5a 58 43 56
>398eb0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398eb8		00 20 00 00 00 00 00 00
>398ec0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398ec8		00 00 00 00 00 00 00 00
>398ed0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398ed8		00 00 00 00 00 00 00 00
>398ee0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398ee8		00 00 00 00 00 00 00 00
>398ef0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398ef8		00 00 00 00 00 00 00 00
>398f00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398f08		37 38 39 30 2d 3d 08 09
>398f10		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>398f18		0f 10 5b 5d 0d 00 01 13
>398f20		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>398f28		27 00 00 5c 1a 18 03 16
>398f30		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398f38		00 20 00 00 00 00 00 00
>398f40		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398f48		00 00 00 00 00 00 00 00
>398f50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398f58		00 00 00 00 00 00 00 00
>398f60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398f68		00 00 00 00 00 00 00 00
>398f70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398f78		00 00 00 00 00 00 00 00
>398f80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398f88		37 38 39 30 2d 3d 08 09
>398f90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398f98		6f 70 5b 5d 0d 00 61 73
>398fa0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398fa8		27 60 00 5c 7a 78 63 76
>398fb0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398fb8		00 20 00 00 00 00 00 00
>398fc0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398fc8		00 00 00 00 00 00 00 00
>398fd0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398fd8		00 00 00 00 00 00 00 00
>398fe0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398fe8		00 00 00 00 00 00 00 00
>398ff0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398ff8		00 00 00 00 00 00 00 00
>399000		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>399008		37 38 39 30 2d 3d 08 09
>399010		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>399018		6f 70 5b 5d 0d 00 61 73
>399020		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>399028		27 60 00 5c 7a 78 63 76
>399030		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>399038		00 20 00 00 00 00 00 00
>399040		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>399048		00 00 00 00 00 00 00 00
>399050		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>399058		00 00 00 00 00 00 00 00
>399060		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>399068		00 00 00 00 00 00 00 00
>399070		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>399078		00 00 00 00 00 00 00 00
>399080		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>399088		00 00 00 00 00 00 00 00
>399090		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>399098		00 00 00 00 00 00 00 00
>3990a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3990a8		00 00 00 00 00 00 00 00
>3990b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3990b8		00 00 00 00 00 00 00 00
>3990c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3990c8		11 00 00 9d 00 1d 00 05
>3990d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3990d8		00 00 00 00 00 00 00 00
>3990e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3990e8		00 00 00 00 00 00 00 00
>3990f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3990f8		00 00 00 00 00 00 00 00
>399100						.align 256
>399100		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>399108		34 37 3a 3d 3f 41 44 46
>399110		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>399118		57 58 5a 5b 5d 5e 60 61
>399120		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>399128		6d 6f 70 71 72 73 75 76
>399130		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>399138		80 81 82 83 84 85 86 87
>399140		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>399148		8f 90 91 92 93 93 94 95
>399150		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>399158		9d 9e 9e 9f a0 a1 a2 a2
>399160		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>399168		a9 aa ab ab ac ad ae ae
>399170		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>399178		b5 b5 b6 b7 b7 b8 b9 b9
>399180		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>399188		bf c0 c0 c1 c2 c2 c3 c4
>399190		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>399198		c9 ca ca cb cb cc cd cd
>3991a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3991a8		d2 d3 d4 d4 d5 d5 d6 d6
>3991b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3991b8		db dc dc dd de de df df
>3991c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3991c8		e4 e4 e5 e5 e6 e6 e7 e7
>3991d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3991d8		ec ec ed ed ee ee ef ef
>3991e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3991e8		f4 f4 f5 f5 f6 f6 f7 f7
>3991f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3991f8		fb fc fc fd fd fe fe ff
>399200						.align 256
>399200		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>399208		25 27 2a 2c 2e 30 32 34
>399210		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>399218		44 46 47 49 4a 4c 4d 4f
>399220		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>399228		5b 5c 5d 5e 60 61 62 63
>399230		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>399238		6d 6e 70 71 72 73 74 75
>399240		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>399248		7e 7f 80 81 82 83 84 84
>399250		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>399258		8d 8e 8e 8f 90 91 92 93
>399260		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>399268		9a 9b 9c 9d 9e 9f 9f a0
>399270		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>399278		a7 a8 a9 aa aa ab ac ad
>399280		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>399288		b3 b4 b5 b6 b6 b7 b8 b8
>399290		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>399298		bf bf c0 c1 c2 c2 c3 c4
>3992a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>3992a8		ca ca cb cc cc cd ce ce
>3992b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>3992b8		d4 d5 d6 d6 d7 d7 d8 d9
>3992c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>3992c8		de df e0 e0 e1 e1 e2 e3
>3992d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>3992d8		e8 e9 e9 ea ea eb ec ec
>3992e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>3992e8		f1 f2 f3 f3 f4 f4 f5 f5
>3992f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>3992f8		fb fb fc fc fd fd fe ff
>399300						.align 256
>399300		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		  .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>399308		83 dd ce 39 cd c5 3b 15
>399310		22 55 3b 94 e0 33 1f 38					          .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>399318		87 12 31 65 89 27 88 42
>399320		b2 32 72 84 b2 b2 31 52					          .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>399328		94 ce 56 ec fe da 58 c9
>399330		c8 5b 53 2a 08 3b 19 c1					          .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>399338		d0 10 2c b2 4b ea 32 61
>399340		da 34 33 8f 2b da 49 89					          .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>399348		a1 e6 ca 2d b3 ce b0 79
>399350		44 aa 32 82 91 e9 29 16					          .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>399358		5f e3 fb bd 15 2e be f5
>399360		e9 4a e4 2e 60 24 94 35					          .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>399368		8d 8f 2c 80 0a 5e 99 36
>399370		ac ab 21 26 42 7c 5e bc					          .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>399378		13 52 44 2f e3 ef 44 a2
>399380		86 c1 9c 47 5f 36 6d 02					          .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>399388		be 23 02 58 0a 52 5e b4
>399390		9f 06 08 c9 97 cb 9e dd					          .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>399398		d5 cf 3e df c4 9e da bb
>3993a0		9b 5d c9 f5 d9 c3 7e 87					          .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>3993a8		77 7d b1 3b 4a 68 35 6e
>3993b0		ee 47 ad 8f fd 73 2e 46					          .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>3993b8		b5 8f 44 63 55 6f e1 50
>3993c0		f4 b6 a3 4f 68 c4 a5 a4					          .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>3993c8		57 74 b9 bd 05 14 50 eb
>3993d0		a5 5c 57 2f 99 dc 2e 8a					          .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>3993d8		44 bc ec db 22 58 fc be
>3993e0		5f 3f 50 bd 2a 36 ab ae					          .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>3993e8		24 aa 82 11 5c 9f 43 4d
>3993f0		8f 0c 20 00 91 b6 45 9e					          .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>3993f8		3e 3d 66 7e 0a 1c 6b 74
>399400						.align 16
>399400		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>399408		01 01 01 00 00 00 00 00
>399410		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>399418		ff ff ff 01 00 00 00 00
>399420		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>399428		01 55 ff ff 01 00 00 00
>399430		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>399438		ff ff ff ff 01 00 00 00
>399440		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>399448		ff ff 01 ff ff 01 00 00
>399450		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>399458		01 ff ff 01 ff 01 00 00
>399460		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>399468		ff 01 ff ff ff 01 00 00
>399470		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>399478		ff ff ff ff ff 01 01 00
>399480		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>399488		ff ff ff ff 01 ff ff 01
>399490		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>399498		ff ff ff ff ff ff ff 01
>3994a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>3994a8		55 55 01 ff ff 55 01 00
>3994b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>3994b8		01 01 55 ff 55 01 00 00
>3994c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>3994c8		01 55 55 55 01 00 00 00
>3994d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>3994d8		01 55 55 01 00 00 00 00
>3994e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>3994e8		00 01 01 00 00 00 00 00
>3994f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>3994f8		00 00 00 00 00 00 00 00
>3a0000		5c 67 8a 3a 5c 79 70 3a		        .binary "binaries/basic816_3A0000.bin"
>3a0008		5c 6b 27 3a 5c ba 02 3a 5c 58 00 3a 5c b8 00 3a
>3a0018		5c 0f 04 3a 5c 5e 02 3a 5c 79 02 3a 5c 80 02 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>3a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>3a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>3a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>3a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>3a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>3a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>3a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>3a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>3a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>3a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>3a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>3a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>3a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>3a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>3a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>3a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>3a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>3a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>3a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>3a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>3a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>3a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>3a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>3a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>3a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>3a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>3a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>3a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>3a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>3a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>3a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>3a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>3a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>3a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>3a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>3a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>3a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>3a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>3a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>3a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>3a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>3a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 20 69
>3a0338		03 a2 00 00 a9 00 9f 18 f0 3a e8 e0 40 00 d0 f6
>3a0348		a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00
>3a0358		8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af
>3a0368		60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00
>3a0378		08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03
>3a0388		8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea
>3a0398		ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00
>3a03a8		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>3a03b8		f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68
>3a03c8		22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08
>3a03d8		c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08
>3a03e8		22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a03f8		68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20
>3a0408		14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9
>3a0418		00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08
>3a0428		00 29 20 f0 07 af b5 08 00 20 28 00 af b4 08 00
>3a0438		29 80 f0 07 af b5 08 00 20 a1 03 af b4 08 00 29
>3a0448		40 f0 14 af b5 08 00 20 bc 03 af b5 08 00 c9 0d
>3a0458		d0 05 a9 0a 20 bc 03 28 2b 7a fa 60 08 e2 20 bd
>3a0468		00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48
>3a0478		48 4a 4a 4a 4a 4a 4a 4a 4a 20 8e 04 68 29 ff 00
>3a0488		20 8e 04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a
>3a0498		4a 20 a5 04 68 20 a5 04 c2 20 68 28 60 08 c2 30
>3a04a8		da 29 0f 00 aa bf 00 d0 3a 20 18 00 fa 28 60 08
>3a04b8		c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa
>3a04c8		e2 20 a9 3a 48 ab bd 00 00 f0 06 20 a1 03 e8 80
>3a04d8		f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0
>3a04e8		04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60
>3a04f8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18
>3a0508		60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9
>3a0518		67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28
>3a0528		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12
>3a0538		c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09
>3a0548		28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2
>3a0558		20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20
>3a0568		c2 10 bd 00 00 f0 09 20 56 05 9d 00 00 e8 80 f2
>3a0578		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a0588		48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26
>3a0598		0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e
>3a05a8		85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>3a05b8		68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01
>3a05c8		00 af 1c 01 00 85 23 64 25 af 1e 01 00 85 29 64
>3a05d8		2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2
>3a05e8		20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00
>3a05f8		a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af
>3a0608		1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b
>3a0618		28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02
>3a0628		60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2
>3a0638		20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85 23 85
>3a0648		25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00
>3a0658		f0 07 c9 01 d0 05 20 ff 5b 28 60 08 c2 20 48 a9
>3a0668		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a0678		ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 2d c9
>3a0688		00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2
>3a0698		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20
>3a06a8		ff 5b c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00
>3a06b8		85 2d c2 20 68 85 23 68 85 25 28 60 08 c2 20 48
>3a06c8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a06d8		29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 27
>3a06e8		c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a06f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a0708		e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01
>3a0718		d0 0b 20 ff 5b c2 20 a5 25 d0 21 28 60 08 c2 20
>3a0728		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a0738		20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20 48
>3a0748		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a0758		29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 27
>3a0768		c9 00 f0 07 c9 01 d0 11 20 ff 5b a5 26 d0 29 a5
>3a0778		25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08
>3a0788		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a0798		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a07a8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a07b8		5b 1e e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26
>3a07c8		c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a07d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a07e8		dc d4 08 20 f9 5b 28 60 08 e2 20 a5 2d c9 01 f0
>3a07f8		26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0808		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a0818		20 dc d4 08 20 21 08 28 60 c2 20 a5 25 48 a5 23
>3a0828		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85
>3a0838		27 20 f9 5b c2 20 a5 23 85 29 a5 25 85 2b e2 20
>3a0848		a9 01 85 2d c2 20 68 85 23 68 85 25 60 08 e2 20
>3a0858		a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00
>3a0868		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a0878		00 20 5b 1e e2 20 dc d4 08 a5 2d c9 00 f0 16 c9
>3a0888		01 d0 d7 20 f9 5b 80 0d a5 2d c9 01 f0 07 c9 00
>3a0898		d0 c8 20 21 08 e2 20 a5 27 28 60 08 e2 20 a5 27
>3a08a8		c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00
>3a08b8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a08c8		00 20 5b 1e e2 20 dc d4 08 20 55 08 a5 27 28 60
>3a08d8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23
>3a08e8		64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00
>3a08f8		20 fb 04 90 76 20 7a 05 38 e9 30 c2 20 29 ff 00
>3a0908		18 65 23 85 23 a5 25 69 00 00 85 25 20 1a 21 80
>3a0918		db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a0928		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a0938		20 1a 21 a7 00 c9 48 f0 04 c9 68 d0 d4 20 1a 21
>3a0948		e2 20 a7 00 20 0c 05 90 22 20 2d 05 c2 20 06 23
>3a0958		26 25 06 23 26 25 06 23 26 25 06 23 26 25 29 ff
>3a0968		00 18 65 23 85 23 20 1a 21 80 d5 2b 28 60 08 c2
>3a0978		30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0
>3a0988		10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>3a0998		ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a09a8		c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 3b 21 a7
>3a09b8		00 20 fb 04 90 0c 20 d8 08 c2 20 a5 23 85 d7 20
>3a09c8		3b 21 c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 ea
>3a09d8		09 e2 20 20 5b 0a c9 00 f0 05 20 06 0c 80 f4 2b
>3a09e8		28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00
>3a09f8		e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>3a0a08		f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>3a0a18		72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>3a0a28		b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>3a0a38		20 c9 4d f0 0a c9 6d f0 06 e8 20 1a 21 80 b3 a7
>3a0a48		00 c9 3a d0 03 20 1a 21 a9 03 85 1e a9 91 20 06
>3a0a58		0c 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0a68		20 a9 7f 85 1e c2 10 20 bb 0b a5 1e d0 03 4c fb
>3a0a78		0a c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64
>3a0a88		04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8
>3a0a98		c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 1d 0b 80
>3a0aa8		28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2
>3a0ab8		20 a5 02 c5 1c f0 09 e2 20 a7 04 20 42 51 b0 09
>3a0ac8		e2 20 20 2d 0b c9 00 d0 11 c2 20 a5 00 85 04 e2
>3a0ad8		20 a5 02 85 06 20 1a 21 80 a9 c9 81 d0 15 20 76
>3a0ae8		09 c9 00 f0 11 89 80 f0 08 c9 90 f0 04 a9 af 80
>3a0af8		02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a0b08		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a0b18		e2 20 dc d4 08 08 e2 20 20 1a 21 a7 00 f0 04 c9
>3a0b28		22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00 08
>3a0b38		5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04 a9
>3a0b48		00 80 0a e2 20 a7 04 20 42 51 a9 00 2a 85 28 c2
>3a0b58		30 a9 fb 0c 85 08 e2 20 a9 3a 85 0a a2 80 00 e2
>3a0b68		20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0 02
>3a0b78		00 b7 08 85 0c e2 20 a9 3a 85 0e a5 28 f0 07 a7
>3a0b88		0c 20 42 51 b0 18 e2 10 a0 00 b7 00 20 56 05 d7
>3a0b98		0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2 30
>3a0ba8		18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>3a0bb8		e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a0bc8		c2 30 a9 fb 0c 85 08 a9 3a 00 85 0a 64 0c e2 20
>3a0bd8		a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02 85
>3a0be8		0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>3a0bf8		85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08 0b
>3a0c08		08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>3a0c18		18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>3a0c28		10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>3a0c38		08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>3a0c48		28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 fb 0c aa
>3a0c58		28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a0c68		e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20 4a 0c
>3a0c78		bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>3a0c88		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48
>3a0c98		ab 68 28 c2 30 20 4a 0c bd 04 00 2b ab 28 60 08
>3a0ca8		8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a0cb8		a9 3a 48 ab 68 28 e2 20 c2 10 20 4a 0c bd 00 00
>3a0cc8		c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20 48
>3a0cd8		a9 00 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28
>3a0ce8		e2 20 c2 10 20 4a 0c bd 06 00 c2 20 29 ff 00 2b
>3a0cf8		ab 28 60 03 01 10 d0 d8 27 02 00 03 01 12 d0 18
>3a0d08		28 02 00 02 01 14 d0 4f 28 02 00 02 01 16 d0 86
>3a0d18		28 02 00 02 03 18 d0 90 28 02 00 00 01 1c d0 a3
>3a0d28		28 02 00 04 02 1e d0 61 2a 02 00 04 02 21 d0 21
>3a0d38		2a 02 00 04 02 24 d0 e1 29 02 00 04 01 27 d0 21
>3a0d48		29 02 00 04 01 29 d0 a1 29 02 00 04 01 2b d0 61
>3a0d58		29 02 00 05 03 2d d0 0b 29 01 00 06 03 31 d0 dd
>3a0d68		28 02 00 07 02 35 d0 f4 28 02 00 ff 01 38 d0 00
>3a0d78		00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0 74
>3a0d88		41 00 00 20 05 40 d0 79 45 00 00 20 03 46 d0 c4
>3a0d98		44 00 00 20 04 4a d0 64 44 00 00 20 03 4f d0 5b
>3a0da8		44 00 00 20 02 53 d0 f3 43 00 00 50 04 56 d0 00
>3a0db8		00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0 36
>3a0dc8		43 00 00 20 06 66 d0 af 43 00 00 20 03 6d d0 8b
>3a0dd8		41 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0 00
>3a0de8		00 00 00 20 04 79 d0 7f 42 00 00 20 02 7e d0 85
>3a0df8		41 00 00 20 04 81 d0 88 41 00 00 50 05 86 d0 00
>3a0e08		00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0 82
>3a0e18		41 00 00 20 03 97 d0 ba 44 00 00 20 04 9b d0 55
>3a0e28		41 00 00 20 04 a0 d0 e5 40 00 00 20 05 a5 d0 7b
>3a0e38		40 00 00 20 05 ab d0 08 40 00 00 20 03 b1 d0 04
>3a0e48		40 00 00 20 04 b5 d0 e5 3e 00 00 20 04 ba d0 f7
>3a0e58		3f 00 00 20 07 bf d0 fb 3f 00 00 20 03 c7 d0 38
>3a0e68		3e 00 00 20 04 cb d0 a1 3d 00 00 00 01 d0 d0 a1
>3a0e78		2a 01 00 30 03 d2 d0 91 4b 00 00 30 04 d6 d0 e1
>3a0e88		4b 00 00 30 05 db d0 aa 4c 00 00 30 05 e1 d0 37
>3a0e98		4c 00 00 30 04 e7 d0 09 4d 00 00 30 03 ec d0 5e
>3a0ea8		4d 00 00 30 03 f0 d0 a3 4d 00 00 30 03 f4 d0 2c
>3a0eb8		4e 00 00 30 03 f8 d0 b5 4e 00 00 30 03 fc d0 17
>3a0ec8		4f 00 00 30 04 00 d1 03 4b 00 00 30 03 05 d1 a2
>3a0ed8		4a 00 00 30 04 09 d1 54 4a 00 00 30 03 0e d1 fe
>3a0ee8		49 00 00 30 05 12 d1 35 49 00 00 30 06 18 d1 54
>3a0ef8		48 00 00 30 04 1f d1 9f 47 00 00 10 03 24 d1 7e
>3a0f08		50 00 00 10 03 28 d1 49 50 00 00 10 04 2c d1 52
>3a0f18		6c 00 00 10 04 31 d1 95 50 00 00 10 03 36 d1 79
>3a0f28		69 00 00 20 05 3a d1 24 6b 00 00 10 04 40 d1 ff
>3a0f38		6b 00 00 20 05 45 d1 0b 6d 00 00 20 03 4b d1 2a
>3a0f48		6e 00 00 10 04 4f d1 97 6d 00 00 20 06 54 d1 a0
>3a0f58		6e 00 00 20 04 5b d1 c4 6f 00 00 10 07 60 d1 46
>3a0f68		50 00 00 20 03 68 d1 2f 3d 00 00 20 05 6c d1 3f
>3a0f78		3c 00 00 20 09 72 d1 60 2c 00 00 20 09 7c d1 ed
>3a0f88		2b 00 00 20 0a 86 d1 1d 2c 00 00 20 07 91 d1 5a
>3a0f98		2b 00 00 30 08 99 d1 56 46 00 00 20 07 a2 d1 ef
>3a0fa8		2a 00 00 30 08 aa d1 c0 46 00 00 20 08 b3 d1 a5
>3a0fb8		2d 00 00 20 08 bc d1 d9 2c 00 00 20 06 c5 d1 df
>3a0fc8		2e 00 00 20 09 cc d1 e7 2f 00 00 20 04 d6 d1 44
>3a0fd8		31 00 00 20 04 db d1 b5 31 00 00 20 04 e0 d1 4e
>3a0fe8		32 00 00 20 06 e5 d1 8a 33 00 00 20 08 ec d1 28
>3a0ff8		34 00 00 20 0a f5 d1 76 34 00 00 20 07 00 d2 ad
>3a1008		35 00 00 20 07 08 d2 2b 36 00 00 20 08 10 d2 9d
>3a1018		36 00 00 20 06 19 d2 da 36 00 00 20 07 20 d2 0a
>3a1028		3a 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2 00
>3a1038		00 00 00 20 06 34 d2 1f 3c 00 00 30 03 3b d2 6d
>3a1048		4f 00 00 30 03 3f d2 25 47 00 00 30 03 43 d2 80
>3a1058		4f 00 00 30 03 47 d2 96 4f 00 00 30 03 4b d2 ac
>3a1068		4f 00 00 30 02 4f d2 c2 4f 00 00 30 04 52 d2 d8
>3a1078		4f 00 00 30 04 57 d2 ee 4f 00 00 30 04 5c d2 04
>3a1088		50 00 00 30 03 61 d2 1a 50 00 00 30 03 65 d2 30
>3a1098		50 00 00 30 05 69 d2 7b 47 00 00 00 00 00 00 00
>3a10a8		00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a10b8		30 a9 ff ff 85 ba e2 20 a9 37 85 bc c2 20 64 b7
>3a10c8		64 bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85
>3a10d8		ea c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48
>3a10e8		a5 10 48 20 83 11 b0 03 20 07 11 20 0f 13 c2 20
>3a10f8		68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08
>3a1108		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca
>3a1118		86 0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc
>3a1128		e9 00 85 c2 20 0f 13 e2 20 a5 ea a0 00 00 97 c3
>3a1138		a9 00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00
>3a1148		00 97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3
>3a1158		e2 20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7
>3a1168		e2 20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba
>3a1178		e2 20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20
>3a1188		48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2
>3a1198		20 a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2
>3a11a8		20 a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28 18 60
>3a11b8		c2 20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85
>3a11c8		ce c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00
>3a11d8		85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e
>3a11e8		69 00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e
>3a11f8		c5 ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57
>3a1208		c2 20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85
>3a1218		bf 4c c0 12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5
>3a1228		0e 69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2
>3a1238		20 a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5
>3a1248		cb 85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8
>3a1258		b7 cf 85 cb 4c 9d 11 c2 20 a0 02 00 b7 c9 97 cf
>3a1268		e2 20 c8 c8 b7 c9 97 cf 4c c0 12 c2 20 a0 05 00
>3a1278		b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02
>3a1288		00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5
>3a1298		cf d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2
>3a12a8		20 a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf
>3a12b8		e2 20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20
>3a12c8		a5 cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9
>3a12d8		c2 20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97
>3a12e8		c3 c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97
>3a12f8		c3 e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9
>3a1308		00 97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00
>3a1318		85 c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5
>3a1328		c5 f0 04 c9 38 b0 12 c2 20 a5 c3 f0 0c e2 20 a0
>3a1338		01 00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5
>3a1348		f0 04 c9 38 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01
>3a1358		00 b7 c3 3a 97 c3 d0 03 20 67 13 28 60 00 ea 08
>3a1368		c2 20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf
>3a1378		c2 20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8
>3a1388		e2 20 97 c3 4c 4e 14 e2 20 a5 bf c5 c5 90 28 c2
>3a1398		20 a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3
>3a13a8		e2 20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20
>3a13b8		a5 c5 85 bf 4c 4e 14 c2 20 a5 bd 85 08 e2 20 a5
>3a13c8		bf 85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b
>3a13d8		c2 20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00
>3a13e8		b7 08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3
>3a13f8		a0 02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c 4e 14
>3a1408		c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0
>3a1418		19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08
>3a1428		85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02
>3a1438		00 97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2
>3a1448		20 a0 02 00 97 c3 20 53 14 28 60 08 c2 20 a5 bd
>3a1458		85 c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20
>3a1468		a5 c5 d0 03 4c f6 14 c2 20 a0 02 00 b7 c3 85 0c
>3a1478		e2 20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85
>3a1488		10 e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0
>3a1498		08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3
>3a14a8		85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3
>3a14b8		e2 20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85
>3a14c8		0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c
>3a14d8		97 c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7
>3a14e8		0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 4c 6f 14 28 60
>3a14f8		08 c2 20 64 16 64 18 28 60 08 c2 30 a5 16 d0 16
>3a1508		a5 18 d0 12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3
>3a1518		85 18 64 19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5
>3a1528		bb 3a c5 17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b
>3a1538		68 28 e2 20 a9 03 8f d3 08 00 c2 20 29 ff 00 20
>3a1548		5b 1e e2 20 dc d4 08 28 60 c9 00 d0 05 c0 01 00
>3a1558		f0 05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25 10
>3a1568		1a 18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49 ff
>3a1578		ff 69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12 64
>3a1588		14 a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10 a5
>3a1598		12 65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2
>3a15a8		20 20 01 15 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9
>3a15b8		20 97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20
>3a15c8		51 15 b5 10 29 0f 20 51 15 ca 10 eb c0 01 00 d0
>3a15d8		0c a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00 97
>3a15e8		16 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00
>3a15f8		f0 04 e8 c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00
>3a1608		08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7
>3a1618		29 f0 25 b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20
>3a1628		a9 01 00 85 23 e2 20 64 25 80 15 c2 20 a9 ff ff
>3a1638		85 23 e2 20 85 25 80 08 c2 20 64 23 e2 20 64 25
>3a1648		e2 20 a9 00 85 27 2b 28 60 08 0b 8b 08 c2 20 48
>3a1658		a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20
>3a1668		a5 25 48 ab c2 20 68 28 a6 23 20 ed 15 84 0c 08
>3a1678		c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20
>3a1688		ed 15 c2 20 98 38 65 0c aa e2 20 a9 02 20 d3 10
>3a1698		c2 20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08
>3a16a8		c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd
>3a16b8		00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48
>3a16c8		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97
>3a16d8		08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5
>3a16e8		0a 85 25 a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b
>3a16f8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5
>3a1708		08 48 c2 30 08 c2 20 48 e2 20 a5 25 48 ab c2 20
>3a1718		68 28 a6 23 20 ed 15 98 aa e8 e2 20 a9 02 20 d3
>3a1728		10 c2 20 a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20
>3a1738		b7 23 97 08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5
>3a1748		0a 85 25 c2 20 68 85 08 68 85 0a ab 2b 28 7a fa
>3a1758		60 08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9
>3a1768		84 92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b
>3a1778		c4 8f b0 12 a5 29 d0 0e 4c d7 17 20 01 15 e2 20
>3a1788		a9 00 87 16 80 39 20 01 15 c2 30 18 a5 23 65 29
>3a1798		85 23 a5 25 69 00 00 85 25 a0 00 00 e2 20 a7 23
>3a17a8		97 16 f0 1b c2 20 18 a5 23 69 01 00 85 23 a5 25
>3a17b8		69 00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2
>3a17c8		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>3a17d8		60 08 c2 30 20 00 16 a5 23 c9 ff ff d0 05 20 2d
>3a17e8		06 80 03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23
>3a17f8		c9 01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08
>3a1808		c2 30 20 00 16 a5 23 c9 00 00 d0 05 20 2d 06 80
>3a1818		03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 00
>3a1828		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>3a1838		20 00 16 a5 23 c9 ff ff f0 05 20 2d 06 80 03 20
>3a1848		3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 01 00 f0
>3a1858		05 20 2d 06 80 03 20 3f 06 28 60 08 e2 20 a5 27
>3a1868		c9 02 d0 1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11
>3a1878		20 01 15 a9 00 87 16 c2 20 a5 16 85 23 a5 18 85
>3a1888		25 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>3a1898		28 c2 30 a9 00 00 85 00 85 1a a9 36 00 85 02 85
>3a18a8		1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55
>3a18b8		90 10 c5 59 f0 02 b0 05 20 ee 18 80 e4 28 2b 7a
>3a18c8		68 60 20 f7 21 80 da 08 c2 20 48 a9 00 08 5b 68
>3a18d8		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a18e8		1e e2 20 dc d4 08 08 c2 30 85 23 64 25 20 60 15
>3a18f8		a5 16 1a 85 23 a5 18 85 25 20 f5 45 18 a5 1a 69
>3a1908		04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20 20
>3a1918		18 00 c2 20 20 2d 19 90 fb e2 20 a9 0d 20 18 00
>3a1928		20 f7 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a1948		a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>3a1958		0a 0a 0a 18 69 fb 0c 85 08 a9 3a 00 69 00 00 85
>3a1968		0a 08 e2 20 48 a9 3a 48 ab 68 28 a0 02 00 b7 08
>3a1978		aa 20 64 04 c2 20 20 1a 21 ab 2b 28 18 60 ab 2b
>3a1988		28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21
>3a1998		a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27 85
>3a19a8		2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>3a19b8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd
>3a19c8		00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>3a19d8		99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28
>3a19e8		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a19f8		20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05
>3a1a08		00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>3a1a18		e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>3a1a28		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>3a1a38		48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99 00
>3a1a48		00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>3a1a58		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>3a1a68		e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20 29
>3a1a78		ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 28 1a 28
>3a1a88		60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>3a1a98		a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a
>3a1aa8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a1ab8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a1ac8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a1ad8		20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0
>3a1ae8		11 20 5a 0c 85 0c b9 01 00 20 5a 0c c5 0c f0 02
>3a1af8		90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68
>3a1b08		38 60 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 09
>3a1b18		1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>3a1b28		4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 3b 21 e2 20
>3a1b38		a7 00 c9 90 f0 09 c9 2c d0 0a 20 1a 21 80 cf 20
>3a1b48		1a 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a1b58		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a1b68		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1b78		0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a1b88		d4 08 08 20 15 54 90 47 e2 20 a5 ea 29 80 d0 06
>3a1b98		20 16 52 4c d5 1b 20 88 51 90 53 c2 20 a5 c2 48
>3a1ba8		a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8 c8 b7 08
>3a1bb8		85 c2 e2 20 a9 8f 20 27 22 20 7f 1a 20 0a 1b 20
>3a1bc8		ec 68 20 89 1a c2 20 68 85 c2 68 85 c0 28 60 08
>3a1bd8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a1be8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a1bf8		20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00
>3a1c08		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 0b 08
>3a1c18		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 1a 21
>3a1c28		a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c
>3a1c38		e2 20 a9 02 a6 0c e8 20 01 15 a0 00 00 c4 0c f0
>3a1c48		29 a7 00 97 16 c8 20 1a 21 80 f2 08 c2 20 48 a9
>3a1c58		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a1c68		ff 00 20 5b 1e e2 20 dc d4 08 a9 00 97 16 c2 20
>3a1c78		a5 16 85 23 a5 18 85 25 a9 02 00 85 27 20 1a 21
>3a1c88		2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20 84 0c
>3a1c98		85 2f 20 7f 1a 08 e2 20 48 a9 00 48 ab 68 28 20
>3a1ca8		af 1c 20 89 1a 28 60 20 1a 21 6c 2f 08 48 08 0b
>3a1cb8		8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 51 1a
>3a1cc8		89 80 00 f0 37 48 20 84 0c 85 2f 68 20 d1 0c c9
>3a1cd8		01 00 f0 08 c2 30 a2 29 08 20 e9 19 c2 30 a2 23
>3a1ce8		08 20 e9 19 08 e2 20 48 a9 00 48 ab 68 28 20 06
>3a1cf8		1d a2 23 08 20 ab 19 ab 2b 28 68 60 00 ea 6c 2f
>3a1d08		08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>3a1d18		a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c
>3a1d28		cc 1d 30 33 c9 20 d0 03 4c c6 1d c9 3a b0 04 c9
>3a1d38		30 b0 56 c9 26 f0 52 c9 22 d0 03 4c df 1d c9 5b
>3a1d48		b0 07 c9 41 90 03 4c eb 1d c9 7b b0 07 c9 61 90
>3a1d58		03 4c eb 1d 4c cc 1d c9 8f f0 40 c9 90 f0 41 20
>3a1d68		a7 0c c9 30 d0 0c 20 8b 1c a2 23 08 20 ab 19 4c
>3a1d78		21 1d c9 00 d0 4e a7 00 a6 21 e0 ff 7f f0 05 20
>3a1d88		c8 1a b0 12 20 28 1a 80 35 c2 20 20 37 5a a2 23
>3a1d98		08 20 ab 19 80 83 20 b5 1c 80 dd 20 28 1a 80 1e
>3a1da8		e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01 00 c9 01
>3a1db8		f0 3d c9 8f f0 05 20 b5 1c 80 ee 20 51 1a 20 1a
>3a1dc8		21 4c 21 1d a6 21 e0 ff 7f b0 24 bd 01 00 c9 01
>3a1dd8		f0 1d 20 b5 1c 80 ed 20 15 1c a2 23 08 20 ab 19
>3a1de8		4c 21 1d 20 8a 1b a2 23 08 20 ab 19 4c 21 1d a2
>3a1df8		23 08 20 e9 19 fa 28 60 08 0b 8b 08 e2 20 48 a9
>3a1e08		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a1e18		30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08 c2 20 48
>3a1e28		a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6 33 2b 28
>3a1e38		60 08 c2 30 29 ff 00 20 22 1e 28 60 08 0b 08 c2
>3a1e48		20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6 33 b2 33
>3a1e58		2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1e68		08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 23 a9 00
>3a1e78		00 85 25 e2 20 a9 00 85 27 85 ea a9 3a 85 e9 c2
>3a1e88		20 a9 b5 1e 85 e7 20 78 53 c2 20 a5 d7 85 23 a5
>3a1e98		d9 85 25 e2 20 a9 00 85 27 85 ea a9 3a 85 e9 c2
>3a1ea8		20 a9 b9 1e 85 e7 20 78 53 28 2b ab 60 45 52 52
>3a1eb8		00 45 52 4c 00 e2 20 c2 10 20 d7 03 af d3 08 00
>3a1ec8		0a c2 20 29 ff 00 a8 08 e2 20 48 a9 3a 48 ab 68
>3a1ed8		28 be 0f 1f 20 64 04 c2 20 a5 d7 f0 27 a2 3f 1f
>3a1ee8		20 64 04 08 e2 20 48 a9 00 48 ab 68 28 c2 20 af
>3a1ef8		d7 08 00 8f 23 08 00 a9 00 00 8f 25 08 00 20 13
>3a1f08		46 20 d7 03 4c b5 27 43 1f 46 1f 4c 1f 59 1f 67
>3a1f18		1f 75 1f 88 1f 9e 1f ae 1f bd 1f ca 1f db 1f ea
>3a1f28		1f f7 1f 05 20 14 20 25 20 3e 20 52 20 66 20 7c
>3a1f38		20 90 20 ab 20 c3 20 20 61 74 00 4f 4b 00 42 72
>3a1f48		65 61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72
>3a1f58		00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54
>3a1f68		79 70 65 20 6d 69 73 6d 61 74 63 68 00 56 61 72
>3a1f78		69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00
>3a1f88		4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20
>3a1f98		66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65
>3a1fa8		72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72
>3a1fb8		66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67
>3a1fc8		65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65
>3a1fd8		6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e
>3a1fe8		64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d
>3a1ff8		61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74
>3a2008		68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69
>3a2018		73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61
>3a2028		62 6c 65 20 74 6f 20 72 65 61 64 20 64 69 72 65
>3a2038		63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20
>3a2048		6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65
>3a2058		20 74 6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e
>3a2068		61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66
>3a2078		69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 66 69
>3a2088		6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>3a2098		74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>3a20a8		72 79 00 43 6f 75 6c 64 20 6e 6f 74 20 63 6f 70
>3a20b8		79 20 74 68 65 20 66 69 6c 65 00 41 72 67 75 6d
>3a20c8		65 6e 74 20 6f 75 74 73 69 64 65 20 64 6f 6d 61
>3a20d8		69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a20e8		20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48 a9 00
>3a20f8		08 5b 68 28 08 c2 20 a9 bd 1e 8f d4 08 00 e2 20
>3a2108		a9 3a 8f d6 08 00 28 20 ba 44 20 fb 3f 64 31 28
>3a2118		2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>3a2128		18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85 02
>3a2138		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2148		20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20
>3a2158		1a 21 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a
>3a2168		f0 05 20 1a 21 80 f3 28 60 08 e2 20 64 36 a7 00
>3a2178		f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0 1a c9 9e
>3a2188		f0 1a c9 a0 f0 16 20 1a 21 80 e3 20 f7 21 c2 20
>3a2198		a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36 30 30
>3a21a8		80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 1a 21 28
>3a21b8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a21c8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a21d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>3a21e8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>3a21f8		c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c 85 1a
>3a2208		a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85 d7 18 a5
>3a2218		1a 69 04 00 85 00 a5 1c 69 00 00 85 02 28 60 08
>3a2228		e2 20 48 20 3b 21 68 e2 20 c7 00 d0 08 20 1a 21
>3a2238		20 3b 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2248		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a2258		20 dc d4 08 08 e2 20 20 3b 21 e2 20 a7 00 f0 10
>3a2268		c9 3a f0 0c c5 37 f0 05 20 1a 21 80 ef 28 38 60
>3a2278		28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9 3a
>3a2288		f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08 0b
>3a2298		8b 08 c2 20 48 a9 00 08 5b 68 28 20 f8 14 20 8b
>3a22a8		19 e2 20 a9 00 85 dc 22 3c 11 00 b0 4b a7 00 c9
>3a22b8		3a d0 03 20 1a 21 20 3b 21 a7 00 d0 03 4c 4a 23
>3a22c8		20 e2 04 b0 52 a7 00 10 10 20 a7 0c 85 0c c9 20
>3a22d8		d0 03 4c 38 23 a5 d2 f0 51 08 c2 20 48 a9 00 08
>3a22e8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a22f8		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a2308		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>3a2318		5b 1e e2 20 dc d4 08 20 c4 44 4c 4a 23 08 e2 20
>3a2328		48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9
>3a2338		a7 00 20 84 0c c2 20 85 2f 20 8b 19 20 1a 21 20
>3a2348		25 23 ab 2b 28 60 08 58 20 db 20 20 00 1e e2 20
>3a2358		9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c 8c 23
>3a2368		08 c2 20 a0 02 00 b7 1a 85 d7 e2 20 a5 dc c9 03
>3a2378		f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20 a5 1c
>3a2388		69 00 85 02 c2 20 20 96 22 e2 20 a5 dc c9 03 f0
>3a2398		f3 c9 00 d0 31 e2 20 20 3b 21 a7 00 f0 28 c9 3a
>3a23a8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a23b8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a23c8		08 20 1a 21 80 be 28 60 08 58 e2 20 a9 80 85 d2
>3a23d8		9c 8a 0f 20 00 1e c2 30 64 31 c2 20 a0 02 00 b7
>3a23e8		1a f0 28 20 68 23 e2 20 a5 dc c9 01 f0 1d c9 02
>3a23f8		f0 e8 c9 03 f0 e4 c2 20 a0 00 00 18 a5 1a 77 1a
>3a2408		85 1a a5 1c 69 00 00 85 1c 80 cf e2 20 a9 00 85
>3a2418		d2 28 60 08 c2 30 a9 00 00 85 08 a9 36 00 85 0a
>3a2428		a0 02 00 b7 08 f0 2c c5 23 f0 19 b0 26 a0 00 00
>3a2438		18 a5 08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c
>3a2448		85 08 80 dc c2 20 a5 08 85 1a e2 20 a5 0a 85 1c
>3a2458		28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5
>3a2468		0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18
>3a2478		a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2
>3a2488		20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85
>3a2498		0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>3a24a8		c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9
>3a24b8		01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5
>3a24c8		08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6
>3a24d8		28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2
>3a24e8		20 a5 0a 69 00 85 0e c2 20 18 a5 d9 69 04 00 85
>3a24f8		00 e2 20 a5 db 69 00 85 02 a0 00 00 c2 20 38 a5
>3a2508		d9 f7 08 85 d9 e2 20 a5 db e9 00 85 db 20 5e 24
>3a2518		20 ba 44 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2528		c2 30 a0 02 00 97 d9 18 a5 d9 69 04 00 85 08 e2
>3a2538		20 a5 db 69 00 85 0a e2 20 a0 00 00 b7 1a 97 08
>3a2548		f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20
>3a2558		a0 00 00 a5 0c 97 d9 c2 20 18 a5 d9 65 0c 85 0c
>3a2568		e2 20 a5 db 69 00 85 db c2 20 a5 0c 85 d9 c2 20
>3a2578		a0 00 00 a9 00 00 97 d9 c8 c0 05 00 d0 f8 20 ba
>3a2588		44 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a2598		30 a9 00 00 85 08 a9 36 00 85 0a a0 02 00 b7 08
>3a25a8		f0 1d c5 d7 f0 25 b0 1d a0 00 00 18 a5 08 77 08
>3a25b8		85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9
>3a25c8		00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b
>3a25d8		60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 1a
>3a25e8		f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5
>3a25f8		0a 85 02 18 a5 d9 69 04 00 85 0c a5 db 69 00 00
>3a2608		85 0e 18 a5 d9 65 10 85 d9 a5 db 69 00 00 85 db
>3a2618		18 a5 d9 69 04 00 85 08 a5 db 69 00 00 85 0a 20
>3a2628		9d 24 c2 20 a5 10 a0 00 00 97 00 a5 d7 a0 02 00
>3a2638		97 00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85
>3a2648		02 a0 00 00 e2 20 b7 1a 97 00 f0 03 c8 80 f7 20
>3a2658		ba 44 28 60 08 c2 30 85 d7 20 8b 25 c9 00 00 f0
>3a2668		2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 da
>3a2678		24 68 85 0a 68 85 08 a5 1a 85 00 a5 1c 85 02 20
>3a2688		3b 21 e2 20 a7 00 f0 0a 20 d9 25 80 05 a5 d7 20
>3a2698		1d 25 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a26a8		e2 20 c2 10 a2 00 00 bd 00 4f f0 03 e8 80 f8 86
>3a26b8		0c c2 30 8a c9 02 00 90 12 3a 18 69 00 4f aa 18
>3a26c8		65 8f a8 a5 0c 3a 8b 44 00 00 ab c2 20 a6 55 a0
>3a26d8		00 4f a5 8f 8b 54 00 3a ab e2 20 a5 0c c9 02 90
>3a26e8		18 a6 8f a9 22 9d 00 4f e8 bd 00 4f d0 fa a9 22
>3a26f8		9d 00 4f a9 00 e8 9d 00 4f 28 2b 60 da 5a 8b 0b
>3a2708		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 ad
>3a2718		00 4f c9 23 f0 0a c9 7c f0 17 28 2b ab 7a fa 60
>3a2728		c2 20 a9 03 00 85 8f a9 4a 27 85 55 20 9c 26 80
>3a2738		e9 c2 20 a9 04 00 85 8f a9 4e 27 85 55 20 9c 26
>3a2748		80 d8 44 49 52 00 42 52 55 4e 00 8b 08 20 3d 02
>3a2758		08 e2 20 48 a9 3a 48 ab 68 28 a2 6f d2 20 64 04
>3a2768		28 ab 60 08 e2 30 a9 01 20 1c 00 20 db 00 c9 00
>3a2778		f0 f9 c9 0d f0 02 80 f3 28 60 0b 08 08 c2 20 48
>3a2788		a9 00 08 5b 68 28 c2 30 64 d7 a9 00 4f 85 1a a9
>3a2798		00 00 85 1c 20 9c 09 c2 20 a5 d7 d0 05 20 4e 23
>3a27a8		80 07 20 5c 26 28 2b 38 60 28 2b 18 60 c2 30 a2
>3a27b8		ff fe 9a 20 53 27 20 08 00 20 0c 00 22 3c 11 00
>3a27c8		a9 00 00 20 1c 00 20 04 27 20 82 27 b0 e8 80 e3
>3a27d8		08 e2 20 20 a3 08 c9 00 f0 2c c9 01 f0 2d c9 02
>3a27e8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a27f8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a2808		08 20 51 16 80 08 20 67 54 80 03 20 d6 56 28 60
>3a2818		08 e2 20 20 55 08 c9 00 f0 23 c9 01 f0 24 08 c2
>3a2828		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a2838		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 79 54
>3a2848		80 03 20 cb 56 28 60 08 e2 20 20 55 08 c9 00 f0
>3a2858		23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2868		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a2878		20 dc d4 08 20 8b 54 80 03 20 6c 57 28 60 20 bf
>3a2888		07 20 f0 07 20 21 57 60 a5 23 8f 1a 01 00 a5 29
>3a2898		8f 18 01 00 af 1e 01 00 85 23 60 08 c2 30 48 20
>3a28a8		bf 07 a5 2d c9 00 00 d0 0d a5 2b d0 09 da a6 29
>3a28b8		20 3f 64 fa 80 1c 20 f0 07 c2 20 a5 2b 48 a5 29
>3a28c8		48 20 ca 62 c2 20 68 85 29 68 85 2b 20 6c 57 20
>3a28d8		a9 64 68 28 60 08 20 51 06 20 82 06 c2 20 a5 23
>3a28e8		25 29 85 23 a5 25 25 2b 85 25 28 60 08 20 51 06
>3a28f8		20 82 06 c2 20 a5 23 05 29 85 23 a5 25 05 2b 85
>3a2908		25 28 60 08 20 51 06 c2 20 a5 23 49 ff ff 85 23
>3a2918		a5 25 49 ff ff 85 25 28 60 08 e2 20 20 a3 08 c9
>3a2928		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2938		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2948		ff 00 20 5b 1e e2 20 dc d4 08 20 d9 17 80 08 20
>3a2958		8c 55 80 03 20 01 5d 28 60 08 e2 20 20 a3 08 c9
>3a2968		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2978		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2988		ff 00 20 5b 1e e2 20 dc d4 08 20 f0 17 80 08 20
>3a2998		ad 55 80 03 20 16 5d 28 60 08 e2 20 20 a3 08 c9
>3a29a8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a29b8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a29c8		ff 00 20 5b 1e e2 20 dc d4 08 20 07 18 80 08 20
>3a29d8		da 55 80 03 20 2b 5d 28 60 08 e2 20 20 a3 08 c9
>3a29e8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a29f8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2a08		ff 00 20 5b 1e e2 20 dc d4 08 20 1e 18 80 08 20
>3a2a18		f8 55 80 03 20 6a 5d 28 60 08 e2 20 20 a3 08 c9
>3a2a28		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2a38		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2a48		ff 00 20 5b 1e e2 20 dc d4 08 20 35 18 80 08 20
>3a2a58		16 56 80 03 20 55 5d 28 60 08 e2 20 20 a3 08 c9
>3a2a68		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2a78		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2a88		ff 00 20 5b 1e e2 20 dc d4 08 20 4c 18 80 08 20
>3a2a98		43 56 80 03 20 40 5d 28 60 08 e2 20 a5 27 c9 00
>3a2aa8		f0 2d c9 01 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2ab8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a2ac8		e2 20 dc d4 08 e2 20 a5 26 49 80 85 26 80 16 c2
>3a2ad8		20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85 25 e6
>3a2ae8		23 d0 02 e6 25 28 60 08 e2 20 20 09 1d 20 63 07
>3a2af8		20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 27
>3a2b08		22 20 09 1d 20 63 07 20 ae 05 a5 23 0a 0a 0a 0a
>3a2b18		05 29 48 a9 2c 20 27 22 20 09 1d 20 63 07 20 ae
>3a2b28		05 a5 23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c
>3a2b38		8f 0e 08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f
>3a2b48		04 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 5f 21
>3a2b58		28 60 08 e2 20 20 09 1d 20 63 07 20 ae 05 a5 23
>3a2b68		0a 0a 0a 0a 05 29 48 a9 2c 20 27 22 20 09 1d 20
>3a2b78		63 07 20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>3a2b88		20 27 22 20 09 1d 20 51 06 20 e4 05 c2 20 a5 23
>3a2b98		85 92 a5 29 85 23 20 ae 05 e2 20 a5 23 0a 0a 0a
>3a2ba8		0a 05 29 48 c2 20 a5 92 85 23 20 ae 05 e2 20 a5
>3a2bb8		23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e
>3a2bc8		08 af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08
>3a2bd8		af 68 8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af
>3a2be8		20 5f 21 28 60 08 e2 20 48 20 09 1d 20 63 07 e2
>3a2bf8		20 a5 23 29 0f 0a 0a 0a 0a 83 01 a9 2c 20 27 22
>3a2c08		20 09 1d 20 63 07 a5 23 29 0f 03 01 8f 1e 00 00
>3a2c18		e2 20 68 28 60 08 c2 20 f4 00 00 e2 20 20 09 1d
>3a2c28		20 63 07 a5 23 83 01 a9 2c 20 27 22 20 09 1d 20
>3a2c38		63 07 a5 23 83 02 a9 2c 20 27 22 20 09 1d 20 63
>3a2c48		07 a5 23 8f 0d 00 af a3 02 8f 0e 00 af a3 01 8f
>3a2c58		0f 00 af c2 20 68 28 60 08 c2 20 f4 00 00 e2 20
>3a2c68		20 09 1d 20 51 06 a5 23 f0 16 a9 01 8f 04 00 af
>3a2c78		a9 20 8f 08 00 af 8f 09 00 af 22 2c 11 00 80 0a
>3a2c88		a9 00 8f 04 00 af 22 2c 11 00 a9 2c 85 37 20 5c
>3a2c98		22 90 39 20 1a 21 20 09 1d 20 63 07 a5 23 83 01
>3a2ca8		a9 2c 20 27 22 20 09 1d 20 63 07 a5 23 83 02 a9
>3a2cb8		2c 20 27 22 20 09 1d 20 63 07 a5 23 8f 05 00 af
>3a2cc8		a3 02 8f 06 00 af a3 01 8f 07 00 af c2 20 68 28
>3a2cd8		60 08 c2 20 3b 38 e9 05 00 1b e2 20 20 09 1d 20
>3a2ce8		63 07 a5 23 c9 0a 90 1f 08 c2 20 48 a9 00 08 5b
>3a2cf8		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>3a2d08		5b 1e e2 20 dc d4 08 83 01 a9 2c 20 27 22 20 09
>3a2d18		1d 20 63 07 a5 23 83 02 a9 2c 20 27 22 20 09 1d
>3a2d28		20 63 07 a5 23 83 03 a9 2c 20 27 22 20 09 1d 20
>3a2d38		63 07 a5 23 83 04 a9 2c 20 27 22 20 09 1d 20 63
>3a2d48		07 a5 23 83 05 a9 af 85 a0 a3 01 0a c2 20 29 ff
>3a2d58		00 aa bf 91 2d 3a 85 9e e2 20 a3 02 c2 20 29 ff
>3a2d68		00 0a 0a 18 65 9e 85 9e e2 20 a0 02 00 a3 03 97
>3a2d78		9e a0 01 00 a3 04 97 9e a0 00 00 a3 05 97 9e c2
>3a2d88		20 3b 18 69 05 00 1b 28 60 00 20 00 24 00 28 00
>3a2d98		2c 00 30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08
>3a2da8		20 09 1d 20 51 06 c2 20 a5 23 89 00 01 d0 17 af
>3a2db8		00 00 af 89 00 01 f0 0e e2 20 a9 00 8f 01 00 af
>3a2dc8		a9 01 8f 01 00 af c2 20 a5 23 8f 00 00 af e2 20
>3a2dd8		a5 24 c2 20 29 03 00 0a aa c2 20 bf 2c 2e 3a 8f
>3a2de8		10 f0 3a bf 34 2e 3a 8f 12 f0 3a af 10 f0 3a 8f
>3a2df8		08 01 00 af 12 f0 3a 8f 0a 01 00 af 0c 01 00 8f
>3a2e08		14 f0 3a e2 20 af 0e 01 00 8f 16 f0 3a 22 2c 11
>3a2e18		00 c2 20 af 1a 00 00 aa af 1c 00 00 a8 20 20 00
>3a2e28		28 7a fa 60 80 02 20 03 40 01 90 01 e0 01 58 02
>3a2e38		f0 00 2c 01 50 00 64 00 28 00 32 00 3c 00 4b 00
>3a2e48		1e 00 32 00 48 00 5c 00 20 00 2a 00 34 00 43 00
>3a2e58		16 00 34 00 da 08 c2 30 c9 02 00 b0 1c 0a 0a aa
>3a2e68		bf 00 f0 3a 85 9e bf 02 f0 3a 85 a0 c9 f0 00 b0
>3a2e78		08 c9 b0 00 90 03 28 fa 60 08 c2 20 48 a9 00 08
>3a2e88		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a2e98		20 5b 1e e2 20 dc d4 08 da 08 c2 30 c9 02 00 b0
>3a2ea8		17 0a 0a aa bf 08 f0 3a 85 9e bf 0a f0 3a 85 a0
>3a2eb8		c9 40 00 b0 03 28 fa 60 08 c2 20 48 a9 00 08 5b
>3a2ec8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a2ed8		5b 1e e2 20 dc d4 08 08 c2 30 3b 38 e9 07 00 1b
>3a2ee8		20 09 1d 20 63 07 c2 20 a5 23 c9 02 00 b0 59 83
>3a2ef8		01 e2 20 a9 2c 20 27 22 20 09 1d 20 63 07 a5 23
>3a2f08		83 03 a9 2c 20 27 22 20 09 1d 20 63 07 a3 01 0a
>3a2f18		0a 0a aa a3 03 d0 05 a5 23 0a 80 04 a5 23 38 2a
>3a2f28		9f 00 01 af c2 20 a9 2c 00 85 37 20 5c 22 b0 37
>3a2f38		c2 20 08 c2 20 a9 00 00 85 23 a9 b0 00 85 25 e2
>3a2f48		20 a9 00 85 27 28 80 27 08 c2 20 48 a9 00 08 5b
>3a2f58		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a2f68		5b 1e e2 20 dc d4 08 c2 20 20 1a 21 20 09 1d c2
>3a2f78		20 a3 01 0a 0a aa a5 23 9f 00 f0 3a 9f 08 f0 3a
>3a2f88		83 04 a5 25 9f 02 f0 3a 38 e9 b0 00 9f 0a f0 3a
>3a2f98		83 06 a3 01 0a 0a 0a aa e2 20 a3 04 9f 01 01 af
>3a2fa8		a3 05 9f 02 01 af a3 06 9f 03 01 af a9 00 9f 04
>3a2fb8		01 af 9f 05 01 af c2 30 3b 18 69 07 00 1b 28 60
>3a2fc8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a2fd8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>3a2fe8		c2 20 20 09 1d 20 63 07 a5 23 20 a0 2e c2 20 a5
>3a2ff8		9e 8f 05 04 af af 14 f0 3a 8f 08 04 af e2 20 a5
>3a3008		a0 8f 07 04 af af 16 f0 3a 8f 0a 04 af a9 00 8f
>3a3018		01 04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9
>3a3028		00 8f 00 04 af 28 60 08 c2 20 a5 59 cf 10 f0 3a
>3a3038		90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3048		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a3058		08 c2 30 a5 5d cf 12 f0 3a b0 d7 8f 08 01 00 af
>3a3068		10 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 59 85 0c
>3a3078		af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9e 85 0c
>3a3088		a5 0e 65 a0 85 0e e2 20 a5 55 87 0c 28 60 c2 20
>3a3098		a9 01 00 85 dd 38 a5 61 e5 59 85 69 10 0b 49 ff
>3a30a8		ff 1a 85 69 a9 ff ff 85 dd a9 01 00 85 df 38 a5
>3a30b8		65 e5 5d 85 6d 10 0b 49 ff ff 1a 85 6d a9 ff ff
>3a30c8		85 df a5 6d c9 01 00 d0 19 a5 69 c9 01 00 d0 10
>3a30d8		20 2f 30 a5 61 85 59 a5 65 85 5d 20 2f 30 80 5b
>3a30e8		a5 6d c5 69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a
>3a30f8		48 0a 68 6a 85 71 20 2f 30 a5 59 c5 61 d0 06 a5
>3a3108		5d c5 65 f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5
>3a3118		75 10 10 f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65
>3a3128		dd 85 59 a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69
>3a3138		85 71 18 a5 5d 65 df 85 5d 80 bb 60 08 c2 20 3b
>3a3148		38 e9 06 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a3158		e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 1d 20 63
>3a3168		07 83 01 a9 2c 00 20 27 22 20 09 1d 20 51 06 a5
>3a3178		23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51 06 a5
>3a3188		23 83 05 a9 2c 00 20 27 22 20 09 1d 20 63 07 a5
>3a3198		23 85 55 a3 03 85 59 a3 05 85 5d a3 01 20 5c 2e
>3a31a8		20 2f 30 c2 20 3b 18 69 06 00 1b 28 60 08 c2 20
>3a31b8		3b 38 e9 0a 00 1b 08 c2 20 48 a9 00 08 5b 68 28
>3a31c8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 1d 20
>3a31d8		63 07 83 01 a9 2c 00 20 27 22 20 09 1d 20 51 06
>3a31e8		a5 23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51 06
>3a31f8		a5 23 83 05 a9 2c 00 20 27 22 20 09 1d 20 51 06
>3a3208		a5 23 83 07 a9 2c 00 20 27 22 20 09 1d 20 51 06
>3a3218		a5 23 83 09 a9 2c 00 20 27 22 20 09 1d 20 63 07
>3a3228		a5 23 85 55 a3 03 85 59 a3 05 85 5d a3 07 85 61
>3a3238		a3 09 85 65 a3 01 20 5c 2e 20 96 30 c2 20 3b 18
>3a3248		69 0a 00 1b 28 60 08 c2 20 3b 38 e9 0c 00 1b 08
>3a3258		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a3268		ab 68 28 c2 30 20 09 1d 20 63 07 83 01 a9 2c 00
>3a3278		20 27 22 20 09 1d 20 51 06 a5 23 83 03 a9 2c 00
>3a3288		20 27 22 20 09 1d 20 51 06 a5 23 83 05 a9 2c 00
>3a3298		20 27 22 20 09 1d 20 51 06 a5 23 83 07 a9 2c 00
>3a32a8		20 27 22 20 09 1d 20 51 06 a5 23 83 09 a9 2c 00
>3a32b8		20 27 22 20 09 1d 20 63 07 a5 23 83 0b a3 01 20
>3a32c8		a0 2e a9 07 00 8f 00 04 af c2 20 a3 05 8f 00 01
>3a32d8		00 af 10 f0 3a 8f 02 01 00 18 af 04 01 00 63 03
>3a32e8		85 0c e2 20 af 06 01 00 69 00 85 0e c2 20 18 a5
>3a32f8		9e 65 0c 8f 05 04 af e2 20 a5 a0 65 0e 8f 07 04
>3a3308		af c2 20 38 a3 07 e3 03 85 0c 8f 08 04 af 38 af
>3a3318		10 f0 3a 8f 0e 04 af 38 a3 09 e3 05 8f 0a 04 af
>3a3328		e2 20 a3 0b 8f 01 04 af af 00 04 af 09 80 8f 00
>3a3338		04 af af 01 04 af 30 fa a9 00 8f 00 04 af c2 20
>3a3348		3b 18 69 0c 00 1b 28 60 08 c2 20 c9 40 00 b0 13
>3a3358		0a 0a 0a 18 69 00 0c 85 9e a9 af 00 69 00 00 85
>3a3368		a0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3378		09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a3388		d4 08 08 c2 20 3b 38 e9 03 00 1b c2 30 20 09 1d
>3a3398		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 e2 20 20
>3a33a8		09 1d 20 63 07 a5 23 c9 08 b0 56 83 03 a9 2c 20
>3a33b8		27 22 20 09 1d 20 51 06 c2 20 38 a5 23 e9 00 00
>3a33c8		85 23 a5 25 e9 b0 00 85 25 30 36 c2 20 a3 01 aa
>3a33d8		20 50 33 a5 23 a0 01 00 97 9e e2 20 a5 25 c8 c8
>3a33e8		97 9e bf 18 f0 3a 29 f1 85 0c a3 03 0a 29 0e 05
>3a33f8		0c 87 9e 9f 18 f0 3a c2 20 3b 18 69 03 00 1b 28
>3a3408		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a3418		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a3428		08 c2 20 3b 38 e9 04 00 1b c2 30 20 09 1d 20 63
>3a3438		07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d 20 51
>3a3448		06 a5 23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51
>3a3458		06 a3 01 20 50 33 a3 03 a0 04 00 97 9e a5 23 a0
>3a3468		06 00 97 9e c2 20 3b 18 69 04 00 1b 28 60 08 c2
>3a3478		20 3b 38 e9 03 00 1b c2 30 20 09 1d 20 63 07 a5
>3a3488		23 83 01 a9 2c 00 20 27 22 e2 20 20 09 1d 20 51
>3a3498		06 a5 23 d0 04 83 03 80 04 a9 01 83 03 a9 2c 85
>3a34a8		37 20 5c 22 b0 20 c2 30 a3 01 aa 20 50 33 e2 20
>3a34b8		bf 18 f0 3a 29 fe 85 0c a3 03 29 01 05 0c 9f 18
>3a34c8		f0 3a 87 9e 80 36 c2 30 20 1a 21 20 09 1d 20 63
>3a34d8		07 a5 23 c9 08 00 b0 2e 0a 0a 0a 0a 85 0c a3 01
>3a34e8		aa 20 50 33 e2 20 a3 03 29 01 05 0c 85 0c bf 18
>3a34f8		f0 3a 29 8e 05 0c 87 9e 9f 18 f0 3a c2 20 3b 18
>3a3508		69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3518		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a3528		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>3a3538		a9 04 00 8d 02 01 18 ad 04 01 69 80 02 85 9e a9
>3a3548		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3558		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a3568		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>3a3578		a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85 9e a9
>3a3588		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3598		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a35a8		e2 20 dc d4 08 08 c2 20 3b 38 e9 06 00 1b c2 20
>3a35b8		20 09 1d 20 63 07 a5 23 83 01 a9 2c 00 20 27 22
>3a35c8		20 09 1d 20 63 07 a5 23 83 03 a9 2c 00 20 27 22
>3a35d8		20 09 1d 20 63 07 a5 23 83 05 a9 2c 00 20 27 22
>3a35e8		20 09 1d 20 51 06 a3 01 20 2d 35 a5 23 87 9e e2
>3a35f8		20 38 a5 25 e9 b0 a0 02 00 97 9e a3 05 d0 0d e2
>3a3608		20 a3 03 29 07 a0 03 00 97 9e 80 0d e2 20 a3 03
>3a3618		29 07 09 08 a0 03 00 97 9e c2 20 3b 18 69 06 00
>3a3628		1b 28 60 08 c2 20 3b 38 e9 06 00 1b c2 20 20 09
>3a3638		1d 20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09
>3a3648		1d 20 51 06 a5 23 83 03 a9 2c 00 20 27 22 20 09
>3a3658		1d 20 51 06 a5 23 83 05 a9 2c 00 20 27 22 20 09
>3a3668		1d 20 51 06 a3 01 20 6d 35 a5 23 a0 01 00 97 9e
>3a3678		e2 20 38 a5 25 e9 b0 c8 c8 97 9e c2 20 a3 03 a0
>3a3688		04 00 97 9e a3 05 a0 06 00 97 9e c2 20 3b 18 69
>3a3698		06 00 1b 28 60 08 c2 20 f4 00 00 c2 20 20 09 1d
>3a36a8		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d
>3a36b8		20 51 06 a3 01 20 6d 35 a5 23 d0 06 e2 20 a9 00
>3a36c8		80 04 e2 20 a9 01 e2 20 a0 00 00 97 9e c2 20 68
>3a36d8		28 60 08 c2 20 3b 38 e9 04 00 1b c2 20 20 09 1d
>3a36e8		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d
>3a36f8		20 51 06 a5 23 83 03 a9 2c 00 20 27 22 20 09 1d
>3a3708		20 51 06 a3 01 20 6d 35 a5 23 a0 0a 00 97 9e a3
>3a3718		03 a0 08 00 97 9e c2 20 3b 18 69 04 00 1b 28 60
>3a3728		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00
>3a3738		8f 58 f0 3a af 5c f0 3a c9 b0 b0 1c 8f 24 04 af
>3a3748		af 5b f0 3a 8f 23 04 af af 5a f0 3a 8f 22 04 af
>3a3758		a9 10 8f 58 f0 3a 80 17 38 e9 b0 8f 04 04 af af
>3a3768		5b f0 3a 8f 03 04 af af 5a f0 3a 8f 02 04 af af
>3a3778		59 f0 3a d0 3c af 58 f0 3a f0 1b af 5d f0 3a 8f
>3a3788		28 04 af af 5e f0 3a 8f 29 04 af af 5f f0 3a 8f
>3a3798		2a 04 af 82 8b 00 af 5d f0 3a 8f 08 04 af af 5e
>3a37a8		f0 3a 8f 09 04 af af 5f f0 3a 8f 0a 04 af 82 70
>3a37b8		00 af 58 f0 3a 09 01 8f 58 f0 3a 89 10 f0 32 af
>3a37c8		60 f0 3a 8f 28 04 af af 61 f0 3a 8f 29 04 af af
>3a37d8		62 f0 3a 8f 2a 04 af af 63 f0 3a 8f 2b 04 af af
>3a37e8		64 f0 3a 8f 2c 04 af af 65 f0 3a 8f 2d 04 af 80
>3a37f8		30 af 60 f0 3a 8f 08 04 af af 61 f0 3a 8f 09 04
>3a3808		af af 62 f0 3a 8f 0a 04 af af 63 f0 3a 8f 0b 04
>3a3818		af af 64 f0 3a 8f 0c 04 af af 65 f0 3a 8f 0d 04
>3a3828		af e2 20 af 69 f0 3a c9 b0 b0 20 8f 27 04 af af
>3a3838		68 f0 3a 8f 26 04 af af 67 f0 3a 8f 25 04 af af
>3a3848		58 f0 3a 09 20 8f 58 f0 3a 80 17 38 e9 b0 8f 07
>3a3858		04 af af 68 f0 3a 8f 06 04 af af 67 f0 3a 8f 05
>3a3868		04 af af 66 f0 3a d0 3e af 58 f0 3a 89 20 f0 1b
>3a3878		af 6a f0 3a 8f 28 04 af af 6b f0 3a 8f 29 04 af
>3a3888		af 6c f0 3a 8f 2a 04 af 82 8b 00 af 6a f0 3a 8f
>3a3898		08 04 af af 6b f0 3a 8f 09 04 af af 6c f0 3a 8f
>3a38a8		0a 04 af 82 70 00 af 58 f0 3a 09 02 8f 58 f0 3a
>3a38b8		89 20 f0 32 af 6d f0 3a 8f 28 04 af af 6e f0 3a
>3a38c8		8f 29 04 af af 6f f0 3a 8f 2a 04 af af 70 f0 3a
>3a38d8		8f 2b 04 af af 71 f0 3a 8f 2e 04 af af 72 f0 3a
>3a38e8		8f 2f 04 af 80 30 af 6d f0 3a 8f 08 04 af af 6e
>3a38f8		f0 3a 8f 09 04 af af 6f f0 3a 8f 0a 04 af af 70
>3a3908		f0 3a 8f 0b 04 af af 71 f0 3a 8f 0e 04 af af 72
>3a3918		f0 3a 8f 0f 04 af af 58 f0 3a 29 30 f0 43 c9 10
>3a3928		f0 76 c9 20 d0 03 82 8a 00 af 58 f0 3a 29 03 f0
>3a3938		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3948		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a3958		20 dc d4 08 a9 01 80 02 a9 03 8f 20 04 af 82 7d
>3a3968		00 af 58 f0 3a 29 03 f0 23 c9 03 f0 23 08 c2 20
>3a3978		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>3a3988		20 29 ff 00 20 5b 1e e2 20 dc d4 08 a9 01 80 02
>3a3998		a9 03 8f 00 04 af 80 34 af 58 f0 3a 29 01 0a 09
>3a39a8		11 8f 20 04 af af 58 f0 3a 29 02 09 11 8f 00 04
>3a39b8		af 80 19 af 58 f0 3a 29 02 09 21 8f 20 04 af af
>3a39c8		58 f0 3a 29 01 0a 09 21 8f 00 04 af af 00 04 af
>3a39d8		09 80 8f 00 04 af af 58 f0 3a 29 30 f0 0f af 20
>3a39e8		04 af 09 80 8f 20 04 af ea ea ea ea ea af 01 04
>3a39f8		af 89 80 d0 f8 a9 00 8f 20 04 af 8f 00 04 af 28
>3a3a08		2b 60 0b 08 e2 20 c2 10 a9 00 a2 00 00 8f 59 f0
>3a3a18		3a e8 e0 1a 00 d0 f6 20 7b 22 c9 e6 f0 23 c9 e7
>3a3a28		f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3a38		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a3a48		08 20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 5a
>3a3a58		f0 3a e2 20 a5 25 8f 5c f0 3a a9 2c 20 27 22 20
>3a3a68		09 1d 20 51 06 c2 20 a5 23 8f 5d f0 3a e2 20 a5
>3a3a78		25 8f 5f f0 3a e2 20 a9 00 8f 59 f0 3a 82 74 00
>3a3a88		20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 5a f0
>3a3a98		3a e2 20 a5 25 8f 5c f0 3a a9 2c 20 27 22 20 09
>3a3aa8		1d 20 0d 07 c2 20 a5 23 8f 60 f0 3a 8d 00 01 a9
>3a3ab8		2c 00 20 27 22 20 09 1d 20 0d 07 c2 20 a5 23 8f
>3a3ac8		62 f0 3a 8d 02 01 a9 2c 00 20 27 22 20 09 1d 20
>3a3ad8		0d 07 c2 20 a5 23 8f 64 f0 3a c2 20 ad 04 01 8f
>3a3ae8		5d f0 3a e2 20 ad 06 01 8f 5f f0 3a e2 20 a9 01
>3a3af8		8f 59 f0 3a e2 20 a9 9c 20 27 22 20 7b 22 c9 e6
>3a3b08		f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28
>3a3b18		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a3b28		e2 20 dc d4 08 20 27 22 20 09 1d 20 51 06 c2 20
>3a3b38		a5 23 8f 67 f0 3a e2 20 a5 25 8f 69 f0 3a a9 2c
>3a3b48		20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 6a f0
>3a3b58		3a e2 20 a5 25 8f 6c f0 3a e2 20 a9 00 8f 66 f0
>3a3b68		3a 82 74 00 20 27 22 20 09 1d 20 51 06 c2 20 a5
>3a3b78		23 8f 67 f0 3a e2 20 a5 25 8f 69 f0 3a a9 2c 20
>3a3b88		27 22 20 09 1d 20 0d 07 c2 20 a5 23 8f 6d f0 3a
>3a3b98		8d 00 01 a9 2c 00 20 27 22 20 09 1d 20 0d 07 c2
>3a3ba8		20 a5 23 8f 6f f0 3a 8d 02 01 a9 2c 00 20 27 22
>3a3bb8		20 09 1d 20 0d 07 c2 20 a5 23 8f 71 f0 3a c2 20
>3a3bc8		ad 04 01 8f 6a f0 3a e2 20 ad 06 01 8f 6c f0 3a
>3a3bd8		e2 20 a9 01 8f 66 f0 3a c2 20 af 5d f0 3a cf 6a
>3a3be8		f0 3a d0 14 e2 20 af 5f f0 3a cf 6c f0 3a d0 08
>3a3bf8		c2 20 20 28 37 28 2b 60 08 c2 20 48 a9 00 08 5b
>3a3c08		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>3a3c18		5b 1e e2 20 dc d4 08 08 c2 30 20 09 1d 20 63 07
>3a3c28		a5 23 48 a9 2c 00 20 27 22 20 09 1d 20 63 07 a4
>3a3c38		23 fa 20 20 00 28 60 08 20 3b 21 e2 20 a7 00 d0
>3a3c48		03 4c e7 3c c9 3a d0 03 4c e7 3c c9 22 d0 0b 20
>3a3c58		15 1c 20 f5 45 a9 3b 20 27 22 20 e2 04 90 44 20
>3a3c68		15 54 90 3f a9 3f 20 18 00 a9 20 20 18 00 20 10
>3a3c78		00 e2 20 a5 ea c9 02 f0 49 c9 00 d0 03 82 84 00
>3a3c88		c9 01 f0 5d 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3c98		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a3ca8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3cb8		02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a3cc8		d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85 25 e2 20
>3a3cd8		a9 02 85 27 c2 20 20 78 53 a9 0d 00 20 18 00 28
>3a3ce8		60 c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00
>3a3cf8		a9 00 00 85 02 20 37 5a c2 20 a5 40 85 00 a5 42
>3a3d08		85 02 80 d0 c2 20 a5 00 85 40 a5 02 85 42 a9 00
>3a3d18		4c 85 00 a9 00 00 85 02 20 d8 08 c2 20 a5 40 85
>3a3d28		00 a5 42 85 02 80 ad 08 20 3b 21 e2 20 a7 00 f0
>3a3d38		47 c9 3a f0 43 20 e2 04 90 40 20 15 54 90 3b 20
>3a3d48		01 15 20 14 00 e2 20 a0 00 00 97 16 a9 00 c8 97
>3a3d58		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a3d68		27 20 78 53 20 3b 21 a7 00 f0 0d c9 3a f0 09 c9
>3a3d78		2c d0 07 20 1a 21 80 b0 28 60 08 c2 20 48 a9 00
>3a3d88		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3d98		00 20 5b 1e e2 20 dc d4 08 08 20 09 1d 20 51 06
>3a3da8		e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20 a5 25
>3a3db8		85 a5 e2 20 a9 2c 85 37 20 5c 22 90 41 20 1a 21
>3a3dc8		20 09 1d 20 0d 07 c2 20 a5 23 85 55 e2 20 a9 2c
>3a3dd8		85 37 20 5c 22 90 27 20 1a 21 20 09 1d 20 0d 07
>3a3de8		c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 5c 22 90
>3a3df8		0d 20 1a 21 20 09 1d 20 0d 07 c2 20 a4 23 a6 59
>3a3e08		a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 5f 21 28
>3a3e18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3e28		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a3e38		08 e2 20 20 3b 21 20 15 54 90 64 a9 8f 20 27 22
>3a3e48		a9 01 20 28 1a a2 01 00 a9 00 8f 00 4d 00 20 09
>3a3e58		1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>3a3e68		4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 3b 21 a7 00
>3a3e78		c9 2c f0 25 c9 90 d0 27 20 1a 21 20 93 66 c2 20
>3a3e88		a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea 09 80
>3a3e98		85 ea 85 27 20 78 53 28 60 20 1a 21 4c 56 3e 08
>3a3ea8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a3eb8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a3ec8		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a3ed8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 20 3b
>3a3ee8		21 e2 20 a7 00 f0 28 c9 3a f0 24 20 e2 04 90 21
>3a3ef8		20 15 54 90 1c 20 38 3f 20 78 53 20 3b 21 a7 00
>3a3f08		f0 0d c9 3a f0 09 c9 2c d0 07 20 1a 21 80 cf 28
>3a3f18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3f28		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a3f38		08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5 1a 85
>3a3f48		44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85 00 a5
>3a3f58		3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7 00 f0
>3a3f68		53 c9 3a f0 4f c9 2c d0 03 20 1a 21 20 3b 21 a7
>3a3f78		00 c9 22 f0 4e 20 fb 04 b0 4e 08 c2 20 48 a9 00
>3a3f88		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3f98		00 20 5b 1e e2 20 dc d4 08 c2 20 a9 00 00 85 1a
>3a3fa8		a9 36 00 85 1c 18 a5 1a 69 04 00 85 00 a5 1c 69
>3a3fb8		00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37 20 71
>3a3fc8		21 80 a9 20 15 1c 80 03 20 37 5a c2 20 a5 00 85
>3a3fd8		38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5 44 85
>3a3fe8		1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28 60 20
>3a3ff8		5f 21 60 64 38 64 3a 64 3c 64 3e 60 20 24 00 60
>3a4008		20 09 1d c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9
>3a4018		2c d0 22 20 1a 21 20 09 1d c2 20 a5 26 d0 35 68
>3a4028		85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0 02 00
>3a4038		a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4048		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a4058		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4068		a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a4078		dc d4 08 20 09 1d c2 20 a5 25 48 a5 23 48 e2 20
>3a4088		a7 00 c9 2c d0 19 20 1a 21 20 09 1d c2 20 a5 25
>3a4098		d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08 60 08
>3a40a8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a40b8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a40c8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a40d8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 09 1d
>3a40e8		c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 1f
>3a40f8		20 1a 21 20 09 1d e2 20 a5 24 d0 32 c2 20 a5 25
>3a4108		d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08 60 08
>3a4118		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4128		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a4138		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4148		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20
>3a4158		48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2
>3a4168		20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a7
>3a4178		00 f0 05 20 1a 21 80 f7 28 60 08 28 60 08 28 60
>3a4188		08 28 60 08 c2 20 a5 1c 20 22 1e a5 1a 20 22 1e
>3a4198		a5 02 48 a5 00 48 20 5f 21 a5 02 20 22 1e a5 00
>3a41a8		20 22 1e 68 85 00 68 85 02 20 3b 21 20 15 54 b0
>3a41b8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a41c8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a41d8		e2 20 a5 ea 20 39 1e a5 e9 20 39 1e c2 20 a5 e7
>3a41e8		20 22 1e 20 3b 21 e2 20 a7 00 c9 8a d0 6a a5 ea
>3a41f8		c9 00 f0 04 c9 01 f0 00 20 1a 21 20 09 1d 20 78
>3a4208		53 e2 20 a9 9c 20 27 22 20 09 1d c2 20 a5 27 20
>3a4218		22 1e a5 25 20 22 1e a5 23 20 22 1e e2 20 a9 9d
>3a4228		85 37 20 5c 22 90 1b 20 1a 21 20 09 1d e2 20 a5
>3a4238		27 20 22 1e c2 20 a5 25 20 22 1e a5 23 20 22 1e
>3a4248		80 14 c2 20 a9 00 00 20 22 1e a9 00 00 20 22 1e
>3a4258		a9 01 00 20 22 1e 28 60 08 c2 20 48 a9 00 08 5b
>3a4268		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a4278		5b 1e e2 20 dc d4 08 08 8b 08 e2 20 48 a9 00 48
>3a4288		ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4
>3a4298		33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2 20 85
>3a42a8		e9 b9 10 00 85 ea c2 20 5a 20 16 52 7a c2 20 b9
>3a42b8		00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00 85 2d
>3a42c8		c2 20 5a 20 d8 27 20 78 53 7a c2 20 b9 06 00 85
>3a42d8		29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2 20 b9
>3a42e8		02 00 30 0a 20 61 2a 20 1a 06 f0 28 80 08 20 21
>3a42f8		2a 20 1a 06 f0 1e c2 20 b9 12 00 85 00 b9 14 00
>3a4308		85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20 a9 03
>3a4318		85 dc 80 17 a2 23 08 20 e9 19 c2 20 18 a5 33 69
>3a4328		1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60 08 a5
>3a4338		1a 48 a5 1c 48 20 3b 21 20 d8 08 a5 23 f0 26 20
>3a4348		1b 24 90 42 e2 20 a9 02 85 dc 20 5f 21 c2 20 68
>3a4358		20 22 1e 68 20 22 1e a5 02 20 22 1e a5 00 20 22
>3a4368		1e e6 31 28 60 68 68 08 c2 20 48 a9 00 08 5b 68
>3a4378		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a4388		1e e2 20 dc d4 08 68 68 08 c2 20 48 a9 00 08 5b
>3a4398		68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20
>3a43a8		5b 1e e2 20 dc d4 08 08 c2 30 a5 31 f0 1e 20 44
>3a43b8		1e 85 00 20 44 1e 85 02 20 44 1e 85 1a 20 44 1e
>3a43c8		85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2 20 48
>3a43d8		a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00 c2 20
>3a43e8		29 ff 00 20 5b 1e e2 20 dc d4 08 08 20 09 1d 20
>3a43f8		1a 06 f0 1c e2 20 a9 97 20 27 22 20 d8 08 20 1a
>3a4408		06 f0 12 20 1b 24 90 2c e2 20 a9 02 85 dc 80 03
>3a4418		20 5f 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4428		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a4438		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4448		a9 06 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a4458		dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20 3b 21
>3a4468		20 d8 08 a5 23 f0 0d 20 1b 24 90 27 e2 20 a9 02
>3a4478		85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4488		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a4498		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a44a8		06 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a44b8		d4 08 20 8b 19 20 ab 10 20 15 51 60 08 a7 00 10
>3a44c8		03 20 1a 21 20 15 54 b0 03 4c 3b 45 e2 20 a5 ea
>3a44d8		48 a5 e9 48 a5 e8 48 a5 e7 48 20 7b 22 c9 8f d0
>3a44e8		0e a9 8f 20 27 22 a9 00 8f 00 4d 00 20 0a 1b 20
>3a44f8		3b 21 e2 20 a7 00 c9 8a f0 03 4c 3b 45 20 1a 21
>3a4508		20 09 1d 68 85 e7 68 85 e8 68 85 e9 68 85 ea 29
>3a4518		80 f0 1b 20 88 51 90 3a c2 20 a0 09 00 b7 08 85
>3a4528		c0 e2 20 c8 c8 b7 08 85 c2 20 7f 68 80 03 20 78
>3a4538		53 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4548		02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a4558		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05
>3a4568		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a4578		08 08 e2 20 20 7b 22 c9 00 f0 6d 20 09 1d e2 20
>3a4588		a5 27 c9 ff f0 1b c9 02 d0 05 20 f5 45 80 12 c9
>3a4598		00 d0 05 20 13 46 80 09 c9 01 d0 4f 20 26 46 80
>3a45a8		00 20 3b 21 a7 00 f0 40 c9 3a f0 3c c9 2c f0 23
>3a45b8		c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a45c8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a45d8		dc d4 08 a9 09 20 18 00 20 1a 21 20 3b 21 a7 00
>3a45e8		f0 09 c9 3a f0 05 80 93 20 d7 03 28 60 08 8b 08
>3a45f8		c2 20 48 a9 00 08 5b 68 28 e2 20 a0 00 00 b7 23
>3a4608		f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 60
>3a4618		15 a5 16 85 23 a5 18 85 25 20 f5 45 28 60 08 20
>3a4628		de 5d c2 20 a5 16 85 23 a5 18 85 25 20 f5 45 28
>3a4638		60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97
>3a4648		16 c8 a5 b5 29 0f 18 69 30 97 16 c8 28 60 e2 20
>3a4658		a9 8f 20 27 22 08 20 09 1d e2 20 c2 10 af 0e 08
>3a4668		af 09 08 8f 0e 08 af 20 01 15 a0 00 00 af 06 08
>3a4678		af 20 39 46 a9 2f 97 16 c8 af 09 08 af 20 39 46
>3a4688		a9 2f 97 16 c8 af 0f 08 af 20 39 46 af 0a 08 af
>3a4698		20 39 46 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>3a46a8		af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a46b8		27 28 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 08
>3a46c8		20 09 1d e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08
>3a46d8		af 20 01 15 a0 00 00 af 04 08 af 29 7f 20 39 46
>3a46e8		a9 3a 97 16 c8 af 02 08 af 20 39 46 a9 3a 97 16
>3a46f8		c8 af 00 08 af 20 39 46 a9 00 97 16 af 0e 08 af
>3a4708		29 f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25
>3a4718		e2 20 a9 02 85 27 28 e2 20 20 1a 21 60 e2 20 a9
>3a4728		8f 20 27 22 08 20 09 1d e2 20 a9 01 85 27 a9 03
>3a4738		8f 00 e2 af a9 01 8f 01 e2 af c2 30 af 84 e8 af
>3a4748		8f 08 e2 af af 84 e8 af 29 ff 7f 8f 0a e2 af a9
>3a4758		ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea
>3a4768		af 08 e2 af 85 23 af 0a e2 af 85 25 28 e2 20 20
>3a4778		1a 21 60 e2 20 a9 8f 20 27 22 08 20 09 1d 22 28
>3a4788		10 00 e2 20 85 23 64 24 64 25 64 26 a9 00 85 27
>3a4798		28 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 08 c2
>3a47a8		30 20 09 1d 20 e3 06 c2 20 a5 25 48 a5 23 48 20
>3a47b8		3b 21 e2 20 a7 00 c9 2c f0 03 4c 16 48 20 1a 21
>3a47c8		20 09 1d 20 0d 07 c2 20 a5 23 48 20 3b 21 e2 20
>3a47d8		a7 00 c9 2c f0 03 4c 16 48 20 1a 21 20 09 1d 20
>3a47e8		0d 07 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>3a47f8		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>3a4808		a9 02 85 27 20 59 17 e2 20 20 1a 21 28 60 08 c2
>3a4818		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a4828		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20
>3a4838		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a4848		20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f
>3a4858		20 27 22 08 c2 30 20 09 1d e2 20 a5 27 c9 02 f0
>3a4868		03 4c d8 48 c2 20 a5 25 48 a5 23 48 20 3b 21 e2
>3a4878		20 a7 00 c9 2c f0 03 4c f7 48 20 1a 21 20 09 1d
>3a4888		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>3a4898		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>3a48a8		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>3a48b8		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>3a48c8		e2 20 a9 00 85 2d 20 59 17 e2 20 20 1a 21 28 60
>3a48d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a48e8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>3a48f8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4908		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a4918		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4928		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9
>3a4938		8f 20 27 22 08 c2 30 20 09 1d e2 20 a5 27 c9 02
>3a4948		f0 03 4c a1 49 c2 20 a5 25 48 a5 23 48 20 3b 21
>3a4958		e2 20 a7 00 c9 2c f0 03 4c c0 49 20 1a 21 20 09
>3a4968		1d e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>3a4978		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>3a4988		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>3a4998		59 17 e2 20 20 1a 21 28 60 08 c2 20 48 a9 00 08
>3a49a8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a49b8		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a49c8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a49d8		5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a49e8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a49f8		1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d
>3a4a08		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>3a4a18		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 d8 08 a5
>3a4a28		40 85 00 a5 42 85 02 e2 20 20 1a 21 60 08 c2 20
>3a4a38		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a4a48		20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f
>3a4a58		20 27 22 08 20 09 1d c2 10 e2 20 a5 27 c9 00 d0
>3a4a68		1a 20 60 15 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>3a4a78		a9 02 85 27 28 e2 20 20 1a 21 60 08 c2 20 48 a9
>3a4a88		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4a98		ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27
>3a4aa8		22 08 20 09 1d 20 e3 06 c2 20 64 0c 64 0e e2 30
>3a4ab8		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>3a4ac8		23 20 0c 05 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>3a4ad8		06 0c 26 0e 06 0c 26 0e e2 20 20 2d 05 05 0c 85
>3a4ae8		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>3a4af8		a9 00 85 27 28 e2 20 20 1a 21 60 e2 20 a9 8f 20
>3a4b08		27 22 08 20 09 1d 20 51 06 20 01 15 e2 30 a0 ff
>3a4b18		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 3a 97 16
>3a4b28		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 16
>3a4b38		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>3a4b48		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>3a4b58		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>3a4b68		02 85 27 28 e2 20 20 1a 21 60 08 c2 20 48 a9 00
>3a4b78		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4b88		00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22
>3a4b98		20 09 1d e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>3a4ba8		c2 10 a6 23 20 ed 15 ab 84 23 c2 20 64 25 e2 20
>3a4bb8		a9 00 85 27 e2 20 20 1a 21 60 08 c2 20 48 a9 00
>3a4bc8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4bd8		00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22
>3a4be8		20 09 1d 20 51 06 e2 20 a5 25 c9 b0 90 10 c9 f0
>3a4bf8		b0 0c 8b 48 ab a6 23 22 44 11 00 ab 80 04 e2 20
>3a4c08		a7 23 85 23 64 24 64 25 64 26 e2 20 20 1a 21 60
>3a4c18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a4c28		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2
>3a4c38		20 a9 8f 20 27 22 20 09 1d 20 51 06 e2 20 a5 25
>3a4c48		c9 b0 90 22 c9 f0 b0 1e 8b 48 ab a6 23 da 22 44
>3a4c58		11 00 85 0c fa e8 da 22 44 11 00 85 0d fa e8 22
>3a4c68		44 11 00 ab 80 0d c2 20 a7 23 85 0c e2 20 a0 02
>3a4c78		00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2 20 20
>3a4c88		1a 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4c98		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a4ca8		d4 08 e2 20 a9 8f 20 27 22 20 09 1d 20 51 06 e2
>3a4cb8		20 a5 25 c9 b0 90 1d c9 f0 b0 19 8b 48 ab a6 23
>3a4cc8		da 22 44 11 00 85 23 fa e8 22 44 11 00 85 24 ab
>3a4cd8		c2 20 80 06 c2 20 a7 23 85 23 64 25 e2 20 20 1a
>3a4ce8		21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a4cf8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a4d08		08 e2 20 a9 8f 20 27 22 20 09 1d e2 20 a5 27 c9
>3a4d18		00 d0 24 20 01 15 a5 23 87 16 a9 00 a0 01 00 97
>3a4d28		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a4d38		27 e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68
>3a4d48		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a4d58		1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d
>3a4d68		e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64 24 64 25
>3a4d78		64 26 a9 00 85 27 e2 20 20 1a 21 60 08 c2 20 48
>3a4d88		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a4d98		29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20
>3a4da8		27 22 20 09 1d e2 20 a5 27 c9 00 d0 39 e2 20 a5
>3a4db8		26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 01 15
>3a4dc8		a4 23 e2 20 a9 00 97 16 88 30 07 a9 20 97 16 88
>3a4dd8		10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85 25
>3a4de8		e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4df8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a4e08		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4e18		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a4e28		20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d e2 20
>3a4e38		a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e
>3a4e48		a5 24 d0 4a c2 10 20 01 15 a4 23 e2 20 a9 00 97
>3a4e58		16 88 30 07 a9 09 97 16 88 10 fb a9 02 85 27 c2
>3a4e68		20 a5 16 85 23 a5 18 85 25 e2 20 20 1a 21 60 08
>3a4e78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a4e88		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>3a4e98		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4ea8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9
>3a4eb8		8f 20 27 22 20 09 1d e2 20 a5 27 c9 00 f0 23 c9
>3a4ec8		01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4ed8		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a4ee8		d4 08 c2 20 a5 25 10 21 49 ff ff 85 25 a5 23 49
>3a4ef8		ff ff 18 69 01 00 85 23 a5 25 69 00 00 85 25 80
>3a4f08		08 e2 20 a5 26 29 7f 85 26 e2 20 20 1a 21 60 e2
>3a4f18		20 a9 8f 20 27 22 20 09 1d e2 20 a5 27 c9 00 d0
>3a4f28		25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9 00 00
>3a4f38		85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25 85 23
>3a4f48		e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4f58		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a4f68		e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d 20
>3a4f78		51 06 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20
>3a4f88		09 1d 20 bf 07 20 3e 62 e2 20 20 1a 21 60 e2 20
>3a4f98		a9 8f 20 27 22 20 09 1d 20 bf 07 20 6d 62 e2 20
>3a4fa8		20 1a 21 60 e2 20 a9 8f 20 27 22 20 09 1d 20 bf
>3a4fb8		07 20 9c 62 e2 20 20 1a 21 60 e2 20 a9 8f 20 27
>3a4fc8		22 20 09 1d 20 bf 07 20 ca 62 e2 20 20 1a 21 60
>3a4fd8		e2 20 a9 8f 20 27 22 20 09 1d 20 bf 07 20 f3 63
>3a4fe8		e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20 09 1d
>3a4ff8		20 bf 07 20 c9 63 e2 20 20 1a 21 60 e2 20 a9 8f
>3a5008		20 27 22 20 09 1d 20 bf 07 20 15 64 e2 20 20 1a
>3a5018		21 60 e2 20 a9 8f 20 27 22 20 09 1d 20 bf 07 20
>3a5028		a9 64 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20
>3a5038		09 1d 20 bf 07 20 2b 65 e2 20 20 1a 21 60 00 ea
>3a5048		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2
>3a5058		20 a9 00 00 85 d9 e2 20 a9 36 85 db c2 30 a9 00
>3a5068		00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04 00 97 d9
>3a5078		20 f0 20 2b 28 60 8b 08 c2 20 a9 00 00 85 1a a9
>3a5088		36 00 85 1c 20 f0 20 20 d0 23 28 ab 60 08 c2 20
>3a5098		64 55 a9 ff 7f 85 59 20 d7 03 20 7b 22 29 ff 00
>3a50a8		c9 00 00 f0 2c c9 81 00 f0 1a 20 3b 21 20 d8 08
>3a50b8		a5 23 85 55 20 7b 22 29 ff 00 c9 00 00 f0 12 c9
>3a50c8		81 00 d0 2a 20 27 22 20 3b 21 20 d8 08 a5 23 85
>3a50d8		59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48 20 8b 18
>3a50e8		68 85 00 68 85 02 68 85 1a 68 85 1c 28 60 08 c2
>3a50f8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a5108		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 08 c2
>3a5118		20 48 a9 00 08 5b 68 28 c2 20 64 e4 64 e7 e2 20
>3a5128		64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04 00 85 e1
>3a5138		e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0 1a c9 3a
>3a5148		b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b
>3a5158		b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10 a0
>3a5168		00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08 00 d0 f2
>3a5178		b7 e7 20 56 05 20 42 51 b0 03 28 38 60 28 18 60
>3a5188		08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7 f0 0b 20
>3a5198		56 05 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00
>3a51a8		c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9 c2 20 a5
>3a51b8		e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20 a5 e6 85
>3a51c8		0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69
>3a51d8		01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 62 51 b0
>3a51e8		2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08
>3a51f8		85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08
>3a5208		e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08 20
>3a5218		88 51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a5228		a9 05 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>3a5238		dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8 c8 b7 08
>3a5248		85 25 e2 20 a0 00 00 b7 08 85 27 28 60 08 c2 20
>3a5258		18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69 00 85 0a
>3a5268		c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08 c2 20 48
>3a5278		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a5288		29 ff 00 20 5b 1e e2 20 dc d4 08 c2 20 a5 e1 85
>3a5298		c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1 e2 20 a5
>3a52a8		0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0 33 a5 ea
>3a52b8		c9 00 d0 05 20 51 06 80 2f c9 01 d0 05 20 bf 07
>3a52c8		80 26 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a52d8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a52e8		08 c9 02 d0 03 20 f3 16 c2 10 20 55 52 c2 30 18
>3a52f8		a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00 85 0a a0
>3a5308		00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7
>3a5318		e7 f0 10 20 56 05 20 42 51 90 08 97 08 c8 c0 08
>3a5328		00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5 25 c8 c8
>3a5338		97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20 a5 e6 97
>3a5348		c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6 e2 20 a0
>3a5358		00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2 20 a5 23
>3a5368		85 c0 e2 20 a5 25 85 c2 20 0f 13 20 24 13 80 ea
>3a5378		08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05 20 88 51
>3a5388		b0 05 20 ad 52 80 4e e2 20 a5 27 c5 ea f0 33 a5
>3a5398		ea c9 00 d0 05 20 51 06 80 2c c9 01 d0 05 20 bf
>3a53a8		07 80 23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a53b8		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a53c8		d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23 97 08 c8
>3a53d8		c8 a5 25 97 08 28 60 20 f3 16 a0 09 00 b7 08 85
>3a53e8		c0 c8 c8 e2 20 b7 08 85 c2 20 0f 13 20 43 13 e2
>3a53f8		20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23 85 c0 e2
>3a5408		20 a5 25 85 c2 20 0f 13 20 24 13 80 b9 08 20 3b
>3a5418		21 e2 20 a7 00 20 e2 04 90 42 c2 20 a5 00 85 e7
>3a5428		e2 20 a5 02 85 e9 20 1a 21 a7 00 f0 0d c9 24 f0
>3a5438		14 c9 25 f0 09 20 42 51 b0 ec a9 01 80 0c 20 1a
>3a5448		21 a9 00 80 05 20 1a 21 a9 02 85 ea 20 7b 22 c9
>3a5458		8f d0 06 a5 ea 09 80 85 ea 28 38 60 28 18 60 08
>3a5468		c2 20 18 a5 23 65 29 85 23 a5 25 65 2b 85 25 28
>3a5478		60 08 c2 20 38 a5 23 e5 29 85 23 a5 25 e5 2b 85
>3a5488		25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2 30 a9 00
>3a5498		00 83 01 83 03 83 05 83 07 83 09 a5 25 10 18 a9
>3a54a8		00 80 83 01 a5 25 49 ff ff 85 25 a5 23 49 ff ff
>3a54b8		1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01 49 00 80
>3a54c8		83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff ff 1a 85
>3a54d8		29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a a5 23 8f
>3a54e8		00 01 00 a5 29 8f 02 01 00 af 04 01 00 83 03 af
>3a54f8		06 01 00 83 05 a5 25 8f 00 01 00 a5 29 8f 02 01
>3a5508		00 18 af 04 01 00 63 05 83 05 af 06 01 00 63 07
>3a5518		83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01 00 18 af
>3a5528		04 01 00 63 05 83 05 af 06 01 00 63 07 83 07 a3
>3a5538		07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a5548		28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a5558		1e e2 20 dc d4 08 c2 30 a3 01 10 16 a3 05 49 ff
>3a5568		ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05 a3 05 1a
>3a5578		83 05 a3 03 85 23 a3 05 85 25 c2 20 3b 18 69 0a
>3a5588		00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25 e5 2b 50
>3a5598		03 49 00 80 30 06 64 23 64 25 80 07 a9 ff ff 85
>3a55a8		23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0c a5 25
>3a55b8		c5 2b d0 06 64 23 64 25 80 16 a5 29 c5 23 a5 2b
>3a55c8		e5 25 50 03 49 00 80 10 eb a9 ff ff 85 23 85 25
>3a55d8		28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29 c5 23 d0
>3a55e8		09 a9 ff ff 85 23 85 25 80 04 64 23 64 25 28 60
>3a55f8		08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23 d0 06 64
>3a5608		23 64 25 80 07 a9 ff ff 85 23 85 25 28 60 08 c2
>3a5618		20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff
>3a5628		85 23 85 25 80 13 a5 29 c5 23 a5 2b e5 25 50 03
>3a5638		49 00 80 30 e8 64 23 64 25 28 60 08 c2 20 a5 23
>3a5648		c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85
>3a5658		25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80
>3a5668		30 e8 64 23 64 25 28 60 08 c2 20 8f 12 01 00 8a
>3a5678		8f 10 01 00 af 16 01 00 aa af 14 01 00 28 60 08
>3a5688		e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2 af c2 20
>3a5698		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9 00 00 8f
>3a56a8		0c e2 af a9 00 01 8f 0e e2 af ea ea ea ea ea ea
>3a56b8		af 08 e2 af 85 23 af 0a e2 af 85 25 a9 01 00 85
>3a56c8		27 28 60 08 e2 20 a9 40 8f 00 e2 af 80 09 08 e2
>3a56d8		20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5
>3a56e8		23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2
>3a56f8		af a5 2b 8f 0e e2 af ea ea ea e2 20 af 06 e2 af
>3a5708		29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af
>3a5718		85 25 28 60 20 b7 57 80 f9 08 e2 20 a9 01 8f 01
>3a5728		e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af
>3a5738		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>3a5748		e2 af ea ea ea e2 20 af 05 e2 af 29 17 d0 10 c2
>3a5758		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>3a5768		b7 57 80 f9 08 e2 20 a9 00 8f 01 e2 af a9 00 8f
>3a5778		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>3a5788		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>3a5798		e2 20 af 04 e2 af 29 07 d0 10 c2 20 af 08 e2 af
>3a57a8		85 23 af 0a e2 af 85 25 28 60 20 b7 57 80 f9 e2
>3a57b8		20 89 01 f0 20 00 08 c2 20 48 a9 00 08 5b 68 28
>3a57c8		e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a57d8		e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48 a9 00 08
>3a57e8		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>3a57f8		20 5b 1e e2 20 dc d4 08 89 04 f0 1f 08 c2 20 48
>3a5808		a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08 00 c2 20
>3a5818		29 ff 00 20 5b 1e e2 20 dc d4 08 60 08 e2 20 a9
>3a5828		00 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9 00 a0
>3a5838		8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f 08 e2
>3a5848		af a5 25 8f 0a e2 af ea ea ea e2 20 af 04 e2 af
>3a5858		89 07 f0 01 00 c2 20 af 08 e2 af 85 23 af 0a e2
>3a5868		af 85 25 28 60 08 e2 20 a9 01 8f 01 e2 af a9 02
>3a5878		8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00
>3a5888		8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>3a5898		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 28
>3a58a8		60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f d0 03 28
>3a58b8		38 60 28 18 60 08 e2 20 38 e9 30 20 7a 05 c2 20
>3a58c8		29 ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 28
>3a58d8		60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9 61 90 04
>3a58e8		c9 67 90 0a c9 41 90 04 c9 47 90 07 80 31 38 e9
>3a58f8		57 80 08 38 e9 37 80 03 38 e9 30 06 23 26 24 26
>3a5908		25 26 26 06 23 26 24 26 25 26 26 06 23 26 24 26
>3a5918		25 26 26 06 23 26 24 26 25 26 26 05 23 85 23 28
>3a5928		60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80 0f c2 20
>3a5938		06 23 26 25 80 07 c2 20 38 26 23 26 25 28 60 08
>3a5948		e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00 8f 01 e2
>3a5958		af 80 15 e2 20 a9 03 8f 01 e2 af ea ea ea 80 62
>3a5968		e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f 00 e2 af
>3a5978		c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f 0a e2 af
>3a5988		c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af
>3a5998		ea ea ea ca f0 2c af 08 e2 af 8f 0c 08 00 af 0a
>3a59a8		e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2 af c2 20
>3a59b8		af 0c 08 00 8f 08 e2 af af 0e 08 00 8f 0a e2 af
>3a59c8		80 be c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>3a59d8		e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d 85 23 a5
>3a59e8		5f 85 25 20 f9 5b c2 20 a5 23 85 29 a5 25 85 2b
>3a59f8		c2 20 a5 59 85 23 a5 5b 85 25 20 21 57 c2 20 a5
>3a5a08		55 85 29 a5 57 85 2b 20 d6 56 c2 20 a5 23 85 29
>3a5a18		a5 25 85 2b 20 47 59 20 6c 57 c2 20 a5 65 f0 07
>3a5a28		a5 25 09 00 80 85 25 e2 20 a9 01 85 27 28 60 5a
>3a5a38		08 c2 30 64 23 64 25 64 55 64 57 64 65 64 59 64
>3a5a48		5b a9 01 00 85 5d 64 5f 64 61 64 63 64 69 e2 20
>3a5a58		a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b c9 26 f0
>3a5a68		3a 20 fb 04 90 03 82 ac 00 08 c2 20 48 a9 00 08
>3a5a78		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a5a88		20 5b 1e e2 20 dc d4 08 a9 01 85 65 c8 b7 00 c9
>3a5a98		26 f0 08 20 fb 04 90 d1 82 7a 00 c8 b7 00 c9 68
>3a5aa8		f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0 48 80 b9
>3a5ab8		c8 b7 00 20 0c 05 b0 02 80 af 20 d9 58 c8 b7 00
>3a5ac8		20 0c 05 b0 f5 e2 20 a5 65 f0 11 c2 20 38 a9 00
>3a5ad8		00 e5 23 85 23 a9 00 00 e5 25 85 25 e2 20 a9 00
>3a5ae8		85 27 c2 20 18 98 65 00 85 00 a5 02 69 00 00 85
>3a5af8		02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07 c9 31 f0
>3a5b08		03 82 65 ff 20 29 59 c8 b7 00 c9 30 f0 f6 c9 31
>3a5b18		f0 f2 82 b0 ff 20 bd 58 c8 b7 00 c9 2e f0 08 20
>3a5b28		fb 04 b0 f1 82 9e ff c2 20 20 f9 5b c2 20 a5 23
>3a5b38		85 55 a5 25 85 57 64 23 64 25 e2 20 80 36 20 bd
>3a5b48		58 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f 02 01 00
>3a5b58		af 04 01 00 85 5f a5 5d 8f 00 01 00 a9 0a 00 8f
>3a5b68		02 01 00 af 04 01 00 85 5d af 06 01 00 18 65 5f
>3a5b78		85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45 f0 20 20
>3a5b88		fb 04 b0 ba c2 20 20 f9 5b c2 20 a5 23 85 59 a5
>3a5b98		25 85 5b 64 23 64 25 20 e0 59 e2 20 82 43 ff c2
>3a5ba8		20 20 f9 5b c2 20 a5 23 85 59 a5 25 85 5b 64 23
>3a5bb8		64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d f0 08 20
>3a5bc8		fb 04 b0 12 82 a2 fe a9 01 85 69 c8 b7 00 20 fb
>3a5bd8		04 b0 03 82 93 fe 20 bd 58 c8 b7 00 20 fb 04 b0
>3a5be8		f5 c2 20 a5 23 85 61 a5 25 85 63 20 e0 59 82 f1
>3a5bf8		fe 08 20 87 56 28 60 08 c2 20 a9 f6 5e 85 29 a9
>3a5c08		3a 00 85 2b e2 20 a9 01 85 2d c2 20 20 d2 5c c9
>3a5c18		ff ff d0 0c a9 00 00 8d 23 08 8d 25 08 82 a1 00
>3a5c28		f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26 08 29 80
>3a5c38		83 01 ad 25 08 2a ad 26 08 2a 83 02 a9 00 83 06
>3a5c48		ad 25 08 09 80 83 05 ad 24 08 83 04 ad 23 08 83
>3a5c58		03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48 a9 00 08
>3a5c68		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>3a5c78		20 5b 1e e2 20 dc d4 08 c2 20 a3 05 4a 83 05 a3
>3a5c88		03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96 f0 02 80
>3a5c98		e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18 69 01 00
>3a5ca8		8d 23 08 a3 05 49 ff ff 69 00 00 8d 25 08 80 0c
>3a5cb8		c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2 20 68 68
>3a5cc8		68 e2 20 a9 00 8d 27 08 28 60 da 08 c2 20 a5 25
>3a5cd8		48 a5 23 48 20 cb 56 20 a9 58 b0 11 a5 25 89 00
>3a5ce8		80 d0 05 a9 01 00 80 08 a9 ff ff 80 03 a9 00 00
>3a5cf8		fa 86 23 fa 86 25 28 fa 60 08 c2 30 20 d2 5c c9
>3a5d08		ff ff d0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2
>3a5d18		30 20 d2 5c c9 01 00 d0 05 20 2d 06 80 03 20 3f
>3a5d28		06 28 60 08 c2 30 20 d2 5c c9 00 00 d0 05 20 2d
>3a5d38		06 80 03 20 3f 06 28 60 08 c2 30 20 d2 5c c9 01
>3a5d48		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>3a5d58		20 d2 5c c9 ff ff f0 05 20 2d 06 80 03 20 3f 06
>3a5d68		28 60 08 c2 30 20 d2 5c c9 00 00 f0 05 20 2d 06
>3a5d78		80 03 20 3f 06 28 60 08 e2 20 97 23 c8 a9 00 97
>3a5d88		23 28 60 da 08 e2 20 c9 80 90 0a 48 a9 2d 20 7f
>3a5d98		5d 68 49 ff 1a c2 30 29 ff 00 c9 64 00 90 0e a2
>3a5da8		64 00 20 70 56 18 69 30 00 20 7f 5d 8a a2 0a 00
>3a5db8		20 70 56 18 69 30 00 20 7f 5d 8a 18 69 30 00 20
>3a5dc8		7f 5d 28 fa 60 08 e2 20 c2 10 a0 00 00 b7 23 f0
>3a5dd8		03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00 00 f4 00
>3a5de8		00 f4 00 00 20 a9 58 90 19 20 01 15 e2 20 a0 00
>3a5df8		00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00 97 16 82
>3a5e08		ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9 01 83 01
>3a5e18		c2 20 a9 00 00 83 03 c2 20 af f2 5e 3a 85 29 af
>3a5e28		f4 5e 3a 85 2b 20 d2 5c 89 00 80 d0 12 20 6d 58
>3a5e38		a3 03 1a 83 03 20 d2 5c c9 ff ff f0 12 80 ee 20
>3a5e48		24 58 a3 03 3a 83 03 20 d2 5c c9 ff ff f0 f0 e2
>3a5e58		30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3 05 aa f0
>3a5e68		0f a5 25 09 80 85 25 46 25 66 24 66 23 ca d0 f7
>3a5e78		c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0 11 c2 20
>3a5e88		38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25 20
>3a5e98		60 15 c2 20 a5 16 85 23 a5 18 85 25 20 cd 5d e2
>3a5ea8		20 c8 a9 00 97 23 88 88 b7 23 c8 97 23 c0 02 00
>3a5eb8		d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05 83 06 f0
>3a5ec8		19 20 cd 5d a9 45 20 7f 5d a3 06 20 8b 5d 80 0a
>3a5ed8		c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27
>3a5ee8		c2 20 3b 18 69 06 00 1b 28 60 00 50 c3 47 00 00
>3a5ef8		80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9 48 8f 00
>3a5f08		e2 af c2 20 bd 00 00 8f 08 e2 af bd 02 00 8f 0a
>3a5f18		e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af c2
>3a5f28		20 af 23 08 00 8f 0c e2 af af 25 08 00 8f 0e e2
>3a5f38		af ea ea ea af 08 e2 af 48 af 0a e2 af 8f 0a e2
>3a5f48		af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2 af c2 20
>3a5f58		bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2 af ea ea
>3a5f68		ea 88 f0 14 af 08 e2 af 48 af 0a e2 af 8f 0a e2
>3a5f78		af 68 8f 08 e2 af 80 9b af 08 e2 af 8f 23 08 00
>3a5f88		af 0a e2 af 8f 25 08 00 60 e2 20 a9 00 8f 00 e2
>3a5f98		af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af 8f
>3a5fa8		0c e2 af af 25 08 00 8f 0a e2 af 8f 0e e2 af ea
>3a5fb8		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 e2
>3a5fc8		20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 a5
>3a5fd8		23 8f 0c e2 af af 25 08 00 8f 0e e2 af af 1b 66
>3a5fe8		3a 8f 08 e2 af af 1d 66 3a 8f 0a e2 af ea ea ea
>3a5ff8		af 08 e2 af 85 23 af 0a e2 af 85 25 60 a2 00 00
>3a6008		a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08 e2 af
>3a6018		a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af
>3a6028		0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10 09 29
>3a6038		7f 85 26 a9 01 48 80 03 a9 00 48 a9 40 8f 00 e2
>3a6048		af a9 02 8f 01 e2 af c2 30 af 83 66 3a 85 29 8f
>3a6058		0c e2 af af 85 66 3a 85 2b 8f 0e e2 af 20 05 60
>3a6068		e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5 25 8f
>3a6078		0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>3a6088		29 ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5 23 df
>3a6098		87 66 3a a5 25 ff 89 66 3a 90 2c bf 83 66 3a 8f
>3a60a8		08 e2 af bf 85 66 3a 8f 0a e2 af a5 23 8f 0c e2
>3a60b8		af a5 25 8f 0e e2 af ea ea ea af 08 e2 af 85 23
>3a60c8		af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8 e0 0c
>3a60d8		00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20 91 5f 8b
>3a60e8		e2 20 a9 3a 48 ab c2 20 a2 c3 65 5a a0 05 00 20
>3a60f8		02 5f 7a a9 01 00 8f 27 08 00 ab fa 68 28 60 08
>3a6108		c2 30 48 da a5 23 85 29 a5 25 85 2b 20 91 5f 8b
>3a6118		e2 20 a9 3a 48 ab c2 20 a2 d7 65 5a a0 05 00 20
>3a6128		02 5f 7a ab 20 6c 57 fa 68 28 60 08 c2 30 48 da
>3a6138		a5 23 85 29 a5 25 85 2b 20 91 5f 8b e2 20 a9 3a
>3a6148		48 ab c2 20 a2 eb 65 5a a0 05 00 20 02 5f 7a ab
>3a6158		20 6c 57 fa 68 28 60 08 c2 30 48 da e2 20 a9 40
>3a6168		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>3a6178		e2 af a5 25 8f 0a e2 af af 1b 66 3a 8f 0c e2 af
>3a6188		af 1d 66 3a 8f 0e e2 af ea ea ea af 08 e2 af 85
>3a6198		0c af 0a e2 af 85 0e e2 20 a9 48 8f 00 e2 af c2
>3a61a8		20 ea ea ea af 08 e2 af 85 10 af 0a e2 af 85 12
>3a61b8		e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f 08 e2 af
>3a61c8		a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5 12 8f 0e
>3a61d8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>3a61e8		25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01 e2 af c2
>3a61f8		20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea
>3a6208		af 08 e2 af 85 29 af 0a e2 af 85 2b 20 91 5f 8b
>3a6218		e2 20 a9 3a 48 ab c2 20 a2 ff 65 5a a0 08 00 20
>3a6228		02 5f 7a a9 01 00 8f 27 08 00 8f 2d 08 00 20 6c
>3a6238		57 ab fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e
>3a6248		60 da 8a 29 01 00 d0 05 20 07 61 80 03 20 df 60
>3a6258		fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80 85 26 c2
>3a6268		20 fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e 60
>3a6278		da 8a 29 01 00 d0 05 20 df 60 80 03 20 07 61 fa
>3a6288		8a 29 02 00 f0 0a e2 20 a5 26 09 80 85 26 c2 20
>3a6298		fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e 60 20
>3a62a8		33 61 8a 29 01 00 f0 03 20 c7 5f 8a e2 20 4a 4a
>3a62b8		69 00 29 01 f0 06 a5 26 09 80 85 26 c2 20 fa 68
>3a62c8		28 60 08 c2 30 48 da 5a a5 25 10 1f 08 c2 20 48
>3a62d8		a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20
>3a62e8		29 ff 00 20 5b 1e e2 20 dc d4 08 c2 30 a5 23 cf
>3a62f8		1b 66 3a a5 25 cf 1d 66 3a b0 04 20 c7 5f 18 a9
>3a6308		00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af a9 01 8f
>3a6318		01 e2 af c2 20 af 73 66 3a 85 29 8f 0c e2 af af
>3a6328		75 66 3a 85 2b 8f 0e e2 af 20 05 60 8a f0 07 0a
>3a6338		0a 0a 0a 0a 0a a8 af 77 66 3a 85 29 8f 0c e2 af
>3a6348		af 79 66 3a 85 2b 8f 0e e2 af 20 05 60 8a f0 0b
>3a6358		0a 0a 0a 0a 85 29 18 98 65 29 a8 af 7b 66 3a 85
>3a6368		29 8f 0c e2 af af 7d 66 3a 85 2b 8f 0e e2 af 20
>3a6378		05 60 8a f0 09 0a 0a 85 29 18 98 65 29 a8 af 7f
>3a6388		66 3a 85 29 8f 0c e2 af af 81 66 3a 85 2b 8f 0e
>3a6398		e2 af 20 05 60 86 29 18 98 65 29 a8 20 5f 61 a5
>3a63a8		23 85 29 a5 25 85 2b 98 85 23 64 25 20 f9 5b 20
>3a63b8		d6 56 68 d0 07 a5 25 09 00 80 85 25 7a fa 68 28
>3a63c8		60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 91
>3a63d8		5f 8b e2 20 a9 3a 48 ab c2 20 a2 23 66 a0 05 00
>3a63e8		20 02 5f ab 20 6c 57 fa 68 28 60 08 c2 30 48 da
>3a63f8		20 c9 63 af 8b 66 3a 85 29 af 8d 66 3a 85 2b 20
>3a6408		cb 56 a5 25 49 00 80 85 25 fa 68 28 60 08 c2 30
>3a6418		48 da a5 23 85 29 a5 25 85 2b 20 91 5f 8b e2 20
>3a6428		a9 3a 48 ab c2 20 a2 37 66 a0 05 00 20 02 5f ab
>3a6438		20 6c 57 fa 68 28 60 c2 20 a5 23 85 29 a5 25 85
>3a6448		2b c2 20 af 1b 66 3a 85 23 af 1d 66 3a 85 25 8a
>3a6458		f0 30 4a aa 90 03 20 6c 57 c2 20 a5 25 48 a5 23
>3a6468		48 c2 20 a5 29 85 23 a5 2b 85 25 20 91 5f c2 20
>3a6478		a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85 25
>3a6488		80 cd 60 08 c2 30 48 da 8b e2 20 a9 3a 48 ab c2
>3a6498		20 a2 4b 66 5a a0 0a 00 20 02 5f 7a ab fa 68 28
>3a64a8		60 08 c2 30 48 da 5a a5 23 05 25 d0 10 c2 20 af
>3a64b8		1b 66 3a 85 23 af 1d 66 3a 85 25 80 61 a5 25 29
>3a64c8		00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2 20 a5 25
>3a64d8		48 a5 23 48 20 51 06 a6 23 20 bf 07 c2 20 a5 23
>3a64e8		85 29 a5 25 85 2b c2 20 68 85 23 68 85 25 20 cb
>3a64f8		56 20 8b 64 c2 20 a5 25 48 a5 23 48 c2 20 af 7f
>3a6508		66 3a 85 23 af 81 66 3a 85 25 20 3f 64 c2 20 68
>3a6518		85 29 68 85 2b 20 6c 57 98 f0 03 20 c7 5f 7a fa
>3a6528		68 28 60 08 c2 30 48 a5 25 10 1f 08 c2 20 48 a9
>3a6538		00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20 29
>3a6548		ff 00 20 5b 1e e2 20 dc d4 08 c2 30 05 23 f0 68
>3a6558		c2 20 af 1f 66 3a 85 29 af 21 66 3a 85 2b e2 20
>3a6568		a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23 48 20 21
>3a6578		57 a5 25 c5 2b d0 09 a5 23 45 29 29 f8 ff f0 30
>3a6588		20 d6 56 c2 20 af 1f 66 3a 85 29 af 21 66 3a 85
>3a6598		2b 20 21 57 c2 20 a5 23 85 29 a5 25 85 2b c2 20
>3a65a8		68 85 23 68 85 25 c2 20 a5 25 48 a5 23 48 80 be
>3a65b8		c2 20 68 85 29 68 85 2b 68 28 60 01 0d d0 37 61
>3a65c8		0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00 80 3f 1d
>3a65d8		ef 38 36 01 0d 50 b9 89 88 08 3c ab aa 2a be 00
>3a65e8		00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e ab
>3a65f8		aa aa 3e 00 00 80 3f 89 88 88 3d d9 89 9d 3d 8c
>3a6608		2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc 4c 3e ab
>3a6618		aa aa 3e 00 00 80 3f 00 00 00 40 8e e3 f8 3c 6e
>3a6628		db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00 80 3f 39
>3a6638		8e e3 3d 25 49 12 be cd cc 4c 3e ab aa aa be 00
>3a6648		00 80 3f 1d ef 38 36 01 0d d0 37 01 0d 50 39 61
>3a6658		0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa 2a 3e 00
>3a6668		00 00 3f 00 00 80 3f 00 00 80 3f c1 2c a1 6d 5f
>3a6678		97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f c9 40 db
>3a6688		0f 49 40 db 0f c9 3f db 0f 49 3f 08 20 0f 13 c2
>3a6698		20 a9 01 00 85 23 a9 00 00 85 25 e2 20 af 00 4d
>3a66a8		00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00
>3a66b8		4d 00 85 29 a9 00 00 85 2b e2 20 a9 00 85 2d c2
>3a66c8		20 20 4f 28 e8 e8 88 d0 e3 c2 20 a9 04 00 85 29
>3a66d8		a9 00 00 85 2b 20 4f 28 e2 20 af 00 4d 00 85 0c
>3a66e8		a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c 85 23 a5
>3a66f8		25 69 00 00 85 25 d0 29 e2 20 a5 ea 09 80 a6 23
>3a6708		20 d3 10 e2 20 af 00 4d 00 87 c0 a0 01 00 a2 00
>3a6718		00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23 e8 c8 80
>3a6728		f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a6738		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a6748		e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5
>3a6758		c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c
>3a6768		e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08
>3a6778		c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a6788		0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>3a6798		64 08 64 0a e2 20 af 00 4d 00 85 8f 64 90 a2 01
>3a67a8		00 e2 20 a7 c0 c5 8f f0 22 a6 8f 00 08 c2 20 48
>3a67b8		a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20
>3a67c8		29 ff 00 20 5b 1e e2 20 dc d4 08 c9 01 f0 3a a0
>3a67d8		01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25 64 26
>3a67e8		b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68
>3a67f8		20 4f 28 c2 20 18 a5 08 65 23 85 08 a5 0a 65 25
>3a6808		85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00
>3a6818		85 90 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a
>3a6828		69 00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2
>3a6838		20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09 c2 20
>3a6848		a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08 e2 20
>3a6858		a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b
>3a6868		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a6878		5b 1e e2 20 dc d4 08 08 20 0f 13 e2 20 a0 00 00
>3a6888		b7 c3 29 7f c9 02 d0 05 20 e3 06 80 10 c9 00 d0
>3a6898		05 20 51 06 80 07 c9 01 d0 2b 20 bf 07 a5 27 48
>3a68a8		c2 20 a5 25 48 a5 23 48 20 95 67 68 85 23 68 85
>3a68b8		25 e2 20 68 85 27 c2 20 a5 23 87 08 a0 02 00 a5
>3a68c8		25 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a68d8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>3a68e8		20 dc d4 08 08 20 0f 13 f4 00 00 f4 00 00 e2 20
>3a68f8		48 20 95 67 e2 20 68 c2 20 68 68 c2 20 a7 08 85
>3a6908		23 a0 02 00 b7 08 85 25 e2 20 a0 00 00 b7 c3 29
>3a6918		7f 85 27 20 63 18 28 60 da 0b 08 08 c2 20 48 a9
>3a6928		00 08 5b 68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f
>3a6938		00 d0 0c a5 23 89 00 fc d0 05 20 13 46 80 2e a2
>3a6948		0a 00 46 25 66 23 ca d0 f9 20 13 46 e2 20 a9 4b
>3a6958		20 18 00 c2 20 80 16 a2 14 00 46 25 66 23 ca d0
>3a6968		f9 20 13 46 e2 20 a9 4d 20 18 00 c2 20 28 2b fa
>3a6978		60 0b 08 c2 30 a9 00 00 8f b6 08 00 8f b8 08 00
>3a6988		e2 20 20 7b 22 c9 00 f0 08 20 09 1d 20 e3 06 80
>3a6998		11 c2 20 a9 00 00 85 23 85 25 e2 20 a9 02 85 27
>3a69a8		c2 20 20 da 6a 22 08 11 00 b0 22 20 8b 6b 08 c2
>3a69b8		20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d3 08 00
>3a69c8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 d7 03
>3a69d8		08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7
>3a69e8		18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00
>3a69f8		b7 18 89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00
>3a6a08		29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18
>3a6a18		00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7
>3a6a28		18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0
>3a6a38		0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f
>3a6a48		23 08 00 c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f
>3a6a58		27 08 00 20 20 69 a9 09 20 18 00 a0 0b 00 b7 18
>3a6a68		89 08 d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0
>3a6a78		05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea
>3a6a88		20 d7 03 20 ee 03 22 0c 11 00 90 03 82 41 ff 20
>3a6a98		8b 6b 08 c2 20 48 a9 00 08 5b 68 28 20 5f 21 28
>3a6aa8		2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f
>3a6ab8		c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20
>3a6ac8		f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00
>3a6ad8		80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30
>3a6ae8		a9 73 f2 85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9
>3a6af8		00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81
>3a6b08		f2 3a a9 3a 00 8f 83 f2 3a af 23 08 00 8f 75 f2
>3a6b18		3a af 25 08 00 8f 77 f2 3a 28 2b 60 08 c2 30 20
>3a6b28		3b 21 20 09 1d 20 e3 06 20 da 6a e2 20 a9 2c 85
>3a6b38		37 20 5c 22 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f
>3a6b48		56 03 00 80 17 20 1a 21 20 09 1d 20 51 06 c2 20
>3a6b58		a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18 11 00
>3a6b68		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>3a6b78		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a6b88		08 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a6b98		08 e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00
>3a6ba8		85 23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea
>3a6bb8		a9 3a 85 e9 c2 20 a9 ee 6b 85 e7 20 78 53 e2 20
>3a6bc8		af 20 03 00 85 23 a9 00 85 24 85 25 85 26 a9 00
>3a6bd8		85 27 85 ea a9 3a 85 e9 c2 20 a9 f6 6b 85 e7 20
>3a6be8		78 53 28 2b ab 60 44 4f 53 53 54 41 54 00 42 49
>3a6bf8		4f 53 53 54 41 54 00 08 c2 30 20 3b 21 20 09 1d
>3a6c08		20 e3 06 a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9
>3a6c18		ff ff 8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25
>3a6c28		20 5b 1e 20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28
>3a6c38		e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a6c48		e2 20 dc d4 08 20 5b 1e 28 60 08 c2 30 20 3b 21
>3a6c58		20 09 1d 20 e3 06 20 da 6a a9 00 00 8f 54 03 00
>3a6c68		a9 01 00 8f 56 03 00 20 49 50 22 18 11 00 b0 22
>3a6c78		20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6c88		11 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>3a6c98		d4 08 20 8b 6b c2 20 a2 12 00 18 bf 73 f2 3a 69
>3a6ca8		00 00 85 92 bf 75 f2 3a 69 01 00 85 94 e2 20 a9
>3a6cb8		00 87 92 c2 20 a9 00 00 85 7a a9 01 00 85 7c a2
>3a6cc8		00 00 e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04
>3a6cd8		9d 00 4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20
>3a6ce8		a9 00 9d 00 4f 20 82 27 c2 20 e6 7a d0 d1 e6 7c
>3a6cf8		80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 82
>3a6d08		27 28 60 08 c2 30 20 3b 21 20 09 1d 20 e3 06 20
>3a6d18		da 6a e2 20 a9 2c 20 27 22 c2 20 20 09 1d 20 51
>3a6d28		06 a5 23 8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9
>3a6d38		2c c2 20 20 27 22 20 09 1d 20 51 06 a5 23 8f 58
>3a6d48		03 00 a5 25 8f 5a 03 00 22 1c 11 00 b0 22 20 8b
>3a6d58		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>3a6d68		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>3a6d78		20 8b 6b 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20
>3a6d88		b7 23 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08
>3a6d98		c2 30 20 3b 21 20 09 1d 20 e3 06 20 da 6a a9 00
>3a6da8		00 85 a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9
>3a6db8		00 00 85 ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55
>3a6dc8		85 57 a9 ff ff 85 59 a9 ff 7f 85 5b 20 8b 18 e2
>3a6dd8		20 a9 80 85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03
>3a6de8		00 65 ab 8f 58 03 00 a9 01 00 8f 52 03 00 69 00
>3a6df8		00 8f 5a 03 00 22 1c 11 00 b0 22 20 8b 6b 08 c2
>3a6e08		20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00
>3a6e18		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 8b 6b
>3a6e28		28 60 08 c2 30 20 3b 21 20 09 1d 20 e3 06 20 7d
>3a6e38		6d 22 04 11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00
>3a6e48		08 5b 68 28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff
>3a6e58		00 20 5b 1e e2 20 dc d4 08 20 8b 6b 28 60 da 08
>3a6e68		e2 20 c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20
>3a6e78		90 13 a2 00 00 df 91 6e 3a f0 0a e8 e0 0f 00 d0
>3a6e88		f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c
>3a6e98		3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08
>3a6ea8		5b 68 28 c2 30 20 09 1d 20 e3 06 20 7d 6d 22 10
>3a6eb8		11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b 68
>3a6ec8		28 e2 20 a9 14 8f d3 08 00 c2 20 29 ff 00 20 5b
>3a6ed8		1e e2 20 dc d4 08 e2 20 a9 2c 20 27 22 c2 20 20
>3a6ee8		09 1d 20 e3 06 ad 38 03 85 08 ad 3a 03 85 0a e2
>3a6ef8		20 a2 00 00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00
>3a6f08		00 a0 00 00 b7 23 f0 76 c9 2e f0 39 22 66 6e 3a
>3a6f18		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a6f28		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>3a6f38		08 95 7e c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e
>3a6f48		f0 03 c8 80 f5 c8 a2 08 00 b7 23 f0 31 22 66 6e
>3a6f58		3a b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28
>3a6f68		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>3a6f78		e2 20 dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00
>3a6f88		00 a0 00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22
>3a6f98		14 11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b
>3a6fa8		68 28 e2 20 a9 15 8f d3 08 00 c2 20 29 ff 00 20
>3a6fb8		5b 1e e2 20 dc d4 08 20 8b 6b 28 60 08 08 c2 20
>3a6fc8		48 a9 00 08 5b 68 28 c2 30 20 09 1d 20 e3 06 a5
>3a6fd8		23 8f 64 03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20
>3a6fe8		27 22 c2 20 20 09 1d 20 e3 06 a5 23 8f 68 03 00
>3a6ff8		a5 25 8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20 48
>3a7008		a9 00 08 5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20
>3a7018		29 ff 00 20 5b 1e e2 20 dc d4 08 28 60 5c e2 89
>3a7028		3a 5c 33 88 3a 5c e3 89 3a 5c 5f 79 3a 5c bc 79
>3a7038		3a 5c ef 78 3a 5c 75 78 3a 5c f2 7d 3a 5c e0 74
>3a7048		3a 5c 0d 78 3a 5c c8 77 3a 5c 52 77 3a 5c f1 88
>3a7058		3a 5c ee 75 3a 5c 3e 74 3a 5c 6c 89 3a 5c 1c 75
>3a7068		3a 5c e5 89 3a 5c de 89 3a 5c 0b 77 3a 5c e6 89
>3a7078		3a 18 fb 58 5c 80 70 3a c2 30 22 3e 74 3a 20 08
>3a7088		00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 65
>3a7098		05 ab 22 29 70 3a 22 31 70 3a 80 e2 08 8b e2 20
>3a70a8		a9 3a 48 ab c2 10 a2 b7 70 20 64 04 ab 28 6b 41
>3a70b8		20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>3a70c8		6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>3a70d8		20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>3a70e8		72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>3a70f8		65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>3a7108		0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>3a7118		63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>3a7128		0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>3a7138		5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>3a7148		61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>3a7158		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>3a7168		3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>3a7178		20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>3a7188		61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>3a7198		73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>3a71a8		75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>3a71b8		69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>3a71c8		20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a71d8		61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a71e8		20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>3a71f8		74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a7208		48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>3a7218		3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>3a7228		20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>3a7238		73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>3a7248		20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>3a7258		22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>3a7268		69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>3a7278		65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>3a7288		76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a7298		0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>3a72a8		20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>3a72b8		65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>3a72c8		20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>3a72d8		3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>3a72e8		4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>3a72f8		20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a7308		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a7318		53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>3a7328		20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>3a7338		3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>3a7348		3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a7358		74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>3a7368		20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>3a7378		68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>3a7388		79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>3a7398		65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>3a73a8		61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>3a73b8		73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>3a73c8		74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>3a73d8		20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>3a73e8		5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>3a73f8		20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a7408		0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>3a7418		68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>3a7428		0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a7438		a5 0d 85 4e 28 6b 20 3d 02 08 e2 20 48 a9 3a 48
>3a7448		ab 68 28 a2 23 8a 20 64 04 e2 20 a9 3b 20 18 00
>3a7458		a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68
>3a7468		28 a0 03 00 a2 42 02 20 e7 03 c2 20 a9 20 00 20
>3a7478		18 00 af 44 02 00 20 74 04 a9 20 00 20 18 00 af
>3a7488		46 02 00 20 74 04 a9 20 00 20 18 00 af 48 02 00
>3a7498		20 74 04 a9 20 00 20 18 00 af 4a 02 00 20 74 04
>3a74a8		a9 20 00 20 18 00 af 4e 02 00 20 8e 04 a9 20 00
>3a74b8		20 18 00 a9 20 00 20 18 00 af 4c 02 00 20 74 04
>3a74c8		a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 3c 87 3a
>3a74d8		28 20 d7 03 20 d7 03 6b 08 0b 08 c2 20 48 a9 48
>3a74e8		08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13
>3a74f8		d0 0e c2 20 a5 0d c5 11 d0 06 20 d7 03 2b 28 6b
>3a7508		c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00
>3a7518		85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>3a7528		e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d
>3a7538		e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d
>3a7548		c5 11 d0 03 4c d3 75 c2 20 18 a5 0d 69 01 00 85
>3a7558		0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69 01
>3a7568		00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20 38
>3a7578		a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20
>3a7588		18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17 e2
>3a7598		20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5
>3a75a8		0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11 e2
>3a75b8		20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00 85
>3a75c8		15 e2 20 a5 16 e9 00 85 16 80 c4 20 d7 03 2b 28
>3a75d8		6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03
>3a75e8		28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 48 08
>3a75f8		5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0
>3a7608		16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2
>3a7618		20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5
>3a7628		0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2
>3a7638		20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5 32
>3a7648		85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 d9 75 3a
>3a7658		b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69 01 00 85
>3a7668		19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db a9
>3a7678		00 99 7e 08 a9 3e 20 18 00 a9 20 20 18 00 e2 20
>3a7688		a5 34 20 8e 04 a9 3a 20 18 00 c2 20 a5 32 20 74
>3a7698		04 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00 a7
>3a76a8		32 20 8e 04 22 1b 87 3a e2 20 c6 47 d0 ea a9 20
>3a76b8		20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48 ab
>3a76c8		68 28 a2 7e 08 20 64 04 20 d7 03 20 ee 03 a5 34
>3a76d8		c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 d7 03 2b
>3a76e8		ab 28 6b 4c 3f 76 08 8d 92 08 e2 20 bd 00 00 99
>3a76f8		00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08 80
>3a7708		eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28
>3a7718		08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85 32
>3a7728		a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59 08 a0 7e
>3a7738		08 22 ee 76 3a a0 00 00 b9 7e 08 87 32 22 1b 87
>3a7748		3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2 20
>3a7758		48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a7768		28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0 7e
>3a7778		08 22 ee 76 3a c2 20 a5 0d 85 32 a5 0f 85 34 c2
>3a7788		20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20 a0
>3a7798		00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2 20
>3a77a8		a5 32 85 4a a5 34 85 4c 22 c5 81 3a e2 20 a9 20
>3a77b8		20 18 00 22 1b 87 3a 80 c6 20 d7 03 ab 2b 28 6b
>3a77c8		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 0e
>3a77d8		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>3a77e8		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>3a77f8		00 5b e2 20 a9 3a 48 a9 78 48 a9 08 48 4c 3f 78
>3a7808		ea 5c 04 00 3a 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a7818		20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f 8f
>3a7828		42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a 02
>3a7838		00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab a9
>3a7848		5c 8f a2 08 00 af 42 02 00 8f a5 08 00 af 41 02
>3a7858		00 8f a4 08 00 af 40 02 00 8f a3 08 00 af 4f 02
>3a7868		00 48 c2 20 af 44 02 00 28 5c a2 08 00 08 0b 8b
>3a7878		08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48 a9 48
>3a7888		08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9 03
>3a7898		d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00 85
>3a78a8		47 80 08 a2 e7 89 20 64 04 80 35 a5 0d 85 4a a5
>3a78b8		0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22 c5
>3a78c8		81 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00 85
>3a78d8		4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 d7 03
>3a78e8		20 d7 03 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9 00
>3a78f8		48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a7908		a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9 01
>3a7918		f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46 02
>3a7928		c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d 8e
>3a7938		4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06 f0
>3a7948		12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6 29
>3a7958		8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48
>3a7968		08 5b 68 28 e2 20 c2 10 a2 00 00 bf 54 8a 3a f0
>3a7978		18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf 95 79
>3a7988		3a 8f 2f 08 00 22 b9 79 3a ab 2b 28 6b 35 70 3d
>3a7998		70 41 70 45 70 49 70 4d 70 51 70 55 70 59 70 5d
>3a79a8		70 39 70 61 70 65 70 69 70 2b 74 6d 70 71 70 a4
>3a79b8		70 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48 08 5b 68
>3a79c8		28 e2 20 a5 31 c9 02 b0 03 4c 62 7b c2 20 a5 0d
>3a79d8		85 32 a5 0f 85 34 c2 20 22 64 7d 3a c9 ff ff f0
>3a79e8		10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f 80
>3a79f8		4c 20 d7 03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10
>3a7a08		a2 99 7b 20 64 04 4c 62 7b 20 d7 03 08 e2 20 48
>3a7a18		a9 3a 48 ab 68 28 c2 10 a2 a8 7b 20 64 04 4c 62
>3a7a28		7b e2 20 22 9a 7d 3a c9 ff f0 de 85 4f c9 03 f0
>3a7a38		62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 92 7c
>3a7a48		3a b0 03 4c 2b 7b 87 32 22 1b 87 3a 08 e2 20 48
>3a7a58		a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85 58
>3a7a68		e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0 7c
>3a7a78		29 3f c9 02 d0 03 4c 59 7b c2 20 29 ff 00 aa e2
>3a7a88		20 bf 61 86 3a c9 03 f0 57 c9 02 f0 5f c9 01 f0
>3a7a98		67 80 71 c2 20 a5 54 c9 d9 82 f0 26 c9 3d 83 f0
>3a7aa8		2a c9 bd 82 f0 1c c9 c1 82 f0 17 c9 c9 82 f0 12
>3a7ab8		c9 b1 82 f0 0d c9 c5 82 f0 08 c9 ad 82 f0 03 4c
>3a7ac8		45 7a e2 20 a9 12 85 4f 4c 45 7a e2 20 a9 16 85
>3a7ad8		4f 4c 45 7a 22 d5 7b 3a 90 60 c9 02 f0 0e 80 18
>3a7ae8		a0 02 00 b9 98 08 97 56 22 1b 87 3a a0 01 00 b9
>3a7af8		98 08 97 56 22 1b 87 3a a0 00 00 b9 98 08 97 56
>3a7b08		22 1b 87 3a e2 20 a9 41 20 18 00 a9 20 20 18 00
>3a7b18		a6 32 86 4a a6 34 86 4c 22 c5 81 3a a9 20 20 18
>3a7b28		00 80 37 20 d7 03 08 e2 20 48 a9 3a 48 ab 68 28
>3a7b38		c2 10 a2 66 7b 20 64 04 80 20 20 d7 03 08 e2 20
>3a7b48		48 a9 3a 48 ab 68 28 c2 10 a2 b6 7b 20 64 04 80
>3a7b58		09 a5 4f 29 c0 d0 95 4c 00 7b 2b ab 28 6b 41 64
>3a7b68		64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e 6f
>3a7b78		74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74 68
>3a7b88		61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e 0d
>3a7b98		00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d 00
>3a7ba8		42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52 65
>3a7bb8		6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69 73
>3a7bc8		20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b 08
>3a7bd8		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f c9 12 f0
>3a7be8		0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5 32
>3a7bf8		69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50 e5
>3a7c08		4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16 f0
>3a7c18		1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01 80
>3a7c28		26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18 a5
>3a7c38		51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04 a9
>3a7c48		02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10 da
>3a7c58		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2 00 00 df
>3a7c68		00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20 06
>3a7c78		50 26 52 06 50 26 52 06 50 26 52 06 50 26 52 e2
>3a7c88		20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20 48
>3a7c98		a9 48 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28
>3a7ca8		e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00 00
>3a7cb8		bd 5f 83 f0 1b c5 54 d0 0d e2 20 b9 61 85 29 3f
>3a7cc8		c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b 6b
>3a7cd8		18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>3a7ce8		e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11 c9
>3a7cf8		64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80 eb
>3a7d08		b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7 36
>3a7d18		c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0 0c
>3a7d28		c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 53 7c 3a
>3a7d38		80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28 a0 00 00
>3a7d48		e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18 65
>3a7d58		03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2 20
>3a7d68		48 a9 48 08 5b 68 28 c2 20 a5 11 85 36 a5 13 85
>3a7d78		38 a9 ed 81 85 03 a9 3a 00 85 05 22 dc 7c 3a b0
>3a7d88		0d 22 3a 7d 3a a7 03 d0 f2 a9 ff ff 80 02 a5 03
>3a7d98		2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 c2 30
>3a7da8		a5 15 85 36 a5 17 85 38 a9 79 86 85 03 a9 3a 00
>3a7db8		85 05 22 dc 7c 3a b0 22 22 3a 7d 3a c2 20 18 a5
>3a7dc8		03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20 a7
>3a7dd8		03 d0 df c2 20 a9 ff ff 80 0d 22 3a 7d 3a e2 20
>3a7de8		a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2 20
>3a7df8		48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5
>3a7e08		31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00
>3a7e18		01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85
>3a7e28		32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00
>3a7e38		01 85 11 e2 20 a5 34 69 00 85 13 22 5e 7e 3a e2
>3a7e48		20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20
>3a7e58		d7 03 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9
>3a7e68		20 20 18 00 08 c2 20 48 a9 7a 08 5b 68 28 c2 20
>3a7e78		a5 00 85 18 e2 20 a5 02 85 1a 22 c5 81 3a a9 20
>3a7e88		20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20 a5
>3a7e98		02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48
>3a7ea8		a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0 0c 48 a7
>3a7eb8		18 0f 96 08 00 8f 96 08 00 68 c2 20 29 ff 00 0a
>3a7ec8		aa bf 5f 83 3a aa 22 3f 81 3a e2 20 a7 00 aa bf
>3a7ed8		61 85 3a 22 1b 87 3a 22 ec 7e 3a 20 d7 03 20 ee
>3a7ee8		03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c
>3a7ef8		fa 7e 2a 7f 45 7f 4c 7f 71 7f 78 7f 93 7f b5 7f
>3a7f08		c6 7f 03 80 0b 80 1c 80 2d 80 34 80 59 80 86 80
>3a7f18		f2 7f d7 7f a4 7f 79 80 83 80 97 80 c6 80 74 80
>3a7f28		d7 80 a9 28 20 18 00 22 ee 80 3a a9 2c 20 18 00
>3a7f38		a9 58 20 18 00 a9 29 20 18 00 4c e8 80 22 ee 80
>3a7f48		3a 4c e8 80 e2 20 48 a9 23 20 18 00 68 29 c0 c9
>3a7f58		00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 f8 80 3a 4c
>3a7f68		e8 80 22 ee 80 3a 4c e8 80 22 f8 80 3a 4c e8 80
>3a7f78		a9 28 20 18 00 22 ee 80 3a a9 29 20 18 00 a9 2c
>3a7f88		20 18 00 a9 59 20 18 00 4c e8 80 22 ee 80 3a a9
>3a7f98		2c 20 18 00 a9 58 20 18 00 4c e8 80 22 ee 80 3a
>3a7fa8		a9 2c 20 18 00 a9 59 20 18 00 4c e8 80 22 f8 80
>3a7fb8		3a a9 2c 20 18 00 a9 59 20 18 00 4c e8 80 22 f8
>3a7fc8		80 3a a9 2c 20 18 00 a9 58 20 18 00 4c e8 80 a9
>3a7fd8		28 20 18 00 22 f8 80 3a a9 2c 20 18 00 a9 58 20
>3a7fe8		18 00 a9 29 20 18 00 4c e8 80 a9 28 20 18 00 22
>3a7ff8		ee 80 3a a9 29 20 18 00 4c e8 80 a9 41 20 18 00
>3a8008		4c ec 80 22 ee 80 3a a9 2c 20 18 00 a9 53 20 18
>3a8018		00 4c e8 80 a9 5b 20 18 00 22 ee 80 3a a9 5d 20
>3a8028		18 00 4c e8 80 22 06 81 3a 4c ec 80 a9 28 20 18
>3a8038		00 22 ee 80 3a a9 2c 20 18 00 a9 53 20 18 00 a9
>3a8048		29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c e8
>3a8058		80 a9 5b 20 18 00 22 ee 80 3a a9 5d 20 18 00 a9
>3a8068		2c 20 18 00 a9 59 20 18 00 4c e8 80 a0 02 00 80
>3a8078		03 a0 01 00 22 6c 81 3a 4c ec 80 4c ec 80 22 06
>3a8088		81 3a a9 2c 20 18 00 a9 58 20 18 00 4c ec 80 a9
>3a8098		23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00 22
>3a80a8		e7 03 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0
>3a80b8		01 00 22 e7 03 3a ab 22 1b 87 3a 4c e8 80 a9 28
>3a80c8		20 18 00 22 f8 80 3a a9 29 20 18 00 4c e8 80 a9
>3a80d8		5b 20 18 00 22 f8 80 3a a9 5d 20 18 00 4c e8 80
>3a80e8		22 1b 87 3a 28 6b 08 e2 20 a7 00 20 8e 04 28 6b
>3a80f8		08 c2 30 a7 00 20 74 04 22 1b 87 3a 28 6b 08 8b
>3a8108		0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68 28 08 e2
>3a8118		20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00 99
>3a8128		92 08 22 1b 87 3a c8 c0 03 00 d0 f1 22 c5 81 3a
>3a8138		c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20
>3a8148		48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd 00
>3a8158		00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20 18
>3a8168		00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08 5b 68 28
>3a8178		e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19 64
>3a8188		1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18 22
>3a8198		1b 87 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff 85
>3a81a8		1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65 1a
>3a81b8		85 1a 22 c5 81 3a 22 1b 87 3a 2b 28 6b 08 0b c2
>3a81c8		20 48 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4c
>3a81d8		20 8e 04 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 74
>3a81e8		04 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f 52
>3a81f8		00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d 50
>3a8208		00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53 52
>3a8218		00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45 43
>3a8228		00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54 59
>3a8238		00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52 4b
>3a8248		00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48 50
>3a8258		00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45 59
>3a8268		00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c 43
>3a8278		00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59 41
>3a8288		00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58 41
>3a8298		00 54 58 53 00 54 41 58 00 54 53 58 00 44 45 58
>3a82a8		00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56 43
>3a82b8		00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e 45
>3a82c8		00 42 45 51 00 54 53 42 00 54 52 42 00 53 54 5a
>3a82d8		00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48 58
>3a82e8		00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48 4b
>3a82f8		00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41 49
>3a8308		00 58 42 41 00 54 43 53 00 54 53 43 00 54 43 44
>3a8318		00 54 44 43 00 54 58 59 00 54 59 58 00 53 54 50
>3a8328		00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44 4d
>3a8338		00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45 50
>3a8348		00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45 41
>3a8358		00 4a 4d 4c 00 00 00 45 82 ed 81 2d 83 ed 81 cd
>3a8368		82 ed 81 0d 82 ed 81 55 82 ed 81 0d 82 ed 82 cd
>3a8378		82 ed 81 0d 82 ed 81 ad 82 ed 81 ed 81 ed 81 d1
>3a8388		82 ed 81 0d 82 ed 81 75 82 ed 81 29 82 0d 83 d1
>3a8398		82 ed 81 0d 82 ed 81 49 82 f1 81 31 83 f1 81 2d
>3a83a8		82 f1 81 11 82 f1 81 59 82 f1 81 11 82 f1 82 2d
>3a83b8		82 f1 81 11 82 f1 81 b1 82 f1 81 f1 81 f1 81 2d
>3a83c8		82 f1 81 11 82 f1 81 79 82 f1 81 25 82 11 83 2d
>3a83d8		82 f1 81 11 82 f1 81 4d 82 f5 81 35 83 f5 81 49
>3a83e8		83 f5 81 15 82 f5 81 5d 82 f5 81 15 82 f5 82 31
>3a83f8		82 f5 81 15 82 f5 81 b5 82 f5 81 f5 81 f5 81 4d
>3a8408		83 f5 81 15 82 f5 81 7d 82 f5 81 dd 82 15 83 59
>3a8418		83 f5 81 15 82 f5 81 51 82 f9 81 39 83 f9 81 d5
>3a8428		82 f9 81 19 82 f9 81 61 82 f9 81 19 82 f9 82 31
>3a8438		82 f9 81 19 82 f9 81 b9 82 f9 81 f9 81 f9 81 d5
>3a8448		82 f9 81 19 82 f9 81 81 82 f9 81 e1 82 19 83 31
>3a8458		82 f9 81 19 82 f9 81 d9 82 fd 81 3d 83 fd 81 35
>3a8468		82 fd 81 1d 82 fd 81 65 82 2d 82 95 82 fd 82 35
>3a8478		82 fd 81 1d 82 fd 81 bd 82 fd 81 fd 81 fd 81 35
>3a8488		82 fd 81 1d 82 fd 81 85 82 fd 81 99 82 1d 83 d5
>3a8498		82 fd 81 d5 82 fd 81 39 82 01 82 21 82 01 82 39
>3a84a8		82 01 82 21 82 01 82 69 82 01 82 9d 82 01 83 39
>3a84b8		82 01 82 21 82 01 82 c1 82 01 82 01 82 01 82 39
>3a84c8		82 01 82 21 82 01 82 89 82 01 82 a1 82 21 83 39
>3a84d8		82 01 82 21 82 01 82 3d 82 05 82 41 83 05 82 3d
>3a84e8		82 05 82 25 82 05 82 6d 82 05 82 a5 82 05 83 3d
>3a84f8		82 05 82 25 82 05 82 c5 82 05 82 05 82 05 82 51
>3a8508		83 05 82 25 82 05 82 8d 82 05 82 e5 82 25 83 59
>3a8518		83 05 82 25 82 05 82 41 82 09 82 45 83 09 82 41
>3a8528		82 09 82 29 82 09 82 71 82 09 82 a9 82 09 83 41
>3a8538		82 09 82 29 82 09 82 c9 82 09 82 09 82 09 82 55
>3a8548		83 09 82 29 82 09 82 91 82 09 82 e9 82 29 83 49
>3a8558		82 09 82 29 82 09 82 00 00 13 00 02 09 01 01 01
>3a8568		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05 05
>3a8578		0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01 01
>3a8588		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05 05
>3a8598		0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01 01
>3a85a8		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05 05
>3a85b8		0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01 01
>3a85c8		0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05 05
>3a85d8		0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01 01
>3a85e8		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>3a85f8		0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01 01
>3a8608		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>3a8618		0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01 01
>3a8628		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05 05
>3a8638		0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01 01
>3a8648		0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05 05
>3a8658		0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01 02
>3a8668		02 00 01 01 03 01 01 03 01 02 01 01 00 02 02 02
>3a8678		02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e 64
>3a8688		64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00 07
>3a8698		64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64 64
>3a86a8		2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00 09
>3a86b8		64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c 23
>3a86c8		64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29 2c
>3a86d8		59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64 64
>3a86e8		64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64 64
>3a86f8		29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64 64
>3a8708		5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00
>3a8718		0a 00 00 08 c2 20 48 18 af 7a 08 00 69 01 00 8f
>3a8728		7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c 08 00 c2
>3a8738		20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0 08
>3a8748		48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68 ca
>3a8758		d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a8768		20 a7 32 f0 0a c9 20 d0 06 22 1b 87 3a 80 f2 6b
>3a8778		08 08 c2 20 48 a9 48 08 5b 68 28 22 1b 87 3a 22
>3a8788		5d 87 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa a5
>3a8798		32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22 f0
>3a87a8		06 22 1b 87 3a 80 f2 a9 00 87 32 22 1b 87 3a e6
>3a87b8		31 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 64
>3a87c8		4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20
>3a87d8		0c 05 90 0e 22 53 7c 3a a9 01 85 4a 22 1b 87 3a
>3a87e8		80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa
>3a87f8		a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20 64
>3a8808		31 22 5d 87 3a a7 32 f0 21 c9 22 d0 06 22 78 87
>3a8818		3a 80 0a 22 bb 87 3a a5 31 c9 09 b0 0d a7 32 f0
>3a8828		09 c9 20 f0 dc 20 0c 05 b0 d7 6b 08 0b 08 c2 20
>3a8838		48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31 00 74 00
>3a8848		ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85 00
>3a8858		85 32 e2 20 22 5d 87 3a c9 00 f0 38 c2 20 a5 32
>3a8868		85 08 e2 20 a5 34 85 0a a2 01 00 22 1b 87 3a a7
>3a8878		32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb
>3a8888		86 0b a9 00 87 32 22 1b 87 3a a7 08 c9 41 f0 07
>3a8898		22 05 88 3a 2b 28 6b 22 5d 87 3a a7 32 f0 f5 22
>3a88a8		bb 87 3a 22 5d 87 3a a7 32 f0 e9 c2 20 a5 32 85
>3a88b8		11 e2 20 a5 34 85 13 22 1b 87 3a a7 32 f0 26 c9
>3a88c8		20 d0 f4 a9 00 87 32 e6 31 22 1b 87 3a 22 5d 87
>3a88d8		3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85
>3a88e8		17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5 31
>3a88f8		d0 0f a2 e7 89 a9 3a 48 ab 20 64 04 20 d7 03 80
>3a8908		61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20
>3a8918		da 6a e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff 8f
>3a8928		54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54 03
>3a8938		00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20 a2
>3a8948		0d 8a a9 3a 48 ab 20 64 04 af 2e 03 00 20 8e 04
>3a8958		a9 20 20 18 00 af 20 03 00 20 8e 04 20 d7 03 20
>3a8968		d7 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0f
>3a8978		a2 e7 89 a9 3a 48 ab 20 64 04 20 d7 03 80 54 c2
>3a8988		20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 da 6a
>3a8998		a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f 58
>3a89a8		03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2 20
>3a89b8		a2 f7 89 a9 3a 48 ab 20 64 04 af 2e 03 00 20 8e
>3a89c8		04 a9 20 20 18 00 af 20 03 00 20 8e 04 20 d7 03
>3a89d8		20 d7 03 28 ab 6b 5c b5 27 3a 6b 00 00 00 00 42
>3a89e8		61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00 55
>3a89f8		6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69
>3a8a08		6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20 6c
>3a8a18		6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50 43
>3a8a28		20 20 20 20 20 41 20 20 20 20 58 20 20 20 20 59
>3a8a38		20 20 20 20 53 50 20 20 20 44 42 52 20 44 50 20
>3a8a48		20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44 46
>3a8a58		47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00 18
>3a8a68		fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a8a78		00 48 ab 68 28 c2 30 20 a6 8a a9 ff fe 1b 08 e2
>3a8a88		20 48 a9 3a 48 ab 68 28 a2 77 d2 20 64 04 08 e2
>3a8a98		20 48 a9 00 48 ab 68 28 4c b5 27 4c a3 8a 08 20
>3a8aa8		34 03 20 49 50 28 60 00 00 00 00 00 00 00 00 00
>3a8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1107 times (17712 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>3ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>3ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>3ad268		00 49 4e 4b 45 59 00 0d 52 45 41 44 59 0d 00 43
>3ad278		32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49 43
>3ad288		38 31 36 20 76 30 2e 32 2e 30 2d 61 6c 70 68 61
>3ad298		2b 34 31 35 0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>3b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>3b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>3b004f		20
>3b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>3b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>3b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>3b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>3b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>3b009f		20
>3b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b00ef		20
>3b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b013f		20
>3b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>3b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>3b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>3b0168		6e 79 20 41 6c 6c 61 69 72 65
>3b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>3b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b018a		20 20 20 20 20 20
>3b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>3b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>3b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>3b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b01da		20 20 20 20 20 20
>3b01e0		20				                .text " "
>3b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0229		20 20 20 20 20 20 20
>3b0230		20				                .text " "
>3b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0279		20 20 20 20 20 20 20
>3b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>3b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>3b0298		53 3a
>3b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>3b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>3b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>3b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>3b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>3b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b031d		20 20 20
>3b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>3b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>3b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>3b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>3b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>3b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>3b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>3b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>3b0398		75 73 68
>3b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>3b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>3b03c8		54 68 61 6e 6b 73 3a
>3b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>3b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0407		20 20 20 20 20 20 20 20 20
>3b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>3b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>3b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>3b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>3b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>3b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b045f		20
>3b0460		20				                .text " "
>3b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04a9		20 20 20 20 20 20 20
>3b04b0		20				                .text " "
>3b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04f9		20 20 20 20 20 20 20
>3b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>3b0508		45 53 20 41 55 54 48 4f 52 53 3a
>3b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>3b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b054b		20 20 20 20 20
>3b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>3b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>3b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>3b0578		63 6f 72 65 73 2e 6f 72 67
>3b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>3b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0599		20 20 20 20 20 20 20
>3b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>3b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>3b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>3b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>3b05d8		6d
>3b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>3b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>3b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>3b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>3b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>3b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>3b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>3b063b		20 20 20 20 20
>3b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>3b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>3b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>3b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>3b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b068b		20 20 20 20 20
>3b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>3b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>3b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>3b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>3b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06da		20 20 20 20 20 20
>3b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>3b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>3b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>3b0708		6a 61 64 61 20 47 6f 6d 65 7a
>3b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b072a		20 20 20 20 20 20
>3b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>3b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>3b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>3b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>3b0768		6f 6d
>3b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>3b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>3b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>3b0798		6e 69 78 20 55 29 3a 20 54 42 44
>3b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>3b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07cb		20 20 20 20 20
>3b07d0		20				                .text " "
>3b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0819		20 20 20 20 20 20 20
>3b0820		20				                .text " "
>3b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0869		20 20 20 20 20 20 20
>3b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>3b0878		54 48 41 4e 4b 53 3a
>3b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>3b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b08b7		20 20 20 20 20 20 20 20 20
>3b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>3b08c8		56 61 6e 68 61 72 65 6e
>3b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>3b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0908		20 20 20 20 20 20 20 20
>3b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>3b0918		65 77
>3b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>3b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>3b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>3b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>3b0988		65 66 65 72 65 6e 63 65 73 29
>3b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>3b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b09aa		20 20 20 20 20 20
>3b09b0		20				                .text " "
>3b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b09f9		20 20 20 20 20 20 20
>3b0a00		20				                .text " "
>3b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0a49		20 20 20 20 20 20 20
>3b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0a9f		20
>3b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>3b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>3b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>3b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>3b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>3b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>3b0aec		20 20 20 20
>3b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>3b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>3b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>3b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>3b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>3b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>3b0b3c		20 20 20 20
>3b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>3b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>3b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>3b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>3b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>3b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>3b0b8d		20 20 20
>3b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>3b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>3b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>3b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>3b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>3b0bdd		20 20 20
>3b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>3b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>3b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>3b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>3b0c2d		20 20 20
>3b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0c7f		20
>3b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>3b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c98		53 74 65 66 61 6e 79
>3b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>3b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cc7		20 20 20 20 20 20 20 20 20
>3b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>3b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>3b1768		20 20 20 20 20 20 20 20
>3b1770						.align 256
>3b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>3b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>3b2ab8		f4 f4 f4 f4 f4 f4 f4 f4

;******  Processing file: src\boot_menu.asm

.3e0000						BOOT_MENU
.3e0000						SplashScreenMain:
.3e0000		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.3e0003		2b		pld		                PLD
.3e0004		c2 10		rep #$10	                REP #$10        ; set X long
.3e0006		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0008		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e000c		a9 00		lda #$00	                LDA #$00
.3e000e		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0010		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0012		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0014		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3e0018		29 04		and #$04	                AND #FNX0_INT02_TMR0
.3e001a		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3e001e		20 e8 00	jsr $3e00e8	                JSR Splash_Get_Machine_ID
.3e0021		20 1b 01	jsr $3e011b	                JSR Splash_Clear_Screen
.3e0024		20 05 01	jsr $3e0105	                JSR Splash_Load_FontSet
.3e0027		22 f8 02 3e	jsl $3e02f8	                JSL Splashscreen_BitMapSetup
.3e002b		20 0b 06	jsr $3e060b	                JSR Model_Update_Info_Field
.3e002e		20 ec 05	jsr $3e05ec	                JSR Set_Text_Color
.3e0031		a9 00		lda #$00	                LDA #$00
.3e0033		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.3e0035		85 a7		sta $a7		                STA LINE_INDEX + 1
.3e0037		20 93 08	jsr $3e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e003a						HAVE_FUN:
.3e003a		22 00 7c 39	jsl $397c00	                JSL BOOT_SOUND_OFF
.3e003e		22 35 01 3e	jsl $3e0135	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.3e0042		a6 a6		ldx $a6		                LDX LINE_INDEX
.3e0044		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.3e0047		f0 08		beq $3e0051	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.3e0049		20 d0 08	jsr $3e08d0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.3e004c		90 21		bcc $3e006f	                BCC Still_Displaying_Char
.3e004e		20 93 08	jsr $3e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e0051						ByPassCharDisplay:
.3e0051		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0053		22 28 10 00	jsl $001028	                JSL GETSCANCODE         ; Try to get a scan code
.3e0057		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.3e0059		f0 14		beq $3e006f	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.3e005b		c9 3b		cmp #$3b	                CMP #CHAR_F1            ; Did the user press F1?
.3e005d		f0 1f		beq $3e007e	                BEQ return              ; Yes: return it
.3e005f		c9 3c		cmp #$3c	                CMP #CHAR_F2            ; Did the user press F2?
.3e0061		f0 1b		beq $3e007e	                BEQ return              ; Yes: return it
.3e0063		c9 3d		cmp #$3d	                CMP #CHAR_F3            ; Did the user press F3?
.3e0065		f0 17		beq $3e007e	                BEQ return              ; Yes: return it
.3e0067		c9 1c		cmp #$1c	                CMP #SCAN_CR            ; Did the user press CR?
.3e0069		f0 13		beq $3e007e	                BEQ return              ; Yes: return it
.3e006b		c9 39		cmp #$39	                CMP #SCAN_SP            ; Did the user press SPACE?
.3e006d		f0 0d		beq $3e007c	                BEQ exitshere
.3e006f						Still_Displaying_Char:
.3e006f						WaitForNextSOF:
.3e006f		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.3e0073		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e0075		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.3e0077		d0 f6		bne $3e006f	                BNE WaitForNextSOF;
.3e0079		4c 3a 00	jmp $3e003a	                JMP HAVE_FUN
.3e007c						exitshere:
.3e007c						timeout
.3e007c		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.3e007e						return
.3e007e		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.3e0082		a9 00		lda #$00	                LDA #$00
.3e0084		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.3e0088		22 2c 05 3e	jsl $3e052c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.3e008c		20 a1 00	jsr $3e00a1	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.3e008f		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.3e0093		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.3e0097		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e009b		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.3e009f		ea		nop		                NOP
.3e00a0		6b		rtl		                RTL
.3e00a1						VickyII_Registers_Clear:
.3e00a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00a3		c2 10		rep #$10	                REP #$10        ; set X long
.3e00a5		a2 00 00	ldx #$0000	                LDX #$0000
.3e00a8		a9 00		lda #$00	                LDA #$00
.3e00aa						ClearSpriteRegisters:
.3e00aa		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.3e00ae		e8		inx		                INX
.3e00af		e0 00 02	cpx #$0200	                CPX #$0200
.3e00b2		d0 f6		bne $3e00aa	                BNE ClearSpriteRegisters
.3e00b4		a2 00 00	ldx #$0000	                LDX #$0000
.3e00b7		a9 00		lda #$00	                LDA #$00
.3e00b9						ClearTiles0Registers:
.3e00b9		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.3e00bd		e8		inx		                INX
.3e00be		e0 30 00	cpx #$0030	                CPX #$0030
.3e00c1		d0 f6		bne $3e00b9	                BNE ClearTiles0Registers
.3e00c3		ea		nop		                NOP
.3e00c4		a2 00 00	ldx #$0000	                LDX #$0000
.3e00c7		a9 00		lda #$00	                LDA #$00
.3e00c9						ClearTiles1Registers:
.3e00c9		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.3e00cd		e8		inx		                INX
.3e00ce		e0 20 00	cpx #$0020	                CPX #$0020
.3e00d1		d0 f6		bne $3e00c9	                BNE ClearTiles1Registers
.3e00d3		ea		nop		                NOP
.3e00d4		a2 00 00	ldx #$0000	                LDX #$0000
.3e00d7		a9 00		lda #$00	                LDA #$00
.3e00d9						ClearBitmapRegisters:
.3e00d9		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.3e00dd		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.3e00e1		e8		inx		                INX
.3e00e2		e0 10 00	cpx #$0010	                CPX #$0010
.3e00e5		d0 f2		bne $3e00d9	                BNE ClearBitmapRegisters
.3e00e7		60		rts		                RTS
.3e00e8						Splash_Get_Machine_ID
.3e00e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00ea		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00ee		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.3e00f0		85 b0		sta $b0		                STA MODEL
.3e00f2		c9 00		cmp #$00	                CMP #$00
.3e00f4		f0 0e		beq $3e0104	                BEQ DONE
.3e00f6		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00fa		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.3e00fc		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.3e00fe		f0 04		beq $3e0104	                BEQ DONE
.3e0100		a9 02		lda #$02	                LDA #$02
.3e0102		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.3e0104						DONE:
.3e0104		60		rts		                RTS
.3e0105						Splash_Load_FontSet
.3e0105		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0107		c2 10		rep #$10	                REP #$10        ; set X long
.3e0109		a2 00 00	ldx #$0000	                LDX #$0000
.3e010c						DONE_LOADING_FONT:
.3e010c		bf 00 08 3f	lda $3f0800,x	                LDA @l FONT_4_SPLASH, X
.3e0110		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.3e0114		e8		inx		                INX
.3e0115		e0 00 08	cpx #$0800	                CPX #2048
.3e0118		d0 f2		bne $3e010c	                BNE DONE_LOADING_FONT
.3e011a		60		rts		                RTS
.3e011b						Splash_Clear_Screen
.3e011b		e2 20		sep #$20	                SEP #$20        ; set A short
.3e011d		c2 10		rep #$10	                REP #$10        ; set X long
.3e011f		a2 00 00	ldx #$0000	                LDX #$0000
.3e0122						Branch_Clear:
.3e0122		a9 20		lda #$20	                LDA #$20
.3e0124		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.3e0128		a9 f0		lda #$f0	                LDA #$F0
.3e012a		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.3e012e		e8		inx		                INX
.3e012f		e0 00 20	cpx #$2000	                CPX #$2000
.3e0132		d0 ee		bne $3e0122	                BNE Branch_Clear
.3e0134		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.3e0135						Splash_Moniker_Color_Rolling
.3e0135		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0137		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3e013b		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e013d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3e0141		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.3e0143		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.3e0145		f0 0c		beq $3e0153	                BEQ SERVE_STATE0
.3e0147		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.3e0149		f0 1a		beq $3e0165	                BEQ SERVE_STATE1
.3e014b		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.3e014d		d0 03		bne $3e0152	                BNE NOT_SERVE_STATE2
.3e014f		82 39 01	brl $3e028b	                BRL SERVE_STATE2
.3e0152						NOT_SERVE_STATE2
.3e0152		6b		rtl		                RTL
.3e0153						SERVE_STATE0
.3e0153		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.3e0155		c9 04		cmp #$04	                CMP #$04
.3e0157		f0 03		beq $3e015c	                BEQ SERVE_NEXT_STATE
.3e0159		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.3e015b		6b		rtl		                RTL
.3e015c						SERVE_NEXT_STATE
.3e015c		a9 00		lda #$00	                LDA #$00
.3e015e		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0160		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.3e0162		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0164		6b		rtl		                RTL
.3e0165						SERVE_STATE1
.3e0165		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0167		a9 00 00	lda #$0000	                LDA #$0000
.3e016a		a2 00 00	ldx #$0000	                LDX #$0000
.3e016d		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3e016f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0171		bf b0 02 3e	lda $3e02b0,x	                LDA @lCOLOR_POINTER+0, X
.3e0175		aa		tax		                TAX
.3e0176		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e017a		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.3e017e		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e0182		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.3e0186		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e018a		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.3e018e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0190		bf b1 02 3e	lda $3e02b1,x	                LDA @lCOLOR_POINTER+1, X
.3e0194		aa		tax		                TAX
.3e0195		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0199		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.3e019d		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01a1		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.3e01a5		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01a9		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.3e01ad		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01af		bf b2 02 3e	lda $3e02b2,x	                LDA @lCOLOR_POINTER+2, X
.3e01b3		aa		tax		                TAX
.3e01b4		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01b8		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.3e01bc		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01c0		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.3e01c4		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01c8		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.3e01cc		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01ce		bf b3 02 3e	lda $3e02b3,x	                LDA @lCOLOR_POINTER+3, X
.3e01d2		aa		tax		                TAX
.3e01d3		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01d7		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.3e01db		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01df		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.3e01e3		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e01e7		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.3e01eb		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01ed		bf b4 02 3e	lda $3e02b4,x	                LDA @lCOLOR_POINTER+4, X
.3e01f1		aa		tax		                TAX
.3e01f2		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e01f6		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.3e01fa		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e01fe		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.3e0202		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0206		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.3e020a		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e020c		bf b5 02 3e	lda $3e02b5,x	                LDA @lCOLOR_POINTER+5, X
.3e0210		aa		tax		                TAX
.3e0211		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0215		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.3e0219		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e021d		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.3e0221		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0225		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.3e0229		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e022b		bf b6 02 3e	lda $3e02b6,x	                LDA @lCOLOR_POINTER+6, X
.3e022f		aa		tax		                TAX
.3e0230		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0234		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.3e0238		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e023c		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.3e0240		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e0244		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.3e0248		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e024a		bf b7 02 3e	lda $3e02b7,x	                LDA @lCOLOR_POINTER+7, X
.3e024e		aa		tax		                TAX
.3e024f		bf 90 02 3e	lda $3e0290,x	                LDA @lCOLOR_CHART, X
.3e0253		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.3e0257		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.3e025b		bf 91 02 3e	lda $3e0291,x	                LDA @lCOLOR_CHART+1, X
.3e025f		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.3e0263		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.3e0267		bf 92 02 3e	lda $3e0292,x	                LDA @lCOLOR_CHART+2, X
.3e026b		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.3e026f		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.3e0273						HERE
.3e0273		18		clc		                CLC
.3e0274		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e0276		69 09		adc #$09	                ADC #$09
.3e0278		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e027c		c9 48		cmp #$48	                CMP #$48
.3e027e		d0 04		bne $3e0284	                BNE EXIT_COLOR_CHANGE
.3e0280		a9 00		lda #$00	                LDA #$00
.3e0282		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0284						EXIT_COLOR_CHANGE
.3e0284		c2 10		rep #$10	                REP #$10        ; set X long
.3e0286		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e0288		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e028a		6b		rtl		                RTL
.3e028b						SERVE_STATE2
.3e028b		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028d		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e028f		6b		rtl		                RTL
>3e0290						.align 16
>3e0290		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>3e0294		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>3e0298		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>3e029c		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>3e02a0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>3e02a4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>3e02a8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>3e02ac		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>3e02b0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>3e02b8		00
>3e02b9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>3e02c1		00
>3e02c2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>3e02ca		00
>3e02cb		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>3e02d3		00
>3e02d4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>3e02dc		00
>3e02dd		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>3e02e5		00
>3e02e6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>3e02ee		00
>3e02ef		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>3e02f7		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.3e02f8						Splashscreen_BitMapSetup
.3e02f8		e2 20		sep #$20	                SEP #$20        ; set A short
.3e02fa		c2 10		rep #$10	                REP #$10        ; set X long
.3e02fc		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.3e02fe		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.3e0302		a9 00		lda #$00	        LDA #$00
.3e0304		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.3e0308		a9 00		lda #$00	        LDA #$00
.3e030a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.3e030e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.3e0310		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.3e0314		a9 00		lda #$00	        LDA #$00
.3e0316		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.3e031a		a9 00		lda #$00	        LDA #$00
.3e031c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.3e0320		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.3e0324		a9 01		lda #$01	        LDA #$01
.3e0326		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.3e032a		a9 08		lda #$08	        LDA #$08
.3e032c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.3e0330		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.3e0334		a9 80		lda #$80	        LDA #$80
.3e0336		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.3e033a		a9 00		lda #$00	        LDA #$00
.3e033c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.3e0340		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.3e0344		a9 a0		lda #$a0	        LDA #$A0
.3e0346		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.3e034a		a9 10		lda #$10	        LDA #$10
.3e034c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.3e0350		a9 10		lda #$10	        LDA #$10
.3e0352		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.3e0356		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.3e035a		e2 20		sep #$20	                SEP #$20        ; set A short
.3e035c		c2 10		rep #$10	                REP #$10        ; set X long
.3e035e		a2 00 00	ldx #$0000	        LDX #$0000
.3e0361						SS_LUT_BRANCH:
.3e0361		bf 00 0e 3e	lda $3e0e00,x	        LDA @l SS_MONIKER_LUT, X
.3e0365		ea		nop		        NOP
.3e0366		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.3e036a		e8		inx		        INX
.3e036b		e0 00 04	cpx #$0400	        CPX #1024
.3e036e		d0 f1		bne $3e0361	        BNE SS_LUT_BRANCH
.3e0370		a9 00		lda #$00	        LDA #$00
.3e0372		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.3e0376		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.3e037a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.3e037e		22 2c 05 3e	jsl $3e052c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.3e0382		c2 20		rep #$20	                REP #$20        ; set A long
.3e0384		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.3e0387		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e038b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.3e038e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e0392		a9 00 00	lda #$0000	        LDA #$0000
.3e0395		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0399		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.3e039c		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e03a0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.3e03a3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e03a7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.3e03aa		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e03ae		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e03b1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e03b5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03b7		a9 3e		lda #$3e	        LDA #`SS_MONIKER
.3e03b9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e03bd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.3e03bf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e03c3		a9 00		lda #$00	        LDA #$00
.3e03c5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e03c9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.3e03cb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e03cf		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e03d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03d5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.3e03d9		29 03		and #$03	        AND #$03
.3e03db		c9 00		cmp #$00	        CMP #$00
.3e03dd		f0 0b		beq $3e03ea	        BEQ DMA_FMX_Moniker
.3e03df		c9 01		cmp #$01	        CMP #$01
.3e03e1		f0 5b		beq $3e043e	        BEQ DMA_UPlus_Moniker
.3e03e3		c9 02		cmp #$02	        CMP #$02
.3e03e5		d0 03		bne $3e03ea	        BNE BAD_MODEL_NUMBER
.3e03e7		82 a8 00	brl $3e0492	        BRL DMA_U_Moniker
.3e03ea						 BAD_MODEL_NUMBER:
.3e03ea						DMA_FMX_Moniker:
.3e03ea		c2 20		rep #$20	                REP #$20        ; set A long
.3e03ec		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.3e03ef		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e03f3		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e03f6		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e03fa		a9 00 00	lda #$0000	        LDA #$0000
.3e03fd		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0401		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.3e0404		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0408		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.3e040b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e040f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.3e0412		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e0416		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e0419		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e041d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e041f		a9 3e		lda #$3e	        LDA #`SS_FMX_TXT
.3e0421		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0425		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0427		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e042b		a9 00		lda #$00	        LDA #$00
.3e042d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0431		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.3e0433		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e0437		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e043b		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e043e						DMA_UPlus_Moniker:
.3e043e		c2 20		rep #$20	                REP #$20        ; set A long
.3e0440		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.3e0443		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0447		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e044a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e044e		a9 00 00	lda #$0000	        LDA #$0000
.3e0451		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0455		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.3e0458		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e045c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.3e045f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e0463		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.3e0466		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e046a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e046d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e0471		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0473		a9 3e		lda #$3e	        LDA #`SS_UPlus_TXT
.3e0475		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0479		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e047b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e047f		a9 00		lda #$00	        LDA #$00
.3e0481		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0485		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.3e0487		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e048b		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e048f		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e0492						DMA_U_Moniker:
.3e0492		c2 20		rep #$20	                REP #$20        ; set A long
.3e0494		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.3e0497		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e049b		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.3e049e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e04a2		a9 00 00	lda #$0000	        LDA #$0000
.3e04a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e04a9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.3e04ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e04b0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.3e04b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e04b7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.3e04ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e04be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e04c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e04c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04c7		a9 3e		lda #$3e	        LDA #`SS_U_TXT
.3e04c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e04cd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.3e04cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e04d3		a9 00		lda #$00	        LDA #$00
.3e04d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e04d9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.3e04db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e04df		22 e7 04 3e	jsl $3e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e04e3		4c e6 04	jmp $3e04e6	        JMP Done_DMA_Model_Moniker
.3e04e6						Done_DMA_Model_Moniker
.3e04e6		6b		rtl		        RTL
.3e04e7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.3e04e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04e9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.3e04eb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e04ef		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.3e04f1		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e04f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04f7		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.3e04fb		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e04fd		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0501		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.3e0505		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.3e0507		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e050b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e050c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e050d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e050e		ea		nop		        NOP
.3e050f		ea		nop		        NOP
.3e0510		ea		nop		        NOP
.3e0511		ea		nop		        NOP
.3e0512		ea		nop		        NOP
.3e0513		ea		nop		        NOP
.3e0514		ea		nop		        NOP
.3e0515		a9 00		lda #$00	        LDA #$00
.3e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e051b						NOTFINISHED:
.3e051b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e051f		29 80		and #$80	        AND #$80
.3e0521		c9 80		cmp #$80	        CMP #$80
.3e0523		f0 f6		beq $3e051b	        BEQ NOTFINISHED
.3e0525		a9 00		lda #$00	        LDA #$00
.3e0527		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e052b		6b		rtl		        RTL
.3e052c						SS_VDMA_CLEAR_MEMORY_640_480
.3e052c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e052e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.3e0530		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0534		a9 00		lda #$00	        LDA #$00
.3e0536		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e053a		c2 20		rep #$20	                REP #$20        ; set A long
.3e053c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e053f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0543		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0545		a9 00		lda #$00	        LDA #$00
.3e0547		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e054b		c2 20		rep #$20	                REP #$20        ; set A long
.3e054d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.3e0550		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e0554		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0556		a9 04		lda #$04	        LDA #`(640*480)
.3e0558		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e055c		a9 00		lda #$00	        LDA #$00
.3e055e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0562		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e0566		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e0568		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e056c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e056d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e056e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e056f		ea		nop		        NOP
.3e0570		ea		nop		        NOP
.3e0571		ea		nop		        NOP
.3e0572		ea		nop		        NOP
.3e0573		ea		nop		        NOP
.3e0574						SS_VDMA_CLR_LOOPA:
.3e0574		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e0578		29 80		and #$80	        AND #$80
.3e057a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e057c		f0 f6		beq $3e0574	        BEQ SS_VDMA_CLR_LOOPA
.3e057e		ea		nop		        NOP
.3e057f		a9 00		lda #$00	        LDA #$00
.3e0581		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0585		6b		rtl		        RTL
.3e0586						SS_VDMA_TRANSFER_VRAM_2_VRAM
.3e0586		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0588		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.3e058a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e058e		a9 00		lda #$00	        LDA #$00
.3e0590		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e0594		c2 20		rep #$20	                REP #$20        ; set A long
.3e0596		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.3e0599		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.3e059d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e059f		a9 00		lda #$00	        LDA #$00
.3e05a1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.3e05a5		c2 20		rep #$20	                REP #$20        ; set A long
.3e05a7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e05aa		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e05ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05b0		a9 00		lda #$00	        LDA #$00
.3e05b2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e05b6		c2 20		rep #$20	                REP #$20        ; set A long
.3e05b8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.3e05bb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e05bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05c1		a9 00		lda #$00	        LDA #`(320*16)
.3e05c3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e05c7		a9 00		lda #$00	        LDA #$00
.3e05c9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e05cd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e05d1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e05d3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05d7		ea		nop		        NOP
.3e05d8		ea		nop		        NOP
.3e05d9		ea		nop		        NOP
.3e05da						SS_VDMA_CLR_LOOPB:
.3e05da		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e05de		29 80		and #$80	        AND #$80
.3e05e0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e05e2		f0 f6		beq $3e05da	        BEQ SS_VDMA_CLR_LOOPB
.3e05e4		ea		nop		        NOP
.3e05e5		a9 00		lda #$00	        LDA #$00
.3e05e7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05eb		6b		rtl		        RTL

;******  Return to file: src\boot_menu.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.3e05ec						Set_Text_Color:
.3e05ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e05ee		a9 00 00	lda #$0000	            LDA #00
.3e05f1		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e05f3		a9 30 00	lda #$0030	            LDA #48
.3e05f6		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e05f8		20 ec 08	jsr $3e08ec	            JSR Line_Display_Compute_Pointer
.3e05fb		a0 00 00	ldy #$0000	            LDY #$0000
.3e05fe		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0600		a9 40		lda #$40	            LDA #$40
.3e0602						SetColorBranch:
.3e0602		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.3e0604		c8		iny		            INY
.3e0605		c0 50 00	cpy #$0050	            CPY #80
.3e0608		d0 f8		bne $3e0602	            BNE SetColorBranch
.3e060a		60		rts		            RTS
.3e060b						Model_Update_Info_Field:
.3e060b		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e060d		a9 00 00	lda #$0000	            LDA #$0000
.3e0610		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0612		a5 b0		lda $b0		            LDA MODEL
.3e0614		0a		asl a		            ASL
.3e0615		0a		asl a		            ASL
.3e0616		aa		tax		            TAX
.3e0617		c2 20		rep #$20	                REP #$20        ; set A long
.3e0619		bf 9f 0c 3e	lda $3e0c9f,x	            LDA MODEL_TABLE, X
.3e061d		85 a0		sta $a0		            STA MOD_SELECT_L
.3e061f		bf a1 0c 3e	lda $3e0ca1,x	            LDA MODEL_TABLE + 2, X
.3e0623		85 a2		sta $a2		            STA MOD_SELECT_H
.3e0625		a0 00 00	ldy #$0000	            LDY #$0000
.3e0628		84 a6		sty $a6		            STY LINE_INDEX
.3e062a						Next_Change_Here:
.3e062a		c2 20		rep #$20	                REP #$20        ; set A long
.3e062c		a4 a6		ldy $a6		            LDY LINE_INDEX
.3e062e		bb		tyx		            TYX
.3e062f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e0631		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e0633		bf ef 0c 3e	lda $3e0cef,x	            LDA LINE_MOD, X
.3e0637		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0639		c8		iny		            INY
.3e063a		c8		iny		            INY
.3e063b		bb		tyx		            TYX
.3e063c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e063e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e0640		bf ef 0c 3e	lda $3e0cef,x	            LDA LINE_MOD, X
.3e0644		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0646		c8		iny		            INY
.3e0647		c8		iny		            INY
.3e0648		84 a6		sty $a6		            STY LINE_INDEX
.3e064a		c0 10 00	cpy #$0010	            CPY #16
.3e064d		f0 10		beq $3e065f	            BEQ LetsMoveOn
.3e064f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0651		a0 00 00	ldy #$0000	            LDY #$0000
.3e0654						nextchar:
.3e0654		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e0656		c9 00		cmp #$00	            CMP #$00
.3e0658		f0 d0		beq $3e062a	            BEQ Next_Change_Here
.3e065a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e065c		c8		iny		            INY
.3e065d		80 f5		bra $3e0654	            BRA nextchar
.3e065f						LetsMoveOn:
.3e065f		af fb 0c 3e	lda $3e0cfb	            LDA LINE_MOD + 12
.3e0663		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0665		a0 00 00	ldy #$0000	            LDY #$0000
.3e0668		e2 20		sep #$20	                SEP #$20        ; set A short
.3e066a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.3e066e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0670		c8		iny		            INY
.3e0671		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.3e0675		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0677		c8		iny		            INY
.3e0678		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.3e067c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e067e		18		clc		            CLC
.3e067f		af 0d 07 af	lda $af070d	            LDA @l FPGA_DOR   ; it is in BCD
.3e0683		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0686		8f ca 0a 3e	sta $3e0aca	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.3e068a		8f 03 0b 3e	sta $3e0b03	            STA @lLINE9 + 47    ; GABE in FMX
.3e068e		8f 49 0b 3e	sta $3e0b49	            STA @lLINE10 + 51   ; VICKY II in FMX
.3e0692		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.3e0696		29 0f		and #$0f	            AND #$0F
.3e0698		69 30		adc #$30	            ADC #$30
.3e069a		8f cb 0a 3e	sta $3e0acb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.3e069e		8f 04 0b 3e	sta $3e0b04	            STA @lLINE9 + 48    ; GABE in FMX
.3e06a2		8f 4a 0b 3e	sta $3e0b4a	            STA @lLINE10 + 52   ; VICKY II in FMX
.3e06a6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.3e06aa		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06ad		8f cd 0a 3e	sta $3e0acd	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.3e06b1		8f 06 0b 3e	sta $3e0b06	            STA @lLINE9 + 50    ; GABE in FMX
.3e06b5		8f 4c 0b 3e	sta $3e0b4c	            STA @lLINE10 + 54   ; VICKY II in FMX
.3e06b9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.3e06bd		29 0f		and #$0f	            AND #$0F
.3e06bf		69 30		adc #$30	            ADC #$30
.3e06c1		8f ce 0a 3e	sta $3e0ace	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.3e06c5		8f 07 0b 3e	sta $3e0b07	            STA @lLINE9 + 51    ; GABE in FMX
.3e06c9		8f 4d 0b 3e	sta $3e0b4d	            STA @lLINE10 + 55   ; VICKY II in FMX
.3e06cd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.3e06d1		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06d4		8f d0 0a 3e	sta $3e0ad0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.3e06d8		8f 09 0b 3e	sta $3e0b09	            STA @lLINE9 + 53    ; GABE in FMX
.3e06dc		8f 4f 0b 3e	sta $3e0b4f	            STA @lLINE10 + 57   ; VICKY II in FMX
.3e06e0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.3e06e4		29 0f		and #$0f	            AND #$0F
.3e06e6		69 30		adc #$30	            ADC #$30
.3e06e8		8f d1 0a 3e	sta $3e0ad1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.3e06ec		8f 0a 0b 3e	sta $3e0b0a	            STA @lLINE9 + 54    ; GABE in FMX
.3e06f0		8f 50 0b 3e	sta $3e0b50	            STA @lLINE10 + 58   ; VICKY II in FMX
.3e06f4		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e06f8		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e06fb		8f c0 0a 3e	sta $3e0ac0	            STA @lLINE8 + 46    ; U/U+
.3e06ff		8f f9 0a 3e	sta $3e0af9	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.3e0703		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0707		29 0f		and #$0f	            AND #$0F
.3e0709		69 30		adc #$30	            ADC #$30
.3e070b		8f c1 0a 3e	sta $3e0ac1	            STA @lLINE8 + 47
.3e070f		8f fa 0a 3e	sta $3e0afa	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.3e0713		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0717		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e071a		8f 3f 0b 3e	sta $3e0b3f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.3e071e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0722		29 0f		and #$0f	            AND #$0F
.3e0724		69 30		adc #$30	            ADC #$30
.3e0726		8f 40 0b 3e	sta $3e0b40	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.3e072a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e072e		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0731		8f c2 0a 3e	sta $3e0ac2	            STA @lLINE8 + 48
.3e0735		8f fb 0a 3e	sta $3e0afb	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.3e0739		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e073d		29 0f		and #$0f	            AND #$0F
.3e073f		69 30		adc #$30	            ADC #$30
.3e0741		8f c3 0a 3e	sta $3e0ac3	            STA @lLINE8 + 49
.3e0745		8f fc 0a 3e	sta $3e0afc	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.3e0749		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e074d		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0750		8f 41 0b 3e	sta $3e0b41	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.3e0754		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e0758		29 0f		and #$0f	            AND #$0F
.3e075a		69 30		adc #$30	            ADC #$30
.3e075c		8f 42 0b 3e	sta $3e0b42	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.3e0760		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0764		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0767		8f b4 0a 3e	sta $3e0ab4	            STA @lLINE8 + 34
.3e076b		8f ed 0a 3e	sta $3e0aed	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.3e076f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0773		29 0f		and #$0f	            AND #$0F
.3e0775		69 30		adc #$30	            ADC #$30
.3e0777		8f b5 0a 3e	sta $3e0ab5	            STA @lLINE8 + 35
.3e077b		8f ee 0a 3e	sta $3e0aee	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.3e077f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e0783		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e0786		8f 34 0b 3e	sta $3e0b34	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.3e078a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e078e		29 0f		and #$0f	            AND #$0F
.3e0790		69 30		adc #$30	            ADC #$30
.3e0792		8f 35 0b 3e	sta $3e0b35	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.3e0796		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e079a		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e079d		8f b6 0a 3e	sta $3e0ab6	            STA @lLINE8 + 36
.3e07a1		8f ef 0a 3e	sta $3e0aef	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.3e07a5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07a9		29 0f		and #$0f	            AND #$0F
.3e07ab		69 30		adc #$30	            ADC #$30
.3e07ad		8f b7 0a 3e	sta $3e0ab7	            STA @lLINE8 + 37
.3e07b1		8f f0 0a 3e	sta $3e0af0	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.3e07b5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07b9		20 e6 07	jsr $3e07e6	            JSR HighNibblerBCD
.3e07bc		8f 36 0b 3e	sta $3e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07c0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07c4		29 0f		and #$0f	            AND #$0F
.3e07c6		69 30		adc #$30	            ADC #$30
.3e07c8		8f 36 0b 3e	sta $3e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07cc		20 3f 08	jsr $3e083f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.3e07cf		20 60 08	jsr $3e0860	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.3e07d2		20 61 08	jsr $3e0861	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.3e07d5		a5 b0		lda $b0		            LDA MODEL
.3e07d7		29 03		and #$03	            AND #$03
.3e07d9		c9 00		cmp #$00	            CMP #$00
.3e07db		f0 12		beq $3e07ef	            BEQ Erase_FATVicky_Line;
.3e07dd		c9 01		cmp #$01	            CMP #$01
.3e07df		f0 29		beq $3e080a	            BEQ Erase_2Lines;
.3e07e1		c9 02		cmp #$02	            CMP #$02
.3e07e3		f0 25		beq $3e080a	            BEQ Erase_2Lines;
.3e07e5		60		rts		            RTS
.3e07e6						HighNibblerBCD:
.3e07e6		29 f0		and #$f0	            AND #$F0
.3e07e8		4a		lsr a		            LSR A
.3e07e9		4a		lsr a		            LSR A
.3e07ea		4a		lsr a		            LSR A
.3e07eb		4a		lsr a		            LSR A
.3e07ec		69 30		adc #$30	            ADC #$30
.3e07ee		60		rts		            RTS
.3e07ef						Erase_FATVicky_Line:
.3e07ef		c2 20		rep #$20	                REP #$20        ; set A long
.3e07f1		a9 92 0a	lda #$0a92	            LDA #<>LINE8
.3e07f4		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e07f6		a9 3e 00	lda #$003e	            LDA #`LINE8
.3e07f9		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e07fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3e07fd		a0 00 00	ldy #$0000	            LDY #$0000
.3e0800		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0802		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0804		c8		iny		            INY
.3e0805		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0807		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0809		60		rts		            RTS
.3e080a						Erase_2Lines
.3e080a		c2 20		rep #$20	                REP #$20        ; set A long
.3e080c		a9 d4 0a	lda #$0ad4	            LDA #<>LINE9
.3e080f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0811		a9 3e 00	lda #$003e	            LDA #`LINE9
.3e0814		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0816		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0818		a0 00 00	ldy #$0000	            LDY #$0000
.3e081b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e081d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e081f		c8		iny		            INY
.3e0820		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0822		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0824		c2 20		rep #$20	                REP #$20        ; set A long
.3e0826		a9 16 0b	lda #$0b16	            LDA #<>LINE10
.3e0829		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e082b		a9 3e 00	lda #$003e	            LDA #`LINE10
.3e082e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0830		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0832		a0 00 00	ldy #$0000	            LDY #$0000
.3e0835		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0837		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0839		c8		iny		            INY
.3e083a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e083c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e083e		60		rts		            RTS
.3e083f						GODETECTHIRES
.3e083f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0841		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.3e0845		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.3e0847		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.3e0849		f0 14		beq $3e085f	            BEQ WeAreDone
.3e084b		c2 10		rep #$10	                REP #$10        ; set X long
.3e084d		a2 00 00	ldx #$0000	            LDX #$0000
.3e0850						ChangeNextChar
.3e0850		bf 4f 0d 3e	lda $3e0d4f,x	            LDA @l ON_TEXT, X
.3e0854		c9 00		cmp #$00	            CMP #$00
.3e0856		f0 07		beq $3e085f	            BEQ WeAreDone
.3e0858		9f 43 0c 3e	sta $3e0c43,x	            STA @l LINE17 +13, X
.3e085c		e8		inx		            INX
.3e085d		d0 f1		bne $3e0850	            BNE ChangeNextChar
.3e085f						WeAreDone
.3e085f						NoExpansionCardPresent
.3e085f		60		rts		            RTS
.3e0860						GODETECTHDD
.3e0860		60		rts		            RTS
.3e0861						GODETECTEXP
.3e0861		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0863		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.3e0867		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.3e0869		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.3e086b		d0 25		bne $3e0892	            BNE NoExpansionCardPresent
.3e086d		c2 10		rep #$10	                REP #$10        ; set X long
.3e086f		a2 00 00	ldx #$0000	            LDX #$0000
.3e0872						ChangeNextChar
.3e0872		bf 53 0d 3e	lda $3e0d53,x	            LDA @l YES_TEXT, X
.3e0876		c9 00		cmp #$00	            CMP #$00
.3e0878		f0 07		beq $3e0881	            BEQ WeAreDone
.3e087a		9f 75 0c 3e	sta $3e0c75,x	            STA @l LINE19 +26, X
.3e087e		e8		inx		            INX
.3e087f		d0 f1		bne $3e0872	            BNE ChangeNextChar
.3e0881						WeAreDone
.3e0881		a2 00 00	ldx #$0000	            LDX #$0000
.3e0884						AddCardName
.3e0884		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.3e0888		9f 79 0c 3e	sta $3e0c79,x	            STA @l LINE20, X
.3e088c		e8		inx		            INX
.3e088d		e0 10 00	cpx #$0010	            CPX #$10
.3e0890		d0 f2		bne $3e0884	            BNE AddCardName
.3e0892						NoExpansionCardPresent
.3e0892		60		rts		            RTS
.3e0893						Line_Setup_Before_Display
.3e0893		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e0895		a5 a6		lda $a6		            LDA LINE_INDEX
.3e0897		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.3e089a		f0 33		beq $3e08cf	            BEQ DONE
.3e089c		a5 a6		lda $a6		            LDA LINE_INDEX
.3e089e		0a		asl a		            ASL A
.3e089f		0a		asl a		            ASL A
.3e08a0		aa		tax		            TAX
.3e08a1		bf 14 09 3e	lda $3e0914,x	            LDA TEXT_TABLE, X
.3e08a5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e08a7		bf 16 09 3e	lda $3e0916,x	            LDA TEXT_TABLE + 2, X
.3e08ab		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e08ad		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08af		0a		asl a		            ASL A
.3e08b0		aa		tax		            TAX
.3e08b1		bf 70 09 3e	lda $3e0970,x	            LDA TEXT_POSX, X
.3e08b5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e08b7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08bb		bf 9e 09 3e	lda $3e099e,x	            LDA TEXT_POSY, X
.3e08bf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e08c1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.3e08c5		20 ec 08	jsr $3e08ec	            JSR Line_Display_Compute_Pointer
.3e08c8		a9 00 00	lda #$0000	            LDA #$0000
.3e08cb		85 a0		sta $a0		            STA TEXT_INDEX
.3e08cd		e6 a6		inc $a6		            INC LINE_INDEX
.3e08cf						DONE:
.3e08cf		60		rts		            RTS
.3e08d0						Line_Display_1_Character
.3e08d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08d2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.3e08d4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.3e08d6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08da		e2 20		sep #$20	                SEP #$20        ; set A short
.3e08dc		38		sec		            SEC
.3e08dd		a4 a0		ldy $a0		            LDY TEXT_INDEX
.3e08df		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e08e1		c9 00		cmp #$00	            CMP #$00
.3e08e3		f0 06		beq $3e08eb	            BEQ WE_ARE_DONE;
.3e08e5		18		clc		            CLC
.3e08e6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e08e8		c8		iny		            INY
.3e08e9		84 a0		sty $a0		            STY TEXT_INDEX
.3e08eb						WE_ARE_DONE:
.3e08eb		60		rts		            RTS
.3e08ec						Line_Display_Compute_Pointer
.3e08ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08ee		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.3e08f0		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.3e08f4		a9 50 00	lda #$0050	            LDA #80
.3e08f7		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.3e08fb		18		clc		            CLC
.3e08fc		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.3e0900		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.3e0902		69 00 a0	adc #$a000	            ADC #$A000
.3e0905		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0907		69 00 20	adc #$2000	            ADC #$2000
.3e090a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.3e090c		a9 af 00	lda #$00af	            LDA #$00AF
.3e090f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0911		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.3e0913		60		rts		            RTS
>3e0914		cc 09 3e 00 ed 09 3e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>3e091c		03 0a 3e 00 11 0a 3e 00 29 0a 3e 00 4c 0a 3e 00
>3e092c		70 0a 3e 00 85 0a 3e 00
>3e0934		92 0a 3e 00 d4 0a 3e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>3e093c		16 0b 3e 00 58 0b 3e 00 62 0b 3e 00 8b 0b 3e 00
>3e094c		c2 0b 3e 00 e5 0b 3e 00
>3e0954		f7 0b 3e 00 36 0c 3e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>3e095c		48 0c 3e 00 5b 0c 3e 00 79 0c 3e 00 8a 0c 3e 00
>3e096c		9d 0c 3e 00
>3e0970		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>3e0978		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>3e0988		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>3e0998		2d 00 1e 00 48 00
>3e099e		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>3e09a6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>3e09b6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>3e09c6		35 00 39 00 39 00
=6						leftAlign = 6
>3e09cc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>3e09d4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>3e09e4		20 20 20 20 20 20 20 20 00
>3e09ed		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>3e09f5		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>3e0a03		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>3e0a0b		4e 46 4f 3a 20 00
>3e0a11		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>3e0a19		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>3e0a29		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>3e0a31		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>3e0a41		20 20 20 20 20 20 20 20 20 20 00
>3e0a4c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>3e0a54		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>3e0a64		20 20 20 20 20 20 20 20 20 20 20 00
>3e0a70		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>3e0a78		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>3e0a85		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>3e0a8d		53 29 3a 20 00
>3e0a92		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>3e0a9a		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>3e0aaa		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>3e0aba		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>3e0aca		30 30 2f 30 30 2f 30 30 20 00
>3e0ad4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533  - GABE     - REV:0000 SUBREV:0000 DATE:00/00/00     ", $00
>3e0adc		35 33 33 20 20 2d 20 47 41 42 45 20 20 20 20 20
>3e0aec		2d 20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45
>3e0afc		56 3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30
>3e0b0c		30 2f 30 30 20 20 20 20 20 00
>3e0b16		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551  - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00     ", $00
>3e0b1e		35 35 31 20 20 2d 20 56 49 43 4b 59 20 49 49 20
>3e0b2e		2d 20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45
>3e0b3e		56 3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30
>3e0b4e		30 2f 30 30 20 20 20 20 20 00
>3e0b58		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>3e0b60		20 00
>3e0b62		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>3e0b6a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>3e0b7a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>3e0b8a		00
>3e0b8b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>3e0b93		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>3e0ba3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>3e0bb3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>3e0bc2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>3e0bca		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>3e0bda		4c 20 54 52 45 4d 42 4c 41 59 00
>3e0be5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>3e0bed		20 4d 45 4e 55 2d 2d 2d 2d 00
>3e0bf7		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>3e0bff		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>3e0c0f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>3e0c1f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>3e0c2f		46 41 55 4c 54 20 00
>3e0c36		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>3e0c3e		4f 44 45 3a 20 4f 46 46 20 00
>3e0c48		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>3e0c50		41 4c 4c 45 44 3a 20 2d 2d 20 00
>3e0c5b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>3e0c63		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>3e0c73		3a 20 4e 4f 20 00
>3e0c79		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3e0c81		00 00 00 00 00 00 00 00 00
>3e0c8a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>3e0c92		46 4f 45 4e 49 58 2e 43 4f 4d 00
>3e0c9d		20 00				LINE22 .text " ", $00
>3e0c9f		af 0c 3e 00 bf 0c 3e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>3e0ca7		cf 0c 3e 00 df 0c 3e 00
>3e0caf		ff 0c 3e 00 3f 0d 3e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>3e0cb7		3f 0d 3e 00 00 00 00 00
>3e0cbf		0f 0d 3e 00 3f 0d 3e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>3e0cc7		2f 0d 3e 00 00 00 00 00
>3e0ccf		1f 0d 3e 00 2f 0d 3e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>3e0cd7		2f 0d 3e 00 00 00 00 00
>3e0cdf		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>3e0ce7		00 00 00 00 00 00 00 00
>3e0cef		dc 09 3e 00 3b 0a 3e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>3e0cf7		5f 0a 3e 00 7e 0a 3e 00
>3e0cff		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>3e0d07		4e 49 58 20 46 4d 58 00
>3e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>3e0d17		4e 49 58 20 55 2b 20 00
>3e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>3e0d27		4e 49 58 20 55 20 20 00
>3e0d2f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>3e0d37		32 20 42 59 54 45 53 00
>3e0d3f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>3e0d47		34 20 42 59 54 45 53 00
>3e0d4f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>3e0d53		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\boot_menu.asm

>3e0d57						.align 256
.3e0e00						SS_MONIKER_LUT
>3e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>3e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>3e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>3e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>3e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>3e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>3e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>3e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>3e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>3e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>3e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>3e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>3e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>3e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>3e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>3e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>3e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>3e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>3e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>3e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>3e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>3e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>3e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>3e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>3e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>3e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>3e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>3e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>3e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>3e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>3e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>3e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>3e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>3e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>3e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>3e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>3e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>3e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>3e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>3e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>3e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>3e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>3e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>3e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>3e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>3e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>3e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>3e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>3e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>3e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>3e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>3e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>3e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>3e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>3e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>3e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>3e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>3e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>3e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>3e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>3e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>3e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>3e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>3e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>3e11f8		ff ff ff 00 e5 80 80 00
.3e1200						SS_MONIKER
>3e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>3e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>3e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>3e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>3e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>3e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>3e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>3e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>3e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>3e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>3e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>3e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>3e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>3e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>3e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>3e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>3e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>3e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>3e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>3e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>3e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>3e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>3e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>3e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>3e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>3e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>3e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>3e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>3e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>3e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>3e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>3e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>3e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>3e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>3e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>3e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>3e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>3e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>3e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>3e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>3e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>3e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>3e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>3e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>3e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>3e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>3e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>3e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>3e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>3e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>3e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>3e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>3e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>3e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>3e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>3e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>3e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>3e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>3e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>3e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>3e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>3e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>3e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>3e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>3e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>3e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>3e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>3e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>3e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>3e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>3e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>3e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>3e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>3e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>3e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>3e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>3e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>3e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>3e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>3e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>3e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>3e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>3e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>3e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>3e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>3e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>3e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>3e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>3e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>3e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>3e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>3e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>3e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>3e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>3e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>3e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>3e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>3e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>3e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>3e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>3e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>3e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>3e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>3e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>3e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>3e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>3e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>3e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>3e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>3e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>3e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>3e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>3e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>3e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>3e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>3e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>3e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>3e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>3e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>3e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>3e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>3e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>3e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>3e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>3e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>3e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>3e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>3e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>3e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>3e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>3e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>3e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>3e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>3e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>3e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>3e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>3e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>3e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>3e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>3e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>3e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>3e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>3e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>3e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>3e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>3e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>3e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>3e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>3e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>3e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>3e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>3e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>3e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>3e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>3e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>3e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>3e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>3e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>3e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>3e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>3e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>3e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>3e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>3e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>3e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>3e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>3e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>3e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>3e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>3e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>3e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>3e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>3e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>3e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>3e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>3e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>3e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>3e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>3e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>3e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>3e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>3e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>3e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>3e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>3e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>3e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>3e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>3e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>3e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>3e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>3e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>3e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>3e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>3e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>3e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>3e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>3e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>3e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>3e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>3e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>3e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>3e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>3e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>3e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>3e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>3e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>3e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>3e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>3e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>3e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>3e61f8		00 00 00 00 00 00 00 00
.3e6200						SS_FMX_TXT
>3e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>3e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>3e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>3e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>3e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>3e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>3e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>3e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>3e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>3e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>3e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>3e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>3e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>3e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>3e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>3e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>3e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>3e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>3e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>3e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>3e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>3e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>3e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>3e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>3e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>3e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>3e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>3e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>3e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>3e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>3e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>3e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>3e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>3e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>3e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>3e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>3e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>3e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>3e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>3e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>3e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>3e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>3e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>3e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>3e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>3e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>3e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>3e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>3e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>3e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>3e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>3e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>3e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>3e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>3e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>3e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>3e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>3e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>3e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>3e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>3e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>3e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>3e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>3e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>3e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>3e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>3e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>3e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>3e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>3e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>3e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>3e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>3e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>3e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>3e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>3e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>3e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>3e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>3e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>3e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>3e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>3e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>3e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>3e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>3e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>3e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>3e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>3e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>3e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>3e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>3e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>3e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>3e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>3e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>3e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>3e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>3e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>3e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>3e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>3e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>3e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>3e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>3e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>3e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>3e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>3e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>3e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>3e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>3e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>3e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>3e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>3e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>3e93f8		00 00 00 00 00 00 00 00
.3e9400						SS_UPlus_TXT
>3e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>3e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>3e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>3e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>3e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>3e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>3e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>3e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>3e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>3e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>3e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>3e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>3e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>3e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>3e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>3e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>3e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>3e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>3e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>3e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>3e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>3e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>3ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>3ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>3ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>3ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>3ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>3ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>3ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>3ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>3ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>3ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>3ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>3ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>3ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>3ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>3ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>3ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>3ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>3ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>3ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>3ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>3eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>3eabf8		00 00 00 00 00 00 00 00
.3eac00						SS_U_TXT
>3eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>3eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>3eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>3eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>3eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>3eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>3eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>3eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>3eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>3eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>3eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>3eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>3eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>3eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>3eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>3eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>3eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>3eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>3eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>3eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>3eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>3eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>3eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3ebbf8		00 00 00 00 00 00 00 00

;******  Return to file: src\kernel.asm

.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_SPLASH
>3f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>3f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>3f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>3f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>3f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>3f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>3f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>3f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>3f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>3f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>3f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>3f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>3f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>3f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>3f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>3f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>3f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>3f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>3f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>3f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>3f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>3f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>3f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>3f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>3f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>3f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>3f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>3f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>3f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>3f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>3f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>3f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>3f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>3f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>3f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>3f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>3f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>3f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>3f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>3f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>3f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>3f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>3f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>3f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>3f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>3f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>3f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>3f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>3f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>3f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>3f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>3f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>3f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>3f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>3f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>3f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>3f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>3f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>3f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>3f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>3f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>3f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>3f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>3f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>3f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>3f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>3f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>3f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>3f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>3f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>3f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>3f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>3f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>3f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>3f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>3f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>3f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>3f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>3f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>3f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>3f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>3f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>3f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>3f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>3f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>3f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>3f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>3f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>3f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>3f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>3f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>3f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>3f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>3f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>3f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>3f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>3f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>3f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>3f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>3f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>3f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>3f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>3f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>3f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>3f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>3f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>3f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>3f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>3f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>3f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>3f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>3f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>3f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>3f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>3f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>3f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>3f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>3f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>3f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>3f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>3f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>3f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>3f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>3f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>3f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>3f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>3f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>3f0ff8		0f 0f 0f 0f f0 f0 f0 00
>3fffff		ff				.byte $FF               ; Last byte of flash data

;******  End of listing
