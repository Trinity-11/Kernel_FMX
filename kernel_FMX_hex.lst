
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=2 -D TARGET_SYS=1 --long-address --flat --intel-hex -o kernel_FMX.hex --list kernel_FMX_hex.lst --labels=kernel_FMX_hex.lbl src\kernel.asm
; Sat May 15 16:41:34 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=2						TARGET=2
=1						TARGET_SYS=1

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$380000					  START_OF_FLASH := $380000                   ; The Foenix FMX Flash starts at $380000
=$390400					  START_OF_KERNEL := $390400                  ; The kernel itself starts at $390400
=$3a0000					  START_OF_BASIC := $3A0000                   ; The BASIC flash code starts at $3A0000
=$3b0000					  START_OF_CREDITS := $3B0000                 ; The credits screen starts at $3B0000
=$3e0000					  START_OF_SPLASH := $3E0000                  ; SplashScreen Code and Data $3E0000
=$3f0000					  START_OF_FONT := $3F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$00ff00					    ISR_BEGIN        = $00FF00 ; Byte  Beginning of CPU vectors in Direct page
=$00ff00					    HRESET           = $00FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$00ff10					    HCOP             = $00FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$00ff20					    HBRK             = $00FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$00ff30					    HABORT           = $00FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$00ff40					    HNMI             = $00FF40 ;32 Bytes Handle NMI
=$00ff60					    HIRQ             = $00FF60 ;32 Bytes Handle IRQ
=$00ff80					    Unused_FF80      = $00FF80 ;End of direct page Interrrupt handlers
=$00ffe0					    VECTORS_BEGIN    = $00FFE0 ;0 Byte  Interrupt vectors
=$00ffe0					    JMP_READY        = $00FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$00ffe4					    VECTOR_COP       = $00FFE4 ;2 Bytes Native COP Interrupt vector
=$00ffe6					    VECTOR_BRK       = $00FFE6 ;2 Bytes Native BRK Interrupt vector
=$00ffe8					    VECTOR_ABORT     = $00FFE8 ;2 Bytes Native ABORT Interrupt vector
=$00ffea					    VECTOR_NMI       = $00FFEA ;2 Bytes Native NMI Interrupt vector
=$00ffec					    VECTOR_RESET     = $00FFEC ;2 Bytes Unused (Native RESET vector)
=$00ffee					    VECTOR_IRQ       = $00FFEE ;2 Bytes Native IRQ Vector
=$00fff0					    RETURN           = $00FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$00fff4					    VECTOR_ECOP      = $00FFF4 ;2 Bytes Emulation mode interrupt handler
=$00fff6					    VECTOR_EBRK      = $00FFF6 ;2 Bytes Emulation mode interrupt handler
=$00fff8					    VECTOR_EABORT    = $00FFF8 ;2 Bytes Emulation mode interrupt handler
=$00fffa					    VECTOR_ENMI      = $00FFFA ;2 Bytes Emulation mode interrupt handler
=$00fffc					    VECTOR_ERESET    = $00FFFC ;2 Bytes Emulation mode interrupt handler
=$00fffe					    VECTOR_EIRQ      = $00FFFE ;2 Bytes Emulation mode interrupt handler
=$010000					    VECTORS_END      = $010000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>380000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>380003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>380005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>380007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>380009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>38000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>38000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>380012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>380013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>380014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>380016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.ff00		18		clc		RHRESET         CLC
.ff01		fb		xce		                XCE
.ff02		5c 00 10 00	jmp $001000	                JML BOOT
.ff10						RHCOP
.ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff12		8b		phb		                PHB
.ff13		0b		phd		                PHD
.ff14		48		pha		                PHA
.ff15		da		phx		                PHX
.ff16		5a		phy		                PHY
.ff17		5c 08 10 00	jmp $001008	                JML BREAK
.ff20						RHBRK
.ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff22		8b		phb		                PHB
.ff23		0b		phd		                PHD
.ff24		48		pha		                PHA
.ff25		da		phx		                PHX
.ff26		5a		phy		                PHY
.ff27		5c 08 10 00	jmp $001008	                JML BREAK
.ff30						RHABORT
.ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff32		8b		phb		                PHB
.ff33		0b		phd		                PHD
.ff34		48		pha		                PHA
.ff35		da		phx		                PHX
.ff36		5a		phy		                PHY
.ff37		5c 08 10 00	jmp $001008	                JML BREAK
.ff40						 RHNMI
.ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff42		8b		phb		                PHB
.ff43		0b		phd		                PHD
.ff44		48		pha		                PHA
.ff45		da		phx		                PHX
.ff46		5a		phy		                PHY
.ff47		22 96 19 38	jsl $381996	                JSL NMI_HANDLER
.ff4b		7a		ply		                PLY
.ff4c		fa		plx		                PLX
.ff4d		68		pla		                PLA
.ff4e		2b		pld		                PLD
.ff4f		ab		plb		                PLB
.ff50		40		rti		                RTI
.ff60						RHIRQ
.ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.ff62		8b		phb		                PHB
.ff63		0b		phd		                PHD
.ff64		48		pha		                PHA
.ff65		da		phx		                PHX
.ff66		5a		phy		                PHY
.ff67		22 c0 17 38	jsl $3817c0	                JSL IRQ_HANDLER
.ff6b		7a		ply		                PLY
.ff6c		fa		plx		                PLX
.ff6d		68		pla		                PLA
.ff6e		2b		pld		                PLD
.ff6f		ab		plb		                PLB
.ff70		40		rti		                RTI
.ffe0		5c 04 00 3a	jmp $3a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>ffec		00 00				                .word $0000    ; FFEC
>ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.fff0		5c 95 06 39	jmp $390695	RRETURN         JML IRETURN
>fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$3a0000					    BASIC = $3A0000
=3801092					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.381000	1000	5c 00 04 39	jmp $390400	BOOT            JML IBOOT
.381004	1004	5c a0 05 39	jmp $3905a0	RESTORE         JML IRESTORE
.381008	1008	5c 34 06 39	jmp $390634	BREAK           JML IBREAK
.38100c	100c	5c 7b 06 39	jmp $39067b	READY           JML IREADY
.381010	1010	5c 99 10 39	jmp $391099	SCINIT          JML ISCINIT
.381014	1014	5c 9a 10 39	jmp $39109a	IOINIT          JML IIOINIT
.381018	1018	5c 37 07 39	jmp $390737	PUTC            JML IPUTC
.38101c	101c	5c 20 07 39	jmp $390720	PUTS            JML IPUTS
.381020	1020	5c db 07 39	jmp $3907db	PUTB            JML IPUTB
.381024	1024	5c 7e 3b 39	jmp $393b7e	PUTBLOCK        JML IPUTBLOCK
.381028	1028	5c 20 77 39	jmp $397720	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.38102c	102c	5c d6 77 39	jmp $3977d6	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.381030	1030	5c 9d 10 39	jmp $39109d	OPEN            JML IOPEN
.381034	1034	5c 9e 10 39	jmp $39109e	CLOSE           JML ICLOSE
.381038	1038	5c 96 06 39	jmp $390696	SETIN           JML ISETIN
.38103c	103c	5c 9f 06 39	jmp $39069f	SETOUT          JML ISETOUT
.381040	1040	5c 9f 10 39	jmp $39109f	GETB            JML IGETB
.381044	1044	5c 1b 3b 39	jmp $393b1b	GETBLOCK        JML IGETBLOCK
.381048	1048	5c e4 06 39	jmp $3906e4	GETCH           JML IGETCH
.38104c	104c	5c b1 06 39	jmp $3906b1	GETCHW          JML IGETCHW
.381050	1050	5c a8 06 39	jmp $3906a8	GETCHE          JML IGETCHE
.381054	1054	5c a0 10 39	jmp $3910a0	GETS            JML IGETS
.381058	1058	5c a1 10 39	jmp $3910a1	GETLINE         JML IGETLINE
.38105c	105c	5c a2 10 39	jmp $3910a2	GETFIELD        JML IGETFIELD
.381060	1060	5c a3 10 39	jmp $3910a3	TRIM            JML ITRIM
.381064	1064	5c a4 10 39	jmp $3910a4	PRINTC          JML IPRINTC
.381068	1068	5c a5 10 39	jmp $3910a5	PRINTS          JML IPRINTS
.38106c	106c	5c dc 07 39	jmp $3907dc	PRINTCR         JML IPRINTCR
.381070	1070	5c a6 10 39	jmp $3910a6	PRINTF          JML IPRINTF
.381074	1074	5c a7 10 39	jmp $3910a7	PRINTI          JML IPRINTI
.381078	1078	5c 90 08 39	jmp $390890	PRINTH          JML IPRINTH
.38107c	107c	5c a8 10 39	jmp $3910a8	PRINTAI         JML IPRINTAI
.381080	1080	5c ad 08 39	jmp $3908ad	PRINTAH         JML IPRINTAH
.381084	1084	5c 74 08 39	jmp $390874	LOCATE          JML ILOCATE
.381088	1088	5c a9 10 39	jmp $3910a9	PUSHKEY         JML IPUSHKEY
.38108c	108c	5c aa 10 39	jmp $3910aa	PUSHKEYS        JML IPUSHKEYS
.381090	1090	5c 3c 08 39	jmp $39083c	CSRRIGHT        JML ICSRRIGHT
.381094	1094	5c 4b 08 39	jmp $39084b	CSRLEFT         JML ICSRLEFT
.381098	1098	5c 5a 08 39	jmp $39085a	CSRUP           JML ICSRUP
.38109c	109c	5c 69 08 39	jmp $390869	CSRDOWN         JML ICSRDOWN
.3810a0	10a0	5c 2b 08 39	jmp $39082b	CSRHOME         JML ICSRHOME
.3810a4	10a4	5c 7f 08 39	jmp $39087f	SCROLLUP        JML ISCROLLUP
.3810a8	10a8	5c fb 08 39	jmp $3908fb	CLRSCREEN       JML ICLRSCREEN
.3810ac	10ac	5c a6 09 39	jmp $3909a6	INITCHLUT	    JML IINITCHLUT
.3810b0	10b0	5c cd 0b 39	jmp $390bcd	INITSUPERIO	    JML IINITSUPERIO
.3810b4	10b4	5c 6c 74 39	jmp $39746c	INITKEYBOARD    JML IINITKEYBOARD
.3810b8	10b8	5c 00 7f 39	jmp $397f00	INITMOUSE       JML IINITMOUSE
.3810bc	10bc	5c ae 0b 39	jmp $390bae	INITCURSOR      JML IINITCURSOR
.3810c0	10c0	5c 76 0b 39	jmp $390b76	INITFONTSET     JML IINITFONTSET
.3810c4	10c4	5c b3 09 39	jmp $3909b3	INITGAMMATABLE  JML IINITGAMMATABLE
.3810c8	10c8	5c d3 09 39	jmp $3909d3	INITALLLUT      JML IINITALLLUT
.3810cc	10cc	5c 99 0a 39	jmp $390a99	INITVKYTXTMODE  JML IINITVKYTXTMODE
.3810d0	10d0	5c 1a 0b 39	jmp $390b1a	INITVKYGRPMODE  JML IINITVKYGRPMODE
.3810d4	10d4	5c 75 0b 39	jmp $390b75	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810d8	10d8	5c 75 0b 39	jmp $390b75	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.3810dc	10dc	5c e7 0c 39	jmp $390ce7	INITCODEC       JML IINITCODEC
.3810e0	10e0	5c 76 0d 39	jmp $390d76	RESETCODEC      JML IRESETCODEC
.3810e4	10e4	5c e4 0d 39	jmp $390de4	BMP_PARSER      JML IBMP_PARSER
.3810e8	10e8	5c 99 0d 39	jmp $390d99	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.3810ec	10ec	5c 27 31 39	jmp $393127	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.3810f0	10f0	5c 01 4e 39	jmp $394e01	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.3810f4	10f4	5c 94 4e 39	jmp $394e94	F_CREATE        JML IF_CREATE       ; create a new file
.3810f8	10f8	5c ce 4e 39	jmp $394ece	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.3810fc	10fc	5c 67 4f 39	jmp $394f67	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.381100	1100	5c 02 4f 39	jmp $394f02	F_READ          JML IF_READ         ; read the next cluster from the file
.381104	1104	5c 11 50 39	jmp $395011	F_DELETE        JML IF_DELETE       ; delete a file / directory
.381108	1108	5c d3 4f 39	jmp $394fd3	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.38110c	110c	5c 0d 50 39	jmp $39500d	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.381110	1110	5c aa 50 39	jmp $3950aa	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.381114	1114	5c d1 50 39	jmp $3950d1	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.381118	1118	5c d5 50 39	jmp $3950d5	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.38111c	111c	5c 30 54 39	jmp $395430	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.381120	1120	5c f1 3a 39	jmp $393af1	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.381124	1124	5c c9 54 39	jmp $3954c9	F_RUN           JML IF_RUN          ; Load an run a binary file
.381128	1128	5c 1c 3f 39	jmp $393f1c	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.38112c	112c	5c 15 0b 39	jmp $390b15	SETSIZES        JML ISETSIZES
.381130	1130	5c 18 56 39	jmp $395618	F_COPY          JML IF_COPY         ; Copy a file
.381134	1134	5c 62 55 39	jmp $395562	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.381138	1138	5c b6 55 39	jmp $3955b6	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.38113c	113c	5c 81 77 39	jmp $397781	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.381140	1140	5c c1 79 39	jmp $3979c1	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.381144	1144	5c 52 0b 39	jmp $390b52	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.381700	1700	5c 93 65 39	jmp $396593	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.381704	1704	5c ad 10 39	jmp $3910ad	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.381708	1708	5c ad 10 39	jmp $3910ad	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.38170c	170c	5c ad 10 39	jmp $3910ad	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.381710	1710	5c ad 10 39	jmp $3910ad	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.381714	1714	5c ad 10 39	jmp $3910ad	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.381718	1718	5c ad 10 39	jmp $3910ad	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.38171c	171c	5c 10 80 39	jmp $398010	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.381720	1720	5c d4 75 39	jmp $3975d4	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.381724	1724	5c ad 10 39	jmp $3910ad	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.381728	1728	5c ad 10 39	jmp $3910ad	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.38172c	172c	5c ad 10 39	jmp $3910ad	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.381730	1730	5c ad 10 39	jmp $3910ad	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.381734	1734	5c ad 10 39	jmp $3910ad	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.381738	1738	5c ad 10 39	jmp $3910ad	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.38173c	173c	5c ad 10 39	jmp $3910ad	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.381740	1740	5c ad 10 39	jmp $3910ad	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.381744	1744	5c ad 10 39	jmp $3910ad	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.381748	1748	5c ad 10 39	jmp $3910ad	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.38174c	174c	5c ad 10 39	jmp $3910ad	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.381750	1750	5c ad 10 39	jmp $3910ad	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.381754	1754	5c ad 10 39	jmp $3910ad	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.381758	1758	5c ad 10 39	jmp $3910ad	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.38175c	175c	5c ad 10 39	jmp $3910ad	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.381760	1760	5c ad 10 39	jmp $3910ad	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.381764	1764	5c ad 10 39	jmp $3910ad	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.381768	1768	5c ad 10 39	jmp $3910ad	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.38176c						ISETHANDLER
.38176c		8b		phb		                PHB
.38176d		08		php		                PHP
.38176e		48		pha		                PHA             ; begin setdbr macro
.38176f		08		php		                PHP
.381770		e2 20		sep #$20	                SEP #$20        ; set A short
.381772		a9 00		lda #$00	                LDA #0
.381774		48		pha		                PHA
.381775		ab		plb		                PLB
.381776		28		plp		                PLP
.381777		68		pla		                PLA             ; end setdbr macro
.381778		e2 20		sep #$20	                SEP #$20        ; set A short
.38177a		c2 10		rep #$10	                REP #$10        ; set X long
.38177c		48		pha		                PHA                     ; Save the interrupt number
.38177d		5a		phy		                PHY                     ; Save the handler's bank
.38177e		da		phx		                PHX                     ; Save the handler's address
.38177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.381782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.381782		29 30		and #$30	                AND #$30                ; Isolate the block #
.381784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.381785		83 01		sta $01,s	                STA l_vector
.381787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.381789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.38178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.38178c		0a		asl a		                ASL A
.38178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.38178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.381791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.381792		a9 00		lda #$00	                LDA #<VEC_INT_START
.381794		63 01		adc $01,s	                ADC l_vector
.381796		83 01		sta $01,s	                STA l_vector
.381798		a9 17		lda #$17	                LDA #>VEC_INT_START
.38179a		63 02		adc $02,s	                ADC l_vector+1
.38179c		83 02		sta $02,s	                STA l_vector+1
.38179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.38179f		a0 00 00	ldy #$0000	                LDY #0
.3817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.3817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.3817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.3817a7		a3 03		lda $03,s	                LDA l_handler
.3817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.3817ac		a3 04		lda $04,s	                LDA l_handler+1
.3817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.3817b1		a3 05		lda $05,s	                LDA l_handler+2
.3817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.3817b5		c2 20		rep #$20	                REP #$20        ; set A long
.3817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.3817b8		3b		tsc		                TSC
.3817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.3817bc		1b		tcs		                TCS
.3817bd		28		plp		                PLP
.3817be		ab		plb		                PLB
.3817bf		6b		rtl		                RTL
.3817c0						IRQ_HANDLER
.3817c0		08		php		                PHP
.3817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.3817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.3817c7		d0 03		bne $3817cc	                BNE process_reg0
.3817c9		82 80 00	brl $38184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.3817cc						process_reg0
.3817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.3817ce		f0 0c		beq $3817dc	                BEQ continue            ; If not: skip the rest of this macro
.3817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.3817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.3817da		e2 20		sep #$20	                SEP #$20        ; set A short
.3817dc						continue
.3817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.3817de		f0 0c		beq $3817ec	                BEQ continue            ; If not: skip the rest of this macro
.3817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.3817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.3817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3817ec						continue
.3817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.3817ee		f0 0c		beq $3817fc	                BEQ continue            ; If not: skip the rest of this macro
.3817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.3817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.3817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.3817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3817fc						continue
.3817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.3817fe		f0 0c		beq $38180c	                BEQ continue            ; If not: skip the rest of this macro
.381800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.381802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.38180a		e2 20		sep #$20	                SEP #$20        ; set A short
.38180c						continue
.38180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.38180e		f0 0c		beq $38181c	                BEQ continue            ; If not: skip the rest of this macro
.381810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.381812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.38181a		e2 20		sep #$20	                SEP #$20        ; set A short
.38181c						continue
.38181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.38181e		f0 0c		beq $38182c	                BEQ continue            ; If not: skip the rest of this macro
.381820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.381822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.38182a		e2 20		sep #$20	                SEP #$20        ; set A short
.38182c						continue
.38182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.38182e		f0 0c		beq $38183c	                BEQ continue            ; If not: skip the rest of this macro
.381830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.381832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.38183a		e2 20		sep #$20	                SEP #$20        ; set A short
.38183c						continue
.38183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.38183e		f0 0c		beq $38184c	                BEQ continue            ; If not: skip the rest of this macro
.381840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.381842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.381846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.38184a		e2 20		sep #$20	                SEP #$20        ; set A short
.38184c						continue
.38184c						CHECK_PENDING_REG1
.38184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.381850		d0 03		bne $381855	                BNE process_reg1
.381852		82 80 00	brl $3818d5	                BRL CHECK_PENDING_REG2
.381855						process_reg1
.381855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.381857		f0 0c		beq $381865	                BEQ continue            ; If not: skip the rest of this macro
.381859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.38185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.381863		e2 20		sep #$20	                SEP #$20        ; set A short
.381865						continue
.381865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.381867		f0 0c		beq $381875	                BEQ continue            ; If not: skip the rest of this macro
.381869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.38186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.381873		e2 20		sep #$20	                SEP #$20        ; set A short
.381875						continue
.381875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.381877		f0 0c		beq $381885	                BEQ continue            ; If not: skip the rest of this macro
.381879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.38187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.381883		e2 20		sep #$20	                SEP #$20        ; set A short
.381885						continue
.381885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.381887		f0 0c		beq $381895	                BEQ continue            ; If not: skip the rest of this macro
.381889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.38188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.381893		e2 20		sep #$20	                SEP #$20        ; set A short
.381895						continue
.381895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.381897		f0 0c		beq $3818a5	                BEQ continue            ; If not: skip the rest of this macro
.381899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.38189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.3818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818a5						continue
.3818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.3818a7		f0 0c		beq $3818b5	                BEQ continue            ; If not: skip the rest of this macro
.3818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.3818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.3818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818b5						continue
.3818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.3818b7		f0 0c		beq $3818c5	                BEQ continue            ; If not: skip the rest of this macro
.3818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.3818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.3818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818c5						continue
.3818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.3818c7		f0 0c		beq $3818d5	                BEQ continue            ; If not: skip the rest of this macro
.3818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.3818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.3818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3818d5						continue
.3818d5						CHECK_PENDING_REG2
.3818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.3818d9		d0 03		bne $3818de	                BNE process_reg2
.3818db		82 80 00	brl $38195e	                BRL CHECK_PENDING_REG3
.3818de						process_reg2
.3818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.3818e0		f0 0c		beq $3818ee	                BEQ continue            ; If not: skip the rest of this macro
.3818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.3818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.3818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3818ee						continue
.3818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.3818f0		f0 0c		beq $3818fe	                BEQ continue            ; If not: skip the rest of this macro
.3818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.3818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.3818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.3818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.3818fe						continue
.3818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.381900		f0 0c		beq $38190e	                BEQ continue            ; If not: skip the rest of this macro
.381902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.381904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.38190c		e2 20		sep #$20	                SEP #$20        ; set A short
.38190e						continue
.38190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.381910		f0 0c		beq $38191e	                BEQ continue            ; If not: skip the rest of this macro
.381912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.381914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.38191c		e2 20		sep #$20	                SEP #$20        ; set A short
.38191e						continue
.38191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.381920		f0 0c		beq $38192e	                BEQ continue            ; If not: skip the rest of this macro
.381922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.381924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.38192c		e2 20		sep #$20	                SEP #$20        ; set A short
.38192e						continue
.38192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.381930		f0 0c		beq $38193e	                BEQ continue            ; If not: skip the rest of this macro
.381932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.381934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.38193c		e2 20		sep #$20	                SEP #$20        ; set A short
.38193e						continue
.38193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.381940		f0 0c		beq $38194e	                BEQ continue            ; If not: skip the rest of this macro
.381942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.381944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.38194c		e2 20		sep #$20	                SEP #$20        ; set A short
.38194e						continue
.38194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.381950		f0 0c		beq $38195e	                BEQ continue            ; If not: skip the rest of this macro
.381952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.381954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.381958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.38195c		e2 20		sep #$20	                SEP #$20        ; set A short
.38195e						continue
.38195e						CHECK_PENDING_REG3
.38195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.381962		f0 30		beq $381994	                BEQ EXIT_IRQ_HANDLE
.381964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.381966		f0 0c		beq $381974	                BEQ continue            ; If not: skip the rest of this macro
.381968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.38196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.381972		e2 20		sep #$20	                SEP #$20        ; set A short
.381974						continue
.381974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.381976		f0 0c		beq $381984	                BEQ continue            ; If not: skip the rest of this macro
.381978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.38197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.381982		e2 20		sep #$20	                SEP #$20        ; set A short
.381984						continue
.381984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.381986		f0 0c		beq $381994	                BEQ continue            ; If not: skip the rest of this macro
.381988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.38198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.38198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.381992		e2 20		sep #$20	                SEP #$20        ; set A short
.381994						continue
.381994						EXIT_IRQ_HANDLE
.381994		28		plp		                PLP
.381995		6b		rtl		                RTL
.381996		6b		rtl		NMI_HANDLER     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1064					    STATUS_PORT 	= $AF1064
=$af1064					    KBD_STATUS      = $AF1064
=$af1060					    KBD_OUT_BUF 	= $AF1060
=$af1060					    KBD_INPT_BUF	= $AF1060
=$af1064					    KBD_CMD_BUF		= $AF1064
=$af1060					    KBD_DATA_BUF	= $AF1060
=$af1060					    PORT_A		    = $AF1060
=$af1061					    PORT_B			= $AF1061
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.390400						IBOOT
.390400		18		clc		                CLC               ; clear the carry flag
.390401		fb		xce		                XCE               ; move carry to emulation flag.
.390402		78		sei		                SEI               ; Disable interrupts
.390403		c2 30		rep #$30	                REP #$30        ; set A&X long
.390405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.390408		1b		tcs		                TAS
.390409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.39040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.39040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.390412		54 00 38	mvn $38,$00	                MVN $38,$00       ; Or during soft loading of the kernel from the debug port
.390415		48		pha		                PHA             ; begin setdp macro
.390416		08		php		                PHP
.390417		c2 20		rep #$20	                REP #$20        ; set A long
.390419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39041c		5b		tcd		                TCD
.39041d		28		plp		                PLP
.39041e		68		pla		                PLA             ; end setdp macro
.39041f		e2 20		sep #$20	                SEP #$20        ; set A short
.390421		a2 00 00	ldx #$0000	                LDX #$0000
.390424		a9 00		lda #$00	                LDA #$00
.390426						CLEAR_MEM_LOOP
.390426		95 00		sta $00,x	                STA $0000, X
.390428		e8		inx		                INX
.390429		e0 00 01	cpx #$0100	                CPX #$0100
.39042c		d0 f8		bne $390426	                BNE CLEAR_MEM_LOOP
.39042e		ea		nop		                NOP
.39042f		a9 ff		lda #$ff	                LDA #$FF
.390431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.390435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.390439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.39043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.390441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.390445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.390449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.39044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.390451		22 cc 0c 39	jsl $390ccc	                JSL INITRTC               ; Initialize the RTC
.390455		e2 20		sep #$20	                SEP #$20        ; set A short
.390457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.39045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.39045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.39045f		d0 1e		bne $39047f	                BNE SkipInitExpC100C200
.390461		c2 20		rep #$20	                REP #$20        ; set A long
.390463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.390467		c9 64 00	cmp #$0064	                CMP #$0064
.39046a		f0 0f		beq $39047b	                BEQ InitC100ESID
.39046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.39046f		d0 0e		bne $39047f	                BNE SkipInitExpC100C200
.390471		22 ab 69 39	jsl $3969ab	                JSL SIMPLE_INIT_ETHERNET_CTRL
.390475		22 32 6a 39	jsl $396a32	                JSL INIT_EVID_VID_MODE
.390479		80 04		bra $39047f	                BRA SkipInitExpC100C200
.39047b						InitC100ESID:
.39047b		22 ab 69 39	jsl $3969ab	                JSL SIMPLE_INIT_ETHERNET_CTRL
.39047f						SkipInitExpC100C200:
.39047f		e2 20		sep #$20	                SEP #$20        ; set A short
.390481		c2 10		rep #$10	                REP #$10        ; set X long
.390483		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.390485		8f 00 f1 af	sta $aff100	                STA $AFF100
.390489		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.39048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.39048f		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.390491		8f 00 f1 af	sta $aff100	                STA $AFF100
.390495		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.390497		8f 00 f1 af	sta $aff100	                STA $AFF100
.39049b		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.39049d		85 1e		sta $1e		                STA CURCOLOR
.39049f		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.3904a3		29 01		and #$01	                AND #$01
.3904a5		c9 01		cmp #$01	                CMP #$01
.3904a7		d0 14		bne $3904bd	                BNE Alreadyin640480Mode
.3904a9		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904ad		29 fc		and #$fc	                AND #$FC
.3904af		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904b3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904b7		09 01		ora #$01	                ORA #$01
.3904b9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.3904bd						Alreadyin640480Mode
.3904bd		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.3904c1		29 fc		and #$fc	                AND #$FC
.3904c3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.3904c7		a9 00		lda #$00	                LDA #0
.3904c9		22 38 10 00	jsl $001038	                JSL SETIN
.3904cd		22 3c 10 00	jsl $00103c	                JSL SETOUT
.3904d1		22 c5 6b 39	jsl $396bc5	                JSL ANSI_INIT
.3904d5		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.3904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.3904dd		c2 30		rep #$30	                REP #$30        ; set A&X long
.3904df		22 b0 10 00	jsl $0010b0	                JSL INITSUPERIO
.3904e3		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.3904e7		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.3904eb		22 8f 0b 39	jsl $390b8f	                JSL INITMOUSEPOINTER
.3904ef		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.3904f3		a9 01 00	lda #$0001	                LDA #CHAN_COM1    ; Initialize COM1
.3904f6		22 30 57 39	jsl $395730	                JSL UART_SELECT
.3904fa		22 9c 57 39	jsl $39579c	                JSL UART_INIT
.3904fe		a9 02 00	lda #$0002	                LDA #CHAN_COM2    ; Initialize COM2
.390501		22 30 57 39	jsl $395730	                JSL UART_SELECT
.390505		22 9c 57 39	jsl $39579c	                JSL UART_INIT
.390509		c2 20		rep #$20	                REP #$20        ; set A long
.39050b		48		pha		                PHA             ; begin setdp macro
.39050c		08		php		                PHP
.39050d		c2 20		rep #$20	                REP #$20        ; set A long
.39050f		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390512		5b		tcd		                TCD
.390513		28		plp		                PLP
.390514		68		pla		                PLA             ; end setdp macro
.390515		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD        ; Initialize the keyboard
.390519		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.39051d		58		cli		                CLI
.39051e		e2 20		sep #$20	                SEP #$20        ; set A short
.390520		c2 10		rep #$10	                REP #$10        ; set X long
.390522		48		pha		                PHA             ; begin setdbr macro
.390523		08		php		                PHP
.390524		e2 20		sep #$20	                SEP #$20        ; set A short
.390526		a9 39		lda #$39	                LDA #`greet_msg
.390528		48		pha		                PHA
.390529		ab		plb		                PLB
.39052a		28		plp		                PLP
.39052b		68		pla		                PLA             ; end setdbr macro
.39052c		a2 00 00	ldx #$0000	                LDX #0
.39052f		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.390533		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.390537		e8		inx		                INX
.390538		e0 00 10	cpx #$1000	                CPX #$1000
.39053b		d0 f2		bne $39052f	                BNE jmpcopy
.39053d						retry_boot
.39053d		22 4a 3e 39	jsl $393e4a	                JSL DOS_INIT            ; Initialize the "disc operating system"
.390541		22 4d 80 39	jsl $39804d	                JSL BOOT_SOUND          ; Play the boot sound
.390545		22 00 00 3e	jsl $3e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.390549		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.39054d		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.390551						greet
.390551		c2 30		rep #$30	                REP #$30        ; set A&X long
.390553		48		pha		                PHA             ; begin setdbr macro
.390554		08		php		                PHP
.390555		e2 20		sep #$20	                SEP #$20        ; set A short
.390557		a9 39		lda #$39	                LDA #`greet_msg
.390559		48		pha		                PHA
.39055a		ab		plb		                PLB
.39055b		28		plp		                PLP
.39055c		68		pla		                PLA             ; end setdbr macro
.39055d		a2 04 81	ldx #$8104	                LDX #<>greet_msg
.390560		22 17 07 39	jsl $390717	                JSL IPRINT              ; print the first line
.390564		22 26 09 39	jsl $390926	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.390568		22 12 6b 39	jsl $396b12	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.39056c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39056e		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.390571		1b		tcs		                TAS
.390572		e2 20		sep #$20	                SEP #$20        ; set A short
.390574		c2 10		rep #$10	                REP #$10        ; set X long
.390576		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.39057a		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.39057c		f0 10		beq $39058e	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.39057e		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.390580		f0 1e		beq $3905a0	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.390582		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.390584		f0 62		beq $3905e8	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.390586		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.390588		f0 1d		beq $3905a7	                BEQ BOOTSDC           ; Yes: boot via the SDC
.39058a		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.39058c		f0 39		beq $3905c7	                BEQ BOOTIDE           ; Yes: boot via the IDE
.39058e		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.390592		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.390594		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.390596		f0 2f		beq $3905c7	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.390598		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.39059a		f0 0b		beq $3905a7	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.39059c		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.39059e		f0 48		beq $3905e8	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.3905a0						IRESTORE
.3905a0		5c 00 00 3a	jmp $3a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.3905a4		ea		nop		CREDIT_LOCK     NOP
.3905a5		80 fd		bra $3905a4	                BRA CREDIT_LOCK
.3905a7		a2 9e 85	ldx #$859e	BOOTSDC         LDX #<>sdc_boot
.3905aa		22 17 07 39	jsl $390717	                JSL IPRINT
.3905ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3905b0		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.3905b2		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905b6		22 1c 3f 39	jsl $393f1c	                JSL DOS_MOUNT         ; Mount the SDC
.3905ba		90 06		bcc $3905c2	                BCC sdc_error         ; Print an error message if couldn't get anything
.3905bc		22 d7 40 39	jsl $3940d7	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.3905c0		80 de		bra $3905a0	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.3905c2		a2 22 85	ldx #$8522	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.3905c5		80 40		bra $390607	                BRA PR_BOOT_ERROR
.3905c7		a2 b5 85	ldx #$85b5	BOOTIDE         LDX #<>ide_boot
.3905ca		22 17 07 39	jsl $390717	                JSL IPRINT
.3905ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3905d0		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.3905d2		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905d6		22 1c 3f 39	jsl $393f1c	                JSL DOS_MOUNT         ; Mount the IDE drive
.3905da		90 07		bcc $3905e3	                BCC hdc_error         ; Print an error message if couldn't get anything
.3905dc		22 d7 40 39	jsl $3940d7	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.3905e0		82 bd ff	brl $3905a0	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.3905e3		a2 3e 85	ldx #$853e	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.3905e6		80 1f		bra $390607	                BRA PR_BOOT_ERROR
.3905e8		a2 87 85	ldx #$8587	BOOTFLOPPY      LDX #<>fdc_boot
.3905eb		22 17 07 39	jsl $390717	                JSL IPRINT
.3905ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3905f1		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.3905f3		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3905f7		22 2c 63 39	jsl $39632c	                JSL FDC_MOUNT         ; Mount the floppy drive
.3905fb		90 07		bcc $390604	                BCC fdc_error         ; Print an error message if couldn't get anything
.3905fd		22 d7 40 39	jsl $3940d7	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.390601		82 9c ff	brl $3905a0	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.390604		a2 61 85	ldx #$8561	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.390607		22 17 07 39	jsl $390717	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.39060b		a2 fd 84	ldx #$84fd	                LDX #<>boot_retry     ; Print the boot retry prompt
.39060e		22 17 07 39	jsl $390717	                JSL IPRINT
.390612		22 b1 06 39	jsl $3906b1	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.390616		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.390618		d0 03		bne $39061d	                BNE chk_r_lc
.39061a		82 20 ff	brl $39053d	                BRL retry_boot        ; Yes: retry the boot sequence
.39061d		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.39061f		d0 03		bne $390624	                BNE chk_b_lc
.390621		82 19 ff	brl $39053d	                BRL retry_boot
.390624		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.390626		d0 03		bne $39062b	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.390628		82 75 ff	brl $3905a0	                BRL BOOTBASIC
.39062b						chk_b_lc_not:
.39062b		c9 42		cmp #$42	                CMP #'B'
.39062d		d0 03		bne $390632	                BNE chk_b_lc_not0
.39062f		82 6e ff	brl $3905a0	                BRL BOOTBASIC
.390632						chk_b_lc_not0:
.390632		80 de		bra $390612	                BRA boot_wait_key     ; No: keep waiting
.390634						IBREAK
.390634		48		pha		                PHA             ; begin setdp macro
.390635		08		php		                PHP
.390636		c2 20		rep #$20	                REP #$20        ; set A long
.390638		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39063b		5b		tcd		                TCD
.39063c		28		plp		                PLP
.39063d		68		pla		                PLA             ; end setdp macro
.39063e		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.39063f		8f 48 02 00	sta $000248	                STA CPUY
.390643		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.390644		8f 46 02 00	sta $000246	                STA CPUX
.390648		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.390649		8f 44 02 00	sta $000244	                STA CPUA
.39064d		68		pla		                PLA
.39064e		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.390652		e2 20		sep #$20	                SEP #$20        ; set A short
.390654		68		pla		                PLA             ; Pull Data Bank (8 bits)
.390655		8f 4e 02 00	sta $00024e	                STA CPUDBR
.390659		68		pla		                PLA             ; Pull Flags (8 bits)
.39065a		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.39065e		c2 20		rep #$20	                REP #$20        ; set A long
.390660		68		pla		                PLA             ; Pull Program Counter (16 bits)
.390661		8f 40 02 00	sta $000240	                STA CPUPC
.390665		e2 20		sep #$20	                SEP #$20        ; set A short
.390667		68		pla		                PLA             ; Pull Program Bank (8 bits)
.390668		8f 42 02 00	sta $000242	                STA CPUPBR
.39066c		c2 20		rep #$20	                REP #$20        ; set A long
.39066e		3b		tsc		                TSA             ; Get the stack
.39066f		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.390673		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.390676		1b		tcs		                TAS
.390677		5c 04 00 3a	jmp $3a0004	                JML MONITOR
.39067b						IREADY
.39067b		48		pha		                PHA             ; begin setdbr macro
.39067c		08		php		                PHP
.39067d		e2 20		sep #$20	                SEP #$20        ; set A short
.39067f		a9 39		lda #$39	                LDA #`ready_msg
.390681		48		pha		                PHA
.390682		ab		plb		                PLB
.390683		28		plp		                PLP
.390684		68		pla		                PLA             ; end setdbr macro
.390685		e2 20		sep #$20	                SEP #$20        ; set A short
.390687		a2 d0 85	ldx #$85d0	                LDX #<>ready_msg
.39068a		22 17 07 39	jsl $390717	                JSL IPRINT
.39068e						IREADYWAIT
.39068e		22 a8 06 39	jsl $3906a8	                JSL IGETCHE
.390692		80 fa		bra $39068e	                BRA IREADYWAIT
.390694		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.390695		db		stp		IRETURN         STP
.390696		08		php		ISETIN          PHP
.390697		e2 20		sep #$20	                SEP #$20        ; set A short
.390699		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.39069d		28		plp		                PLP
.39069e		6b		rtl		                RTL
.39069f		08		php		ISETOUT         PHP
.3906a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3906a2		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.3906a6		28		plp		                PLP
.3906a7		6b		rtl		                RTL
.3906a8		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.3906ac		22 18 10 00	jsl $001018	                JSL PUTC
.3906b0		6b		rtl		                RTL
.3906b1						IGETCHW
.3906b1		da		phx		                PHX
.3906b2		5a		phy		                PHY
.3906b3		8b		phb		                PHB
.3906b4		0b		phd		                PHD
.3906b5		08		php		                PHP
.3906b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3906b8		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.3906bc		f0 1b		beq $3906d9	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.3906be		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906c0		f0 0d		beq $3906cf	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906c2		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906c4		f0 09		beq $3906cf	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906c6		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906c8		28		plp		                PLP
.3906c9		38		sec		                SEC                 ; And return carry set
.3906ca		2b		pld		                PLD
.3906cb		ab		plb		                PLB
.3906cc		7a		ply		                PLY
.3906cd		fa		plx		                PLX
.3906ce		6b		rtl		                RTL
.3906cf		22 30 57 39	jsl $395730	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.3906d3		22 e4 57 39	jsl $3957e4	                JSL UART_GETC       ; Get the charater from the COM port
.3906d7		80 04		bra $3906dd	                BRA done
.3906d9		22 29 78 39	jsl $397829	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.3906dd		28		plp		done            PLP
.3906de		18		clc		                CLC                 ; Return carry clear for valid data
.3906df		2b		pld		                PLD
.3906e0		ab		plb		                PLB
.3906e1		7a		ply		                PLY
.3906e2		fa		plx		                PLX
.3906e3		6b		rtl		                RTL
.3906e4						IGETCH
.3906e4		da		phx		                PHX
.3906e5		5a		phy		                PHY
.3906e6		8b		phb		                PHB
.3906e7		0b		phd		                PHD
.3906e8		08		php		                PHP
.3906e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3906eb		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.3906ef		f0 1b		beq $39070c	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.3906f1		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.3906f3		f0 0d		beq $390702	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906f5		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.3906f7		f0 09		beq $390702	                BEQ getc_uart       ; Yes: handle reading from the UART
.3906f9		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.3906fb		28		plp		                PLP
.3906fc		38		sec		                SEC                 ; And return carry set
.3906fd		2b		pld		                PLD
.3906fe		ab		plb		                PLB
.3906ff		7a		ply		                PLY
.390700		fa		plx		                PLX
.390701		6b		rtl		                RTL
.390702		22 30 57 39	jsl $395730	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.390706		22 e4 57 39	jsl $3957e4	                JSL UART_GETC       ; Get the charater from the COM port
.39070a		80 04		bra $390710	                BRA done
.39070c		22 35 78 39	jsl $397835	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.390710		28		plp		done            PLP
.390711		18		clc		                CLC                 ; Return carry clear for valid data
.390712		2b		pld		                PLD
.390713		ab		plb		                PLB
.390714		7a		ply		                PLY
.390715		fa		plx		                PLX
.390716		6b		rtl		                RTL
.390717		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.39071b		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.39071f		6b		rtl		                RTL
.390720		48		pha		IPUTS           PHA
.390721		08		php		                PHP
.390722		e2 20		sep #$20	                SEP #$20        ; set A short
.390724		c2 10		rep #$10	                REP #$10        ; set X long
.390726		bd 00 00	lda $390000,x	iputs1          LDA $0,b,x      ; read from the string
.390729		f0 08		beq $390733	                BEQ iputs_done
.39072b		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.39072f		e8		inx		iputs3          INX
.390730		4c 26 07	jmp $390726	                JMP iputs1
.390733		e8		inx		iputs_done      INX
.390734		28		plp		                PLP
.390735		68		pla		                PLA
.390736		6b		rtl		                RTL
.390737						IPUTC
.390737		da		phx		                PHX
.390738		5a		phy		                PHY
.390739		0b		phd		                PHD
.39073a		8b		phb		                PHB
.39073b		08		php		                PHP                 ; stash the flags (we'll be changing M)
.39073c		48		pha		                PHA             ; begin setdp macro
.39073d		08		php		                PHP
.39073e		c2 20		rep #$20	                REP #$20        ; set A long
.390740		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390743		5b		tcd		                TCD
.390744		28		plp		                PLP
.390745		68		pla		                PLA             ; end setdp macro
.390746		48		pha		                PHA             ; begin setdbr macro
.390747		08		php		                PHP
.390748		e2 20		sep #$20	                SEP #$20        ; set A short
.39074a		a9 00		lda #$00	                LDA #0
.39074c		48		pha		                PHA
.39074d		ab		plb		                PLB
.39074e		28		plp		                PLP
.39074f		68		pla		                PLA             ; end setdbr macro
.390750		e2 20		sep #$20	                SEP #$20        ; set A short
.390752		c2 10		rep #$10	                REP #$10        ; set X long
.390754		48		pha		                PHA                 ; Save the character to print
.390755		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.390759		f0 1a		beq $390775	                BEQ putc_ansi       ; If it's 0: print to the screen
.39075b		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.39075d		f0 16		beq $390775	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.39075f		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390761		f0 07		beq $39076a	                BEQ putc_uart       ; Yes: handle printing to the UART
.390763		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390765		f0 03		beq $39076a	                BEQ putc_uart       ; Yes: handle printing to the UART
.390767		68		pla		                PLA                 ; Otherwise, just exit
.390768		80 10		bra $39077a	                BRA done
.39076a		22 30 57 39	jsl $395730	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.39076e		68		pla		                PLA                 ; Recover the character to send
.39076f		22 05 58 39	jsl $395805	                JSL UART_PUTC       ; Send the character
.390773		80 05		bra $39077a	                BRA done
.390775		68		pla		putc_ansi       PLA                 ; Recover the character to send
.390776		22 04 6e 39	jsl $396e04	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.39077a		28		plp		done            PLP
.39077b		ab		plb		                PLB
.39077c		2b		pld		                PLD
.39077d		7a		ply		                PLY
.39077e		fa		plx		                PLX
.39077f		6b		rtl		                RTL
.390780		da		phx		SCRSHIFTLL      PHX
.390781		5a		phy		                PHY
.390782		48		pha		                PHA
.390783		0b		phd		                PHD
.390784		08		php		                PHP
.390785		48		pha		                PHA             ; begin setdp macro
.390786		08		php		                PHP
.390787		c2 20		rep #$20	                REP #$20        ; set A long
.390789		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39078c		5b		tcd		                TCD
.39078d		28		plp		                PLP
.39078e		68		pla		                PLA             ; end setdp macro
.39078f		c2 30		rep #$30	                REP #$30        ; set A&X long
.390791		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.390793		a8		tay		                TAY                 ; Set it as the destination
.390794		aa		tax		                TAX
.390795		e8		inx		                INX                 ; And set the next cell as the source
.390796		18		clc		                CLC                 ; Calculate the length of the block to move
.390797		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.390799		e5 1a		sbc $1a		                SBC CURSORX
.39079b		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.39079e		28		plp		                PLP
.39079f		2b		pld		                PLD
.3907a0		68		pla		                PLA
.3907a1		7a		ply		                PLY
.3907a2		fa		plx		                PLX
.3907a3		6b		rtl		                RTL
.3907a4		da		phx		SCRSHIFTLR      PHX
.3907a5		48		pha		                PHA
.3907a6		0b		phd		                PHD
.3907a7		08		php		                PHP
.3907a8		48		pha		                PHA             ; begin setdp macro
.3907a9		08		php		                PHP
.3907aa		c2 20		rep #$20	                REP #$20        ; set A long
.3907ac		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907af		5b		tcd		                TCD
.3907b0		28		plp		                PLP
.3907b1		68		pla		                PLA             ; end setdp macro
.3907b2		c2 30		rep #$30	                REP #$30        ; set A&X long
.3907b4		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.3907b6		1a		inc a		                INC A
.3907b7		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.3907b9		b0 1b		bcs $3907d6	                BGE done            ; Yes: just skip the whole thing
.3907bb		38		sec		                SEC                 ; Calculate the length of the block to move
.3907bc		a5 0f		lda $0f		                LDA COLS_VISIBLE
.3907be		e5 1a		sbc $1a		                SBC CURSORX
.3907c0		1a		inc a		                INC A
.3907c1		18		clc		                CLC
.3907c2		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.3907c4		3a		dec a		                DEC A
.3907c5		a8		tay		                TAY                 ; Make it the destination
.3907c6		3a		dec a		                DEC A               ; Move to the previous column
.3907c7		aa		tax		                TAX                 ; Make it the source
.3907c8		38		sec		                SEC                 ; Calculate the length of the block to move
.3907c9		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.3907cb		e5 1a		sbc $1a		                SBC CURSORX
.3907cd		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.3907d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3907d2		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.3907d4		87 17		sta [$17]	                STA [CURSORPOS]
.3907d6		28		plp		done            PLP
.3907d7		2b		pld		                PLD
.3907d8		68		pla		                PLA
.3907d9		fa		plx		                PLX
.3907da		6b		rtl		                RTL
.3907db						IPUTB
.3907db		6b		rtl		                RTL
.3907dc						IPRINTCR
.3907dc		da		phx		                PHX
.3907dd		5a		phy		                PHY
.3907de		8b		phb		                PHB
.3907df		0b		phd		                PHD
.3907e0		08		php		                PHP
.3907e1		48		pha		                PHA             ; begin setdbr macro
.3907e2		08		php		                PHP
.3907e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3907e5		a9 00		lda #$00	                LDA #0
.3907e7		48		pha		                PHA
.3907e8		ab		plb		                PLB
.3907e9		28		plp		                PLP
.3907ea		68		pla		                PLA             ; end setdbr macro
.3907eb		48		pha		                PHA             ; begin setdp macro
.3907ec		08		php		                PHP
.3907ed		c2 20		rep #$20	                REP #$20        ; set A long
.3907ef		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3907f2		5b		tcd		                TCD
.3907f3		28		plp		                PLP
.3907f4		68		pla		                PLA             ; end setdp macro
.3907f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3907f7		c2 10		rep #$10	                REP #$10        ; set X long
.3907f9		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.3907fd		f0 1c		beq $39081b	                BEQ scr_printcr
.3907ff		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.390801		f0 06		beq $390809	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390803		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.390805		f0 02		beq $390809	                BEQ uart_printcr    ; Yes: handle printing to the UART
.390807		80 1c		bra $390825	                BRA done
.390809		22 30 57 39	jsl $395730	uart_printcr    JSL UART_SELECT
.39080d		a9 0d		lda #$0d	                LDA #CHAR_CR
.39080f		22 18 10 00	jsl $001018	                JSL PUTC
.390813		a9 0a		lda #$0a	                LDA #CHAR_LF
.390815		22 18 10 00	jsl $001018	                JSL PUTC
.390819		80 0a		bra $390825	                BRA done
.39081b		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.39081e		a4 1c		ldy $1c		                LDY CURSORY
.390820		c8		iny		                INY
.390821		22 84 10 00	jsl $001084	                JSL LOCATE
.390825		28		plp		done            PLP
.390826		2b		pld		                PLD
.390827		ab		plb		                PLB
.390828		7a		ply		                PLY
.390829		fa		plx		                PLX
.39082a		6b		rtl		                RTL
.39082b		da		phx		ICSRHOME        PHX
.39082c		5a		phy		                PHY
.39082d		08		php		                PHP
.39082e		a2 00 00	ldx #$0000	                LDX #0
.390831		a0 00 00	ldy #$0000	                LDY #0
.390834		22 84 10 00	jsl $001084	                JSL LOCATE
.390838		28		plp		                PLP
.390839		7a		ply		                PLY
.39083a		fa		plx		                PLX
.39083b		6b		rtl		                RTL
.39083c		da		phx		ICSRRIGHT       PHX
.39083d		5a		phy		                PHY
.39083e		48		pha		                PHA
.39083f		0b		phd		                PHD
.390840		08		php		                PHP
.390841		22 bc 72 39	jsl $3972bc	                JSL ANSI_CSRRIGHT
.390845		28		plp		                PLP
.390846		2b		pld		                PLD
.390847		68		pla		                PLA
.390848		7a		ply		                PLY
.390849		fa		plx		                PLX
.39084a		6b		rtl		                RTL
.39084b						ICSRLEFT
.39084b		da		phx		                PHX
.39084c		5a		phy		                PHY
.39084d		48		pha		                PHA
.39084e		0b		phd		                PHD
.39084f		08		php		                PHP
.390850		22 e7 72 39	jsl $3972e7	                JSL ANSI_CSRLEFT
.390854		28		plp		                PLP
.390855		2b		pld		                PLD
.390856		68		pla		                PLA
.390857		7a		ply		                PLY
.390858		fa		plx		                PLX
.390859		6b		rtl		                RTL
.39085a						ICSRUP
.39085a		da		phx		                PHX
.39085b		5a		phy		                PHY
.39085c		48		pha		                PHA
.39085d		0b		phd		                PHD
.39085e		08		php		                PHP
.39085f		22 05 73 39	jsl $397305	                JSL ANSI_CSRUP
.390863		28		plp		                PLP
.390864		2b		pld		                PLD
.390865		68		pla		                PLA
.390866		7a		ply		                PLY
.390867		fa		plx		                PLX
.390868		6b		rtl		                RTL
.390869		da		phx		ICSRDOWN        PHX
.39086a		5a		phy		                PHY
.39086b		0b		phd		                PHD
.39086c		22 23 73 39	jsl $397323	                JSL ANSI_CSRDOWN
.390870		2b		pld		                PLD
.390871		7a		ply		                PLY
.390872		fa		plx		                PLX
.390873		6b		rtl		                RTL
.390874		48		pha		ILOCATE         PHA
.390875		0b		phd		                PHD
.390876		08		php		                PHP
.390877		22 46 73 39	jsl $397346	                JSL ANSI_LOCATE
.39087b		28		plp		ilocate_done    PLP
.39087c		2b		pld		                PLD
.39087d		68		pla		                PLA
.39087e		6b		rtl		                RTL
.39087f						ISCROLLUP
.39087f		48		pha		                PHA
.390880		da		phx		                PHX
.390881		5a		phy		                PHY
.390882		8b		phb		                PHB
.390883		0b		phd		                PHD
.390884		08		php		                PHP
.390885		22 aa 73 39	jsl $3973aa	                JSL ANSI_SCROLLUP
.390889		28		plp		                PLP
.39088a		2b		pld		                PLD
.39088b		ab		plb		                PLB
.39088c		7a		ply		                PLY
.39088d		fa		plx		                PLX
.39088e		68		pla		                PLA
.39088f		6b		rtl		                RTL
.390890		08		php		IPRINTH         PHP
.390891		48		pha		                PHA
.390892						iprinth1
.390892		e2 20		sep #$20	                SEP #$20        ; set A short
.390894		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.390897		4a		lsr a		                LSR
.390898		4a		lsr a		                LSR
.390899		4a		lsr a		                LSR
.39089a		4a		lsr a		                LSR
.39089b		22 ea 08 39	jsl $3908ea	                JSL iprint_digit
.39089f		bd 00 00	lda $0000,x	                LDA #0,b,x
.3908a2		22 ea 08 39	jsl $3908ea	                JSL iprint_digit
.3908a6		ca		dex		                DEX
.3908a7		88		dey		                DEY
.3908a8		d0 e8		bne $390892	                BNE iprinth1
.3908aa		68		pla		                PLA
.3908ab		28		plp		                PLP
.3908ac		6b		rtl		                RTL
.3908ad						IPRINTAH
.3908ad		48		pha		                PHA
.3908ae		08		php		                PHP
.3908af		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.3908b3		08		php		                PHP                   ; Get the processor status into A
.3908b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3908b6		c2 10		rep #$10	                REP #$10        ; set X long
.3908b8		68		pla		                PLA
.3908b9		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.3908bb		c9 20		cmp #$20	                CMP #%00100000
.3908bd		f0 14		beq $3908d3	                BEQ eight_bit
.3908bf		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.3908c3		4a		lsr a		                LSR A
.3908c4		4a		lsr a		                LSR A
.3908c5		4a		lsr a		                LSR A
.3908c6		4a		lsr a		                LSR A
.3908c7		22 ea 08 39	jsl $3908ea	                JSL iprint_digit      ; And print it
.3908cb		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.3908cf		22 ea 08 39	jsl $3908ea	                JSL iprint_digit      ; And print it
.3908d3		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.3908d7		4a		lsr a		                LSR A
.3908d8		4a		lsr a		                LSR A
.3908d9		4a		lsr a		                LSR A
.3908da		4a		lsr a		                LSR A
.3908db		22 ea 08 39	jsl $3908ea	                JSL iprint_digit      ; And print it
.3908df		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.3908e3		22 ea 08 39	jsl $3908ea	                JSL iprint_digit      ; And print it
.3908e7		28		plp		                PLP
.3908e8		68		pla		                PLA
.3908e9		6b		rtl		                RTL
.3908ea		da		phx		iprint_digit    PHX
.3908eb		c2 20		rep #$20	                REP #$20        ; set A long
.3908ed		29 0f 00	and #$000f	                AND #$0F
.3908f0		aa		tax		                TAX
.3908f1		bf e4 85 39	lda $3985e4,x	                LDA hex_digits,X
.3908f5		22 37 07 39	jsl $390737	                JSL IPUTC       ; Print the digit
.3908f9		fa		plx		                PLX
.3908fa		6b		rtl		                RTL
.3908fb		48		pha		ICLRSCREEN	    PHA
.3908fc		da		phx		                PHX
.3908fd		08		php		                PHP
.3908fe		22 3f 74 39	jsl $39743f	                JSL ANSI_CLRSCREEN
.390902		28		plp		                PLP
.390903		fa		plx		                PLX
.390904		68		pla		                PLA
.390905		6b		rtl		                RTL
.390906						COPYBYTES42
.390906		08		php		                PHP
.390907		0b		phd		                PHD
.390908		48		pha		                PHA             ; begin setdp macro
.390909		08		php		                PHP
.39090a		c2 20		rep #$20	                REP #$20        ; set A long
.39090c		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.39090f		5b		tcd		                TCD
.390910		28		plp		                PLP
.390911		68		pla		                PLA             ; end setdp macro
.390912		e2 20		sep #$20	                SEP #$20        ; set A short
.390914		c2 10		rep #$10	                REP #$10        ; set X long
.390916		a0 00 00	ldy #$0000	                LDY #0
.390919		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.39091b		97 04		sta [$04],y	                STA [TMPPTR2],Y
.39091d		c8		iny		                INY
.39091e		c0 2a 00	cpy #$002a	                CPY #42
.390921		d0 f6		bne $390919	                BNE copy_loop
.390923		2b		pld		                PLD
.390924		28		plp		                PLP
.390925		60		rts		                RTS
.390926						ICOLORFLAG
.390926		48		pha		                PHA
.390927		da		phx		                PHX
.390928		5a		phy		                PHY
.390929		08		php		                PHP
.39092a		8b		phb		                PHB
.39092b		0b		phd		                PHD
.39092c		48		pha		                PHA             ; begin setdp macro
.39092d		08		php		                PHP
.39092e		c2 20		rep #$20	                REP #$20        ; set A long
.390930		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.390933		5b		tcd		                TCD
.390934		28		plp		                PLP
.390935		68		pla		                PLA             ; end setdp macro
.390936		c2 30		rep #$30	                REP #$30        ; set A&X long
.390938		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.39093b		85 04		sta $04		                STA TMPPTR2
.39093d		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.390940		85 06		sta $06		                STA TMPPTR2+2
.390942		a9 41 82	lda #$8241	                LDA #<>greet_clr_line1
.390945		85 00		sta $00		                STA TMPPTR1
.390947		a9 39 00	lda #$0039	                LDA #`greet_clr_line1
.39094a		85 02		sta $02		                STA TMPPTR1+2
.39094c		20 06 09	jsr $390906	                JSR COPYBYTES42
.39094f		18		clc		                CLC
.390950		a5 04		lda $04		                LDA TMPPTR2
.390952		65 11		adc $11		                ADC COLS_PER_LINE
.390954		85 04		sta $04		                STA TMPPTR2
.390956		a9 6b 82	lda #$826b	                LDA #<>greet_clr_line2
.390959		85 00		sta $00		                STA TMPPTR1
.39095b		a9 39 00	lda #$0039	                LDA #`greet_clr_line2
.39095e		85 02		sta $02		                STA TMPPTR1+2
.390960		20 06 09	jsr $390906	                JSR COPYBYTES42
.390963		18		clc		                CLC
.390964		a5 04		lda $04		                LDA TMPPTR2
.390966		65 11		adc $11		                ADC COLS_PER_LINE
.390968		85 04		sta $04		                STA TMPPTR2
.39096a		a9 95 82	lda #$8295	                LDA #<>greet_clr_line3
.39096d		85 00		sta $00		                STA TMPPTR1
.39096f		a9 39 00	lda #$0039	                LDA #`greet_clr_line3
.390972		85 02		sta $02		                STA TMPPTR1+2
.390974		20 06 09	jsr $390906	                JSR COPYBYTES42
.390977		18		clc		                CLC
.390978		a5 04		lda $04		                LDA TMPPTR2
.39097a		65 11		adc $11		                ADC COLS_PER_LINE
.39097c		85 04		sta $04		                STA TMPPTR2
.39097e		a9 bf 82	lda #$82bf	                LDA #<>greet_clr_line4
.390981		85 00		sta $00		                STA TMPPTR1
.390983		a9 39 00	lda #$0039	                LDA #`greet_clr_line4
.390986		85 02		sta $02		                STA TMPPTR1+2
.390988		20 06 09	jsr $390906	                JSR COPYBYTES42
.39098b		18		clc		                CLC
.39098c		a5 04		lda $04		                LDA TMPPTR2
.39098e		65 11		adc $11		                ADC COLS_PER_LINE
.390990		85 04		sta $04		                STA TMPPTR2
.390992		a9 e9 82	lda #$82e9	                LDA #<>greet_clr_line5
.390995		85 00		sta $00		                STA TMPPTR1
.390997		a9 39 00	lda #$0039	                LDA #`greet_clr_line5
.39099a		85 02		sta $02		                STA TMPPTR1+2
.39099c		20 06 09	jsr $390906	                JSR COPYBYTES42
.39099f		2b		pld		                PLD
.3909a0		ab		plb		                PLB
.3909a1		28		plp		                PLP
.3909a2		7a		ply		                PLY
.3909a3		fa		plx		                PLX
.3909a4		68		pla		                PLA
.3909a5		6b		rtl		                RTL
.3909a6		0b		phd		IINITCHLUT		  PHD
.3909a7		08		php		                PHP
.3909a8		48		pha		                PHA
.3909a9		da		phx		                PHX
.3909aa		22 0a 6c 39	jsl $396c0a	                JSL ANSI_INIT_LUTS
.3909ae		fa		plx		                PLX
.3909af		68		pla		                PLA
.3909b0		28		plp		                PLP
.3909b1		2b		pld		                PLD
.3909b2		6b		rtl		                RTL
.3909b3						IINITGAMMATABLE
.3909b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3909b5		c2 10		rep #$10	                REP #$10        ; set X long
.3909b7		a2 00 00	ldx #$0000	                ldx #$0000
.3909ba		bf 00 8a 39	lda $398a00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.3909be		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.3909c2		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.3909c6		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.3909ca		e8		inx		                inx
.3909cb		e0 00 01	cpx #$0100	                cpx #$0100
.3909ce		d0 ea		bne $3909ba	                bne initgammaloop
.3909d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3909d2		6b		rtl		                RTL
.3909d3		48		pha		IINITALLLUT     PHA
.3909d4		da		phx		                PHX
.3909d5		a2 00 00	ldx #$0000	                LDX #$0000
.3909d8		e2 20		sep #$20	                SEP #$20        ; set A short
.3909da		a9 00		lda #$00	                LDA #$00
.3909dc		85 0a		sta $0a		                STA $0A     ; Temp Location
.3909de						iinit_lut_loop
.3909de		86 02		stx $02		                STX $02
.3909e0		a6 0a		ldx $0a		                LDX $0A
.3909e2		bf 00 89 39	lda $398900,x	                LDA GAMMA_2_2_Tbl, x
.3909e6		49 55		eor #$55	                EOR  #$55
.3909e8		a6 02		ldx $02		                LDX $02
.3909ea		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.3909ee		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.3909f2		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.3909f6		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.3909fa		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.3909fe		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a02		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a06		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a0a		e8		inx		                inx
.390a0b		86 02		stx $02		                STX $02
.390a0d		a6 0a		ldx $0a		                LDX $0A
.390a0f		bf 00 8b 39	lda $398b00,x	                LDA RANDOM_LUT_Tbl, x
.390a13		a6 02		ldx $02		                LDX $02
.390a15		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a19		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a1d		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a21		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a25		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a29		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a2d		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a31		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a35		e8		inx		                inx
.390a36		86 02		stx $02		                STX $02
.390a38		a6 0a		ldx $0a		                LDX $0A
.390a3a		bf 00 8a 39	lda $398a00,x	                LDA GAMMA_1_8_Tbl, x
.390a3e		49 aa		eor #$aa	                EOR  #$AA
.390a40		a6 02		ldx $02		                LDX $02
.390a42		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a46		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a4a		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a4e		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a52		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a56		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a5a		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a5e		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a62		e8		inx		                inx
.390a63		a9 ff		lda #$ff	                LDA #$FF
.390a65		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.390a69		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.390a6d		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.390a71		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.390a75		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.390a79		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.390a7d		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.390a81		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.390a85		e6 0a		inc $0a		                inc $0A
.390a87		e8		inx		                inx
.390a88		e0 00 04	cpx #$0400	                cpx #$0400
.390a8b		f0 03		beq $390a90	                beq iinit_lut_exit
.390a8d		82 4e ff	brl $3909de	                brl iinit_lut_loop
.390a90						iinit_lut_exit
.390a90		c2 30		rep #$30	                REP #$30        ; set A&X long
.390a92		fa		plx		                PLX
.390a93		68		pla		                PLA
.390a94		6b		rtl		                RTL
.390a95						INITVKYTXTMODE_BYPASS_DPSW
.390a95		48		pha		                PHA
.390a96		08		php		                PHP
.390a97		80 24		bra $390abd	                BRA WeNeed640480Here
.390a99						IINITVKYTXTMODE
.390a99		48		pha		                PHA
.390a9a		08		php		                PHP
.390a9b		e2 20		sep #$20	                SEP #$20        ; set A short
.390a9d		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.390aa1		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.390aa3		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.390aa5		f0 16		beq $390abd	                BEQ WeNeed640480Here
.390aa7		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390aab		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.390aad		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.390aaf		f0 33		beq $390ae4	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.390ab1		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.390ab5		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.390ab7		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390abb		80 27		bra $390ae4	                BRA INITVICKYMODEHIRES
.390abd						WeNeed640480Here:
.390abd		e2 20		sep #$20	                SEP #$20        ; set A short
.390abf		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.390ac3		29 01		and #$01	                AND #$01
.390ac5		c9 01		cmp #$01	                CMP #$01
.390ac7		d0 15		bne $390ade	                BNE INITVICKYMODE
.390ac9		a9 00		lda #$00	                LDA #$00
.390acb		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390acf		ea		nop		                NOP
.390ad0		ea		nop		                NOP
.390ad1		ea		nop		                NOP
.390ad2		ea		nop		                NOP
.390ad3		ea		nop		                NOP
.390ad4		a9 01		lda #$01	                LDA #$01
.390ad6		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.390ada		ea		nop		                NOP
.390adb		ea		nop		                NOP
.390adc		ea		nop		                NOP
.390add		ea		nop		                NOP
.390ade						INITVICKYMODE
.390ade		a9 00		lda #$00	                LDA #$00
.390ae0		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.390ae4						INITVICKYMODEHIRES
.390ae4		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.390ae6		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.390aea		e2 20		sep #$20	                SEP #$20        ; set A short
.390aec		a9 20		lda #$20	                LDA #$20
.390aee		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.390af2		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.390af6		a9 00		lda #$00	                LDA #$00
.390af8		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.390afc		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.390afe		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.390b02		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.390b04		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.390b08		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.390b0c		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b0e		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.390b12		28		plp		                PLP
.390b13		68		pla		                PLA
.390b14		6b		rtl		                RTL
.390b15						ISETSIZES
.390b15		22 db 6c 39	jsl $396cdb	                JSL ANSI_SETSIZES
.390b19		6b		rtl		                RTL
.390b1a						IINITVKYGRPMODE
.390b1a		48		pha		                PHA
.390b1b		e2 20		sep #$20	                SEP #$20        ; set A short
.390b1d		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390b1f		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.390b23		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390b25		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.390b29		a9 c0		lda #$c0	                LDA #$C0
.390b2b		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.390b2f		a9 00		lda #$00	                LDA #$00
.390b31		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.390b35		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.390b37		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.390b3b		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.390b3d		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.390b41		a9 c0		lda #$c0	                LDA #$C0
.390b43		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.390b47		a9 00		lda #$00	                LDA #$00
.390b49		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.390b4d		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b4f		68		pla		                PLA
.390b50		6b		rtl		                RTL
.390b51						IINITTILEMODE
.390b51		6b		rtl		                RTL
.390b52						IREADVRAM
.390b52		08		php		                PHP
.390b53		e2 20		sep #$20	                SEP #$20        ; set A short
.390b55		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.390b58		c2 20		rep #$20	                REP #$20        ; set A long
.390b5a		a2 64 00	ldx #$0064	                LDX #100
.390b5d		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.390b61		89 00 80	bit #$8000	                BIT #$8000
.390b64		f0 06		beq $390b6c	                BEQ read_byte                   ; If it has data, go read the byte
.390b66		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.390b67		d0 f4		bne $390b5d	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.390b69		28		plp		ret_failure     PLP                             ; Return failure
.390b6a		18		clc		                CLC
.390b6b		6b		rtl		                RTL
.390b6c						read_byte
.390b6c		e2 20		sep #$20	                SEP #$20        ; set A short
.390b6e		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.390b72		28		plp		ret_success     PLP                             ; Return success
.390b73		18		clc		                CLC
.390b74		6b		rtl		                RTL
.390b75		6b		rtl		INOP            RTL
.390b76						IINITFONTSET
.390b76		48		pha		                PHA
.390b77		da		phx		                PHX
.390b78		5a		phy		                PHY
.390b79		8b		phb		                PHB
.390b7a		08		php		                PHP
.390b7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.390b7d		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.390b80		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.390b83		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.390b86		54 af 3f	mvn $3f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.390b89		28		plp		                PLP
.390b8a		ab		plb		                PLB
.390b8b		7a		ply		                PLY
.390b8c		fa		plx		                PLX
.390b8d		68		pla		                PLA
.390b8e		6b		rtl		                RTL
.390b8f						INITMOUSEPOINTER
.390b8f		e2 20		sep #$20	                SEP #$20        ; set A short
.390b91		c2 10		rep #$10	                REP #$10        ; set X long
.390b93		a2 00 00	ldx #$0000	                LDX #$0000
.390b96						FILL_MOUSE_MARKER
.390b96		bf 00 8c 39	lda $398c00,x	                LDA @lMOUSE_POINTER_PTR,X
.390b9a		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.390b9e		e8		inx		                INX
.390b9f		e0 00 01	cpx #$0100	                CPX #$0100
.390ba2		d0 f2		bne $390b96	                BNE FILL_MOUSE_MARKER
.390ba4		ea		nop		                nop
.390ba5		a9 01		lda #$01	                LDA #$01
.390ba7		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.390bab		c2 30		rep #$30	                REP #$30        ; set A&X long
.390bad		6b		rtl		                RTL
.390bae						IINITCURSOR
.390bae		e2 20		sep #$20	                SEP #$20        ; set A short
.390bb0		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.390bb2		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.390bb6		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.390bb8		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.390bbc		c2 30		rep #$30	                REP #$30        ; set A&X long
.390bbe		a9 00 00	lda #$0000	                LDA #$0000;
.390bc1		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.390bc5		a9 06 00	lda #$0006	                LDA #$0006;
.390bc8		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.390bcc		6b		rtl		                RTL
.390bcd		0b		phd		IINITSUPERIO	  PHD
.390bce		08		php		                PHP
.390bcf		48		pha		                PHA
.390bd0		e2 20		sep #$20	                SEP #$20        ; set A short
.390bd2		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390bd4		8f 23 11 af	sta $af1123	                STA GP10_REG
.390bd8		af 23 11 af	lda $af1123	                LDA GP10_REG
.390bdc		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390bde		8f 24 11 af	sta $af1124	                STA GP11_REG
.390be2		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390be4		8f 25 11 af	sta $af1125	                STA GP12_REG
.390be8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390bea		8f 26 11 af	sta $af1126	                STA GP13_REG
.390bee		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.390bf0		8f 27 11 af	sta $af1127	                STA GP14_REG
.390bf4		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.390bf6		8f 28 11 af	sta $af1128	                STA GP15_REG
.390bfa		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.390bfc		8f 29 11 af	sta $af1129	                STA GP16_REG
.390c00		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.390c02		8f 2a 11 af	sta $af112a	                STA GP17_REG
.390c06		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.390c08		8f 2b 11 af	sta $af112b	                STA GP20_REG
.390c0c		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c0e		8f 2f 11 af	sta $af112f	                STA GP24_REG
.390c12		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.390c14		8f 30 11 af	sta $af1130	                STA GP25_REG
.390c18		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.390c1a		8f 31 11 af	sta $af1131	                STA GP26_REG
.390c1e		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.390c20		8f 33 11 af	sta $af1133	                STA GP30_REG
.390c24		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.390c26		8f 34 11 af	sta $af1134	                STA GP31_REG
.390c2a		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.390c2c		8f 35 11 af	sta $af1135	                STA GP32_REG
.390c30		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.390c32		8f 36 11 af	sta $af1136	                STA GP33_REG
.390c36		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.390c38		8f 37 11 af	sta $af1137	                STA GP34_REG
.390c3c		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.390c3e		8f 38 11 af	sta $af1138	                STA GP35_REG
.390c42		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.390c44		8f 39 11 af	sta $af1139	                STA GP36_REG
.390c48		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.390c4a		8f 3a 11 af	sta $af113a	                STA GP37_REG
.390c4e		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.390c50		8f 3d 11 af	sta $af113d	                STA GP42_REG
.390c54		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.390c56		8f 3e 11 af	sta $af113e	                STA GP43_REG
.390c5a		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.390c5c		8f 3f 11 af	sta $af113f	                STA GP50_REG
.390c60		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.390c62		8f 40 11 af	sta $af1140	                STA GP51_REG
.390c66		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.390c68		8f 41 11 af	sta $af1141	                STA GP52_REG
.390c6c		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.390c6e		8f 42 11 af	sta $af1142	                STA GP53_REG
.390c72		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.390c74		8f 43 11 af	sta $af1143	                STA GP54_REG
.390c78		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.390c7a		8f 44 11 af	sta $af1144	                STA GP55_REG
.390c7e		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.390c80		8f 45 11 af	sta $af1145	                STA GP56_REG
.390c84		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.390c86		8f 46 11 af	sta $af1146	                STA GP57_REG
.390c8a		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.390c8c		8f 47 11 af	sta $af1147	                STA GP60_REG
.390c90		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.390c92		8f 48 11 af	sta $af1148	                STA GP61_REG
.390c96		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.390c98		8f 4b 11 af	sta $af114b	                STA GP1_REG
.390c9c		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.390c9e		8f 4c 11 af	sta $af114c	                STA GP2_REG
.390ca2		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.390ca4		8f 4d 11 af	sta $af114d	                STA GP3_REG
.390ca8		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.390caa		8f 4e 11 af	sta $af114e	                STA GP4_REG
.390cae		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.390cb0		8f 4f 11 af	sta $af114f	                STA GP5_REG
.390cb4		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.390cb6		8f 50 11 af	sta $af1150	                STA GP6_REG
.390cba		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.390cbc		8f 5d 11 af	sta $af115d	                STA LED1_REG
.390cc0		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.390cc2		8f 5e 11 af	sta $af115e	                STA LED2_REG
.390cc6		c2 20		rep #$20	                REP #$20        ; set A long
.390cc8		68		pla		                PLA
.390cc9		28		plp			              PLP
.390cca		2b		pld				            PLD
.390ccb		6b		rtl		                RTL
.390ccc		48		pha		INITRTC         PHA
.390ccd		08		php		                PHP
.390cce		e2 20		sep #$20	                SEP #$20        ; set A short
.390cd0		a9 00		lda #$00	                LDA #0
.390cd2		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.390cd6		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.390cda		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.390cde		09 04		ora #$04	                ORA #%00000100
.390ce0		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.390ce4		28		plp		                PLP
.390ce5		68		pla		                PLA
.390ce6		6b		rtl		                RTL
.390ce7		48		pha		IINITCODEC      PHA
.390ce8		08		php		                PHP
.390ce9		c2 20		rep #$20	                REP #$20        ; set A long
.390ceb		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.390cee		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390cf2		a9 01 00	lda #$0001	                LDA #$0001
.390cf5		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390cf9		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390cfc		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.390cff		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d03		a9 01 00	lda #$0001	                LDA #$0001
.390d06		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d0a		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390d0d		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.390d10		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d14		a9 01 00	lda #$0001	                LDA #$0001
.390d17		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d1b		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390d1e		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.390d21		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d25		a9 01 00	lda #$0001	                LDA #$0001
.390d28		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d2c		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390d2f		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.390d32		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d36		a9 01 00	lda #$0001	                LDA #$0001
.390d39		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d3d		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390d40		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.390d43		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d47		a9 01 00	lda #$0001	                LDA #$0001
.390d4a		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d4e		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390d51		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.390d54		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d58		a9 01 00	lda #$0001	                LDA #$0001
.390d5b		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d5f		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390d62		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.390d65		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d69		a9 01 00	lda #$0001	                LDA #$0001
.390d6c		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d70		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390d73		28		plp		                PLP
.390d74		68		pla		                PLA
.390d75		6b		rtl		                RTL
.390d76						IRESETCODEC
.390d76		c2 20		rep #$20	                REP #$20        ; set A long
.390d78		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.390d7b		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.390d7f		a9 01 00	lda #$0001	                LDA #$0001
.390d82		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.390d86		20 8a 0d	jsr $390d8a	                JSR CODEC_TRF_FINISHED
.390d89		6b		rtl		                RTL
.390d8a						CODEC_TRF_FINISHED
.390d8a		e2 20		sep #$20	                SEP #$20        ; set A short
.390d8c		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.390d90		29 01		and #$01	                AND #$01
.390d92		c9 01		cmp #$01	                CMP #$01
.390d94		f0 f6		beq $390d8c	                BEQ CODEC_LOOP
.390d96		c2 20		rep #$20	                REP #$20        ; set A long
.390d98		60		rts		                RTS
.390d99						IBM_FILL_SCREEN
.390d99		c2 30		rep #$30	                REP #$30        ; set A&X long
.390d9b		a9 00 00	lda #$0000	                LDA #$0000
.390d9e		a2 00 00	ldx #$0000	                LDX #$0000
.390da1						BM_FILL_SCREEN_LOOPY
.390da1		a0 00 00	ldy #$0000	                LDY #$0000
.390da4		e2 20		sep #$20	                SEP #$20        ; set A short
.390da6						BM_FILL_SCREEN_LOOPX
.390da6		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390da8		c8		iny		                INY
.390da9		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.390dab		d0 f9		bne $390da6	                BNE BM_FILL_SCREEN_LOOPX
.390dad		20 b8 0d	jsr $390db8	                JSR BM_FILL_COMPUTE_Y_DST
.390db0		e8		inx		                INX
.390db1		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.390db3		d0 ec		bne $390da1	                BNE BM_FILL_SCREEN_LOOPY
.390db5		c2 30		rep #$30	                REP #$30        ; set A&X long
.390db7		6b		rtl		                RTL
.390db8						BM_FILL_COMPUTE_Y_DST
.390db8		c2 20		rep #$20	                REP #$20        ; set A long
.390dba		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390dbc		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390dc0		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.390dc2		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390dc6		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.390dc9		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390dcd		a9 00 00	lda #$0000	                LDA #$0000
.390dd0		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390dd4		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390dd8		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390dda		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390dde		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390de0		a9 00 00	lda #$0000	                LDA #$0000
.390de3		60		rts		                RTS
.390de4						IBMP_PARSER
.390de4		c2 30		rep #$30	                REP #$30        ; set A&X long
.390de6		a0 00 00	ldy #$0000	                LDY #$0000
.390de9		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.390deb		c9 42 4d	cmp #$4d42	                CMP #$4D42
.390dee		f0 03		beq $390df3	                BEQ IBMP_PARSER_CONT
.390df0		82 04 01	brl $390ef7	                BRL BMP_PARSER_END_WITH_ERROR
.390df3						IBMP_PARSER_CONT
.390df3		a0 02 00	ldy #$0002	                LDY #$0002
.390df6		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.390df8		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390dfc		a0 04 00	ldy #$0004	                LDY #$0004
.390dff		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.390e01		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390e05		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.390e08		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390e0c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390e10		18		clc		                CLC
.390e11		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390e15		85 50		sta $50		                STA BMP_FILE_SIZE
.390e17		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390e1b		85 52		sta $52		                STA BMP_FILE_SIZE+2
.390e1d		a0 12 00	ldy #$0012	                LDY #$0012
.390e20		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390e22		85 40		sta $40		                STA BMP_X_SIZE
.390e24		a0 16 00	ldy #$0016	                LDY #$0016
.390e27		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390e29		85 42		sta $42		                STA BMP_Y_SIZE
.390e2b		a0 2e 00	ldy #$002e	                LDY #$002E
.390e2e		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.390e30		0a		asl a		                ASL A; Multiply by 2
.390e31		0a		asl a		                ASL A; Multiply by 2
.390e32		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.390e34		e0 00 00	cpx #$0000	                CPX #$0000
.390e37		d0 05		bne $390e3e	                BNE BMP_LUT1_PICK
.390e39		20 ff 0e	jsr $390eff	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.390e3c		80 08		bra $390e46	                BRA DONE_TRANSFER_LUT;
.390e3e						  BMP_LUT1_PICK
.390e3e		e0 01 00	cpx #$0001	                CPX #$0001
.390e41		d0 03		bne $390e46	                BNE BMP_LUT2_PICK
.390e43		20 2f 0f	jsr $390f2f	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.390e46						  BMP_LUT2_PICK
.390e46						  DONE_TRANSFER_LUT
.390e46		a5 56		lda $56		                LDA BMP_POSITION_Y
.390e48		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.390e4c		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.390e4e		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.390e52		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.390e56		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390e5a		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.390e5e		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390e62		a5 54		lda $54		                LDA BMP_POSITION_X
.390e64		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.390e68		a9 00 00	lda #$0000	                LDA #$0000
.390e6b		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390e6f		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.390e73		85 f0		sta $f0		                STA USER_TEMP
.390e75		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.390e79		85 f2		sta $f2		                STA USER_TEMP+2
.390e7b		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390e7d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.390e81		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390e83		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.390e87		a5 f0		lda $f0		                LDA USER_TEMP
.390e89		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.390e8d		a5 f2		lda $f2		                LDA USER_TEMP+2
.390e8f		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.390e93		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.390e97		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390e99		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.390e9d		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390e9f		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.390ea1		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390ea5		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.390ea7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390eab		a5 50		lda $50		                LDA BMP_FILE_SIZE
.390ead		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.390eb1		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.390eb3		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.390eb7		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390ebb		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390ebd		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390ec1		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390ec3		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390ec5		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390ec9		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.390ecb		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390ecf		18		clc		                CLC
.390ed0		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.390ed2		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.390ed5		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.390ed8		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.390edc		a9 ff ff	lda #$ffff	                LDA #$FFFF
.390edf		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.390ee3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390ee7		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390ee9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390eed		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390eef		20 5f 0f	jsr $390f5f	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.390ef2		a2 a5 84	ldx #$84a5	                LDX #<>bmp_parser_msg0
.390ef5		80 03		bra $390efa	                BRA BMP_PARSER_END_NO_ERROR
.390ef7						BMP_PARSER_END_WITH_ERROR
.390ef7		a2 91 84	ldx #$8491	                LDX #<>bmp_parser_err0
.390efa						BMP_PARSER_END_NO_ERROR
.390efa		22 17 07 39	jsl $390717	                JSL IPRINT       ; print the first line
.390efe		6b		rtl		                RTL
.390eff						BMP_PARSER_UPDATE_LUT0
.390eff		38		sec		                SEC
.390f00		a0 7a 00	ldy #$007a	                LDY #$007A
.390f03		a2 00 00	ldx #$0000	                LDX #$0000
.390f06		e2 20		sep #$20	                SEP #$20        ; set A short
.390f08						BMP_PARSER_UPDATE_LOOP
.390f08		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390f0a		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.390f0e		c8		iny		                INY
.390f0f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390f11		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.390f15		c8		iny		                INY
.390f16		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390f18		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.390f1c		c8		iny		                INY
.390f1d		a9 80		lda #$80	                LDA #$80
.390f1f		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.390f23		c8		iny		                INY ; For the Alpha Value, nobody cares
.390f24		e8		inx		                INX
.390f25		e8		inx		                INX
.390f26		e8		inx		                INX
.390f27		e8		inx		                INX
.390f28		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.390f2a		d0 dc		bne $390f08	                BNE BMP_PARSER_UPDATE_LOOP
.390f2c		c2 20		rep #$20	                REP #$20        ; set A long
.390f2e		60		rts		                RTS
.390f2f						BMP_PARSER_UPDATE_LUT1
.390f2f		38		sec		                SEC
.390f30		a0 36 00	ldy #$0036	                LDY #$0036
.390f33		a2 00 00	ldx #$0000	                LDX #$0000
.390f36		e2 20		sep #$20	                SEP #$20        ; set A short
.390f38						PALETTE_LUT1_LOOP
.390f38		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.390f3a		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.390f3e		c8		iny		                INY
.390f3f		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.390f41		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.390f45		c8		iny		                INY
.390f46		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.390f48		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.390f4c		c8		iny		                INY
.390f4d		a9 80		lda #$80	                LDA #$80
.390f4f		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.390f53		c8		iny		                INY ; For the Alpha Value, nobody cares
.390f54		e8		inx		                INX
.390f55		e8		inx		                INX
.390f56		e8		inx		                INX
.390f57		e8		inx		                INX
.390f58		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.390f5a		d0 dc		bne $390f38	                BNE PALETTE_LUT1_LOOP
.390f5c		c2 20		rep #$20	                REP #$20        ; set A long
.390f5e		60		rts		                RTS
.390f5f						BMP_PARSER_DMA_SHIT_OUT
.390f5f		a2 00 00	ldx #$0000	                LDX #$0000
.390f62						BMP_PARSER_LOOPY
.390f62		a0 00 00	ldy #$0000	                LDY #$0000
.390f65		e2 20		sep #$20	                SEP #$20        ; set A short
.390f67						BMP_PARSER_LOOPX
.390f67		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.390f69		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.390f6b		c8		iny		                INY
.390f6c		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.390f6e		d0 f7		bne $390f67	                BNE BMP_PARSER_LOOPX
.390f70		20 7c 0f	jsr $390f7c	                JSR BMP_PARSER_COMPUTE_Y_SRC
.390f73		20 97 0f	jsr $390f97	                JSR BMP_PARSER_COMPUTE_Y_DST
.390f76		e8		inx		                INX
.390f77		e4 42		cpx $42		                CPX BMP_Y_SIZE
.390f79		d0 e7		bne $390f62	                BNE BMP_PARSER_LOOPY
.390f7b		60		rts		                RTS
.390f7c						BMP_PARSER_COMPUTE_Y_SRC
.390f7c		c2 20		rep #$20	                REP #$20        ; set A long
.390f7e		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.390f80		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.390f84		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.390f86		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.390f8a		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.390f8e		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.390f90		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.390f94		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.390f96		60		rts		                RTS
.390f97						BMP_PARSER_COMPUTE_Y_DST
.390f97		c2 20		rep #$20	                REP #$20        ; set A long
.390f99		18		clc		                CLC
.390f9a		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.390f9c		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.390f9e		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.390fa0		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.390fa2		69 00 00	adc #$0000	                ADC #$0000
.390fa5		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.390fa7		60		rts		                RTS
.390fa8		ea		nop		ILOOP           NOP
.390fa9		ea		nop		                NOP
.390faa		ea		nop		                NOP
.390fab		ea		nop		                NOP
.390fac		ea		nop		                NOP
.390fad		ea		nop		                NOP
.390fae		ea		nop		                NOP
.390faf		ea		nop		                NOP
.390fb0		ea		nop		                NOP
.390fb1		ea		nop		                NOP
.390fb2		6b		rtl		                RTL
.390fb3		22 a8 0f 39	jsl $390fa8	ILOOP_1         JSL ILOOP
.390fb7		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fbb		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fbf		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fc3		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fc7		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fcb		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fcf		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fd3		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fd7		22 a8 0f 39	jsl $390fa8	                JSL ILOOP
.390fdb		6b		rtl		                RTL
.390fdc		22 b3 0f 39	jsl $390fb3	ILOOP_1MS       JSL ILOOP_1
.390fe0		6b		rtl		                RTL
.390fe1		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.390fe4		f0 07		beq $390fed	                BEQ LOOP_MS_END
.390fe6		22 dc 0f 39	jsl $390fdc	                JSL ILOOP_1MS
.390fea		ca		dex		                DEX
.390feb		80 f4		bra $390fe1	                BRA ILOOP_MS
.390fed		6b		rtl		LOOP_MS_END     RTL
.390fee						IDELAY
.390fee		8b		phb		                PHB
.390fef		08		php		                PHP
.390ff0		48		pha		                PHA             ; begin setdbr macro
.390ff1		08		php		                PHP
.390ff2		e2 20		sep #$20	                SEP #$20        ; set A short
.390ff4		a9 00		lda #$00	                LDA #0
.390ff6		48		pha		                PHA
.390ff7		ab		plb		                PLB
.390ff8		28		plp		                PLP
.390ff9		68		pla		                PLA             ; end setdbr macro
.390ffa		e2 20		sep #$20	                SEP #$20        ; set A short
.390ffc		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.390ffe		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391002		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.391006		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.391008		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.39100c		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.39100e		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391011		a9 00		lda #$00	                LDA #0
.391013		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.391017		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.39101b		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.39101f		c2 30		rep #$30	                REP #$30        ; set A&X long
.391021		8a		txa		                TXA
.391022		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.391026		98		tya		                TYA
.391027		e2 20		sep #$20	                SEP #$20        ; set A short
.391029		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.39102d		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.39102f		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391033		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.391035		cb		wai		loop            WAI                         ; Wait for an interrupt
.391036		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.391039		f0 fa		beq $391035	                BEQ loop                    ; Keep checking until it's set
.39103b		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.39103d		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.391041		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.391043		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.391046		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.39104a		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.39104c		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.391050		28		plp		                PLP
.391051		ab		plb		                PLB
.391052		6b		rtl		                RTL
.391053						SHOW_CREDITS
.391053		48		pha		                PHA
.391054		da		phx		                PHX
.391055		5a		phy		                PHY
.391056		08		php		                PHP
.391057		e2 20		sep #$20	                SEP #$20        ; set A short
.391059		c2 10		rep #$10	                REP #$10        ; set X long
.39105b		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.39105f		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.391061		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391065		a2 00 00	ldx #$0000	                LDX #0
.391068		bf 00 00 3b	lda $3b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.39106c		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.391070		bf 00 18 3b	lda $3b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.391074		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.391078		e8		inx		                INX
.391079		e0 00 20	cpx #$2000	                CPX #128 * 64
.39107c		d0 ea		bne $391068	                BNE credit_loop
.39107e		22 b1 06 39	jsl $3906b1	                JSL IGETCHW                     ; Wait for a keypress
.391082		22 fb 08 39	jsl $3908fb	                JSL ICLRSCREEN                  ; Then clear the screen and return
.391086		22 2b 08 39	jsl $39082b	                JSL ICSRHOME                    ; Move cursor to the home position
.39108a		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.39108e		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.391090		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.391094		28		plp		                PLP
.391095		7a		ply		                PLY
.391096		fa		plx		                PLX
.391097		68		pla		                PLA
.391098		6b		rtl		                RTL
.391099		00		brk #		ISCINIT         BRK ;
.39109a		00		brk #		IIOINIT         BRK ;
.39109b		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.39109c		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.39109d		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.39109e		00		brk #		ICLOSE          BRK ; Close a channel
.39109f		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.3910a0		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.3910a1		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.3910a2		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.3910a3		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.3910a4		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.3910a5		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.3910a6		00		brk #		IPRINTF         BRK ; Print a float value
.3910a7		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.3910a8		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.3910a9		00		brk #		IPUSHKEY        BRK ;
.3910aa		00		brk #		IPUSHKEYS       BRK ;
.3910ab		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.3910ac		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.3910ad		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>3910ae		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>3910b6		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>3910c6		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>3910ce		12
>3910cf		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>3910d7		15
>3910d8		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>3910de		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>3910e3		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>3910e9		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>3910f1		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>3910ff		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>391107		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>391115		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>39111d		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>39112b		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>391133		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>391141		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>391149		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>391157		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>39115f		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>39116d		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>391175		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>391183		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>39118b		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>391199		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>3911a1		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>3911af		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>3911b7		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>3911c5		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>3911cd		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>3911db		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>3911e3		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>3911f1		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>3911f9		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>391207		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>39120f		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>39121d		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>391225		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>391233		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>39123b		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>391249		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>391251		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>39125f		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>391267		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>391275		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>39127d		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>39128b		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>391293		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>3912a1		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>3912a9		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>3912b7		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>3912bf		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>3912cd		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>3912d5		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>3912e3		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>3912eb		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>3912f9		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>391301		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>39130f		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>391317		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>391325		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>39132d		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>39133b		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>391343		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>391351		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>391359		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>391367		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>39136f		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>39137d		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>391385		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>391393		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>39139b		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>3913a9		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>3913b1		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>3913bf		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>3913c7		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>3913d5		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>3913dd		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>3913eb		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>3913f3		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>391401		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>391409		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>391417		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>39141f		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>39142d		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>391435		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>391443		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>39144b		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>391459		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>391461		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>39146f		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>391477		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>391485		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>39148d		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>39149b		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>3914a3		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>3914b1		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>3914b9		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>3914c7		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>3914cf		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>3914dd		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>3914e5		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>3914f3		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>3914fb		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>391509		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>391511		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>39151f		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>391527		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>391535		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>39153d		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>39154b		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>391553		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>391561		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>391569		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>391577		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>39157f		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>39158d		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>391595		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>3915a3		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>3915ab		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>3915b9		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>3915c1		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>3915cf		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>3915d7		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>3915e5		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>3915ed		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>3915fb		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>391603		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>391611		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>391619		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>391627		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>39162f		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>39163d		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>391645		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>391653		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>39165b		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>391669		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>391671		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>39167f		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>391687		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>391695		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>39169d		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>3916ab		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>3916b3		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>3916c1		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>3916c9		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>3916d7		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>3916df		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>3916ed		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>3916f5		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>391703		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>39170b		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>391719		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>391721		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>39172f		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>391737		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>391745		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>39174d		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>39175b		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>391763		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>391771		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>391779		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>391787		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>39178f		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>39179d		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>3917a5		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>3917b3		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>3917bb		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>3917c9		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>3917d1		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>3917df		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>3917e7		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>3917f5		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>3917fd		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>39180b		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>391813		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>391821		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>391829		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>391837		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>39183f		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>39184d		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>391855		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>391863		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>39186b		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>391879		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>391881		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>39188f		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>391897		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>3918a5		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>3918ad		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>3918bb		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>3918c3		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>3918d1		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>3918d9		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>3918e7		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>3918ef		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>3918fd		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>391905		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>391913		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>39191b		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>391929		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>391931		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>39193f		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>391947		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>391955		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>39195d		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>39196b		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>391973		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>391981		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>391989		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>391997		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>39199f		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>3919ad		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>3919b5		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>3919c3		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>3919cb		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>3919d9		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>3919e1		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>3919ef		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>3919f7		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>391a05		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>391a0d		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>391a1b		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>391a23		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>391a31		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>391a39		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>391a47		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>391a4f		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>391a5d		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>391a65		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>391a73		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>391a7b		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>391a89		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>391a91		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>391a9f		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>391aa7		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>391ab5		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>391abd		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>391acb		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>391ad3		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>391ae1		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>391ae9		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>391af7		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>391aff		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>391b0d		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>391b15		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>391b23		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>391b2b		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>391b39		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>391b41		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>391b4f		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>391b57		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>391b65		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>391b6d		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>391b7b		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>391b83		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>391b91		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>391b99		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>391ba7		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>391baf		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>391bbd		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>391bc5		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>391bd3		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>391bdb		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>391be9		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>391bf1		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>391bff		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>391c07		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>391c15		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>391c1d		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>391c2b		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>391c33		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>391c41		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>391c49		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>391c57		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>391c5f		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>391c6d		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>391c75		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>391c83		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>391c8b		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>391c99		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>391ca1		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>391caf		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>391cb7		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>391cc5		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>391ccd		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>391cdb		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>391ce3		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>391cf1		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>391cf9		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>391d07		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>391d0f		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>391d1d		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>391d25		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>391d33		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>391d3b		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>391d49		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>391d51		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>391d5f		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391d67		00 87 fa 00
>391d6b		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391d73		00 88 98 03
>391d77		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>391d7f		00 88 98 03
>391d83		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391d8b		00 f9 69 00
>391d8f		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>391d97		80 e8 4a 00
>391d9b		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391da3		00 f6 9a 00
>391da7		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>391daf		1b f2 34 00
>391db3		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>391dbb		00 f7 8a 00
>391dbf		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>391dc7		00 f6 47 00
>391dcb		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>391dd3		00 f9 69 00
>391dd7		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391ddf		00 f7 a9 00
>391de3		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>391deb		00 87 fa 00
>391def		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>391df7		00 f7 a9 00
>391dfb		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e03		00 f5 f5 00
>391e07		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391e0f		06 b8 d8 03
>391e13		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e1b		00 f5 f5 00
>391e1f		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>391e27		06 b8 d8 03
>391e2b		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e33		00 f5 f5 00
>391e37		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>391e3f		10 74 f8 03
>391e43		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e4b		00 f5 f5 00
>391e4f		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e57		00 f5 f5 00
>391e5b		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e63		05 c5 d4 03
>391e67		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>391e6f		00 f5 f5 00
>391e73		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391e7b		04 f9 44 03
>391e7f		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391e87		05 c5 d4 03
>391e8b		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391e93		04 f9 44 03
>391e97		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>391e9f		03 87 f7 03
>391ea3		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391eab		05 c5 d4 03
>391eaf		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>391eb7		00 f6 28 00
>391ebb		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>391ec3		05 c5 d4 03
>391ec7		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>391ecf		00 f5 f7 01
>391ed3		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>391edb		04 f9 44 03
>391edf		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391ee7		00 99 f9 00
>391eeb		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>391ef3		00 a8 f7 00
>391ef7		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>391eff		00 99 f9 00
>391f03		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391f0b		00 a6 f6 00
>391f0f		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>391f17		00 a6 f6 00
>391f1b		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391f23		00 f6 36 02
>391f27		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>391f2f		00 f6 36 02
>391f33		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391f3b		00 96 e8 01
>391f3f		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>391f47		00 96 e8 01
>391f4b		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391f53		02 79 77 03
>391f57		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391f5f		02 79 77 03
>391f63		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>391f6b		00 a5 2b 02
>391f6f		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>391f77		00 93 3b 02
>391f7b		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>391f83		01 89 3b 03
>391f87		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>391f8f		0a 53 2b 02
>391f93		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>391f9b		00 f6 89 00
>391f9f		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391fa7		00 f6 9a 00
>391fab		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>391fb3		00 f6 9a 00
>391fb7		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>391fbf		00 87 4b 01
>391fc3		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>391fcb		00 78 67 01
>391fcf		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>391fd7		02 f8 fc 00
>391fdb		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391fe3		40 f5 f5 00
>391fe7		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>391fef		02 79 77 03
>391ff3		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>391ffb		40 f5 f5 00
>391fff		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>392007		40 f5 f5 00
>39200b		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>392013		00 f9 69 00
>392017		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>39201f		00 f9 69 00
>392023		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>39202b		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>39202f		5f 1d 39 00 6b 1d 39 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>392037		77 1d 39 00 83 1d 39 00
>39203f		8f 1d 39 00 9b 1d 39 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>392047		a7 1d 39 00 b3 1d 39 00
>39204f		bf 1d 39 00 cb 1d 39 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>392057		d7 1d 39 00 e3 1d 39 00
>39205f		ef 1d 39 00 fb 1d 39 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>392067		07 1e 39 00 13 1e 39 00
>39206f		1f 1e 39 00 2b 1e 39 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>392077		37 1e 39 00 43 1e 39 00
>39207f		4f 1e 39 00 5b 1e 39 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>392087		67 1e 39 00 73 1e 39 00
>39208f		7f 1e 39 00 8b 1e 39 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>392097		97 1e 39 00 a3 1e 39 00
>39209f		af 1e 39 00 bb 1e 39 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>3920a7		c7 1e 39 00 d3 1e 39 00
>3920af		df 1e 39 00 eb 1e 39 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>3920b7		f7 1e 39 00 03 1f 39 00
>3920bf		0f 1f 39 00 1b 1f 39 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>3920c7		27 1f 39 00 33 1f 39 00
>3920cf		3f 1f 39 00 4b 1f 39 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>3920d7		57 1f 39 00 63 1f 39 00
>3920df		6f 1f 39 00 7b 1f 39 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>3920e7		87 1f 39 00 93 1f 39 00
>3920ef		9f 1f 39 00 ab 1f 39 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>3920f7		b7 1f 39 00 c3 1f 39 00
>3920ff		cf 1f 39 00 db 1f 39 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>392107		e7 1f 39 00 f3 1f 39 00
>39210f		ff 1f 39 00 0b 20 39 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>392117		17 20 39 00 23 20 39 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>39211f		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>392127		00 b1 f5 01
>39212b		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>392133		03 f1 f5 00
>392137		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>39213f		03 c1 f5 00
>392143		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>39214b		00 92 f5 01
>39214f		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>392157		00 f1 f9 00
>39215b		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>392163		00 f1 f5 00
>392167		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>39216f		02 81 f6 01
>392173		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>39217b		00 c2 b9 01
>39217f		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>392187		05 b2 35 00
>39218b		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>392193		1b f2 34 00
>392197		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>39219f		01 f5 74 00
>3921a3		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>3921ab		00 61 e3 00
>3921af		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>3921b7		00 a4 64 00
>3921bb		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>3921c3		07 b5 f5 00
>3921c7		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>3921cf		00 f3 74 00
>3921d3		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>3921db		00 c3 94 01
>3921df		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>3921e7		00 f4 0d 01
>3921eb		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>3921f3		00 f5 0b 01
>3921f7		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>3921ff		00 bf 07 00
>392203		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>39220b		00 6d 08 01
>39220f		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>392217		00 51 17 01
>39221b		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>392223		00 51 17 01
>392227		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>39222f		00 53 08 01
>392233		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>39223b		00 53 06 01
>39223f		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>392247		00 d2 f8 00
>39224b		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>392253		00 e2 c7 01
>392257		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>39225f		00 f1 9c 00
>392263		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>39226b		02 f2 c9 01
>39226f		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>392277		03 95 fb 00
>39227b		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>392283		04 a1 59 00
>392287		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>39228f		03 91 fc 03
>392293		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>39229b		02 b4 ec 00
>39229f		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>3922a7		00 93 f7 00
>3922ab		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>3922b3		04 c1 58 00
>3922b7		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>3922bf		02 c3 6a 00
>3922c3		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>3922cb		00 62 87 00
>3922cf		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>3922d7		00 f3 97 00
>3922db		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>3922e3		00 b3 97 00
>3922e7		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>3922ef		04 f3 cc 00
>3922f3		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>3922fb		00 93 aa 00
>3922ff		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392307		00 78 08 01
>39230b		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>392313		00 78 08 01
>392317		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>39231f		00 54 27 01
>392323		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>39232b		00 61 56 00
>39232f		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>392337		00 75 16 01
>39233b		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>392343		00 f5 f6 01
>392347		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>39234f		80 f3 e3 00
>392353		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>39235b		00 b5 f5 00
>39235f		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>392367		80 71 16 00
>39236b		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>392373		00 30 55 01
>392377		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>39237f		00 62 36 01
>392383		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>39238b		02 51 07 00
>39238f		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>392397		00 62 39 00
>39239b		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>3923a3		00 66 27 00
>3923a7		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>3923af		00 73 46 00
>3923b3		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>3923bb		00 74 76 01
>3923bf		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>3923c7		81 92 38 00
>3923cb		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>3923d3		02 71 19 00
>3923d7		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>3923df		01 81 09 00
>3923e3		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>3923eb		00 83 4b 02
>3923ef		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>3923f7		05 71 59 00
>3923fb		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>392403		03 82 39 00
>392407		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>39240f		82 84 17 00
>392413		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>39241b		02 72 16 00
>39241f		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>392427		00 7b 0a 00
>39242b		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>392433		00 85 0c 01
>392437		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>39243f		00 7b 0a 01
>392443		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>39244b		00 79 18 01
>39244f		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>392457		01 73 08 00
>39245b		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>392463		04 77 0a 00
>392467		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>39246f		00 51 19 00
>392473		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>39247b		01 74 09 00
>39247f		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>392487		01 63 28 00
>39248b		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>392493		00 65 0a 00
>392497		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>39249f		00 67 29 00
>3924a3		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>3924ab		00 67 09 00
>3924af		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>3924b7		01 6a 28 00
>3924bb		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>3924c3		00 55 27 00
>3924c7		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>3924cf		00 6f 08 00
>3924d3		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>3924db		00 7a 07 00
>3924df		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>3924e7		06 a2 0d 00
>3924eb		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>3924f3		00 a3 5f 00
>3924f7		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>3924ff		00 42 27 00
>392503		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>39250b		05 b2 49 00
>39250f		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>392517		00 b2 79 01
>39251b		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>392523		00 7a 1a 00
>392527		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>39252f		00 82 28 01
>392533		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>39253b		02 c3 5f 00
>39253f		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>392547		86 c4 95 01
>39254b		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>392553		00 44 15 00
>392557		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>39255f		00 d1 06 00
>392563		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>39256b		00 82 37 00
>39256f		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>392577		00 41 35 00
>39257b		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>392583		02 32 f5 01
>392587		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>39258f		00 61 26 00
>392593		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>39259b		84 3f 05 01
>39259f		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>3925a7		01 d1 f6 00
>3925ab		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>3925b3		00 41 05 01
>3925b7		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>3925bf		05 f3 e4 00
>3925c3		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>3925cb		00 92 f5 01
>3925cf		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>3925d7		04 f2 e4 01
>3925db		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>3925e3		00 45 25 00
>3925e7		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>3925ef		01 a3 36 00
>3925f3		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>3925fb		01 98 05 01
>3925ff		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>392607		02 a3 f6 01
>39260b		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>392613		00 f6 f8 00
>392617		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>39261f		00 f3 f5 00
>392623		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>39262b		00 94 e5 01
>39262f		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>392637		00 84 44 00
>39263b		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>392643		03 83 18 01
>392647		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>39264f		01 78 08 01
>392653		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>39265b		03 8e 08 01
>39265f		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>392667		09 f2 46 00
>39266b		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>392673		00 96 e8 01
>392677		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>39267f		00 f6 f6 01
>392683		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>39268b		00 f6 9a 00
>39268f		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>392697		00 c6 45 00
>39269b		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>3926a3		00 f4 b4 00
>3926a7		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>3926af		00 d5 25 00
>3926b3		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>3926bb		0e 21 2d 00
>3926bf		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>3926c7		00 55 87 02
>3926cb		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>3926d3		08 98 87 01
>3926d7		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>3926df		04 17 04 03
>3926e3		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>3926eb		05 77 f9 02
>3926ef		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>3926f7		02 f4 08 00
>3926fb		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>392703		00 36 05 01
>392707		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>39270f		05 32 55 03
>392713		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>39271b		00 f3 df 00
>39271f		1f 21 39 00 2b 21 39 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>392727		37 21 39 00 43 21 39 00 4f 21 39 00 5b 21 39 00
>392737		67 21 39 00 73 21 39 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>39273f		7f 21 39 00 8b 21 39 00 97 21 39 00 a3 21 39 00
>39274f		af 21 39 00 bb 21 39 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>392757		c7 21 39 00 d3 21 39 00 df 21 39 00 eb 21 39 00
>392767		f7 21 39 00 03 22 39 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>39276f		0f 22 39 00 1b 22 39 00 27 22 39 00 33 22 39 00
>39277f		3f 22 39 00 4b 22 39 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>392787		57 22 39 00 63 22 39 00 6f 22 39 00 7b 22 39 00
>392797		87 22 39 00 93 22 39 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>39279f		9f 22 39 00 ab 22 39 00 b7 22 39 00 c3 22 39 00
>3927af		cf 22 39 00 db 22 39 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>3927b7		e7 22 39 00 f3 22 39 00 ff 22 39 00 0b 23 39 00
>3927c7		17 23 39 00 23 23 39 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>3927cf		2f 23 39 00 3b 23 39 00 47 23 39 00 53 23 39 00
>3927df		5f 23 39 00 6b 23 39 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>3927e7		77 23 39 00 83 23 39 00 8f 23 39 00 9b 23 39 00
>3927f7		a7 23 39 00 b3 23 39 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>3927ff		bf 23 39 00 cb 23 39 00 d7 23 39 00 e3 23 39 00
>39280f		ef 23 39 00 fb 23 39 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>392817		07 24 39 00 13 24 39 00 1f 24 39 00 2b 24 39 00
>392827		37 24 39 00 43 24 39 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>39282f		4f 24 39 00 5b 24 39 00 67 24 39 00 73 24 39 00
>39283f		7f 24 39 00 8b 24 39 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>392847		97 24 39 00 a3 24 39 00 af 24 39 00 bb 24 39 00
>392857		c7 24 39 00 d3 24 39 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>39285f		df 24 39 00 eb 24 39 00 f7 24 39 00 03 25 39 00
>39286f		0f 25 39 00 1b 25 39 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>392877		27 25 39 00 33 25 39 00 3f 25 39 00 4b 25 39 00
>392887		57 25 39 00 63 25 39 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>39288f		6f 25 39 00 7b 25 39 00 87 25 39 00 93 25 39 00
>39289f		9f 25 39 00 ab 25 39 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>3928a7		b7 25 39 00 c3 25 39 00 cf 25 39 00 db 25 39 00
>3928b7		e7 25 39 00 f3 25 39 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>3928bf		ff 25 39 00 0b 26 39 00 17 26 39 00 23 26 39 00
>3928cf		2f 26 39 00 3b 26 39 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>3928d7		47 26 39 00 53 26 39 00 5f 26 39 00 6b 26 39 00
>3928e7		77 26 39 00 83 26 39 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>3928ef		8f 26 39 00 9b 26 39 00 a7 26 39 00 b3 26 39 00
>3928ff		bf 26 39 00 cb 26 39 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>392907		d7 26 39 00 e3 26 39 00 ef 26 39 00 fb 26 39 00
>392917		07 27 39 00 13 27 39 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>39291f		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>392927		0d f2 f7 00
>39292b		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>392933		07 f2 f7 00
>392937		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>39293f		07 f2 f6 00
>392943		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>39294b		07 f2 f7 00
>39294f		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392957		07 f2 f7 00
>39295b		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>392963		07 f2 f7 00
>392967		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39296f		00 00 00 00
>392973		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>39297b		00 00 00 00
>39297f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392987		00 00 00 00
>39298b		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>392993		87 f2 f1 00
>392997		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>39299f		07 f4 f4 00
>3929a3		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>3929ab		07 f2 f6 00
>3929af		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>3929b7		07 e7 f7 00
>3929bb		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>3929c3		07 f6 f6 00
>3929c7		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>3929cf		87 a3 f3 00
>3929d3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3929db		00 00 00 00
>3929df		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3929e7		00 00 00 00
>3929eb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3929f3		00 00 00 00
>3929f7		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>3929ff		07 8a 08 00
>392a03		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>392a0b		07 55 14 00
>392a0f		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>392a17		87 55 04 00
>392a1b		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>392a23		07 46 1a 00
>392a27		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>392a2f		07 61 07 00
>392a33		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>392a3b		90 61 07 00
>392a3f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a47		00 00 00 00
>392a4b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a53		00 00 00 00
>392a57		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392a5f		00 00 00 00
>392a63		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>392a6b		87 f3 f8 00
>392a6f		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>392a77		07 f6 3a 00
>392a7b		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>392a83		0c 84 19 00
>392a87		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>392a8f		07 94 19 00
>392a93		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>392a9b		87 d1 f8 00
>392a9f		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>392aa7		07 c3 a6 00
>392aab		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ab3		00 00 00 00
>392ab7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392abf		00 00 00 00
>392ac3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392acb		00 00 00 00
>392acf		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>392ad7		47 f2 df 00
>392adb		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>392ae3		0f a1 df 00
>392ae7		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>392aef		07 f1 78 00
>392af3		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>392afb		07 f1 18 00
>392aff		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>392b07		07 56 26 00
>392b0b		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>392b13		07 66 06 00
>392b17		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b1f		00 00 00 00
>392b23		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b2b		00 00 00 00
>392b2f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b37		00 00 00 00
>392b3b		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>392b43		87 85 35 00
>392b47		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>392b4f		87 f3 f4 00
>392b53		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>392b5b		07 f2 c3 00
>392b5f		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>392b67		08 72 08 00
>392b6b		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>392b73		07 3f 07 01
>392b77		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>392b7f		07 4f 05 00
>392b83		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b8b		00 00 00 00
>392b8f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392b97		00 00 00 00
>392b9b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ba3		00 00 00 00
>392ba7		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>392baf		07 7a 05 00
>392bb3		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>392bbb		07 a5 45 00
>392bbf		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>392bc7		08 8f 09 00
>392bcb		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>392bd3		0c 8f 09 00
>392bd7		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>392bdf		07 82 37 00
>392be3		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>392beb		07 62 2c 01
>392bef		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392bf7		00 00 00 00
>392bfb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c03		00 00 00 00
>392c07		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c0f		00 00 00 00
>392c13		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>392c1b		07 a6 1c 00
>392c1f		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>392c27		07 72 0b 00
>392c2b		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>392c33		07 72 09 00
>392c37		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>392c3f		07 82 09 00
>392c43		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>392c4b		07 72 0f 00
>392c4f		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>392c57		07 8f 0a 00
>392c5b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c63		00 00 00 00
>392c67		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c6f		00 00 00 00
>392c73		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392c7b		00 00 00 00
>392c7f		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392c87		07 65 1a 00
>392c8b		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>392c93		07 65 1a 00
>392c97		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>392c9f		07 75 0a 00
>392ca3		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>392cab		07 65 1a 00
>392caf		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>392cb7		07 65 26 00
>392cbb		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>392cc3		07 55 36 00
>392cc7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ccf		00 00 00 00
>392cd3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392cdb		00 00 00 00
>392cdf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ce7		00 00 00 00
>392ceb		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>392cf3		07 ff 0f 01
>392cf7		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>392cff		87 64 18 00
>392d03		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>392d0b		07 96 0a 00
>392d0f		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>392d17		07 91 2a 00
>392d1b		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>392d23		47 6f 07 00
>392d27		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>392d2f		07 8f 06 02
>392d33		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d3b		00 00 00 00
>392d3f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d47		00 00 00 00
>392d4b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392d53		00 00 00 00
>392d57		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>392d5f		07 55 16 00
>392d63		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>392d6b		07 6a 03 00
>392d6f		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>392d77		07 42 35 00
>392d7b		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>392d83		07 31 47 01
>392d87		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>392d8f		0a 42 25 00
>392d93		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>392d9b		07 cf 07 00
>392d9f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392da7		00 00 00 00
>392dab		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392db3		00 00 00 00
>392db7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392dbf		00 00 00 00
>392dc3		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>392dcb		8a f2 26 00
>392dcf		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>392dd7		07 f2 f5 00
>392ddb		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>392de3		87 11 13 00
>392de7		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>392def		87 1d 03 00
>392df3		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>392dfb		07 81 23 00
>392dff		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>392e07		0a f2 f6 01
>392e0b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e13		00 00 00 00
>392e17		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e1f		00 00 00 00
>392e23		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e2b		00 00 00 00
>392e2f		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>392e37		07 c2 05 00
>392e3b		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>392e43		07 6f 0c 01
>392e47		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>392e4f		07 56 16 00
>392e53		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>392e5b		88 8f 0b 00
>392e5f		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>392e67		87 c3 e5 00
>392e6b		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>392e73		07 f8 16 00
>392e77		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e7f		00 00 00 00
>392e83		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e8b		00 00 00 00
>392e8f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392e97		00 00 00 00
>392e9b		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>392ea3		0a f3 03 00
>392ea7		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>392eaf		07 f3 02 00
>392eb3		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>392ebb		07 1f ff 03
>392ebf		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>392ec7		8f 56 84 02
>392ecb		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>392ed3		0c 34 04 03
>392ed7		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>392edf		07 1f 02 03
>392ee3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392eeb		00 00 00 00
>392eef		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392ef7		00 00 00 00
>392efb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>392f03		00 00 00 00
>392f07		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>392f0f		07 12 16 01
>392f13		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>392f1b		07 f6 c9 02
>392f1f		1f 29 39 00 2b 29 39 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>392f27		37 29 39 00 43 29 39 00 4f 29 39 00 5b 29 39 00
>392f37		67 29 39 00 73 29 39 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>392f3f		7f 29 39 00 8b 29 39 00 97 29 39 00 a3 29 39 00
>392f4f		af 29 39 00 bb 29 39 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>392f57		c7 29 39 00 d3 29 39 00 df 29 39 00 eb 29 39 00
>392f67		f7 29 39 00 03 2a 39 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>392f6f		0f 2a 39 00 1b 2a 39 00 27 2a 39 00 33 2a 39 00
>392f7f		3f 2a 39 00 4b 2a 39 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>392f87		57 2a 39 00 63 2a 39 00 6f 2a 39 00 7b 2a 39 00
>392f97		87 2a 39 00 93 2a 39 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>392f9f		9f 2a 39 00 ab 2a 39 00 b7 2a 39 00 c3 2a 39 00
>392faf		cf 2a 39 00 db 2a 39 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>392fb7		e7 2a 39 00 f3 2a 39 00 ff 2a 39 00 0b 2b 39 00
>392fc7		17 2b 39 00 23 2b 39 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>392fcf		2f 2b 39 00 3b 2b 39 00 47 2b 39 00 53 2b 39 00
>392fdf		5f 2b 39 00 6b 2b 39 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>392fe7		77 2b 39 00 83 2b 39 00 8f 2b 39 00 9b 2b 39 00
>392ff7		a7 2b 39 00 b3 2b 39 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>392fff		bf 2b 39 00 cb 2b 39 00 d7 2b 39 00 e3 2b 39 00
>39300f		ef 2b 39 00 fb 2b 39 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>393017		07 2c 39 00 13 2c 39 00 1f 2c 39 00 2b 2c 39 00
>393027		37 2c 39 00 43 2c 39 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>39302f		4f 2c 39 00 5b 2c 39 00 67 2c 39 00 73 2c 39 00
>39303f		7f 2c 39 00 8b 2c 39 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>393047		97 2c 39 00 a3 2c 39 00 af 2c 39 00 bb 2c 39 00
>393057		c7 2c 39 00 d3 2c 39 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>39305f		df 2c 39 00 eb 2c 39 00 f7 2c 39 00 03 2d 39 00
>39306f		0f 2d 39 00 1b 2d 39 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>393077		27 2d 39 00 33 2d 39 00 3f 2d 39 00 4b 2d 39 00
>393087		57 2d 39 00 63 2d 39 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>39308f		6f 2d 39 00 7b 2d 39 00 87 2d 39 00 93 2d 39 00
>39309f		9f 2d 39 00 ab 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>3930a7		b7 2d 39 00 c3 2d 39 00 cf 2d 39 00 db 2d 39 00
>3930b7		e7 2d 39 00 f3 2d 39 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>3930bf		ff 2d 39 00 0b 2e 39 00 17 2e 39 00 23 2e 39 00
>3930cf		2f 2e 39 00 3b 2e 39 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>3930d7		47 2e 39 00 53 2e 39 00 5f 2e 39 00 6b 2e 39 00
>3930e7		77 2e 39 00 83 2e 39 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>3930ef		8f 2e 39 00 9b 2e 39 00 a7 2e 39 00 b3 2e 39 00
>3930ff		bf 2e 39 00 cb 2e 39 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>393107		d7 2e 39 00 e3 2e 39 00 ef 2e 39 00 fb 2e 39 00
>393117		07 2f 39 00 13 2f 39 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>39311f		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.393127						IOPL2_TONE_TEST
.393127		e2 20		sep #$20	                SEP #$20        ; set A short
.393129		c2 10		rep #$10	                REP #$10        ; set X long
.39312b		a2 00 00	ldx #$0000	                LDX #0
.39312e						OPL2_TONE_TESTING_L1
.39312e		bf 1f 31 39	lda $39311f,x	                LDA NOTE_INTRO, X
.393132		29 0f		and #$0f	                AND #$F
.393134		85 30		sta $30		                STA OPL2_NOTE ; start at C
.393136		bf 1f 31 39	lda $39311f,x	                LDA NOTE_INTRO, X
.39313a		29 70		and #$70	                AND #$70
.39313c		4a		lsr a		                LSR A
.39313d		4a		lsr a		                LSR A
.39313e		4a		lsr a		                LSR A
.39313f		4a		lsr a		                LSR A
.393140		85 31		sta $31		                STA OPL2_OCTAVE
.393142		8a		txa		                TXA
.393143		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.393145		85 27		sta $27		                STA OPL2_CHANNEL
.393147		22 17 33 39	jsl $393317	                JSL OPL2_PLAYNOTE
.39314b		a0 00 00	ldy #$0000	                LDY #$0000
.39314e						OPL2_TONE_TESTING_L2
.39314e		ea		nop		                NOP
.39314f		ea		nop		                NOP
.393150		ea		nop		                NOP
.393151		ea		nop		                NOP
.393152		c8		iny		                INY
.393153		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.393156		d0 f6		bne $39314e	                BNE OPL2_TONE_TESTING_L2
.393158		e8		inx		                INX
.393159		e0 08 00	cpx #$0008	                CPX #8
.39315c		d0 d0		bne $39312e	                BNE OPL2_TONE_TESTING_L1
.39315e		6b		rtl		                RTL
.39315f						OPL2_INIT
.39315f		c2 20		rep #$20	                REP #$20        ; set A long
.393161		a9 00 00	lda #$0000	                LDA #$0000
.393164		85 28		sta $28		                STA OPL2_REG_REGION
.393166		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393168		85 30		sta $30		                STA OPL2_NOTE
.39316a		85 32		sta $32		                STA OPL2_PARAMETER0
.39316c		85 34		sta $34		                STA OPL2_PARAMETER2
.39316e		a9 e9 10	lda #$10e9	                LDA #<>INSTRUMENT_ACCORDN
.393171		85 50		sta $50		                STA RAD_ADDR
.393173		a9 39 00	lda #$0039	                LDA #<`INSTRUMENT_ACCORDN
.393176		85 52		sta $52		                STA RAD_ADDR + 2
.393178		e2 20		sep #$20	                SEP #$20        ; set A short
.39317a		6b		rtl		                RTL
.39317b						OPL2_Reset
.39317b		6b		rtl		                RTL
.39317c						OPL2_Get_FrequencyBlock
.39317c		6b		rtl		                RTL
.39317d						OPL2_GET_REGISTER
.39317d		48		pha		                PHA             ; begin setdp macro
.39317e		08		php		                PHP
.39317f		c2 20		rep #$20	                REP #$20        ; set A long
.393181		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393184		5b		tcd		                TCD
.393185		28		plp		                PLP
.393186		68		pla		                PLA             ; end setdp macro
.393187		c2 20		rep #$20	                REP #$20        ; set A long
.393189		18		clc		              CLC
.39318a		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39318d		65 32		adc $32		              ADC OPL2_PARAMETER0
.39318f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393191		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393194		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393196		e2 20		sep #$20	                SEP #$20        ; set A short
.393198		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39319a		6b		rtl		              RTL
.39319b						OPL2_GET_WAVEFORM_SELECT
.39319b		48		pha		                PHA             ; begin setdp macro
.39319c		08		php		                PHP
.39319d		c2 20		rep #$20	                REP #$20        ; set A long
.39319f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3931a2		5b		tcd		                TCD
.3931a3		28		plp		                PLP
.3931a4		68		pla		                PLA             ; end setdp macro
.3931a5		c2 20		rep #$20	                REP #$20        ; set A long
.3931a7		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3931aa		69 01 00	adc #$0001	              ADC #$0001
.3931ad		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3931af		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3931b2		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3931b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3931b6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3931b8		29 20		and #$20	              AND #$20
.3931ba		6b		rtl		              RTL
.3931bb						OPL2_GET_SCALINGLEVEL
.3931bb		48		pha		                PHA             ; begin setdp macro
.3931bc		08		php		                PHP
.3931bd		c2 20		rep #$20	                REP #$20        ; set A long
.3931bf		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3931c2		5b		tcd		                TCD
.3931c3		28		plp		                PLP
.3931c4		68		pla		                PLA             ; end setdp macro
.3931c5		c2 20		rep #$20	                REP #$20        ; set A long
.3931c7		a9 40 00	lda #$0040	              LDA #$0040  ;
.3931ca		85 28		sta $28		              STA OPL2_REG_REGION
.3931cc		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.3931cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3931d1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3931d3		29 c0		and #$c0	              AND #$C0
.3931d5		4a		lsr a		              LSR A
.3931d6		4a		lsr a		              LSR A
.3931d7		4a		lsr a		              LSR A
.3931d8		4a		lsr a		              LSR A
.3931d9		4a		lsr a		              LSR A
.3931da		4a		lsr a		              LSR A
.3931db		6b		rtl		              RTL
.3931dc						OPL2_GET_BLOCK
.3931dc		48		pha		                PHA             ; begin setdp macro
.3931dd		08		php		                PHP
.3931de		c2 20		rep #$20	                REP #$20        ; set A long
.3931e0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3931e3		5b		tcd		                TCD
.3931e4		28		plp		                PLP
.3931e5		68		pla		                PLA             ; end setdp macro
.3931e6		e2 20		sep #$20	                SEP #$20        ; set A short
.3931e8		18		clc		              CLC
.3931e9		a5 27		lda $27		              LDA OPL2_CHANNEL
.3931eb		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.3931ed		69 b0		adc #$b0	              ADC #$B0
.3931ef		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.3931f1		a9 00		lda #$00	              LDA #$00
.3931f3		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.3931f5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3931f7		18		clc		              CLC
.3931f8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3931fb		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.3931fd		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3931ff		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393202		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393204		e2 20		sep #$20	                SEP #$20        ; set A short
.393206		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393208		29 1c		and #$1c	              AND #$1C
.39320a		4a		lsr a		              LSR A
.39320b		4a		lsr a		              LSR A
.39320c		6b		rtl		              RTL
.39320d						OPL2_GET_KEYON
.39320d		48		pha		                PHA             ; begin setdp macro
.39320e		08		php		                PHP
.39320f		c2 20		rep #$20	                REP #$20        ; set A long
.393211		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393214		5b		tcd		                TCD
.393215		28		plp		                PLP
.393216		68		pla		                PLA             ; end setdp macro
.393217		e2 20		sep #$20	                SEP #$20        ; set A short
.393219		18		clc		              CLC
.39321a		a5 27		lda $27		              LDA OPL2_CHANNEL
.39321c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39321e		69 b0		adc #$b0	              ADC #$B0
.393220		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393222		a9 00		lda #$00	              LDA #$00
.393224		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393226		c2 30		rep #$30	                REP #$30        ; set A&X long
.393228		18		clc		              CLC
.393229		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39322c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39322e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393230		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393233		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393235		e2 20		sep #$20	                SEP #$20        ; set A short
.393237		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393239		29 20		and #$20	              AND #$20
.39323b		6b		rtl		              RTL
.39323c						OPL2_GET_FEEDBACK
.39323c		48		pha		                PHA             ; begin setdp macro
.39323d		08		php		                PHP
.39323e		c2 20		rep #$20	                REP #$20        ; set A long
.393240		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393243		5b		tcd		                TCD
.393244		28		plp		                PLP
.393245		68		pla		                PLA             ; end setdp macro
.393246		e2 20		sep #$20	                SEP #$20        ; set A short
.393248		18		clc		              CLC
.393249		a5 27		lda $27		              LDA OPL2_CHANNEL
.39324b		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39324d		69 c0		adc #$c0	              ADC #$C0
.39324f		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393251		a9 00		lda #$00	              LDA #$00
.393253		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393255		c2 30		rep #$30	                REP #$30        ; set A&X long
.393257		18		clc		              CLC
.393258		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39325b		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39325d		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39325f		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393262		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393264		e2 20		sep #$20	                SEP #$20        ; set A short
.393266		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393268		29 e0		and #$e0	              AND #$E0
.39326a		4a		lsr a		              LSR
.39326b		6b		rtl		              RTL
.39326c						OPL2_GET_SYNTHMODE
.39326c		48		pha		                PHA             ; begin setdp macro
.39326d		08		php		                PHP
.39326e		c2 20		rep #$20	                REP #$20        ; set A long
.393270		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393273		5b		tcd		                TCD
.393274		28		plp		                PLP
.393275		68		pla		                PLA             ; end setdp macro
.393276		e2 20		sep #$20	                SEP #$20        ; set A short
.393278		18		clc		              CLC
.393279		a5 27		lda $27		              LDA OPL2_CHANNEL
.39327b		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39327d		69 c0		adc #$c0	              ADC #$C0
.39327f		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393281		a9 00		lda #$00	              LDA #$00
.393283		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393285		c2 30		rep #$30	                REP #$30        ; set A&X long
.393287		18		clc		              CLC
.393288		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39328b		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39328d		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39328f		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393292		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393294		e2 20		sep #$20	                SEP #$20        ; set A short
.393296		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393298		29 01		and #$01	              AND #$01
.39329a		6b		rtl		              RTL
.39329b						OPL2_GET_DEEPTREMOLO
.39329b		48		pha		                PHA             ; begin setdp macro
.39329c		08		php		                PHP
.39329d		c2 20		rep #$20	                REP #$20        ; set A long
.39329f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932a2		5b		tcd		                TCD
.3932a3		28		plp		                PLP
.3932a4		68		pla		                PLA             ; end setdp macro
.3932a5		c2 20		rep #$20	                REP #$20        ; set A long
.3932a7		a9 bd 00	lda #$00bd	              LDA #$00BD;
.3932aa		85 28		sta $28		              STA OPL2_REG_REGION
.3932ac		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.3932af		e2 20		sep #$20	                SEP #$20        ; set A short
.3932b1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3932b3		29 80		and #$80	              AND #$80
.3932b5		6b		rtl		              RTL
.3932b6						OPL2_GET_DEEPVIBRATO
.3932b6		48		pha		                PHA             ; begin setdp macro
.3932b7		08		php		                PHP
.3932b8		c2 20		rep #$20	                REP #$20        ; set A long
.3932ba		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932bd		5b		tcd		                TCD
.3932be		28		plp		                PLP
.3932bf		68		pla		                PLA             ; end setdp macro
.3932c0		c2 20		rep #$20	                REP #$20        ; set A long
.3932c2		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3932c5		69 bd 00	adc #$00bd	              ADC #$00BD
.3932c8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3932ca		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3932cd		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3932cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3932d1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3932d3		29 40		and #$40	              AND #$40
.3932d5		6b		rtl		              RTL
.3932d6						OPL2_GET_PERCUSSION
.3932d6		48		pha		                PHA             ; begin setdp macro
.3932d7		08		php		                PHP
.3932d8		c2 20		rep #$20	                REP #$20        ; set A long
.3932da		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932dd		5b		tcd		                TCD
.3932de		28		plp		                PLP
.3932df		68		pla		                PLA             ; end setdp macro
.3932e0		c2 20		rep #$20	                REP #$20        ; set A long
.3932e2		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.3932e5		69 bd 00	adc #$00bd	              ADC #$00BD
.3932e8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3932ea		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3932ed		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3932ef		e2 20		sep #$20	                SEP #$20        ; set A short
.3932f1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3932f3		29 20		and #$20	              AND #$20
.3932f5		6b		rtl		              RTL
.3932f6						OPL2_GET_DRUMS
.3932f6		48		pha		                PHA             ; begin setdp macro
.3932f7		08		php		                PHP
.3932f8		c2 20		rep #$20	                REP #$20        ; set A long
.3932fa		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3932fd		5b		tcd		                TCD
.3932fe		28		plp		                PLP
.3932ff		68		pla		                PLA             ; end setdp macro
.393300		c2 20		rep #$20	                REP #$20        ; set A long
.393302		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393305		69 bd 00	adc #$00bd	              ADC #$00BD
.393308		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39330a		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39330d		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39330f		e2 20		sep #$20	                SEP #$20        ; set A short
.393311		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393313		29 1f		and #$1f	              AND #$1F
.393315		6b		rtl		              RTL
.393316						OPL2_Get_WaveForm
.393316		6b		rtl		                RTL
.393317						OPL2_PLAYNOTE
.393317		48		pha		                PHA             ; begin setdp macro
.393318		08		php		                PHP
.393319		c2 20		rep #$20	                REP #$20        ; set A long
.39331b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39331e		5b		tcd		                TCD
.39331f		28		plp		                PLP
.393320		68		pla		                PLA             ; end setdp macro
.393321		e2 20		sep #$20	                SEP #$20        ; set A short
.393323		da		phx		                PHX
.393324		a9 00		lda #$00	                LDA #$00
.393326		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.393328		20 ff 38	jsr $3938ff	                JSR OPL2_SET_KEYON
.39332b		20 c4 38	jsr $3938c4	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.39332e		e2 10		sep #$10	                SEP #$10        ; set X short
.393330		a5 30		lda $30		                LDA OPL2_NOTE
.393332		3a		dec a		                DEC A
.393333		0a		asl a		                ASL A
.393334		aa		tax		                TAX
.393335		bf ae 10 39	lda $3910ae,x	                LDA @lnoteFNumbers,X
.393339		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.39333b		e8		inx		                INX
.39333c		bf ae 10 39	lda $3910ae,x	                LDA @lnoteFNumbers,X
.393340		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.393342		22 42 38 39	jsl $393842	                JSL OPL2_SET_FNUMBER
.393346		a9 01		lda #$01	                LDA #$01
.393348		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.39334a		20 ff 38	jsr $3938ff	                JSR OPL2_SET_KEYON
.39334d		c2 10		rep #$10	                REP #$10        ; set X long
.39334f		fa		plx		                PLX
.393350		6b		rtl		                RTL
.393351						OPL2_PLAYDRUM
.393351		6b		rtl		                RTL
.393352						OPL2_SET_INSTRUMENT
.393352		48		pha		                PHA             ; begin setdp macro
.393353		08		php		                PHP
.393354		c2 20		rep #$20	                REP #$20        ; set A long
.393356		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393359		5b		tcd		                TCD
.39335a		28		plp		                PLP
.39335b		68		pla		                PLA             ; end setdp macro
.39335c		38		sec		              SEC ; Set the WaveFormSelect to True
.39335d		22 40 35 39	jsl $393540	              JSL OPL2_SET_WAVEFORMSELECT;
.393361		e2 20		sep #$20	                SEP #$20        ; set A short
.393363		c2 10		rep #$10	                REP #$10        ; set X long
.393365		a0 00 00	ldy #$0000	              LDY #$0000
.393368		a2 00 00	ldx #$0000	              LDX #$0000
.39336b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.39336d		85 35		sta $35		              STA OPL2_PARAMETER3
.39336f		c8		iny		              INY
.393370		c9 06		cmp #$06	              CMP #$06
.393372		d0 03		bne $393377	              BNE PERCUSSION_NEXT07
.393374		82 70 01	brl $3934e7	              BRL Percussion_6
.393377						PERCUSSION_NEXT07
.393377		c9 07		cmp #$07	              CMP #$07
.393379		d0 03		bne $39337e	              BNE PERCUSSION_NEXT08
.39337b		82 44 01	brl $3934c2	              BRL Percussion_7
.39337e						PERCUSSION_NEXT08
.39337e		c9 08		cmp #$08	              CMP #$08
.393380		d0 03		bne $393385	              BNE PERCUSSION_NEXT09
.393382		82 18 01	brl $39349d	              BRL Percussion_8
.393385						PERCUSSION_NEXT09
.393385		c9 09		cmp #$09	              CMP #$09
.393387		d0 03		bne $39338c	              BNE PERCUSSION_NEXT0A
.393389		82 ec 00	brl $393478	              BRL Percussion_9
.39338c						PERCUSSION_NEXT0A
.39338c		c9 0a		cmp #$0a	              CMP #$0A
.39338e		d0 03		bne $393393	              BNE Percussion_Default
.393390		82 c0 00	brl $393453	              BRL Percussion_A
.393393						Percussion_Default
.393393		a9 00		lda #$00	              LDA #$00
.393395		85 26		sta $26		              STA OPL2_OPERATOR
.393397		c2 20		rep #$20	                REP #$20        ; set A long
.393399		a9 20 00	lda #$0020	              LDA #$0020;
.39339c		85 28		sta $28		              STA OPL2_REG_REGION
.39339e		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.3933a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3933a3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3933a5		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933a7		c8		iny		              INY
.3933a8		c2 20		rep #$20	                REP #$20        ; set A long
.3933aa		a9 40 00	lda #$0040	              LDA #$0040;
.3933ad		85 28		sta $28		              STA OPL2_REG_REGION
.3933af		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.3933b2		e2 20		sep #$20	                SEP #$20        ; set A short
.3933b4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3933b6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933b8		c8		iny		              INY
.3933b9		c2 20		rep #$20	                REP #$20        ; set A long
.3933bb		a9 60 00	lda #$0060	              LDA #$0060;
.3933be		85 28		sta $28		              STA OPL2_REG_REGION
.3933c0		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.3933c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3933c5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3933c7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933c9		c8		iny		              INY
.3933ca		c2 20		rep #$20	                REP #$20        ; set A long
.3933cc		a9 80 00	lda #$0080	              LDA #$0080;
.3933cf		85 28		sta $28		              STA OPL2_REG_REGION
.3933d1		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.3933d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3933d6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3933d8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933da		c8		iny		              INY
.3933db		c2 20		rep #$20	                REP #$20        ; set A long
.3933dd		a9 e0 00	lda #$00e0	              LDA #$00E0;
.3933e0		85 28		sta $28		              STA OPL2_REG_REGION
.3933e2		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.3933e5		e2 20		sep #$20	                SEP #$20        ; set A short
.3933e7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3933e9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3933eb		c8		iny		              INY
.3933ec		e2 10		sep #$10	                SEP #$10        ; set X short
.3933ee		a5 27		lda $27		              LDA OPL2_CHANNEL
.3933f0		29 0f		and #$0f	              AND #$0F
.3933f2		aa		tax		              TAX
.3933f3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.3933f5		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.3933f9		c8		iny		              INY
.3933fa		a9 01		lda #$01	              LDA #$01
.3933fc		85 26		sta $26		              STA OPL2_OPERATOR
.3933fe		c2 20		rep #$20	                REP #$20        ; set A long
.393400		a9 20 00	lda #$0020	              LDA #$0020;
.393403		85 28		sta $28		              STA OPL2_REG_REGION
.393405		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.393408		e2 20		sep #$20	                SEP #$20        ; set A short
.39340a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.39340c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39340e		c8		iny		              INY
.39340f		c2 20		rep #$20	                REP #$20        ; set A long
.393411		a9 40 00	lda #$0040	              LDA #$0040;
.393414		85 28		sta $28		              STA OPL2_REG_REGION
.393416		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.393419		e2 20		sep #$20	                SEP #$20        ; set A short
.39341b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.39341d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39341f		c8		iny		              INY
.393420		c2 20		rep #$20	                REP #$20        ; set A long
.393422		a9 60 00	lda #$0060	              LDA #$0060;
.393425		85 28		sta $28		              STA OPL2_REG_REGION
.393427		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.39342a		e2 20		sep #$20	                SEP #$20        ; set A short
.39342c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.39342e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393430		c8		iny		              INY
.393431		c2 20		rep #$20	                REP #$20        ; set A long
.393433		a9 80 00	lda #$0080	              LDA #$0080;
.393436		85 28		sta $28		              STA OPL2_REG_REGION
.393438		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.39343b		e2 20		sep #$20	                SEP #$20        ; set A short
.39343d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.39343f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393441		c8		iny		              INY
.393442		c2 20		rep #$20	                REP #$20        ; set A long
.393444		a9 e0 00	lda #$00e0	              LDA #$00E0;
.393447		85 28		sta $28		              STA OPL2_REG_REGION
.393449		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.39344c		e2 20		sep #$20	                SEP #$20        ; set A short
.39344e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.393450		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393452		6b		rtl		                RTL
.393453						Percussion_A
.393453		e2 20		sep #$20	                SEP #$20        ; set A short
.393455		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.393457		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.39345b		c8		iny		              INY
.39345c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.39345e		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.393462		c8		iny		              INY
.393463		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393465		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.393469		c8		iny		              INY
.39346a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39346c		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.393470		c8		iny		              INY
.393471		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393473		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.393477		6b		rtl		                RTL
.393478						Percussion_9
.393478		e2 20		sep #$20	                SEP #$20        ; set A short
.39347a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.39347c		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.393480		c8		iny		              INY
.393481		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.393483		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.393487		c8		iny		              INY
.393488		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.39348a		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.39348e		c8		iny		              INY
.39348f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.393491		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.393495		c8		iny		              INY
.393496		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393498		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.39349c		6b		rtl		              RTL
.39349d						Percussion_8
.39349d		e2 20		sep #$20	                SEP #$20        ; set A short
.39349f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3934a1		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.3934a5		c8		iny		              INY
.3934a6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3934a8		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.3934ac		c8		iny		              INY
.3934ad		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3934af		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.3934b3		c8		iny		              INY
.3934b4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3934b6		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.3934ba		c8		iny		              INY
.3934bb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3934bd		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.3934c1		6b		rtl		              RTL
.3934c2						Percussion_7
.3934c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3934c4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3934c6		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.3934ca		c8		iny		              INY
.3934cb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3934cd		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.3934d1		c8		iny		              INY
.3934d2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.3934d4		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.3934d8		c8		iny		              INY
.3934d9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.3934db		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.3934df		c8		iny		              INY
.3934e0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.3934e2		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.3934e6		6b		rtl		              RTL
.3934e7						Percussion_6
.3934e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3934e9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.3934eb		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.3934ef		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.3934f3		c8		iny		              INY
.3934f4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.3934f6		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.3934fa		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.3934fe		c8		iny		              INY
.3934ff		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.393501		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.393505		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.393509		c8		iny		              INY
.39350a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.39350c		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.393510		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.393514		c8		iny		              INY
.393515		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.393517		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.39351b		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.39351f		6b		rtl		              RTL
.393520						OPL2_SET_REGISTER
.393520		48		pha		                PHA             ; begin setdp macro
.393521		08		php		                PHP
.393522		c2 20		rep #$20	                REP #$20        ; set A long
.393524		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393527		5b		tcd		                TCD
.393528		28		plp		                PLP
.393529		68		pla		                PLA             ; end setdp macro
.39352a		c2 20		rep #$20	                REP #$20        ; set A long
.39352c		18		clc		              CLC
.39352d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393530		65 32		adc $32		              ADC OPL2_PARAMETER0
.393532		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393534		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393537		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393539		e2 20		sep #$20	                SEP #$20        ; set A short
.39353b		a5 33		lda $33		              LDA OPL2_PARAMETER1
.39353d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39353f		6b		rtl		              RTL
.393540						OPL2_SET_WAVEFORMSELECT
.393540		48		pha		                PHA             ; begin setdp macro
.393541		08		php		                PHP
.393542		c2 20		rep #$20	                REP #$20        ; set A long
.393544		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393547		5b		tcd		                TCD
.393548		28		plp		                PLP
.393549		68		pla		                PLA             ; end setdp macro
.39354a		c2 20		rep #$20	                REP #$20        ; set A long
.39354c		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.39354f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.393551		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393554		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393556		e2 20		sep #$20	                SEP #$20        ; set A short
.393558		b0 07		bcs $393561	              BCS OPL2_Set_WaveFormSelect_set
.39355a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39355c		29 df		and #$df	              AND #$DF
.39355e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393560		6b		rtl		              RTL
.393561						OPL2_Set_WaveFormSelect_set
.393561		48		pha		                PHA             ; begin setdp macro
.393562		08		php		                PHP
.393563		c2 20		rep #$20	                REP #$20        ; set A long
.393565		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393568		5b		tcd		                TCD
.393569		28		plp		                PLP
.39356a		68		pla		                PLA             ; end setdp macro
.39356b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39356d		09 20 00	ora #$0020	              ORA #$20
.393570		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393572		6b		rtl		                RTL
.393573						OPL2_SET_TREMOLO
.393573		48		pha		                PHA             ; begin setdp macro
.393574		08		php		                PHP
.393575		c2 20		rep #$20	                REP #$20        ; set A long
.393577		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39357a		5b		tcd		                TCD
.39357b		28		plp		                PLP
.39357c		68		pla		                PLA             ; end setdp macro
.39357d		08		php		                PHP ; Push the Carry
.39357e		c2 20		rep #$20	                REP #$20        ; set A long
.393580		18		clc		                CLC
.393581		a9 20 00	lda #$0020	                LDA #$0020 ;
.393584		85 28		sta $28		                STA OPL2_REG_REGION
.393586		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.393589		28		plp		                PLP ; Pull the Carry out
.39358a		e2 20		sep #$20	                SEP #$20        ; set A short
.39358c		b0 08		bcs $393596	                BCS OPL2_Set_Tremolo_Set;
.39358e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393590		29 7f		and #$7f	                AND #$7F
.393592		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393594		80 06		bra $39359c	                BRA OPL2_Set_Tremolo_Exit
.393596						OPL2_Set_Tremolo_Set
.393596		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393598		09 80		ora #$80	                ORA #$80
.39359a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39359c						OPL2_Set_Tremolo_Exit
.39359c		6b		rtl		                RTL
.39359d						OPL2_GET_TREMOLO
.39359d		48		pha		                PHA             ; begin setdp macro
.39359e		08		php		                PHP
.39359f		c2 20		rep #$20	                REP #$20        ; set A long
.3935a1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935a4		5b		tcd		                TCD
.3935a5		28		plp		                PLP
.3935a6		68		pla		                PLA             ; end setdp macro
.3935a7		c2 20		rep #$20	                REP #$20        ; set A long
.3935a9		a9 20 00	lda #$0020	                LDA #$0020;
.3935ac		85 28		sta $28		                STA OPL2_REG_REGION
.3935ae		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.3935b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3935b3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3935b5		29 80		and #$80	                AND #$80
.3935b7		6b		rtl		                RTL
.3935b8						OPL2_SET_VIBRATO
.3935b8		48		pha		                PHA             ; begin setdp macro
.3935b9		08		php		                PHP
.3935ba		c2 20		rep #$20	                REP #$20        ; set A long
.3935bc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935bf		5b		tcd		                TCD
.3935c0		28		plp		                PLP
.3935c1		68		pla		                PLA             ; end setdp macro
.3935c2		08		php		                PHP ; Push the Carry
.3935c3		c2 20		rep #$20	                REP #$20        ; set A long
.3935c5		18		clc		                CLC
.3935c6		a9 20 00	lda #$0020	                LDA #$0020;
.3935c9		85 28		sta $28		                STA OPL2_REG_REGION
.3935cb		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.3935ce		28		plp		                PLP ; Pull the Carry out
.3935cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3935d1		b0 08		bcs $3935db	                BCS OPL2_Set_Vibrato_Set;
.3935d3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3935d5		29 bf		and #$bf	                AND #$BF
.3935d7		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3935d9		80 06		bra $3935e1	                BRA OPL2_Set_Vibrato_Exit
.3935db						OPL2_Set_Vibrato_Set
.3935db		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3935dd		09 40		ora #$40	                ORA #$40
.3935df		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3935e1						OPL2_Set_Vibrato_Exit
.3935e1		6b		rtl		                RTL
.3935e2						OPL2_GET_VIBRATO
.3935e2		48		pha		                PHA             ; begin setdp macro
.3935e3		08		php		                PHP
.3935e4		c2 20		rep #$20	                REP #$20        ; set A long
.3935e6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3935e9		5b		tcd		                TCD
.3935ea		28		plp		                PLP
.3935eb		68		pla		                PLA             ; end setdp macro
.3935ec		c2 20		rep #$20	                REP #$20        ; set A long
.3935ee		a9 20 00	lda #$0020	                LDA #$0020;
.3935f1		85 28		sta $28		                STA OPL2_REG_REGION
.3935f3		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.3935f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3935f8		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3935fa		29 40		and #$40	                AND #$40
.3935fc		6b		rtl		                RTL
.3935fd						OPL2_SET_MAINTAINSUSTAIN
.3935fd		48		pha		                PHA             ; begin setdp macro
.3935fe		08		php		                PHP
.3935ff		c2 20		rep #$20	                REP #$20        ; set A long
.393601		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393604		5b		tcd		                TCD
.393605		28		plp		                PLP
.393606		68		pla		                PLA             ; end setdp macro
.393607		08		php		              PHP ; Push the Carry
.393608		c2 20		rep #$20	                REP #$20        ; set A long
.39360a		18		clc		              CLC
.39360b		a9 20 00	lda #$0020	              LDA #$0020;
.39360e		85 28		sta $28		              STA OPL2_REG_REGION
.393610		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.393613		28		plp		              PLP ; Pull the Carry out
.393614		e2 20		sep #$20	                SEP #$20        ; set A short
.393616		b0 08		bcs $393620	              BCS OPL2_Set_MaintainSustain_Set;
.393618		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39361a		29 df		and #$df	              AND #$DF
.39361c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39361e		80 06		bra $393626	              BRA OPL2_Set_MaintainSustain_Exit
.393620						OPL2_Set_MaintainSustain_Set
.393620		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393622		09 20		ora #$20	              ORA #$20
.393624		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393626						OPL2_Set_MaintainSustain_Exit
.393626		6b		rtl		                RTL
.393627						OPL2_GET_MAINTAINSUSTAIN
.393627		48		pha		                PHA             ; begin setdp macro
.393628		08		php		                PHP
.393629		c2 20		rep #$20	                REP #$20        ; set A long
.39362b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39362e		5b		tcd		                TCD
.39362f		28		plp		                PLP
.393630		68		pla		                PLA             ; end setdp macro
.393631		c2 20		rep #$20	                REP #$20        ; set A long
.393633		a9 20 00	lda #$0020	              LDA #$0020;
.393636		85 28		sta $28		              STA OPL2_REG_REGION
.393638		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.39363b		e2 20		sep #$20	                SEP #$20        ; set A short
.39363d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39363f		29 20		and #$20	              AND #$20
.393641		6b		rtl		                RTL
.393642						OPL2_SET_ENVELOPESCALING
.393642		48		pha		                PHA             ; begin setdp macro
.393643		08		php		                PHP
.393644		c2 20		rep #$20	                REP #$20        ; set A long
.393646		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393649		5b		tcd		                TCD
.39364a		28		plp		                PLP
.39364b		68		pla		                PLA             ; end setdp macro
.39364c		08		php		              PHP ; Push the Carry
.39364d		c2 20		rep #$20	                REP #$20        ; set A long
.39364f		18		clc		              CLC
.393650		a9 20 00	lda #$0020	              LDA #$0020;
.393653		85 28		sta $28		              STA OPL2_REG_REGION
.393655		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.393658		28		plp		              PLP ; Pull the Carry out
.393659		e2 20		sep #$20	                SEP #$20        ; set A short
.39365b		b0 08		bcs $393665	              BCS OPL2_Set_EnvelopeScaling_Set;
.39365d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39365f		29 ef		and #$ef	              AND #$EF
.393661		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393663		80 06		bra $39366b	              BRA OPL2_Set_EnvelopeScaling_Exit
.393665						OPL2_Set_EnvelopeScaling_Set
.393665		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393667		09 10		ora #$10	              ORA #$10
.393669		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.39366b						OPL2_Set_EnvelopeScaling_Exit
.39366b		6b		rtl		                RTL
.39366c						OPL2_GET_ENVELOPESCALING
.39366c		48		pha		                PHA             ; begin setdp macro
.39366d		08		php		                PHP
.39366e		c2 20		rep #$20	                REP #$20        ; set A long
.393670		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393673		5b		tcd		                TCD
.393674		28		plp		                PLP
.393675		68		pla		                PLA             ; end setdp macro
.393676		c2 20		rep #$20	                REP #$20        ; set A long
.393678		a9 20 00	lda #$0020	              LDA #$0020;
.39367b		85 28		sta $28		              STA OPL2_REG_REGION
.39367d		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.393680		e2 20		sep #$20	                SEP #$20        ; set A short
.393682		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393684		29 10		and #$10	              AND #$10
.393686		6b		rtl		                RTL
.393687						OPL2_GET_MODFREQMULTIPLE
.393687		48		pha		                PHA             ; begin setdp macro
.393688		08		php		                PHP
.393689		c2 20		rep #$20	                REP #$20        ; set A long
.39368b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39368e		5b		tcd		                TCD
.39368f		28		plp		                PLP
.393690		68		pla		                PLA             ; end setdp macro
.393691		c2 20		rep #$20	                REP #$20        ; set A long
.393693		a9 20 00	lda #$0020	              LDA #$0020;
.393696		85 28		sta $28		              STA OPL2_REG_REGION
.393698		20 7e 3a	jsr $393a7e	              JSR OPL2_GET_REG_OFFSET
.39369b		e2 20		sep #$20	                SEP #$20        ; set A short
.39369d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39369f		29 0f		and #$0f	              AND #$0F
.3936a1		6b		rtl		              RTL
.3936a2						OPL2_SET_MODFREQMULTIPLE
.3936a2		48		pha		                PHA             ; begin setdp macro
.3936a3		08		php		                PHP
.3936a4		c2 20		rep #$20	                REP #$20        ; set A long
.3936a6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936a9		5b		tcd		                TCD
.3936aa		28		plp		                PLP
.3936ab		68		pla		                PLA             ; end setdp macro
.3936ac		c2 20		rep #$20	                REP #$20        ; set A long
.3936ae		a9 20 00	lda #$0020	                LDA #$0020;
.3936b1		85 28		sta $28		                STA OPL2_REG_REGION
.3936b3		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.3936b6		e2 20		sep #$20	                SEP #$20        ; set A short
.3936b8		a5 32		lda $32		                LDA OPL2_PARAMETER0
.3936ba		29 0f		and #$0f	                AND #$0F
.3936bc		85 32		sta $32		                STA OPL2_PARAMETER0
.3936be		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936c0		29 f0		and #$f0	                AND #$F0
.3936c2		05 32		ora $32		                ORA OPL2_PARAMETER0
.3936c4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3936c6		6b		rtl		                RTL
.3936c7						OPL2_SET_SCALINGLEVEL
.3936c7		48		pha		                PHA             ; begin setdp macro
.3936c8		08		php		                PHP
.3936c9		c2 20		rep #$20	                REP #$20        ; set A long
.3936cb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936ce		5b		tcd		                TCD
.3936cf		28		plp		                PLP
.3936d0		68		pla		                PLA             ; end setdp macro
.3936d1		c2 20		rep #$20	                REP #$20        ; set A long
.3936d3		a9 40 00	lda #$0040	                LDA #$0040;
.3936d6		85 28		sta $28		                STA OPL2_REG_REGION
.3936d8		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.3936db		e2 20		sep #$20	                SEP #$20        ; set A short
.3936dd		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3936df		29 03		and #$03	                AND #$03
.3936e1		0a		asl a		                ASL
.3936e2		0a		asl a		                ASL
.3936e3		0a		asl a		                ASL
.3936e4		0a		asl a		                ASL
.3936e5		0a		asl a		                ASL
.3936e6		0a		asl a		                ASL
.3936e7		85 32		sta $32		                STA OPL2_PARAMETER0
.3936e9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3936eb		29 3f		and #$3f	                AND #$3F
.3936ed		05 32		ora $32		                ORA OPL2_PARAMETER0
.3936ef		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3936f1		6b		rtl		                RTL
.3936f2						OPL2_SET_VOLUME
.3936f2		48		pha		                PHA             ; begin setdp macro
.3936f3		08		php		                PHP
.3936f4		c2 20		rep #$20	                REP #$20        ; set A long
.3936f6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3936f9		5b		tcd		                TCD
.3936fa		28		plp		                PLP
.3936fb		68		pla		                PLA             ; end setdp macro
.3936fc		c2 20		rep #$20	                REP #$20        ; set A long
.3936fe		a9 40 00	lda #$0040	                LDA #$0040  ;
.393701		85 28		sta $28		                STA OPL2_REG_REGION
.393703		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.393706		e2 20		sep #$20	                SEP #$20        ; set A short
.393708		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.39370a		29 3f		and #$3f	                AND #$3F
.39370c		85 32		sta $32		                STA OPL2_PARAMETER0
.39370e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393710		29 c0		and #$c0	                AND #$C0
.393712		05 32		ora $32		                ORA OPL2_PARAMETER0
.393714		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393716		6b		rtl		                RTL
.393717						OPL2_GET_VOLUME
.393717		48		pha		                PHA             ; begin setdp macro
.393718		08		php		                PHP
.393719		c2 20		rep #$20	                REP #$20        ; set A long
.39371b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39371e		5b		tcd		                TCD
.39371f		28		plp		                PLP
.393720		68		pla		                PLA             ; end setdp macro
.393721		c2 20		rep #$20	                REP #$20        ; set A long
.393723		a9 40 00	lda #$0040	                LDA #$0040  ;
.393726		85 28		sta $28		                STA OPL2_REG_REGION
.393728		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.39372b		e2 20		sep #$20	                SEP #$20        ; set A short
.39372d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39372f		29 3f		and #$3f	                AND #$3F
.393731		6b		rtl		                RTL
.393732						OPL2_SET_ATTACK
.393732		48		pha		                PHA             ; begin setdp macro
.393733		08		php		                PHP
.393734		c2 20		rep #$20	                REP #$20        ; set A long
.393736		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393739		5b		tcd		                TCD
.39373a		28		plp		                PLP
.39373b		68		pla		                PLA             ; end setdp macro
.39373c		c2 20		rep #$20	                REP #$20        ; set A long
.39373e		a9 60 00	lda #$0060	                LDA #$0060  ;
.393741		85 28		sta $28		                STA OPL2_REG_REGION
.393743		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.393746		e2 20		sep #$20	                SEP #$20        ; set A short
.393748		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39374a		29 0f		and #$0f	                AND #$0F
.39374c		0a		asl a		                ASL
.39374d		0a		asl a		                ASL
.39374e		0a		asl a		                ASL
.39374f		0a		asl a		                ASL
.393750		85 32		sta $32		                STA OPL2_PARAMETER0
.393752		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393754		29 0f		and #$0f	                AND #$0F
.393756		05 32		ora $32		                ORA OPL2_PARAMETER0
.393758		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39375a		6b		rtl		                RTL
.39375b						OPL2_GET_ATTACK
.39375b		48		pha		                PHA             ; begin setdp macro
.39375c		08		php		                PHP
.39375d		c2 20		rep #$20	                REP #$20        ; set A long
.39375f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393762		5b		tcd		                TCD
.393763		28		plp		                PLP
.393764		68		pla		                PLA             ; end setdp macro
.393765		c2 20		rep #$20	                REP #$20        ; set A long
.393767		a9 60 00	lda #$0060	                LDA #$0060
.39376a		85 28		sta $28		                STA OPL2_REG_REGION
.39376c		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.39376f		e2 20		sep #$20	                SEP #$20        ; set A short
.393771		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393773		29 f0		and #$f0	                AND #$F0
.393775		4a		lsr a		                LSR
.393776		4a		lsr a		                LSR
.393777		4a		lsr a		                LSR
.393778		4a		lsr a		                LSR
.393779		6b		rtl		                RTL
.39377a						OPL2_SET_DECAY
.39377a		48		pha		                PHA             ; begin setdp macro
.39377b		08		php		                PHP
.39377c		c2 20		rep #$20	                REP #$20        ; set A long
.39377e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393781		5b		tcd		                TCD
.393782		28		plp		                PLP
.393783		68		pla		                PLA             ; end setdp macro
.393784		c2 20		rep #$20	                REP #$20        ; set A long
.393786		a9 60 00	lda #$0060	                LDA #$0060;
.393789		85 28		sta $28		                STA OPL2_REG_REGION
.39378b		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.39378e		e2 20		sep #$20	                SEP #$20        ; set A short
.393790		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.393792		29 0f		and #$0f	                AND #$0F
.393794		85 32		sta $32		                STA OPL2_PARAMETER0
.393796		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393798		29 f0		and #$f0	                AND #$F0
.39379a		05 32		ora $32		                ORA OPL2_PARAMETER0
.39379c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39379e		6b		rtl		                RTL
.39379f						OPL2_GET_DECAY
.39379f		48		pha		                PHA             ; begin setdp macro
.3937a0		08		php		                PHP
.3937a1		c2 20		rep #$20	                REP #$20        ; set A long
.3937a3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937a6		5b		tcd		                TCD
.3937a7		28		plp		                PLP
.3937a8		68		pla		                PLA             ; end setdp macro
.3937a9		c2 20		rep #$20	                REP #$20        ; set A long
.3937ab		a9 60 00	lda #$0060	                LDA #$0060
.3937ae		85 28		sta $28		                STA OPL2_REG_REGION
.3937b0		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.3937b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3937b5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937b7		29 0f		and #$0f	                AND #$0F
.3937b9		6b		rtl		                RTL
.3937ba						OPL2_SET_SUSTAIN
.3937ba		48		pha		                PHA             ; begin setdp macro
.3937bb		08		php		                PHP
.3937bc		c2 20		rep #$20	                REP #$20        ; set A long
.3937be		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937c1		5b		tcd		                TCD
.3937c2		28		plp		                PLP
.3937c3		68		pla		                PLA             ; end setdp macro
.3937c4		c2 20		rep #$20	                REP #$20        ; set A long
.3937c6		a9 80 00	lda #$0080	                LDA #$0080;
.3937c9		85 28		sta $28		                STA OPL2_REG_REGION
.3937cb		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.3937ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3937d0		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.3937d2		29 0f		and #$0f	                AND #$0F
.3937d4		0a		asl a		                ASL
.3937d5		0a		asl a		                ASL
.3937d6		0a		asl a		                ASL
.3937d7		0a		asl a		                ASL
.3937d8		85 32		sta $32		                STA OPL2_PARAMETER0
.3937da		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937dc		29 0f		and #$0f	                AND #$0F
.3937de		05 32		ora $32		                ORA OPL2_PARAMETER0
.3937e0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3937e2		6b		rtl		                RTL
.3937e3						OPL2_GET_SUSTAIN
.3937e3		48		pha		                PHA             ; begin setdp macro
.3937e4		08		php		                PHP
.3937e5		c2 20		rep #$20	                REP #$20        ; set A long
.3937e7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3937ea		5b		tcd		                TCD
.3937eb		28		plp		                PLP
.3937ec		68		pla		                PLA             ; end setdp macro
.3937ed		c2 20		rep #$20	                REP #$20        ; set A long
.3937ef		a9 80 00	lda #$0080	                LDA #$0080
.3937f2		85 28		sta $28		                STA OPL2_REG_REGION
.3937f4		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.3937f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3937f9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3937fb		29 f0		and #$f0	                AND #$F0
.3937fd		4a		lsr a		                LSR
.3937fe		4a		lsr a		                LSR
.3937ff		4a		lsr a		                LSR
.393800		4a		lsr a		                LSR
.393801		6b		rtl		                RTL
.393802						OPL2_SET_RELEASE
.393802		48		pha		                PHA             ; begin setdp macro
.393803		08		php		                PHP
.393804		c2 20		rep #$20	                REP #$20        ; set A long
.393806		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393809		5b		tcd		                TCD
.39380a		28		plp		                PLP
.39380b		68		pla		                PLA             ; end setdp macro
.39380c		c2 20		rep #$20	                REP #$20        ; set A long
.39380e		a9 80 00	lda #$0080	                LDA #$0080;
.393811		85 28		sta $28		                STA OPL2_REG_REGION
.393813		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.393816		e2 20		sep #$20	                SEP #$20        ; set A short
.393818		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.39381a		29 0f		and #$0f	                AND #$0F
.39381c		85 32		sta $32		                STA OPL2_PARAMETER0
.39381e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393820		29 f0		and #$f0	                AND #$F0
.393822		05 32		ora $32		                ORA OPL2_PARAMETER0
.393824		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393826		6b		rtl		                RTL
.393827						OPL2_GET_RELEASE
.393827		48		pha		                PHA             ; begin setdp macro
.393828		08		php		                PHP
.393829		c2 20		rep #$20	                REP #$20        ; set A long
.39382b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39382e		5b		tcd		                TCD
.39382f		28		plp		                PLP
.393830		68		pla		                PLA             ; end setdp macro
.393831		c2 20		rep #$20	                REP #$20        ; set A long
.393833		a9 80 00	lda #$0080	                LDA #$0080
.393836		85 28		sta $28		                STA OPL2_REG_REGION
.393838		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.39383b		e2 20		sep #$20	                SEP #$20        ; set A short
.39383d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39383f		29 0f		and #$0f	                AND #$0F
.393841		6b		rtl		                RTL
.393842						OPL2_SET_FNUMBER
.393842		48		pha		                PHA             ; begin setdp macro
.393843		08		php		                PHP
.393844		c2 20		rep #$20	                REP #$20        ; set A long
.393846		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393849		5b		tcd		                TCD
.39384a		28		plp		                PLP
.39384b		68		pla		                PLA             ; end setdp macro
.39384c		e2 20		sep #$20	                SEP #$20        ; set A short
.39384e		18		clc		                CLC
.39384f		a5 27		lda $27		                LDA OPL2_CHANNEL
.393851		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393853		69 a0		adc #$a0	                ADC #$A0
.393855		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393857		a9 00		lda #$00	                LDA #$00
.393859		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39385b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39385d		18		clc		                CLC
.39385e		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393861		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393863		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393865		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393868		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.39386a		e2 20		sep #$20	                SEP #$20        ; set A short
.39386c		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.39386e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.393870		18		clc		                CLC
.393871		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.393873		69 10		adc #$10	                ADC #$10
.393875		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393877		a5 33		lda $33		                LDA OPL2_PARAMETER1
.393879		29 03		and #$03	                AND #$03
.39387b		85 33		sta $33		                STA OPL2_PARAMETER1
.39387d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.39387f		29 fc		and #$fc	                AND #$FC
.393881		05 33		ora $33		                ORA OPL2_PARAMETER1
.393883		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393885		6b		rtl		                RTL
.393886						OPL2_GET_FNUMBER
.393886		48		pha		                PHA             ; begin setdp macro
.393887		08		php		                PHP
.393888		c2 20		rep #$20	                REP #$20        ; set A long
.39388a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39388d		5b		tcd		                TCD
.39388e		28		plp		                PLP
.39388f		68		pla		                PLA             ; end setdp macro
.393890		e2 20		sep #$20	                SEP #$20        ; set A short
.393892		18		clc		                CLC
.393893		a5 27		lda $27		                LDA OPL2_CHANNEL
.393895		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393897		69 a0		adc #$a0	                ADC #$A0
.393899		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.39389b		a9 00		lda #$00	                LDA #$00
.39389d		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.39389f		c2 30		rep #$30	                REP #$30        ; set A&X long
.3938a1		18		clc		                CLC
.3938a2		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3938a5		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3938a7		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3938a9		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3938ac		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3938ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3938b0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938b2		85 32		sta $32		                STA OPL2_PARAMETER0
.3938b4		18		clc		                CLC
.3938b5		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.3938b7		69 10		adc #$10	                ADC #$10
.3938b9		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3938bb		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938bd		29 03		and #$03	                AND #$03
.3938bf		85 33		sta $33		                STA OPL2_PARAMETER1
.3938c1		6b		rtl		                RTL
.3938c2						OPL2_Set_Frequency
.3938c2		6b		rtl		                RTL
.3938c3						OPL2_Get_Frequency
.3938c3		6b		rtl		                RTL
.3938c4						OPL2_SET_BLOCK
.3938c4		48		pha		                PHA             ; begin setdp macro
.3938c5		08		php		                PHP
.3938c6		c2 20		rep #$20	                REP #$20        ; set A long
.3938c8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3938cb		5b		tcd		                TCD
.3938cc		28		plp		                PLP
.3938cd		68		pla		                PLA             ; end setdp macro
.3938ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3938d0		18		clc		                CLC
.3938d1		a5 27		lda $27		                LDA OPL2_CHANNEL
.3938d3		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.3938d5		69 b0		adc #$b0	                ADC #$B0
.3938d7		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.3938d9		a9 00		lda #$00	                LDA #$00
.3938db		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.3938dd		c2 30		rep #$30	                REP #$30        ; set A&X long
.3938df		18		clc		                CLC
.3938e0		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.3938e3		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.3938e5		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.3938e7		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.3938ea		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.3938ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3938ee		a5 31		lda $31		                LDA OPL2_OCTAVE
.3938f0		29 07		and #$07	                AND #$07
.3938f2		0a		asl a		                ASL
.3938f3		0a		asl a		                ASL
.3938f4		85 31		sta $31		                STA OPL2_OCTAVE
.3938f6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.3938f8		29 e3		and #$e3	                AND #$E3
.3938fa		05 31		ora $31		                ORA OPL2_OCTAVE
.3938fc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.3938fe		60		rts		                RTS
.3938ff						OPL2_SET_KEYON
.3938ff		48		pha		                PHA             ; begin setdp macro
.393900		08		php		                PHP
.393901		c2 20		rep #$20	                REP #$20        ; set A long
.393903		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393906		5b		tcd		                TCD
.393907		28		plp		                PLP
.393908		68		pla		                PLA             ; end setdp macro
.393909		e2 20		sep #$20	                SEP #$20        ; set A short
.39390b		18		clc		                CLC
.39390c		a5 27		lda $27		                LDA OPL2_CHANNEL
.39390e		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.393910		69 b0		adc #$b0	                ADC #$B0
.393912		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393914		a9 00		lda #$00	                LDA #$00
.393916		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393918		c2 30		rep #$30	                REP #$30        ; set A&X long
.39391a		18		clc		                CLC
.39391b		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.39391e		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393920		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393922		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393925		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393927		e2 20		sep #$20	                SEP #$20        ; set A short
.393929		a5 32		lda $32		                LDA OPL2_PARAMETER0
.39392b		29 01		and #$01	                AND #$01
.39392d		f0 02		beq $393931	                BEQ SET_KEYON_OFF
.39392f		a9 20		lda #$20	                LDA #$20
.393931						    SET_KEYON_OFF
.393931		85 32		sta $32		                STA OPL2_PARAMETER0
.393933		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393935		29 df		and #$df	                AND #$DF
.393937		05 32		ora $32		                ORA OPL2_PARAMETER0
.393939		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.39393b		60		rts		                RTS
.39393c						OPL2_SET_FEEDBACK
.39393c		48		pha		                PHA             ; begin setdp macro
.39393d		08		php		                PHP
.39393e		c2 20		rep #$20	                REP #$20        ; set A long
.393940		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393943		5b		tcd		                TCD
.393944		28		plp		                PLP
.393945		68		pla		                PLA             ; end setdp macro
.393946		e2 20		sep #$20	                SEP #$20        ; set A short
.393948		18		clc		              CLC
.393949		a5 27		lda $27		              LDA OPL2_CHANNEL
.39394b		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.39394d		69 c0		adc #$c0	              ADC #$C0
.39394f		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.393951		a9 00		lda #$00	              LDA #$00
.393953		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393955		c2 30		rep #$30	                REP #$30        ; set A&X long
.393957		18		clc		              CLC
.393958		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.39395b		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.39395d		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39395f		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.393962		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.393964		e2 20		sep #$20	                SEP #$20        ; set A short
.393966		a5 32		lda $32		              LDA OPL2_PARAMETER0
.393968		29 07		and #$07	              AND #$07
.39396a		0a		asl a		              ASL
.39396b		85 32		sta $32		              STA OPL2_PARAMETER0
.39396d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.39396f		29 01		and #$01	              AND #$01
.393971		05 32		ora $32		              ORA OPL2_PARAMETER0
.393973		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393975		6b		rtl		                RTL
.393976						OPL2_SET_SYNTHMODE
.393976		48		pha		                PHA             ; begin setdp macro
.393977		08		php		                PHP
.393978		c2 20		rep #$20	                REP #$20        ; set A long
.39397a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.39397d		5b		tcd		                TCD
.39397e		28		plp		                PLP
.39397f		68		pla		                PLA             ; end setdp macro
.393980		08		php		              PHP ; Push the Carry
.393981		e2 20		sep #$20	                SEP #$20        ; set A short
.393983		18		clc		              CLC
.393984		a5 27		lda $27		              LDA OPL2_CHANNEL
.393986		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.393988		69 c0		adc #$c0	              ADC #$C0
.39398a		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.39398c		a9 00		lda #$00	              LDA #$00
.39398e		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.393990		c2 30		rep #$30	                REP #$30        ; set A&X long
.393992		18		clc		              CLC
.393993		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.393996		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.393998		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.39399a		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.39399d		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.39399f		28		plp		              PLP ; Pull the Carry out
.3939a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3939a2		b0 08		bcs $3939ac	              BCS OPL2_Set_Synthmode_Set;
.3939a4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939a6		29 fe		and #$fe	              AND #$FE
.3939a8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939aa		80 06		bra $3939b2	              BRA OPL2_Set_Synthmode_Exit
.3939ac						OPL2_Set_Synthmode_Set
.3939ac		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939ae		09 01		ora #$01	              ORA #$01
.3939b0		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939b2						OPL2_Set_Synthmode_Exit
.3939b2		6b		rtl		                RTL
.3939b3						OPL2_SET_DEEPTREMOLO
.3939b3		48		pha		                PHA             ; begin setdp macro
.3939b4		08		php		                PHP
.3939b5		c2 20		rep #$20	                REP #$20        ; set A long
.3939b7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939ba		5b		tcd		                TCD
.3939bb		28		plp		                PLP
.3939bc		68		pla		                PLA             ; end setdp macro
.3939bd		c2 20		rep #$20	                REP #$20        ; set A long
.3939bf		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.3939c2		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3939c4		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3939c7		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3939c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3939cb		b0 08		bcs $3939d5	              BCS OPL2_Set_DeepTremolo_Set;
.3939cd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939cf		29 7f		and #$7f	              AND #$7F
.3939d1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939d3		80 06		bra $3939db	              BRA OPL2_Set_DeepTremolo_Exit
.3939d5						OPL2_Set_DeepTremolo_Set
.3939d5		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939d7		09 80		ora #$80	              ORA #$80
.3939d9		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939db						OPL2_Set_DeepTremolo_Exit
.3939db		6b		rtl		                RTL
.3939dc						OPL2_SET_DEEPVIBRATO
.3939dc		48		pha		                PHA             ; begin setdp macro
.3939dd		08		php		                PHP
.3939de		c2 20		rep #$20	                REP #$20        ; set A long
.3939e0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.3939e3		5b		tcd		                TCD
.3939e4		28		plp		                PLP
.3939e5		68		pla		                PLA             ; end setdp macro
.3939e6		c2 20		rep #$20	                REP #$20        ; set A long
.3939e8		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.3939eb		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.3939ed		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.3939f0		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.3939f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3939f4		b0 08		bcs $3939fe	              BCS OPL2_Set_DeepVibrato_Set;
.3939f6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.3939f8		29 bf		and #$bf	              AND #$BF
.3939fa		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.3939fc		80 06		bra $393a04	              BRA OPL2_Set_DeepVibrato_Exit
.3939fe						OPL2_Set_DeepVibrato_Set
.3939fe		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.393a00		09 40		ora #$40	              ORA #$40
.393a02		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.393a04						OPL2_Set_DeepVibrato_Exit
.393a04		6b		rtl		                RTL
.393a05						OPL2_SET_PERCUSSION
.393a05		48		pha		                PHA             ; begin setdp macro
.393a06		08		php		                PHP
.393a07		c2 20		rep #$20	                REP #$20        ; set A long
.393a09		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a0c		5b		tcd		                TCD
.393a0d		28		plp		                PLP
.393a0e		68		pla		                PLA             ; end setdp macro
.393a0f		c2 20		rep #$20	                REP #$20        ; set A long
.393a11		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393a14		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393a16		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393a19		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393a1b		e2 20		sep #$20	                SEP #$20        ; set A short
.393a1d		b0 08		bcs $393a27	                BCS OPL2_Set_Percussion_Set;
.393a1f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a21		29 df		and #$df	                AND #$DF
.393a23		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a25		80 06		bra $393a2d	                BRA OPL2_Set_Percussion_Exit
.393a27						OPL2_Set_Percussion_Set
.393a27		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a29		09 20		ora #$20	                ORA #$20
.393a2b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a2d						OPL2_Set_Percussion_Exit
.393a2d		6b		rtl		                RTL
.393a2e						OPL2_SET_DRUMS
.393a2e		48		pha		                PHA             ; begin setdp macro
.393a2f		08		php		                PHP
.393a30		c2 20		rep #$20	                REP #$20        ; set A long
.393a32		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a35		5b		tcd		                TCD
.393a36		28		plp		                PLP
.393a37		68		pla		                PLA             ; end setdp macro
.393a38		c2 20		rep #$20	                REP #$20        ; set A long
.393a3a		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.393a3d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393a3f		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393a42		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393a44		e2 20		sep #$20	                SEP #$20        ; set A short
.393a46		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393a48		29 1f		and #$1f	                AND #$1F
.393a4a		85 32		sta $32		                STA OPL2_PARAMETER0
.393a4c		49 ff		eor #$ff	                EOR #$FF
.393a4e		85 33		sta $33		                STA OPL2_PARAMETER1
.393a50		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a52		25 33		and $33		                AND OPL2_PARAMETER1
.393a54		05 32		ora $32		                ORA OPL2_PARAMETER0
.393a56		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a58		6b		rtl		                RTL
.393a59						OPL2_SET_WAVEFORM
.393a59		48		pha		                PHA             ; begin setdp macro
.393a5a		08		php		                PHP
.393a5b		c2 20		rep #$20	                REP #$20        ; set A long
.393a5d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.393a60		5b		tcd		                TCD
.393a61		28		plp		                PLP
.393a62		68		pla		                PLA             ; end setdp macro
.393a63		c2 20		rep #$20	                REP #$20        ; set A long
.393a65		a9 e0 00	lda #$00e0	                LDA #$00E0;
.393a68		85 28		sta $28		                STA OPL2_REG_REGION
.393a6a		20 7e 3a	jsr $393a7e	                JSR OPL2_GET_REG_OFFSET
.393a6d		e2 20		sep #$20	                SEP #$20        ; set A short
.393a6f		a5 32		lda $32		                LDA OPL2_PARAMETER0
.393a71		29 03		and #$03	                AND #$03
.393a73		85 32		sta $32		                STA OPL2_PARAMETER0
.393a75		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.393a77		29 fc		and #$fc	                AND #$FC
.393a79		05 32		ora $32		                ORA OPL2_PARAMETER0
.393a7b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.393a7d		6b		rtl		                RTL
.393a7e						OPL2_GET_REG_OFFSET
.393a7e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.393a80		a5 27		lda $27		                LDA OPL2_CHANNEL
.393a82		29 0f		and #$0f	                AND #$0F
.393a84		aa		tax		                TAX
.393a85		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.393a87		d0 06		bne $393a8f	                BNE OPL2_Get_Register_Offset_l0
.393a89		bf c6 10 39	lda $3910c6,x	                LDA @lregisterOffsets_operator0, X
.393a8d		80 04		bra $393a93	                BRA OPL2_Get_Register_Offset_exit
.393a8f						OPL2_Get_Register_Offset_l0
.393a8f		bf cf 10 39	lda $3910cf,x	                LDA @lregisterOffsets_operator1, X
.393a93						OPL2_Get_Register_Offset_exit
.393a93		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.393a95		a9 00		lda #$00	                LDA #$00
.393a97		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.393a99		c2 30		rep #$30	                REP #$30        ; set A&X long
.393a9b		18		clc		                CLC
.393a9c		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.393a9f		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.393aa1		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.393aa3		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.393aa5		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.393aa8		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.393aaa		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.393aab						ITRACE
.393aab		08		php		                PHP
.393aac		c2 30		rep #$30	                REP #$30        ; set A&X long
.393aae		8b		phb		                PHB                 ; Print the text
.393aaf		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.393ab1		aa		tax		                TAX                 ; ... into X
.393ab2		e2 20		sep #$20	                SEP #$20        ; set A short
.393ab4		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.393ab6		48		pha		                PHA
.393ab7		ab		plb		                PLB                 ; ... into B
.393ab8		22 20 07 39	jsl $390720	                JSL IPUTS           ; Print the string
.393abc		c2 20		rep #$20	                REP #$20        ; set A long
.393abe		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.393ac0		83 08		sta $08,s	                STA #8,S
.393ac2		a3 02		lda $02,s	                LDA #2,S
.393ac4		83 06		sta $06,s	                STA #6,S
.393ac6		ab		plb		                PLB
.393ac7		68		pla		                PLA                 ; Clean up the stack
.393ac8		68		pla		                PLA
.393ac9		28		plp		                PLP
.393aca		6b		rtl		                RTL
.393acb						ISETTIMEOUT
.393acb		8b		phb		                PHB
.393acc		0b		phd		                PHD
.393acd		08		php		                PHP
.393ace		48		pha		                PHA             ; begin setdbr macro
.393acf		08		php		                PHP
.393ad0		e2 20		sep #$20	                SEP #$20        ; set A short
.393ad2		a9 00		lda #$00	                LDA #0
.393ad4		48		pha		                PHA
.393ad5		ab		plb		                PLB
.393ad6		28		plp		                PLP
.393ad7		68		pla		                PLA             ; end setdbr macro
.393ad8		48		pha		                PHA             ; begin setdp macro
.393ad9		08		php		                PHP
.393ada		c2 20		rep #$20	                REP #$20        ; set A long
.393adc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393adf		5b		tcd		                TCD
.393ae0		28		plp		                PLP
.393ae1		68		pla		                PLA             ; end setdp macro
.393ae2		78		sei		                SEI                             ; We don't want to be interrupted
.393ae3		e2 20		sep #$20	                SEP #$20        ; set A short
.393ae5		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.393ae7		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.393ae9		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.393aeb		85 0c		sta $032c	                STA @b BIOS_FLAGS
.393aed		28		plp		done            PLP
.393aee		2b		pld		                PLD
.393aef		ab		plb		                PLB
.393af0		6b		rtl		                RTL
.393af1						ICMDBLOCK
.393af1		0b		phd		                PHD
.393af2		08		php		                PHP
.393af3		48		pha		                PHA             ; begin setdp macro
.393af4		08		php		                PHP
.393af5		c2 20		rep #$20	                REP #$20        ; set A long
.393af7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393afa		5b		tcd		                TCD
.393afb		28		plp		                PLP
.393afc		68		pla		                PLA             ; end setdp macro
.393afd		e2 20		sep #$20	                SEP #$20        ; set A short
.393aff		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.393b01		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.393b03		d0 06		bne $393b0b	                BNE ret_success             ; No: just return
.393b05		22 56 64 39	jsl $396456	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.393b09		90 0c		bcc $393b17	                BCC pass_failure
.393b0b						ret_success
.393b0b		e2 20		sep #$20	                SEP #$20        ; set A short
.393b0d		64 00		stz $0320	                STZ BIOS_STATUS
.393b0f		28		plp		                PLP
.393b10		2b		pld		                PLD
.393b11		38		sec		                SEC
.393b12		6b		rtl		                RTL
.393b13						ret_failure
.393b13		e2 20		sep #$20	                SEP #$20        ; set A short
.393b15		85 00		sta $0320	                STA BIOS_STATUS
.393b17		28		plp		pass_failure    PLP
.393b18		2b		pld		                PLD
.393b19		18		clc		                CLC
.393b1a		6b		rtl		                RTL
.393b1b						IGETBLOCK
.393b1b		5a		phy		                PHY
.393b1c		0b		phd		                PHD
.393b1d		8b		phb		                PHB
.393b1e		08		php		                PHP
.393b1f		48		pha		                PHA             ; begin setdbr macro
.393b20		08		php		                PHP
.393b21		e2 20		sep #$20	                SEP #$20        ; set A short
.393b23		a9 00		lda #$00	                LDA #0
.393b25		48		pha		                PHA
.393b26		ab		plb		                PLB
.393b27		28		plp		                PLP
.393b28		68		pla		                PLA             ; end setdbr macro
.393b29		48		pha		                PHA             ; begin setdp macro
.393b2a		08		php		                PHP
.393b2b		c2 20		rep #$20	                REP #$20        ; set A long
.393b2d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393b30		5b		tcd		                TCD
.393b31		28		plp		                PLP
.393b32		68		pla		                PLA             ; end setdp macro
.393b33		e2 20		sep #$20	                SEP #$20        ; set A short
.393b35		a0 00 00	ldy #$0000	                LDY #0
.393b38		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.393b3a		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.393b3c		c8		iny		                INY
.393b3d		c0 00 02	cpy #$0200	                CPY #512
.393b40		d0 f8		bne $393b3a	                BNE clr_loop
.393b42		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393b44		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393b46		f0 14		beq $393b5c	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.393b48		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.393b4a		f0 18		beq $393b64	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.393b4c		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393b4e		f0 1c		beq $393b6c	                BEQ hd_getblock
.393b50		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393b52						ret_failure
.393b52		e2 20		sep #$20	                SEP #$20        ; set A short
.393b54		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393b56		28		plp		                PLP
.393b57		ab		plb		                PLB
.393b58		2b		pld		                PLD
.393b59		7a		ply		                PLY
.393b5a		38		sec		                SEC                                 ; Return failure
.393b5b		6b		rtl		                RTL
.393b5c		22 62 59 39	jsl $395962	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.393b60		b0 12		bcs $393b74	                BCS ret_success
.393b62		80 ee		bra $393b52	                BRA ret_failure
.393b64		22 5b 62 39	jsl $39625b	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.393b68		b0 0a		bcs $393b74	                BCS ret_success
.393b6a		80 e6		bra $393b52	                BRA ret_failure
.393b6c		22 6f 68 39	jsl $39686f	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.393b70		b0 02		bcs $393b74	                BCS ret_success
.393b72		80 de		bra $393b52	                BRA ret_failure
.393b74						ret_success
.393b74		e2 20		sep #$20	                SEP #$20        ; set A short
.393b76		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393b78		28		plp		                PLP
.393b79		ab		plb		                PLB
.393b7a		2b		pld		                PLD
.393b7b		7a		ply		                PLY
.393b7c		38		sec		                SEC                                 ; Return success
.393b7d		6b		rtl		                RTL
.393b7e						IPUTBLOCK
.393b7e		0b		phd		                PHD
.393b7f		8b		phb		                PHB
.393b80		08		php		                PHP
.393b81		48		pha		                PHA             ; begin setdbr macro
.393b82		08		php		                PHP
.393b83		e2 20		sep #$20	                SEP #$20        ; set A short
.393b85		a9 00		lda #$00	                LDA #0
.393b87		48		pha		                PHA
.393b88		ab		plb		                PLB
.393b89		28		plp		                PLP
.393b8a		68		pla		                PLA             ; end setdbr macro
.393b8b		48		pha		                PHA             ; begin setdp macro
.393b8c		08		php		                PHP
.393b8d		c2 20		rep #$20	                REP #$20        ; set A long
.393b8f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393b92		5b		tcd		                TCD
.393b93		28		plp		                PLP
.393b94		68		pla		                PLA             ; end setdp macro
.393b95		e2 20		sep #$20	                SEP #$20        ; set A short
.393b97		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.393b99		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.393b9b		f0 13		beq $393bb0	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.393b9d		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.393b9f		f0 17		beq $393bb8	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.393ba1		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.393ba3		f0 1b		beq $393bc0	                BEQ hd_putblock
.393ba5		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.393ba7						ret_failure
.393ba7		e2 20		sep #$20	                SEP #$20        ; set A short
.393ba9		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.393bab		28		plp		                PLP
.393bac		ab		plb		                PLB
.393bad		2b		pld		                PLD
.393bae		18		clc		                CLC                                 ; Return failure
.393baf		6b		rtl		                RTL
.393bb0		22 09 5a 39	jsl $395a09	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.393bb4		90 f1		bcc $393ba7	                BCC ret_failure
.393bb6		80 10		bra $393bc8	                BRA ret_success
.393bb8		22 c0 62 39	jsl $3962c0	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.393bbc		90 e9		bcc $393ba7	                BCC ret_failure
.393bbe		80 08		bra $393bc8	                BRA ret_success
.393bc0		22 00 69 39	jsl $396900	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.393bc4		90 e1		bcc $393ba7	                BCC ret_failure
.393bc6		80 00		bra $393bc8	                BRA ret_success
.393bc8						ret_success
.393bc8		e2 20		sep #$20	                SEP #$20        ; set A short
.393bca		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.393bcc		28		plp		                PLP
.393bcd		ab		plb		                PLB
.393bce		2b		pld		                PLD
.393bcf		38		sec		                SEC                                 ; Return success
.393bd0		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.393bd1						DOS_DIROPEN
.393bd1		da		phx		                PHX
.393bd2		5a		phy		                PHY
.393bd3		0b		phd		                PHD
.393bd4		8b		phb		                PHB
.393bd5		08		php		                PHP
.393bd6		48		pha		                PHA             ; begin setdbr macro
.393bd7		08		php		                PHP
.393bd8		e2 20		sep #$20	                SEP #$20        ; set A short
.393bda		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393bdc		48		pha		                PHA
.393bdd		ab		plb		                PLB
.393bde		28		plp		                PLP
.393bdf		68		pla		                PLA             ; end setdbr macro
.393be0		48		pha		                PHA             ; begin setdp macro
.393be1		08		php		                PHP
.393be2		c2 20		rep #$20	                REP #$20        ; set A long
.393be4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393be7		5b		tcd		                TCD
.393be8		28		plp		                PLP
.393be9		68		pla		                PLA             ; end setdp macro
.393bea		ad 20 a0	lda $38a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.393bed		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.393bf0		ad 22 a0	lda $38a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.393bf3		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393bf6		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.393bf9		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393bfb		85 18		sta $0338	                STA DOS_DIR_PTR
.393bfd		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393c00		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393c02		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393c04		e2 20		sep #$20	                SEP #$20        ; set A short
.393c06		ad 01 a0	lda $38a001	                LDA FILE_SYSTEM             ; Check the file system
.393c09		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.393c0b		d0 24		bne $393c31	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.393c0d						fetch_fat12
.393c0d		e2 20		sep #$20	                SEP #$20        ; set A short
.393c0f		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.393c11		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393c14		c2 20		rep #$20	                REP #$20        ; set A long
.393c16		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.393c18		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393c1a		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393c1c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393c1e		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.393c21		85 02		sta $0322	                STA BIOS_LBA
.393c23		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393c26		85 04		sta $0324	                STA BIOS_LBA+2
.393c28		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.393c2c		b0 1f		bcs $393c4d	                BCS do_success              ; If sucessful, set the directory cursor
.393c2e		82 84 18	brl $3954b5	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393c31						fetch_fat32
.393c31		e2 20		sep #$20	                SEP #$20        ; set A short
.393c33		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.393c35		8d 45 a0	sta $38a045	                STA DOS_DIR_TYPE
.393c38		c2 20		rep #$20	                REP #$20        ; set A long
.393c3a		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393c3d		85 10		sta $0330	                STA DOS_CLUS_ID
.393c3f		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393c42		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393c44		22 b4 41 39	jsl $3941b4	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393c48		b0 03		bcs $393c4d	                BCS do_success              ; If successful: set the directory cursor
.393c4a		82 68 18	brl $3954b5	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393c4d		82 6c 18	brl $3954bc	do_success      BRL IF_SUCCESS
.393c50						DOS_DIRFIRST
.393c50		0b		phd		                PHD
.393c51		08		php		                PHP
.393c52		48		pha		                PHA             ; begin setdp macro
.393c53		08		php		                PHP
.393c54		c2 20		rep #$20	                REP #$20        ; set A long
.393c56		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393c59		5b		tcd		                TCD
.393c5a		28		plp		                PLP
.393c5b		68		pla		                PLA             ; end setdp macro
.393c5c		c2 20		rep #$20	                REP #$20        ; set A long
.393c5e		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393c61		85 18		sta $0338	                STA DOS_DIR_PTR
.393c63		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393c66		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393c68		28		plp		                PLP
.393c69		2b		pld		                PLD
.393c6a		6b		rtl		                RTL
.393c6b						DOS_DIRNEXT
.393c6b		da		phx		                PHX
.393c6c		5a		phy		                PHY
.393c6d		0b		phd		                PHD
.393c6e		8b		phb		                PHB
.393c6f		08		php		                PHP
.393c70		48		pha		                PHA             ; begin setdbr macro
.393c71		08		php		                PHP
.393c72		e2 20		sep #$20	                SEP #$20        ; set A short
.393c74		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393c76		48		pha		                PHA
.393c77		ab		plb		                PLB
.393c78		28		plp		                PLP
.393c79		68		pla		                PLA             ; end setdbr macro
.393c7a		48		pha		                PHA             ; begin setdp macro
.393c7b		08		php		                PHP
.393c7c		c2 20		rep #$20	                REP #$20        ; set A long
.393c7e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393c81		5b		tcd		                TCD
.393c82		28		plp		                PLP
.393c83		68		pla		                PLA             ; end setdp macro
.393c84		c2 20		rep #$20	                REP #$20        ; set A long
.393c86		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.393c87		a5 18		lda $0338	                LDA DOS_DIR_PTR
.393c89		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.393c8c		85 18		sta $0338	                STA DOS_DIR_PTR
.393c8e		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.393c90		69 00 00	adc #$0000	                ADC #0
.393c93		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393c95		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.393c96		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.393c99		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.393c9b		85 28		sta $0348	                STA DOS_TEMP
.393c9d		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER_END
.393ca0		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.393ca2		85 2a		sta $034a	                STA DOS_TEMP+2
.393ca4		30 0c		bmi $393cb2	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.393ca6		f0 03		beq $393cab	                BEQ check_lower
.393ca8		82 11 18	brl $3954bc	                BRL IF_SUCCESS
.393cab		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.393cad		f0 03		beq $393cb2	                BEQ get_next_block
.393caf		82 0a 18	brl $3954bc	                BRL IF_SUCCESS
.393cb2						get_next_block
.393cb2		e2 20		sep #$20	                SEP #$20        ; set A short
.393cb4		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393cb7		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.393cb9		f0 38		beq $393cf3	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.393cbb						next_sector
.393cbb		c2 20		rep #$20	                REP #$20        ; set A long
.393cbd		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID
.393cc0		1a		inc a		                INC A
.393cc1		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.393cc4		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.393cc7		d0 07		bne $393cd0	                BNE read_sector
.393cc9		e2 20		sep #$20	                SEP #$20        ; set A short
.393ccb		a9 00		lda #$00	                LDA #0
.393ccd		82 e1 17	brl $3954b1	                BRL IF_FAILURE
.393cd0						read_sector
.393cd0		c2 20		rep #$20	                REP #$20        ; set A long
.393cd2		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.393cd5		85 02		sta $0322	                STA BIOS_LBA
.393cd7		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393cda		85 04		sta $0324	                STA BIOS_LBA+2
.393cdc		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.393cdf		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393ce1		85 18		sta $0338	                STA DOS_DIR_PTR
.393ce3		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393ce6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393ce8		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393cea		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.393cee		b0 39		bcs $393d29	                BCS do_success              ; If successful: set the directory cursor
.393cf0		82 c2 17	brl $3954b5	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393cf3						next_cluster
.393cf3		c2 20		rep #$20	                REP #$20        ; set A long
.393cf5		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.393cf8		85 10		sta $0330	                STA DOS_CLUS_ID
.393cfa		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393cfd		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393cff		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.393d02		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393d04		85 18		sta $0338	                STA DOS_DIR_PTR
.393d06		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393d09		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393d0b		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393d0d		22 c8 45 39	jsl $3945c8	                JSL NEXTCLUSTER             ; Try to find the next cluster
.393d11		b0 03		bcs $393d16	                BCS set_next
.393d13		82 9f 17	brl $3954b5	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.393d16		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.393d18		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393d1b		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.393d1d		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393d20		22 b4 41 39	jsl $3941b4	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.393d24		b0 03		bcs $393d29	                BCS do_success              ; If successful: set the directory cursor
.393d26		82 8c 17	brl $3954b5	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.393d29		82 90 17	brl $3954bc	do_success      BRL IF_SUCCESS
.393d2c						DOS_DIRFINDFREE
.393d2c		da		phx		                PHX
.393d2d		5a		phy		                PHY
.393d2e		0b		phd		                PHD
.393d2f		8b		phb		                PHB
.393d30		08		php		                PHP
.393d31		48		pha		                PHA             ; begin setdbr macro
.393d32		08		php		                PHP
.393d33		e2 20		sep #$20	                SEP #$20        ; set A short
.393d35		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393d37		48		pha		                PHA
.393d38		ab		plb		                PLB
.393d39		28		plp		                PLP
.393d3a		68		pla		                PLA             ; end setdbr macro
.393d3b		48		pha		                PHA             ; begin setdp macro
.393d3c		08		php		                PHP
.393d3d		c2 20		rep #$20	                REP #$20        ; set A long
.393d3f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393d42		5b		tcd		                TCD
.393d43		28		plp		                PLP
.393d44		68		pla		                PLA             ; end setdp macro
.393d45		22 d3 4f 39	jsl $394fd3	                JSL IF_DIROPEN
.393d49		b0 06		bcs $393d51	                BCS start_walk
.393d4b		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.393d4e		82 28 00	brl $393d79	                BRL ret_failure
.393d51		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.393d54						chk_entry
.393d54		e2 20		sep #$20	                SEP #$20        ; set A short
.393d56		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.393d58		f0 1c		beq $393d76	                BEQ ret_success             ; If 0: we have a blank... return it
.393d5a		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.393d5c		f0 18		beq $393d76	                BEQ ret_success             ; Yes: return it
.393d5e		22 0d 50 39	jsl $39500d	                JSL IF_DIRNEXT              ; Go to the next directory entry
.393d62		b0 ed		bcs $393d51	                BCS start_walk              ; If we got one, start walking it
.393d64		22 7c 3d 39	jsl $393d7c	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.393d68		90 0f		bcc $393d79	                BCC ret_failure             ; If that didn't work, return the failure
.393d6a		c2 20		rep #$20	                REP #$20        ; set A long
.393d6c		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.393d6f		85 18		sta $0338	                STA DOS_DIR_PTR
.393d71		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393d74		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.393d76		82 43 17	brl $3954bc	ret_success     BRL IF_SUCCESS
.393d79		82 35 17	brl $3954b1	ret_failure     BRL IF_FAILURE
.393d7c						DOS_DIRAPPEND
.393d7c		da		phx		                PHX
.393d7d		8b		phb		                PHB
.393d7e		0b		phd		                PHD
.393d7f		08		php		                PHP
.393d80		48		pha		                PHA             ; begin setdbr macro
.393d81		08		php		                PHP
.393d82		e2 20		sep #$20	                SEP #$20        ; set A short
.393d84		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393d86		48		pha		                PHA
.393d87		ab		plb		                PLB
.393d88		28		plp		                PLP
.393d89		68		pla		                PLA             ; end setdbr macro
.393d8a		48		pha		                PHA             ; begin setdp macro
.393d8b		08		php		                PHP
.393d8c		c2 20		rep #$20	                REP #$20        ; set A long
.393d8e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393d91		5b		tcd		                TCD
.393d92		28		plp		                PLP
.393d93		68		pla		                PLA             ; end setdp macro
.393d94		e2 20		sep #$20	                SEP #$20        ; set A short
.393d96		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE
.393d99		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.393d9b		f0 09		beq $393da6	                BEQ clr_sector                  ; Yes: clear out the directory data
.393d9d						ret_failure
.393d9d		e2 20		sep #$20	                SEP #$20        ; set A short
.393d9f		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.393da1		85 0e		sta $032e	                STA DOS_STATUS
.393da3		82 3e 00	brl $393de4	                BRL pass_failure
.393da6						clr_sector
.393da6		c2 20		rep #$20	                REP #$20        ; set A long
.393da8		a9 00 00	lda #$0000	                LDA #0
.393dab		a2 00 00	ldx #$0000	                LDX #0
.393dae		9d 00 a1	sta $38a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.393db1		e8		inx		                INX
.393db2		e8		inx		                INX
.393db3		e0 00 02	cpx #$0200	                CPX #512
.393db6		d0 f6		bne $393dae	                BNE clr_loop
.393db8		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.393dbb		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393dbd		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393dc0		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393dc2		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.393dc5		85 10		sta $0330	                STA DOS_CLUS_ID
.393dc7		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393dca		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393dcc		22 e9 49 39	jsl $3949e9	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.393dd0		90 12		bcc $393de4	                BCC pass_failure                ; If there was an error, pass it up the chain
.393dd2		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.393dd5		8d 32 a0	sta $38a032	                STA DOS_DIR_BLOCK_ID
.393dd8		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.393ddb		8d 34 a0	sta $38a034	                STA DOS_DIR_BLOCK_ID+2
.393dde		28		plp		ret_success     PLP
.393ddf		2b		pld		                PLD
.393de0		ab		plb		                PLB
.393de1		fa		plx		                PLX
.393de2		38		sec		                SEC
.393de3		6b		rtl		                RTL
.393de4		28		plp		pass_failure    PLP
.393de5		2b		pld		                PLD
.393de6		ab		plb		                PLB
.393de7		fa		plx		                PLX
.393de8		18		clc		                CLC
.393de9		6b		rtl		                RTL
.393dea						DOS_DIRWRITE
.393dea		da		phx		                PHX
.393deb		5a		phy		                PHY
.393dec		0b		phd		                PHD
.393ded		8b		phb		                PHB
.393dee		08		php		                PHP
.393def		48		pha		                PHA             ; begin setdbr macro
.393df0		08		php		                PHP
.393df1		e2 20		sep #$20	                SEP #$20        ; set A short
.393df3		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393df5		48		pha		                PHA
.393df6		ab		plb		                PLB
.393df7		28		plp		                PLP
.393df8		68		pla		                PLA             ; end setdbr macro
.393df9		48		pha		                PHA             ; begin setdp macro
.393dfa		08		php		                PHP
.393dfb		c2 20		rep #$20	                REP #$20        ; set A long
.393dfd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e00		5b		tcd		                TCD
.393e01		28		plp		                PLP
.393e02		68		pla		                PLA             ; end setdp macro
.393e03		e2 20		sep #$20	                SEP #$20        ; set A short
.393e05		ad 45 a0	lda $38a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.393e08		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.393e0a		f0 1f		beq $393e2b	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.393e0c						write_sector
.393e0c		c2 20		rep #$20	                REP #$20        ; set A long
.393e0e		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.393e11		85 02		sta $0322	                STA BIOS_LBA
.393e13		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393e16		85 04		sta $0324	                STA BIOS_LBA+2
.393e18		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393e1b		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393e1d		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393e20		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393e22		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.393e26		b0 1f		bcs $393e47	                BCS ret_success
.393e28		82 86 16	brl $3954b1	ret_failure     BRL IF_FAILURE
.393e2b						write_cluster
.393e2b		c2 20		rep #$20	                REP #$20        ; set A long
.393e2d		ad 32 a0	lda $38a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.393e30		85 10		sta $0330	                STA DOS_CLUS_ID
.393e32		ad 34 a0	lda $38a034	                LDA DOS_DIR_BLOCK_ID+2
.393e35		85 12		sta $0332	                STA DOS_CLUS_ID+2
.393e37		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.393e3a		85 1c		sta $033c	                STA DOS_BUFF_PTR
.393e3c		a9 38 00	lda #$0038	                LDA #`DOS_DIR_CLUSTER
.393e3f		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.393e41		22 f1 41 39	jsl $3941f1	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.393e45		90 e1		bcc $393e28	                BCC ret_failure
.393e47		82 72 16	brl $3954bc	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_fmx_inc.asm

=$38a000					DOS_HIGH_VARIABLES      = $38A000
=$38a000					DEVICE                  = $38A000       ; 1 byte - The number of the block device
=$38a001					FILE_SYSTEM             = $38A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$38a002					PARTITION               = $38A002       ; 1 byte - The number of the partitions on the device
=$38a003					SECTORS_PER_CLUSTER     = $38A003       ; 1 byte - The number of sectors in a cluster
=$38a004					FIRSTSECTOR             = $38A004       ; 4 bytes - The LBA of the first sector on the volume
=$38a008					SECTORCOUNT             = $38A008       ; 4 bytes - The number of sectors in the volume
=$38a00c					NUM_RSRV_SEC            = $38A00C       ; 2 bytes - The number of hidden or reserved sectors
=$38a00e					CLUSTER_SIZE            = $38A00E       ; 2 bytes - The size of a cluster in bytes
=$38a010					SEC_PER_FAT             = $38A010       ; 4 bytes - The number of sectors per FAT
=$38a014					FAT_BEGIN_LBA           = $38A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$38a018					FAT2_BEGIN_LBA          = $38A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$38a01c					CLUSTER_BEGIN_LBA       = $38A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$38a020					ROOT_DIR_FIRST_CLUSTER  = $38A020       ; 4 bytes - The number of the first cluster in the root directory
=$38a024					ROOT_DIR_MAX_ENTRY      = $38A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$38a026					VOLUME_ID               = $38A026       ; 4 bytes - The ID of the volume
=$38a02a					DOS_CURR_CLUS           = $38A02A       ; 4 bytes - The current cluster (for delete)
=$38a02e					DOS_NEXT_CLUS           = $38A02E       ; 4 bytes - The next cluster in a file (for delete)
=$38a032					DOS_DIR_BLOCK_ID        = $38A032       ; 4 bytes - The ID of the current directory block
=$38a036					DOS_NEW_CLUSTER         = $38A036       ; 4 bytes - Space to store a newly written cluster ID
=$38a03a					DOS_SHORT_NAME          = $38A03A       ; 11 bytes - The short name for a desired file
=$38a045					DOS_DIR_TYPE            = $38A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$38a046					DOS_CURR_DIR_ID         = $38A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$38a04a					DOS_DEV_NAMES           = $38A04A       ; 4 byte - pointer to the linked list of device names
=$38a04e					FDC_MOTOR_TIMER         = $38A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$38a050					DOS_MOUNT_DEV           = $38A050       ; 1 byte - the device code of the currently mounted device
=$38a100					DOS_DIR_CLUSTER         = $38A100       ; 512 bytes - A buffer for directory entries
=$38a300					DOS_DIR_CLUSTER_END     = $38A300       ; The byte just past the end of the directory cluster buffer
=$38a300					DOS_SECTOR              = $38A300       ; 512 bytes - A buffer for block device read/write
=$38a500					DOS_SECTOR_END          = $38A500       ; The byte just past the end of the cluster buffer
=$38a500					DOS_FAT_SECTORS         = $38A500       ; 1024 bytes - two sectors worth of the FAT
=$38a900					DOS_FAT_SECTORS_END     = $38A900       ; The byte just past the end of the FAT buffers
=$38a900					DOS_BOOT_SECTOR         = $38A900       ; A sector for holding the boot sector
=$38ab00					DOS_BOOT_SECTOR_END     = $38AB00
=$38ab00					DOS_SPARE_SECTOR        = $38AB00       ; A spare 512 byte buffer for loading sectors
=$38ad00					DOS_SPARE_SECTOR_END    = $38AD00
=$38ad00					DOS_SPARE_FD            = $38AD00       ; A spare file descriptor buffer
=3714336					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=3714336					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=3714592					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$38b000					    DOS_FILE_BUFFS          = $38B000
=3719168					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.393e4a						DOS_INIT
.393e4a		8b		phb		                PHB
.393e4b		0b		phd		                PHD
.393e4c		08		php		                PHP
.393e4d		48		pha		                PHA             ; begin setdbr macro
.393e4e		08		php		                PHP
.393e4f		e2 20		sep #$20	                SEP #$20        ; set A short
.393e51		a9 00		lda #$00	                LDA #0
.393e53		48		pha		                PHA
.393e54		ab		plb		                PLB
.393e55		28		plp		                PLP
.393e56		68		pla		                PLA             ; end setdbr macro
.393e57		48		pha		                PHA             ; begin setdp macro
.393e58		08		php		                PHP
.393e59		c2 20		rep #$20	                REP #$20        ; set A long
.393e5b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e5e		5b		tcd		                TCD
.393e5f		28		plp		                PLP
.393e60		68		pla		                PLA             ; end setdp macro
.393e61		e2 20		sep #$20	                SEP #$20        ; set A short
.393e63		c2 10		rep #$10	                REP #$10        ; set X long
.393e65		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.393e68		a9 00		lda #$00	                LDA #0
.393e6a		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.393e6d		e8		inx		                INX
.393e6e		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.393e71		d0 f7		bne $393e6a	                BNE b0_clr_loop
.393e73		48		pha		                PHA             ; begin setdbr macro
.393e74		08		php		                PHP
.393e75		e2 20		sep #$20	                SEP #$20        ; set A short
.393e77		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393e79		48		pha		                PHA
.393e7a		ab		plb		                PLB
.393e7b		28		plp		                PLP
.393e7c		68		pla		                PLA             ; end setdbr macro
.393e7d		48		pha		                PHA             ; begin setdp macro
.393e7e		08		php		                PHP
.393e7f		c2 20		rep #$20	                REP #$20        ; set A long
.393e81		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393e84		5b		tcd		                TCD
.393e85		28		plp		                PLP
.393e86		68		pla		                PLA             ; end setdp macro
.393e87		e2 20		sep #$20	                SEP #$20        ; set A short
.393e89		c2 10		rep #$10	                REP #$10        ; set X long
.393e8b		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.393e8e		a9 00		lda #$00	                LDA #0
.393e90		9d 00 a0	sta $38a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.393e93		e8		inx		                INX
.393e94		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.393e97		d0 f7		bne $393e90	                BNE b38_clr_loop
.393e99		c2 20		rep #$20	                REP #$20        ; set A long
.393e9b		a9 49 42	lda #$4249	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.393e9e		8f 4a a0 38	sta $38a04a	                STA @l DOS_DEV_NAMES
.393ea2		a9 39 00	lda #$0039	                LDA #`DOS_HD_DESC
.393ea5		8f 4c a0 38	sta $38a04c	                STA @l DOS_DEV_NAMES+2
.393ea9		e2 20		sep #$20	                SEP #$20        ; set A short
.393eab		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.393ead		85 01		sta $0321	                STA BIOS_DEV
.393eaf		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.393eb1		8f 50 a0 38	sta $38a050	                STA @l DOS_MOUNT_DEV
.393eb5		a9 00		lda #$00	                LDA #0
.393eb7		a2 00 00	ldx #$0000	                LDX #0
.393eba		9d 20 ad	sta $38ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.393ebd		e8		inx		                INX
.393ebe		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.393ec1		d0 f7		bne $393eba	                BNE fd_zero_loop
.393ec3		a9 00		lda #$00	                LDA #0
.393ec5		a2 00 00	ldx #$0000	                LDX #0
.393ec8		9d 00 b0	sta $38b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.393ecb		e8		inx		                INX
.393ecc		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.393ecf		d0 f7		bne $393ec8	                BNE sect_zero_loop
.393ed1		c2 20		rep #$20	                REP #$20        ; set A long
.393ed3		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.393ed6		85 20		sta $0340	                STA @b DOS_FD_PTR
.393ed8		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.393edb		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393edd		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.393ee0		85 28		sta $0348	                STA @b DOS_TEMP
.393ee2		a9 38 00	lda #$0038	                LDA #`DOS_FILE_BUFFS
.393ee5		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393ee7		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.393eea		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.393eed		a5 28		lda $0348	                LDA @b DOS_TEMP
.393eef		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393ef1		c8		iny		                INY
.393ef2		c8		iny		                INY
.393ef3		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393ef5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.393ef7		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.393ef8		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.393efa		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.393efd		85 20		sta $0340	                STA @b DOS_FD_PTR
.393eff		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.393f01		69 00 00	adc #$0000	                ADC #0
.393f04		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.393f06		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.393f07		a5 28		lda $0348	                LDA @b DOS_TEMP
.393f09		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.393f0c		85 28		sta $0348	                STA @b DOS_TEMP
.393f0e		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.393f10		69 00 00	adc #$0000	                ADC #0
.393f13		85 2a		sta $034a	                STA @b DOS_TEMP+2
.393f15		ca		dex		                DEX                     ; Count down the descriptors...
.393f16		d0 d2		bne $393eea	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.393f18		28		plp		                PLP
.393f19		2b		pld		                PLD
.393f1a		ab		plb		                PLB
.393f1b		6b		rtl		                RTL
.393f1c						DOS_MOUNT
.393f1c		8b		phb		                PHB
.393f1d		0b		phd		                PHD
.393f1e		08		php		                PHP
.393f1f		48		pha		                PHA             ; begin setdbr macro
.393f20		08		php		                PHP
.393f21		e2 20		sep #$20	                SEP #$20        ; set A short
.393f23		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.393f25		48		pha		                PHA
.393f26		ab		plb		                PLB
.393f27		28		plp		                PLP
.393f28		68		pla		                PLA             ; end setdbr macro
.393f29		48		pha		                PHA             ; begin setdp macro
.393f2a		08		php		                PHP
.393f2b		c2 20		rep #$20	                REP #$20        ; set A long
.393f2d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.393f30		5b		tcd		                TCD
.393f31		28		plp		                PLP
.393f32		68		pla		                PLA             ; end setdp macro
.393f33		e2 20		sep #$20	                SEP #$20        ; set A short
.393f35		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.393f37		8f 50 a0 38	sta $38a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.393f3b		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.393f3d		f0 1f		beq $393f5e	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.393f3f		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.393f41		f0 26		beq $393f69	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.393f43		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.393f45		f0 0b		beq $393f52	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.393f47		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.393f49		85 0e		sta $032e	                STA DOS_STATUS
.393f4b		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.393f4d		85 00		sta $0320	                STA BIOS_STATUS
.393f4f		82 7c 01	brl $3940ce	                BRL ret_failure
.393f52		22 2c 63 39	jsl $39632c	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.393f56		b0 03		bcs $393f5b	                BCS fdc_success
.393f58		82 73 01	brl $3940ce	                BRL ret_failure
.393f5b		82 67 01	brl $3940c5	fdc_success     BRL ret_success
.393f5e		22 14 59 39	jsl $395914	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.393f62		b0 10		bcs $393f74	                BCS get_mbr             ; Continue if success
.393f64		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393f66		82 65 01	brl $3940ce	                BRL ret_failure
.393f69		22 74 67 39	jsl $396774	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.393f6d		b0 05		bcs $393f74	                BCS get_mbr             ; Continue if success
.393f6f		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.393f71		82 5a 01	brl $3940ce	                BRL ret_failure
.393f74						get_mbr
.393f74		c2 30		rep #$30	                REP #$30        ; set A&X long
.393f76		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.393f78		64 04		stz $0324	                STZ BIOS_LBA+2
.393f7a		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.393f7d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393f7f		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393f82		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393f84		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.393f88		b0 07		bcs $393f91	                BCS chk_signature       ; If success, check the signature bytes
.393f8a		e2 20		sep #$20	                SEP #$20        ; set A short
.393f8c		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.393f8e		82 3d 01	brl $3940ce	                BRL ret_failure
.393f91						chk_signature
.393f91		e2 20		sep #$20	                SEP #$20        ; set A short
.393f93		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.393f96		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.393f98		d0 07		bne $393fa1	                BNE not_mbr             ; No: signal we could find the MBR
.393f9a		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.393f9d		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.393f9f		f0 05		beq $393fa6	                BEQ chk_part_type       ; Yes: we have an MBR
.393fa1		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.393fa3		82 28 01	brl $3940ce	                BRL ret_failure
.393fa6		ad c2 a4	lda $38a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.393fa9		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.393fab		f0 05		beq $393fb2	                BEQ get_LBA             ; Is FAT32 with LBA?
.393fad		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.393faf		82 1c 01	brl $3940ce	                BRL ret_failure
.393fb2		8d 01 a0	sta $38a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.393fb5		c2 20		rep #$20	                REP #$20        ; set A long
.393fb7		ad c6 a4	lda $38a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.393fba		8d 04 a0	sta $38a004	                STA FIRSTSECTOR
.393fbd		ad c8 a4	lda $38a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.393fc0		8d 06 a0	sta $38a006	                STA FIRSTSECTOR+2
.393fc3		ad cb a4	lda $38a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.393fc6		8d 08 a0	sta $38a008	                STA SECTORCOUNT
.393fc9		ad cd a4	lda $38a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.393fcc		8d 0a a0	sta $38a00a	                STA SECTORCOUNT+2
.393fcf		e2 20		sep #$20	                SEP #$20        ; set A short
.393fd1		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.393fd3		8d 00 a0	sta $38a000	                STA DEVICE
.393fd6		a9 00		lda #$00	                LDA #0
.393fd8		8d 02 a0	sta $38a002	                STA PARTITION           ; For the moment, we only support the first partition
.393fdb		c2 20		rep #$20	                REP #$20        ; set A long
.393fdd		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.393fe0		85 06		sta $0326	                STA BIOS_BUFF_PTR
.393fe2		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.393fe5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.393fe7		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.393fea		85 02		sta $0322	                STA BIOS_LBA
.393fec		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.393fef		85 04		sta $0324	                STA BIOS_LBA+2
.393ff1		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.393ff5		b0 1c		bcs $394013	                BCS get_first_sec       ; Got it? Start parsing it
.393ff7		e2 20		sep #$20	                SEP #$20        ; set A short
.393ff9		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.393ffb		82 d0 00	brl $3940ce	                BRL ret_failure
.393ffe						chk_bpb_sig
.393ffe		e2 20		sep #$20	                SEP #$20        ; set A short
.394000		ad fe a4	lda $38a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.394003		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.394005		d0 07		bne $39400e	                BNE not_bpb             ; No: signal we could find the volume ID
.394007		ad ff a4	lda $38a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.39400a		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.39400c		f0 05		beq $394013	                BEQ get_first_sec       ; Yes: we have an volume ID
.39400e		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.394010		82 bb 00	brl $3940ce	                BRL ret_failure
.394013						get_first_sec
.394013		c2 20		rep #$20	                REP #$20        ; set A long
.394015		ad 2c a3	lda $38a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.394018		8d 20 a0	sta $38a020	                STA ROOT_DIR_FIRST_CLUSTER
.39401b		ad 2e a3	lda $38a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.39401e		8d 22 a0	sta $38a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.394021		ad 0e a3	lda $38a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.394024		8d 0c a0	sta $38a00c	                STA NUM_RSRV_SEC
.394027		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.394028		ad 04 a0	lda $38a004	                LDA FIRSTSECTOR
.39402b		6d 0c a0	adc $38a00c	                ADC NUM_RSRV_SEC
.39402e		8d 14 a0	sta $38a014	                STA FAT_BEGIN_LBA
.394031		ad 06 a0	lda $38a006	                LDA FIRSTSECTOR+2
.394034		69 00 00	adc #$0000	                ADC #0
.394037		8d 16 a0	sta $38a016	                STA FAT_BEGIN_LBA+2
.39403a		e2 20		sep #$20	                SEP #$20        ; set A short
.39403c		a2 00 00	ldx #$0000	                LDX #0
.39403f		bf 24 a3 38	lda $38a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.394043		9f 10 a0 38	sta $38a010,x	                STA @l SEC_PER_FAT,X
.394047		e8		inx		                INX
.394048		e0 04 00	cpx #$0004	                CPX #4
.39404b		d0 f2		bne $39403f	                BNE cpy_secperfat
.39404d		ad 10 a0	lda $38a010	                LDA SEC_PER_FAT
.394050		0a		asl a		                ASL A
.394051		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394054		ad 11 a0	lda $38a011	                LDA SEC_PER_FAT+1
.394057		2a		rol a		                ROL A
.394058		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39405b		ad 12 a0	lda $38a012	                LDA SEC_PER_FAT+2
.39405e		2a		rol a		                ROL A
.39405f		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394062		ad 13 a0	lda $38a013	                LDA SEC_PER_FAT+3
.394065		2a		rol a		                ROL A
.394066		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.394069		18		clc		                CLC
.39406a		ad 1c a0	lda $38a01c	                LDA CLUSTER_BEGIN_LBA
.39406d		6d 14 a0	adc $38a014	                ADC FAT_BEGIN_LBA
.394070		8d 1c a0	sta $38a01c	                STA CLUSTER_BEGIN_LBA
.394073		ad 1d a0	lda $38a01d	                LDA CLUSTER_BEGIN_LBA+1
.394076		6d 15 a0	adc $38a015	                ADC FAT_BEGIN_LBA+1
.394079		8d 1d a0	sta $38a01d	                STA CLUSTER_BEGIN_LBA+1
.39407c		ad 1e a0	lda $38a01e	                LDA CLUSTER_BEGIN_LBA+2
.39407f		6d 16 a0	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394082		8d 1e a0	sta $38a01e	                STA CLUSTER_BEGIN_LBA+2
.394085		ad 1f a0	lda $38a01f	                LDA CLUSTER_BEGIN_LBA+3
.394088		6d 17 a0	adc $38a017	                ADC FAT_BEGIN_LBA+3
.39408b		8d 1f a0	sta $38a01f	                STA CLUSTER_BEGIN_LBA+3
.39408e		e2 20		sep #$20	                SEP #$20        ; set A short
.394090		ad 0d a3	lda $38a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.394093		8d 03 a0	sta $38a003	                STA SECTORS_PER_CLUSTER
.394096		18		clc		                CLC
.394097		ad 14 a0	lda $38a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.39409a		6d 10 a0	adc $38a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.39409d		8d 18 a0	sta $38a018	                STA FAT2_BEGIN_LBA
.3940a0		ad 15 a0	lda $38a015	                LDA FAT_BEGIN_LBA+1
.3940a3		6d 11 a0	adc $38a011	                ADC SEC_PER_FAT+1
.3940a6		8d 19 a0	sta $38a019	                STA FAT2_BEGIN_LBA+1
.3940a9		ad 16 a0	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3940ac		6d 12 a0	adc $38a012	                ADC SEC_PER_FAT+2
.3940af		8d 1a a0	sta $38a01a	                STA FAT2_BEGIN_LBA+2
.3940b2		ad 17 a0	lda $38a017	                LDA FAT_BEGIN_LBA+3
.3940b5		6d 13 a0	adc $38a013	                ADC SEC_PER_FAT+3
.3940b8		8d 1b a0	sta $38a01b	                STA FAT2_BEGIN_LBA+3
.3940bb		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.3940bd		8d 0e a0	sta $38a00e	                STA CLUSTER_SIZE
.3940c0		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.3940c2		8d 0f a0	sta $38a00f	                STA CLUSTER_SIZE+1
.3940c5						ret_success
.3940c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3940c7		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.3940c9		28		plp		                PLP
.3940ca		2b		pld		                PLD
.3940cb		ab		plb		                PLB
.3940cc		38		sec		                SEC
.3940cd		6b		rtl		                RTL
.3940ce						ret_failure
.3940ce		e2 20		sep #$20	                SEP #$20        ; set A short
.3940d0		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.3940d2		28		plp		                PLP
.3940d3		2b		pld		                PLD
.3940d4		ab		plb		                PLB
.3940d5		18		clc		                CLC
.3940d6		6b		rtl		                RTL
.3940d7						DOS_TESTBOOT
.3940d7		8b		phb		                PHB
.3940d8		0b		phd		                PHD
.3940d9		da		phx		                PHX
.3940da		08		php		                PHP
.3940db		48		pha		                PHA             ; begin setdbr macro
.3940dc		08		php		                PHP
.3940dd		e2 20		sep #$20	                SEP #$20        ; set A short
.3940df		a9 00		lda #$00	                LDA #0
.3940e1		48		pha		                PHA
.3940e2		ab		plb		                PLB
.3940e3		28		plp		                PLP
.3940e4		68		pla		                PLA             ; end setdbr macro
.3940e5		48		pha		                PHA             ; begin setdp macro
.3940e6		08		php		                PHP
.3940e7		c2 20		rep #$20	                REP #$20        ; set A long
.3940e9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3940ec		5b		tcd		                TCD
.3940ed		28		plp		                PLP
.3940ee		68		pla		                PLA             ; end setdp macro
.3940ef		c2 10		rep #$10	                REP #$10        ; set X long
.3940f1						chk_dev
.3940f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3940f3		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.3940f5		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.3940f7		f0 24		beq $39411d	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.3940f9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3940fb		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.3940fe		85 02		sta $0322	                STA @b BIOS_LBA
.394100		85 04		sta $0324	                STA @b BIOS_LBA+2
.394102		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.394105		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.394107		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39410a		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.39410c		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.394110		b0 03		bcs $394115	                BCS chk_mbr_brl
.394112		82 47 00	brl $39415c	                BRL done                    ; If failed... just return
.394115						chk_mbr_brl
.394115		e2 20		sep #$20	                SEP #$20        ; set A short
.394117		af 00 a3 38	lda $38a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.39411b		80 04		bra $394121	                BRA chk_brl
.39411d		af 3e a3 38	lda $38a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.394121		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.394123		f0 06		beq $39412b	                BEQ chk_magic               ; Yes: check for the magic text
.394125		c9 82		cmp #$82	                CMP #$82
.394127		f0 02		beq $39412b	                BEQ chk_magic
.394129		80 31		bra $39415c	                BRA done                    ; No: just return
.39412b		a2 00 00	ldx #$0000	chk_magic       LDX #0
.39412e		bf 03 a3 38	lda $38a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.394132		df 61 41 39	cmp $394161,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.394136		d0 24		bne $39415c	                BNE done                    ; If it's not equal, just return
.394138		e8		inx		                INX                         ; Otherwise, check the next one
.394139		e0 08 00	cpx #$0008	                CPX #8
.39413c		d0 f0		bne $39412e	                BNE magic_loop              ; Until we've checked all 8 bytes
.39413e		c2 30		rep #$30	                REP #$30        ; set A&X long
.394140		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.394143		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.394146		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.394149		44 38 38	mvp $38,$38	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.39414c		e2 20		sep #$20	                SEP #$20        ; set A short
.39414e		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.394150		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.394152		f0 04		beq $394158	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.394154		5c 00 a9 38	jmp $38a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.394158		5c 3e a9 38	jmp $38a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.39415c		28		plp		done            PLP
.39415d		2b		pld		                PLD
.39415e		ab		plb		                PLB
.39415f		fa		plx		                PLX
.394160		6b		rtl		                RTL
>394161		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.394169						DOS_CALC_LBA
.394169		8b		phb		                PHB
.39416a		0b		phd		                PHD
.39416b		08		php		                PHP
.39416c		48		pha		                PHA             ; begin setdbr macro
.39416d		08		php		                PHP
.39416e		e2 20		sep #$20	                SEP #$20        ; set A short
.394170		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394172		48		pha		                PHA
.394173		ab		plb		                PLB
.394174		28		plp		                PLP
.394175		68		pla		                PLA             ; end setdbr macro
.394176		48		pha		                PHA             ; begin setdp macro
.394177		08		php		                PHP
.394178		c2 20		rep #$20	                REP #$20        ; set A long
.39417a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39417d		5b		tcd		                TCD
.39417e		28		plp		                PLP
.39417f		68		pla		                PLA             ; end setdp macro
.394180		c2 20		rep #$20	                REP #$20        ; set A long
.394182		38		sec		                SEC
.394183		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.394185		e9 02 00	sbc #$0002	                SBC #2
.394188		85 28		sta $0348	                STA DOS_TEMP
.39418a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39418c		e9 00 00	sbc #$0000	                SBC #0
.39418f		85 2a		sta $034a	                STA DOS_TEMP+2
.394191		e2 10		sep #$10	                SEP #$10        ; set X short
.394193		ae 03 a0	ldx $38a003	                LDX SECTORS_PER_CLUSTER
.394196		e0 01		cpx #$01	mult_loop       CPX #1
.394198		f0 07		beq $3941a1	                BEQ add_offset
.39419a		06 28		asl $0348	                ASL DOS_TEMP
.39419c		26 28		rol $0348	                ROL DOS_TEMP
.39419e		ca		dex		                DEX
.39419f		80 f5		bra $394196	                BRA mult_loop
.3941a1		18		clc		add_offset      CLC
.3941a2		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.3941a4		6d 1c a0	adc $38a01c	                ADC CLUSTER_BEGIN_LBA
.3941a7		85 02		sta $0322	                STA BIOS_LBA
.3941a9		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3941ab		6d 1e a0	adc $38a01e	                ADC CLUSTER_BEGIN_LBA+2
.3941ae		85 04		sta $0324	                STA BIOS_LBA+2
.3941b0		28		plp		                PLP
.3941b1		2b		pld		                PLD
.3941b2		ab		plb		                PLB
.3941b3		6b		rtl		                RTL
.3941b4						DOS_GETCLUSTER
.3941b4		8b		phb		                PHB
.3941b5		0b		phd		                PHD
.3941b6		08		php		                PHP
.3941b7		48		pha		                PHA             ; begin setdbr macro
.3941b8		08		php		                PHP
.3941b9		e2 20		sep #$20	                SEP #$20        ; set A short
.3941bb		a9 00		lda #$00	                LDA #0
.3941bd		48		pha		                PHA
.3941be		ab		plb		                PLB
.3941bf		28		plp		                PLP
.3941c0		68		pla		                PLA             ; end setdbr macro
.3941c1		48		pha		                PHA             ; begin setdp macro
.3941c2		08		php		                PHP
.3941c3		c2 20		rep #$20	                REP #$20        ; set A long
.3941c5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3941c8		5b		tcd		                TCD
.3941c9		28		plp		                PLP
.3941ca		68		pla		                PLA             ; end setdp macro
.3941cb		c2 20		rep #$20	                REP #$20        ; set A long
.3941cd		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.3941cf		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3941d1		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.3941d3		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3941d5		22 69 41 39	jsl $394169	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.3941d9		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.3941dd		90 09		bcc $3941e8	                BCC ret_failure
.3941df						ret_success
.3941df		e2 20		sep #$20	                SEP #$20        ; set A short
.3941e1		64 0e		stz $032e	                STZ DOS_STATUS
.3941e3		28		plp		                PLP
.3941e4		2b		pld		                PLD
.3941e5		ab		plb		                PLB
.3941e6		38		sec		                SEC
.3941e7		6b		rtl		                RTL
.3941e8						ret_failure
.3941e8		e2 20		sep #$20	                SEP #$20        ; set A short
.3941ea		85 0e		sta $032e	                STA DOS_STATUS
.3941ec		28		plp		                PLP
.3941ed		2b		pld		                PLD
.3941ee		ab		plb		                PLB
.3941ef		18		clc		                CLC
.3941f0		6b		rtl		                RTL
.3941f1						DOS_PUTCLUSTER
.3941f1		8b		phb		                PHB
.3941f2		0b		phd		                PHD
.3941f3		08		php		                PHP
.3941f4		48		pha		                PHA             ; begin setdbr macro
.3941f5		08		php		                PHP
.3941f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3941f8		a9 00		lda #$00	                LDA #0
.3941fa		48		pha		                PHA
.3941fb		ab		plb		                PLB
.3941fc		28		plp		                PLP
.3941fd		68		pla		                PLA             ; end setdbr macro
.3941fe		48		pha		                PHA             ; begin setdp macro
.3941ff		08		php		                PHP
.394200		c2 20		rep #$20	                REP #$20        ; set A long
.394202		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394205		5b		tcd		                TCD
.394206		28		plp		                PLP
.394207		68		pla		                PLA             ; end setdp macro
.394208		c2 20		rep #$20	                REP #$20        ; set A long
.39420a		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.39420c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.39420e		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.394210		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394212		22 69 41 39	jsl $394169	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.394216		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.39421a		90 09		bcc $394225	                BCC ret_failure
.39421c						ret_success
.39421c		e2 20		sep #$20	                SEP #$20        ; set A short
.39421e		64 0e		stz $032e	                STZ DOS_STATUS
.394220		28		plp		                PLP
.394221		2b		pld		                PLD
.394222		ab		plb		                PLB
.394223		38		sec		                SEC
.394224		6b		rtl		                RTL
.394225						ret_failure
.394225		e2 20		sep #$20	                SEP #$20        ; set A short
.394227		85 0e		sta $032e	                STA DOS_STATUS
.394229		28		plp		                PLP
.39422a		2b		pld		                PLD
.39422b		ab		plb		                PLB
.39422c		18		clc		                CLC
.39422d		6b		rtl		                RTL
>39422e		40 46 00			DOS_FDC_NAME    .null "@F"
.394231						DOS_FDC_DESC
>394231		2e 42 39 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>394235		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>394236		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>39423a		40 53 00			DOS_SDC_NAME    .null "@S"
.39423d						DOS_SDC_DESC
>39423d		3a 42 39 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>394241		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>394242		31 42 39 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>394246		40 48 00			DOS_HDC_NAME    .null "@H"
.394249						DOS_HD_DESC
>394249		46 42 39 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>39424d		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>39424e		3d 42 39 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.394252						DOS_PARSE_DEV
.394252		8b		phb		                PHB
.394253		0b		phd		                PHD
.394254		08		php		                PHP
.394255		48		pha		                PHA             ; begin setdbr macro
.394256		08		php		                PHP
.394257		e2 20		sep #$20	                SEP #$20        ; set A short
.394259		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39425b		48		pha		                PHA
.39425c		ab		plb		                PLB
.39425d		28		plp		                PLP
.39425e		68		pla		                PLA             ; end setdbr macro
.39425f		48		pha		                PHA             ; begin setdp macro
.394260		08		php		                PHP
.394261		c2 20		rep #$20	                REP #$20        ; set A long
.394263		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394266		5b		tcd		                TCD
.394267		28		plp		                PLP
.394268		68		pla		                PLA             ; end setdp macro
.394269		c2 30		rep #$30	                REP #$30        ; set A&X long
.39426b		af 4a a0 38	lda $38a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.39426f		85 28		sta $0348	                STA DOS_TEMP
.394271		af 4c a0 38	lda $38a04c	                LDA @l DOS_DEV_NAMES+2
.394275		85 2a		sta $034a	                STA DOS_TEMP+2
.394277		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.39427a		85 48		sta $0368	                STA DOS_STR2_PTR
.39427c		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.39427f		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.394281		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.394284		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.394286		85 44		sta $0364	                STA DOS_STR1_PTR
.394288		c8		iny		                INY
.394289		c8		iny		                INY
.39428a		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.39428c		85 46		sta $0366	                STA DOS_STR1_PTR+2
.39428e		e2 20		sep #$20	                SEP #$20        ; set A short
.394290		a0 00 00	ldy #$0000	                LDY #0
.394293		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.394295		f0 24		beq $3942bb	                BEQ found                   ; If it's NULL, we found a match
.394297		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.394299		d0 03		bne $39429e	                BNE next_device             ; If no match, try to load the next device
.39429b		c8		iny		                INY                         ; Go to the next character
.39429c		80 f5		bra $394293	                BRA cmp_loop
.39429e						next_device
.39429e		c2 20		rep #$20	                REP #$20        ; set A long
.3942a0		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.3942a3		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3942a5		48		pha		                PHA
.3942a6		c8		iny		                INY
.3942a7		c8		iny		                INY
.3942a8		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3942aa		85 2a		sta $034a	                STA DOS_TEMP+2
.3942ac		68		pla		                PLA
.3942ad		85 28		sta $0348	                STA DOS_TEMP
.3942af		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.3942b1		d0 ce		bne $394281	                BNE dev_loop                ; No: check this device
.3942b3		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3942b5		d0 ca		bne $394281	                BNE dev_loop
.3942b7		28		plp		done            PLP                         ; Otherwise, return having not found a match
.3942b8		2b		pld		                PLD
.3942b9		ab		plb		                PLB
.3942ba		6b		rtl		                RTL
.3942bb		22 cc 42 39	jsl $3942cc	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.3942bf		e2 20		sep #$20	                SEP #$20        ; set A short
.3942c1		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.3942c4		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.3942c6		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.3942ca		80 eb		bra $3942b7	                BRA done
.3942cc						DOS_ADJUSTPATH
.3942cc		da		phx		                PHX
.3942cd		5a		phy		                PHY
.3942ce		8b		phb		                PHB
.3942cf		0b		phd		                PHD
.3942d0		08		php		                PHP
.3942d1		48		pha		                PHA             ; begin setdbr macro
.3942d2		08		php		                PHP
.3942d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3942d5		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3942d7		48		pha		                PHA
.3942d8		ab		plb		                PLB
.3942d9		28		plp		                PLP
.3942da		68		pla		                PLA             ; end setdbr macro
.3942db		48		pha		                PHA             ; begin setdp macro
.3942dc		08		php		                PHP
.3942dd		c2 20		rep #$20	                REP #$20        ; set A long
.3942df		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3942e2		5b		tcd		                TCD
.3942e3		28		plp		                PLP
.3942e4		68		pla		                PLA             ; end setdp macro
.3942e5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3942e7		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.3942e9		98		tya		                TYA                             ; Compute the address of the first source byte
.3942ea		18		clc		                CLC
.3942eb		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.3942ee		aa		tax		                TAX
.3942ef		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.3942f2		a8		tay		                TAY
.3942f3		38		sec		                SEC                             ; Compute the number of bytes to copy
.3942f4		a9 00 01	lda #$0100	                LDA #256
.3942f7		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.3942f9		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.3942fc		28		plp		                PLP
.3942fd		2b		pld		                PLD
.3942fe		ab		plb		                PLB
.3942ff		7a		ply		                PLY
.394300		fa		plx		                PLX
.394301		6b		rtl		                RTL
.394302						DOS_PARSE_PATH
.394302		8b		phb		                PHB
.394303		0b		phd		                PHD
.394304		08		php		                PHP
.394305		48		pha		                PHA             ; begin setdbr macro
.394306		08		php		                PHP
.394307		e2 20		sep #$20	                SEP #$20        ; set A short
.394309		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39430b		48		pha		                PHA
.39430c		ab		plb		                PLB
.39430d		28		plp		                PLP
.39430e		68		pla		                PLA             ; end setdbr macro
.39430f		48		pha		                PHA             ; begin setdp macro
.394310		08		php		                PHP
.394311		c2 20		rep #$20	                REP #$20        ; set A long
.394313		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394316		5b		tcd		                TCD
.394317		28		plp		                PLP
.394318		68		pla		                PLA             ; end setdp macro
.394319		c2 10		rep #$10	                REP #$10        ; set X long
.39431b		e2 20		sep #$20	                SEP #$20        ; set A short
.39431d		a2 00 00	ldx #$0000	                LDX #0
.394320		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.394322		f0 1b		beq $39433f	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.394324		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.394326		b0 05		bcs $39432d	                BGE check_case          ; No: check the case
.394328		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.39432a		82 64 00	brl $394391	                BRL ret_failure
.39432d		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.39432f		90 08		bcc $394339	                BLT next_char
.394331		c9 7b		cmp #$7b	                CMP #'z'+1
.394333		b0 04		bcs $394339	                BGE next_char
.394335		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.394337		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394339		e8		inx		next_char       INX                     ; Move to the next character
.39433a		e0 00 01	cpx #$0100	                CPX #$100
.39433d		d0 e1		bne $394320	                BNE upcase_loop
.39433f		22 52 42 39	jsl $394252	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.394343		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.394345		c9 3a		cmp #$3a	                CMP #':'
.394347		d0 07		bne $394350	                BNE clr_name            ; If not colon, treat it as a file name
.394349		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.39434c		22 cc 42 39	jsl $3942cc	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.394350		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.394353		a9 20		lda #$20	                LDA #' '
.394355		99 3a a0	sta $38a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.394358		c8		iny		                INY
.394359		c0 0b 00	cpy #$000b	                CPY #11
.39435c		d0 f7		bne $394355	                BNE clr_loop
.39435e		a2 00 00	ldx #$0000	                LDX #0
.394361		a0 00 00	ldy #$0000	                LDY #0
.394364		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.394366		f0 20		beq $394388	                BEQ ret_success         ; If NULL: we've finished parsing the path
.394368		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.39436a		f0 0a		beq $394376	                BEQ cpy_ext             ; And move to the extension
.39436c		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.39436f		e8		inx		                INX
.394370		c8		iny		                INY                     ; Move to the next character
.394371		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.394374		d0 ee		bne $394364	                BNE cpy_name_loop       ; No: process this one
.394376		e8		inx		cpy_ext         INX                     ; Skip the dot
.394377		a0 08 00	ldy #$0008	                LDY #8
.39437a		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.39437c		f0 0a		beq $394388	                BEQ ret_success         ; If it's NULL, we've finished
.39437e		99 3a a0	sta $38a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.394381		e8		inx		                INX
.394382		c8		iny		                INY                     ; Move to the next character
.394383		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.394386		d0 f2		bne $39437a	                BNE cpy_ext_loop        ; No: process this one
.394388						ret_success
.394388		e2 20		sep #$20	                SEP #$20        ; set A short
.39438a		64 0e		stz $032e	                STZ DOS_STATUS
.39438c		28		plp		                PLP
.39438d		2b		pld		                PLD
.39438e		ab		plb		                PLB
.39438f		38		sec		                SEC
.394390		6b		rtl		                RTL
.394391						ret_failure
.394391		e2 20		sep #$20	                SEP #$20        ; set A short
.394393		85 0e		sta $032e	                STA DOS_STATUS
.394395		28		plp		                PLP
.394396		2b		pld		                PLD
.394397		ab		plb		                PLB
.394398		18		clc		                CLC
.394399		6b		rtl		                RTL
.39439a						DOS_FINDFILE
.39439a		8b		phb		                PHB
.39439b		0b		phd		                PHD
.39439c		08		php		                PHP
.39439d		48		pha		                PHA             ; begin setdbr macro
.39439e		08		php		                PHP
.39439f		e2 20		sep #$20	                SEP #$20        ; set A short
.3943a1		a9 00		lda #$00	                LDA #0
.3943a3		48		pha		                PHA
.3943a4		ab		plb		                PLB
.3943a5		28		plp		                PLP
.3943a6		68		pla		                PLA             ; end setdbr macro
.3943a7		48		pha		                PHA             ; begin setdp macro
.3943a8		08		php		                PHP
.3943a9		c2 20		rep #$20	                REP #$20        ; set A long
.3943ab		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3943ae		5b		tcd		                TCD
.3943af		28		plp		                PLP
.3943b0		68		pla		                PLA             ; end setdp macro
.3943b1		c2 30		rep #$30	                REP #$30        ; set A&X long
.3943b3		22 02 43 39	jsl $394302	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.3943b7		b0 05		bcs $3943be	                BCS mount                       ; If success: try to open the directory
.3943b9		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.3943ba		2b		pld		                PLD
.3943bb		ab		plb		                PLB
.3943bc		18		clc		                CLC
.3943bd		6b		rtl		                RTL
.3943be		22 1c 3f 39	jsl $393f1c	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.3943c2		b0 07		bcs $3943cb	                BCS get_directory
.3943c4		e2 20		sep #$20	                SEP #$20        ; set A short
.3943c6		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.3943c8		82 56 00	brl $394421	                BRL ret_failure
.3943cb						get_directory
.3943cb		c2 20		rep #$20	                REP #$20        ; set A long
.3943cd		22 d1 3b 39	jsl $393bd1	                JSL DOS_DIROPEN                 ; Get the directory
.3943d1		b0 07		bcs $3943da	                BCS scan_entries                ; If success: start scanning the directory entries
.3943d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3943d5		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.3943d7		82 47 00	brl $394421	                BRL ret_failure
.3943da		22 50 3c 39	jsl $393c50	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.3943de						scan_loop
.3943de		e2 20		sep #$20	                SEP #$20        ; set A short
.3943e0		a0 00 00	ldy #$0000	                LDY #0
.3943e3		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.3943e5		d0 05		bne $3943ec	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.3943e7		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.3943e9		82 35 00	brl $394421	                BRL ret_failure
.3943ec		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.3943ee		f0 26		beq $394416	                BEQ next_entry                  ; Go to the next entry
.3943f0		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.3943f3		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.3943f5		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.3943f7		d0 1d		bne $394416	                BNE next_entry                  ; Yes: skip it!
.3943f9		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.3943fb		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.3943fd		f0 17		beq $394416	                BEQ next_entry                  ; Yes: skip it!
.3943ff		a2 00 00	ldx #$0000	                LDX #0
.394402		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.394405		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.394407		df 3a a0 38	cmp $38a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.39440b		d0 09		bne $394416	                BNE next_entry                  ; If not equal: try the next entry
.39440d		c8		iny		                INY                             ; Advance to the next character
.39440e		e8		inx		                INX
.39440f		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.394412		f0 16		beq $39442a	                BEQ match                       ; Yes: we have a match!
.394414		80 ef		bra $394405	                BRA scan_cmp_loop               ; No: keep checking
.394416		22 6b 3c 39	jsl $393c6b	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.39441a		90 05		bcc $394421	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.39441c		82 bf ff	brl $3943de	                BRL scan_loop                   ; If found: keep scanning
.39441f		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.394421						ret_failure
.394421		e2 20		sep #$20	                SEP #$20        ; set A short
.394423		85 0e		sta $032e	                STA DOS_STATUS
.394425		28		plp		                PLP
.394426		2b		pld		                PLD
.394427		ab		plb		                PLB
.394428		18		clc		                CLC
.394429		6b		rtl		                RTL
.39442a						match
.39442a		c2 20		rep #$20	                REP #$20        ; set A long
.39442c		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.39442f		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394431		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.394433		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394436		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394438		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39443a						ret_success
.39443a		e2 20		sep #$20	                SEP #$20        ; set A short
.39443c		64 0e		stz $032e	                STZ DOS_STATUS
.39443e		28		plp		                PLP
.39443f		2b		pld		                PLD
.394440		ab		plb		                PLB
.394441		38		sec		                SEC
.394442		6b		rtl		                RTL
.394443						DOS_READFILE
.394443		8b		phb		                PHB
.394444		0b		phd		                PHD
.394445		08		php		                PHP
.394446		48		pha		                PHA             ; begin setdbr macro
.394447		08		php		                PHP
.394448		e2 20		sep #$20	                SEP #$20        ; set A short
.39444a		a9 00		lda #$00	                LDA #0
.39444c		48		pha		                PHA
.39444d		ab		plb		                PLB
.39444e		28		plp		                PLP
.39444f		68		pla		                PLA             ; end setdbr macro
.394450		48		pha		                PHA             ; begin setdp macro
.394451		08		php		                PHP
.394452		c2 20		rep #$20	                REP #$20        ; set A long
.394454		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394457		5b		tcd		                TCD
.394458		28		plp		                PLP
.394459		68		pla		                PLA             ; end setdp macro
.39445a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39445c		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.39445e		48		pha		                PHA
.39445f		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.394461		48		pha		                PHA
.394462		22 9a 43 39	jsl $39439a	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.394466		68		pla		                PLA
.394467		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394469		68		pla		                PLA
.39446a		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.39446c		90 0f		bcc $39447d	                BCC pass_failure                    ; If found: try to load the cluster
.39446e		22 b4 41 39	jsl $3941b4	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.394472		90 09		bcc $39447d	                BCC pass_failure                    ; If there's an error... pass it up the chain
.394474						ret_success
.394474		e2 20		sep #$20	                SEP #$20        ; set A short
.394476		64 0e		stz $032e	                STZ DOS_STATUS
.394478		28		plp		                PLP
.394479		2b		pld		                PLD
.39447a		ab		plb		                PLB
.39447b		38		sec		                SEC
.39447c		6b		rtl		                RTL
.39447d		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.39447e		2b		pld		                PLD
.39447f		ab		plb		                PLB
.394480		18		clc		                CLC
.394481		6b		rtl		                RTL
.394482						ENTRYFORCLUS12
.394482		8b		phb		                PHB
.394483		0b		phd		                PHD
.394484		08		php		                PHP
.394485		48		pha		                PHA             ; begin setdbr macro
.394486		08		php		                PHP
.394487		e2 20		sep #$20	                SEP #$20        ; set A short
.394489		a9 00		lda #$00	                LDA #0
.39448b		48		pha		                PHA
.39448c		ab		plb		                PLB
.39448d		28		plp		                PLP
.39448e		68		pla		                PLA             ; end setdbr macro
.39448f		48		pha		                PHA             ; begin setdp macro
.394490		08		php		                PHP
.394491		c2 20		rep #$20	                REP #$20        ; set A long
.394493		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394496		5b		tcd		                TCD
.394497		28		plp		                PLP
.394498		68		pla		                PLA             ; end setdp macro
.394499		c2 30		rep #$30	                REP #$30        ; set A&X long
.39449b		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.39449d		0a		asl a		                ASL A
.39449e		85 28		sta $0348	                STA DOS_TEMP
.3944a0		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3944a2		2a		rol a		                ROL A
.3944a3		85 2a		sta $034a	                STA DOS_TEMP+2
.3944a5		18		clc		                CLC
.3944a6		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3944a8		65 28		adc $0348	                ADC DOS_TEMP
.3944aa		85 28		sta $0348	                STA DOS_TEMP
.3944ac		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.3944ae		65 2a		adc $034a	                ADC DOS_TEMP+2
.3944b0		85 2a		sta $034a	                STA DOS_TEMP+2
.3944b2		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.3944b4		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.3944b6		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.3944b8		29 ff 03	and #$03ff	                AND #$003FF
.3944bb		aa		tax		                TAX
.3944bc		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944be		66 28		ror $0348	                ROR DOS_TEMP
.3944c0		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944c2		66 28		ror $0348	                ROR DOS_TEMP
.3944c4		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944c6		66 28		ror $0348	                ROR DOS_TEMP
.3944c8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944ca		66 28		ror $0348	                ROR DOS_TEMP
.3944cc		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944ce		66 28		ror $0348	                ROR DOS_TEMP
.3944d0		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944d2		66 28		ror $0348	                ROR DOS_TEMP
.3944d4		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944d6		66 28		ror $0348	                ROR DOS_TEMP
.3944d8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944da		66 28		ror $0348	                ROR DOS_TEMP
.3944dc		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.3944de		66 28		ror $0348	                ROR DOS_TEMP
.3944e0		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.3944e1		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA
.3944e5		65 28		adc $0348	                ADC DOS_TEMP
.3944e7		85 24		sta $0344	                STA DOS_FAT_LBA
.3944e9		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.3944ed		65 2a		adc $034a	                ADC DOS_TEMP+2
.3944ef		85 26		sta $0346	                STA DOS_FAT_LBA+2
.3944f1		28		plp		                PLP
.3944f2		2b		pld		                PLD
.3944f3		ab		plb		                PLB
.3944f4		6b		rtl		                RTL
.3944f5						FATFORCLUSTER12
.3944f5		8b		phb		                PHB
.3944f6		0b		phd		                PHD
.3944f7		08		php		                PHP
.3944f8		48		pha		                PHA             ; begin setdbr macro
.3944f9		08		php		                PHP
.3944fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3944fc		a9 00		lda #$00	                LDA #0
.3944fe		48		pha		                PHA
.3944ff		ab		plb		                PLB
.394500		28		plp		                PLP
.394501		68		pla		                PLA             ; end setdbr macro
.394502		48		pha		                PHA             ; begin setdp macro
.394503		08		php		                PHP
.394504		c2 20		rep #$20	                REP #$20        ; set A long
.394506		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394509		5b		tcd		                TCD
.39450a		28		plp		                PLP
.39450b		68		pla		                PLA             ; end setdp macro
.39450c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39450e		a2 00 00	ldx #$0000	                LDX #0
.394511		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.394514		8f 00 a5 38	sta $38a500	clr_loop        STA DOS_FAT_SECTORS
.394518		e8		inx		                INX
.394519		e8		inx		                INX
.39451a		e0 00 04	cpx #$0400	                CPX #1024
.39451d		d0 f5		bne $394514	                BNE clr_loop
.39451f		22 82 44 39	jsl $394482	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.394523		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.394525		85 02		sta $0322	                STA BIOS_LBA
.394527		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394529		85 04		sta $0324	                STA BIOS_LBA+2
.39452b		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.39452e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394530		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394533		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394535		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.394539		90 17		bcc $394552	                BCC error
.39453b		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.39453d		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.394540		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394542		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394545		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394547		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.39454b		90 05		bcc $394552	                BCC error
.39454d		28		plp		                PLP
.39454e		2b		pld		                PLD
.39454f		ab		plb		                PLB
.394550		38		sec		                SEC
.394551		6b		rtl		                RTL
.394552						error
.394552		e2 20		sep #$20	                SEP #$20        ; set A short
.394554		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394556		85 0e		sta $032e	                STA DOS_STATUS
.394558		28		plp		                PLP
.394559		2b		pld		                PLD
.39455a		ab		plb		                PLB
.39455b		18		clc		                CLC
.39455c		6b		rtl		                RTL
.39455d						FATFORCLUSTER32
.39455d		8b		phb		                PHB
.39455e		0b		phd		                PHD
.39455f		48		pha		                PHA             ; begin setdbr macro
.394560		08		php		                PHP
.394561		e2 20		sep #$20	                SEP #$20        ; set A short
.394563		a9 00		lda #$00	                LDA #0
.394565		48		pha		                PHA
.394566		ab		plb		                PLB
.394567		28		plp		                PLP
.394568		68		pla		                PLA             ; end setdbr macro
.394569		48		pha		                PHA             ; begin setdp macro
.39456a		08		php		                PHP
.39456b		c2 20		rep #$20	                REP #$20        ; set A long
.39456d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394570		5b		tcd		                TCD
.394571		28		plp		                PLP
.394572		68		pla		                PLA             ; end setdp macro
.394573		c2 30		rep #$30	                REP #$30        ; set A&X long
.394575		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394577		85 24		sta $0344	                STA DOS_FAT_LBA
.394579		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39457b		85 26		sta $0346	                STA DOS_FAT_LBA+2
.39457d		a2 07 00	ldx #$0007	                LDX #7
.394580		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.394582		66 24		ror $0344	                ROR DOS_FAT_LBA
.394584		ca		dex		                DEX
.394585		d0 f9		bne $394580	                BNE div_loop
.394587		18		clc		                CLC
.394588		a5 24		lda $0344	                LDA DOS_FAT_LBA
.39458a		6f 14 a0 38	adc $38a014	                ADC FAT_BEGIN_LBA
.39458e		85 24		sta $0344	                STA DOS_FAT_LBA
.394590		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394592		6f 16 a0 38	adc $38a016	                ADC FAT_BEGIN_LBA+2
.394596		85 26		sta $0346	                STA DOS_FAT_LBA+2
.394598		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.39459a		85 02		sta $0322	                STA BIOS_LBA
.39459c		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39459e		85 04		sta $0324	                STA BIOS_LBA+2
.3945a0		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.3945a3		85 06		sta $0326	                STA BIOS_BUFF_PTR
.3945a5		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.3945a8		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.3945aa		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.3945ae		b0 06		bcs $3945b6	                BCS find_entry
.3945b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3945b2		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3945b4		80 0e		bra $3945c4	                BRA ret_failure
.3945b6						find_entry
.3945b6		c2 20		rep #$20	                REP #$20        ; set A long
.3945b8		a5 10		lda $0330	                LDA DOS_CLUS_ID
.3945ba		0a		asl a		                ASL A
.3945bb		0a		asl a		                ASL A                           ; * 4
.3945bc		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.3945bf		aa		tax		                TAX                             ; X should be the offset within the sector
.3945c0		2b		pld		ret_success     PLD
.3945c1		ab		plb		                PLB
.3945c2		38		sec		                SEC                             ; return success
.3945c3		6b		rtl		                RTL
.3945c4		2b		pld		ret_failure     PLD
.3945c5		ab		plb		                PLB
.3945c6		18		clc		                CLC                             ; Return failure
.3945c7		6b		rtl		                RTL
.3945c8						NEXTCLUSTER
.3945c8		08		php		                PHP
.3945c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3945cb		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.3945cf		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.3945d1		d0 08		bne $3945db	                BNE fat32                       ; No: assume it's FAT32
.3945d3		22 e9 45 39	jsl $3945e9	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.3945d7		90 0d		bcc $3945e6	                BCC pass_failure                ; If there was an error, pass it up the chain
.3945d9		80 06		bra $3945e1	                BRA ret_success
.3945db		22 51 46 39	jsl $394651	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.3945df		90 05		bcc $3945e6	                BCC pass_failure                ; If there was an error, pass it up the chain
.3945e1		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.3945e3		28		plp		                PLP
.3945e4		38		sec		                SEC
.3945e5		6b		rtl		                RTL
.3945e6		28		plp		pass_failure    PLP
.3945e7		18		clc		                CLC
.3945e8		6b		rtl		                RTL
.3945e9						NEXTCLUSTER12
.3945e9		8b		phb		                    PHB
.3945ea		0b		phd		                    PHD
.3945eb		08		php		                    PHP
.3945ec		48		pha		                PHA             ; begin setdbr macro
.3945ed		08		php		                PHP
.3945ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3945f0		a9 00		lda #$00	                LDA #0
.3945f2		48		pha		                PHA
.3945f3		ab		plb		                PLB
.3945f4		28		plp		                PLP
.3945f5		68		pla		                PLA             ; end setdbr macro
.3945f6		48		pha		                PHA             ; begin setdp macro
.3945f7		08		php		                PHP
.3945f8		c2 20		rep #$20	                REP #$20        ; set A long
.3945fa		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3945fd		5b		tcd		                TCD
.3945fe		28		plp		                PLP
.3945ff		68		pla		                PLA             ; end setdp macro
.394600		c2 30		rep #$30	                REP #$30        ; set A&X long
.394602		22 f5 44 39	jsl $3944f5	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.394606		b0 03		bcs $39460b	                    BCS chk_clus_id
.394608		82 41 00	brl $39464c	                    BRL pass_failure
.39460b		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.39460d		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.394610		d0 0d		bne $39461f	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.394612						is_even
.394612		c2 20		rep #$20	                REP #$20        ; set A long
.394614		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.394618		29 ff 0f	and #$0fff	                    AND #$0FFF
.39461b		85 28		sta $0348	                    STA DOS_TEMP
.39461d		80 0c		bra $39462b	                    BRA check_id
.39461f						is_odd
.39461f		c2 20		rep #$20	                REP #$20        ; set A long
.394621		bf 00 a5 38	lda $38a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.394625		4a		lsr a		                    LSR A
.394626		4a		lsr a		                    LSR A
.394627		4a		lsr a		                    LSR A
.394628		4a		lsr a		                    LSR A
.394629		85 28		sta $0348	                    STA DOS_TEMP
.39462b						check_id
.39462b		c2 20		rep #$20	                REP #$20        ; set A long
.39462d		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.39462f		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.394632		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.394635		f0 0f		beq $394646	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.394637		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.394639		85 10		sta $0330	                    STA DOS_CLUS_ID
.39463b		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.39463d						ret_success
.39463d		e2 20		sep #$20	                SEP #$20        ; set A short
.39463f		64 0e		stz $032e	                    STZ DOS_STATUS
.394641		28		plp		                    PLP
.394642		2b		pld		                    PLD
.394643		ab		plb		                    PLB
.394644		38		sec		                    SEC
.394645		6b		rtl		                    RTL
.394646						no_more
.394646		e2 20		sep #$20	                SEP #$20        ; set A short
.394648		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.39464a		85 0e		sta $032e	                    STA DOS_STATUS
.39464c		28		plp		pass_failure        PLP
.39464d		2b		pld		                    PLD
.39464e		ab		plb		                    PLB
.39464f		18		clc		                    CLC
.394650		6b		rtl		                    RTL
.394651						NEXTCLUSTER32
.394651		8b		phb		                PHB
.394652		0b		phd		                PHD
.394653		08		php		                PHP
.394654		48		pha		                PHA             ; begin setdbr macro
.394655		08		php		                PHP
.394656		e2 20		sep #$20	                SEP #$20        ; set A short
.394658		a9 00		lda #$00	                LDA #0
.39465a		48		pha		                PHA
.39465b		ab		plb		                PLB
.39465c		28		plp		                PLP
.39465d		68		pla		                PLA             ; end setdbr macro
.39465e		48		pha		                PHA             ; begin setdp macro
.39465f		08		php		                PHP
.394660		c2 20		rep #$20	                REP #$20        ; set A long
.394662		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394665		5b		tcd		                TCD
.394666		28		plp		                PLP
.394667		68		pla		                PLA             ; end setdp macro
.394668		c2 30		rep #$30	                REP #$30        ; set A&X long
.39466a		22 5d 45 39	jsl $39455d	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.39466e		90 53		bcc $3946c3	                BCC ret_failure                 ; If it did not work, return the error
.394670		e2 20		sep #$20	                SEP #$20        ; set A short
.394672		bf 00 a5 38	lda $38a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.394676		85 28		sta $0348	                STA DOS_TEMP
.394678		bf 01 a5 38	lda $38a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.39467c		85 29		sta $0349	                STA DOS_TEMP+1
.39467e		bf 02 a5 38	lda $38a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.394682		85 2a		sta $034a	                STA DOS_TEMP+2
.394684		bf 03 a5 38	lda $38a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.394688		85 2b		sta $034b	                STA DOS_TEMP+3
.39468a		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.39468c		c9 ff		cmp #$ff	                CMP #$FF
.39468e		d0 18		bne $3946a8	                BNE found_next
.394690		a5 29		lda $0349	                LDA DOS_TEMP+1
.394692		c9 ff		cmp #$ff	                CMP #$FF
.394694		d0 12		bne $3946a8	                BNE found_next
.394696		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394698		c9 ff		cmp #$ff	                CMP #$FF
.39469a		d0 0c		bne $3946a8	                BNE found_next
.39469c		a5 2b		lda $034b	                LDA DOS_TEMP+3
.39469e		c9 0f		cmp #$0f	                CMP #$0F
.3946a0		d0 06		bne $3946a8	                BNE found_next                  ; No: return this cluster as the next
.3946a2		e2 20		sep #$20	                SEP #$20        ; set A short
.3946a4		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.3946a6		80 1b		bra $3946c3	                BRA ret_failure
.3946a8						found_next
.3946a8		e2 20		sep #$20	                SEP #$20        ; set A short
.3946aa		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.3946ac		85 10		sta $0330	                STA DOS_CLUS_ID
.3946ae		a5 29		lda $0349	                LDA DOS_TEMP+1
.3946b0		85 11		sta $0331	                STA DOS_CLUS_ID+1
.3946b2		a5 2a		lda $034a	                LDA DOS_TEMP+2
.3946b4		85 12		sta $0332	                STA DOS_CLUS_ID+2
.3946b6		a5 2b		lda $034b	                LDA DOS_TEMP+3
.3946b8		85 13		sta $0333	                STA DOS_CLUS_ID+3
.3946ba						ret_success
.3946ba		e2 20		sep #$20	                SEP #$20        ; set A short
.3946bc		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.3946be		28		plp		                PLP
.3946bf		2b		pld		                PLD
.3946c0		ab		plb		                PLB
.3946c1		38		sec		                SEC
.3946c2		6b		rtl		                RTL
.3946c3						ret_failure
.3946c3		e2 20		sep #$20	                SEP #$20        ; set A short
.3946c5		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.3946c7		28		plp		                PLP
.3946c8		2b		pld		                PLD
.3946c9		ab		plb		                PLB
.3946ca		18		clc		                CLC
.3946cb		6b		rtl		                RTL
.3946cc						DOS_READNEXT
.3946cc		08		php		                PHP
.3946cd		c2 30		rep #$30	                REP #$30        ; set A&X long
.3946cf		22 c8 45 39	jsl $3945c8	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.3946d3		90 09		bcc $3946de	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.3946d5		22 b4 41 39	jsl $3941b4	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.3946d9		90 03		bcc $3946de	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.3946db		28		plp		ret_success     PLP
.3946dc		38		sec		                SEC
.3946dd		6b		rtl		                RTL
.3946de		28		plp		pass_failure    PLP
.3946df		18		clc		                CLC
.3946e0		6b		rtl		                RTL
.3946e1						DOS_FREECLUS
.3946e1		08		php		                PHP
.3946e2		48		pha		                PHA             ; begin setdp macro
.3946e3		08		php		                PHP
.3946e4		c2 20		rep #$20	                REP #$20        ; set A long
.3946e6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3946e9		5b		tcd		                TCD
.3946ea		28		plp		                PLP
.3946eb		68		pla		                PLA             ; end setdp macro
.3946ec		e2 20		sep #$20	                SEP #$20        ; set A short
.3946ee		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.3946f2		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.3946f4		d0 08		bne $3946fe	                BNE fat32                       ; No: assume it's FAT32
.3946f6		22 72 47 39	jsl $394772	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.3946fa		90 0d		bcc $394709	                BCC pass_failure                ; If there was an error, pass it up the chain
.3946fc		80 06		bra $394704	                BRA ret_success
.3946fe		22 4a 48 39	jsl $39484a	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.394702		90 05		bcc $394709	                BCC pass_failure                ; If there was an error, pass it up the chain
.394704		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.394706		28		plp		                PLP
.394707		38		sec		                SEC
.394708		6b		rtl		                RTL
.394709		28		plp		pass_failure    PLP
.39470a		18		clc		                CLC
.39470b		6b		rtl		                RTL
.39470c						FDC_READ2FAT12
.39470c		8b		phb		                    PHB
.39470d		0b		phd		                    PHD
.39470e		08		php		                    PHP
.39470f		48		pha		                PHA             ; begin setdbr macro
.394710		08		php		                PHP
.394711		e2 20		sep #$20	                SEP #$20        ; set A short
.394713		a9 00		lda #$00	                LDA #0
.394715		48		pha		                PHA
.394716		ab		plb		                PLB
.394717		28		plp		                PLP
.394718		68		pla		                PLA             ; end setdbr macro
.394719		48		pha		                PHA             ; begin setdp macro
.39471a		08		php		                PHP
.39471b		c2 20		rep #$20	                REP #$20        ; set A long
.39471d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394720		5b		tcd		                TCD
.394721		28		plp		                PLP
.394722		68		pla		                PLA             ; end setdp macro
.394723		c2 30		rep #$30	                REP #$30        ; set A&X long
.394725		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.394728		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.39472a		a9 38 00	lda #$0038	                    LDA #`DOS_FAT_SECTORS
.39472d		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.39472f		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.394731		85 02		sta $0322	                    STA BIOS_LBA
.394733		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.394735		85 04		sta $0324	                    STA BIOS_LBA+2
.394737		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.39473b		b0 07		bcs $394744	                    BCS inc_sect2                   ; If success: start getting the second sector
.39473d		e2 20		sep #$20	                SEP #$20        ; set A short
.39473f		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394741		82 1c 00	brl $394760	                    BRL ret_failure
.394744						inc_sect2
.394744		c2 20		rep #$20	                REP #$20        ; set A long
.394746		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.394748		d0 02		bne $39474c	                    BNE inc_buff_ptr
.39474a		e6 04		inc $0324	                    INC BIOS_LBA+2
.39474c		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.39474f		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.394751		a9 38 00	lda #$0038	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394754		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.394756		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.39475a		b0 0d		bcs $394769	                    BCS ret_success                 ; If success, return success
.39475c		e2 20		sep #$20	                SEP #$20        ; set A short
.39475e		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.394760						ret_failure
.394760		e2 20		sep #$20	                SEP #$20        ; set A short
.394762		85 00		sta $0320	                    STA BIOS_STATUS
.394764		28		plp		                    PLP
.394765		2b		pld		                    PLD
.394766		ab		plb		                    PLB
.394767		18		clc		                    CLC
.394768		6b		rtl		                    RTL
.394769						ret_success
.394769		e2 20		sep #$20	                SEP #$20        ; set A short
.39476b		64 00		stz $0320	                    STZ BIOS_STATUS
.39476d		28		plp		                    PLP
.39476e		2b		pld		                    PLD
.39476f		ab		plb		                    PLB
.394770		38		sec		                    SEC
.394771		6b		rtl		                    RTL
.394772						DOS_FREECLUS12
.394772		da		phx		                PHX
.394773		8b		phb		                PHB
.394774		0b		phd		                PHD
.394775		08		php		                PHP
.394776		48		pha		                PHA             ; begin setdbr macro
.394777		08		php		                PHP
.394778		e2 20		sep #$20	                SEP #$20        ; set A short
.39477a		a9 00		lda #$00	                LDA #0
.39477c		48		pha		                PHA
.39477d		ab		plb		                PLB
.39477e		28		plp		                PLP
.39477f		68		pla		                PLA             ; end setdbr macro
.394780		48		pha		                PHA             ; begin setdp macro
.394781		08		php		                PHP
.394782		c2 20		rep #$20	                REP #$20        ; set A long
.394784		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394787		5b		tcd		                TCD
.394788		28		plp		                PLP
.394789		68		pla		                PLA             ; end setdp macro
.39478a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39478c		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.39478f		85 10		sta $0330	                STA DOS_CLUS_ID
.394791		a9 00 00	lda #$0000	                LDA #0
.394794		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394796		22 82 44 39	jsl $394482	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.39479a		22 0c 47 39	jsl $39470c	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.39479e		b0 07		bcs $3947a7	                BCS start_of_fat                ; If success, move X to the start of the FAT
.3947a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3947a2		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3947a4		82 99 00	brl $394840	                BRL ret_failure
.3947a7						start_of_fat
.3947a7		c2 30		rep #$30	                REP #$30        ; set A&X long
.3947a9		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.3947ab		89 01 00	bit #$0001	                BIT #1
.3947ae		d0 09		bne $3947b9	                BNE is_odd
.3947b0		bf 00 a5 38	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.3947b4		29 ff 0f	and #$0fff	                AND #$0FFF
.3947b7		80 08		bra $3947c1	                BRA chk_available
.3947b9		bf 00 a5 38	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.3947bd		4a		lsr a		                LSR A
.3947be		4a		lsr a		                LSR A
.3947bf		4a		lsr a		                LSR A
.3947c0		4a		lsr a		                LSR A
.3947c1						chk_available
.3947c1		85 28		sta $0348	                STA DOS_TEMP
.3947c3		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.3947c6		f0 03		beq $3947cb	                BEQ chk_found
.3947c8		82 39 00	brl $394804	                BRL next_cluster                ; No: advance to the next cluster
.3947cb		8a		txa		chk_found       TXA
.3947cc		85 2a		sta $034a	                STA DOS_TEMP+2
.3947ce		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.3947d0		89 01 00	bit #$0001	                BIT #1
.3947d3		d0 0d		bne $3947e2	                BNE is_odd2
.3947d5						is_even2
.3947d5		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.3947d9		09 ff 0f	ora #$0fff	                ORA #$0FFF
.3947dc		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3947e0		80 0b		bra $3947ed	                BRA write_fat
.3947e2						is_odd2
.3947e2		bf 00 a5 38	lda $38a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.3947e6		09 f0 ff	ora #$fff0	                ORA #$FFF0
.3947e9		9f 00 a5 38	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.3947ed		22 14 49 39	jsl $394914	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.3947f1		b0 07		bcs $3947fa	                BCS ret_success                 ; If success: return success
.3947f3		e2 20		sep #$20	                SEP #$20        ; set A short
.3947f5		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.3947f7		82 46 00	brl $394840	                BRL ret_failure
.3947fa						ret_success
.3947fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3947fc		64 0e		stz $032e	                STZ DOS_STATUS
.3947fe		28		plp		                PLP
.3947ff		2b		pld		                PLD
.394800		ab		plb		                PLB
.394801		fa		plx		                PLX
.394802		38		sec		                SEC
.394803		6b		rtl		                RTL
.394804						next_cluster
.394804		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.394806		d0 02		bne $39480a	                BNE calc_entry
.394808		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.39480a		22 82 44 39	jsl $394482	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.39480e		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.394811		f0 03		beq $394816	                BEQ chk_end_of_fat
.394813		82 93 ff	brl $3947a9	                BRL chk_cluster                 ; No: go back and check it too
.394816						chk_end_of_fat
.394816		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.394818		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.39481c		d0 0f		bne $39482d	                BNE next_2
.39481e		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.394820		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.394824		d0 07		bne $39482d	                BNE next_2                      ; No: get the next to sectors
.394826		e2 20		sep #$20	                SEP #$20        ; set A short
.394828		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.39482a		82 13 00	brl $394840	                BRL ret_failure
.39482d						next_2
.39482d		22 0c 47 39	jsl $39470c	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.394831		90 06		bcc $394839	                BCC fat_fail                    ; If failed: return error
.394833		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.394836		82 70 ff	brl $3947a9	                BRL chk_cluster                 ; And start checking from there
.394839						fat_fail
.394839		e2 20		sep #$20	                SEP #$20        ; set A short
.39483b		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.39483d		82 00 00	brl $394840	                BRL ret_failure
.394840						ret_failure
.394840		e2 20		sep #$20	                SEP #$20        ; set A short
.394842		85 0e		sta $032e	                STA DOS_STATUS
.394844		28		plp		                PLP
.394845		2b		pld		                PLD
.394846		ab		plb		                PLB
.394847		fa		plx		                PLX
.394848		18		clc		                CLC
.394849		6b		rtl		                RTL
.39484a						DOS_FREECLUS32
.39484a		8b		phb		                PHB
.39484b		0b		phd		                PHD
.39484c		08		php		                PHP
.39484d		48		pha		                PHA             ; begin setdbr macro
.39484e		08		php		                PHP
.39484f		e2 20		sep #$20	                SEP #$20        ; set A short
.394851		a9 00		lda #$00	                LDA #0
.394853		48		pha		                PHA
.394854		ab		plb		                PLB
.394855		28		plp		                PLP
.394856		68		pla		                PLA             ; end setdbr macro
.394857		48		pha		                PHA             ; begin setdp macro
.394858		08		php		                PHP
.394859		c2 20		rep #$20	                REP #$20        ; set A long
.39485b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39485e		5b		tcd		                TCD
.39485f		28		plp		                PLP
.394860		68		pla		                PLA             ; end setdp macro
.394861		c2 30		rep #$30	                REP #$30        ; set A&X long
.394863		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.394866		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394868		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.39486b		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39486d		af 14 a0 38	lda $38a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.394871		85 02		sta $0322	                STA BIOS_LBA
.394873		af 16 a0 38	lda $38a016	                LDA FAT_BEGIN_LBA+2
.394877		85 04		sta $0324	                STA BIOS_LBA+2
.394879		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.39487d		b0 07		bcs $394886	                BCS initial_entry               ; If OK: set the initial entry to check
.39487f		e2 20		sep #$20	                SEP #$20        ; set A short
.394881		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.394883		82 6b 00	brl $3948f1	                BRL ret_failure
.394886						initial_entry
.394886		c2 20		rep #$20	                REP #$20        ; set A long
.394888		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.39488b		85 10		sta $0330	                STA DOS_CLUS_ID
.39488d		a9 00 00	lda #$0000	                LDA #0
.394890		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394892		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.394895		bf 00 a3 38	lda $38a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.394899		d0 06		bne $3948a1	                BNE next_entry                  ; No: move to the next entry
.39489b		bf 02 a3 38	lda $38a302,x	                LDA DOS_SECTOR+2,X
.39489f		f0 36		beq $3948d7	                BEQ found_free                  ; Yes: go to allocate and return it
.3948a1		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.3948a3		d0 02		bne $3948a7	                BNE inc_ptr
.3948a5		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.3948a7		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.3948a8		e8		inx		                INX
.3948a9		e8		inx		                INX
.3948aa		e8		inx		                INX
.3948ab		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.3948ae		90 e5		bcc $394895	                BLT chk_entry                   ; No: check this entry
.3948b0		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.3948b2		d0 18		bne $3948cc	                BNE get_block
.3948b4		e6 04		inc $0324	                INC BIOS_LBA+2
.3948b6		a5 04		lda $0324	                LDA BIOS_LBA+2
.3948b8		cf 1a a0 38	cmp $38a01a	                CMP FAT2_BEGIN_LBA+2
.3948bc		90 0e		bcc $3948cc	                BLT get_block
.3948be		a5 02		lda $0322	                LDA BIOS_LBA
.3948c0		cf 18 a0 38	cmp $38a018	                CMP FAT2_BEGIN_LBA
.3948c4		90 06		bcc $3948cc	                BLT get_block
.3948c6		e2 20		sep #$20	                SEP #$20        ; set A short
.3948c8		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.3948ca		80 25		bra $3948f1	                BRA ret_failure
.3948cc		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.3948d0		90 1b		bcc $3948ed	                BCC ret_fat_error               ; If error: throw a FAT error
.3948d2		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.3948d5		80 be		bra $394895	                BRA chk_entry                   ; Check this entry
.3948d7						found_free
.3948d7		c2 20		rep #$20	                REP #$20        ; set A long
.3948d9		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.3948dc		9f 00 a3 38	sta $38a300,x	                STA DOS_SECTOR,X
.3948e0		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.3948e3		9f 02 a3 38	sta $38a302,x	                STA DOS_SECTOR+2,X
.3948e7		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.3948eb		b0 0d		bcs $3948fa	                BCS ret_success                 ; If OK: return success
.3948ed						ret_fat_error
.3948ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3948ef		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.3948f1						ret_failure
.3948f1		e2 20		sep #$20	                SEP #$20        ; set A short
.3948f3		85 0e		sta $032e	                STA DOS_STATUS
.3948f5		28		plp		                PLP
.3948f6		2b		pld		                PLD
.3948f7		ab		plb		                PLB
.3948f8		18		clc		                CLC
.3948f9		6b		rtl		                RTL
.3948fa						ret_success
.3948fa		e2 20		sep #$20	                SEP #$20        ; set A short
.3948fc		64 0e		stz $032e	                STZ DOS_STATUS
.3948fe		28		plp		                PLP
.3948ff		2b		pld		                PLD
.394900		ab		plb		                PLB
.394901		38		sec		                SEC
.394902		6b		rtl		                RTL
.394903						DELCLUSTER
.394903		e2 20		sep #$20	                SEP #$20        ; set A short
.394905		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394909		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.39490b		d0 04		bne $394911	                BNE fat32                       ; No: assume it's FAT32
.39490d		5c 5b 49 39	jmp $39495b	fat12           JML DELCLUSTER12
.394911		4c a9 49	jmp $3949a9	fat32           JMP DELCLUSTER32
.394914						WRITEFAT12
.394914		8b		phb		                PHB
.394915		0b		phd		                PHD
.394916		48		pha		                PHA             ; begin setdbr macro
.394917		08		php		                PHP
.394918		e2 20		sep #$20	                SEP #$20        ; set A short
.39491a		a9 00		lda #$00	                LDA #0
.39491c		48		pha		                PHA
.39491d		ab		plb		                PLB
.39491e		28		plp		                PLP
.39491f		68		pla		                PLA             ; end setdbr macro
.394920		48		pha		                PHA             ; begin setdp macro
.394921		08		php		                PHP
.394922		c2 20		rep #$20	                REP #$20        ; set A long
.394924		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394927		5b		tcd		                TCD
.394928		28		plp		                PLP
.394929		68		pla		                PLA             ; end setdp macro
.39492a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39492c		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.39492f		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394931		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.394934		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.394936		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.394938		85 02		sta $0322	                STA BIOS_LBA
.39493a		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.39493c		85 04		sta $0324	                STA BIOS_LBA+2
.39493e		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.394942		90 14		bcc $394958	                BCC done
.394944		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.394947		85 06		sta $0326	                STA BIOS_BUFF_PTR
.394949		a9 38 00	lda #$0038	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.39494c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.39494e		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.394950		d0 02		bne $394954	                BNE put_second
.394952		e6 04		inc $0324	                INC BIOS_LBA+2
.394954		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.394958		2b		pld		done            PLD
.394959		ab		plb		                PLB
.39495a		6b		rtl		                RTL
.39495b						DELCLUSTER12
.39495b		8b		phb		                PHB
.39495c		0b		phd		                PHD
.39495d		08		php		                PHP
.39495e		48		pha		                PHA             ; begin setdbr macro
.39495f		08		php		                PHP
.394960		e2 20		sep #$20	                SEP #$20        ; set A short
.394962		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394964		48		pha		                PHA
.394965		ab		plb		                PLB
.394966		28		plp		                PLP
.394967		68		pla		                PLA             ; end setdbr macro
.394968		48		pha		                PHA             ; begin setdp macro
.394969		08		php		                PHP
.39496a		c2 20		rep #$20	                REP #$20        ; set A long
.39496c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39496f		5b		tcd		                TCD
.394970		28		plp		                PLP
.394971		68		pla		                PLA             ; end setdp macro
.394972		c2 30		rep #$30	                REP #$30        ; set A&X long
.394974		22 f5 44 39	jsl $3944f5	                JSL FATFORCLUSTER12
.394978		8a		txa		                TXA                             ; Check to see if the index is odd or even
.394979		89 01 00	bit #$0001	                BIT #1
.39497c		d0 08		bne $394986	                BNE is_odd
.39497e		bd 00 a5	lda $38a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394981		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.394984		80 06		bra $39498c	                BRA save_update
.394986		bd 00 a5	lda $38a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.394989		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.39498c		9d 00 a5	sta $38a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.39498f		22 14 49 39	jsl $394914	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394993		b0 0b		bcs $3949a0	                BCS ret_success
.394995						ret_failure
.394995		e2 20		sep #$20	                SEP #$20        ; set A short
.394997		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.394999		85 0e		sta $032e	                STA DOS_STATUS
.39499b		28		plp		                PLP
.39499c		2b		pld		                PLD
.39499d		ab		plb		                PLB
.39499e		18		clc		                CLC
.39499f		6b		rtl		                RTL
.3949a0						ret_success
.3949a0		e2 20		sep #$20	                SEP #$20        ; set A short
.3949a2		64 0e		stz $032e	                STZ DOS_STATUS
.3949a4		28		plp		                PLP
.3949a5		2b		pld		                PLD
.3949a6		ab		plb		                PLB
.3949a7		38		sec		                SEC
.3949a8		6b		rtl		                RTL
.3949a9						DELCLUSTER32
.3949a9		8b		phb		                PHB
.3949aa		0b		phd		                PHD
.3949ab		08		php		                PHP
.3949ac		c2 30		rep #$30	                REP #$30        ; set A&X long
.3949ae		48		pha		                PHA             ; begin setdbr macro
.3949af		08		php		                PHP
.3949b0		e2 20		sep #$20	                SEP #$20        ; set A short
.3949b2		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3949b4		48		pha		                PHA
.3949b5		ab		plb		                PLB
.3949b6		28		plp		                PLP
.3949b7		68		pla		                PLA             ; end setdbr macro
.3949b8		48		pha		                PHA             ; begin setdp macro
.3949b9		08		php		                PHP
.3949ba		c2 20		rep #$20	                REP #$20        ; set A long
.3949bc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949bf		5b		tcd		                TCD
.3949c0		28		plp		                PLP
.3949c1		68		pla		                PLA             ; end setdp macro
.3949c2		22 5d 45 39	jsl $39455d	                JSL FATFORCLUSTER32
.3949c6		a9 00 00	lda #$0000	                LDA #0
.3949c9		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.3949cc		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.3949cf		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.3949d3		b0 0b		bcs $3949e0	                BCS ret_success
.3949d5						ret_failure
.3949d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3949d7		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.3949d9		85 0e		sta $032e	                STA DOS_STATUS
.3949db		28		plp		                PLP
.3949dc		2b		pld		                PLD
.3949dd		ab		plb		                PLB
.3949de		18		clc		                CLC
.3949df		6b		rtl		                RTL
.3949e0						ret_success
.3949e0		e2 20		sep #$20	                SEP #$20        ; set A short
.3949e2		64 0e		stz $032e	                STZ DOS_STATUS
.3949e4		28		plp		                PLP
.3949e5		2b		pld		                PLD
.3949e6		ab		plb		                PLB
.3949e7		38		sec		                SEC
.3949e8		6b		rtl		                RTL
.3949e9						DOS_APPENDCLUS
.3949e9		8b		phb		                PHB
.3949ea		0b		phd		                PHD
.3949eb		08		php		                PHP
.3949ec		48		pha		                PHA             ; begin setdbr macro
.3949ed		08		php		                PHP
.3949ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3949f0		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3949f2		48		pha		                PHA
.3949f3		ab		plb		                PLB
.3949f4		28		plp		                PLP
.3949f5		68		pla		                PLA             ; end setdbr macro
.3949f6		48		pha		                PHA             ; begin setdp macro
.3949f7		08		php		                PHP
.3949f8		c2 20		rep #$20	                REP #$20        ; set A long
.3949fa		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3949fd		5b		tcd		                TCD
.3949fe		28		plp		                PLP
.3949ff		68		pla		                PLA             ; end setdp macro
.394a00		c2 30		rep #$30	                REP #$30        ; set A&X long
.394a02		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.394a04		48		pha		                PHA
.394a05		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394a07		48		pha		                PHA
.394a08		22 e1 46 39	jsl $3946e1	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.394a0c		b0 09		bcs $394a17	                BCS save_cluster                ; If we got a cluster, write the data to it
.394a0e		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.394a0f		85 10		sta $0330	                STA DOS_CLUS_ID
.394a11		68		pla		                PLA
.394a12		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a14		82 7d 00	brl $394a94	                BRL pass_failure                ; Pass the failure back up the chain
.394a17		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.394a19		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394a1c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394a1e		8d 38 a0	sta $38a038	                STA DOS_NEW_CLUSTER+2
.394a21		22 f1 41 39	jsl $3941f1	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.394a25		90 e7		bcc $394a0e	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.394a27		68		pla		                PLA                             ; Restore the cluster of the file
.394a28		85 10		sta $0330	                STA DOS_CLUS_ID
.394a2a		68		pla		                PLA
.394a2b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394a2d		22 c8 45 39	jsl $3945c8	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.394a31		b0 fa		bcs $394a2d	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.394a33		e2 20		sep #$20	                SEP #$20        ; set A short
.394a35		af 01 a0 38	lda $38a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.394a39		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.394a3b		d0 3d		bne $394a7a	                BNE fat32                       ; No: assume it's FAT32
.394a3d						fat12
.394a3d		c2 20		rep #$20	                REP #$20        ; set A long
.394a3f		22 82 44 39	jsl $394482	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.394a43		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.394a45		89 01 00	bit #$0001	                BIT #1
.394a48		d0 11		bne $394a5b	                BNE is_odd
.394a4a		ad 36 a0	lda $38a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.394a4d		29 ff 0f	and #$0fff	                AND #$0FFF
.394a50		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394a53		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394a56		29 00 f0	and #$f000	                AND #$F000
.394a59		80 10		bra $394a6b	                BRA update_fat12
.394a5b		ad 36 a0	lda $38a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.394a5e		0a		asl a		                ASL A
.394a5f		0a		asl a		                ASL A
.394a60		0a		asl a		                ASL A
.394a61		0a		asl a		                ASL A
.394a62		8d 36 a0	sta $38a036	                STA DOS_NEW_CLUSTER
.394a65		bd 00 a5	lda $38a500,x	                LDA DOS_FAT_SECTORS,X
.394a68		29 0f 00	and #$000f	                AND #$000F
.394a6b		0d 36 a0	ora $38a036	update_fat12    ORA DOS_NEW_CLUSTER
.394a6e		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394a71		22 14 49 39	jsl $394914	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.394a75		b0 22		bcs $394a99	                BCS ret_success
.394a77		82 1a 00	brl $394a94	                BRL pass_failure
.394a7a						fat32
.394a7a		c2 20		rep #$20	                REP #$20        ; set A long
.394a7c		ad 36 a0	lda $38a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.394a7f		9d 00 a5	sta $38a500,x	                STA DOS_FAT_SECTORS,X
.394a82		ad 38 a0	lda $38a038	                LDA DOS_NEW_CLUSTER+2
.394a85		9d 02 a5	sta $38a502,x	                STA DOS_FAT_SECTORS+2,X
.394a88		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.394a8c		b0 0b		bcs $394a99	                BCS ret_success
.394a8e		e2 20		sep #$20	                SEP #$20        ; set A short
.394a90		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.394a92		85 0e		sta $032e	                STA DOS_STATUS
.394a94		28		plp		pass_failure    PLP
.394a95		2b		pld		                PLD
.394a96		ab		plb		                PLB
.394a97		18		clc		                CLC
.394a98		6b		rtl		                RTL
.394a99						ret_success
.394a99		e2 20		sep #$20	                SEP #$20        ; set A short
.394a9b		64 0e		stz $032e	                STZ DOS_STATUS
.394a9d		28		plp		                PLP
.394a9e		2b		pld		                PLD
.394a9f		ab		plb		                PLB
.394aa0		38		sec		                SEC
.394aa1		6b		rtl		                RTL
.394aa2						BCD2BIN
.394aa2		8b		phb		                PHB
.394aa3		0b		phd		                PHD
.394aa4		08		php		                PHP
.394aa5		48		pha		                PHA             ; begin setdbr macro
.394aa6		08		php		                PHP
.394aa7		e2 20		sep #$20	                SEP #$20        ; set A short
.394aa9		a9 00		lda #$00	                LDA #0
.394aab		48		pha		                PHA
.394aac		ab		plb		                PLB
.394aad		28		plp		                PLP
.394aae		68		pla		                PLA             ; end setdbr macro
.394aaf		48		pha		                PHA             ; begin setdp macro
.394ab0		08		php		                PHP
.394ab1		c2 20		rep #$20	                REP #$20        ; set A long
.394ab3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ab6		5b		tcd		                TCD
.394ab7		28		plp		                PLP
.394ab8		68		pla		                PLA             ; end setdp macro
.394ab9		c2 30		rep #$30	                REP #$30        ; set A&X long
.394abb		85 28		sta $0348	                STA DOS_TEMP
.394abd		29 0f 00	and #$000f	                AND #$000F
.394ac0		85 2a		sta $034a	                STA DOS_TEMP+2
.394ac2		a5 28		lda $0348	                LDA DOS_TEMP
.394ac4		4a		lsr a		                LSR A
.394ac5		4a		lsr a		                LSR A
.394ac6		4a		lsr a		                LSR A
.394ac7		4a		lsr a		                LSR A
.394ac8		85 28		sta $0348	                STA DOS_TEMP
.394aca		29 0f 00	and #$000f	                AND #$000F
.394acd		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394ad1		a9 0a 00	lda #$000a	                LDA #10
.394ad4		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394ad8		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394adc		18		clc		                CLC
.394add		65 2a		adc $034a	                ADC DOS_TEMP+2
.394adf		85 2a		sta $034a	                STA DOS_TEMP+2
.394ae1		a5 28		lda $0348	                LDA DOS_TEMP
.394ae3		4a		lsr a		                LSR A
.394ae4		4a		lsr a		                LSR A
.394ae5		4a		lsr a		                LSR A
.394ae6		4a		lsr a		                LSR A
.394ae7		85 28		sta $0348	                STA DOS_TEMP
.394ae9		29 0f 00	and #$000f	                AND #$000F
.394aec		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394af0		a9 64 00	lda #$0064	                LDA #100
.394af3		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394af7		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394afb		18		clc		                CLC
.394afc		65 2a		adc $034a	                ADC DOS_TEMP+2
.394afe		85 2a		sta $034a	                STA DOS_TEMP+2
.394b00		a5 28		lda $0348	                LDA DOS_TEMP
.394b02		4a		lsr a		                LSR A
.394b03		4a		lsr a		                LSR A
.394b04		4a		lsr a		                LSR A
.394b05		4a		lsr a		                LSR A
.394b06		29 0f 00	and #$000f	                AND #$000F
.394b09		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.394b0d		a9 e8 03	lda #$03e8	                LDA #1000
.394b10		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.394b14		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.394b18		18		clc		                CLC
.394b19		65 2a		adc $034a	                ADC DOS_TEMP+2
.394b1b		28		plp		                PLP
.394b1c		2b		pld		                PLD
.394b1d		ab		plb		                PLB
.394b1e		6b		rtl		                RTL
.394b1f						DOS_RTCCREATE
.394b1f		8b		phb		                PHB
.394b20		0b		phd		                PHD
.394b21		08		php		                PHP
.394b22		48		pha		                PHA             ; begin setdbr macro
.394b23		08		php		                PHP
.394b24		e2 20		sep #$20	                SEP #$20        ; set A short
.394b26		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394b28		48		pha		                PHA
.394b29		ab		plb		                PLB
.394b2a		28		plp		                PLP
.394b2b		68		pla		                PLA             ; end setdbr macro
.394b2c		48		pha		                PHA             ; begin setdp macro
.394b2d		08		php		                PHP
.394b2e		c2 20		rep #$20	                REP #$20        ; set A long
.394b30		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394b33		5b		tcd		                TCD
.394b34		28		plp		                PLP
.394b35		68		pla		                PLA             ; end setdp macro
.394b36		c2 10		rep #$10	                REP #$10        ; set X long
.394b38		e2 20		sep #$20	                SEP #$20        ; set A short
.394b3a		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.394b3e		09 08		ora #$08	                ORA #%00001000
.394b40		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394b44		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.394b48		85 29		sta $0349	                STA DOS_TEMP+1
.394b4a		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.394b4e		85 28		sta $0348	                STA DOS_TEMP
.394b50		c2 20		rep #$20	                REP #$20        ; set A long
.394b52		a5 28		lda $0348	                LDA DOS_TEMP
.394b54		22 a2 4a 39	jsl $394aa2	                JSL BCD2BIN                 ; Convert it to binary
.394b58		85 28		sta $0348	                STA DOS_TEMP
.394b5a		38		sec		                SEC                         ; Year is relative to 1980
.394b5b		e9 bc 07	sbc #$07bc	                SBC #1980
.394b5e		c2 20		rep #$20	                REP #$20        ; set A long
.394b60		0a		asl a		                ASL A
.394b61		0a		asl a		                ASL A
.394b62		0a		asl a		                ASL A
.394b63		0a		asl a		                ASL A
.394b64		0a		asl a		                ASL A
.394b65		0a		asl a		                ASL A
.394b66		0a		asl a		                ASL A
.394b67		0a		asl a		                ASL A
.394b68		0a		asl a		                ASL A
.394b69		29 00 fe	and #$fe00	                AND #$FE00
.394b6c		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394b6f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b71		e2 20		sep #$20	                SEP #$20        ; set A short
.394b73		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.394b77		c2 20		rep #$20	                REP #$20        ; set A long
.394b79		29 ff 00	and #$00ff	                AND #$00FF
.394b7c		22 a2 4a 39	jsl $394aa2	                JSL BCD2BIN                 ; Convert it to binary
.394b80		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.394b83		0a		asl a		                ASL A
.394b84		0a		asl a		                ASL A
.394b85		0a		asl a		                ASL A
.394b86		0a		asl a		                ASL A
.394b87		0a		asl a		                ASL A
.394b88		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.394b8b		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394b8e		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394b90		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394b92		e2 20		sep #$20	                SEP #$20        ; set A short
.394b94		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.394b98		c2 20		rep #$20	                REP #$20        ; set A long
.394b9a		29 ff 00	and #$00ff	                AND #$00FF
.394b9d		22 a2 4a 39	jsl $394aa2	                JSL BCD2BIN                 ; Convert it to binary
.394ba1		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.394ba4		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.394ba7		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394ba9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394bab		e2 20		sep #$20	                SEP #$20        ; set A short
.394bad		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.394bb1		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.394bb3		c2 20		rep #$20	                REP #$20        ; set A long
.394bb5		29 ff 00	and #$00ff	                AND #$00FF
.394bb8		22 a2 4a 39	jsl $394aa2	                JSL BCD2BIN                 ; Convert it to binary
.394bbc		c2 20		rep #$20	                REP #$20        ; set A long
.394bbe		0a		asl a		                ASL A
.394bbf		0a		asl a		                ASL A
.394bc0		0a		asl a		                ASL A
.394bc1		0a		asl a		                ASL A
.394bc2		0a		asl a		                ASL A
.394bc3		0a		asl a		                ASL A
.394bc4		0a		asl a		                ASL A
.394bc5		0a		asl a		                ASL A
.394bc6		0a		asl a		                ASL A
.394bc7		0a		asl a		                ASL A
.394bc8		0a		asl a		                ASL A
.394bc9		29 00 f8	and #$f800	                AND #$F800
.394bcc		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394bcf		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394bd1		e2 20		sep #$20	                SEP #$20        ; set A short
.394bd3		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.394bd7		c2 20		rep #$20	                REP #$20        ; set A long
.394bd9		29 ff 00	and #$00ff	                AND #$00FF
.394bdc		22 a2 4a 39	jsl $394aa2	                JSL BCD2BIN                 ; Convert it to binary
.394be0		c2 20		rep #$20	                REP #$20        ; set A long
.394be2		0a		asl a		                ASL A
.394be3		0a		asl a		                ASL A
.394be4		0a		asl a		                ASL A
.394be5		0a		asl a		                ASL A
.394be6		0a		asl a		                ASL A
.394be7		29 e0 07	and #$07e0	                AND #$07E0
.394bea		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394bed		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394bef		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394bf1		e2 20		sep #$20	                SEP #$20        ; set A short
.394bf3		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.394bf7		c2 20		rep #$20	                REP #$20        ; set A long
.394bf9		29 ff 00	and #$00ff	                AND #$00FF
.394bfc		22 a2 4a 39	jsl $394aa2	                JSL BCD2BIN                 ; Convert it to binary
.394c00		c2 20		rep #$20	                REP #$20        ; set A long
.394c02		29 1f 00	and #$001f	                AND #$001F
.394c05		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.394c08		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394c0a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c0c		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.394c10		29 f7 00	and #$00f7	                AND #%11110111
.394c13		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.394c17		28		plp		                PLP
.394c18		2b		pld		                PLD
.394c19		ab		plb		                PLB
.394c1a		6b		rtl		                RTL
.394c1b						DOS_CREATE
.394c1b		8b		phb		                PHB
.394c1c		0b		phd		                PHD
.394c1d		08		php		                PHP
.394c1e		48		pha		                PHA             ; begin setdbr macro
.394c1f		08		php		                PHP
.394c20		e2 20		sep #$20	                SEP #$20        ; set A short
.394c22		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394c24		48		pha		                PHA
.394c25		ab		plb		                PLB
.394c26		28		plp		                PLP
.394c27		68		pla		                PLA             ; end setdbr macro
.394c28		48		pha		                PHA             ; begin setdp macro
.394c29		08		php		                PHP
.394c2a		c2 20		rep #$20	                REP #$20        ; set A long
.394c2c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394c2f		5b		tcd		                TCD
.394c30		28		plp		                PLP
.394c31		68		pla		                PLA             ; end setdp macro
.394c32		c2 30		rep #$30	                REP #$30        ; set A&X long
.394c34		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.394c37		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c39		85 28		sta $0348	                STA DOS_TEMP
.394c3b		c8		iny		                INY
.394c3c		c8		iny		                INY
.394c3d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c3f		85 2a		sta $034a	                STA DOS_TEMP+2
.394c41		e2 20		sep #$20	                SEP #$20        ; set A short
.394c43		a0 00 00	ldy #$0000	                LDY #0
.394c46		a2 00 00	ldx #$0000	                LDX #0
.394c49		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.394c4b		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.394c4d		f0 04		beq $394c53	                BEQ find_file                   ; If it's NULL, we're done
.394c4f		e8		inx		                INX
.394c50		c8		iny		                INY
.394c51		80 f6		bra $394c49	                BRA path_loop
.394c53		22 02 43 39	jsl $394302	find_file       JSL DOS_PARSE_PATH
.394c57		22 9a 43 39	jsl $39439a	                JSL DOS_FINDFILE
.394c5b		90 07		bcc $394c64	                BCC set_device
.394c5d		e2 20		sep #$20	                SEP #$20        ; set A short
.394c5f		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.394c61		82 d2 00	brl $394d36	                BRL ret_failure
.394c64						set_device
.394c64		e2 20		sep #$20	                SEP #$20        ; set A short
.394c66		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394c69		a5 01		lda $0321	                LDA BIOS_DEV
.394c6b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c6d						validate_name
.394c6d		22 e1 46 39	jsl $3946e1	                JSL DOS_FREECLUS
.394c71		b0 03		bcs $394c76	                BCS save_data
.394c73		82 c4 00	brl $394d3a	                BRL pass_failure
.394c76						save_data
.394c76		c2 20		rep #$20	                REP #$20        ; set A long
.394c78		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.394c7b		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.394c7d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c7f		c8		iny		                INY
.394c80		c8		iny		                INY
.394c81		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394c83		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394c85		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.394c88		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c8a		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394c8c		c8		iny		                INY
.394c8d		c8		iny		                INY
.394c8e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394c90		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394c92		22 f1 41 39	jsl $3941f1	                JSL DOS_PUTCLUSTER
.394c96		b0 00		bcs $394c98	                BCS find_dir
.394c98						find_dir
.394c98		c2 20		rep #$20	                REP #$20        ; set A long
.394c9a		22 2c 3d 39	jsl $393d2c	                JSL DOS_DIRFINDFREE
.394c9e		b0 1a		bcs $394cba	                BCS set_entry
.394ca0		c2 20		rep #$20	                REP #$20        ; set A long
.394ca2		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.394ca5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.394ca7		85 10		sta $0330	                STA DOS_CLUS_ID
.394ca9		c8		iny		                INY
.394caa		c8		iny		                INY
.394cab		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394cad		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394caf		22 a9 49 39	jsl $3949a9	                JSL DELCLUSTER32                ; Delete the cluster
.394cb3		e2 20		sep #$20	                SEP #$20        ; set A short
.394cb5		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.394cb7		82 7c 00	brl $394d36	                BRL ret_failure
.394cba						set_entry
.394cba		e2 20		sep #$20	                SEP #$20        ; set A short
.394cbc		a0 00 00	ldy #$0000	                LDY #0
.394cbf		a9 00		lda #$00	                LDA #0                          ; NULL
.394cc1		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.394cc3		c8		iny		                INY
.394cc4		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.394cc7		d0 f8		bne $394cc1	                BNE copy_dir_loop
.394cc9		a0 00 00	ldy #$0000	                LDY #0
.394ccc		b9 3a a0	lda $38a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.394ccf		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394cd1		c8		iny		                INY
.394cd2		c0 0b 00	cpy #$000b	                CPY #11
.394cd5		d0 f5		bne $394ccc	                BNE name_loop
.394cd7		c2 20		rep #$20	                REP #$20        ; set A long
.394cd9		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.394cdc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394cde		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.394ce1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394ce3		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.394ce6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394ce8		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.394ceb		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394ced		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.394cf0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394cf2		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.394cf5		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394cf7		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394cfa		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394cfc		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394cff		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394d01		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.394d04		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.394d07		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d09		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.394d0c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394d0e		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.394d11		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d13		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.394d16		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394d18		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.394d1b		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394d1d		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.394d20		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d22		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.394d25		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394d27		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.394d2a		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.394d2c		c2 20		rep #$20	                REP #$20        ; set A long
.394d2e		22 ea 3d 39	jsl $393dea	                JSL DOS_DIRWRITE
.394d32		b0 0b		bcs $394d3f	                BCS ret_success
.394d34		80 04		bra $394d3a	                BRA pass_failure
.394d36						ret_failure
.394d36		e2 20		sep #$20	                SEP #$20        ; set A short
.394d38		85 0e		sta $032e	                STA DOS_STATUS
.394d3a		28		plp		pass_failure    PLP
.394d3b		2b		pld		                PLD
.394d3c		ab		plb		                PLB
.394d3d		18		clc		                CLC
.394d3e		6b		rtl		                RTL
.394d3f						ret_success
.394d3f		e2 20		sep #$20	                SEP #$20        ; set A short
.394d41		64 0e		stz $032e	                STZ DOS_STATUS
.394d43		28		plp		                PLP
.394d44		2b		pld		                PLD
.394d45		ab		plb		                PLB
.394d46		38		sec		                SEC
.394d47		6b		rtl		                RTL
.394d48						DOS_COPYPATH
.394d48		da		phx		                PHX
.394d49		5a		phy		                PHY
.394d4a		8b		phb		                PHB
.394d4b		0b		phd		                PHD
.394d4c		08		php		                PHP
.394d4d		48		pha		                PHA             ; begin setdbr macro
.394d4e		08		php		                PHP
.394d4f		e2 20		sep #$20	                SEP #$20        ; set A short
.394d51		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394d53		48		pha		                PHA
.394d54		ab		plb		                PLB
.394d55		28		plp		                PLP
.394d56		68		pla		                PLA             ; end setdbr macro
.394d57		48		pha		                PHA             ; begin setdp macro
.394d58		08		php		                PHP
.394d59		c2 20		rep #$20	                REP #$20        ; set A long
.394d5b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394d5e		5b		tcd		                TCD
.394d5f		28		plp		                PLP
.394d60		68		pla		                PLA             ; end setdp macro
.394d61		c2 30		rep #$30	                REP #$30        ; set A&X long
.394d63		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.394d66		a2 00 00	ldx #$0000	                LDX #0
.394d69		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.394d6b		e8		inx		                INX
.394d6c		e8		inx		                INX
.394d6d		e0 00 01	cpx #$0100	                CPX #256
.394d70		d0 f7		bne $394d69	                BNE clr_loop
.394d72		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.394d74		d0 04		bne $394d7a	                BNE get_path            ; No: attempt to fetch the path
.394d76		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.394d78		f0 27		beq $394da1	                BEQ done                ; Yes: return an empty buffer
.394d7a		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.394d7d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d7f		85 28		sta $0348	                STA DOS_TEMP
.394d81		c8		iny		                INY
.394d82		c8		iny		                INY
.394d83		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394d85		85 2a		sta $034a	                STA DOS_TEMP+2
.394d87		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.394d89		d0 04		bne $394d8f	                BNE start_copy          ; No: start copying it
.394d8b		a5 2a		lda $034a	                LDA DOS_TEMP+2
.394d8d		f0 12		beq $394da1	                BEQ done                ; Yes: return an empty buffer
.394d8f						start_copy
.394d8f		e2 20		sep #$20	                SEP #$20        ; set A short
.394d91		a2 00 00	ldx #$0000	                LDX #0
.394d94		a0 00 00	ldy #$0000	                LDY #0
.394d97		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.394d99		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.394d9b		f0 04		beq $394da1	                BEQ done
.394d9d		e8		inx		                INX
.394d9e		c8		iny		                INY
.394d9f		d0 f6		bne $394d97	                BNE loop
.394da1		28		plp		done            PLP
.394da2		2b		pld		                PLD
.394da3		ab		plb		                PLB
.394da4		7a		ply		                PLY
.394da5		fa		plx		                PLX
.394da6		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.394da7						DOS_TEST
.394da7		8b		phb		                PHB
.394da8		0b		phd		                PHD
.394da9		08		php		                PHP
.394daa		48		pha		                PHA             ; begin setdbr macro
.394dab		08		php		                PHP
.394dac		e2 20		sep #$20	                SEP #$20        ; set A short
.394dae		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394db0		48		pha		                PHA
.394db1		ab		plb		                PLB
.394db2		28		plp		                PLP
.394db3		68		pla		                PLA             ; end setdbr macro
.394db4		48		pha		                PHA             ; begin setdp macro
.394db5		08		php		                PHP
.394db6		c2 20		rep #$20	                REP #$20        ; set A long
.394db8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394dbb		5b		tcd		                TCD
.394dbc		28		plp		                PLP
.394dbd		68		pla		                PLA             ; end setdp macro
.394dbe		c2 30		rep #$30	                REP #$30        ; set A&X long
.394dc0		a9 e6 4d	lda #$4de6	                LDA #<>src_file
.394dc3		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.394dc7		a9 39 00	lda #$0039	                LDA #`src_file
.394dca		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.394dce		a9 f3 4d	lda #$4df3	                LDA #<>dst_file
.394dd1		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.394dd5		a9 39 00	lda #$0039	                LDA #`dst_file
.394dd8		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.394ddc		22 18 56 39	jsl $395618	                JSL IF_COPY
.394de0		b0 00		bcs $394de2	                BCS done
.394de2		28		plp		done            PLP
.394de3		2b		pld		                PLD
.394de4		ab		plb		                PLB
.394de5		6b		rtl		                RTL
>394de6		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>394dee		2e 62 61 73 00
>394df3		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>394dfb		32 2e 62 61 73 00
.394e01						IF_OPEN
.394e01		da		phx		                PHX
.394e02		5a		phy		                PHY
.394e03		0b		phd		                PHD
.394e04		8b		phb		                PHB
.394e05		08		php		                PHP
.394e06		48		pha		                PHA             ; begin setdbr macro
.394e07		08		php		                PHP
.394e08		e2 20		sep #$20	                SEP #$20        ; set A short
.394e0a		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e0c		48		pha		                PHA
.394e0d		ab		plb		                PLB
.394e0e		28		plp		                PLP
.394e0f		68		pla		                PLA             ; end setdbr macro
.394e10		48		pha		                PHA             ; begin setdp macro
.394e11		08		php		                PHP
.394e12		c2 20		rep #$20	                REP #$20        ; set A long
.394e14		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394e17		5b		tcd		                TCD
.394e18		28		plp		                PLP
.394e19		68		pla		                PLA             ; end setdp macro
.394e1a		e2 20		sep #$20	                SEP #$20        ; set A short
.394e1c		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.394e1f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e21		89 20		bit #$20	                BIT #FD_STAT_OPEN
.394e23		f0 05		beq $394e2a	                BEQ ok_to_open
.394e25		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.394e27		82 87 06	brl $3954b1	                BRL IF_FAILURE
.394e2a		22 48 4d 39	jsl $394d48	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.394e2e		22 9a 43 39	jsl $39439a	                JSL DOS_FINDFILE                ; Attempt to find the file
.394e32		b0 03		bcs $394e37	                BCS is_found                    ; If OK: we found the file
.394e34		82 7e 06	brl $3954b5	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.394e37						is_found
.394e37		e2 20		sep #$20	                SEP #$20        ; set A short
.394e39		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.394e3c		a5 01		lda $0321	                LDA BIOS_DEV
.394e3e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e40		c2 20		rep #$20	                REP #$20        ; set A long
.394e42		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.394e45		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e47		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394e49		c8		iny		                INY
.394e4a		c8		iny		                INY
.394e4b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394e4d		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394e4f		22 b4 41 39	jsl $3941b4	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.394e53		b0 03		bcs $394e58	                BCS read_cluster
.394e55		82 5d 06	brl $3954b5	                BRL IF_PASSFAILURE
.394e58		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.394e5b		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394e5d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e5f		c8		iny		                INY
.394e60		c8		iny		                INY
.394e61		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394e63		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e65		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.394e68		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394e6a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e6c		c8		iny		                INY
.394e6d		c8		iny		                INY
.394e6e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394e70		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e72		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.394e75		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394e77		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.394e7a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e7c		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.394e7f		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.394e81		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.394e84		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e86		e2 20		sep #$20	                SEP #$20        ; set A short
.394e88		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.394e8b		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.394e8d		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.394e8f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394e91		82 28 06	brl $3954bc	                BRL IF_SUCCESS
.394e94						IF_CREATE
.394e94		da		phx		                PHX
.394e95		5a		phy		                PHY
.394e96		0b		phd		                PHD
.394e97		8b		phb		                PHB
.394e98		08		php		                PHP
.394e99		48		pha		                PHA             ; begin setdbr macro
.394e9a		08		php		                PHP
.394e9b		e2 20		sep #$20	                SEP #$20        ; set A short
.394e9d		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394e9f		48		pha		                PHA
.394ea0		ab		plb		                PLB
.394ea1		28		plp		                PLP
.394ea2		68		pla		                PLA             ; end setdbr macro
.394ea3		48		pha		                PHA             ; begin setdp macro
.394ea4		08		php		                PHP
.394ea5		c2 20		rep #$20	                REP #$20        ; set A long
.394ea7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394eaa		5b		tcd		                TCD
.394eab		28		plp		                PLP
.394eac		68		pla		                PLA             ; end setdp macro
.394ead		22 1b 4c 39	jsl $394c1b	                JSL DOS_CREATE                  ; Attempt to create the file
.394eb1		90 18		bcc $394ecb	                BCC pass_failure                ; If it fails: pass the failure up the chain
.394eb3		c2 30		rep #$30	                REP #$30        ; set A&X long
.394eb5		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.394eb8		a9 00 00	lda #$0000	                LDA #0
.394ebb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ebd		c8		iny		                INY
.394ebe		c8		iny		                INY
.394ebf		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394ec1		e2 20		sep #$20	                SEP #$20        ; set A short
.394ec3		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.394ec6		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.394ec8		82 f1 05	brl $3954bc	                BRL IF_SUCCESS
.394ecb		82 e3 05	brl $3954b1	pass_failure    BRL IF_FAILURE
.394ece						IF_CLOSE
.394ece		da		phx		                PHX
.394ecf		5a		phy		                PHY
.394ed0		0b		phd		                PHD
.394ed1		8b		phb		                PHB
.394ed2		08		php		                PHP
.394ed3		48		pha		                PHA             ; begin setdbr macro
.394ed4		08		php		                PHP
.394ed5		e2 20		sep #$20	                SEP #$20        ; set A short
.394ed7		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394ed9		48		pha		                PHA
.394eda		ab		plb		                PLB
.394edb		28		plp		                PLP
.394edc		68		pla		                PLA             ; end setdbr macro
.394edd		48		pha		                PHA             ; begin setdp macro
.394ede		08		php		                PHP
.394edf		c2 20		rep #$20	                REP #$20        ; set A long
.394ee1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394ee4		5b		tcd		                TCD
.394ee5		28		plp		                PLP
.394ee6		68		pla		                PLA             ; end setdp macro
.394ee7		e2 20		sep #$20	                SEP #$20        ; set A short
.394ee9		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.394eec		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394eee		89 02		bit #$02	                BIT #FD_STAT_WRITE
.394ef0		f0 09		beq $394efb	                BEQ set_flag                    ; No, just mark it closed
.394ef2		22 67 4f 39	jsl $394f67	                JSL IF_WRITE                    ; Attempt to write the cluster
.394ef6		b0 03		bcs $394efb	                BCS set_flag
.394ef8		82 ba 05	brl $3954b5	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.394efb		22 b6 55 39	jsl $3955b6	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.394eff		82 ba 05	brl $3954bc	                BRL IF_SUCCESS
.394f02						IF_READ
.394f02		da		phx		                PHX
.394f03		5a		phy		                PHY
.394f04		0b		phd		                PHD
.394f05		8b		phb		                PHB
.394f06		08		php		                PHP
.394f07		48		pha		                PHA             ; begin setdbr macro
.394f08		08		php		                PHP
.394f09		e2 20		sep #$20	                SEP #$20        ; set A short
.394f0b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f0d		48		pha		                PHA
.394f0e		ab		plb		                PLB
.394f0f		28		plp		                PLP
.394f10		68		pla		                PLA             ; end setdbr macro
.394f11		48		pha		                PHA             ; begin setdp macro
.394f12		08		php		                PHP
.394f13		c2 20		rep #$20	                REP #$20        ; set A long
.394f15		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f18		5b		tcd		                TCD
.394f19		28		plp		                PLP
.394f1a		68		pla		                PLA             ; end setdp macro
.394f1b		c2 10		rep #$10	                REP #$10        ; set X long
.394f1d		e2 20		sep #$20	                SEP #$20        ; set A short
.394f1f						get_dev
.394f1f		e2 20		sep #$20	                SEP #$20        ; set A short
.394f21		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394f24		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f26		85 01		sta $0321	                STA BIOS_DEV
.394f28		22 1c 3f 39	jsl $393f1c	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.394f2c		c2 20		rep #$20	                REP #$20        ; set A long
.394f2e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394f31		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f33		85 10		sta $0330	                STA DOS_CLUS_ID
.394f35		c8		iny		                INY
.394f36		c8		iny		                INY
.394f37		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f39		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394f3b		22 c8 45 39	jsl $3945c8	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.394f3f		90 13		bcc $394f54	                BCC pass_failure                ; If not OK: pass the failure up the chain
.394f41		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394f44		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f46		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394f48		c8		iny		                INY
.394f49		c8		iny		                INY
.394f4a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f4c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394f4e		22 b4 41 39	jsl $3941b4	                JSL DOS_GETCLUSTER              ; Get the cluster
.394f52		b0 03		bcs $394f57	                BCS ret_success                 ; If ok: return success
.394f54						pass_failure
.394f54		82 5e 05	brl $3954b5	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394f57		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.394f5a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394f5c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f5e		c8		iny		                INY
.394f5f		c8		iny		                INY
.394f60		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.394f62		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.394f64		82 55 05	brl $3954bc	                BRL IF_SUCCESS
.394f67						IF_WRITE
.394f67		da		phx		                PHX
.394f68		5a		phy		                PHY
.394f69		0b		phd		                PHD
.394f6a		8b		phb		                PHB
.394f6b		08		php		                PHP
.394f6c		48		pha		                PHA             ; begin setdbr macro
.394f6d		08		php		                PHP
.394f6e		e2 20		sep #$20	                SEP #$20        ; set A short
.394f70		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394f72		48		pha		                PHA
.394f73		ab		plb		                PLB
.394f74		28		plp		                PLP
.394f75		68		pla		                PLA             ; end setdbr macro
.394f76		48		pha		                PHA             ; begin setdp macro
.394f77		08		php		                PHP
.394f78		c2 20		rep #$20	                REP #$20        ; set A long
.394f7a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394f7d		5b		tcd		                TCD
.394f7e		28		plp		                PLP
.394f7f		68		pla		                PLA             ; end setdp macro
.394f80		c2 10		rep #$10	                REP #$10        ; set X long
.394f82		e2 20		sep #$20	                SEP #$20        ; set A short
.394f84		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.394f87		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f89		85 01		sta $0321	                STA BIOS_DEV
.394f8b		22 1c 3f 39	jsl $393f1c	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.394f8f		c2 20		rep #$20	                REP #$20        ; set A long
.394f91		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.394f94		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f96		85 1c		sta $033c	                STA DOS_BUFF_PTR
.394f98		c8		iny		                INY
.394f99		c8		iny		                INY
.394f9a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394f9c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.394f9e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.394fa1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fa3		85 10		sta $0330	                STA DOS_CLUS_ID
.394fa5		c8		iny		                INY
.394fa6		c8		iny		                INY
.394fa7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fa9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394fab		d0 1a		bne $394fc7	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.394fad		a5 10		lda $0330	                LDA DOS_CLUS_ID
.394faf		d0 16		bne $394fc7	                BNE rewrite_cluster
.394fb1		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.394fb4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fb6		85 10		sta $0330	                STA DOS_CLUS_ID
.394fb8		c8		iny		                INY
.394fb9		c8		iny		                INY
.394fba		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.394fbc		85 12		sta $0332	                STA DOS_CLUS_ID+2
.394fbe		22 e9 49 39	jsl $3949e9	                JSL DOS_APPENDCLUS              ; Append the cluster
.394fc2		b0 0c		bcs $394fd0	                BCS ret_success                 ; If OK: return success
.394fc4		82 ee 04	brl $3954b5	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394fc7		22 f1 41 39	jsl $3941f1	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.394fcb		b0 03		bcs $394fd0	                BCS ret_success                 ; If ok: return success
.394fcd		82 e5 04	brl $3954b5	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.394fd0		82 e9 04	brl $3954bc	ret_success     BRL IF_SUCCESS
.394fd3						IF_DIROPEN
.394fd3		da		phx		                PHX
.394fd4		5a		phy		                PHY
.394fd5		0b		phd		                PHD
.394fd6		8b		phb		                PHB
.394fd7		08		php		                PHP
.394fd8		48		pha		                PHA             ; begin setdbr macro
.394fd9		08		php		                PHP
.394fda		e2 20		sep #$20	                SEP #$20        ; set A short
.394fdc		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.394fde		48		pha		                PHA
.394fdf		ab		plb		                PLB
.394fe0		28		plp		                PLP
.394fe1		68		pla		                PLA             ; end setdbr macro
.394fe2		48		pha		                PHA             ; begin setdp macro
.394fe3		08		php		                PHP
.394fe4		c2 20		rep #$20	                REP #$20        ; set A long
.394fe6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.394fe9		5b		tcd		                TCD
.394fea		28		plp		                PLP
.394feb		68		pla		                PLA             ; end setdp macro
.394fec		c2 30		rep #$30	                REP #$30        ; set A&X long
.394fee		22 48 4d 39	jsl $394d48	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.394ff2		22 02 43 39	jsl $394302	                JSL DOS_PARSE_PATH          ; Parse the path
.394ff6		22 1c 3f 39	jsl $393f1c	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.394ffa		b0 03		bcs $394fff	                BCS get_root_dir            ; If successful: get the root directory
.394ffc		82 b6 04	brl $3954b5	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.394fff						get_root_dir
.394fff		c2 30		rep #$30	                REP #$30        ; set A&X long
.395001		22 d1 3b 39	jsl $393bd1	                JSL DOS_DIROPEN
.395005		b0 03		bcs $39500a	                BCS success
.395007		82 ab 04	brl $3954b5	                BRL IF_PASSFAILURE
.39500a		82 af 04	brl $3954bc	success         BRL IF_SUCCESS
.39500d						IF_DIRNEXT
.39500d		5c 6b 3c 39	jmp $393c6b	                JML DOS_DIRNEXT
.395011						IF_DELETE
.395011		da		phx		                PHX
.395012		5a		phy		                PHY
.395013		0b		phd		                PHD
.395014		8b		phb		                PHB
.395015		08		php		                PHP
.395016		48		pha		                PHA             ; begin setdbr macro
.395017		08		php		                PHP
.395018		e2 20		sep #$20	                SEP #$20        ; set A short
.39501a		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39501c		48		pha		                PHA
.39501d		ab		plb		                PLB
.39501e		28		plp		                PLP
.39501f		68		pla		                PLA             ; end setdbr macro
.395020		48		pha		                PHA             ; begin setdp macro
.395021		08		php		                PHP
.395022		c2 20		rep #$20	                REP #$20        ; set A long
.395024		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395027		5b		tcd		                TCD
.395028		28		plp		                PLP
.395029		68		pla		                PLA             ; end setdp macro
.39502a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39502c		22 9a 43 39	jsl $39439a	                JSL DOS_FINDFILE
.395030		b0 03		bcs $395035	                BCS get_first_clus
.395032		82 80 04	brl $3954b5	                BRL IF_PASSFAILURE
.395035						get_first_clus
.395035		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.395038		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.39503a		85 10		sta $0330	                STA DOS_CLUS_ID
.39503c		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.39503f		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.395041		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395043		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395045		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.395048		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39504a		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.39504d		22 c8 45 39	jsl $3945c8	del_loop        JSL NEXTCLUSTER
.395051		90 2f		bcc $395082	                BCC del_one
.395053		a5 10		lda $0330	                LDA DOS_CLUS_ID
.395055		8d 2e a0	sta $38a02e	                STA DOS_NEXT_CLUS
.395058		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.39505a		8d 30 a0	sta $38a030	                STA DOS_NEXT_CLUS+2
.39505d		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395060		85 10		sta $0330	                STA DOS_CLUS_ID
.395062		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.395065		85 12		sta $0332	                STA DOS_CLUS_ID+2
.395067		22 a9 49 39	jsl $3949a9	                JSL DELCLUSTER32
.39506b		b0 03		bcs $395070	                BCS go_next
.39506d		82 45 04	brl $3954b5	                BRL IF_PASSFAILURE
.395070						go_next
.395070		ad 2e a0	lda $38a02e	                LDA DOS_NEXT_CLUS
.395073		85 10		sta $0330	                STA DOS_CLUS_ID
.395075		8d 2a a0	sta $38a02a	                STA DOS_CURR_CLUS
.395078		ad 30 a0	lda $38a030	                LDA DOS_NEXT_CLUS+2
.39507b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39507d		8d 2c a0	sta $38a02c	                STA DOS_CURR_CLUS+2
.395080		80 cb		bra $39504d	                BRA del_loop
.395082						del_one
.395082		ad 2a a0	lda $38a02a	                LDA DOS_CURR_CLUS
.395085		85 10		sta $0330	                STA DOS_CLUS_ID
.395087		ad 2c a0	lda $38a02c	                LDA DOS_CURR_CLUS+2
.39508a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.39508c		22 03 49 39	jsl $394903	                JSL DELCLUSTER
.395090		b0 03		bcs $395095	                BCS free_dir_entry
.395092		82 20 04	brl $3954b5	                BRL IF_PASSFAILURE
.395095						free_dir_entry
.395095		e2 20		sep #$20	                SEP #$20        ; set A short
.395097		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.39509a		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.39509c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.39509e		22 ea 3d 39	jsl $393dea	                JSL DOS_DIRWRITE                ; Write the directory entry back
.3950a2		b0 03		bcs $3950a7	                BCS ret_success
.3950a4		82 0e 04	brl $3954b5	                BRL IF_PASSFAILURE
.3950a7		82 12 04	brl $3954bc	ret_success     BRL IF_SUCCESS
.3950aa						IF_DIRREAD
.3950aa		da		phx		                PHX
.3950ab		5a		phy		                PHY
.3950ac		0b		phd		                PHD
.3950ad		8b		phb		                PHB
.3950ae		08		php		                PHP
.3950af		48		pha		                PHA             ; begin setdbr macro
.3950b0		08		php		                PHP
.3950b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3950b3		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950b5		48		pha		                PHA
.3950b6		ab		plb		                PLB
.3950b7		28		plp		                PLP
.3950b8		68		pla		                PLA             ; end setdbr macro
.3950b9		48		pha		                PHA             ; begin setdp macro
.3950ba		08		php		                PHP
.3950bb		c2 20		rep #$20	                REP #$20        ; set A long
.3950bd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950c0		5b		tcd		                TCD
.3950c1		28		plp		                PLP
.3950c2		68		pla		                PLA             ; end setdp macro
.3950c3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3950c5		22 9a 43 39	jsl $39439a	                JSL DOS_FINDFILE
.3950c9		b0 03		bcs $3950ce	                BCS success
.3950cb		82 e3 03	brl $3954b1	                BRL IF_FAILURE
.3950ce		82 eb 03	brl $3954bc	success         BRL IF_SUCCESS
.3950d1						IF_DIRWRITE
.3950d1		5c ea 3d 39	jmp $393dea	                JML DOS_DIRWRITE
.3950d5						IF_LOAD
.3950d5		da		phx		                PHX
.3950d6		5a		phy		                PHY
.3950d7		0b		phd		                PHD
.3950d8		8b		phb		                PHB
.3950d9		08		php		                PHP
.3950da		48		pha		                PHA             ; begin setdbr macro
.3950db		08		php		                PHP
.3950dc		e2 20		sep #$20	                SEP #$20        ; set A short
.3950de		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3950e0		48		pha		                PHA
.3950e1		ab		plb		                PLB
.3950e2		28		plp		                PLP
.3950e3		68		pla		                PLA             ; end setdbr macro
.3950e4		48		pha		                PHA             ; begin setdp macro
.3950e5		08		php		                PHP
.3950e6		c2 20		rep #$20	                REP #$20        ; set A long
.3950e8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3950eb		5b		tcd		                TCD
.3950ec		28		plp		                PLP
.3950ed		68		pla		                PLA             ; end setdp macro
.3950ee		c2 30		rep #$30	                REP #$30        ; set A&X long
.3950f0		22 01 4e 39	jsl $394e01	                JSL IF_OPEN
.3950f4		b0 03		bcs $3950f9	                BCS setup                   ; If success: start setting things up
.3950f6		82 bc 03	brl $3954b5	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.3950f9						setup
.3950f9		c2 20		rep #$20	                REP #$20        ; set A long
.3950fb		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.3950fe		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395100		85 2c		sta $034c	                STA DOS_FILE_SIZE
.395102		c8		iny		                INY
.395103		c8		iny		                INY
.395104		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395106		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395108		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.39510b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39510d		85 30		sta $0350	                STA DOS_SRC_PTR
.39510f		c8		iny		                INY
.395110		c8		iny		                INY
.395111		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395113		85 32		sta $0352	                STA DOS_SRC_PTR+2
.395115		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.395117		c9 40 00	cmp #$0040	                CMP #$0040
.39511a		b0 04		bcs $395120	                BGE load_by_type            ; No: try to load it by type
.39511c		5c 66 53 39	jmp $395366	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.395120		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.395123		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.395126						type_loop
.395126		e2 20		sep #$20	                SEP #$20        ; set A short
.395128		bf 6c 51 39	lda $39516c,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.39512c		f0 37		beq $395165	                BEQ no_match                ; If NULL... we didn't get a match
.39512e		d9 3a a0	cmp $38a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.395131		d0 28		bne $39515b	                BNE next_entry              ; If they don't match, try the next entry
.395133		bf 6d 51 39	lda $39516d,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.395137		d9 3b a0	cmp $38a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.39513a		d0 1f		bne $39515b	                BNE next_entry              ; If they don't match, try the next entry
.39513c		bf 6e 51 39	lda $39516e,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.395140		d9 3c a0	cmp $38a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.395143		d0 16		bne $39515b	                BNE next_entry              ; If they don't match, try the next entry
.395145		c2 20		rep #$20	                REP #$20        ; set A long
.395147		bf 6f 51 39	lda $39516f,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.39514b		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.39514d		e2 20		sep #$20	                SEP #$20        ; set A short
.39514f		bf 71 51 39	lda $395171,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.395153		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.395155		a2 00 00	ldx #$0000	                LDX #0
.395158		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.39515b						next_entry
.39515b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39515d		8a		txa		                TXA
.39515e		18		clc		                CLC
.39515f		69 06 00	adc #$0006	                ADC #6
.395162		aa		tax		                TAX
.395163		80 c1		bra $395126	                BRA type_loop               ; And check it against the file
.395165						no_match
.395165		e2 20		sep #$20	                SEP #$20        ; set A short
.395167		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.395169		82 45 03	brl $3954b1	                BRL IF_FAILURE
>39516c		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>39516f		79 51				                .word <>IF_LOADPGX
>395171		39				                .byte `IF_LOADPGX
>395172		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>395175		01 52				                .word <>IF_LOADPGZ
>395177		39				                .byte `IF_LOADPGZ
>395178		00				                .byte 0
.395179						IF_LOADPGX
.395179		c2 10		rep #$10	                REP #$10        ; set X long
.39517b		e2 20		sep #$20	                SEP #$20        ; set A short
.39517d		a0 00 00	ldy #$0000	                LDY #0
.395180		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.395182		c9 50		cmp #$50	                CMP #'P'
.395184		d0 15		bne $39519b	                BNE fail_sig                        ; If not found, fail
.395186		c8		iny		                INY
.395187		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395189		c9 47		cmp #$47	                CMP #'G'
.39518b		d0 0e		bne $39519b	                BNE fail_sig
.39518d		c8		iny		                INY
.39518e		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395190		c9 58		cmp #$58	                CMP #'X'
.395192		d0 07		bne $39519b	                BNE fail_sig
.395194		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.395195		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.395197		c9 01		cmp #$01	                CMP #$01
.395199		f0 17		beq $3951b2	                BEQ get_dest                        ; All passes: go to get the destination address
.39519b		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.39519d		22 b1 54 39	jsl $3954b1	                JSL IF_FAILURE
.3951a1						adjust_size
.3951a1		c2 20		rep #$20	                REP #$20        ; set A long
.3951a3		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.3951a4		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3951a6		e9 08 00	sbc #$0008	                SBC #8
.3951a9		85 2c		sta $034c	                STA DOS_FILE_SIZE
.3951ab		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3951ad		e9 00 00	sbc #$0000	                SBC #0
.3951b0		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3951b2						get_dest
.3951b2		c2 20		rep #$20	                REP #$20        ; set A long
.3951b4		c8		iny		                INY
.3951b5		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.3951b7		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.3951b9		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.3951bb		c8		iny		                INY
.3951bc		c8		iny		                INY
.3951bd		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.3951bf		85 36		sta $0356	                STA DOS_DST_PTR+2
.3951c1		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.3951c3		c8		iny		                INY                                 ; Point to the first data byte
.3951c4		c8		iny		                INY
.3951c5						copy_loop
.3951c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3951c7		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.3951c9		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.3951cb		c2 20		rep #$20	                REP #$20        ; set A long
.3951cd		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.3951cf		d0 02		bne $3951d3	                BNE dec_file_size
.3951d1		e6 36		inc $0356	                INC DOS_DST_PTR+2
.3951d3		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.3951d4		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.3951d6		e9 01 00	sbc #$0001	                SBC #1
.3951d9		85 2c		sta $034c	                STA DOS_FILE_SIZE
.3951db		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3951dd		e9 00 00	sbc #$0000	                SBC #0
.3951e0		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.3951e2		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.3951e4		d0 04		bne $3951ea	                BNE next_byte
.3951e6		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3951e8		f0 14		beq $3951fe	                BEQ done                            ; Yes: we're done
.3951ea		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.3951eb		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.3951ee		d0 d5		bne $3951c5	                BNE copy_loop                       ; No: keep copying
.3951f0		22 cc 46 39	jsl $3946cc	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.3951f4		b0 03		bcs $3951f9	                BCS next_cluster
.3951f6		82 bc 02	brl $3954b5	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.3951f9		a0 00 00	ldy #$0000	next_cluster    LDY #0
.3951fc		80 c7		bra $3951c5	                BRA copy_loop                       ; Go back to copying
.3951fe		82 bb 02	brl $3954bc	done            BRL IF_SUCCESS
.395201						IF_LOADPGZ
.395201		48		pha		                PHA             ; begin setdbr macro
.395202		08		php		                PHP
.395203		e2 20		sep #$20	                SEP #$20        ; set A short
.395205		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395207		48		pha		                PHA
.395208		ab		plb		                PLB
.395209		28		plp		                PLP
.39520a		68		pla		                PLA             ; end setdbr macro
.39520b		48		pha		                PHA             ; begin setdp macro
.39520c		08		php		                PHP
.39520d		c2 20		rep #$20	                REP #$20        ; set A long
.39520f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395212		5b		tcd		                TCD
.395213		28		plp		                PLP
.395214		68		pla		                PLA             ; end setdp macro
.395215		c2 30		rep #$30	                REP #$30        ; set A&X long
.395217		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.39521a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39521c		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.39521e		c8		iny		                INY
.39521f		c8		iny		                INY
.395220		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395222		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395224		e2 20		sep #$20	                SEP #$20        ; set A short
.395226		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.395229		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.39522b		c9 5a		cmp #$5a	                CMP #'Z'
.39522d		f0 06		beq $395235	                BEQ start_block                     ; If found, get the starting address
.39522f		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.395231		22 b1 54 39	jsl $3954b1	                JSL IF_FAILURE
.395235		c8		iny		start_block     INY
.395236						get_addr
.395236		e2 20		sep #$20	                SEP #$20        ; set A short
.395238		22 bb 52 39	jsl $3952bb	                JSL IF_FILE_EOF                     ; Check if EOF
.39523c		90 03		bcc $395241	                BCC get_addr_lo
.39523e		82 7b 02	brl $3954bc	done            BRL IF_SUCCESS                      ; If so: we're done
.395241		22 f9 52 39	jsl $3952f9	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.395245		90 47		bcc $39528e	                BCC ret_failure                     ; Got an error: pass it on
.395247		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.395249		22 f9 52 39	jsl $3952f9	                JSL IF_READ_NEXT                    ; Get the next byte
.39524d		90 3f		bcc $39528e	                BCC ret_failure                     ; Got an error: pass it on
.39524f		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.395251		22 f9 52 39	jsl $3952f9	                JSL IF_READ_NEXT                    ; Get the next byte
.395255		90 37		bcc $39528e	                BCC ret_failure                     ; Got an error: pass it on
.395257		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.395259		22 f9 52 39	jsl $3952f9	                JSL IF_READ_NEXT                    ; Get the next byte
.39525d		90 2f		bcc $39528e	                BCC ret_failure                     ; Got an error: pass it on
.39525f		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.395261		22 f9 52 39	jsl $3952f9	                JSL IF_READ_NEXT                    ; Get the next byte
.395265		90 27		bcc $39528e	                BCC ret_failure                     ; Got an error: pass it on
.395267		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.395269		22 f9 52 39	jsl $3952f9	                JSL IF_READ_NEXT                    ; Get the next byte
.39526d		90 1f		bcc $39528e	                BCC ret_failure                     ; Got an error: pass it on
.39526f		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.395271		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.395273		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.395275		d0 1a		bne $395291	                BNE read_data
.395277		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.395279		d0 16		bne $395291	                BNE read_data
.39527b		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.39527d		d0 12		bne $395291	                BNE read_data
.39527f		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.395281		85 3c		sta $035c	                STA DOS_RUN_PTR
.395283		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.395285		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.395287		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.395289		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.39528b		82 2e 02	brl $3954bc	                BRL IF_SUCCESS                      ; And finish
.39528e		82 20 02	brl $3954b1	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.395291						read_data
.395291		e2 20		sep #$20	                SEP #$20        ; set A short
.395293		22 f9 52 39	jsl $3952f9	                JSL IF_READ_NEXT                    ; Get the next byte
.395297		90 f5		bcc $39528e	                BCC ret_failure
.395299		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.39529b		c2 20		rep #$20	                REP #$20        ; set A long
.39529d		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.39529f		d0 02		bne $3952a3	                BNE dec_block_size
.3952a1		e6 36		inc $0356	                INC DOS_DST_PTR+2
.3952a3		38		sec		dec_block_size  SEC
.3952a4		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.3952a6		e9 01 00	sbc #$0001	                SBC #1
.3952a9		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.3952ab		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.3952ad		e9 00 00	sbc #$0000	                SBC #0
.3952b0		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.3952b2		d0 dd		bne $395291	                BNE read_data
.3952b4		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.3952b6		d0 d9		bne $395291	                BNE read_data                       ; No: keep reading data
.3952b8		82 7b ff	brl $395236	                BRL get_addr                        ; Yes: check for another block
.3952bb						IF_FILE_EOF
.3952bb		48		pha		                PHA
.3952bc		5a		phy		                PHY
.3952bd		8b		phb		                PHB
.3952be		0b		phd		                PHD
.3952bf		08		php		                PHP
.3952c0		48		pha		                PHA             ; begin setdbr macro
.3952c1		08		php		                PHP
.3952c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3952c4		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3952c6		48		pha		                PHA
.3952c7		ab		plb		                PLB
.3952c8		28		plp		                PLP
.3952c9		68		pla		                PLA             ; end setdbr macro
.3952ca		48		pha		                PHA             ; begin setdp macro
.3952cb		08		php		                PHP
.3952cc		c2 20		rep #$20	                REP #$20        ; set A long
.3952ce		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3952d1		5b		tcd		                TCD
.3952d2		28		plp		                PLP
.3952d3		68		pla		                PLA             ; end setdp macro
.3952d4		e2 20		sep #$20	                SEP #$20        ; set A short
.3952d6		c2 10		rep #$10	                REP #$10        ; set X long
.3952d8		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.3952db		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.3952dd		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.3952df		f0 07		beq $3952e8	                BEQ chk_file_size                   ; If not: check the file size
.3952e1		28		plp		ret_true        PLP                                 ; Return true
.3952e2		2b		pld		                PLD
.3952e3		ab		plb		                PLB
.3952e4		7a		ply		                PLY
.3952e5		68		pla		                PLA
.3952e6		38		sec		                SEC
.3952e7		6b		rtl		                RTL
.3952e8						chk_file_size
.3952e8		c2 20		rep #$20	                REP #$20        ; set A long
.3952ea		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.3952ec		d0 04		bne $3952f2	                BNE ret_false
.3952ee		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.3952f0		f0 ef		beq $3952e1	                BEQ ret_true
.3952f2		28		plp		ret_false       PLP                                 ; Return false
.3952f3		2b		pld		                PLD
.3952f4		ab		plb		                PLB
.3952f5		7a		ply		                PLY
.3952f6		68		pla		                PLA
.3952f7		18		clc		                CLC
.3952f8		6b		rtl		                RTL
.3952f9						IF_READ_NEXT
.3952f9		8b		phb		                PHB
.3952fa		0b		phd		                PHD
.3952fb		08		php		                PHP
.3952fc		48		pha		                PHA             ; begin setdbr macro
.3952fd		08		php		                PHP
.3952fe		e2 20		sep #$20	                SEP #$20        ; set A short
.395300		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.395302		48		pha		                PHA
.395303		ab		plb		                PLB
.395304		28		plp		                PLP
.395305		68		pla		                PLA             ; end setdbr macro
.395306		48		pha		                PHA             ; begin setdp macro
.395307		08		php		                PHP
.395308		c2 20		rep #$20	                REP #$20        ; set A long
.39530a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39530d		5b		tcd		                TCD
.39530e		28		plp		                PLP
.39530f		68		pla		                PLA             ; end setdp macro
.395310		e2 20		sep #$20	                SEP #$20        ; set A short
.395312		c2 10		rep #$10	                REP #$10        ; set X long
.395314		22 bb 52 39	jsl $3952bb	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.395318		90 06		bcc $395320	                BCC get_byte                        ; If not: get the next byte
.39531a		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.39531c		85 0e		sta $032e	                STA DOS_STATUS
.39531e		80 3f		bra $39535f	                BRA ret_failure
.395320		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.395322		48		pha		                PHA                                 ; And save it for the moment
.395323		c2 20		rep #$20	                REP #$20        ; set A long
.395325		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.395327		d0 02		bne $39532b	                BNE dec_low
.395329		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.39532b		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.39532d		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.39532f		d0 04		bne $395335	                BNE next_byte
.395331		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.395333		f0 1b		beq $395350	                BEQ ret_eof                         ; Yes: mark the file as EOF
.395335						next_byte
.395335		e2 20		sep #$20	                SEP #$20        ; set A short
.395337		c8		iny		                INY                                 ; Move to the next byte
.395338		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.39533b		90 0b		bcc $395348	                BLT ret_success                     ; No: just return the byte
.39533d		22 cc 46 39	jsl $3946cc	                JSL DOS_READNEXT                    ; Yes: read the next sector
.395341		b0 02		bcs $395345	                BCS reset_index
.395343		80 1a		bra $39535f	                BRA ret_failure                     ; If failure: pass the error up the chain
.395345		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.395348						ret_success
.395348		e2 20		sep #$20	                SEP #$20        ; set A short
.39534a		68		pla		                PLA                                 ; Return the byte retrieved
.39534b		28		plp		                PLP
.39534c		2b		pld		                PLD
.39534d		ab		plb		                PLB
.39534e		38		sec		                SEC
.39534f		6b		rtl		                RTL
.395350						ret_eof
.395350		e2 20		sep #$20	                SEP #$20        ; set A short
.395352		5a		phy		                PHY                                 ; Save the index
.395353		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.395356		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395358		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.39535a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.39535c		7a		ply		                PLY                                 ; Restore the index
.39535d		80 e9		bra $395348	                BRA ret_success
.39535f						ret_failure
.39535f		e2 20		sep #$20	                SEP #$20        ; set A short
.395361		28		plp		                PLP
.395362		2b		pld		                PLD
.395363		ab		plb		                PLB
.395364		18		clc		                CLC
.395365		6b		rtl		                RTL
.395366						IF_LOADRAW
.395366		c2 30		rep #$30	                REP #$30        ; set A&X long
.395368		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.39536b						copy_loop
.39536b		e2 20		sep #$20	                SEP #$20        ; set A short
.39536d		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.39536f		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395371		c2 20		rep #$20	                REP #$20        ; set A long
.395373		38		sec		                SEC                         ; Count down the number of bytes left
.395374		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395376		e9 01 00	sbc #$0001	                SBC #1
.395379		85 2c		sta $034c	                STA DOS_FILE_SIZE
.39537b		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.39537d		e9 00 00	sbc #$0000	                SBC #0
.395380		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.395382		d0 04		bne $395388	                BNE continue
.395384		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.395386		f0 1b		beq $3953a3	                BEQ close_file              ; If not: we're done
.395388		c8		iny		continue        INY
.395389		cc 0e a0	cpy $38a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.39538c		d0 dd		bne $39536b	                BNE copy_loop               ; No: keep processing the bytes
.39538e		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.39538f		a5 34		lda $0354	                LDA DOS_DST_PTR
.395391		6d 0e a0	adc $38a00e	                ADC CLUSTER_SIZE
.395394		85 34		sta $0354	                STA DOS_DST_PTR
.395396		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.395398		69 00 00	adc #$0000	                ADC #0
.39539b		85 36		sta $0356	                STA DOS_DST_PTR+2
.39539d		22 02 4f 39	jsl $394f02	                JSL IF_READ                 ; Yes: load the next cluster
.3953a1		b0 c5		bcs $395368	                BCS copy_cluster            ; And start copying it
.3953a3						close_file
.3953a3		82 16 01	brl $3954bc	ret_success     BRL IF_SUCCESS
.3953a6						IF_NULLBUFFER
.3953a6		5a		phy		                PHY
.3953a7		8b		phb		                PHB
.3953a8		0b		phd		                PHD
.3953a9		08		php		                PHP
.3953aa		48		pha		                PHA             ; begin setdbr macro
.3953ab		08		php		                PHP
.3953ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3953ae		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953b0		48		pha		                PHA
.3953b1		ab		plb		                PLB
.3953b2		28		plp		                PLP
.3953b3		68		pla		                PLA             ; end setdbr macro
.3953b4		48		pha		                PHA             ; begin setdp macro
.3953b5		08		php		                PHP
.3953b6		c2 20		rep #$20	                REP #$20        ; set A long
.3953b8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953bb		5b		tcd		                TCD
.3953bc		28		plp		                PLP
.3953bd		68		pla		                PLA             ; end setdp macro
.3953be		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953c0		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3953c3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953c5		85 28		sta $0348	                STA DOS_TEMP
.3953c7		c8		iny		                INY
.3953c8		c8		iny		                INY
.3953c9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.3953cb		85 2a		sta $034a	                STA DOS_TEMP+2
.3953cd		a0 00 00	ldy #$0000	                LDY #0
.3953d0		a9 00 00	lda #$0000	                LDA #0
.3953d3		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.3953d5		c8		iny		                INY
.3953d6		c8		iny		                INY
.3953d7		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.3953da		d0 f7		bne $3953d3	                BNE loop
.3953dc		28		plp		                PLP
.3953dd		2b		pld		                PLD
.3953de		ab		plb		                PLB
.3953df		7a		ply		                PLY
.3953e0		6b		rtl		                RTL
.3953e1						IF_COPY2BUFF
.3953e1		5a		phy		                PHY
.3953e2		8b		phb		                PHB
.3953e3		0b		phd		                PHD
.3953e4		08		php		                PHP
.3953e5		48		pha		                PHA             ; begin setdbr macro
.3953e6		08		php		                PHP
.3953e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3953e9		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3953eb		48		pha		                PHA
.3953ec		ab		plb		                PLB
.3953ed		28		plp		                PLP
.3953ee		68		pla		                PLA             ; end setdbr macro
.3953ef		48		pha		                PHA             ; begin setdp macro
.3953f0		08		php		                PHP
.3953f1		c2 20		rep #$20	                REP #$20        ; set A long
.3953f3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3953f6		5b		tcd		                TCD
.3953f7		28		plp		                PLP
.3953f8		68		pla		                PLA             ; end setdp macro
.3953f9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3953fb		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3953fe		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395400		85 28		sta $0348	                STA DOS_TEMP
.395402		c8		iny		                INY
.395403		c8		iny		                INY
.395404		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395406		85 2a		sta $034a	                STA DOS_TEMP+2
.395408		a0 00 00	ldy #$0000	                LDY #0
.39540b						copy_loop
.39540b		e2 20		sep #$20	                SEP #$20        ; set A short
.39540d		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.39540f		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.395411		c2 20		rep #$20	                REP #$20        ; set A long
.395413		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.395415		d0 02		bne $395419	                BNE adv_dest
.395417		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.395419		c8		iny		adv_dest        INY                         ; Count it
.39541a		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.39541d		f0 0c		beq $39542b	                BEQ done                    ; Yes: we're done
.39541f		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.395421		c5 38		cmp $0358	                CMP DOS_END_PTR
.395423		d0 e6		bne $39540b	                BNE copy_loop               ; No: keep copying
.395425		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.395427		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.395429		d0 e0		bne $39540b	                BNE copy_loop
.39542b		28		plp		done            PLP
.39542c		2b		pld		                PLD
.39542d		ab		plb		                PLB
.39542e		7a		ply		                PLY
.39542f		6b		rtl		                RTL
.395430						IF_SAVE
.395430		da		phx		                PHX
.395431		5a		phy		                PHY
.395432		0b		phd		                PHD
.395433		8b		phb		                PHB
.395434		08		php		                PHP
.395435		48		pha		                PHA             ; begin setdbr macro
.395436		08		php		                PHP
.395437		e2 20		sep #$20	                SEP #$20        ; set A short
.395439		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39543b		48		pha		                PHA
.39543c		ab		plb		                PLB
.39543d		28		plp		                PLP
.39543e		68		pla		                PLA             ; end setdbr macro
.39543f		48		pha		                PHA             ; begin setdp macro
.395440		08		php		                PHP
.395441		c2 20		rep #$20	                REP #$20        ; set A long
.395443		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395446		5b		tcd		                TCD
.395447		28		plp		                PLP
.395448		68		pla		                PLA             ; end setdp macro
.395449		c2 30		rep #$30	                REP #$30        ; set A&X long
.39544b		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.39544e		38		sec		                SEC
.39544f		a5 38		lda $0358	                LDA DOS_END_PTR
.395451		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.395453		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395455		c8		iny		                INY
.395456		c8		iny		                INY
.395457		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.395459		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.39545b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.39545d		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.395460		18		clc		                CLC
.395461		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.395463		69 01 00	adc #$0001	                ADC #1
.395466		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395468		90 09		bcc $395473	                BCC first_block
.39546a		c8		iny		                INY
.39546b		c8		iny		                INY
.39546c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.39546e		69 00 00	adc #$0000	                ADC #0
.395471		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395473		22 a6 53 39	jsl $3953a6	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395477		22 e1 53 39	jsl $3953e1	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.39547b		22 94 4e 39	jsl $394e94	                JSL IF_CREATE           ; Create file.
.39547f		b0 03		bcs $395484	                BCS check_for_end
.395481		82 31 00	brl $3954b5	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.395484		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.395486		c5 38		cmp $0358	                CMP DOS_END_PTR
.395488		d0 06		bne $395490	                BNE next_block
.39548a		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.39548c		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.39548e		f0 1d		beq $3954ad	                BEQ done                ; Yes: we're done
.395490		22 a6 53 39	jsl $3953a6	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.395494		22 e1 53 39	jsl $3953e1	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.395498		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.39549b		a9 00 00	lda #$0000	                LDA #0
.39549e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954a0		c8		iny		                INY
.3954a1		c8		iny		                INY
.3954a2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.3954a4		22 67 4f 39	jsl $394f67	                JSL IF_WRITE            ; Append to the file
.3954a8		b0 da		bcs $395484	                BCS check_for_end       ; And try again
.3954aa		82 08 00	brl $3954b5	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.3954ad		5c bc 54 39	jmp $3954bc	done            JML IF_SUCCESS
.3954b1						IF_FAILURE
.3954b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3954b3		85 0e		sta $032e	                STA DOS_STATUS
.3954b5		28		plp		IF_PASSFAILURE  PLP
.3954b6		18		clc		                CLC
.3954b7		ab		plb		                PLB
.3954b8		2b		pld		                PLD
.3954b9		7a		ply		                PLY
.3954ba		fa		plx		                PLX
.3954bb		6b		rtl		                RTL
.3954bc						IF_SUCCESS
.3954bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3954be		64 00		stz $0320	                STZ BIOS_STATUS
.3954c0		64 0e		stz $032e	                STZ DOS_STATUS
.3954c2		28		plp		                PLP
.3954c3		38		sec		                SEC
.3954c4		ab		plb		                PLB
.3954c5		2b		pld		                PLD
.3954c6		7a		ply		                PLY
.3954c7		fa		plx		                PLX
.3954c8		6b		rtl		                RTL
.3954c9						IF_RUN
.3954c9		da		phx		                PHX
.3954ca		5a		phy		                PHY
.3954cb		0b		phd		                PHD
.3954cc		8b		phb		                PHB
.3954cd		08		php		                PHP
.3954ce		48		pha		                PHA             ; begin setdbr macro
.3954cf		08		php		                PHP
.3954d0		e2 20		sep #$20	                SEP #$20        ; set A short
.3954d2		a9 00		lda #$00	                LDA #0
.3954d4		48		pha		                PHA
.3954d5		ab		plb		                PLB
.3954d6		28		plp		                PLP
.3954d7		68		pla		                PLA             ; end setdbr macro
.3954d8		48		pha		                PHA             ; begin setdp macro
.3954d9		08		php		                PHP
.3954da		c2 20		rep #$20	                REP #$20        ; set A long
.3954dc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3954df		5b		tcd		                TCD
.3954e0		28		plp		                PLP
.3954e1		68		pla		                PLA             ; end setdp macro
.3954e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3954e4		c2 10		rep #$10	                REP #$10        ; set X long
.3954e6		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.3954e8		a2 00 00	ldx #$0000	                LDX #0
.3954eb		9f 00 ad 38	sta $38ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.3954ef		e8		inx		                INX
.3954f0		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.3954f3		d0 f6		bne $3954eb	                BNE clr_fd_loop
.3954f5		c2 20		rep #$20	                REP #$20        ; set A long
.3954f7		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.3954fa		8f 0e ad 38	sta $38ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.3954fe		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_SECTOR
.395501		8f 10 ad 38	sta $38ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.395505		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.395507		8f 02 ad 38	sta $38ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.39550b		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.39550d		8f 04 ad 38	sta $38ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.395511		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.395514		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.395516		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.395518		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.39551b		85 20		sta $0340	                STA DOS_FD_PTR
.39551d		a9 38 00	lda #$0038	                LDA #`DOS_SPARE_FD
.395520		85 22		sta $0342	                STA DOS_FD_PTR+2
.395522		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.395525		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.395529		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.39552d		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.395531		b0 03		bcs $395536	                BCS chk_execute
.395533		82 7f ff	brl $3954b5	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.395536						chk_execute
.395536		c2 20		rep #$20	                REP #$20        ; set A long
.395538		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.39553a		d0 0b		bne $395547	                BNE try_execute                         ; If so: call it
.39553c		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.39553e		d0 07		bne $395547	                BNE try_execute
.395540		e2 20		sep #$20	                SEP #$20        ; set A short
.395542		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.395544		82 6a ff	brl $3954b1	                BRL IF_FAILURE
.395547						try_execute
.395547		e2 20		sep #$20	                SEP #$20        ; set A short
.395549		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.39554b		48		pha		                PHA
.39554c		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.39554e		48		pha		                PHA
.39554f		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.395551		48		pha		                PHA
.395552		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.395554		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.395556		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.39555a		e2 20		sep #$20	                SEP #$20        ; set A short
.39555c		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.39555d		68		pla		                PLA
.39555e		68		pla		                PLA
.39555f		82 5a ff	brl $3954bc	                BRL IF_SUCCESS                          ; Return success
.395562						IF_ALLOCFD
.395562		da		phx		                PHX
.395563		5a		phy		                PHY
.395564		0b		phd		                PHD
.395565		8b		phb		                PHB
.395566		08		php		                PHP
.395567		48		pha		                PHA             ; begin setdbr macro
.395568		08		php		                PHP
.395569		e2 20		sep #$20	                SEP #$20        ; set A short
.39556b		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.39556d		48		pha		                PHA
.39556e		ab		plb		                PLB
.39556f		28		plp		                PLP
.395570		68		pla		                PLA             ; end setdbr macro
.395571		48		pha		                PHA             ; begin setdp macro
.395572		08		php		                PHP
.395573		c2 20		rep #$20	                REP #$20        ; set A long
.395575		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395578		5b		tcd		                TCD
.395579		28		plp		                PLP
.39557a		68		pla		                PLA             ; end setdp macro
.39557b		c2 10		rep #$10	                REP #$10        ; set X long
.39557d		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.395580						chk_fd
.395580		e2 20		sep #$20	                SEP #$20        ; set A short
.395582		bd 20 ad	lda $38ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.395585		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.395587		f0 14		beq $39559d	                BEQ found                           ; No: flag and return the found descriptor
.395589						next_fd
.395589		c2 20		rep #$20	                REP #$20        ; set A long
.39558b		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.39558c		18		clc		                CLC
.39558d		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.395590		aa		tax		                TAX
.395591		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.395594		90 ea		bcc $395580	                BLT chk_fd                          ; No: check this new file descriptor
.395596		e2 20		sep #$20	                SEP #$20        ; set A short
.395598		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.39559a		82 14 ff	brl $3954b1	                BRL IF_FAILURE
.39559d		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.39559f		9d 20 ad	sta $38ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.3955a2		c2 20		rep #$20	                REP #$20        ; set A long
.3955a4		8a		txa		                TXA
.3955a5		18		clc		                CLC
.3955a6		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.3955a9		85 20		sta $0340	                STA @b DOS_FD_PTR
.3955ab		a9 38 00	lda #$0038	                LDA #`DOS_FILE_DESCS
.3955ae		69 00 00	adc #$0000	                ADC #0
.3955b1		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3955b3		82 06 ff	brl $3954bc	                BRL IF_SUCCESS                      ; Return this file descriptor
.3955b6						IF_FREEFD
.3955b6		da		phx		                PHX
.3955b7		5a		phy		                PHY
.3955b8		0b		phd		                PHD
.3955b9		8b		phb		                PHB
.3955ba		08		php		                PHP
.3955bb		48		pha		                PHA             ; begin setdbr macro
.3955bc		08		php		                PHP
.3955bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3955bf		a9 38		lda #$38	                LDA #`DOS_HIGH_VARIABLES
.3955c1		48		pha		                PHA
.3955c2		ab		plb		                PLB
.3955c3		28		plp		                PLP
.3955c4		68		pla		                PLA             ; end setdbr macro
.3955c5		48		pha		                PHA             ; begin setdp macro
.3955c6		08		php		                PHP
.3955c7		c2 20		rep #$20	                REP #$20        ; set A long
.3955c9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955cc		5b		tcd		                TCD
.3955cd		28		plp		                PLP
.3955ce		68		pla		                PLA             ; end setdp macro
.3955cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3955d1		c2 10		rep #$10	                REP #$10        ; set X long
.3955d3		a9 00		lda #$00	                LDA #0
.3955d5		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.3955d7		82 e2 fe	brl $3954bc	                BRL IF_SUCCESS
.3955da						DOS_SRC2DST
.3955da		da		phx		                PHX
.3955db		5a		phy		                PHY
.3955dc		0b		phd		                PHD
.3955dd		8b		phb		                PHB
.3955de		08		php		                PHP
.3955df		48		pha		                PHA             ; begin setdp macro
.3955e0		08		php		                PHP
.3955e1		c2 20		rep #$20	                REP #$20        ; set A long
.3955e3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3955e6		5b		tcd		                TCD
.3955e7		28		plp		                PLP
.3955e8		68		pla		                PLA             ; end setdp macro
.3955e9		c2 30		rep #$30	                REP #$30        ; set A&X long
.3955eb		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.3955ee		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3955f0		aa		tax		                TAX                                     ; X := source buffer address
.3955f1		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.3955f3		a8		tay		                TAY                                     ; Y := destination buffer address
.3955f4		e2 20		sep #$20	                SEP #$20        ; set A short
.3955f6		a9 38		lda #$38	                LDA #`DOS_FILE_BUFFS
.3955f8		48		pha		                PHA
.3955f9		ab		plb		                PLB
.3955fa		c2 20		rep #$20	                REP #$20        ; set A long
.3955fc		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.3955ff		f0 11		beq $395612	loop            BEQ done
.395601		48		pha		                PHA
.395602		e2 20		sep #$20	                SEP #$20        ; set A short
.395604		bd 00 00	lda $380000,x	                LDA #0,B,X
.395607		99 00 00	sta $380000,y	                STA #0,B,Y
.39560a		c2 20		rep #$20	                REP #$20        ; set A long
.39560c		68		pla		                PLA
.39560d		3a		dec a		                DEC A
.39560e		e8		inx		                INX
.39560f		c8		iny		                INY
.395610		80 ed		bra $3955ff	                BRA loop
.395612		28		plp		done            PLP
.395613		ab		plb		                PLB
.395614		2b		pld		                PLD
.395615		7a		ply		                PLY
.395616		fa		plx		                PLX
.395617		6b		rtl		                RTL
.395618						IF_COPY
.395618		da		phx		                PHX
.395619		5a		phy		                PHY
.39561a		0b		phd		                PHD
.39561b		8b		phb		                PHB
.39561c		08		php		                PHP
.39561d		48		pha		                PHA             ; begin setdbr macro
.39561e		08		php		                PHP
.39561f		e2 20		sep #$20	                SEP #$20        ; set A short
.395621		a9 00		lda #$00	                LDA #0
.395623		48		pha		                PHA
.395624		ab		plb		                PLB
.395625		28		plp		                PLP
.395626		68		pla		                PLA             ; end setdbr macro
.395627		48		pha		                PHA             ; begin setdp macro
.395628		08		php		                PHP
.395629		c2 20		rep #$20	                REP #$20        ; set A long
.39562b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.39562e		5b		tcd		                TCD
.39562f		28		plp		                PLP
.395630		68		pla		                PLA             ; end setdp macro
.395631		22 62 55 39	jsl $395562	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.395635		b0 03		bcs $39563a	                BCS set_src_path
.395637		82 7b fe	brl $3954b5	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.39563a						set_src_path
.39563a		c2 30		rep #$30	                REP #$30        ; set A&X long
.39563c		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.39563f		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.395641		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395643		c8		iny		                INY
.395644		c8		iny		                INY
.395645		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.395647		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.395649						alloc_dest
.395649		c2 30		rep #$30	                REP #$30        ; set A&X long
.39564b		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.39564d		85 30		sta $0350	                STA @b DOS_SRC_PTR
.39564f		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395651		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.395653		22 62 55 39	jsl $395562	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.395657		b0 0f		bcs $395668	                BCS set_paths                   ; If everything is ok... start setting the paths
.395659		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.39565b		85 20		sta $0340	                STA @b DOS_FD_PTR
.39565d		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.39565f		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395661		22 b6 55 39	jsl $3955b6	                JSL IF_FREEFD                   ; And free it
.395665		82 4d fe	brl $3954b5	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.395668						set_paths
.395668		c2 30		rep #$30	                REP #$30        ; set A&X long
.39566a		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.39566c		85 34		sta $0354	                STA @b DOS_DST_PTR
.39566e		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.395670		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.395672		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.395675		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.395677		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395679		c8		iny		                INY
.39567a		c8		iny		                INY
.39567b		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.39567d		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.39567f		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395681		85 20		sta $0340	                STA @b DOS_FD_PTR
.395683		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395685		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395687		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.39568b		b0 10		bcs $39569d	                BCS src_open                    ; If success, work with the openned file
.39568d		00		brk #		                BRK
.39568e		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395690		85 20		sta $0340	                STA @b DOS_FD_PTR
.395692		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395694		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395696		22 b6 55 39	jsl $3955b6	                JSL IF_FREEFD                   ; And free it
.39569a		82 bc ff	brl $395659	                BRL err_free_src_fd             ; Free the source file descriptor
.39569d		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.3956a0		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956a2		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3956a4		c8		iny		                INY
.3956a5		c8		iny		                INY
.3956a6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.3956a8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3956aa		22 da 55 39	jsl $3955da	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.3956ae		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3956b0		85 20		sta $0340	                STA @b DOS_FD_PTR
.3956b2		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3956b4		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3956b6		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.3956ba		b0 0f		bcs $3956cb	                BCS read_next                   ; If sucessful, try to get the next cluster
.3956bc		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3956be		85 20		sta $0340	                STA @b DOS_FD_PTR
.3956c0		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3956c2		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3956c4		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.3956c8		82 c3 ff	brl $39568e	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.3956cb						read_next
.3956cb		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.3956cd		85 20		sta $0340	                STA @b DOS_FD_PTR
.3956cf		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.3956d1		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3956d3		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.3956d7		b0 19		bcs $3956f2	                BCS copy2dest                   ; If successful, copy the sector
.3956d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3956db		a5 0e		lda $032e	                LDA @b DOS_STATUS
.3956dd		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.3956df		f0 32		beq $395713	                BEQ file_copied                 ; Yes: we're done copying
.3956e1						err_dest_close
.3956e1		c2 20		rep #$20	                REP #$20        ; set A long
.3956e3		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.3956e5		85 20		sta $0340	                STA @b DOS_FD_PTR
.3956e7		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.3956e9		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.3956eb		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.3956ef		82 ca ff	brl $3956bc	                BRL err_src_close               ; Close the source and throw an error
.3956f2						copy2dest
.3956f2		22 da 55 39	jsl $3955da	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.3956f6		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.3956f9		a9 00 00	lda #$0000	                LDA #0
.3956fc		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.3956fe		c8		iny		                INY
.3956ff		c8		iny		                INY
.395700		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.395702		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395704		85 20		sta $0340	                STA @b DOS_FD_PTR
.395706		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.395708		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39570a		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.39570e		90 d1		bcc $3956e1	                BCC err_dest_close              ; If error: close all files and throw the error
.395710		82 b8 ff	brl $3956cb	                BRL read_next                   ; Otherwise: repeat the loop
.395713						file_copied
.395713		c2 20		rep #$20	                REP #$20        ; set A long
.395715		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.395717		85 20		sta $0340	                STA @b DOS_FD_PTR
.395719		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.39571b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.39571d		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.395721		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.395723		85 20		sta $0340	                STA @b DOS_FD_PTR
.395725		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.395727		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.395729		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.39572d		82 8c fd	brl $3954bc	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af13f8					    UART1_BASE = $AF13F8        ; Base address for UART 1 (COM1)
=$af12f8					    UART2_BASE = $AF12F8        ; Base address for UART 2 (COM2)
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.395730						UART_SELECT
.395730		08		php		            PHP
.395731		c2 20		rep #$20	                REP #$20        ; set A long
.395733		c9 02 00	cmp #$0002	            CMP #2
.395736		f0 07		beq $39573f	            BEQ is_COM2
.395738		c2 20		rep #$20	                REP #$20        ; set A long
.39573a		a9 f8 13	lda #$13f8	            LDA #<>UART1_BASE
.39573d		80 05		bra $395744	            BRA setaddr
.39573f						is_COM2
.39573f		c2 20		rep #$20	                REP #$20        ; set A long
.395741		a9 f8 12	lda #$12f8	            LDA #<>UART2_BASE
.395744		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.395748		e2 20		sep #$20	                SEP #$20        ; set A short
.39574a		a9 af		lda #$af	            LDA #`UART1_BASE
.39574c		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.395750		28		plp		            PLP
.395751		6b		rtl		            RTL
.395752						UART_SETBPS
.395752		08		php		            PHP
.395753		0b		phd		            PHD
.395754		48		pha		                PHA             ; begin setdp macro
.395755		08		php		                PHP
.395756		c2 20		rep #$20	                REP #$20        ; set A long
.395758		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39575b		5b		tcd		                TCD
.39575c		28		plp		                PLP
.39575d		68		pla		                PLA             ; end setdp macro
.39575e		c2 30		rep #$30	                REP #$30        ; set A&X long
.395760		48		pha		            PHA
.395761		e2 20		sep #$20	                SEP #$20        ; set A short
.395763		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.395766		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395768		09 80		ora #$80	            ORA #LCR_DLB
.39576a		97 00		sta [$0700],y	            STA [CURRUART],Y
.39576c		c2 20		rep #$20	                REP #$20        ; set A long
.39576e		68		pla		            PLA
.39576f		a0 00 00	ldy #$0000	            LDY #UART_DLL
.395772		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.395774		e2 20		sep #$20	                SEP #$20        ; set A short
.395776		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.395779		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.39577b		49 80		eor #$80	            EOR #LCR_DLB
.39577d		97 00		sta [$0700],y	            STA [CURRUART],Y
.39577f		2b		pld		            PLD
.395780		28		plp		            PLP
.395781		6b		rtl		            RTL
.395782						UART_SETLCR
.395782		08		php		            PHP
.395783		0b		phd		            PHD
.395784		48		pha		                PHA             ; begin setdp macro
.395785		08		php		                PHP
.395786		c2 20		rep #$20	                REP #$20        ; set A long
.395788		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.39578b		5b		tcd		                TCD
.39578c		28		plp		                PLP
.39578d		68		pla		                PLA             ; end setdp macro
.39578e		e2 20		sep #$20	                SEP #$20        ; set A short
.395790		c2 10		rep #$10	                REP #$10        ; set X long
.395792		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.395794		a0 03 00	ldy #$0003	            LDY #UART_LCR
.395797		97 00		sta [$0700],y	            STA [CURRUART],Y
.395799		2b		pld		            PLD
.39579a		28		plp		            PLP
.39579b		6b		rtl		            RTL
.39579c						UART_INIT
.39579c		08		php		            PHP
.39579d		0b		phd		            PHD
.39579e		c2 30		rep #$30	                REP #$30        ; set A&X long
.3957a0		48		pha		                PHA             ; begin setdp macro
.3957a1		08		php		                PHP
.3957a2		c2 20		rep #$20	                REP #$20        ; set A long
.3957a4		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3957a7		5b		tcd		                TCD
.3957a8		28		plp		                PLP
.3957a9		68		pla		                PLA             ; end setdp macro
.3957aa		a9 01 00	lda #$0001	            LDA #UART_115200
.3957ad		22 52 57 39	jsl $395752	            JSL UART_SETBPS
.3957b1		e2 20		sep #$20	                SEP #$20        ; set A short
.3957b3		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.3957b5		22 82 57 39	jsl $395782	            JSL UART_SETLCR
.3957b9		a9 e1		lda #$e1	            LDA #%11100001
.3957bb		a0 02 00	ldy #$0002	            LDY #UART_FCR
.3957be		97 00		sta [$0700],y	            STA [CURRUART],Y
.3957c0		2b		pld		            PLD
.3957c1		28		plp		            PLP
.3957c2		6b		rtl		            RTL
.3957c3						UART_HASBYT
.3957c3		08		php		            PHP
.3957c4		0b		phd		            PHD
.3957c5		c2 30		rep #$30	                REP #$30        ; set A&X long
.3957c7		48		pha		                PHA             ; begin setdp macro
.3957c8		08		php		                PHP
.3957c9		c2 20		rep #$20	                REP #$20        ; set A long
.3957cb		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3957ce		5b		tcd		                TCD
.3957cf		28		plp		                PLP
.3957d0		68		pla		                PLA             ; end setdp macro
.3957d1		e2 20		sep #$20	                SEP #$20        ; set A short
.3957d3		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3957d6		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.3957d8		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3957da		d0 04		bne $3957e0	            BNE ret_true            ; If flag is set, return true
.3957dc		2b		pld		ret_false   PLD                     ; Return false
.3957dd		28		plp		            PLP
.3957de		18		clc		            CLC
.3957df		6b		rtl		            RTL
.3957e0		2b		pld		ret_true    PLD                     ; Return true
.3957e1		28		plp		            PLP
.3957e2		38		sec		            SEC
.3957e3		6b		rtl		            RTL
.3957e4						UART_GETC
.3957e4		08		php		            PHP
.3957e5		0b		phd		            PHD
.3957e6		c2 30		rep #$30	                REP #$30        ; set A&X long
.3957e8		48		pha		                PHA             ; begin setdp macro
.3957e9		08		php		                PHP
.3957ea		c2 20		rep #$20	                REP #$20        ; set A long
.3957ec		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.3957ef		5b		tcd		                TCD
.3957f0		28		plp		                PLP
.3957f1		68		pla		                PLA             ; end setdp macro
.3957f2		e2 20		sep #$20	                SEP #$20        ; set A short
.3957f4		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.3957f7		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.3957f9		29 01		and #$01	            AND #LSR_DATA_AVAIL
.3957fb		f0 fa		beq $3957f7	            BEQ wait_getc           ; If the flag is clear, wait
.3957fd		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.395800		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.395802		2b		pld		            PLD
.395803		28		plp		            PLP
.395804		6b		rtl		            RTL
.395805						UART_PUTC
.395805		08		php		            PHP
.395806		0b		phd		            PHD
.395807		c2 30		rep #$30	                REP #$30        ; set A&X long
.395809		48		pha		                PHA             ; begin setdp macro
.39580a		08		php		                PHP
.39580b		c2 20		rep #$20	                REP #$20        ; set A long
.39580d		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.395810		5b		tcd		                TCD
.395811		28		plp		                PLP
.395812		68		pla		                PLA             ; end setdp macro
.395813		e2 20		sep #$20	                SEP #$20        ; set A short
.395815		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.395816		a0 05 00	ldy #$0005	            LDY #UART_LSR
.395819		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.39581b		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.39581d		f0 fa		beq $395819	            BEQ wait_putc
.39581f		68		pla		            PLA
.395820		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.395823		97 00		sta [$0700],y	            STA [CURRUART],Y
.395825		2b		pld		            PLD
.395826		28		plp		            PLP
.395827		6b		rtl		            RTL
.395828						UART_PUTS
.395828		08		php		            PHP
.395829		e2 20		sep #$20	                SEP #$20        ; set A short
.39582b		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.39582e		f0 07		beq $395837	            BEQ done
.395830		22 05 58 39	jsl $395805	            JSL UART_PUTC
.395834		e8		inx		            INX
.395835		80 f4		bra $39582b	            BRA put_loop
.395837		28		plp		done        PLP
.395838		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.395839						JOYSTICK_SET_NES_MODE
.395839		e2 20		sep #$20	                SEP #$20        ; set A short
.39583b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39583f		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.395841		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395845		6b		rtl		          RTL
.395846						JOYSTICK_SET_SNES_MODE
.395846		e2 20		sep #$20	                SEP #$20        ; set A short
.395848		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39584c		29 fb		and #$fb	          AND #~NES_SNES_JOY
.39584e		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.395850		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395854		6b		rtl		          RTL
.395855						JOYSTICK_ENABLE_NES_SNES_PORT0
.395855		e2 20		sep #$20	                SEP #$20        ; set A short
.395857		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39585b		29 fe		and #$fe	          AND #~NES_SNES_EN0
.39585d		09 01		ora #$01	          ORA #NES_SNES_EN0
.39585f		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395863		6b		rtl		          RTL
.395864						JOYSTICK_ENABLE_NES_SNES_PORT1
.395864		e2 20		sep #$20	                SEP #$20        ; set A short
.395866		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39586a		29 fd		and #$fd	          AND #~NES_SNES_EN1
.39586c		09 02		ora #$02	          ORA #NES_SNES_EN1
.39586e		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.395872		6b		rtl		          RTL
.395873						JOYSTICK_DISABLE_NES_SNES_PORT0
.395873		e2 20		sep #$20	                SEP #$20        ; set A short
.395875		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395879		29 fe		and #$fe	          AND #~NES_SNES_EN0
.39587b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39587f		6b		rtl		          RTL
.395880						JOYSTICK_DISABLE_NES_SNES_PORT1
.395880		e2 20		sep #$20	                SEP #$20        ; set A short
.395882		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395886		29 fd		and #$fd	          AND #~NES_SNES_EN1
.395888		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.39588c		6b		rtl		          RTL
.39588d						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.39588d		e2 20		sep #$20	                SEP #$20        ; set A short
.39588f		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.395893		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.395895		c9 00		cmp #$00	          CMP #$00
.395897		f0 14		beq $3958ad	          BEQ END_OF_JOYSTICK_POLL
.395899		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.39589d		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.39589f		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.3958a3						JOYSTICK_POLLING_ISNOTOVER
.3958a3		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.3958a7		29 40		and #$40	          AND #NES_SNES_DONE
.3958a9		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.3958ab		d0 f6		bne $3958a3	          BNE JOYSTICK_POLLING_ISNOTOVER
.3958ad						END_OF_JOYSTICK_POLL
.3958ad		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.3958ae						SDC_TEST
.3958ae		8b		phb		                PHB
.3958af		0b		phd		                PHD
.3958b0		08		php		                PHP
.3958b1		48		pha		                PHA             ; begin setdbr macro
.3958b2		08		php		                PHP
.3958b3		e2 20		sep #$20	                SEP #$20        ; set A short
.3958b5		a9 00		lda #$00	                LDA #0
.3958b7		48		pha		                PHA
.3958b8		ab		plb		                PLB
.3958b9		28		plp		                PLP
.3958ba		68		pla		                PLA             ; end setdbr macro
.3958bb		48		pha		                PHA             ; begin setdp macro
.3958bc		08		php		                PHP
.3958bd		c2 20		rep #$20	                REP #$20        ; set A long
.3958bf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3958c2		5b		tcd		                TCD
.3958c3		28		plp		                PLP
.3958c4		68		pla		                PLA             ; end setdp macro
.3958c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3958c7		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.3958c9		8d 1e 00	sta $001e	                STA @w CURCOLOR
.3958cc		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.3958d0		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.3958d4		22 14 59 39	jsl $395914	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.3958d8		b0 03		bcs $3958dd	                BCS init_ok
.3958da		82 15 00	brl $3958f2	                BRL done
.3958dd		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.3958df		85 01		sta $0321	                STA BIOS_DEV
.3958e1		22 1c 3f 39	jsl $393f1c	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.3958e5		b0 03		bcs $3958ea	                BCS mount_ok
.3958e7		82 08 00	brl $3958f2	                BRL done
.3958ea		22 d3 4f 39	jsl $394fd3	mount_ok        JSL IF_DIROPEN
.3958ee		b0 02		bcs $3958f2	                BCS all_ok
.3958f0		80 00		bra $3958f2	                BRA done
.3958f2						all_ok
.3958f2		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.3958f6		28		plp		                PLP
.3958f7		2b		pld		                PLD
.3958f8		ab		plb		                PLB
.3958f9		6b		rtl		                RTL
.3958fa						SDC_WAITBUSY
.3958fa		08		php		                PHP
.3958fb		e2 20		sep #$20	                SEP #$20        ; set A short
.3958fd		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.395901		29 01		and #$01	                AND #SDC_TRANS_BUSY
.395903		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.395905		f0 f6		beq $3958fd	                BEQ wait_xact
.395907		28		plp		                PLP
.395908		6b		rtl		                RTL
.395909						SDC_RESET
.395909		08		php		                PHP
.39590a		e2 20		sep #$20	                SEP #$20        ; set A short
.39590c		a9 01		lda #$01	                LDA #1
.39590e		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.395912		28		plp		                PLP
.395913		6b		rtl		                RTL
.395914						SDC_INIT
.395914		0b		phd		                PHD
.395915		8b		phb		                PHB
.395916		08		php		                PHP
.395917		48		pha		                PHA             ; begin setdbr macro
.395918		08		php		                PHP
.395919		e2 20		sep #$20	                SEP #$20        ; set A short
.39591b		a9 00		lda #$00	                LDA #0
.39591d		48		pha		                PHA
.39591e		ab		plb		                PLB
.39591f		28		plp		                PLP
.395920		68		pla		                PLA             ; end setdbr macro
.395921		48		pha		                PHA             ; begin setdp macro
.395922		08		php		                PHP
.395923		c2 20		rep #$20	                REP #$20        ; set A long
.395925		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395928		5b		tcd		                TCD
.395929		28		plp		                PLP
.39592a		68		pla		                PLA             ; end setdp macro
.39592b		e2 20		sep #$20	                SEP #$20        ; set A short
.39592d		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395931		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395933		f0 04		beq $395939	                BEQ start_trans                     ; Yes: start the transaction
.395935		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395937		80 22		bra $39595b	                BRA set_error
.395939		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.39593b		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.39593f		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395941		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395945		22 fa 58 39	jsl $3958fa	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.395949		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.39594d		d0 07		bne $395956	                BNE ret_error                       ; Is there one? Process the error
.39594f		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.395951		28		plp		                PLP
.395952		ab		plb		                PLB
.395953		2b		pld		                PLD
.395954		38		sec		                SEC
.395955		6b		rtl		                RTL
.395956		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.395959		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.39595b		85 00		sta $0320	set_error       STA BIOS_STATUS
.39595d		28		plp		                PLP
.39595e		ab		plb		                PLB
.39595f		2b		pld		                PLD
.395960		18		clc		                CLC
.395961		6b		rtl		                RTL
.395962						SDC_GETBLOCK
.395962		0b		phd		                PHD
.395963		8b		phb		                PHB
.395964		08		php		                PHP
.395965		48		pha		                PHA             ; begin setdbr macro
.395966		08		php		                PHP
.395967		e2 20		sep #$20	                SEP #$20        ; set A short
.395969		a9 00		lda #$00	                LDA #0
.39596b		48		pha		                PHA
.39596c		ab		plb		                PLB
.39596d		28		plp		                PLP
.39596e		68		pla		                PLA             ; end setdbr macro
.39596f		48		pha		                PHA             ; begin setdp macro
.395970		08		php		                PHP
.395971		c2 20		rep #$20	                REP #$20        ; set A long
.395973		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395976		5b		tcd		                TCD
.395977		28		plp		                PLP
.395978		68		pla		                PLA             ; end setdp macro
.395979		e2 20		sep #$20	                SEP #$20        ; set A short
.39597b		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.39597f		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395981		f0 04		beq $395987	                BEQ led_on                          ; Yes: turn on the LED
.395983		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395985		80 71		bra $3959f8	                BRA ret_error
.395987		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.39598b		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.39598d		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395991		a9 00		lda #$00	                LDA #0
.395993		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395997		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.395999		0a		asl a		                ASL A
.39599a		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.39599e		a5 03		lda $0323	                LDA BIOS_LBA+1
.3959a0		2a		rol a		                ROL A
.3959a1		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.3959a5		a5 04		lda $0324	                LDA BIOS_LBA+2
.3959a7		2a		rol a		                ROL A
.3959a8		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.3959ac		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.3959ae		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.3959b2		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.3959b4		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.3959b8		22 fa 58 39	jsl $3958fa	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.3959bc		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3959c0		d0 36		bne $3959f8	                BNE ret_error                       ; Is there one? Process the error
.3959c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3959c4		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.3959c8		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.3959ca		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.3959ce		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.3959d0		c2 10		rep #$10	                REP #$10        ; set X long
.3959d2		a0 00 00	ldy #$0000	                LDY #0
.3959d5		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.3959d9		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.3959db		c8		iny		                INY                                 ; Advance to the next byte
.3959dc		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.3959df		d0 f4		bne $3959d5	                BNE loop_rd                         ; No: keep reading
.3959e1		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.3959e5		d0 11		bne $3959f8	                BNE ret_error                       ; Is there one? Process the error
.3959e7		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.3959e9		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3959ed		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.3959ef		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.3959f3		28		plp		                PLP
.3959f4		ab		plb		                PLB
.3959f5		2b		pld		                PLD
.3959f6		38		sec		                SEC
.3959f7		6b		rtl		                RTL
.3959f8		85 00		sta $0320	ret_error       STA BIOS_STATUS
.3959fa		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.3959fe		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395a00		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395a04		28		plp		                PLP
.395a05		ab		plb		                PLB
.395a06		2b		pld		                PLD
.395a07		18		clc		                CLC
.395a08		6b		rtl		                RTL
.395a09						SDC_PUTBLOCK
.395a09		0b		phd		                PHD
.395a0a		8b		phb		                PHB
.395a0b		08		php		                PHP
.395a0c		48		pha		                PHA             ; begin setdbr macro
.395a0d		08		php		                PHP
.395a0e		e2 20		sep #$20	                SEP #$20        ; set A short
.395a10		a9 00		lda #$00	                LDA #0
.395a12		48		pha		                PHA
.395a13		ab		plb		                PLB
.395a14		28		plp		                PLP
.395a15		68		pla		                PLA             ; end setdbr macro
.395a16		48		pha		                PHA             ; begin setdp macro
.395a17		08		php		                PHP
.395a18		c2 20		rep #$20	                REP #$20        ; set A long
.395a1a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.395a1d		5b		tcd		                TCD
.395a1e		28		plp		                PLP
.395a1f		68		pla		                PLA             ; end setdp macro
.395a20		e2 20		sep #$20	                SEP #$20        ; set A short
.395a22		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.395a26		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.395a28		f0 04		beq $395a2e	                BEQ check_wp                        ; Yes: check for write protect
.395a2a		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.395a2c		80 65		bra $395a93	                BRA ret_error
.395a2e		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.395a30		f0 04		beq $395a36	                BEQ led_on                          ; Yes: start the transaction
.395a32		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.395a34		80 5d		bra $395a93	                BRA ret_error
.395a36		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.395a3a		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.395a3c		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395a40		c2 10		rep #$10	                REP #$10        ; set X long
.395a42		a0 00 00	ldy #$0000	                LDY #0
.395a45		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.395a47		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.395a4b		c8		iny		                INY                                 ; Advance to the next byte
.395a4c		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.395a4f		d0 f4		bne $395a45	                BNE loop_wr                         ; No: keep writing
.395a51		a9 00		lda #$00	                LDA #0
.395a53		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.395a57		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.395a59		0a		asl a		                ASL A
.395a5a		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.395a5e		a5 03		lda $0323	                LDA BIOS_LBA+1
.395a60		2a		rol a		                ROL A
.395a61		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.395a65		a5 04		lda $0324	                LDA BIOS_LBA+2
.395a67		2a		rol a		                ROL A
.395a68		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.395a6c		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.395a6e		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.395a72		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.395a74		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.395a78		22 fa 58 39	jsl $3958fa	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.395a7c		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.395a80		d0 11		bne $395a93	                BNE ret_error                       ; Is there one? Process the error
.395a82		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.395a84		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395a88		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395a8a		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395a8e		28		plp		                PLP
.395a8f		ab		plb		                PLB
.395a90		2b		pld		                PLD
.395a91		38		sec		                SEC
.395a92		6b		rtl		                RTL
.395a93		85 00		sta $0320	ret_error       STA BIOS_STATUS
.395a95		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.395a99		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.395a9b		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.395a9f		28		plp		                PLP
.395aa0		ab		plb		                PLB
.395aa1		2b		pld		                PLD
.395aa2		18		clc		                CLC
.395aa3		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.395aa4						FDC_TEST
.395aa4		8b		phb		                    PHB
.395aa5		0b		phd		                    PHD
.395aa6		08		php		                    PHP
.395aa7		48		pha		                PHA             ; begin setdbr macro
.395aa8		08		php		                PHP
.395aa9		e2 20		sep #$20	                SEP #$20        ; set A short
.395aab		a9 00		lda #$00	                LDA #0
.395aad		48		pha		                PHA
.395aae		ab		plb		                PLB
.395aaf		28		plp		                PLP
.395ab0		68		pla		                PLA             ; end setdbr macro
.395ab1		48		pha		                PHA             ; begin setdp macro
.395ab2		08		php		                PHP
.395ab3		c2 20		rep #$20	                REP #$20        ; set A long
.395ab5		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ab8		5b		tcd		                TCD
.395ab9		28		plp		                PLP
.395aba		68		pla		                PLA             ; end setdp macro
.395abb		e2 20		sep #$20	                SEP #$20        ; set A short
.395abd		a9 f0		lda #$f0	                    LDA #$F0
.395abf		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.395ac2		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.395ac6		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.395aca		c2 30		rep #$30	                REP #$30        ; set A&X long
.395acc		22 9a 5d 39	jsl $395d9a	                    JSL FDC_Init
.395ad0		b0 03		bcs $395ad5	                    BCS init_ok
.395ad2		82 20 00	brl $395af5	                    BRL motor_off
.395ad5		22 99 64 39	jsl $396499	init_ok             JSL FDC_CHK_MEDIA
.395ad9		90 03		bcc $395ade	                    BCC no_media
.395adb		82 03 00	brl $395ae1	                    BRL is_ok1
.395ade						no_media
.395ade		82 14 00	brl $395af5	                    BRL motor_off
.395ae1		22 2c 63 39	jsl $39632c	is_ok1              JSL FDC_MOUNT
.395ae5		90 03		bcc $395aea	                    BCC mount_err
.395ae7		82 03 00	brl $395aed	                    BRL is_ok2
.395aea						mount_err
.395aea		82 08 00	brl $395af5	                    BRL motor_off
.395aed		22 01 5b 39	jsl $395b01	is_ok2              JSL FDC_TEST_PUTBLOCK
.395af1		b0 02		bcs $395af5	                    BCS all_ok
.395af3		80 00		bra $395af5	                    BRA motor_off
.395af5						all_ok
.395af5		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.395af9		22 4a 5e 39	jsl $395e4a	                    JSL FDC_Motor_Off
.395afd		28		plp		                    PLP
.395afe		2b		pld		                    PLD
.395aff		ab		plb		                    PLB
.395b00		6b		rtl		                    RTL
.395b01						FDC_TEST_PUTBLOCK
.395b01		e2 20		sep #$20	                SEP #$20        ; set A short
.395b03		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.395b05		a2 00 00	ldx #$0000	                    LDX #0
.395b08		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.395b0c		1a		inc a		                    INC A
.395b0d		e8		inx		                    INX
.395b0e		e0 00 02	cpx #$0200	                    CPX #512
.395b11		d0 f5		bne $395b08	                    BNE init_loop
.395b13		c2 20		rep #$20	                REP #$20        ; set A long
.395b15		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.395b18		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.395b1c		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.395b1f		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.395b23		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.395b26		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.395b2a		a9 00 00	lda #$0000	                    LDA #0
.395b2d		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.395b31		22 c0 62 39	jsl $3962c0	                    JSL FDC_PUTBLOCK                ; Try to write the data
.395b35		6b		rtl		                    RTL
>395b36		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>395b3e		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>395b4e		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.395b52						FDC_Check_RQM
.395b52		0b		phd		                    PHD
.395b53		08		php		                    PHP
.395b54		48		pha		                PHA             ; begin setdp macro
.395b55		08		php		                PHP
.395b56		c2 20		rep #$20	                REP #$20        ; set A long
.395b58		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395b5b		5b		tcd		                TCD
.395b5c		28		plp		                PLP
.395b5d		68		pla		                PLA             ; end setdp macro
.395b5e		e2 20		sep #$20	                SEP #$20        ; set A short
.395b60		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395b62		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395b66		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395b68		30 12		bmi $395b7c	                    BMI time_out            ; If so: signal a time out
.395b6a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395b6e		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395b70		f0 f4		beq $395b66	                    BEQ loop
.395b72		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395b74		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395b78		28		plp		                    PLP
.395b79		2b		pld		                    PLD
.395b7a		38		sec		                    SEC
.395b7b		60		rts		                    RTS
.395b7c		28		plp		time_out            PLP
.395b7d		2b		pld		                    PLD
.395b7e		18		clc		                    CLC
.395b7f		60		rts		                    RTS
.395b80						FDC_Check_DRV0_BSY
.395b80		0b		phd		                    PHD
.395b81		08		php		                    PHP
.395b82		48		pha		                PHA             ; begin setdp macro
.395b83		08		php		                PHP
.395b84		c2 20		rep #$20	                REP #$20        ; set A long
.395b86		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395b89		5b		tcd		                TCD
.395b8a		28		plp		                PLP
.395b8b		68		pla		                PLA             ; end setdp macro
.395b8c		e2 20		sep #$20	                SEP #$20        ; set A short
.395b8e		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395b90		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395b94		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395b96		30 12		bmi $395baa	                    BMI time_out            ; If so: signal a time out
.395b98		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395b9c		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.395b9e		d0 f4		bne $395b94	                    BNE loop
.395ba0		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395ba2		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395ba6		28		plp		                    PLP
.395ba7		2b		pld		                    PLD
.395ba8		38		sec		                    SEC
.395ba9		60		rts		                    RTS
.395baa		28		plp		time_out            PLP
.395bab		2b		pld		                    PLD
.395bac		18		clc		                    CLC
.395bad		60		rts		                    RTS
.395bae						FDC_Check_CMD_BSY
.395bae		0b		phd		                    PHD
.395baf		08		php		                    PHP
.395bb0		48		pha		                PHA             ; begin setdp macro
.395bb1		08		php		                PHP
.395bb2		c2 20		rep #$20	                REP #$20        ; set A long
.395bb4		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395bb7		5b		tcd		                TCD
.395bb8		28		plp		                PLP
.395bb9		68		pla		                PLA             ; end setdp macro
.395bba		e2 20		sep #$20	                SEP #$20        ; set A short
.395bbc		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395bbe		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395bc2		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395bc4		30 12		bmi $395bd8	                    BMI time_out            ; If so: signal a time out
.395bc6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395bca		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395bcc		d0 f4		bne $395bc2	                    BNE loop
.395bce		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395bd0		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395bd4		28		plp		                    PLP
.395bd5		2b		pld		                    PLD
.395bd6		38		sec		                    SEC
.395bd7		60		rts		                    RTS
.395bd8		28		plp		time_out            PLP
.395bd9		2b		pld		                    PLD
.395bda		18		clc		                    CLC
.395bdb		60		rts		                    RTS
.395bdc						FDC_Can_Read_Data
.395bdc		0b		phd		                    PHD
.395bdd		08		php		                    PHP
.395bde		48		pha		                PHA             ; begin setdp macro
.395bdf		08		php		                PHP
.395be0		c2 20		rep #$20	                REP #$20        ; set A long
.395be2		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395be5		5b		tcd		                TCD
.395be6		28		plp		                PLP
.395be7		68		pla		                PLA             ; end setdp macro
.395be8		e2 20		sep #$20	                SEP #$20        ; set A short
.395bea		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395bec		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395bf0		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395bf2		30 14		bmi $395c08	                    BMI time_out            ; If so: signal a time out
.395bf4		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395bf8		29 40		and #$40	                    AND #FDC_MSR_DIO
.395bfa		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.395bfc		d0 f2		bne $395bf0	                    BNE loop
.395bfe		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395c00		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395c04		28		plp		                    PLP
.395c05		2b		pld		                    PLD
.395c06		38		sec		                    SEC
.395c07		60		rts		                    RTS
.395c08		28		plp		time_out            PLP
.395c09		2b		pld		                    PLD
.395c0a		18		clc		                    CLC
.395c0b		60		rts		                    RTS
.395c0c						FDC_CAN_WRITE
.395c0c		0b		phd		                    PHD
.395c0d		08		php		                    PHP
.395c0e		48		pha		                PHA             ; begin setdp macro
.395c0f		08		php		                PHP
.395c10		c2 20		rep #$20	                REP #$20        ; set A long
.395c12		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395c15		5b		tcd		                TCD
.395c16		28		plp		                PLP
.395c17		68		pla		                PLA             ; end setdp macro
.395c18		e2 20		sep #$20	                SEP #$20        ; set A short
.395c1a		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.395c1c		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395c20		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.395c22		30 14		bmi $395c38	                    BMI time_out            ; If so: signal a time out
.395c24		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.395c28		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395c2a		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395c2c		d0 f2		bne $395c20	                    BNE loop
.395c2e		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.395c30		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395c34		28		plp		                    PLP
.395c35		2b		pld		                    PLD
.395c36		38		sec		                    SEC
.395c37		60		rts		                    RTS
.395c38		28		plp		time_out            PLP
.395c39		2b		pld		                    PLD
.395c3a		18		clc		                    CLC
.395c3b		60		rts		                    RTS
.395c3c						FDC_DELAY_10MS
.395c3c		da		phx		                    PHX
.395c3d		08		php		                    PHP
.395c3e		c2 10		rep #$10	                REP #$10        ; set X long
.395c40		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.395c43		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.395c44		ca		dex		                    DEX
.395c45		e0 00 00	cpx #$0000	                    CPX #0
.395c48		d0 f9		bne $395c43	                    BNE loop
.395c4a		28		plp		                    PLP
.395c4b		fa		plx		                    PLX
.395c4c		6b		rtl		                    RTL
.395c4d						FDC_COMMAND
.395c4d		da		phx		                    PHX
.395c4e		8b		phb		                    PHB
.395c4f		0b		phd		                    PHD
.395c50		08		php		                    PHP
.395c51		48		pha		                PHA             ; begin setdbr macro
.395c52		08		php		                PHP
.395c53		e2 20		sep #$20	                SEP #$20        ; set A short
.395c55		a9 00		lda #$00	                LDA #0
.395c57		48		pha		                PHA
.395c58		ab		plb		                PLB
.395c59		28		plp		                PLP
.395c5a		68		pla		                PLA             ; end setdbr macro
.395c5b		48		pha		                PHA             ; begin setdp macro
.395c5c		08		php		                PHP
.395c5d		c2 20		rep #$20	                REP #$20        ; set A long
.395c5f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395c62		5b		tcd		                TCD
.395c63		28		plp		                PLP
.395c64		68		pla		                PLA             ; end setdp macro
.395c65		22 3c 5c 39	jsl $395c3c	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.395c69		e2 30		sep #$30	                SEP #$30        ; set A&X short
.395c6b		a2 00		ldx #$00	                    LDX #0
.395c6d		a9 00		lda #$00	                    LDA #0
.395c6f		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.395c72		e8		inx		                    INX
.395c73		e0 10		cpx #$10	                    CPX #16
.395c75		d0 f8		bne $395c6f	                    BNE clr_results
.395c77		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.395c7b		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395c7d		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.395c7f		f0 04		beq $395c85	                    BEQ start_send                          ; If so, start sending
.395c81		22 9a 5d 39	jsl $395d9a	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.395c85						start_send
.395c85		e2 10		sep #$10	                SEP #$10        ; set X short
.395c87		a2 00		ldx #$00	                    LDX #0
.395c89		20 52 5b	jsr $395b52	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.395c8c		b0 03		bcs $395c91	                    BCS send_param
.395c8e		82 5e 00	brl $395cef	                    BRL time_out                            ; If there was a timeout, flag the time out
.395c91		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.395c94		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.395c98		22 3c 5c 39	jsl $395c3c	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.395c9c		e8		inx		                    INX                                     ; Advance to the next byte
.395c9d		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.395ca0		d0 e7		bne $395c89	                    BNE send_loop                           ; Keep sending until we've sent them all
.395ca2		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.395ca5		d0 03		bne $395caa	                    BNE chk_data_dir
.395ca7		82 80 00	brl $395d2a	                    BRL result_phase                        ; If 0: we just want a result
.395caa		10 3c		bpl $395ce8	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.395cac						wr_data
.395cac		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395cae		30 03		bmi $395cb3	                    BMI wr_chk_rqm
.395cb0		82 3c 00	brl $395cef	                    BRL time_out                            ; If not, raise an error
.395cb3		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.395cb7		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.395cb9		f0 f1		beq $395cac	                    BEQ wr_data_rdy
.395cbb		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.395cbd		d0 03		bne $395cc2	                    BNE wr_data_phase                       ; If so: transfer the data
.395cbf		82 68 00	brl $395d2a	                    BRL result_phase                          ; If not: it's an error
.395cc2						wr_data_phase
.395cc2		c2 10		rep #$10	                REP #$10        ; set X long
.395cc4		a0 00 00	ldy #$0000	                    LDY #0
.395cc7		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395cc9		30 03		bmi $395cce	                    BMI wr_chk_nondma
.395ccb		82 21 00	brl $395cef	                    BRL time_out                            ; If not, raise an error
.395cce		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395cd2		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395cd4		f0 54		beq $395d2a	                    BEQ result_phase                        ; If not: break out to result phase
.395cd6		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.395cd8		f0 ed		beq $395cc7	                    BEQ wr_data_loop                        ; No: keep waiting
.395cda		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.395cdc		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.395ce0		c8		iny		                    INY                                     ; Move to the next position
.395ce1		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395ce4		d0 e1		bne $395cc7	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.395ce6		80 42		bra $395d2a	                    BRA result_phase                        ; ready for the result phase
.395ce8		20 dc 5b	jsr $395bdc	rd_data             JSR FDC_Can_Read_Data
.395ceb		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.395ced		30 07		bmi $395cf6	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.395cef						time_out
.395cef		e2 20		sep #$20	                SEP #$20        ; set A short
.395cf1		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.395cf3		82 9c 00	brl $395d92	                    BRL pass_error
.395cf6		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.395cfa		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395cfc		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395cfe		d0 eb		bne $395ceb	                    BNE rd_data_rdy
.395d00		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.395d04		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.395d06		d0 03		bne $395d0b	                    BNE rd_data_phase                       ; If so: transfer the data
.395d08		82 83 00	brl $395d8e	                    BRL error                               ; If not: it's an error
.395d0b						rd_data_phase
.395d0b		c2 10		rep #$10	                REP #$10        ; set X long
.395d0d		a0 00 00	ldy #$0000	                    LDY #0
.395d10		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.395d12		10 db		bpl $395cef	                    BPL time_out                            ; If not: throw a timeout error
.395d14		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.395d18		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.395d1a		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.395d1c		d0 f2		bne $395d10	                    BNE rd_data_loop
.395d1e		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.395d22		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.395d24		c8		iny		                    INY                                     ; Move to the next position
.395d25		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.395d28		d0 e6		bne $395d10	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.395d2a		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.395d2d		f0 34		beq $395d63	                    BEQ chk_busy                            ; Then we're done
.395d2f		e2 10		sep #$10	                SEP #$10        ; set X short
.395d31		a2 00		ldx #$00	                    LDX #0
.395d33		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.395d35		22 cb 3a 39	jsl $393acb	                    JSL ISETTIMEOUT
.395d39		20 dc 5b	jsr $395bdc	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.395d3c		90 b1		bcc $395cef	                    BCC time_out                            ; If there was a time out, raise an error
.395d3e		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395d42		20 dc 5b	jsr $395bdc	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395d45		90 a8		bcc $395cef	                    BCC time_out                            ; If there was a time out, raise an error
.395d47		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.395d4b		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.395d4e		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM
.395d51		90 9c		bcc $395cef	                    BCC time_out                            ; If there was a time out, flag the error
.395d53		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.395d57		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395d59		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.395d5b		d0 06		bne $395d63	                    BNE chk_busy
.395d5d		e8		inx		                    INX                                     ; Move to the next result positions
.395d5e		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.395d61		d0 e4		bne $395d47	                    BNE read_result                         ; And keep looping until we've read all
.395d63						chk_busy
.395d63		c2 10		rep #$10	                REP #$10        ; set X long
.395d65		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.395d68		22 e1 0f 39	jsl $390fe1	                    JSL ILOOP_MS
.395d6c		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.395d70		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.395d72		f0 12		beq $395d86	                    BEQ done                                ; If not set: we're done
.395d74		20 dc 5b	jsr $395bdc	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.395d77		b0 03		bcs $395d7c	                    BCS get_result_byte
.395d79		82 73 ff	brl $395cef	                    BRL time_out                            ; If there was a time out, flag the error
.395d7c		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.395d80		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.395d83		e8		inx		                    INX
.395d84		80 dd		bra $395d63	                    BRA chk_busy                            ; And keep checking
.395d86						done
.395d86		64 20		stz $0320	                    STZ BIOS_STATUS
.395d88		28		plp		                    PLP
.395d89		2b		pld		                    PLD
.395d8a		ab		plb		                    PLB
.395d8b		fa		plx		                    PLX
.395d8c		38		sec		                    SEC
.395d8d		6b		rtl		                    RTL
.395d8e						error
.395d8e		e2 20		sep #$20	                SEP #$20        ; set A short
.395d90		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.395d92		85 20		sta $0320	pass_error          STA BIOS_STATUS
.395d94		28		plp		                    PLP
.395d95		2b		pld		                    PLD
.395d96		ab		plb		                    PLB
.395d97		fa		plx		                    PLX
.395d98		18		clc		                    CLC
.395d99		6b		rtl		                    RTL
.395d9a						FDC_Init
.395d9a		08		php		                    PHP
.395d9b		c2 10		rep #$10	                REP #$10        ; set X long
.395d9d		e2 20		sep #$20	                SEP #$20        ; set A short
.395d9f		a9 00		lda #$00	                    LDA #0
.395da1		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395da5		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.395da8		a0 00 00	ldy #$0000	                    LDY #0
.395dab		22 ee 0f 39	jsl $390fee	                    JSL IDELAY
.395daf		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.395db1		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395db5		ea		nop		                    NOP
.395db6		ea		nop		                    NOP
.395db7		ea		nop		                    NOP
.395db8		ea		nop		                    NOP
.395db9		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.395dbb		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.395dbf		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.395dc1		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.395dc5		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.395dc8		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.395dcb		22 ee 0f 39	jsl $390fee	                    JSL IDELAY
.395dcf		22 aa 5e 39	jsl $395eaa	                    JSL FDC_Sense_Int_Status
.395dd3		90 25		bcc $395dfa	                    BCC pass_failure
.395dd5		22 aa 5e 39	jsl $395eaa	                    JSL FDC_Sense_Int_Status
.395dd9		90 1f		bcc $395dfa	                    BCC pass_failure
.395ddb		22 aa 5e 39	jsl $395eaa	                    JSL FDC_Sense_Int_Status
.395ddf		90 19		bcc $395dfa	                    BCC pass_failure
.395de1		22 aa 5e 39	jsl $395eaa	                    JSL FDC_Sense_Int_Status
.395de5		90 13		bcc $395dfa	                    BCC pass_failure
.395de7		22 6c 5f 39	jsl $395f6c	                    JSL FDC_Configure_Command
.395deb		90 0d		bcc $395dfa	                    BCC pass_failure
.395ded		22 13 5f 39	jsl $395f13	                    JSL FDC_Specify_Command
.395df1		90 07		bcc $395dfa	                    BCC pass_failure
.395df3		22 16 5e 39	jsl $395e16	                    JSL FDC_Motor_On
.395df7		28		plp		                    PLP
.395df8		38		sec		                    SEC
.395df9		6b		rtl		                    RTL
.395dfa		28		plp		pass_failure        PLP
.395dfb		18		clc		                    CLC
.395dfc		6b		rtl		                    RTL
.395dfd						FDC_MOTOR_NEEDED
.395dfd		08		php		                    PHP
.395dfe		c2 20		rep #$20	                REP #$20        ; set A long
.395e00		78		sei		                    SEI                         ; Turn off interrupts
.395e01		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.395e04		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.395e08		e2 20		sep #$20	                SEP #$20        ; set A short
.395e0a		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395e0e		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.395e10		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395e14		28		plp		                    PLP
.395e15		6b		rtl		                    RTL
.395e16						FDC_Motor_On
.395e16		08		php		                    PHP
.395e17		22 fd 5d 39	jsl $395dfd	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395e1b		e2 20		sep #$20	                SEP #$20        ; set A short
.395e1d		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.395e21		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.395e23		d0 1f		bne $395e44	                    BNE done                    ; If so: skip
.395e25		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.395e27		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.395e2b		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.395e2e		90 17		bcc $395e47	                    BCC time_out
.395e30		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.395e33		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.395e36		22 ee 0f 39	jsl $390fee	                    JSL IDELAY
.395e3a		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395e3e		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.395e40		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395e44		28		plp		done                PLP
.395e45		38		sec		                    SEC
.395e46		6b		rtl		                    RTL
.395e47		28		plp		time_out            PLP                         ; Return a timeout error
.395e48		18		clc		                    CLC
.395e49		6b		rtl		                    RTL
.395e4a						FDC_Motor_Off
.395e4a		08		php		                    PHP
.395e4b		e2 20		sep #$20	                SEP #$20        ; set A short
.395e4d		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.395e4f		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.395e53		c2 20		rep #$20	                REP #$20        ; set A long
.395e55		78		sei		                    SEI                         ; Turn off interrupts
.395e56		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.395e59		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.395e5d		e2 20		sep #$20	                SEP #$20        ; set A short
.395e5f		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.395e63		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.395e65		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.395e69		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.395e6d		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.395e6f		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.395e73		28		plp		                    PLP
.395e74		6b		rtl		                    RTL
.395e75						FDC_Recalibrate_Command
.395e75		0b		phd		                    PHD
.395e76		08		php		                    PHP
.395e77		48		pha		                PHA             ; begin setdp macro
.395e78		08		php		                PHP
.395e79		c2 20		rep #$20	                REP #$20        ; set A long
.395e7b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395e7e		5b		tcd		                TCD
.395e7f		28		plp		                PLP
.395e80		68		pla		                PLA             ; end setdp macro
.395e81		22 fd 5d 39	jsl $395dfd	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.395e85		e2 20		sep #$20	                SEP #$20        ; set A short
.395e87		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.395e89		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395e8c		a5 00		lda $0300	                    LDA FDC_DRIVE
.395e8e		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.395e91		a9 02		lda #$02	                    LDA #2
.395e93		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.395e96		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.395e99		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.395e9c		22 4d 5c 39	jsl $395c4d	                    JSL FDC_COMMAND             ; Issue the command
.395ea0		90 04		bcc $395ea6	                    BCC pass_failure            ; If failure, pass the failure up
.395ea2		28		plp		                    PLP
.395ea3		2b		pld		                    PLD
.395ea4		38		sec		                    SEC
.395ea5		6b		rtl		                    RTL
.395ea6		28		plp		pass_failure        PLP
.395ea7		2b		pld		                    PLD
.395ea8		18		clc		                    CLC
.395ea9		6b		rtl		                    RTL
.395eaa						FDC_Sense_Int_Status
.395eaa		8b		phb		                    PHB
.395eab		0b		phd		                    PHD
.395eac		08		php		                    PHP
.395ead		48		pha		                PHA             ; begin setdbr macro
.395eae		08		php		                PHP
.395eaf		e2 20		sep #$20	                SEP #$20        ; set A short
.395eb1		a9 00		lda #$00	                LDA #0
.395eb3		48		pha		                PHA
.395eb4		ab		plb		                PLB
.395eb5		28		plp		                PLP
.395eb6		68		pla		                PLA             ; end setdbr macro
.395eb7		48		pha		                PHA             ; begin setdp macro
.395eb8		08		php		                PHP
.395eb9		c2 20		rep #$20	                REP #$20        ; set A long
.395ebb		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395ebe		5b		tcd		                TCD
.395ebf		28		plp		                PLP
.395ec0		68		pla		                PLA             ; end setdp macro
.395ec1		c2 30		rep #$30	                REP #$30        ; set A&X long
.395ec3		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.395ec6		22 e1 0f 39	jsl $390fe1	                    JSL ILOOP_MS
.395eca		e2 20		sep #$20	                SEP #$20        ; set A short
.395ecc		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.395ece		a9 ff		lda #$ff	                    LDA #$FF
.395ed0		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.395ed2		20 ae 5b	jsr $395bae	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.395ed5		90 30		bcc $395f07	                    BCC time_out                        ; If there was a time out, raise an error
.395ed7		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395eda		90 2b		bcc $395f07	                    BCC time_out                        ; If there was a time out, raise an error
.395edc		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.395ede		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395ee2		20 dc 5b	jsr $395bdc	                    JSR FDC_Can_Read_Data
.395ee5		90 20		bcc $395f07	                    BCC time_out                        ; If there was a time out, raise an error
.395ee7		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395eea		90 1b		bcc $395f07	                    BCC time_out                        ; If there was a time out, raise an error
.395eec		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395ef0		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.395ef2		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.395ef5		90 10		bcc $395f07	                    BCC time_out                        ; If there was a time out, raise an error
.395ef7		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.395efb		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.395efd		e2 20		sep #$20	                SEP #$20        ; set A short
.395eff		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.395f02		28		plp		                    PLP
.395f03		2b		pld		                    PLD
.395f04		ab		plb		                    PLB
.395f05		38		sec		                    SEC
.395f06		6b		rtl		                    RTL
.395f07						time_out
.395f07		e2 20		sep #$20	                SEP #$20        ; set A short
.395f09		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.395f0b		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395f0e		28		plp		                    PLP
.395f0f		2b		pld		                    PLD
.395f10		ab		plb		                    PLB
.395f11		18		clc		                    CLC
.395f12		6b		rtl		                    RTL
.395f13						FDC_Specify_Command
.395f13		8b		phb		                    PHB
.395f14		0b		phd		                    PHD
.395f15		08		php		                    PHP
.395f16		48		pha		                PHA             ; begin setdbr macro
.395f17		08		php		                PHP
.395f18		e2 20		sep #$20	                SEP #$20        ; set A short
.395f1a		a9 00		lda #$00	                LDA #0
.395f1c		48		pha		                PHA
.395f1d		ab		plb		                PLB
.395f1e		28		plp		                PLP
.395f1f		68		pla		                PLA             ; end setdbr macro
.395f20		48		pha		                PHA             ; begin setdp macro
.395f21		08		php		                PHP
.395f22		c2 20		rep #$20	                REP #$20        ; set A long
.395f24		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f27		5b		tcd		                TCD
.395f28		28		plp		                PLP
.395f29		68		pla		                PLA             ; end setdp macro
.395f2a		c2 30		rep #$30	                REP #$30        ; set A&X long
.395f2c		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395f2f		22 e1 0f 39	jsl $390fe1	                    JSL ILOOP_MS
.395f33		e2 20		sep #$20	                SEP #$20        ; set A short
.395f35		20 ae 5b	jsr $395bae	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395f38		90 26		bcc $395f60	                    BCC time_out            ; If there was a time out, raise an error
.395f3a		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395f3d		90 21		bcc $395f60	                    BCC time_out            ; If there was a time out, raise an error
.395f3f		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.395f41		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395f45		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395f48		90 16		bcc $395f60	                    BCC time_out            ; If there was a time out, raise an error
.395f4a		a9 cf		lda #$cf	                    LDA #$CF
.395f4c		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395f50		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395f53		90 0b		bcc $395f60	                    BCC time_out            ; If there was a time out, raise an error
.395f55		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.395f57		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395f5b		28		plp		                    PLP
.395f5c		2b		pld		                    PLD
.395f5d		ab		plb		                    PLB
.395f5e		38		sec		                    SEC
.395f5f		6b		rtl		                    RTL
.395f60						time_out
.395f60		e2 20		sep #$20	                SEP #$20        ; set A short
.395f62		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395f64		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395f67		28		plp		                    PLP
.395f68		2b		pld		                    PLD
.395f69		ab		plb		                    PLB
.395f6a		18		clc		                    CLC
.395f6b		6b		rtl		                    RTL
.395f6c						FDC_Configure_Command
.395f6c		8b		phb		                    PHB
.395f6d		0b		phd		                    PHD
.395f6e		08		php		                    PHP
.395f6f		48		pha		                PHA             ; begin setdbr macro
.395f70		08		php		                PHP
.395f71		e2 20		sep #$20	                SEP #$20        ; set A short
.395f73		a9 00		lda #$00	                LDA #0
.395f75		48		pha		                PHA
.395f76		ab		plb		                PLB
.395f77		28		plp		                PLP
.395f78		68		pla		                PLA             ; end setdbr macro
.395f79		48		pha		                PHA             ; begin setdp macro
.395f7a		08		php		                PHP
.395f7b		c2 20		rep #$20	                REP #$20        ; set A long
.395f7d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395f80		5b		tcd		                TCD
.395f81		28		plp		                PLP
.395f82		68		pla		                PLA             ; end setdp macro
.395f83		c2 30		rep #$30	                REP #$30        ; set A&X long
.395f85		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.395f88		22 e1 0f 39	jsl $390fe1	                    JSL ILOOP_MS
.395f8c		e2 20		sep #$20	                SEP #$20        ; set A short
.395f8e		20 ae 5b	jsr $395bae	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395f91		90 36		bcc $395fc9	                    BCC time_out            ; If there was a time out, raise an error
.395f93		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395f96		90 31		bcc $395fc9	                    BCC time_out            ; If there was a time out, raise an error
.395f98		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.395f9a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395f9e		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395fa1		90 26		bcc $395fc9	                    BCC time_out            ; If there was a time out, raise an error
.395fa3		a9 00		lda #$00	                    LDA #$00
.395fa5		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395fa9		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395fac		90 1b		bcc $395fc9	                    BCC time_out            ; If there was a time out, raise an error
.395fae		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.395fb0		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395fb4		20 52 5b	jsr $395b52	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.395fb7		90 10		bcc $395fc9	                    BCC time_out            ; If there was a time out, raise an error
.395fb9		a9 00		lda #$00	                    LDA #$00
.395fbb		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.395fbf		20 ae 5b	jsr $395bae	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.395fc2		90 05		bcc $395fc9	                    BCC time_out            ; If there was a time out, raise an error
.395fc4		28		plp		                    PLP
.395fc5		2b		pld		                    PLD
.395fc6		ab		plb		                    PLB
.395fc7		38		sec		                    SEC
.395fc8		6b		rtl		                    RTL
.395fc9						time_out
.395fc9		e2 20		sep #$20	                SEP #$20        ; set A short
.395fcb		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.395fcd		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.395fd0		28		plp		                    PLP
.395fd1		2b		pld		                    PLD
.395fd2		ab		plb		                    PLB
.395fd3		18		clc		                    CLC
.395fd4		6b		rtl		                    RTL
.395fd5						FDC_Read_ID_Command
.395fd5		8b		phb		                    PHB
.395fd6		0b		phd		                    PHD
.395fd7		08		php		                    PHP
.395fd8		48		pha		                PHA             ; begin setdbr macro
.395fd9		08		php		                PHP
.395fda		e2 20		sep #$20	                SEP #$20        ; set A short
.395fdc		a9 00		lda #$00	                LDA #0
.395fde		48		pha		                PHA
.395fdf		ab		plb		                PLB
.395fe0		28		plp		                PLP
.395fe1		68		pla		                PLA             ; end setdbr macro
.395fe2		48		pha		                PHA             ; begin setdp macro
.395fe3		08		php		                PHP
.395fe4		c2 20		rep #$20	                REP #$20        ; set A long
.395fe6		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.395fe9		5b		tcd		                TCD
.395fea		28		plp		                PLP
.395feb		68		pla		                PLA             ; end setdp macro
.395fec		e2 20		sep #$20	                SEP #$20        ; set A short
.395fee		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.395ff0		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.395ff3		a9 01		lda #$01	                    LDA #1
.395ff5		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.395ff8		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.395ffb		a9 07		lda #$07	                    LDA #7
.395ffd		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396000		22 4d 5c 39	jsl $395c4d	                    JSL FDC_COMMAND                     ; Issue the command
.396004		90 27		bcc $39602d	                    BCC pass_failure
.396006		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.396009		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.39600b		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.39600e		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.396010		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396013		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.396015		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.396018		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.39601a		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39601d		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.39601f		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396022		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.396024		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396027		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.396029		28		plp		                    PLP
.39602a		2b		pld		                    PLD
.39602b		ab		plb		                    PLB
.39602c		6b		rtl		                    RTL
.39602d		28		plp		pass_failure        PLP
.39602e		2b		pld		                    PLD
.39602f		ab		plb		                    PLB
.396030		18		clc		                    CLC
.396031		6b		rtl		                    RTL
.396032						FDC_DumpReg_Command
.396032		0b		phd		                    PHD
.396033		08		php		                    PHP
.396034		e2 20		sep #$20	                SEP #$20        ; set A short
.396036		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.396038		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39603b		a9 01		lda #$01	                    LDA #1
.39603d		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.396040		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.396043		a9 0a		lda #$0a	                    LDA #10
.396045		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.396048		22 4d 5c 39	jsl $395c4d	                    JSL FDC_COMMAND                     ; Issue the command
.39604c		90 03		bcc $396051	                    BCC pass_failure
.39604e		28		plp		                    PLP
.39604f		2b		pld		                    PLD
.396050		6b		rtl		                    RTL
.396051		28		plp		pass_failure        PLP
.396052		2b		pld		                    PLD
.396053		18		clc		                    CLC
.396054		6b		rtl		                    RTL
.396055						FDC_Seek_Track
.396055		8b		phb		                    PHB
.396056		0b		phd		                    PHD
.396057		08		php		                    PHP
.396058		48		pha		                PHA             ; begin setdbr macro
.396059		08		php		                PHP
.39605a		e2 20		sep #$20	                SEP #$20        ; set A short
.39605c		a9 00		lda #$00	                LDA #0
.39605e		48		pha		                PHA
.39605f		ab		plb		                PLB
.396060		28		plp		                PLP
.396061		68		pla		                PLA             ; end setdbr macro
.396062		48		pha		                PHA             ; begin setdp macro
.396063		08		php		                PHP
.396064		c2 20		rep #$20	                REP #$20        ; set A long
.396066		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396069		5b		tcd		                TCD
.39606a		28		plp		                PLP
.39606b		68		pla		                PLA             ; end setdp macro
.39606c		22 fd 5d 39	jsl $395dfd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396070		e2 20		sep #$20	                SEP #$20        ; set A short
.396072		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.396074		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.396077		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.396079		29 01		and #$01	                    AND #$01
.39607b		0a		asl a		                    ASL A
.39607c		0a		asl a		                    ASL A
.39607d		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.39607f		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396082		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.396084		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.396087		a9 03		lda #$03	                    LDA #3
.396089		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.39608c		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.39608f		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.396092		22 4d 5c 39	jsl $395c4d	                    JSL FDC_COMMAND                     ; Issue the command
.396096		90 05		bcc $39609d	                    BCC pass_failure
.396098		28		plp		                    PLP
.396099		2b		pld		                    PLD
.39609a		ab		plb		                    PLB
.39609b		38		sec		                    SEC
.39609c		6b		rtl		                    RTL
.39609d		28		plp		pass_failure        PLP
.39609e		2b		pld		                    PLD
.39609f		ab		plb		                    PLB
.3960a0		18		clc		                    CLC
.3960a1		6b		rtl		                    RTL
.3960a2						FDC_Read_Sector
.3960a2		8b		phb		                    PHB
.3960a3		0b		phd		                    PHD
.3960a4		08		php		                    PHP
.3960a5		48		pha		                PHA             ; begin setdbr macro
.3960a6		08		php		                PHP
.3960a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3960a9		a9 00		lda #$00	                LDA #0
.3960ab		48		pha		                PHA
.3960ac		ab		plb		                PLB
.3960ad		28		plp		                PLP
.3960ae		68		pla		                PLA             ; end setdbr macro
.3960af		48		pha		                PHA             ; begin setdp macro
.3960b0		08		php		                PHP
.3960b1		c2 20		rep #$20	                REP #$20        ; set A long
.3960b3		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3960b6		5b		tcd		                TCD
.3960b7		28		plp		                PLP
.3960b8		68		pla		                PLA             ; end setdp macro
.3960b9		22 fd 5d 39	jsl $395dfd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.3960bd		e2 20		sep #$20	                SEP #$20        ; set A short
.3960bf		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.3960c1		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.3960c3		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.3960c6		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.3960c8		29 01		and #$01	                    AND #$01
.3960ca		0a		asl a		                    ASL A
.3960cb		0a		asl a		                    ASL A
.3960cc		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.3960ce		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.3960d1		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.3960d3		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.3960d6		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.3960d8		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.3960db		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.3960dd		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.3960e0		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.3960e2		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.3960e5		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.3960e7		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.3960ea		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.3960ec		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.3960ef		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.3960f1		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.3960f4		a9 09		lda #$09	                    LDA #9
.3960f6		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.3960f9		a9 01		lda #$01	                    LDA #1
.3960fb		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.3960fe		a9 07		lda #$07	                    LDA #7
.396100		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396103		22 4d 5c 39	jsl $395c4d	command             JSL FDC_COMMAND                     ; Issue the command
.396107		08		php		                    PHP
.396108		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.39610b		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.39610d		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.396110		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.396112		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.396115		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.396117		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.39611a		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.39611c		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.39611f		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.396121		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.396124		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.396126		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.396129		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.39612b		28		plp		                    PLP
.39612c		90 04		bcc $396132	                    BCC pass_failure
.39612e		28		plp		done                PLP
.39612f		2b		pld		                    PLD
.396130		ab		plb		                    PLB
.396131		6b		rtl		                    RTL
.396132		28		plp		pass_failure        PLP
.396133		2b		pld		                    PLD
.396134		ab		plb		                    PLB
.396135		18		clc		                    CLC
.396136		6b		rtl		                    RTL
.396137						FDC_Write_Sector
.396137		8b		phb		                    PHB
.396138		0b		phd		                    PHD
.396139		08		php		                    PHP
.39613a		48		pha		                PHA             ; begin setdbr macro
.39613b		08		php		                PHP
.39613c		e2 20		sep #$20	                SEP #$20        ; set A short
.39613e		a9 00		lda #$00	                LDA #0
.396140		48		pha		                PHA
.396141		ab		plb		                PLB
.396142		28		plp		                PLP
.396143		68		pla		                PLA             ; end setdbr macro
.396144		48		pha		                PHA             ; begin setdp macro
.396145		08		php		                PHP
.396146		c2 20		rep #$20	                REP #$20        ; set A long
.396148		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39614b		5b		tcd		                TCD
.39614c		28		plp		                PLP
.39614d		68		pla		                PLA             ; end setdp macro
.39614e		e2 20		sep #$20	                SEP #$20        ; set A short
.396150		22 fd 5d 39	jsl $395dfd	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.396154		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.396156		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.396158		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.39615b		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.39615d		29 01		and #$01	                    AND #$01
.39615f		0a		asl a		                    ASL A
.396160		0a		asl a		                    ASL A
.396161		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.396163		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.396166		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.396168		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.39616b		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.39616d		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.396170		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.396172		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.396175		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.396177		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.39617a		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.39617c		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.39617f		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.396181		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.396184		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.396186		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.396189		a9 09		lda #$09	                    LDA #9
.39618b		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.39618e		a9 ff		lda #$ff	                    LDA #$FF
.396190		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.396193		a9 07		lda #$07	                    LDA #7
.396195		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.396198		22 4d 5c 39	jsl $395c4d	command             JSL FDC_COMMAND                     ; Issue the command
.39619c		08		php		                    PHP
.39619d		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.3961a0		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.3961a2		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.3961a5		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.3961a7		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.3961aa		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.3961ac		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.3961af		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.3961b1		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.3961b4		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.3961b6		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.3961b9		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.3961bb		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.3961be		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.3961c0		28		plp		check_status        PLP
.3961c1		90 04		bcc $3961c7	                    BCC pass_failure
.3961c3		28		plp		done                PLP
.3961c4		2b		pld		                    PLD
.3961c5		ab		plb		                    PLB
.3961c6		6b		rtl		                    RTL
.3961c7		28		plp		pass_failure        PLP
.3961c8		2b		pld		                    PLD
.3961c9		ab		plb		                    PLB
.3961ca		18		clc		                    CLC
.3961cb		6b		rtl		                    RTL
.3961cc						DIVIDE32
.3961cc		da		phx		                    PHX
.3961cd		5a		phy		                    PHY
.3961ce		0b		phd		                    PHD
.3961cf		08		php		                    PHP
.3961d0		48		pha		                PHA             ; begin setdp macro
.3961d1		08		php		                PHP
.3961d2		c2 20		rep #$20	                REP #$20        ; set A long
.3961d4		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.3961d7		5b		tcd		                TCD
.3961d8		28		plp		                PLP
.3961d9		68		pla		                PLA             ; end setdp macro
.3961da		c2 30		rep #$30	                REP #$30        ; set A&X long
.3961dc		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.3961de		64 0a		stz $0316	                    STZ REMAINDER+2
.3961e0		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.3961e3		06 00		asl $030c	loop                ASL DIVIDEND
.3961e5		26 02		rol $030e	                    ROL DIVIDEND+2
.3961e7		26 08		rol $0314	                    ROL REMAINDER
.3961e9		26 0a		rol $0316	                    ROL REMAINDER+2
.3961eb		a5 08		lda $0314	                    LDA REMAINDER
.3961ed		38		sec		                    SEC
.3961ee		e5 04		sbc $0310	                    SBC DIVISOR
.3961f0		a8		tay		                    TAY
.3961f1		a5 0a		lda $0316	                    LDA REMAINDER+2
.3961f3		e5 06		sbc $0312	                    SBC DIVISOR+2
.3961f5		90 06		bcc $3961fd	                    BCC skip
.3961f7		85 0a		sta $0316	                    STA REMAINDER+2
.3961f9		84 08		sty $0314	                    STY REMAINDER
.3961fb		e6 00		inc $030c	                    INC DIVIDEND
.3961fd		ca		dex		skip                DEX
.3961fe		d0 e3		bne $3961e3	                    BNE loop
.396200		28		plp		                    PLP
.396201		2b		pld		                    PLD
.396202		7a		ply		                    PLY
.396203		fa		plx		                    PLX
.396204		60		rts		                    RTS
.396205						LBA2CHS
.396205		8b		phb		                    PHB
.396206		0b		phd		                    PHD
.396207		08		php		                    PHP
.396208		48		pha		                PHA             ; begin setdbr macro
.396209		08		php		                PHP
.39620a		e2 20		sep #$20	                SEP #$20        ; set A short
.39620c		a9 00		lda #$00	                LDA #0
.39620e		48		pha		                PHA
.39620f		ab		plb		                PLB
.396210		28		plp		                PLP
.396211		68		pla		                PLA             ; end setdbr macro
.396212		48		pha		                PHA             ; begin setdp macro
.396213		08		php		                PHP
.396214		c2 20		rep #$20	                REP #$20        ; set A long
.396216		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396219		5b		tcd		                TCD
.39621a		28		plp		                PLP
.39621b		68		pla		                PLA             ; end setdp macro
.39621c		c2 30		rep #$30	                REP #$30        ; set A&X long
.39621e		a5 22		lda $0322	                    LDA BIOS_LBA
.396220		85 0c		sta $030c	                    STA DIVIDEND
.396222		a5 24		lda $0324	                    LDA BIOS_LBA+2
.396224		85 0e		sta $030e	                    STA DIVIDEND+2
.396226		a9 24 00	lda #$0024	                    LDA #36
.396229		85 10		sta $0310	                    STA DIVISOR
.39622b		64 12		stz $0312	                    STZ DIVISOR+2
.39622d		20 cc 61	jsr $3961cc	                    JSR DIVIDE32
.396230		e2 20		sep #$20	                SEP #$20        ; set A short
.396232		a5 0c		lda $030c	                    LDA DIVIDEND
.396234		85 02		sta $0302	                    STA FDC_CYLINDER
.396236		c2 20		rep #$20	                REP #$20        ; set A long
.396238		a5 14		lda $0314	                    LDA REMAINDER
.39623a		85 0c		sta $030c	                    STA DIVIDEND
.39623c		a5 16		lda $0316	                    LDA REMAINDER+2
.39623e		85 0e		sta $030e	                    STA DIVIDEND+2
.396240		a9 12 00	lda #$0012	                    LDA #18
.396243		85 10		sta $0310	                    STA DIVISOR
.396245		64 12		stz $0312	                    STZ DIVISOR+2
.396247		20 cc 61	jsr $3961cc	                    JSR DIVIDE32
.39624a		e2 20		sep #$20	                SEP #$20        ; set A short
.39624c		a5 0c		lda $030c	                    LDA DIVIDEND
.39624e		29 01		and #$01	                    AND #$01
.396250		85 01		sta $0301	                    STA FDC_HEAD
.396252		a5 14		lda $0314	                    LDA REMAINDER
.396254		1a		inc a		                    INC A
.396255		85 03		sta $0303	                    STA FDC_SECTOR
.396257		28		plp		                    PLP
.396258		2b		pld		                    PLD
.396259		ab		plb		                    PLB
.39625a		6b		rtl		                    RTL
.39625b						FDC_GETBLOCK
.39625b		8b		phb		                    PHB
.39625c		0b		phd		                    PHD
.39625d		08		php		                    PHP
.39625e		48		pha		                PHA             ; begin setdbr macro
.39625f		08		php		                PHP
.396260		e2 20		sep #$20	                SEP #$20        ; set A short
.396262		a9 00		lda #$00	                LDA #0
.396264		48		pha		                PHA
.396265		ab		plb		                PLB
.396266		28		plp		                PLP
.396267		68		pla		                PLA             ; end setdbr macro
.396268		48		pha		                PHA             ; begin setdp macro
.396269		08		php		                PHP
.39626a		c2 20		rep #$20	                REP #$20        ; set A long
.39626c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39626f		5b		tcd		                TCD
.396270		28		plp		                PLP
.396271		68		pla		                PLA             ; end setdp macro
.396272		e2 20		sep #$20	                SEP #$20        ; set A short
.396274		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.396276		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.396279		c2 30		rep #$30	                REP #$30        ; set A&X long
.39627b		22 05 62 39	jsl $396205	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.39627f		e2 20		sep #$20	                SEP #$20        ; set A short
.396281		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.396283		f0 29		beq $3962ae	                    BEQ read_failure
.396285						try_read
.396285		c2 20		rep #$20	                REP #$20        ; set A long
.396287		22 a2 60 39	jsl $3960a2	                    JSL FDC_Read_Sector         ; Read the sector
.39628b		90 14		bcc $3962a1	                    BCC retry
.39628d		e2 20		sep #$20	                SEP #$20        ; set A short
.39628f		a5 06		lda $0306	                    LDA FDC_ST0
.396291		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.396293		d0 19		bne $3962ae	                    BNE read_failure
.396295						ret_success
.396295		e2 20		sep #$20	                SEP #$20        ; set A short
.396297		a9 00		lda #$00	                    LDA #0
.396299		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.39629c		28		plp		                    PLP
.39629d		2b		pld		                    PLD
.39629e		ab		plb		                    PLB
.39629f		38		sec		                    SEC
.3962a0		6b		rtl		                    RTL
.3962a1						retry
.3962a1		e2 20		sep #$20	                SEP #$20        ; set A short
.3962a3		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.3962a6		30 13		bmi $3962bb	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.3962a8		22 9a 5d 39	jsl $395d9a	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.3962ac		80 d7		bra $396285	                    BRA try_read                ; And try the read again
.3962ae						read_failure
.3962ae		e2 20		sep #$20	                SEP #$20        ; set A short
.3962b0		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.3962b2		80 04		bra $3962b8	                    BRA ret_failure
.3962b4						seek_failure
.3962b4		e2 20		sep #$20	                SEP #$20        ; set A short
.3962b6		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.3962b8		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.3962bb		28		plp		pass_failure        PLP
.3962bc		2b		pld		                    PLD
.3962bd		ab		plb		                    PLB
.3962be		18		clc		                    CLC
.3962bf		6b		rtl		                    RTL
.3962c0						FDC_PUTBLOCK
.3962c0		8b		phb		                    PHB
.3962c1		0b		phd		                    PHD
.3962c2		08		php		                    PHP
.3962c3		48		pha		                PHA             ; begin setdbr macro
.3962c4		08		php		                PHP
.3962c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3962c7		a9 00		lda #$00	                LDA #0
.3962c9		48		pha		                PHA
.3962ca		ab		plb		                PLB
.3962cb		28		plp		                PLP
.3962cc		68		pla		                PLA             ; end setdbr macro
.3962cd		48		pha		                PHA             ; begin setdp macro
.3962ce		08		php		                PHP
.3962cf		c2 20		rep #$20	                REP #$20        ; set A long
.3962d1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3962d4		5b		tcd		                TCD
.3962d5		28		plp		                PLP
.3962d6		68		pla		                PLA             ; end setdp macro
.3962d7		e2 20		sep #$20	                SEP #$20        ; set A short
.3962d9		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.3962db		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.3962de		c2 30		rep #$30	                REP #$30        ; set A&X long
.3962e0		22 05 62 39	jsl $396205	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.3962e4		22 37 61 39	jsl $396137	retry               JSL FDC_Write_Sector        ; Write the sector
.3962e8		b0 03		bcs $3962ed	                    BCS chk_st0
.3962ea		82 28 00	brl $396315	                    BRL attempt_retry
.3962ed						chk_st0
.3962ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3962ef		a5 06		lda $0306	                    LDA FDC_ST0
.3962f1		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.3962f3		d0 0c		bne $396301	                    BNE write_failure
.3962f5						ret_success
.3962f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3962f7		a9 00		lda #$00	                    LDA #0
.3962f9		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.3962fc		28		plp		                    PLP
.3962fd		2b		pld		                    PLD
.3962fe		ab		plb		                    PLB
.3962ff		38		sec		                    SEC
.396300		6b		rtl		                    RTL
.396301						write_failure
.396301		e2 20		sep #$20	                SEP #$20        ; set A short
.396303		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.396305		89 02		bit #$02	                    BIT #FDC_ST1_NW
.396307		f0 04		beq $39630d	                    BEQ generic_err
.396309		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.39630b		80 17		bra $396324	                    BRA ret_failure
.39630d		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.39630f		d0 e4		bne $3962f5	                    BNE ret_success
.396311		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.396313		d0 e0		bne $3962f5	                    BNE ret_success
.396315						attempt_retry
.396315		e2 20		sep #$20	                SEP #$20        ; set A short
.396317		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.39631a		d0 c8		bne $3962e4	                    BNE retry                           ; And retry unless we have none left
.39631c		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.39631e		80 04		bra $396324	                    BRA ret_failure
.396320						seek_failure
.396320		e2 20		sep #$20	                SEP #$20        ; set A short
.396322		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.396324						ret_failure
.396324		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.396327		28		plp		pass_failure        PLP
.396328		2b		pld		                    PLD
.396329		ab		plb		                    PLB
.39632a		18		clc		                    CLC
.39632b		6b		rtl		                    RTL
.39632c						FDC_MOUNT
.39632c		8b		phb		                    PHB
.39632d		0b		phd		                    PHD
.39632e		08		php		                    PHP
.39632f		48		pha		                PHA             ; begin setdbr macro
.396330		08		php		                PHP
.396331		e2 20		sep #$20	                SEP #$20        ; set A short
.396333		a9 00		lda #$00	                LDA #0
.396335		48		pha		                PHA
.396336		ab		plb		                PLB
.396337		28		plp		                PLP
.396338		68		pla		                PLA             ; end setdbr macro
.396339		48		pha		                PHA             ; begin setdp macro
.39633a		08		php		                PHP
.39633b		c2 20		rep #$20	                REP #$20        ; set A long
.39633d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.396340		5b		tcd		                TCD
.396341		28		plp		                PLP
.396342		68		pla		                PLA             ; end setdp macro
.396343		22 9a 5d 39	jsl $395d9a	                    JSL FDC_INIT
.396347		e2 20		sep #$20	                SEP #$20        ; set A short
.396349		c2 10		rep #$10	                REP #$10        ; set X long
.39634b		a9 00		lda #$00	                    LDA #0
.39634d		a2 00 00	ldx #$0000	                    LDX #0
.396350		9f 00 a3 38	sta $38a300,x	zero_loop           STA DOS_SECTOR,X
.396354		e8		inx		                    INX
.396355		e0 00 02	cpx #$0200	                    CPX #512
.396358		d0 f6		bne $396350	                    BNE zero_loop
.39635a		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.39635c		85 00		sta $0300	                    STA FDC_DRIVE
.39635e		22 16 5e 39	jsl $395e16	                    JSL FDC_Motor_On                        ; Turn the motor on
.396362		c2 30		rep #$30	                REP #$30        ; set A&X long
.396364		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.396367		85 22		sta $0322	                    STA BIOS_LBA
.396369		85 24		sta $0324	                    STA BIOS_LBA+2
.39636b		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.39636e		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.396370		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396373		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.396375		22 5b 62 39	jsl $39625b	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.396379		b0 03		bcs $39637e	                    BCS parse_boot                          ; If ok: start parsing the boot record
.39637b		82 d3 00	brl $396451	                    BRL pass_failure                        ; Pass the error up the chain
.39637e						parse_boot
.39637e		e2 20		sep #$20	                SEP #$20        ; set A short
.396380		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.396382		8f 01 a0 38	sta $38a001	                    STA @l FILE_SYSTEM
.396386		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.396388		8f 02 a0 38	sta $38a002	                    STA @l PARTITION
.39638c		e2 20		sep #$20	                SEP #$20        ; set A short
.39638e		af 0d a3 38	lda $38a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.396392		8f 03 a0 38	sta $38a003	                    STA @l SECTORS_PER_CLUSTER
.396396		c2 20		rep #$20	                REP #$20        ; set A long
.396398		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.39639b		8f 04 a0 38	sta $38a004	                    STA @l FIRSTSECTOR
.39639f		8f 06 a0 38	sta $38a006	                    STA @l FIRSTSECTOR+2
.3963a3		af 16 a3 38	lda $38a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.3963a7		8f 10 a0 38	sta $38a010	                    STA @l SEC_PER_FAT
.3963ab		a9 00 00	lda #$0000	                    LDA #0
.3963ae		8f 12 a0 38	sta $38a012	                    STA @l SEC_PER_FAT+2
.3963b2		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.3963b5		8f 14 a0 38	sta $38a014	                    STA @l FAT_BEGIN_LBA
.3963b9		18		clc		                    CLC
.3963ba		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3963be		8f 18 a0 38	sta $38a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.3963c2		a9 00 00	lda #$0000	                    LDA #0
.3963c5		8f 16 a0 38	sta $38a016	                    STA @l FAT_BEGIN_LBA+2
.3963c9		8f 1a a0 38	sta $38a01a	                    STA @L FAT2_BEGIN_LBA+2
.3963cd		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.3963ce		af 18 a0 38	lda $38a018	                    LDA @l FAT2_BEGIN_LBA
.3963d2		6f 10 a0 38	adc $38a010	                    ADC @l SEC_PER_FAT
.3963d6		8f 20 a0 38	sta $38a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.3963da		a9 00 00	lda #$0000	                    LDA #0
.3963dd		8f 22 a0 38	sta $38a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.3963e1		af 11 a3 38	lda $38a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.3963e5		8f 24 a0 38	sta $38a024	                    STA @l ROOT_DIR_MAX_ENTRY
.3963e9		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.3963ea		4a		lsr a		                    LSR A
.3963eb		4a		lsr a		                    LSR A
.3963ec		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.3963ed		18		clc		                    CLC
.3963ee		6f 20 a0 38	adc $38a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.3963f2		8f 1c a0 38	sta $38a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.3963f6		a9 00 00	lda #$0000	                    LDA #0
.3963f9		8f 1e a0 38	sta $38a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.3963fd		af 13 a3 38	lda $38a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.396401		8f 08 a0 38	sta $38a008	                    STA @l SECTORCOUNT
.396405		a9 00 00	lda #$0000	                    LDA #0
.396408		8f 0a a0 38	sta $38a00a	                    STA @l SECTORCOUNT+2
.39640c		af 0e a3 38	lda $38a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.396410		8f 0c a0 38	sta $38a00c	                    STA @l NUM_RSRV_SEC
.396414		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.396417		8f 0e a0 38	sta $38a00e	                    STA @l CLUSTER_SIZE
.39641b		e2 20		sep #$20	                SEP #$20        ; set A short
.39641d		af 26 a3 38	lda $38a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.396421		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.396423		80 14		bra $396439	                    BRA no_volume_id                        ; No: there is no volume ID
.396425						is_extended
.396425		c2 20		rep #$20	                REP #$20        ; set A long
.396427		af 27 a3 38	lda $38a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.39642b		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.39642f		af 29 a3 38	lda $38a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.396433		8f 28 a0 38	sta $38a028	                    STA @l VOLUME_ID+2
.396437		80 0d		bra $396446	                    BRA ret_success
.396439						no_volume_id
.396439		c2 20		rep #$20	                REP #$20        ; set A long
.39643b		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.39643e		8f 26 a0 38	sta $38a026	                    STA @l VOLUME_ID
.396442		8f 28 a0 38	sta $38a028	                    STA @L VOLUME_ID+2
.396446						ret_success
.396446		e2 20		sep #$20	                SEP #$20        ; set A short
.396448		a9 00		lda #$00	                    LDA #0
.39644a		85 20		sta $0320	                    STA BIOS_STATUS
.39644c		28		plp		                    PLP
.39644d		2b		pld		                    PLD
.39644e		ab		plb		                    PLB
.39644f		38		sec		                    SEC
.396450		6b		rtl		                    RTL
.396451		28		plp		pass_failure        PLP
.396452		2b		pld		                    PLD
.396453		ab		plb		                    PLB
.396454		18		clc		                    CLC
.396455		6b		rtl		                    RTL
.396456						FDC_CMDBLOCK
.396456		8b		phb		                    PHB
.396457		0b		phd		                    PHD
.396458		08		php		                    PHP
.396459		48		pha		                PHA             ; begin setdbr macro
.39645a		08		php		                PHP
.39645b		e2 20		sep #$20	                SEP #$20        ; set A short
.39645d		a9 00		lda #$00	                LDA #0
.39645f		48		pha		                PHA
.396460		ab		plb		                PLB
.396461		28		plp		                PLP
.396462		68		pla		                PLA             ; end setdbr macro
.396463		48		pha		                PHA             ; begin setdp macro
.396464		08		php		                PHP
.396465		c2 20		rep #$20	                REP #$20        ; set A long
.396467		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.39646a		5b		tcd		                TCD
.39646b		28		plp		                PLP
.39646c		68		pla		                PLA             ; end setdp macro
.39646d		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39646f		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.396471		f0 0f		beq $396482	                    BEQ motor_on
.396473		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.396475		f0 11		beq $396488	                    BEQ motor_off
.396477		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.396479		f0 13		beq $39648e	                    BEQ recalibrate
.39647b		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.39647d		28		plp		                    PLP
.39647e		2b		pld		                    PLD
.39647f		ab		plb		                    PLB
.396480		38		sec		                    SEC
.396481		6b		rtl		                    RTL
.396482		22 16 5e 39	jsl $395e16	motor_on            JSL FDC_Motor_On
.396486		80 f3		bra $39647b	                    BRA ret_success
.396488		22 4a 5e 39	jsl $395e4a	motor_off           JSL FDC_Motor_Off
.39648c		80 ed		bra $39647b	                    BRA ret_success
.39648e		22 75 5e 39	jsl $395e75	recalibrate         JSL FDC_Recalibrate_Command
.396492		b0 e7		bcs $39647b	                    BCS ret_success
.396494		28		plp		pass_failure        PLP
.396495		2b		pld		                    PLD
.396496		ab		plb		                    PLB
.396497		18		clc		                    CLC
.396498		6b		rtl		                    RTL
.396499						FDC_CHK_MEDIA
.396499		0b		phd		                    PHD
.39649a		08		php		                    PHP
.39649b		48		pha		                PHA             ; begin setdp macro
.39649c		08		php		                PHP
.39649d		c2 20		rep #$20	                REP #$20        ; set A long
.39649f		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.3964a2		5b		tcd		                TCD
.3964a3		28		plp		                PLP
.3964a4		68		pla		                PLA             ; end setdp macro
.3964a5		22 16 5e 39	jsl $395e16	                    JSL FDC_Motor_On                ; Turn on the motor
.3964a9		e2 20		sep #$20	                SEP #$20        ; set A short
.3964ab		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.3964af		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.3964b1		f0 42		beq $3964f5	                    BEQ ret_true                    ; If not: assume the disk is present
.3964b3		a9 00		lda #$00	                    LDA #0
.3964b5		85 00		sta $0300	                    STA FDC_DRIVE
.3964b7		a9 00		lda #$00	                    LDA #0
.3964b9		85 01		sta $0301	                    STA FDC_HEAD
.3964bb		a9 50		lda #$50	                    LDA #80
.3964bd		85 02		sta $0302	                    STA FDC_CYLINDER
.3964bf		22 55 60 39	jsl $396055	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.3964c3		90 34		bcc $3964f9	                    BCC ret_false                   ; If fail: return false
.3964c5		c2 10		rep #$10	                REP #$10        ; set X long
.3964c7		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3964ca		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3964cd		22 ee 0f 39	jsl $390fee	                    JSL IDELAY
.3964d1		22 aa 5e 39	jsl $395eaa	                    JSL FDC_Sense_Int_Status
.3964d5		a5 06		lda $0306	                    LDA FDC_ST0
.3964d7		29 d0		and #$d0	                    AND #%11010000
.3964d9		d0 1e		bne $3964f9	                    BNE ret_false
.3964db		22 75 5e 39	jsl $395e75	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.3964df		90 18		bcc $3964f9	                    BCC ret_false                   ; If fail: return false
.3964e1		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.3964e4		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.3964e7		22 ee 0f 39	jsl $390fee	                    JSL IDELAY
.3964eb		22 aa 5e 39	jsl $395eaa	                    JSL FDC_Sense_Int_Status
.3964ef		a5 06		lda $0306	                    LDA FDC_ST0
.3964f1		29 d0		and #$d0	                    AND #%11010000
.3964f3		d0 04		bne $3964f9	                    BNE ret_false
.3964f5						ret_true
.3964f5		28		plp		                    PLP
.3964f6		2b		pld		                    PLD
.3964f7		38		sec		                    SEC
.3964f8		6b		rtl		                    RTL
.3964f9						ret_false
.3964f9		28		plp		                    PLP
.3964fa		2b		pld		                    PLD
.3964fb		18		clc		                    CLC
.3964fc		6b		rtl		                    RTL
.3964fd						FDC_WRITEVBR
.3964fd		8b		phb		                    PHB
.3964fe		0b		phd		                    PHD
.3964ff		08		php		                    PHP
.396500		48		pha		                PHA             ; begin setdbr macro
.396501		08		php		                PHP
.396502		e2 20		sep #$20	                SEP #$20        ; set A short
.396504		a9 00		lda #$00	                LDA #0
.396506		48		pha		                PHA
.396507		ab		plb		                PLB
.396508		28		plp		                PLP
.396509		68		pla		                PLA             ; end setdbr macro
.39650a		48		pha		                PHA             ; begin setdp macro
.39650b		08		php		                PHP
.39650c		c2 20		rep #$20	                REP #$20        ; set A long
.39650e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396511		5b		tcd		                TCD
.396512		28		plp		                PLP
.396513		68		pla		                PLA             ; end setdp macro
.396514		22 2c 63 39	jsl $39632c	                    JSL FDC_MOUNT               ; Mount the floppy disk
.396518		c2 30		rep #$30	                REP #$30        ; set A&X long
.39651a		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.39651d		a2 00 00	ldx #$0000	                    LDX #0
.396520		9f 00 a3 38	sta $38a300,x	clr_loop            STA DOS_SECTOR,X
.396524		e8		inx		                    INX
.396525		e8		inx		                    INX
.396526		e0 00 02	cpx #$0200	                    CPX #512
.396529		d0 f5		bne $396520	                    BNE clr_loop
.39652b		e2 20		sep #$20	                SEP #$20        ; set A short
.39652d		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.396530		bf e5 65 39	lda $3965e5,x	copy_loop           LDA FDC_VBR_BEGIN,X
.396534		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.396538		e8		inx		                    INX
.396539		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.39653c		d0 f2		bne $396530	                    BNE copy_loop
.39653e		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.396541		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.396544		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.396546		9f 00 a3 38	sta $38a300,x	                    STA DOS_SECTOR,X
.39654a		f0 07		beq $396553	                    BEQ path_copy_done
.39654c		e8		inx		                    INX
.39654d		c8		iny		                    INY
.39654e		c0 80 00	cpy #$0080	                    CPY #128
.396551		d0 f1		bne $396544	                    BNE path_copy_loop
.396553						path_copy_done
.396553		c2 20		rep #$20	                REP #$20        ; set A long
.396555		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.396558		8f fe a4 38	sta $38a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.39655c		c2 20		rep #$20	                REP #$20        ; set A long
.39655e		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.396561		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.396563		a9 38 00	lda #$0038	                    LDA #`DOS_SECTOR
.396566		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.396568		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.39656b		85 02		sta $0322	                    STA BIOS_LBA
.39656d		85 04		sta $0324	                    STA BIOS_LBA+2
.39656f		e2 20		sep #$20	                SEP #$20        ; set A short
.396571		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.396573		85 01		sta $0321	                    STA BIOS_DEV
.396575		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.396579		b0 09		bcs $396584	                    BCS ret_success
.39657b		22 4a 5e 39	jsl $395e4a	                    JSL FDC_Motor_Off
.39657f		28		plp		                    PLP                         ; Return the failure
.396580		2b		pld		                    PLD
.396581		ab		plb		                    PLB
.396582		18		clc		                    CLC
.396583		6b		rtl		                    RTL
.396584		22 4a 5e 39	jsl $395e4a	ret_success         JSL FDC_Motor_Off
.396588		e2 20		sep #$20	                SEP #$20        ; set A short
.39658a		a9 00		lda #$00	                    LDA #0
.39658c		85 00		sta $0320	                    STA BIOS_STATUS
.39658e		28		plp		                    PLP
.39658f		2b		pld		                    PLD
.396590		ab		plb		                    PLB
.396591		38		sec		                    SEC
.396592		6b		rtl		                    RTL
.396593						FDC_TIME_HANDLE
.396593		08		php		                    PHP
.396594		e2 20		sep #$20	                SEP #$20        ; set A short
.396596		af 4e a0 38	lda $38a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.39659a		d0 06		bne $3965a2	                    BNE dec_motor                   ; If not zero: decrement the timer
.39659c		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.3965a0		f0 28		beq $3965ca	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.3965a2		af 4e a0 38	lda $38a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.3965a6		3a		dec a		                    DEC A
.3965a7		8f 4e a0 38	sta $38a04e	                    STA @l FDC_MOTOR_TIMER
.3965ab		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.3965ad		d0 0b		bne $3965ba	                    BNE chk_motor_end               ; No: check to see if we're a the end
.3965af		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.3965b3		3a		dec a		                    DEC A
.3965b4		8f 4f a0 38	sta $38a04f	                    STA @l FDC_MOTOR_TIMER+1
.3965b8		80 10		bra $3965ca	                    BRA sof_timeout                 ; And move on to the next timer
.3965ba		af 4e a0 38	lda $38a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.3965be		d0 0a		bne $3965ca	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.3965c0		af 4f a0 38	lda $38a04f	                    LDA @l FDC_MOTOR_TIMER+1
.3965c4		d0 04		bne $3965ca	                    BNE sof_timeout
.3965c6		22 4a 5e 39	jsl $395e4a	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.3965ca						sof_timeout
.3965ca		e2 20		sep #$20	                SEP #$20        ; set A short
.3965cc		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.3965d0		f0 11		beq $3965e3	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.3965d2		3a		dec a		                    DEC A                           ; Count down one tick
.3965d3		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.3965d7		d0 0a		bne $3965e3	                    BNE sof_int_done                ; If not 0, we're done
.3965d9		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.3965dd		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.3965df		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.3965e3		28		plp		sof_int_done        PLP
.3965e4		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.3965e5						FDC_VBR_BEGIN
>3965e5		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>3965e8		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>3965f0		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>3965f2		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>3965f3		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>3965f5		02				num_fat             .byte 2                 ; Number of FATs
>3965f6		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>3965f8		40 0b				total_sectors       .word 2880              ; Total sectors
>3965fa		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>3965fb		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>3965fd		12 00				sec_per_track       .word 18                ; Sectors per track
>3965ff		02 00				num_head            .word 2                 ; Number of heads
>396601		00 00 00 00			ignore2             .dword 0
>396605		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>396609		00 00				ignore3             .word 0
>39660b		29				boot_signature      .byte $29
>39660c		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>396610		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>396618		20 20 20
>39661b		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.396623		80 40		bra $396665	                    BRA vbr_start
>396625						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.396665						vbr_start
.396665		c2 20		rep #$20	                REP #$20        ; set A long
.396667		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.39666a		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.39666e		a9 38 00	lda #$0038	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.396671		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.396675		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.396679		b0 0c		bcs $396687	                    BCS lock                ; If it returned success... lock up... I guess?
.39667b						error
.39667b		e2 20		sep #$20	                SEP #$20        ; set A short
.39667d		4b		phk		                    PHK                     ; Otherwise, print an error message
.39667e		ab		plb		                    PLB
.39667f		62 08 00	per $39668a	                    PER message
.396682		fa		plx		                    PLX
.396683		22 1c 10 00	jsl $00101c	                    JSL PUTS
.396687		ea		nop		lock                NOP                     ; And lock up
.396688		80 fd		bra $396687	                    BRA lock
>39668a		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>396692		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>3966a2		65 20 62 69 6e 61 72 79 2e 0d 00
.3966ad						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.3966ad						IDE_TEST
.3966ad		08		php		                PHP
.3966ae		c2 20		rep #$20	                REP #$20        ; set A long
.3966b0		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.3966b3		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.3966b7		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.3966ba		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.3966be		22 e1 67 39	jsl $3967e1	                JSL IDE_IDENTIFY
.3966c2		b0 03		bcs $3966c7	                BCS id_ok
.3966c4		82 ab 00	brl $396772	                BRL done
.3966c7						id_ok
.3966c7		c2 10		rep #$10	                REP #$10        ; set X long
.3966c9		e2 20		sep #$20	                SEP #$20        ; set A short
.3966cb		a0 28 00	ldy #$0028	                LDY #40
.3966ce		a2 36 00	ldx #$0036	                LDX #27*2
.3966d1		bf 01 a3 38	lda $38a301,x	pr_model        LDA DOS_SECTOR+1,X
.3966d5		22 18 10 00	jsl $001018	                JSL PUTC
.3966d9		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.3966dd		22 18 10 00	jsl $001018	                JSL PUTC
.3966e1		e8		inx		                INX
.3966e2		e8		inx		                INX
.3966e3		88		dey		                DEY
.3966e4		88		dey		                DEY
.3966e5		d0 ea		bne $3966d1	                BNE pr_model
.3966e7		c2 10		rep #$10	                REP #$10        ; set X long
.3966e9		e2 20		sep #$20	                SEP #$20        ; set A short
.3966eb		a0 14 00	ldy #$0014	                LDY #20
.3966ee		a2 14 00	ldx #$0014	                LDX #10*2
.3966f1		bf 01 a3 38	lda $38a301,x	pr_serial       LDA DOS_SECTOR+1,X
.3966f5		22 18 10 00	jsl $001018	                JSL PUTC
.3966f9		bf 00 a3 38	lda $38a300,x	                LDA DOS_SECTOR,X
.3966fd		22 18 10 00	jsl $001018	                JSL PUTC
.396701		e8		inx		                INX
.396702		e8		inx		                INX
.396703		88		dey		                DEY
.396704		88		dey		                DEY
.396705		d0 ea		bne $3966f1	                BNE pr_serial
.396707		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.39670b		c2 30		rep #$30	                REP #$30        ; set A&X long
.39670d		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.396710		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.396714		a9 00 00	lda #$0000	                LDA #0
.396717		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.39671b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.39671e		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.396722		a9 38 00	lda #$0038	                LDA #`DOS_SECTOR
.396725		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396729		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.39672c		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.39672f		9f 00 a3 38	sta $38a300,x	init_loop       STA DOS_SECTOR,X
.396733		e8		inx		                INX
.396734		e8		inx		                INX
.396735		e0 00 02	cpx #$0200	                CPX #512
.396738		d0 f5		bne $39672f	                BNE init_loop
.39673a		22 00 69 39	jsl $396900	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.39673e		b0 06		bcs $396746	                BCS read_sect1
.396740		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396744		80 2c		bra $396772	                BRA done
.396746		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.396749		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.39674d		a9 00 00	lda #$0000	                LDA #0
.396750		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.396754		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.396757		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.39675b		a9 38 00	lda #$0038	                LDA #`DOS_FAT_SECTORS
.39675e		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.396762		22 6f 68 39	jsl $39686f	                JSL IDE_GETBLOCK        ; Attempt to read the block
.396766		b0 06		bcs $39676e	                BCS all_ok
.396768		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.39676c		80 04		bra $396772	                BRA done
.39676e						all_ok
.39676e		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.396772		28		plp		done            PLP
.396773		6b		rtl		                RTL
.396774						IDE_INIT
.396774		e2 20		sep #$20	                SEP #$20        ; set A short
.396776		a9 00		lda #$00	              LDA #$00
.396778		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.39677c		20 9d 67	jsr $39679d	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.39677f		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.396781		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.396785		a9 01		lda #$01	              LDA #$01
.396787		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.39678b		a9 00		lda #$00	              LDA #$00
.39678d		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.396791		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.396795		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.396799		20 bb 67	jsr $3967bb	              JSR IDE_DRV_READY_NOTBUSY
.39679c		6b		rtl		              RTL
.39679d						IDE_DRIVE_BSY
.39679d		08		php		                PHP
.39679e		e2 20		sep #$20	                SEP #$20        ; set A short
.3967a0		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.3967a4		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.3967a6		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.3967a8		f0 f6		beq $3967a0	                BEQ loop
.3967aa		28		plp		                PLP
.3967ab		60		rts		                RTS
.3967ac						IDE_DRIVE_READY
.3967ac		08		php		                PHP
.3967ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3967af		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.3967b3		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.3967b5		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.3967b7		d0 f6		bne $3967af	                BNE loop
.3967b9		28		plp		                PLP
.3967ba		60		rts		                RTS
.3967bb						IDE_DRV_READY_NOTBUSY
.3967bb		08		php		                PHP
.3967bc		e2 20		sep #$20	                SEP #$20        ; set A short
.3967be		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.3967c2		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.3967c4		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.3967c6		d0 f6		bne $3967be	                BNE loop                            ; No: keep waiting
.3967c8		28		plp		ret_success     PLP                                 ; Return success
.3967c9		38		sec		                SEC
.3967ca		60		rts		                RTS
.3967cb		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.3967cf		28		plp		                PLP                                 ; Return failure
.3967d0		18		clc		                CLC
.3967d1		60		rts		                RTS
.3967d2						IDE_NOT_DRQ
.3967d2		08		php		                PHP
.3967d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3967d5		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.3967d9		29 08		and #$08	                AND #IDE_STAT_DRQ
.3967db		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.3967dd		d0 f6		bne $3967d5	                BNE loop                ; No: keep waiting
.3967df		28		plp		                PLP
.3967e0		60		rts		                RTS
.3967e1						IDE_IDENTIFY
.3967e1		5a		phy		                PHY
.3967e2		8b		phb		                PHB
.3967e3		0b		phd		                PHD
.3967e4		08		php		                PHP
.3967e5		48		pha		                PHA             ; begin setdbr macro
.3967e6		08		php		                PHP
.3967e7		e2 20		sep #$20	                SEP #$20        ; set A short
.3967e9		a9 00		lda #$00	                LDA #0
.3967eb		48		pha		                PHA
.3967ec		ab		plb		                PLB
.3967ed		28		plp		                PLP
.3967ee		68		pla		                PLA             ; end setdbr macro
.3967ef		48		pha		                PHA             ; begin setdp macro
.3967f0		08		php		                PHP
.3967f1		c2 20		rep #$20	                REP #$20        ; set A long
.3967f3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.3967f6		5b		tcd		                TCD
.3967f7		28		plp		                PLP
.3967f8		68		pla		                PLA             ; end setdp macro
.3967f9		e2 20		sep #$20	                SEP #$20        ; set A short
.3967fb		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.3967fe		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.396800		29 07		and #$07	                AND #$07
.396802		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.396804		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396808		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.39680b		e2 20		sep #$20	                SEP #$20        ; set A short
.39680d		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.39680f		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396813		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396817		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.39681b		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.39681f		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.396821		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.396825		f0 29		beq $396850	                BEQ no_media                    ; If 0: there is no drive
.396827		20 9d 67	jsr $39679d	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.39682a		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.39682d		90 2d		bcc $39685c	                BCC ret_failure                 ; If an error occurred, return it
.39682f		c2 30		rep #$30	                REP #$30        ; set A&X long
.396831		a0 00 00	ldy #$0000	                LDY #0
.396834		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.396838		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.39683a		c8		iny		                INY                             ; Move to the next position
.39683b		c8		iny		                INY
.39683c		c0 00 02	cpy #$0200	                CPY #512
.39683f		d0 f3		bne $396834	                BNE read_loop
.396841						ret_success
.396841		e2 20		sep #$20	                SEP #$20        ; set A short
.396843		a9 00		lda #$00	                LDA #0
.396845		85 00		sta $0320	                STA BIOS_STATUS
.396847		8d 06 03	sta $0306	                STA @w FDC_ST0
.39684a		28		plp		                PLP                             ; Return success
.39684b		2b		pld		                PLD
.39684c		ab		plb		                PLB
.39684d		7a		ply		                PLY
.39684e		38		sec		                SEC
.39684f		6b		rtl		                RTL
.396850						no_media
.396850		e2 20		sep #$20	                SEP #$20        ; set A short
.396852		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.396854		80 0a		bra $396860	                BRA pass_failure
.396856						not_ata
.396856		e2 20		sep #$20	                SEP #$20        ; set A short
.396858		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.39685a		80 04		bra $396860	                BRA pass_failure
.39685c						ret_failure
.39685c		e2 20		sep #$20	                SEP #$20        ; set A short
.39685e		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.396860		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.396862		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396866		8d 06 03	sta $0306	                STA @w FDC_ST0
.396869		28		plp		                PLP
.39686a		2b		pld		                PLD
.39686b		ab		plb		                PLB
.39686c		7a		ply		                PLY
.39686d		18		clc		                CLC
.39686e		6b		rtl		                RTL
.39686f						IDE_GETBLOCK
.39686f		5a		phy		                PHY
.396870		8b		phb		                PHB
.396871		0b		phd		                PHD
.396872		08		php		                PHP
.396873		48		pha		                PHA             ; begin setdbr macro
.396874		08		php		                PHP
.396875		e2 20		sep #$20	                SEP #$20        ; set A short
.396877		a9 00		lda #$00	                LDA #0
.396879		48		pha		                PHA
.39687a		ab		plb		                PLB
.39687b		28		plp		                PLP
.39687c		68		pla		                PLA             ; end setdbr macro
.39687d		48		pha		                PHA             ; begin setdp macro
.39687e		08		php		                PHP
.39687f		c2 20		rep #$20	                REP #$20        ; set A long
.396881		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396884		5b		tcd		                TCD
.396885		28		plp		                PLP
.396886		68		pla		                PLA             ; end setdp macro
.396887		e2 20		sep #$20	                SEP #$20        ; set A short
.396889		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.39688c		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.39688e		29 07		and #$07	                AND #$07
.396890		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396892		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396896		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.396899		e2 20		sep #$20	                SEP #$20        ; set A short
.39689b		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.39689d		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.3968a1		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.3968a3		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.3968a7		a5 03		lda $0323	                LDA BIOS_LBA+1
.3968a9		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.3968ad		a5 04		lda $0324	                LDA BIOS_LBA+2
.3968af		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.3968b3		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.3968b5		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.3968b9		ea		nop		                NOP                             ; Wait about 500ns
.3968ba		ea		nop		                NOP
.3968bb		ea		nop		                NOP
.3968bc		ea		nop		                NOP
.3968bd		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.3968c0		90 2b		bcc $3968ed	                BCC ret_failure                 ; If an error occurred, return it
.3968c2		e2 20		sep #$20	                SEP #$20        ; set A short
.3968c4		af 30 e8 af	lda $afe830	                LDA @l IDE_DATA                 ; Read and toss out one byte from the 8-bit interface
.3968c8		a0 00 00	ldy #$0000	                LDY #0
.3968cb		c2 20		rep #$20	                REP #$20        ; set A long
.3968cd		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.3968d1		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.3968d3		c8		iny		                INY                             ; Move to the next position
.3968d4		c8		iny		                INY
.3968d5		c0 00 02	cpy #$0200	                CPY #512
.3968d8		d0 f3		bne $3968cd	                BNE read_loop
.3968da		ea		nop		                NOP                             ; Wait about 500ns
.3968db		ea		nop		                NOP
.3968dc		ea		nop		                NOP
.3968dd		ea		nop		                NOP
.3968de						ret_success
.3968de		e2 20		sep #$20	                SEP #$20        ; set A short
.3968e0		a9 00		lda #$00	                LDA #0
.3968e2		85 00		sta $0320	                STA BIOS_STATUS
.3968e4		8d 06 03	sta $0306	                STA @w FDC_ST0
.3968e7		28		plp		                PLP                             ; Return success
.3968e8		2b		pld		                PLD
.3968e9		ab		plb		                PLB
.3968ea		7a		ply		                PLY
.3968eb		38		sec		                SEC
.3968ec		6b		rtl		                RTL
.3968ed						ret_failure
.3968ed		e2 20		sep #$20	                SEP #$20        ; set A short
.3968ef		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.3968f3		8d 06 03	sta $0306	                STA @w FDC_ST0
.3968f6		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.3968f8		85 00		sta $0320	                STA BIOS_STATUS
.3968fa		28		plp		                PLP
.3968fb		2b		pld		                PLD
.3968fc		ab		plb		                PLB
.3968fd		7a		ply		                PLY
.3968fe		18		clc		                CLC
.3968ff		6b		rtl		                RTL
.396900						IDE_PUTBLOCK
.396900		5a		phy		                PHY
.396901		8b		phb		                PHB
.396902		0b		phd		                PHD
.396903		08		php		                PHP
.396904		48		pha		                PHA             ; begin setdbr macro
.396905		08		php		                PHP
.396906		e2 20		sep #$20	                SEP #$20        ; set A short
.396908		a9 00		lda #$00	                LDA #0
.39690a		48		pha		                PHA
.39690b		ab		plb		                PLB
.39690c		28		plp		                PLP
.39690d		68		pla		                PLA             ; end setdbr macro
.39690e		48		pha		                PHA             ; begin setdp macro
.39690f		08		php		                PHP
.396910		c2 20		rep #$20	                REP #$20        ; set A long
.396912		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.396915		5b		tcd		                TCD
.396916		28		plp		                PLP
.396917		68		pla		                PLA             ; end setdp macro
.396918		e2 20		sep #$20	                SEP #$20        ; set A short
.39691a		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.39691d		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.39691f		29 07		and #$07	                AND #$07
.396921		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.396923		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.396927		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.39692a		e2 20		sep #$20	                SEP #$20        ; set A short
.39692c		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.39692e		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.396932		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.396934		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.396938		a5 03		lda $0323	                LDA BIOS_LBA+1
.39693a		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.39693e		a5 04		lda $0324	                LDA BIOS_LBA+2
.396940		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.396944		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.396946		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.39694a		ea		nop		                NOP                             ; Wait about 500ns
.39694b		ea		nop		                NOP
.39694c		ea		nop		                NOP
.39694d		ea		nop		                NOP
.39694e		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.396951		90 37		bcc $39698a	                BCC ret_failure                 ; If an error occurred, return it
.396953		c2 30		rep #$30	                REP #$30        ; set A&X long
.396955		a0 00 00	ldy #$0000	                LDY #0
.396958		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.39695a		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.39695e		c8		iny		                INY                             ; Move to the next position
.39695f		c8		iny		                INY
.396960		c0 00 02	cpy #$0200	                CPY #512
.396963		d0 f3		bne $396958	                BNE read_loop
.396965		ea		nop		                NOP                             ; Wait about 500ns
.396966		ea		nop		                NOP
.396967		ea		nop		                NOP
.396968		ea		nop		                NOP
.396969		20 bb 67	jsr $3967bb	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.39696c		90 1c		bcc $39698a	                BCC ret_failure                 ; If an error occurred, return it
.39696e		ea		nop		                NOP                             ; Wait about 500ns
.39696f		ea		nop		                NOP
.396970		ea		nop		                NOP
.396971		ea		nop		                NOP
.396972		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.396976		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.396979		d0 0f		bne $39698a	                BNE ret_failure                 ; If error: return failure
.39697b						ret_success
.39697b		e2 20		sep #$20	                SEP #$20        ; set A short
.39697d		a9 00		lda #$00	                LDA #0
.39697f		85 00		sta $0320	                STA BIOS_STATUS
.396981		8d 06 03	sta $0306	                STA @w FDC_ST0
.396984		28		plp		                PLP                             ; Return success
.396985		2b		pld		                PLD
.396986		ab		plb		                PLB
.396987		7a		ply		                PLY
.396988		38		sec		                SEC
.396989		6b		rtl		                RTL
.39698a		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.39698b		ea		nop		                NOP
.39698c		ea		nop		                NOP
.39698d		ea		nop		                NOP
.39698e		e2 20		sep #$20	                SEP #$20        ; set A short
.396990		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.396994		80 08		bra $39699e	                BRA save_error
.396996		ea		nop		                NOP
.396997		ea		nop		                NOP
.396998		ea		nop		                NOP
.396999		ea		nop		                NOP
.39699a		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.39699e		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.3969a1		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.3969a3		85 00		sta $0320	                STA BIOS_STATUS
.3969a5		28		plp		                PLP
.3969a6		2b		pld		                PLD
.3969a7		ab		plb		                PLB
.3969a8		7a		ply		                PLY
.3969a9		18		clc		                CLC
.3969aa		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.3969ab						SIMPLE_INIT_ETHERNET_CTRL
.3969ab						WaitforittobeReady:
.3969ab		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.3969af		29 01 00	and #$0001	                AND #$0001
.3969b2		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.3969b5		d0 f4		bne $3969ab	                BNE WaitforittobeReady
.3969b7		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.3969bb		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.3969bf		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.3969c3		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.3969c7		a9 00 00	lda #$0000	                LDA #$0000
.3969ca		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.3969ce		a9 00 70	lda #$7000	                LDA #$7000
.3969d1		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.3969d5		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.3969d8		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.3969dc		a9 0b 00	lda #$000b	                LDA #$000B
.3969df		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.3969e3		a9 00 00	lda #$0000	                LDA #$0000
.3969e6		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.3969ea		20 1e 6a	jsr $396a1e	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.3969ed		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.3969f0		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.3969f4		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.3969f7		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.3969fb		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.3969fe		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396a02		20 1e 6a	jsr $396a1e	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396a05		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.396a08		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.396a0c		a9 0c 00	lda #$000c	                LDA #$000C
.396a0f		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.396a13		a9 04 00	lda #$0004	                LDA #$0004
.396a16		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.396a1a		20 1e 6a	jsr $396a1e	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.396a1d		6b		rtl		                RTL
.396a1e						MAC_ACCESS_WAIT_FOR_COMPLETION
.396a1e		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.396a21		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.396a25						WaitForCompletion:
.396a25		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.396a29		29 00 80	and #$8000	                AND #$8000
.396a2c		c9 00 80	cmp #$8000	                CMP #$8000
.396a2f		f0 f4		beq $396a25	                BEQ WaitForCompletion
.396a31		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.396a32						INIT_EVID_VID_MODE
.396a32		e2 20		sep #$20	                SEP #$20        ; set A short
.396a34		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.396a36		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.396a3a		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.396a3c		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.396a40		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.396a42		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.396a46		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.396a4a		a9 20		lda #$20	                LDA #$20
.396a4c		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.396a50		a9 00		lda #$00	                LDA #$00
.396a52		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.396a56		a9 20		lda #$20	                LDA #$20
.396a58		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.396a5c		22 5e 6b 39	jsl $396b5e	                JSL INIT_EVID_LUT
.396a60		22 47 6b 39	jsl $396b47	                JSL INIT_EVID_FONTSET
.396a64		22 82 6b 39	jsl $396b82	                JSL INIT_EVID_CURSOR
.396a68		c2 30		rep #$30	                REP #$30        ; set A&X long
.396a6a		a9 62 00	lda #$0062	                LDA #(100-2)
.396a6d		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.396a71		a9 49 00	lda #$0049	                LDA #(75-2)
.396a74		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.396a78		a9 64 00	lda #$0064	                LDA #100
.396a7b		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.396a7f		a9 4b 00	lda #$004b	                LDA #75
.396a82		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.396a86		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.396a89		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.396a8d		c2 30		rep #$30	                REP #$30        ; set A&X long
.396a8f		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.396a92		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.396a96		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.396a9a		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.396a9d		8d 76 00	sta $0076	                STA EVID_COLORPOS
.396aa0		e2 20		sep #$20	                SEP #$20        ; set A short
.396aa2		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.396aa4		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.396aa8		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.396aac		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.396aae		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.396ab2		6b		rtl		                RTL
>396ab3		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>396abb		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>396acb		0c 1b
>396acd		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>396ad5		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>396ae5		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>396af5		56 49 44 0d 00
>396afa		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>396b02		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.396b12						EVID_GREET
.396b12		48		pha		                PHA
.396b13		da		phx		                PHX
.396b14		08		php		                PHP
.396b15		e2 20		sep #$20	                SEP #$20        ; set A short
.396b17		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.396b1b		f0 26		beq $396b43	                BEQ done                        ; If not, skip this routine
.396b1d		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.396b1f		22 3c 10 00	jsl $00103c	                JSL SETOUT
.396b23		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.396b27		c2 10		rep #$10	                REP #$10        ; set X long
.396b29		8b		phb		                PHB                             ; Print the messages
.396b2a		a9 39		lda #$39	                LDA #`EVID_DEV_RDY0
.396b2c		48		pha		                PHA
.396b2d		ab		plb		                PLB
.396b2e		a2 b3 6a	ldx #$6ab3	                LDX #<>EVID_DEV_RDY0
.396b31		22 17 07 39	jsl $390717	                JSL IPRINT
.396b35		a2 fa 6a	ldx #$6afa	                LDX #<>EVID_DEV_RDY1
.396b38		22 17 07 39	jsl $390717	                JSL IPRINT
.396b3c		ab		plb		                PLB
.396b3d		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.396b3f		22 3c 10 00	jsl $00103c	                JSL SETOUT
.396b43		28		plp		done            PLP
.396b44		fa		plx		                PLX
.396b45		68		pla		                PLA
.396b46		6b		rtl		                RTL
.396b47						INIT_EVID_FONTSET
.396b47		e2 20		sep #$20	                SEP #$20        ; set A short
.396b49		c2 10		rep #$10	                REP #$10        ; set X long
.396b4b		a2 00 00	ldx #$0000	                LDX #$0000
.396b4e						initFontsetbranch0
.396b4e		bf 00 00 3f	lda $3f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.396b52		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.396b56		e8		inx		                INX
.396b57		e0 00 08	cpx #$0800	                CPX #$0800
.396b5a		d0 f2		bne $396b4e	                BNE initFontsetbranch0
.396b5c		ea		nop		                NOP
.396b5d		6b		rtl		                RTL
.396b5e						INIT_EVID_LUT
.396b5e		e2 20		sep #$20	                SEP #$20        ; set A short
.396b60		e2 10		sep #$10	                SEP #$10        ; set X short
.396b62		a2 00		ldx #$00	                LDX	#$00
.396b64		bf 13 83 39	lda $398313,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.396b68		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.396b6c		e8		inx		                inx
.396b6d		e0 40		cpx #$40	                cpx #$40
.396b6f		d0 f3		bne $396b64	                bne lutinitloop0
.396b71		a2 00		ldx #$00	                LDX	#$00
.396b73		bf 53 83 39	lda $398353,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.396b77		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.396b7b		e8		inx		                INX
.396b7c		e0 40		cpx #$40	                CPX #$40
.396b7e		d0 f3		bne $396b73	                bne lutinitloop1
.396b80		ea		nop		                NOP
.396b81		6b		rtl		                RTL
.396b82						INIT_EVID_CURSOR
.396b82		08		php		                PHP
.396b83		e2 20		sep #$20	                SEP #$20        ; set A short
.396b85		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.396b87		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.396b8b		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.396b8d		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.396b91		c2 30		rep #$30	                REP #$30        ; set A&X long
.396b93		a9 00 00	lda #$0000	                LDA #$0000;
.396b96		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.396b9a		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.396b9e		28		plp		                PLP
.396b9f		6b		rtl		                RTL
.396ba0						INIT_EVID_CLRSCREEN
.396ba0		08		php		                PHP
.396ba1		e2 20		sep #$20	                SEP #$20        ; set A short
.396ba3		c2 10		rep #$10	                REP #$10        ; set X long
.396ba5		a2 00 00	ldx #$0000	                LDX #$0000		        ; Only Use One Pointer
.396ba8		a9 20		lda #$20	                LDA #$20		        ; Fill the Entire Screen with Space
.396baa		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA @l EVID_TEXT_MEM,X
.396bae		e8		inx		                inx
.396baf		e0 00 20	cpx #$2000	                cpx #$2000
.396bb2		d0 f6		bne $396baa	                bne iclearloop0
.396bb4		a2 00 00	ldx #$0000	                LDX	#$0000		        ; Only Use One Pointer
.396bb7		a9 f0		lda #$f0	                LDA #$F0		        ; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.396bb9		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA @l EVID_COLOR_MEM,X
.396bbd		e8		inx		                inx
.396bbe		e0 00 20	cpx #$2000	                cpx #$2000
.396bc1		d0 f6		bne $396bb9	                bne iclearloop1
.396bc3		28		plp		                PLP
.396bc4		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.396bc5						ANSI_INIT
.396bc5		da		phx		                    PHX
.396bc6		5a		phy		                    PHY
.396bc7		8b		phb		                    PHB
.396bc8		0b		phd		                    PHD
.396bc9		08		php		                    PHP
.396bca		c2 30		rep #$30	                REP #$30        ; set A&X long
.396bcc		a0 00 00	ldy #$0000	                    LDY #0
.396bcf		22 7b 6c 39	jsl $396c7b	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.396bd3		e2 20		sep #$20	                SEP #$20        ; set A short
.396bd5		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.396bd9		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.396bdb		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.396bdd		d0 1d		bne $396bfc	                    BNE no_evid
.396bdf		c2 20		rep #$20	                REP #$20        ; set A long
.396be1		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.396be5		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.396be8		d0 12		bne $396bfc	                    BNE no_evid                     ; No: mark the EVID screen as not present
.396bea		e2 20		sep #$20	                SEP #$20        ; set A short
.396bec		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.396bee		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.396bf2		a0 01 00	ldy #$0001	                    LDY #1
.396bf5		22 7b 6c 39	jsl $396c7b	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.396bf9		80 09		bra $396c04	                    BRA done
.396bfb		00		brk #		                    BRK
.396bfc						no_evid
.396bfc		e2 20		sep #$20	                SEP #$20        ; set A short
.396bfe		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.396c00		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.396c04		28		plp		done                PLP
.396c05		2b		pld		                    PLD
.396c06		ab		plb		                    PLB
.396c07		7a		ply		                    PLY
.396c08		fa		plx		                    PLX
.396c09		6b		rtl		                    RTL
.396c0a						ANSI_INIT_LUTS
.396c0a		08		php		                    PHP
.396c0b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396c0d		a2 00		ldx #$00	                    LDX #0
.396c0f		bf 3b 6c 39	lda $396c3b,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.396c13		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.396c17		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.396c1b		e8		inx		                    INX
.396c1c		e0 40		cpx #$40	                    CPX #4*16
.396c1e		d0 ef		bne $396c0f	                    BNE vicky_loop
.396c20		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.396c24		f0 13		beq $396c39	                    BEQ done                        ; If not, we're done
.396c26		a2 00		ldx #$00	                    LDX #0
.396c28		bf 3b 6c 39	lda $396c3b,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.396c2c		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.396c30		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.396c34		e8		inx		                    INX
.396c35		e0 40		cpx #$40	                    CPX #4*16
.396c37		d0 ef		bne $396c28	                    BNE evid_loop
.396c39		28		plp		done                PLP
.396c3a		6b		rtl		                    RTL
.396c3b						ANSI_TEXT_LUT
>396c3b		00 00 00 00			                    .byte 0, 0, 0, 0
>396c3f		00 00 80 00			                    .byte 0, 0, 128, 0
>396c43		00 80 00 00			                    .byte 0, 128, 0, 0
>396c47		00 80 80 00			                    .byte 0, 128, 128, 0
>396c4b		80 00 00 00			                    .byte 128, 0, 0, 0
>396c4f		80 00 80 00			                    .byte 128, 0, 128, 0
>396c53		80 80 00 00			                    .byte 128, 128, 0, 0
>396c57		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>396c5b		80 80 80 00			                    .byte 128, 128, 128, 0
>396c5f		00 00 ff 00			                    .byte 0, 0, 255, 0
>396c63		00 ff 00 00			                    .byte 0, 255, 0, 0
>396c67		00 ff ff 00			                    .byte 0, 255, 255, 0
>396c6b		ff 00 00 00			                    .byte 255, 0, 0, 0
>396c6f		00 7f fc 00			                    .byte 0, 127, 252, 0
>396c73		ff ff 00 00			                    .byte 255, 255, 0, 0
>396c77		ff ff ff 00			                    .byte 255, 255, 255, 0
.396c7b						INIT_SCREEN_Y
.396c7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.396c7d		c0 00 00	cpy #$0000	                    CPY #0
.396c80		f0 06		beq $396c88	                    BEQ setdp_0
.396c82		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.396c85		5b		tcd		                    TCD
.396c86		80 04		bra $396c8c	                    BRA set_addresses
.396c88		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.396c8b		5b		tcd		                    TCD
.396c8c		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.396c8d		0a		asl a		                    ASL A
.396c8e		0a		asl a		                    ASL A
.396c8f		aa		tax		                    TAX
.396c90		bf cb 6c 39	lda $396ccb,x	                    LDA @l text_address,X
.396c94		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.396c96		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.396c98		e2 20		sep #$20	                SEP #$20        ; set A short
.396c9a		bf cd 6c 39	lda $396ccd,x	                    LDA @l text_address+2,X
.396c9e		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.396ca0		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.396ca2		c2 20		rep #$20	                REP #$20        ; set A long
.396ca4		bf d3 6c 39	lda $396cd3,x	                    LDA @l color_address,X
.396ca8		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.396caa		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.396cac		e2 20		sep #$20	                SEP #$20        ; set A short
.396cae		bf d5 6c 39	lda $396cd5,x	                    LDA @l color_address+2,X
.396cb2		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.396cb4		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.396cb6		c2 20		rep #$20	                REP #$20        ; set A long
.396cb8		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.396cba		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.396cbc		e2 20		sep #$20	                SEP #$20        ; set A short
.396cbe		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.396cc0		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.396cc2		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.396cc4		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.396cc6		22 14 6d 39	jsl $396d14	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.396cca		6b		rtl		                    RTL
>396ccb		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>396cd3		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.396cdb						ANSI_SETSIZES
.396cdb		48		pha		                    PHA
.396cdc		da		phx		                    PHX
.396cdd		5a		phy		                    PHY
.396cde		0b		phd		                    PHD
.396cdf		08		php		                    PHP
.396ce0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396ce2		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.396ce6		48		pha		                    PHA
.396ce7		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.396ce9		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.396ced		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.396cf1		a0 00		ldy #$00	                    LDY #0
.396cf3		22 14 6d 39	jsl $396d14	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.396cf7		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.396cf9		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.396cfd		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.396d01		b0 06		bcs $396d09	                    BCS done                        ; Not present, just return
.396d03		a0 01		ldy #$01	                    LDY #1
.396d05		22 14 6d 39	jsl $396d14	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.396d09		68		pla		done                PLA
.396d0a		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.396d0e		28		plp		                    PLP
.396d0f		2b		pld		                    PLD
.396d10		7a		ply		                    PLY
.396d11		fa		plx		                    PLX
.396d12		68		pla		                    PLA
.396d13		6b		rtl		                    RTL
.396d14						ANSI_SETSIZE_Y
.396d14		08		php		                    PHP
.396d15		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396d17		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396d19		f0 06		beq $396d21	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.396d1b		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.396d1f		80 04		bra $396d25	                    BRA resolution
.396d21		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.396d25		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.396d27		0a		asl a		                    ASL A
.396d28		aa		tax		                    TAX                                 ; Index to the col/line count in X
.396d29		c2 20		rep #$20	                REP #$20        ; set A long
.396d2b		bf c7 6d 39	lda $396dc7,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.396d2f		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.396d31		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.396d33		bf cf 6d 39	lda $396dcf,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.396d37		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.396d39		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.396d3b		e2 20		sep #$20	                SEP #$20        ; set A short
.396d3d		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396d3f		f0 06		beq $396d47	                    BEQ vky_border                      ; Yes: get the border from Vicky
.396d41		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.396d45		80 04		bra $396d4b	                    BRA border
.396d47		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.396d4b		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.396d4d		f0 76		beq $396dc5	                    BEQ done                            ; No border... the sizes are correct now
.396d4f		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396d51		f0 06		beq $396d59	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.396d53		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.396d57		80 04		bra $396d5d	                    BRA get_border_x_size
.396d59		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.396d5d		29 3f		and #$3f	get_border_x_size   AND #$3F
.396d5f		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.396d61		d0 04		bne $396d67	                    BNE frac_width
.396d63		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.396d64		4a		lsr a		                    LSR A
.396d65		80 03		bra $396d6a	                    BRA store_width
.396d67		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.396d68		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.396d69		1a		inc a		                    INC A
.396d6a		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.396d6c		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.396d6e		e2 20		sep #$20	                SEP #$20        ; set A short
.396d70		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.396d72		f0 0c		beq $396d80	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.396d74		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.396d78		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.396d7a		f0 04		beq $396d80	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.396d7c		c2 20		rep #$20	                REP #$20        ; set A long
.396d7e		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.396d80						adjust_width
.396d80		c2 20		rep #$20	                REP #$20        ; set A long
.396d82		38		sec		                    SEC
.396d83		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.396d85		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.396d87		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.396d89		e2 20		sep #$20	                SEP #$20        ; set A short
.396d8b		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.396d8d		f0 06		beq $396d95	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.396d8f		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.396d93		80 04		bra $396d99	                    BRA get_border_y_size
.396d95		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.396d99		29 3f		and #$3f	get_border_y_size   AND #$3F
.396d9b		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.396d9d		d0 04		bne $396da3	                    BNE frac_height
.396d9f		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.396da0		4a		lsr a		                    LSR A
.396da1		80 03		bra $396da6	                    BRA store_height
.396da3		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.396da4		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.396da5		1a		inc a		                    INC A
.396da6		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.396da8		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.396daa		e2 20		sep #$20	                SEP #$20        ; set A short
.396dac		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.396dae		f0 0c		beq $396dbc	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.396db0		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.396db4		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.396db6		f0 04		beq $396dbc	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.396db8		c2 20		rep #$20	                REP #$20        ; set A long
.396dba		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.396dbc						adjust_height
.396dbc		c2 20		rep #$20	                REP #$20        ; set A long
.396dbe		38		sec		                    SEC
.396dbf		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.396dc1		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.396dc3		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.396dc5		28		plp		done                PLP
.396dc6		6b		rtl		                    RTL
>396dc7		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>396dcf		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.396dd7						ANSI_SETDEVICE
.396dd7		48		pha		                    PHA
.396dd8		08		php		                    PHP
.396dd9		e2 20		sep #$20	                SEP #$20        ; set A short
.396ddb		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.396ddf		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.396de1		f0 08		beq $396deb	                    BEQ console                     ; Yes: point to the console
.396de3		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.396de5		f0 0b		beq $396df2	                    BEQ evid                        ; Check to see if the EVID is present
.396de7		28		plp		bad_device          PLP
.396de8		68		pla		                    PLA
.396de9		38		sec		                    SEC
.396dea		6b		rtl		                    RTL
.396deb						console
.396deb		c2 20		rep #$20	                REP #$20        ; set A long
.396ded		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.396df0		80 0d		bra $396dff	                    BRA set_dp
.396df2						evid
.396df2		e2 20		sep #$20	                SEP #$20        ; set A short
.396df4		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.396df8		f0 ed		beq $396de7	                    BEQ bad_device                  ; No: return that the device is bad
.396dfa		c2 20		rep #$20	                REP #$20        ; set A long
.396dfc		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.396dff		5b		tcd		set_dp              TCD
.396e00		28		plp		                    PLP
.396e01		68		pla		                    PLA
.396e02		18		clc		                    CLC
.396e03		6b		rtl		                    RTL
.396e04						ANSI_PUTC
.396e04		da		phx		                    PHX
.396e05		5a		phy		                    PHY
.396e06		0b		phd		                    PHD
.396e07		08		php		                    PHP
.396e08		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396e0a		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.396e0e		90 03		bcc $396e13	                    BCC get_state               ; If valid, check the current state
.396e10		82 9d 00	brl $396eb0	                    BRL done                    ; If invalid, just return
.396e13		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.396e15		f0 0c		beq $396e23	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.396e17		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.396e19		f0 21		beq $396e3c	                    BEQ do_st_escape
.396e1b		e0 02		cpx #$02	                    CPX #ST_CSI
.396e1d		f0 3f		beq $396e5e	                    BEQ do_st_csi
.396e1f		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.396e21		80 06		bra $396e29	                    BRA print_raw
.396e23		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.396e25		f0 09		beq $396e30	                    BEQ go_escape               ; Yes, handle the ESC
.396e27		90 0d		bcc $396e36	                    BLT do_control              ; If less than, handle as a control code
.396e29		22 91 6f 39	jsl $396f91	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.396e2d		82 80 00	brl $396eb0	                    BRL done
.396e30		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.396e32		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.396e34		80 7a		bra $396eb0	                    BRA done
.396e36		22 48 6f 39	jsl $396f48	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.396e3a		80 74		bra $396eb0	                    BRA done
.396e3c		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.396e3e		f0 08		beq $396e48	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.396e40		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.396e42		d0 0a		bne $396e4e	                    BNE chk_csi                 ; No: check to see if we have a CSI
.396e44		22 53 10 39	jsl $391053	                    JSL SHOW_CREDITS            ; Yes: show the credits
.396e48		a9 00		lda #$00	go_init             LDA #ST_INIT
.396e4a		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.396e4c		80 62		bra $396eb0	                    BRA done
.396e4e		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.396e50		d0 cd		bne $396e1f	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.396e52		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.396e54		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.396e56		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.396e58		a9 02		lda #$02	                    LDA #ST_CSI
.396e5a		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.396e5c		80 52		bra $396eb0	                    BRA done
.396e5e		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.396e60		90 1d		bcc $396e7f	                    BLT csi_not_digit
.396e62		c9 3a		cmp #$3a	                    CMP #'9'+1
.396e64		b0 19		bcs $396e7f	                    BGE csi_not_digit
.396e66		38		sec		                    SEC                         ; Have digit... convert to a number
.396e67		e9 30		sbc #$30	                    SBC #'0'
.396e69		48		pha		                    PHA                         ; Save it
.396e6a		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.396e6c		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.396e6e		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.396e70		0a		asl a		                    ASL A                       ; A := arg * 4
.396e71		0a		asl a		                    ASL A                       ; A := arg * 8
.396e72		18		clc		                    CLC
.396e73		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.396e75		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.396e77		18		clc		                    CLC
.396e78		68		pla		                    PLA                         ; Get the digit back
.396e79		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.396e7b		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.396e7d		80 31		bra $396eb0	                    BRA done                    ; And we're done with this particular character
.396e7f		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.396e81		d0 0e		bne $396e91	                    BNE csi_not_sep
.396e83		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.396e85		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.396e87		d0 03		bne $396e8c	                    BNE csi_next_arg            ; No: move to the next argument
.396e89		82 93 ff	brl $396e1f	                    BRL pr_and_reset            ; Yes: print and reset state
.396e8c		1a		inc a		csi_next_arg        INC A
.396e8d		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.396e8f		80 1f		bra $396eb0	                    BRA done                    ; And we're done with this character
.396e91		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.396e93		90 0a		bcc $396e9f	                    BLT csi_not_upper
.396e95		c9 5b		cmp #$5b	                    CMP #'Z'+1
.396e97		b0 06		bcs $396e9f	                    BGE csi_not_upper
.396e99		22 c0 6e 39	jsl $396ec0	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.396e9d		80 11		bra $396eb0	                    BRA done
.396e9f		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.396ea1		90 0a		bcc $396ead	                    BLT csi_not_lower
.396ea3		c9 7b		cmp #$7b	                    CMP #'z'+1
.396ea5		b0 06		bcs $396ead	                    BGE csi_not_lower
.396ea7		22 05 6f 39	jsl $396f05	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.396eab		80 03		bra $396eb0	                    BRA done
.396ead		82 6f ff	brl $396e1f	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.396eb0		28		plp		done                PLP
.396eb1		2b		pld		                    PLD
.396eb2		7a		ply		                    PLY
.396eb3		fa		plx		                    PLX
.396eb4		6b		rtl		                    RTL
.396eb5						ANSI_INVALID
.396eb5		08		php		                    PHP
.396eb6		e2 20		sep #$20	                SEP #$20        ; set A short
.396eb8		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.396eba		22 91 6f 39	jsl $396f91	                    JSL ANSI_PUTRAWC            ; Print the character
.396ebe		28		plp		                    PLP
.396ebf		6b		rtl		                    RTL
.396ec0						ANSI_ANSI_UPPER
.396ec0		08		php		                    PHP
.396ec1		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396ec3		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.396ec5		38		sec		                    SEC
.396ec6		e9 40		sbc #$40	                    SBC #'@'
.396ec8		0a		asl a		                    ASL A
.396ec9		aa		tax		                    TAX
.396eca		fc cf 6e	jsr ($396ecf,x)	                    JSR (ansi_table,X)
.396ecd		28		plp		                    PLP
.396ece		6b		rtl		                    RTL
>396ecf		29 72				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>396ed1		ac 6f				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>396ed3		c0 6f				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>396ed5		d4 6f				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>396ed7		e8 6f				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>396ed9		b5 6e				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>396edb		b5 6e				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>396edd		b5 6e				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>396edf		fc 6f				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>396ee1		b5 6e				                    .word <>ANSI_INVALID    ; 'I'
>396ee3		7b 71				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>396ee5		d8 71				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>396ee7		b5 6e				                    .word <>ANSI_INVALID    ; 'L'
>396ee9		b5 6e				                    .word <>ANSI_INVALID    ; 'M'
>396eeb		b5 6e				                    .word <>ANSI_INVALID    ; 'N'
>396eed		b5 6e				                    .word <>ANSI_INVALID    ; 'O'
>396eef		6d 72				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>396ef1		b5 6e				                    .word <>ANSI_INVALID    ; 'Q'
>396ef3		b5 6e				                    .word <>ANSI_INVALID    ; 'R'
>396ef5		b5 6e				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>396ef7		b5 6e				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>396ef9		b5 6e				                    .word <>ANSI_INVALID    ; 'U'
>396efb		b5 6e				                    .word <>ANSI_INVALID    ; 'V'
>396efd		b5 6e				                    .word <>ANSI_INVALID    ; 'W'
>396eff		b5 6e				                    .word <>ANSI_INVALID    ; 'X'
>396f01		b5 6e				                    .word <>ANSI_INVALID    ; 'Y'
>396f03		b5 6e				                    .word <>ANSI_INVALID    ; 'Z'
.396f05						ANSI_ANSI_LOWER
.396f05		08		php		                    PHP
.396f06		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396f08		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.396f0a		38		sec		                    SEC
.396f0b		e9 61		sbc #$61	                    SBC #'a'
.396f0d		0a		asl a		                    ASL A
.396f0e		aa		tax		                    TAX
.396f0f		fc 14 6f	jsr ($396f14,x)	                    JSR (ansi_table,X)
.396f12		28		plp		                    PLP
.396f13		6b		rtl		                    RTL
>396f14		b5 6e				ansi_table          .word <>ANSI_INVALID    ; 'a'
>396f16		b5 6e				                    .word <>ANSI_INVALID    ; 'b'
>396f18		b5 6e				                    .word <>ANSI_INVALID    ; 'c'
>396f1a		b5 6e				                    .word <>ANSI_INVALID    ; 'd'
>396f1c		b5 6e				                    .word <>ANSI_INVALID    ; 'e'
>396f1e		b5 6e				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>396f20		b5 6e				                    .word <>ANSI_INVALID    ; 'g'
>396f22		15 70				                    .word <>ANSI_SET_MODE   ; 'h'
>396f24		b5 6e				                    .word <>ANSI_INVALID    ; 'i'
>396f26		b5 6e				                    .word <>ANSI_INVALID    ; 'j'
>396f28		b5 6e				                    .word <>ANSI_INVALID    ; 'k'
>396f2a		52 70				                    .word <>ANSI_RESET_MODE ; 'l'
>396f2c		8f 70				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>396f2e		b5 6e				                    .word <>ANSI_INVALID    ; 'n'
>396f30		b5 6e				                    .word <>ANSI_INVALID    ; 'o'
>396f32		b5 6e				                    .word <>ANSI_INVALID    ; 'p'
>396f34		b5 6e				                    .word <>ANSI_INVALID    ; 'q'
>396f36		b5 6e				                    .word <>ANSI_INVALID    ; 'r'
>396f38		b5 6e				                    .word <>ANSI_INVALID    ; 's'
>396f3a		b5 6e				                    .word <>ANSI_INVALID    ; 't'
>396f3c		b5 6e				                    .word <>ANSI_INVALID    ; 'u'
>396f3e		b5 6e				                    .word <>ANSI_INVALID    ; 'v'
>396f40		b5 6e				                    .word <>ANSI_INVALID    ; 'w'
>396f42		b5 6e				                    .word <>ANSI_INVALID    ; 'x'
>396f44		b5 6e				                    .word <>ANSI_INVALID    ; 'y'
>396f46		b5 6e				                    .word <>ANSI_INVALID    ; 'z'
.396f48						ANSI_PR_CONTROL
.396f48		08		php		                    PHP
.396f49		e2 20		sep #$20	                SEP #$20        ; set A short
.396f4b		c2 10		rep #$10	                REP #$10        ; set X long
.396f4d		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.396f4f		f0 12		beq $396f63	                    BEQ do_cr
.396f51		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.396f53		f0 1a		beq $396f6f	                    BEQ do_lf
.396f55		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.396f57		f0 1c		beq $396f75	                    BEQ do_bs
.396f59		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.396f5b		f0 1e		beq $396f7b	                    BEQ do_tab
.396f5d		22 91 6f 39	jsl $396f91	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.396f61		80 2c		bra $396f8f	                    BRA done
.396f63		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.396f66		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396f68		c8		iny		                    INY
.396f69		22 46 73 39	jsl $397346	                    JSL ANSI_LOCATE
.396f6d		80 20		bra $396f8f	                    BRA done
.396f6f		22 23 73 39	jsl $397323	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.396f73		80 1a		bra $396f8f	                    BRA done
.396f75		22 e7 72 39	jsl $3972e7	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.396f79		80 14		bra $396f8f	                    BRA done
.396f7b						do_tab
.396f7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.396f7d		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.396f7f		29 f8 ff	and #$fff8	                    AND #$FFF8
.396f82		18		clc		                    CLC
.396f83		69 08 00	adc #$0008	                    ADC #$0008
.396f86		aa		tax		                    TAX
.396f87		e2 20		sep #$20	                SEP #$20        ; set A short
.396f89		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.396f8b		22 46 73 39	jsl $397346	                    JSL ANSI_LOCATE
.396f8f		28		plp		done                PLP
.396f90		6b		rtl		                    RTL
.396f91						ANSI_PUTRAWC
.396f91		da		phx		                    PHX
.396f92		5a		phy		                    PHY
.396f93		0b		phd		                    PHD
.396f94		08		php		                    PHP
.396f95		e2 20		sep #$20	                SEP #$20        ; set A short
.396f97		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.396f9b		b0 0a		bcs $396fa7	                    BCS done                        ; If invalid, just return
.396f9d		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.396f9f		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.396fa1		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.396fa3		22 bc 72 39	jsl $3972bc	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.396fa7		28		plp		done                PLP
.396fa8		2b		pld		                    PLD
.396fa9		7a		ply		                    PLY
.396faa		fa		plx		                    PLX
.396fab		6b		rtl		                    RTL
.396fac						ANSI_CUU
.396fac		08		php		                    PHP
.396fad		e2 20		sep #$20	                SEP #$20        ; set A short
.396faf		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396fb1		d0 02		bne $396fb5	                    BNE loop                        ; Move so long as not 0
.396fb3		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396fb5		48		pha		loop                PHA                             ; Save the count
.396fb6		22 05 73 39	jsl $397305	                    JSL ANSI_CSRUP                  ; Cursor Up
.396fba		68		pla		                    PLA                             ; Restore the count
.396fbb		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396fbc		d0 f7		bne $396fb5	                    BNE loop
.396fbe		28		plp		                    PLP
.396fbf		60		rts		                    RTS
.396fc0						ANSI_CUD
.396fc0		08		php		                    PHP
.396fc1		e2 20		sep #$20	                SEP #$20        ; set A short
.396fc3		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396fc5		d0 02		bne $396fc9	                    BNE loop                        ; Move so long as not 0
.396fc7		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396fc9		48		pha		loop                PHA                             ; Save the count
.396fca		22 23 73 39	jsl $397323	                    JSL ANSI_CSRDOWN                ; Cursor Down
.396fce		68		pla		                    PLA                             ; Restore the count
.396fcf		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396fd0		d0 f7		bne $396fc9	                    BNE loop
.396fd2		28		plp		                    PLP
.396fd3		60		rts		                    RTS
.396fd4						ANSI_CUF
.396fd4		08		php		                    PHP
.396fd5		e2 20		sep #$20	                SEP #$20        ; set A short
.396fd7		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396fd9		d0 02		bne $396fdd	                    BNE loop                        ; Move so long as not 0
.396fdb		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396fdd		48		pha		loop                PHA                             ; Save the count
.396fde		22 bc 72 39	jsl $3972bc	                    JSL ANSI_CSRRIGHT               ; Cursor right
.396fe2		68		pla		                    PLA                             ; Restore the count
.396fe3		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396fe4		d0 f7		bne $396fdd	                    BNE loop
.396fe6		28		plp		                    PLP
.396fe7		60		rts		                    RTS
.396fe8						ANSI_CUB
.396fe8		08		php		                    PHP
.396fe9		e2 20		sep #$20	                SEP #$20        ; set A short
.396feb		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.396fed		d0 02		bne $396ff1	                    BNE loop                        ; Move so long as not 0
.396fef		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.396ff1		48		pha		loop                PHA                             ; Save the count
.396ff2		22 e7 72 39	jsl $3972e7	                    JSL ANSI_CSRLEFT                ; Cursor left
.396ff6		68		pla		                    PLA                             ; Restore the count
.396ff7		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.396ff8		d0 f7		bne $396ff1	                    BNE loop
.396ffa		28		plp		                    PLP
.396ffb		60		rts		                    RTS
.396ffc						ANSI_CUP
.396ffc		08		php		                    PHP
.396ffd		e2 30		sep #$30	                SEP #$30        ; set A&X short
.396fff		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397001		d0 02		bne $397005	                    BNE get_row
.397003		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.397005		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.397007		d0 02		bne $39700b	                    BNE adjust_coords
.397009		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.39700b		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.39700c		88		dey		                    DEY
.39700d		c2 30		rep #$30	                REP #$30        ; set A&X long
.39700f		22 46 73 39	jsl $397346	                    JSL ANSI_LOCATE                 ; Set the cursor position
.397013		28		plp		                    PLP
.397014		60		rts		                    RTS
.397015						ANSI_SET_MODE
.397015		08		php		                    PHP
.397016		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397018		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.39701a		c9 19		cmp #$19	                    CMP #25
.39701c		d0 24		bne $397042	                    BNE chk_break
.39701e		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.397022		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.397024		d0 0c		bne $397032	                    BNE check_evid
.397026		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.39702a		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.39702c		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.397030		80 1e		bra $397050	                    BRA done
.397032		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.397034		d0 1a		bne $397050	                    BNE done
.397036		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.39703a		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.39703c		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.397040		80 0e		bra $397050	                    BRA done
.397042		c9 1c		cmp #$1c	chk_break           CMP #28
.397044		d0 0a		bne $397050	                    BNE done
.397046		22 03 78 39	jsl $397803	                    JSL KBD_GET_CONTROL
.39704a		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.39704c		22 16 78 39	jsl $397816	                    JSL KBD_SET_CONTROL
.397050		28		plp		done                PLP
.397051		60		rts		                    RTS
.397052						ANSI_RESET_MODE
.397052		08		php		                    PHP
.397053		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397055		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397057		c9 19		cmp #$19	                    CMP #25
.397059		d0 24		bne $39707f	                    BNE chk_break
.39705b		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.39705f		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.397061		d0 0c		bne $39706f	                    BNE check_evid
.397063		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.397067		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.397069		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.39706d		80 1e		bra $39708d	                    BRA done
.39706f		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.397071		d0 1a		bne $39708d	                    BNE done
.397073		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.397077		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.397079		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.39707d		80 0e		bra $39708d	                    BRA done
.39707f		c9 1c		cmp #$1c	chk_break           CMP #28
.397081		d0 0a		bne $39708d	                    BNE done
.397083		22 03 78 39	jsl $397803	                    JSL KBD_GET_CONTROL
.397087		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.397089		22 16 78 39	jsl $397816	                    JSL KBD_SET_CONTROL
.39708d		28		plp		done                PLP
.39708e		60		rts		                    RTS
.39708f						ANSI_SGR
.39708f		08		php		                    PHP
.397090		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397092		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.397094		d0 0d		bne $3970a3	                    BNE chk_1
.397096		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.397098		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.39709a		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.39709c		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.39709e		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.3970a0		82 d6 00	brl $397179	                    BRL done
.3970a3		c9 01		cmp #$01	chk_1               CMP #1
.3970a5		d0 0f		bne $3970b6	                    BNE chk_2
.3970a7		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.3970a9		09 80		ora #$80	                    ORA #$80
.3970ab		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.3970ad		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.3970af		09 40		ora #$40	                    ORA #CONTROL_BOLD
.3970b1		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.3970b3		82 c3 00	brl $397179	                    BRL done
.3970b6		c9 02		cmp #$02	chk_2               CMP #2
.3970b8		f0 04		beq $3970be	                    BEQ normal_intensity
.3970ba		c9 16		cmp #$16	chk_22              CMP #22
.3970bc		d0 0f		bne $3970cd	                    BNE chk_7
.3970be		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.3970c0		29 7f		and #$7f	                    AND #~$80
.3970c2		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.3970c4		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.3970c6		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.3970c8		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.3970ca		82 ac 00	brl $397179	                    BRL done
.3970cd		c9 07		cmp #$07	chk_7               CMP #7
.3970cf		d0 2c		bne $3970fd	                    BNE chk_27
.3970d1		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.3970d3		89 80		bit #$80	                    BIT #CONTROL_INVERT
.3970d5		f0 03		beq $3970da	                    BEQ invert_on
.3970d7		82 9f 00	brl $397179	                    BRL done                        ; Yes: just finish
.3970da		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.3970dc		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.3970de		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.3970e0		0a		asl a		                    ASL  A
.3970e1		69 80		adc #$80	                    ADC  #$80
.3970e3		2a		rol a		                    ROL  A
.3970e4		0a		asl a		                    ASL  A
.3970e5		69 80		adc #$80	                    ADC  #$80
.3970e7		2a		rol a		                    ROL  A
.3970e8		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.3970ea		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.3970ec		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.3970ee		89 40		bit #$40	                    BIT #CONTROL_BOLD
.3970f0		d0 03		bne $3970f5	                    BNE bold_on
.3970f2		82 84 00	brl $397179	                    BRL done                        ; No: we're done
.3970f5		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.3970f7		09 80		ora #$80	                    ORA #$80
.3970f9		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.3970fb		80 7c		bra $397179	                    BRA done
.3970fd		c9 1b		cmp #$1b	chk_27              CMP #27
.3970ff		d0 0c		bne $39710d	                    BNE chk_39
.397101		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.397103		89 80		bit #$80	                    BIT #CONTROL_INVERT
.397105		f0 72		beq $397179	                    BEQ done                        ; No: just finish
.397107		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.397109		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.39710b		80 d1		bra $3970de	                    BRA swap_colors                 ; And go swap the colors
.39710d		c9 27		cmp #$27	chk_39              CMP #39
.39710f		d0 10		bne $397121	                    BNE chk_49
.397111		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.397113		29 0f		and #$0f	                    AND #$0F
.397115		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.397117		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.397119		29 f0		and #$f0	                    AND #$F0
.39711b		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.39711d		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.39711f		80 58		bra $397179	                    BRA done
.397121		c9 31		cmp #$31	chk_49              CMP #49
.397123		d0 10		bne $397135	                    BNE chk_foreground
.397125		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.397127		29 f0		and #$f0	                    AND #$F0
.397129		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.39712b		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.39712d		29 0f		and #$0f	                    AND #$0F
.39712f		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.397131		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.397133		80 44		bra $397179	                    BRA done
.397135		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.397137		90 29		bcc $397162	                    BLT chk_background
.397139		c9 26		cmp #$26	                    CMP #38
.39713b		b0 25		bcs $397162	                    BGE chk_background
.39713d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.39713f		29 0f		and #$0f	                    AND #$0F
.397141		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.397143		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.397145		38		sec		                    SEC
.397146		e9 1e		sbc #$1e	                    SBC #30
.397148		0a		asl a		                    ASL A
.397149		0a		asl a		                    ASL A
.39714a		0a		asl a		                    ASL A
.39714b		0a		asl a		                    ASL A
.39714c		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.39714e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.397150		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.397152		89 40		bit #$40	                    BIT #CONTROL_BOLD
.397154		d0 03		bne $397159	                    BNE bold_fore                   ; No: we're done
.397156		82 20 00	brl $397179	                    BRL done
.397159		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.39715b		09 80		ora #$80	                    ORA #$80
.39715d		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.39715f		82 17 00	brl $397179	                    BRL done
.397162		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.397164		90 13		bcc $397179	                    BLT done
.397166		c9 30		cmp #$30	                    CMP #48
.397168		b0 0f		bcs $397179	                    BGE done
.39716a		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.39716c		29 f0		and #$f0	                    AND #$F0
.39716e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.397170		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.397172		38		sec		                    SEC
.397173		e9 28		sbc #$28	                    SBC #40
.397175		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.397177		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.397179		28		plp		done                PLP
.39717a		60		rts		                    RTS
.39717b						ANSI_ED
.39717b		5a		phy		                    PHY
.39717c		08		php		                    PHP
.39717d		e2 20		sep #$20	                SEP #$20        ; set A short
.39717f		c2 10		rep #$10	                REP #$10        ; set X long
.397181		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.397183		d0 1b		bne $3971a0	                    BNE not_0                           ; Is the code 0?
.397185						code_0
.397185		c2 20		rep #$20	                REP #$20        ; set A long
.397187		38		sec		                    SEC                                 ; Calculate min index to erase
.397188		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.39718a		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.39718c		a8		tay		                    TAY
.39718d		e2 20		sep #$20	                SEP #$20        ; set A short
.39718f		a9 20		lda #$20	code_2_loop         LDA #' '
.397191		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.397193		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.397195		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.397197		c8		iny		                    INY
.397198		c0 00 20	cpy #$2000	                    CPY #$2000
.39719b		d0 f2		bne $39718f	                    BNE code_2_loop
.39719d		82 35 00	brl $3971d5	                    BRL done
.3971a0		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.3971a2		d0 18		bne $3971bc	                    BNE not_1
.3971a4						code_1
.3971a4		c2 20		rep #$20	                REP #$20        ; set A long
.3971a6		38		sec		                    SEC                                 ; Calculate max index to erase
.3971a7		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.3971a9		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.3971ab		a8		tay		                    TAY
.3971ac		e2 20		sep #$20	                SEP #$20        ; set A short
.3971ae		a9 20		lda #$20	code_1_loop         LDA #' '
.3971b0		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.3971b2		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.3971b4		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.3971b6		88		dey		                    DEY                                 ; Move to the previous index
.3971b7		10 f5		bpl $3971ae	                    BPL code_1_loop                     ; And loop until we're done
.3971b9		82 19 00	brl $3971d5	                    BRL done
.3971bc		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.3971be		f0 04		beq $3971c4	                    BEQ cls_all
.3971c0		c9 03		cmp #$03	                    CMP #3
.3971c2		d0 11		bne $3971d5	                    BNE done                            ; No: just ignore the sequence
.3971c4		a0 00 00	ldy #$0000	cls_all             LDY #0                              ; Start with the cursor's position
.3971c7		a9 20		lda #$20	cls_all_loop        LDA #' '
.3971c9		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.3971cb		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.3971cd		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.3971cf		c8		iny		                    INY                                 ; Go to the next position
.3971d0		c0 00 20	cpy #$2000	                    CPY #$2000                          ; Have we reached the end?
.3971d3		d0 f2		bne $3971c7	                    BNE cls_all_loop                    ; No: keep going
.3971d5		28		plp		done                PLP
.3971d6		7a		ply		                    PLY
.3971d7		60		rts		                    RTS
.3971d8						ANSI_EL
.3971d8		da		phx		                    PHX
.3971d9		5a		phy		                    PHY
.3971da		08		php		                    PHP
.3971db		c2 30		rep #$30	                REP #$30        ; set A&X long
.3971dd		38		sec		                    SEC
.3971de		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.3971e0		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.3971e2		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.3971e4		e2 20		sep #$20	                SEP #$20        ; set A short
.3971e6		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.3971e8		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.3971ea		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.3971ec		d0 0e		bne $3971fc	                    BNE not_0                           ; Is the code 0?
.3971ee						code_0
.3971ee		a9 20		lda #$20	                    LDA #' '
.3971f0		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.3971f2		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.3971f4		c8		iny		                    INY
.3971f5		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.3971f7		d0 f9		bne $3971f2	                    BNE code_0_loop                     ; No: keep looping
.3971f9		82 29 00	brl $397225	                    BRL done
.3971fc		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.3971fe		d0 11		bne $397211	                    BNE not_1
.397200						code_1
.397200		a9 20		lda #$20	                    LDA #' '
.397202		a0 00 00	ldy #$0000	                    LDY #0
.397205		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.397207		c8		iny		                    INY
.397208		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.39720a		d0 f9		bne $397205	                    BNE code_1_loop                     ; No: keep looping
.39720c		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.39720e		82 14 00	brl $397225	                    BRL done
.397211		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.397213		f0 04		beq $397219	                    BEQ code_2_3
.397215		c9 03		cmp #$03	                    CMP #3
.397217		d0 0c		bne $397225	                    BNE done                            ; No: just ignore the sequence
.397219						code_2_3
.397219		a9 20		lda #$20	                    LDA #' '
.39721b		a0 00 00	ldy #$0000	                    LDY #0
.39721e		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.397220		c8		iny		                    INY
.397221		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.397223		d0 f9		bne $39721e	                    BNE code_2_3_loop                   ; No: keep looping
.397225		28		plp		done                PLP
.397226		7a		ply		                    PLY
.397227		fa		plx		                    PLX
.397228		60		rts		                    RTS
.397229						ANSI_ICH
.397229		5a		phy		                    PHY
.39722a		08		php		                    PHP
.39722b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.39722d		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.39722f		f0 04		beq $397235	                    BEQ default_1                       ; If 0, default to 1
.397231		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.397233		d0 04		bne $397239	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.397235		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.397237		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.397239		38		sec		calc_src_dest       SEC
.39723a		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.39723c		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.39723e		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.397240		38		sec		                    SEC
.397241		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.397243		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.397245		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.397247		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.397249		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.39724b		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.39724d		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.39724f		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.397251		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.397253		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.397255		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.397257		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.397259		10 ea		bpl $397245	                    BPL insert_loop                     ; Keep looping until we reach the end
.39725b		a0 00		ldy #$00	                    LDY #0
.39725d		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.39725f		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.397261		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.397263		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.397265		c8		iny		                    INY                                 ; Move to the next byte
.397266		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.397268		d0 f3		bne $39725d	                    BNE fill_loop
.39726a		28		plp		                    PLP
.39726b		7a		ply		                    PLY
.39726c		60		rts		                    RTS
.39726d						ANSI_DCH
.39726d		5a		phy		                    PHY
.39726e		08		php		                    PHP
.39726f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397271		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.397273		f0 04		beq $397279	                    BEQ default_1                       ; If 0, default to 1
.397275		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.397277		d0 04		bne $39727d	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.397279		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.39727b		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.39727d		a9 00		lda #$00	calc_src_dest       LDA #0
.39727f		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.397281		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.397283		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.397285		38		sec		                    SEC                                 ; Calculate end offset
.397286		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.397288		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.39728a		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.39728c		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.39728e		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.397290		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.397292		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.397294		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.397296		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.397298		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.39729a		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.39729c		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.39729e		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.3972a0		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.3972a2		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.3972a4		90 e6		bcc $39728c	                    BLT del_loop                        ; Keep looping until we reach the end
.3972a6		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.3972a7		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.3972a9		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.3972ab		a8		tay		                    TAY
.3972ac		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.3972ae		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.3972b0		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.3972b2		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.3972b4		c8		iny		                    INY                                 ; Move to the next byte
.3972b5		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.3972b7		90 f3		bcc $3972ac	                    BLT fill_loop
.3972b9		28		plp		                    PLP
.3972ba		7a		ply		                    PLY
.3972bb		60		rts		                    RTS
.3972bc						ANSI_CSRRIGHT
.3972bc		da		phx		                    PHX
.3972bd		5a		phy		                    PHY
.3972be		0b		phd		                    PHD
.3972bf		08		php		                    PHP
.3972c0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3972c2		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.3972c6		b0 1a		bcs $3972e2	                    BCS done                            ; If invalid, just return
.3972c8		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.3972ca		e8		inx		                    INX
.3972cb		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.3972cd		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.3972cf		90 0d		bcc $3972de	                    BCC nowrap                          ; No: just set the position
.3972d1		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.3972d4		c8		iny		                    INY                                 ; And move to the next row
.3972d5		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.3972d7		90 05		bcc $3972de	                    BCC nowrap                          ; No: just set the position
.3972d9		88		dey		                    DEY                                 ; Yes: lock to the last row
.3972da		22 aa 73 39	jsl $3973aa	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.3972de		22 46 73 39	jsl $397346	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.3972e2		28		plp		done                PLP
.3972e3		2b		pld		                    PLD
.3972e4		7a		ply		                    PLY
.3972e5		fa		plx		                    PLX
.3972e6		6b		rtl		                    RTL
.3972e7						ANSI_CSRLEFT
.3972e7		da		phx		                    PHX
.3972e8		5a		phy		                    PHY
.3972e9		0b		phd		                    PHD
.3972ea		08		php		                    PHP
.3972eb		c2 30		rep #$30	                REP #$30        ; set A&X long
.3972ed		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.3972f1		b0 0d		bcs $397300	                    BCS done                    ; If invalid, just return
.3972f3		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.3972f5		f0 09		beq $397300	                    BEQ done                    ; If so, just ignore this call
.3972f7		ca		dex		                    DEX
.3972f8		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.3972fa		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.3972fc		22 46 73 39	jsl $397346	                    JSL ANSI_LOCATE
.397300		28		plp		done                PLP
.397301		2b		pld		                    PLD
.397302		7a		ply		                    PLY
.397303		fa		plx		                    PLX
.397304		6b		rtl		                    RTL
.397305						ANSI_CSRUP
.397305		da		phx		                    PHX
.397306		5a		phy		                    PHY
.397307		0b		phd		                    PHD
.397308		08		php		                    PHP
.397309		c2 30		rep #$30	                REP #$30        ; set A&X long
.39730b		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.39730f		b0 0d		bcs $39731e	                    BCS done                    ; If invalid, just return
.397311		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.397313		f0 09		beq $39731e	                    BEQ done                    ; If we are, just ignore the call
.397315		88		dey		                    DEY
.397316		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.397318		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.39731a		22 46 73 39	jsl $397346	                    JSL ANSI_LOCATE
.39731e		28		plp		done                PLP
.39731f		2b		pld		                    PLD
.397320		7a		ply		                    PLY
.397321		fa		plx		                    PLX
.397322		6b		rtl		                    RTL
.397323						ANSI_CSRDOWN
.397323		da		phx		                    PHX
.397324		5a		phy		                    PHY
.397325		0b		phd		                    PHD
.397326		08		php		                    PHP
.397327		c2 30		rep #$30	                REP #$30        ; set A&X long
.397329		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.39732d		b0 12		bcs $397341	                    BCS done                            ; If invalid, just return
.39732f		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.397331		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.397333		c8		iny		                    INY
.397334		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.397336		90 05		bcc $39733d	                    BCC noscroll                        ; No: go ahead and set the position
.397338		88		dey		                    DEY                                 ; Yes: go back to the last row
.397339		22 aa 73 39	jsl $3973aa	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.39733d		22 46 73 39	jsl $397346	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.397341		28		plp		done                PLP
.397342		2b		pld		                    PLD
.397343		7a		ply		                    PLY
.397344		fa		plx		                    PLX
.397345		6b		rtl		                    RTL
.397346						ANSI_LOCATE
.397346		da		phx		                    PHX
.397347		5a		phy		                    PHY
.397348		0b		phd		                    PHD
.397349		08		php		                    PHP
.39734a		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.39734e		b0 55		bcs $3973a5	                    BCS done                    ; If invalid, just return
.397350		c2 30		rep #$30	                REP #$30        ; set A&X long
.397352						locate_scroll
.397352		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.397354		90 07		bcc $39735d	                    BCC locate_scrolldone
.397356		22 aa 73 39	jsl $3973aa	                    JSL ANSI_SCROLLUP
.39735a		88		dey		                    DEY
.39735b		80 f5		bra $397352	                    BRA locate_scroll
.39735d						locate_scrolldone
.39735d		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.39735f		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.397361		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.397363						locate_row
.397363		c0 00 00	cpy #$0000	                    CPY #$0
.397366		f0 08		beq $397370	                    BEQ locate_right
.397368		18		clc		locate_down         CLC
.397369		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.39736b		88		dey		                    DEY
.39736c		f0 02		beq $397370	                    BEQ locate_right
.39736e		80 f8		bra $397368	                    BRA locate_down
.397370		18		clc		locate_right        CLC
.397371		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.397373		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.397375		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.397377		e2 20		sep #$20	                SEP #$20        ; set A short
.397379		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.39737d		c9 04		cmp #$04	                    CMP #CHAN_EVID
.39737f		f0 0e		beq $39738f	                    beq locate_evid
.397381		c2 20		rep #$20	                REP #$20        ; set A long
.397383		98		tya		                    TYA
.397384		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.397388		8a		txa		                    TXA
.397389		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.39738d		80 0c		bra $39739b	                    BRA update_colorpos
.39738f						locate_evid
.39738f		c2 20		rep #$20	                REP #$20        ; set A long
.397391		98		tya		                    TYA
.397392		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.397396		8a		txa		                    TXA
.397397		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.39739b						update_colorpos
.39739b		c2 20		rep #$20	                REP #$20        ; set A long
.39739d		18		clc		                    CLC
.39739e		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.3973a0		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.3973a3		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.3973a5		28		plp		done                PLP
.3973a6		2b		pld		                    PLD
.3973a7		7a		ply		                    PLY
.3973a8		fa		plx		                    PLX
.3973a9		6b		rtl		                    RTL
.3973aa						ANSI_SCROLLUP
.3973aa		da		phx		                    PHX
.3973ab		5a		phy		                    PHY
.3973ac		8b		phb		                    PHB
.3973ad		0b		phd		                    PHD
.3973ae		08		php		                    PHP
.3973af		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.3973b3		90 03		bcc $3973b8	                    BCC calc_size
.3973b5		82 81 00	brl $397439	                    BRL done                    ; If invalid, just return
.3973b8						calc_size
.3973b8		c2 30		rep #$30	                REP #$30        ; set A&X long
.3973ba		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.3973bc		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.3973c0		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.3973c2		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.3973c6		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.3973ca		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.3973cc		18		clc		                    CLC
.3973cd		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.3973cf		a8		tay		                    TAY
.3973d0		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.3973d2		aa		tax		                    TAX
.3973d3		e2 20		sep #$20	                SEP #$20        ; set A short
.3973d5		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.3973d9		c9 04		cmp #$04	                    CMP #CHAN_EVID
.3973db		f0 09		beq $3973e6	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.3973dd						move_text_0
.3973dd		c2 20		rep #$20	                REP #$20        ; set A long
.3973df		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.3973e1		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.3973e4		80 07		bra $3973ed	                    BRA scroll_color
.3973e6						move_text_1
.3973e6		c2 20		rep #$20	                REP #$20        ; set A long
.3973e8		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.3973ea		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.3973ed						scroll_color
.3973ed		c2 30		rep #$30	                REP #$30        ; set A&X long
.3973ef		18		clc		                    CLC
.3973f0		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.3973f2		a8		tay		                    TAY
.3973f3		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.3973f5		aa		tax		                    TAX
.3973f6		e2 20		sep #$20	                SEP #$20        ; set A short
.3973f8		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.3973fc		c9 04		cmp #$04	                    CMP #CHAN_EVID
.3973fe		f0 09		beq $397409	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.397400						move_color_0
.397400		c2 20		rep #$20	                REP #$20        ; set A long
.397402		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.397404		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.397407		80 07		bra $397410	                    BRA vicky_lastline
.397409						move_color_1
.397409		c2 20		rep #$20	                REP #$20        ; set A long
.39740b		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.39740d		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.397410						vicky_lastline
.397410		c2 20		rep #$20	                REP #$20        ; set A long
.397412		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.397414		48		pha		                    PHA
.397415		18		clc		                    CLC
.397416		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.397418		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.39741a		a0 00 00	ldy #$0000	start_clear         LDY #0
.39741d		a9 20 00	lda #$0020	                    LDA #' '
.397420		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.397422		c8		iny		                    INY
.397423		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.397425		d0 f9		bne $397420	                    BNE clr_text
.397427		68		pla		vicky_lastcolor     PLA
.397428		18		clc		                    CLC
.397429		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.39742b		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.39742d		a0 00 00	ldy #$0000	start_color         LDY #0
.397430		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.397432		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.397434		c8		iny		                    INY
.397435		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.397437		d0 f9		bne $397432	                    BNE clr_color
.397439		28		plp		done                PLP
.39743a		2b		pld		                    PLD
.39743b		ab		plb		                    PLB
.39743c		7a		ply		                    PLY
.39743d		fa		plx		                    PLX
.39743e		6b		rtl		                    RTL
.39743f						ANSI_CLRSCREEN
.39743f		da		phx		                    PHX
.397440		5a		phy		                    PHY
.397441		0b		phd		                    PHD
.397442		08		php		                    PHP
.397443		22 d7 6d 39	jsl $396dd7	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.397447		b0 1e		bcs $397467	                    BCS done                            ; If invalid, just return
.397449		e2 20		sep #$20	                SEP #$20        ; set A short
.39744b		c2 10		rep #$10	                REP #$10        ; set X long
.39744d		a0 00 00	ldy #$0000	                    LDY #0
.397450		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.397452		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.397454		c8		iny		                    INY
.397455		c0 00 20	cpy #$2000	                    CPY #$2000
.397458		d0 f8		bne $397452	                    BNE iclearloop0
.39745a		a0 00 00	ldy #$0000	                    LDY	#0
.39745d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.39745f		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.397461		c8		iny		                    INY
.397462		c0 00 20	cpy #$2000	                    CPY #$2000
.397465		d0 f8		bne $39745f	                    BNE evid_clearloop1
.397467		28		plp		done                PLP
.397468		2b		pld		                    PLD
.397469		7a		ply		                    PLY
.39746a		fa		plx		                    PLX
.39746b		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keybaord has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keybaord controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keybaord controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keybaord controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keybaord controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.39746c						IINITKEYBOARD
.39746c		da		phx		                    PHX
.39746d		5a		phy		                    PHY
.39746e		0b		phd		                    PHD
.39746f		08		php		                    PHP
.397470		48		pha		                PHA             ; begin setdp macro
.397471		08		php		                PHP
.397472		c2 20		rep #$20	                REP #$20        ; set A long
.397474		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397477		5b		tcd		                TCD
.397478		28		plp		                PLP
.397479		68		pla		                PLA             ; end setdp macro
.39747a		e2 20		sep #$20	                SEP #$20        ; set A short
.39747c		c2 10		rep #$10	                REP #$10        ; set X long
.39747e		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.397482		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.397484		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.397488		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.39748a		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.39748c		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.39748e		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.397490		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.397492		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.397494		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.397496		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.397498		c2 20		rep #$20	                REP #$20        ; set A long
.39749a		a9 00 7c	lda #$7c00	                    LDA #<>SC_US_UNMOD
.39749d		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.39749f		a9 80 7c	lda #$7c80	                    LDA #<>SC_US_SHFT
.3974a2		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.3974a4		a9 00 7d	lda #$7d00	                    LDA #<>SC_US_CTRL
.3974a7		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.3974a9		a9 80 7d	lda #$7d80	                    LDA #<>SC_US_LOCK
.3974ac		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.3974ae		a9 00 7e	lda #$7e00	                    LDA #<>SC_US_LOCK_SHFT
.3974b1		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.3974b3		a9 80 7e	lda #$7e80	                    LDA #<>SC_US_CTRL_SHFT
.3974b6		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.3974b8		e2 20		sep #$20	                SEP #$20        ; set A short
.3974ba		a9 39		lda #$39	                    LDA #`SC_US_UNMOD
.3974bc		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.3974be		a9 39		lda #$39	                    LDA #`SC_US_SHFT
.3974c0		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.3974c2		a9 39		lda #$39	                    LDA #`SC_US_CTRL
.3974c4		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.3974c6		a9 39		lda #$39	                    LDA #`SC_US_LOCK
.3974c8		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.3974ca		a9 39		lda #$39	                    LDA #`SC_US_LOCK_SHFT
.3974cc		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.3974ce		a9 39		lda #$39	                    LDA #`SC_US_CTRL_SHFT
.3974d0		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.3974d2		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.3974d4		22 5d 75 39	jsl $39755d	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.3974d8		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.3974dc		af 60 10 af	lda $af1060	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.3974e0		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.3974e2		22 68 75 39	jsl $397568	                    JSL KBD_CTRL_SND_CMD
.3974e6		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.3974e8		f0 05		beq $3974ef	                    BEQ test_AB
.3974ea		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.3974ec		82 5e 00	brl $39754d	                    BRL done
.3974ef		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.3974f1		22 68 75 39	jsl $397568	                    JSL KBD_CTRL_SND_CMD
.3974f5		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.3974f7		f0 05		beq $3974fe	                    BEQ write_command
.3974f9		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.3974fb		82 4f 00	brl $39754d	                    BRL done
.3974fe		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.397500		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.397503		22 c2 75 39	jsl $3975c2	                    JSL KBD_CTRL_SND_CMD_P
.397507		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.397509		22 5d 75 39	jsl $39755d	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.39750d		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.397511		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.397513		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.397516		22 79 75 39	jsl $397579	                    JSL KBD_SND_CMD
.39751a		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.39751d		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.39751f		a2 00 00	ldx #$0000	                    LDX #0
.397522		22 79 75 39	jsl $397579	                    JSL KBD_SND_CMD
.397526		c9 fa		cmp #$fa	                    CMP #KBD_RESP_ACK           ; Did the keyboard acknowledge the command?
.397528		f0 07		beq $397531	                    BEQ set_led                 ; Yes: try to set the LEDs
.39752a		88		dey		                    DEY                         ; No: try again... counting down
.39752b		d0 f0		bne $39751d	                    BNE enable_loop             ; If we are out of attempts...
.39752d		a9 05		lda #$05	                    LDA #5                      ; Return error #5
.39752f		80 1c		bra $39754d	                    BRA done
.397531		a9 00		lda #$00	set_led             LDA #0                      ; Set the state of the locks
.397533		22 e9 77 39	jsl $3977e9	                    JSL KBD_SETLOCKS
.397537		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.39753b		29 01		and #$01	                    AND #FNX1_INT00_KBD
.39753d		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.397541		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.397545		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.397547		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.39754b		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.39754d		28		plp		done                PLP
.39754e		2b		pld		                    PLD
.39754f		7a		ply		                    PLY
.397550		fa		plx		                    PLX
.397551		6b		rtl		                    RTL
.397552						KBD_WAIT_OUT
.397552		48		pha		                    PHA
.397553		af 64 10 af	lda $af1064	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.397557		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.397559		f0 f8		beq $397553	                    BEQ wait                ; If it isn't, keep waiting
.39755b		68		pla		                    PLA
.39755c		6b		rtl		                    RTL
.39755d						KBD_WAIT_IN
.39755d		48		pha		                    PHA
.39755e		af 64 10 af	lda $af1064	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.397562		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.397564		d0 f8		bne $39755e	                    BNE wait                ; If not, wait for it to have something
.397566		68		pla		                    PLA
.397567		6b		rtl		                    RTL
.397568						KBD_CTRL_SND_CMD
.397568		22 5d 75 39	jsl $39755d	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.39756c		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.397570		22 52 75 39	jsl $397552	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.397574		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF
.397578		6b		rtl		                    RTL
.397579						KBD_SND_CMD
.397579		22 5d 75 39	jsl $39755d	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.39757d		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.397581		c2 10		rep #$10	                REP #$10        ; set X long
.397583		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.397586		f0 0b		beq $397593	                    BEQ get_response        ; If 0, check for a response
.397588		ca		dex		                    DEX                     ; Count down
.397589		ea		nop		                    NOP                     ; And do a delay
.39758a		ea		nop		                    NOP
.39758b		ea		nop		                    NOP
.39758c		ea		nop		                    NOP
.39758d		ea		nop		                    NOP
.39758e		ea		nop		                    NOP
.39758f		ea		nop		                    NOP
.397590		ea		nop		                    NOP
.397591		80 f0		bra $397583	                    BRA delay
.397593		22 52 75 39	jsl $397552	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.397597		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF
.39759b		6b		rtl		                    RTL
.39759c						KBD_SND_CMD_P
.39759c		22 5d 75 39	jsl $39755d	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.3975a0		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.3975a4		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.3975a5		c2 10		rep #$10	                REP #$10        ; set X long
.3975a7		a2 e8 03	ldx #$03e8	                    LDX #1000
.3975aa		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.3975ad		f0 0a		beq $3975b9	                    BEQ send_data           ; If 0, check for a response
.3975af		ca		dex		                    DEX                     ; Count down
.3975b0		ea		nop		                    NOP                     ; And do a delay
.3975b1		ea		nop		                    NOP
.3975b2		ea		nop		                    NOP
.3975b3		ea		nop		                    NOP
.3975b4		ea		nop		                    NOP
.3975b5		ea		nop		                    NOP
.3975b6		ea		nop		                    NOP
.3975b7		80 f1		bra $3975aa	                    BRA delay
.3975b9		22 5d 75 39	jsl $39755d	send_data           JSL KBD_WAIT_IN
.3975bd		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.3975c1						get_response
.3975c1		6b		rtl		                    RTL
.3975c2						KBD_CTRL_SND_CMD_P
.3975c2		22 5d 75 39	jsl $39755d	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.3975c6		8f 64 10 af	sta $af1064	                    STA @l KBD_CMD_BUF
.3975ca		8a		txa		                    TXA
.3975cb		22 5d 75 39	jsl $39755d	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.3975cf		8f 60 10 af	sta $af1060	                    STA @l KBD_DATA_BUF
.3975d3		6b		rtl		                    RTL
.3975d4						KBD_PROCESS_BYTE
.3975d4		8b		phb		                    PHB
.3975d5		0b		phd		                    PHD
.3975d6		08		php		                    PHP
.3975d7		48		pha		                PHA             ; begin setdbr macro
.3975d8		08		php		                PHP
.3975d9		e2 20		sep #$20	                SEP #$20        ; set A short
.3975db		a9 39		lda #$39	                LDA #`KBD_STATE_MACH
.3975dd		48		pha		                PHA
.3975de		ab		plb		                PLB
.3975df		28		plp		                PLP
.3975e0		68		pla		                PLA             ; end setdbr macro
.3975e1		48		pha		                PHA             ; begin setdp macro
.3975e2		08		php		                PHP
.3975e3		c2 20		rep #$20	                REP #$20        ; set A long
.3975e5		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3975e8		5b		tcd		                TCD
.3975e9		28		plp		                PLP
.3975ea		68		pla		                PLA             ; end setdp macro
.3975eb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3975ed		af 60 10 af	lda $af1060	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.3975f1		d0 03		bne $3975f6	                    BNE save_scancode
.3975f3		82 67 00	brl $39765d	                    BRL done                            ; If it's 0, just ignore it
.3975f6						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.3975f6		48		pha		save_scancode       PHA
.3975f7		48		pha		                    PHA
.3975f8		29 80		and #$80	                    AND #$80
.3975fa		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.3975fc		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.3975fe		bf 00 7b 39	lda $397b00,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.397602		c9 ff		cmp #$ff	                    CMP #$FF
.397604		d0 03		bne $397609	                    BNE compare_state
.397606		82 54 00	brl $39765d	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.397609		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.39760b		d0 0e		bne $39761b	                    BNE next_transition                 ; If they don't match, go to the next transition
.39760d		bf 01 7b 39	lda $397b01,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.397611		f0 0e		beq $397621	                    BEQ apply                           ; Is it 0? Yes: the default applies
.397613		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.397615		df 01 7b 39	cmp $397b01,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.397619		f0 06		beq $397621	                    BEQ apply                           ; If equal: this matches, apply the transition
.39761b		e8		inx		next_transition     INX                                 ; Move to the next transition
.39761c		e8		inx		                    INX
.39761d		e8		inx		                    INX
.39761e		e8		inx		                    INX
.39761f		80 dd		bra $3975fe	                    BRA chk_transition                  ; Check to see if the next transition applies
.397621		bf 02 7b 39	lda $397b02,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.397625		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.397627		bf 03 7b 39	lda $397b03,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.39762b		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.39762d		f0 2e		beq $39765d	                    BEQ done                            ; Yes: we're done for now
.39762f		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.397631		f0 06		beq $397639	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.397633		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.397635		f0 0f		beq $397646	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.397637		80 18		bra $397651	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.397639		a3 02		lda $02,s	emit_base           LDA l_code
.39763b		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.39763d		aa		tax		                    TAX
.39763e		bf 00 7a 39	lda $397a00,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.397642		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.397644		80 0b		bra $397651	                    BRA emit_A                          ; Emit the translation
.397646		a3 02		lda $02,s	emit_e0             LDA l_code
.397648		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.39764a		aa		tax		                    TAX
.39764b		bf 80 7a 39	lda $397a80,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.39764f		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.397651		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.397653		f0 08		beq $39765d	                    BEQ done                            ; If so, skip enqueuing it
.397655		22 65 76 39	jsl $397665	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.397659		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.39765b		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.39765d						done
.39765d		e2 20		sep #$20	                SEP #$20        ; set A short
.39765f		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.397660		68		pla		                    PLA
.397661		28		plp		                    PLP
.397662		2b		pld		                    PLD
.397663		ab		plb		                    PLB
.397664		6b		rtl		                    RTL
.397665						KBD_SC_ENQUEUE
.397665		0b		phd		                    PHD
.397666		08		php		                    PHP
.397667		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.397668		48		pha		                PHA             ; begin setdp macro
.397669		08		php		                PHP
.39766a		c2 20		rep #$20	                REP #$20        ; set A long
.39766c		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.39766f		5b		tcd		                TCD
.397670		28		plp		                PLP
.397671		68		pla		                PLA             ; end setdp macro
.397672		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397674		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.397676		f0 2f		beq $3976a7	                    BEQ done                        ; Yes: just ignore
.397678		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.39767a		d0 10		bne $39768c	                    BNE chk_locks                   ; No: check the various lock keys
.39767c		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.39767e		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.397680		f0 08		beq $39768a	                    BEQ enqueue_break                   ; No: enqueue it as normal
.397682		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.397684		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.397686		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.397688		80 1d		bra $3976a7	                    BRA done                            ; And we're done
.39768a		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.39768c		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.39768e		f0 1a		beq $3976aa	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.397690		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.397692		f0 20		beq $3976b4	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.397694		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.397696		f0 22		beq $3976ba	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.397698		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.39769a		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.39769c		f0 09		beq $3976a7	                    BEQ done                        ; Yes: we're full... ignore the scancode
.39769e		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.3976a0		e8		inx		                    INX                             ; Advance to the next location
.3976a1		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.3976a3		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.3976a5		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.3976a7		28		plp		done                PLP
.3976a8		2b		pld		                    PLD
.3976a9		6b		rtl		                    RTL
.3976aa		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.3976ac		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.3976ae		22 e9 77 39	jsl $3977e9	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.3976b2		80 f3		bra $3976a7	                    BRA done
.3976b4		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.3976b6		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.3976b8		80 f4		bra $3976ae	                    BRA save_locks
.3976ba		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.3976bc		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.3976be		80 ee		bra $3976ae	                    BRA save_locks
.3976c0						KBD_CHAR_ENQUEUE
.3976c0		0b		phd		                    PHD
.3976c1		08		php		                    PHP
.3976c2		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.3976c3		48		pha		                PHA             ; begin setdp macro
.3976c4		08		php		                PHP
.3976c5		c2 20		rep #$20	                REP #$20        ; set A long
.3976c7		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3976ca		5b		tcd		                TCD
.3976cb		28		plp		                PLP
.3976cc		68		pla		                PLA             ; end setdp macro
.3976cd		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3976cf		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.3976d1		f0 0f		beq $3976e2	                    BEQ done                        ; Yes: just ignore
.3976d3		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.3976d5		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.3976d7		f0 09		beq $3976e2	                    BEQ done                        ; Yes: we're full... ignore the scancode
.3976d9		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.3976db		e8		inx		                    INX                             ; Advance to the next location
.3976dc		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.3976de		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.3976e0		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.3976e2		28		plp		done                PLP
.3976e3		2b		pld		                    PLD
.3976e4		6b		rtl		                    RTL
.3976e5						KBD_CHAR_DEQUEUE
.3976e5		da		phx		                    PHX
.3976e6		0b		phd		                    PHD
.3976e7		08		php		                    PHP
.3976e8		48		pha		                PHA             ; begin setdp macro
.3976e9		08		php		                PHP
.3976ea		c2 20		rep #$20	                REP #$20        ; set A long
.3976ec		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3976ef		5b		tcd		                TCD
.3976f0		28		plp		                PLP
.3976f1		68		pla		                PLA             ; end setdp macro
.3976f2		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.3976f3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3976f5		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.3976f7		f0 21		beq $39771a	                    BEQ return_empty                    ; If it's 0, we have no data
.3976f9		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.3976fb		48		pha		                    PHA                                 ; Save it
.3976fc		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.3976fe		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.397700		d0 08		bne $39770a	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.397702		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.397704		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.397706		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.397708		80 0d		bra $397717	                    BRA return_head                     ; And return the character we found
.39770a		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.39770c		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.39770e		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.397710		e8		inx		                    INX                                 ; And move to the next byte
.397711		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.397713		d0 f7		bne $39770c	                    BNE loop                            ; No: keep copying bytes
.397715		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.397717		68		pla		return_head         PLA                                 ; Get the character back
.397718		80 02		bra $39771c	                    BRA done                            ; And return it
.39771a		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.39771c		28		plp		done                PLP
.39771d		2b		pld		                    PLD
.39771e		fa		plx		                    PLX
.39771f		6b		rtl		                    RTL
.397720						KBD_GET_SCANCODE
.397720		da		phx		                    PHX
.397721		0b		phd		                    PHD
.397722		08		php		                    PHP
.397723		48		pha		                PHA             ; begin setdp macro
.397724		08		php		                PHP
.397725		c2 20		rep #$20	                REP #$20        ; set A long
.397727		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.39772a		5b		tcd		                TCD
.39772b		28		plp		                PLP
.39772c		68		pla		                PLA             ; end setdp macro
.39772d		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.39772e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397730		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.397732		f0 21		beq $397755	                    BEQ return_empty                ; If it's 0, we have no data
.397734		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.397736		48		pha		                    PHA                             ; Save it
.397737		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.397739		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.39773b		d0 08		bne $397745	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.39773d		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.39773f		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.397741		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.397743		80 0d		bra $397752	                    BRA return_head                 ; And return the scan code we found
.397745		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.397747		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.397749		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.39774b		e8		inx		                    INX                             ; And move to the next byte
.39774c		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.39774e		d0 f7		bne $397747	                    BNE loop                        ; No: keep copying bytes
.397750		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.397752		68		pla		return_head         PLA                             ; Get the scan code back
.397753		80 02		bra $397757	                    BRA done                        ; And return it
.397755		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.397757		28		plp		done                PLP
.397758		2b		pld		                    PLD
.397759		fa		plx		                    PLX
.39775a		6b		rtl		                    RTL
.39775b						KBD_GETMODS
.39775b		0b		phd		                PHD
.39775c		08		php		                PHP
.39775d		48		pha		                PHA             ; begin setdp macro
.39775e		08		php		                PHP
.39775f		c2 20		rep #$20	                REP #$20        ; set A long
.397761		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397764		5b		tcd		                TCD
.397765		28		plp		                PLP
.397766		68		pla		                PLA             ; end setdp macro
.397767		e2 20		sep #$20	                SEP #$20        ; set A short
.397769		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.39776b		28		plp		                PLP
.39776c		2b		pld		                PLD
.39776d		6b		rtl		                RTL
.39776e						KBD_GET_STAT
.39776e		0b		phd		                PHD
.39776f		08		php		                PHP
.397770		48		pha		                PHA             ; begin setdp macro
.397771		08		php		                PHP
.397772		c2 20		rep #$20	                REP #$20        ; set A long
.397774		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.397777		5b		tcd		                TCD
.397778		28		plp		                PLP
.397779		68		pla		                PLA             ; end setdp macro
.39777a		e2 20		sep #$20	                SEP #$20        ; set A short
.39777c		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.39777e		28		plp		                PLP
.39777f		2b		pld		                PLD
.397780		6b		rtl		                RTL
.397781						KBD_TEST_BREAK
.397781		0b		phd		                PHD
.397782		08		php		                PHP
.397783		48		pha		                PHA             ; begin setdp macro
.397784		08		php		                PHP
.397785		c2 20		rep #$20	                REP #$20        ; set A long
.397787		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.39778a		5b		tcd		                TCD
.39778b		28		plp		                PLP
.39778c		68		pla		                PLA             ; end setdp macro
.39778d		e2 20		sep #$20	                SEP #$20        ; set A short
.39778f		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.397791		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.397793		d0 04		bne $397799	                BNE ret_true                    ; If it was set, return TRUE
.397795		28		plp		ret_false       PLP                             ; Otherwise, return false
.397796		2b		pld		                PLD
.397797		18		clc		                CLC
.397798		6b		rtl		                RTL
.397799		28		plp		ret_true        PLP
.39779a		2b		pld		                PLD
.39779b		38		sec		                SEC
.39779c		6b		rtl		                RTL
.39779d						KBD_GETMODS_ANSI
.39779d		0b		phd		                    PHD
.39779e		08		php		                    PHP
.39779f		48		pha		                PHA             ; begin setdp macro
.3977a0		08		php		                PHP
.3977a1		c2 20		rep #$20	                REP #$20        ; set A long
.3977a3		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3977a6		5b		tcd		                TCD
.3977a7		28		plp		                PLP
.3977a8		68		pla		                PLA             ; end setdp macro
.3977a9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3977ab		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.3977ad		48		pha		                    PHA
>0001						l_result            .byte ?
.3977ae		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.3977b0		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.3977b2		f0 06		beq $3977ba	                    BEQ check_alt
.3977b4		a3 01		lda $01,s	                    LDA l_result
.3977b6		09 02		ora #$02	                    ORA #%00000010
.3977b8		83 01		sta $01,s	                    STA l_result
.3977ba		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.3977bc		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.3977be		f0 06		beq $3977c6	                    BEQ check_ctrl
.3977c0		a3 01		lda $01,s	                    LDA l_result
.3977c2		09 04		ora #$04	                    ORA #%00000100
.3977c4		83 01		sta $01,s	                    STA l_result
.3977c6		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.3977c8		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.3977ca		f0 06		beq $3977d2	                    BEQ return_result
.3977cc		a3 01		lda $01,s	                    LDA l_result
.3977ce		09 08		ora #$08	                    ORA #%00001000
.3977d0		83 01		sta $01,s	                    STA l_result
.3977d2		68		pla		return_result       PLA
.3977d3		28		plp		                    PLP
.3977d4		2b		pld		                    PLD
.3977d5		6b		rtl		                    RTL
.3977d6						KBD_GETLOCKS
.3977d6		0b		phd		                PHD
.3977d7		08		php		                PHP
.3977d8		48		pha		                PHA             ; begin setdp macro
.3977d9		08		php		                PHP
.3977da		c2 20		rep #$20	                REP #$20        ; set A long
.3977dc		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3977df		5b		tcd		                TCD
.3977e0		28		plp		                PLP
.3977e1		68		pla		                PLA             ; end setdp macro
.3977e2		e2 20		sep #$20	                SEP #$20        ; set A short
.3977e4		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.3977e6		28		plp		                PLP
.3977e7		2b		pld		                PLD
.3977e8		6b		rtl		                RTL
.3977e9						KBD_SETLOCKS
.3977e9		0b		phd		                PHD
.3977ea		08		php		                PHP
.3977eb		48		pha		                PHA             ; begin setdp macro
.3977ec		08		php		                PHP
.3977ed		c2 20		rep #$20	                REP #$20        ; set A long
.3977ef		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3977f2		5b		tcd		                TCD
.3977f3		28		plp		                PLP
.3977f4		68		pla		                PLA             ; end setdp macro
.3977f5		e2 20		sep #$20	                SEP #$20        ; set A short
.3977f7		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.3977f9		aa		tax		                TAX                         ; Move the new status to X...
.3977fa		a9 ed		lda #$ed	                LDA #KBD_CMD_SET_LED        ; Set the LEDs...
.3977fc		22 9c 75 39	jsl $39759c	                JSL KBD_SND_CMD_P
.397800		28		plp		                PLP
.397801		2b		pld		                PLD
.397802		6b		rtl		                RTL
.397803						KBD_GET_CONTROL
.397803		0b		phd		                PHD
.397804		08		php		                PHP
.397805		48		pha		                PHA             ; begin setdp macro
.397806		08		php		                PHP
.397807		c2 20		rep #$20	                REP #$20        ; set A long
.397809		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.39780c		5b		tcd		                TCD
.39780d		28		plp		                PLP
.39780e		68		pla		                PLA             ; end setdp macro
.39780f		e2 20		sep #$20	                SEP #$20        ; set A short
.397811		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.397813		28		plp		                PLP
.397814		2b		pld		                PLD
.397815		6b		rtl		                RTL
.397816						KBD_SET_CONTROL
.397816		0b		phd		                PHD
.397817		08		php		                PHP
.397818		48		pha		                PHA             ; begin setdp macro
.397819		08		php		                PHP
.39781a		c2 20		rep #$20	                REP #$20        ; set A long
.39781c		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.39781f		5b		tcd		                TCD
.397820		28		plp		                PLP
.397821		68		pla		                PLA             ; end setdp macro
.397822		e2 20		sep #$20	                SEP #$20        ; set A short
.397824		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.397826		28		plp		                PLP
.397827		2b		pld		                PLD
.397828		6b		rtl		                RTL
.397829						KBD_GETCW
.397829		22 35 78 39	jsl $397835	                JSL KBD_GETC
.39782d		c9 00		cmp #$00	                CMP #0
.39782f		f0 01		beq $397832	                BEQ wait
.397831		6b		rtl		                RTL
.397832		cb		wai		wait            WAI
.397833		80 f4		bra $397829	                BRA KBD_GETCW
.397835						KBD_GETC
.397835		0b		phd		                PHD
.397836		08		php		                PHP
.397837		48		pha		                PHA             ; begin setdp macro
.397838		08		php		                PHP
.397839		c2 20		rep #$20	                REP #$20        ; set A long
.39783b		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.39783e		5b		tcd		                TCD
.39783f		28		plp		                PLP
.397840		68		pla		                PLA             ; end setdp macro
.397841		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397843		22 e5 76 39	jsl $3976e5	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.397847		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.397849		f0 03		beq $39784e	                BEQ get_scancode            ; No: try to get a scan code
.39784b		82 cb 00	brl $397919	                BRL done                    ; Yes: return the character we had queued
.39784e		22 20 77 39	jsl $397720	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.397852		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.397854		d0 04		bne $39785a	                BNE chk_make_break
.397856		28		plp		                PLP                         ; Yes: return 0... we got nothin
.397857		38		sec		                SEC
.397858		2b		pld		                PLD
.397859		6b		rtl		                RTL
.39785a		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.39785c		d0 08		bne $397866	                BNE handle_break            ; Yes: process the break
.39785e		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.397860		d0 0c		bne $39786e	                BNE not_make_ls
.397862		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.397864		80 4e		bra $3978b4	                BRA set_modifier
.397866		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.397868		d0 0c		bne $397876	                BNE not_break_ls
.39786a		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.39786c		80 50		bra $3978be	                BRA clr_modifier
.39786e		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.397870		d0 0c		bne $39787e	                BNE not_make_lc
.397872		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.397874		80 3e		bra $3978b4	                BRA set_modifier
.397876		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.397878		d0 0c		bne $397886	                BNE not_break_lc
.39787a		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.39787c		80 40		bra $3978be	                BRA clr_modifier
.39787e		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.397880		d0 0c		bne $39788e	                BNE not_make_la
.397882		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.397884		80 2e		bra $3978b4	                BRA set_modifier
.397886		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.397888		d0 0c		bne $397896	                BNE not_break_la
.39788a		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.39788c		80 30		bra $3978be	                BRA clr_modifier
.39788e		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.397890		d0 0c		bne $39789e	                BNE not_make_rs
.397892		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.397894		80 1e		bra $3978b4	                BRA set_modifier
.397896		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.397898		d0 0c		bne $3978a6	                BNE not_break_rs
.39789a		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.39789c		80 20		bra $3978be	                BRA clr_modifier
.39789e		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.3978a0		d0 0c		bne $3978ae	                BNE not_make_rc
.3978a2		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.3978a4		80 0e		bra $3978b4	                BRA set_modifier
.3978a6		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.3978a8		d0 0e		bne $3978b8	                BNE not_break_rc
.3978aa		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.3978ac		80 10		bra $3978be	                BRA clr_modifier
.3978ae		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.3978b0		d0 12		bne $3978c4	                BNE not_make_ra
.3978b2		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.3978b4		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.3978b6		80 08		bra $3978c0	                BRA return_null
.3978b8		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.3978ba		d0 04		bne $3978c0	                BNE return_null                 ; No: we don't use any other break scan codes
.3978bc		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.3978be		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.3978c0		a9 00		lda #$00	return_null     LDA #0
.3978c2		80 55		bra $397919	                BRA done
.3978c4		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.3978c5		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.3978c7		90 0e		bcc $3978d7	                BLT below_38
.3978c9		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.3978cb		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.3978cd		f0 2a		beq $3978f9	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.3978cf		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.3978d1		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.3978d3		d0 24		bne $3978f9	                BNE fetch_unmod                         ; If so: translate the keys as modified
.3978d5		80 30		bra $397907	                BRA fetch_caps                          ; No: translate the key using the lock table
.3978d7		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.3978d9		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.3978db		f0 0c		beq $3978e9	                BEQ chk_capslock                        ; No: check for capslock
.3978dd		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.3978df		f0 04		beq $3978e5	                BEQ fetch_control                       ; No: translate just based off of control
.3978e1		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.3978e3		80 26		bra $39790b	                BRA chk_ansi
.3978e5		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.3978e7		80 22		bra $39790b	                BRA chk_ansi
.3978e9		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.3978eb		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.3978ed		d0 0e		bne $3978fd	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.3978ef		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.3978f1		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.3978f3		f0 04		beq $3978f9	                BEQ fetch_unmod                         ; No: translate just based off of control
.3978f5		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.3978f7		80 12		bra $39790b	                BRA chk_ansi
.3978f9		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.3978fb		80 0e		bra $39790b	                BRA chk_ansi
.3978fd		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.3978ff		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.397901		f0 04		beq $397907	                BEQ fetch_caps                          ; No: translate just based off of control
.397903		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.397905		80 04		bra $39790b	                BRA chk_ansi
.397907		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.397909		80 00		bra $39790b	                BRA chk_ansi
.39790b		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.39790d		90 0a		bcc $397919	                BLT done                                ; If not, just return the character
.39790f		c9 96		cmp #$96	                CMP #$96
.397911		b0 06		bcs $397919	                BGE done
.397913		22 55 79 39	jsl $397955	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.397917		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.397919		28		plp		done            PLP
.39791a		2b		pld		                PLD
.39791b		18		clc		                CLC
.39791c		6b		rtl		                RTL
.39791d						KBD_ENQUEUE_BCD
.39791d		08		php		                PHP
.39791e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397920		48		pha		                PHA                     ; Save the value
.397921		4a		lsr a		                LSR A                   ; Get the 10s digit
.397922		4a		lsr a		                LSR A
.397923		4a		lsr a		                LSR A
.397924		4a		lsr a		                LSR A
.397925		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.397927		f0 0b		beq $397934	                BEQ enqueue_1
.397929		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.39792b		b0 13		bcs $397940	                BGE done_A
.39792d		18		clc		                CLC                     ; Enqueue the tens digit
.39792e		69 30		adc #$30	                ADC #'0'
.397930		22 c0 76 39	jsl $3976c0	                JSL KBD_CHAR_ENQUEUE
.397934		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.397935		29 0f		and #$0f	                AND #$0F
.397937		18		clc		                CLC
.397938		69 30		adc #$30	                ADC #'0'
.39793a		22 c0 76 39	jsl $3976c0	                JSL KBD_CHAR_ENQUEUE
.39793e		28		plp		done            PLP
.39793f		6b		rtl		                RTL
.397940		68		pla		done_A          PLA
.397941		80 fb		bra $39793e	                BRA done
.397943						KBD_BIN_TO_BCD
.397943		da		phx		                PHX
.397944		08		php		                PHP
.397945		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397947		aa		tax		                TAX
.397948		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.39794a		f8		sed		                SED                     ; Switch to Decimal arithmetic
.39794b		18		clc		loop            CLC
.39794c		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.39794e		ca		dex		                DEX                     ; Decrement input value in X
.39794f		10 fa		bpl $39794b	                BPL loop                ; loop until input value < 0
.397951		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.397952		28		plp		                PLP
.397953		fa		plx		                PLX
.397954		6b		rtl		                RTL
.397955						KBD_ENQ_ANSI
.397955		08		php		                PHP
.397956		e2 30		sep #$30	                SEP #$30        ; set A&X short
.397958		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.39795a		b0 03		bcs $39795f	                BGE chk_high_end
.39795c		82 4a 00	brl $3979a9	                BRL done                        ; Out of range, just ignore it
.39795f		c9 96		cmp #$96	chk_high_end    CMP #$96
.397961		90 03		bcc $397966	                BLT save_value
.397963		82 43 00	brl $3979a9	                BRL done                        ; Out of range, just ignore it
.397966		48		pha		save_value      PHA
.397967		a9 5b		lda #$5b	                LDA #'['
.397969		22 c0 76 39	jsl $3976c0	                JSL KBD_CHAR_ENQUEUE
.39796d		68		pla		                PLA
.39796e		38		sec		                SEC
.39796f		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.397971		aa		tax		                TAX                     ; And use it as an index to...
.397972		bf ab 79 39	lda $3979ab,x	                LDA @l ENCODE_CODE,X    ; Get the number
.397976		10 0b		bpl $397983	                BPL send_number         ; If MSB is not set, send the number as-is
.397978		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.39797a		18		clc		                CLC
.39797b		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.39797d		22 c0 76 39	jsl $3976c0	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.397981		80 26		bra $3979a9	                BRA done
.397983		22 43 79 39	jsl $397943	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.397987		22 1d 79 39	jsl $39791d	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.39798b		22 9d 77 39	jsl $39779d	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.39798f		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.397991		f0 10		beq $3979a3	                BEQ close               ; No: close the sequence
.397993		48		pha		                PHA
.397994		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.397996		22 c0 76 39	jsl $3976c0	                JSL KBD_CHAR_ENQUEUE
.39799a		68		pla		                PLA
.39799b		22 43 79 39	jsl $397943	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.39799f		22 1d 79 39	jsl $39791d	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.3979a3		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.3979a5		22 c0 76 39	jsl $3976c0	                JSL KBD_CHAR_ENQUEUE
.3979a9		28		plp		done            PLP
.3979aa		6b		rtl		                RTL
>3979ab		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>3979b1		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>3979b5		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>3979ba		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>3979bf		17 18				                .byte 23, 24                ; F11 - F12
.3979c1						KBD_SETTABLE
.3979c1		48		pha		                PHA
.3979c2		8b		phb		                PHB
.3979c3		0b		phd		                PHD
.3979c4		08		php		                PHP
.3979c5		48		pha		                PHA             ; begin setdp macro
.3979c6		08		php		                PHP
.3979c7		c2 20		rep #$20	                REP #$20        ; set A long
.3979c9		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.3979cc		5b		tcd		                TCD
.3979cd		28		plp		                PLP
.3979ce		68		pla		                PLA             ; end setdp macro
.3979cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3979d1		8b		phb		                PHB                 ; Get the data bank into A
.3979d2		68		pla		                PLA
.3979d3		c2 20		rep #$20	                REP #$20        ; set A long
.3979d5		29 ff 00	and #$00ff	                AND #$00FF
.3979d8		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.3979da		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.3979dc		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.3979de		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.3979e0		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.3979e2		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.3979e4		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.3979e6		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.3979e8		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.3979ea		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.3979ec		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.3979ee		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.3979f0		28		plp		                PLP
.3979f1		2b		pld		                PLD
.3979f2		ab		plb		                PLB
.3979f3		68		pla		                PLA
.3979f4		6b		rtl		                RTL
>3979f5						.align 256
>397a00		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>397a08		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>397a10		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>397a18		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>397a20		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>397a28		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>397a30		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>397a38		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>397a40		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>397a48		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>397a50		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>397a58		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>397a60		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>397a68		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>397a70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>397a78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>397a80		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>397a88		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>397a90		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>397a98		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>397aa0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>397aa8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>397ab0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>397ab8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>397ac0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>397ac8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>397ad0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>397ad8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>397ae0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>397ae8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>397af0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>397af8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.397b00						KBD_STATE_MACH
>397b00		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>397b04		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>397b08		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>397b0c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>397b10		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>397b14		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>397b18		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>397b1c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>397b20		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>397b24		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>397b28		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>397b2c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>397b30		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>397b34		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>397b38		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>397b3c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>397b40		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>397b44		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>397b48		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>397b4c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>397b50		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>397b54		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>397b58		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>397b5c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>397b60		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>397b64						.align 256
>397c00		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>397c08		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>397c10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>397c18		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>397c20		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>397c28		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>397c30		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>397c38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397c40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397c48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397c50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397c58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397c60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397c68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397c70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397c78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397c80		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397c88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397c90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>397c98		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>397ca0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>397ca8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>397cb0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>397cb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397cc0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397cc8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397cd0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397cd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397ce0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397ce8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397cf0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397cf8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397d00		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>397d08		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>397d10		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>397d18		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>397d20		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>397d28		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>397d30		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>397d38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397d40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397d48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397d50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397d58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397d60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397d68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397d70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397d78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397d80		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>397d88		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>397d90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>397d98		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>397da0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>397da8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>397db0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>397db8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397dc0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>397dc8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>397dd0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>397dd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397de0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397de8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397df0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397df8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397e00		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397e08		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397e10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>397e18		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>397e20		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>397e28		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>397e30		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>397e38		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>397e40		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>397e48		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>397e50		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>397e58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397e60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397e68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397e70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397e78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>397e80		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>397e88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>397e90		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>397e98		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>397ea0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>397ea8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>397eb0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>397eb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>397ec0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>397ec8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>397ed0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>397ed8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>397ee0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>397ee8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>397ef0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>397ef8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/mouse_driver.asm

.397f00						IINITMOUSE
.397f00		48		pha		                PHA
.397f01		da		phx		                PHX
.397f02		0b		phd		                PHD
.397f03		08		php		                PHP
.397f04		48		pha		                PHA             ; begin setdp macro
.397f05		08		php		                PHP
.397f06		c2 20		rep #$20	                REP #$20        ; set A long
.397f08		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.397f0b		5b		tcd		                TCD
.397f0c		28		plp		                PLP
.397f0d		68		pla		                PLA             ; end setdp macro
.397f0e		78		sei		                SEI
.397f0f		e2 20		sep #$20	                SEP #$20        ; set A short
.397f11		c2 10		rep #$10	                REP #$10        ; set X long
.397f13		18		clc		                CLC
.397f14		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397f17		20 f5 7f	jsr $397ff5	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.397f1a		b0 0b		bcs $397f27	                BCS mouse_init_fail
.397f1c		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.397f1e		8f 64 10 af	sta $af1064	                STA @l KBD_CMD_BUF
.397f22		20 cd 7f	jsr $397fcd	                JSR Poll_Outbuf_Mouse_TimeOut
.397f25		90 2a		bcc $397f51	                BCC mouse_found
.397f27		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.397f29		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.397f2d		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.397f31		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.397f33		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.397f37		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.397f3b		29 01		and #$01	                AND #FNX1_INT00_KBD
.397f3d		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.397f41		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.397f45		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.397f47		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.397f4b		28		plp		                PLP                             ; Return failure
.397f4c		2b		pld		                PLD
.397f4d		fa		plx		                PLX
.397f4e		68		pla		                PLA
.397f4f		38		sec		                SEC
.397f50		6b		rtl		                RTL
.397f51		af 60 10 af	lda $af1060	mouse_found     LDA KBD_OUT_BUF		            ; Clear the Output buffer
.397f55		c9 00		cmp #$00	                CMP #$00
.397f57		d0 be		bne $397f17	                BNE DO_CMD_A9_AGAIN
.397f59		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.397f5b		20 9f 7f	jsr $397f9f	                JSR MOUSE_WRITE
.397f5e		20 b4 7f	jsr $397fb4	                JSR MOUSE_READ
.397f61		b0 c4		bcs $397f27	                BCS mouse_init_fail
.397f63		a9 e8		lda #$e8	                LDA #$E8
.397f65		20 9f 7f	jsr $397f9f	                JSR MOUSE_WRITE
.397f68		20 b4 7f	jsr $397fb4	                JSR MOUSE_READ
.397f6b		b0 ba		bcs $397f27	                BCS mouse_init_fail
.397f6d		a9 00		lda #$00	                LDA #$00
.397f6f		20 9f 7f	jsr $397f9f	                JSR MOUSE_WRITE
.397f72		20 b4 7f	jsr $397fb4	                JSR MOUSE_READ
.397f75		b0 b0		bcs $397f27	                BCS mouse_init_fail
.397f77		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.397f79		20 9f 7f	jsr $397f9f	                JSR MOUSE_WRITE
.397f7c		20 b4 7f	jsr $397fb4	                JSR MOUSE_READ
.397f7f		b0 a6		bcs $397f27	                BCS mouse_init_fail
.397f81		a9 00		lda #$00	                LDA #$00
.397f83		85 e0		sta $e0		                STA MOUSE_PTR
.397f85		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.397f89		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.397f8b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.397f8f		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.397f93		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.397f95		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.397f99		28		plp		mouse_init_ok   PLP
.397f9a		2b		pld		                PLD
.397f9b		fa		plx		                PLX
.397f9c		68		pla		                PLA
.397f9d		18		clc		                CLC
.397f9e		6b		rtl		                RTL
.397f9f						MOUSE_WRITE
.397f9f		e2 20		sep #$20	                SEP #$20        ; set A short
.397fa1		48		pha		                PHA
.397fa2		20 e8 7f	jsr $397fe8	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.397fa5		a9 d4		lda #$d4	                LDA #$D4
.397fa7		8f 64 10 af	sta $af1064	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.397fab		20 e8 7f	jsr $397fe8	                JSR Poll_Inbuf
.397fae		68		pla		                PLA
.397faf		8f 60 10 af	sta $af1060	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.397fb3		60		rts		                RTS
.397fb4						MOUSE_READ
.397fb4		e2 20		sep #$20	                SEP #$20        ; set A short
.397fb6		20 cd 7f	jsr $397fcd	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.397fb9		b0 04		bcs $397fbf	                BCS done
.397fbb		af 60 10 af	lda $af1060	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.397fbf		60		rts		done            RTS
.397fc0						Poll_Outbuf_Mouse
.397fc0		e2 20		sep #$20	                SEP #$20        ; set A short
.397fc2		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT
.397fc6		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.397fc8		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.397fca		d0 f6		bne $397fc2	                BNE wait
.397fcc		60		rts		                RTS
.397fcd						Poll_Outbuf_Mouse_TimeOut
.397fcd		e2 20		sep #$20	                SEP #$20        ; set A short
.397fcf		c2 10		rep #$10	                REP #$10        ; set X long
.397fd1		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397fd4		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT
.397fd8		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.397fda		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.397fdc		f0 08		beq $397fe6	                BEQ ret_success
.397fde		ca		dex		                DEX
.397fdf		e0 00 00	cpx #$0000	                CPX #$0000
.397fe2		d0 f0		bne $397fd4	                BNE wait
.397fe4		38		sec		                SEC                     ; Return timeout error
.397fe5		60		rts		                RTS
.397fe6		18		clc		ret_success     CLC                     ; Return success
.397fe7		60		rts		                RTS
.397fe8						Poll_Inbuf
.397fe8		e2 20		sep #$20	                SEP #$20        ; set A short
.397fea		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT         ; Load Status Byte
.397fee		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.397ff0		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.397ff2		f0 f6		beq $397fea	                BEQ wait
.397ff4		60		rts		                RTS
.397ff5						Poll_Inbuf_Mouse_TimeOut
.397ff5		e2 20		sep #$20	                SEP #$20        ; set A short
.397ff7		c2 10		rep #$10	                REP #$10        ; set X long
.397ff9		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.397ffc		af 64 10 af	lda $af1064	wait            LDA STATUS_PORT
.398000		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.398002		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.398004		d0 08		bne $39800e	                BNE ret_success
.398006		ca		dex		                DEX
.398007		e0 00 00	cpx #$0000	                CPX #$0000
.39800a		d0 f0		bne $397ffc	                BNE wait
.39800c		38		sec		                SEC                     ; Return timeout error
.39800d		60		rts		                RTS
.39800e		18		clc		ret_success     CLC                     ; Return success
.39800f		60		rts		                RTS
.398010						MOUSE_INTERRUPT
.398010		0b		phd		                PHD
.398011		08		php		                PHP
.398012						                setasx
.398012		78		sei		                SEI
.398013		48		pha		                PHA             ; begin setdp macro
.398014		08		php		                PHP
.398015		c2 20		rep #$20	                REP #$20        ; set A long
.398017		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.39801a		5b		tcd		                TCD
.39801b		28		plp		                PLP
.39801c		68		pla		                PLA             ; end setdp macro
.39801d		a6 e0		ldx $e0		                LDX @b MOUSE_PTR                ; Get the # of the mouse byte to write
.39801f		af 60 10 af	lda $af1060	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.398023		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.398027		e8		inx		                INX                             ; Move to the next byte
.398028		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.39802b		d0 1b		bne $398048	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.39802d		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.398031		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.398033		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.398037		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.398039		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.39803d		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.39803f		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.398043		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.398045		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.398048		86 e0		stx $e0		save_ptr        STX @b MOUSE_PTR                ; Save our next byte position (state)
.39804a		28		plp		                PLP
.39804b		2b		pld		                PLD
.39804c		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/boot_sound.asm

.39804d						BOOT_SOUND
.39804d		48		pha		                PHA
.39804e		da		phx		                PHX
.39804f		08		php		                PHP
.398050		e2 20		sep #$20	                SEP #$20        ; set A short
.398052		a9 00		lda #$00	                LDA #0
.398054		a2 00 00	ldx #$0000	                LDX #0
.398057		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.39805b		e8		inx		                INX                             ; Move to the next SID register
.39805c		e0 18 00	cpx #$0018	                CPX #24
.39805f		d0 f6		bne $398057	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.398061		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.398063		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.398067		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.39806b		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.39806f		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.398071		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.398075		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.398079		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.39807d		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.39807f		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.398083		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.398085		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.398089		a9 16		lda #$16	                LDA #22
.39808b		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.39808f		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.398091		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.398095		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.398098		22 e1 0f 39	jsl $390fe1	                JSL ILOOP_MS
.39809c		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.39809e		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.3980a2		a9 08		lda #$08	                LDA #8
.3980a4		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.3980a8		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.3980aa		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.3980ae		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.3980b1		22 e1 0f 39	jsl $390fe1	                JSL ILOOP_MS
.3980b5		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.3980b7		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.3980bb		a9 21		lda #$21	                LDA #33
.3980bd		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.3980c1		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.3980c3		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.3980c7		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.3980ca		22 e1 0f 39	jsl $390fe1	                JSL ILOOP_MS
.3980ce		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.3980d0		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.3980d4		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.3980d8		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.3980dc		a9 0e		lda #$0e	                LDA #14
.3980de		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.3980e2		a2 64 00	ldx #$0064	                LDX #100
.3980e5		22 e1 0f 39	jsl $390fe1	                JSL ILOOP_MS
.3980e9		3a		dec a		                DEC A
.3980ea		d0 f2		bne $3980de	                BNE dampen
.3980ec		28		plp		                PLP
.3980ed		fa		plx		                PLX
.3980ee		68		pla		                PLA
.3980ef		6b		rtl		                RTL
.3980f0						BOOT_SOUND_OFF
.3980f0		48		pha		                PHA
.3980f1		da		phx		                PHX
.3980f2		08		php		                PHP
.3980f3		a2 00 00	ldx #$0000	                LDX #0
.3980f6		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.3980fa		e8		inx		                INX                             ; Move to the next SID register
.3980fb		e0 18 00	cpx #$0018	                CPX #24
.3980fe		d0 f6		bne $3980f6	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.398100		28		plp		                PLP
.398101		fa		plx		                PLX
.398102		68		pla		                PLA
.398103		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.398104						KERNEL_DATA
>398104		20 20 20 20 0b 0c 0b 0c		greet_msg       .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " FFFFFFF MMMMMMMM XX    XXX " ,$0D
>39810c		0b 0c 0b 0c 0b 0c 20 46 46 46 46 46 46 46 20 4d
>39811c		4d 4d 4d 4d 4d 4d 4d 20 58 58 20 20 20 20 58 58
>39812c		58 20 0d
>39812f		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM   XX XXX   ",$0D
>398137		0c 0b 0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d
>398147		20 4d 4d 20 4d 4d 20 20 20 58 58 20 58 58 58 20
>398157		20 20 0d
>39815a		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FFFFF   MM MM MM    XXX      ",$0D
>398162		0b 0c 0b 0c 20 46 46 46 46 46 20 20 20 4d 4d 20
>398172		4d 4d 20 4d 4d 20 20 20 20 58 58 58 20 20 20 20
>398182		20 20 0d
>398185		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM  XXX  XX     ",$0D
>39818d		0c 0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d
>39819d		4d 20 4d 4d 20 20 58 58 58 20 20 58 58 20 20 20
>3981ad		20 20 0d
>3981b0		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "FF      MM MM MM XXX     XX    ",$0D
>3981b8		0b 0c 20 46 46 20 20 20 20 20 20 4d 4d 20 4d 4d
>3981c8		20 4d 4d 20 58 58 58 20 20 20 20 20 58 58 20 20
>3981d8		20 20 0d
>3981db		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX FMX -- 3,670,016 Bytes Free", $0D
>3981e3		45 4e 49 58 20 46 4d 58 20 2d 2d 20 33 2c 36 37
>3981f3		30 2c 30 31 36 20 42 79 74 65 73 20 46 72 65 65
>398203		0d
>398204		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>39820c		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>39821c		72 6e 65 6c 3a 20

;******  Processing file: src\version.asm

>398222		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+266 (2021-05-15)"
>39822a		6c 70 68 61 2b 32 36 36 20 28 32 30 32 31 2d 30
>39823a		35 2d 31 35 29

;******  Return to file: src\kernel.asm

>39823f		0d 00				                .text $0D,$00
>398241		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>398249		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398259		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398269		f0 f0
>39826b		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>398273		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398283		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398293		f0 f0
>398295		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>39829d		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3982ad		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3982bd		f0 f0
>3982bf		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>3982c7		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3982d7		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>3982e7		f0 f0
>3982e9		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>3982f1		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398301		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>398311		f0 f0
>398313		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>398317		00 00 80 ff			                .text $00, $00, $80, $FF
>39831b		00 80 00 ff			                .text $00, $80, $00, $FF
>39831f		80 00 00 ff			                .text $80, $00, $00, $FF
>398323		00 80 80 ff			                .text $00, $80, $80, $FF
>398327		80 80 00 ff			                .text $80, $80, $00, $FF
>39832b		80 00 80 ff			                .text $80, $00, $80, $FF
>39832f		80 80 80 ff			                .text $80, $80, $80, $FF
>398333		00 45 ff ff			                .text $00, $45, $FF, $FF
>398337		13 45 8b ff			                .text $13, $45, $8B, $FF
>39833b		00 00 20 ff			                .text $00, $00, $20, $FF
>39833f		00 20 00 ff			                .text $00, $20, $00, $FF
>398343		20 00 00 ff			                .text $20, $00, $00, $FF
>398347		20 20 20 ff			                .text $20, $20, $20, $FF
>39834b		40 40 40 ff			                .text $40, $40, $40, $FF
>39834f		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>398353		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>398357		00 00 80 ff			                .text $00, $00, $80, $FF
>39835b		00 80 00 ff			                .text $00, $80, $00, $FF
>39835f		80 00 00 ff			                .text $80, $00, $00, $FF
>398363		00 20 20 ff			                .text $00, $20, $20, $FF
>398367		20 20 00 ff			                .text $20, $20, $00, $FF
>39836b		20 00 20 ff			                .text $20, $00, $20, $FF
>39836f		20 20 20 ff			                .text $20, $20, $20, $FF
>398373		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>398377		13 45 8b ff			                .text $13, $45, $8B, $FF
>39837b		00 00 20 ff			                .text $00, $00, $20, $FF
>39837f		00 20 00 ff			                .text $00, $20, $00, $FF
>398383		40 00 00 ff			                .text $40, $00, $00, $FF
>398387		10 10 10 ff			                .text $10, $10, $10, $FF
>39838b		40 40 40 ff			                .text $40, $40, $40, $FF
>39838f		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>398393		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>39839b		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3983ab		00
>3983ac		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>3983b4		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>3983c4		00
>3983c5		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>3983cd		20 45 78 65 63 75 74 65 64 2e 0d 00
>3983d9		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>3983e1		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>3983f1		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>3983f9		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>398409		64 2e 2e 2e 0d 00
>39840f		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>398417		20 50 72 65 73 65 6e 74 0d 00
>398421		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>398429		65 73 65 6e 74 0d 00
>398430		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>398438		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>398448		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>398458		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>398460		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>398470		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>39847d		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>398485		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>398491		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>398499		54 55 52 45 20 46 4f 55 4e 44 2e 00
>3984a5		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>3984ad		45 44 2e 00
>3984b1		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>3984b9		47 20 42 4d 50 20 50 41 52 53 45 52 00
>3984c6		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>3984ce		50 72 65 73 65 6e 74 3a 00
>3984d7		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>3984df		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>3984ef		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>3984fd		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>398505		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>398515		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>398522		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>39852a		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>39853a		72 64 2e 00
>39853e		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>398546		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398556		49 44 45 20 64 72 69 76 65 2e 00
>398561		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>398569		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>398579		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>398587		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>39858f		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>39859e		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>3985a6		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>3985b5		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>3985bd		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>3985cd		2e 2e 00
>3985d0		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>3985d8		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>3985e0		52 4f 52 00
>3985e4		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>3985ec		38 39 41 42 43 44 45 46 00
>3985f5						.align 256
>398600		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398608		37 38 39 30 2d 3d 08 09
>398610		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398618		6f 70 5b 5d 0d 00 61 73
>398620		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398628		27 60 00 5c 7a 78 63 76
>398630		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>398638		00 20 00 81 82 83 84 85
>398640		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>398648		11 00 00 9d 00 1d 00 00
>398650		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>398658		8c 00 00 00 00 00 00 00
>398660		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398668		00 00 00 00 00 00 00 00
>398670		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398678		00 00 00 00 00 00 00 00
>398680		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>398688		26 2a 28 29 5f 2b 08 09
>398690		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>398698		4f 50 7b 7d 0d 00 41 53
>3986a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>3986a8		22 7e 00 7c 5a 58 43 56
>3986b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3986b8		00 20 00 00 00 00 00 00
>3986c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3986c8		00 00 00 00 00 00 00 00
>3986d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3986d8		00 00 00 00 00 00 00 00
>3986e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3986e8		00 00 00 00 00 00 00 00
>3986f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3986f8		00 00 00 00 00 00 00 00
>398700		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398708		37 38 39 30 2d 3d 08 09
>398710		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>398718		0f 10 5b 5d 0d 00 01 13
>398720		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>398728		27 00 00 5c 1a 18 03 16
>398730		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398738		00 20 00 00 00 00 00 00
>398740		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398748		00 00 00 00 00 00 00 00
>398750		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398758		00 00 00 00 00 00 00 00
>398760		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398768		00 00 00 00 00 00 00 00
>398770		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398778		00 00 00 00 00 00 00 00
>398780		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398788		37 38 39 30 2d 3d 08 09
>398790		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398798		6f 70 5b 5d 0d 00 61 73
>3987a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>3987a8		27 60 00 5c 7a 78 63 76
>3987b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>3987b8		00 20 00 00 00 00 00 00
>3987c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>3987c8		00 00 00 00 00 00 00 00
>3987d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3987d8		00 00 00 00 00 00 00 00
>3987e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3987e8		00 00 00 00 00 00 00 00
>3987f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3987f8		00 00 00 00 00 00 00 00
>398800		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>398808		37 38 39 30 2d 3d 08 09
>398810		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>398818		6f 70 5b 5d 0d 00 61 73
>398820		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>398828		27 60 00 5c 7a 78 63 76
>398830		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>398838		00 20 00 00 00 00 00 00
>398840		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>398848		00 00 00 00 00 00 00 00
>398850		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>398858		00 00 00 00 00 00 00 00
>398860		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>398868		00 00 00 00 00 00 00 00
>398870		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>398878		00 00 00 00 00 00 00 00
>398880		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>398888		00 00 00 00 00 00 00 00
>398890		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>398898		00 00 00 00 00 00 00 00
>3988a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>3988a8		00 00 00 00 00 00 00 00
>3988b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>3988b8		00 00 00 00 00 00 00 00
>3988c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>3988c8		11 00 00 9d 00 1d 00 05
>3988d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>3988d8		00 00 00 00 00 00 00 00
>3988e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>3988e8		00 00 00 00 00 00 00 00
>3988f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>3988f8		00 00 00 00 00 00 00 00
>398900						.align 256
>398900		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>398908		34 37 3a 3d 3f 41 44 46
>398910		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>398918		57 58 5a 5b 5d 5e 60 61
>398920		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>398928		6d 6f 70 71 72 73 75 76
>398930		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>398938		80 81 82 83 84 85 86 87
>398940		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>398948		8f 90 91 92 93 93 94 95
>398950		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>398958		9d 9e 9e 9f a0 a1 a2 a2
>398960		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>398968		a9 aa ab ab ac ad ae ae
>398970		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>398978		b5 b5 b6 b7 b7 b8 b9 b9
>398980		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>398988		bf c0 c0 c1 c2 c2 c3 c4
>398990		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>398998		c9 ca ca cb cb cc cd cd
>3989a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>3989a8		d2 d3 d4 d4 d5 d5 d6 d6
>3989b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>3989b8		db dc dc dd de de df df
>3989c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>3989c8		e4 e4 e5 e5 e6 e6 e7 e7
>3989d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>3989d8		ec ec ed ed ee ee ef ef
>3989e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>3989e8		f4 f4 f5 f5 f6 f6 f7 f7
>3989f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>3989f8		fb fc fc fd fd fe fe ff
>398a00						.align 256
>398a00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>398a08		25 27 2a 2c 2e 30 32 34
>398a10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>398a18		44 46 47 49 4a 4c 4d 4f
>398a20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>398a28		5b 5c 5d 5e 60 61 62 63
>398a30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>398a38		6d 6e 70 71 72 73 74 75
>398a40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>398a48		7e 7f 80 81 82 83 84 84
>398a50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>398a58		8d 8e 8e 8f 90 91 92 93
>398a60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>398a68		9a 9b 9c 9d 9e 9f 9f a0
>398a70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>398a78		a7 a8 a9 aa aa ab ac ad
>398a80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>398a88		b3 b4 b5 b6 b6 b7 b8 b8
>398a90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>398a98		bf bf c0 c1 c2 c2 c3 c4
>398aa0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>398aa8		ca ca cb cc cc cd ce ce
>398ab0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>398ab8		d4 d5 d6 d6 d7 d7 d8 d9
>398ac0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>398ac8		de df e0 e0 e1 e1 e2 e3
>398ad0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>398ad8		e8 e9 e9 ea ea eb ec ec
>398ae0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>398ae8		f1 f2 f3 f3 f4 f4 f5 f5
>398af0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>398af8		fb fb fc fc fd fd fe ff
>398b00						.align 256
>398b00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>398b08		83 dd ce 39 cd c5 3b 15
>398b10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>398b18		87 12 31 65 89 27 88 42
>398b20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>398b28		94 ce 56 ec fe da 58 c9
>398b30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>398b38		d0 10 2c b2 4b ea 32 61
>398b40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>398b48		a1 e6 ca 2d b3 ce b0 79
>398b50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>398b58		5f e3 fb bd 15 2e be f5
>398b60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>398b68		8d 8f 2c 80 0a 5e 99 36
>398b70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>398b78		13 52 44 2f e3 ef 44 a2
>398b80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>398b88		be 23 02 58 0a 52 5e b4
>398b90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>398b98		d5 cf 3e df c4 9e da bb
>398ba0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>398ba8		77 7d b1 3b 4a 68 35 6e
>398bb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>398bb8		b5 8f 44 63 55 6f e1 50
>398bc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>398bc8		57 74 b9 bd 05 14 50 eb
>398bd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>398bd8		44 bc ec db 22 58 fc be
>398be0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>398be8		24 aa 82 11 5c 9f 43 4d
>398bf0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>398bf8		3e 3d 66 7e 0a 1c 6b 74
>398c00						.align 16
>398c00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>398c08		01 01 01 00 00 00 00 00
>398c10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>398c18		ff ff ff 01 00 00 00 00
>398c20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>398c28		01 55 ff ff 01 00 00 00
>398c30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>398c38		ff ff ff ff 01 00 00 00
>398c40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>398c48		ff ff 01 ff ff 01 00 00
>398c50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>398c58		01 ff ff 01 ff 01 00 00
>398c60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>398c68		ff 01 ff ff ff 01 00 00
>398c70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>398c78		ff ff ff ff ff 01 01 00
>398c80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>398c88		ff ff ff ff 01 ff ff 01
>398c90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>398c98		ff ff ff ff ff ff ff 01
>398ca0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>398ca8		55 55 01 ff ff 55 01 00
>398cb0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>398cb8		01 01 55 ff 55 01 00 00
>398cc0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>398cc8		01 55 55 55 01 00 00 00
>398cd0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>398cd8		01 55 55 01 00 00 00 00
>398ce0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>398ce8		00 01 01 00 00 00 00 00
>398cf0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>398cf8		00 00 00 00 00 00 00 00
>3a0000		5c 37 8a 3a 5c 49 70 3a		        .binary "binaries/basic816_3A0000.bin"
>3a0008		5c 3b 27 3a 5c ba 02 3a 5c 58 00 3a 5c b8 00 3a
>3a0018		5c d4 03 3a 5c 5e 02 3a 5c 79 02 3a 5c 80 02 3a
>3a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>3a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>3a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>3a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>3a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>3a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>3a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>3a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>3a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>3a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>3a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>3a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>3a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>3a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>3a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>3a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>3a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>3a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>3a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>3a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>3a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>3a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>3a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>3a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>3a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>3a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>3a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>3a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>3a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>3a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>3a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>3a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>3a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>3a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>3a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>3a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>3a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>3a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>3a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>3a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>3a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>3a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>3a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>3a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>3a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>3a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>3a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>3a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a2 00
>3a0338		00 a9 00 9f 18 f0 3a e8 e0 40 00 d0 f6 a9 80 8f
>3a0348		b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00 8f 00 02
>3a0358		af 8f 0c 02 af 8f 18 02 af 8f 24 02 af 60 08 e2
>3a0368		20 48 48 a9 00 22 3c 10 00 68 22 18 10 00 af 89
>3a0378		0f 00 29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01
>3a0388		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>3a0398		f8 68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2
>3a03a8		20 68 28 60 08 22 78 10 00 28 60 08 0b 08 c2 20
>3a03b8		48 a9 00 08 5b 68 28 e2 20 a5 b6 1a 85 b6 cf 13
>3a03c8		00 00 90 05 20 14 00 64 b6 2b 28 60 da 5a 0b 08
>3a03d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 8f b5
>3a03e8		08 00 af b4 08 00 29 20 f0 07 af b5 08 00 20 28
>3a03f8		00 af b4 08 00 29 80 f0 07 af b5 08 00 20 66 03
>3a0408		af b4 08 00 29 40 f0 14 af b5 08 00 20 81 03 af
>3a0418		b5 08 00 c9 0d d0 05 a9 0a 20 81 03 28 2b 7a fa
>3a0428		60 08 e2 20 bd 00 00 f0 06 20 18 00 e8 80 f5 28
>3a0438		60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 53
>3a0448		04 68 29 ff 00 20 53 04 68 28 60 08 c2 20 48 e2
>3a0458		20 48 4a 4a 4a 4a 20 6a 04 68 20 6a 04 c2 20 68
>3a0468		28 60 08 c2 30 da 29 0f 00 aa bf 00 d0 3a 20 18
>3a0478		00 fa 28 60 08 c2 30 48 da 5a 8b 0b c2 30 a3 0b
>3a0488		18 69 03 00 aa e2 20 a9 3a 48 ab bd 00 00 f0 06
>3a0498		20 66 03 e8 80 f5 c2 30 2b ab 7a fa 68 28 60 08
>3a04a8		e2 20 c9 5b b0 04 c9 41 b0 0b c9 7b b0 04 c9 61
>3a04b8		b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9
>3a04c8		30 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04
>3a04d8		c9 30 b0 13 c9 67 b0 04 c9 61 b0 0b c9 47 b0 04
>3a04e8		c9 41 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0
>3a04f8		04 c9 30 b0 12 c9 67 b0 04 c9 61 b0 0f c9 47 b0
>3a0508		04 c9 41 b0 09 28 60 38 e9 30 80 f9 29 df 38 e9
>3a0518		37 80 f2 08 e2 20 c9 7b b0 06 c9 61 90 02 29 df
>3a0528		28 60 08 e2 20 c2 10 bd 00 00 f0 09 20 1b 05 9d
>3a0538		00 00 e8 80 f2 28 60 08 0b 08 c2 20 48 a9 00 08
>3a0548		5b 68 28 c2 20 48 06 23 26 25 a5 23 85 0c a5 25
>3a0558		85 0e 06 0c 26 0e 06 0c 26 0e 18 a5 23 65 0c 85
>3a0568		23 a5 25 65 0e 85 25 68 2b 28 60 08 0b 08 c2 20
>3a0578		48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9
>3a0588		0a 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af 1e
>3a0598		01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b 28
>3a05a8		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5
>3a05b8		23 8f 1a 01 00 a9 64 00 8f 18 01 00 af 1c 01 00
>3a05c8		85 23 64 25 af 1e 01 00 85 29 64 2b e2 20 a9 00
>3a05d8		85 27 85 2d 2b 28 60 08 c2 20 a5 23 d0 08 a5 25
>3a05e8		d0 04 28 e2 02 60 28 c2 02 60 08 c2 30 a9 ff ff
>3a05f8		85 23 85 25 e2 20 a9 00 85 27 28 60 08 c2 30 a9
>3a0608		00 00 85 23 85 25 e2 20 a9 00 85 27 28 60 08 e2
>3a0618		20 a5 27 c9 00 f0 07 c9 01 d0 05 20 cf 5b 28 60
>3a0628		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a0638		08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08
>3a0648		e2 20 a5 2d c9 00 f0 37 c9 01 d0 35 c2 20 a5 25
>3a0658		48 a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20
>3a0668		a9 01 85 27 20 cf 5b c2 20 a5 23 85 29 a5 25 85
>3a0678		2b e2 20 a9 00 85 2d c2 20 68 85 23 68 85 25 28
>3a0688		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a0698		d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08
>3a06a8		08 e2 20 a5 27 c9 02 d0 02 28 60 08 c2 20 48 a9
>3a06b8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a06c8		ff 00 20 23 1e e2 20 dc d4 08 08 e2 20 a5 27 c9
>3a06d8		00 f0 07 c9 01 d0 0b 20 cf 5b c2 20 a5 25 d0 21
>3a06e8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a06f8		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a0708		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a0718		d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08
>3a0728		08 e2 20 a5 27 c9 00 f0 07 c9 01 d0 11 20 cf 5b
>3a0738		a5 26 d0 29 a5 25 d0 25 a5 24 d0 21 28 60 08 c2
>3a0748		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a0758		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2 20
>3a0768		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a0778		20 29 ff 00 20 23 1e e2 20 dc d4 08 08 e2 20 a5
>3a0788		27 c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08
>3a0798		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a07a8		20 23 1e e2 20 dc d4 08 20 c9 5b 28 60 08 e2 20
>3a07b8		a5 2d c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00
>3a07c8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a07d8		00 20 23 1e e2 20 dc d4 08 20 e6 07 28 60 c2 20
>3a07e8		a5 25 48 a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25
>3a07f8		e2 20 a9 00 85 27 20 c9 5b c2 20 a5 23 85 29 a5
>3a0808		25 85 2b e2 20 a9 01 85 2d c2 20 68 85 23 68 85
>3a0818		25 60 08 e2 20 a5 27 c9 00 f0 23 c9 01 f0 2e 08
>3a0828		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a0838		00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 a5 2d
>3a0848		c9 00 f0 16 c9 01 d0 d7 20 c9 5b 80 0d a5 2d c9
>3a0858		01 f0 07 c9 00 d0 c8 20 e6 07 e2 20 a5 27 28 60
>3a0868		08 e2 20 a5 27 c9 02 d0 25 a5 2d c9 02 f0 24 08
>3a0878		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a0888		00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 20 1a
>3a0898		08 a5 27 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a08a8		28 c2 30 64 23 64 25 e2 20 64 27 a7 00 c9 26 f0
>3a08b8		44 e2 20 a7 00 20 c0 04 90 76 20 3f 05 38 e9 30
>3a08c8		c2 20 29 ff 00 18 65 23 85 23 a5 25 69 00 00 85
>3a08d8		25 20 e2 20 80 db 08 c2 20 48 a9 00 08 5b 68 28
>3a08e8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a08f8		e2 20 dc d4 08 20 e2 20 a7 00 c9 48 f0 04 c9 68
>3a0908		d0 d4 20 e2 20 e2 20 a7 00 20 d1 04 90 22 20 f2
>3a0918		04 c2 20 06 23 26 25 06 23 26 25 06 23 26 25 06
>3a0928		23 26 25 29 ff 00 18 65 23 85 23 20 e2 20 80 d5
>3a0938		2b 28 60 08 c2 30 a5 04 f0 1c 38 a5 04 e5 1a a8
>3a0948		e2 20 b7 1a f0 10 c9 20 f0 06 c9 09 f0 02 28 60
>3a0958		88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9
>3a0968		00 08 5b 68 28 c2 30 a5 1a 85 00 e2 20 a5 1c 85
>3a0978		02 20 03 21 a7 00 20 c0 04 90 0c 20 9d 08 c2 20
>3a0988		a5 23 85 d7 20 03 21 c2 20 a5 00 85 1a e2 20 a5
>3a0998		02 85 1c 20 af 09 e2 20 20 20 0a c9 00 f0 05 20
>3a09a8		cb 0b 80 f4 2b 28 60 08 c2 20 a5 1a 85 00 a5 1c
>3a09b8		85 02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7
>3a09c8		00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46
>3a09d8		c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04
>3a09e8		c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0
>3a09f8		0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20
>3a0a08		e2 20 80 b3 a7 00 c9 3a d0 03 20 e2 20 a9 03 85
>3a0a18		1e a9 91 20 cb 0b 28 60 08 0b 08 c2 20 48 a9 00
>3a0a28		08 5b 68 28 e2 20 a9 7f 85 1e c2 10 20 80 0b a5
>3a0a38		1e d0 03 4c c0 0a c2 20 a5 1a 85 00 e2 20 a5 1c
>3a0a48		85 02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da
>3a0a58		c9 91 f0 d6 c8 c4 1e 90 f3 c2 10 a7 00 c9 22 d0
>3a0a68		05 20 e2 0a 80 28 a5 1e c9 03 90 19 c2 20 a5 00
>3a0a78		c5 1a d0 08 e2 20 a5 02 c5 1c f0 09 e2 20 a7 04
>3a0a88		20 12 51 b0 09 e2 20 20 f2 0a c9 00 d0 11 c2 20
>3a0a98		a5 00 85 04 e2 20 a5 02 85 06 20 e2 20 80 a9 c9
>3a0aa8		81 d0 15 20 3b 09 c9 00 f0 11 89 80 f0 08 c9 90
>3a0ab8		f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9
>3a0ac8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>3a0ad8		ff 00 20 23 1e e2 20 dc d4 08 08 e2 20 20 e2 20
>3a0ae8		a7 00 f0 04 c9 22 d0 f5 28 60 da 5a 08 0b 08 c2
>3a0af8		20 48 a9 00 08 5b 68 28 c2 20 a5 04 d0 0a e2 20
>3a0b08		a5 04 d0 04 a9 00 80 0a e2 20 a7 04 20 12 51 a9
>3a0b18		00 2a 85 28 c2 30 a9 c0 0c 85 08 e2 20 a9 3a 85
>3a0b28		0a a2 80 00 e2 20 a0 01 00 b7 08 f0 31 c5 1e d0
>3a0b38		32 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 3a 85 0e
>3a0b48		a5 28 f0 07 a7 0c 20 12 51 b0 18 e2 10 a0 00 b7
>3a0b58		00 20 1b 05 d7 0c d0 0b c8 c4 1e 90 f2 8a 2b 28
>3a0b68		7a fa 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5
>3a0b78		0a 69 00 85 0a e8 80 ac 08 0b 8b 08 c2 20 48 a9
>3a0b88		00 08 5b 68 28 c2 30 a9 c0 0c 85 08 a9 3a 00 85
>3a0b98		0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e b0 06
>3a0ba8		c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08
>3a0bb8		a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1e ab
>3a0bc8		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a0bd8		20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69
>3a0be8		00 00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87 08 f0
>3a0bf8		13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00
>3a0c08		85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a
>3a0c18		18 69 c0 0c aa 28 60 08 8b 0b 08 c2 20 48 a9 00
>3a0c28		08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20
>3a0c38		c2 10 20 0f 0c bd 00 00 c2 20 29 0f 00 2b ab 28
>3a0c48		60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>3a0c58		20 48 a9 3a 48 ab 68 28 c2 30 20 0f 0c bd 04 00
>3a0c68		2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>3a0c78		28 08 e2 20 48 a9 3a 48 ab 68 28 e2 20 c2 10 20
>3a0c88		0f 0c bd 00 00 c2 20 29 f0 00 2b ab 28 60 08 8b
>3a0c98		0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a0ca8		3a 48 ab 68 28 e2 20 c2 10 20 0f 0c bd 06 00 c2
>3a0cb8		20 29 ff 00 2b ab 28 60 03 01 10 d0 a8 27 02 00
>3a0cc8		03 01 12 d0 e8 27 02 00 02 01 14 d0 1f 28 02 00
>3a0cd8		02 01 16 d0 56 28 02 00 02 03 18 d0 60 28 02 00
>3a0ce8		00 01 1c d0 73 28 02 00 04 02 1e d0 31 2a 02 00
>3a0cf8		04 02 21 d0 f1 29 02 00 04 02 24 d0 b1 29 02 00
>3a0d08		04 01 27 d0 f1 28 02 00 04 01 29 d0 71 29 02 00
>3a0d18		04 01 2b d0 31 29 02 00 05 03 2d d0 db 28 01 00
>3a0d28		06 03 31 d0 ad 28 02 00 07 02 35 d0 c4 28 02 00
>3a0d38		ff 01 38 d0 00 00 00 00 40 01 3a d0 00 00 00 00
>3a0d48		20 03 3c d0 44 41 00 00 20 05 40 d0 49 45 00 00
>3a0d58		20 03 46 d0 94 44 00 00 20 04 4a d0 34 44 00 00
>3a0d68		20 03 4f d0 2b 44 00 00 20 02 53 d0 c3 43 00 00
>3a0d78		50 04 56 d0 00 00 00 00 50 04 5b d0 00 00 00 00
>3a0d88		20 05 60 d0 06 43 00 00 20 06 66 d0 7f 43 00 00
>3a0d98		20 03 6d d0 5b 41 00 00 50 02 71 d0 00 00 00 00
>3a0da8		50 04 74 d0 00 00 00 00 20 04 79 d0 4f 42 00 00
>3a0db8		20 02 7e d0 55 41 00 00 20 04 81 d0 58 41 00 00
>3a0dc8		50 05 86 d0 00 00 00 00 50 05 8c d0 00 00 00 00
>3a0dd8		20 04 92 d0 52 41 00 00 20 03 97 d0 8a 44 00 00
>3a0de8		20 04 9b d0 25 41 00 00 20 04 a0 d0 b5 40 00 00
>3a0df8		20 05 a5 d0 4b 40 00 00 20 05 ab d0 d8 3f 00 00
>3a0e08		20 03 b1 d0 d4 3f 00 00 20 04 b5 d0 b5 3e 00 00
>3a0e18		20 04 ba d0 c7 3f 00 00 20 07 bf d0 cb 3f 00 00
>3a0e28		20 03 c7 d0 08 3e 00 00 20 04 cb d0 71 3d 00 00
>3a0e38		00 01 d0 d0 71 2a 01 00 30 03 d2 d0 61 4b 00 00
>3a0e48		30 04 d6 d0 b1 4b 00 00 30 05 db d0 7a 4c 00 00
>3a0e58		30 05 e1 d0 07 4c 00 00 30 04 e7 d0 d9 4c 00 00
>3a0e68		30 03 ec d0 2e 4d 00 00 30 03 f0 d0 73 4d 00 00
>3a0e78		30 03 f4 d0 fc 4d 00 00 30 03 f8 d0 85 4e 00 00
>3a0e88		30 03 fc d0 e7 4e 00 00 30 04 00 d1 d3 4a 00 00
>3a0e98		30 03 05 d1 72 4a 00 00 30 04 09 d1 24 4a 00 00
>3a0ea8		30 03 0e d1 ce 49 00 00 30 05 12 d1 05 49 00 00
>3a0eb8		30 06 18 d1 24 48 00 00 30 04 1f d1 6f 47 00 00
>3a0ec8		10 03 24 d1 4e 50 00 00 10 03 28 d1 19 50 00 00
>3a0ed8		10 04 2c d1 22 6c 00 00 10 04 31 d1 65 50 00 00
>3a0ee8		10 03 36 d1 49 69 00 00 20 05 3a d1 f4 6a 00 00
>3a0ef8		10 04 40 d1 cf 6b 00 00 20 05 45 d1 db 6c 00 00
>3a0f08		20 03 4b d1 fa 6d 00 00 10 04 4f d1 67 6d 00 00
>3a0f18		20 06 54 d1 70 6e 00 00 20 04 5b d1 94 6f 00 00
>3a0f28		10 07 60 d1 16 50 00 00 20 03 68 d1 ff 3c 00 00
>3a0f38		20 05 6c d1 0f 3c 00 00 20 09 72 d1 30 2c 00 00
>3a0f48		20 09 7c d1 bd 2b 00 00 20 0a 86 d1 ed 2b 00 00
>3a0f58		20 07 91 d1 2a 2b 00 00 30 08 99 d1 26 46 00 00
>3a0f68		20 07 a2 d1 bf 2a 00 00 30 08 aa d1 90 46 00 00
>3a0f78		20 08 b3 d1 75 2d 00 00 20 08 bc d1 a9 2c 00 00
>3a0f88		20 06 c5 d1 af 2e 00 00 20 09 cc d1 b7 2f 00 00
>3a0f98		20 04 d6 d1 14 31 00 00 20 04 db d1 85 31 00 00
>3a0fa8		20 04 e0 d1 1e 32 00 00 20 06 e5 d1 5a 33 00 00
>3a0fb8		20 08 ec d1 f8 33 00 00 20 0a f5 d1 46 34 00 00
>3a0fc8		20 07 00 d2 7d 35 00 00 20 07 08 d2 fb 35 00 00
>3a0fd8		20 08 10 d2 6d 36 00 00 20 06 19 d2 aa 36 00 00
>3a0fe8		20 07 20 d2 da 39 00 00 50 06 28 d2 00 00 00 00
>3a0ff8		50 04 2f d2 00 00 00 00 20 06 34 d2 ef 3b 00 00
>3a1008		30 03 3b d2 3d 4f 00 00 30 03 3f d2 f5 46 00 00
>3a1018		30 03 43 d2 50 4f 00 00 30 03 47 d2 66 4f 00 00
>3a1028		30 03 4b d2 7c 4f 00 00 30 02 4f d2 92 4f 00 00
>3a1038		30 04 52 d2 a8 4f 00 00 30 04 57 d2 be 4f 00 00
>3a1048		30 04 5c d2 d4 4f 00 00 30 03 61 d2 ea 4f 00 00
>3a1058		30 03 65 d2 00 50 00 00 30 05 69 d2 4b 47 00 00
>3a1068		00 00 00 00 00 00 00 00 08 0b 08 c2 20 48 a9 00
>3a1078		08 5b 68 28 c2 30 a9 ff ff 85 ba e2 20 a9 37 85
>3a1088		bc c2 20 64 b7 64 bd e2 20 64 b9 64 bf 2b 28 60
>3a1098		5a 08 e2 20 85 ea c2 10 86 8f c2 20 a5 0e 48 a5
>3a10a8		0c 48 a5 12 48 a5 10 48 20 48 11 b0 03 20 cc 10
>3a10b8		20 d4 12 c2 20 68 85 10 68 85 12 68 85 0c 68 85
>3a10c8		0e 28 7a 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a10d8		e2 20 a6 8f ca 86 0c e8 c2 30 38 a5 ba e5 0c 85
>3a10e8		c0 e2 20 a5 bc e9 00 85 c2 20 d4 12 e2 20 a5 ea
>3a10f8		a0 00 00 97 c3 a9 00 a0 01 00 97 c3 a0 02 00 97
>3a1108		c3 c2 20 a9 00 00 97 c3 c2 20 18 a5 ba 69 01 00
>3a1118		a0 05 00 97 c3 e2 20 c8 c8 a5 bc 69 00 97 c3 c2
>3a1128		20 a5 c0 85 b7 e2 20 a5 c2 85 b9 c2 20 38 a5 c3
>3a1138		e9 01 00 85 ba e2 20 a5 c5 e9 00 85 bc 2b 28 60
>3a1148		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20
>3a1158		a5 bd 85 c9 e2 20 a5 bf 85 cb a5 c9 d0 17 e2 20
>3a1168		a5 cb d0 11 c2 20 a9 00 00 85 cf e2 20 a9 00 85
>3a1178		d1 2b 28 18 60 c2 20 a0 05 00 b7 c9 85 cc e2 20
>3a1188		c8 c8 b7 c9 85 ce c2 20 18 a5 c9 65 8f 85 0c e2
>3a1198		20 a5 cb 69 00 85 0e c2 20 18 a5 0c 69 08 00 85
>3a11a8		0c e2 20 a5 0e 69 00 85 0e c2 20 a5 0c c5 cc d0
>3a11b8		28 e2 20 a5 0e c5 ce d0 20 c2 20 a5 cf d0 5d e2
>3a11c8		20 a5 d1 d0 57 c2 20 a0 02 00 b7 c9 85 bd e2 20
>3a11d8		c8 c8 b7 c9 85 bf 4c 85 12 c2 20 a5 0c 69 08 00
>3a11e8		85 10 e2 20 a5 0e 69 00 85 12 e2 20 a5 c6 c5 10
>3a11f8		b0 3e 90 08 c2 20 a5 c6 c5 10 b0 34 c2 20 a5 c9
>3a1208		85 cf e2 20 a5 cb 85 d1 c2 20 a0 02 00 b7 cf 85
>3a1218		c9 e2 20 c8 c8 b7 cf 85 cb 4c 62 11 c2 20 a0 02
>3a1228		00 b7 c9 97 cf e2 20 c8 c8 b7 c9 97 cf 4c 85 12
>3a1238		c2 20 a0 05 00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97
>3a1248		0c c2 20 a0 02 00 b7 c9 97 0c e2 20 c8 c8 b7 c9
>3a1258		97 0c c2 20 a5 cf d0 14 e2 20 a5 cf d0 0e c2 20
>3a1268		a5 0c 85 bd e2 20 a5 0e 85 bf 80 11 c2 20 a0 02
>3a1278		00 a5 0c 97 cf e2 20 c8 c8 a5 0e 97 cf c2 20 a5
>3a1288		c9 85 c3 e2 20 a5 cb 85 c5 c2 20 a5 c3 85 b7 e2
>3a1298		20 a5 c5 85 b9 c2 20 a0 05 00 a5 0c 97 c3 e2 20
>3a12a8		c8 c8 a5 0e 97 c3 c2 20 a0 02 00 a9 00 00 97 c3
>3a12b8		e2 20 c8 c8 97 c3 e2 20 a5 ea e2 20 a0 00 00 97
>3a12c8		c3 a0 01 00 a9 00 97 c3 2b 28 38 60 08 c2 20 38
>3a12d8		a5 c0 e9 08 00 85 c3 e2 20 a5 c2 e9 00 85 c5 28
>3a12e8		60 08 e2 20 a5 c5 f0 04 c9 38 b0 12 c2 20 a5 c3
>3a12f8		f0 0c e2 20 a0 01 00 b7 c3 1a 97 c3 28 60 00 ea
>3a1308		08 e2 20 a5 c5 f0 04 c9 38 b0 17 c2 20 a5 c3 f0
>3a1318		11 e2 20 a0 01 00 b7 c3 3a 97 c3 d0 03 20 2c 13
>3a1328		28 60 00 ea 08 c2 20 a5 bd d0 21 e2 20 a5 bf d0
>3a1338		1b a5 c5 85 bf c2 20 a5 c3 85 bd a9 00 00 a0 02
>3a1348		00 97 c3 c8 c8 e2 20 97 c3 4c 13 14 e2 20 a5 bf
>3a1358		c5 c5 90 28 c2 20 a5 bd c5 c3 90 20 c2 20 a5 bd
>3a1368		a0 02 00 97 c3 e2 20 c8 c8 a5 bf 97 c3 c2 20 a5
>3a1378		c3 85 bd e2 20 a5 c5 85 bf 4c 13 14 c2 20 a5 bd
>3a1388		85 08 e2 20 a5 bf 85 0a e2 20 a0 04 00 b7 08 c5
>3a1398		c8 90 32 d0 0b c2 20 a0 02 00 b7 08 c5 c6 90 25
>3a13a8		c2 20 a0 02 00 b7 08 97 c3 e2 20 c8 c8 b7 08 97
>3a13b8		c3 c2 20 a5 c3 a0 02 00 97 08 e2 20 a5 c5 c8 c8
>3a13c8		97 08 4c 13 14 c2 20 a0 02 00 b7 08 d0 08 e2 20
>3a13d8		c8 c8 b7 08 f0 19 c2 20 a0 02 00 b7 08 85 0c e2
>3a13e8		20 c8 c8 b7 08 85 0a c2 20 a5 0c 85 08 80 99 c2
>3a13f8		20 a5 c3 a0 02 00 97 08 e2 20 c8 c8 a5 c5 97 08
>3a1408		a9 00 97 c3 c2 20 a0 02 00 97 c3 20 18 14 28 60
>3a1418		08 c2 20 a5 bd 85 c3 e2 20 a5 bf 85 c5 c2 20 a5
>3a1428		c3 d0 09 e2 20 a5 c5 d0 03 4c bb 14 c2 20 a0 02
>3a1438		00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0
>3a1448		05 00 b7 c3 85 10 e2 20 c8 c8 b7 c3 85 12 c2 20
>3a1458		a5 0c c5 10 d0 08 e2 20 a5 0e c5 12 f0 1f c2 20
>3a1468		a0 02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2
>3a1478		20 a5 0c 85 c3 e2 20 a5 0e 85 c5 80 a0 c2 20 a0
>3a1488		02 00 b7 c3 85 0c e2 20 c8 c8 b7 c3 85 0e c2 20
>3a1498		a0 02 00 b7 0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 c2
>3a14a8		20 a0 05 00 b7 0c 97 c3 e2 20 c8 c8 b7 0c 97 c3
>3a14b8		4c 34 14 28 60 08 c2 20 64 16 64 18 28 60 08 c2
>3a14c8		30 a5 16 d0 16 a5 18 d0 12 e2 20 64 16 a5 e2 1a
>3a14d8		1a 85 17 a5 e3 85 18 64 19 80 07 c2 20 a5 17 1a
>3a14e8		85 17 c2 20 a5 bb 3a c5 17 f0 02 b0 1f 08 c2 20
>3a14f8		48 a9 00 08 5b 68 28 e2 20 a9 03 8f d3 08 00 c2
>3a1508		20 29 ff 00 20 23 1e e2 20 dc d4 08 28 60 c9 00
>3a1518		d0 05 c0 01 00 f0 05 09 30 97 16 c8 60 08 c2 30
>3a1528		64 0c a5 25 10 1a 18 a5 23 49 ff ff 69 01 00 85
>3a1538		23 a5 25 49 ff ff 69 00 00 85 25 a9 ff ff 85 0c
>3a1548		64 10 64 12 64 14 a2 1f 00 f8 06 23 26 25 a5 10
>3a1558		65 10 85 10 a5 12 65 12 85 12 a5 14 65 14 85 14
>3a1568		ca 10 e7 d8 e2 20 20 c6 14 a0 00 00 a5 0c f0 04
>3a1578		a9 2d 80 02 a9 20 97 16 c8 a2 05 00 b5 10 29 f0
>3a1588		4a 4a 4a 4a 20 16 15 b5 10 29 0f 20 16 15 ca 10
>3a1598		eb c0 01 00 d0 0c a9 20 87 16 a0 01 00 a9 30 97
>3a15a8		16 c8 a9 00 97 16 28 60 00 ea 08 e2 20 c2 10 a0
>3a15b8		00 00 bd 00 00 f0 04 e8 c8 80 f7 28 60 08 0b 08
>3a15c8		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a0 00 00
>3a15d8		b7 23 d0 04 b7 29 f0 25 b7 23 d7 29 90 12 d0 03
>3a15e8		c8 80 ed c2 20 a9 01 00 85 23 e2 20 64 25 80 15
>3a15f8		c2 20 a9 ff ff 85 23 e2 20 85 25 80 08 c2 20 64
>3a1608		23 e2 20 64 25 e2 20 a9 00 85 27 2b 28 60 08 0b
>3a1618		8b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 08
>3a1628		c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 20
>3a1638		b2 15 84 0c 08 c2 20 48 e2 20 a5 2b 48 ab c2 20
>3a1648		68 28 a6 29 20 b2 15 c2 20 98 38 65 0c aa e2 20
>3a1658		a9 02 20 98 10 c2 20 a5 b7 85 08 e2 20 a5 b9 85
>3a1668		0a a0 00 00 08 c2 20 48 e2 20 a5 25 48 ab c2 20
>3a1678		68 28 a6 23 bd 00 00 f0 06 97 08 e8 c8 80 f5 e2
>3a1688		20 08 c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6
>3a1698		29 bd 00 00 97 08 f0 04 e8 c8 80 f5 c2 20 a5 08
>3a16a8		85 23 e2 20 a5 0a 85 25 a9 02 85 27 ab 2b 28 60
>3a16b8		da 5a 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a16c8		20 a5 0a 48 a5 08 48 c2 30 08 c2 20 48 e2 20 a5
>3a16d8		25 48 ab c2 20 68 28 a6 23 20 b2 15 98 aa e8 e2
>3a16e8		20 a9 02 20 98 10 c2 20 a5 c0 85 08 a5 c2 85 0a
>3a16f8		a0 00 00 e2 20 b7 23 97 08 f0 03 c8 80 f7 c2 20
>3a1708		a5 08 85 23 a5 0a 85 25 c2 20 68 85 08 68 85 0a
>3a1718		ab 2b 28 7a fa 60 08 e2 20 c2 10 a0 00 00 b7 23
>3a1728		f0 05 c8 80 f9 84 92 c2 30 c4 29 90 13 f0 11 a5
>3a1738		8f 30 0d f0 0b c4 8f b0 12 a5 29 d0 0e 4c 9c 17
>3a1748		20 c6 14 e2 20 a9 00 87 16 80 39 20 c6 14 c2 30
>3a1758		18 a5 23 65 29 85 23 a5 25 69 00 00 85 25 a0 00
>3a1768		00 e2 20 a7 23 97 16 f0 1b c2 20 18 a5 23 69 01
>3a1778		00 85 23 a5 25 69 00 00 85 25 c8 c4 8f d0 e2 a9
>3a1788		00 00 97 16 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>3a1798		a9 02 85 27 28 60 08 c2 30 20 c5 15 a5 23 c9 ff
>3a17a8		ff d0 05 20 f2 05 80 03 20 04 06 28 60 08 c2 30
>3a17b8		20 c5 15 a5 23 c9 01 00 d0 05 20 f2 05 80 03 20
>3a17c8		04 06 28 60 08 c2 30 20 c5 15 a5 23 c9 00 00 d0
>3a17d8		05 20 f2 05 80 03 20 04 06 28 60 08 c2 30 20 c5
>3a17e8		15 a5 23 c9 00 00 f0 05 20 f2 05 80 03 20 04 06
>3a17f8		28 60 08 c2 30 20 c5 15 a5 23 c9 ff ff f0 05 20
>3a1808		f2 05 80 03 20 04 06 28 60 08 c2 30 20 c5 15 a5
>3a1818		23 c9 01 00 f0 05 20 f2 05 80 03 20 04 06 28 60
>3a1828		08 e2 20 a5 27 c9 02 d0 1d a5 23 d0 19 a5 24 d0
>3a1838		15 a5 25 d0 11 20 c6 14 a9 00 87 16 c2 20 a5 16
>3a1848		85 23 a5 18 85 25 28 60 48 5a 0b 08 08 c2 20 48
>3a1858		a9 00 08 5b 68 28 c2 30 a9 00 00 85 00 85 1a a9
>3a1868		36 00 85 02 85 1c 22 3c 11 00 b0 20 a0 02 00 b7
>3a1878		1a f0 0f c5 55 90 10 c5 59 f0 02 b0 05 20 b3 18
>3a1888		80 e4 28 2b 7a 68 60 20 bf 21 80 da 08 c2 20 48
>3a1898		a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20
>3a18a8		29 ff 00 20 23 1e e2 20 dc d4 08 08 c2 30 85 23
>3a18b8		64 25 20 25 15 a5 16 1a 85 23 a5 18 85 25 20 c5
>3a18c8		45 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02
>3a18d8		e2 20 a9 20 20 18 00 c2 20 20 f2 18 90 fb e2 20
>3a18e8		a9 0d 20 18 00 20 bf 21 28 60 08 0b 8b 08 c2 20
>3a18f8		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a1908		28 e2 20 c2 10 a7 00 f0 3a 30 05 20 18 00 80 29
>3a1918		c2 20 29 7f 00 0a 0a 0a 18 69 c0 0c 85 08 a9 3a
>3a1928		00 69 00 00 85 0a 08 e2 20 48 a9 3a 48 ab 68 28
>3a1938		a0 02 00 b7 08 aa 20 29 04 c2 20 20 e2 20 ab 2b
>3a1948		28 18 60 ab 2b 28 38 60 08 c2 20 a9 ff 6f 85 1f
>3a1958		a9 ff 7f 85 21 a9 ff ff 85 23 85 25 85 29 85 2b
>3a1968		e2 20 85 27 85 2d 28 60 08 0b 8b 08 c2 20 48 a9
>3a1978		00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2
>3a1988		30 5a a4 1f bd 00 00 99 00 00 bd 02 00 99 02 00
>3a1998		e2 20 bd 04 00 99 04 00 c2 20 38 98 e9 05 00 85
>3a19a8		1f 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a19b8		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a
>3a19c8		18 a5 1f 69 05 00 85 1f a8 b9 00 00 9d 00 00 b9
>3a19d8		02 00 9d 02 00 e2 20 b9 04 00 9d 04 00 bd 00 00
>3a19e8		7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>3a19f8		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>3a1a08		5a a4 21 99 00 00 88 84 21 7a ab 2b 28 60 08 0b
>3a1a18		8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a1a28		00 48 ab 68 28 e2 20 c2 10 5a a4 21 c8 84 21 b9
>3a1a38		00 00 c2 20 29 ff 00 7a ab 2b 28 60 08 e2 20 a9
>3a1a48		01 20 ed 19 28 60 5a 08 8b 08 e2 20 48 a9 00 48
>3a1a58		ab 68 28 e2 20 a4 21 b9 01 00 c9 01 d0 08 c2 20
>3a1a68		e6 21 ab 28 7a 60 08 c2 20 48 a9 00 08 5b 68 28
>3a1a78		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a1a88		e2 20 dc d4 08 48 08 0b 8b 08 c2 20 48 a9 00 08
>3a1a98		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4
>3a1aa8		21 c0 ff 7f f0 11 20 1f 0c 85 0c b9 01 00 20 1f
>3a1ab8		0c c5 0c f0 02 90 08 c2 20 ab 2b 28 68 18 60 c2
>3a1ac8		20 ab 2b 28 68 38 60 4c 9d 08 08 e2 20 a9 00 8f
>3a1ad8		00 4d 00 a2 01 00 20 d1 1c 20 16 06 c2 20 a5 23
>3a1ae8		9f 00 4d 00 e2 20 af 00 4d 00 1a 30 3e 8f 00 4d
>3a1af8		00 e8 e8 20 03 21 e2 20 a7 00 c9 90 f0 09 c9 2c
>3a1b08		d0 0a 20 e2 20 80 cf 20 e2 20 28 60 08 c2 20 48
>3a1b18		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>3a1b28		29 ff 00 20 23 1e e2 20 dc d4 08 08 c2 20 48 a9
>3a1b38		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>3a1b48		ff 00 20 23 1e e2 20 dc d4 08 08 20 e5 53 90 47
>3a1b58		e2 20 a5 ea 29 80 d0 06 20 e6 51 4c 9d 1b 20 58
>3a1b68		51 90 53 c2 20 a5 c2 48 a5 c0 48 a0 09 00 b7 08
>3a1b78		85 c0 e2 20 c8 c8 b7 08 85 c2 e2 20 a9 8f 20 ef
>3a1b88		21 20 44 1a 20 d2 1a 20 bc 68 20 4e 1a c2 20 68
>3a1b98		85 c2 68 85 c0 28 60 08 c2 20 48 a9 00 08 5b 68
>3a1ba8		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 23
>3a1bb8		1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>3a1bc8		e2 20 a9 05 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a1bd8		e2 20 dc d4 08 08 0b 08 c2 20 48 a9 00 08 5b 68
>3a1be8		28 e2 20 c2 10 20 e2 20 a0 00 00 b7 00 f0 24 c9
>3a1bf8		22 f0 03 c8 80 f5 84 0c e2 20 a9 02 a6 0c e8 20
>3a1c08		c6 14 a0 00 00 c4 0c f0 29 a7 00 97 16 c8 20 e2
>3a1c18		20 80 f2 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a1c28		02 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a1c38		d4 08 a9 00 97 16 c2 20 a5 16 85 23 a5 18 85 25
>3a1c48		a9 02 00 85 27 20 e2 20 2b 28 60 08 e2 20 a7 00
>3a1c58		c2 20 29 ff 00 20 49 0c 85 2f 20 44 1a 08 e2 20
>3a1c68		48 a9 00 48 ab 68 28 20 77 1c 20 4e 1a 28 60 20
>3a1c78		e2 20 6c 2f 08 48 08 0b 8b 08 c2 20 48 a9 00 08
>3a1c88		5b 68 28 c2 30 20 16 1a 89 80 00 f0 37 48 20 49
>3a1c98		0c 85 2f 68 20 96 0c c9 01 00 f0 08 c2 30 a2 29
>3a1ca8		08 20 ae 19 c2 30 a2 23 08 20 ae 19 08 e2 20 48
>3a1cb8		a9 00 48 ab 68 28 20 ce 1c a2 23 08 20 70 19 ab
>3a1cc8		2b 28 68 60 00 ea 6c 2f 08 08 08 c2 20 48 a9 00
>3a1cd8		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 10
>3a1ce8		da e2 20 a7 00 d0 03 4c 94 1d 30 33 c9 20 d0 03
>3a1cf8		4c 8e 1d c9 3a b0 04 c9 30 b0 56 c9 26 f0 52 c9
>3a1d08		22 d0 03 4c a7 1d c9 5b b0 07 c9 41 90 03 4c b3
>3a1d18		1d c9 7b b0 07 c9 61 90 03 4c b3 1d 4c 94 1d c9
>3a1d28		8f f0 40 c9 90 f0 41 20 6c 0c c9 30 d0 0c 20 53
>3a1d38		1c a2 23 08 20 70 19 4c e9 1c c9 00 d0 4e a7 00
>3a1d48		a6 21 e0 ff 7f f0 05 20 8d 1a b0 12 20 ed 19 80
>3a1d58		35 c2 20 20 07 5a a2 23 08 20 70 19 80 83 20 7d
>3a1d68		1c 80 dd 20 ed 19 80 1e e2 20 a4 21 c0 ff 7f f0
>3a1d78		46 a4 21 b9 01 00 c9 01 f0 3d c9 8f f0 05 20 7d
>3a1d88		1c 80 ee 20 16 1a 20 e2 20 4c e9 1c a6 21 e0 ff
>3a1d98		7f b0 24 bd 01 00 c9 01 f0 1d 20 7d 1c 80 ed 20
>3a1da8		dd 1b a2 23 08 20 70 19 4c e9 1c 20 52 1b a2 23
>3a1db8		08 20 70 19 4c e9 1c a2 23 08 20 ae 19 fa 28 60
>3a1dc8		08 0b 8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20
>3a1dd8		48 a9 00 08 5b 68 28 c2 30 a9 fd 5f 85 33 ab 2b
>3a1de8		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>3a1df8		92 33 c6 33 c6 33 2b 28 60 08 c2 30 29 ff 00 20
>3a1e08		ea 1d 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>3a1e18		c2 30 e6 33 e6 33 b2 33 2b 28 60 8b 0b 08 08 c2
>3a1e28		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>3a1e38		68 28 c2 20 85 23 a9 00 00 85 25 e2 20 a9 00 85
>3a1e48		27 85 ea a9 3a 85 e9 c2 20 a9 7d 1e 85 e7 20 48
>3a1e58		53 c2 20 a5 d7 85 23 a5 d9 85 25 e2 20 a9 00 85
>3a1e68		27 85 ea a9 3a 85 e9 c2 20 a9 81 1e 85 e7 20 48
>3a1e78		53 28 2b ab 60 45 52 52 00 45 52 4c 00 e2 20 c2
>3a1e88		10 20 9c 03 af d3 08 00 0a c2 20 29 ff 00 a8 08
>3a1e98		e2 20 48 a9 3a 48 ab 68 28 be d7 1e 20 29 04 c2
>3a1ea8		20 a5 d7 f0 27 a2 07 1f 20 29 04 08 e2 20 48 a9
>3a1eb8		00 48 ab 68 28 c2 20 af d7 08 00 8f 23 08 00 a9
>3a1ec8		00 00 8f 25 08 00 20 e3 45 20 9c 03 4c 85 27 0b
>3a1ed8		1f 0e 1f 14 1f 21 1f 2f 1f 3d 1f 50 1f 66 1f 76
>3a1ee8		1f 85 1f 92 1f a3 1f b2 1f bf 1f cd 1f dc 1f ed
>3a1ef8		1f 06 20 1a 20 2e 20 44 20 58 20 73 20 8b 20 20
>3a1f08		61 74 00 4f 4b 00 42 72 65 61 6b 00 53 79 6e 74
>3a1f18		61 78 20 65 72 72 6f 72 00 4f 75 74 20 6f 66 20
>3a1f28		6d 65 6d 6f 72 79 00 54 79 70 65 20 6d 69 73 6d
>3a1f38		61 74 63 68 00 56 61 72 69 61 62 6c 65 20 6e 6f
>3a1f48		74 20 66 6f 75 6e 64 00 4c 69 6e 65 20 6e 75 6d
>3a1f58		62 65 72 20 6e 6f 74 20 66 6f 75 6e 64 00 53 74
>3a1f68		61 63 6b 20 75 6e 64 65 72 66 6c 6f 77 00 53 74
>3a1f78		61 63 6b 20 6f 76 65 72 66 6c 6f 77 00 4f 75 74
>3a1f88		20 6f 66 20 72 61 6e 67 65 00 49 6c 6c 65 67 61
>3a1f98		6c 20 61 72 67 75 6d 65 6e 74 00 46 69 6c 65 20
>3a1fa8		6e 6f 74 20 66 6f 75 6e 64 00 4e 6f 74 20 61 20
>3a1fb8		6e 75 6d 62 65 72 00 4d 61 74 68 20 6f 76 65 72
>3a1fc8		66 6c 6f 77 00 4d 61 74 68 20 75 6e 64 65 72 66
>3a1fd8		6c 6f 77 00 44 69 76 69 73 69 6f 6e 20 62 79 20
>3a1fe8		7a 65 72 6f 00 55 6e 61 62 6c 65 20 74 6f 20 72
>3a1ff8		65 61 64 20 64 69 72 65 63 74 6f 72 79 00 55 6e
>3a2008		61 62 6c 65 20 74 6f 20 6c 6f 61 64 20 66 69 6c
>3a2018		65 00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65
>3a2028		20 66 69 6c 65 00 55 6e 61 62 6c 65 20 74 6f 20
>3a2038		64 65 6c 65 74 65 20 66 69 6c 65 00 43 6f 75 6c
>3a2048		64 20 6e 6f 74 20 66 69 6e 64 20 66 69 6c 65 00
>3a2058		43 6f 75 6c 64 20 6e 6f 74 20 75 70 64 61 74 65
>3a2068		20 64 69 72 65 63 74 6f 72 79 00 43 6f 75 6c 64
>3a2078		20 6e 6f 74 20 63 6f 70 79 20 74 68 65 20 66 69
>3a2088		6c 65 00 41 72 67 75 6d 65 6e 74 20 6f 75 74 73
>3a2098		69 64 65 20 64 6f 6d 61 69 6e 00 08 0b 08 c2 20
>3a20a8		48 a9 00 08 5b 68 28 e2 20 a9 00 85 d2 2b 28 60
>3a20b8		0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 c2 20 a9
>3a20c8		85 1e 8f d4 08 00 e2 20 a9 3a 8f d6 08 00 28 20
>3a20d8		8a 44 20 cb 3f 64 31 28 2b 60 08 0b 08 c2 20 48
>3a20e8		a9 00 08 5b 68 28 c2 20 18 a5 00 69 01 00 85 00
>3a20f8		e2 20 a5 02 69 00 85 02 2b 28 60 08 0b 08 c2 20
>3a2108		48 a9 00 08 5b 68 28 e2 20 a7 00 f0 0f c9 20 f0
>3a2118		06 c9 09 f0 02 80 05 20 e2 20 80 ed 2b 28 60 08
>3a2128		e2 20 a7 00 f0 09 c9 3a f0 05 20 e2 20 80 f3 28
>3a2138		60 08 e2 20 64 36 a7 00 f0 19 c5 37 f0 2c c9 9b
>3a2148		f0 1e c9 9f f0 1a c9 9e f0 1a c9 a0 f0 16 20 e2
>3a2158		20 80 e3 20 bf 21 c2 20 a5 d7 f0 1d e2 20 80 d6
>3a2168		e6 36 80 ea c6 36 30 30 80 e4 a5 35 30 06 a5 36
>3a2178		f0 02 80 da 20 e2 20 28 60 08 c2 20 48 a9 00 08
>3a2188		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a2198		20 23 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a21a8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a21b8		23 1e e2 20 dc d4 08 08 c2 30 a0 00 00 b7 1a 85
>3a21c8		0c 18 a5 1a 65 0c 85 1a a5 1c 69 00 00 85 1c a0
>3a21d8		02 00 b7 1a 85 d7 18 a5 1a 69 04 00 85 00 a5 1c
>3a21e8		69 00 00 85 02 28 60 08 e2 20 48 20 03 21 68 e2
>3a21f8		20 c7 00 d0 08 20 e2 20 20 03 21 28 60 08 c2 20
>3a2208		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>3a2218		20 29 ff 00 20 23 1e e2 20 dc d4 08 08 e2 20 20
>3a2228		03 21 e2 20 a7 00 f0 10 c9 3a f0 0c c5 37 f0 05
>3a2238		20 e2 20 80 ef 28 38 60 28 18 60 5a 08 e2 20 a0
>3a2248		00 00 b7 00 f0 0d c9 3a f0 07 c9 20 d0 05 c8 80
>3a2258		f1 a9 00 28 7a 60 08 0b 8b 08 c2 20 48 a9 00 08
>3a2268		5b 68 28 20 50 19 e2 20 a9 00 85 dc 22 3c 11 00
>3a2278		b0 4b a7 00 c9 3a d0 03 20 e2 20 20 03 21 a7 00
>3a2288		d0 03 4c 0f 23 20 a7 04 b0 52 a7 00 10 10 20 6c
>3a2298		0c 85 0c c9 20 d0 03 4c fd 22 a5 d2 f0 51 08 c2
>3a22a8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a22b8		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2 20
>3a22c8		48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2
>3a22d8		20 29 ff 00 20 23 1e e2 20 dc d4 08 20 94 44 4c
>3a22e8		0f 23 08 e2 20 48 a9 00 48 ab 68 28 6c 2f 08 a5
>3a22f8		0c c9 10 d0 a9 a7 00 20 49 0c c2 20 85 2f 20 50
>3a2308		19 20 e2 20 20 ea 22 ab 2b 28 60 08 58 20 a3 20
>3a2318		20 c8 1d e2 20 9c 8a 0f c2 20 a5 1a 85 00 a5 1c
>3a2328		85 02 4c 54 23 08 c2 20 a0 02 00 b7 1a 85 d7 20
>3a2338		bd 14 e2 20 a5 dc c9 03 f0 12 c2 20 18 a5 1a 69
>3a2348		04 00 85 00 e2 20 a5 1c 69 00 85 02 c2 20 20 5e
>3a2358		22 e2 20 a5 dc c9 03 f0 f3 c9 00 d0 31 e2 20 20
>3a2368		03 21 a7 00 f0 28 c9 3a f0 1f 08 c2 20 48 a9 00
>3a2378		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a2388		00 20 23 1e e2 20 dc d4 08 20 e2 20 80 be 28 60
>3a2398		08 58 e2 20 a9 80 85 d2 9c 8a 0f 20 c8 1d c2 30
>3a23a8		64 31 a0 02 00 b7 1a f0 29 20 2d 23 e2 20 a5 dc
>3a23b8		c9 01 f0 1e c9 02 f0 ea c9 03 f0 e6 c2 20 a0 00
>3a23c8		00 18 a5 1a 77 1a 85 1a e2 20 a5 1c 69 00 85 1c
>3a23d8		80 d0 e2 20 a9 00 85 d2 28 60 08 c2 30 c2 20 a9
>3a23e8		00 00 85 08 a9 36 00 85 0a c2 20 a0 02 00 b7 08
>3a23f8		f0 31 c5 23 f0 1e b0 2b c2 20 a0 00 00 18 a5 08
>3a2408		77 08 85 0c e2 20 a5 0a 69 00 85 0a c2 20 a5 0c
>3a2418		85 08 80 d7 c2 20 a5 08 85 1a e2 20 a5 0a 85 1c
>3a2428		28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5
>3a2438		0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18
>3a2448		a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2
>3a2458		20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85
>3a2468		0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>3a2478		c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9
>3a2488		01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5
>3a2498		08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6
>3a24a8		28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2
>3a24b8		20 a5 0a 69 00 85 0e c2 20 18 a5 d9 69 04 00 85
>3a24c8		00 e2 20 a5 db 69 00 85 02 a0 00 00 c2 20 38 a5
>3a24d8		d9 f7 08 85 d9 e2 20 a5 db e9 00 85 db 20 2e 24
>3a24e8		20 8a 44 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>3a24f8		c2 30 a0 02 00 97 d9 18 a5 d9 69 04 00 85 08 e2
>3a2508		20 a5 db 69 00 85 0a e2 20 a0 00 00 b7 1a 97 08
>3a2518		f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20
>3a2528		a0 00 00 a5 0c 97 d9 c2 20 18 a5 d9 65 0c 85 0c
>3a2538		e2 20 a5 db 69 00 85 db c2 20 a5 0c 85 d9 c2 20
>3a2548		a0 00 00 a9 00 00 97 d9 c8 c0 05 00 d0 f8 20 8a
>3a2558		44 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>3a2568		30 a9 00 00 85 08 a9 36 00 85 0a a0 02 00 b7 08
>3a2578		f0 1d c5 d7 f0 25 b0 1d a0 00 00 18 a5 08 77 08
>3a2588		85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9
>3a2598		00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b
>3a25a8		60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 1a
>3a25b8		f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5
>3a25c8		0a 85 02 18 a5 d9 69 04 00 85 0c a5 db 69 00 00
>3a25d8		85 0e 18 a5 d9 65 10 85 d9 a5 db 69 00 00 85 db
>3a25e8		18 a5 d9 69 04 00 85 08 a5 db 69 00 00 85 0a 20
>3a25f8		6d 24 c2 20 a5 10 a0 00 00 97 00 a5 d7 a0 02 00
>3a2608		97 00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85
>3a2618		02 a0 00 00 e2 20 b7 1a 97 00 f0 03 c8 80 f7 20
>3a2628		8a 44 28 60 08 c2 30 85 d7 20 5b 25 c9 00 00 f0
>3a2638		2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 aa
>3a2648		24 68 85 0a 68 85 08 a5 1a 85 00 a5 1c 85 02 20
>3a2658		03 21 e2 20 a7 00 f0 0a 20 a9 25 80 05 a5 d7 20
>3a2668		ed 24 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a2678		e2 20 c2 10 a2 00 00 bd 00 4f f0 03 e8 80 f8 86
>3a2688		0c c2 30 8a c9 02 00 90 12 3a 18 69 00 4f aa 18
>3a2698		65 8f a8 a5 0c 3a 8b 44 00 00 ab c2 20 a6 55 a0
>3a26a8		00 4f a5 8f 8b 54 00 3a ab e2 20 a5 0c c9 02 90
>3a26b8		18 a6 8f a9 22 9d 00 4f e8 bd 00 4f d0 fa a9 22
>3a26c8		9d 00 4f a9 00 e8 9d 00 4f 28 2b 60 da 5a 8b 0b
>3a26d8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 ad
>3a26e8		00 4f c9 23 f0 0a c9 7c f0 17 28 2b ab 7a fa 60
>3a26f8		c2 20 a9 03 00 85 8f a9 1a 27 85 55 20 6c 26 80
>3a2708		e9 c2 20 a9 04 00 85 8f a9 1e 27 85 55 20 6c 26
>3a2718		80 d8 44 49 52 00 42 52 55 4e 00 8b 08 20 3d 02
>3a2728		08 e2 20 48 a9 3a 48 ab 68 28 a2 6f d2 20 29 04
>3a2738		28 ab 60 08 e2 30 a9 01 20 1c 00 20 db 00 c9 00
>3a2748		f0 f9 c9 0d f0 02 80 f3 28 60 0b 08 08 c2 20 48
>3a2758		a9 00 08 5b 68 28 c2 30 64 d7 a9 00 4f 85 1a a9
>3a2768		00 00 85 1c 20 61 09 c2 20 a5 d7 d0 05 20 13 23
>3a2778		80 07 20 2c 26 28 2b 38 60 28 2b 18 60 c2 30 a2
>3a2788		ff fe 9a 20 23 27 20 08 00 20 0c 00 22 3c 11 00
>3a2798		a9 00 00 20 1c 00 20 d4 26 20 52 27 b0 e8 80 e3
>3a27a8		08 e2 20 20 68 08 c9 00 f0 2c c9 01 f0 2d c9 02
>3a27b8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a27c8		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a27d8		08 20 16 16 80 08 20 37 54 80 03 20 a6 56 28 60
>3a27e8		08 e2 20 20 1a 08 c9 00 f0 23 c9 01 f0 24 08 c2
>3a27f8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>3a2808		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 20 49 54
>3a2818		80 03 20 9b 56 28 60 08 e2 20 20 1a 08 c9 00 f0
>3a2828		23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a2838		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2
>3a2848		20 dc d4 08 20 5b 54 80 03 20 3c 57 28 60 20 84
>3a2858		07 20 b5 07 20 f1 56 60 a5 23 8f 1a 01 00 a5 29
>3a2868		8f 18 01 00 af 1e 01 00 85 23 60 08 c2 30 48 20
>3a2878		84 07 a5 2d c9 00 00 d0 0d a5 2b d0 09 da a6 29
>3a2888		20 0f 64 fa 80 1c 20 b5 07 c2 20 a5 2b 48 a5 29
>3a2898		48 20 9a 62 c2 20 68 85 29 68 85 2b 20 3c 57 20
>3a28a8		79 64 68 28 60 08 20 16 06 20 47 06 c2 20 a5 23
>3a28b8		25 29 85 23 a5 25 25 2b 85 25 28 60 08 20 16 06
>3a28c8		20 47 06 c2 20 a5 23 05 29 85 23 a5 25 05 2b 85
>3a28d8		25 28 60 08 20 16 06 c2 20 a5 23 49 ff ff 85 23
>3a28e8		a5 25 49 ff ff 85 25 28 60 08 e2 20 20 68 08 c9
>3a28f8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2908		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2918		ff 00 20 23 1e e2 20 dc d4 08 20 9e 17 80 08 20
>3a2928		5c 55 80 03 20 d1 5c 28 60 08 e2 20 20 68 08 c9
>3a2938		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2948		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2958		ff 00 20 23 1e e2 20 dc d4 08 20 b5 17 80 08 20
>3a2968		7d 55 80 03 20 e6 5c 28 60 08 e2 20 20 68 08 c9
>3a2978		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2988		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2998		ff 00 20 23 1e e2 20 dc d4 08 20 cc 17 80 08 20
>3a29a8		aa 55 80 03 20 fb 5c 28 60 08 e2 20 20 68 08 c9
>3a29b8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a29c8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a29d8		ff 00 20 23 1e e2 20 dc d4 08 20 e3 17 80 08 20
>3a29e8		c8 55 80 03 20 3a 5d 28 60 08 e2 20 20 68 08 c9
>3a29f8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2a08		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2a18		ff 00 20 23 1e e2 20 dc d4 08 20 fa 17 80 08 20
>3a2a28		e6 55 80 03 20 25 5d 28 60 08 e2 20 20 68 08 c9
>3a2a38		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>3a2a48		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a2a58		ff 00 20 23 1e e2 20 dc d4 08 20 11 18 80 08 20
>3a2a68		13 56 80 03 20 10 5d 28 60 08 e2 20 a5 27 c9 00
>3a2a78		f0 2d c9 01 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>3a2a88		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a2a98		e2 20 dc d4 08 e2 20 a5 26 49 80 85 26 80 16 c2
>3a2aa8		20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85 25 e6
>3a2ab8		23 d0 02 e6 25 28 60 08 e2 20 20 d1 1c 20 28 07
>3a2ac8		20 73 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 ef
>3a2ad8		21 20 d1 1c 20 28 07 20 73 05 a5 23 0a 0a 0a 0a
>3a2ae8		05 29 48 a9 2c 20 ef 21 20 d1 1c 20 28 07 20 73
>3a2af8		05 a5 23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c
>3a2b08		8f 0e 08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f
>3a2b18		04 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 27 21
>3a2b28		28 60 08 e2 20 20 d1 1c 20 28 07 20 73 05 a5 23
>3a2b38		0a 0a 0a 0a 05 29 48 a9 2c 20 ef 21 20 d1 1c 20
>3a2b48		28 07 20 73 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>3a2b58		20 ef 21 20 d1 1c 20 16 06 20 a9 05 c2 20 a5 23
>3a2b68		85 92 a5 29 85 23 20 73 05 e2 20 a5 23 0a 0a 0a
>3a2b78		0a 05 29 48 c2 20 a5 92 85 23 20 73 05 e2 20 a5
>3a2b88		23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e
>3a2b98		08 af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08
>3a2ba8		af 68 8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af
>3a2bb8		20 27 21 28 60 08 e2 20 48 20 d1 1c 20 28 07 e2
>3a2bc8		20 a5 23 29 0f 0a 0a 0a 0a 83 01 a9 2c 20 ef 21
>3a2bd8		20 d1 1c 20 28 07 a5 23 29 0f 03 01 8f 1e 00 00
>3a2be8		e2 20 68 28 60 08 c2 20 f4 00 00 e2 20 20 d1 1c
>3a2bf8		20 28 07 a5 23 83 01 a9 2c 20 ef 21 20 d1 1c 20
>3a2c08		28 07 a5 23 83 02 a9 2c 20 ef 21 20 d1 1c 20 28
>3a2c18		07 a5 23 8f 0d 00 af a3 02 8f 0e 00 af a3 01 8f
>3a2c28		0f 00 af c2 20 68 28 60 08 c2 20 f4 00 00 e2 20
>3a2c38		20 d1 1c 20 16 06 a5 23 f0 16 a9 01 8f 04 00 af
>3a2c48		a9 20 8f 08 00 af 8f 09 00 af 22 2c 11 00 80 0a
>3a2c58		a9 00 8f 04 00 af 22 2c 11 00 a9 2c 85 37 20 24
>3a2c68		22 90 39 20 e2 20 20 d1 1c 20 28 07 a5 23 83 01
>3a2c78		a9 2c 20 ef 21 20 d1 1c 20 28 07 a5 23 83 02 a9
>3a2c88		2c 20 ef 21 20 d1 1c 20 28 07 a5 23 8f 05 00 af
>3a2c98		a3 02 8f 06 00 af a3 01 8f 07 00 af c2 20 68 28
>3a2ca8		60 08 c2 20 3b 38 e9 05 00 1b e2 20 20 d1 1c 20
>3a2cb8		28 07 a5 23 c9 0a 90 1f 08 c2 20 48 a9 00 08 5b
>3a2cc8		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>3a2cd8		23 1e e2 20 dc d4 08 83 01 a9 2c 20 ef 21 20 d1
>3a2ce8		1c 20 28 07 a5 23 83 02 a9 2c 20 ef 21 20 d1 1c
>3a2cf8		20 28 07 a5 23 83 03 a9 2c 20 ef 21 20 d1 1c 20
>3a2d08		28 07 a5 23 83 04 a9 2c 20 ef 21 20 d1 1c 20 28
>3a2d18		07 a5 23 83 05 a9 af 85 a0 a3 01 0a c2 20 29 ff
>3a2d28		00 aa bf 61 2d 3a 85 9e e2 20 a3 02 c2 20 29 ff
>3a2d38		00 0a 0a 18 65 9e 85 9e e2 20 a0 02 00 a3 03 97
>3a2d48		9e a0 01 00 a3 04 97 9e a0 00 00 a3 05 97 9e c2
>3a2d58		20 3b 18 69 05 00 1b 28 60 00 20 00 24 00 28 00
>3a2d68		2c 00 30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08
>3a2d78		20 d1 1c 20 16 06 c2 20 a5 23 89 00 01 d0 17 af
>3a2d88		00 00 af 89 00 01 f0 0e e2 20 a9 00 8f 01 00 af
>3a2d98		a9 01 8f 01 00 af c2 20 a5 23 8f 00 00 af e2 20
>3a2da8		a5 24 c2 20 29 03 00 0a aa c2 20 bf fc 2d 3a 8f
>3a2db8		10 f0 3a bf 04 2e 3a 8f 12 f0 3a af 10 f0 3a 8f
>3a2dc8		08 01 00 af 12 f0 3a 8f 0a 01 00 af 0c 01 00 8f
>3a2dd8		14 f0 3a e2 20 af 0e 01 00 8f 16 f0 3a 22 2c 11
>3a2de8		00 c2 20 af 1a 00 00 aa af 1c 00 00 a8 20 20 00
>3a2df8		28 7a fa 60 80 02 20 03 40 01 90 01 e0 01 58 02
>3a2e08		f0 00 2c 01 50 00 64 00 28 00 32 00 3c 00 4b 00
>3a2e18		1e 00 32 00 48 00 5c 00 20 00 2a 00 34 00 43 00
>3a2e28		16 00 34 00 da 08 c2 30 c9 02 00 b0 1c 0a 0a aa
>3a2e38		bf 00 f0 3a 85 9e bf 02 f0 3a 85 a0 c9 f0 00 b0
>3a2e48		08 c9 b0 00 90 03 28 fa 60 08 c2 20 48 a9 00 08
>3a2e58		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>3a2e68		20 23 1e e2 20 dc d4 08 da 08 c2 30 c9 02 00 b0
>3a2e78		17 0a 0a aa bf 08 f0 3a 85 9e bf 0a f0 3a 85 a0
>3a2e88		c9 40 00 b0 03 28 fa 60 08 c2 20 48 a9 00 08 5b
>3a2e98		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a2ea8		23 1e e2 20 dc d4 08 08 c2 30 3b 38 e9 07 00 1b
>3a2eb8		20 d1 1c 20 28 07 c2 20 a5 23 c9 02 00 b0 59 83
>3a2ec8		01 e2 20 a9 2c 20 ef 21 20 d1 1c 20 28 07 a5 23
>3a2ed8		83 03 a9 2c 20 ef 21 20 d1 1c 20 28 07 a3 01 0a
>3a2ee8		0a 0a aa a3 03 d0 05 a5 23 0a 80 04 a5 23 38 2a
>3a2ef8		9f 00 01 af c2 20 a9 2c 00 85 37 20 24 22 b0 37
>3a2f08		c2 20 08 c2 20 a9 00 00 85 23 a9 b0 00 85 25 e2
>3a2f18		20 a9 00 85 27 28 80 27 08 c2 20 48 a9 00 08 5b
>3a2f28		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a2f38		23 1e e2 20 dc d4 08 c2 20 20 e2 20 20 d1 1c c2
>3a2f48		20 a3 01 0a 0a aa a5 23 9f 00 f0 3a 9f 08 f0 3a
>3a2f58		83 04 a5 25 9f 02 f0 3a 38 e9 b0 00 9f 0a f0 3a
>3a2f68		83 06 a3 01 0a 0a 0a aa e2 20 a3 04 9f 01 01 af
>3a2f78		a3 05 9f 02 01 af a3 06 9f 03 01 af a9 00 9f 04
>3a2f88		01 af 9f 05 01 af c2 30 3b 18 69 07 00 1b 28 60
>3a2f98		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>3a2fa8		08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08
>3a2fb8		c2 20 20 d1 1c 20 28 07 a5 23 20 70 2e c2 20 a5
>3a2fc8		9e 8f 05 04 af af 14 f0 3a 8f 08 04 af e2 20 a5
>3a2fd8		a0 8f 07 04 af af 16 f0 3a 8f 0a 04 af a9 00 8f
>3a2fe8		01 04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9
>3a2ff8		00 8f 00 04 af 28 60 08 c2 20 a5 59 cf 10 f0 3a
>3a3008		90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>3a3018		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a3028		08 c2 30 a5 5d cf 12 f0 3a b0 d7 8f 08 01 00 af
>3a3038		10 f0 3a 8f 0a 01 00 18 af 0c 01 00 65 59 85 0c
>3a3048		af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9e 85 0c
>3a3058		a5 0e 65 a0 85 0e e2 20 a5 55 87 0c 28 60 c2 20
>3a3068		a9 01 00 85 dd 38 a5 61 e5 59 85 69 10 0b 49 ff
>3a3078		ff 1a 85 69 a9 ff ff 85 dd a9 01 00 85 df 38 a5
>3a3088		65 e5 5d 85 6d 10 0b 49 ff ff 1a 85 6d a9 ff ff
>3a3098		85 df a5 6d c9 01 00 d0 19 a5 69 c9 01 00 d0 10
>3a30a8		20 ff 2f a5 61 85 59 a5 65 85 5d 20 ff 2f 80 5b
>3a30b8		a5 6d c5 69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a
>3a30c8		48 0a 68 6a 85 71 20 ff 2f a5 59 c5 61 d0 06 a5
>3a30d8		5d c5 65 f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5
>3a30e8		75 10 10 f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65
>3a30f8		dd 85 59 a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69
>3a3108		85 71 18 a5 5d 65 df 85 5d 80 bb 60 08 c2 20 3b
>3a3118		38 e9 06 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08
>3a3128		e2 20 48 a9 00 48 ab 68 28 c2 30 20 d1 1c 20 28
>3a3138		07 83 01 a9 2c 00 20 ef 21 20 d1 1c 20 16 06 a5
>3a3148		23 83 03 a9 2c 00 20 ef 21 20 d1 1c 20 16 06 a5
>3a3158		23 83 05 a9 2c 00 20 ef 21 20 d1 1c 20 28 07 a5
>3a3168		23 85 55 a3 03 85 59 a3 05 85 5d a3 01 20 2c 2e
>3a3178		20 ff 2f c2 20 3b 18 69 06 00 1b 28 60 08 c2 20
>3a3188		3b 38 e9 0a 00 1b 08 c2 20 48 a9 00 08 5b 68 28
>3a3198		08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 d1 1c 20
>3a31a8		28 07 83 01 a9 2c 00 20 ef 21 20 d1 1c 20 16 06
>3a31b8		a5 23 83 03 a9 2c 00 20 ef 21 20 d1 1c 20 16 06
>3a31c8		a5 23 83 05 a9 2c 00 20 ef 21 20 d1 1c 20 16 06
>3a31d8		a5 23 83 07 a9 2c 00 20 ef 21 20 d1 1c 20 16 06
>3a31e8		a5 23 83 09 a9 2c 00 20 ef 21 20 d1 1c 20 28 07
>3a31f8		a5 23 85 55 a3 03 85 59 a3 05 85 5d a3 07 85 61
>3a3208		a3 09 85 65 a3 01 20 2c 2e 20 66 30 c2 20 3b 18
>3a3218		69 0a 00 1b 28 60 08 c2 20 3b 38 e9 0c 00 1b 08
>3a3228		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>3a3238		ab 68 28 c2 30 20 d1 1c 20 28 07 83 01 a9 2c 00
>3a3248		20 ef 21 20 d1 1c 20 16 06 a5 23 83 03 a9 2c 00
>3a3258		20 ef 21 20 d1 1c 20 16 06 a5 23 83 05 a9 2c 00
>3a3268		20 ef 21 20 d1 1c 20 16 06 a5 23 83 07 a9 2c 00
>3a3278		20 ef 21 20 d1 1c 20 16 06 a5 23 83 09 a9 2c 00
>3a3288		20 ef 21 20 d1 1c 20 28 07 a5 23 83 0b a3 01 20
>3a3298		70 2e a9 07 00 8f 00 04 af c2 20 a3 05 8f 00 01
>3a32a8		00 af 10 f0 3a 8f 02 01 00 18 af 04 01 00 63 03
>3a32b8		85 0c e2 20 af 06 01 00 69 00 85 0e c2 20 18 a5
>3a32c8		9e 65 0c 8f 05 04 af e2 20 a5 a0 65 0e 8f 07 04
>3a32d8		af c2 20 38 a3 07 e3 03 85 0c 8f 08 04 af 38 af
>3a32e8		10 f0 3a 8f 0e 04 af 38 a3 09 e3 05 8f 0a 04 af
>3a32f8		e2 20 a3 0b 8f 01 04 af af 00 04 af 09 80 8f 00
>3a3308		04 af af 01 04 af 30 fa a9 00 8f 00 04 af c2 20
>3a3318		3b 18 69 0c 00 1b 28 60 08 c2 20 c9 40 00 b0 13
>3a3328		0a 0a 0a 18 69 00 0c 85 9e a9 af 00 69 00 00 85
>3a3338		a0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3348		09 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a3358		d4 08 08 c2 20 3b 38 e9 03 00 1b c2 30 20 d1 1c
>3a3368		20 28 07 a5 23 83 01 a9 2c 00 20 ef 21 e2 20 20
>3a3378		d1 1c 20 28 07 a5 23 c9 08 b0 56 83 03 a9 2c 20
>3a3388		ef 21 20 d1 1c 20 16 06 c2 20 38 a5 23 e9 00 00
>3a3398		85 23 a5 25 e9 b0 00 85 25 30 36 c2 20 a3 01 aa
>3a33a8		20 20 33 a5 23 a0 01 00 97 9e e2 20 a5 25 c8 c8
>3a33b8		97 9e bf 18 f0 3a 29 f1 85 0c a3 03 0a 29 0e 05
>3a33c8		0c 87 9e 9f 18 f0 3a c2 20 3b 18 69 03 00 1b 28
>3a33d8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a33e8		d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08
>3a33f8		08 c2 20 3b 38 e9 04 00 1b c2 30 20 d1 1c 20 28
>3a3408		07 a5 23 83 01 a9 2c 00 20 ef 21 20 d1 1c 20 16
>3a3418		06 a5 23 83 03 a9 2c 00 20 ef 21 20 d1 1c 20 16
>3a3428		06 a3 01 20 20 33 a3 03 a0 04 00 97 9e a5 23 a0
>3a3438		06 00 97 9e c2 20 3b 18 69 04 00 1b 28 60 08 c2
>3a3448		20 3b 38 e9 03 00 1b c2 30 20 d1 1c 20 28 07 a5
>3a3458		23 83 01 a9 2c 00 20 ef 21 e2 20 20 d1 1c 20 16
>3a3468		06 a5 23 d0 04 83 03 80 04 a9 01 83 03 a9 2c 85
>3a3478		37 20 24 22 b0 20 c2 30 a3 01 aa 20 20 33 e2 20
>3a3488		bf 18 f0 3a 29 fe 85 0c a3 03 29 01 05 0c 9f 18
>3a3498		f0 3a 87 9e 80 36 c2 30 20 e2 20 20 d1 1c 20 28
>3a34a8		07 a5 23 c9 08 00 b0 2e 0a 0a 0a 0a 85 0c a3 01
>3a34b8		aa 20 20 33 e2 20 a3 03 29 01 05 0c 85 0c bf 18
>3a34c8		f0 3a 29 8e 05 0c 87 9e 9f 18 f0 3a c2 20 3b 18
>3a34d8		69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a34e8		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a34f8		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>3a3508		a9 04 00 8d 02 01 18 ad 04 01 69 80 02 85 9e a9
>3a3518		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3528		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a3538		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>3a3548		a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85 9e a9
>3a3558		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>3a3568		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a3578		e2 20 dc d4 08 08 c2 20 3b 38 e9 06 00 1b c2 20
>3a3588		20 d1 1c 20 28 07 a5 23 83 01 a9 2c 00 20 ef 21
>3a3598		20 d1 1c 20 28 07 a5 23 83 03 a9 2c 00 20 ef 21
>3a35a8		20 d1 1c 20 28 07 a5 23 83 05 a9 2c 00 20 ef 21
>3a35b8		20 d1 1c 20 16 06 a3 01 20 fd 34 a5 23 87 9e e2
>3a35c8		20 38 a5 25 e9 b0 a0 02 00 97 9e a3 05 d0 0d e2
>3a35d8		20 a3 03 29 07 a0 03 00 97 9e 80 0d e2 20 a3 03
>3a35e8		29 07 09 08 a0 03 00 97 9e c2 20 3b 18 69 06 00
>3a35f8		1b 28 60 08 c2 20 3b 38 e9 06 00 1b c2 20 20 d1
>3a3608		1c 20 28 07 a5 23 83 01 a9 2c 00 20 ef 21 20 d1
>3a3618		1c 20 16 06 a5 23 83 03 a9 2c 00 20 ef 21 20 d1
>3a3628		1c 20 16 06 a5 23 83 05 a9 2c 00 20 ef 21 20 d1
>3a3638		1c 20 16 06 a3 01 20 3d 35 a5 23 a0 01 00 97 9e
>3a3648		e2 20 38 a5 25 e9 b0 c8 c8 97 9e c2 20 a3 03 a0
>3a3658		04 00 97 9e a3 05 a0 06 00 97 9e c2 20 3b 18 69
>3a3668		06 00 1b 28 60 08 c2 20 f4 00 00 c2 20 20 d1 1c
>3a3678		20 28 07 a5 23 83 01 a9 2c 00 20 ef 21 20 d1 1c
>3a3688		20 16 06 a3 01 20 3d 35 a5 23 d0 06 e2 20 a9 00
>3a3698		80 04 e2 20 a9 01 e2 20 a0 00 00 97 9e c2 20 68
>3a36a8		28 60 08 c2 20 3b 38 e9 04 00 1b c2 20 20 d1 1c
>3a36b8		20 28 07 a5 23 83 01 a9 2c 00 20 ef 21 20 d1 1c
>3a36c8		20 16 06 a5 23 83 03 a9 2c 00 20 ef 21 20 d1 1c
>3a36d8		20 16 06 a3 01 20 3d 35 a5 23 a0 0a 00 97 9e a3
>3a36e8		03 a0 08 00 97 9e c2 20 3b 18 69 04 00 1b 28 60
>3a36f8		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00
>3a3708		8f 58 f0 3a af 5c f0 3a c9 b0 b0 1c 8f 24 04 af
>3a3718		af 5b f0 3a 8f 23 04 af af 5a f0 3a 8f 22 04 af
>3a3728		a9 10 8f 58 f0 3a 80 17 38 e9 b0 8f 04 04 af af
>3a3738		5b f0 3a 8f 03 04 af af 5a f0 3a 8f 02 04 af af
>3a3748		59 f0 3a d0 3c af 58 f0 3a f0 1b af 5d f0 3a 8f
>3a3758		28 04 af af 5e f0 3a 8f 29 04 af af 5f f0 3a 8f
>3a3768		2a 04 af 82 8b 00 af 5d f0 3a 8f 08 04 af af 5e
>3a3778		f0 3a 8f 09 04 af af 5f f0 3a 8f 0a 04 af 82 70
>3a3788		00 af 58 f0 3a 09 01 8f 58 f0 3a 89 10 f0 32 af
>3a3798		60 f0 3a 8f 28 04 af af 61 f0 3a 8f 29 04 af af
>3a37a8		62 f0 3a 8f 2a 04 af af 63 f0 3a 8f 2b 04 af af
>3a37b8		64 f0 3a 8f 2c 04 af af 65 f0 3a 8f 2d 04 af 80
>3a37c8		30 af 60 f0 3a 8f 08 04 af af 61 f0 3a 8f 09 04
>3a37d8		af af 62 f0 3a 8f 0a 04 af af 63 f0 3a 8f 0b 04
>3a37e8		af af 64 f0 3a 8f 0c 04 af af 65 f0 3a 8f 0d 04
>3a37f8		af e2 20 af 69 f0 3a c9 b0 b0 20 8f 27 04 af af
>3a3808		68 f0 3a 8f 26 04 af af 67 f0 3a 8f 25 04 af af
>3a3818		58 f0 3a 09 20 8f 58 f0 3a 80 17 38 e9 b0 8f 07
>3a3828		04 af af 68 f0 3a 8f 06 04 af af 67 f0 3a 8f 05
>3a3838		04 af af 66 f0 3a d0 3e af 58 f0 3a 89 20 f0 1b
>3a3848		af 6a f0 3a 8f 28 04 af af 6b f0 3a 8f 29 04 af
>3a3858		af 6c f0 3a 8f 2a 04 af 82 8b 00 af 6a f0 3a 8f
>3a3868		08 04 af af 6b f0 3a 8f 09 04 af af 6c f0 3a 8f
>3a3878		0a 04 af 82 70 00 af 58 f0 3a 09 02 8f 58 f0 3a
>3a3888		89 20 f0 32 af 6d f0 3a 8f 28 04 af af 6e f0 3a
>3a3898		8f 29 04 af af 6f f0 3a 8f 2a 04 af af 70 f0 3a
>3a38a8		8f 2b 04 af af 71 f0 3a 8f 2e 04 af af 72 f0 3a
>3a38b8		8f 2f 04 af 80 30 af 6d f0 3a 8f 08 04 af af 6e
>3a38c8		f0 3a 8f 09 04 af af 6f f0 3a 8f 0a 04 af af 70
>3a38d8		f0 3a 8f 0b 04 af af 71 f0 3a 8f 0e 04 af af 72
>3a38e8		f0 3a 8f 0f 04 af af 58 f0 3a 29 30 f0 43 c9 10
>3a38f8		f0 76 c9 20 d0 03 82 8a 00 af 58 f0 3a 29 03 f0
>3a3908		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a3918		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2
>3a3928		20 dc d4 08 a9 01 80 02 a9 03 8f 20 04 af 82 7d
>3a3938		00 af 58 f0 3a 29 03 f0 23 c9 03 f0 23 08 c2 20
>3a3948		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>3a3958		20 29 ff 00 20 23 1e e2 20 dc d4 08 a9 01 80 02
>3a3968		a9 03 8f 00 04 af 80 34 af 58 f0 3a 29 01 0a 09
>3a3978		11 8f 20 04 af af 58 f0 3a 29 02 09 11 8f 00 04
>3a3988		af 80 19 af 58 f0 3a 29 02 09 21 8f 20 04 af af
>3a3998		58 f0 3a 29 01 0a 09 21 8f 00 04 af af 00 04 af
>3a39a8		09 80 8f 00 04 af af 58 f0 3a 29 30 f0 0f af 20
>3a39b8		04 af 09 80 8f 20 04 af ea ea ea ea ea af 01 04
>3a39c8		af 89 80 d0 f8 a9 00 8f 20 04 af 8f 00 04 af 28
>3a39d8		2b 60 0b 08 e2 20 c2 10 a9 00 a2 00 00 8f 59 f0
>3a39e8		3a e8 e0 1a 00 d0 f6 20 43 22 c9 e6 f0 23 c9 e7
>3a39f8		f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>3a3a08		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a3a18		08 20 ef 21 20 d1 1c 20 16 06 c2 20 a5 23 8f 5a
>3a3a28		f0 3a e2 20 a5 25 8f 5c f0 3a a9 2c 20 ef 21 20
>3a3a38		d1 1c 20 16 06 c2 20 a5 23 8f 5d f0 3a e2 20 a5
>3a3a48		25 8f 5f f0 3a e2 20 a9 00 8f 59 f0 3a 82 74 00
>3a3a58		20 ef 21 20 d1 1c 20 16 06 c2 20 a5 23 8f 5a f0
>3a3a68		3a e2 20 a5 25 8f 5c f0 3a a9 2c 20 ef 21 20 d1
>3a3a78		1c 20 d2 06 c2 20 a5 23 8f 60 f0 3a 8d 00 01 a9
>3a3a88		2c 00 20 ef 21 20 d1 1c 20 d2 06 c2 20 a5 23 8f
>3a3a98		62 f0 3a 8d 02 01 a9 2c 00 20 ef 21 20 d1 1c 20
>3a3aa8		d2 06 c2 20 a5 23 8f 64 f0 3a c2 20 ad 04 01 8f
>3a3ab8		5d f0 3a e2 20 ad 06 01 8f 5f f0 3a e2 20 a9 01
>3a3ac8		8f 59 f0 3a e2 20 a9 9c 20 ef 21 20 43 22 c9 e6
>3a3ad8		f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28
>3a3ae8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a3af8		e2 20 dc d4 08 20 ef 21 20 d1 1c 20 16 06 c2 20
>3a3b08		a5 23 8f 67 f0 3a e2 20 a5 25 8f 69 f0 3a a9 2c
>3a3b18		20 ef 21 20 d1 1c 20 16 06 c2 20 a5 23 8f 6a f0
>3a3b28		3a e2 20 a5 25 8f 6c f0 3a e2 20 a9 00 8f 66 f0
>3a3b38		3a 82 74 00 20 ef 21 20 d1 1c 20 16 06 c2 20 a5
>3a3b48		23 8f 67 f0 3a e2 20 a5 25 8f 69 f0 3a a9 2c 20
>3a3b58		ef 21 20 d1 1c 20 d2 06 c2 20 a5 23 8f 6d f0 3a
>3a3b68		8d 00 01 a9 2c 00 20 ef 21 20 d1 1c 20 d2 06 c2
>3a3b78		20 a5 23 8f 6f f0 3a 8d 02 01 a9 2c 00 20 ef 21
>3a3b88		20 d1 1c 20 d2 06 c2 20 a5 23 8f 71 f0 3a c2 20
>3a3b98		ad 04 01 8f 6a f0 3a e2 20 ad 06 01 8f 6c f0 3a
>3a3ba8		e2 20 a9 01 8f 66 f0 3a c2 20 af 5d f0 3a cf 6a
>3a3bb8		f0 3a d0 14 e2 20 af 5f f0 3a cf 6c f0 3a d0 08
>3a3bc8		c2 20 20 f8 36 28 2b 60 08 c2 20 48 a9 00 08 5b
>3a3bd8		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>3a3be8		23 1e e2 20 dc d4 08 08 c2 30 20 d1 1c 20 28 07
>3a3bf8		a5 23 48 a9 2c 00 20 ef 21 20 d1 1c 20 28 07 a4
>3a3c08		23 fa 20 20 00 28 60 08 20 03 21 e2 20 a7 00 d0
>3a3c18		03 4c b7 3c c9 3a d0 03 4c b7 3c c9 22 d0 0b 20
>3a3c28		dd 1b 20 c5 45 a9 3b 20 ef 21 20 a7 04 90 44 20
>3a3c38		e5 53 90 3f a9 3f 20 18 00 a9 20 20 18 00 20 10
>3a3c48		00 e2 20 a5 ea c9 02 f0 49 c9 00 d0 03 82 84 00
>3a3c58		c9 01 f0 5d 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a3c68		a9 04 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20
>3a3c78		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a3c88		02 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a3c98		d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85 25 e2 20
>3a3ca8		a9 02 85 27 c2 20 20 48 53 a9 0d 00 20 18 00 28
>3a3cb8		60 c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00
>3a3cc8		a9 00 00 85 02 20 07 5a c2 20 a5 40 85 00 a5 42
>3a3cd8		85 02 80 d0 c2 20 a5 00 85 40 a5 02 85 42 a9 00
>3a3ce8		4c 85 00 a9 00 00 85 02 20 9d 08 c2 20 a5 40 85
>3a3cf8		00 a5 42 85 02 80 ad 08 20 03 21 e2 20 a7 00 f0
>3a3d08		47 c9 3a f0 43 20 a7 04 90 40 20 e5 53 90 3b 20
>3a3d18		c6 14 20 14 00 e2 20 a0 00 00 97 16 a9 00 c8 97
>3a3d28		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a3d38		27 20 48 53 20 03 21 a7 00 f0 0d c9 3a f0 09 c9
>3a3d48		2c d0 07 20 e2 20 80 b0 28 60 08 c2 20 48 a9 00
>3a3d58		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3d68		00 20 23 1e e2 20 dc d4 08 08 20 d1 1c 20 16 06
>3a3d78		e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20 a5 25
>3a3d88		85 a5 e2 20 a9 2c 85 37 20 24 22 90 41 20 e2 20
>3a3d98		20 d1 1c 20 d2 06 c2 20 a5 23 85 55 e2 20 a9 2c
>3a3da8		85 37 20 24 22 90 27 20 e2 20 20 d1 1c 20 d2 06
>3a3db8		c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 24 22 90
>3a3dc8		0d 20 e2 20 20 d1 1c 20 d2 06 c2 20 a4 23 a6 59
>3a3dd8		a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 27 21 28
>3a3de8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>3a3df8		d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08
>3a3e08		08 e2 20 20 03 21 20 e5 53 90 64 a9 8f 20 ef 21
>3a3e18		a9 01 20 ed 19 a2 01 00 a9 00 8f 00 4d 00 20 d1
>3a3e28		1c 20 16 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>3a3e38		4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 03 21 a7 00
>3a3e48		c9 2c f0 25 c9 90 d0 27 20 e2 20 20 63 66 c2 20
>3a3e58		a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea 09 80
>3a3e68		85 ea 85 27 20 48 53 28 60 20 e2 20 4c 26 3e 08
>3a3e78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a3e88		00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2
>3a3e98		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>3a3ea8		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 20 03
>3a3eb8		21 e2 20 a7 00 f0 28 c9 3a f0 24 20 a7 04 90 21
>3a3ec8		20 e5 53 90 1c 20 08 3f 20 48 53 20 03 21 a7 00
>3a3ed8		f0 0d c9 3a f0 09 c9 2c d0 07 20 e2 20 80 cf 28
>3a3ee8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>3a3ef8		d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08
>3a3f08		08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5 1a 85
>3a3f18		44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85 00 a5
>3a3f28		3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7 00 f0
>3a3f38		53 c9 3a f0 4f c9 2c d0 03 20 e2 20 20 03 21 a7
>3a3f48		00 c9 22 f0 4e 20 c0 04 b0 4e 08 c2 20 48 a9 00
>3a3f58		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>3a3f68		00 20 23 1e e2 20 dc d4 08 c2 20 a9 00 00 85 1a
>3a3f78		a9 36 00 85 1c 18 a5 1a 69 04 00 85 00 a5 1c 69
>3a3f88		00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37 20 39
>3a3f98		21 80 a9 20 dd 1b 80 03 20 cf 1a c2 20 a5 00 85
>3a3fa8		38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5 44 85
>3a3fb8		1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28 60 20
>3a3fc8		27 21 60 64 38 64 3a 64 3c 64 3e 60 20 24 00 60
>3a3fd8		20 d1 1c c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9
>3a3fe8		2c d0 22 20 e2 20 20 d1 1c c2 20 a5 26 d0 35 68
>3a3ff8		85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0 02 00
>3a4008		a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4018		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2
>3a4028		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4038		a9 09 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20
>3a4048		dc d4 08 20 d1 1c c2 20 a5 25 48 a5 23 48 e2 20
>3a4058		a7 00 c9 2c d0 19 20 e2 20 20 d1 1c c2 20 a5 25
>3a4068		d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08 60 08
>3a4078		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a4088		00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2
>3a4098		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a40a8		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 20 d1 1c
>3a40b8		c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 1f
>3a40c8		20 e2 20 20 d1 1c e2 20 a5 24 d0 32 c2 20 a5 25
>3a40d8		d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08 60 08
>3a40e8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a40f8		00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2
>3a4108		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4118		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2 20
>3a4128		48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2
>3a4138		20 29 ff 00 20 23 1e e2 20 dc d4 08 08 e2 20 a7
>3a4148		00 f0 05 20 e2 20 80 f7 28 60 08 28 60 08 28 60
>3a4158		08 28 60 08 c2 20 a5 1c 20 ea 1d a5 1a 20 ea 1d
>3a4168		a5 02 48 a5 00 48 20 27 21 a5 02 20 ea 1d a5 00
>3a4178		20 ea 1d 68 85 00 68 85 02 20 03 21 20 e5 53 b0
>3a4188		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>3a4198		d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08
>3a41a8		e2 20 a5 ea 20 01 1e a5 e9 20 01 1e c2 20 a5 e7
>3a41b8		20 ea 1d 20 03 21 e2 20 a7 00 c9 8a d0 6a a5 ea
>3a41c8		c9 00 f0 04 c9 01 f0 00 20 e2 20 20 d1 1c 20 48
>3a41d8		53 e2 20 a9 9c 20 ef 21 20 d1 1c c2 20 a5 27 20
>3a41e8		ea 1d a5 25 20 ea 1d a5 23 20 ea 1d e2 20 a9 9d
>3a41f8		85 37 20 24 22 90 1b 20 e2 20 20 d1 1c e2 20 a5
>3a4208		27 20 ea 1d c2 20 a5 25 20 ea 1d a5 23 20 ea 1d
>3a4218		80 14 c2 20 a9 00 00 20 ea 1d a9 00 00 20 ea 1d
>3a4228		a9 01 00 20 ea 1d 28 60 08 c2 20 48 a9 00 08 5b
>3a4238		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a4248		23 1e e2 20 dc d4 08 08 8b 08 e2 20 48 a9 00 48
>3a4258		ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4
>3a4268		33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2 20 85
>3a4278		e9 b9 10 00 85 ea c2 20 5a 20 e6 51 7a c2 20 b9
>3a4288		00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00 85 2d
>3a4298		c2 20 5a 20 a8 27 20 48 53 7a c2 20 b9 06 00 85
>3a42a8		29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2 20 b9
>3a42b8		02 00 30 0a 20 31 2a 20 df 05 f0 28 80 08 20 f1
>3a42c8		29 20 df 05 f0 1e c2 20 b9 12 00 85 00 b9 14 00
>3a42d8		85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20 a9 03
>3a42e8		85 dc 80 17 a2 23 08 20 ae 19 c2 20 18 a5 33 69
>3a42f8		1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60 08 a5
>3a4308		1a 48 a5 1c 48 20 03 21 20 9d 08 a5 23 f0 26 20
>3a4318		e2 23 90 42 e2 20 a9 02 85 dc 20 27 21 c2 20 68
>3a4328		20 ea 1d 68 20 ea 1d a5 02 20 ea 1d a5 00 20 ea
>3a4338		1d e6 31 28 60 68 68 08 c2 20 48 a9 00 08 5b 68
>3a4348		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 23
>3a4358		1e e2 20 dc d4 08 68 68 08 c2 20 48 a9 00 08 5b
>3a4368		68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20
>3a4378		23 1e e2 20 dc d4 08 08 c2 30 a5 31 f0 1e 20 0c
>3a4388		1e 85 00 20 0c 1e 85 02 20 0c 1e 85 1a 20 0c 1e
>3a4398		85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2 20 48
>3a43a8		a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00 c2 20
>3a43b8		29 ff 00 20 23 1e e2 20 dc d4 08 08 20 d1 1c 20
>3a43c8		df 05 f0 1c e2 20 a9 97 20 ef 21 20 9d 08 20 df
>3a43d8		05 f0 12 20 e2 23 90 2c e2 20 a9 02 85 dc 80 03
>3a43e8		20 27 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a43f8		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2
>3a4408		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4418		a9 06 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20
>3a4428		dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20 03 21
>3a4438		20 9d 08 a5 23 f0 0d 20 e2 23 90 27 e2 20 a9 02
>3a4448		85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4458		a9 02 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20
>3a4468		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4478		06 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a4488		d4 08 20 50 19 20 70 10 20 e5 50 60 08 a7 00 10
>3a4498		03 20 e2 20 20 e5 53 b0 03 4c 0b 45 e2 20 a5 ea
>3a44a8		48 a5 e9 48 a5 e8 48 a5 e7 48 20 43 22 c9 8f d0
>3a44b8		0e a9 8f 20 ef 21 a9 00 8f 00 4d 00 20 d2 1a 20
>3a44c8		03 21 e2 20 a7 00 c9 8a f0 03 4c 0b 45 20 e2 20
>3a44d8		20 d1 1c 68 85 e7 68 85 e8 68 85 e9 68 85 ea 29
>3a44e8		80 f0 1b 20 58 51 90 3a c2 20 a0 09 00 b7 08 85
>3a44f8		c0 e2 20 c8 c8 b7 08 85 c2 20 4f 68 80 03 20 48
>3a4508		53 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4518		02 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a4528		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05
>3a4538		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a4548		08 08 e2 20 20 43 22 c9 00 f0 6d 20 d1 1c e2 20
>3a4558		a5 27 c9 ff f0 1b c9 02 d0 05 20 c5 45 80 12 c9
>3a4568		00 d0 05 20 e3 45 80 09 c9 01 d0 4f 20 f6 45 80
>3a4578		00 20 03 21 a7 00 f0 40 c9 3a f0 3c c9 2c f0 23
>3a4588		c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a4598		a9 02 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20
>3a45a8		dc d4 08 a9 09 20 18 00 20 e2 20 20 03 21 a7 00
>3a45b8		f0 09 c9 3a f0 05 80 93 20 9c 03 28 60 08 8b 08
>3a45c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a0 00 00 b7 23
>3a45d8		f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 25
>3a45e8		15 a5 16 85 23 a5 18 85 25 20 c5 45 28 60 08 20
>3a45f8		ae 5d c2 20 a5 16 85 23 a5 18 85 25 20 c5 45 28
>3a4608		60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97
>3a4618		16 c8 a5 b5 29 0f 18 69 30 97 16 c8 28 60 e2 20
>3a4628		a9 8f 20 ef 21 08 20 d1 1c e2 20 c2 10 af 0e 08
>3a4638		af 09 08 8f 0e 08 af 20 c6 14 a0 00 00 af 06 08
>3a4648		af 20 09 46 a9 2f 97 16 c8 af 09 08 af 20 09 46
>3a4658		a9 2f 97 16 c8 af 0f 08 af 20 09 46 af 0a 08 af
>3a4668		20 09 46 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>3a4678		af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a4688		27 28 e2 20 20 e2 20 60 e2 20 a9 8f 20 ef 21 08
>3a4698		20 d1 1c e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08
>3a46a8		af 20 c6 14 a0 00 00 af 04 08 af 29 7f 20 09 46
>3a46b8		a9 3a 97 16 c8 af 02 08 af 20 09 46 a9 3a 97 16
>3a46c8		c8 af 00 08 af 20 09 46 a9 00 97 16 af 0e 08 af
>3a46d8		29 f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25
>3a46e8		e2 20 a9 02 85 27 28 e2 20 20 e2 20 60 e2 20 a9
>3a46f8		8f 20 ef 21 08 20 d1 1c e2 20 a9 01 85 27 a9 03
>3a4708		8f 00 e2 af a9 01 8f 01 e2 af c2 30 af 84 e8 af
>3a4718		8f 08 e2 af af 84 e8 af 29 ff 7f 8f 0a e2 af a9
>3a4728		ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea
>3a4738		af 08 e2 af 85 23 af 0a e2 af 85 25 28 e2 20 20
>3a4748		e2 20 60 e2 20 a9 8f 20 ef 21 08 20 d1 1c 22 28
>3a4758		10 00 e2 20 85 23 64 24 64 25 64 26 a9 00 85 27
>3a4768		28 e2 20 20 e2 20 60 e2 20 a9 8f 20 ef 21 08 c2
>3a4778		30 20 d1 1c 20 a8 06 c2 20 a5 25 48 a5 23 48 20
>3a4788		03 21 e2 20 a7 00 c9 2c f0 03 4c e6 47 20 e2 20
>3a4798		20 d1 1c 20 d2 06 c2 20 a5 23 48 20 03 21 e2 20
>3a47a8		a7 00 c9 2c f0 03 4c e6 47 20 e2 20 20 d1 1c 20
>3a47b8		d2 06 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>3a47c8		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>3a47d8		a9 02 85 27 20 1e 17 e2 20 20 e2 20 28 60 08 c2
>3a47e8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a47f8		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2 20
>3a4808		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>3a4818		20 29 ff 00 20 23 1e e2 20 dc d4 08 e2 20 a9 8f
>3a4828		20 ef 21 08 c2 30 20 d1 1c e2 20 a5 27 c9 02 f0
>3a4838		03 4c a8 48 c2 20 a5 25 48 a5 23 48 20 03 21 e2
>3a4848		20 a7 00 c9 2c f0 03 4c c7 48 20 e2 20 20 d1 1c
>3a4858		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>3a4868		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>3a4878		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>3a4888		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>3a4898		e2 20 a9 00 85 2d 20 1e 17 e2 20 20 e2 20 28 60
>3a48a8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a48b8		08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08
>3a48c8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>3a48d8		00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2
>3a48e8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a48f8		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 e2 20 a9
>3a4908		8f 20 ef 21 08 c2 30 20 d1 1c e2 20 a5 27 c9 02
>3a4918		f0 03 4c 71 49 c2 20 a5 25 48 a5 23 48 20 03 21
>3a4928		e2 20 a7 00 c9 2c f0 03 4c 90 49 20 e2 20 20 d1
>3a4938		1c e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>3a4948		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>3a4958		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>3a4968		1e 17 e2 20 20 e2 20 28 60 08 c2 20 48 a9 00 08
>3a4978		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>3a4988		20 23 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>3a4998		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>3a49a8		23 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>3a49b8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 23
>3a49c8		1e e2 20 dc d4 08 e2 20 a9 8f 20 ef 21 20 d1 1c
>3a49d8		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>3a49e8		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 9d 08 a5
>3a49f8		40 85 00 a5 42 85 02 e2 20 20 e2 20 60 08 c2 20
>3a4a08		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>3a4a18		20 29 ff 00 20 23 1e e2 20 dc d4 08 e2 20 a9 8f
>3a4a28		20 ef 21 08 20 d1 1c c2 10 e2 20 a5 27 c9 00 d0
>3a4a38		1a 20 25 15 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>3a4a48		a9 02 85 27 28 e2 20 20 e2 20 60 08 c2 20 48 a9
>3a4a58		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>3a4a68		ff 00 20 23 1e e2 20 dc d4 08 e2 20 a9 8f 20 ef
>3a4a78		21 08 20 d1 1c 20 a8 06 c2 20 64 0c 64 0e e2 30
>3a4a88		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>3a4a98		23 20 d1 04 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>3a4aa8		06 0c 26 0e 06 0c 26 0e e2 20 20 f2 04 05 0c 85
>3a4ab8		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>3a4ac8		a9 00 85 27 28 e2 20 20 e2 20 60 e2 20 a9 8f 20
>3a4ad8		ef 21 08 20 d1 1c 20 16 06 20 c6 14 e2 30 a0 ff
>3a4ae8		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 3a 97 16
>3a4af8		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 3a 97 16
>3a4b08		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>3a4b18		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>3a4b28		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>3a4b38		02 85 27 28 e2 20 20 e2 20 60 08 c2 20 48 a9 00
>3a4b48		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4b58		00 20 23 1e e2 20 dc d4 08 e2 20 a9 8f 20 ef 21
>3a4b68		20 d1 1c e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>3a4b78		c2 10 a6 23 20 b2 15 ab 84 23 c2 20 64 25 e2 20
>3a4b88		a9 00 85 27 e2 20 20 e2 20 60 08 c2 20 48 a9 00
>3a4b98		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>3a4ba8		00 20 23 1e e2 20 dc d4 08 e2 20 a9 8f 20 ef 21
>3a4bb8		20 d1 1c 20 16 06 e2 20 a5 25 c9 b0 90 10 c9 f0
>3a4bc8		b0 0c 8b 48 ab a6 23 22 44 11 00 ab 80 04 e2 20
>3a4bd8		a7 23 85 23 64 24 64 25 64 30 e2 20 20 e2 20 60
>3a4be8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>3a4bf8		08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 e2
>3a4c08		20 a9 8f 20 ef 21 20 d1 1c 20 16 06 e2 20 a5 25
>3a4c18		c9 b0 90 22 c9 f0 b0 1e 8b 48 ab a6 23 da 22 44
>3a4c28		11 00 85 0c fa e8 da 22 44 11 00 85 0d fa e8 22
>3a4c38		44 11 00 ab 80 0d c2 20 a7 23 85 0c e2 20 a0 02
>3a4c48		00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2 20 20
>3a4c58		e2 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4c68		04 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a4c78		d4 08 e2 20 a9 8f 20 ef 21 20 d1 1c 20 16 06 e2
>3a4c88		20 a5 25 c9 b0 90 1d c9 f0 b0 19 8b 48 ab a6 23
>3a4c98		da 22 44 11 00 85 23 fa e8 22 44 11 00 85 24 ab
>3a4ca8		c2 20 80 06 c2 20 a7 23 85 23 64 25 e2 20 20 e2
>3a4cb8		20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a4cc8		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a4cd8		08 e2 20 a9 8f 20 ef 21 20 d1 1c e2 20 a5 27 c9
>3a4ce8		00 d0 24 20 c6 14 a5 23 87 16 a9 00 a0 01 00 97
>3a4cf8		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>3a4d08		27 e2 20 20 e2 20 60 08 c2 20 48 a9 00 08 5b 68
>3a4d18		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 23
>3a4d28		1e e2 20 dc d4 08 e2 20 a9 8f 20 ef 21 20 d1 1c
>3a4d38		e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64 24 64 25
>3a4d48		64 26 a9 00 85 27 e2 20 20 e2 20 60 08 c2 20 48
>3a4d58		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>3a4d68		29 ff 00 20 23 1e e2 20 dc d4 08 e2 20 a9 8f 20
>3a4d78		ef 21 20 d1 1c e2 20 a5 27 c9 00 d0 39 e2 20 a5
>3a4d88		26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 c6 14
>3a4d98		a4 23 e2 20 a9 00 97 16 88 30 07 a9 20 97 16 88
>3a4da8		10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85 25
>3a4db8		e2 20 20 e2 20 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4dc8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a4dd8		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a4de8		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2
>3a4df8		20 dc d4 08 e2 20 a9 8f 20 ef 21 20 d1 1c e2 20
>3a4e08		a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e
>3a4e18		a5 24 d0 4a c2 10 20 c6 14 a4 23 e2 20 a9 00 97
>3a4e28		16 88 30 07 a9 09 97 16 88 10 fb a9 02 85 27 c2
>3a4e38		20 a5 16 85 23 a5 18 85 25 e2 20 20 e2 20 60 08
>3a4e48		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>3a4e58		00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 c2
>3a4e68		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>3a4e78		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 e2 20 a9
>3a4e88		8f 20 ef 21 20 d1 1c e2 20 a5 27 c9 00 f0 23 c9
>3a4e98		01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a4ea8		04 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a4eb8		d4 08 c2 20 a5 25 10 21 49 ff ff 85 25 a5 23 49
>3a4ec8		ff ff 18 69 01 00 85 23 a5 25 69 00 00 85 25 80
>3a4ed8		08 e2 20 a5 26 29 7f 85 26 e2 20 20 e2 20 60 e2
>3a4ee8		20 a9 8f 20 ef 21 20 d1 1c e2 20 a5 27 c9 00 d0
>3a4ef8		25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9 00 00
>3a4f08		85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25 85 23
>3a4f18		e2 20 20 e2 20 60 08 c2 20 48 a9 00 08 5b 68 28
>3a4f28		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a4f38		e2 20 dc d4 08 e2 20 a9 8f 20 ef 21 20 d1 1c 20
>3a4f48		16 06 e2 20 20 e2 20 60 e2 20 a9 8f 20 ef 21 20
>3a4f58		d1 1c 20 84 07 20 0e 62 e2 20 20 e2 20 60 e2 20
>3a4f68		a9 8f 20 ef 21 20 d1 1c 20 84 07 20 3d 62 e2 20
>3a4f78		20 e2 20 60 e2 20 a9 8f 20 ef 21 20 d1 1c 20 84
>3a4f88		07 20 6c 62 e2 20 20 e2 20 60 e2 20 a9 8f 20 ef
>3a4f98		21 20 d1 1c 20 84 07 20 9a 62 e2 20 20 e2 20 60
>3a4fa8		e2 20 a9 8f 20 ef 21 20 d1 1c 20 84 07 20 c3 63
>3a4fb8		e2 20 20 e2 20 60 e2 20 a9 8f 20 ef 21 20 d1 1c
>3a4fc8		20 84 07 20 99 63 e2 20 20 e2 20 60 e2 20 a9 8f
>3a4fd8		20 ef 21 20 d1 1c 20 84 07 20 e5 63 e2 20 20 e2
>3a4fe8		20 60 e2 20 a9 8f 20 ef 21 20 d1 1c 20 84 07 20
>3a4ff8		79 64 e2 20 20 e2 20 60 e2 20 a9 8f 20 ef 21 20
>3a5008		d1 1c 20 84 07 20 fb 64 e2 20 20 e2 20 60 00 ea
>3a5018		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2
>3a5028		20 a9 00 00 85 d9 e2 20 a9 36 85 db c2 30 a9 00
>3a5038		00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04 00 97 d9
>3a5048		20 b8 20 2b 28 60 8b 08 c2 20 a9 00 00 85 1a a9
>3a5058		36 00 85 1c 20 b8 20 20 98 23 28 ab 60 08 c2 20
>3a5068		64 55 a9 ff 7f 85 59 20 9c 03 20 43 22 29 ff 00
>3a5078		c9 00 00 f0 2c c9 81 00 f0 1a 20 03 21 20 9d 08
>3a5088		a5 23 85 55 20 43 22 29 ff 00 c9 00 00 f0 12 c9
>3a5098		81 00 d0 2a 20 ef 21 20 03 21 20 9d 08 a5 23 85
>3a50a8		59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48 20 50 18
>3a50b8		68 85 00 68 85 02 68 85 1a 68 85 1c 28 60 08 c2
>3a50c8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>3a50d8		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 08 08 c2
>3a50e8		20 48 a9 00 08 5b 68 28 c2 20 64 e4 64 e7 e2 20
>3a50f8		64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04 00 85 e1
>3a5108		e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0 1a c9 3a
>3a5118		b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b
>3a5128		b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10 a0
>3a5138		00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08 00 d0 f2
>3a5148		b7 e7 20 1b 05 20 12 51 b0 03 28 38 60 28 18 60
>3a5158		08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7 f0 0b 20
>3a5168		1b 05 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00
>3a5178		c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9 c2 20 a5
>3a5188		e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20 a5 e6 85
>3a5198		0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69
>3a51a8		01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 32 51 b0
>3a51b8		2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08
>3a51c8		85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08
>3a51d8		e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08 20
>3a51e8		58 51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>3a51f8		a9 05 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20
>3a5208		dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8 c8 b7 08
>3a5218		85 25 e2 20 a0 00 00 b7 08 85 27 28 60 08 c2 20
>3a5228		18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69 00 85 0a
>3a5238		c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08 c2 20 48
>3a5248		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>3a5258		29 ff 00 20 23 1e e2 20 dc d4 08 c2 20 a5 e1 85
>3a5268		c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1 e2 20 a5
>3a5278		0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0 33 a5 ea
>3a5288		c9 00 d0 05 20 16 06 80 2f c9 01 d0 05 20 84 07
>3a5298		80 26 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>3a52a8		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a52b8		08 c9 02 d0 03 20 b8 16 c2 10 20 25 52 c2 30 18
>3a52c8		a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00 85 0a a0
>3a52d8		00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7
>3a52e8		e7 f0 10 20 1b 05 20 12 51 90 08 97 08 c8 c0 08
>3a52f8		00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5 25 c8 c8
>3a5308		97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20 a5 e6 97
>3a5318		c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6 e2 20 a0
>3a5328		00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2 20 a5 23
>3a5338		85 c0 e2 20 a5 25 85 c2 20 d4 12 20 e9 12 80 ea
>3a5348		08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05 20 58 51
>3a5358		b0 05 20 7d 52 80 4e e2 20 a5 27 c5 ea f0 33 a5
>3a5368		ea c9 00 d0 05 20 16 06 80 2c c9 01 d0 05 20 84
>3a5378		07 80 23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a5388		04 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a5398		d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23 97 08 c8
>3a53a8		c8 a5 25 97 08 28 60 20 b8 16 a0 09 00 b7 08 85
>3a53b8		c0 c8 c8 e2 20 b7 08 85 c2 20 d4 12 20 08 13 e2
>3a53c8		20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23 85 c0 e2
>3a53d8		20 a5 25 85 c2 20 d4 12 20 e9 12 80 b9 08 20 03
>3a53e8		21 e2 20 a7 00 20 a7 04 90 42 c2 20 a5 00 85 e7
>3a53f8		e2 20 a5 02 85 e9 20 e2 20 a7 00 f0 0d c9 24 f0
>3a5408		14 c9 25 f0 09 20 12 51 b0 ec a9 01 80 0c 20 e2
>3a5418		20 a9 00 80 05 20 e2 20 a9 02 85 ea 20 43 22 c9
>3a5428		8f d0 06 a5 ea 09 80 85 ea 28 38 60 28 18 60 08
>3a5438		c2 20 18 a5 23 65 29 85 23 a5 25 65 2b 85 25 28
>3a5448		60 08 c2 20 38 a5 23 e5 29 85 23 a5 25 e5 2b 85
>3a5458		25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2 30 a9 00
>3a5468		00 83 01 83 03 83 05 83 07 83 09 a5 25 10 18 a9
>3a5478		00 80 83 01 a5 25 49 ff ff 85 25 a5 23 49 ff ff
>3a5488		1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01 49 00 80
>3a5498		83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff ff 1a 85
>3a54a8		29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a a5 23 8f
>3a54b8		00 01 00 a5 29 8f 02 01 00 af 04 01 00 83 03 af
>3a54c8		06 01 00 83 05 a5 25 8f 00 01 00 a5 29 8f 02 01
>3a54d8		00 18 af 04 01 00 63 05 83 05 af 06 01 00 63 07
>3a54e8		83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01 00 18 af
>3a54f8		04 01 00 63 05 83 05 af 06 01 00 63 07 83 07 a3
>3a5508		07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00 08 5b 68
>3a5518		28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00 20 23
>3a5528		1e e2 20 dc d4 08 c2 30 a3 01 10 16 a3 05 49 ff
>3a5538		ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05 a3 05 1a
>3a5548		83 05 a3 03 85 23 a3 05 85 25 c2 20 3b 18 69 0a
>3a5558		00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25 e5 2b 50
>3a5568		03 49 00 80 30 06 64 23 64 25 80 07 a9 ff ff 85
>3a5578		23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0c a5 25
>3a5588		c5 2b d0 06 64 23 64 25 80 16 a5 29 c5 23 a5 2b
>3a5598		e5 25 50 03 49 00 80 10 eb a9 ff ff 85 23 85 25
>3a55a8		28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29 c5 23 d0
>3a55b8		09 a9 ff ff 85 23 85 25 80 04 64 23 64 25 28 60
>3a55c8		08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23 d0 06 64
>3a55d8		23 64 25 80 07 a9 ff ff 85 23 85 25 28 60 08 c2
>3a55e8		20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff
>3a55f8		85 23 85 25 80 13 a5 29 c5 23 a5 2b e5 25 50 03
>3a5608		49 00 80 30 e8 64 23 64 25 28 60 08 c2 20 a5 23
>3a5618		c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85
>3a5628		25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80
>3a5638		30 e8 64 23 64 25 28 60 08 c2 20 8f 12 01 00 8a
>3a5648		8f 10 01 00 af 16 01 00 aa af 14 01 00 28 60 08
>3a5658		e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2 af c2 20
>3a5668		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9 00 00 8f
>3a5678		0c e2 af a9 00 01 8f 0e e2 af ea ea ea ea ea ea
>3a5688		af 08 e2 af 85 23 af 0a e2 af 85 25 a9 01 00 85
>3a5698		27 28 60 08 e2 20 a9 40 8f 00 e2 af 80 09 08 e2
>3a56a8		20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5
>3a56b8		23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2
>3a56c8		af a5 2b 8f 0e e2 af ea ea ea e2 20 af 06 e2 af
>3a56d8		29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af
>3a56e8		85 25 28 60 20 87 57 80 f9 08 e2 20 a9 01 8f 01
>3a56f8		e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af
>3a5708		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>3a5718		e2 af ea ea ea e2 20 af 05 e2 af 29 17 d0 10 c2
>3a5728		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>3a5738		87 57 80 f9 08 e2 20 a9 00 8f 01 e2 af a9 00 8f
>3a5748		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>3a5758		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>3a5768		e2 20 af 04 e2 af 29 07 d0 10 c2 20 af 08 e2 af
>3a5778		85 23 af 0a e2 af 85 25 28 60 20 87 57 80 f9 e2
>3a5788		20 89 01 f0 20 00 08 c2 20 48 a9 00 08 5b 68 28
>3a5798		e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a57a8		e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48 a9 00 08
>3a57b8		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>3a57c8		20 23 1e e2 20 dc d4 08 89 04 f0 1f 08 c2 20 48
>3a57d8		a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08 00 c2 20
>3a57e8		29 ff 00 20 23 1e e2 20 dc d4 08 60 08 e2 20 a9
>3a57f8		00 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9 00 a0
>3a5808		8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f 08 e2
>3a5818		af a5 25 8f 0a e2 af ea ea ea e2 20 af 04 e2 af
>3a5828		89 07 f0 01 00 c2 20 af 08 e2 af 85 23 af 0a e2
>3a5838		af 85 25 28 60 08 e2 20 a9 01 8f 01 e2 af a9 02
>3a5848		8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00
>3a5858		8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>3a5868		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 28
>3a5878		60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f d0 03 28
>3a5888		38 60 28 18 60 08 e2 20 38 e9 30 20 3f 05 c2 20
>3a5898		29 ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 28
>3a58a8		60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9 61 90 04
>3a58b8		c9 67 90 0a c9 41 90 04 c9 47 90 07 80 31 38 e9
>3a58c8		57 80 08 38 e9 37 80 03 38 e9 30 06 23 26 24 26
>3a58d8		25 26 26 06 23 26 24 26 25 26 26 06 23 26 24 26
>3a58e8		25 26 26 06 23 26 24 26 25 26 26 05 23 85 23 28
>3a58f8		60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80 0f c2 20
>3a5908		06 23 26 25 80 07 c2 20 38 26 23 26 25 28 60 08
>3a5918		e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00 8f 01 e2
>3a5928		af 80 15 e2 20 a9 03 8f 01 e2 af ea ea ea 80 62
>3a5938		e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f 00 e2 af
>3a5948		c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f 0a e2 af
>3a5958		c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af
>3a5968		ea ea ea ca f0 2c af 08 e2 af 8f 0c 08 00 af 0a
>3a5978		e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2 af c2 20
>3a5988		af 0c 08 00 8f 08 e2 af af 0e 08 00 8f 0a e2 af
>3a5998		80 be c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>3a59a8		e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d 85 23 a5
>3a59b8		5f 85 25 20 c9 5b c2 20 a5 23 85 29 a5 25 85 2b
>3a59c8		c2 20 a5 59 85 23 a5 5b 85 25 20 f1 56 c2 20 a5
>3a59d8		55 85 29 a5 57 85 2b 20 a6 56 c2 20 a5 23 85 29
>3a59e8		a5 25 85 2b 20 17 59 20 3c 57 c2 20 a5 65 f0 07
>3a59f8		a5 25 09 00 80 85 25 e2 20 a9 01 85 27 28 60 5a
>3a5a08		08 c2 30 64 23 64 25 64 55 64 57 64 65 64 59 64
>3a5a18		5b a9 01 00 85 5d 64 5f 64 61 64 63 64 69 e2 20
>3a5a28		a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b c9 26 f0
>3a5a38		3a 20 c0 04 90 03 82 ac 00 08 c2 20 48 a9 00 08
>3a5a48		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>3a5a58		20 23 1e e2 20 dc d4 08 a9 01 85 65 c8 b7 00 c9
>3a5a68		26 f0 08 20 c0 04 90 d1 82 7a 00 c8 b7 00 c9 68
>3a5a78		f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0 48 80 b9
>3a5a88		c8 b7 00 20 d1 04 b0 02 80 af 20 a9 58 c8 b7 00
>3a5a98		20 d1 04 b0 f5 e2 20 a5 65 f0 11 c2 20 38 a9 00
>3a5aa8		00 e5 23 85 23 a9 00 00 e5 25 85 25 e2 20 a9 00
>3a5ab8		85 27 c2 20 18 98 65 00 85 00 a5 02 69 00 00 85
>3a5ac8		02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07 c9 31 f0
>3a5ad8		03 82 65 ff 20 f9 58 c8 b7 00 c9 30 f0 f6 c9 31
>3a5ae8		f0 f2 82 b0 ff 20 8d 58 c8 b7 00 c9 2e f0 08 20
>3a5af8		c0 04 b0 f1 82 9e ff c2 20 20 c9 5b c2 20 a5 23
>3a5b08		85 55 a5 25 85 57 64 23 64 25 e2 20 80 36 20 8d
>3a5b18		58 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f 02 01 00
>3a5b28		af 04 01 00 85 5f a5 5d 8f 00 01 00 a9 0a 00 8f
>3a5b38		02 01 00 af 04 01 00 85 5d af 06 01 00 18 65 5f
>3a5b48		85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45 f0 20 20
>3a5b58		c0 04 b0 ba c2 20 20 c9 5b c2 20 a5 23 85 59 a5
>3a5b68		25 85 5b 64 23 64 25 20 b0 59 e2 20 82 43 ff c2
>3a5b78		20 20 c9 5b c2 20 a5 23 85 59 a5 25 85 5b 64 23
>3a5b88		64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d f0 08 20
>3a5b98		c0 04 b0 12 82 a2 fe a9 01 85 69 c8 b7 00 20 c0
>3a5ba8		04 b0 03 82 93 fe 20 8d 58 c8 b7 00 20 c0 04 b0
>3a5bb8		f5 c2 20 a5 23 85 61 a5 25 85 63 20 b0 59 82 f1
>3a5bc8		fe 08 20 57 56 28 60 08 c2 20 a9 c6 5e 85 29 a9
>3a5bd8		3a 00 85 2b e2 20 a9 01 85 2d c2 20 20 a2 5c c9
>3a5be8		ff ff d0 0c a9 00 00 8d 23 08 8d 25 08 82 a1 00
>3a5bf8		f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26 08 29 80
>3a5c08		83 01 ad 25 08 2a ad 26 08 2a 83 02 a9 00 83 06
>3a5c18		ad 25 08 09 80 83 05 ad 24 08 83 04 ad 23 08 83
>3a5c28		03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48 a9 00 08
>3a5c38		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>3a5c48		20 23 1e e2 20 dc d4 08 c2 20 a3 05 4a 83 05 a3
>3a5c58		03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96 f0 02 80
>3a5c68		e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18 69 01 00
>3a5c78		8d 23 08 a3 05 49 ff ff 69 00 00 8d 25 08 80 0c
>3a5c88		c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2 20 68 68
>3a5c98		68 e2 20 a9 00 8d 27 08 28 60 da 08 c2 20 a5 25
>3a5ca8		48 a5 23 48 20 9b 56 20 79 58 b0 11 a5 25 89 00
>3a5cb8		80 d0 05 a9 01 00 80 08 a9 ff ff 80 03 a9 00 00
>3a5cc8		fa 86 23 fa 86 25 28 fa 60 08 c2 30 20 a2 5c c9
>3a5cd8		ff ff d0 05 20 f2 05 80 03 20 04 06 28 60 08 c2
>3a5ce8		30 20 a2 5c c9 01 00 d0 05 20 f2 05 80 03 20 04
>3a5cf8		06 28 60 08 c2 30 20 a2 5c c9 00 00 d0 05 20 f2
>3a5d08		05 80 03 20 04 06 28 60 08 c2 30 20 a2 5c c9 01
>3a5d18		00 f0 05 20 f2 05 80 03 20 04 06 28 60 08 c2 30
>3a5d28		20 a2 5c c9 ff ff f0 05 20 f2 05 80 03 20 04 06
>3a5d38		28 60 08 c2 30 20 a2 5c c9 00 00 f0 05 20 f2 05
>3a5d48		80 03 20 04 06 28 60 08 e2 20 97 23 c8 a9 00 97
>3a5d58		23 28 60 da 08 e2 20 c9 80 90 0a 48 a9 2d 20 4f
>3a5d68		5d 68 49 ff 1a c2 30 29 ff 00 c9 64 00 90 0e a2
>3a5d78		64 00 20 40 56 18 69 30 00 20 4f 5d 8a a2 0a 00
>3a5d88		20 40 56 18 69 30 00 20 4f 5d 8a 18 69 30 00 20
>3a5d98		4f 5d 28 fa 60 08 e2 20 c2 10 a0 00 00 b7 23 f0
>3a5da8		03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00 00 f4 00
>3a5db8		00 f4 00 00 20 79 58 90 19 20 c6 14 e2 20 a0 00
>3a5dc8		00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00 97 16 82
>3a5dd8		ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9 01 83 01
>3a5de8		c2 20 a9 00 00 83 03 c2 20 af c2 5e 3a 85 29 af
>3a5df8		c4 5e 3a 85 2b 20 a2 5c 89 00 80 d0 12 20 3d 58
>3a5e08		a3 03 1a 83 03 20 a2 5c c9 ff ff f0 12 80 ee 20
>3a5e18		f4 57 a3 03 3a 83 03 20 a2 5c c9 ff ff f0 f0 e2
>3a5e28		30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3 05 aa f0
>3a5e38		0f a5 25 09 80 85 25 46 25 66 24 66 23 ca d0 f7
>3a5e48		c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0 11 c2 20
>3a5e58		38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25 20
>3a5e68		25 15 c2 20 a5 16 85 23 a5 18 85 25 20 9d 5d e2
>3a5e78		20 c8 a9 00 97 23 88 88 b7 23 c8 97 23 c0 02 00
>3a5e88		d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05 83 06 f0
>3a5e98		19 20 9d 5d a9 45 20 4f 5d a3 06 20 5b 5d 80 0a
>3a5ea8		c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27
>3a5eb8		c2 20 3b 18 69 06 00 1b 28 60 00 50 c3 47 00 00
>3a5ec8		80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9 48 8f 00
>3a5ed8		e2 af c2 20 bd 00 00 8f 08 e2 af bd 02 00 8f 0a
>3a5ee8		e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af c2
>3a5ef8		20 af 23 08 00 8f 0c e2 af af 25 08 00 8f 0e e2
>3a5f08		af ea ea ea af 08 e2 af 48 af 0a e2 af 8f 0a e2
>3a5f18		af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2 af c2 20
>3a5f28		bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2 af ea ea
>3a5f38		ea 88 f0 14 af 08 e2 af 48 af 0a e2 af 8f 0a e2
>3a5f48		af 68 8f 08 e2 af 80 9b af 08 e2 af 8f 23 08 00
>3a5f58		af 0a e2 af 8f 25 08 00 60 e2 20 a9 00 8f 00 e2
>3a5f68		af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af 8f
>3a5f78		0c e2 af af 25 08 00 8f 0a e2 af 8f 0e e2 af ea
>3a5f88		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 e2
>3a5f98		20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 a5
>3a5fa8		23 8f 0c e2 af af 25 08 00 8f 0e e2 af af eb 65
>3a5fb8		3a 8f 08 e2 af af ed 65 3a 8f 0a e2 af ea ea ea
>3a5fc8		af 08 e2 af 85 23 af 0a e2 af 85 25 60 a2 00 00
>3a5fd8		a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08 e2 af
>3a5fe8		a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af
>3a5ff8		0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10 09 29
>3a6008		7f 85 26 a9 01 48 80 03 a9 00 48 a9 40 8f 00 e2
>3a6018		af a9 02 8f 01 e2 af c2 30 af 53 66 3a 85 29 8f
>3a6028		0c e2 af af 55 66 3a 85 2b 8f 0e e2 af 20 d5 5f
>3a6038		e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5 25 8f
>3a6048		0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>3a6058		29 ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5 23 df
>3a6068		57 66 3a a5 25 ff 59 66 3a 90 2c bf 53 66 3a 8f
>3a6078		08 e2 af bf 55 66 3a 8f 0a e2 af a5 23 8f 0c e2
>3a6088		af a5 25 8f 0e e2 af ea ea ea af 08 e2 af 85 23
>3a6098		af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8 e0 0c
>3a60a8		00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20 61 5f 8b
>3a60b8		e2 20 a9 3a 48 ab c2 20 a2 93 65 5a a0 05 00 20
>3a60c8		d2 5e 7a a9 01 00 8f 27 08 00 ab fa 68 28 60 08
>3a60d8		c2 30 48 da a5 23 85 29 a5 25 85 2b 20 61 5f 8b
>3a60e8		e2 20 a9 3a 48 ab c2 20 a2 a7 65 5a a0 05 00 20
>3a60f8		d2 5e 7a ab 20 3c 57 fa 68 28 60 08 c2 30 48 da
>3a6108		a5 23 85 29 a5 25 85 2b 20 61 5f 8b e2 20 a9 3a
>3a6118		48 ab c2 20 a2 bb 65 5a a0 05 00 20 d2 5e 7a ab
>3a6128		20 3c 57 fa 68 28 60 08 c2 30 48 da e2 20 a9 40
>3a6138		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>3a6148		e2 af a5 25 8f 0a e2 af af eb 65 3a 8f 0c e2 af
>3a6158		af ed 65 3a 8f 0e e2 af ea ea ea af 08 e2 af 85
>3a6168		0c af 0a e2 af 85 0e e2 20 a9 48 8f 00 e2 af c2
>3a6178		20 ea ea ea af 08 e2 af 85 10 af 0a e2 af 85 12
>3a6188		e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f 08 e2 af
>3a6198		a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5 12 8f 0e
>3a61a8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>3a61b8		25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01 e2 af c2
>3a61c8		20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea
>3a61d8		af 08 e2 af 85 29 af 0a e2 af 85 2b 20 61 5f 8b
>3a61e8		e2 20 a9 3a 48 ab c2 20 a2 cf 65 5a a0 08 00 20
>3a61f8		d2 5e 7a a9 01 00 8f 27 08 00 8f 2d 08 00 20 3c
>3a6208		57 ab fa 68 28 60 08 c2 30 48 da 20 01 60 20 5e
>3a6218		60 da 8a 29 01 00 d0 05 20 d7 60 80 03 20 af 60
>3a6228		fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80 85 26 c2
>3a6238		20 fa 68 28 60 08 c2 30 48 da 20 01 60 20 5e 60
>3a6248		da 8a 29 01 00 d0 05 20 af 60 80 03 20 d7 60 fa
>3a6258		8a 29 02 00 f0 0a e2 20 a5 26 09 80 85 26 c2 20
>3a6268		fa 68 28 60 08 c2 30 48 da 20 01 60 20 5e 60 20
>3a6278		03 61 8a 29 01 00 f0 03 20 97 5f 8a e2 20 4a 4a
>3a6288		69 00 29 01 f0 06 a5 26 09 80 85 26 c2 20 fa 68
>3a6298		28 60 08 c2 30 48 da 5a a5 25 10 1f 08 c2 20 48
>3a62a8		a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20
>3a62b8		29 ff 00 20 23 1e e2 20 dc d4 08 c2 30 a5 23 cf
>3a62c8		eb 65 3a a5 25 cf ed 65 3a b0 04 20 97 5f 18 a9
>3a62d8		00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af a9 01 8f
>3a62e8		01 e2 af c2 20 af 43 66 3a 85 29 8f 0c e2 af af
>3a62f8		45 66 3a 85 2b 8f 0e e2 af 20 d5 5f 8a f0 07 0a
>3a6308		0a 0a 0a 0a 0a a8 af 47 66 3a 85 29 8f 0c e2 af
>3a6318		af 49 66 3a 85 2b 8f 0e e2 af 20 d5 5f 8a f0 0b
>3a6328		0a 0a 0a 0a 85 29 18 98 65 29 a8 af 4b 66 3a 85
>3a6338		29 8f 0c e2 af af 4d 66 3a 85 2b 8f 0e e2 af 20
>3a6348		d5 5f 8a f0 09 0a 0a 85 29 18 98 65 29 a8 af 4f
>3a6358		66 3a 85 29 8f 0c e2 af af 51 66 3a 85 2b 8f 0e
>3a6368		e2 af 20 d5 5f 86 29 18 98 65 29 a8 20 2f 61 a5
>3a6378		23 85 29 a5 25 85 2b 98 85 23 64 25 20 c9 5b 20
>3a6388		a6 56 68 d0 07 a5 25 09 00 80 85 25 7a fa 68 28
>3a6398		60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 61
>3a63a8		5f 8b e2 20 a9 3a 48 ab c2 20 a2 f3 65 a0 05 00
>3a63b8		20 d2 5e ab 20 3c 57 fa 68 28 60 08 c2 30 48 da
>3a63c8		20 99 63 af 5b 66 3a 85 29 af 5d 66 3a 85 2b 20
>3a63d8		9b 56 a5 25 49 00 80 85 25 fa 68 28 60 08 c2 30
>3a63e8		48 da a5 23 85 29 a5 25 85 2b 20 61 5f 8b e2 20
>3a63f8		a9 3a 48 ab c2 20 a2 07 66 a0 05 00 20 d2 5e ab
>3a6408		20 3c 57 fa 68 28 60 c2 20 a5 23 85 29 a5 25 85
>3a6418		2b c2 20 af eb 65 3a 85 23 af ed 65 3a 85 25 8a
>3a6428		f0 30 4a aa 90 03 20 3c 57 c2 20 a5 25 48 a5 23
>3a6438		48 c2 20 a5 29 85 23 a5 2b 85 25 20 61 5f c2 20
>3a6448		a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85 25
>3a6458		80 cd 60 08 c2 30 48 da 8b e2 20 a9 3a 48 ab c2
>3a6468		20 a2 1b 66 5a a0 0a 00 20 d2 5e 7a ab fa 68 28
>3a6478		60 08 c2 30 48 da 5a a5 23 05 25 d0 10 c2 20 af
>3a6488		eb 65 3a 85 23 af ed 65 3a 85 25 80 61 a5 25 29
>3a6498		00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2 20 a5 25
>3a64a8		48 a5 23 48 20 16 06 a6 23 20 84 07 c2 20 a5 23
>3a64b8		85 29 a5 25 85 2b c2 20 68 85 23 68 85 25 20 9b
>3a64c8		56 20 5b 64 c2 20 a5 25 48 a5 23 48 c2 20 af 4f
>3a64d8		66 3a 85 23 af 51 66 3a 85 25 20 0f 64 c2 20 68
>3a64e8		85 29 68 85 2b 20 3c 57 98 f0 03 20 97 5f 7a fa
>3a64f8		68 28 60 08 c2 30 48 a5 25 10 1f 08 c2 20 48 a9
>3a6508		00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20 29
>3a6518		ff 00 20 23 1e e2 20 dc d4 08 c2 30 05 23 f0 68
>3a6528		c2 20 af ef 65 3a 85 29 af f1 65 3a 85 2b e2 20
>3a6538		a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23 48 20 f1
>3a6548		56 a5 25 c5 2b d0 09 a5 23 45 29 29 f8 ff f0 30
>3a6558		20 a6 56 c2 20 af ef 65 3a 85 29 af f1 65 3a 85
>3a6568		2b 20 f1 56 c2 20 a5 23 85 29 a5 25 85 2b c2 20
>3a6578		68 85 23 68 85 25 c2 20 a5 25 48 a5 23 48 80 be
>3a6588		c2 20 68 85 29 68 85 2b 68 28 60 01 0d d0 37 61
>3a6598		0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00 80 3f 1d
>3a65a8		ef 38 36 01 0d 50 b9 89 88 08 3c ab aa 2a be 00
>3a65b8		00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e ab
>3a65c8		aa aa 3e 00 00 80 3f 89 88 88 3d d9 89 9d 3d 8c
>3a65d8		2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc 4c 3e ab
>3a65e8		aa aa 3e 00 00 80 3f 00 00 00 40 8e e3 f8 3c 6e
>3a65f8		db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00 80 3f 39
>3a6608		8e e3 3d 25 49 12 be cd cc 4c 3e ab aa aa be 00
>3a6618		00 80 3f 1d ef 38 36 01 0d d0 37 01 0d 50 39 61
>3a6628		0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa 2a 3e 00
>3a6638		00 00 3f 00 00 80 3f 00 00 80 3f c1 2c a1 6d 5f
>3a6648		97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f c9 40 db
>3a6658		0f 49 40 db 0f c9 3f db 0f 49 3f 08 20 d4 12 c2
>3a6668		20 a9 01 00 85 23 a9 00 00 85 25 e2 20 af 00 4d
>3a6678		00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00
>3a6688		4d 00 85 29 a9 00 00 85 2b e2 20 a9 00 85 2d c2
>3a6698		20 20 1f 28 e8 e8 88 d0 e3 c2 20 a9 04 00 85 29
>3a66a8		a9 00 00 85 2b 20 1f 28 e2 20 af 00 4d 00 85 0c
>3a66b8		a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c 85 23 a5
>3a66c8		25 69 00 00 85 25 d0 29 e2 20 a5 ea 09 80 a6 23
>3a66d8		20 98 10 e2 20 af 00 4d 00 87 c0 a0 01 00 a2 00
>3a66e8		00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23 e8 c8 80
>3a66f8		f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>3a6708		d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08
>3a6718		e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5
>3a6728		c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c
>3a6738		e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08
>3a6748		c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>3a6758		0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>3a6768		64 08 64 0a e2 20 af 00 4d 00 85 8f 64 90 a2 01
>3a6778		00 e2 20 a7 c0 c5 8f f0 22 a6 8f 00 08 c2 20 48
>3a6788		a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20
>3a6798		29 ff 00 20 23 1e e2 20 dc d4 08 c9 01 f0 3a a0
>3a67a8		01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25 64 26
>3a67b8		b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68
>3a67c8		20 1f 28 c2 20 18 a5 08 65 23 85 08 a5 0a 65 25
>3a67d8		85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00
>3a67e8		85 90 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a
>3a67f8		69 00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2
>3a6808		20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09 c2 20
>3a6818		a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08 e2 20
>3a6828		a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b
>3a6838		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>3a6848		23 1e e2 20 dc d4 08 08 20 d4 12 e2 20 a0 00 00
>3a6858		b7 c3 29 7f c9 02 d0 05 20 a8 06 80 10 c9 00 d0
>3a6868		05 20 16 06 80 07 c9 01 d0 2b 20 84 07 a5 27 48
>3a6878		c2 20 a5 25 48 a5 23 48 20 65 67 68 85 23 68 85
>3a6888		25 e2 20 68 85 27 c2 20 a5 23 87 08 a0 02 00 a5
>3a6898		25 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>3a68a8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2
>3a68b8		20 dc d4 08 08 20 d4 12 f4 00 00 f4 00 00 e2 20
>3a68c8		48 20 65 67 e2 20 68 c2 20 68 68 c2 20 a7 08 85
>3a68d8		23 a0 02 00 b7 08 85 25 e2 20 a0 00 00 b7 c3 29
>3a68e8		7f 85 27 20 28 18 28 60 da 0b 08 08 c2 20 48 a9
>3a68f8		00 08 5b 68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f
>3a6908		00 d0 0c a5 23 89 00 fc d0 05 20 e3 45 80 2e a2
>3a6918		0a 00 46 25 66 23 ca d0 f9 20 e3 45 e2 20 a9 4b
>3a6928		20 18 00 c2 20 80 16 a2 14 00 46 25 66 23 ca d0
>3a6938		f9 20 e3 45 e2 20 a9 4d 20 18 00 c2 20 28 2b fa
>3a6948		60 0b 08 c2 30 a9 00 00 8f b6 08 00 8f b8 08 00
>3a6958		e2 20 20 43 22 c9 00 f0 08 20 d1 1c 20 a8 06 80
>3a6968		11 c2 20 a9 00 00 85 23 85 25 e2 20 a9 02 85 27
>3a6978		c2 20 20 aa 6a 22 08 11 00 b0 22 20 5b 6b 08 c2
>3a6988		20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d3 08 00
>3a6998		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 20 9c 03
>3a69a8		08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7
>3a69b8		18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00
>3a69c8		b7 18 89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00
>3a69d8		29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18
>3a69e8		00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7
>3a69f8		18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0
>3a6a08		0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f
>3a6a18		23 08 00 c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f
>3a6a28		27 08 00 20 f0 68 a9 09 20 18 00 a0 0b 00 b7 18
>3a6a38		89 08 d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0
>3a6a48		05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea
>3a6a58		20 9c 03 20 b3 03 22 0c 11 00 90 03 82 41 ff 20
>3a6a68		5b 6b 08 c2 20 48 a9 00 08 5b 68 28 20 27 21 28
>3a6a78		2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f
>3a6a88		c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20
>3a6a98		f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00
>3a6aa8		80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30
>3a6ab8		a9 73 f2 85 20 a9 3a 00 85 22 a0 00 00 e2 20 a9
>3a6ac8		00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81
>3a6ad8		f2 3a a9 3a 00 8f 83 f2 3a af 23 08 00 8f 75 f2
>3a6ae8		3a af 25 08 00 8f 77 f2 3a 28 2b 60 08 c2 30 20
>3a6af8		03 21 20 d1 1c 20 a8 06 20 aa 6a e2 20 a9 2c 85
>3a6b08		37 20 24 22 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f
>3a6b18		56 03 00 80 17 20 e2 20 20 d1 1c 20 16 06 c2 20
>3a6b28		a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18 11 00
>3a6b38		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>3a6b48		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a6b58		08 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>3a6b68		08 e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00
>3a6b78		85 23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea
>3a6b88		a9 3a 85 e9 c2 20 a9 be 6b 85 e7 20 48 53 e2 20
>3a6b98		af 20 03 00 85 23 a9 00 85 24 85 25 85 26 a9 00
>3a6ba8		85 27 85 ea a9 3a 85 e9 c2 20 a9 c6 6b 85 e7 20
>3a6bb8		48 53 28 2b ab 60 44 4f 53 53 54 41 54 00 42 49
>3a6bc8		4f 53 53 54 41 54 00 08 c2 30 20 03 21 20 d1 1c
>3a6bd8		20 a8 06 a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9
>3a6be8		ff ff 8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25
>3a6bf8		20 23 1e 20 5b 6b 08 c2 20 48 a9 00 08 5b 68 28
>3a6c08		e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a6c18		e2 20 dc d4 08 20 23 1e 28 60 08 c2 30 20 03 21
>3a6c28		20 d1 1c 20 a8 06 20 aa 6a a9 00 00 8f 54 03 00
>3a6c38		a9 01 00 8f 56 03 00 20 19 50 22 18 11 00 b0 22
>3a6c48		20 5b 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>3a6c58		11 8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc
>3a6c68		d4 08 20 5b 6b c2 20 a2 12 00 18 bf 73 f2 3a 69
>3a6c78		00 00 85 92 bf 75 f2 3a 69 01 00 85 94 e2 20 a9
>3a6c88		00 87 92 c2 20 a9 00 00 85 7a a9 01 00 85 7c a2
>3a6c98		00 00 e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04
>3a6ca8		9d 00 4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20
>3a6cb8		a9 00 9d 00 4f 20 52 27 c2 20 e6 7a d0 d1 e6 7c
>3a6cc8		80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 52
>3a6cd8		27 28 60 08 c2 30 20 03 21 20 d1 1c 20 a8 06 20
>3a6ce8		aa 6a e2 20 a9 2c 20 ef 21 c2 20 20 d1 1c 20 16
>3a6cf8		06 a5 23 8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9
>3a6d08		2c c2 20 20 ef 21 20 d1 1c 20 16 06 a5 23 8f 58
>3a6d18		03 00 a5 25 8f 5a 03 00 22 1c 11 00 b0 22 20 5b
>3a6d28		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>3a6d38		d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4 08
>3a6d48		20 5b 6b 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20
>3a6d58		b7 23 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08
>3a6d68		c2 30 20 03 21 20 d1 1c 20 a8 06 20 aa 6a a9 00
>3a6d78		00 85 a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9
>3a6d88		00 00 85 ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55
>3a6d98		85 57 a9 ff ff 85 59 a9 ff 7f 85 5b 20 50 18 e2
>3a6da8		20 a9 80 85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03
>3a6db8		00 65 ab 8f 58 03 00 a9 01 00 8f 52 03 00 69 00
>3a6dc8		00 8f 5a 03 00 22 1c 11 00 b0 22 20 5b 6b 08 c2
>3a6dd8		20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00
>3a6de8		c2 20 29 ff 00 20 23 1e e2 20 dc d4 08 20 5b 6b
>3a6df8		28 60 08 c2 30 20 03 21 20 d1 1c 20 a8 06 20 4d
>3a6e08		6d 22 04 11 00 b0 22 20 5b 6b 08 c2 20 48 a9 00
>3a6e18		08 5b 68 28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff
>3a6e28		00 20 23 1e e2 20 dc d4 08 20 5b 6b 28 60 da 08
>3a6e38		e2 20 c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20
>3a6e48		90 13 a2 00 00 df 61 6e 3a f0 0a e8 e0 0f 00 d0
>3a6e58		f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c
>3a6e68		3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08
>3a6e78		5b 68 28 c2 30 20 d1 1c 20 a8 06 20 4d 6d 22 10
>3a6e88		11 00 b0 22 20 5b 6b 08 c2 20 48 a9 00 08 5b 68
>3a6e98		28 e2 20 a9 14 8f d3 08 00 c2 20 29 ff 00 20 23
>3a6ea8		1e e2 20 dc d4 08 e2 20 a9 2c 20 ef 21 c2 20 20
>3a6eb8		d1 1c 20 a8 06 ad 38 03 85 08 ad 3a 03 85 0a e2
>3a6ec8		20 a2 00 00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00
>3a6ed8		00 a0 00 00 b7 23 f0 76 c9 2e f0 39 22 36 6e 3a
>3a6ee8		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>3a6ef8		8f d3 08 00 c2 20 29 ff 00 20 23 1e e2 20 dc d4
>3a6f08		08 95 7e c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e
>3a6f18		f0 03 c8 80 f5 c8 a2 08 00 b7 23 f0 31 22 36 6e
>3a6f28		3a b0 22 20 5b 6b 08 c2 20 48 a9 00 08 5b 68 28
>3a6f38		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 23 1e
>3a6f48		e2 20 dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00
>3a6f58		00 a0 00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22
>3a6f68		14 11 00 b0 22 20 5b 6b 08 c2 20 48 a9 00 08 5b
>3a6f78		68 28 e2 20 a9 15 8f d3 08 00 c2 20 29 ff 00 20
>3a6f88		23 1e e2 20 dc d4 08 20 5b 6b 28 60 08 08 c2 20
>3a6f98		48 a9 00 08 5b 68 28 c2 30 20 d1 1c 20 a8 06 a5
>3a6fa8		23 8f 64 03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20
>3a6fb8		ef 21 c2 20 20 d1 1c 20 a8 06 a5 23 8f 68 03 00
>3a6fc8		a5 25 8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20 48
>3a6fd8		a9 00 08 5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20
>3a6fe8		29 ff 00 20 23 1e e2 20 dc d4 08 28 60 5c b2 89
>3a6ff8		3a 5c 03 88 3a 5c b3 89 3a 5c 2f 79 3a 5c 8c 79
>3a7008		3a 5c bf 78 3a 5c 45 78 3a 5c c2 7d 3a 5c b0 74
>3a7018		3a 5c dd 77 3a 5c 98 77 3a 5c 22 77 3a 5c c1 88
>3a7028		3a 5c be 75 3a 5c 0e 74 3a 5c 3c 89 3a 5c ec 74
>3a7038		3a 5c b5 89 3a 5c ae 89 3a 5c db 76 3a 5c b6 89
>3a7048		3a 18 fb 58 5c 50 70 3a c2 30 22 0e 74 3a 20 08
>3a7058		00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 2a
>3a7068		05 ab 22 f9 6f 3a 22 01 70 3a 80 e2 08 8b e2 20
>3a7078		a9 3a 48 ab c2 10 a2 87 70 20 29 04 ab 28 6b 41
>3a7088		20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>3a7098		6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>3a70a8		20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>3a70b8		72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>3a70c8		65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>3a70d8		0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>3a70e8		63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>3a70f8		0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>3a7108		5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>3a7118		61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>3a7128		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>3a7138		3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>3a7148		20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>3a7158		61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>3a7168		73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>3a7178		75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>3a7188		69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>3a7198		20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>3a71a8		61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a71b8		20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>3a71c8		74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>3a71d8		48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>3a71e8		3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>3a71f8		20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>3a7208		73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>3a7218		20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>3a7228		22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>3a7238		69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>3a7248		65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>3a7258		76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a7268		0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>3a7278		20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>3a7288		65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>3a7298		20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>3a72a8		3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>3a72b8		4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>3a72c8		20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>3a72d8		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>3a72e8		53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>3a72f8		20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>3a7308		3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>3a7318		3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>3a7328		74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>3a7338		20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>3a7348		68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>3a7358		79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>3a7368		65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>3a7378		61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>3a7388		73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>3a7398		74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>3a73a8		20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>3a73b8		5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>3a73c8		20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>3a73d8		0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>3a73e8		68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>3a73f8		0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a7408		a5 0d 85 4e 28 6b 20 3d 02 08 e2 20 48 a9 3a 48
>3a7418		ab 68 28 a2 f3 89 20 29 04 e2 20 a9 3b 20 18 00
>3a7428		a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68
>3a7438		28 a0 03 00 a2 42 02 20 ac 03 c2 20 a9 20 00 20
>3a7448		18 00 af 44 02 00 20 39 04 a9 20 00 20 18 00 af
>3a7458		46 02 00 20 39 04 a9 20 00 20 18 00 af 48 02 00
>3a7468		20 39 04 a9 20 00 20 18 00 af 4a 02 00 20 39 04
>3a7478		a9 20 00 20 18 00 af 4e 02 00 20 53 04 a9 20 00
>3a7488		20 18 00 a9 20 00 20 18 00 af 4c 02 00 20 39 04
>3a7498		a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 0c 87 3a
>3a74a8		28 20 9c 03 20 9c 03 6b 08 0b 08 c2 20 48 a9 48
>3a74b8		08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13
>3a74c8		d0 0e c2 20 a5 0d c5 11 d0 06 20 9c 03 2b 28 6b
>3a74d8		c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00
>3a74e8		85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>3a74f8		e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d
>3a7508		e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d
>3a7518		c5 11 d0 03 4c a3 75 c2 20 18 a5 0d 69 01 00 85
>3a7528		0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69 01
>3a7538		00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20 38
>3a7548		a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20
>3a7558		18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17 e2
>3a7568		20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5
>3a7578		0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11 e2
>3a7588		20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00 85
>3a7598		15 e2 20 a5 16 e9 00 85 16 80 c4 20 9c 03 2b 28
>3a75a8		6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03
>3a75b8		28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 48 08
>3a75c8		5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0
>3a75d8		16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2
>3a75e8		20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5
>3a75f8		0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2
>3a7608		20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5 32
>3a7618		85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 a9 75 3a
>3a7628		b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69 01 00 85
>3a7638		19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db a9
>3a7648		00 99 7e 08 a9 3e 20 18 00 a9 20 20 18 00 e2 20
>3a7658		a5 34 20 53 04 a9 3a 20 18 00 c2 20 a5 32 20 39
>3a7668		04 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00 a7
>3a7678		32 20 53 04 22 eb 86 3a e2 20 c6 47 d0 ea a9 20
>3a7688		20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48 ab
>3a7698		68 28 a2 7e 08 20 29 04 20 9c 03 20 b3 03 a5 34
>3a76a8		c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 9c 03 2b
>3a76b8		ab 28 6b 4c 0f 76 08 8d 92 08 e2 20 bd 00 00 99
>3a76c8		00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08 80
>3a76d8		eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28
>3a76e8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85 32
>3a76f8		a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59 08 a0 7e
>3a7708		08 22 be 76 3a a0 00 00 b9 7e 08 87 32 22 eb 86
>3a7718		3a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2 20
>3a7728		48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>3a7738		28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0 7e
>3a7748		08 22 be 76 3a c2 20 a5 0d 85 32 a5 0f 85 34 c2
>3a7758		20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20 a0
>3a7768		00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2 20
>3a7778		a5 32 85 4a a5 34 85 4c 22 95 81 3a e2 20 a9 20
>3a7788		20 18 00 22 eb 86 3a 80 c6 20 9c 03 ab 2b 28 6b
>3a7798		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 0e
>3a77a8		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>3a77b8		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>3a77c8		00 5b e2 20 a9 3a 48 a9 77 48 a9 d8 48 4c 0f 78
>3a77d8		ea 5c 04 00 3a 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a77e8		20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f 8f
>3a77f8		42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a 02
>3a7808		00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab a9
>3a7818		5c 8f a2 08 00 af 42 02 00 8f a5 08 00 af 41 02
>3a7828		00 8f a4 08 00 af 40 02 00 8f a3 08 00 af 4f 02
>3a7838		00 48 c2 20 af 44 02 00 28 5c a2 08 00 08 0b 8b
>3a7848		08 e2 20 48 a9 3a 48 ab 68 28 08 c2 20 48 a9 48
>3a7858		08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9 03
>3a7868		d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00 85
>3a7878		47 80 08 a2 b7 89 20 29 04 80 35 a5 0d 85 4a a5
>3a7888		0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22 95
>3a7898		81 3a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00 85
>3a78a8		4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 9c 03
>3a78b8		20 9c 03 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9 00
>3a78c8		48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>3a78d8		a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9 01
>3a78e8		f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46 02
>3a78f8		c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d 8e
>3a7908		4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06 f0
>3a7918		12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6 29
>3a7928		8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48
>3a7938		08 5b 68 28 e2 20 c2 10 a2 00 00 bf 24 8a 3a f0
>3a7948		18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf 65 79
>3a7958		3a 8f 2f 08 00 22 89 79 3a ab 2b 28 6b 05 70 0d
>3a7968		70 11 70 15 70 19 70 1d 70 21 70 25 70 29 70 2d
>3a7978		70 09 70 31 70 35 70 39 70 fb 73 3d 70 41 70 74
>3a7988		70 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48 08 5b 68
>3a7998		28 e2 20 a5 31 c9 02 b0 03 4c 32 7b c2 20 a5 0d
>3a79a8		85 32 a5 0f 85 34 c2 20 22 34 7d 3a c9 ff ff f0
>3a79b8		10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f 80
>3a79c8		4c 20 9c 03 08 e2 20 48 a9 3a 48 ab 68 28 c2 10
>3a79d8		a2 69 7b 20 29 04 4c 32 7b 20 9c 03 08 e2 20 48
>3a79e8		a9 3a 48 ab 68 28 c2 10 a2 78 7b 20 29 04 4c 32
>3a79f8		7b e2 20 22 6a 7d 3a c9 ff f0 de 85 4f c9 03 f0
>3a7a08		62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 62 7c
>3a7a18		3a b0 03 4c fb 7a 87 32 22 eb 86 3a 08 e2 20 48
>3a7a28		a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85 58
>3a7a38		e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0 7c
>3a7a48		29 3f c9 02 d0 03 4c 29 7b c2 20 29 ff 00 aa e2
>3a7a58		20 bf 31 86 3a c9 03 f0 57 c9 02 f0 5f c9 01 f0
>3a7a68		67 80 71 c2 20 a5 54 c9 a9 82 f0 26 c9 0d 83 f0
>3a7a78		2a c9 8d 82 f0 1c c9 91 82 f0 17 c9 99 82 f0 12
>3a7a88		c9 81 82 f0 0d c9 95 82 f0 08 c9 7d 82 f0 03 4c
>3a7a98		15 7a e2 20 a9 12 85 4f 4c 15 7a e2 20 a9 16 85
>3a7aa8		4f 4c 15 7a 22 a5 7b 3a 90 60 c9 02 f0 0e 80 18
>3a7ab8		a0 02 00 b9 98 08 97 56 22 eb 86 3a a0 01 00 b9
>3a7ac8		98 08 97 56 22 eb 86 3a a0 00 00 b9 98 08 97 56
>3a7ad8		22 eb 86 3a e2 20 a9 41 20 18 00 a9 20 20 18 00
>3a7ae8		a6 32 86 4a a6 34 86 4c 22 95 81 3a a9 20 20 18
>3a7af8		00 80 37 20 9c 03 08 e2 20 48 a9 3a 48 ab 68 28
>3a7b08		c2 10 a2 36 7b 20 29 04 80 20 20 9c 03 08 e2 20
>3a7b18		48 a9 3a 48 ab 68 28 c2 10 a2 86 7b 20 29 04 80
>3a7b28		09 a5 4f 29 c0 d0 95 4c d0 7a 2b ab 28 6b 41 64
>3a7b38		64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e 6f
>3a7b48		74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74 68
>3a7b58		61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e 0d
>3a7b68		00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d 00
>3a7b78		42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52 65
>3a7b88		6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69 73
>3a7b98		20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b 08
>3a7ba8		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f c9 12 f0
>3a7bb8		0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5 32
>3a7bc8		69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50 e5
>3a7bd8		4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16 f0
>3a7be8		1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01 80
>3a7bf8		26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18 a5
>3a7c08		51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04 a9
>3a7c18		02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10 da
>3a7c28		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2 00 00 df
>3a7c38		00 d0 3a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20 06
>3a7c48		50 26 52 06 50 26 52 06 50 26 52 06 50 26 52 e2
>3a7c58		20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20 48
>3a7c68		a9 48 08 5b 68 28 08 e2 20 48 a9 3a 48 ab 68 28
>3a7c78		e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00 00
>3a7c88		bd 2f 83 f0 1b c5 54 d0 0d e2 20 b9 31 85 29 3f
>3a7c98		c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b 6b
>3a7ca8		18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>3a7cb8		e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11 c9
>3a7cc8		64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80 eb
>3a7cd8		b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7 36
>3a7ce8		c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0 0c
>3a7cf8		c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 23 7c 3a
>3a7d08		80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28 a0 00 00
>3a7d18		e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18 65
>3a7d28		03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2 20
>3a7d38		48 a9 48 08 5b 68 28 c2 20 a5 11 85 36 a5 13 85
>3a7d48		38 a9 bd 81 85 03 a9 3a 00 85 05 22 ac 7c 3a b0
>3a7d58		0d 22 0a 7d 3a a7 03 d0 f2 a9 ff ff 80 02 a5 03
>3a7d68		2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 c2 30
>3a7d78		a5 15 85 36 a5 17 85 38 a9 49 86 85 03 a9 3a 00
>3a7d88		85 05 22 ac 7c 3a b0 22 22 0a 7d 3a c2 20 18 a5
>3a7d98		03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20 a7
>3a7da8		03 d0 df c2 20 a9 ff ff 80 0d 22 0a 7d 3a e2 20
>3a7db8		a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2 20
>3a7dc8		48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5
>3a7dd8		31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00
>3a7de8		01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85
>3a7df8		32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00
>3a7e08		01 85 11 e2 20 a5 34 69 00 85 13 22 2e 7e 3a e2
>3a7e18		20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20
>3a7e28		9c 03 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9
>3a7e38		20 20 18 00 08 c2 20 48 a9 7a 08 5b 68 28 c2 20
>3a7e48		a5 00 85 18 e2 20 a5 02 85 1a 22 95 81 3a a9 20
>3a7e58		20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20 a5
>3a7e68		02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48
>3a7e78		a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0 0c 48 a7
>3a7e88		18 0f 96 08 00 8f 96 08 00 68 c2 20 29 ff 00 0a
>3a7e98		aa bf 2f 83 3a aa 22 0f 81 3a e2 20 a7 00 aa bf
>3a7ea8		31 85 3a 22 eb 86 3a 22 bc 7e 3a 20 9c 03 20 b3
>3a7eb8		03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c
>3a7ec8		ca 7e fa 7e 15 7f 1c 7f 41 7f 48 7f 63 7f 85 7f
>3a7ed8		96 7f d3 7f db 7f ec 7f fd 7f 04 80 29 80 56 80
>3a7ee8		c2 7f a7 7f 74 7f 49 80 53 80 67 80 96 80 44 80
>3a7ef8		a7 80 a9 28 20 18 00 22 be 80 3a a9 2c 20 18 00
>3a7f08		a9 58 20 18 00 a9 29 20 18 00 4c b8 80 22 be 80
>3a7f18		3a 4c b8 80 e2 20 48 a9 23 20 18 00 68 29 c0 c9
>3a7f28		00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 c8 80 3a 4c
>3a7f38		b8 80 22 be 80 3a 4c b8 80 22 c8 80 3a 4c b8 80
>3a7f48		a9 28 20 18 00 22 be 80 3a a9 29 20 18 00 a9 2c
>3a7f58		20 18 00 a9 59 20 18 00 4c b8 80 22 be 80 3a a9
>3a7f68		2c 20 18 00 a9 58 20 18 00 4c b8 80 22 be 80 3a
>3a7f78		a9 2c 20 18 00 a9 59 20 18 00 4c b8 80 22 c8 80
>3a7f88		3a a9 2c 20 18 00 a9 59 20 18 00 4c b8 80 22 c8
>3a7f98		80 3a a9 2c 20 18 00 a9 58 20 18 00 4c b8 80 a9
>3a7fa8		28 20 18 00 22 c8 80 3a a9 2c 20 18 00 a9 58 20
>3a7fb8		18 00 a9 29 20 18 00 4c b8 80 a9 28 20 18 00 22
>3a7fc8		be 80 3a a9 29 20 18 00 4c b8 80 a9 41 20 18 00
>3a7fd8		4c bc 80 22 be 80 3a a9 2c 20 18 00 a9 53 20 18
>3a7fe8		00 4c b8 80 a9 5b 20 18 00 22 be 80 3a a9 5d 20
>3a7ff8		18 00 4c b8 80 22 d6 80 3a 4c bc 80 a9 28 20 18
>3a8008		00 22 be 80 3a a9 2c 20 18 00 a9 53 20 18 00 a9
>3a8018		29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c b8
>3a8028		80 a9 5b 20 18 00 22 be 80 3a a9 5d 20 18 00 a9
>3a8038		2c 20 18 00 a9 59 20 18 00 4c b8 80 a0 02 00 80
>3a8048		03 a0 01 00 22 3c 81 3a 4c bc 80 4c bc 80 22 d6
>3a8058		80 3a a9 2c 20 18 00 a9 58 20 18 00 4c bc 80 a9
>3a8068		23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00 22
>3a8078		ac 03 3a a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0
>3a8088		01 00 22 ac 03 3a ab 22 eb 86 3a 4c b8 80 a9 28
>3a8098		20 18 00 22 c8 80 3a a9 29 20 18 00 4c b8 80 a9
>3a80a8		5b 20 18 00 22 c8 80 3a a9 5d 20 18 00 4c b8 80
>3a80b8		22 eb 86 3a 28 6b 08 e2 20 a7 00 20 53 04 28 6b
>3a80c8		08 c2 30 a7 00 20 39 04 22 eb 86 3a 28 6b 08 8b
>3a80d8		0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68 28 08 e2
>3a80e8		20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00 99
>3a80f8		92 08 22 eb 86 3a c8 c0 03 00 d0 f1 22 95 81 3a
>3a8108		c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20
>3a8118		48 a9 3a 48 ab 68 28 bd 00 00 20 18 00 e8 bd 00
>3a8128		00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20 18
>3a8138		00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08 5b 68 28
>3a8148		e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19 64
>3a8158		1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18 22
>3a8168		eb 86 3a a7 00 85 19 30 04 64 1a 80 04 a9 ff 85
>3a8178		1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65 1a
>3a8188		85 1a 22 95 81 3a 22 eb 86 3a 2b 28 6b 08 0b c2
>3a8198		20 48 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4c
>3a81a8		20 53 04 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 39
>3a81b8		04 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f 52
>3a81c8		00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d 50
>3a81d8		00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53 52
>3a81e8		00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45 43
>3a81f8		00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54 59
>3a8208		00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52 4b
>3a8218		00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48 50
>3a8228		00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45 59
>3a8238		00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c 43
>3a8248		00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59 41
>3a8258		00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58 41
>3a8268		00 54 58 53 00 54 41 58 00 54 53 58 00 44 45 58
>3a8278		00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56 43
>3a8288		00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e 45
>3a8298		00 42 45 51 00 54 53 42 00 54 52 42 00 53 54 5a
>3a82a8		00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48 58
>3a82b8		00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48 4b
>3a82c8		00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41 49
>3a82d8		00 58 42 41 00 54 43 53 00 54 53 43 00 54 43 44
>3a82e8		00 54 44 43 00 54 58 59 00 54 59 58 00 53 54 50
>3a82f8		00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44 4d
>3a8308		00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45 50
>3a8318		00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45 41
>3a8328		00 4a 4d 4c 00 00 00 15 82 bd 81 fd 82 bd 81 9d
>3a8338		82 bd 81 dd 81 bd 81 25 82 bd 81 dd 81 bd 82 9d
>3a8348		82 bd 81 dd 81 bd 81 7d 82 bd 81 bd 81 bd 81 a1
>3a8358		82 bd 81 dd 81 bd 81 45 82 bd 81 f9 81 dd 82 a1
>3a8368		82 bd 81 dd 81 bd 81 19 82 c1 81 01 83 c1 81 fd
>3a8378		81 c1 81 e1 81 c1 81 29 82 c1 81 e1 81 c1 82 fd
>3a8388		81 c1 81 e1 81 c1 81 81 82 c1 81 c1 81 c1 81 fd
>3a8398		81 c1 81 e1 81 c1 81 49 82 c1 81 f5 81 e1 82 fd
>3a83a8		81 c1 81 e1 81 c1 81 1d 82 c5 81 05 83 c5 81 19
>3a83b8		83 c5 81 e5 81 c5 81 2d 82 c5 81 e5 81 c5 82 01
>3a83c8		82 c5 81 e5 81 c5 81 85 82 c5 81 c5 81 c5 81 1d
>3a83d8		83 c5 81 e5 81 c5 81 4d 82 c5 81 ad 82 e5 82 29
>3a83e8		83 c5 81 e5 81 c5 81 21 82 c9 81 09 83 c9 81 a5
>3a83f8		82 c9 81 e9 81 c9 81 31 82 c9 81 e9 81 c9 82 01
>3a8408		82 c9 81 e9 81 c9 81 89 82 c9 81 c9 81 c9 81 a5
>3a8418		82 c9 81 e9 81 c9 81 51 82 c9 81 b1 82 e9 82 01
>3a8428		82 c9 81 e9 81 c9 81 a9 82 cd 81 0d 83 cd 81 05
>3a8438		82 cd 81 ed 81 cd 81 35 82 fd 81 65 82 cd 82 05
>3a8448		82 cd 81 ed 81 cd 81 8d 82 cd 81 cd 81 cd 81 05
>3a8458		82 cd 81 ed 81 cd 81 55 82 cd 81 69 82 ed 82 a5
>3a8468		82 cd 81 a5 82 cd 81 09 82 d1 81 f1 81 d1 81 09
>3a8478		82 d1 81 f1 81 d1 81 39 82 d1 81 6d 82 d1 82 09
>3a8488		82 d1 81 f1 81 d1 81 91 82 d1 81 d1 81 d1 81 09
>3a8498		82 d1 81 f1 81 d1 81 59 82 d1 81 71 82 f1 82 09
>3a84a8		82 d1 81 f1 81 d1 81 0d 82 d5 81 11 83 d5 81 0d
>3a84b8		82 d5 81 f5 81 d5 81 3d 82 d5 81 75 82 d5 82 0d
>3a84c8		82 d5 81 f5 81 d5 81 95 82 d5 81 d5 81 d5 81 21
>3a84d8		83 d5 81 f5 81 d5 81 5d 82 d5 81 b5 82 f5 82 29
>3a84e8		83 d5 81 f5 81 d5 81 11 82 d9 81 15 83 d9 81 11
>3a84f8		82 d9 81 f9 81 d9 81 41 82 d9 81 79 82 d9 82 11
>3a8508		82 d9 81 f9 81 d9 81 99 82 d9 81 d9 81 d9 81 25
>3a8518		83 d9 81 f9 81 d9 81 61 82 d9 81 b9 82 f9 82 19
>3a8528		82 d9 81 f9 81 d9 81 00 00 13 00 02 09 01 01 01
>3a8538		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05 05
>3a8548		0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01 01
>3a8558		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05 05
>3a8568		0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01 01
>3a8578		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05 05
>3a8588		0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01 01
>3a8598		0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05 05
>3a85a8		0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01 01
>3a85b8		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>3a85c8		0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01 01
>3a85d8		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>3a85e8		0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01 01
>3a85f8		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05 05
>3a8608		0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01 01
>3a8618		0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05 05
>3a8628		0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01 02
>3a8638		02 00 01 01 03 01 01 03 01 02 01 01 00 02 02 02
>3a8648		02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e 64
>3a8658		64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00 07
>3a8668		64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64 64
>3a8678		2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00 09
>3a8688		64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c 23
>3a8698		64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29 2c
>3a86a8		59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64 64
>3a86b8		64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64 64
>3a86c8		29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64 64
>3a86d8		5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00
>3a86e8		0a 00 00 08 c2 20 48 18 af 7a 08 00 69 01 00 8f
>3a86f8		7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c 08 00 c2
>3a8708		20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0 08
>3a8718		48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68 ca
>3a8728		d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2
>3a8738		20 a7 32 f0 0a c9 20 d0 06 22 eb 86 3a 80 f2 6b
>3a8748		08 08 c2 20 48 a9 48 08 5b 68 28 22 eb 86 3a 22
>3a8758		2d 87 3a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa a5
>3a8768		32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22 f0
>3a8778		06 22 eb 86 3a 80 f2 a9 00 87 32 22 eb 86 3a e6
>3a8788		31 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 64
>3a8798		4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20
>3a87a8		d1 04 90 0e 22 23 7c 3a a9 01 85 4a 22 eb 86 3a
>3a87b8		80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa
>3a87c8		a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20 64
>3a87d8		31 22 2d 87 3a a7 32 f0 21 c9 22 d0 06 22 48 87
>3a87e8		3a 80 0a 22 8b 87 3a a5 31 c9 09 b0 0d a7 32 f0
>3a87f8		09 c9 20 f0 dc 20 d1 04 b0 d7 6b 08 0b 08 c2 20
>3a8808		48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31 00 74 00
>3a8818		ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85 00
>3a8828		85 32 e2 20 22 2d 87 3a c9 00 f0 38 c2 20 a5 32
>3a8838		85 08 e2 20 a5 34 85 0a a2 01 00 22 eb 86 3a a7
>3a8848		32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb
>3a8858		86 0b a9 00 87 32 22 eb 86 3a a7 08 c9 41 f0 07
>3a8868		22 d5 87 3a 2b 28 6b 22 2d 87 3a a7 32 f0 f5 22
>3a8878		8b 87 3a 22 2d 87 3a a7 32 f0 e9 c2 20 a5 32 85
>3a8888		11 e2 20 a5 34 85 13 22 eb 86 3a a7 32 f0 26 c9
>3a8898		20 d0 f4 a9 00 87 32 e6 31 22 eb 86 3a 22 2d 87
>3a88a8		3a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85
>3a88b8		17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5 31
>3a88c8		d0 0f a2 b7 89 a9 3a 48 ab 20 29 04 20 9c 03 80
>3a88d8		61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20
>3a88e8		aa 6a e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff 8f
>3a88f8		54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54 03
>3a8908		00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20 a2
>3a8918		dd 89 a9 3a 48 ab 20 29 04 af 2e 03 00 20 53 04
>3a8928		a9 20 20 18 00 af 20 03 00 20 53 04 20 9c 03 20
>3a8938		9c 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0f
>3a8948		a2 b7 89 a9 3a 48 ab 20 29 04 20 9c 03 80 54 c2
>3a8958		20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 aa 6a
>3a8968		a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f 58
>3a8978		03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2 20
>3a8988		a2 c7 89 a9 3a 48 ab 20 29 04 af 2e 03 00 20 53
>3a8998		04 a9 20 20 18 00 af 20 03 00 20 53 04 20 9c 03
>3a89a8		20 9c 03 28 ab 6b 5c 85 27 3a 6b 00 00 00 00 42
>3a89b8		61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00 55
>3a89c8		6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69
>3a89d8		6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20 6c
>3a89e8		6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50 43
>3a89f8		20 20 20 20 20 41 20 20 20 20 58 20 20 20 20 59
>3a8a08		20 20 20 20 53 50 20 20 20 44 42 52 20 44 50 20
>3a8a18		20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44 46
>3a8a28		47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00 18
>3a8a38		fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>3a8a48		00 48 ab 68 28 c2 30 20 76 8a a9 ff fe 1b 08 e2
>3a8a58		20 48 a9 3a 48 ab 68 28 a2 77 d2 20 29 04 08 e2
>3a8a68		20 48 a9 00 48 ab 68 28 4c 85 27 4c 73 8a 08 20
>3a8a78		34 03 20 19 50 28 60 00 00 00 00 00 00 00 00 00
>3a8a88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1110 times (17760 bytes)...
>3acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>3ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>3ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>3ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>3ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>3ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>3ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>3ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>3ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>3ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>3ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>3ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>3ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>3ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>3ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>3ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>3ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>3ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>3ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>3ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>3ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>3ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>3ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>3ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>3ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>3ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>3ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>3ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>3ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>3ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>3ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>3ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>3ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>3ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>3ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>3ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>3ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>3ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>3ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>3ad268		00 49 4e 4b 45 59 00 0d 52 45 41 44 59 0d 00 43
>3ad278		32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49 43
>3ad288		38 31 36 20 76 30 2e 32 2e 30 2d 61 6c 70 68 61
>3ad298		2b 34 30 34 0d 00
>3b0000						.align 256
.3b0000						CREDITS_TEXT
>3b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>3b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>3b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>3b004f		20
>3b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>3b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>3b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>3b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>3b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>3b009f		20
>3b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b00ef		20
>3b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b013f		20
>3b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>3b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>3b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>3b0168		6e 79 20 41 6c 6c 61 69 72 65
>3b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>3b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b018a		20 20 20 20 20 20
>3b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>3b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>3b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>3b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b01da		20 20 20 20 20 20
>3b01e0		20				                .text " "
>3b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0229		20 20 20 20 20 20 20
>3b0230		20				                .text " "
>3b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0279		20 20 20 20 20 20 20
>3b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>3b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>3b0298		53 3a
>3b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>3b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>3b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>3b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>3b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>3b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b031d		20 20 20
>3b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>3b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>3b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>3b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>3b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>3b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>3b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>3b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>3b0398		75 73 68
>3b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>3b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>3b03c8		54 68 61 6e 6b 73 3a
>3b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>3b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0407		20 20 20 20 20 20 20 20 20
>3b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>3b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>3b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>3b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>3b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>3b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b045f		20
>3b0460		20				                .text " "
>3b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04a9		20 20 20 20 20 20 20
>3b04b0		20				                .text " "
>3b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b04f9		20 20 20 20 20 20 20
>3b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>3b0508		45 53 20 41 55 54 48 4f 52 53 3a
>3b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>3b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b054b		20 20 20 20 20
>3b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>3b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>3b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>3b0578		63 6f 72 65 73 2e 6f 72 67
>3b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>3b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0599		20 20 20 20 20 20 20
>3b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>3b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>3b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>3b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>3b05d8		6d
>3b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>3b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>3b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>3b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>3b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>3b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>3b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>3b063b		20 20 20 20 20
>3b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>3b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>3b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>3b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>3b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b068b		20 20 20 20 20
>3b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>3b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>3b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>3b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>3b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b06da		20 20 20 20 20 20
>3b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>3b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>3b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>3b0708		6a 61 64 61 20 47 6f 6d 65 7a
>3b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>3b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b072a		20 20 20 20 20 20
>3b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>3b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>3b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>3b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>3b0768		6f 6d
>3b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>3b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>3b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>3b0798		6e 69 78 20 55 29 3a 20 54 42 44
>3b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>3b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b07cb		20 20 20 20 20
>3b07d0		20				                .text " "
>3b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0819		20 20 20 20 20 20 20
>3b0820		20				                .text " "
>3b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0869		20 20 20 20 20 20 20
>3b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>3b0878		54 48 41 4e 4b 53 3a
>3b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>3b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b08b7		20 20 20 20 20 20 20 20 20
>3b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>3b08c8		56 61 6e 68 61 72 65 6e
>3b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>3b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0908		20 20 20 20 20 20 20 20
>3b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>3b0918		65 77
>3b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>3b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>3b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>3b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>3b0988		65 66 65 72 65 6e 63 65 73 29
>3b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>3b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b09aa		20 20 20 20 20 20
>3b09b0		20				                .text " "
>3b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b09f9		20 20 20 20 20 20 20
>3b0a00		20				                .text " "
>3b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>3b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>3b0a49		20 20 20 20 20 20 20
>3b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0a9f		20
>3b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>3b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>3b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>3b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>3b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>3b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>3b0aec		20 20 20 20
>3b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>3b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>3b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>3b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>3b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>3b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>3b0b3c		20 20 20 20
>3b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>3b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>3b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>3b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>3b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>3b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>3b0b8d		20 20 20
>3b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>3b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>3b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>3b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>3b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>3b0bdd		20 20 20
>3b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>3b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>3b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>3b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>3b0c2d		20 20 20
>3b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>3b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>3b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>3b0c7f		20
>3b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>3b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0c98		53 74 65 66 61 6e 79
>3b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>3b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>3b0cc7		20 20 20 20 20 20 20 20 20
>3b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>3b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>3b1768		20 20 20 20 20 20 20 20
>3b1770						.align 256
>3b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>3b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>3b2ab8		f4 f4 f4 f4 f4 f4 f4 f4
.3e0000						BOOT_MENU
.3e0000						SplashScreenMain:
.3e0000		48		pha		                PHA             ; begin setdp macro
.3e0001		08		php		                PHP
.3e0002		c2 20		rep #$20	                REP #$20        ; set A long
.3e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.3e0007		5b		tcd		                TCD
.3e0008		28		plp		                PLP
.3e0009		68		pla		                PLA             ; end setdp macro
.3e000a		c2 10		rep #$10	                REP #$10        ; set X long
.3e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e0012		a9 00		lda #$00	                LDA #$00
.3e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.3e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.3e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.3e0024		20 ee 00	jsr $3e00ee	                JSR Splash_Get_Machine_ID
.3e0027		20 21 01	jsr $3e0121	                JSR Splash_Clear_Screen
.3e002a		20 0b 01	jsr $3e010b	                JSR Splash_Load_FontSet
.3e002d		22 08 03 3e	jsl $3e0308	                JSL Splashscreen_BitMapSetup
.3e0031		20 1b 06	jsr $3e061b	                JSR Model_Update_Info_Field
.3e0034		20 fc 05	jsr $3e05fc	                JSR Set_Text_Color
.3e0037		a9 00		lda #$00	                LDA #$00
.3e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.3e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.3e003d		20 a3 08	jsr $3e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e0040						HAVE_FUN:
.3e0040		22 f0 80 39	jsl $3980f0	                JSL BOOT_SOUND_OFF
.3e0044		22 3b 01 3e	jsl $3e013b	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.3e0048		a6 a6		ldx $a6		                LDX LINE_INDEX
.3e004a		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.3e004d		f0 08		beq $3e0057	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.3e004f		20 e0 08	jsr $3e08e0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.3e0052		90 21		bcc $3e0075	                BCC Still_Displaying_Char
.3e0054		20 a3 08	jsr $3e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.3e0057						ByPassCharDisplay:
.3e0057		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0059		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.3e005d		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.3e005f		f0 14		beq $3e0075	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.3e0061		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.3e0063		f0 1f		beq $3e0084	                BEQ return              ; Yes: return it
.3e0065		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.3e0067		f0 1b		beq $3e0084	                BEQ return              ; Yes: return it
.3e0069		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.3e006b		f0 17		beq $3e0084	                BEQ return              ; Yes: return it
.3e006d		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.3e006f		f0 13		beq $3e0084	                BEQ return              ; Yes: return it
.3e0071		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.3e0073		f0 0d		beq $3e0082	                BEQ exitshere
.3e0075						Still_Displaying_Char:
.3e0075						WaitForNextSOF:
.3e0075		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.3e0079		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e007b		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.3e007d		d0 f6		bne $3e0075	                BNE WaitForNextSOF;
.3e007f		4c 40 00	jmp $3e0040	                JMP HAVE_FUN
.3e0082						exitshere:
.3e0082						timeout
.3e0082		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.3e0084						return
.3e0084		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.3e0088		a9 00		lda #$00	                LDA #$00
.3e008a		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.3e008e		22 3c 05 3e	jsl $3e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.3e0092		20 a7 00	jsr $3e00a7	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.3e0095		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.3e0099		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.3e009d		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.3e00a1		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.3e00a5		ea		nop		                NOP
.3e00a6		6b		rtl		                RTL
.3e00a7						VickyII_Registers_Clear:
.3e00a7		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00a9		c2 10		rep #$10	                REP #$10        ; set X long
.3e00ab		a2 00 00	ldx #$0000	                LDX #$0000
.3e00ae		a9 00		lda #$00	                LDA #$00
.3e00b0						ClearSpriteRegisters:
.3e00b0		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.3e00b4		e8		inx		                INX
.3e00b5		e0 00 02	cpx #$0200	                CPX #$0200
.3e00b8		d0 f6		bne $3e00b0	                BNE ClearSpriteRegisters
.3e00ba		a2 00 00	ldx #$0000	                LDX #$0000
.3e00bd		a9 00		lda #$00	                LDA #$00
.3e00bf						ClearTiles0Registers:
.3e00bf		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.3e00c3		e8		inx		                INX
.3e00c4		e0 30 00	cpx #$0030	                CPX #$0030
.3e00c7		d0 f6		bne $3e00bf	                BNE ClearTiles0Registers
.3e00c9		ea		nop		                NOP
.3e00ca		a2 00 00	ldx #$0000	                LDX #$0000
.3e00cd		a9 00		lda #$00	                LDA #$00
.3e00cf						ClearTiles1Registers:
.3e00cf		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.3e00d3		e8		inx		                INX
.3e00d4		e0 20 00	cpx #$0020	                CPX #$0020
.3e00d7		d0 f6		bne $3e00cf	                BNE ClearTiles1Registers
.3e00d9		ea		nop		                NOP
.3e00da		a2 00 00	ldx #$0000	                LDX #$0000
.3e00dd		a9 00		lda #$00	                LDA #$00
.3e00df						ClearBitmapRegisters:
.3e00df		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.3e00e3		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.3e00e7		e8		inx		                INX
.3e00e8		e0 10 00	cpx #$0010	                CPX #$0010
.3e00eb		d0 f2		bne $3e00df	                BNE ClearBitmapRegisters
.3e00ed		60		rts		                RTS
.3e00ee						Splash_Get_Machine_ID
.3e00ee		e2 20		sep #$20	                SEP #$20        ; set A short
.3e00f0		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e00f4		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.3e00f6		85 b0		sta $b0		                STA MODEL
.3e00f8		c9 00		cmp #$00	                CMP #$00
.3e00fa		f0 0e		beq $3e010a	                BEQ DONE
.3e00fc		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.3e0100		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.3e0102		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.3e0104		f0 04		beq $3e010a	                BEQ DONE
.3e0106		a9 02		lda #$02	                LDA #$02
.3e0108		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.3e010a						DONE:
.3e010a		60		rts		                RTS
.3e010b						Splash_Load_FontSet
.3e010b		e2 20		sep #$20	                SEP #$20        ; set A short
.3e010d		c2 10		rep #$10	                REP #$10        ; set X long
.3e010f		a2 00 00	ldx #$0000	                LDX #$0000
.3e0112						DONE_LOADING_FONT:
.3e0112		bf 00 08 3f	lda $3f0800,x	                LDA @l FONT_4_SPLASH, X
.3e0116		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.3e011a		e8		inx		                INX
.3e011b		e0 00 08	cpx #$0800	                CPX #2048
.3e011e		d0 f2		bne $3e0112	                BNE DONE_LOADING_FONT
.3e0120		60		rts		                RTS
.3e0121						Splash_Clear_Screen
.3e0121		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0123		c2 10		rep #$10	                REP #$10        ; set X long
.3e0125		a2 00 00	ldx #$0000	                LDX #$0000
.3e0128						Branch_Clear:
.3e0128		a9 20		lda #$20	                LDA #$20
.3e012a		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.3e012e		a9 f0		lda #$f0	                LDA #$F0
.3e0130		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.3e0134		e8		inx		                INX
.3e0135		e0 00 20	cpx #$2000	                CPX #$2000
.3e0138		d0 ee		bne $3e0128	                BNE Branch_Clear
.3e013a		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.3e013b						Splash_Moniker_Color_Rolling
.3e013b		e2 20		sep #$20	                SEP #$20        ; set A short
.3e013d		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.3e0141		29 01		and #$01	                AND #FNX0_INT00_SOF
.3e0143		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.3e0147		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.3e0149		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.3e014b		f0 0c		beq $3e0159	                BEQ SERVE_STATE0
.3e014d		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.3e014f		f0 1a		beq $3e016b	                BEQ SERVE_STATE1
.3e0151		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.3e0153		d0 03		bne $3e0158	                BNE NOT_SERVE_STATE2
.3e0155		82 39 01	brl $3e0291	                BRL SERVE_STATE2
.3e0158						NOT_SERVE_STATE2
.3e0158		6b		rtl		                RTL
.3e0159						SERVE_STATE0
.3e0159		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.3e015b		c9 04		cmp #$04	                CMP #$04
.3e015d		f0 03		beq $3e0162	                BEQ SERVE_NEXT_STATE
.3e015f		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.3e0161		6b		rtl		                RTL
.3e0162						SERVE_NEXT_STATE
.3e0162		a9 00		lda #$00	                LDA #$00
.3e0164		85 f1		sta $f1		                STA INTERRUPT_COUNT
.3e0166		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.3e0168		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e016a		6b		rtl		                RTL
.3e016b						SERVE_STATE1
.3e016b		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e016d		a9 00 00	lda #$0000	                LDA #$0000
.3e0170		a2 00 00	ldx #$0000	                LDX #$0000
.3e0173		e2 30		sep #$30	                SEP #$30        ; set A&X short
.3e0175		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0177		bf c0 02 3e	lda $3e02c0,x	                LDA @lCOLOR_POINTER+0, X
.3e017b		aa		tax		                TAX
.3e017c		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e0180		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.3e0184		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0188		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.3e018c		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e0190		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.3e0194		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0196		bf c1 02 3e	lda $3e02c1,x	                LDA @lCOLOR_POINTER+1, X
.3e019a		aa		tax		                TAX
.3e019b		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e019f		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.3e01a3		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01a7		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.3e01ab		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01af		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.3e01b3		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01b5		bf c2 02 3e	lda $3e02c2,x	                LDA @lCOLOR_POINTER+2, X
.3e01b9		aa		tax		                TAX
.3e01ba		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01be		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.3e01c2		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01c6		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.3e01ca		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01ce		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.3e01d2		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01d4		bf c3 02 3e	lda $3e02c3,x	                LDA @lCOLOR_POINTER+3, X
.3e01d8		aa		tax		                TAX
.3e01d9		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01dd		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.3e01e1		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e01e5		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.3e01e9		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e01ed		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.3e01f1		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e01f3		bf c4 02 3e	lda $3e02c4,x	                LDA @lCOLOR_POINTER+4, X
.3e01f7		aa		tax		                TAX
.3e01f8		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e01fc		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.3e0200		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0204		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.3e0208		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e020c		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.3e0210		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0212		bf c5 02 3e	lda $3e02c5,x	                LDA @lCOLOR_POINTER+5, X
.3e0216		aa		tax		                TAX
.3e0217		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e021b		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.3e021f		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0223		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.3e0227		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e022b		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.3e022f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0231		bf c6 02 3e	lda $3e02c6,x	                LDA @lCOLOR_POINTER+6, X
.3e0235		aa		tax		                TAX
.3e0236		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e023a		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.3e023e		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0242		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.3e0246		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e024a		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.3e024e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.3e0250		bf c7 02 3e	lda $3e02c7,x	                LDA @lCOLOR_POINTER+7, X
.3e0254		aa		tax		                TAX
.3e0255		bf a0 02 3e	lda $3e02a0,x	                LDA @lCOLOR_CHART, X
.3e0259		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.3e025d		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.3e0261		bf a1 02 3e	lda $3e02a1,x	                LDA @lCOLOR_CHART+1, X
.3e0265		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.3e0269		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.3e026d		bf a2 02 3e	lda $3e02a2,x	                LDA @lCOLOR_CHART+2, X
.3e0271		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.3e0275		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.3e0279						HERE
.3e0279		18		clc		                CLC
.3e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e027c		69 09		adc #$09	                ADC #$09
.3e027e		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e0280		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.3e0282		c9 48		cmp #$48	                CMP #$48
.3e0284		d0 04		bne $3e028a	                BNE EXIT_COLOR_CHANGE
.3e0286		a9 00		lda #$00	                LDA #$00
.3e0288		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.3e028a						EXIT_COLOR_CHANGE
.3e028a		c2 10		rep #$10	                REP #$10        ; set X long
.3e028c		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e028e		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0290		6b		rtl		                RTL
.3e0291						SERVE_STATE2
.3e0291		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.3e0293		85 f0		sta $f0		                STA INTERRUPT_STATE
.3e0295		6b		rtl		                RTL
>3e0296						.align 16
>3e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>3e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>3e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>3e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>3e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>3e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>3e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>3e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>3e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>3e02c8		00
>3e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>3e02d1		00
>3e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>3e02da		00
>3e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>3e02e3		00
>3e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>3e02ec		00
>3e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>3e02f5		00
>3e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>3e02fe		00
>3e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>3e0307		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.3e0308						Splashscreen_BitMapSetup
.3e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.3e030a		c2 10		rep #$10	                REP #$10        ; set X long
.3e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.3e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.3e0312		a9 00		lda #$00	        LDA #$00
.3e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.3e0318		a9 00		lda #$00	        LDA #$00
.3e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.3e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.3e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.3e0324		a9 00		lda #$00	        LDA #$00
.3e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.3e032a		a9 00		lda #$00	        LDA #$00
.3e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.3e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.3e0334		a9 01		lda #$01	        LDA #$01
.3e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.3e033a		a9 08		lda #$08	        LDA #$08
.3e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.3e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.3e0344		a9 80		lda #$80	        LDA #$80
.3e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.3e034a		a9 00		lda #$00	        LDA #$00
.3e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.3e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.3e0354		a9 a0		lda #$a0	        LDA #$A0
.3e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.3e035a		a9 10		lda #$10	        LDA #$10
.3e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.3e0360		a9 10		lda #$10	        LDA #$10
.3e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.3e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.3e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.3e036c		c2 10		rep #$10	                REP #$10        ; set X long
.3e036e		a2 00 00	ldx #$0000	        LDX #$0000
.3e0371						SS_LUT_BRANCH:
.3e0371		bf 00 0e 3e	lda $3e0e00,x	        LDA @l SS_MONIKER_LUT, X
.3e0375		ea		nop		        NOP
.3e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.3e037a		e8		inx		        INX
.3e037b		e0 00 04	cpx #$0400	        CPX #1024
.3e037e		d0 f1		bne $3e0371	        BNE SS_LUT_BRANCH
.3e0380		a9 00		lda #$00	        LDA #$00
.3e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.3e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.3e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.3e038e		22 3c 05 3e	jsl $3e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.3e0392		c2 20		rep #$20	                REP #$20        ; set A long
.3e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.3e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.3e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e03a2		a9 00 00	lda #$0000	        LDA #$0000
.3e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.3e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.3e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.3e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03c7		a9 3e		lda #$3e	        LDA #`SS_MONIKER
.3e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.3e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e03d3		a9 00		lda #$00	        LDA #$00
.3e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.3e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e03df		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.3e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.3e03e9		29 03		and #$03	        AND #$03
.3e03eb		c9 00		cmp #$00	        CMP #$00
.3e03ed		f0 0b		beq $3e03fa	        BEQ DMA_FMX_Moniker
.3e03ef		c9 01		cmp #$01	        CMP #$01
.3e03f1		f0 5b		beq $3e044e	        BEQ DMA_UPlus_Moniker
.3e03f3		c9 02		cmp #$02	        CMP #$02
.3e03f5		d0 03		bne $3e03fa	        BNE BAD_MODEL_NUMBER
.3e03f7		82 a8 00	brl $3e04a2	        BRL DMA_U_Moniker
.3e03fa						 BAD_MODEL_NUMBER:
.3e03fa						DMA_FMX_Moniker:
.3e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.3e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.3e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e040a		a9 00 00	lda #$0000	        LDA #$0000
.3e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.3e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.3e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.3e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.3e042f		a9 3e		lda #$3e	        LDA #`SS_FMX_TXT
.3e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.3e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e043b		a9 00		lda #$00	        LDA #$00
.3e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.3e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e0447		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e044b		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e044e						DMA_UPlus_Moniker:
.3e044e		c2 20		rep #$20	                REP #$20        ; set A long
.3e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.3e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e045e		a9 00 00	lda #$0000	        LDA #$0000
.3e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.3e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.3e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.3e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0483		a9 3e		lda #$3e	        LDA #`SS_UPlus_TXT
.3e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.3e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e048f		a9 00		lda #$00	        LDA #$00
.3e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.3e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e049b		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e049f		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e04a2						DMA_U_Moniker:
.3e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.3e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.3e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.3e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.3e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.3e04b2		a9 00 00	lda #$0000	        LDA #$0000
.3e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.3e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.3e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.3e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.3e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.3e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.3e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.3e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.3e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04d7		a9 3e		lda #$3e	        LDA #`SS_U_TXT
.3e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.3e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.3e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.3e04e3		a9 00		lda #$00	        LDA #$00
.3e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.3e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e04ef		22 f7 04 3e	jsl $3e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.3e04f3		4c f6 04	jmp $3e04f6	        JMP Done_DMA_Model_Moniker
.3e04f6						Done_DMA_Model_Moniker
.3e04f6		6b		rtl		        RTL
.3e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.3e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.3e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.3e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.3e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.3e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.3e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.3e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e051e		ea		nop		        NOP
.3e051f		ea		nop		        NOP
.3e0520		ea		nop		        NOP
.3e0521		ea		nop		        NOP
.3e0522		ea		nop		        NOP
.3e0523		ea		nop		        NOP
.3e0524		ea		nop		        NOP
.3e0525		a9 00		lda #$00	        LDA #$00
.3e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.3e052b						NOTFINISHED:
.3e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e052f		29 80		and #$80	        AND #$80
.3e0531		c9 80		cmp #$80	        CMP #$80
.3e0533		f0 f6		beq $3e052b	        BEQ NOTFINISHED
.3e0535		a9 00		lda #$00	        LDA #$00
.3e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e053b		6b		rtl		        RTL
.3e053c						SS_VDMA_CLEAR_MEMORY_640_480
.3e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.3e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.3e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0544		a9 00		lda #$00	        LDA #$00
.3e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e054a		c2 20		rep #$20	                REP #$20        ; set A long
.3e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0555		a9 00		lda #$00	        LDA #$00
.3e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e055b		c2 20		rep #$20	                REP #$20        ; set A long
.3e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.3e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0566		a9 04		lda #$04	        LDA #`(640*480)
.3e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e056c		a9 00		lda #$00	        LDA #$00
.3e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.3e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.3e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.3e057f		ea		nop		        NOP
.3e0580		ea		nop		        NOP
.3e0581		ea		nop		        NOP
.3e0582		ea		nop		        NOP
.3e0583		ea		nop		        NOP
.3e0584						SS_VDMA_CLR_LOOPA:
.3e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e0588		29 80		and #$80	        AND #$80
.3e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e058c		f0 f6		beq $3e0584	        BEQ SS_VDMA_CLR_LOOPA
.3e058e		ea		nop		        NOP
.3e058f		a9 00		lda #$00	        LDA #$00
.3e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e0595		6b		rtl		        RTL
.3e0596						SS_VDMA_TRANSFER_VRAM_2_VRAM
.3e0596		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0598		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.3e059a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e059e		a9 00		lda #$00	        LDA #$00
.3e05a0		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.3e05a4		c2 20		rep #$20	                REP #$20        ; set A long
.3e05a6		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.3e05a9		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.3e05ad		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05af		a9 00		lda #$00	        LDA #$00
.3e05b1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.3e05b5		c2 20		rep #$20	                REP #$20        ; set A long
.3e05b7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.3e05ba		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.3e05be		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05c0		a9 00		lda #$00	        LDA #$00
.3e05c2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.3e05c6		c2 20		rep #$20	                REP #$20        ; set A long
.3e05c8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.3e05cb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.3e05cf		e2 20		sep #$20	                SEP #$20        ; set A short
.3e05d1		a9 00		lda #$00	        LDA #`(320*16)
.3e05d3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.3e05d7		a9 00		lda #$00	        LDA #$00
.3e05d9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.3e05dd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.3e05e1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.3e05e3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05e7		ea		nop		        NOP
.3e05e8		ea		nop		        NOP
.3e05e9		ea		nop		        NOP
.3e05ea						SS_VDMA_CLR_LOOPB:
.3e05ea		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.3e05ee		29 80		and #$80	        AND #$80
.3e05f0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.3e05f2		f0 f6		beq $3e05ea	        BEQ SS_VDMA_CLR_LOOPB
.3e05f4		ea		nop		        NOP
.3e05f5		a9 00		lda #$00	        LDA #$00
.3e05f7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.3e05fb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.3e05fc						Set_Text_Color:
.3e05fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e05fe		a9 00 00	lda #$0000	            LDA #00
.3e0601		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e0603		a9 30 00	lda #$0030	            LDA #48
.3e0606		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e0608		20 fc 08	jsr $3e08fc	            JSR Line_Display_Compute_Pointer
.3e060b		a0 00 00	ldy #$0000	            LDY #$0000
.3e060e		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0610		a9 40		lda #$40	            LDA #$40
.3e0612						SetColorBranch:
.3e0612		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.3e0614		c8		iny		            INY
.3e0615		c0 50 00	cpy #$0050	            CPY #80
.3e0618		d0 f8		bne $3e0612	            BNE SetColorBranch
.3e061a		60		rts		            RTS
.3e061b						Model_Update_Info_Field:
.3e061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e061d		a9 00 00	lda #$0000	            LDA #$0000
.3e0620		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0622		a5 b0		lda $b0		            LDA MODEL
.3e0624		0a		asl a		            ASL
.3e0625		0a		asl a		            ASL
.3e0626		aa		tax		            TAX
.3e0627		c2 20		rep #$20	                REP #$20        ; set A long
.3e0629		bf af 0c 3e	lda $3e0caf,x	            LDA MODEL_TABLE, X
.3e062d		85 a0		sta $a0		            STA MOD_SELECT_L
.3e062f		bf b1 0c 3e	lda $3e0cb1,x	            LDA MODEL_TABLE + 2, X
.3e0633		85 a2		sta $a2		            STA MOD_SELECT_H
.3e0635		a0 00 00	ldy #$0000	            LDY #$0000
.3e0638		84 a6		sty $a6		            STY LINE_INDEX
.3e063a						Next_Change_Here:
.3e063a		c2 20		rep #$20	                REP #$20        ; set A long
.3e063c		a4 a6		ldy $a6		            LDY LINE_INDEX
.3e063e		bb		tyx		            TYX
.3e063f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e0641		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e0643		bf ff 0c 3e	lda $3e0cff,x	            LDA LINE_MOD, X
.3e0647		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0649		c8		iny		            INY
.3e064a		c8		iny		            INY
.3e064b		bb		tyx		            TYX
.3e064c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.3e064e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e0650		bf ff 0c 3e	lda $3e0cff,x	            LDA LINE_MOD, X
.3e0654		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0656		c8		iny		            INY
.3e0657		c8		iny		            INY
.3e0658		84 a6		sty $a6		            STY LINE_INDEX
.3e065a		c0 10 00	cpy #$0010	            CPY #16
.3e065d		f0 10		beq $3e066f	            BEQ LetsMoveOn
.3e065f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0661		a0 00 00	ldy #$0000	            LDY #$0000
.3e0664						nextchar:
.3e0664		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e0666		c9 00		cmp #$00	            CMP #$00
.3e0668		f0 d0		beq $3e063a	            BEQ Next_Change_Here
.3e066a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e066c		c8		iny		            INY
.3e066d		80 f5		bra $3e0664	            BRA nextchar
.3e066f						LetsMoveOn:
.3e066f		af 0b 0d 3e	lda $3e0d0b	            LDA LINE_MOD + 12
.3e0673		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0675		a0 00 00	ldy #$0000	            LDY #$0000
.3e0678		e2 20		sep #$20	                SEP #$20        ; set A short
.3e067a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.3e067e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0680		c8		iny		            INY
.3e0681		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.3e0685		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0687		c8		iny		            INY
.3e0688		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.3e068c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e068e		18		clc		            CLC
.3e068f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.3e0693		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0696		8f da 0a 3e	sta $3e0ada	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.3e069a		8f 13 0b 3e	sta $3e0b13	            STA @lLINE9 + 47    ; GABE in FMX
.3e069e		8f 59 0b 3e	sta $3e0b59	            STA @lLINE10 + 51   ; VICKY II in FMX
.3e06a2		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.3e06a6		29 0f		and #$0f	            AND #$0F
.3e06a8		69 30		adc #$30	            ADC #$30
.3e06aa		8f db 0a 3e	sta $3e0adb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.3e06ae		8f 14 0b 3e	sta $3e0b14	            STA @lLINE9 + 48    ; GABE in FMX
.3e06b2		8f 5a 0b 3e	sta $3e0b5a	            STA @lLINE10 + 52   ; VICKY II in FMX
.3e06b6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.3e06ba		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e06bd		8f dd 0a 3e	sta $3e0add	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.3e06c1		8f 16 0b 3e	sta $3e0b16	            STA @lLINE9 + 50    ; GABE in FMX
.3e06c5		8f 5c 0b 3e	sta $3e0b5c	            STA @lLINE10 + 54   ; VICKY II in FMX
.3e06c9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.3e06cd		29 0f		and #$0f	            AND #$0F
.3e06cf		69 30		adc #$30	            ADC #$30
.3e06d1		8f de 0a 3e	sta $3e0ade	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.3e06d5		8f 17 0b 3e	sta $3e0b17	            STA @lLINE9 + 51    ; GABE in FMX
.3e06d9		8f 5d 0b 3e	sta $3e0b5d	            STA @lLINE10 + 55   ; VICKY II in FMX
.3e06dd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.3e06e1		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e06e4		8f e0 0a 3e	sta $3e0ae0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.3e06e8		8f 19 0b 3e	sta $3e0b19	            STA @lLINE9 + 53    ; GABE in FMX
.3e06ec		8f 5f 0b 3e	sta $3e0b5f	            STA @lLINE10 + 57   ; VICKY II in FMX
.3e06f0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.3e06f4		29 0f		and #$0f	            AND #$0F
.3e06f6		69 30		adc #$30	            ADC #$30
.3e06f8		8f e1 0a 3e	sta $3e0ae1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.3e06fc		8f 1a 0b 3e	sta $3e0b1a	            STA @lLINE9 + 54    ; GABE in FMX
.3e0700		8f 60 0b 3e	sta $3e0b60	            STA @lLINE10 + 58   ; VICKY II in FMX
.3e0704		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0708		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e070b		8f d0 0a 3e	sta $3e0ad0	            STA @lLINE8 + 46    ; U/U+
.3e070f		8f 09 0b 3e	sta $3e0b09	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.3e0713		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.3e0717		29 0f		and #$0f	            AND #$0F
.3e0719		69 30		adc #$30	            ADC #$30
.3e071b		8f d1 0a 3e	sta $3e0ad1	            STA @lLINE8 + 47
.3e071f		8f 0a 0b 3e	sta $3e0b0a	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.3e0723		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0727		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e072a		8f 4f 0b 3e	sta $3e0b4f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.3e072e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.3e0732		29 0f		and #$0f	            AND #$0F
.3e0734		69 30		adc #$30	            ADC #$30
.3e0736		8f 50 0b 3e	sta $3e0b50	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.3e073a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e073e		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0741		8f d2 0a 3e	sta $3e0ad2	            STA @lLINE8 + 48
.3e0745		8f 0b 0b 3e	sta $3e0b0b	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.3e0749		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.3e074d		29 0f		and #$0f	            AND #$0F
.3e074f		69 30		adc #$30	            ADC #$30
.3e0751		8f d3 0a 3e	sta $3e0ad3	            STA @lLINE8 + 49
.3e0755		8f 0c 0b 3e	sta $3e0b0c	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.3e0759		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e075d		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0760		8f 51 0b 3e	sta $3e0b51	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.3e0764		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.3e0768		29 0f		and #$0f	            AND #$0F
.3e076a		69 30		adc #$30	            ADC #$30
.3e076c		8f 52 0b 3e	sta $3e0b52	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.3e0770		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0774		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0777		8f c4 0a 3e	sta $3e0ac4	            STA @lLINE8 + 34
.3e077b		8f fd 0a 3e	sta $3e0afd	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.3e077f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.3e0783		29 0f		and #$0f	            AND #$0F
.3e0785		69 30		adc #$30	            ADC #$30
.3e0787		8f c5 0a 3e	sta $3e0ac5	            STA @lLINE8 + 35
.3e078b		8f fe 0a 3e	sta $3e0afe	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.3e078f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e0793		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e0796		8f 44 0b 3e	sta $3e0b44	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.3e079a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.3e079e		29 0f		and #$0f	            AND #$0F
.3e07a0		69 30		adc #$30	            ADC #$30
.3e07a2		8f 45 0b 3e	sta $3e0b45	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.3e07a6		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07aa		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e07ad		8f c6 0a 3e	sta $3e0ac6	            STA @lLINE8 + 36
.3e07b1		8f ff 0a 3e	sta $3e0aff	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.3e07b5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.3e07b9		29 0f		and #$0f	            AND #$0F
.3e07bb		69 30		adc #$30	            ADC #$30
.3e07bd		8f c7 0a 3e	sta $3e0ac7	            STA @lLINE8 + 37
.3e07c1		8f 00 0b 3e	sta $3e0b00	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.3e07c5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07c9		20 f6 07	jsr $3e07f6	            JSR HighNibblerBCD
.3e07cc		8f 46 0b 3e	sta $3e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07d0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.3e07d4		29 0f		and #$0f	            AND #$0F
.3e07d6		69 30		adc #$30	            ADC #$30
.3e07d8		8f 46 0b 3e	sta $3e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.3e07dc		20 4f 08	jsr $3e084f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.3e07df		20 70 08	jsr $3e0870	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.3e07e2		20 71 08	jsr $3e0871	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.3e07e5		a5 b0		lda $b0		            LDA MODEL
.3e07e7		29 03		and #$03	            AND #$03
.3e07e9		c9 00		cmp #$00	            CMP #$00
.3e07eb		f0 12		beq $3e07ff	            BEQ Erase_FATVicky_Line;
.3e07ed		c9 01		cmp #$01	            CMP #$01
.3e07ef		f0 29		beq $3e081a	            BEQ Erase_2Lines;
.3e07f1		c9 02		cmp #$02	            CMP #$02
.3e07f3		f0 25		beq $3e081a	            BEQ Erase_2Lines;
.3e07f5		60		rts		            RTS
.3e07f6						HighNibblerBCD:
.3e07f6		29 f0		and #$f0	            AND #$F0
.3e07f8		4a		lsr a		            LSR A
.3e07f9		4a		lsr a		            LSR A
.3e07fa		4a		lsr a		            LSR A
.3e07fb		4a		lsr a		            LSR A
.3e07fc		69 30		adc #$30	            ADC #$30
.3e07fe		60		rts		            RTS
.3e07ff						Erase_FATVicky_Line:
.3e07ff		c2 20		rep #$20	                REP #$20        ; set A long
.3e0801		a9 a2 0a	lda #$0aa2	            LDA #<>LINE8
.3e0804		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0806		a9 3e 00	lda #$003e	            LDA #`LINE8
.3e0809		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.3e080d		a0 00 00	ldy #$0000	            LDY #$0000
.3e0810		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0812		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0814		c8		iny		            INY
.3e0815		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0817		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0819		60		rts		            RTS
.3e081a						Erase_2Lines
.3e081a		c2 20		rep #$20	                REP #$20        ; set A long
.3e081c		a9 e4 0a	lda #$0ae4	            LDA #<>LINE9
.3e081f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0821		a9 3e 00	lda #$003e	            LDA #`LINE9
.3e0824		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0826		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0828		a0 00 00	ldy #$0000	            LDY #$0000
.3e082b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e082d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e082f		c8		iny		            INY
.3e0830		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e0832		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0834		c2 20		rep #$20	                REP #$20        ; set A long
.3e0836		a9 26 0b	lda #$0b26	            LDA #<>LINE10
.3e0839		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e083b		a9 3e 00	lda #$003e	            LDA #`LINE10
.3e083e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0840		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0842		a0 00 00	ldy #$0000	            LDY #$0000
.3e0845		a9 20		lda #$20	            LDA #$20    ; Put One Space
.3e0847		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e0849		c8		iny		            INY
.3e084a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.3e084c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e084e		60		rts		            RTS
.3e084f						GODETECTHIRES
.3e084f		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0851		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.3e0855		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.3e0857		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.3e0859		f0 14		beq $3e086f	            BEQ WeAreDone
.3e085b		c2 10		rep #$10	                REP #$10        ; set X long
.3e085d		a2 00 00	ldx #$0000	            LDX #$0000
.3e0860						ChangeNextChar
.3e0860		bf 5f 0d 3e	lda $3e0d5f,x	            LDA @l ON_TEXT, X
.3e0864		c9 00		cmp #$00	            CMP #$00
.3e0866		f0 07		beq $3e086f	            BEQ WeAreDone
.3e0868		9f 53 0c 3e	sta $3e0c53,x	            STA @l LINE17 +13, X
.3e086c		e8		inx		            INX
.3e086d		d0 f1		bne $3e0860	            BNE ChangeNextChar
.3e086f						WeAreDone
.3e086f						NoExpansionCardPresent
.3e086f		60		rts		            RTS
.3e0870						GODETECTHDD
.3e0870		60		rts		            RTS
.3e0871						GODETECTEXP
.3e0871		e2 20		sep #$20	                SEP #$20        ; set A short
.3e0873		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.3e0877		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.3e0879		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.3e087b		d0 25		bne $3e08a2	            BNE NoExpansionCardPresent
.3e087d		c2 10		rep #$10	                REP #$10        ; set X long
.3e087f		a2 00 00	ldx #$0000	            LDX #$0000
.3e0882						ChangeNextChar
.3e0882		bf 63 0d 3e	lda $3e0d63,x	            LDA @l YES_TEXT, X
.3e0886		c9 00		cmp #$00	            CMP #$00
.3e0888		f0 07		beq $3e0891	            BEQ WeAreDone
.3e088a		9f 85 0c 3e	sta $3e0c85,x	            STA @l LINE19 +26, X
.3e088e		e8		inx		            INX
.3e088f		d0 f1		bne $3e0882	            BNE ChangeNextChar
.3e0891						WeAreDone
.3e0891		a2 00 00	ldx #$0000	            LDX #$0000
.3e0894						AddCardName
.3e0894		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.3e0898		9f 89 0c 3e	sta $3e0c89,x	            STA @l LINE20, X
.3e089c		e8		inx		            INX
.3e089d		e0 10 00	cpx #$0010	            CPX #$10
.3e08a0		d0 f2		bne $3e0894	            BNE AddCardName
.3e08a2						NoExpansionCardPresent
.3e08a2		60		rts		            RTS
.3e08a3						Line_Setup_Before_Display
.3e08a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08a5		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08a7		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.3e08aa		f0 33		beq $3e08df	            BEQ DONE
.3e08ac		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08ae		0a		asl a		            ASL A
.3e08af		0a		asl a		            ASL A
.3e08b0		aa		tax		            TAX
.3e08b1		bf 24 09 3e	lda $3e0924,x	            LDA TEXT_TABLE, X
.3e08b5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.3e08b7		bf 26 09 3e	lda $3e0926,x	            LDA TEXT_TABLE + 2, X
.3e08bb		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.3e08bd		a5 a6		lda $a6		            LDA LINE_INDEX
.3e08bf		0a		asl a		            ASL A
.3e08c0		aa		tax		            TAX
.3e08c1		bf 80 09 3e	lda $3e0980,x	            LDA TEXT_POSX, X
.3e08c5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.3e08c7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08cb		bf ae 09 3e	lda $3e09ae,x	            LDA TEXT_POSY, X
.3e08cf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.3e08d1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.3e08d5		20 fc 08	jsr $3e08fc	            JSR Line_Display_Compute_Pointer
.3e08d8		a9 00 00	lda #$0000	            LDA #$0000
.3e08db		85 a0		sta $a0		            STA TEXT_INDEX
.3e08dd		e6 a6		inc $a6		            INC LINE_INDEX
.3e08df						DONE:
.3e08df		60		rts		            RTS
.3e08e0						Line_Display_1_Character
.3e08e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08e2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.3e08e4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.3e08e6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.3e08ea		e2 20		sep #$20	                SEP #$20        ; set A short
.3e08ec		38		sec		            SEC
.3e08ed		a4 a0		ldy $a0		            LDY TEXT_INDEX
.3e08ef		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.3e08f1		c9 00		cmp #$00	            CMP #$00
.3e08f3		f0 06		beq $3e08fb	            BEQ WE_ARE_DONE;
.3e08f5		18		clc		            CLC
.3e08f6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.3e08f8		c8		iny		            INY
.3e08f9		84 a0		sty $a0		            STY TEXT_INDEX
.3e08fb						WE_ARE_DONE:
.3e08fb		60		rts		            RTS
.3e08fc						Line_Display_Compute_Pointer
.3e08fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.3e08fe		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.3e0900		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.3e0904		a9 50 00	lda #$0050	            LDA #80
.3e0907		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.3e090b		18		clc		            CLC
.3e090c		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.3e0910		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.3e0912		69 00 a0	adc #$a000	            ADC #$A000
.3e0915		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.3e0917		69 00 20	adc #$2000	            ADC #$2000
.3e091a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.3e091c		a9 af 00	lda #$00af	            LDA #$00AF
.3e091f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.3e0921		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.3e0923		60		rts		            RTS
>3e0924		dc 09 3e 00 fd 09 3e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>3e092c		13 0a 3e 00 21 0a 3e 00 39 0a 3e 00 5c 0a 3e 00
>3e093c		80 0a 3e 00 95 0a 3e 00
>3e0944		a2 0a 3e 00 e4 0a 3e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>3e094c		26 0b 3e 00 68 0b 3e 00 72 0b 3e 00 9b 0b 3e 00
>3e095c		d2 0b 3e 00 f5 0b 3e 00
>3e0964		07 0c 3e 00 46 0c 3e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>3e096c		58 0c 3e 00 6b 0c 3e 00 89 0c 3e 00 9a 0c 3e 00
>3e097c		ad 0c 3e 00
>3e0980		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>3e0988		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>3e0998		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>3e09a8		2d 00 1e 00 48 00
>3e09ae		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>3e09b6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>3e09c6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>3e09d6		35 00 39 00 39 00
=6						leftAlign = 6
>3e09dc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>3e09e4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>3e09f4		20 20 20 20 20 20 20 20 00
>3e09fd		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>3e0a05		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>3e0a13		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>3e0a1b		4e 46 4f 3a 20 00
>3e0a21		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>3e0a29		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>3e0a39		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>3e0a41		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>3e0a51		20 20 20 20 20 20 20 20 20 20 00
>3e0a5c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>3e0a64		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>3e0a74		20 20 20 20 20 20 20 20 20 20 20 00
>3e0a80		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>3e0a88		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>3e0a95		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>3e0a9d		53 29 3a 20 00
>3e0aa2		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>3e0aaa		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>3e0aba		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>3e0aca		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>3e0ada		30 30 2f 30 30 2f 30 30 20 00
>3e0ae4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>3e0aec		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>3e0afc		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>3e0b0c		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>3e0b1c		20 20 20 20 20 20 20 20 20 00
>3e0b26		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>3e0b2e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>3e0b3e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>3e0b4e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>3e0b5e		2f 30 30 20 20 20 20 20 20 00
>3e0b68		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>3e0b70		20 00
>3e0b72		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>3e0b7a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>3e0b8a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>3e0b9a		00
>3e0b9b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>3e0ba3		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>3e0bb3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>3e0bc3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>3e0bd2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>3e0bda		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>3e0bea		4c 20 54 52 45 4d 42 4c 41 59 00
>3e0bf5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>3e0bfd		20 4d 45 4e 55 2d 2d 2d 2d 00
>3e0c07		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>3e0c0f		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>3e0c1f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>3e0c2f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>3e0c3f		46 41 55 4c 54 20 00
>3e0c46		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>3e0c4e		4f 44 45 3a 20 4f 46 46 20 00
>3e0c58		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>3e0c60		41 4c 4c 45 44 3a 20 2d 2d 20 00
>3e0c6b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>3e0c73		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>3e0c83		3a 20 4e 4f 20 00
>3e0c89		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>3e0c91		00 00 00 00 00 00 00 00 00
>3e0c9a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>3e0ca2		46 4f 45 4e 49 58 2e 43 4f 4d 00
>3e0cad		20 00				LINE22 .text " ", $00
>3e0caf		bf 0c 3e 00 cf 0c 3e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>3e0cb7		df 0c 3e 00 ef 0c 3e 00
>3e0cbf		0f 0d 3e 00 4f 0d 3e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>3e0cc7		4f 0d 3e 00 00 00 00 00
>3e0ccf		1f 0d 3e 00 4f 0d 3e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>3e0cd7		3f 0d 3e 00 00 00 00 00
>3e0cdf		2f 0d 3e 00 3f 0d 3e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>3e0ce7		3f 0d 3e 00 00 00 00 00
>3e0cef		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>3e0cf7		00 00 00 00 00 00 00 00
>3e0cff		ec 09 3e 00 4b 0a 3e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>3e0d07		6f 0a 3e 00 8e 0a 3e 00
>3e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>3e0d17		4e 49 58 20 46 4d 58 00
>3e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>3e0d27		4e 49 58 20 55 2b 20 00
>3e0d2f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>3e0d37		4e 49 58 20 55 20 20 00
>3e0d3f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>3e0d47		32 20 42 59 54 45 53 00
>3e0d4f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>3e0d57		34 20 42 59 54 45 53 00
>3e0d5f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>3e0d63		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>3e0d67						.align 256
.3e0e00						SS_MONIKER_LUT
>3e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>3e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>3e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>3e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>3e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>3e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>3e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>3e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>3e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>3e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>3e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>3e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>3e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>3e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>3e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>3e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>3e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>3e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>3e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>3e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>3e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>3e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>3e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>3e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>3e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>3e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>3e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>3e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>3e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>3e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>3e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>3e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>3e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>3e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>3e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>3e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>3e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>3e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>3e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>3e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>3e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>3e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>3e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>3e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>3e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>3e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>3e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>3e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>3e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>3e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>3e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>3e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>3e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>3e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>3e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>3e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>3e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>3e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>3e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>3e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>3e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>3e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>3e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>3e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>3e11f8		ff ff ff 00 e5 80 80 00
.3e1200						SS_MONIKER
>3e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>3e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>3e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>3e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>3e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>3e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>3e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>3e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>3e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>3e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>3e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>3e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>3e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>3e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>3e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>3e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>3e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>3e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>3e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>3e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>3e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>3e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>3e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>3e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>3e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>3e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>3e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>3e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>3e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>3e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>3e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>3e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>3e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>3e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>3e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>3e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>3e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>3e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>3e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>3e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>3e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>3e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>3e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>3e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>3e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>3e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>3e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>3e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>3e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>3e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>3e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>3e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>3e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>3e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>3e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>3e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>3e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>3e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>3e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>3e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>3e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>3e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>3e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>3e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>3e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>3e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>3e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>3e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>3e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>3e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>3e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>3e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>3e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>3e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>3e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>3e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>3e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>3e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>3e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>3e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>3e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>3e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>3e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>3e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>3e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>3e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>3e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>3e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>3e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>3e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>3e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>3e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>3e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>3e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>3e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>3e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>3e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>3e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>3e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>3e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>3e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>3e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>3e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>3e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>3e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>3e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>3e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>3e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>3e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>3e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>3e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>3e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>3e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>3e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>3e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>3e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>3e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>3e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>3e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>3e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>3e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>3e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>3e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>3e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>3e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>3e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>3e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>3e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>3e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>3e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>3e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>3e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>3e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>3e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>3e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>3e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>3e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>3e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>3e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>3e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>3e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>3e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>3e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>3e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>3e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>3e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>3e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>3e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>3e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>3e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>3e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>3e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>3e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>3e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>3e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>3e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>3e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>3e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>3e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>3e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>3e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>3e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>3e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>3e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>3e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>3e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>3e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>3e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>3e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>3e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>3e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>3e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>3e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>3e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>3e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>3e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>3e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>3e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>3e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>3e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>3e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>3e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>3e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>3e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>3e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>3e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>3e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>3e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>3e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>3e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>3e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>3e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>3e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>3e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>3e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>3e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>3e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>3e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>3e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>3e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>3e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>3e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>3e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>3e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>3e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>3e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>3e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>3e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>3e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>3e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>3e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>3e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>3e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>3e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>3e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>3e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>3e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>3e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>3e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>3e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>3e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>3e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>3e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>3e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>3e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>3e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>3e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>3e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>3e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>3e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>3e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>3e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>3e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>3e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>3e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>3e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>3e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>3e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>3e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>3e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>3e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>3e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>3e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>3e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>3e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>3e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>3e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>3e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>3e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>3e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>3e61f8		00 00 00 00 00 00 00 00
.3e6200						SS_FMX_TXT
>3e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>3e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>3e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>3e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>3e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>3e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>3e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>3e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>3e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>3e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>3e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>3e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>3e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>3e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>3e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>3e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>3e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>3e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>3e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>3e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>3e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>3e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>3e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>3e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>3e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>3e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>3e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>3e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>3e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>3e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>3e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>3e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>3e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>3e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>3e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>3e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>3e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>3e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>3e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>3e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>3e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>3e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>3e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>3e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>3e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>3e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>3e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>3e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>3e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>3e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>3e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>3e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>3e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>3e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>3e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>3e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>3e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>3e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>3e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>3e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>3e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>3e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>3e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>3e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>3e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>3e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>3e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>3e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>3e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>3e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>3e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>3e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>3e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>3e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>3e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>3e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>3e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>3e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>3e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>3e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>3e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>3e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>3e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>3e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>3e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>3e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>3e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>3e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>3e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>3e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>3e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>3e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>3e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>3e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>3e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>3e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>3e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>3e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>3e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>3e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>3e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>3e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>3e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>3e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>3e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>3e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>3e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>3e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>3e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>3e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>3e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>3e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>3e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>3e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>3e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>3e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>3e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>3e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>3e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>3e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>3e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>3e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>3e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>3e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>3e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>3e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>3e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>3e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>3e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>3e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>3e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>3e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>3e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>3e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>3e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>3e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>3e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>3e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>3e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>3e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>3e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>3e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>3e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>3e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>3e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>3e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>3e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>3e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>3e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>3e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>3e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>3e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>3e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>3e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>3e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>3e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>3e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>3e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>3e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>3e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>3e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>3e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>3e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>3e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>3e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>3e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>3e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>3e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>3e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>3e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>3e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>3e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>3e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>3e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>3e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>3e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>3e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>3e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>3e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>3e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>3e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>3e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>3e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>3e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>3e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>3e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>3e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>3e93f8		00 00 00 00 00 00 00 00
.3e9400						SS_UPlus_TXT
>3e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>3e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>3e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>3e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>3e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>3e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>3e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>3e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>3e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>3e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>3e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>3e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>3e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>3e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>3e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>3e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>3e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>3e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>3e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>3e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>3e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>3e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>3e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>3e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>3e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>3e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>3e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>3e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>3e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>3e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>3e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>3e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>3e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>3e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>3e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>3e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>3e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>3e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>3e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>3e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>3e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>3e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>3e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>3ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>3ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>3ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>3ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>3ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>3ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>3ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>3ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>3ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>3ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>3ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>3ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>3ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>3ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>3ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>3ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>3ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>3ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>3ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>3ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>3ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>3ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>3ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>3ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>3ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>3ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>3ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>3ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>3ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>3ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>3ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>3ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>3ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>3ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>3ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>3ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>3ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>3ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>3ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>3ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>3ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>3ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>3ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>3eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>3eabf8		00 00 00 00 00 00 00 00
.3eac00						SS_U_TXT
>3eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>3eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>3eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>3ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>3eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>3eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>3eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>3eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>3eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>3eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>3eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>3eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>3eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>3eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>3eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>3eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>3eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>3eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>3eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>3eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>3eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>3eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>3eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>3eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>3eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>3eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>3eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>3eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>3eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>3eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>3eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>3eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>3eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>3eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>3eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>3eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>3eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>3eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>3eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>3eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>3eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>3eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>3eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>3eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>3eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>3eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>3eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>3eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>3eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>3eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>3eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>3eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>3eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>3eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>3eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>3eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>3eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>3eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>3eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>3eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>3eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>3eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>3eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>3eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>3eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>3eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>3eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>3eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>3eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>3eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>3eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>3eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>3eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>3eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>3eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>3eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>3eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>3eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>3eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>3eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>3eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>3eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>3eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>3eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>3eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>3eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>3ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>3ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>3ebbf8		00 00 00 00 00 00 00 00
.3f0000						FONT_4_BANK0
>3f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>3f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>3f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>3f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>3f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>3f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>3f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>3f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>3f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>3f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>3f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>3f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>3f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>3f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>3f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>3f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>3f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>3f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>3f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>3f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>3f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>3f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>3f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>3f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>3f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>3f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>3f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>3f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>3f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>3f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>3f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>3f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>3f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>3f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>3f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>3f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>3f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>3f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>3f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>3f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>3f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>3f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>3f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>3f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>3f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>3f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>3f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>3f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>3f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>3f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>3f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>3f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>3f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>3f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>3f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>3f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>3f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>3f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>3f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>3f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>3f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>3f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>3f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>3f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>3f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>3f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>3f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>3f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>3f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>3f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>3f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>3f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>3f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>3f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>3f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>3f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>3f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>3f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>3f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>3f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>3f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>3f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>3f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>3f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>3f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>3f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>3f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>3f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>3f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>3f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>3f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>3f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>3f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>3f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>3f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>3f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>3f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>3f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>3f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>3f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>3f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>3f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>3f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>3f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>3f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>3f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>3f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>3f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>3f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>3f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>3f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>3f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>3f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>3f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>3f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>3f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>3f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>3f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>3f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>3f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>3f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>3f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>3f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>3f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>3f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>3f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>3f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>3f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>3f07f8		00 00 00 00 00 00 00 00
.3f0800						FONT_4_SPLASH
>3f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>3f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>3f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>3f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>3f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>3f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>3f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>3f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>3f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>3f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>3f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>3f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>3f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>3f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>3f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>3f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>3f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>3f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>3f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>3f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>3f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>3f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>3f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>3f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>3f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>3f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>3f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>3f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>3f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>3f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>3f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>3f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>3f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>3f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>3f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>3f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>3f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>3f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>3f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>3f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>3f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>3f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>3f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>3f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>3f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>3f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>3f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>3f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>3f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>3f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>3f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>3f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>3f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>3f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>3f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>3f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>3f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>3f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>3f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>3f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>3f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>3f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>3f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>3f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>3f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>3f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>3f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>3f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>3f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>3f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>3f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>3f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>3f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>3f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>3f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>3f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>3f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>3f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>3f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>3f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>3f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>3f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>3f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>3f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>3f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>3f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>3f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>3f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>3f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>3f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>3f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>3f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>3f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>3f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>3f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>3f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>3f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>3f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>3f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>3f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>3f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>3f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>3f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>3f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>3f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>3f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>3f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>3f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>3f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>3f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>3f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>3f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>3f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>3f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>3f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>3f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>3f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>3f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>3f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>3f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>3f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>3f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>3f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>3f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>3f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>3f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>3f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>3f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>3f0ff8		0f 0f 0f 0f f0 f0 f0 00
>3fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
