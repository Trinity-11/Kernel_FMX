
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=2 --long-address --flat -b -o kernel_U.bin --list kernel_U.lst --labels=kernel_U.lbl src\kernel.asm
; Wed Jul 19 11:48:04 2023

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=2						TARGET_SYS=2

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$aee000					LAN = ESID_ETHERNET_REG
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1c0000					  PACKETS := $1C0000                          ; RAM for IP Stack packet buffers
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$3b						CHAR_F1 = $3B       ; Function key scan codes
=$3c						CHAR_F2 = $3C
=$3d						CHAR_F3 = $3D
=$3e						CHAR_F4 = $3E
=$3f						CHAR_F5 = $3F
=$40						CHAR_F6 = $40
=$41						CHAR_F7 = $41
=$42						CHAR_F8 = $42
=$43						CHAR_F9 = $43
=$44						CHAR_F10 = $44
=$57						CHAR_F11 = $57
=$58						CHAR_F12 = $58
=$39						SCAN_SP = $39
=$1c						SCAN_CR = $1C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_IDX        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000e6					MOUSE_BUTTONS    = $0000E6
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00					        ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00					        HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10					        HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20					        HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30					        HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40					        HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60					        HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80					        Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0					        VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$18ffe0					        JMP_READY        = $18FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$18ffe4					        VECTOR_COP       = $18FFE4 ;2 Bytes Native COP Interrupt vector
=$18ffe6					        VECTOR_BRK       = $18FFE6 ;2 Bytes Native BRK Interrupt vector
=$18ffe8					        VECTOR_ABORT     = $18FFE8 ;2 Bytes Native ABORT Interrupt vector
=$18ffea					        VECTOR_NMI       = $18FFEA ;2 Bytes Native NMI Interrupt vector
=$18ffec					        VECTOR_RESET     = $18FFEC ;2 Bytes Unused (Native RESET vector)
=$18ffee					        VECTOR_IRQ       = $18FFEE ;2 Bytes Native IRQ Vector
=$18fff0					        RETURN           = $18FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$18fff4					        VECTOR_ECOP      = $18FFF4 ;2 Bytes Emulation mode interrupt handler
=$18fff6					        VECTOR_EBRK      = $18FFF6 ;2 Bytes Emulation mode interrupt handler
=$18fff8					        VECTOR_EABORT    = $18FFF8 ;2 Bytes Emulation mode interrupt handler
=$18fffa					        VECTOR_ENMI      = $18FFFA ;2 Bytes Emulation mode interrupt handler
=$18fffc					        VECTOR_ERESET    = $18FFFC ;2 Bytes Emulation mode interrupt handler
=$18fffe					        VECTOR_EIRQ      = $18FFFE ;2 Bytes Emulation mode interrupt handler
=$200000					        VECTORS_END      = $200000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.18ff00		18		clc		RHRESET         CLC
.18ff01		fb		xce		                XCE
.18ff02		5c 00 10 00	jmp $001000	                JML BOOT
.18ff10						RHCOP
.18ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12		8b		phb		                PHB
.18ff13		0b		phd		                PHD
.18ff14		48		pha		                PHA
.18ff15		da		phx		                PHX
.18ff16		5a		phy		                PHY
.18ff17		5c 08 10 00	jmp $001008	                JML BREAK
.18ff20						RHBRK
.18ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22		8b		phb		                PHB
.18ff23		0b		phd		                PHD
.18ff24		48		pha		                PHA
.18ff25		da		phx		                PHX
.18ff26		5a		phy		                PHY
.18ff27		5c 08 10 00	jmp $001008	                JML BREAK
.18ff30						RHABORT
.18ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32		8b		phb		                PHB
.18ff33		0b		phd		                PHD
.18ff34		48		pha		                PHA
.18ff35		da		phx		                PHX
.18ff36		5a		phy		                PHY
.18ff37		5c 08 10 00	jmp $001008	                JML BREAK
.18ff40						 RHNMI
.18ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42		8b		phb		                PHB
.18ff43		0b		phd		                PHD
.18ff44		48		pha		                PHA
.18ff45		da		phx		                PHX
.18ff46		5a		phy		                PHY
.18ff47		22 27 19 18	jsl $181927	                JSL NMI_HANDLER
.18ff4b		7a		ply		                PLY
.18ff4c		fa		plx		                PLX
.18ff4d		68		pla		                PLA
.18ff4e		2b		pld		                PLD
.18ff4f		ab		plb		                PLB
.18ff50		40		rti		                RTI
.18ff60						RHIRQ
.18ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62		8b		phb		                PHB
.18ff63		0b		phd		                PHD
.18ff64		48		pha		                PHA
.18ff65		da		phx		                PHX
.18ff66		5a		phy		                PHY
.18ff67		22 bb 17 18	jsl $1817bb	                JSL IRQ_HANDLER
.18ff6b		7a		ply		                PLY
.18ff6c		fa		plx		                PLX
.18ff6d		68		pla		                PLA
.18ff6e		2b		pld		                PLD
.18ff6f		ab		plb		                PLB
.18ff70		40		rti		                RTI
.18ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec		00 00				                .word $0000    ; FFEC
>18ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0		5c 5e 06 19	jmp $19065e	RRETURN         JML IRETURN
>18fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c 74 05 19	jmp $190574	RESTORE         JML IRESTORE
.181008	1008	5c 08 06 19	jmp $190608	BREAK           JML IBREAK
.18100c	100c	5c 49 06 19	jmp $190649	READY           JML IREADY
.181010	1010	5c 46 10 19	jmp $191046	SCINIT          JML ISCINIT
.181014	1014	5c 47 10 19	jmp $191047	IOINIT          JML IIOINIT
.181018	1018	5c 00 07 19	jmp $190700	PUTC            JML IPUTC
.18101c	101c	5c e9 06 19	jmp $1906e9	PUTS            JML IPUTS
.181020	1020	5c 8d 07 19	jmp $19078d	PUTB            JML IPUTB
.181024	1024	5c ea 39 19	jmp $1939ea	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c c1 71 19	jmp $1971c1	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.18102c	102c	5c 59 72 19	jmp $197259	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.181030	1030	5c 4a 10 19	jmp $19104a	OPEN            JML IOPEN
.181034	1034	5c 4b 10 19	jmp $19104b	CLOSE           JML ICLOSE
.181038	1038	5c 5f 06 19	jmp $19065f	SETIN           JML ISETIN
.18103c	103c	5c 68 06 19	jmp $190668	SETOUT          JML ISETOUT
.181040	1040	5c 4c 10 19	jmp $19104c	GETB            JML IGETB
.181044	1044	5c 96 39 19	jmp $193996	GETBLOCK        JML IGETBLOCK
.181048	1048	5c ad 06 19	jmp $1906ad	GETCH           JML IGETCH
.18104c	104c	5c 7a 06 19	jmp $19067a	GETCHW          JML IGETCHW
.181050	1050	5c 71 06 19	jmp $190671	GETCHE          JML IGETCHE
.181054	1054	5c 4d 10 19	jmp $19104d	GETS            JML IGETS
.181058	1058	5c 4e 10 19	jmp $19104e	GETLINE         JML IGETLINE
.18105c	105c	5c 4f 10 19	jmp $19104f	GETFIELD        JML IGETFIELD
.181060	1060	5c 50 10 19	jmp $191050	TRIM            JML ITRIM
.181064	1064	5c 51 10 19	jmp $191051	PRINTC          JML IPRINTC
.181068	1068	5c 52 10 19	jmp $191052	PRINTS          JML IPRINTS
.18106c	106c	5c 8e 07 19	jmp $19078e	PRINTCR         JML IPRINTCR
.181070	1070	5c 53 10 19	jmp $191053	PRINTF          JML IPRINTF
.181074	1074	5c 54 10 19	jmp $191054	PRINTI          JML IPRINTI
.181078	1078	5c 37 08 19	jmp $190837	PRINTH          JML IPRINTH
.18107c	107c	5c 55 10 19	jmp $191055	PRINTAI         JML IPRINTAI
.181080	1080	5c 54 08 19	jmp $190854	PRINTAH         JML IPRINTAH
.181084	1084	5c 1b 08 19	jmp $19081b	LOCATE          JML ILOCATE
.181088	1088	5c 56 10 19	jmp $191056	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c 57 10 19	jmp $191057	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c e3 07 19	jmp $1907e3	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c f2 07 19	jmp $1907f2	CSRLEFT         JML ICSRLEFT
.181098	1098	5c 01 08 19	jmp $190801	CSRUP           JML ICSRUP
.18109c	109c	5c 10 08 19	jmp $190810	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c d2 07 19	jmp $1907d2	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c 26 08 19	jmp $190826	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c a2 08 19	jmp $1908a2	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c 41 09 19	jmp $190941	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c 6a 0b 19	jmp $190b6a	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c 2f 6f 19	jmp $196f2f	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 00 7a 19	jmp $197a00	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c 4b 0b 19	jmp $190b4b	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 13 0b 19	jmp $190b13	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c 4e 09 19	jmp $19094e	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c 6e 09 19	jmp $19096e	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c 34 0a 19	jmp $190a34	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c b7 0a 19	jmp $190ab7	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 12 0b 19	jmp $190b12	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 12 0b 19	jmp $190b12	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c 84 0c 19	jmp $190c84	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c 13 0d 19	jmp $190d13	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c 81 0d 19	jmp $190d81	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c 36 0d 19	jmp $190d36	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c d4 30 19	jmp $1930d4	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c de 4a 19	jmp $194ade	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c 66 4b 19	jmp $194b66	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c 95 4b 19	jmp $194b95	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c 18 4c 19	jmp $194c18	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c be 4b 19	jmp $194bbe	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c ac 4c 19	jmp $194cac	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c 79 4c 19	jmp $194c79	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c a8 4c 19	jmp $194ca8	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c 3a 4d 19	jmp $194d3a	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c 56 4d 19	jmp $194d56	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c 5a 4d 19	jmp $194d5a	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c 73 50 19	jmp $195073	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c 72 39 19	jmp $193972	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c 01 51 19	jmp $195101	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c 28 3d 19	jmp $193d28	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c b2 0a 19	jmp $190ab2	SETSIZES        JML ISETSIZES       ; Set the size information in the kernel's text screen routines based on the screen configuration
.181130	1130	5c 29 52 19	jmp $195229	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c 8f 51 19	jmp $19518f	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c d8 51 19	jmp $1951d8	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.18113c	113c	5c 10 72 19	jmp $197210	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.181140	1140	5c 1f 74 19	jmp $19741f	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.181144	1144	5c ef 0a 19	jmp $190aef	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
.181148	1148	5c 6c 17 18	jmp $18176c	SETHANDLER      JML ISETHANDLER     ; Set the handler for the interrupt # in A to the FAR routine at Y:X
.18114c	114c	5c 8b 0f 19	jmp $190f8b	DELAY           JML IDELAY          ; Wait at least Y:X ticks of the system clock.
.181150	1150	5c 00 80 19	jmp $198000	IP_INIT         JML kernel.net.user.init        ; Initialize the network stack; B:Y->ip_info
.181154	1154	5c 06 80 19	jmp $198006	UDP_SEND        JML kernel.net.user.udp_send    ; Send a UDP packet; 0:X->udp_info
.181158	1158	5c 0c 80 19	jmp $19800c	UDP_RECV        JML kernel.net.user.udp_recv    ; Recv a UDP packet; 0:X->udp_info
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.181700	1700	5c 1d 60 19	jmp $19601d	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c 5a 10 19	jmp $19105a	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c 5a 10 19	jmp $19105a	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c 5a 10 19	jmp $19105a	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c 5a 10 19	jmp $19105a	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.181714	1714	5c 5a 10 19	jmp $19105a	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.181718	1718	5c 5a 10 19	jmp $19105a	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.18171c	171c	5c 1d 7b 19	jmp $197b1d	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.181720	1720	5c 8c 70 19	jmp $19708c	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.181724	1724	5c 5a 10 19	jmp $19105a	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.181728	1728	5c 5a 10 19	jmp $19105a	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.18172c	172c	5c 5a 10 19	jmp $19105a	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.181730	1730	5c 5a 10 19	jmp $19105a	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.181734	1734	5c 5a 10 19	jmp $19105a	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.181738	1738	5c 5a 10 19	jmp $19105a	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.18173c	173c	5c 5a 10 19	jmp $19105a	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.181740	1740	5c 5a 10 19	jmp $19105a	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.181744	1744	5c 5a 10 19	jmp $19105a	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.181748	1748	5c 5a 10 19	jmp $19105a	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.18174c	174c	5c 5a 10 19	jmp $19105a	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.181750	1750	5c 5a 10 19	jmp $19105a	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.181754	1754	5c 5a 10 19	jmp $19105a	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.181758	1758	5c 5a 10 19	jmp $19105a	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.18175c	175c	5c 5a 10 19	jmp $19105a	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.181760	1760	5c 5a 10 19	jmp $19105a	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.181764	1764	5c 5a 10 19	jmp $19105a	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.181768	1768	5c 5a 10 19	jmp $19105a	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.18176c						ISETHANDLER
.18176c		8b		phb		                PHB
.18176d		08		php		                PHP
.18176e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.181771		ab		plb		                PLB
.181772		ab		plb		                PLB
.181773		e2 20		sep #$20	                SEP #$20        ; set A short
.181775		c2 10		rep #$10	                REP #$10        ; set X long
.181777		48		pha		                PHA                     ; Save the interrupt number
.181778		5a		phy		                PHY                     ; Save the handler's bank
.181779		da		phx		                PHX                     ; Save the handler's address
.18177a		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.18177d						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.18177d		29 30		and #$30	                AND #$30                ; Isolate the block #
.18177f		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.181780		83 01		sta $01,s	                STA l_vector
.181782		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.181784		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.181786		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.181787		0a		asl a		                ASL A
.181788		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.18178a		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.18178c		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.18178d		a9 00		lda #$00	                LDA #<VEC_INT_START
.18178f		63 01		adc $01,s	                ADC l_vector
.181791		83 01		sta $01,s	                STA l_vector
.181793		a9 17		lda #$17	                LDA #>VEC_INT_START
.181795		63 02		adc $02,s	                ADC l_vector+1
.181797		83 02		sta $02,s	                STA l_vector+1
.181799		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.18179a		a0 00 00	ldy #$0000	                LDY #0
.18179d		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.18179f		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.1817a1		c8		iny		                INY                     ; Move to the low byte of the vector address
.1817a2		a3 03		lda $03,s	                LDA l_handler
.1817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817a6		c8		iny		                INY                     ; Move to the high byte of the vector address
.1817a7		a3 04		lda $04,s	                LDA l_handler+1
.1817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817ab		c8		iny		                INY                     ; Move to the bank of the vector address
.1817ac		a3 05		lda $05,s	                LDA l_handler+2
.1817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b0		c2 20		rep #$20	                REP #$20        ; set A long
.1817b2		18		clc		                CLC                     ; Clean up the locals off the stack
.1817b3		3b		tsc		                TSC
.1817b4		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.1817b7		1b		tcs		                TCS
.1817b8		28		plp		                PLP
.1817b9		ab		plb		                PLB
.1817ba		6b		rtl		                RTL
.1817bb						IRQ_HANDLER
.1817bb		08		php		                PHP
.1817bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1817be		af 4c 01 00	lda $00014c					LDA @l INT_MASK_REG0
.1817c2		49 ff		eor #$ff					EOR #$FF
.1817c4		48		pha						PHA			; 1,s
.1817c5		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.1817c9		23 01		and $01,s					AND 1,s
.1817cb		d0 03		bne $1817d0	                BNE process_reg0
.1817cd		4c 24 18	jmp $181824	                JMP skip_block0      ; If nothing: skip to block 1
.1817d0		8f 40 01 00	sta $000140	process_reg0    STA @l INT_PENDING_REG0
.1817d4		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.1817d6		f0 06		beq $1817de	                BEQ continue            ; If not: skip the rest of this macro
.1817d8		48		pha						PHA
.1817d9		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.1817dd		68		pla						PLA
.1817de						continue
.1817de		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.1817e0		f0 06		beq $1817e8	                BEQ continue            ; If not: skip the rest of this macro
.1817e2		48		pha						PHA
.1817e3		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.1817e7		68		pla						PLA
.1817e8						continue
.1817e8		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.1817ea		f0 06		beq $1817f2	                BEQ continue            ; If not: skip the rest of this macro
.1817ec		48		pha						PHA
.1817ed		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.1817f1		68		pla						PLA
.1817f2						continue
.1817f2		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.1817f4		f0 06		beq $1817fc	                BEQ continue            ; If not: skip the rest of this macro
.1817f6		48		pha						PHA
.1817f7		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.1817fb		68		pla						PLA
.1817fc						continue
.1817fc		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.1817fe		f0 06		beq $181806	                BEQ continue            ; If not: skip the rest of this macro
.181800		48		pha						PHA
.181801		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.181805		68		pla						PLA
.181806						continue
.181806		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.181808		f0 06		beq $181810	                BEQ continue            ; If not: skip the rest of this macro
.18180a		48		pha						PHA
.18180b		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.18180f		68		pla						PLA
.181810						continue
.181810		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.181812		f0 06		beq $18181a	                BEQ continue            ; If not: skip the rest of this macro
.181814		48		pha						PHA
.181815		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.181819		68		pla						PLA
.18181a						continue
.18181a		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.18181c		f0 06		beq $181824	                BEQ continue            ; If not: skip the rest of this macro
.18181e		48		pha						PHA
.18181f		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.181823		68		pla						PLA
.181824						continue
.181824		68		pla		skip_block0     PLA
.181825						CHECK_PENDING_REG1
.181825		af 4d 01 00	lda $00014d					LDA @l INT_MASK_REG1
.181829		49 ff		eor #$ff					EOR #$FF
.18182b		48		pha						PHA			; 1,s
.18182c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.181830		23 01		and $01,s					AND 1,s
.181832		d0 03		bne $181837	                BNE process_reg1
.181834		4c 8b 18	jmp $18188b	                JMP skip_block1
.181837		8f 41 01 00	sta $000141	process_reg1    STA @l INT_PENDING_REG1
.18183b		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.18183d		f0 06		beq $181845	                BEQ continue            ; If not: skip the rest of this macro
.18183f		48		pha						PHA
.181840		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.181844		68		pla						PLA
.181845						continue
.181845		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.181847		f0 06		beq $18184f	                BEQ continue            ; If not: skip the rest of this macro
.181849		48		pha						PHA
.18184a		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.18184e		68		pla						PLA
.18184f						continue
.18184f		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.181851		f0 06		beq $181859	                BEQ continue            ; If not: skip the rest of this macro
.181853		48		pha						PHA
.181854		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.181858		68		pla						PLA
.181859						continue
.181859		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.18185b		f0 06		beq $181863	                BEQ continue            ; If not: skip the rest of this macro
.18185d		48		pha						PHA
.18185e		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.181862		68		pla						PLA
.181863						continue
.181863		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.181865		f0 06		beq $18186d	                BEQ continue            ; If not: skip the rest of this macro
.181867		48		pha						PHA
.181868		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.18186c		68		pla						PLA
.18186d						continue
.18186d		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.18186f		f0 06		beq $181877	                BEQ continue            ; If not: skip the rest of this macro
.181871		48		pha						PHA
.181872		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.181876		68		pla						PLA
.181877						continue
.181877		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.181879		f0 06		beq $181881	                BEQ continue            ; If not: skip the rest of this macro
.18187b		48		pha						PHA
.18187c		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.181880		68		pla						PLA
.181881						continue
.181881		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.181883		f0 06		beq $18188b	                BEQ continue            ; If not: skip the rest of this macro
.181885		48		pha						PHA
.181886		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.18188a		68		pla						PLA
.18188b						continue
.18188b		68		pla		skip_block1     PLA
.18188c						CHECK_PENDING_REG2
.18188c		af 4e 01 00	lda $00014e					LDA @l INT_MASK_REG2
.181890		49 ff		eor #$ff					EOR #$FF
.181892		48		pha						PHA			; 1,s
.181893		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.181897		23 01		and $01,s					AND 1,s
.181899		d0 03		bne $18189e	                BNE process_reg2
.18189b		4c f2 18	jmp $1818f2	                JMP skip_block2
.18189e		8f 42 01 00	sta $000142	process_reg2    STA @l INT_PENDING_REG2
.1818a2		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.1818a4		f0 06		beq $1818ac	                BEQ continue            ; If not: skip the rest of this macro
.1818a6		48		pha						PHA
.1818a7		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.1818ab		68		pla						PLA
.1818ac						continue
.1818ac		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.1818ae		f0 06		beq $1818b6	                BEQ continue            ; If not: skip the rest of this macro
.1818b0		48		pha						PHA
.1818b1		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.1818b5		68		pla						PLA
.1818b6						continue
.1818b6		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.1818b8		f0 06		beq $1818c0	                BEQ continue            ; If not: skip the rest of this macro
.1818ba		48		pha						PHA
.1818bb		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.1818bf		68		pla						PLA
.1818c0						continue
.1818c0		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.1818c2		f0 06		beq $1818ca	                BEQ continue            ; If not: skip the rest of this macro
.1818c4		48		pha						PHA
.1818c5		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.1818c9		68		pla						PLA
.1818ca						continue
.1818ca		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.1818cc		f0 06		beq $1818d4	                BEQ continue            ; If not: skip the rest of this macro
.1818ce		48		pha						PHA
.1818cf		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.1818d3		68		pla						PLA
.1818d4						continue
.1818d4		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.1818d6		f0 06		beq $1818de	                BEQ continue            ; If not: skip the rest of this macro
.1818d8		48		pha						PHA
.1818d9		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.1818dd		68		pla						PLA
.1818de						continue
.1818de		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.1818e0		f0 06		beq $1818e8	                BEQ continue            ; If not: skip the rest of this macro
.1818e2		48		pha						PHA
.1818e3		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.1818e7		68		pla						PLA
.1818e8						continue
.1818e8		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.1818ea		f0 06		beq $1818f2	                BEQ continue            ; If not: skip the rest of this macro
.1818ec		48		pha						PHA
.1818ed		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.1818f1		68		pla						PLA
.1818f2						continue
.1818f2		68		pla		skip_block2     PLA
.1818f3						CHECK_PENDING_REG3
.1818f3		af 4f 01 00	lda $00014f					LDA @l INT_MASK_REG3
.1818f7		49 ff		eor #$ff					EOR #$FF
.1818f9		48		pha						PHA			; 1,s
.1818fa		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.1818fe		23 01		and $01,s					AND 1,s
.181900		f0 22		beq $181924	                BEQ skip_block3
.181902		8f 43 01 00	sta $000143					STA @l INT_PENDING_REG3
.181906		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.181908		f0 06		beq $181910	                BEQ continue            ; If not: skip the rest of this macro
.18190a		48		pha						PHA
.18190b		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.18190f		68		pla						PLA
.181910						continue
.181910		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.181912		f0 06		beq $18191a	                BEQ continue            ; If not: skip the rest of this macro
.181914		48		pha						PHA
.181915		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.181919		68		pla						PLA
.18191a						continue
.18191a		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.18191c		f0 06		beq $181924	                BEQ continue            ; If not: skip the rest of this macro
.18191e		48		pha						PHA
.18191f		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.181923		68		pla						PLA
.181924						continue
.181924		68		pla		skip_block3     PLA
.181925						EXIT_IRQ_HANDLE
.181925		28		plp		                PLP
.181926		6b		rtl		                RTL
.181927		6b		rtl		NMI_HANDLER     RTL
.181928						HANDLE_TIMER0
.181928		48		pha		                PHA
.181929		08		php		                PHP
.18192a		e2 20		sep #$20	                SEP #$20        ; set A short
.18192c		af 05 07 00	lda $000705	                LDA @l TIMERFLAGS               ; Flag that the interrupt has happened
.181930		09 80		ora #$80	                ORA #TIMER0TRIGGER
.181932		8f 05 07 00	sta $000705	                STA @l TIMERFLAGS
.181936		28		plp		                PLP
.181937		68		pla		                PLA
.181938		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1060					SIO_KB                  = $AF1060
=$af1100					PME_STS_REG             = $AF1100
=$af1102					PME_EN_REG		        = $AF1102
=$af1104					PME_STS1_REG		    = $AF1104
=$af1105					PME_STS2_REG		    = $AF1105
=$af1106					PME_STS3_REG		    = $AF1106
=$af1107					PME_STS4_REG		    = $AF1107
=$af1108					PME_STS5_REG		    = $AF1108
=$af110a					PME_EN1_REG             = $AF110A
=$af110b					PME_EN2_REG             = $AF110B
=$af110c					PME_EN3_REG             = $AF110C
=$af110d					PME_EN4_REG             = $AF110D
=$af110e					PME_EN5_REG             = $AF110E
=$af1110					SMI_STS1_REG		    = $AF1110
=$af1111					SMI_STS2_REG		    = $AF1111
=$af1112					SMI_STS3_REG		    = $AF1112
=$af1113					SMI_STS4_REG		    = $AF1113
=$af1114					SMI_STS5_REG		    = $AF1114
=$af1116					SMI_EN1_REG             = $AF1116
=$af1117					SMI_EN2_REG             = $AF1117
=$af1118					SMI_EN3_REG             = $AF1118
=$af1119					SMI_EN4_REG             = $AF1119
=$af111a					SMI_EN5_REG             = $AF111A
=$af111c					MSC_ST_REG              = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		    = $AF1123
=$af1124					GP11_REG    		    = $AF1124
=$af1125					GP12_REG    		    = $AF1125
=$af1126					GP13_REG    		    = $AF1126
=$af1127					GP14_REG    		    = $AF1127
=$af1128					GP15_REG    		    = $AF1128
=$af1129					GP16_REG    		    = $AF1129
=$af112a					GP17_REG    		    = $AF112A
=$af112b					GP20_REG    		    = $AF112B
=$af112c					GP21_REG    		    = $AF112C
=$af112d					GP22_REG		        = $AF112D
=$af112f					GP24_REG		        = $AF112F
=$af1130					GP25_REG		        = $AF1130
=$af1131					GP26_REG		        = $AF1131
=$af1132					GP27_REG		        = $AF1132
=$af1133					GP30_REG		        = $AF1133
=$af1134					GP31_REG		        = $AF1134
=$af1135					GP32_REG		        = $AF1135
=$af1136					GP33_REG		        = $AF1136
=$af1137					GP34_REG		        = $AF1137
=$af1138					GP35_REG		        = $AF1138
=$af1139					GP36_REG		        = $AF1139
=$af113a					GP37_REG		        = $AF113A
=$af113b					GP40_REG		        = $AF113B
=$af113c					GP41_REG		        = $AF113C
=$af113d					GP42_REG		        = $AF113D
=$af113e					GP43_REG		        = $AF113E
=$af113f					GP50_REG		        = $AF113F
=$af1140					GP51_REG		        = $AF1140
=$af1141					GP52_REG		        = $AF1141
=$af1142					GP53_REG		        = $AF1142
=$af1143					GP54_REG		        = $AF1143
=$af1144					GP55_REG		        = $AF1144
=$af1145					GP56_REG		        = $AF1145
=$af1146					GP57_REG		        = $AF1146
=$af1147					GP60_REG		        = $AF1147
=$af1148					GP61_REG		        = $AF1148
=$af114b					GP1_REG			        = $AF114B
=$af114c					GP2_REG			        = $AF114C
=$af114d					GP3_REG			        = $AF114D
=$af114e					GP4_REG			        = $AF114E
=$af114f					GP5_REG			        = $AF114F
=$af1150					GP6_REG			        = $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG                = $AF1157
=$af1158					FAN_CTRL_REG  	        = $AF1158
=$af1159					FAN1_TACH_REG           = $AF1159
=$af115a					FAN2_TACH_REG           = $AF115A
=$af115b					FAN1_PRELOAD_REG        = $AF115B
=$af115c					FAN2_PRELOAD_REG        = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE      = $AF115F
=$af1200					SIO_JOY                 = $AF1200
=$af12f8					SIO_COM1                = $AF12F8
=$af1330					SIO_MPU                 = $AF1330
=$af1378					SIO_LPT0                = $AF1378
=$af13f0					SIO_FDC                 = $AF13F0
=$af13f0					SIO_FDC_SRA             = $AF13F0 ; Read Only - Status Register A
=$af13f1					SIO_FDC_SRB             = $AF13F1 ; Read Only - Status Register B
=$af13f2					SIO_FDC_DOR             = $AF13F2 ; Read/Write - Digital Output Register
=$af13f3					SIO_FDC_TSR             = $AF13F3 ; Read/Write - Tape Drive Status
=$af13f4					SIO_FDC_MSR             = $AF13F4 ; Read - Main Status Register
=$af13f4					SIO_FDC_DSR             = $AF13F4 ; Write - Data Select Register
=$af13f5					SIO_FDC_DTA             = $AF13F5 ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV             = $AF13F6 ; Reserved
=$af13f7					SIO_FDC_DIR             = $AF13F7 ; Read - Digital Input Register
=$af13f8					SIO_FDC_CCR             = $AF13F8 ; Write - Configuration Control Register
=$af13f8					SIO_COM0                = $AF13F8

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$04						SYNC_Turn_Off           = $04 ; 0 = Normal Operation, 1 = Turn Off Sync to get sleep mode from Monitor
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select, Bit[6] - Collision On
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ;  Direction: [14] Pos: [13-4] Scroll: [3:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Pos: [13:4] Scroll: [3:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn $18,$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.190418		2b		pld		                PLD
.190419		e2 20		sep #$20	                SEP #$20        ; set A short
.19041b		a2 00 00	ldx #$0000	                LDX #$0000
.19041e		a9 00		lda #$00	                LDA #$00
.190420						CLEAR_MEM_LOOP
.190420		95 00		sta $00,x	                STA $0000, X
.190422		e8		inx		                INX
.190423		e0 00 01	cpx #$0100	                CPX #$0100
.190426		d0 f8		bne $190420	                BNE CLEAR_MEM_LOOP
.190428		ea		nop		                NOP
.190429		a9 ff		lda #$ff	                LDA #$FF
.19042b		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.19042f		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190433		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.190437		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.19043b		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.19043f		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190443		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.190447		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.19044b		22 69 0c 19	jsl $190c69	                JSL INITRTC               ; Initialize the RTC
.19044f		e2 20		sep #$20	                SEP #$20        ; set A short
.190451		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.190455		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.190457		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.190459		d0 1e		bne $190479	                BNE SkipInitExpC100C200
.19045b		c2 20		rep #$20	                REP #$20        ; set A long
.19045d		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.190461		c9 64 00	cmp #$0064	                CMP #$0064
.190464		f0 0f		beq $190475	                BEQ InitC100ESID
.190466		c9 c8 00	cmp #$00c8	                CMP #$00C8
.190469		d0 0e		bne $190479	                BNE SkipInitExpC100C200
.19046b		22 e4 63 19	jsl $1963e4	                JSL SIMPLE_INIT_ETHERNET_CTRL
.19046f		22 f5 64 19	jsl $1964f5	                JSL INIT_EVID_VID_MODE
.190473		80 04		bra $190479	                BRA SkipInitExpC100C200
.190475						InitC100ESID:
.190475		22 e4 63 19	jsl $1963e4	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190479						SkipInitExpC100C200:
.190479		e2 20		sep #$20	                SEP #$20        ; set A short
.19047b		c2 10		rep #$10	                REP #$10        ; set X long
.19047d		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.19047f		8f 00 f1 af	sta $aff100	                STA $AFF100
.190483		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.190485		8f 00 f1 af	sta $aff100	                STA $AFF100
.190489		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.19048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.19048f		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.190491		8f 00 f1 af	sta $aff100	                STA $AFF100
.190495		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.190497		85 1e		sta $1e		                STA CURCOLOR
.190499		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.19049d		29 01		and #$01	                AND #$01
.19049f		c9 01		cmp #$01	                CMP #$01
.1904a1		d0 14		bne $1904b7	                BNE Alreadyin640480Mode
.1904a3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904a7		29 fc		and #$fc	                AND #$FC
.1904a9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904ad		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904b1		09 01		ora #$01	                ORA #$01
.1904b3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904b7						Alreadyin640480Mode
.1904b7		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904bb		29 fc		and #$fc	                AND #$FC
.1904bd		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904c1		a9 00		lda #$00	                LDA #0
.1904c3		22 38 10 00	jsl $001038	                JSL SETIN
.1904c7		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1904cb		22 88 66 19	jsl $196688	                JSL ANSI_INIT
.1904cf		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.1904d3		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904d7		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904db		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.1904df		22 2c 0b 19	jsl $190b2c	                JSL INITMOUSEPOINTER
.1904e3		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.1904e7		c2 20		rep #$20	                REP #$20        ; set A long
.1904e9		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.1904ec		2b		pld		                PLD
.1904ed		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD        ; Initialize the keyboard
.1904f1		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.1904f5		58		cli		                CLI
.1904f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1904f8		c2 10		rep #$10	                REP #$10        ; set X long
.1904fa		f4 19 19	pea #$1919	                PEA #((`greet_msg) * 256) + (`greet_msg)
.1904fd		ab		plb		                PLB
.1904fe		ab		plb		                PLB
.1904ff		a2 00 00	ldx #$0000	                LDX #0
.190502		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.190506		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.19050a		e8		inx		                INX
.19050b		e0 00 10	cpx #$1000	                CPX #$1000
.19050e		d0 f2		bne $190502	                BNE jmpcopy
.190510						retry_boot
.190510		22 6c 3c 19	jsl $193c6c	                JSL DOS_INIT            ; Initialize the "disc operating system"
.190514		22 5d 7b 19	jsl $197b5d	                JSL BOOT_SOUND          ; Play the boot sound
.190518		a9 00		lda #$00	                LDA #0
.19051a		8f e0 00 00	sta $0000e0	                STA @l MOUSE_IDX
.19051e		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.190522		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.190526		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.19052a						greet
.19052a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19052c		f4 19 19	pea #$1919	                PEA #((`greet_msg) * 256) + (`greet_msg)
.19052f		ab		plb		                PLB
.190530		ab		plb		                PLB
.190531		a2 1b 88	ldx #$881b	                LDX #<>greet_msg
.190534		22 e0 06 19	jsl $1906e0	                JSL IPRINT              ; print the first line
.190538		22 c7 08 19	jsl $1908c7	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.19053c		22 d5 65 19	jsl $1965d5	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.190540		c2 30		rep #$30	                REP #$30        ; set A&X long
.190542		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.190545		1b		tcs		                TAS
.190546		e2 20		sep #$20	                SEP #$20        ; set A short
.190548		c2 10		rep #$10	                REP #$10        ; set X long
.19054a		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.19054e		c9 39		cmp #$39	                CMP #SCAN_SP          ; Did the user press SPACE?
.190550		f0 10		beq $190562	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.190552		c9 1c		cmp #$1c	                CMP #SCAN_CR          ; Did the user press RETURN?
.190554		f0 1e		beq $190574	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.190556		c9 3b		cmp #$3b	                CMP #CHAR_F1          ; Did the user press F1?
.190558		f0 62		beq $1905bc	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.19055a		c9 3c		cmp #$3c	                CMP #CHAR_F2          ; Did the user press F2?
.19055c		f0 1d		beq $19057b	                BEQ BOOTSDC           ; Yes: boot via the SDC
.19055e		c9 3d		cmp #$3d	                CMP #CHAR_F3          ; Did the user press F3?
.190560		f0 39		beq $19059b	                BEQ BOOTIDE           ; Yes: boot via the IDE
.190562		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.190566		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.190568		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.19056a		f0 2f		beq $19059b	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.19056c		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.19056e		f0 0b		beq $19057b	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.190570		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.190572		f0 48		beq $1905bc	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.190574						IRESTORE
.190574		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.190578		ea		nop		CREDIT_LOCK     NOP
.190579		80 fd		bra $190578	                BRA CREDIT_LOCK
.19057b		a2 4a 8c	ldx #$8c4a	BOOTSDC         LDX #<>sdc_boot
.19057e		22 e0 06 19	jsl $1906e0	                JSL IPRINT
.190582		e2 20		sep #$20	                SEP #$20        ; set A short
.190584		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.190586		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.19058a		22 28 3d 19	jsl $193d28	                JSL DOS_MOUNT         ; Mount the SDC
.19058e		90 06		bcc $190596	                BCC sdc_error         ; Print an error message if couldn't get anything
.190590		22 d8 3e 19	jsl $193ed8	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.190594		80 de		bra $190574	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.190596		a2 ce 8b	ldx #$8bce	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.190599		80 40		bra $1905db	                BRA PR_BOOT_ERROR
.19059b		a2 61 8c	ldx #$8c61	BOOTIDE         LDX #<>ide_boot
.19059e		22 e0 06 19	jsl $1906e0	                JSL IPRINT
.1905a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1905a4		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.1905a6		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905aa		22 28 3d 19	jsl $193d28	                JSL DOS_MOUNT         ; Mount the IDE drive
.1905ae		90 07		bcc $1905b7	                BCC hdc_error         ; Print an error message if couldn't get anything
.1905b0		22 d8 3e 19	jsl $193ed8	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.1905b4		82 bd ff	brl $190574	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.1905b7		a2 ea 8b	ldx #$8bea	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.1905ba		80 1f		bra $1905db	                BRA PR_BOOT_ERROR
.1905bc		a2 33 8c	ldx #$8c33	BOOTFLOPPY      LDX #<>fdc_boot
.1905bf		22 e0 06 19	jsl $1906e0	                JSL IPRINT
.1905c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1905c5		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.1905c7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905cb		22 dd 5d 19	jsl $195ddd	                JSL FDC_MOUNT         ; Mount the floppy drive
.1905cf		90 07		bcc $1905d8	                BCC fdc_error         ; Print an error message if couldn't get anything
.1905d1		22 d8 3e 19	jsl $193ed8	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.1905d5		82 9c ff	brl $190574	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.1905d8		a2 0d 8c	ldx #$8c0d	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905db		22 e0 06 19	jsl $1906e0	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.1905df		a2 a9 8b	ldx #$8ba9	                LDX #<>boot_retry     ; Print the boot retry prompt
.1905e2		22 e0 06 19	jsl $1906e0	                JSL IPRINT
.1905e6		22 7a 06 19	jsl $19067a	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.1905ea		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.1905ec		d0 03		bne $1905f1	                BNE chk_r_lc
.1905ee		82 1f ff	brl $190510	                BRL retry_boot        ; Yes: retry the boot sequence
.1905f1		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.1905f3		d0 03		bne $1905f8	                BNE chk_b_lc
.1905f5		82 18 ff	brl $190510	                BRL retry_boot
.1905f8		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.1905fa		d0 03		bne $1905ff	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.1905fc		82 75 ff	brl $190574	                BRL BOOTBASIC
.1905ff						chk_b_lc_not:
.1905ff		c9 42		cmp #$42	                CMP #'B'
.190601		d0 03		bne $190606	                BNE chk_b_lc_not0
.190603		82 6e ff	brl $190574	                BRL BOOTBASIC
.190606						chk_b_lc_not0:
.190606		80 de		bra $1905e6	                BRA boot_wait_key     ; No: keep waiting
.190608						IBREAK
.190608		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.19060b		2b		pld		                PLD
.19060c		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.19060d		8f 48 02 00	sta $000248	                STA CPUY
.190611		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.190612		8f 46 02 00	sta $000246	                STA CPUX
.190616		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.190617		8f 44 02 00	sta $000244	                STA CPUA
.19061b		68		pla		                PLA
.19061c		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.190620		e2 20		sep #$20	                SEP #$20        ; set A short
.190622		68		pla		                PLA             ; Pull Data Bank (8 bits)
.190623		8f 4e 02 00	sta $00024e	                STA CPUDBR
.190627		68		pla		                PLA             ; Pull Flags (8 bits)
.190628		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.19062c		c2 20		rep #$20	                REP #$20        ; set A long
.19062e		68		pla		                PLA             ; Pull Program Counter (16 bits)
.19062f		8f 40 02 00	sta $000240	                STA CPUPC
.190633		e2 20		sep #$20	                SEP #$20        ; set A short
.190635		68		pla		                PLA             ; Pull Program Bank (8 bits)
.190636		8f 42 02 00	sta $000242	                STA CPUPBR
.19063a		c2 20		rep #$20	                REP #$20        ; set A long
.19063c		3b		tsc		                TSA             ; Get the stack
.19063d		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.190641		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.190644		1b		tcs		                TAS
.190645		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.190649						IREADY
.190649		f4 19 19	pea #$1919	                PEA #((`ready_msg) * 256) + (`ready_msg)
.19064c		ab		plb		                PLB
.19064d		ab		plb		                PLB
.19064e		e2 20		sep #$20	                SEP #$20        ; set A short
.190650		a2 7c 8c	ldx #$8c7c	                LDX #<>ready_msg
.190653		22 e0 06 19	jsl $1906e0	                JSL IPRINT
.190657						IREADYWAIT
.190657		22 71 06 19	jsl $190671	                JSL IGETCHE
.19065b		80 fa		bra $190657	                BRA IREADYWAIT
.19065d		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.19065e		db		stp		IRETURN         STP
.19065f		08		php		ISETIN          PHP
.190660		e2 20		sep #$20	                SEP #$20        ; set A short
.190662		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.190666		28		plp		                PLP
.190667		6b		rtl		                RTL
.190668		08		php		ISETOUT         PHP
.190669		e2 20		sep #$20	                SEP #$20        ; set A short
.19066b		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.19066f		28		plp		                PLP
.190670		6b		rtl		                RTL
.190671		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.190675		22 18 10 00	jsl $001018	                JSL PUTC
.190679		6b		rtl		                RTL
.19067a						IGETCHW
.19067a		da		phx		                PHX
.19067b		5a		phy		                PHY
.19067c		8b		phb		                PHB
.19067d		0b		phd		                PHD
.19067e		08		php		                PHP
.19067f		e2 20		sep #$20	                SEP #$20        ; set A short
.190681		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.190685		f0 1b		beq $1906a2	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.190687		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190689		f0 0d		beq $190698	                BEQ getc_uart       ; Yes: handle reading from the UART
.19068b		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.19068d		f0 09		beq $190698	                BEQ getc_uart       ; Yes: handle reading from the UART
.19068f		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.190691		28		plp		                PLP
.190692		38		sec		                SEC                 ; And return carry set
.190693		2b		pld		                PLD
.190694		ab		plb		                PLB
.190695		7a		ply		                PLY
.190696		fa		plx		                PLX
.190697		6b		rtl		                RTL
.190698		22 36 53 19	jsl $195336	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.19069c		22 d2 53 19	jsl $1953d2	                JSL UART_GETC       ; Get the charater from the COM port
.1906a0		80 04		bra $1906a6	                BRA done
.1906a2		22 8d 72 19	jsl $19728d	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.1906a6		28		plp		done            PLP
.1906a7		18		clc		                CLC                 ; Return carry clear for valid data
.1906a8		2b		pld		                PLD
.1906a9		ab		plb		                PLB
.1906aa		7a		ply		                PLY
.1906ab		fa		plx		                PLX
.1906ac		6b		rtl		                RTL
.1906ad						IGETCH
.1906ad		da		phx		                PHX
.1906ae		5a		phy		                PHY
.1906af		8b		phb		                PHB
.1906b0		0b		phd		                PHD
.1906b1		08		php		                PHP
.1906b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1906b4		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906b8		f0 1b		beq $1906d5	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906ba		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906bc		f0 0d		beq $1906cb	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906be		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906c0		f0 09		beq $1906cb	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906c2		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906c4		28		plp		                PLP
.1906c5		38		sec		                SEC                 ; And return carry set
.1906c6		2b		pld		                PLD
.1906c7		ab		plb		                PLB
.1906c8		7a		ply		                PLY
.1906c9		fa		plx		                PLX
.1906ca		6b		rtl		                RTL
.1906cb		22 36 53 19	jsl $195336	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906cf		22 d2 53 19	jsl $1953d2	                JSL UART_GETC       ; Get the charater from the COM port
.1906d3		80 04		bra $1906d9	                BRA done
.1906d5		22 99 72 19	jsl $197299	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.1906d9		28		plp		done            PLP
.1906da		18		clc		                CLC                 ; Return carry clear for valid data
.1906db		2b		pld		                PLD
.1906dc		ab		plb		                PLB
.1906dd		7a		ply		                PLY
.1906de		fa		plx		                PLX
.1906df		6b		rtl		                RTL
.1906e0		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.1906e4		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1906e8		6b		rtl		                RTL
.1906e9		48		pha		IPUTS           PHA
.1906ea		08		php		                PHP
.1906eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1906ed		c2 10		rep #$10	                REP #$10        ; set X long
.1906ef		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.1906f2		f0 08		beq $1906fc	                BEQ iputs_done
.1906f4		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.1906f8		e8		inx		iputs3          INX
.1906f9		4c ef 06	jmp $1906ef	                JMP iputs1
.1906fc		e8		inx		iputs_done      INX
.1906fd		28		plp		                PLP
.1906fe		68		pla		                PLA
.1906ff		6b		rtl		                RTL
.190700						IPUTC
.190700		da		phx		                PHX
.190701		5a		phy		                PHY
.190702		0b		phd		                PHD
.190703		8b		phb		                PHB
.190704		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190705		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.190708		2b		pld		                PLD
.190709		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19070c		ab		plb		                PLB
.19070d		ab		plb		                PLB
.19070e		e2 20		sep #$20	                SEP #$20        ; set A short
.190710		c2 10		rep #$10	                REP #$10        ; set X long
.190712		48		pha		                PHA                 ; Save the character to print
.190713		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.190717		f0 1a		beq $190733	                BEQ putc_ansi       ; If it's 0: print to the screen
.190719		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.19071b		f0 16		beq $190733	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.19071d		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.19071f		f0 07		beq $190728	                BEQ putc_uart       ; Yes: handle printing to the UART
.190721		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.190723		f0 03		beq $190728	                BEQ putc_uart       ; Yes: handle printing to the UART
.190725		68		pla		                PLA                 ; Otherwise, just exit
.190726		80 10		bra $190738	                BRA done
.190728		22 36 53 19	jsl $195336	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.19072c		68		pla		                PLA                 ; Recover the character to send
.19072d		22 ed 53 19	jsl $1953ed	                JSL UART_PUTC       ; Send the character
.190731		80 05		bra $190738	                BRA done
.190733		68		pla		putc_ansi       PLA                 ; Recover the character to send
.190734		22 c7 68 19	jsl $1968c7	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.190738		28		plp		done            PLP
.190739		ab		plb		                PLB
.19073a		2b		pld		                PLD
.19073b		7a		ply		                PLY
.19073c		fa		plx		                PLX
.19073d		6b		rtl		                RTL
.19073e		da		phx		SCRSHIFTLL      PHX
.19073f		5a		phy		                PHY
.190740		48		pha		                PHA
.190741		0b		phd		                PHD
.190742		08		php		                PHP
.190743		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.190746		2b		pld		                PLD
.190747		c2 30		rep #$30	                REP #$30        ; set A&X long
.190749		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.19074b		a8		tay		                TAY                 ; Set it as the destination
.19074c		aa		tax		                TAX
.19074d		e8		inx		                INX                 ; And set the next cell as the source
.19074e		18		clc		                CLC                 ; Calculate the length of the block to move
.19074f		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.190751		e5 1a		sbc $1a		                SBC CURSORX
.190753		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.190756		28		plp		                PLP
.190757		2b		pld		                PLD
.190758		68		pla		                PLA
.190759		7a		ply		                PLY
.19075a		fa		plx		                PLX
.19075b		6b		rtl		                RTL
.19075c		da		phx		SCRSHIFTLR      PHX
.19075d		48		pha		                PHA
.19075e		0b		phd		                PHD
.19075f		08		php		                PHP
.190760		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.190763		2b		pld		                PLD
.190764		c2 30		rep #$30	                REP #$30        ; set A&X long
.190766		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.190768		1a		inc a		                INC A
.190769		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.19076b		b0 1b		bcs $190788	                BGE done            ; Yes: just skip the whole thing
.19076d		38		sec		                SEC                 ; Calculate the length of the block to move
.19076e		a5 0f		lda $0f		                LDA COLS_VISIBLE
.190770		e5 1a		sbc $1a		                SBC CURSORX
.190772		1a		inc a		                INC A
.190773		18		clc		                CLC
.190774		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.190776		3a		dec a		                DEC A
.190777		a8		tay		                TAY                 ; Make it the destination
.190778		3a		dec a		                DEC A               ; Move to the previous column
.190779		aa		tax		                TAX                 ; Make it the source
.19077a		38		sec		                SEC                 ; Calculate the length of the block to move
.19077b		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.19077d		e5 1a		sbc $1a		                SBC CURSORX
.19077f		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.190782		e2 20		sep #$20	                SEP #$20        ; set A short
.190784		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.190786		87 17		sta [$17]	                STA [CURSORPOS]
.190788		28		plp		done            PLP
.190789		2b		pld		                PLD
.19078a		68		pla		                PLA
.19078b		fa		plx		                PLX
.19078c		6b		rtl		                RTL
.19078d						IPUTB
.19078d		6b		rtl		                RTL
.19078e						IPRINTCR
.19078e		da		phx		                PHX
.19078f		5a		phy		                PHY
.190790		8b		phb		                PHB
.190791		0b		phd		                PHD
.190792		08		php		                PHP
.190793		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.190796		ab		plb		                PLB
.190797		ab		plb		                PLB
.190798		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.19079b		2b		pld		                PLD
.19079c		e2 20		sep #$20	                SEP #$20        ; set A short
.19079e		c2 10		rep #$10	                REP #$10        ; set X long
.1907a0		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.1907a4		f0 1c		beq $1907c2	                BEQ scr_printcr
.1907a6		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1907a8		f0 06		beq $1907b0	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907aa		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1907ac		f0 02		beq $1907b0	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907ae		80 1c		bra $1907cc	                BRA done
.1907b0		22 36 53 19	jsl $195336	uart_printcr    JSL UART_SELECT
.1907b4		a9 0d		lda #$0d	                LDA #CHAR_CR
.1907b6		22 18 10 00	jsl $001018	                JSL PUTC
.1907ba		a9 0a		lda #$0a	                LDA #CHAR_LF
.1907bc		22 18 10 00	jsl $001018	                JSL PUTC
.1907c0		80 0a		bra $1907cc	                BRA done
.1907c2		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.1907c5		a4 1c		ldy $1c		                LDY CURSORY
.1907c7		c8		iny		                INY
.1907c8		22 84 10 00	jsl $001084	                JSL LOCATE
.1907cc		28		plp		done            PLP
.1907cd		2b		pld		                PLD
.1907ce		ab		plb		                PLB
.1907cf		7a		ply		                PLY
.1907d0		fa		plx		                PLX
.1907d1		6b		rtl		                RTL
.1907d2		da		phx		ICSRHOME        PHX
.1907d3		5a		phy		                PHY
.1907d4		08		php		                PHP
.1907d5		a2 00 00	ldx #$0000	                LDX #0
.1907d8		a0 00 00	ldy #$0000	                LDY #0
.1907db		22 84 10 00	jsl $001084	                JSL LOCATE
.1907df		28		plp		                PLP
.1907e0		7a		ply		                PLY
.1907e1		fa		plx		                PLX
.1907e2		6b		rtl		                RTL
.1907e3		da		phx		ICSRRIGHT       PHX
.1907e4		5a		phy		                PHY
.1907e5		48		pha		                PHA
.1907e6		0b		phd		                PHD
.1907e7		08		php		                PHP
.1907e8		22 7f 6d 19	jsl $196d7f	                JSL ANSI_CSRRIGHT
.1907ec		28		plp		                PLP
.1907ed		2b		pld		                PLD
.1907ee		68		pla		                PLA
.1907ef		7a		ply		                PLY
.1907f0		fa		plx		                PLX
.1907f1		6b		rtl		                RTL
.1907f2						ICSRLEFT
.1907f2		da		phx		                PHX
.1907f3		5a		phy		                PHY
.1907f4		48		pha		                PHA
.1907f5		0b		phd		                PHD
.1907f6		08		php		                PHP
.1907f7		22 aa 6d 19	jsl $196daa	                JSL ANSI_CSRLEFT
.1907fb		28		plp		                PLP
.1907fc		2b		pld		                PLD
.1907fd		68		pla		                PLA
.1907fe		7a		ply		                PLY
.1907ff		fa		plx		                PLX
.190800		6b		rtl		                RTL
.190801						ICSRUP
.190801		da		phx		                PHX
.190802		5a		phy		                PHY
.190803		48		pha		                PHA
.190804		0b		phd		                PHD
.190805		08		php		                PHP
.190806		22 c8 6d 19	jsl $196dc8	                JSL ANSI_CSRUP
.19080a		28		plp		                PLP
.19080b		2b		pld		                PLD
.19080c		68		pla		                PLA
.19080d		7a		ply		                PLY
.19080e		fa		plx		                PLX
.19080f		6b		rtl		                RTL
.190810		da		phx		ICSRDOWN        PHX
.190811		5a		phy		                PHY
.190812		0b		phd		                PHD
.190813		22 e6 6d 19	jsl $196de6	                JSL ANSI_CSRDOWN
.190817		2b		pld		                PLD
.190818		7a		ply		                PLY
.190819		fa		plx		                PLX
.19081a		6b		rtl		                RTL
.19081b		48		pha		ILOCATE         PHA
.19081c		0b		phd		                PHD
.19081d		08		php		                PHP
.19081e		22 09 6e 19	jsl $196e09	                JSL ANSI_LOCATE
.190822		28		plp		ilocate_done    PLP
.190823		2b		pld		                PLD
.190824		68		pla		                PLA
.190825		6b		rtl		                RTL
.190826						ISCROLLUP
.190826		48		pha		                PHA
.190827		da		phx		                PHX
.190828		5a		phy		                PHY
.190829		8b		phb		                PHB
.19082a		0b		phd		                PHD
.19082b		08		php		                PHP
.19082c		22 6d 6e 19	jsl $196e6d	                JSL ANSI_SCROLLUP
.190830		28		plp		                PLP
.190831		2b		pld		                PLD
.190832		ab		plb		                PLB
.190833		7a		ply		                PLY
.190834		fa		plx		                PLX
.190835		68		pla		                PLA
.190836		6b		rtl		                RTL
.190837		08		php		IPRINTH         PHP
.190838		48		pha		                PHA
.190839						iprinth1
.190839		e2 20		sep #$20	                SEP #$20        ; set A short
.19083b		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.19083e		4a		lsr a		                LSR
.19083f		4a		lsr a		                LSR
.190840		4a		lsr a		                LSR
.190841		4a		lsr a		                LSR
.190842		22 91 08 19	jsl $190891	                JSL iprint_digit
.190846		bd 00 00	lda $0000,x	                LDA #0,b,x
.190849		22 91 08 19	jsl $190891	                JSL iprint_digit
.19084d		ca		dex		                DEX
.19084e		88		dey		                DEY
.19084f		d0 e8		bne $190839	                BNE iprinth1
.190851		68		pla		                PLA
.190852		28		plp		                PLP
.190853		6b		rtl		                RTL
.190854						IPRINTAH
.190854		48		pha		                PHA
.190855		08		php		                PHP
.190856		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.19085a		08		php		                PHP                   ; Get the processor status into A
.19085b		e2 20		sep #$20	                SEP #$20        ; set A short
.19085d		c2 10		rep #$10	                REP #$10        ; set X long
.19085f		68		pla		                PLA
.190860		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.190862		c9 20		cmp #$20	                CMP #%00100000
.190864		f0 14		beq $19087a	                BEQ eight_bit
.190866		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.19086a		4a		lsr a		                LSR A
.19086b		4a		lsr a		                LSR A
.19086c		4a		lsr a		                LSR A
.19086d		4a		lsr a		                LSR A
.19086e		22 91 08 19	jsl $190891	                JSL iprint_digit      ; And print it
.190872		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.190876		22 91 08 19	jsl $190891	                JSL iprint_digit      ; And print it
.19087a		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.19087e		4a		lsr a		                LSR A
.19087f		4a		lsr a		                LSR A
.190880		4a		lsr a		                LSR A
.190881		4a		lsr a		                LSR A
.190882		22 91 08 19	jsl $190891	                JSL iprint_digit      ; And print it
.190886		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.19088a		22 91 08 19	jsl $190891	                JSL iprint_digit      ; And print it
.19088e		28		plp		                PLP
.19088f		68		pla		                PLA
.190890		6b		rtl		                RTL
.190891		da		phx		iprint_digit    PHX
.190892		c2 20		rep #$20	                REP #$20        ; set A long
.190894		29 0f 00	and #$000f	                AND #$0F
.190897		aa		tax		                TAX
.190898		bf 90 8c 19	lda $198c90,x	                LDA hex_digits,X
.19089c		22 00 07 19	jsl $190700	                JSL IPUTC       ; Print the digit
.1908a0		fa		plx		                PLX
.1908a1		6b		rtl		                RTL
.1908a2		48		pha		ICLRSCREEN	    PHA
.1908a3		da		phx		                PHX
.1908a4		08		php		                PHP
.1908a5		22 02 6f 19	jsl $196f02	                JSL ANSI_CLRSCREEN
.1908a9		28		plp		                PLP
.1908aa		fa		plx		                PLX
.1908ab		68		pla		                PLA
.1908ac		6b		rtl		                RTL
.1908ad						COPYBYTES42
.1908ad		08		php		                PHP
.1908ae		0b		phd		                PHD
.1908af		f4 00 00	pea #$0000	                PEA #TMPPTR1         ; set DP to page 0
.1908b2		2b		pld		                PLD
.1908b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1908b5		c2 10		rep #$10	                REP #$10        ; set X long
.1908b7		a0 00 00	ldy #$0000	                LDY #0
.1908ba		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.1908bc		97 04		sta [$04],y	                STA [TMPPTR2],Y
.1908be		c8		iny		                INY
.1908bf		c0 2a 00	cpy #$002a	                CPY #42
.1908c2		d0 f6		bne $1908ba	                BNE copy_loop
.1908c4		2b		pld		                PLD
.1908c5		28		plp		                PLP
.1908c6		60		rts		                RTS
.1908c7						ICOLORFLAG
.1908c7		48		pha		                PHA
.1908c8		da		phx		                PHX
.1908c9		5a		phy		                PHY
.1908ca		08		php		                PHP
.1908cb		8b		phb		                PHB
.1908cc		0b		phd		                PHD
.1908cd		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.1908d0		2b		pld		                PLD
.1908d1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1908d3		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.1908d6		85 04		sta $04		                STA TMPPTR2
.1908d8		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.1908db		85 06		sta $06		                STA TMPPTR2+2
.1908dd		a9 ed 88	lda #$88ed	                LDA #<>greet_clr_line1
.1908e0		85 00		sta $00		                STA TMPPTR1
.1908e2		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.1908e5		85 02		sta $02		                STA TMPPTR1+2
.1908e7		20 ad 08	jsr $1908ad	                JSR COPYBYTES42
.1908ea		18		clc		                CLC
.1908eb		a5 04		lda $04		                LDA TMPPTR2
.1908ed		65 11		adc $11		                ADC COLS_PER_LINE
.1908ef		85 04		sta $04		                STA TMPPTR2
.1908f1		a9 17 89	lda #$8917	                LDA #<>greet_clr_line2
.1908f4		85 00		sta $00		                STA TMPPTR1
.1908f6		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.1908f9		85 02		sta $02		                STA TMPPTR1+2
.1908fb		20 ad 08	jsr $1908ad	                JSR COPYBYTES42
.1908fe		18		clc		                CLC
.1908ff		a5 04		lda $04		                LDA TMPPTR2
.190901		65 11		adc $11		                ADC COLS_PER_LINE
.190903		85 04		sta $04		                STA TMPPTR2
.190905		a9 41 89	lda #$8941	                LDA #<>greet_clr_line3
.190908		85 00		sta $00		                STA TMPPTR1
.19090a		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.19090d		85 02		sta $02		                STA TMPPTR1+2
.19090f		20 ad 08	jsr $1908ad	                JSR COPYBYTES42
.190912		18		clc		                CLC
.190913		a5 04		lda $04		                LDA TMPPTR2
.190915		65 11		adc $11		                ADC COLS_PER_LINE
.190917		85 04		sta $04		                STA TMPPTR2
.190919		a9 6b 89	lda #$896b	                LDA #<>greet_clr_line4
.19091c		85 00		sta $00		                STA TMPPTR1
.19091e		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.190921		85 02		sta $02		                STA TMPPTR1+2
.190923		20 ad 08	jsr $1908ad	                JSR COPYBYTES42
.190926		18		clc		                CLC
.190927		a5 04		lda $04		                LDA TMPPTR2
.190929		65 11		adc $11		                ADC COLS_PER_LINE
.19092b		85 04		sta $04		                STA TMPPTR2
.19092d		a9 95 89	lda #$8995	                LDA #<>greet_clr_line5
.190930		85 00		sta $00		                STA TMPPTR1
.190932		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.190935		85 02		sta $02		                STA TMPPTR1+2
.190937		20 ad 08	jsr $1908ad	                JSR COPYBYTES42
.19093a		2b		pld		                PLD
.19093b		ab		plb		                PLB
.19093c		28		plp		                PLP
.19093d		7a		ply		                PLY
.19093e		fa		plx		                PLX
.19093f		68		pla		                PLA
.190940		6b		rtl		                RTL
.190941		0b		phd		IINITCHLUT		PHD
.190942		08		php		                PHP
.190943		48		pha		                PHA
.190944		da		phx		                PHX
.190945		22 cd 66 19	jsl $1966cd	                JSL ANSI_INIT_LUTS
.190949		fa		plx		                PLX
.19094a		68		pla		                PLA
.19094b		28		plp		                PLP
.19094c		2b		pld		                PLD
.19094d		6b		rtl		                RTL
.19094e						IINITGAMMATABLE
.19094e		e2 20		sep #$20	                SEP #$20        ; set A short
.190950		c2 10		rep #$10	                REP #$10        ; set X long
.190952		a2 00 00	ldx #$0000	                ldx #$0000
.190955		bf 00 91 19	lda $199100,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.190959		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.19095d		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.190961		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.190965		e8		inx		                inx
.190966		e0 00 01	cpx #$0100	                cpx #$0100
.190969		d0 ea		bne $190955	                bne initgammaloop
.19096b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19096d		6b		rtl		                RTL
.19096e		48		pha		IINITALLLUT     PHA
.19096f		da		phx		                PHX
.190970		a2 00 00	ldx #$0000	                LDX #$0000
.190973		e2 20		sep #$20	                SEP #$20        ; set A short
.190975		a9 00		lda #$00	                LDA #$00
.190977		85 0a		sta $0a		                STA $0A     ; Temp Location
.190979						iinit_lut_loop
.190979		86 02		stx $02		                STX $02
.19097b		a6 0a		ldx $0a		                LDX $0A
.19097d		bf 00 90 19	lda $199000,x	                LDA GAMMA_2_2_Tbl, x
.190981		49 55		eor #$55	                EOR  #$55
.190983		a6 02		ldx $02		                LDX $02
.190985		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190989		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.19098d		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190991		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190995		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190999		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.19099d		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1909a1		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1909a5		e8		inx		                inx
.1909a6		86 02		stx $02		                STX $02
.1909a8		a6 0a		ldx $0a		                LDX $0A
.1909aa		bf 00 92 19	lda $199200,x	                LDA RANDOM_LUT_Tbl, x
.1909ae		a6 02		ldx $02		                LDX $02
.1909b0		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909b4		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1909b8		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1909bc		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1909c0		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1909c4		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1909c8		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1909cc		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1909d0		e8		inx		                inx
.1909d1		86 02		stx $02		                STX $02
.1909d3		a6 0a		ldx $0a		                LDX $0A
.1909d5		bf 00 91 19	lda $199100,x	                LDA GAMMA_1_8_Tbl, x
.1909d9		49 aa		eor #$aa	                EOR  #$AA
.1909db		a6 02		ldx $02		                LDX $02
.1909dd		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909e1		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1909e5		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1909e9		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1909ed		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1909f1		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1909f5		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1909f9		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1909fd		e8		inx		                inx
.1909fe		a9 ff		lda #$ff	                LDA #$FF
.190a00		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a04		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a08		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a0c		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a10		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a14		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a18		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a1c		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a20		e6 0a		inc $0a		                inc $0A
.190a22		e8		inx		                inx
.190a23		e0 00 04	cpx #$0400	                cpx #$0400
.190a26		f0 03		beq $190a2b	                beq iinit_lut_exit
.190a28		82 4e ff	brl $190979	                brl iinit_lut_loop
.190a2b						iinit_lut_exit
.190a2b		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a2d		fa		plx		                PLX
.190a2e		68		pla		                PLA
.190a2f		6b		rtl		                RTL
.190a30						INITVKYTXTMODE_BYPASS_DPSW
.190a30		48		pha		                PHA
.190a31		08		php		                PHP
.190a32		80 24		bra $190a58	                BRA WeNeed640480Here
.190a34						IINITVKYTXTMODE
.190a34		48		pha		                PHA
.190a35		08		php		                PHP
.190a36		e2 20		sep #$20	                SEP #$20        ; set A short
.190a38		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190a3c		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190a3e		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190a40		f0 16		beq $190a58	                BEQ WeNeed640480Here
.190a42		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190a46		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190a48		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190a4a		f0 33		beq $190a7f	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190a4c		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190a50		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190a52		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190a56		80 27		bra $190a7f	                BRA INITVICKYMODEHIRES
.190a58						WeNeed640480Here:
.190a58		e2 20		sep #$20	                SEP #$20        ; set A short
.190a5a		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190a5e		29 01		and #$01	                AND #$01
.190a60		c9 01		cmp #$01	                CMP #$01
.190a62		d0 15		bne $190a79	                BNE INITVICKYMODE
.190a64		a9 00		lda #$00	                LDA #$00
.190a66		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190a6a		ea		nop		                NOP
.190a6b		ea		nop		                NOP
.190a6c		ea		nop		                NOP
.190a6d		ea		nop		                NOP
.190a6e		ea		nop		                NOP
.190a6f		a9 01		lda #$01	                LDA #$01
.190a71		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190a75		ea		nop		                NOP
.190a76		ea		nop		                NOP
.190a77		ea		nop		                NOP
.190a78		ea		nop		                NOP
.190a79						INITVICKYMODE
.190a79		a9 00		lda #$00	                LDA #$00
.190a7b		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190a7f						INITVICKYMODEHIRES
.190a7f		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190a81		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190a85		e2 20		sep #$20	                SEP #$20        ; set A short
.190a87		a9 00		lda #$00	                LDA #$00
.190a89		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190a8d		a9 54		lda #$54	                LDA #$54
.190a8f		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190a93		a9 54		lda #$54	                LDA #$54
.190a95		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190a99		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190a9b		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190a9f		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190aa1		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190aa5		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190aa9		c2 30		rep #$30	                REP #$30        ; set A&X long
.190aab		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.190aaf		28		plp		                PLP
.190ab0		68		pla		                PLA
.190ab1		6b		rtl		                RTL
.190ab2						ISETSIZES
.190ab2		22 9e 67 19	jsl $19679e	                JSL ANSI_SETSIZES
.190ab6		6b		rtl		                RTL
.190ab7						IINITVKYGRPMODE
.190ab7		48		pha		                PHA
.190ab8		e2 20		sep #$20	                SEP #$20        ; set A short
.190aba		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190abc		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190ac0		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190ac2		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190ac6		a9 c0		lda #$c0	                LDA #$C0
.190ac8		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190acc		a9 00		lda #$00	                LDA #$00
.190ace		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190ad2		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190ad4		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190ad8		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190ada		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190ade		a9 c0		lda #$c0	                LDA #$C0
.190ae0		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190ae4		a9 00		lda #$00	                LDA #$00
.190ae6		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190aea		c2 30		rep #$30	                REP #$30        ; set A&X long
.190aec		68		pla		                PLA
.190aed		6b		rtl		                RTL
.190aee						IINITTILEMODE
.190aee		6b		rtl		                RTL
.190aef						IREADVRAM
.190aef		08		php		                PHP
.190af0		e2 20		sep #$20	                SEP #$20        ; set A short
.190af2		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.190af5		c2 20		rep #$20	                REP #$20        ; set A long
.190af7		a2 64 00	ldx #$0064	                LDX #100
.190afa		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.190afe		89 00 80	bit #$8000	                BIT #$8000
.190b01		f0 06		beq $190b09	                BEQ read_byte                   ; If it has data, go read the byte
.190b03		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.190b04		d0 f4		bne $190afa	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.190b06		28		plp		ret_failure     PLP                             ; Return failure
.190b07		18		clc		                CLC
.190b08		6b		rtl		                RTL
.190b09						read_byte
.190b09		e2 20		sep #$20	                SEP #$20        ; set A short
.190b0b		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.190b0f		28		plp		ret_success     PLP                             ; Return success
.190b10		18		clc		                CLC
.190b11		6b		rtl		                RTL
.190b12		6b		rtl		INOP            RTL
.190b13						IINITFONTSET
.190b13		48		pha		                PHA
.190b14		da		phx		                PHX
.190b15		5a		phy		                PHY
.190b16		8b		phb		                PHB
.190b17		08		php		                PHP
.190b18		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b1a		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190b1d		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190b20		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190b23		54 af 1f	mvn $1f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190b26		28		plp		                PLP
.190b27		ab		plb		                PLB
.190b28		7a		ply		                PLY
.190b29		fa		plx		                PLX
.190b2a		68		pla		                PLA
.190b2b		6b		rtl		                RTL
.190b2c						INITMOUSEPOINTER
.190b2c		e2 20		sep #$20	                SEP #$20        ; set A short
.190b2e		c2 10		rep #$10	                REP #$10        ; set X long
.190b30		a2 00 00	ldx #$0000	                LDX #$0000
.190b33						FILL_MOUSE_MARKER
.190b33		bf 00 93 19	lda $199300,x	                LDA @lMOUSE_POINTER_PTR,X
.190b37		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190b3b		e8		inx		                INX
.190b3c		e0 00 01	cpx #$0100	                CPX #$0100
.190b3f		d0 f2		bne $190b33	                BNE FILL_MOUSE_MARKER
.190b41		ea		nop		                nop
.190b42		a9 01		lda #$01	                LDA #$01
.190b44		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190b48		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b4a		6b		rtl		                RTL
.190b4b						IINITCURSOR
.190b4b		e2 20		sep #$20	                SEP #$20        ; set A short
.190b4d		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190b4f		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190b53		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190b55		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190b59		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b5b		a9 00 00	lda #$0000	                LDA #$0000;
.190b5e		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190b62		a9 06 00	lda #$0006	                LDA #$0006;
.190b65		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190b69		6b		rtl		                RTL
.190b6a		0b		phd		IINITSUPERIO	PHD
.190b6b		08		php		                PHP
.190b6c		48		pha		                PHA
.190b6d		e2 20		sep #$20	                SEP #$20        ; set A short
.190b6f		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190b71		8f 23 11 af	sta $af1123	                STA GP10_REG
.190b75		af 23 11 af	lda $af1123	                LDA GP10_REG
.190b79		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190b7b		8f 24 11 af	sta $af1124	                STA GP11_REG
.190b7f		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190b81		8f 25 11 af	sta $af1125	                STA GP12_REG
.190b85		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190b87		8f 26 11 af	sta $af1126	                STA GP13_REG
.190b8b		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190b8d		8f 27 11 af	sta $af1127	                STA GP14_REG
.190b91		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190b93		8f 28 11 af	sta $af1128	                STA GP15_REG
.190b97		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190b99		8f 29 11 af	sta $af1129	                STA GP16_REG
.190b9d		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190b9f		8f 2a 11 af	sta $af112a	                STA GP17_REG
.190ba3		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190ba5		8f 2b 11 af	sta $af112b	                STA GP20_REG
.190ba9		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bab		8f 2f 11 af	sta $af112f	                STA GP24_REG
.190baf		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190bb1		8f 30 11 af	sta $af1130	                STA GP25_REG
.190bb5		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190bb7		8f 31 11 af	sta $af1131	                STA GP26_REG
.190bbb		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190bbd		8f 33 11 af	sta $af1133	                STA GP30_REG
.190bc1		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190bc3		8f 34 11 af	sta $af1134	                STA GP31_REG
.190bc7		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190bc9		8f 35 11 af	sta $af1135	                STA GP32_REG
.190bcd		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190bcf		8f 36 11 af	sta $af1136	                STA GP33_REG
.190bd3		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190bd5		8f 37 11 af	sta $af1137	                STA GP34_REG
.190bd9		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190bdb		8f 38 11 af	sta $af1138	                STA GP35_REG
.190bdf		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190be1		8f 39 11 af	sta $af1139	                STA GP36_REG
.190be5		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190be7		8f 3a 11 af	sta $af113a	                STA GP37_REG
.190beb		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bed		8f 3d 11 af	sta $af113d	                STA GP42_REG
.190bf1		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190bf3		8f 3e 11 af	sta $af113e	                STA GP43_REG
.190bf7		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190bf9		8f 3f 11 af	sta $af113f	                STA GP50_REG
.190bfd		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190bff		8f 40 11 af	sta $af1140	                STA GP51_REG
.190c03		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190c05		8f 41 11 af	sta $af1141	                STA GP52_REG
.190c09		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190c0b		8f 42 11 af	sta $af1142	                STA GP53_REG
.190c0f		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190c11		8f 43 11 af	sta $af1143	                STA GP54_REG
.190c15		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190c17		8f 44 11 af	sta $af1144	                STA GP55_REG
.190c1b		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190c1d		8f 45 11 af	sta $af1145	                STA GP56_REG
.190c21		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190c23		8f 46 11 af	sta $af1146	                STA GP57_REG
.190c27		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190c29		8f 47 11 af	sta $af1147	                STA GP60_REG
.190c2d		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190c2f		8f 48 11 af	sta $af1148	                STA GP61_REG
.190c33		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190c35		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190c39		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190c3b		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190c3f		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190c41		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190c45		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190c47		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190c4b		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190c4d		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190c51		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190c53		8f 50 11 af	sta $af1150	                STA GP6_REG
.190c57		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190c59		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190c5d		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190c5f		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190c63		c2 20		rep #$20	                REP #$20        ; set A long
.190c65		68		pla		                PLA
.190c66		28		plp			              PLP
.190c67		2b		pld				            PLD
.190c68		6b		rtl		                RTL
.190c69		48		pha		INITRTC         PHA
.190c6a		08		php		                PHP
.190c6b		e2 20		sep #$20	                SEP #$20        ; set A short
.190c6d		a9 00		lda #$00	                LDA #0
.190c6f		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.190c73		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.190c77		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.190c7b		09 04		ora #$04	                ORA #%00000100
.190c7d		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190c81		28		plp		                PLP
.190c82		68		pla		                PLA
.190c83		6b		rtl		                RTL
.190c84		48		pha		IINITCODEC      PHA
.190c85		08		php		                PHP
.190c86		c2 20		rep #$20	                REP #$20        ; set A long
.190c88		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.190c8b		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190c8f		a9 01 00	lda #$0001	                LDA #$0001
.190c92		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190c96		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190c99		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190c9c		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190ca0		a9 01 00	lda #$0001	                LDA #$0001
.190ca3		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190ca7		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190caa		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.190cad		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cb1		a9 01 00	lda #$0001	                LDA #$0001
.190cb4		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cb8		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190cbb		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190cbe		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cc2		a9 01 00	lda #$0001	                LDA #$0001
.190cc5		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cc9		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190ccc		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190ccf		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cd3		a9 01 00	lda #$0001	                LDA #$0001
.190cd6		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cda		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190cdd		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.190ce0		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190ce4		a9 01 00	lda #$0001	                LDA #$0001
.190ce7		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190ceb		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190cee		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.190cf1		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cf5		a9 01 00	lda #$0001	                LDA #$0001
.190cf8		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cfc		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190cff		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.190d02		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d06		a9 01 00	lda #$0001	                LDA #$0001
.190d09		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d0d		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190d10		28		plp		                PLP
.190d11		68		pla		                PLA
.190d12		6b		rtl		                RTL
.190d13						IRESETCODEC
.190d13		c2 20		rep #$20	                REP #$20        ; set A long
.190d15		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190d18		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d1c		a9 01 00	lda #$0001	                LDA #$0001
.190d1f		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d23		20 27 0d	jsr $190d27	                JSR CODEC_TRF_FINISHED
.190d26		6b		rtl		                RTL
.190d27						CODEC_TRF_FINISHED
.190d27		e2 20		sep #$20	                SEP #$20        ; set A short
.190d29		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.190d2d		29 01		and #$01	                AND #$01
.190d2f		c9 01		cmp #$01	                CMP #$01
.190d31		f0 f6		beq $190d29	                BEQ CODEC_LOOP
.190d33		c2 20		rep #$20	                REP #$20        ; set A long
.190d35		60		rts		                RTS
.190d36						IBM_FILL_SCREEN
.190d36		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d38		a9 00 00	lda #$0000	                LDA #$0000
.190d3b		a2 00 00	ldx #$0000	                LDX #$0000
.190d3e						BM_FILL_SCREEN_LOOPY
.190d3e		a0 00 00	ldy #$0000	                LDY #$0000
.190d41		e2 20		sep #$20	                SEP #$20        ; set A short
.190d43						BM_FILL_SCREEN_LOOPX
.190d43		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190d45		c8		iny		                INY
.190d46		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190d48		d0 f9		bne $190d43	                BNE BM_FILL_SCREEN_LOOPX
.190d4a		20 55 0d	jsr $190d55	                JSR BM_FILL_COMPUTE_Y_DST
.190d4d		e8		inx		                INX
.190d4e		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190d50		d0 ec		bne $190d3e	                BNE BM_FILL_SCREEN_LOOPY
.190d52		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d54		6b		rtl		                RTL
.190d55						BM_FILL_COMPUTE_Y_DST
.190d55		c2 20		rep #$20	                REP #$20        ; set A long
.190d57		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190d59		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190d5d		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190d5f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190d63		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190d66		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190d6a		a9 00 00	lda #$0000	                LDA #$0000
.190d6d		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190d71		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190d75		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190d77		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190d7b		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190d7d		a9 00 00	lda #$0000	                LDA #$0000
.190d80		60		rts		                RTS
.190d81						IBMP_PARSER
.190d81		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d83		a0 00 00	ldy #$0000	                LDY #$0000
.190d86		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190d88		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190d8b		f0 03		beq $190d90	                BEQ IBMP_PARSER_CONT
.190d8d		82 04 01	brl $190e94	                BRL BMP_PARSER_END_WITH_ERROR
.190d90						IBMP_PARSER_CONT
.190d90		a0 02 00	ldy #$0002	                LDY #$0002
.190d93		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190d95		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190d99		a0 04 00	ldy #$0004	                LDY #$0004
.190d9c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190d9e		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190da2		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190da5		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190da9		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dad		18		clc		                CLC
.190dae		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190db2		85 50		sta $50		                STA BMP_FILE_SIZE
.190db4		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190db8		85 52		sta $52		                STA BMP_FILE_SIZE+2
.190dba		a0 12 00	ldy #$0012	                LDY #$0012
.190dbd		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190dbf		85 40		sta $40		                STA BMP_X_SIZE
.190dc1		a0 16 00	ldy #$0016	                LDY #$0016
.190dc4		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190dc6		85 42		sta $42		                STA BMP_Y_SIZE
.190dc8		a0 2e 00	ldy #$002e	                LDY #$002E
.190dcb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190dcd		0a		asl a		                ASL A; Multiply by 2
.190dce		0a		asl a		                ASL A; Multiply by 2
.190dcf		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190dd1		e0 00 00	cpx #$0000	                CPX #$0000
.190dd4		d0 05		bne $190ddb	                BNE BMP_LUT1_PICK
.190dd6		20 9c 0e	jsr $190e9c	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190dd9		80 08		bra $190de3	                BRA DONE_TRANSFER_LUT;
.190ddb						  BMP_LUT1_PICK
.190ddb		e0 01 00	cpx #$0001	                CPX #$0001
.190dde		d0 03		bne $190de3	                BNE BMP_LUT2_PICK
.190de0		20 cc 0e	jsr $190ecc	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190de3						  BMP_LUT2_PICK
.190de3						  DONE_TRANSFER_LUT
.190de3		a5 56		lda $56		                LDA BMP_POSITION_Y
.190de5		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.190de9		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190deb		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.190def		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.190df3		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190df7		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.190dfb		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190dff		a5 54		lda $54		                LDA BMP_POSITION_X
.190e01		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190e05		a9 00 00	lda #$0000	                LDA #$0000
.190e08		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e0c		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190e10		85 f0		sta $f0		                STA USER_TEMP
.190e12		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190e16		85 f2		sta $f2		                STA USER_TEMP+2
.190e18		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190e1a		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e1e		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190e20		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e24		a5 f0		lda $f0		                LDA USER_TEMP
.190e26		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190e2a		a5 f2		lda $f2		                LDA USER_TEMP+2
.190e2c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190e30		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190e34		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190e36		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190e3a		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190e3c		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190e3e		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e42		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190e44		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e48		a5 50		lda $50		                LDA BMP_FILE_SIZE
.190e4a		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190e4e		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190e50		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e54		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e58		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190e5a		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e5e		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190e60		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190e62		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e66		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190e68		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e6c		18		clc		                CLC
.190e6d		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190e6f		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190e72		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190e75		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190e79		a9 ff ff	lda #$ffff	                LDA #$FFFF
.190e7c		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190e80		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e84		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190e86		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e8a		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190e8c		20 fc 0e	jsr $190efc	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190e8f		a2 51 8b	ldx #$8b51	                LDX #<>bmp_parser_msg0
.190e92		80 03		bra $190e97	                BRA BMP_PARSER_END_NO_ERROR
.190e94						BMP_PARSER_END_WITH_ERROR
.190e94		a2 3d 8b	ldx #$8b3d	                LDX #<>bmp_parser_err0
.190e97						BMP_PARSER_END_NO_ERROR
.190e97		22 e0 06 19	jsl $1906e0	                JSL IPRINT       ; print the first line
.190e9b		6b		rtl		                RTL
.190e9c						BMP_PARSER_UPDATE_LUT0
.190e9c		38		sec		                SEC
.190e9d		a0 7a 00	ldy #$007a	                LDY #$007A
.190ea0		a2 00 00	ldx #$0000	                LDX #$0000
.190ea3		e2 20		sep #$20	                SEP #$20        ; set A short
.190ea5						BMP_PARSER_UPDATE_LOOP
.190ea5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190ea7		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190eab		c8		iny		                INY
.190eac		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190eae		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190eb2		c8		iny		                INY
.190eb3		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190eb5		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190eb9		c8		iny		                INY
.190eba		a9 80		lda #$80	                LDA #$80
.190ebc		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190ec0		c8		iny		                INY ; For the Alpha Value, nobody cares
.190ec1		e8		inx		                INX
.190ec2		e8		inx		                INX
.190ec3		e8		inx		                INX
.190ec4		e8		inx		                INX
.190ec5		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190ec7		d0 dc		bne $190ea5	                BNE BMP_PARSER_UPDATE_LOOP
.190ec9		c2 20		rep #$20	                REP #$20        ; set A long
.190ecb		60		rts		                RTS
.190ecc						BMP_PARSER_UPDATE_LUT1
.190ecc		38		sec		                SEC
.190ecd		a0 36 00	ldy #$0036	                LDY #$0036
.190ed0		a2 00 00	ldx #$0000	                LDX #$0000
.190ed3		e2 20		sep #$20	                SEP #$20        ; set A short
.190ed5						PALETTE_LUT1_LOOP
.190ed5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190ed7		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190edb		c8		iny		                INY
.190edc		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190ede		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190ee2		c8		iny		                INY
.190ee3		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190ee5		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190ee9		c8		iny		                INY
.190eea		a9 80		lda #$80	                LDA #$80
.190eec		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190ef0		c8		iny		                INY ; For the Alpha Value, nobody cares
.190ef1		e8		inx		                INX
.190ef2		e8		inx		                INX
.190ef3		e8		inx		                INX
.190ef4		e8		inx		                INX
.190ef5		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190ef7		d0 dc		bne $190ed5	                BNE PALETTE_LUT1_LOOP
.190ef9		c2 20		rep #$20	                REP #$20        ; set A long
.190efb		60		rts		                RTS
.190efc						BMP_PARSER_DMA_SHIT_OUT
.190efc		a2 00 00	ldx #$0000	                LDX #$0000
.190eff						BMP_PARSER_LOOPY
.190eff		a0 00 00	ldy #$0000	                LDY #$0000
.190f02		e2 20		sep #$20	                SEP #$20        ; set A short
.190f04						BMP_PARSER_LOOPX
.190f04		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190f06		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f08		c8		iny		                INY
.190f09		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190f0b		d0 f7		bne $190f04	                BNE BMP_PARSER_LOOPX
.190f0d		20 19 0f	jsr $190f19	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190f10		20 34 0f	jsr $190f34	                JSR BMP_PARSER_COMPUTE_Y_DST
.190f13		e8		inx		                INX
.190f14		e4 42		cpx $42		                CPX BMP_Y_SIZE
.190f16		d0 e7		bne $190eff	                BNE BMP_PARSER_LOOPY
.190f18		60		rts		                RTS
.190f19						BMP_PARSER_COMPUTE_Y_SRC
.190f19		c2 20		rep #$20	                REP #$20        ; set A long
.190f1b		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f1d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f21		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190f23		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f27		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f2b		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f2d		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190f31		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190f33		60		rts		                RTS
.190f34						BMP_PARSER_COMPUTE_Y_DST
.190f34		c2 20		rep #$20	                REP #$20        ; set A long
.190f36		18		clc		                CLC
.190f37		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f39		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190f3b		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f3d		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f3f		69 00 00	adc #$0000	                ADC #$0000
.190f42		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190f44		60		rts		                RTS
.190f45		ea		nop		ILOOP           NOP
.190f46		ea		nop		                NOP
.190f47		ea		nop		                NOP
.190f48		ea		nop		                NOP
.190f49		ea		nop		                NOP
.190f4a		ea		nop		                NOP
.190f4b		ea		nop		                NOP
.190f4c		ea		nop		                NOP
.190f4d		ea		nop		                NOP
.190f4e		ea		nop		                NOP
.190f4f		6b		rtl		                RTL
.190f50		22 45 0f 19	jsl $190f45	ILOOP_1         JSL ILOOP
.190f54		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f58		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f5c		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f60		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f64		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f68		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f6c		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f70		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f74		22 45 0f 19	jsl $190f45	                JSL ILOOP
.190f78		6b		rtl		                RTL
.190f79		22 50 0f 19	jsl $190f50	ILOOP_1MS       JSL ILOOP_1
.190f7d		6b		rtl		                RTL
.190f7e		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.190f81		f0 07		beq $190f8a	                BEQ LOOP_MS_END
.190f83		22 79 0f 19	jsl $190f79	                JSL ILOOP_1MS
.190f87		ca		dex		                DEX
.190f88		80 f4		bra $190f7e	                BRA ILOOP_MS
.190f8a		6b		rtl		LOOP_MS_END     RTL
.190f8b						IDELAY
.190f8b		48		pha		                PHA
.190f8c		8b		phb		                PHB
.190f8d		08		php		                PHP
.190f8e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.190f91		ab		plb		                PLB
.190f92		ab		plb		                PLB
.190f93		c2 30		rep #$30	                REP #$30        ; set A&X long
.190f95		da		phx		                PHX                         ; Save the delay amount
.190f96		5a		phy		                PHY
.190f97		a9 02 00	lda #$0002	                LDA #$02                    ; Set the handler for TIMER0 interrupts
.190f9a		a0 18 00	ldy #$0018	                LDY #`HANDLE_TIMER0
.190f9d		a2 28 19	ldx #$1928	                LDX #<>HANDLE_TIMER0
.190fa0		22 48 11 00	jsl $001148	                JSL SETHANDLER
.190fa4		7a		ply		                PLY                         ; Restore the delay amount
.190fa5		fa		plx		                PLX
.190fa6		e2 20		sep #$20	                SEP #$20        ; set A short
.190fa8		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.190faa		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.190fae		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.190fb2		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.190fb4		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.190fb8		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.190fba		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.190fbd		a9 00		lda #$00	                LDA #0
.190fbf		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.190fc3		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.190fc7		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.190fcb		c2 30		rep #$30	                REP #$30        ; set A&X long
.190fcd		8a		txa		                TXA
.190fce		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.190fd2		98		tya		                TYA
.190fd3		e2 20		sep #$20	                SEP #$20        ; set A short
.190fd5		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.190fd9		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.190fdb		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.190fdf		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.190fe1		cb		wai		loop            WAI                         ; Wait for an interrupt
.190fe2		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.190fe5		f0 fa		beq $190fe1	                BEQ loop                    ; Keep checking until it's set
.190fe7		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.190fe9		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.190fed		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.190fef		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.190ff2		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.190ff6		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.190ff8		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.190ffc		28		plp		                PLP
.190ffd		ab		plb		                PLB
.190ffe		68		pla		                PLA
.190fff		6b		rtl		                RTL
.191000						SHOW_CREDITS
.191000		48		pha		                PHA
.191001		da		phx		                PHX
.191002		5a		phy		                PHY
.191003		08		php		                PHP
.191004		e2 20		sep #$20	                SEP #$20        ; set A short
.191006		c2 10		rep #$10	                REP #$10        ; set X long
.191008		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.19100c		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.19100e		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191012		a2 00 00	ldx #$0000	                LDX #0
.191015		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.191019		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.19101d		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.191021		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.191025		e8		inx		                INX
.191026		e0 00 20	cpx #$2000	                CPX #128 * 64
.191029		d0 ea		bne $191015	                BNE credit_loop
.19102b		22 7a 06 19	jsl $19067a	                JSL IGETCHW                     ; Wait for a keypress
.19102f		22 a2 08 19	jsl $1908a2	                JSL ICLRSCREEN                  ; Then clear the screen and return
.191033		22 d2 07 19	jsl $1907d2	                JSL ICSRHOME                    ; Move cursor to the home position
.191037		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.19103b		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.19103d		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191041		28		plp		                PLP
.191042		7a		ply		                PLY
.191043		fa		plx		                PLX
.191044		68		pla		                PLA
.191045		6b		rtl		                RTL
.191046		00		brk #		ISCINIT         BRK ;
.191047		00		brk #		IIOINIT         BRK ;
.191048		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.191049		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.19104a		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.19104b		00		brk #		ICLOSE          BRK ; Close a channel
.19104c		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.19104d		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.19104e		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.19104f		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.191050		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.191051		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.191052		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.191053		00		brk #		IPRINTF         BRK ; Print a float value
.191054		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.191055		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.191056		00		brk #		IPUSHKEY        BRK ;
.191057		00		brk #		IPUSHKEYS       BRK ;
.191058		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.191059		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.19105a		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>19105b		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>191063		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>191073		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>19107b		12
>19107c		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>191084		15
>191085		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>19108b		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>191090		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>191096		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>19109e		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>1910ac		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>1910b4		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>1910c2		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>1910ca		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>1910d8		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>1910e0		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>1910ee		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>1910f6		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>191104		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>19110c		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>19111a		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>191122		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>191130		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>191138		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>191146		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>19114e		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>19115c		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>191164		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>191172		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>19117a		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>191188		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>191190		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>19119e		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>1911a6		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>1911b4		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>1911bc		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>1911ca		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>1911d2		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>1911e0		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>1911e8		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>1911f6		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>1911fe		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>19120c		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>191214		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>191222		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>19122a		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>191238		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>191240		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>19124e		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>191256		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>191264		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>19126c		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>19127a		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>191282		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>191290		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>191298		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>1912a6		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>1912ae		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>1912bc		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>1912c4		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>1912d2		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>1912da		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>1912e8		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>1912f0		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>1912fe		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>191306		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>191314		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>19131c		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>19132a		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>191332		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>191340		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>191348		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>191356		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>19135e		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>19136c		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>191374		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>191382		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>19138a		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>191398		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>1913a0		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>1913ae		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>1913b6		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>1913c4		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>1913cc		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>1913da		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>1913e2		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>1913f0		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>1913f8		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>191406		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>19140e		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>19141c		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>191424		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>191432		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>19143a		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>191448		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>191450		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>19145e		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>191466		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>191474		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>19147c		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>19148a		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>191492		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>1914a0		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>1914a8		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>1914b6		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>1914be		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>1914cc		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>1914d4		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>1914e2		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>1914ea		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>1914f8		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>191500		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>19150e		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>191516		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>191524		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>19152c		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>19153a		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>191542		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>191550		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>191558		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>191566		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>19156e		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>19157c		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>191584		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>191592		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>19159a		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>1915a8		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>1915b0		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>1915be		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>1915c6		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>1915d4		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>1915dc		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>1915ea		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>1915f2		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>191600		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>191608		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>191616		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>19161e		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>19162c		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>191634		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>191642		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>19164a		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>191658		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>191660		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>19166e		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>191676		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>191684		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>19168c		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>19169a		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>1916a2		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>1916b0		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>1916b8		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>1916c6		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>1916ce		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>1916dc		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>1916e4		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>1916f2		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>1916fa		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>191708		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>191710		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>19171e		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>191726		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>191734		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>19173c		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>19174a		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>191752		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>191760		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>191768		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>191776		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>19177e		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>19178c		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>191794		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>1917a2		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>1917aa		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>1917b8		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>1917c0		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>1917ce		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>1917d6		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>1917e4		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>1917ec		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>1917fa		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>191802		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>191810		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>191818		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>191826		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>19182e		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>19183c		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>191844		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>191852		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>19185a		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>191868		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>191870		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>19187e		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>191886		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>191894		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>19189c		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>1918aa		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>1918b2		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>1918c0		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>1918c8		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>1918d6		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>1918de		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>1918ec		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>1918f4		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>191902		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>19190a		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>191918		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>191920		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>19192e		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>191936		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>191944		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>19194c		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>19195a		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>191962		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>191970		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>191978		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>191986		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>19198e		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>19199c		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>1919a4		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>1919b2		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>1919ba		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>1919c8		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>1919d0		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>1919de		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>1919e6		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>1919f4		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>1919fc		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191a0a		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191a12		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191a20		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191a28		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191a36		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191a3e		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191a4c		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191a54		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191a62		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191a6a		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191a78		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191a80		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191a8e		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191a96		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191aa4		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191aac		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191aba		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191ac2		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191ad0		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191ad8		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191ae6		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191aee		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191afc		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191b04		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191b12		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191b1a		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191b28		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191b30		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191b3e		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191b46		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>191b54		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>191b5c		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>191b6a		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>191b72		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>191b80		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>191b88		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>191b96		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>191b9e		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>191bac		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>191bb4		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>191bc2		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>191bca		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>191bd8		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>191be0		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>191bee		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>191bf6		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>191c04		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>191c0c		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>191c1a		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>191c22		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>191c30		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>191c38		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>191c46		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>191c4e		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>191c5c		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>191c64		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>191c72		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>191c7a		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>191c88		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>191c90		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>191c9e		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>191ca6		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>191cb4		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>191cbc		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>191cca		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>191cd2		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>191ce0		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>191ce8		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>191cf6		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>191cfe		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>191d0c		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191d14		00 87 fa 00
>191d18		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d20		00 88 98 03
>191d24		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d2c		00 88 98 03
>191d30		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191d38		00 f9 69 00
>191d3c		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>191d44		80 e8 4a 00
>191d48		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191d50		00 f6 9a 00
>191d54		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>191d5c		1b f2 34 00
>191d60		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>191d68		00 f7 8a 00
>191d6c		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>191d74		00 f6 47 00
>191d78		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191d80		00 f9 69 00
>191d84		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191d8c		00 f7 a9 00
>191d90		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191d98		00 87 fa 00
>191d9c		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191da4		00 f7 a9 00
>191da8		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191db0		00 f5 f5 00
>191db4		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191dbc		06 b8 d8 03
>191dc0		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191dc8		00 f5 f5 00
>191dcc		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191dd4		06 b8 d8 03
>191dd8		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191de0		00 f5 f5 00
>191de4		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>191dec		10 74 f8 03
>191df0		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191df8		00 f5 f5 00
>191dfc		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e04		00 f5 f5 00
>191e08		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e10		05 c5 d4 03
>191e14		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e1c		00 f5 f5 00
>191e20		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e28		04 f9 44 03
>191e2c		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e34		05 c5 d4 03
>191e38		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e40		04 f9 44 03
>191e44		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>191e4c		03 87 f7 03
>191e50		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e58		05 c5 d4 03
>191e5c		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>191e64		00 f6 28 00
>191e68		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e70		05 c5 d4 03
>191e74		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>191e7c		00 f5 f7 01
>191e80		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e88		04 f9 44 03
>191e8c		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191e94		00 99 f9 00
>191e98		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>191ea0		00 a8 f7 00
>191ea4		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191eac		00 99 f9 00
>191eb0		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191eb8		00 a6 f6 00
>191ebc		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191ec4		00 a6 f6 00
>191ec8		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191ed0		00 f6 36 02
>191ed4		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191edc		00 f6 36 02
>191ee0		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191ee8		00 96 e8 01
>191eec		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191ef4		00 96 e8 01
>191ef8		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f00		02 79 77 03
>191f04		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f0c		02 79 77 03
>191f10		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>191f18		00 a5 2b 02
>191f1c		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>191f24		00 93 3b 02
>191f28		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>191f30		01 89 3b 03
>191f34		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>191f3c		0a 53 2b 02
>191f40		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>191f48		00 f6 89 00
>191f4c		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191f54		00 f6 9a 00
>191f58		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191f60		00 f6 9a 00
>191f64		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>191f6c		00 87 4b 01
>191f70		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>191f78		00 78 67 01
>191f7c		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>191f84		02 f8 fc 00
>191f88		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191f90		40 f5 f5 00
>191f94		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f9c		02 79 77 03
>191fa0		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fa8		40 f5 f5 00
>191fac		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fb4		40 f5 f5 00
>191fb8		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191fc0		00 f9 69 00
>191fc4		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191fcc		00 f9 69 00
>191fd0		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>191fd8		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>191fdc		0c 1d 19 00 18 1d 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>191fe4		24 1d 19 00 30 1d 19 00
>191fec		3c 1d 19 00 48 1d 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>191ff4		54 1d 19 00 60 1d 19 00
>191ffc		6c 1d 19 00 78 1d 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>192004		84 1d 19 00 90 1d 19 00
>19200c		9c 1d 19 00 a8 1d 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>192014		b4 1d 19 00 c0 1d 19 00
>19201c		cc 1d 19 00 d8 1d 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>192024		e4 1d 19 00 f0 1d 19 00
>19202c		fc 1d 19 00 08 1e 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>192034		14 1e 19 00 20 1e 19 00
>19203c		2c 1e 19 00 38 1e 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>192044		44 1e 19 00 50 1e 19 00
>19204c		5c 1e 19 00 68 1e 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>192054		74 1e 19 00 80 1e 19 00
>19205c		8c 1e 19 00 98 1e 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>192064		a4 1e 19 00 b0 1e 19 00
>19206c		bc 1e 19 00 c8 1e 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>192074		d4 1e 19 00 e0 1e 19 00
>19207c		ec 1e 19 00 f8 1e 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>192084		04 1f 19 00 10 1f 19 00
>19208c		1c 1f 19 00 28 1f 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>192094		34 1f 19 00 40 1f 19 00
>19209c		4c 1f 19 00 58 1f 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>1920a4		64 1f 19 00 70 1f 19 00
>1920ac		7c 1f 19 00 88 1f 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>1920b4		94 1f 19 00 a0 1f 19 00
>1920bc		ac 1f 19 00 b8 1f 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>1920c4		c4 1f 19 00 d0 1f 19 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>1920cc		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>1920d4		00 b1 f5 01
>1920d8		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>1920e0		03 f1 f5 00
>1920e4		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>1920ec		03 c1 f5 00
>1920f0		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>1920f8		00 92 f5 01
>1920fc		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>192104		00 f1 f9 00
>192108		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>192110		00 f1 f5 00
>192114		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>19211c		02 81 f6 01
>192120		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>192128		00 c2 b9 01
>19212c		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>192134		05 b2 35 00
>192138		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>192140		1b f2 34 00
>192144		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>19214c		01 f5 74 00
>192150		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>192158		00 61 e3 00
>19215c		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>192164		00 a4 64 00
>192168		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>192170		07 b5 f5 00
>192174		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>19217c		00 f3 74 00
>192180		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>192188		00 c3 94 01
>19218c		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>192194		00 f4 0d 01
>192198		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>1921a0		00 f5 0b 01
>1921a4		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>1921ac		00 bf 07 00
>1921b0		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>1921b8		00 6d 08 01
>1921bc		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>1921c4		00 51 17 01
>1921c8		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>1921d0		00 51 17 01
>1921d4		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>1921dc		00 53 08 01
>1921e0		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>1921e8		00 53 06 01
>1921ec		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>1921f4		00 d2 f8 00
>1921f8		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>192200		00 e2 c7 01
>192204		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>19220c		00 f1 9c 00
>192210		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>192218		02 f2 c9 01
>19221c		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>192224		03 95 fb 00
>192228		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>192230		04 a1 59 00
>192234		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>19223c		03 91 fc 03
>192240		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>192248		02 b4 ec 00
>19224c		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>192254		00 93 f7 00
>192258		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>192260		04 c1 58 00
>192264		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>19226c		02 c3 6a 00
>192270		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>192278		00 62 87 00
>19227c		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>192284		00 f3 97 00
>192288		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>192290		00 b3 97 00
>192294		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>19229c		04 f3 cc 00
>1922a0		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>1922a8		00 93 aa 00
>1922ac		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>1922b4		00 78 08 01
>1922b8		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>1922c0		00 78 08 01
>1922c4		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>1922cc		00 54 27 01
>1922d0		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>1922d8		00 61 56 00
>1922dc		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>1922e4		00 75 16 01
>1922e8		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>1922f0		00 f5 f6 01
>1922f4		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>1922fc		80 f3 e3 00
>192300		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>192308		00 b5 f5 00
>19230c		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>192314		80 71 16 00
>192318		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>192320		00 30 55 01
>192324		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>19232c		00 62 36 01
>192330		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>192338		02 51 07 00
>19233c		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>192344		00 62 39 00
>192348		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>192350		00 66 27 00
>192354		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>19235c		00 73 46 00
>192360		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>192368		00 74 76 01
>19236c		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>192374		81 92 38 00
>192378		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>192380		02 71 19 00
>192384		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>19238c		01 81 09 00
>192390		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>192398		00 83 4b 02
>19239c		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>1923a4		05 71 59 00
>1923a8		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>1923b0		03 82 39 00
>1923b4		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>1923bc		82 84 17 00
>1923c0		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>1923c8		02 72 16 00
>1923cc		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>1923d4		00 7b 0a 00
>1923d8		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>1923e0		00 85 0c 01
>1923e4		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>1923ec		00 7b 0a 01
>1923f0		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>1923f8		00 79 18 01
>1923fc		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>192404		01 73 08 00
>192408		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>192410		04 77 0a 00
>192414		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>19241c		00 51 19 00
>192420		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>192428		01 74 09 00
>19242c		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>192434		01 63 28 00
>192438		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>192440		00 65 0a 00
>192444		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>19244c		00 67 29 00
>192450		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>192458		00 67 09 00
>19245c		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>192464		01 6a 28 00
>192468		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>192470		00 55 27 00
>192474		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>19247c		00 6f 08 00
>192480		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>192488		00 7a 07 00
>19248c		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>192494		06 a2 0d 00
>192498		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>1924a0		00 a3 5f 00
>1924a4		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>1924ac		00 42 27 00
>1924b0		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>1924b8		05 b2 49 00
>1924bc		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>1924c4		00 b2 79 01
>1924c8		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>1924d0		00 7a 1a 00
>1924d4		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>1924dc		00 82 28 01
>1924e0		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>1924e8		02 c3 5f 00
>1924ec		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>1924f4		86 c4 95 01
>1924f8		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>192500		00 44 15 00
>192504		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>19250c		00 d1 06 00
>192510		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>192518		00 82 37 00
>19251c		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>192524		00 41 35 00
>192528		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>192530		02 32 f5 01
>192534		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>19253c		00 61 26 00
>192540		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>192548		84 3f 05 01
>19254c		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>192554		01 d1 f6 00
>192558		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>192560		00 41 05 01
>192564		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>19256c		05 f3 e4 00
>192570		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>192578		00 92 f5 01
>19257c		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>192584		04 f2 e4 01
>192588		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>192590		00 45 25 00
>192594		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>19259c		01 a3 36 00
>1925a0		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>1925a8		01 98 05 01
>1925ac		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>1925b4		02 a3 f6 01
>1925b8		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>1925c0		00 f6 f8 00
>1925c4		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>1925cc		00 f3 f5 00
>1925d0		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>1925d8		00 94 e5 01
>1925dc		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>1925e4		00 84 44 00
>1925e8		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>1925f0		03 83 18 01
>1925f4		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>1925fc		01 78 08 01
>192600		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>192608		03 8e 08 01
>19260c		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>192614		09 f2 46 00
>192618		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192620		00 96 e8 01
>192624		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>19262c		00 f6 f6 01
>192630		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192638		00 f6 9a 00
>19263c		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192644		00 c6 45 00
>192648		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>192650		00 f4 b4 00
>192654		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>19265c		00 d5 25 00
>192660		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>192668		0e 21 2d 00
>19266c		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>192674		00 55 87 02
>192678		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>192680		08 98 87 01
>192684		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>19268c		04 17 04 03
>192690		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>192698		05 77 f9 02
>19269c		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>1926a4		02 f4 08 00
>1926a8		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>1926b0		00 36 05 01
>1926b4		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>1926bc		05 32 55 03
>1926c0		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>1926c8		00 f3 df 00
>1926cc		cc 20 19 00 d8 20 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>1926d4		e4 20 19 00 f0 20 19 00 fc 20 19 00 08 21 19 00
>1926e4		14 21 19 00 20 21 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>1926ec		2c 21 19 00 38 21 19 00 44 21 19 00 50 21 19 00
>1926fc		5c 21 19 00 68 21 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>192704		74 21 19 00 80 21 19 00 8c 21 19 00 98 21 19 00
>192714		a4 21 19 00 b0 21 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>19271c		bc 21 19 00 c8 21 19 00 d4 21 19 00 e0 21 19 00
>19272c		ec 21 19 00 f8 21 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>192734		04 22 19 00 10 22 19 00 1c 22 19 00 28 22 19 00
>192744		34 22 19 00 40 22 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>19274c		4c 22 19 00 58 22 19 00 64 22 19 00 70 22 19 00
>19275c		7c 22 19 00 88 22 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>192764		94 22 19 00 a0 22 19 00 ac 22 19 00 b8 22 19 00
>192774		c4 22 19 00 d0 22 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>19277c		dc 22 19 00 e8 22 19 00 f4 22 19 00 00 23 19 00
>19278c		0c 23 19 00 18 23 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>192794		24 23 19 00 30 23 19 00 3c 23 19 00 48 23 19 00
>1927a4		54 23 19 00 60 23 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>1927ac		6c 23 19 00 78 23 19 00 84 23 19 00 90 23 19 00
>1927bc		9c 23 19 00 a8 23 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>1927c4		b4 23 19 00 c0 23 19 00 cc 23 19 00 d8 23 19 00
>1927d4		e4 23 19 00 f0 23 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>1927dc		fc 23 19 00 08 24 19 00 14 24 19 00 20 24 19 00
>1927ec		2c 24 19 00 38 24 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>1927f4		44 24 19 00 50 24 19 00 5c 24 19 00 68 24 19 00
>192804		74 24 19 00 80 24 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>19280c		8c 24 19 00 98 24 19 00 a4 24 19 00 b0 24 19 00
>19281c		bc 24 19 00 c8 24 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>192824		d4 24 19 00 e0 24 19 00 ec 24 19 00 f8 24 19 00
>192834		04 25 19 00 10 25 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>19283c		1c 25 19 00 28 25 19 00 34 25 19 00 40 25 19 00
>19284c		4c 25 19 00 58 25 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>192854		64 25 19 00 70 25 19 00 7c 25 19 00 88 25 19 00
>192864		94 25 19 00 a0 25 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>19286c		ac 25 19 00 b8 25 19 00 c4 25 19 00 d0 25 19 00
>19287c		dc 25 19 00 e8 25 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>192884		f4 25 19 00 00 26 19 00 0c 26 19 00 18 26 19 00
>192894		24 26 19 00 30 26 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>19289c		3c 26 19 00 48 26 19 00 54 26 19 00 60 26 19 00
>1928ac		6c 26 19 00 78 26 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>1928b4		84 26 19 00 90 26 19 00 9c 26 19 00 a8 26 19 00
>1928c4		b4 26 19 00 c0 26 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>1928cc		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>1928d4		0d f2 f7 00
>1928d8		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>1928e0		07 f2 f7 00
>1928e4		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>1928ec		07 f2 f6 00
>1928f0		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>1928f8		07 f2 f7 00
>1928fc		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192904		07 f2 f7 00
>192908		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192910		07 f2 f7 00
>192914		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19291c		00 00 00 00
>192920		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192928		00 00 00 00
>19292c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192934		00 00 00 00
>192938		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>192940		87 f2 f1 00
>192944		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>19294c		07 f4 f4 00
>192950		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>192958		07 f2 f6 00
>19295c		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>192964		07 e7 f7 00
>192968		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>192970		07 f6 f6 00
>192974		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>19297c		87 a3 f3 00
>192980		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192988		00 00 00 00
>19298c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192994		00 00 00 00
>192998		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929a0		00 00 00 00
>1929a4		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>1929ac		07 8a 08 00
>1929b0		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>1929b8		07 55 14 00
>1929bc		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>1929c4		87 55 04 00
>1929c8		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>1929d0		07 46 1a 00
>1929d4		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>1929dc		07 61 07 00
>1929e0		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>1929e8		90 61 07 00
>1929ec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929f4		00 00 00 00
>1929f8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a00		00 00 00 00
>192a04		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a0c		00 00 00 00
>192a10		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192a18		87 f3 f8 00
>192a1c		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192a24		07 f6 3a 00
>192a28		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192a30		0c 84 19 00
>192a34		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192a3c		07 94 19 00
>192a40		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192a48		87 d1 f8 00
>192a4c		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192a54		07 c3 a6 00
>192a58		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a60		00 00 00 00
>192a64		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a6c		00 00 00 00
>192a70		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a78		00 00 00 00
>192a7c		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192a84		47 f2 df 00
>192a88		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192a90		0f a1 df 00
>192a94		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192a9c		07 f1 78 00
>192aa0		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192aa8		07 f1 18 00
>192aac		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192ab4		07 56 26 00
>192ab8		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192ac0		07 66 06 00
>192ac4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192acc		00 00 00 00
>192ad0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ad8		00 00 00 00
>192adc		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ae4		00 00 00 00
>192ae8		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192af0		87 85 35 00
>192af4		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192afc		87 f3 f4 00
>192b00		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192b08		07 f2 c3 00
>192b0c		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192b14		08 72 08 00
>192b18		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192b20		07 3f 07 01
>192b24		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192b2c		07 4f 05 00
>192b30		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b38		00 00 00 00
>192b3c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b44		00 00 00 00
>192b48		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b50		00 00 00 00
>192b54		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>192b5c		07 7a 05 00
>192b60		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>192b68		07 a5 45 00
>192b6c		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>192b74		08 8f 09 00
>192b78		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>192b80		0c 8f 09 00
>192b84		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>192b8c		07 82 37 00
>192b90		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>192b98		07 62 2c 01
>192b9c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ba4		00 00 00 00
>192ba8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bb0		00 00 00 00
>192bb4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bbc		00 00 00 00
>192bc0		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>192bc8		07 a6 1c 00
>192bcc		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>192bd4		07 72 0b 00
>192bd8		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>192be0		07 72 09 00
>192be4		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>192bec		07 82 09 00
>192bf0		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>192bf8		07 72 0f 00
>192bfc		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>192c04		07 8f 0a 00
>192c08		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c10		00 00 00 00
>192c14		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c1c		00 00 00 00
>192c20		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c28		00 00 00 00
>192c2c		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c34		07 65 1a 00
>192c38		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c40		07 65 1a 00
>192c44		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>192c4c		07 75 0a 00
>192c50		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>192c58		07 65 1a 00
>192c5c		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>192c64		07 65 26 00
>192c68		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>192c70		07 55 36 00
>192c74		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c7c		00 00 00 00
>192c80		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c88		00 00 00 00
>192c8c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c94		00 00 00 00
>192c98		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>192ca0		07 ff 0f 01
>192ca4		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>192cac		87 64 18 00
>192cb0		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>192cb8		07 96 0a 00
>192cbc		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>192cc4		07 91 2a 00
>192cc8		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>192cd0		47 6f 07 00
>192cd4		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>192cdc		07 8f 06 02
>192ce0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ce8		00 00 00 00
>192cec		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cf4		00 00 00 00
>192cf8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d00		00 00 00 00
>192d04		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>192d0c		07 55 16 00
>192d10		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>192d18		07 6a 03 00
>192d1c		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>192d24		07 42 35 00
>192d28		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>192d30		07 31 47 01
>192d34		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>192d3c		0a 42 25 00
>192d40		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>192d48		07 cf 07 00
>192d4c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d54		00 00 00 00
>192d58		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d60		00 00 00 00
>192d64		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d6c		00 00 00 00
>192d70		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>192d78		8a f2 26 00
>192d7c		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>192d84		07 f2 f5 00
>192d88		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>192d90		87 11 13 00
>192d94		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>192d9c		87 1d 03 00
>192da0		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>192da8		07 81 23 00
>192dac		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>192db4		0a f2 f6 01
>192db8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dc0		00 00 00 00
>192dc4		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dcc		00 00 00 00
>192dd0		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dd8		00 00 00 00
>192ddc		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>192de4		07 c2 05 00
>192de8		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>192df0		07 6f 0c 01
>192df4		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>192dfc		07 56 16 00
>192e00		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>192e08		88 8f 0b 00
>192e0c		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>192e14		87 c3 e5 00
>192e18		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>192e20		07 f8 16 00
>192e24		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e2c		00 00 00 00
>192e30		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e38		00 00 00 00
>192e3c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e44		00 00 00 00
>192e48		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>192e50		0a f3 03 00
>192e54		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>192e5c		07 f3 02 00
>192e60		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>192e68		07 1f ff 03
>192e6c		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>192e74		8f 56 84 02
>192e78		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>192e80		0c 34 04 03
>192e84		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>192e8c		07 1f 02 03
>192e90		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e98		00 00 00 00
>192e9c		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ea4		00 00 00 00
>192ea8		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192eb0		00 00 00 00
>192eb4		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>192ebc		07 12 16 01
>192ec0		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>192ec8		07 f6 c9 02
>192ecc		cc 28 19 00 d8 28 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>192ed4		e4 28 19 00 f0 28 19 00 fc 28 19 00 08 29 19 00
>192ee4		14 29 19 00 20 29 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>192eec		2c 29 19 00 38 29 19 00 44 29 19 00 50 29 19 00
>192efc		5c 29 19 00 68 29 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>192f04		74 29 19 00 80 29 19 00 8c 29 19 00 98 29 19 00
>192f14		a4 29 19 00 b0 29 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>192f1c		bc 29 19 00 c8 29 19 00 d4 29 19 00 e0 29 19 00
>192f2c		ec 29 19 00 f8 29 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>192f34		04 2a 19 00 10 2a 19 00 1c 2a 19 00 28 2a 19 00
>192f44		34 2a 19 00 40 2a 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>192f4c		4c 2a 19 00 58 2a 19 00 64 2a 19 00 70 2a 19 00
>192f5c		7c 2a 19 00 88 2a 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>192f64		94 2a 19 00 a0 2a 19 00 ac 2a 19 00 b8 2a 19 00
>192f74		c4 2a 19 00 d0 2a 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>192f7c		dc 2a 19 00 e8 2a 19 00 f4 2a 19 00 00 2b 19 00
>192f8c		0c 2b 19 00 18 2b 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>192f94		24 2b 19 00 30 2b 19 00 3c 2b 19 00 48 2b 19 00
>192fa4		54 2b 19 00 60 2b 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>192fac		6c 2b 19 00 78 2b 19 00 84 2b 19 00 90 2b 19 00
>192fbc		9c 2b 19 00 a8 2b 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>192fc4		b4 2b 19 00 c0 2b 19 00 cc 2b 19 00 d8 2b 19 00
>192fd4		e4 2b 19 00 f0 2b 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>192fdc		fc 2b 19 00 08 2c 19 00 14 2c 19 00 20 2c 19 00
>192fec		2c 2c 19 00 38 2c 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>192ff4		44 2c 19 00 50 2c 19 00 5c 2c 19 00 68 2c 19 00
>193004		74 2c 19 00 80 2c 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>19300c		8c 2c 19 00 98 2c 19 00 a4 2c 19 00 b0 2c 19 00
>19301c		bc 2c 19 00 c8 2c 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>193024		d4 2c 19 00 e0 2c 19 00 ec 2c 19 00 f8 2c 19 00
>193034		04 2d 19 00 10 2d 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>19303c		1c 2d 19 00 28 2d 19 00 34 2d 19 00 40 2d 19 00
>19304c		4c 2d 19 00 58 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>193054		64 2d 19 00 70 2d 19 00 7c 2d 19 00 88 2d 19 00
>193064		94 2d 19 00 a0 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>19306c		ac 2d 19 00 b8 2d 19 00 c4 2d 19 00 d0 2d 19 00
>19307c		dc 2d 19 00 e8 2d 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>193084		f4 2d 19 00 00 2e 19 00 0c 2e 19 00 18 2e 19 00
>193094		24 2e 19 00 30 2e 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>19309c		3c 2e 19 00 48 2e 19 00 54 2e 19 00 60 2e 19 00
>1930ac		6c 2e 19 00 78 2e 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>1930b4		84 2e 19 00 90 2e 19 00 9c 2e 19 00 a8 2e 19 00
>1930c4		b4 2e 19 00 c0 2e 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>1930cc		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.1930d4						IOPL2_TONE_TEST
.1930d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1930d6		c2 10		rep #$10	                REP #$10        ; set X long
.1930d8		a2 00 00	ldx #$0000	                LDX #0
.1930db						OPL2_TONE_TESTING_L1
.1930db		bf cc 30 19	lda $1930cc,x	                LDA NOTE_INTRO, X
.1930df		29 0f		and #$0f	                AND #$F
.1930e1		85 30		sta $30		                STA OPL2_NOTE ; start at C
.1930e3		bf cc 30 19	lda $1930cc,x	                LDA NOTE_INTRO, X
.1930e7		29 70		and #$70	                AND #$70
.1930e9		4a		lsr a		                LSR A
.1930ea		4a		lsr a		                LSR A
.1930eb		4a		lsr a		                LSR A
.1930ec		4a		lsr a		                LSR A
.1930ed		85 31		sta $31		                STA OPL2_OCTAVE
.1930ef		8a		txa		                TXA
.1930f0		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.1930f2		85 27		sta $27		                STA OPL2_CHANNEL
.1930f4		22 82 32 19	jsl $193282	                JSL OPL2_PLAYNOTE
.1930f8		a0 00 00	ldy #$0000	                LDY #$0000
.1930fb						OPL2_TONE_TESTING_L2
.1930fb		ea		nop		                NOP
.1930fc		ea		nop		                NOP
.1930fd		ea		nop		                NOP
.1930fe		ea		nop		                NOP
.1930ff		c8		iny		                INY
.193100		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.193103		d0 f6		bne $1930fb	                BNE OPL2_TONE_TESTING_L2
.193105		e8		inx		                INX
.193106		e0 08 00	cpx #$0008	                CPX #8
.193109		d0 d0		bne $1930db	                BNE OPL2_TONE_TESTING_L1
.19310b		6b		rtl		                RTL
.19310c						OPL2_INIT
.19310c		c2 20		rep #$20	                REP #$20        ; set A long
.19310e		a9 00 00	lda #$0000	                LDA #$0000
.193111		85 28		sta $28		                STA OPL2_REG_REGION
.193113		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193115		85 30		sta $30		                STA OPL2_NOTE
.193117		85 32		sta $32		                STA OPL2_PARAMETER0
.193119		85 34		sta $34		                STA OPL2_PARAMETER2
.19311b		a9 96 10	lda #$1096	                LDA #<>INSTRUMENT_ACCORDN
.19311e		85 50		sta $50		                STA RAD_ADDR
.193120		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.193123		85 52		sta $52		                STA RAD_ADDR + 2
.193125		e2 20		sep #$20	                SEP #$20        ; set A short
.193127		6b		rtl		                RTL
.193128						OPL2_Reset
.193128		6b		rtl		                RTL
.193129						OPL2_Get_FrequencyBlock
.193129		6b		rtl		                RTL
.19312a						OPL2_GET_REGISTER
.19312a		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19312d		2b		pld		                PLD
.19312e		c2 20		rep #$20	                REP #$20        ; set A long
.193130		18		clc		              CLC
.193131		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193134		65 32		adc $32		              ADC OPL2_PARAMETER0
.193136		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193138		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19313b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19313d		e2 20		sep #$20	                SEP #$20        ; set A short
.19313f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193141		6b		rtl		              RTL
.193142						OPL2_GET_WAVEFORM_SELECT
.193142		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193145		2b		pld		                PLD
.193146		c2 20		rep #$20	                REP #$20        ; set A long
.193148		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19314b		69 01 00	adc #$0001	              ADC #$0001
.19314e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193150		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193153		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193155		e2 20		sep #$20	                SEP #$20        ; set A short
.193157		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193159		29 20		and #$20	              AND #$20
.19315b		6b		rtl		              RTL
.19315c						OPL2_GET_SCALINGLEVEL
.19315c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19315f		2b		pld		                PLD
.193160		c2 20		rep #$20	                REP #$20        ; set A long
.193162		a9 40 00	lda #$0040	              LDA #$0040  ;
.193165		85 28		sta $28		              STA OPL2_REG_REGION
.193167		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.19316a		e2 20		sep #$20	                SEP #$20        ; set A short
.19316c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19316e		29 c0		and #$c0	              AND #$C0
.193170		4a		lsr a		              LSR A
.193171		4a		lsr a		              LSR A
.193172		4a		lsr a		              LSR A
.193173		4a		lsr a		              LSR A
.193174		4a		lsr a		              LSR A
.193175		4a		lsr a		              LSR A
.193176		6b		rtl		              RTL
.193177						OPL2_GET_BLOCK
.193177		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19317a		2b		pld		                PLD
.19317b		e2 20		sep #$20	                SEP #$20        ; set A short
.19317d		18		clc		              CLC
.19317e		a5 27		lda $27		              LDA OPL2_CHANNEL
.193180		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193182		69 b0		adc #$b0	              ADC #$B0
.193184		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193186		a9 00		lda #$00	              LDA #$00
.193188		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19318a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19318c		18		clc		              CLC
.19318d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193190		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193192		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193194		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193197		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193199		e2 20		sep #$20	                SEP #$20        ; set A short
.19319b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19319d		29 1c		and #$1c	              AND #$1C
.19319f		4a		lsr a		              LSR A
.1931a0		4a		lsr a		              LSR A
.1931a1		6b		rtl		              RTL
.1931a2						OPL2_GET_KEYON
.1931a2		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1931a5		2b		pld		                PLD
.1931a6		e2 20		sep #$20	                SEP #$20        ; set A short
.1931a8		18		clc		              CLC
.1931a9		a5 27		lda $27		              LDA OPL2_CHANNEL
.1931ab		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1931ad		69 b0		adc #$b0	              ADC #$B0
.1931af		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1931b1		a9 00		lda #$00	              LDA #$00
.1931b3		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1931b5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1931b7		18		clc		              CLC
.1931b8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931bb		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1931bd		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1931bf		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1931c2		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1931c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1931c6		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931c8		29 20		and #$20	              AND #$20
.1931ca		6b		rtl		              RTL
.1931cb						OPL2_GET_FEEDBACK
.1931cb		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1931ce		2b		pld		                PLD
.1931cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1931d1		18		clc		              CLC
.1931d2		a5 27		lda $27		              LDA OPL2_CHANNEL
.1931d4		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1931d6		69 c0		adc #$c0	              ADC #$C0
.1931d8		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1931da		a9 00		lda #$00	              LDA #$00
.1931dc		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1931de		c2 30		rep #$30	                REP #$30        ; set A&X long
.1931e0		18		clc		              CLC
.1931e1		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931e4		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1931e6		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1931e8		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1931eb		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1931ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1931ef		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931f1		29 e0		and #$e0	              AND #$E0
.1931f3		4a		lsr a		              LSR
.1931f4		6b		rtl		              RTL
.1931f5						OPL2_GET_SYNTHMODE
.1931f5		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1931f8		2b		pld		                PLD
.1931f9		e2 20		sep #$20	                SEP #$20        ; set A short
.1931fb		18		clc		              CLC
.1931fc		a5 27		lda $27		              LDA OPL2_CHANNEL
.1931fe		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193200		69 c0		adc #$c0	              ADC #$C0
.193202		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193204		a9 00		lda #$00	              LDA #$00
.193206		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193208		c2 30		rep #$30	                REP #$30        ; set A&X long
.19320a		18		clc		              CLC
.19320b		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19320e		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193210		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193212		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193215		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193217		e2 20		sep #$20	                SEP #$20        ; set A short
.193219		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19321b		29 01		and #$01	              AND #$01
.19321d		6b		rtl		              RTL
.19321e						OPL2_GET_DEEPTREMOLO
.19321e		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193221		2b		pld		                PLD
.193222		c2 20		rep #$20	                REP #$20        ; set A long
.193224		a9 bd 00	lda #$00bd	              LDA #$00BD;
.193227		85 28		sta $28		              STA OPL2_REG_REGION
.193229		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.19322c		e2 20		sep #$20	                SEP #$20        ; set A short
.19322e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193230		29 80		and #$80	              AND #$80
.193232		6b		rtl		              RTL
.193233						OPL2_GET_DEEPVIBRATO
.193233		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193236		2b		pld		                PLD
.193237		c2 20		rep #$20	                REP #$20        ; set A long
.193239		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19323c		69 bd 00	adc #$00bd	              ADC #$00BD
.19323f		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193241		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193244		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193246		e2 20		sep #$20	                SEP #$20        ; set A short
.193248		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19324a		29 40		and #$40	              AND #$40
.19324c		6b		rtl		              RTL
.19324d						OPL2_GET_PERCUSSION
.19324d		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193250		2b		pld		                PLD
.193251		c2 20		rep #$20	                REP #$20        ; set A long
.193253		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193256		69 bd 00	adc #$00bd	              ADC #$00BD
.193259		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19325b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19325e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193260		e2 20		sep #$20	                SEP #$20        ; set A short
.193262		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193264		29 20		and #$20	              AND #$20
.193266		6b		rtl		              RTL
.193267						OPL2_GET_DRUMS
.193267		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19326a		2b		pld		                PLD
.19326b		c2 20		rep #$20	                REP #$20        ; set A long
.19326d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193270		69 bd 00	adc #$00bd	              ADC #$00BD
.193273		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193275		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193278		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19327a		e2 20		sep #$20	                SEP #$20        ; set A short
.19327c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19327e		29 1f		and #$1f	              AND #$1F
.193280		6b		rtl		              RTL
.193281						OPL2_Get_WaveForm
.193281		6b		rtl		                RTL
.193282						OPL2_PLAYNOTE
.193282		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193285		2b		pld		                PLD
.193286		e2 20		sep #$20	                SEP #$20        ; set A short
.193288		da		phx		                PHX
.193289		a9 00		lda #$00	                LDA #$00
.19328b		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.19328d		20 bb 37	jsr $1937bb	                JSR OPL2_SET_KEYON
.193290		20 86 37	jsr $193786	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.193293		e2 10		sep #$10	                SEP #$10        ; set X short
.193295		a5 30		lda $30		                LDA OPL2_NOTE
.193297		3a		dec a		                DEC A
.193298		0a		asl a		                ASL A
.193299		aa		tax		                TAX
.19329a		bf 5b 10 19	lda $19105b,x	                LDA @lnoteFNumbers,X
.19329e		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.1932a0		e8		inx		                INX
.1932a1		bf 5b 10 19	lda $19105b,x	                LDA @lnoteFNumbers,X
.1932a5		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.1932a7		22 10 37 19	jsl $193710	                JSL OPL2_SET_FNUMBER
.1932ab		a9 01		lda #$01	                LDA #$01
.1932ad		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.1932af		20 bb 37	jsr $1937bb	                JSR OPL2_SET_KEYON
.1932b2		c2 10		rep #$10	                REP #$10        ; set X long
.1932b4		fa		plx		                PLX
.1932b5		6b		rtl		                RTL
.1932b6						OPL2_PLAYDRUM
.1932b6		6b		rtl		                RTL
.1932b7						OPL2_SET_INSTRUMENT
.1932b7		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1932ba		2b		pld		                PLD
.1932bb		38		sec		              SEC ; Set the WaveFormSelect to True
.1932bc		22 99 34 19	jsl $193499	              JSL OPL2_SET_WAVEFORMSELECT;
.1932c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1932c2		c2 10		rep #$10	                REP #$10        ; set X long
.1932c4		a0 00 00	ldy #$0000	              LDY #$0000
.1932c7		a2 00 00	ldx #$0000	              LDX #$0000
.1932ca		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.1932cc		85 35		sta $35		              STA OPL2_PARAMETER3
.1932ce		c8		iny		              INY
.1932cf		c9 06		cmp #$06	              CMP #$06
.1932d1		d0 03		bne $1932d6	              BNE PERCUSSION_NEXT07
.1932d3		82 70 01	brl $193446	              BRL Percussion_6
.1932d6						PERCUSSION_NEXT07
.1932d6		c9 07		cmp #$07	              CMP #$07
.1932d8		d0 03		bne $1932dd	              BNE PERCUSSION_NEXT08
.1932da		82 44 01	brl $193421	              BRL Percussion_7
.1932dd						PERCUSSION_NEXT08
.1932dd		c9 08		cmp #$08	              CMP #$08
.1932df		d0 03		bne $1932e4	              BNE PERCUSSION_NEXT09
.1932e1		82 18 01	brl $1933fc	              BRL Percussion_8
.1932e4						PERCUSSION_NEXT09
.1932e4		c9 09		cmp #$09	              CMP #$09
.1932e6		d0 03		bne $1932eb	              BNE PERCUSSION_NEXT0A
.1932e8		82 ec 00	brl $1933d7	              BRL Percussion_9
.1932eb						PERCUSSION_NEXT0A
.1932eb		c9 0a		cmp #$0a	              CMP #$0A
.1932ed		d0 03		bne $1932f2	              BNE Percussion_Default
.1932ef		82 c0 00	brl $1933b2	              BRL Percussion_A
.1932f2						Percussion_Default
.1932f2		a9 00		lda #$00	              LDA #$00
.1932f4		85 26		sta $26		              STA OPL2_OPERATOR
.1932f6		c2 20		rep #$20	                REP #$20        ; set A long
.1932f8		a9 20 00	lda #$0020	              LDA #$0020;
.1932fb		85 28		sta $28		              STA OPL2_REG_REGION
.1932fd		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193300		e2 20		sep #$20	                SEP #$20        ; set A short
.193302		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193304		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193306		c8		iny		              INY
.193307		c2 20		rep #$20	                REP #$20        ; set A long
.193309		a9 40 00	lda #$0040	              LDA #$0040;
.19330c		85 28		sta $28		              STA OPL2_REG_REGION
.19330e		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193311		e2 20		sep #$20	                SEP #$20        ; set A short
.193313		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193315		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193317		c8		iny		              INY
.193318		c2 20		rep #$20	                REP #$20        ; set A long
.19331a		a9 60 00	lda #$0060	              LDA #$0060;
.19331d		85 28		sta $28		              STA OPL2_REG_REGION
.19331f		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193322		e2 20		sep #$20	                SEP #$20        ; set A short
.193324		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193326		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193328		c8		iny		              INY
.193329		c2 20		rep #$20	                REP #$20        ; set A long
.19332b		a9 80 00	lda #$0080	              LDA #$0080;
.19332e		85 28		sta $28		              STA OPL2_REG_REGION
.193330		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193333		e2 20		sep #$20	                SEP #$20        ; set A short
.193335		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193337		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193339		c8		iny		              INY
.19333a		c2 20		rep #$20	                REP #$20        ; set A long
.19333c		a9 e0 00	lda #$00e0	              LDA #$00E0;
.19333f		85 28		sta $28		              STA OPL2_REG_REGION
.193341		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193344		e2 20		sep #$20	                SEP #$20        ; set A short
.193346		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193348		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19334a		c8		iny		              INY
.19334b		e2 10		sep #$10	                SEP #$10        ; set X short
.19334d		a5 27		lda $27		              LDA OPL2_CHANNEL
.19334f		29 0f		and #$0f	              AND #$0F
.193351		aa		tax		              TAX
.193352		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.193354		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.193358		c8		iny		              INY
.193359		a9 01		lda #$01	              LDA #$01
.19335b		85 26		sta $26		              STA OPL2_OPERATOR
.19335d		c2 20		rep #$20	                REP #$20        ; set A long
.19335f		a9 20 00	lda #$0020	              LDA #$0020;
.193362		85 28		sta $28		              STA OPL2_REG_REGION
.193364		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193367		e2 20		sep #$20	                SEP #$20        ; set A short
.193369		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.19336b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19336d		c8		iny		              INY
.19336e		c2 20		rep #$20	                REP #$20        ; set A long
.193370		a9 40 00	lda #$0040	              LDA #$0040;
.193373		85 28		sta $28		              STA OPL2_REG_REGION
.193375		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193378		e2 20		sep #$20	                SEP #$20        ; set A short
.19337a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.19337c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19337e		c8		iny		              INY
.19337f		c2 20		rep #$20	                REP #$20        ; set A long
.193381		a9 60 00	lda #$0060	              LDA #$0060;
.193384		85 28		sta $28		              STA OPL2_REG_REGION
.193386		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193389		e2 20		sep #$20	                SEP #$20        ; set A short
.19338b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.19338d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19338f		c8		iny		              INY
.193390		c2 20		rep #$20	                REP #$20        ; set A long
.193392		a9 80 00	lda #$0080	              LDA #$0080;
.193395		85 28		sta $28		              STA OPL2_REG_REGION
.193397		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.19339a		e2 20		sep #$20	                SEP #$20        ; set A short
.19339c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.19339e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933a0		c8		iny		              INY
.1933a1		c2 20		rep #$20	                REP #$20        ; set A long
.1933a3		a9 e0 00	lda #$00e0	              LDA #$00E0;
.1933a6		85 28		sta $28		              STA OPL2_REG_REGION
.1933a8		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.1933ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1933ad		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.1933af		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933b1		6b		rtl		                RTL
.1933b2						Percussion_A
.1933b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1933b4		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1933b6		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.1933ba		c8		iny		              INY
.1933bb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1933bd		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.1933c1		c8		iny		              INY
.1933c2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1933c4		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.1933c8		c8		iny		              INY
.1933c9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1933cb		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.1933cf		c8		iny		              INY
.1933d0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1933d2		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.1933d6		6b		rtl		                RTL
.1933d7						Percussion_9
.1933d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1933d9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1933db		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.1933df		c8		iny		              INY
.1933e0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1933e2		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.1933e6		c8		iny		              INY
.1933e7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1933e9		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.1933ed		c8		iny		              INY
.1933ee		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1933f0		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.1933f4		c8		iny		              INY
.1933f5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1933f7		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.1933fb		6b		rtl		              RTL
.1933fc						Percussion_8
.1933fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1933fe		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193400		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.193404		c8		iny		              INY
.193405		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193407		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.19340b		c8		iny		              INY
.19340c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19340e		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.193412		c8		iny		              INY
.193413		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193415		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.193419		c8		iny		              INY
.19341a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19341c		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.193420		6b		rtl		              RTL
.193421						Percussion_7
.193421		e2 20		sep #$20	                SEP #$20        ; set A short
.193423		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193425		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.193429		c8		iny		              INY
.19342a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19342c		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.193430		c8		iny		              INY
.193431		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193433		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.193437		c8		iny		              INY
.193438		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19343a		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.19343e		c8		iny		              INY
.19343f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193441		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.193445		6b		rtl		              RTL
.193446						Percussion_6
.193446		e2 20		sep #$20	                SEP #$20        ; set A short
.193448		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19344a		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.19344e		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.193452		c8		iny		              INY
.193453		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193455		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.193459		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.19345d		c8		iny		              INY
.19345e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193460		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.193464		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.193468		c8		iny		              INY
.193469		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19346b		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.19346f		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.193473		c8		iny		              INY
.193474		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193476		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.19347a		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.19347e		6b		rtl		              RTL
.19347f						OPL2_SET_REGISTER
.19347f		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193482		2b		pld		                PLD
.193483		c2 20		rep #$20	                REP #$20        ; set A long
.193485		18		clc		              CLC
.193486		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193489		65 32		adc $32		              ADC OPL2_PARAMETER0
.19348b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19348d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193490		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193492		e2 20		sep #$20	                SEP #$20        ; set A short
.193494		a5 33		lda $33		              LDA OPL2_PARAMETER1
.193496		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193498		6b		rtl		              RTL
.193499						OPL2_SET_WAVEFORMSELECT
.193499		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19349c		2b		pld		                PLD
.19349d		c2 20		rep #$20	                REP #$20        ; set A long
.19349f		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.1934a2		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1934a4		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1934a7		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1934a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1934ab		b0 07		bcs $1934b4	              BCS OPL2_Set_WaveFormSelect_set
.1934ad		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1934af		29 df		and #$df	              AND #$DF
.1934b1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1934b3		6b		rtl		              RTL
.1934b4						OPL2_Set_WaveFormSelect_set
.1934b4		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1934b7		2b		pld		                PLD
.1934b8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1934ba		09 20		ora #$20	              ORA #$20
.1934bc		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1934be		6b		rtl		                RTL
.1934bf						OPL2_SET_TREMOLO
.1934bf		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1934c2		2b		pld		                PLD
.1934c3		08		php		                PHP ; Push the Carry
.1934c4		c2 20		rep #$20	                REP #$20        ; set A long
.1934c6		18		clc		                CLC
.1934c7		a9 20 00	lda #$0020	                LDA #$0020 ;
.1934ca		85 28		sta $28		                STA OPL2_REG_REGION
.1934cc		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.1934cf		28		plp		                PLP ; Pull the Carry out
.1934d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1934d2		b0 08		bcs $1934dc	                BCS OPL2_Set_Tremolo_Set;
.1934d4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1934d6		29 7f		and #$7f	                AND #$7F
.1934d8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1934da		80 06		bra $1934e2	                BRA OPL2_Set_Tremolo_Exit
.1934dc						OPL2_Set_Tremolo_Set
.1934dc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1934de		09 80		ora #$80	                ORA #$80
.1934e0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1934e2						OPL2_Set_Tremolo_Exit
.1934e2		6b		rtl		                RTL
.1934e3						OPL2_GET_TREMOLO
.1934e3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1934e6		2b		pld		                PLD
.1934e7		c2 20		rep #$20	                REP #$20        ; set A long
.1934e9		a9 20 00	lda #$0020	                LDA #$0020;
.1934ec		85 28		sta $28		                STA OPL2_REG_REGION
.1934ee		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.1934f1		e2 20		sep #$20	                SEP #$20        ; set A short
.1934f3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1934f5		29 80		and #$80	                AND #$80
.1934f7		6b		rtl		                RTL
.1934f8						OPL2_SET_VIBRATO
.1934f8		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1934fb		2b		pld		                PLD
.1934fc		08		php		                PHP ; Push the Carry
.1934fd		c2 20		rep #$20	                REP #$20        ; set A long
.1934ff		18		clc		                CLC
.193500		a9 20 00	lda #$0020	                LDA #$0020;
.193503		85 28		sta $28		                STA OPL2_REG_REGION
.193505		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.193508		28		plp		                PLP ; Pull the Carry out
.193509		e2 20		sep #$20	                SEP #$20        ; set A short
.19350b		b0 08		bcs $193515	                BCS OPL2_Set_Vibrato_Set;
.19350d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19350f		29 bf		and #$bf	                AND #$BF
.193511		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193513		80 06		bra $19351b	                BRA OPL2_Set_Vibrato_Exit
.193515						OPL2_Set_Vibrato_Set
.193515		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193517		09 40		ora #$40	                ORA #$40
.193519		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19351b						OPL2_Set_Vibrato_Exit
.19351b		6b		rtl		                RTL
.19351c						OPL2_GET_VIBRATO
.19351c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19351f		2b		pld		                PLD
.193520		c2 20		rep #$20	                REP #$20        ; set A long
.193522		a9 20 00	lda #$0020	                LDA #$0020;
.193525		85 28		sta $28		                STA OPL2_REG_REGION
.193527		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.19352a		e2 20		sep #$20	                SEP #$20        ; set A short
.19352c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19352e		29 40		and #$40	                AND #$40
.193530		6b		rtl		                RTL
.193531						OPL2_SET_MAINTAINSUSTAIN
.193531		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193534		2b		pld		                PLD
.193535		08		php		              PHP ; Push the Carry
.193536		c2 20		rep #$20	                REP #$20        ; set A long
.193538		18		clc		              CLC
.193539		a9 20 00	lda #$0020	              LDA #$0020;
.19353c		85 28		sta $28		              STA OPL2_REG_REGION
.19353e		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193541		28		plp		              PLP ; Pull the Carry out
.193542		e2 20		sep #$20	                SEP #$20        ; set A short
.193544		b0 08		bcs $19354e	              BCS OPL2_Set_MaintainSustain_Set;
.193546		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193548		29 df		and #$df	              AND #$DF
.19354a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19354c		80 06		bra $193554	              BRA OPL2_Set_MaintainSustain_Exit
.19354e						OPL2_Set_MaintainSustain_Set
.19354e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193550		09 20		ora #$20	              ORA #$20
.193552		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193554						OPL2_Set_MaintainSustain_Exit
.193554		6b		rtl		                RTL
.193555						OPL2_GET_MAINTAINSUSTAIN
.193555		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193558		2b		pld		                PLD
.193559		c2 20		rep #$20	                REP #$20        ; set A long
.19355b		a9 20 00	lda #$0020	              LDA #$0020;
.19355e		85 28		sta $28		              STA OPL2_REG_REGION
.193560		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.193563		e2 20		sep #$20	                SEP #$20        ; set A short
.193565		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193567		29 20		and #$20	              AND #$20
.193569		6b		rtl		                RTL
.19356a						OPL2_SET_ENVELOPESCALING
.19356a		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19356d		2b		pld		                PLD
.19356e		08		php		              PHP ; Push the Carry
.19356f		c2 20		rep #$20	                REP #$20        ; set A long
.193571		18		clc		              CLC
.193572		a9 20 00	lda #$0020	              LDA #$0020;
.193575		85 28		sta $28		              STA OPL2_REG_REGION
.193577		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.19357a		28		plp		              PLP ; Pull the Carry out
.19357b		e2 20		sep #$20	                SEP #$20        ; set A short
.19357d		b0 08		bcs $193587	              BCS OPL2_Set_EnvelopeScaling_Set;
.19357f		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193581		29 ef		and #$ef	              AND #$EF
.193583		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193585		80 06		bra $19358d	              BRA OPL2_Set_EnvelopeScaling_Exit
.193587						OPL2_Set_EnvelopeScaling_Set
.193587		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193589		09 10		ora #$10	              ORA #$10
.19358b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19358d						OPL2_Set_EnvelopeScaling_Exit
.19358d		6b		rtl		                RTL
.19358e						OPL2_GET_ENVELOPESCALING
.19358e		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193591		2b		pld		                PLD
.193592		c2 20		rep #$20	                REP #$20        ; set A long
.193594		a9 20 00	lda #$0020	              LDA #$0020;
.193597		85 28		sta $28		              STA OPL2_REG_REGION
.193599		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.19359c		e2 20		sep #$20	                SEP #$20        ; set A short
.19359e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1935a0		29 10		and #$10	              AND #$10
.1935a2		6b		rtl		                RTL
.1935a3						OPL2_GET_MODFREQMULTIPLE
.1935a3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1935a6		2b		pld		                PLD
.1935a7		c2 20		rep #$20	                REP #$20        ; set A long
.1935a9		a9 20 00	lda #$0020	              LDA #$0020;
.1935ac		85 28		sta $28		              STA OPL2_REG_REGION
.1935ae		20 0a 39	jsr $19390a	              JSR OPL2_GET_REG_OFFSET
.1935b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1935b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1935b5		29 0f		and #$0f	              AND #$0F
.1935b7		6b		rtl		              RTL
.1935b8						OPL2_SET_MODFREQMULTIPLE
.1935b8		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1935bb		2b		pld		                PLD
.1935bc		c2 20		rep #$20	                REP #$20        ; set A long
.1935be		a9 20 00	lda #$0020	                LDA #$0020;
.1935c1		85 28		sta $28		                STA OPL2_REG_REGION
.1935c3		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.1935c6		e2 20		sep #$20	                SEP #$20        ; set A short
.1935c8		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1935ca		29 0f		and #$0f	                AND #$0F
.1935cc		85 32		sta $32		                STA OPL2_PARAMETER0
.1935ce		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935d0		29 f0		and #$f0	                AND #$F0
.1935d2		05 32		ora $32		                ORA OPL2_PARAMETER0
.1935d4		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935d6		6b		rtl		                RTL
.1935d7						OPL2_SET_SCALINGLEVEL
.1935d7		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1935da		2b		pld		                PLD
.1935db		c2 20		rep #$20	                REP #$20        ; set A long
.1935dd		a9 40 00	lda #$0040	                LDA #$0040;
.1935e0		85 28		sta $28		                STA OPL2_REG_REGION
.1935e2		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.1935e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1935e7		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1935e9		29 03		and #$03	                AND #$03
.1935eb		0a		asl a		                ASL
.1935ec		0a		asl a		                ASL
.1935ed		0a		asl a		                ASL
.1935ee		0a		asl a		                ASL
.1935ef		0a		asl a		                ASL
.1935f0		0a		asl a		                ASL
.1935f1		85 32		sta $32		                STA OPL2_PARAMETER0
.1935f3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935f5		29 3f		and #$3f	                AND #$3F
.1935f7		05 32		ora $32		                ORA OPL2_PARAMETER0
.1935f9		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935fb		6b		rtl		                RTL
.1935fc						OPL2_SET_VOLUME
.1935fc		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1935ff		2b		pld		                PLD
.193600		c2 20		rep #$20	                REP #$20        ; set A long
.193602		a9 40 00	lda #$0040	                LDA #$0040  ;
.193605		85 28		sta $28		                STA OPL2_REG_REGION
.193607		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.19360a		e2 20		sep #$20	                SEP #$20        ; set A short
.19360c		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.19360e		29 3f		and #$3f	                AND #$3F
.193610		85 32		sta $32		                STA OPL2_PARAMETER0
.193612		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193614		29 c0		and #$c0	                AND #$C0
.193616		05 32		ora $32		                ORA OPL2_PARAMETER0
.193618		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19361a		6b		rtl		                RTL
.19361b						OPL2_GET_VOLUME
.19361b		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19361e		2b		pld		                PLD
.19361f		c2 20		rep #$20	                REP #$20        ; set A long
.193621		a9 40 00	lda #$0040	                LDA #$0040  ;
.193624		85 28		sta $28		                STA OPL2_REG_REGION
.193626		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.193629		e2 20		sep #$20	                SEP #$20        ; set A short
.19362b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19362d		29 3f		and #$3f	                AND #$3F
.19362f		6b		rtl		                RTL
.193630						OPL2_SET_ATTACK
.193630		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193633		2b		pld		                PLD
.193634		c2 20		rep #$20	                REP #$20        ; set A long
.193636		a9 60 00	lda #$0060	                LDA #$0060  ;
.193639		85 28		sta $28		                STA OPL2_REG_REGION
.19363b		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.19363e		e2 20		sep #$20	                SEP #$20        ; set A short
.193640		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193642		29 0f		and #$0f	                AND #$0F
.193644		0a		asl a		                ASL
.193645		0a		asl a		                ASL
.193646		0a		asl a		                ASL
.193647		0a		asl a		                ASL
.193648		85 32		sta $32		                STA OPL2_PARAMETER0
.19364a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19364c		29 0f		and #$0f	                AND #$0F
.19364e		05 32		ora $32		                ORA OPL2_PARAMETER0
.193650		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193652		6b		rtl		                RTL
.193653						OPL2_GET_ATTACK
.193653		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193656		2b		pld		                PLD
.193657		c2 20		rep #$20	                REP #$20        ; set A long
.193659		a9 60 00	lda #$0060	                LDA #$0060
.19365c		85 28		sta $28		                STA OPL2_REG_REGION
.19365e		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.193661		e2 20		sep #$20	                SEP #$20        ; set A short
.193663		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193665		29 f0		and #$f0	                AND #$F0
.193667		4a		lsr a		                LSR
.193668		4a		lsr a		                LSR
.193669		4a		lsr a		                LSR
.19366a		4a		lsr a		                LSR
.19366b		6b		rtl		                RTL
.19366c						OPL2_SET_DECAY
.19366c		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19366f		2b		pld		                PLD
.193670		c2 20		rep #$20	                REP #$20        ; set A long
.193672		a9 60 00	lda #$0060	                LDA #$0060;
.193675		85 28		sta $28		                STA OPL2_REG_REGION
.193677		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.19367a		e2 20		sep #$20	                SEP #$20        ; set A short
.19367c		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.19367e		29 0f		and #$0f	                AND #$0F
.193680		85 32		sta $32		                STA OPL2_PARAMETER0
.193682		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193684		29 f0		and #$f0	                AND #$F0
.193686		05 32		ora $32		                ORA OPL2_PARAMETER0
.193688		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19368a		6b		rtl		                RTL
.19368b						OPL2_GET_DECAY
.19368b		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.19368e		2b		pld		                PLD
.19368f		c2 20		rep #$20	                REP #$20        ; set A long
.193691		a9 60 00	lda #$0060	                LDA #$0060
.193694		85 28		sta $28		                STA OPL2_REG_REGION
.193696		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.193699		e2 20		sep #$20	                SEP #$20        ; set A short
.19369b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19369d		29 0f		and #$0f	                AND #$0F
.19369f		6b		rtl		                RTL
.1936a0						OPL2_SET_SUSTAIN
.1936a0		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1936a3		2b		pld		                PLD
.1936a4		c2 20		rep #$20	                REP #$20        ; set A long
.1936a6		a9 80 00	lda #$0080	                LDA #$0080;
.1936a9		85 28		sta $28		                STA OPL2_REG_REGION
.1936ab		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.1936ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1936b0		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1936b2		29 0f		and #$0f	                AND #$0F
.1936b4		0a		asl a		                ASL
.1936b5		0a		asl a		                ASL
.1936b6		0a		asl a		                ASL
.1936b7		0a		asl a		                ASL
.1936b8		85 32		sta $32		                STA OPL2_PARAMETER0
.1936ba		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936bc		29 0f		and #$0f	                AND #$0F
.1936be		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936c0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936c2		6b		rtl		                RTL
.1936c3						OPL2_GET_SUSTAIN
.1936c3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1936c6		2b		pld		                PLD
.1936c7		c2 20		rep #$20	                REP #$20        ; set A long
.1936c9		a9 80 00	lda #$0080	                LDA #$0080
.1936cc		85 28		sta $28		                STA OPL2_REG_REGION
.1936ce		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.1936d1		e2 20		sep #$20	                SEP #$20        ; set A short
.1936d3		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936d5		29 f0		and #$f0	                AND #$F0
.1936d7		4a		lsr a		                LSR
.1936d8		4a		lsr a		                LSR
.1936d9		4a		lsr a		                LSR
.1936da		4a		lsr a		                LSR
.1936db		6b		rtl		                RTL
.1936dc						OPL2_SET_RELEASE
.1936dc		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1936df		2b		pld		                PLD
.1936e0		c2 20		rep #$20	                REP #$20        ; set A long
.1936e2		a9 80 00	lda #$0080	                LDA #$0080;
.1936e5		85 28		sta $28		                STA OPL2_REG_REGION
.1936e7		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.1936ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1936ec		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1936ee		29 0f		and #$0f	                AND #$0F
.1936f0		85 32		sta $32		                STA OPL2_PARAMETER0
.1936f2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936f4		29 f0		and #$f0	                AND #$F0
.1936f6		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936f8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936fa		6b		rtl		                RTL
.1936fb						OPL2_GET_RELEASE
.1936fb		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1936fe		2b		pld		                PLD
.1936ff		c2 20		rep #$20	                REP #$20        ; set A long
.193701		a9 80 00	lda #$0080	                LDA #$0080
.193704		85 28		sta $28		                STA OPL2_REG_REGION
.193706		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.193709		e2 20		sep #$20	                SEP #$20        ; set A short
.19370b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19370d		29 0f		and #$0f	                AND #$0F
.19370f		6b		rtl		                RTL
.193710						OPL2_SET_FNUMBER
.193710		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193713		2b		pld		                PLD
.193714		e2 20		sep #$20	                SEP #$20        ; set A short
.193716		18		clc		                CLC
.193717		a5 27		lda $27		                LDA OPL2_CHANNEL
.193719		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19371b		69 a0		adc #$a0	                ADC #$A0
.19371d		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19371f		a9 00		lda #$00	                LDA #$00
.193721		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193723		c2 30		rep #$30	                REP #$30        ; set A&X long
.193725		18		clc		                CLC
.193726		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193729		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19372b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19372d		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193730		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193732		e2 20		sep #$20	                SEP #$20        ; set A short
.193734		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.193736		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.193738		18		clc		                CLC
.193739		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.19373b		69 10		adc #$10	                ADC #$10
.19373d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19373f		a5 33		lda $33		                LDA OPL2_PARAMETER1
.193741		29 03		and #$03	                AND #$03
.193743		85 33		sta $33		                STA OPL2_PARAMETER1
.193745		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193747		29 fc		and #$fc	                AND #$FC
.193749		05 33		ora $33		                ORA OPL2_PARAMETER1
.19374b		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19374d		6b		rtl		                RTL
.19374e						OPL2_GET_FNUMBER
.19374e		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193751		2b		pld		                PLD
.193752		e2 20		sep #$20	                SEP #$20        ; set A short
.193754		18		clc		                CLC
.193755		a5 27		lda $27		                LDA OPL2_CHANNEL
.193757		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193759		69 a0		adc #$a0	                ADC #$A0
.19375b		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19375d		a9 00		lda #$00	                LDA #$00
.19375f		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193761		c2 30		rep #$30	                REP #$30        ; set A&X long
.193763		18		clc		                CLC
.193764		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193767		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193769		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19376b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.19376e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193770		e2 20		sep #$20	                SEP #$20        ; set A short
.193772		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193774		85 32		sta $32		                STA OPL2_PARAMETER0
.193776		18		clc		                CLC
.193777		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193779		69 10		adc #$10	                ADC #$10
.19377b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19377d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19377f		29 03		and #$03	                AND #$03
.193781		85 33		sta $33		                STA OPL2_PARAMETER1
.193783		6b		rtl		                RTL
.193784						OPL2_Set_Frequency
.193784		6b		rtl		                RTL
.193785						OPL2_Get_Frequency
.193785		6b		rtl		                RTL
.193786						OPL2_SET_BLOCK
.193786		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193789		2b		pld		                PLD
.19378a		e2 20		sep #$20	                SEP #$20        ; set A short
.19378c		18		clc		                CLC
.19378d		a5 27		lda $27		                LDA OPL2_CHANNEL
.19378f		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193791		69 b0		adc #$b0	                ADC #$B0
.193793		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193795		a9 00		lda #$00	                LDA #$00
.193797		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193799		c2 30		rep #$30	                REP #$30        ; set A&X long
.19379b		18		clc		                CLC
.19379c		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19379f		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1937a1		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1937a3		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1937a6		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1937a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1937aa		a5 31		lda $31		                LDA OPL2_OCTAVE
.1937ac		29 07		and #$07	                AND #$07
.1937ae		0a		asl a		                ASL
.1937af		0a		asl a		                ASL
.1937b0		85 31		sta $31		                STA OPL2_OCTAVE
.1937b2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937b4		29 e3		and #$e3	                AND #$E3
.1937b6		05 31		ora $31		                ORA OPL2_OCTAVE
.1937b8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937ba		60		rts		                RTS
.1937bb						OPL2_SET_KEYON
.1937bb		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1937be		2b		pld		                PLD
.1937bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1937c1		18		clc		                CLC
.1937c2		a5 27		lda $27		                LDA OPL2_CHANNEL
.1937c4		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1937c6		69 b0		adc #$b0	                ADC #$B0
.1937c8		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1937ca		a9 00		lda #$00	                LDA #$00
.1937cc		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1937ce		c2 30		rep #$30	                REP #$30        ; set A&X long
.1937d0		18		clc		                CLC
.1937d1		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1937d4		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1937d6		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1937d8		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1937db		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1937dd		e2 20		sep #$20	                SEP #$20        ; set A short
.1937df		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1937e1		29 01		and #$01	                AND #$01
.1937e3		f0 02		beq $1937e7	                BEQ SET_KEYON_OFF
.1937e5		a9 20		lda #$20	                LDA #$20
.1937e7						    SET_KEYON_OFF
.1937e7		85 32		sta $32		                STA OPL2_PARAMETER0
.1937e9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937eb		29 df		and #$df	                AND #$DF
.1937ed		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937ef		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937f1		60		rts		                RTS
.1937f2						OPL2_SET_FEEDBACK
.1937f2		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1937f5		2b		pld		                PLD
.1937f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1937f8		18		clc		              CLC
.1937f9		a5 27		lda $27		              LDA OPL2_CHANNEL
.1937fb		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1937fd		69 c0		adc #$c0	              ADC #$C0
.1937ff		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193801		a9 00		lda #$00	              LDA #$00
.193803		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193805		c2 30		rep #$30	                REP #$30        ; set A&X long
.193807		18		clc		              CLC
.193808		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19380b		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19380d		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19380f		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193812		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193814		e2 20		sep #$20	                SEP #$20        ; set A short
.193816		a5 32		lda $32		              LDA OPL2_PARAMETER0
.193818		29 07		and #$07	              AND #$07
.19381a		0a		asl a		              ASL
.19381b		85 32		sta $32		              STA OPL2_PARAMETER0
.19381d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19381f		29 01		and #$01	              AND #$01
.193821		05 32		ora $32		              ORA OPL2_PARAMETER0
.193823		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193825		6b		rtl		                RTL
.193826						OPL2_SET_SYNTHMODE
.193826		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193829		2b		pld		                PLD
.19382a		08		php		              PHP ; Push the Carry
.19382b		e2 20		sep #$20	                SEP #$20        ; set A short
.19382d		18		clc		              CLC
.19382e		a5 27		lda $27		              LDA OPL2_CHANNEL
.193830		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193832		69 c0		adc #$c0	              ADC #$C0
.193834		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193836		a9 00		lda #$00	              LDA #$00
.193838		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19383a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19383c		18		clc		              CLC
.19383d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193840		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193842		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193844		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193847		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193849		28		plp		              PLP ; Pull the Carry out
.19384a		e2 20		sep #$20	                SEP #$20        ; set A short
.19384c		b0 08		bcs $193856	              BCS OPL2_Set_Synthmode_Set;
.19384e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193850		29 fe		and #$fe	              AND #$FE
.193852		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193854		80 06		bra $19385c	              BRA OPL2_Set_Synthmode_Exit
.193856						OPL2_Set_Synthmode_Set
.193856		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193858		09 01		ora #$01	              ORA #$01
.19385a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19385c						OPL2_Set_Synthmode_Exit
.19385c		6b		rtl		                RTL
.19385d						OPL2_SET_DEEPTREMOLO
.19385d		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193860		2b		pld		                PLD
.193861		c2 20		rep #$20	                REP #$20        ; set A long
.193863		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.193866		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193868		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19386b		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19386d		e2 20		sep #$20	                SEP #$20        ; set A short
.19386f		b0 08		bcs $193879	              BCS OPL2_Set_DeepTremolo_Set;
.193871		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193873		29 7f		and #$7f	              AND #$7F
.193875		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193877		80 06		bra $19387f	              BRA OPL2_Set_DeepTremolo_Exit
.193879						OPL2_Set_DeepTremolo_Set
.193879		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19387b		09 80		ora #$80	              ORA #$80
.19387d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19387f						OPL2_Set_DeepTremolo_Exit
.19387f		6b		rtl		                RTL
.193880						OPL2_SET_DEEPVIBRATO
.193880		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.193883		2b		pld		                PLD
.193884		c2 20		rep #$20	                REP #$20        ; set A long
.193886		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.193889		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19388b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19388e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193890		e2 20		sep #$20	                SEP #$20        ; set A short
.193892		b0 08		bcs $19389c	              BCS OPL2_Set_DeepVibrato_Set;
.193894		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193896		29 bf		and #$bf	              AND #$BF
.193898		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19389a		80 06		bra $1938a2	              BRA OPL2_Set_DeepVibrato_Exit
.19389c						OPL2_Set_DeepVibrato_Set
.19389c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19389e		09 40		ora #$40	              ORA #$40
.1938a0		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1938a2						OPL2_Set_DeepVibrato_Exit
.1938a2		6b		rtl		                RTL
.1938a3						OPL2_SET_PERCUSSION
.1938a3		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1938a6		2b		pld		                PLD
.1938a7		c2 20		rep #$20	                REP #$20        ; set A long
.1938a9		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.1938ac		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938ae		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938b1		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1938b5		b0 08		bcs $1938bf	                BCS OPL2_Set_Percussion_Set;
.1938b7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938b9		29 df		and #$df	                AND #$DF
.1938bb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938bd		80 06		bra $1938c5	                BRA OPL2_Set_Percussion_Exit
.1938bf						OPL2_Set_Percussion_Set
.1938bf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938c1		09 20		ora #$20	                ORA #$20
.1938c3		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938c5						OPL2_Set_Percussion_Exit
.1938c5		6b		rtl		                RTL
.1938c6						OPL2_SET_DRUMS
.1938c6		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1938c9		2b		pld		                PLD
.1938ca		c2 20		rep #$20	                REP #$20        ; set A long
.1938cc		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.1938cf		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938d1		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938d4		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938d6		e2 20		sep #$20	                SEP #$20        ; set A short
.1938d8		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1938da		29 1f		and #$1f	                AND #$1F
.1938dc		85 32		sta $32		                STA OPL2_PARAMETER0
.1938de		49 ff		eor #$ff	                EOR #$FF
.1938e0		85 33		sta $33		                STA OPL2_PARAMETER1
.1938e2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938e4		25 33		and $33		                AND OPL2_PARAMETER1
.1938e6		05 32		ora $32		                ORA OPL2_PARAMETER0
.1938e8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938ea		6b		rtl		                RTL
.1938eb						OPL2_SET_WAVEFORM
.1938eb		f4 00 00	pea #$0000	                PEA #BANK0_BEGIN         ; set DP to page 0
.1938ee		2b		pld		                PLD
.1938ef		c2 20		rep #$20	                REP #$20        ; set A long
.1938f1		a9 e0 00	lda #$00e0	                LDA #$00E0;
.1938f4		85 28		sta $28		                STA OPL2_REG_REGION
.1938f6		20 0a 39	jsr $19390a	                JSR OPL2_GET_REG_OFFSET
.1938f9		e2 20		sep #$20	                SEP #$20        ; set A short
.1938fb		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1938fd		29 03		and #$03	                AND #$03
.1938ff		85 32		sta $32		                STA OPL2_PARAMETER0
.193901		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193903		29 fc		and #$fc	                AND #$FC
.193905		05 32		ora $32		                ORA OPL2_PARAMETER0
.193907		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193909		6b		rtl		                RTL
.19390a						OPL2_GET_REG_OFFSET
.19390a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19390c		a5 27		lda $27		                LDA OPL2_CHANNEL
.19390e		29 0f		and #$0f	                AND #$0F
.193910		aa		tax		                TAX
.193911		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193913		d0 06		bne $19391b	                BNE OPL2_Get_Register_Offset_l0
.193915		bf 73 10 19	lda $191073,x	                LDA @lregisterOffsets_operator0, X
.193919		80 04		bra $19391f	                BRA OPL2_Get_Register_Offset_exit
.19391b						OPL2_Get_Register_Offset_l0
.19391b		bf 7c 10 19	lda $19107c,x	                LDA @lregisterOffsets_operator1, X
.19391f						OPL2_Get_Register_Offset_exit
.19391f		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193921		a9 00		lda #$00	                LDA #$00
.193923		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193925		c2 30		rep #$30	                REP #$30        ; set A&X long
.193927		18		clc		                CLC
.193928		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19392b		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19392d		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.19392f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193931		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193934		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193936		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SDCard_Controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\SDOS.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193937						ITRACE
.193937		08		php		                PHP
.193938		c2 30		rep #$30	                REP #$30        ; set A&X long
.19393a		8b		phb		                PHB                 ; Print the text
.19393b		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.19393d		aa		tax		                TAX                 ; ... into X
.19393e		e2 20		sep #$20	                SEP #$20        ; set A short
.193940		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.193942		48		pha		                PHA
.193943		ab		plb		                PLB                 ; ... into B
.193944		22 e9 06 19	jsl $1906e9	                JSL IPUTS           ; Print the string
.193948		c2 20		rep #$20	                REP #$20        ; set A long
.19394a		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.19394c		83 08		sta $08,s	                STA #8,S
.19394e		a3 02		lda $02,s	                LDA #2,S
.193950		83 06		sta $06,s	                STA #6,S
.193952		ab		plb		                PLB
.193953		68		pla		                PLA                 ; Clean up the stack
.193954		68		pla		                PLA
.193955		28		plp		                PLP
.193956		6b		rtl		                RTL
.193957						ISETTIMEOUT
.193957		8b		phb		                PHB
.193958		0b		phd		                PHD
.193959		08		php		                PHP
.19395a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19395d		ab		plb		                PLB
.19395e		ab		plb		                PLB
.19395f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193962		2b		pld		                PLD
.193963		78		sei		                SEI                             ; We don't want to be interrupted
.193964		e2 20		sep #$20	                SEP #$20        ; set A short
.193966		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193968		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.19396a		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.19396c		85 0c		sta $032c	                STA @b BIOS_FLAGS
.19396e		28		plp		done            PLP
.19396f		2b		pld		                PLD
.193970		ab		plb		                PLB
.193971		6b		rtl		                RTL
.193972						ICMDBLOCK
.193972		0b		phd		                PHD
.193973		08		php		                PHP
.193974		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193977		2b		pld		                PLD
.193978		e2 20		sep #$20	                SEP #$20        ; set A short
.19397a		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.19397c		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.19397e		d0 06		bne $193986	                BNE ret_success             ; No: just return
.193980		22 fc 5e 19	jsl $195efc	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193984		90 0c		bcc $193992	                BCC pass_failure
.193986						ret_success
.193986		e2 20		sep #$20	                SEP #$20        ; set A short
.193988		64 00		stz $0320	                STZ BIOS_STATUS
.19398a		28		plp		                PLP
.19398b		2b		pld		                PLD
.19398c		38		sec		                SEC
.19398d		6b		rtl		                RTL
.19398e						ret_failure
.19398e		e2 20		sep #$20	                SEP #$20        ; set A short
.193990		85 00		sta $0320	                STA BIOS_STATUS
.193992		28		plp		pass_failure    PLP
.193993		2b		pld		                PLD
.193994		18		clc		                CLC
.193995		6b		rtl		                RTL
.193996						IGETBLOCK
.193996		5a		phy		                PHY
.193997		0b		phd		                PHD
.193998		8b		phb		                PHB
.193999		08		php		                PHP
.19399a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19399d		ab		plb		                PLB
.19399e		ab		plb		                PLB
.19399f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1939a2		2b		pld		                PLD
.1939a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1939a5		a0 00 00	ldy #$0000	                LDY #0
.1939a8		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.1939aa		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.1939ac		c8		iny		                INY
.1939ad		c0 00 02	cpy #$0200	                CPY #512
.1939b0		d0 f8		bne $1939aa	                BNE clr_loop
.1939b2		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.1939b4		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.1939b6		f0 10		beq $1939c8	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.1939b8		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.1939ba		f0 14		beq $1939d0	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.1939bc		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.1939be		f0 18		beq $1939d8	                BEQ hd_getblock
.1939c0		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.1939c2		28		plp		ret_failure     PLP
.1939c3		ab		plb		                PLB
.1939c4		2b		pld		                PLD
.1939c5		7a		ply		                PLY
.1939c6		38		sec		                SEC                                 ; Return failure
.1939c7		6b		rtl		                RTL
.1939c8		22 e1 54 19	jsl $1954e1	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.1939cc		b0 12		bcs $1939e0	                BCS ret_success
.1939ce		80 f2		bra $1939c2	                BRA ret_failure
.1939d0		22 22 5d 19	jsl $195d22	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.1939d4		b0 0a		bcs $1939e0	                BCS ret_success
.1939d6		80 ea		bra $1939c2	                BRA ret_failure
.1939d8		22 b6 62 19	jsl $1962b6	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.1939dc		b0 02		bcs $1939e0	                BCS ret_success
.1939de		80 e2		bra $1939c2	                BRA ret_failure
.1939e0						ret_success
.1939e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1939e2		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.1939e4		28		plp		                PLP
.1939e5		ab		plb		                PLB
.1939e6		2b		pld		                PLD
.1939e7		7a		ply		                PLY
.1939e8		38		sec		                SEC                                 ; Return success
.1939e9		6b		rtl		                RTL
.1939ea						IPUTBLOCK
.1939ea		0b		phd		                PHD
.1939eb		8b		phb		                PHB
.1939ec		08		php		                PHP
.1939ed		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1939f0		ab		plb		                PLB
.1939f1		ab		plb		                PLB
.1939f2		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1939f5		2b		pld		                PLD
.1939f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1939f8		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.1939fa		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.1939fc		f0 0f		beq $193a0d	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.1939fe		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193a00		f0 13		beq $193a15	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193a02		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193a04		f0 17		beq $193a1d	                BEQ hd_putblock
.193a06		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193a08		28		plp		ret_failure     PLP
.193a09		ab		plb		                PLB
.193a0a		2b		pld		                PLD
.193a0b		18		clc		                CLC                                 ; Return failure
.193a0c		6b		rtl		                RTL
.193a0d		22 73 55 19	jsl $195573	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.193a11		90 f5		bcc $193a08	                BCC ret_failure
.193a13		80 10		bra $193a25	                BRA ret_success
.193a15		22 7c 5d 19	jsl $195d7c	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.193a19		90 ed		bcc $193a08	                BCC ret_failure
.193a1b		80 08		bra $193a25	                BRA ret_success
.193a1d		22 36 63 19	jsl $196336	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.193a21		90 e5		bcc $193a08	                BCC ret_failure
.193a23		80 00		bra $193a25	                BRA ret_success
.193a25						ret_success
.193a25		e2 20		sep #$20	                SEP #$20        ; set A short
.193a27		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193a29		28		plp		                PLP
.193a2a		ab		plb		                PLB
.193a2b		2b		pld		                PLD
.193a2c		38		sec		                SEC                                 ; Return success
.193a2d		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.193a2e						DOS_DIROPEN
.193a2e		da		phx		                PHX
.193a2f		5a		phy		                PHY
.193a30		0b		phd		                PHD
.193a31		8b		phb		                PHB
.193a32		08		php		                PHP
.193a33		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.193a36		ab		plb		                PLB
.193a37		ab		plb		                PLB
.193a38		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193a3b		2b		pld		                PLD
.193a3c		c2 20		rep #$20	                REP #$20        ; set A long
.193a3e		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.193a41		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.193a44		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.193a47		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193a4a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.193a4d		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193a4f		85 18		sta $0338	                STA DOS_DIR_PTR
.193a51		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193a54		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193a56		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193a58		e2 20		sep #$20	                SEP #$20        ; set A short
.193a5a		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.193a5d		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.193a5f		d0 24		bne $193a85	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.193a61						fetch_fat12
.193a61		e2 20		sep #$20	                SEP #$20        ; set A short
.193a63		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.193a65		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193a68		c2 20		rep #$20	                REP #$20        ; set A long
.193a6a		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.193a6c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193a6e		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193a70		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193a72		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.193a75		85 02		sta $0322	                STA BIOS_LBA
.193a77		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193a7a		85 04		sta $0324	                STA BIOS_LBA+2
.193a7c		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.193a80		b0 1f		bcs $193aa1	                BCS do_success              ; If sucessful, set the directory cursor
.193a82		82 68 16	brl $1950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193a85						fetch_fat32
.193a85		e2 20		sep #$20	                SEP #$20        ; set A short
.193a87		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.193a89		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193a8c		c2 20		rep #$20	                REP #$20        ; set A long
.193a8e		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193a91		85 10		sta $0330	                STA DOS_CLUS_ID
.193a93		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193a96		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193a98		22 9f 3f 19	jsl $193f9f	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193a9c		b0 03		bcs $193aa1	                BCS do_success              ; If successful: set the directory cursor
.193a9e		82 4c 16	brl $1950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193aa1		82 50 16	brl $1950f4	do_success      BRL IF_SUCCESS
.193aa4						DOS_DIRFIRST
.193aa4		0b		phd		                PHD
.193aa5		08		php		                PHP
.193aa6		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193aa9		2b		pld		                PLD
.193aaa		c2 20		rep #$20	                REP #$20        ; set A long
.193aac		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193aaf		85 18		sta $0338	                STA DOS_DIR_PTR
.193ab1		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193ab4		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193ab6		28		plp		                PLP
.193ab7		2b		pld		                PLD
.193ab8		6b		rtl		                RTL
.193ab9						DOS_DIRNEXT
.193ab9		da		phx		                PHX
.193aba		5a		phy		                PHY
.193abb		0b		phd		                PHD
.193abc		8b		phb		                PHB
.193abd		08		php		                PHP
.193abe		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.193ac1		ab		plb		                PLB
.193ac2		ab		plb		                PLB
.193ac3		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193ac6		2b		pld		                PLD
.193ac7		c2 20		rep #$20	                REP #$20        ; set A long
.193ac9		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.193aca		a5 18		lda $0338	                LDA DOS_DIR_PTR
.193acc		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.193acf		85 18		sta $0338	                STA DOS_DIR_PTR
.193ad1		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193ad3		69 00 00	adc #$0000	                ADC #0
.193ad6		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193ad8		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.193ad9		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.193adc		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.193ade		85 28		sta $0348	                STA DOS_TEMP
.193ae0		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.193ae3		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.193ae5		85 2a		sta $034a	                STA DOS_TEMP+2
.193ae7		30 0c		bmi $193af5	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.193ae9		f0 03		beq $193aee	                BEQ check_lower
.193aeb		82 06 16	brl $1950f4	                BRL IF_SUCCESS
.193aee		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.193af0		f0 03		beq $193af5	                BEQ get_next_block
.193af2		82 ff 15	brl $1950f4	                BRL IF_SUCCESS
.193af5						get_next_block
.193af5		e2 20		sep #$20	                SEP #$20        ; set A short
.193af7		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193afa		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.193afc		f0 38		beq $193b36	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.193afe						next_sector
.193afe		c2 20		rep #$20	                REP #$20        ; set A long
.193b00		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193b03		1a		inc a		                INC A
.193b04		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.193b07		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.193b0a		d0 07		bne $193b13	                BNE read_sector
.193b0c		e2 20		sep #$20	                SEP #$20        ; set A short
.193b0e		a9 00		lda #$00	                LDA #0
.193b10		82 d6 15	brl $1950e9	                BRL IF_FAILURE
.193b13						read_sector
.193b13		c2 20		rep #$20	                REP #$20        ; set A long
.193b15		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.193b18		85 02		sta $0322	                STA BIOS_LBA
.193b1a		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193b1d		85 04		sta $0324	                STA BIOS_LBA+2
.193b1f		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.193b22		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193b24		85 18		sta $0338	                STA DOS_DIR_PTR
.193b26		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193b29		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193b2b		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193b2d		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.193b31		b0 39		bcs $193b6c	                BCS do_success              ; If successful: set the directory cursor
.193b33		82 b7 15	brl $1950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193b36						next_cluster
.193b36		c2 20		rep #$20	                REP #$20        ; set A long
.193b38		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.193b3b		85 10		sta $0330	                STA DOS_CLUS_ID
.193b3d		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193b40		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193b42		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193b45		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193b47		85 18		sta $0338	                STA DOS_DIR_PTR
.193b49		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193b4c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193b4e		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193b50		22 45 43 19	jsl $194345	                JSL NEXTCLUSTER             ; Try to find the next cluster
.193b54		b0 03		bcs $193b59	                BCS set_next
.193b56		82 94 15	brl $1950ed	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.193b59		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.193b5b		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193b5e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.193b60		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193b63		22 9f 3f 19	jsl $193f9f	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193b67		b0 03		bcs $193b6c	                BCS do_success              ; If successful: set the directory cursor
.193b69		82 81 15	brl $1950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193b6c		82 85 15	brl $1950f4	do_success      BRL IF_SUCCESS
.193b6f						DOS_DIRFINDFREE
.193b6f		da		phx		                PHX
.193b70		5a		phy		                PHY
.193b71		0b		phd		                PHD
.193b72		8b		phb		                PHB
.193b73		08		php		                PHP
.193b74		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.193b77		ab		plb		                PLB
.193b78		ab		plb		                PLB
.193b79		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193b7c		2b		pld		                PLD
.193b7d		22 79 4c 19	jsl $194c79	                JSL IF_DIROPEN
.193b81		b0 06		bcs $193b89	                BCS start_walk
.193b83		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.193b86		82 28 00	brl $193bb1	                BRL ret_failure
.193b89		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.193b8c						chk_entry
.193b8c		e2 20		sep #$20	                SEP #$20        ; set A short
.193b8e		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.193b90		f0 1c		beq $193bae	                BEQ ret_success             ; If 0: we have a blank... return it
.193b92		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.193b94		f0 18		beq $193bae	                BEQ ret_success             ; Yes: return it
.193b96		22 a8 4c 19	jsl $194ca8	                JSL IF_DIRNEXT              ; Go to the next directory entry
.193b9a		b0 ed		bcs $193b89	                BCS start_walk              ; If we got one, start walking it
.193b9c		22 b4 3b 19	jsl $193bb4	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.193ba0		90 0f		bcc $193bb1	                BCC ret_failure             ; If that didn't work, return the failure
.193ba2		c2 20		rep #$20	                REP #$20        ; set A long
.193ba4		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.193ba7		85 18		sta $0338	                STA DOS_DIR_PTR
.193ba9		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193bac		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193bae		82 43 15	brl $1950f4	ret_success     BRL IF_SUCCESS
.193bb1		82 35 15	brl $1950e9	ret_failure     BRL IF_FAILURE
.193bb4						DOS_DIRAPPEND
.193bb4		da		phx		                PHX
.193bb5		8b		phb		                PHB
.193bb6		0b		phd		                PHD
.193bb7		08		php		                PHP
.193bb8		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.193bbb		ab		plb		                PLB
.193bbc		ab		plb		                PLB
.193bbd		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193bc0		2b		pld		                PLD
.193bc1		e2 20		sep #$20	                SEP #$20        ; set A short
.193bc3		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.193bc6		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.193bc8		f0 09		beq $193bd3	                BEQ clr_sector                  ; Yes: clear out the directory data
.193bca						ret_failure
.193bca		e2 20		sep #$20	                SEP #$20        ; set A short
.193bcc		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.193bce		85 0e		sta $032e	                STA DOS_STATUS
.193bd0		82 3e 00	brl $193c11	                BRL pass_failure
.193bd3						clr_sector
.193bd3		c2 20		rep #$20	                REP #$20        ; set A long
.193bd5		a9 00 00	lda #$0000	                LDA #0
.193bd8		a2 00 00	ldx #$0000	                LDX #0
.193bdb		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.193bde		e8		inx		                INX
.193bdf		e8		inx		                INX
.193be0		e0 00 02	cpx #$0200	                CPX #512
.193be3		d0 f6		bne $193bdb	                BNE clr_loop
.193be5		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.193be8		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193bea		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193bed		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193bef		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.193bf2		85 10		sta $0330	                STA DOS_CLUS_ID
.193bf4		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193bf7		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193bf9		22 08 47 19	jsl $194708	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.193bfd		90 12		bcc $193c11	                BCC pass_failure                ; If there was an error, pass it up the chain
.193bff		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.193c02		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193c05		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.193c08		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193c0b		28		plp		ret_success     PLP
.193c0c		2b		pld		                PLD
.193c0d		ab		plb		                PLB
.193c0e		fa		plx		                PLX
.193c0f		38		sec		                SEC
.193c10		6b		rtl		                RTL
.193c11		28		plp		pass_failure    PLP
.193c12		2b		pld		                PLD
.193c13		ab		plb		                PLB
.193c14		fa		plx		                PLX
.193c15		18		clc		                CLC
.193c16		6b		rtl		                RTL
.193c17						DOS_DIRWRITE
.193c17		da		phx		                PHX
.193c18		5a		phy		                PHY
.193c19		0b		phd		                PHD
.193c1a		8b		phb		                PHB
.193c1b		08		php		                PHP
.193c1c		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.193c1f		ab		plb		                PLB
.193c20		ab		plb		                PLB
.193c21		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193c24		2b		pld		                PLD
.193c25		e2 20		sep #$20	                SEP #$20        ; set A short
.193c27		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193c2a		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.193c2c		f0 1f		beq $193c4d	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.193c2e						write_sector
.193c2e		c2 20		rep #$20	                REP #$20        ; set A long
.193c30		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.193c33		85 02		sta $0322	                STA BIOS_LBA
.193c35		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c38		85 04		sta $0324	                STA BIOS_LBA+2
.193c3a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193c3d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193c3f		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193c42		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193c44		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.193c48		b0 1f		bcs $193c69	                BCS ret_success
.193c4a		82 9c 14	brl $1950e9	ret_failure     BRL IF_FAILURE
.193c4d						write_cluster
.193c4d		c2 20		rep #$20	                REP #$20        ; set A long
.193c4f		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.193c52		85 10		sta $0330	                STA DOS_CLUS_ID
.193c54		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c57		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193c59		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193c5c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193c5e		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193c61		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193c63		22 d1 3f 19	jsl $193fd1	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.193c67		90 e1		bcc $193c4a	                BCC ret_failure
.193c69		82 88 14	brl $1950f4	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.193c6c						DOS_INIT
.193c6c		8b		phb		                PHB
.193c6d		0b		phd		                PHD
.193c6e		08		php		                PHP
.193c6f		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.193c72		ab		plb		                PLB
.193c73		ab		plb		                PLB
.193c74		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193c77		2b		pld		                PLD
.193c78		e2 20		sep #$20	                SEP #$20        ; set A short
.193c7a		c2 10		rep #$10	                REP #$10        ; set X long
.193c7c		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.193c7f		a9 00		lda #$00	                LDA #0
.193c81		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.193c84		e8		inx		                INX
.193c85		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.193c88		d0 f7		bne $193c81	                BNE b0_clr_loop
.193c8a		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.193c8d		ab		plb		                PLB
.193c8e		ab		plb		                PLB
.193c8f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193c92		2b		pld		                PLD
.193c93		e2 20		sep #$20	                SEP #$20        ; set A short
.193c95		c2 10		rep #$10	                REP #$10        ; set X long
.193c97		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.193c9a		a9 00		lda #$00	                LDA #0
.193c9c		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.193c9f		e8		inx		                INX
.193ca0		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.193ca3		d0 f7		bne $193c9c	                BNE b38_clr_loop
.193ca5		c2 20		rep #$20	                REP #$20        ; set A long
.193ca7		a9 1e 40	lda #$401e	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.193caa		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.193cae		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.193cb1		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.193cb5		e2 20		sep #$20	                SEP #$20        ; set A short
.193cb7		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.193cb9		85 01		sta $0321	                STA BIOS_DEV
.193cbb		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.193cbd		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.193cc1		a9 00		lda #$00	                LDA #0
.193cc3		a2 00 00	ldx #$0000	                LDX #0
.193cc6		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.193cc9		e8		inx		                INX
.193cca		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.193ccd		d0 f7		bne $193cc6	                BNE fd_zero_loop
.193ccf		a9 00		lda #$00	                LDA #0
.193cd1		a2 00 00	ldx #$0000	                LDX #0
.193cd4		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.193cd7		e8		inx		                INX
.193cd8		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.193cdb		d0 f7		bne $193cd4	                BNE sect_zero_loop
.193cdd		c2 20		rep #$20	                REP #$20        ; set A long
.193cdf		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.193ce2		85 20		sta $0340	                STA @b DOS_FD_PTR
.193ce4		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.193ce7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193ce9		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.193cec		85 28		sta $0348	                STA @b DOS_TEMP
.193cee		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.193cf1		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193cf3		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.193cf6		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.193cf9		a5 28		lda $0348	                LDA @b DOS_TEMP
.193cfb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193cfd		c8		iny		                INY
.193cfe		c8		iny		                INY
.193cff		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193d01		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193d03		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.193d04		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.193d06		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.193d09		85 20		sta $0340	                STA @b DOS_FD_PTR
.193d0b		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.193d0d		69 00 00	adc #$0000	                ADC #0
.193d10		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193d12		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.193d13		a5 28		lda $0348	                LDA @b DOS_TEMP
.193d15		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.193d18		85 28		sta $0348	                STA @b DOS_TEMP
.193d1a		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193d1c		69 00 00	adc #$0000	                ADC #0
.193d1f		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193d21		ca		dex		                DEX                     ; Count down the descriptors...
.193d22		d0 d2		bne $193cf6	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.193d24		28		plp		                PLP
.193d25		2b		pld		                PLD
.193d26		ab		plb		                PLB
.193d27		6b		rtl		                RTL
.193d28						DOS_MOUNT
.193d28		8b		phb		                PHB
.193d29		0b		phd		                PHD
.193d2a		08		php		                PHP
.193d2b		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.193d2e		ab		plb		                PLB
.193d2f		ab		plb		                PLB
.193d30		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193d33		2b		pld		                PLD
.193d34		e2 20		sep #$20	                SEP #$20        ; set A short
.193d36		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.193d38		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.193d3c		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.193d3e		f0 1f		beq $193d5f	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.193d40		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.193d42		f0 26		beq $193d6a	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.193d44		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.193d46		f0 0b		beq $193d53	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.193d48		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.193d4a		85 0e		sta $032e	                STA DOS_STATUS
.193d4c		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.193d4e		85 00		sta $0320	                STA BIOS_STATUS
.193d50		82 7c 01	brl $193ecf	                BRL ret_failure
.193d53		22 dd 5d 19	jsl $195ddd	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.193d57		b0 03		bcs $193d5c	                BCS fdc_success
.193d59		82 73 01	brl $193ecf	                BRL ret_failure
.193d5c		82 67 01	brl $193ec6	fdc_success     BRL ret_success
.193d5f		22 aa 54 19	jsl $1954aa	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.193d63		b0 10		bcs $193d75	                BCS get_mbr             ; Continue if success
.193d65		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193d67		82 65 01	brl $193ecf	                BRL ret_failure
.193d6a		22 c6 61 19	jsl $1961c6	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.193d6e		b0 05		bcs $193d75	                BCS get_mbr             ; Continue if success
.193d70		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193d72		82 5a 01	brl $193ecf	                BRL ret_failure
.193d75						get_mbr
.193d75		c2 30		rep #$30	                REP #$30        ; set A&X long
.193d77		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.193d79		64 04		stz $0324	                STZ BIOS_LBA+2
.193d7b		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.193d7e		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193d80		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193d83		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193d85		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.193d89		b0 07		bcs $193d92	                BCS chk_signature       ; If success, check the signature bytes
.193d8b		e2 20		sep #$20	                SEP #$20        ; set A short
.193d8d		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.193d8f		82 3d 01	brl $193ecf	                BRL ret_failure
.193d92						chk_signature
.193d92		e2 20		sep #$20	                SEP #$20        ; set A short
.193d94		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.193d97		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193d99		d0 07		bne $193da2	                BNE not_mbr             ; No: signal we could find the MBR
.193d9b		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.193d9e		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193da0		f0 05		beq $193da7	                BEQ chk_part_type       ; Yes: we have an MBR
.193da2		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.193da4		82 28 01	brl $193ecf	                BRL ret_failure
.193da7		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.193daa		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.193dac		f0 05		beq $193db3	                BEQ get_LBA             ; Is FAT32 with LBA?
.193dae		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.193db0		82 1c 01	brl $193ecf	                BRL ret_failure
.193db3		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.193db6		c2 20		rep #$20	                REP #$20        ; set A long
.193db8		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.193dbb		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.193dbe		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.193dc1		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.193dc4		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.193dc7		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.193dca		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.193dcd		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.193dd0		e2 20		sep #$20	                SEP #$20        ; set A short
.193dd2		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.193dd4		8d 00 a0	sta $18a000	                STA DEVICE
.193dd7		a9 00		lda #$00	                LDA #0
.193dd9		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.193ddc		c2 20		rep #$20	                REP #$20        ; set A long
.193dde		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.193de1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193de3		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193de6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193de8		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.193deb		85 02		sta $0322	                STA BIOS_LBA
.193ded		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.193df0		85 04		sta $0324	                STA BIOS_LBA+2
.193df2		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.193df6		b0 1c		bcs $193e14	                BCS get_first_sec       ; Got it? Start parsing it
.193df8		e2 20		sep #$20	                SEP #$20        ; set A short
.193dfa		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.193dfc		82 d0 00	brl $193ecf	                BRL ret_failure
.193dff						chk_bpb_sig
.193dff		e2 20		sep #$20	                SEP #$20        ; set A short
.193e01		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.193e04		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193e06		d0 07		bne $193e0f	                BNE not_bpb             ; No: signal we could find the volume ID
.193e08		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.193e0b		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193e0d		f0 05		beq $193e14	                BEQ get_first_sec       ; Yes: we have an volume ID
.193e0f		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.193e11		82 bb 00	brl $193ecf	                BRL ret_failure
.193e14						get_first_sec
.193e14		c2 20		rep #$20	                REP #$20        ; set A long
.193e16		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.193e19		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.193e1c		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.193e1f		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.193e22		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.193e25		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.193e28		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.193e29		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.193e2c		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.193e2f		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.193e32		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.193e35		69 00 00	adc #$0000	                ADC #0
.193e38		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.193e3b		e2 20		sep #$20	                SEP #$20        ; set A short
.193e3d		a2 00 00	ldx #$0000	                LDX #0
.193e40		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.193e44		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.193e48		e8		inx		                INX
.193e49		e0 04 00	cpx #$0004	                CPX #4
.193e4c		d0 f2		bne $193e40	                BNE cpy_secperfat
.193e4e		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.193e51		0a		asl a		                ASL A
.193e52		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.193e55		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.193e58		2a		rol a		                ROL A
.193e59		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.193e5c		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.193e5f		2a		rol a		                ROL A
.193e60		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.193e63		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.193e66		2a		rol a		                ROL A
.193e67		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.193e6a		18		clc		                CLC
.193e6b		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.193e6e		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.193e71		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.193e74		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.193e77		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.193e7a		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.193e7d		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.193e80		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.193e83		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.193e86		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.193e89		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.193e8c		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.193e8f		e2 20		sep #$20	                SEP #$20        ; set A short
.193e91		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.193e94		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.193e97		18		clc		                CLC
.193e98		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.193e9b		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.193e9e		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.193ea1		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.193ea4		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.193ea7		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.193eaa		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.193ead		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.193eb0		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.193eb3		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.193eb6		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.193eb9		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.193ebc		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.193ebe		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.193ec1		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.193ec3		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.193ec6						ret_success
.193ec6		e2 20		sep #$20	                SEP #$20        ; set A short
.193ec8		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.193eca		28		plp		                PLP
.193ecb		2b		pld		                PLD
.193ecc		ab		plb		                PLB
.193ecd		38		sec		                SEC
.193ece		6b		rtl		                RTL
.193ecf						ret_failure
.193ecf		e2 20		sep #$20	                SEP #$20        ; set A short
.193ed1		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.193ed3		28		plp		                PLP
.193ed4		2b		pld		                PLD
.193ed5		ab		plb		                PLB
.193ed6		18		clc		                CLC
.193ed7		6b		rtl		                RTL
.193ed8						DOS_TESTBOOT
.193ed8		8b		phb		                PHB
.193ed9		0b		phd		                PHD
.193eda		da		phx		                PHX
.193edb		08		php		                PHP
.193edc		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.193edf		ab		plb		                PLB
.193ee0		ab		plb		                PLB
.193ee1		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193ee4		2b		pld		                PLD
.193ee5		c2 10		rep #$10	                REP #$10        ; set X long
.193ee7						chk_dev
.193ee7		e2 20		sep #$20	                SEP #$20        ; set A short
.193ee9		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.193eeb		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.193eed		f0 24		beq $193f13	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.193eef		c2 30		rep #$30	                REP #$30        ; set A&X long
.193ef1		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.193ef4		85 02		sta $0322	                STA @b BIOS_LBA
.193ef6		85 04		sta $0324	                STA @b BIOS_LBA+2
.193ef8		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.193efb		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.193efd		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193f00		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.193f02		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.193f06		b0 03		bcs $193f0b	                BCS chk_mbr_brl
.193f08		82 47 00	brl $193f52	                BRL done                    ; If failed... just return
.193f0b						chk_mbr_brl
.193f0b		e2 20		sep #$20	                SEP #$20        ; set A short
.193f0d		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.193f11		80 04		bra $193f17	                BRA chk_brl
.193f13		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.193f17		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.193f19		f0 06		beq $193f21	                BEQ chk_magic               ; Yes: check for the magic text
.193f1b		c9 82		cmp #$82	                CMP #$82
.193f1d		f0 02		beq $193f21	                BEQ chk_magic
.193f1f		80 31		bra $193f52	                BRA done                    ; No: just return
.193f21		a2 00 00	ldx #$0000	chk_magic       LDX #0
.193f24		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.193f28		df 57 3f 19	cmp $193f57,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.193f2c		d0 24		bne $193f52	                BNE done                    ; If it's not equal, just return
.193f2e		e8		inx		                INX                         ; Otherwise, check the next one
.193f2f		e0 08 00	cpx #$0008	                CPX #8
.193f32		d0 f0		bne $193f24	                BNE magic_loop              ; Until we've checked all 8 bytes
.193f34		c2 30		rep #$30	                REP #$30        ; set A&X long
.193f36		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.193f39		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.193f3c		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.193f3f		44 18 18	mvp $18,$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.193f42		e2 20		sep #$20	                SEP #$20        ; set A short
.193f44		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.193f46		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.193f48		f0 04		beq $193f4e	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.193f4a		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.193f4e		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.193f52		28		plp		done            PLP
.193f53		2b		pld		                PLD
.193f54		ab		plb		                PLB
.193f55		fa		plx		                PLX
.193f56		6b		rtl		                RTL
>193f57		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.193f5f						DOS_CALC_LBA
.193f5f		8b		phb		                PHB
.193f60		0b		phd		                PHD
.193f61		08		php		                PHP
.193f62		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.193f65		ab		plb		                PLB
.193f66		ab		plb		                PLB
.193f67		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193f6a		2b		pld		                PLD
.193f6b		c2 20		rep #$20	                REP #$20        ; set A long
.193f6d		38		sec		                SEC
.193f6e		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.193f70		e9 02 00	sbc #$0002	                SBC #2
.193f73		85 28		sta $0348	                STA DOS_TEMP
.193f75		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.193f77		e9 00 00	sbc #$0000	                SBC #0
.193f7a		85 2a		sta $034a	                STA DOS_TEMP+2
.193f7c		e2 10		sep #$10	                SEP #$10        ; set X short
.193f7e		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.193f81		e0 01		cpx #$01	mult_loop       CPX #1
.193f83		f0 07		beq $193f8c	                BEQ add_offset
.193f85		06 28		asl $0348	                ASL DOS_TEMP
.193f87		26 28		rol $0348	                ROL DOS_TEMP
.193f89		ca		dex		                DEX
.193f8a		80 f5		bra $193f81	                BRA mult_loop
.193f8c		18		clc		add_offset      CLC
.193f8d		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.193f8f		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.193f92		85 02		sta $0322	                STA BIOS_LBA
.193f94		a5 2a		lda $034a	                LDA DOS_TEMP+2
.193f96		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.193f99		85 04		sta $0324	                STA BIOS_LBA+2
.193f9b		28		plp		                PLP
.193f9c		2b		pld		                PLD
.193f9d		ab		plb		                PLB
.193f9e		6b		rtl		                RTL
.193f9f						DOS_GETCLUSTER
.193f9f		8b		phb		                PHB
.193fa0		0b		phd		                PHD
.193fa1		08		php		                PHP
.193fa2		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.193fa5		ab		plb		                PLB
.193fa6		ab		plb		                PLB
.193fa7		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193faa		2b		pld		                PLD
.193fab		c2 20		rep #$20	                REP #$20        ; set A long
.193fad		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.193faf		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193fb1		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.193fb3		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193fb5		22 5f 3f 19	jsl $193f5f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.193fb9		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.193fbd		90 09		bcc $193fc8	                BCC ret_failure
.193fbf						ret_success
.193fbf		e2 20		sep #$20	                SEP #$20        ; set A short
.193fc1		64 0e		stz $032e	                STZ DOS_STATUS
.193fc3		28		plp		                PLP
.193fc4		2b		pld		                PLD
.193fc5		ab		plb		                PLB
.193fc6		38		sec		                SEC
.193fc7		6b		rtl		                RTL
.193fc8						ret_failure
.193fc8		e2 20		sep #$20	                SEP #$20        ; set A short
.193fca		85 0e		sta $032e	                STA DOS_STATUS
.193fcc		28		plp		                PLP
.193fcd		2b		pld		                PLD
.193fce		ab		plb		                PLB
.193fcf		18		clc		                CLC
.193fd0		6b		rtl		                RTL
.193fd1						DOS_PUTCLUSTER
.193fd1		8b		phb		                PHB
.193fd2		0b		phd		                PHD
.193fd3		08		php		                PHP
.193fd4		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.193fd7		ab		plb		                PLB
.193fd8		ab		plb		                PLB
.193fd9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.193fdc		2b		pld		                PLD
.193fdd		c2 20		rep #$20	                REP #$20        ; set A long
.193fdf		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.193fe1		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193fe3		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.193fe5		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193fe7		22 5f 3f 19	jsl $193f5f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.193feb		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.193fef		90 09		bcc $193ffa	                BCC ret_failure
.193ff1						ret_success
.193ff1		e2 20		sep #$20	                SEP #$20        ; set A short
.193ff3		64 0e		stz $032e	                STZ DOS_STATUS
.193ff5		28		plp		                PLP
.193ff6		2b		pld		                PLD
.193ff7		ab		plb		                PLB
.193ff8		38		sec		                SEC
.193ff9		6b		rtl		                RTL
.193ffa						ret_failure
.193ffa		e2 20		sep #$20	                SEP #$20        ; set A short
.193ffc		85 0e		sta $032e	                STA DOS_STATUS
.193ffe		28		plp		                PLP
.193fff		2b		pld		                PLD
.194000		ab		plb		                PLB
.194001		18		clc		                CLC
.194002		6b		rtl		                RTL
>194003		40 46 00			DOS_FDC_NAME    .null "@F"
.194006						DOS_FDC_DESC
>194006		03 40 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>19400a		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>19400b		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>19400f		40 53 00			DOS_SDC_NAME    .null "@S"
.194012						DOS_SDC_DESC
>194012		0f 40 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>194016		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>194017		06 40 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>19401b		40 48 00			DOS_HDC_NAME    .null "@H"
.19401e						DOS_HD_DESC
>19401e		1b 40 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>194022		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>194023		12 40 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.194027						DOS_PARSE_DEV
.194027		8b		phb		                PHB
.194028		0b		phd		                PHD
.194029		08		php		                PHP
.19402a		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.19402d		ab		plb		                PLB
.19402e		ab		plb		                PLB
.19402f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194032		2b		pld		                PLD
.194033		c2 30		rep #$30	                REP #$30        ; set A&X long
.194035		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.194039		85 28		sta $0348	                STA DOS_TEMP
.19403b		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.19403f		85 2a		sta $034a	                STA DOS_TEMP+2
.194041		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.194044		85 48		sta $0368	                STA DOS_STR2_PTR
.194046		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.194049		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.19404b		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.19404e		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194050		85 44		sta $0364	                STA DOS_STR1_PTR
.194052		c8		iny		                INY
.194053		c8		iny		                INY
.194054		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194056		85 46		sta $0366	                STA DOS_STR1_PTR+2
.194058		e2 20		sep #$20	                SEP #$20        ; set A short
.19405a		a0 00 00	ldy #$0000	                LDY #0
.19405d		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.19405f		f0 24		beq $194085	                BEQ found                   ; If it's NULL, we found a match
.194061		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.194063		d0 03		bne $194068	                BNE next_device             ; If no match, try to load the next device
.194065		c8		iny		                INY                         ; Go to the next character
.194066		80 f5		bra $19405d	                BRA cmp_loop
.194068						next_device
.194068		c2 20		rep #$20	                REP #$20        ; set A long
.19406a		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.19406d		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19406f		48		pha		                PHA
.194070		c8		iny		                INY
.194071		c8		iny		                INY
.194072		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194074		85 2a		sta $034a	                STA DOS_TEMP+2
.194076		68		pla		                PLA
.194077		85 28		sta $0348	                STA DOS_TEMP
.194079		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.19407b		d0 ce		bne $19404b	                BNE dev_loop                ; No: check this device
.19407d		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19407f		d0 ca		bne $19404b	                BNE dev_loop
.194081		28		plp		done            PLP                         ; Otherwise, return having not found a match
.194082		2b		pld		                PLD
.194083		ab		plb		                PLB
.194084		6b		rtl		                RTL
.194085		22 96 40 19	jsl $194096	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.194089		e2 20		sep #$20	                SEP #$20        ; set A short
.19408b		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.19408e		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194090		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.194094		80 eb		bra $194081	                BRA done
.194096						DOS_ADJUSTPATH
.194096		da		phx		                PHX
.194097		5a		phy		                PHY
.194098		8b		phb		                PHB
.194099		0b		phd		                PHD
.19409a		08		php		                PHP
.19409b		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.19409e		ab		plb		                PLB
.19409f		ab		plb		                PLB
.1940a0		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1940a3		2b		pld		                PLD
.1940a4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1940a6		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.1940a8		98		tya		                TYA                             ; Compute the address of the first source byte
.1940a9		18		clc		                CLC
.1940aa		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.1940ad		aa		tax		                TAX
.1940ae		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.1940b1		a8		tay		                TAY
.1940b2		38		sec		                SEC                             ; Compute the number of bytes to copy
.1940b3		a9 00 01	lda #$0100	                LDA #256
.1940b6		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.1940b8		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.1940bb		28		plp		                PLP
.1940bc		2b		pld		                PLD
.1940bd		ab		plb		                PLB
.1940be		7a		ply		                PLY
.1940bf		fa		plx		                PLX
.1940c0		6b		rtl		                RTL
.1940c1						DOS_PARSE_PATH
.1940c1		8b		phb		                PHB
.1940c2		0b		phd		                PHD
.1940c3		08		php		                PHP
.1940c4		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.1940c7		ab		plb		                PLB
.1940c8		ab		plb		                PLB
.1940c9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1940cc		2b		pld		                PLD
.1940cd		c2 10		rep #$10	                REP #$10        ; set X long
.1940cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1940d1		a2 00 00	ldx #$0000	                LDX #0
.1940d4		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.1940d6		f0 1b		beq $1940f3	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.1940d8		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.1940da		b0 05		bcs $1940e1	                BGE check_case          ; No: check the case
.1940dc		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.1940de		82 64 00	brl $194145	                BRL ret_failure
.1940e1		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.1940e3		90 08		bcc $1940ed	                BLT next_char
.1940e5		c9 7b		cmp #$7b	                CMP #'z'+1
.1940e7		b0 04		bcs $1940ed	                BGE next_char
.1940e9		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.1940eb		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.1940ed		e8		inx		next_char       INX                     ; Move to the next character
.1940ee		e0 00 01	cpx #$0100	                CPX #$100
.1940f1		d0 e1		bne $1940d4	                BNE upcase_loop
.1940f3		22 27 40 19	jsl $194027	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.1940f7		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.1940f9		c9 3a		cmp #$3a	                CMP #':'
.1940fb		d0 07		bne $194104	                BNE clr_name            ; If not colon, treat it as a file name
.1940fd		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.194100		22 96 40 19	jsl $194096	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.194104		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.194107		a9 20		lda #$20	                LDA #' '
.194109		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.19410c		c8		iny		                INY
.19410d		c0 0b 00	cpy #$000b	                CPY #11
.194110		d0 f7		bne $194109	                BNE clr_loop
.194112		a2 00 00	ldx #$0000	                LDX #0
.194115		a0 00 00	ldy #$0000	                LDY #0
.194118		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.19411a		f0 20		beq $19413c	                BEQ ret_success         ; If NULL: we've finished parsing the path
.19411c		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.19411e		f0 0a		beq $19412a	                BEQ cpy_ext             ; And move to the extension
.194120		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.194123		e8		inx		                INX
.194124		c8		iny		                INY                     ; Move to the next character
.194125		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.194128		d0 ee		bne $194118	                BNE cpy_name_loop       ; No: process this one
.19412a		e8		inx		cpy_ext         INX                     ; Skip the dot
.19412b		a0 08 00	ldy #$0008	                LDY #8
.19412e		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.194130		f0 0a		beq $19413c	                BEQ ret_success         ; If it's NULL, we've finished
.194132		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.194135		e8		inx		                INX
.194136		c8		iny		                INY                     ; Move to the next character
.194137		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.19413a		d0 f2		bne $19412e	                BNE cpy_ext_loop        ; No: process this one
.19413c						ret_success
.19413c		e2 20		sep #$20	                SEP #$20        ; set A short
.19413e		64 0e		stz $032e	                STZ DOS_STATUS
.194140		28		plp		                PLP
.194141		2b		pld		                PLD
.194142		ab		plb		                PLB
.194143		38		sec		                SEC
.194144		6b		rtl		                RTL
.194145						ret_failure
.194145		e2 20		sep #$20	                SEP #$20        ; set A short
.194147		85 0e		sta $032e	                STA DOS_STATUS
.194149		28		plp		                PLP
.19414a		2b		pld		                PLD
.19414b		ab		plb		                PLB
.19414c		18		clc		                CLC
.19414d		6b		rtl		                RTL
.19414e						DOS_FINDFILE
.19414e		8b		phb		                PHB
.19414f		0b		phd		                PHD
.194150		08		php		                PHP
.194151		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.194154		ab		plb		                PLB
.194155		ab		plb		                PLB
.194156		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194159		2b		pld		                PLD
.19415a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19415c		22 c1 40 19	jsl $1940c1	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.194160		b0 05		bcs $194167	                BCS mount                       ; If success: try to open the directory
.194162		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.194163		2b		pld		                PLD
.194164		ab		plb		                PLB
.194165		18		clc		                CLC
.194166		6b		rtl		                RTL
.194167		22 28 3d 19	jsl $193d28	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.19416b		b0 07		bcs $194174	                BCS get_directory
.19416d		e2 20		sep #$20	                SEP #$20        ; set A short
.19416f		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.194171		82 56 00	brl $1941ca	                BRL ret_failure
.194174						get_directory
.194174		c2 20		rep #$20	                REP #$20        ; set A long
.194176		22 2e 3a 19	jsl $193a2e	                JSL DOS_DIROPEN                 ; Get the directory
.19417a		b0 07		bcs $194183	                BCS scan_entries                ; If success: start scanning the directory entries
.19417c		e2 20		sep #$20	                SEP #$20        ; set A short
.19417e		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.194180		82 47 00	brl $1941ca	                BRL ret_failure
.194183		22 a4 3a 19	jsl $193aa4	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.194187						scan_loop
.194187		e2 20		sep #$20	                SEP #$20        ; set A short
.194189		a0 00 00	ldy #$0000	                LDY #0
.19418c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.19418e		d0 05		bne $194195	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.194190		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.194192		82 35 00	brl $1941ca	                BRL ret_failure
.194195		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.194197		f0 26		beq $1941bf	                BEQ next_entry                  ; Go to the next entry
.194199		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.19419c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19419e		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.1941a0		d0 1d		bne $1941bf	                BNE next_entry                  ; Yes: skip it!
.1941a2		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.1941a4		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.1941a6		f0 17		beq $1941bf	                BEQ next_entry                  ; Yes: skip it!
.1941a8		a2 00 00	ldx #$0000	                LDX #0
.1941ab		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1941ae		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.1941b0		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.1941b4		d0 09		bne $1941bf	                BNE next_entry                  ; If not equal: try the next entry
.1941b6		c8		iny		                INY                             ; Advance to the next character
.1941b7		e8		inx		                INX
.1941b8		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.1941bb		f0 16		beq $1941d3	                BEQ match                       ; Yes: we have a match!
.1941bd		80 ef		bra $1941ae	                BRA scan_cmp_loop               ; No: keep checking
.1941bf		22 b9 3a 19	jsl $193ab9	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.1941c3		90 05		bcc $1941ca	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.1941c5		82 bf ff	brl $194187	                BRL scan_loop                   ; If found: keep scanning
.1941c8		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.1941ca						ret_failure
.1941ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1941cc		85 0e		sta $032e	                STA DOS_STATUS
.1941ce		28		plp		                PLP
.1941cf		2b		pld		                PLD
.1941d0		ab		plb		                PLB
.1941d1		18		clc		                CLC
.1941d2		6b		rtl		                RTL
.1941d3						match
.1941d3		c2 20		rep #$20	                REP #$20        ; set A long
.1941d5		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.1941d8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1941da		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.1941dc		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.1941df		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1941e1		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1941e3						ret_success
.1941e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1941e5		64 0e		stz $032e	                STZ DOS_STATUS
.1941e7		28		plp		                PLP
.1941e8		2b		pld		                PLD
.1941e9		ab		plb		                PLB
.1941ea		38		sec		                SEC
.1941eb		6b		rtl		                RTL
.1941ec						DOS_READFILE
.1941ec		8b		phb		                PHB
.1941ed		0b		phd		                PHD
.1941ee		08		php		                PHP
.1941ef		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1941f2		ab		plb		                PLB
.1941f3		ab		plb		                PLB
.1941f4		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1941f7		2b		pld		                PLD
.1941f8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1941fa		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941fc		48		pha		                PHA
.1941fd		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.1941ff		48		pha		                PHA
.194200		22 4e 41 19	jsl $19414e	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.194204		68		pla		                PLA
.194205		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194207		68		pla		                PLA
.194208		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.19420a		90 0f		bcc $19421b	                BCC pass_failure                    ; If found: try to load the cluster
.19420c		22 9f 3f 19	jsl $193f9f	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.194210		90 09		bcc $19421b	                BCC pass_failure                    ; If there's an error... pass it up the chain
.194212						ret_success
.194212		e2 20		sep #$20	                SEP #$20        ; set A short
.194214		64 0e		stz $032e	                STZ DOS_STATUS
.194216		28		plp		                PLP
.194217		2b		pld		                PLD
.194218		ab		plb		                PLB
.194219		38		sec		                SEC
.19421a		6b		rtl		                RTL
.19421b		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.19421c		2b		pld		                PLD
.19421d		ab		plb		                PLB
.19421e		18		clc		                CLC
.19421f		6b		rtl		                RTL
.194220						ENTRYFORCLUS12
.194220		8b		phb		                PHB
.194221		0b		phd		                PHD
.194222		08		php		                PHP
.194223		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.194226		ab		plb		                PLB
.194227		ab		plb		                PLB
.194228		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19422b		2b		pld		                PLD
.19422c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19422e		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.194230		0a		asl a		                ASL A
.194231		85 28		sta $0348	                STA DOS_TEMP
.194233		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194235		2a		rol a		                ROL A
.194236		85 2a		sta $034a	                STA DOS_TEMP+2
.194238		18		clc		                CLC
.194239		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19423b		65 28		adc $0348	                ADC DOS_TEMP
.19423d		85 28		sta $0348	                STA DOS_TEMP
.19423f		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194241		65 2a		adc $034a	                ADC DOS_TEMP+2
.194243		85 2a		sta $034a	                STA DOS_TEMP+2
.194245		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.194247		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.194249		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.19424b		29 ff 03	and #$03ff	                AND #$003FF
.19424e		aa		tax		                TAX
.19424f		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194251		66 28		ror $0348	                ROR DOS_TEMP
.194253		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194255		66 28		ror $0348	                ROR DOS_TEMP
.194257		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194259		66 28		ror $0348	                ROR DOS_TEMP
.19425b		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19425d		66 28		ror $0348	                ROR DOS_TEMP
.19425f		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194261		66 28		ror $0348	                ROR DOS_TEMP
.194263		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194265		66 28		ror $0348	                ROR DOS_TEMP
.194267		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194269		66 28		ror $0348	                ROR DOS_TEMP
.19426b		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.19426d		66 28		ror $0348	                ROR DOS_TEMP
.19426f		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.194271		66 28		ror $0348	                ROR DOS_TEMP
.194273		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.194274		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.194278		65 28		adc $0348	                ADC DOS_TEMP
.19427a		85 24		sta $0344	                STA DOS_FAT_LBA
.19427c		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194280		65 2a		adc $034a	                ADC DOS_TEMP+2
.194282		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194284		28		plp		                PLP
.194285		2b		pld		                PLD
.194286		ab		plb		                PLB
.194287		6b		rtl		                RTL
.194288						FATFORCLUSTER12
.194288		8b		phb		                PHB
.194289		0b		phd		                PHD
.19428a		08		php		                PHP
.19428b		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19428e		ab		plb		                PLB
.19428f		ab		plb		                PLB
.194290		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194293		2b		pld		                PLD
.194294		c2 30		rep #$30	                REP #$30        ; set A&X long
.194296		a2 00 00	ldx #$0000	                LDX #0
.194299		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.19429c		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.1942a0		e8		inx		                INX
.1942a1		e8		inx		                INX
.1942a2		e0 00 04	cpx #$0400	                CPX #1024
.1942a5		d0 f5		bne $19429c	                BNE clr_loop
.1942a7		22 20 42 19	jsl $194220	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.1942ab		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.1942ad		85 02		sta $0322	                STA BIOS_LBA
.1942af		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.1942b1		85 04		sta $0324	                STA BIOS_LBA+2
.1942b3		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.1942b6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1942b8		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.1942bb		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1942bd		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.1942c1		90 17		bcc $1942da	                BCC error
.1942c3		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.1942c5		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.1942c8		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1942ca		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.1942cd		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1942cf		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.1942d3		90 05		bcc $1942da	                BCC error
.1942d5		28		plp		                PLP
.1942d6		2b		pld		                PLD
.1942d7		ab		plb		                PLB
.1942d8		38		sec		                SEC
.1942d9		6b		rtl		                RTL
.1942da						error
.1942da		e2 20		sep #$20	                SEP #$20        ; set A short
.1942dc		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1942de		85 0e		sta $032e	                STA DOS_STATUS
.1942e0		28		plp		                PLP
.1942e1		2b		pld		                PLD
.1942e2		ab		plb		                PLB
.1942e3		18		clc		                CLC
.1942e4		6b		rtl		                RTL
.1942e5						FATFORCLUSTER32
.1942e5		8b		phb		                PHB
.1942e6		0b		phd		                PHD
.1942e7		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1942ea		ab		plb		                PLB
.1942eb		ab		plb		                PLB
.1942ec		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1942ef		2b		pld		                PLD
.1942f0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1942f2		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1942f4		85 24		sta $0344	                STA DOS_FAT_LBA
.1942f6		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1942f8		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1942fa		a2 07 00	ldx #$0007	                LDX #7
.1942fd		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.1942ff		66 24		ror $0344	                ROR DOS_FAT_LBA
.194301		ca		dex		                DEX
.194302		d0 f9		bne $1942fd	                BNE div_loop
.194304		18		clc		                CLC
.194305		a5 24		lda $0344	                LDA DOS_FAT_LBA
.194307		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.19430b		85 24		sta $0344	                STA DOS_FAT_LBA
.19430d		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19430f		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.194313		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194315		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.194317		85 02		sta $0322	                STA BIOS_LBA
.194319		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19431b		85 04		sta $0324	                STA BIOS_LBA+2
.19431d		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.194320		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194322		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194325		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194327		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.19432b		b0 06		bcs $194333	                BCS find_entry
.19432d		e2 20		sep #$20	                SEP #$20        ; set A short
.19432f		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194331		80 0e		bra $194341	                BRA ret_failure
.194333						find_entry
.194333		c2 20		rep #$20	                REP #$20        ; set A long
.194335		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194337		0a		asl a		                ASL A
.194338		0a		asl a		                ASL A                           ; * 4
.194339		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.19433c		aa		tax		                TAX                             ; X should be the offset within the sector
.19433d		2b		pld		ret_success     PLD
.19433e		ab		plb		                PLB
.19433f		38		sec		                SEC                             ; return success
.194340		6b		rtl		                RTL
.194341		2b		pld		ret_failure     PLD
.194342		ab		plb		                PLB
.194343		18		clc		                CLC                             ; Return failure
.194344		6b		rtl		                RTL
.194345						NEXTCLUSTER
.194345		08		php		                PHP
.194346		e2 20		sep #$20	                SEP #$20        ; set A short
.194348		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.19434c		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.19434e		d0 08		bne $194358	                BNE fat32                       ; No: assume it's FAT32
.194350		22 66 43 19	jsl $194366	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.194354		90 0d		bcc $194363	                BCC pass_failure                ; If there was an error, pass it up the chain
.194356		80 06		bra $19435e	                BRA ret_success
.194358		22 c3 43 19	jsl $1943c3	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.19435c		90 05		bcc $194363	                BCC pass_failure                ; If there was an error, pass it up the chain
.19435e		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.194360		28		plp		                PLP
.194361		38		sec		                SEC
.194362		6b		rtl		                RTL
.194363		28		plp		pass_failure    PLP
.194364		18		clc		                CLC
.194365		6b		rtl		                RTL
.194366						NEXTCLUSTER12
.194366		8b		phb		                    PHB
.194367		0b		phd		                    PHD
.194368		08		php		                    PHP
.194369		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19436c		ab		plb		                PLB
.19436d		ab		plb		                PLB
.19436e		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194371		2b		pld		                PLD
.194372		c2 30		rep #$30	                REP #$30        ; set A&X long
.194374		22 88 42 19	jsl $194288	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.194378		b0 03		bcs $19437d	                    BCS chk_clus_id
.19437a		82 41 00	brl $1943be	                    BRL pass_failure
.19437d		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.19437f		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.194382		d0 0d		bne $194391	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.194384						is_even
.194384		c2 20		rep #$20	                REP #$20        ; set A long
.194386		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.19438a		29 ff 0f	and #$0fff	                    AND #$0FFF
.19438d		85 28		sta $0348	                    STA DOS_TEMP
.19438f		80 0c		bra $19439d	                    BRA check_id
.194391						is_odd
.194391		c2 20		rep #$20	                REP #$20        ; set A long
.194393		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.194397		4a		lsr a		                    LSR A
.194398		4a		lsr a		                    LSR A
.194399		4a		lsr a		                    LSR A
.19439a		4a		lsr a		                    LSR A
.19439b		85 28		sta $0348	                    STA DOS_TEMP
.19439d						check_id
.19439d		c2 20		rep #$20	                REP #$20        ; set A long
.19439f		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.1943a1		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.1943a4		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.1943a7		f0 0f		beq $1943b8	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.1943a9		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.1943ab		85 10		sta $0330	                    STA DOS_CLUS_ID
.1943ad		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.1943af						ret_success
.1943af		e2 20		sep #$20	                SEP #$20        ; set A short
.1943b1		64 0e		stz $032e	                    STZ DOS_STATUS
.1943b3		28		plp		                    PLP
.1943b4		2b		pld		                    PLD
.1943b5		ab		plb		                    PLB
.1943b6		38		sec		                    SEC
.1943b7		6b		rtl		                    RTL
.1943b8						no_more
.1943b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1943ba		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.1943bc		85 0e		sta $032e	                    STA DOS_STATUS
.1943be		28		plp		pass_failure        PLP
.1943bf		2b		pld		                    PLD
.1943c0		ab		plb		                    PLB
.1943c1		18		clc		                    CLC
.1943c2		6b		rtl		                    RTL
.1943c3						NEXTCLUSTER32
.1943c3		8b		phb		                PHB
.1943c4		0b		phd		                PHD
.1943c5		08		php		                PHP
.1943c6		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1943c9		ab		plb		                PLB
.1943ca		ab		plb		                PLB
.1943cb		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1943ce		2b		pld		                PLD
.1943cf		c2 30		rep #$30	                REP #$30        ; set A&X long
.1943d1		22 e5 42 19	jsl $1942e5	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.1943d5		90 53		bcc $19442a	                BCC ret_failure                 ; If it did not work, return the error
.1943d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1943d9		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.1943dd		85 28		sta $0348	                STA DOS_TEMP
.1943df		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.1943e3		85 29		sta $0349	                STA DOS_TEMP+1
.1943e5		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.1943e9		85 2a		sta $034a	                STA DOS_TEMP+2
.1943eb		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.1943ef		85 2b		sta $034b	                STA DOS_TEMP+3
.1943f1		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.1943f3		c9 ff		cmp #$ff	                CMP #$FF
.1943f5		d0 18		bne $19440f	                BNE found_next
.1943f7		a5 29		lda $0349	                LDA DOS_TEMP+1
.1943f9		c9 ff		cmp #$ff	                CMP #$FF
.1943fb		d0 12		bne $19440f	                BNE found_next
.1943fd		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1943ff		c9 ff		cmp #$ff	                CMP #$FF
.194401		d0 0c		bne $19440f	                BNE found_next
.194403		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194405		c9 0f		cmp #$0f	                CMP #$0F
.194407		d0 06		bne $19440f	                BNE found_next                  ; No: return this cluster as the next
.194409		e2 20		sep #$20	                SEP #$20        ; set A short
.19440b		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.19440d		80 1b		bra $19442a	                BRA ret_failure
.19440f						found_next
.19440f		e2 20		sep #$20	                SEP #$20        ; set A short
.194411		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.194413		85 10		sta $0330	                STA DOS_CLUS_ID
.194415		a5 29		lda $0349	                LDA DOS_TEMP+1
.194417		85 11		sta $0331	                STA DOS_CLUS_ID+1
.194419		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19441b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19441d		a5 2b		lda $034b	                LDA DOS_TEMP+3
.19441f		85 13		sta $0333	                STA DOS_CLUS_ID+3
.194421						ret_success
.194421		e2 20		sep #$20	                SEP #$20        ; set A short
.194423		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.194425		28		plp		                PLP
.194426		2b		pld		                PLD
.194427		ab		plb		                PLB
.194428		38		sec		                SEC
.194429		6b		rtl		                RTL
.19442a						ret_failure
.19442a		e2 20		sep #$20	                SEP #$20        ; set A short
.19442c		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.19442e		28		plp		                PLP
.19442f		2b		pld		                PLD
.194430		ab		plb		                PLB
.194431		18		clc		                CLC
.194432		6b		rtl		                RTL
.194433						DOS_READNEXT
.194433		08		php		                PHP
.194434		c2 30		rep #$30	                REP #$30        ; set A&X long
.194436		22 45 43 19	jsl $194345	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.19443a		90 09		bcc $194445	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.19443c		22 9f 3f 19	jsl $193f9f	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.194440		90 03		bcc $194445	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.194442		28		plp		ret_success     PLP
.194443		38		sec		                SEC
.194444		6b		rtl		                RTL
.194445		28		plp		pass_failure    PLP
.194446		18		clc		                CLC
.194447		6b		rtl		                RTL
.194448						DOS_FREECLUS
.194448		08		php		                PHP
.194449		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19444c		2b		pld		                PLD
.19444d		e2 20		sep #$20	                SEP #$20        ; set A short
.19444f		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194453		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194455		d0 08		bne $19445f	                BNE fat32                       ; No: assume it's FAT32
.194457		22 c8 44 19	jsl $1944c8	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.19445b		90 0d		bcc $19446a	                BCC pass_failure                ; If there was an error, pass it up the chain
.19445d		80 06		bra $194465	                BRA ret_success
.19445f		22 95 45 19	jsl $194595	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.194463		90 05		bcc $19446a	                BCC pass_failure                ; If there was an error, pass it up the chain
.194465		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.194467		28		plp		                PLP
.194468		38		sec		                SEC
.194469		6b		rtl		                RTL
.19446a		28		plp		pass_failure    PLP
.19446b		18		clc		                CLC
.19446c		6b		rtl		                RTL
.19446d						FDC_READ2FAT12
.19446d		8b		phb		                    PHB
.19446e		0b		phd		                    PHD
.19446f		08		php		                    PHP
.194470		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.194473		ab		plb		                PLB
.194474		ab		plb		                PLB
.194475		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194478		2b		pld		                PLD
.194479		c2 30		rep #$30	                REP #$30        ; set A&X long
.19447b		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.19447e		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194480		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.194483		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194485		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.194487		85 02		sta $0322	                    STA BIOS_LBA
.194489		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.19448b		85 04		sta $0324	                    STA BIOS_LBA+2
.19448d		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.194491		b0 07		bcs $19449a	                    BCS inc_sect2                   ; If success: start getting the second sector
.194493		e2 20		sep #$20	                SEP #$20        ; set A short
.194495		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194497		82 1c 00	brl $1944b6	                    BRL ret_failure
.19449a						inc_sect2
.19449a		c2 20		rep #$20	                REP #$20        ; set A long
.19449c		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.19449e		d0 02		bne $1944a2	                    BNE inc_buff_ptr
.1944a0		e6 04		inc $0324	                    INC BIOS_LBA+2
.1944a2		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.1944a5		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.1944a7		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.1944aa		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.1944ac		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.1944b0		b0 0d		bcs $1944bf	                    BCS ret_success                 ; If success, return success
.1944b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1944b4		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.1944b6						ret_failure
.1944b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1944b8		85 0e		sta $032e	                    STA DOS_STATUS
.1944ba		28		plp		                    PLP
.1944bb		2b		pld		                    PLD
.1944bc		ab		plb		                    PLB
.1944bd		18		clc		                    CLC
.1944be		6b		rtl		                    RTL
.1944bf						ret_success
.1944bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1944c1		64 0e		stz $032e	                    STZ DOS_STATUS
.1944c3		28		plp		                    PLP
.1944c4		2b		pld		                    PLD
.1944c5		ab		plb		                    PLB
.1944c6		38		sec		                    SEC
.1944c7		6b		rtl		                    RTL
.1944c8						DOS_FREECLUS12
.1944c8		da		phx		                PHX
.1944c9		8b		phb		                PHB
.1944ca		0b		phd		                PHD
.1944cb		08		php		                PHP
.1944cc		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1944cf		ab		plb		                PLB
.1944d0		ab		plb		                PLB
.1944d1		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1944d4		2b		pld		                PLD
.1944d5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1944d7		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.1944da		85 10		sta $0330	                STA DOS_CLUS_ID
.1944dc		a9 00 00	lda #$0000	                LDA #0
.1944df		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1944e1		22 20 42 19	jsl $194220	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.1944e5		22 6d 44 19	jsl $19446d	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.1944e9		b0 07		bcs $1944f2	                BCS start_of_fat                ; If success, move X to the start of the FAT
.1944eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1944ed		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1944ef		82 99 00	brl $19458b	                BRL ret_failure
.1944f2						start_of_fat
.1944f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1944f4		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.1944f6		89 01 00	bit #$0001	                BIT #1
.1944f9		d0 09		bne $194504	                BNE is_odd
.1944fb		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.1944ff		29 ff 0f	and #$0fff	                AND #$0FFF
.194502		80 08		bra $19450c	                BRA chk_available
.194504		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.194508		4a		lsr a		                LSR A
.194509		4a		lsr a		                LSR A
.19450a		4a		lsr a		                LSR A
.19450b		4a		lsr a		                LSR A
.19450c						chk_available
.19450c		85 28		sta $0348	                STA DOS_TEMP
.19450e		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.194511		f0 03		beq $194516	                BEQ chk_found
.194513		82 39 00	brl $19454f	                BRL next_cluster                ; No: advance to the next cluster
.194516		8a		txa		chk_found       TXA
.194517		85 2a		sta $034a	                STA DOS_TEMP+2
.194519		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.19451b		89 01 00	bit #$0001	                BIT #1
.19451e		d0 0d		bne $19452d	                BNE is_odd2
.194520						is_even2
.194520		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.194524		09 ff 0f	ora #$0fff	                ORA #$0FFF
.194527		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.19452b		80 0b		bra $194538	                BRA write_fat
.19452d						is_odd2
.19452d		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.194531		09 f0 ff	ora #$fff0	                ORA #$FFF0
.194534		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194538		22 54 46 19	jsl $194654	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.19453c		b0 07		bcs $194545	                BCS ret_success                 ; If success: return success
.19453e		e2 20		sep #$20	                SEP #$20        ; set A short
.194540		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.194542		82 46 00	brl $19458b	                BRL ret_failure
.194545						ret_success
.194545		e2 20		sep #$20	                SEP #$20        ; set A short
.194547		64 0e		stz $032e	                STZ DOS_STATUS
.194549		28		plp		                PLP
.19454a		2b		pld		                PLD
.19454b		ab		plb		                PLB
.19454c		fa		plx		                PLX
.19454d		38		sec		                SEC
.19454e		6b		rtl		                RTL
.19454f						next_cluster
.19454f		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.194551		d0 02		bne $194555	                BNE calc_entry
.194553		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194555		22 20 42 19	jsl $194220	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.194559		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.19455c		f0 03		beq $194561	                BEQ chk_end_of_fat
.19455e		82 93 ff	brl $1944f4	                BRL chk_cluster                 ; No: go back and check it too
.194561						chk_end_of_fat
.194561		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.194563		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.194567		d0 0f		bne $194578	                BNE next_2
.194569		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19456b		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.19456f		d0 07		bne $194578	                BNE next_2                      ; No: get the next to sectors
.194571		e2 20		sep #$20	                SEP #$20        ; set A short
.194573		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.194575		82 13 00	brl $19458b	                BRL ret_failure
.194578						next_2
.194578		22 6d 44 19	jsl $19446d	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.19457c		90 06		bcc $194584	                BCC fat_fail                    ; If failed: return error
.19457e		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.194581		82 70 ff	brl $1944f4	                BRL chk_cluster                 ; And start checking from there
.194584						fat_fail
.194584		e2 20		sep #$20	                SEP #$20        ; set A short
.194586		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194588		82 00 00	brl $19458b	                BRL ret_failure
.19458b						ret_failure
.19458b		e2 20		sep #$20	                SEP #$20        ; set A short
.19458d		85 0e		sta $032e	                STA DOS_STATUS
.19458f		28		plp		                PLP
.194590		2b		pld		                PLD
.194591		ab		plb		                PLB
.194592		fa		plx		                PLX
.194593		18		clc		                CLC
.194594		6b		rtl		                RTL
.194595						DOS_FREECLUS32
.194595		8b		phb		                PHB
.194596		0b		phd		                PHD
.194597		08		php		                PHP
.194598		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19459b		ab		plb		                PLB
.19459c		ab		plb		                PLB
.19459d		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1945a0		2b		pld		                PLD
.1945a1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1945a3		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.1945a6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1945a8		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1945ab		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1945ad		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.1945b1		85 02		sta $0322	                STA BIOS_LBA
.1945b3		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1945b7		85 04		sta $0324	                STA BIOS_LBA+2
.1945b9		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.1945bd		b0 07		bcs $1945c6	                BCS initial_entry               ; If OK: set the initial entry to check
.1945bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1945c1		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.1945c3		82 6b 00	brl $194631	                BRL ret_failure
.1945c6						initial_entry
.1945c6		c2 20		rep #$20	                REP #$20        ; set A long
.1945c8		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.1945cb		85 10		sta $0330	                STA DOS_CLUS_ID
.1945cd		a9 00 00	lda #$0000	                LDA #0
.1945d0		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1945d2		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.1945d5		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.1945d9		d0 06		bne $1945e1	                BNE next_entry                  ; No: move to the next entry
.1945db		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.1945df		f0 36		beq $194617	                BEQ found_free                  ; Yes: go to allocate and return it
.1945e1		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.1945e3		d0 02		bne $1945e7	                BNE inc_ptr
.1945e5		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.1945e7		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.1945e8		e8		inx		                INX
.1945e9		e8		inx		                INX
.1945ea		e8		inx		                INX
.1945eb		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.1945ee		90 e5		bcc $1945d5	                BLT chk_entry                   ; No: check this entry
.1945f0		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.1945f2		d0 18		bne $19460c	                BNE get_block
.1945f4		e6 04		inc $0324	                INC BIOS_LBA+2
.1945f6		a5 04		lda $0324	                LDA BIOS_LBA+2
.1945f8		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.1945fc		90 0e		bcc $19460c	                BLT get_block
.1945fe		a5 02		lda $0322	                LDA BIOS_LBA
.194600		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.194604		90 06		bcc $19460c	                BLT get_block
.194606		e2 20		sep #$20	                SEP #$20        ; set A short
.194608		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.19460a		80 25		bra $194631	                BRA ret_failure
.19460c		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.194610		90 1b		bcc $19462d	                BCC ret_fat_error               ; If error: throw a FAT error
.194612		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.194615		80 be		bra $1945d5	                BRA chk_entry                   ; Check this entry
.194617						found_free
.194617		c2 20		rep #$20	                REP #$20        ; set A long
.194619		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.19461c		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.194620		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.194623		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.194627		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.19462b		b0 0d		bcs $19463a	                BCS ret_success                 ; If OK: return success
.19462d						ret_fat_error
.19462d		e2 20		sep #$20	                SEP #$20        ; set A short
.19462f		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.194631						ret_failure
.194631		e2 20		sep #$20	                SEP #$20        ; set A short
.194633		85 0e		sta $032e	                STA DOS_STATUS
.194635		28		plp		                PLP
.194636		2b		pld		                PLD
.194637		ab		plb		                PLB
.194638		18		clc		                CLC
.194639		6b		rtl		                RTL
.19463a						ret_success
.19463a		e2 20		sep #$20	                SEP #$20        ; set A short
.19463c		64 0e		stz $032e	                STZ DOS_STATUS
.19463e		28		plp		                PLP
.19463f		2b		pld		                PLD
.194640		ab		plb		                PLB
.194641		38		sec		                SEC
.194642		6b		rtl		                RTL
.194643						DELCLUSTER
.194643		e2 20		sep #$20	                SEP #$20        ; set A short
.194645		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194649		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.19464b		d0 04		bne $194651	                BNE fat32                       ; No: assume it's FAT32
.19464d		5c 90 46 19	jmp $194690	fat12           JML DELCLUSTER12
.194651		4c d3 46	jmp $1946d3	fat32           JMP DELCLUSTER32
.194654						WRITEFAT12
.194654		8b		phb		                PHB
.194655		0b		phd		                PHD
.194656		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.194659		ab		plb		                PLB
.19465a		ab		plb		                PLB
.19465b		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19465e		2b		pld		                PLD
.19465f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194661		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.194664		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194666		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194669		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19466b		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.19466d		85 02		sta $0322	                STA BIOS_LBA
.19466f		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194671		85 04		sta $0324	                STA BIOS_LBA+2
.194673		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.194677		90 14		bcc $19468d	                BCC done
.194679		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.19467c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19467e		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194681		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194683		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194685		d0 02		bne $194689	                BNE put_second
.194687		e6 04		inc $0324	                INC BIOS_LBA+2
.194689		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.19468d		2b		pld		done            PLD
.19468e		ab		plb		                PLB
.19468f		6b		rtl		                RTL
.194690						DELCLUSTER12
.194690		8b		phb		                PHB
.194691		0b		phd		                PHD
.194692		08		php		                PHP
.194693		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194696		ab		plb		                PLB
.194697		ab		plb		                PLB
.194698		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19469b		2b		pld		                PLD
.19469c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19469e		22 88 42 19	jsl $194288	                JSL FATFORCLUSTER12
.1946a2		8a		txa		                TXA                             ; Check to see if the index is odd or even
.1946a3		89 01 00	bit #$0001	                BIT #1
.1946a6		d0 08		bne $1946b0	                BNE is_odd
.1946a8		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.1946ab		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.1946ae		80 06		bra $1946b6	                BRA save_update
.1946b0		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.1946b3		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.1946b6		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.1946b9		22 54 46 19	jsl $194654	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.1946bd		b0 0b		bcs $1946ca	                BCS ret_success
.1946bf						ret_failure
.1946bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1946c1		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1946c3		85 0e		sta $032e	                STA DOS_STATUS
.1946c5		28		plp		                PLP
.1946c6		2b		pld		                PLD
.1946c7		ab		plb		                PLB
.1946c8		18		clc		                CLC
.1946c9		6b		rtl		                RTL
.1946ca						ret_success
.1946ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1946cc		64 0e		stz $032e	                STZ DOS_STATUS
.1946ce		28		plp		                PLP
.1946cf		2b		pld		                PLD
.1946d0		ab		plb		                PLB
.1946d1		38		sec		                SEC
.1946d2		6b		rtl		                RTL
.1946d3						DELCLUSTER32
.1946d3		8b		phb		                PHB
.1946d4		0b		phd		                PHD
.1946d5		08		php		                PHP
.1946d6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946d8		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.1946db		ab		plb		                PLB
.1946dc		ab		plb		                PLB
.1946dd		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1946e0		2b		pld		                PLD
.1946e1		22 e5 42 19	jsl $1942e5	                JSL FATFORCLUSTER32
.1946e5		a9 00 00	lda #$0000	                LDA #0
.1946e8		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.1946eb		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.1946ee		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1946f2		b0 0b		bcs $1946ff	                BCS ret_success
.1946f4						ret_failure
.1946f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1946f6		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1946f8		85 0e		sta $032e	                STA DOS_STATUS
.1946fa		28		plp		                PLP
.1946fb		2b		pld		                PLD
.1946fc		ab		plb		                PLB
.1946fd		18		clc		                CLC
.1946fe		6b		rtl		                RTL
.1946ff						ret_success
.1946ff		e2 20		sep #$20	                SEP #$20        ; set A short
.194701		64 0e		stz $032e	                STZ DOS_STATUS
.194703		28		plp		                PLP
.194704		2b		pld		                PLD
.194705		ab		plb		                PLB
.194706		38		sec		                SEC
.194707		6b		rtl		                RTL
.194708						DOS_APPENDCLUS
.194708		8b		phb		                PHB
.194709		0b		phd		                PHD
.19470a		08		php		                PHP
.19470b		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.19470e		ab		plb		                PLB
.19470f		ab		plb		                PLB
.194710		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194713		2b		pld		                PLD
.194714		c2 30		rep #$30	                REP #$30        ; set A&X long
.194716		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.194718		48		pha		                PHA
.194719		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19471b		48		pha		                PHA
.19471c		22 48 44 19	jsl $194448	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.194720		b0 09		bcs $19472b	                BCS save_cluster                ; If we got a cluster, write the data to it
.194722		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.194723		85 10		sta $0330	                STA DOS_CLUS_ID
.194725		68		pla		                PLA
.194726		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194728		82 7d 00	brl $1947a8	                BRL pass_failure                ; Pass the failure back up the chain
.19472b		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.19472d		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194730		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194732		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.194735		22 d1 3f 19	jsl $193fd1	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.194739		90 e7		bcc $194722	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.19473b		68		pla		                PLA                             ; Restore the cluster of the file
.19473c		85 10		sta $0330	                STA DOS_CLUS_ID
.19473e		68		pla		                PLA
.19473f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194741		22 45 43 19	jsl $194345	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.194745		b0 fa		bcs $194741	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.194747		e2 20		sep #$20	                SEP #$20        ; set A short
.194749		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.19474d		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.19474f		d0 3d		bne $19478e	                BNE fat32                       ; No: assume it's FAT32
.194751						fat12
.194751		c2 20		rep #$20	                REP #$20        ; set A long
.194753		22 20 42 19	jsl $194220	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.194757		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.194759		89 01 00	bit #$0001	                BIT #1
.19475c		d0 11		bne $19476f	                BNE is_odd
.19475e		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.194761		29 ff 0f	and #$0fff	                AND #$0FFF
.194764		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194767		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.19476a		29 00 f0	and #$f000	                AND #$F000
.19476d		80 10		bra $19477f	                BRA update_fat12
.19476f		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194772		0a		asl a		                ASL A
.194773		0a		asl a		                ASL A
.194774		0a		asl a		                ASL A
.194775		0a		asl a		                ASL A
.194776		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194779		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.19477c		29 0f 00	and #$000f	                AND #$000F
.19477f		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194782		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194785		22 54 46 19	jsl $194654	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194789		b0 22		bcs $1947ad	                BCS ret_success
.19478b		82 1a 00	brl $1947a8	                BRL pass_failure
.19478e						fat32
.19478e		c2 20		rep #$20	                REP #$20        ; set A long
.194790		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194793		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194796		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194799		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.19479c		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.1947a0		b0 0b		bcs $1947ad	                BCS ret_success
.1947a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1947a4		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.1947a6		85 0e		sta $032e	                STA DOS_STATUS
.1947a8		28		plp		pass_failure    PLP
.1947a9		2b		pld		                PLD
.1947aa		ab		plb		                PLB
.1947ab		18		clc		                CLC
.1947ac		6b		rtl		                RTL
.1947ad						ret_success
.1947ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1947af		64 0e		stz $032e	                STZ DOS_STATUS
.1947b1		28		plp		                PLP
.1947b2		2b		pld		                PLD
.1947b3		ab		plb		                PLB
.1947b4		38		sec		                SEC
.1947b5		6b		rtl		                RTL
.1947b6						BCD2BIN
.1947b6		8b		phb		                PHB
.1947b7		0b		phd		                PHD
.1947b8		08		php		                PHP
.1947b9		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1947bc		ab		plb		                PLB
.1947bd		ab		plb		                PLB
.1947be		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1947c1		2b		pld		                PLD
.1947c2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1947c4		85 28		sta $0348	                STA DOS_TEMP
.1947c6		29 0f 00	and #$000f	                AND #$000F
.1947c9		85 2a		sta $034a	                STA DOS_TEMP+2
.1947cb		a5 28		lda $0348	                LDA DOS_TEMP
.1947cd		4a		lsr a		                LSR A
.1947ce		4a		lsr a		                LSR A
.1947cf		4a		lsr a		                LSR A
.1947d0		4a		lsr a		                LSR A
.1947d1		85 28		sta $0348	                STA DOS_TEMP
.1947d3		29 0f 00	and #$000f	                AND #$000F
.1947d6		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.1947da		a9 0a 00	lda #$000a	                LDA #10
.1947dd		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.1947e1		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.1947e5		18		clc		                CLC
.1947e6		65 2a		adc $034a	                ADC DOS_TEMP+2
.1947e8		85 2a		sta $034a	                STA DOS_TEMP+2
.1947ea		a5 28		lda $0348	                LDA DOS_TEMP
.1947ec		4a		lsr a		                LSR A
.1947ed		4a		lsr a		                LSR A
.1947ee		4a		lsr a		                LSR A
.1947ef		4a		lsr a		                LSR A
.1947f0		85 28		sta $0348	                STA DOS_TEMP
.1947f2		29 0f 00	and #$000f	                AND #$000F
.1947f5		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.1947f9		a9 64 00	lda #$0064	                LDA #100
.1947fc		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194800		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194804		18		clc		                CLC
.194805		65 2a		adc $034a	                ADC DOS_TEMP+2
.194807		85 2a		sta $034a	                STA DOS_TEMP+2
.194809		a5 28		lda $0348	                LDA DOS_TEMP
.19480b		4a		lsr a		                LSR A
.19480c		4a		lsr a		                LSR A
.19480d		4a		lsr a		                LSR A
.19480e		4a		lsr a		                LSR A
.19480f		29 0f 00	and #$000f	                AND #$000F
.194812		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194816		a9 e8 03	lda #$03e8	                LDA #1000
.194819		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.19481d		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194821		18		clc		                CLC
.194822		65 2a		adc $034a	                ADC DOS_TEMP+2
.194824		28		plp		                PLP
.194825		2b		pld		                PLD
.194826		ab		plb		                PLB
.194827		6b		rtl		                RTL
.194828						DOS_RTCCREATE
.194828		8b		phb		                PHB
.194829		0b		phd		                PHD
.19482a		08		php		                PHP
.19482b		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.19482e		ab		plb		                PLB
.19482f		ab		plb		                PLB
.194830		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194833		2b		pld		                PLD
.194834		c2 10		rep #$10	                REP #$10        ; set X long
.194836		e2 20		sep #$20	                SEP #$20        ; set A short
.194838		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.19483c		09 08		ora #$08	                ORA #%00001000
.19483e		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194842		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.194846		85 29		sta $0349	                STA DOS_TEMP+1
.194848		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.19484c		85 28		sta $0348	                STA DOS_TEMP
.19484e		c2 20		rep #$20	                REP #$20        ; set A long
.194850		a5 28		lda $0348	                LDA DOS_TEMP
.194852		22 b6 47 19	jsl $1947b6	                JSL BCD2BIN                 ; Convert it to binary
.194856		85 28		sta $0348	                STA DOS_TEMP
.194858		38		sec		                SEC                         ; Year is relative to 1980
.194859		e9 bc 07	sbc #$07bc	                SBC #1980
.19485c		c2 20		rep #$20	                REP #$20        ; set A long
.19485e		0a		asl a		                ASL A
.19485f		0a		asl a		                ASL A
.194860		0a		asl a		                ASL A
.194861		0a		asl a		                ASL A
.194862		0a		asl a		                ASL A
.194863		0a		asl a		                ASL A
.194864		0a		asl a		                ASL A
.194865		0a		asl a		                ASL A
.194866		0a		asl a		                ASL A
.194867		29 00 fe	and #$fe00	                AND #$FE00
.19486a		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.19486d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19486f		e2 20		sep #$20	                SEP #$20        ; set A short
.194871		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.194875		c2 20		rep #$20	                REP #$20        ; set A long
.194877		29 ff 00	and #$00ff	                AND #$00FF
.19487a		22 b6 47 19	jsl $1947b6	                JSL BCD2BIN                 ; Convert it to binary
.19487e		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.194881		0a		asl a		                ASL A
.194882		0a		asl a		                ASL A
.194883		0a		asl a		                ASL A
.194884		0a		asl a		                ASL A
.194885		0a		asl a		                ASL A
.194886		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.194889		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.19488c		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.19488e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194890		e2 20		sep #$20	                SEP #$20        ; set A short
.194892		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.194896		c2 20		rep #$20	                REP #$20        ; set A long
.194898		29 ff 00	and #$00ff	                AND #$00FF
.19489b		22 b6 47 19	jsl $1947b6	                JSL BCD2BIN                 ; Convert it to binary
.19489f		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.1948a2		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.1948a5		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.1948a7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1948a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1948ab		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.1948af		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.1948b1		c2 20		rep #$20	                REP #$20        ; set A long
.1948b3		29 ff 00	and #$00ff	                AND #$00FF
.1948b6		22 b6 47 19	jsl $1947b6	                JSL BCD2BIN                 ; Convert it to binary
.1948ba		c2 20		rep #$20	                REP #$20        ; set A long
.1948bc		0a		asl a		                ASL A
.1948bd		0a		asl a		                ASL A
.1948be		0a		asl a		                ASL A
.1948bf		0a		asl a		                ASL A
.1948c0		0a		asl a		                ASL A
.1948c1		0a		asl a		                ASL A
.1948c2		0a		asl a		                ASL A
.1948c3		0a		asl a		                ASL A
.1948c4		0a		asl a		                ASL A
.1948c5		0a		asl a		                ASL A
.1948c6		0a		asl a		                ASL A
.1948c7		29 00 f8	and #$f800	                AND #$F800
.1948ca		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.1948cd		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1948cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1948d1		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.1948d5		c2 20		rep #$20	                REP #$20        ; set A long
.1948d7		29 ff 00	and #$00ff	                AND #$00FF
.1948da		22 b6 47 19	jsl $1947b6	                JSL BCD2BIN                 ; Convert it to binary
.1948de		c2 20		rep #$20	                REP #$20        ; set A long
.1948e0		0a		asl a		                ASL A
.1948e1		0a		asl a		                ASL A
.1948e2		0a		asl a		                ASL A
.1948e3		0a		asl a		                ASL A
.1948e4		0a		asl a		                ASL A
.1948e5		29 e0 07	and #$07e0	                AND #$07E0
.1948e8		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.1948eb		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.1948ed		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1948ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1948f1		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.1948f5		c2 20		rep #$20	                REP #$20        ; set A long
.1948f7		29 ff 00	and #$00ff	                AND #$00FF
.1948fa		22 b6 47 19	jsl $1947b6	                JSL BCD2BIN                 ; Convert it to binary
.1948fe		c2 20		rep #$20	                REP #$20        ; set A long
.194900		29 1f 00	and #$001f	                AND #$001F
.194903		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194906		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194908		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19490a		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.19490e		29 f7 00	and #$00f7	                AND #%11110111
.194911		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194915		28		plp		                PLP
.194916		2b		pld		                PLD
.194917		ab		plb		                PLB
.194918		6b		rtl		                RTL
.194919						DOS_CREATE
.194919		8b		phb		                PHB
.19491a		0b		phd		                PHD
.19491b		08		php		                PHP
.19491c		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.19491f		ab		plb		                PLB
.194920		ab		plb		                PLB
.194921		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194924		2b		pld		                PLD
.194925		c2 30		rep #$30	                REP #$30        ; set A&X long
.194927		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.19492a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19492c		85 28		sta $0348	                STA DOS_TEMP
.19492e		c8		iny		                INY
.19492f		c8		iny		                INY
.194930		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194932		85 2a		sta $034a	                STA DOS_TEMP+2
.194934		e2 20		sep #$20	                SEP #$20        ; set A short
.194936		a0 00 00	ldy #$0000	                LDY #0
.194939		a2 00 00	ldx #$0000	                LDX #0
.19493c		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.19493e		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.194940		f0 04		beq $194946	                BEQ find_file                   ; If it's NULL, we're done
.194942		e8		inx		                INX
.194943		c8		iny		                INY
.194944		80 f6		bra $19493c	                BRA path_loop
.194946		22 c1 40 19	jsl $1940c1	find_file       JSL DOS_PARSE_PATH
.19494a		22 4e 41 19	jsl $19414e	                JSL DOS_FINDFILE
.19494e		90 07		bcc $194957	                BCC set_device
.194950		e2 20		sep #$20	                SEP #$20        ; set A short
.194952		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.194954		82 d2 00	brl $194a29	                BRL ret_failure
.194957						set_device
.194957		e2 20		sep #$20	                SEP #$20        ; set A short
.194959		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.19495c		a5 01		lda $0321	                LDA BIOS_DEV
.19495e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194960						validate_name
.194960		22 48 44 19	jsl $194448	                JSL DOS_FREECLUS
.194964		b0 03		bcs $194969	                BCS save_data
.194966		82 c4 00	brl $194a2d	                BRL pass_failure
.194969						save_data
.194969		c2 20		rep #$20	                REP #$20        ; set A long
.19496b		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.19496e		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.194970		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194972		c8		iny		                INY
.194973		c8		iny		                INY
.194974		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194976		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194978		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.19497b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19497d		85 1c		sta $033c	                STA DOS_BUFF_PTR
.19497f		c8		iny		                INY
.194980		c8		iny		                INY
.194981		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194983		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194985		22 d1 3f 19	jsl $193fd1	                JSL DOS_PUTCLUSTER
.194989		b0 00		bcs $19498b	                BCS find_dir
.19498b						find_dir
.19498b		c2 20		rep #$20	                REP #$20        ; set A long
.19498d		22 6f 3b 19	jsl $193b6f	                JSL DOS_DIRFINDFREE
.194991		b0 1a		bcs $1949ad	                BCS set_entry
.194993		c2 20		rep #$20	                REP #$20        ; set A long
.194995		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.194998		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.19499a		85 10		sta $0330	                STA DOS_CLUS_ID
.19499c		c8		iny		                INY
.19499d		c8		iny		                INY
.19499e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1949a0		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1949a2		22 d3 46 19	jsl $1946d3	                JSL DELCLUSTER32                ; Delete the cluster
.1949a6		e2 20		sep #$20	                SEP #$20        ; set A short
.1949a8		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.1949aa		82 7c 00	brl $194a29	                BRL ret_failure
.1949ad						set_entry
.1949ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1949af		a0 00 00	ldy #$0000	                LDY #0
.1949b2		a9 00		lda #$00	                LDA #0                          ; NULL
.1949b4		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.1949b6		c8		iny		                INY
.1949b7		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.1949ba		d0 f8		bne $1949b4	                BNE copy_dir_loop
.1949bc		a0 00 00	ldy #$0000	                LDY #0
.1949bf		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.1949c2		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.1949c4		c8		iny		                INY
.1949c5		c0 0b 00	cpy #$000b	                CPY #11
.1949c8		d0 f5		bne $1949bf	                BNE name_loop
.1949ca		c2 20		rep #$20	                REP #$20        ; set A long
.1949cc		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.1949cf		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1949d1		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.1949d4		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.1949d6		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.1949d9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1949db		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.1949de		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.1949e0		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.1949e3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1949e5		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.1949e8		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.1949ea		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.1949ed		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1949ef		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.1949f2		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.1949f4		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.1949f7		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.1949fa		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1949fc		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.1949ff		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194a01		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.194a04		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194a06		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.194a09		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194a0b		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.194a0e		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194a10		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.194a13		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194a15		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.194a18		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194a1a		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.194a1d		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194a1f		c2 20		rep #$20	                REP #$20        ; set A long
.194a21		22 17 3c 19	jsl $193c17	                JSL DOS_DIRWRITE
.194a25		b0 0b		bcs $194a32	                BCS ret_success
.194a27		80 04		bra $194a2d	                BRA pass_failure
.194a29						ret_failure
.194a29		e2 20		sep #$20	                SEP #$20        ; set A short
.194a2b		85 0e		sta $032e	                STA DOS_STATUS
.194a2d		28		plp		pass_failure    PLP
.194a2e		2b		pld		                PLD
.194a2f		ab		plb		                PLB
.194a30		18		clc		                CLC
.194a31		6b		rtl		                RTL
.194a32						ret_success
.194a32		e2 20		sep #$20	                SEP #$20        ; set A short
.194a34		64 0e		stz $032e	                STZ DOS_STATUS
.194a36		28		plp		                PLP
.194a37		2b		pld		                PLD
.194a38		ab		plb		                PLB
.194a39		38		sec		                SEC
.194a3a		6b		rtl		                RTL
.194a3b						DOS_COPYPATH
.194a3b		da		phx		                PHX
.194a3c		5a		phy		                PHY
.194a3d		8b		phb		                PHB
.194a3e		0b		phd		                PHD
.194a3f		08		php		                PHP
.194a40		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194a43		ab		plb		                PLB
.194a44		ab		plb		                PLB
.194a45		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194a48		2b		pld		                PLD
.194a49		c2 30		rep #$30	                REP #$30        ; set A&X long
.194a4b		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.194a4e		a2 00 00	ldx #$0000	                LDX #0
.194a51		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.194a53		e8		inx		                INX
.194a54		e8		inx		                INX
.194a55		e0 00 01	cpx #$0100	                CPX #256
.194a58		d0 f7		bne $194a51	                BNE clr_loop
.194a5a		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.194a5c		d0 04		bne $194a62	                BNE get_path            ; No: attempt to fetch the path
.194a5e		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.194a60		f0 27		beq $194a89	                BEQ done                ; Yes: return an empty buffer
.194a62		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.194a65		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194a67		85 28		sta $0348	                STA DOS_TEMP
.194a69		c8		iny		                INY
.194a6a		c8		iny		                INY
.194a6b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194a6d		85 2a		sta $034a	                STA DOS_TEMP+2
.194a6f		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.194a71		d0 04		bne $194a77	                BNE start_copy          ; No: start copying it
.194a73		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194a75		f0 12		beq $194a89	                BEQ done                ; Yes: return an empty buffer
.194a77						start_copy
.194a77		e2 20		sep #$20	                SEP #$20        ; set A short
.194a79		a2 00 00	ldx #$0000	                LDX #0
.194a7c		a0 00 00	ldy #$0000	                LDY #0
.194a7f		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.194a81		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194a83		f0 04		beq $194a89	                BEQ done
.194a85		e8		inx		                INX
.194a86		c8		iny		                INY
.194a87		d0 f6		bne $194a7f	                BNE loop
.194a89		28		plp		done            PLP
.194a8a		2b		pld		                PLD
.194a8b		ab		plb		                PLB
.194a8c		7a		ply		                PLY
.194a8d		fa		plx		                PLX
.194a8e		6b		rtl		                RTL

;******  Return to file: src\SDOS.asm

.194a8f						DOS_TEST
.194a8f		8b		phb		                PHB
.194a90		0b		phd		                PHD
.194a91		08		php		                PHP
.194a92		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194a95		ab		plb		                PLB
.194a96		ab		plb		                PLB
.194a97		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194a9a		2b		pld		                PLD
.194a9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.194a9d		a9 c3 4a	lda #$4ac3	                LDA #<>src_file
.194aa0		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.194aa4		a9 19 00	lda #$0019	                LDA #`src_file
.194aa7		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.194aab		a9 d0 4a	lda #$4ad0	                LDA #<>dst_file
.194aae		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.194ab2		a9 19 00	lda #$0019	                LDA #`dst_file
.194ab5		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.194ab9		22 29 52 19	jsl $195229	                JSL IF_COPY
.194abd		b0 00		bcs $194abf	                BCS done
.194abf		28		plp		done            PLP
.194ac0		2b		pld		                PLD
.194ac1		ab		plb		                PLB
.194ac2		6b		rtl		                RTL
>194ac3		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>194acb		2e 62 61 73 00
>194ad0		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>194ad8		32 2e 62 61 73 00
.194ade						IF_OPEN
.194ade		da		phx		                PHX
.194adf		5a		phy		                PHY
.194ae0		0b		phd		                PHD
.194ae1		8b		phb		                PHB
.194ae2		08		php		                PHP
.194ae3		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194ae6		ab		plb		                PLB
.194ae7		ab		plb		                PLB
.194ae8		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194aeb		2b		pld		                PLD
.194aec		e2 20		sep #$20	                SEP #$20        ; set A short
.194aee		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.194af1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194af3		89 20		bit #$20	                BIT #FD_STAT_OPEN
.194af5		f0 05		beq $194afc	                BEQ ok_to_open
.194af7		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.194af9		82 ed 05	brl $1950e9	                BRL IF_FAILURE
.194afc		22 3b 4a 19	jsl $194a3b	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.194b00		22 4e 41 19	jsl $19414e	                JSL DOS_FINDFILE                ; Attempt to find the file
.194b04		b0 03		bcs $194b09	                BCS is_found                    ; If OK: we found the file
.194b06		82 e4 05	brl $1950ed	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.194b09						is_found
.194b09		e2 20		sep #$20	                SEP #$20        ; set A short
.194b0b		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194b0e		a5 01		lda $0321	                LDA BIOS_DEV
.194b10		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b12		c2 20		rep #$20	                REP #$20        ; set A long
.194b14		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.194b17		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194b19		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194b1b		c8		iny		                INY
.194b1c		c8		iny		                INY
.194b1d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194b1f		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194b21		22 9f 3f 19	jsl $193f9f	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.194b25		b0 03		bcs $194b2a	                BCS read_cluster
.194b27		82 c3 05	brl $1950ed	                BRL IF_PASSFAILURE
.194b2a		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.194b2d		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194b2f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b31		c8		iny		                INY
.194b32		c8		iny		                INY
.194b33		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194b35		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b37		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.194b3a		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194b3c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b3e		c8		iny		                INY
.194b3f		c8		iny		                INY
.194b40		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194b42		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b44		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.194b47		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194b49		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.194b4c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b4e		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194b51		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194b53		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194b56		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b58		e2 20		sep #$20	                SEP #$20        ; set A short
.194b5a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.194b5d		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.194b5f		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194b61		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b63		82 8e 05	brl $1950f4	                BRL IF_SUCCESS
.194b66						IF_CREATE
.194b66		da		phx		                PHX
.194b67		5a		phy		                PHY
.194b68		0b		phd		                PHD
.194b69		8b		phb		                PHB
.194b6a		08		php		                PHP
.194b6b		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194b6e		ab		plb		                PLB
.194b6f		ab		plb		                PLB
.194b70		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194b73		2b		pld		                PLD
.194b74		22 19 49 19	jsl $194919	                JSL DOS_CREATE                  ; Attempt to create the file
.194b78		90 18		bcc $194b92	                BCC pass_failure                ; If it fails: pass the failure up the chain
.194b7a		c2 30		rep #$30	                REP #$30        ; set A&X long
.194b7c		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.194b7f		a9 00 00	lda #$0000	                LDA #0
.194b82		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b84		c8		iny		                INY
.194b85		c8		iny		                INY
.194b86		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b88		e2 20		sep #$20	                SEP #$20        ; set A short
.194b8a		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.194b8d		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.194b8f		82 62 05	brl $1950f4	                BRL IF_SUCCESS
.194b92		82 54 05	brl $1950e9	pass_failure    BRL IF_FAILURE
.194b95						IF_CLOSE
.194b95		da		phx		                PHX
.194b96		5a		phy		                PHY
.194b97		0b		phd		                PHD
.194b98		8b		phb		                PHB
.194b99		08		php		                PHP
.194b9a		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194b9d		ab		plb		                PLB
.194b9e		ab		plb		                PLB
.194b9f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194ba2		2b		pld		                PLD
.194ba3		e2 20		sep #$20	                SEP #$20        ; set A short
.194ba5		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.194ba8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194baa		89 02		bit #$02	                BIT #FD_STAT_WRITE
.194bac		f0 09		beq $194bb7	                BEQ set_flag                    ; No, just mark it closed
.194bae		22 18 4c 19	jsl $194c18	                JSL IF_WRITE                    ; Attempt to write the cluster
.194bb2		b0 03		bcs $194bb7	                BCS set_flag
.194bb4		82 36 05	brl $1950ed	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.194bb7		22 d8 51 19	jsl $1951d8	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.194bbb		82 36 05	brl $1950f4	                BRL IF_SUCCESS
.194bbe						IF_READ
.194bbe		da		phx		                PHX
.194bbf		5a		phy		                PHY
.194bc0		0b		phd		                PHD
.194bc1		8b		phb		                PHB
.194bc2		08		php		                PHP
.194bc3		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194bc6		ab		plb		                PLB
.194bc7		ab		plb		                PLB
.194bc8		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194bcb		2b		pld		                PLD
.194bcc		c2 10		rep #$10	                REP #$10        ; set X long
.194bce		e2 20		sep #$20	                SEP #$20        ; set A short
.194bd0						get_dev
.194bd0		e2 20		sep #$20	                SEP #$20        ; set A short
.194bd2		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194bd5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194bd7		85 01		sta $0321	                STA BIOS_DEV
.194bd9		22 28 3d 19	jsl $193d28	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194bdd		c2 20		rep #$20	                REP #$20        ; set A long
.194bdf		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194be2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194be4		85 10		sta $0330	                STA DOS_CLUS_ID
.194be6		c8		iny		                INY
.194be7		c8		iny		                INY
.194be8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194bea		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194bec		22 45 43 19	jsl $194345	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.194bf0		90 13		bcc $194c05	                BCC pass_failure                ; If not OK: pass the failure up the chain
.194bf2		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194bf5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194bf7		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194bf9		c8		iny		                INY
.194bfa		c8		iny		                INY
.194bfb		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194bfd		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194bff		22 9f 3f 19	jsl $193f9f	                JSL DOS_GETCLUSTER              ; Get the cluster
.194c03		b0 03		bcs $194c08	                BCS ret_success                 ; If ok: return success
.194c05						pass_failure
.194c05		82 e5 04	brl $1950ed	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194c08		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.194c0b		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194c0d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c0f		c8		iny		                INY
.194c10		c8		iny		                INY
.194c11		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194c13		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c15		82 dc 04	brl $1950f4	                BRL IF_SUCCESS
.194c18						IF_WRITE
.194c18		da		phx		                PHX
.194c19		5a		phy		                PHY
.194c1a		0b		phd		                PHD
.194c1b		8b		phb		                PHB
.194c1c		08		php		                PHP
.194c1d		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194c20		ab		plb		                PLB
.194c21		ab		plb		                PLB
.194c22		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194c25		2b		pld		                PLD
.194c26		c2 10		rep #$10	                REP #$10        ; set X long
.194c28		e2 20		sep #$20	                SEP #$20        ; set A short
.194c2a		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194c2d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c2f		85 01		sta $0321	                STA BIOS_DEV
.194c31		22 28 3d 19	jsl $193d28	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194c35		c2 20		rep #$20	                REP #$20        ; set A long
.194c37		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194c3a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c3c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194c3e		c8		iny		                INY
.194c3f		c8		iny		                INY
.194c40		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c42		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194c44		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194c47		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c49		85 10		sta $0330	                STA DOS_CLUS_ID
.194c4b		c8		iny		                INY
.194c4c		c8		iny		                INY
.194c4d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c4f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194c51		d0 1a		bne $194c6d	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.194c53		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194c55		d0 16		bne $194c6d	                BNE rewrite_cluster
.194c57		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.194c5a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c5c		85 10		sta $0330	                STA DOS_CLUS_ID
.194c5e		c8		iny		                INY
.194c5f		c8		iny		                INY
.194c60		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c62		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194c64		22 08 47 19	jsl $194708	                JSL DOS_APPENDCLUS              ; Append the cluster
.194c68		b0 0c		bcs $194c76	                BCS ret_success                 ; If OK: return success
.194c6a		82 80 04	brl $1950ed	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194c6d		22 d1 3f 19	jsl $193fd1	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.194c71		b0 03		bcs $194c76	                BCS ret_success                 ; If ok: return success
.194c73		82 77 04	brl $1950ed	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194c76		82 7b 04	brl $1950f4	ret_success     BRL IF_SUCCESS
.194c79						IF_DIROPEN
.194c79		da		phx		                PHX
.194c7a		5a		phy		                PHY
.194c7b		0b		phd		                PHD
.194c7c		8b		phb		                PHB
.194c7d		08		php		                PHP
.194c7e		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194c81		ab		plb		                PLB
.194c82		ab		plb		                PLB
.194c83		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194c86		2b		pld		                PLD
.194c87		c2 30		rep #$30	                REP #$30        ; set A&X long
.194c89		22 3b 4a 19	jsl $194a3b	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.194c8d		22 c1 40 19	jsl $1940c1	                JSL DOS_PARSE_PATH          ; Parse the path
.194c91		22 28 3d 19	jsl $193d28	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.194c95		b0 03		bcs $194c9a	                BCS get_root_dir            ; If successful: get the root directory
.194c97		82 53 04	brl $1950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.194c9a						get_root_dir
.194c9a		c2 30		rep #$30	                REP #$30        ; set A&X long
.194c9c		22 2e 3a 19	jsl $193a2e	                JSL DOS_DIROPEN
.194ca0		b0 03		bcs $194ca5	                BCS success
.194ca2		82 48 04	brl $1950ed	                BRL IF_PASSFAILURE
.194ca5		82 4c 04	brl $1950f4	success         BRL IF_SUCCESS
.194ca8						IF_DIRNEXT
.194ca8		5c b9 3a 19	jmp $193ab9	                JML DOS_DIRNEXT
.194cac						IF_DELETE
.194cac		da		phx		                PHX
.194cad		5a		phy		                PHY
.194cae		0b		phd		                PHD
.194caf		8b		phb		                PHB
.194cb0		08		php		                PHP
.194cb1		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194cb4		ab		plb		                PLB
.194cb5		ab		plb		                PLB
.194cb6		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194cb9		2b		pld		                PLD
.194cba		c2 30		rep #$30	                REP #$30        ; set A&X long
.194cbc		22 4e 41 19	jsl $19414e	                JSL DOS_FINDFILE
.194cc0		b0 03		bcs $194cc5	                BCS get_first_clus
.194cc2		82 28 04	brl $1950ed	                BRL IF_PASSFAILURE
.194cc5						get_first_clus
.194cc5		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.194cc8		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194cca		85 10		sta $0330	                STA DOS_CLUS_ID
.194ccc		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194ccf		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194cd1		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194cd3		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194cd5		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.194cd8		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194cda		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.194cdd		22 45 43 19	jsl $194345	del_loop        JSL NEXTCLUSTER
.194ce1		90 2f		bcc $194d12	                BCC del_one
.194ce3		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194ce5		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.194ce8		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194cea		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.194ced		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.194cf0		85 10		sta $0330	                STA DOS_CLUS_ID
.194cf2		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.194cf5		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194cf7		22 d3 46 19	jsl $1946d3	                JSL DELCLUSTER32
.194cfb		b0 03		bcs $194d00	                BCS go_next
.194cfd		82 ed 03	brl $1950ed	                BRL IF_PASSFAILURE
.194d00						go_next
.194d00		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.194d03		85 10		sta $0330	                STA DOS_CLUS_ID
.194d05		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.194d08		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.194d0b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194d0d		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.194d10		80 cb		bra $194cdd	                BRA del_loop
.194d12						del_one
.194d12		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.194d15		85 10		sta $0330	                STA DOS_CLUS_ID
.194d17		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.194d1a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194d1c		22 43 46 19	jsl $194643	                JSL DELCLUSTER
.194d20		b0 03		bcs $194d25	                BCS free_dir_entry
.194d22		82 c8 03	brl $1950ed	                BRL IF_PASSFAILURE
.194d25						free_dir_entry
.194d25		e2 20		sep #$20	                SEP #$20        ; set A short
.194d27		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.194d2a		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.194d2c		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d2e		22 17 3c 19	jsl $193c17	                JSL DOS_DIRWRITE                ; Write the directory entry back
.194d32		b0 03		bcs $194d37	                BCS ret_success
.194d34		82 b6 03	brl $1950ed	                BRL IF_PASSFAILURE
.194d37		82 ba 03	brl $1950f4	ret_success     BRL IF_SUCCESS
.194d3a						IF_DIRREAD
.194d3a		da		phx		                PHX
.194d3b		5a		phy		                PHY
.194d3c		0b		phd		                PHD
.194d3d		8b		phb		                PHB
.194d3e		08		php		                PHP
.194d3f		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194d42		ab		plb		                PLB
.194d43		ab		plb		                PLB
.194d44		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194d47		2b		pld		                PLD
.194d48		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d4a		22 4e 41 19	jsl $19414e	                JSL DOS_FINDFILE
.194d4e		b0 03		bcs $194d53	                BCS success
.194d50		82 96 03	brl $1950e9	                BRL IF_FAILURE
.194d53		82 9e 03	brl $1950f4	success         BRL IF_SUCCESS
.194d56						IF_DIRWRITE
.194d56		5c 17 3c 19	jmp $193c17	                JML DOS_DIRWRITE
.194d5a						IF_LOAD
.194d5a		da		phx		                PHX
.194d5b		5a		phy		                PHY
.194d5c		0b		phd		                PHD
.194d5d		8b		phb		                PHB
.194d5e		08		php		                PHP
.194d5f		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194d62		ab		plb		                PLB
.194d63		ab		plb		                PLB
.194d64		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194d67		2b		pld		                PLD
.194d68		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d6a		22 de 4a 19	jsl $194ade	                JSL IF_OPEN
.194d6e		b0 03		bcs $194d73	                BCS setup                   ; If success: start setting things up
.194d70		82 7a 03	brl $1950ed	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.194d73						setup
.194d73		c2 20		rep #$20	                REP #$20        ; set A long
.194d75		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.194d78		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d7a		85 2c		sta $034c	                STA DOS_FILE_SIZE
.194d7c		c8		iny		                INY
.194d7d		c8		iny		                INY
.194d7e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d80		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194d82		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.194d85		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d87		85 30		sta $0350	                STA DOS_SRC_PTR
.194d89		c8		iny		                INY
.194d8a		c8		iny		                INY
.194d8b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d8d		85 32		sta $0352	                STA DOS_SRC_PTR+2
.194d8f		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.194d91		c9 40 00	cmp #$0040	                CMP #$0040
.194d94		b0 04		bcs $194d9a	                BGE load_by_type            ; No: try to load it by type
.194d96		5c bf 4f 19	jmp $194fbf	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.194d9a		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.194d9d		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.194da0						type_loop
.194da0		e2 20		sep #$20	                SEP #$20        ; set A short
.194da2		bf e6 4d 19	lda $194de6,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.194da6		f0 37		beq $194ddf	                BEQ no_match                ; If NULL... we didn't get a match
.194da8		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.194dab		d0 28		bne $194dd5	                BNE next_entry              ; If they don't match, try the next entry
.194dad		bf e7 4d 19	lda $194de7,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.194db1		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.194db4		d0 1f		bne $194dd5	                BNE next_entry              ; If they don't match, try the next entry
.194db6		bf e8 4d 19	lda $194de8,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.194dba		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.194dbd		d0 16		bne $194dd5	                BNE next_entry              ; If they don't match, try the next entry
.194dbf		c2 20		rep #$20	                REP #$20        ; set A long
.194dc1		bf e9 4d 19	lda $194de9,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.194dc5		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.194dc7		e2 20		sep #$20	                SEP #$20        ; set A short
.194dc9		bf eb 4d 19	lda $194deb,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.194dcd		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.194dcf		a2 00 00	ldx #$0000	                LDX #0
.194dd2		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.194dd5						next_entry
.194dd5		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dd7		8a		txa		                TXA
.194dd8		18		clc		                CLC
.194dd9		69 06 00	adc #$0006	                ADC #6
.194ddc		aa		tax		                TAX
.194ddd		80 c1		bra $194da0	                BRA type_loop               ; And check it against the file
.194ddf						no_match
.194ddf		e2 20		sep #$20	                SEP #$20        ; set A short
.194de1		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.194de3		82 03 03	brl $1950e9	                BRL IF_FAILURE
>194de6		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>194de9		f3 4d				                .word <>IF_LOADPGX
>194deb		19				                .byte `IF_LOADPGX
>194dec		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>194def		7b 4e				                .word <>IF_LOADPGZ
>194df1		19				                .byte `IF_LOADPGZ
>194df2		00				                .byte 0
.194df3						IF_LOADPGX
.194df3		c2 10		rep #$10	                REP #$10        ; set X long
.194df5		e2 20		sep #$20	                SEP #$20        ; set A short
.194df7		a0 00 00	ldy #$0000	                LDY #0
.194dfa		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.194dfc		c9 50		cmp #$50	                CMP #'P'
.194dfe		d0 15		bne $194e15	                BNE fail_sig                        ; If not found, fail
.194e00		c8		iny		                INY
.194e01		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.194e03		c9 47		cmp #$47	                CMP #'G'
.194e05		d0 0e		bne $194e15	                BNE fail_sig
.194e07		c8		iny		                INY
.194e08		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.194e0a		c9 58		cmp #$58	                CMP #'X'
.194e0c		d0 07		bne $194e15	                BNE fail_sig
.194e0e		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.194e0f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.194e11		c9 01		cmp #$01	                CMP #$01
.194e13		f0 17		beq $194e2c	                BEQ get_dest                        ; All passes: go to get the destination address
.194e15		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.194e17		22 e9 50 19	jsl $1950e9	                JSL IF_FAILURE
.194e1b						adjust_size
.194e1b		c2 20		rep #$20	                REP #$20        ; set A long
.194e1d		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.194e1e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.194e20		e9 08 00	sbc #$0008	                SBC #8
.194e23		85 2c		sta $034c	                STA DOS_FILE_SIZE
.194e25		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194e27		e9 00 00	sbc #$0000	                SBC #0
.194e2a		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194e2c						get_dest
.194e2c		c2 20		rep #$20	                REP #$20        ; set A long
.194e2e		c8		iny		                INY
.194e2f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.194e31		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.194e33		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.194e35		c8		iny		                INY
.194e36		c8		iny		                INY
.194e37		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.194e39		85 36		sta $0356	                STA DOS_DST_PTR+2
.194e3b		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.194e3d		c8		iny		                INY                                 ; Point to the first data byte
.194e3e		c8		iny		                INY
.194e3f						copy_loop
.194e3f		e2 20		sep #$20	                SEP #$20        ; set A short
.194e41		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.194e43		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.194e45		c2 20		rep #$20	                REP #$20        ; set A long
.194e47		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.194e49		d0 02		bne $194e4d	                BNE dec_file_size
.194e4b		e6 36		inc $0356	                INC DOS_DST_PTR+2
.194e4d		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.194e4e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.194e50		e9 01 00	sbc #$0001	                SBC #1
.194e53		85 2c		sta $034c	                STA DOS_FILE_SIZE
.194e55		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194e57		e9 00 00	sbc #$0000	                SBC #0
.194e5a		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194e5c		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.194e5e		d0 04		bne $194e64	                BNE next_byte
.194e60		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194e62		f0 14		beq $194e78	                BEQ done                            ; Yes: we're done
.194e64		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.194e65		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.194e68		d0 d5		bne $194e3f	                BNE copy_loop                       ; No: keep copying
.194e6a		22 33 44 19	jsl $194433	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.194e6e		b0 03		bcs $194e73	                BCS next_cluster
.194e70		82 7a 02	brl $1950ed	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.194e73		a0 00 00	ldy #$0000	next_cluster    LDY #0
.194e76		80 c7		bra $194e3f	                BRA copy_loop                       ; Go back to copying
.194e78		82 79 02	brl $1950f4	done            BRL IF_SUCCESS
.194e7b						IF_LOADPGZ
.194e7b		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194e7e		ab		plb		                PLB
.194e7f		ab		plb		                PLB
.194e80		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194e83		2b		pld		                PLD
.194e84		c2 30		rep #$30	                REP #$30        ; set A&X long
.194e86		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.194e89		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e8b		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.194e8d		c8		iny		                INY
.194e8e		c8		iny		                INY
.194e8f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e91		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194e93		e2 20		sep #$20	                SEP #$20        ; set A short
.194e95		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.194e98		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.194e9a		c9 5a		cmp #$5a	                CMP #'Z'
.194e9c		f0 06		beq $194ea4	                BEQ start_block                     ; If found, get the starting address
.194e9e		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.194ea0		22 e9 50 19	jsl $1950e9	                JSL IF_FAILURE
.194ea4		c8		iny		start_block     INY
.194ea5						get_addr
.194ea5		e2 20		sep #$20	                SEP #$20        ; set A short
.194ea7		22 2a 4f 19	jsl $194f2a	                JSL IF_FILE_EOF                     ; Check if EOF
.194eab		90 03		bcc $194eb0	                BCC get_addr_lo
.194ead		82 44 02	brl $1950f4	done            BRL IF_SUCCESS                      ; If so: we're done
.194eb0		22 5d 4f 19	jsl $194f5d	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.194eb4		90 47		bcc $194efd	                BCC ret_failure                     ; Got an error: pass it on
.194eb6		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.194eb8		22 5d 4f 19	jsl $194f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.194ebc		90 3f		bcc $194efd	                BCC ret_failure                     ; Got an error: pass it on
.194ebe		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.194ec0		22 5d 4f 19	jsl $194f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.194ec4		90 37		bcc $194efd	                BCC ret_failure                     ; Got an error: pass it on
.194ec6		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.194ec8		22 5d 4f 19	jsl $194f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.194ecc		90 2f		bcc $194efd	                BCC ret_failure                     ; Got an error: pass it on
.194ece		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.194ed0		22 5d 4f 19	jsl $194f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.194ed4		90 27		bcc $194efd	                BCC ret_failure                     ; Got an error: pass it on
.194ed6		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.194ed8		22 5d 4f 19	jsl $194f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.194edc		90 1f		bcc $194efd	                BCC ret_failure                     ; Got an error: pass it on
.194ede		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.194ee0		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.194ee2		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.194ee4		d0 1a		bne $194f00	                BNE read_data
.194ee6		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.194ee8		d0 16		bne $194f00	                BNE read_data
.194eea		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.194eec		d0 12		bne $194f00	                BNE read_data
.194eee		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.194ef0		85 3c		sta $035c	                STA DOS_RUN_PTR
.194ef2		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.194ef4		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.194ef6		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.194ef8		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.194efa		82 f7 01	brl $1950f4	                BRL IF_SUCCESS                      ; And finish
.194efd		82 e9 01	brl $1950e9	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.194f00						read_data
.194f00		e2 20		sep #$20	                SEP #$20        ; set A short
.194f02		22 5d 4f 19	jsl $194f5d	                JSL IF_READ_NEXT                    ; Get the next byte
.194f06		90 f5		bcc $194efd	                BCC ret_failure
.194f08		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.194f0a		c2 20		rep #$20	                REP #$20        ; set A long
.194f0c		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.194f0e		d0 02		bne $194f12	                BNE dec_block_size
.194f10		e6 36		inc $0356	                INC DOS_DST_PTR+2
.194f12		38		sec		dec_block_size  SEC
.194f13		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.194f15		e9 01 00	sbc #$0001	                SBC #1
.194f18		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.194f1a		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.194f1c		e9 00 00	sbc #$0000	                SBC #0
.194f1f		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.194f21		d0 dd		bne $194f00	                BNE read_data
.194f23		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.194f25		d0 d9		bne $194f00	                BNE read_data                       ; No: keep reading data
.194f27		82 7b ff	brl $194ea5	                BRL get_addr                        ; Yes: check for another block
.194f2a						IF_FILE_EOF
.194f2a		48		pha		                PHA
.194f2b		5a		phy		                PHY
.194f2c		8b		phb		                PHB
.194f2d		0b		phd		                PHD
.194f2e		08		php		                PHP
.194f2f		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194f32		ab		plb		                PLB
.194f33		ab		plb		                PLB
.194f34		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194f37		2b		pld		                PLD
.194f38		e2 20		sep #$20	                SEP #$20        ; set A short
.194f3a		c2 10		rep #$10	                REP #$10        ; set X long
.194f3c		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.194f3f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.194f41		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.194f43		f0 07		beq $194f4c	                BEQ chk_file_size                   ; If not: check the file size
.194f45		28		plp		ret_true        PLP                                 ; Return true
.194f46		2b		pld		                PLD
.194f47		ab		plb		                PLB
.194f48		7a		ply		                PLY
.194f49		68		pla		                PLA
.194f4a		38		sec		                SEC
.194f4b		6b		rtl		                RTL
.194f4c						chk_file_size
.194f4c		c2 20		rep #$20	                REP #$20        ; set A long
.194f4e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.194f50		d0 04		bne $194f56	                BNE ret_false
.194f52		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194f54		f0 ef		beq $194f45	                BEQ ret_true
.194f56		28		plp		ret_false       PLP                                 ; Return false
.194f57		2b		pld		                PLD
.194f58		ab		plb		                PLB
.194f59		7a		ply		                PLY
.194f5a		68		pla		                PLA
.194f5b		18		clc		                CLC
.194f5c		6b		rtl		                RTL
.194f5d						IF_READ_NEXT
.194f5d		8b		phb		                PHB
.194f5e		0b		phd		                PHD
.194f5f		08		php		                PHP
.194f60		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.194f63		ab		plb		                PLB
.194f64		ab		plb		                PLB
.194f65		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.194f68		2b		pld		                PLD
.194f69		e2 20		sep #$20	                SEP #$20        ; set A short
.194f6b		c2 10		rep #$10	                REP #$10        ; set X long
.194f6d		22 2a 4f 19	jsl $194f2a	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.194f71		90 06		bcc $194f79	                BCC get_byte                        ; If not: get the next byte
.194f73		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.194f75		85 0e		sta $032e	                STA DOS_STATUS
.194f77		80 3f		bra $194fb8	                BRA ret_failure
.194f79		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.194f7b		48		pha		                PHA                                 ; And save it for the moment
.194f7c		c2 20		rep #$20	                REP #$20        ; set A long
.194f7e		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.194f80		d0 02		bne $194f84	                BNE dec_low
.194f82		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.194f84		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.194f86		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.194f88		d0 04		bne $194f8e	                BNE next_byte
.194f8a		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194f8c		f0 1b		beq $194fa9	                BEQ ret_eof                         ; Yes: mark the file as EOF
.194f8e						next_byte
.194f8e		e2 20		sep #$20	                SEP #$20        ; set A short
.194f90		c8		iny		                INY                                 ; Move to the next byte
.194f91		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.194f94		90 0b		bcc $194fa1	                BLT ret_success                     ; No: just return the byte
.194f96		22 33 44 19	jsl $194433	                JSL DOS_READNEXT                    ; Yes: read the next sector
.194f9a		b0 02		bcs $194f9e	                BCS reset_index
.194f9c		80 1a		bra $194fb8	                BRA ret_failure                     ; If failure: pass the error up the chain
.194f9e		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.194fa1						ret_success
.194fa1		e2 20		sep #$20	                SEP #$20        ; set A short
.194fa3		68		pla		                PLA                                 ; Return the byte retrieved
.194fa4		28		plp		                PLP
.194fa5		2b		pld		                PLD
.194fa6		ab		plb		                PLB
.194fa7		38		sec		                SEC
.194fa8		6b		rtl		                RTL
.194fa9						ret_eof
.194fa9		e2 20		sep #$20	                SEP #$20        ; set A short
.194fab		5a		phy		                PHY                                 ; Save the index
.194fac		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.194faf		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fb1		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.194fb3		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.194fb5		7a		ply		                PLY                                 ; Restore the index
.194fb6		80 e9		bra $194fa1	                BRA ret_success
.194fb8						ret_failure
.194fb8		e2 20		sep #$20	                SEP #$20        ; set A short
.194fba		28		plp		                PLP
.194fbb		2b		pld		                PLD
.194fbc		ab		plb		                PLB
.194fbd		18		clc		                CLC
.194fbe		6b		rtl		                RTL
.194fbf						IF_LOADRAW
.194fbf		c2 30		rep #$30	                REP #$30        ; set A&X long
.194fc1		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.194fc4						copy_loop
.194fc4		e2 20		sep #$20	                SEP #$20        ; set A short
.194fc6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.194fc8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.194fca		c2 20		rep #$20	                REP #$20        ; set A long
.194fcc		38		sec		                SEC                         ; Count down the number of bytes left
.194fcd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.194fcf		e9 01 00	sbc #$0001	                SBC #1
.194fd2		85 2c		sta $034c	                STA DOS_FILE_SIZE
.194fd4		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.194fd6		e9 00 00	sbc #$0000	                SBC #0
.194fd9		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.194fdb		d0 04		bne $194fe1	                BNE continue
.194fdd		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.194fdf		f0 1b		beq $194ffc	                BEQ close_file              ; If not: we're done
.194fe1		c8		iny		continue        INY
.194fe2		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.194fe5		d0 dd		bne $194fc4	                BNE copy_loop               ; No: keep processing the bytes
.194fe7		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.194fe8		a5 34		lda $0354	                LDA DOS_DST_PTR
.194fea		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.194fed		85 34		sta $0354	                STA DOS_DST_PTR
.194fef		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.194ff1		69 00 00	adc #$0000	                ADC #0
.194ff4		85 36		sta $0356	                STA DOS_DST_PTR+2
.194ff6		22 be 4b 19	jsl $194bbe	                JSL IF_READ                 ; Yes: load the next cluster
.194ffa		b0 c5		bcs $194fc1	                BCS copy_cluster            ; And start copying it
.194ffc						close_file
.194ffc		82 f5 00	brl $1950f4	ret_success     BRL IF_SUCCESS
.194fff						IF_NULLBUFFER
.194fff		5a		phy		                PHY
.195000		8b		phb		                PHB
.195001		0b		phd		                PHD
.195002		08		php		                PHP
.195003		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.195006		ab		plb		                PLB
.195007		ab		plb		                PLB
.195008		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19500b		2b		pld		                PLD
.19500c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19500e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.195011		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195013		85 28		sta $0348	                STA DOS_TEMP
.195015		c8		iny		                INY
.195016		c8		iny		                INY
.195017		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195019		85 2a		sta $034a	                STA DOS_TEMP+2
.19501b		a0 00 00	ldy #$0000	                LDY #0
.19501e		a9 00 00	lda #$0000	                LDA #0
.195021		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.195023		c8		iny		                INY
.195024		c8		iny		                INY
.195025		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.195028		d0 f7		bne $195021	                BNE loop
.19502a		28		plp		                PLP
.19502b		2b		pld		                PLD
.19502c		ab		plb		                PLB
.19502d		7a		ply		                PLY
.19502e		6b		rtl		                RTL
.19502f						IF_COPY2BUFF
.19502f		5a		phy		                PHY
.195030		8b		phb		                PHB
.195031		0b		phd		                PHD
.195032		08		php		                PHP
.195033		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.195036		ab		plb		                PLB
.195037		ab		plb		                PLB
.195038		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19503b		2b		pld		                PLD
.19503c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19503e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.195041		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195043		85 28		sta $0348	                STA DOS_TEMP
.195045		c8		iny		                INY
.195046		c8		iny		                INY
.195047		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195049		85 2a		sta $034a	                STA DOS_TEMP+2
.19504b		a0 00 00	ldy #$0000	                LDY #0
.19504e						copy_loop
.19504e		e2 20		sep #$20	                SEP #$20        ; set A short
.195050		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.195052		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.195054		c2 20		rep #$20	                REP #$20        ; set A long
.195056		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.195058		d0 02		bne $19505c	                BNE adv_dest
.19505a		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.19505c		c8		iny		adv_dest        INY                         ; Count it
.19505d		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.195060		f0 0c		beq $19506e	                BEQ done                    ; Yes: we're done
.195062		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.195064		c5 38		cmp $0358	                CMP DOS_END_PTR
.195066		d0 e6		bne $19504e	                BNE copy_loop               ; No: keep copying
.195068		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.19506a		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.19506c		d0 e0		bne $19504e	                BNE copy_loop
.19506e		28		plp		done            PLP
.19506f		2b		pld		                PLD
.195070		ab		plb		                PLB
.195071		7a		ply		                PLY
.195072		6b		rtl		                RTL
.195073						IF_SAVE
.195073		da		phx		                PHX
.195074		5a		phy		                PHY
.195075		0b		phd		                PHD
.195076		8b		phb		                PHB
.195077		08		php		                PHP
.195078		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.19507b		ab		plb		                PLB
.19507c		ab		plb		                PLB
.19507d		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.195080		2b		pld		                PLD
.195081		c2 30		rep #$30	                REP #$30        ; set A&X long
.195083		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.195086		38		sec		                SEC
.195087		a5 38		lda $0358	                LDA DOS_END_PTR
.195089		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.19508b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19508d		c8		iny		                INY
.19508e		c8		iny		                INY
.19508f		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.195091		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.195093		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195095		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.195098		18		clc		                CLC
.195099		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19509b		69 01 00	adc #$0001	                ADC #1
.19509e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950a0		90 09		bcc $1950ab	                BCC first_block
.1950a2		c8		iny		                INY
.1950a3		c8		iny		                INY
.1950a4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950a6		69 00 00	adc #$0000	                ADC #0
.1950a9		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950ab		22 ff 4f 19	jsl $194fff	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.1950af		22 2f 50 19	jsl $19502f	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.1950b3		22 66 4b 19	jsl $194b66	                JSL IF_CREATE           ; Create file.
.1950b7		b0 03		bcs $1950bc	                BCS check_for_end
.1950b9		82 31 00	brl $1950ed	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.1950bc		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.1950be		c5 38		cmp $0358	                CMP DOS_END_PTR
.1950c0		d0 06		bne $1950c8	                BNE next_block
.1950c2		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.1950c4		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.1950c6		f0 1d		beq $1950e5	                BEQ done                ; Yes: we're done
.1950c8		22 ff 4f 19	jsl $194fff	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.1950cc		22 2f 50 19	jsl $19502f	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.1950d0		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.1950d3		a9 00 00	lda #$0000	                LDA #0
.1950d6		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950d8		c8		iny		                INY
.1950d9		c8		iny		                INY
.1950da		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1950dc		22 18 4c 19	jsl $194c18	                JSL IF_WRITE            ; Append to the file
.1950e0		b0 da		bcs $1950bc	                BCS check_for_end       ; And try again
.1950e2		82 08 00	brl $1950ed	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.1950e5		5c f4 50 19	jmp $1950f4	done            JML IF_SUCCESS
.1950e9						IF_FAILURE
.1950e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1950eb		85 0e		sta $032e	                STA DOS_STATUS
.1950ed		28		plp		IF_PASSFAILURE  PLP
.1950ee		18		clc		                CLC
.1950ef		ab		plb		                PLB
.1950f0		2b		pld		                PLD
.1950f1		7a		ply		                PLY
.1950f2		fa		plx		                PLX
.1950f3		6b		rtl		                RTL
.1950f4						IF_SUCCESS
.1950f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1950f6		64 00		stz $0320	                STZ BIOS_STATUS
.1950f8		64 0e		stz $032e	                STZ DOS_STATUS
.1950fa		28		plp		                PLP
.1950fb		38		sec		                SEC
.1950fc		ab		plb		                PLB
.1950fd		2b		pld		                PLD
.1950fe		7a		ply		                PLY
.1950ff		fa		plx		                PLX
.195100		6b		rtl		                RTL
.195101						IF_RUN
.195101		da		phx		                PHX
.195102		5a		phy		                PHY
.195103		0b		phd		                PHD
.195104		8b		phb		                PHB
.195105		08		php		                PHP
.195106		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195109		ab		plb		                PLB
.19510a		ab		plb		                PLB
.19510b		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19510e		2b		pld		                PLD
.19510f		e2 20		sep #$20	                SEP #$20        ; set A short
.195111		c2 10		rep #$10	                REP #$10        ; set X long
.195113		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.195115		a2 00 00	ldx #$0000	                LDX #0
.195118		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.19511c		e8		inx		                INX
.19511d		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.195120		d0 f6		bne $195118	                BNE clr_fd_loop
.195122		c2 20		rep #$20	                REP #$20        ; set A long
.195124		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.195127		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.19512b		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.19512e		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.195132		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.195134		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.195138		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.19513a		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.19513e		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.195141		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.195143		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195145		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.195148		85 20		sta $0340	                STA DOS_FD_PTR
.19514a		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.19514d		85 22		sta $0342	                STA DOS_FD_PTR+2
.19514f		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.195152		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.195156		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.19515a		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.19515e		b0 03		bcs $195163	                BCS chk_execute
.195160		82 8a ff	brl $1950ed	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.195163						chk_execute
.195163		c2 20		rep #$20	                REP #$20        ; set A long
.195165		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.195167		d0 0b		bne $195174	                BNE try_execute                         ; If so: call it
.195169		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.19516b		d0 07		bne $195174	                BNE try_execute
.19516d		e2 20		sep #$20	                SEP #$20        ; set A short
.19516f		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.195171		82 75 ff	brl $1950e9	                BRL IF_FAILURE
.195174						try_execute
.195174		e2 20		sep #$20	                SEP #$20        ; set A short
.195176		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.195178		48		pha		                PHA
.195179		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.19517b		48		pha		                PHA
.19517c		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.19517e		48		pha		                PHA
.19517f		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.195181		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.195183		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.195187		e2 20		sep #$20	                SEP #$20        ; set A short
.195189		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.19518a		68		pla		                PLA
.19518b		68		pla		                PLA
.19518c		82 65 ff	brl $1950f4	                BRL IF_SUCCESS                          ; Return success
.19518f						IF_ALLOCFD
.19518f		da		phx		                PHX
.195190		5a		phy		                PHY
.195191		0b		phd		                PHD
.195192		8b		phb		                PHB
.195193		08		php		                PHP
.195194		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.195197		ab		plb		                PLB
.195198		ab		plb		                PLB
.195199		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19519c		2b		pld		                PLD
.19519d		c2 10		rep #$10	                REP #$10        ; set X long
.19519f		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.1951a2						chk_fd
.1951a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1951a4		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.1951a7		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.1951a9		f0 14		beq $1951bf	                BEQ found                           ; No: flag and return the found descriptor
.1951ab						next_fd
.1951ab		c2 20		rep #$20	                REP #$20        ; set A long
.1951ad		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.1951ae		18		clc		                CLC
.1951af		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.1951b2		aa		tax		                TAX
.1951b3		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.1951b6		90 ea		bcc $1951a2	                BLT chk_fd                          ; No: check this new file descriptor
.1951b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1951ba		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.1951bc		82 2a ff	brl $1950e9	                BRL IF_FAILURE
.1951bf		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.1951c1		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.1951c4		c2 20		rep #$20	                REP #$20        ; set A long
.1951c6		8a		txa		                TXA
.1951c7		18		clc		                CLC
.1951c8		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.1951cb		85 20		sta $0340	                STA @b DOS_FD_PTR
.1951cd		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.1951d0		69 00 00	adc #$0000	                ADC #0
.1951d3		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1951d5		82 1c ff	brl $1950f4	                BRL IF_SUCCESS                      ; Return this file descriptor
.1951d8						IF_FREEFD
.1951d8		da		phx		                PHX
.1951d9		5a		phy		                PHY
.1951da		0b		phd		                PHD
.1951db		8b		phb		                PHB
.1951dc		08		php		                PHP
.1951dd		f4 18 18	pea #$1818	                PEA #((`DOS_HIGH_VARIABLES) * 256) + (`DOS_HIGH_VARIABLES)
.1951e0		ab		plb		                PLB
.1951e1		ab		plb		                PLB
.1951e2		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1951e5		2b		pld		                PLD
.1951e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1951e8		c2 10		rep #$10	                REP #$10        ; set X long
.1951ea		a9 00		lda #$00	                LDA #0
.1951ec		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.1951ee		82 03 ff	brl $1950f4	                BRL IF_SUCCESS
.1951f1						DOS_SRC2DST
.1951f1		da		phx		                PHX
.1951f2		5a		phy		                PHY
.1951f3		0b		phd		                PHD
.1951f4		8b		phb		                PHB
.1951f5		08		php		                PHP
.1951f6		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1951f9		2b		pld		                PLD
.1951fa		c2 30		rep #$30	                REP #$30        ; set A&X long
.1951fc		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1951ff		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195201		aa		tax		                TAX                                     ; X := source buffer address
.195202		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.195204		a8		tay		                TAY                                     ; Y := destination buffer address
.195205		e2 20		sep #$20	                SEP #$20        ; set A short
.195207		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.195209		48		pha		                PHA
.19520a		ab		plb		                PLB
.19520b		c2 20		rep #$20	                REP #$20        ; set A long
.19520d		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.195210		f0 11		beq $195223	loop            BEQ done
.195212		48		pha		                PHA
.195213		e2 20		sep #$20	                SEP #$20        ; set A short
.195215		bd 00 00	lda $180000,x	                LDA #0,B,X
.195218		99 00 00	sta $180000,y	                STA #0,B,Y
.19521b		c2 20		rep #$20	                REP #$20        ; set A long
.19521d		68		pla		                PLA
.19521e		3a		dec a		                DEC A
.19521f		e8		inx		                INX
.195220		c8		iny		                INY
.195221		80 ed		bra $195210	                BRA loop
.195223		28		plp		done            PLP
.195224		ab		plb		                PLB
.195225		2b		pld		                PLD
.195226		7a		ply		                PLY
.195227		fa		plx		                PLX
.195228		6b		rtl		                RTL
.195229						IF_COPY
.195229		da		phx		                PHX
.19522a		5a		phy		                PHY
.19522b		0b		phd		                PHD
.19522c		8b		phb		                PHB
.19522d		08		php		                PHP
.19522e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195231		ab		plb		                PLB
.195232		ab		plb		                PLB
.195233		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.195236		2b		pld		                PLD
.195237		22 8f 51 19	jsl $19518f	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.19523b		b0 03		bcs $195240	                BCS set_src_path
.19523d		82 ad fe	brl $1950ed	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.195240						set_src_path
.195240		c2 30		rep #$30	                REP #$30        ; set A&X long
.195242		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.195245		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.195247		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195249		c8		iny		                INY
.19524a		c8		iny		                INY
.19524b		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.19524d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19524f						alloc_dest
.19524f		c2 30		rep #$30	                REP #$30        ; set A&X long
.195251		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.195253		85 30		sta $0350	                STA @b DOS_SRC_PTR
.195255		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195257		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.195259		22 8f 51 19	jsl $19518f	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.19525d		b0 0f		bcs $19526e	                BCS set_paths                   ; If everything is ok... start setting the paths
.19525f		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195261		85 20		sta $0340	                STA @b DOS_FD_PTR
.195263		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195265		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195267		22 d8 51 19	jsl $1951d8	                JSL IF_FREEFD                   ; And free it
.19526b		82 7f fe	brl $1950ed	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.19526e						set_paths
.19526e		c2 30		rep #$30	                REP #$30        ; set A&X long
.195270		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.195272		85 34		sta $0354	                STA @b DOS_DST_PTR
.195274		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195276		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.195278		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.19527b		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.19527d		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19527f		c8		iny		                INY
.195280		c8		iny		                INY
.195281		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.195283		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195285		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195287		85 20		sta $0340	                STA @b DOS_FD_PTR
.195289		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.19528b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19528d		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.195291		b0 10		bcs $1952a3	                BCS src_open                    ; If success, work with the openned file
.195293		00		brk #		                BRK
.195294		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195296		85 20		sta $0340	                STA @b DOS_FD_PTR
.195298		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.19529a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19529c		22 d8 51 19	jsl $1951d8	                JSL IF_FREEFD                   ; And free it
.1952a0		82 bc ff	brl $19525f	                BRL err_free_src_fd             ; Free the source file descriptor
.1952a3		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.1952a6		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1952a8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1952aa		c8		iny		                INY
.1952ab		c8		iny		                INY
.1952ac		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1952ae		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1952b0		22 f1 51 19	jsl $1951f1	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.1952b4		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1952b6		85 20		sta $0340	                STA @b DOS_FD_PTR
.1952b8		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1952ba		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1952bc		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.1952c0		b0 0f		bcs $1952d1	                BCS read_next                   ; If sucessful, try to get the next cluster
.1952c2		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1952c4		85 20		sta $0340	                STA @b DOS_FD_PTR
.1952c6		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1952c8		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1952ca		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.1952ce		82 c3 ff	brl $195294	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.1952d1						read_next
.1952d1		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1952d3		85 20		sta $0340	                STA @b DOS_FD_PTR
.1952d5		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1952d7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1952d9		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.1952dd		b0 19		bcs $1952f8	                BCS copy2dest                   ; If successful, copy the sector
.1952df		e2 20		sep #$20	                SEP #$20        ; set A short
.1952e1		a5 0e		lda $032e	                LDA @b DOS_STATUS
.1952e3		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.1952e5		f0 32		beq $195319	                BEQ file_copied                 ; Yes: we're done copying
.1952e7						err_dest_close
.1952e7		c2 20		rep #$20	                REP #$20        ; set A long
.1952e9		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1952eb		85 20		sta $0340	                STA @b DOS_FD_PTR
.1952ed		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1952ef		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1952f1		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.1952f5		82 ca ff	brl $1952c2	                BRL err_src_close               ; Close the source and throw an error
.1952f8						copy2dest
.1952f8		22 f1 51 19	jsl $1951f1	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.1952fc		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.1952ff		a9 00 00	lda #$0000	                LDA #0
.195302		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195304		c8		iny		                INY
.195305		c8		iny		                INY
.195306		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195308		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.19530a		85 20		sta $0340	                STA @b DOS_FD_PTR
.19530c		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.19530e		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195310		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.195314		90 d1		bcc $1952e7	                BCC err_dest_close              ; If error: close all files and throw the error
.195316		82 b8 ff	brl $1952d1	                BRL read_next                   ; Otherwise: repeat the loop
.195319						file_copied
.195319		c2 20		rep #$20	                REP #$20        ; set A long
.19531b		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.19531d		85 20		sta $0340	                STA @b DOS_FD_PTR
.19531f		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195321		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195323		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.195327		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195329		85 20		sta $0340	                STA @b DOS_FD_PTR
.19532b		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.19532d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19532f		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.195333		82 be fd	brl $1950f4	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.195336						UART_SELECT
.195336		08		php		            PHP
.195337		c2 20		rep #$20	                REP #$20        ; set A long
.195339		c9 02 00	cmp #$0002	            CMP #2
.19533c		f0 07		beq $195345	            BEQ is_COM2
.19533e		c2 20		rep #$20	                REP #$20        ; set A long
.195340		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.195343		80 05		bra $19534a	            BRA setaddr
.195345						is_COM2
.195345		c2 20		rep #$20	                REP #$20        ; set A long
.195347		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.19534a		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.19534e		e2 20		sep #$20	                SEP #$20        ; set A short
.195350		a9 af		lda #$af	            LDA #`UART1_BASE
.195352		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.195356		28		plp		            PLP
.195357		6b		rtl		            RTL
.195358						UART_SETBPS
.195358		08		php		            PHP
.195359		0b		phd		            PHD
.19535a		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.19535d		2b		pld		                PLD
.19535e		c2 30		rep #$30	                REP #$30        ; set A&X long
.195360		48		pha		            PHA
.195361		e2 20		sep #$20	                SEP #$20        ; set A short
.195363		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.195366		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195368		09 80		ora #$80	            ORA #LCR_DLB
.19536a		97 00		sta [$0700],y	            STA [CURRUART],Y
.19536c		c2 20		rep #$20	                REP #$20        ; set A long
.19536e		68		pla		            PLA
.19536f		a0 00 00	ldy #$0000	            LDY #UART_DLL
.195372		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.195374		e2 20		sep #$20	                SEP #$20        ; set A short
.195376		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.195379		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.19537b		49 80		eor #$80	            EOR #LCR_DLB
.19537d		97 00		sta [$0700],y	            STA [CURRUART],Y
.19537f		2b		pld		            PLD
.195380		28		plp		            PLP
.195381		6b		rtl		            RTL
.195382						UART_SETLCR
.195382		08		php		            PHP
.195383		0b		phd		            PHD
.195384		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.195387		2b		pld		                PLD
.195388		e2 20		sep #$20	                SEP #$20        ; set A short
.19538a		c2 10		rep #$10	                REP #$10        ; set X long
.19538c		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.19538e		a0 03 00	ldy #$0003	            LDY #UART_LCR
.195391		97 00		sta [$0700],y	            STA [CURRUART],Y
.195393		2b		pld		            PLD
.195394		28		plp		            PLP
.195395		6b		rtl		            RTL
.195396						UART_INIT
.195396		08		php		            PHP
.195397		0b		phd		            PHD
.195398		c2 30		rep #$30	                REP #$30        ; set A&X long
.19539a		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.19539d		2b		pld		                PLD
.19539e		a9 01 00	lda #$0001	            LDA #UART_115200
.1953a1		22 58 53 19	jsl $195358	            JSL UART_SETBPS
.1953a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1953a7		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.1953a9		22 82 53 19	jsl $195382	            JSL UART_SETLCR
.1953ad		a9 e1		lda #$e1	            LDA #%11100001
.1953af		a0 02 00	ldy #$0002	            LDY #UART_FCR
.1953b2		97 00		sta [$0700],y	            STA [CURRUART],Y
.1953b4		2b		pld		            PLD
.1953b5		28		plp		            PLP
.1953b6		6b		rtl		            RTL
.1953b7						UART_HASBYT
.1953b7		08		php		            PHP
.1953b8		0b		phd		            PHD
.1953b9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953bb		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.1953be		2b		pld		                PLD
.1953bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1953c1		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1953c4		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1953c6		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1953c8		d0 04		bne $1953ce	            BNE ret_true            ; If flag is set, return true
.1953ca		2b		pld		ret_false   PLD                     ; Return false
.1953cb		28		plp		            PLP
.1953cc		18		clc		            CLC
.1953cd		6b		rtl		            RTL
.1953ce		2b		pld		ret_true    PLD                     ; Return true
.1953cf		28		plp		            PLP
.1953d0		38		sec		            SEC
.1953d1		6b		rtl		            RTL
.1953d2						UART_GETC
.1953d2		08		php		            PHP
.1953d3		0b		phd		            PHD
.1953d4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953d6		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.1953d9		2b		pld		                PLD
.1953da		e2 20		sep #$20	                SEP #$20        ; set A short
.1953dc		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1953df		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.1953e1		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1953e3		f0 fa		beq $1953df	            BEQ wait_getc           ; If the flag is clear, wait
.1953e5		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.1953e8		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.1953ea		2b		pld		            PLD
.1953eb		28		plp		            PLP
.1953ec		6b		rtl		            RTL
.1953ed						UART_PUTC
.1953ed		08		php		            PHP
.1953ee		0b		phd		            PHD
.1953ef		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953f1		f4 00 07	pea #$0700	                PEA #CURRUART         ; set DP to page 0
.1953f4		2b		pld		                PLD
.1953f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1953f7		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.1953f8		a0 05 00	ldy #$0005	            LDY #UART_LSR
.1953fb		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1953fd		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.1953ff		f0 fa		beq $1953fb	            BEQ wait_putc
.195401		68		pla		            PLA
.195402		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.195405		97 00		sta [$0700],y	            STA [CURRUART],Y
.195407		2b		pld		            PLD
.195408		28		plp		            PLP
.195409		6b		rtl		            RTL
.19540a						UART_PUTS
.19540a		08		php		            PHP
.19540b		e2 20		sep #$20	                SEP #$20        ; set A short
.19540d		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.195410		f0 07		beq $195419	            BEQ done
.195412		22 ed 53 19	jsl $1953ed	            JSL UART_PUTC
.195416		e8		inx		            INX
.195417		80 f4		bra $19540d	            BRA put_loop
.195419		28		plp		done        PLP
.19541a		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Joystick.asm

.19541b						JOYSTICK_SET_NES_MODE
.19541b		e2 20		sep #$20	                SEP #$20        ; set A short
.19541d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195421		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.195423		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195427		6b		rtl		          RTL
.195428						JOYSTICK_SET_SNES_MODE
.195428		e2 20		sep #$20	                SEP #$20        ; set A short
.19542a		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19542e		29 fb		and #$fb	          AND #~NES_SNES_JOY
.195430		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.195432		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195436		6b		rtl		          RTL
.195437						JOYSTICK_ENABLE_NES_SNES_PORT0
.195437		e2 20		sep #$20	                SEP #$20        ; set A short
.195439		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19543d		29 fe		and #$fe	          AND #~NES_SNES_EN0
.19543f		09 01		ora #$01	          ORA #NES_SNES_EN0
.195441		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195445		6b		rtl		          RTL
.195446						JOYSTICK_ENABLE_NES_SNES_PORT1
.195446		e2 20		sep #$20	                SEP #$20        ; set A short
.195448		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19544c		29 fd		and #$fd	          AND #~NES_SNES_EN1
.19544e		09 02		ora #$02	          ORA #NES_SNES_EN1
.195450		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195454		6b		rtl		          RTL
.195455						JOYSTICK_DISABLE_NES_SNES_PORT0
.195455		e2 20		sep #$20	                SEP #$20        ; set A short
.195457		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19545b		29 fe		and #$fe	          AND #~NES_SNES_EN0
.19545d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195461		6b		rtl		          RTL
.195462						JOYSTICK_DISABLE_NES_SNES_PORT1
.195462		e2 20		sep #$20	                SEP #$20        ; set A short
.195464		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195468		29 fd		and #$fd	          AND #~NES_SNES_EN1
.19546a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19546e		6b		rtl		          RTL
.19546f						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.19546f		e2 20		sep #$20	                SEP #$20        ; set A short
.195471		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195475		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.195477		c9 00		cmp #$00	          CMP #$00
.195479		f0 14		beq $19548f	          BEQ END_OF_JOYSTICK_POLL
.19547b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19547f		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.195481		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195485						JOYSTICK_POLLING_ISNOTOVER
.195485		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.195489		29 40		and #$40	          AND #NES_SNES_DONE
.19548b		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.19548d		d0 f6		bne $195485	          BNE JOYSTICK_POLLING_ISNOTOVER
.19548f						END_OF_JOYSTICK_POLL
.19548f		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.195490						SDC_WAITBUSY
.195490		08		php		                PHP
.195491		e2 20		sep #$20	                SEP #$20        ; set A short
.195493		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.195497		29 01		and #$01	                AND #SDC_TRANS_BUSY
.195499		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.19549b		f0 f6		beq $195493	                BEQ wait_xact
.19549d		28		plp		                PLP
.19549e		6b		rtl		                RTL
.19549f						SDC_RESET
.19549f		08		php		                PHP
.1954a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1954a2		a9 01		lda #$01	                LDA #1
.1954a4		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.1954a8		28		plp		                PLP
.1954a9		6b		rtl		                RTL
.1954aa						SDC_INIT
.1954aa		0b		phd		                PHD
.1954ab		8b		phb		                PHB
.1954ac		08		php		                PHP
.1954ad		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1954b0		ab		plb		                PLB
.1954b1		ab		plb		                PLB
.1954b2		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1954b5		2b		pld		                PLD
.1954b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1954b8		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.1954ba		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.1954be		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.1954c0		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.1954c4		22 90 54 19	jsl $195490	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.1954c8		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1954cc		d0 07		bne $1954d5	                BNE ret_error                       ; Is there one? Process the error
.1954ce		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.1954d0		28		plp		                PLP
.1954d1		ab		plb		                PLB
.1954d2		2b		pld		                PLD
.1954d3		38		sec		                SEC
.1954d4		6b		rtl		                RTL
.1954d5		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.1954d8		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.1954da		85 00		sta $0320	set_error       STA BIOS_STATUS
.1954dc		28		plp		                PLP
.1954dd		ab		plb		                PLB
.1954de		2b		pld		                PLD
.1954df		18		clc		                CLC
.1954e0		6b		rtl		                RTL
.1954e1						SDC_GETBLOCK
.1954e1		0b		phd		                PHD
.1954e2		8b		phb		                PHB
.1954e3		08		php		                PHP
.1954e4		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1954e7		ab		plb		                PLB
.1954e8		ab		plb		                PLB
.1954e9		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1954ec		2b		pld		                PLD
.1954ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1954ef		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.1954f3		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.1954f5		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1954f9		a9 00		lda #$00	                LDA #0
.1954fb		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.1954ff		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.195501		0a		asl a		                ASL A
.195502		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195506		a5 03		lda $0323	                LDA BIOS_LBA+1
.195508		2a		rol a		                ROL A
.195509		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.19550d		a5 04		lda $0324	                LDA BIOS_LBA+2
.19550f		2a		rol a		                ROL A
.195510		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195514		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.195516		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.19551a		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.19551c		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195520		22 90 54 19	jsl $195490	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195524		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195528		d0 36		bne $195560	                BNE ret_error                       ; Is there one? Process the error
.19552a		e2 20		sep #$20	                SEP #$20        ; set A short
.19552c		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.195530		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.195532		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.195536		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.195538		c2 10		rep #$10	                REP #$10        ; set X long
.19553a		a0 00 00	ldy #$0000	                LDY #0
.19553d		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.195541		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.195543		c8		iny		                INY                                 ; Advance to the next byte
.195544		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195547		d0 f4		bne $19553d	                BNE loop_rd                         ; No: keep reading
.195549		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.19554d		d0 11		bne $195560	                BNE ret_error                       ; Is there one? Process the error
.19554f		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195551		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195555		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195557		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.19555b		28		plp		                PLP
.19555c		ab		plb		                PLB
.19555d		2b		pld		                PLD
.19555e		38		sec		                SEC
.19555f		6b		rtl		                RTL
.195560		a9 82		lda #$82	ret_error       LDA #BIOS_ERR_READ                  ; Return a read error
.195562		85 00		sta $0320	                STA BIOS_STATUS
.195564		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195568		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.19556a		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.19556e		28		plp		                PLP
.19556f		ab		plb		                PLB
.195570		2b		pld		                PLD
.195571		18		clc		                CLC
.195572		6b		rtl		                RTL
.195573						SDC_PUTBLOCK
.195573		0b		phd		                PHD
.195574		8b		phb		                PHB
.195575		08		php		                PHP
.195576		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195579		ab		plb		                PLB
.19557a		ab		plb		                PLB
.19557b		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19557e		2b		pld		                PLD
.19557f		e2 20		sep #$20	                SEP #$20        ; set A short
.195581		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195585		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.195587		f0 04		beq $19558d	                BEQ led_on                          ; Yes: start the transaction
.195589		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.19558b		80 65		bra $1955f2	                BRA save_error
.19558d		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195591		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195593		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195597		c2 10		rep #$10	                REP #$10        ; set X long
.195599		a0 00 00	ldy #$0000	                LDY #0
.19559c		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.19559e		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.1955a2		c8		iny		                INY                                 ; Advance to the next byte
.1955a3		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.1955a6		d0 f4		bne $19559c	                BNE loop_wr                         ; No: keep writing
.1955a8		a9 00		lda #$00	                LDA #0
.1955aa		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.1955ae		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.1955b0		0a		asl a		                ASL A
.1955b1		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.1955b5		a5 03		lda $0323	                LDA BIOS_LBA+1
.1955b7		2a		rol a		                ROL A
.1955b8		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.1955bc		a5 04		lda $0324	                LDA BIOS_LBA+2
.1955be		2a		rol a		                ROL A
.1955bf		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.1955c3		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.1955c5		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.1955c9		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.1955cb		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.1955cf		22 90 54 19	jsl $195490	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.1955d3		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1955d7		8d 06 03	sta $0306	                STA FDC_ST0                         ; Save any to the hardware status byte
.1955da		d0 14		bne $1955f0	                BNE ret_error                       ; Is there one? Process the error
.1955dc		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.1955de		9c 06 03	stz $0306	                STZ FDC_ST0
.1955e1		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1955e5		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1955e7		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1955eb		28		plp		                PLP
.1955ec		ab		plb		                PLB
.1955ed		2b		pld		                PLD
.1955ee		38		sec		                SEC
.1955ef		6b		rtl		                RTL
.1955f0		a9 83		lda #$83	ret_error       LDA #BIOS_ERR_WRITE                 ; Return a write error
.1955f2		85 00		sta $0320	save_error      STA BIOS_STATUS
.1955f4		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1955f8		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1955fa		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1955fe		28		plp		                PLP
.1955ff		ab		plb		                PLB
.195600		2b		pld		                PLD
.195601		18		clc		                CLC
.195602		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.195603						FDC_TEST
.195603		8b		phb		                    PHB
.195604		0b		phd		                    PHD
.195605		08		php		                    PHP
.195606		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195609		ab		plb		                PLB
.19560a		ab		plb		                PLB
.19560b		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.19560e		2b		pld		                PLD
.19560f		e2 20		sep #$20	                SEP #$20        ; set A short
.195611		a9 f0		lda #$f0	                    LDA #$F0
.195613		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.195616		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.19561a		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.19561e		c2 30		rep #$30	                REP #$30        ; set A&X long
.195620		22 c5 58 19	jsl $1958c5	                    JSL FDC_Init
.195624		b0 03		bcs $195629	                    BCS init_ok
.195626		82 20 00	brl $195649	                    BRL motor_off
.195629		22 34 5f 19	jsl $195f34	init_ok             JSL FDC_CHK_MEDIA
.19562d		90 03		bcc $195632	                    BCC no_media
.19562f		82 03 00	brl $195635	                    BRL is_ok1
.195632						no_media
.195632		82 14 00	brl $195649	                    BRL motor_off
.195635		22 dd 5d 19	jsl $195ddd	is_ok1              JSL FDC_MOUNT
.195639		90 03		bcc $19563e	                    BCC mount_err
.19563b		82 03 00	brl $195641	                    BRL is_ok2
.19563e						mount_err
.19563e		82 08 00	brl $195649	                    BRL motor_off
.195641		22 55 56 19	jsl $195655	is_ok2              JSL FDC_TEST_PUTBLOCK
.195645		b0 02		bcs $195649	                    BCS all_ok
.195647		80 00		bra $195649	                    BRA motor_off
.195649						all_ok
.195649		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.19564d		22 75 59 19	jsl $195975	                    JSL FDC_Motor_Off
.195651		28		plp		                    PLP
.195652		2b		pld		                    PLD
.195653		ab		plb		                    PLB
.195654		6b		rtl		                    RTL
.195655						FDC_TEST_PUTBLOCK
.195655		e2 20		sep #$20	                SEP #$20        ; set A short
.195657		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.195659		a2 00 00	ldx #$0000	                    LDX #0
.19565c		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.195660		1a		inc a		                    INC A
.195661		e8		inx		                    INX
.195662		e0 00 02	cpx #$0200	                    CPX #512
.195665		d0 f5		bne $19565c	                    BNE init_loop
.195667		c2 20		rep #$20	                REP #$20        ; set A long
.195669		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.19566c		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.195670		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.195673		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.195677		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.19567a		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.19567e		a9 00 00	lda #$0000	                    LDA #0
.195681		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.195685		22 7c 5d 19	jsl $195d7c	                    JSL FDC_PUTBLOCK                ; Try to write the data
.195689		6b		rtl		                    RTL
>19568a		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195692		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>1956a2		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.1956a6						FDC_Check_RQM
.1956a6		0b		phd		                    PHD
.1956a7		08		php		                    PHP
.1956a8		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.1956ab		2b		pld		                PLD
.1956ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1956ae		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.1956b0		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.1956b4		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.1956b6		30 12		bmi $1956ca	                    BMI time_out            ; If so: signal a time out
.1956b8		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.1956bc		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.1956be		f0 f4		beq $1956b4	                    BEQ loop
.1956c0		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.1956c2		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.1956c6		28		plp		                    PLP
.1956c7		2b		pld		                    PLD
.1956c8		38		sec		                    SEC
.1956c9		60		rts		                    RTS
.1956ca		28		plp		time_out            PLP
.1956cb		2b		pld		                    PLD
.1956cc		18		clc		                    CLC
.1956cd		60		rts		                    RTS
.1956ce						FDC_Check_DRV0_BSY
.1956ce		0b		phd		                    PHD
.1956cf		08		php		                    PHP
.1956d0		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.1956d3		2b		pld		                PLD
.1956d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1956d6		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.1956d8		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.1956dc		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.1956de		30 12		bmi $1956f2	                    BMI time_out            ; If so: signal a time out
.1956e0		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.1956e4		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.1956e6		d0 f4		bne $1956dc	                    BNE loop
.1956e8		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.1956ea		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.1956ee		28		plp		                    PLP
.1956ef		2b		pld		                    PLD
.1956f0		38		sec		                    SEC
.1956f1		60		rts		                    RTS
.1956f2		28		plp		time_out            PLP
.1956f3		2b		pld		                    PLD
.1956f4		18		clc		                    CLC
.1956f5		60		rts		                    RTS
.1956f6						FDC_Check_CMD_BSY
.1956f6		0b		phd		                    PHD
.1956f7		08		php		                    PHP
.1956f8		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.1956fb		2b		pld		                PLD
.1956fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1956fe		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195700		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.195704		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195706		30 12		bmi $19571a	                    BMI time_out            ; If so: signal a time out
.195708		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.19570c		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.19570e		d0 f4		bne $195704	                    BNE loop
.195710		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195712		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.195716		28		plp		                    PLP
.195717		2b		pld		                    PLD
.195718		38		sec		                    SEC
.195719		60		rts		                    RTS
.19571a		28		plp		time_out            PLP
.19571b		2b		pld		                    PLD
.19571c		18		clc		                    CLC
.19571d		60		rts		                    RTS
.19571e						FDC_Can_Read_Data
.19571e		0b		phd		                    PHD
.19571f		08		php		                    PHP
.195720		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195723		2b		pld		                PLD
.195724		e2 20		sep #$20	                SEP #$20        ; set A short
.195726		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195728		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.19572c		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.19572e		30 14		bmi $195744	                    BMI time_out            ; If so: signal a time out
.195730		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195734		29 40		and #$40	                    AND #FDC_MSR_DIO
.195736		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.195738		d0 f2		bne $19572c	                    BNE loop
.19573a		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.19573c		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.195740		28		plp		                    PLP
.195741		2b		pld		                    PLD
.195742		38		sec		                    SEC
.195743		60		rts		                    RTS
.195744		28		plp		time_out            PLP
.195745		2b		pld		                    PLD
.195746		18		clc		                    CLC
.195747		60		rts		                    RTS
.195748						FDC_CAN_WRITE
.195748		0b		phd		                    PHD
.195749		08		php		                    PHP
.19574a		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.19574d		2b		pld		                PLD
.19574e		e2 20		sep #$20	                SEP #$20        ; set A short
.195750		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195752		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.195756		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195758		30 14		bmi $19576e	                    BMI time_out            ; If so: signal a time out
.19575a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.19575e		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195760		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195762		d0 f2		bne $195756	                    BNE loop
.195764		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195766		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.19576a		28		plp		                    PLP
.19576b		2b		pld		                    PLD
.19576c		38		sec		                    SEC
.19576d		60		rts		                    RTS
.19576e		28		plp		time_out            PLP
.19576f		2b		pld		                    PLD
.195770		18		clc		                    CLC
.195771		60		rts		                    RTS
.195772						FDC_DELAY_10MS
.195772		da		phx		                    PHX
.195773		08		php		                    PHP
.195774		c2 10		rep #$10	                REP #$10        ; set X long
.195776		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.195779		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.19577a		ca		dex		                    DEX
.19577b		e0 00 00	cpx #$0000	                    CPX #0
.19577e		d0 f9		bne $195779	                    BNE loop
.195780		28		plp		                    PLP
.195781		fa		plx		                    PLX
.195782		6b		rtl		                    RTL
.195783						FDC_COMMAND
.195783		da		phx		                    PHX
.195784		8b		phb		                    PHB
.195785		0b		phd		                    PHD
.195786		08		php		                    PHP
.195787		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19578a		ab		plb		                PLB
.19578b		ab		plb		                PLB
.19578c		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.19578f		2b		pld		                PLD
.195790		22 72 57 19	jsl $195772	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.195794		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195796		a2 00		ldx #$00	                    LDX #0
.195798		a9 00		lda #$00	                    LDA #0
.19579a		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.19579d		e8		inx		                    INX
.19579e		e0 10		cpx #$10	                    CPX #16
.1957a0		d0 f8		bne $19579a	                    BNE clr_results
.1957a2		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.1957a6		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.1957a8		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.1957aa		f0 04		beq $1957b0	                    BEQ start_send                          ; If so, start sending
.1957ac		22 c5 58 19	jsl $1958c5	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.1957b0						start_send
.1957b0		e2 10		sep #$10	                SEP #$10        ; set X short
.1957b2		a2 00		ldx #$00	                    LDX #0
.1957b4		20 a6 56	jsr $1956a6	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.1957b7		b0 03		bcs $1957bc	                    BCS send_param
.1957b9		82 5e 00	brl $19581a	                    BRL time_out                            ; If there was a timeout, flag the time out
.1957bc		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.1957bf		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.1957c3		22 72 57 19	jsl $195772	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.1957c7		e8		inx		                    INX                                     ; Advance to the next byte
.1957c8		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.1957cb		d0 e7		bne $1957b4	                    BNE send_loop                           ; Keep sending until we've sent them all
.1957cd		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.1957d0		d0 03		bne $1957d5	                    BNE chk_data_dir
.1957d2		82 80 00	brl $195855	                    BRL result_phase                        ; If 0: we just want a result
.1957d5		10 3c		bpl $195813	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.1957d7						wr_data
.1957d7		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.1957d9		30 03		bmi $1957de	                    BMI wr_chk_rqm
.1957db		82 3c 00	brl $19581a	                    BRL time_out                            ; If not, raise an error
.1957de		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.1957e2		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.1957e4		f0 f1		beq $1957d7	                    BEQ wr_data_rdy
.1957e6		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.1957e8		d0 03		bne $1957ed	                    BNE wr_data_phase                       ; If so: transfer the data
.1957ea		82 68 00	brl $195855	                    BRL result_phase                          ; If not: it's an error
.1957ed						wr_data_phase
.1957ed		c2 10		rep #$10	                REP #$10        ; set X long
.1957ef		a0 00 00	ldy #$0000	                    LDY #0
.1957f2		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.1957f4		30 03		bmi $1957f9	                    BMI wr_chk_nondma
.1957f6		82 21 00	brl $19581a	                    BRL time_out                            ; If not, raise an error
.1957f9		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.1957fd		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.1957ff		f0 54		beq $195855	                    BEQ result_phase                        ; If not: break out to result phase
.195801		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.195803		f0 ed		beq $1957f2	                    BEQ wr_data_loop                        ; No: keep waiting
.195805		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.195807		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.19580b		c8		iny		                    INY                                     ; Move to the next position
.19580c		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.19580f		d0 e1		bne $1957f2	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.195811		80 42		bra $195855	                    BRA result_phase                        ; ready for the result phase
.195813		20 1e 57	jsr $19571e	rd_data             JSR FDC_Can_Read_Data
.195816		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195818		30 07		bmi $195821	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.19581a						time_out
.19581a		e2 20		sep #$20	                SEP #$20        ; set A short
.19581c		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.19581e		82 9c 00	brl $1958bd	                    BRL pass_error
.195821		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.195825		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195827		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195829		d0 eb		bne $195816	                    BNE rd_data_rdy
.19582b		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.19582f		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195831		d0 03		bne $195836	                    BNE rd_data_phase                       ; If so: transfer the data
.195833		82 83 00	brl $1958b9	                    BRL error                               ; If not: it's an error
.195836						rd_data_phase
.195836		c2 10		rep #$10	                REP #$10        ; set X long
.195838		a0 00 00	ldy #$0000	                    LDY #0
.19583b		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.19583d		10 db		bpl $19581a	                    BPL time_out                            ; If not: throw a timeout error
.19583f		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.195843		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195845		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195847		d0 f2		bne $19583b	                    BNE rd_data_loop
.195849		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.19584d		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.19584f		c8		iny		                    INY                                     ; Move to the next position
.195850		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195853		d0 e6		bne $19583b	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.195855		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.195858		f0 34		beq $19588e	                    BEQ chk_busy                            ; Then we're done
.19585a		e2 10		sep #$10	                SEP #$10        ; set X short
.19585c		a2 00		ldx #$00	                    LDX #0
.19585e		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.195860		22 57 39 19	jsl $193957	                    JSL ISETTIMEOUT
.195864		20 1e 57	jsr $19571e	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.195867		90 b1		bcc $19581a	                    BCC time_out                            ; If there was a time out, raise an error
.195869		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.19586d		20 1e 57	jsr $19571e	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195870		90 a8		bcc $19581a	                    BCC time_out                            ; If there was a time out, raise an error
.195872		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195876		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.195879		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM
.19587c		90 9c		bcc $19581a	                    BCC time_out                            ; If there was a time out, flag the error
.19587e		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.195882		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195884		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195886		d0 06		bne $19588e	                    BNE chk_busy
.195888		e8		inx		                    INX                                     ; Move to the next result positions
.195889		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.19588c		d0 e4		bne $195872	                    BNE read_result                         ; And keep looping until we've read all
.19588e						chk_busy
.19588e		c2 10		rep #$10	                REP #$10        ; set X long
.195890		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.195893		22 7e 0f 19	jsl $190f7e	                    JSL ILOOP_MS
.195897		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.19589b		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.19589d		f0 12		beq $1958b1	                    BEQ done                                ; If not set: we're done
.19589f		20 1e 57	jsr $19571e	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.1958a2		b0 03		bcs $1958a7	                    BCS get_result_byte
.1958a4		82 73 ff	brl $19581a	                    BRL time_out                            ; If there was a time out, flag the error
.1958a7		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.1958ab		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.1958ae		e8		inx		                    INX
.1958af		80 dd		bra $19588e	                    BRA chk_busy                            ; And keep checking
.1958b1						done
.1958b1		64 20		stz $0320	                    STZ BIOS_STATUS
.1958b3		28		plp		                    PLP
.1958b4		2b		pld		                    PLD
.1958b5		ab		plb		                    PLB
.1958b6		fa		plx		                    PLX
.1958b7		38		sec		                    SEC
.1958b8		6b		rtl		                    RTL
.1958b9						error
.1958b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1958bb		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.1958bd		85 20		sta $0320	pass_error          STA BIOS_STATUS
.1958bf		28		plp		                    PLP
.1958c0		2b		pld		                    PLD
.1958c1		ab		plb		                    PLB
.1958c2		fa		plx		                    PLX
.1958c3		18		clc		                    CLC
.1958c4		6b		rtl		                    RTL
.1958c5						FDC_Init
.1958c5		08		php		                    PHP
.1958c6		c2 10		rep #$10	                REP #$10        ; set X long
.1958c8		e2 20		sep #$20	                SEP #$20        ; set A short
.1958ca		a9 00		lda #$00	                    LDA #0
.1958cc		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.1958d0		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.1958d3		a0 00 00	ldy #$0000	                    LDY #0
.1958d6		22 8b 0f 19	jsl $190f8b	                    JSL IDELAY
.1958da		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.1958dc		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.1958e0		ea		nop		                    NOP
.1958e1		ea		nop		                    NOP
.1958e2		ea		nop		                    NOP
.1958e3		ea		nop		                    NOP
.1958e4		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.1958e6		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.1958ea		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.1958ec		8f f8 13 af	sta $af13f8	                    STA @l SIO_FDC_CCR
.1958f0		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.1958f3		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.1958f6		22 8b 0f 19	jsl $190f8b	                    JSL IDELAY
.1958fa		22 cf 59 19	jsl $1959cf	                    JSL FDC_Sense_Int_Status
.1958fe		90 25		bcc $195925	                    BCC pass_failure
.195900		22 cf 59 19	jsl $1959cf	                    JSL FDC_Sense_Int_Status
.195904		90 1f		bcc $195925	                    BCC pass_failure
.195906		22 cf 59 19	jsl $1959cf	                    JSL FDC_Sense_Int_Status
.19590a		90 19		bcc $195925	                    BCC pass_failure
.19590c		22 cf 59 19	jsl $1959cf	                    JSL FDC_Sense_Int_Status
.195910		90 13		bcc $195925	                    BCC pass_failure
.195912		22 7b 5a 19	jsl $195a7b	                    JSL FDC_Configure_Command
.195916		90 0d		bcc $195925	                    BCC pass_failure
.195918		22 2d 5a 19	jsl $195a2d	                    JSL FDC_Specify_Command
.19591c		90 07		bcc $195925	                    BCC pass_failure
.19591e		22 41 59 19	jsl $195941	                    JSL FDC_Motor_On
.195922		28		plp		                    PLP
.195923		38		sec		                    SEC
.195924		6b		rtl		                    RTL
.195925		28		plp		pass_failure        PLP
.195926		18		clc		                    CLC
.195927		6b		rtl		                    RTL
.195928						FDC_MOTOR_NEEDED
.195928		08		php		                    PHP
.195929		c2 20		rep #$20	                REP #$20        ; set A long
.19592b		78		sei		                    SEI                         ; Turn off interrupts
.19592c		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.19592f		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195933		e2 20		sep #$20	                SEP #$20        ; set A short
.195935		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195939		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.19593b		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.19593f		28		plp		                    PLP
.195940		6b		rtl		                    RTL
.195941						FDC_Motor_On
.195941		08		php		                    PHP
.195942		22 28 59 19	jsl $195928	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195946		e2 20		sep #$20	                SEP #$20        ; set A short
.195948		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.19594c		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.19594e		d0 1f		bne $19596f	                    BNE done                    ; If so: skip
.195950		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.195952		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195956		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.195959		90 17		bcc $195972	                    BCC time_out
.19595b		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.19595e		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.195961		22 8b 0f 19	jsl $190f8b	                    JSL IDELAY
.195965		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195969		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.19596b		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.19596f		28		plp		done                PLP
.195970		38		sec		                    SEC
.195971		6b		rtl		                    RTL
.195972		28		plp		time_out            PLP                         ; Return a timeout error
.195973		18		clc		                    CLC
.195974		6b		rtl		                    RTL
.195975						FDC_Motor_Off
.195975		08		php		                    PHP
.195976		e2 20		sep #$20	                SEP #$20        ; set A short
.195978		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.19597a		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.19597e		c2 20		rep #$20	                REP #$20        ; set A long
.195980		78		sei		                    SEI                         ; Turn off interrupts
.195981		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.195984		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195988		e2 20		sep #$20	                SEP #$20        ; set A short
.19598a		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.19598e		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.195990		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195994		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195998		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.19599a		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.19599e		28		plp		                    PLP
.19599f		6b		rtl		                    RTL
.1959a0						FDC_Recalibrate_Command
.1959a0		0b		phd		                    PHD
.1959a1		08		php		                    PHP
.1959a2		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.1959a5		2b		pld		                PLD
.1959a6		22 28 59 19	jsl $195928	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.1959aa		e2 20		sep #$20	                SEP #$20        ; set A short
.1959ac		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.1959ae		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1959b1		a5 00		lda $0300	                    LDA FDC_DRIVE
.1959b3		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1959b6		a9 02		lda #$02	                    LDA #2
.1959b8		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.1959bb		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.1959be		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.1959c1		22 83 57 19	jsl $195783	                    JSL FDC_COMMAND             ; Issue the command
.1959c5		90 04		bcc $1959cb	                    BCC pass_failure            ; If failure, pass the failure up
.1959c7		28		plp		                    PLP
.1959c8		2b		pld		                    PLD
.1959c9		38		sec		                    SEC
.1959ca		6b		rtl		                    RTL
.1959cb		28		plp		pass_failure        PLP
.1959cc		2b		pld		                    PLD
.1959cd		18		clc		                    CLC
.1959ce		6b		rtl		                    RTL
.1959cf						FDC_Sense_Int_Status
.1959cf		8b		phb		                    PHB
.1959d0		0b		phd		                    PHD
.1959d1		08		php		                    PHP
.1959d2		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1959d5		ab		plb		                PLB
.1959d6		ab		plb		                PLB
.1959d7		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.1959da		2b		pld		                PLD
.1959db		c2 30		rep #$30	                REP #$30        ; set A&X long
.1959dd		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.1959e0		22 7e 0f 19	jsl $190f7e	                    JSL ILOOP_MS
.1959e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1959e6		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.1959e8		a9 ff		lda #$ff	                    LDA #$FF
.1959ea		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.1959ec		20 f6 56	jsr $1956f6	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.1959ef		90 30		bcc $195a21	                    BCC time_out                        ; If there was a time out, raise an error
.1959f1		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.1959f4		90 2b		bcc $195a21	                    BCC time_out                        ; If there was a time out, raise an error
.1959f6		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.1959f8		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.1959fc		20 1e 57	jsr $19571e	                    JSR FDC_Can_Read_Data
.1959ff		90 20		bcc $195a21	                    BCC time_out                        ; If there was a time out, raise an error
.195a01		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195a04		90 1b		bcc $195a21	                    BCC time_out                        ; If there was a time out, raise an error
.195a06		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195a0a		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195a0c		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195a0f		90 10		bcc $195a21	                    BCC time_out                        ; If there was a time out, raise an error
.195a11		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195a15		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.195a17		e2 20		sep #$20	                SEP #$20        ; set A short
.195a19		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.195a1c		28		plp		                    PLP
.195a1d		2b		pld		                    PLD
.195a1e		ab		plb		                    PLB
.195a1f		38		sec		                    SEC
.195a20		6b		rtl		                    RTL
.195a21						time_out
.195a21		e2 20		sep #$20	                SEP #$20        ; set A short
.195a23		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.195a25		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195a28		28		plp		                    PLP
.195a29		2b		pld		                    PLD
.195a2a		ab		plb		                    PLB
.195a2b		18		clc		                    CLC
.195a2c		6b		rtl		                    RTL
.195a2d						FDC_Specify_Command
.195a2d		8b		phb		                    PHB
.195a2e		0b		phd		                    PHD
.195a2f		08		php		                    PHP
.195a30		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195a33		ab		plb		                PLB
.195a34		ab		plb		                PLB
.195a35		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195a38		2b		pld		                PLD
.195a39		c2 30		rep #$30	                REP #$30        ; set A&X long
.195a3b		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195a3e		22 7e 0f 19	jsl $190f7e	                    JSL ILOOP_MS
.195a42		e2 20		sep #$20	                SEP #$20        ; set A short
.195a44		20 f6 56	jsr $1956f6	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195a47		90 26		bcc $195a6f	                    BCC time_out            ; If there was a time out, raise an error
.195a49		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195a4c		90 21		bcc $195a6f	                    BCC time_out            ; If there was a time out, raise an error
.195a4e		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.195a50		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195a54		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195a57		90 16		bcc $195a6f	                    BCC time_out            ; If there was a time out, raise an error
.195a59		a9 cf		lda #$cf	                    LDA #$CF
.195a5b		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195a5f		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195a62		90 0b		bcc $195a6f	                    BCC time_out            ; If there was a time out, raise an error
.195a64		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.195a66		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195a6a		28		plp		                    PLP
.195a6b		2b		pld		                    PLD
.195a6c		ab		plb		                    PLB
.195a6d		38		sec		                    SEC
.195a6e		6b		rtl		                    RTL
.195a6f						time_out
.195a6f		e2 20		sep #$20	                SEP #$20        ; set A short
.195a71		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195a73		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195a76		28		plp		                    PLP
.195a77		2b		pld		                    PLD
.195a78		ab		plb		                    PLB
.195a79		18		clc		                    CLC
.195a7a		6b		rtl		                    RTL
.195a7b						FDC_Configure_Command
.195a7b		8b		phb		                    PHB
.195a7c		0b		phd		                    PHD
.195a7d		08		php		                    PHP
.195a7e		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195a81		ab		plb		                PLB
.195a82		ab		plb		                PLB
.195a83		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195a86		2b		pld		                PLD
.195a87		c2 30		rep #$30	                REP #$30        ; set A&X long
.195a89		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195a8c		22 7e 0f 19	jsl $190f7e	                    JSL ILOOP_MS
.195a90		e2 20		sep #$20	                SEP #$20        ; set A short
.195a92		20 f6 56	jsr $1956f6	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195a95		90 36		bcc $195acd	                    BCC time_out            ; If there was a time out, raise an error
.195a97		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195a9a		90 31		bcc $195acd	                    BCC time_out            ; If there was a time out, raise an error
.195a9c		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.195a9e		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195aa2		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195aa5		90 26		bcc $195acd	                    BCC time_out            ; If there was a time out, raise an error
.195aa7		a9 00		lda #$00	                    LDA #$00
.195aa9		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195aad		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195ab0		90 1b		bcc $195acd	                    BCC time_out            ; If there was a time out, raise an error
.195ab2		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.195ab4		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195ab8		20 a6 56	jsr $1956a6	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195abb		90 10		bcc $195acd	                    BCC time_out            ; If there was a time out, raise an error
.195abd		a9 00		lda #$00	                    LDA #$00
.195abf		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195ac3		20 f6 56	jsr $1956f6	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195ac6		90 05		bcc $195acd	                    BCC time_out            ; If there was a time out, raise an error
.195ac8		28		plp		                    PLP
.195ac9		2b		pld		                    PLD
.195aca		ab		plb		                    PLB
.195acb		38		sec		                    SEC
.195acc		6b		rtl		                    RTL
.195acd						time_out
.195acd		e2 20		sep #$20	                SEP #$20        ; set A short
.195acf		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195ad1		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195ad4		28		plp		                    PLP
.195ad5		2b		pld		                    PLD
.195ad6		ab		plb		                    PLB
.195ad7		18		clc		                    CLC
.195ad8		6b		rtl		                    RTL
.195ad9						FDC_Read_ID_Command
.195ad9		8b		phb		                    PHB
.195ada		0b		phd		                    PHD
.195adb		08		php		                    PHP
.195adc		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195adf		ab		plb		                PLB
.195ae0		ab		plb		                PLB
.195ae1		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195ae4		2b		pld		                PLD
.195ae5		e2 20		sep #$20	                SEP #$20        ; set A short
.195ae7		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.195ae9		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195aec		a9 01		lda #$01	                    LDA #1
.195aee		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.195af1		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.195af4		a9 07		lda #$07	                    LDA #7
.195af6		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195af9		22 83 57 19	jsl $195783	                    JSL FDC_COMMAND                     ; Issue the command
.195afd		90 27		bcc $195b26	                    BCC pass_failure
.195aff		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.195b02		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.195b04		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.195b07		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.195b09		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.195b0c		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.195b0e		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.195b11		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.195b13		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.195b16		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.195b18		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.195b1b		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.195b1d		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.195b20		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.195b22		28		plp		                    PLP
.195b23		2b		pld		                    PLD
.195b24		ab		plb		                    PLB
.195b25		6b		rtl		                    RTL
.195b26		28		plp		pass_failure        PLP
.195b27		2b		pld		                    PLD
.195b28		ab		plb		                    PLB
.195b29		18		clc		                    CLC
.195b2a		6b		rtl		                    RTL
.195b2b						FDC_DumpReg_Command
.195b2b		0b		phd		                    PHD
.195b2c		08		php		                    PHP
.195b2d		e2 20		sep #$20	                SEP #$20        ; set A short
.195b2f		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.195b31		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195b34		a9 01		lda #$01	                    LDA #1
.195b36		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.195b39		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.195b3c		a9 0a		lda #$0a	                    LDA #10
.195b3e		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.195b41		22 83 57 19	jsl $195783	                    JSL FDC_COMMAND                     ; Issue the command
.195b45		90 03		bcc $195b4a	                    BCC pass_failure
.195b47		28		plp		                    PLP
.195b48		2b		pld		                    PLD
.195b49		6b		rtl		                    RTL
.195b4a		28		plp		pass_failure        PLP
.195b4b		2b		pld		                    PLD
.195b4c		18		clc		                    CLC
.195b4d		6b		rtl		                    RTL
.195b4e						FDC_Seek_Track
.195b4e		8b		phb		                    PHB
.195b4f		0b		phd		                    PHD
.195b50		08		php		                    PHP
.195b51		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195b54		ab		plb		                PLB
.195b55		ab		plb		                PLB
.195b56		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195b59		2b		pld		                PLD
.195b5a		22 28 59 19	jsl $195928	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.195b5e		e2 20		sep #$20	                SEP #$20        ; set A short
.195b60		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.195b62		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195b65		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.195b67		29 01		and #$01	                    AND #$01
.195b69		0a		asl a		                    ASL A
.195b6a		0a		asl a		                    ASL A
.195b6b		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.195b6d		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195b70		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.195b72		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.195b75		a9 03		lda #$03	                    LDA #3
.195b77		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.195b7a		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.195b7d		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.195b80		22 83 57 19	jsl $195783	                    JSL FDC_COMMAND                     ; Issue the command
.195b84		90 05		bcc $195b8b	                    BCC pass_failure
.195b86		28		plp		                    PLP
.195b87		2b		pld		                    PLD
.195b88		ab		plb		                    PLB
.195b89		38		sec		                    SEC
.195b8a		6b		rtl		                    RTL
.195b8b		28		plp		pass_failure        PLP
.195b8c		2b		pld		                    PLD
.195b8d		ab		plb		                    PLB
.195b8e		18		clc		                    CLC
.195b8f		6b		rtl		                    RTL
.195b90						FDC_Read_Sector
.195b90		8b		phb		                    PHB
.195b91		0b		phd		                    PHD
.195b92		08		php		                    PHP
.195b93		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195b96		ab		plb		                PLB
.195b97		ab		plb		                PLB
.195b98		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195b9b		2b		pld		                PLD
.195b9c		22 28 59 19	jsl $195928	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.195ba0		e2 20		sep #$20	                SEP #$20        ; set A short
.195ba2		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.195ba4		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.195ba6		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195ba9		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.195bab		29 01		and #$01	                    AND #$01
.195bad		0a		asl a		                    ASL A
.195bae		0a		asl a		                    ASL A
.195baf		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.195bb1		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195bb4		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.195bb6		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.195bb9		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.195bbb		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.195bbe		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.195bc0		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.195bc3		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.195bc5		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.195bc8		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.195bca		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.195bcd		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.195bcf		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.195bd2		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.195bd4		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.195bd7		a9 09		lda #$09	                    LDA #9
.195bd9		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.195bdc		a9 01		lda #$01	                    LDA #1
.195bde		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.195be1		a9 07		lda #$07	                    LDA #7
.195be3		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195be6		22 83 57 19	jsl $195783	command             JSL FDC_COMMAND                     ; Issue the command
.195bea		08		php		                    PHP
.195beb		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.195bee		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.195bf0		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.195bf3		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.195bf5		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.195bf8		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.195bfa		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.195bfd		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.195bff		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.195c02		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.195c04		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.195c07		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.195c09		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.195c0c		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.195c0e		28		plp		                    PLP
.195c0f		90 04		bcc $195c15	                    BCC pass_failure
.195c11		28		plp		done                PLP
.195c12		2b		pld		                    PLD
.195c13		ab		plb		                    PLB
.195c14		6b		rtl		                    RTL
.195c15		28		plp		pass_failure        PLP
.195c16		2b		pld		                    PLD
.195c17		ab		plb		                    PLB
.195c18		18		clc		                    CLC
.195c19		6b		rtl		                    RTL
.195c1a						FDC_Write_Sector
.195c1a		8b		phb		                    PHB
.195c1b		0b		phd		                    PHD
.195c1c		08		php		                    PHP
.195c1d		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195c20		ab		plb		                PLB
.195c21		ab		plb		                PLB
.195c22		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195c25		2b		pld		                PLD
.195c26		e2 20		sep #$20	                SEP #$20        ; set A short
.195c28		22 28 59 19	jsl $195928	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.195c2c		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.195c2e		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.195c30		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195c33		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.195c35		29 01		and #$01	                    AND #$01
.195c37		0a		asl a		                    ASL A
.195c38		0a		asl a		                    ASL A
.195c39		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.195c3b		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195c3e		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.195c40		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.195c43		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.195c45		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.195c48		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.195c4a		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.195c4d		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.195c4f		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.195c52		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.195c54		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.195c57		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.195c59		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.195c5c		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.195c5e		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.195c61		a9 09		lda #$09	                    LDA #9
.195c63		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.195c66		a9 ff		lda #$ff	                    LDA #$FF
.195c68		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.195c6b		a9 07		lda #$07	                    LDA #7
.195c6d		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195c70		22 83 57 19	jsl $195783	command             JSL FDC_COMMAND                     ; Issue the command
.195c74		08		php		                    PHP
.195c75		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.195c78		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195c7a		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.195c7d		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.195c7f		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.195c82		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.195c84		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.195c87		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.195c89		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.195c8c		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.195c8e		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.195c91		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.195c93		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.195c96		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.195c98		28		plp		check_status        PLP
.195c99		90 04		bcc $195c9f	                    BCC pass_failure
.195c9b		28		plp		done                PLP
.195c9c		2b		pld		                    PLD
.195c9d		ab		plb		                    PLB
.195c9e		6b		rtl		                    RTL
.195c9f		28		plp		pass_failure        PLP
.195ca0		2b		pld		                    PLD
.195ca1		ab		plb		                    PLB
.195ca2		18		clc		                    CLC
.195ca3		6b		rtl		                    RTL
.195ca4						DIVIDE32
.195ca4		da		phx		                    PHX
.195ca5		5a		phy		                    PHY
.195ca6		0b		phd		                    PHD
.195ca7		08		php		                    PHP
.195ca8		f4 0c 03	pea #$030c	                PEA #DIVIDEND         ; set DP to page 0
.195cab		2b		pld		                PLD
.195cac		c2 30		rep #$30	                REP #$30        ; set A&X long
.195cae		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.195cb0		64 0a		stz $0316	                    STZ REMAINDER+2
.195cb2		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.195cb5		06 00		asl $030c	loop                ASL DIVIDEND
.195cb7		26 02		rol $030e	                    ROL DIVIDEND+2
.195cb9		26 08		rol $0314	                    ROL REMAINDER
.195cbb		26 0a		rol $0316	                    ROL REMAINDER+2
.195cbd		a5 08		lda $0314	                    LDA REMAINDER
.195cbf		38		sec		                    SEC
.195cc0		e5 04		sbc $0310	                    SBC DIVISOR
.195cc2		a8		tay		                    TAY
.195cc3		a5 0a		lda $0316	                    LDA REMAINDER+2
.195cc5		e5 06		sbc $0312	                    SBC DIVISOR+2
.195cc7		90 06		bcc $195ccf	                    BCC skip
.195cc9		85 0a		sta $0316	                    STA REMAINDER+2
.195ccb		84 08		sty $0314	                    STY REMAINDER
.195ccd		e6 00		inc $030c	                    INC DIVIDEND
.195ccf		ca		dex		skip                DEX
.195cd0		d0 e3		bne $195cb5	                    BNE loop
.195cd2		28		plp		                    PLP
.195cd3		2b		pld		                    PLD
.195cd4		7a		ply		                    PLY
.195cd5		fa		plx		                    PLX
.195cd6		60		rts		                    RTS
.195cd7						LBA2CHS
.195cd7		8b		phb		                    PHB
.195cd8		0b		phd		                    PHD
.195cd9		08		php		                    PHP
.195cda		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195cdd		ab		plb		                PLB
.195cde		ab		plb		                PLB
.195cdf		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195ce2		2b		pld		                PLD
.195ce3		c2 30		rep #$30	                REP #$30        ; set A&X long
.195ce5		a5 22		lda $0322	                    LDA BIOS_LBA
.195ce7		85 0c		sta $030c	                    STA DIVIDEND
.195ce9		a5 24		lda $0324	                    LDA BIOS_LBA+2
.195ceb		85 0e		sta $030e	                    STA DIVIDEND+2
.195ced		a9 24 00	lda #$0024	                    LDA #36
.195cf0		85 10		sta $0310	                    STA DIVISOR
.195cf2		64 12		stz $0312	                    STZ DIVISOR+2
.195cf4		20 a4 5c	jsr $195ca4	                    JSR DIVIDE32
.195cf7		e2 20		sep #$20	                SEP #$20        ; set A short
.195cf9		a5 0c		lda $030c	                    LDA DIVIDEND
.195cfb		85 02		sta $0302	                    STA FDC_CYLINDER
.195cfd		c2 20		rep #$20	                REP #$20        ; set A long
.195cff		a5 14		lda $0314	                    LDA REMAINDER
.195d01		85 0c		sta $030c	                    STA DIVIDEND
.195d03		a5 16		lda $0316	                    LDA REMAINDER+2
.195d05		85 0e		sta $030e	                    STA DIVIDEND+2
.195d07		a9 12 00	lda #$0012	                    LDA #18
.195d0a		85 10		sta $0310	                    STA DIVISOR
.195d0c		64 12		stz $0312	                    STZ DIVISOR+2
.195d0e		20 a4 5c	jsr $195ca4	                    JSR DIVIDE32
.195d11		e2 20		sep #$20	                SEP #$20        ; set A short
.195d13		a5 0c		lda $030c	                    LDA DIVIDEND
.195d15		29 01		and #$01	                    AND #$01
.195d17		85 01		sta $0301	                    STA FDC_HEAD
.195d19		a5 14		lda $0314	                    LDA REMAINDER
.195d1b		1a		inc a		                    INC A
.195d1c		85 03		sta $0303	                    STA FDC_SECTOR
.195d1e		28		plp		                    PLP
.195d1f		2b		pld		                    PLD
.195d20		ab		plb		                    PLB
.195d21		6b		rtl		                    RTL
.195d22						FDC_GETBLOCK
.195d22		8b		phb		                    PHB
.195d23		0b		phd		                    PHD
.195d24		08		php		                    PHP
.195d25		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195d28		ab		plb		                PLB
.195d29		ab		plb		                PLB
.195d2a		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195d2d		2b		pld		                PLD
.195d2e		e2 20		sep #$20	                SEP #$20        ; set A short
.195d30		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.195d32		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.195d35		c2 30		rep #$30	                REP #$30        ; set A&X long
.195d37		22 d7 5c 19	jsl $195cd7	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.195d3b		e2 20		sep #$20	                SEP #$20        ; set A short
.195d3d		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.195d3f		f0 29		beq $195d6a	                    BEQ read_failure
.195d41						try_read
.195d41		c2 20		rep #$20	                REP #$20        ; set A long
.195d43		22 90 5b 19	jsl $195b90	                    JSL FDC_Read_Sector         ; Read the sector
.195d47		90 14		bcc $195d5d	                    BCC retry
.195d49		e2 20		sep #$20	                SEP #$20        ; set A short
.195d4b		a5 06		lda $0306	                    LDA FDC_ST0
.195d4d		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.195d4f		d0 19		bne $195d6a	                    BNE read_failure
.195d51						ret_success
.195d51		e2 20		sep #$20	                SEP #$20        ; set A short
.195d53		a9 00		lda #$00	                    LDA #0
.195d55		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195d58		28		plp		                    PLP
.195d59		2b		pld		                    PLD
.195d5a		ab		plb		                    PLB
.195d5b		38		sec		                    SEC
.195d5c		6b		rtl		                    RTL
.195d5d						retry
.195d5d		e2 20		sep #$20	                SEP #$20        ; set A short
.195d5f		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.195d62		30 13		bmi $195d77	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.195d64		22 c5 58 19	jsl $1958c5	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.195d68		80 d7		bra $195d41	                    BRA try_read                ; And try the read again
.195d6a						read_failure
.195d6a		e2 20		sep #$20	                SEP #$20        ; set A short
.195d6c		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.195d6e		80 04		bra $195d74	                    BRA ret_failure
.195d70						seek_failure
.195d70		e2 20		sep #$20	                SEP #$20        ; set A short
.195d72		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.195d74		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.195d77		28		plp		pass_failure        PLP
.195d78		2b		pld		                    PLD
.195d79		ab		plb		                    PLB
.195d7a		18		clc		                    CLC
.195d7b		6b		rtl		                    RTL
.195d7c						FDC_PUTBLOCK
.195d7c		8b		phb		                    PHB
.195d7d		0b		phd		                    PHD
.195d7e		08		php		                    PHP
.195d7f		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195d82		ab		plb		                PLB
.195d83		ab		plb		                PLB
.195d84		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195d87		2b		pld		                PLD
.195d88		e2 20		sep #$20	                SEP #$20        ; set A short
.195d8a		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.195d8c		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.195d8f		c2 30		rep #$30	                REP #$30        ; set A&X long
.195d91		22 d7 5c 19	jsl $195cd7	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.195d95		22 1a 5c 19	jsl $195c1a	retry               JSL FDC_Write_Sector        ; Write the sector
.195d99		b0 03		bcs $195d9e	                    BCS chk_st0
.195d9b		82 28 00	brl $195dc6	                    BRL attempt_retry
.195d9e						chk_st0
.195d9e		e2 20		sep #$20	                SEP #$20        ; set A short
.195da0		a5 06		lda $0306	                    LDA FDC_ST0
.195da2		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.195da4		d0 0c		bne $195db2	                    BNE write_failure
.195da6						ret_success
.195da6		e2 20		sep #$20	                SEP #$20        ; set A short
.195da8		a9 00		lda #$00	                    LDA #0
.195daa		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195dad		28		plp		                    PLP
.195dae		2b		pld		                    PLD
.195daf		ab		plb		                    PLB
.195db0		38		sec		                    SEC
.195db1		6b		rtl		                    RTL
.195db2						write_failure
.195db2		e2 20		sep #$20	                SEP #$20        ; set A short
.195db4		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.195db6		89 02		bit #$02	                    BIT #FDC_ST1_NW
.195db8		f0 04		beq $195dbe	                    BEQ generic_err
.195dba		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.195dbc		80 17		bra $195dd5	                    BRA ret_failure
.195dbe		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.195dc0		d0 e4		bne $195da6	                    BNE ret_success
.195dc2		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.195dc4		d0 e0		bne $195da6	                    BNE ret_success
.195dc6						attempt_retry
.195dc6		e2 20		sep #$20	                SEP #$20        ; set A short
.195dc8		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.195dcb		d0 c8		bne $195d95	                    BNE retry                           ; And retry unless we have none left
.195dcd		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.195dcf		80 04		bra $195dd5	                    BRA ret_failure
.195dd1						seek_failure
.195dd1		e2 20		sep #$20	                SEP #$20        ; set A short
.195dd3		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.195dd5						ret_failure
.195dd5		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195dd8		28		plp		pass_failure        PLP
.195dd9		2b		pld		                    PLD
.195dda		ab		plb		                    PLB
.195ddb		18		clc		                    CLC
.195ddc		6b		rtl		                    RTL
.195ddd						FDC_MOUNT
.195ddd		8b		phb		                    PHB
.195dde		0b		phd		                    PHD
.195ddf		08		php		                    PHP
.195de0		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195de3		ab		plb		                PLB
.195de4		ab		plb		                PLB
.195de5		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195de8		2b		pld		                PLD
.195de9		22 c5 58 19	jsl $1958c5	                    JSL FDC_INIT
.195ded		e2 20		sep #$20	                SEP #$20        ; set A short
.195def		c2 10		rep #$10	                REP #$10        ; set X long
.195df1		a9 00		lda #$00	                    LDA #0
.195df3		a2 00 00	ldx #$0000	                    LDX #0
.195df6		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.195dfa		e8		inx		                    INX
.195dfb		e0 00 02	cpx #$0200	                    CPX #512
.195dfe		d0 f6		bne $195df6	                    BNE zero_loop
.195e00		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.195e02		85 00		sta $0300	                    STA FDC_DRIVE
.195e04		22 41 59 19	jsl $195941	                    JSL FDC_Motor_On                        ; Turn the motor on
.195e08		c2 30		rep #$30	                REP #$30        ; set A&X long
.195e0a		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.195e0d		85 22		sta $0322	                    STA BIOS_LBA
.195e0f		85 24		sta $0324	                    STA BIOS_LBA+2
.195e11		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.195e14		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.195e16		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.195e19		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.195e1b		22 22 5d 19	jsl $195d22	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.195e1f		b0 03		bcs $195e24	                    BCS parse_boot                          ; If ok: start parsing the boot record
.195e21		82 d3 00	brl $195ef7	                    BRL pass_failure                        ; Pass the error up the chain
.195e24						parse_boot
.195e24		e2 20		sep #$20	                SEP #$20        ; set A short
.195e26		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.195e28		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.195e2c		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.195e2e		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.195e32		e2 20		sep #$20	                SEP #$20        ; set A short
.195e34		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.195e38		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.195e3c		c2 20		rep #$20	                REP #$20        ; set A long
.195e3e		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.195e41		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.195e45		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.195e49		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.195e4d		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.195e51		a9 00 00	lda #$0000	                    LDA #0
.195e54		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.195e58		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.195e5b		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.195e5f		18		clc		                    CLC
.195e60		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.195e64		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.195e68		a9 00 00	lda #$0000	                    LDA #0
.195e6b		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.195e6f		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.195e73		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.195e74		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.195e78		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.195e7c		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.195e80		a9 00 00	lda #$0000	                    LDA #0
.195e83		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.195e87		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.195e8b		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.195e8f		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.195e90		4a		lsr a		                    LSR A
.195e91		4a		lsr a		                    LSR A
.195e92		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.195e93		18		clc		                    CLC
.195e94		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.195e98		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.195e9c		a9 00 00	lda #$0000	                    LDA #0
.195e9f		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.195ea3		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.195ea7		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.195eab		a9 00 00	lda #$0000	                    LDA #0
.195eae		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.195eb2		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.195eb6		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.195eba		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.195ebd		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.195ec1		e2 20		sep #$20	                SEP #$20        ; set A short
.195ec3		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.195ec7		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.195ec9		80 14		bra $195edf	                    BRA no_volume_id                        ; No: there is no volume ID
.195ecb						is_extended
.195ecb		c2 20		rep #$20	                REP #$20        ; set A long
.195ecd		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.195ed1		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.195ed5		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.195ed9		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.195edd		80 0d		bra $195eec	                    BRA ret_success
.195edf						no_volume_id
.195edf		c2 20		rep #$20	                REP #$20        ; set A long
.195ee1		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.195ee4		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.195ee8		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.195eec						ret_success
.195eec		e2 20		sep #$20	                SEP #$20        ; set A short
.195eee		a9 00		lda #$00	                    LDA #0
.195ef0		85 20		sta $0320	                    STA BIOS_STATUS
.195ef2		28		plp		                    PLP
.195ef3		2b		pld		                    PLD
.195ef4		ab		plb		                    PLB
.195ef5		38		sec		                    SEC
.195ef6		6b		rtl		                    RTL
.195ef7		28		plp		pass_failure        PLP
.195ef8		2b		pld		                    PLD
.195ef9		ab		plb		                    PLB
.195efa		18		clc		                    CLC
.195efb		6b		rtl		                    RTL
.195efc						FDC_CMDBLOCK
.195efc		8b		phb		                    PHB
.195efd		0b		phd		                    PHD
.195efe		08		php		                    PHP
.195eff		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195f02		ab		plb		                PLB
.195f03		ab		plb		                PLB
.195f04		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195f07		2b		pld		                PLD
.195f08		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195f0a		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.195f0c		f0 0f		beq $195f1d	                    BEQ motor_on
.195f0e		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.195f10		f0 11		beq $195f23	                    BEQ motor_off
.195f12		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.195f14		f0 13		beq $195f29	                    BEQ recalibrate
.195f16		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.195f18		28		plp		                    PLP
.195f19		2b		pld		                    PLD
.195f1a		ab		plb		                    PLB
.195f1b		38		sec		                    SEC
.195f1c		6b		rtl		                    RTL
.195f1d		22 41 59 19	jsl $195941	motor_on            JSL FDC_Motor_On
.195f21		80 f3		bra $195f16	                    BRA ret_success
.195f23		22 75 59 19	jsl $195975	motor_off           JSL FDC_Motor_Off
.195f27		80 ed		bra $195f16	                    BRA ret_success
.195f29		22 a0 59 19	jsl $1959a0	recalibrate         JSL FDC_Recalibrate_Command
.195f2d		b0 e7		bcs $195f16	                    BCS ret_success
.195f2f		28		plp		pass_failure        PLP
.195f30		2b		pld		                    PLD
.195f31		ab		plb		                    PLB
.195f32		18		clc		                    CLC
.195f33		6b		rtl		                    RTL
.195f34						FDC_CHK_MEDIA
.195f34		0b		phd		                    PHD
.195f35		08		php		                    PHP
.195f36		f4 00 03	pea #$0300	                PEA #FDC_DRIVE         ; set DP to page 0
.195f39		2b		pld		                PLD
.195f3a		22 41 59 19	jsl $195941	                    JSL FDC_Motor_On                ; Turn on the motor
.195f3e		e2 20		sep #$20	                SEP #$20        ; set A short
.195f40		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.195f44		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.195f46		f0 42		beq $195f8a	                    BEQ ret_true                    ; If not: assume the disk is present
.195f48		a9 00		lda #$00	                    LDA #0
.195f4a		85 00		sta $0300	                    STA FDC_DRIVE
.195f4c		a9 00		lda #$00	                    LDA #0
.195f4e		85 01		sta $0301	                    STA FDC_HEAD
.195f50		a9 50		lda #$50	                    LDA #80
.195f52		85 02		sta $0302	                    STA FDC_CYLINDER
.195f54		22 4e 5b 19	jsl $195b4e	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.195f58		90 34		bcc $195f8e	                    BCC ret_false                   ; If fail: return false
.195f5a		c2 10		rep #$10	                REP #$10        ; set X long
.195f5c		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.195f5f		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.195f62		22 8b 0f 19	jsl $190f8b	                    JSL IDELAY
.195f66		22 cf 59 19	jsl $1959cf	                    JSL FDC_Sense_Int_Status
.195f6a		a5 06		lda $0306	                    LDA FDC_ST0
.195f6c		29 d0		and #$d0	                    AND #%11010000
.195f6e		d0 1e		bne $195f8e	                    BNE ret_false
.195f70		22 a0 59 19	jsl $1959a0	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.195f74		90 18		bcc $195f8e	                    BCC ret_false                   ; If fail: return false
.195f76		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.195f79		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.195f7c		22 8b 0f 19	jsl $190f8b	                    JSL IDELAY
.195f80		22 cf 59 19	jsl $1959cf	                    JSL FDC_Sense_Int_Status
.195f84		a5 06		lda $0306	                    LDA FDC_ST0
.195f86		29 d0		and #$d0	                    AND #%11010000
.195f88		d0 04		bne $195f8e	                    BNE ret_false
.195f8a						ret_true
.195f8a		28		plp		                    PLP
.195f8b		2b		pld		                    PLD
.195f8c		38		sec		                    SEC
.195f8d		6b		rtl		                    RTL
.195f8e						ret_false
.195f8e		28		plp		                    PLP
.195f8f		2b		pld		                    PLD
.195f90		18		clc		                    CLC
.195f91		6b		rtl		                    RTL
.195f92						FDC_WRITEVBR
.195f92		8b		phb		                    PHB
.195f93		0b		phd		                    PHD
.195f94		08		php		                    PHP
.195f95		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.195f98		ab		plb		                PLB
.195f99		ab		plb		                PLB
.195f9a		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.195f9d		2b		pld		                PLD
.195f9e		22 dd 5d 19	jsl $195ddd	                    JSL FDC_MOUNT               ; Mount the floppy disk
.195fa2		c2 30		rep #$30	                REP #$30        ; set A&X long
.195fa4		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.195fa7		a2 00 00	ldx #$0000	                    LDX #0
.195faa		9f 00 a3 18	sta $18a300,x	clr_loop            STA DOS_SECTOR,X
.195fae		e8		inx		                    INX
.195faf		e8		inx		                    INX
.195fb0		e0 00 02	cpx #$0200	                    CPX #512
.195fb3		d0 f5		bne $195faa	                    BNE clr_loop
.195fb5		e2 20		sep #$20	                SEP #$20        ; set A short
.195fb7		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.195fba		bf 6f 60 19	lda $19606f,x	copy_loop           LDA FDC_VBR_BEGIN,X
.195fbe		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.195fc2		e8		inx		                    INX
.195fc3		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.195fc6		d0 f2		bne $195fba	                    BNE copy_loop
.195fc8		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.195fcb		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.195fce		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.195fd0		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.195fd4		f0 07		beq $195fdd	                    BEQ path_copy_done
.195fd6		e8		inx		                    INX
.195fd7		c8		iny		                    INY
.195fd8		c0 80 00	cpy #$0080	                    CPY #128
.195fdb		d0 f1		bne $195fce	                    BNE path_copy_loop
.195fdd						path_copy_done
.195fdd		c2 20		rep #$20	                REP #$20        ; set A long
.195fdf		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.195fe2		8f fe a4 18	sta $18a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.195fe6		c2 20		rep #$20	                REP #$20        ; set A long
.195fe8		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.195feb		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.195fed		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.195ff0		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.195ff2		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.195ff5		85 02		sta $0322	                    STA BIOS_LBA
.195ff7		85 04		sta $0324	                    STA BIOS_LBA+2
.195ff9		e2 20		sep #$20	                SEP #$20        ; set A short
.195ffb		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.195ffd		85 01		sta $0321	                    STA BIOS_DEV
.195fff		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.196003		b0 09		bcs $19600e	                    BCS ret_success
.196005		22 75 59 19	jsl $195975	                    JSL FDC_Motor_Off
.196009		28		plp		                    PLP                         ; Return the failure
.19600a		2b		pld		                    PLD
.19600b		ab		plb		                    PLB
.19600c		18		clc		                    CLC
.19600d		6b		rtl		                    RTL
.19600e		22 75 59 19	jsl $195975	ret_success         JSL FDC_Motor_Off
.196012		e2 20		sep #$20	                SEP #$20        ; set A short
.196014		a9 00		lda #$00	                    LDA #0
.196016		85 00		sta $0320	                    STA BIOS_STATUS
.196018		28		plp		                    PLP
.196019		2b		pld		                    PLD
.19601a		ab		plb		                    PLB
.19601b		38		sec		                    SEC
.19601c		6b		rtl		                    RTL
.19601d						FDC_TIME_HANDLE
.19601d		08		php		                    PHP
.19601e		e2 20		sep #$20	                SEP #$20        ; set A short
.196020		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.196024		d0 06		bne $19602c	                    BNE dec_motor                   ; If not zero: decrement the timer
.196026		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.19602a		f0 28		beq $196054	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.19602c		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.196030		3a		dec a		                    DEC A
.196031		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.196035		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.196037		d0 0b		bne $196044	                    BNE chk_motor_end               ; No: check to see if we're a the end
.196039		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.19603d		3a		dec a		                    DEC A
.19603e		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.196042		80 10		bra $196054	                    BRA sof_timeout                 ; And move on to the next timer
.196044		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.196048		d0 0a		bne $196054	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.19604a		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.19604e		d0 04		bne $196054	                    BNE sof_timeout
.196050		22 75 59 19	jsl $195975	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.196054						sof_timeout
.196054		e2 20		sep #$20	                SEP #$20        ; set A short
.196056		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.19605a		f0 11		beq $19606d	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.19605c		3a		dec a		                    DEC A                           ; Count down one tick
.19605d		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.196061		d0 0a		bne $19606d	                    BNE sof_int_done                ; If not 0, we're done
.196063		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.196067		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.196069		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.19606d		28		plp		sof_int_done        PLP
.19606e		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.19606f						FDC_VBR_BEGIN
>19606f		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>196072		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>19607a		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>19607c		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>19607d		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>19607f		02				num_fat             .byte 2                 ; Number of FATs
>196080		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>196082		40 0b				total_sectors       .word 2880              ; Total sectors
>196084		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>196085		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>196087		12 00				sec_per_track       .word 18                ; Sectors per track
>196089		02 00				num_head            .word 2                 ; Number of heads
>19608b		00 00 00 00			ignore2             .dword 0
>19608f		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>196093		00 00				ignore3             .word 0
>196095		29				boot_signature      .byte $29
>196096		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>19609a		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>1960a2		20 20 20
>1960a5		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.1960ad		80 40		bra $1960ef	                    BRA vbr_start
>1960af						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.1960ef						vbr_start
.1960ef		c2 20		rep #$20	                REP #$20        ; set A long
.1960f1		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.1960f4		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.1960f8		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.1960fb		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.1960ff		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.196103		b0 0c		bcs $196111	                    BCS lock                ; If it returned success... lock up... I guess?
.196105						error
.196105		e2 20		sep #$20	                SEP #$20        ; set A short
.196107		4b		phk		                    PHK                     ; Otherwise, print an error message
.196108		ab		plb		                    PLB
.196109		62 08 00	per $196114	                    PER message
.19610c		fa		plx		                    PLX
.19610d		22 1c 10 00	jsl $00101c	                    JSL PUTS
.196111		ea		nop		lock                NOP                     ; And lock up
.196112		80 fd		bra $196111	                    BRA lock
>196114		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>19611c		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>19612c		65 20 62 69 6e 61 72 79 2e 0d 00
.196137						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.196137						IDE_TEST
.196137		08		php		                PHP
.196138		c2 20		rep #$20	                REP #$20        ; set A long
.19613a		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.19613d		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196141		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.196144		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196148		22 33 62 19	jsl $196233	                JSL IDE_IDENTIFY
.19614c		b0 03		bcs $196151	                BCS id_ok
.19614e		82 73 00	brl $1961c4	                BRL done
.196151						id_ok
.196151		c2 10		rep #$10	                REP #$10        ; set X long
.196153		e2 20		sep #$20	                SEP #$20        ; set A short
.196155		a0 28 00	ldy #$0028	                LDY #40
.196158		a2 36 00	ldx #$0036	                LDX #27*2
.19615b		bf 01 a3 18	lda $18a301,x	pr_model        LDA DOS_SECTOR+1,X
.19615f		22 18 10 00	jsl $001018	                JSL PUTC
.196163		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.196167		22 18 10 00	jsl $001018	                JSL PUTC
.19616b		e8		inx		                INX
.19616c		e8		inx		                INX
.19616d		88		dey		                DEY
.19616e		88		dey		                DEY
.19616f		d0 ea		bne $19615b	                BNE pr_model
.196171		c2 10		rep #$10	                REP #$10        ; set X long
.196173		e2 20		sep #$20	                SEP #$20        ; set A short
.196175		a0 14 00	ldy #$0014	                LDY #20
.196178		a2 14 00	ldx #$0014	                LDX #10*2
.19617b		bf 01 a3 18	lda $18a301,x	pr_serial       LDA DOS_SECTOR+1,X
.19617f		22 18 10 00	jsl $001018	                JSL PUTC
.196183		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.196187		22 18 10 00	jsl $001018	                JSL PUTC
.19618b		e8		inx		                INX
.19618c		e8		inx		                INX
.19618d		88		dey		                DEY
.19618e		88		dey		                DEY
.19618f		d0 ea		bne $19617b	                BNE pr_serial
.196191		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196195						read_sect1
.196195		c2 20		rep #$20	                REP #$20        ; set A long
.196197		a9 00 00	lda #$0000	                LDA #0                 ; Set LBA = 0
.19619a		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.19619e		a9 00 00	lda #$0000	                LDA #0
.1961a1		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.1961a5		a9 00 a9	lda #$a900	                LDA #<>DOS_BOOT_SECTOR
.1961a8		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.1961ac		a9 18 00	lda #$0018	                LDA #`DOS_BOOT_SECTOR
.1961af		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.1961b3		22 b6 62 19	jsl $1962b6	                JSL IDE_GETBLOCK        ; Attempt to read the block
.1961b7		b0 06		bcs $1961bf	                BCS all_ok
.1961b9		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1961bd		80 05		bra $1961c4	                BRA done
.1961bf						all_ok
.1961bf		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1961c3		00		brk #		                BRK
.1961c4		28		plp		done            PLP
.1961c5		6b		rtl		                RTL
.1961c6						IDE_INIT
.1961c6		e2 20		sep #$20	                SEP #$20        ; set A short
.1961c8		a9 00		lda #$00	              LDA #$00
.1961ca		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.1961ce		20 ef 61	jsr $1961ef	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.1961d1		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.1961d3		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.1961d7		a9 01		lda #$01	              LDA #$01
.1961d9		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.1961dd		a9 00		lda #$00	              LDA #$00
.1961df		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.1961e3		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.1961e7		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.1961eb		20 0d 62	jsr $19620d	              JSR IDE_DRV_READY_NOTBUSY
.1961ee		6b		rtl		              RTL
.1961ef						IDE_DRIVE_BSY
.1961ef		08		php		                PHP
.1961f0		e2 20		sep #$20	                SEP #$20        ; set A short
.1961f2		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.1961f6		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.1961f8		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.1961fa		f0 f6		beq $1961f2	                BEQ loop
.1961fc		28		plp		                PLP
.1961fd		60		rts		                RTS
.1961fe						IDE_DRIVE_READY
.1961fe		08		php		                PHP
.1961ff		e2 20		sep #$20	                SEP #$20        ; set A short
.196201		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196205		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.196207		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.196209		d0 f6		bne $196201	                BNE loop
.19620b		28		plp		                PLP
.19620c		60		rts		                RTS
.19620d						IDE_DRV_READY_NOTBUSY
.19620d		08		php		                PHP
.19620e		e2 20		sep #$20	                SEP #$20        ; set A short
.196210		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.196214		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.196216		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.196218		d0 f6		bne $196210	                BNE loop                            ; No: keep waiting
.19621a		28		plp		ret_success     PLP                                 ; Return success
.19621b		38		sec		                SEC
.19621c		60		rts		                RTS
.19621d		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.196221		28		plp		                PLP                                 ; Return failure
.196222		18		clc		                CLC
.196223		60		rts		                RTS
.196224						IDE_NOT_DRQ
.196224		08		php		                PHP
.196225		e2 20		sep #$20	                SEP #$20        ; set A short
.196227		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.19622b		29 08		and #$08	                AND #IDE_STAT_DRQ
.19622d		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.19622f		d0 f6		bne $196227	                BNE loop                ; No: keep waiting
.196231		28		plp		                PLP
.196232		60		rts		                RTS
.196233						IDE_IDENTIFY
.196233		5a		phy		                PHY
.196234		8b		phb		                PHB
.196235		0b		phd		                PHD
.196236		08		php		                PHP
.196237		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19623a		ab		plb		                PLB
.19623b		ab		plb		                PLB
.19623c		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.19623f		2b		pld		                PLD
.196240		e2 20		sep #$20	                SEP #$20        ; set A short
.196242		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196245		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196247		29 07		and #$07	                AND #$07
.196249		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.19624b		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.19624f		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196252		e2 20		sep #$20	                SEP #$20        ; set A short
.196254		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.196256		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.19625a		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.19625e		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196262		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196266		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.196268		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.19626c		f0 29		beq $196297	                BEQ no_media                    ; If 0: there is no drive
.19626e		20 ef 61	jsr $1961ef	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.196271		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196274		90 2d		bcc $1962a3	                BCC ret_failure                 ; If an error occurred, return it
.196276		c2 30		rep #$30	                REP #$30        ; set A&X long
.196278		a0 00 00	ldy #$0000	                LDY #0
.19627b		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.19627f		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196281		c8		iny		                INY                             ; Move to the next position
.196282		c8		iny		                INY
.196283		c0 00 02	cpy #$0200	                CPY #512
.196286		d0 f3		bne $19627b	                BNE read_loop
.196288						ret_success
.196288		e2 20		sep #$20	                SEP #$20        ; set A short
.19628a		a9 00		lda #$00	                LDA #0
.19628c		85 00		sta $0320	                STA BIOS_STATUS
.19628e		8d 06 03	sta $0306	                STA @w FDC_ST0
.196291		28		plp		                PLP                             ; Return success
.196292		2b		pld		                PLD
.196293		ab		plb		                PLB
.196294		7a		ply		                PLY
.196295		38		sec		                SEC
.196296		6b		rtl		                RTL
.196297						no_media
.196297		e2 20		sep #$20	                SEP #$20        ; set A short
.196299		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.19629b		80 0a		bra $1962a7	                BRA pass_failure
.19629d						not_ata
.19629d		e2 20		sep #$20	                SEP #$20        ; set A short
.19629f		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.1962a1		80 04		bra $1962a7	                BRA pass_failure
.1962a3						ret_failure
.1962a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1962a5		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.1962a7		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.1962a9		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1962ad		8d 06 03	sta $0306	                STA @w FDC_ST0
.1962b0		28		plp		                PLP
.1962b1		2b		pld		                PLD
.1962b2		ab		plb		                PLB
.1962b3		7a		ply		                PLY
.1962b4		18		clc		                CLC
.1962b5		6b		rtl		                RTL
.1962b6						IDE_GETBLOCK
.1962b6		5a		phy		                PHY
.1962b7		8b		phb		                PHB
.1962b8		0b		phd		                PHD
.1962b9		08		php		                PHP
.1962ba		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.1962bd		ab		plb		                PLB
.1962be		ab		plb		                PLB
.1962bf		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.1962c2		2b		pld		                PLD
.1962c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1962c5		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1962c8		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1962ca		29 07		and #$07	                AND #$07
.1962cc		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.1962ce		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.1962d2		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.1962d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1962d7		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.1962d9		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.1962dd		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.1962df		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.1962e3		a5 03		lda $0323	                LDA BIOS_LBA+1
.1962e5		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.1962e9		a5 04		lda $0324	                LDA BIOS_LBA+2
.1962eb		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.1962ef		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.1962f1		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.1962f5		ea		nop		                NOP                             ; Wait about 500ns
.1962f6		ea		nop		                NOP
.1962f7		ea		nop		                NOP
.1962f8		ea		nop		                NOP
.1962f9		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1962fc		90 25		bcc $196323	                BCC ret_failure                 ; If an error occurred, return it
.1962fe		a0 00 00	ldy #$0000	                LDY #0
.196301		c2 30		rep #$30	                REP #$30        ; set A&X long
.196303		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196307		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196309		c8		iny		                INY                             ; Move to the next position
.19630a		c8		iny		                INY
.19630b		c0 00 02	cpy #$0200	                CPY #512
.19630e		d0 f3		bne $196303	                BNE read_loop
.196310		ea		nop		                NOP                             ; Wait about 500ns
.196311		ea		nop		                NOP
.196312		ea		nop		                NOP
.196313		ea		nop		                NOP
.196314						ret_success
.196314		e2 20		sep #$20	                SEP #$20        ; set A short
.196316		a9 00		lda #$00	                LDA #0
.196318		85 00		sta $0320	                STA BIOS_STATUS
.19631a		8d 06 03	sta $0306	                STA @w FDC_ST0
.19631d		28		plp		                PLP                             ; Return success
.19631e		2b		pld		                PLD
.19631f		ab		plb		                PLB
.196320		7a		ply		                PLY
.196321		38		sec		                SEC
.196322		6b		rtl		                RTL
.196323						ret_failure
.196323		e2 20		sep #$20	                SEP #$20        ; set A short
.196325		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196329		8d 06 03	sta $0306	                STA @w FDC_ST0
.19632c		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.19632e		85 00		sta $0320	                STA BIOS_STATUS
.196330		28		plp		                PLP
.196331		2b		pld		                PLD
.196332		ab		plb		                PLB
.196333		7a		ply		                PLY
.196334		18		clc		                CLC
.196335		6b		rtl		                RTL
.196336						IDE_PUTBLOCK
.196336		5a		phy		                PHY
.196337		8b		phb		                PHB
.196338		0b		phd		                PHD
.196339		08		php		                PHP
.19633a		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.19633d		ab		plb		                PLB
.19633e		ab		plb		                PLB
.19633f		f4 20 03	pea #$0320	                PEA #SDOS_VARIABLES         ; set DP to page 0
.196342		2b		pld		                PLD
.196343		e2 20		sep #$20	                SEP #$20        ; set A short
.196345		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196348		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.19634a		29 07		and #$07	                AND #$07
.19634c		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.19634e		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196352		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196355		e2 20		sep #$20	                SEP #$20        ; set A short
.196357		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196359		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.19635d		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.19635f		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196363		a5 03		lda $0323	                LDA BIOS_LBA+1
.196365		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196369		a5 04		lda $0324	                LDA BIOS_LBA+2
.19636b		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19636f		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.196371		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196375		ea		nop		                NOP                             ; Wait about 500ns
.196376		ea		nop		                NOP
.196377		ea		nop		                NOP
.196378		ea		nop		                NOP
.196379		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.19637c		90 37		bcc $1963b5	                BCC ret_failure                 ; If an error occurred, return it
.19637e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196380		a0 00 00	ldy #$0000	                LDY #0
.196383		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.196385		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.196389		c8		iny		                INY                             ; Move to the next position
.19638a		c8		iny		                INY
.19638b		c0 00 02	cpy #$0200	                CPY #512
.19638e		d0 f3		bne $196383	                BNE read_loop
.196390		ea		nop		                NOP                             ; Wait about 500ns
.196391		ea		nop		                NOP
.196392		ea		nop		                NOP
.196393		ea		nop		                NOP
.196394		20 0d 62	jsr $19620d	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196397		90 1c		bcc $1963b5	                BCC ret_failure                 ; If an error occurred, return it
.196399		ea		nop		                NOP                             ; Wait about 500ns
.19639a		ea		nop		                NOP
.19639b		ea		nop		                NOP
.19639c		ea		nop		                NOP
.19639d		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.1963a1		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.1963a4		d0 0f		bne $1963b5	                BNE ret_failure                 ; If error: return failure
.1963a6						ret_success
.1963a6		e2 20		sep #$20	                SEP #$20        ; set A short
.1963a8		a9 00		lda #$00	                LDA #0
.1963aa		85 00		sta $0320	                STA BIOS_STATUS
.1963ac		8d 06 03	sta $0306	                STA @w FDC_ST0
.1963af		28		plp		                PLP                             ; Return success
.1963b0		2b		pld		                PLD
.1963b1		ab		plb		                PLB
.1963b2		7a		ply		                PLY
.1963b3		38		sec		                SEC
.1963b4		6b		rtl		                RTL
.1963b5		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.1963b6		ea		nop		                NOP
.1963b7		ea		nop		                NOP
.1963b8		ea		nop		                NOP
.1963b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1963bb		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1963bf		80 08		bra $1963c9	                BRA save_error
.1963c1		ea		nop		                NOP
.1963c2		ea		nop		                NOP
.1963c3		ea		nop		                NOP
.1963c4		ea		nop		                NOP
.1963c5		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1963c9		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.1963cc		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.1963ce		85 00		sta $0320	                STA BIOS_STATUS
.1963d0		28		plp		                PLP
.1963d1		2b		pld		                PLD
.1963d2		ab		plb		                PLB
.1963d3		7a		ply		                PLY
.1963d4		18		clc		                CLC
.1963d5		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.1963d6						ip_info
>1963d6		c0 a8 01 7a			        .byte   192, 168, 1, 122
>1963da		ff ff ff 00			        .byte   255,255,255,0
>1963de		c0 a8 01 01			        .byte   192,168,1,1
>1963e2		00 00				HAS_ETHERNET    .word   0
.1963e4						SIMPLE_INIT_ETHERNET_CTRL
.1963e4		af e2 63 19	lda $1963e2	        lda     HAS_ETHERNET
.1963e8		1a		inc a		        inc     a
.1963e9		8f e2 63 19	sta $1963e2	        sta     HAS_ETHERNET
.1963ed		6b		rtl		        rtl
.1963ee		08		php		        php
.1963ef		e2 30		sep #$30	        sep     #$30
.1963f1		af 80 e8 af	lda $afe880	        lda     GABE_MSTR_CTRL
.1963f5		09 01		ora #$01	        ora     #GABE_CTRL_PWR_LED
.1963f7		8f 80 e8 af	sta $afe880	        sta     GABE_MSTR_CTRL
.1963fb		c2 30		rep #$30	        rep     #$30
.1963fd		8b		phb		        phb
.1963fe		4b		phk		        phk
.1963ff		ab		plb		        plb
.196400		a0 d6 63	ldy #$63d6	        ldy     #<>ip_info
.196403		22 00 80 19	jsl $198000	        jsl     kernel.net.user.init
.196407		ab		plb		        plb
.196408		b0 5c		bcs $196466	        bcs     _done
.19640a		e2 30		sep #$30	        sep     #$30
.19640c		af 80 e8 af	lda $afe880	        lda     GABE_MSTR_CTRL
.196410		29 fe		and #$fe	        and     #~GABE_CTRL_PWR_LED
.196412		8f 80 e8 af	sta $afe880	        sta     GABE_MSTR_CTRL
.196416		c2 30		rep #$30	        rep     #$30
.196418		3b		tsc		        tsc
.196419		38		sec		        sec
.19641a		e9 10 00	sbc #$0010	        sbc     #kernel.net.user.udp_info.size
.19641d		1b		tcs		        tcs
.19641e		1a		inc a		        inc     a
.19641f		aa		tax		        tax
.196420		a9 00 a1	lda #$a100	        lda     #$a100
.196423		95 08		sta $0328,x	        sta     kernel.net.user.udp_info.buffer+0,d,x
.196425		a9 af 00	lda #$00af	        lda     #$af
.196428		95 0a		sta $032a,x	        sta     kernel.net.user.udp_info.buffer+2,d,x
.19642a		a9 05 00	lda #$0005	        lda     #5
.19642d		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.19642f		af 68 64 19	lda $196468	        lda     _ip+0
.196433		95 02		sta $0322,x	        sta     kernel.net.user.udp_info.remote_ip+0,d,x
.196435		af 6a 64 19	lda $19646a	        lda     _ip+2
.196439		95 04		sta $0324,x	        sta     kernel.net.user.udp_info.remote_ip+2,d,x
.19643b		af 6c 64 19	lda $19646c	        lda     _port
.19643f		95 00		sta $0320,x	        sta     kernel.net.user.udp_info.local_port,d,x
.196441		95 06		sta $0326,x	        sta     kernel.net.user.udp_info.remote_port,d,x
.196443		a9 06 00	lda #$0006	        lda     #6
.196446		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.196448		22 06 80 19	jsl $198006	_retry  jsl     kernel.net.user.udp_send
.19644c		b0 fa		bcs $196448	        bcs     _retry
.19644e						_loop
.19644e		a9 14 00	lda #$0014	        lda     #20
.196451		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.196453		22 0c 80 19	jsl $19800c	        jsl     kernel.net.user.udp_recv
.196457		b5 0e		lda $032e,x	        lda     kernel.net.user.udp_info.copied,d,x
.196459		f0 f3		beq $19644e	        beq     _loop
.19645b		b5 0e		lda $032e,x	        lda     kernel.net.user.udp_info.copied,d,x
.19645d		95 0c		sta $032c,x	        sta     kernel.net.user.udp_info.buflen,d,x
.19645f		22 06 80 19	jsl $198006	        jsl     kernel.net.user.udp_send
.196463		4c 4e 64	jmp $19644e	        jmp     _loop
.196466		28		plp		_done   plp
.196467		6b		rtl		        rtl
.196468						_ip
>196468		c0 a8 01 05			        .byte   192, 168, 1, 5
>19646c		39 30				_port   .word   12345
.19646e						WaitforittobeReady:
.19646e		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.196472		29 01 00	and #$0001	                AND #$0001
.196475		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.196478		d0 f4		bne $19646e	                BNE WaitforittobeReady
.19647a		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.19647e		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.196482		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.196486		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.19648a		a9 00 00	lda #$0000	                LDA #$0000
.19648d		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.196491		a9 00 70	lda #$7000	                LDA #$7000
.196494		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.196498		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.19649b		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.19649f		a9 0b 00	lda #$000b	                LDA #$000B
.1964a2		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1964a6		a9 00 00	lda #$0000	                LDA #$0000
.1964a9		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1964ad		20 e1 64	jsr $1964e1	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1964b0		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.1964b3		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1964b7		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.1964ba		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1964be		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.1964c1		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1964c5		20 e1 64	jsr $1964e1	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1964c8		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.1964cb		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1964cf		a9 0c 00	lda #$000c	                LDA #$000C
.1964d2		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1964d6		a9 04 00	lda #$0004	                LDA #$0004
.1964d9		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1964dd		20 e1 64	jsr $1964e1	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1964e0		6b		rtl		                RTL
.1964e1						MAC_ACCESS_WAIT_FOR_COMPLETION
.1964e1		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.1964e4		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.1964e8						WaitForCompletion:
.1964e8		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.1964ec		29 00 80	and #$8000	                AND #$8000
.1964ef		c9 00 80	cmp #$8000	                CMP #$8000
.1964f2		f0 f4		beq $1964e8	                BEQ WaitForCompletion
.1964f4		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.1964f5						INIT_EVID_VID_MODE
.1964f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1964f7		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.1964f9		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.1964fd		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.1964ff		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.196503		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.196505		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.196509		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.19650d		a9 20		lda #$20	                LDA #$20
.19650f		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.196513		a9 00		lda #$00	                LDA #$00
.196515		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.196519		a9 20		lda #$20	                LDA #$20
.19651b		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.19651f		22 21 66 19	jsl $196621	                JSL INIT_EVID_LUT
.196523		22 0a 66 19	jsl $19660a	                JSL INIT_EVID_FONTSET
.196527		22 45 66 19	jsl $196645	                JSL INIT_EVID_CURSOR
.19652b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19652d		a9 62 00	lda #$0062	                LDA #(100-2)
.196530		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.196534		a9 49 00	lda #$0049	                LDA #(75-2)
.196537		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.19653b		a9 64 00	lda #$0064	                LDA #100
.19653e		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.196542		a9 4b 00	lda #$004b	                LDA #75
.196545		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.196549		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.19654c		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.196550		c2 30		rep #$30	                REP #$30        ; set A&X long
.196552		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.196555		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.196559		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.19655d		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.196560		8d 76 00	sta $0076	                STA EVID_COLORPOS
.196563		e2 20		sep #$20	                SEP #$20        ; set A short
.196565		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.196567		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.19656b		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.19656f		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.196571		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.196575		6b		rtl		                RTL
>196576		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>19657e		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>19658e		0c 1b
>196590		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>196598		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>1965a8		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>1965b8		56 49 44 0d 00
>1965bd		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>1965c5		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.1965d5						EVID_GREET
.1965d5		48		pha		                PHA
.1965d6		da		phx		                PHX
.1965d7		08		php		                PHP
.1965d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1965da		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.1965de		f0 26		beq $196606	                BEQ done                        ; If not, skip this routine
.1965e0		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.1965e2		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1965e6		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.1965ea		c2 10		rep #$10	                REP #$10        ; set X long
.1965ec		8b		phb		                PHB                             ; Print the messages
.1965ed		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.1965ef		48		pha		                PHA
.1965f0		ab		plb		                PLB
.1965f1		a2 76 65	ldx #$6576	                LDX #<>EVID_DEV_RDY0
.1965f4		22 e0 06 19	jsl $1906e0	                JSL IPRINT
.1965f8		a2 bd 65	ldx #$65bd	                LDX #<>EVID_DEV_RDY1
.1965fb		22 e0 06 19	jsl $1906e0	                JSL IPRINT
.1965ff		ab		plb		                PLB
.196600		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.196602		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196606		28		plp		done            PLP
.196607		fa		plx		                PLX
.196608		68		pla		                PLA
.196609		6b		rtl		                RTL
.19660a						INIT_EVID_FONTSET
.19660a		e2 20		sep #$20	                SEP #$20        ; set A short
.19660c		c2 10		rep #$10	                REP #$10        ; set X long
.19660e		a2 00 00	ldx #$0000	                LDX #$0000
.196611						initFontsetbranch0
.196611		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.196615		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.196619		e8		inx		                INX
.19661a		e0 00 08	cpx #$0800	                CPX #$0800
.19661d		d0 f2		bne $196611	                BNE initFontsetbranch0
.19661f		ea		nop		                NOP
.196620		6b		rtl		                RTL
.196621						INIT_EVID_LUT
.196621		e2 20		sep #$20	                SEP #$20        ; set A short
.196623		e2 10		sep #$10	                SEP #$10        ; set X short
.196625		a2 00		ldx #$00	                LDX	#$00
.196627		bf bf 89 19	lda $1989bf,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.19662b		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.19662f		e8		inx		                inx
.196630		e0 40		cpx #$40	                cpx #$40
.196632		d0 f3		bne $196627	                bne lutinitloop0
.196634		a2 00		ldx #$00	                LDX	#$00
.196636		bf ff 89 19	lda $1989ff,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.19663a		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.19663e		e8		inx		                INX
.19663f		e0 40		cpx #$40	                CPX #$40
.196641		d0 f3		bne $196636	                bne lutinitloop1
.196643		ea		nop		                NOP
.196644		6b		rtl		                RTL
.196645						INIT_EVID_CURSOR
.196645		08		php		                PHP
.196646		e2 20		sep #$20	                SEP #$20        ; set A short
.196648		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.19664a		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.19664e		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.196650		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.196654		c2 30		rep #$30	                REP #$30        ; set A&X long
.196656		a9 00 00	lda #$0000	                LDA #$0000;
.196659		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.19665d		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.196661		28		plp		                PLP
.196662		6b		rtl		                RTL
.196663						INIT_EVID_CLRSCREEN
.196663		08		php		                PHP
.196664		e2 20		sep #$20	                SEP #$20        ; set A short
.196666		c2 10		rep #$10	                REP #$10        ; set X long
.196668		a2 00 00	ldx #$0000	                LDX #$0000		        ; Only Use One Pointer
.19666b		a9 20		lda #$20	                LDA #$20		        ; Fill the Entire Screen with Space
.19666d		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA @l EVID_TEXT_MEM,X
.196671		e8		inx		                inx
.196672		e0 00 20	cpx #$2000	                cpx #$2000
.196675		d0 f6		bne $19666d	                bne iclearloop0
.196677		a2 00 00	ldx #$0000	                LDX	#$0000		        ; Only Use One Pointer
.19667a		a9 f0		lda #$f0	                LDA #$F0		        ; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.19667c		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA @l EVID_COLOR_MEM,X
.196680		e8		inx		                inx
.196681		e0 00 20	cpx #$2000	                cpx #$2000
.196684		d0 f6		bne $19667c	                bne iclearloop1
.196686		28		plp		                PLP
.196687		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.196688						ANSI_INIT
.196688		da		phx		                    PHX
.196689		5a		phy		                    PHY
.19668a		8b		phb		                    PHB
.19668b		0b		phd		                    PHD
.19668c		08		php		                    PHP
.19668d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19668f		a0 00 00	ldy #$0000	                    LDY #0
.196692		22 3e 67 19	jsl $19673e	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.196696		e2 20		sep #$20	                SEP #$20        ; set A short
.196698		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.19669c		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.19669e		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.1966a0		d0 1d		bne $1966bf	                    BNE no_evid
.1966a2		c2 20		rep #$20	                REP #$20        ; set A long
.1966a4		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.1966a8		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.1966ab		d0 12		bne $1966bf	                    BNE no_evid                     ; No: mark the EVID screen as not present
.1966ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1966af		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.1966b1		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.1966b5		a0 01 00	ldy #$0001	                    LDY #1
.1966b8		22 3e 67 19	jsl $19673e	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.1966bc		80 09		bra $1966c7	                    BRA done
.1966be		00		brk #		                    BRK
.1966bf						no_evid
.1966bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1966c1		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.1966c3		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.1966c7		28		plp		done                PLP
.1966c8		2b		pld		                    PLD
.1966c9		ab		plb		                    PLB
.1966ca		7a		ply		                    PLY
.1966cb		fa		plx		                    PLX
.1966cc		6b		rtl		                    RTL
.1966cd						ANSI_INIT_LUTS
.1966cd		08		php		                    PHP
.1966ce		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1966d0		a2 00		ldx #$00	                    LDX #0
.1966d2		bf fe 66 19	lda $1966fe,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.1966d6		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.1966da		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.1966de		e8		inx		                    INX
.1966df		e0 40		cpx #$40	                    CPX #4*16
.1966e1		d0 ef		bne $1966d2	                    BNE vicky_loop
.1966e3		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.1966e7		f0 13		beq $1966fc	                    BEQ done                        ; If not, we're done
.1966e9		a2 00		ldx #$00	                    LDX #0
.1966eb		bf fe 66 19	lda $1966fe,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.1966ef		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.1966f3		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.1966f7		e8		inx		                    INX
.1966f8		e0 40		cpx #$40	                    CPX #4*16
.1966fa		d0 ef		bne $1966eb	                    BNE evid_loop
.1966fc		28		plp		done                PLP
.1966fd		6b		rtl		                    RTL
.1966fe						ANSI_TEXT_LUT
>1966fe		00 00 00 00			                    .byte 0, 0, 0, 0
>196702		00 00 80 00			                    .byte 0, 0, 128, 0
>196706		00 80 00 00			                    .byte 0, 128, 0, 0
>19670a		00 80 80 00			                    .byte 0, 128, 128, 0
>19670e		80 00 00 00			                    .byte 128, 0, 0, 0
>196712		80 00 80 00			                    .byte 128, 0, 128, 0
>196716		80 80 00 00			                    .byte 128, 128, 0, 0
>19671a		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>19671e		80 80 80 00			                    .byte 128, 128, 128, 0
>196722		00 00 ff 00			                    .byte 0, 0, 255, 0
>196726		00 ff 00 00			                    .byte 0, 255, 0, 0
>19672a		00 ff ff 00			                    .byte 0, 255, 255, 0
>19672e		ff 00 00 00			                    .byte 255, 0, 0, 0
>196732		00 7f fc 00			                    .byte 0, 127, 252, 0
>196736		ff ff 00 00			                    .byte 255, 255, 0, 0
>19673a		ff ff ff 00			                    .byte 255, 255, 255, 0
.19673e						INIT_SCREEN_Y
.19673e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196740		c0 00 00	cpy #$0000	                    CPY #0
.196743		f0 06		beq $19674b	                    BEQ setdp_0
.196745		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.196748		5b		tcd		                    TCD
.196749		80 04		bra $19674f	                    BRA set_addresses
.19674b		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.19674e		5b		tcd		                    TCD
.19674f		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.196750		0a		asl a		                    ASL A
.196751		0a		asl a		                    ASL A
.196752		aa		tax		                    TAX
.196753		bf 8e 67 19	lda $19678e,x	                    LDA @l text_address,X
.196757		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.196759		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.19675b		e2 20		sep #$20	                SEP #$20        ; set A short
.19675d		bf 90 67 19	lda $196790,x	                    LDA @l text_address+2,X
.196761		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.196763		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.196765		c2 20		rep #$20	                REP #$20        ; set A long
.196767		bf 96 67 19	lda $196796,x	                    LDA @l color_address,X
.19676b		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.19676d		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.19676f		e2 20		sep #$20	                SEP #$20        ; set A short
.196771		bf 98 67 19	lda $196798,x	                    LDA @l color_address+2,X
.196775		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.196777		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.196779		c2 20		rep #$20	                REP #$20        ; set A long
.19677b		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.19677d		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.19677f		e2 20		sep #$20	                SEP #$20        ; set A short
.196781		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.196783		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.196785		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196787		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.196789		22 d7 67 19	jsl $1967d7	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.19678d		6b		rtl		                    RTL
>19678e		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>196796		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.19679e						ANSI_SETSIZES
.19679e		48		pha		                    PHA
.19679f		da		phx		                    PHX
.1967a0		5a		phy		                    PHY
.1967a1		0b		phd		                    PHD
.1967a2		08		php		                    PHP
.1967a3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1967a5		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.1967a9		48		pha		                    PHA
.1967aa		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.1967ac		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.1967b0		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.1967b4		a0 00		ldy #$00	                    LDY #0
.1967b6		22 d7 67 19	jsl $1967d7	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.1967ba		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.1967bc		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.1967c0		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.1967c4		b0 06		bcs $1967cc	                    BCS done                        ; Not present, just return
.1967c6		a0 01		ldy #$01	                    LDY #1
.1967c8		22 d7 67 19	jsl $1967d7	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.1967cc		68		pla		done                PLA
.1967cd		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.1967d1		28		plp		                    PLP
.1967d2		2b		pld		                    PLD
.1967d3		7a		ply		                    PLY
.1967d4		fa		plx		                    PLX
.1967d5		68		pla		                    PLA
.1967d6		6b		rtl		                    RTL
.1967d7						ANSI_SETSIZE_Y
.1967d7		08		php		                    PHP
.1967d8		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1967da		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.1967dc		f0 06		beq $1967e4	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.1967de		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.1967e2		80 04		bra $1967e8	                    BRA resolution
.1967e4		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.1967e8		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.1967ea		0a		asl a		                    ASL A
.1967eb		aa		tax		                    TAX                                 ; Index to the col/line count in X
.1967ec		c2 20		rep #$20	                REP #$20        ; set A long
.1967ee		bf 8a 68 19	lda $19688a,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.1967f2		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.1967f4		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.1967f6		bf 92 68 19	lda $196892,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.1967fa		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.1967fc		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.1967fe		e2 20		sep #$20	                SEP #$20        ; set A short
.196800		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196802		f0 06		beq $19680a	                    BEQ vky_border                      ; Yes: get the border from Vicky
.196804		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.196808		80 04		bra $19680e	                    BRA border
.19680a		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.19680e		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.196810		f0 76		beq $196888	                    BEQ done                            ; No border... the sizes are correct now
.196812		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196814		f0 06		beq $19681c	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.196816		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.19681a		80 04		bra $196820	                    BRA get_border_x_size
.19681c		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.196820		29 3f		and #$3f	get_border_x_size   AND #$3F
.196822		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196824		d0 04		bne $19682a	                    BNE frac_width
.196826		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196827		4a		lsr a		                    LSR A
.196828		80 03		bra $19682d	                    BRA store_width
.19682a		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.19682b		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.19682c		1a		inc a		                    INC A
.19682d		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.19682f		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196831		e2 20		sep #$20	                SEP #$20        ; set A short
.196833		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196835		f0 0c		beq $196843	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.196837		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.19683b		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.19683d		f0 04		beq $196843	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.19683f		c2 20		rep #$20	                REP #$20        ; set A long
.196841		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196843						adjust_width
.196843		c2 20		rep #$20	                REP #$20        ; set A long
.196845		38		sec		                    SEC
.196846		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.196848		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.19684a		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.19684c		e2 20		sep #$20	                SEP #$20        ; set A short
.19684e		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196850		f0 06		beq $196858	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.196852		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.196856		80 04		bra $19685c	                    BRA get_border_y_size
.196858		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.19685c		29 3f		and #$3f	get_border_y_size   AND #$3F
.19685e		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196860		d0 04		bne $196866	                    BNE frac_height
.196862		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196863		4a		lsr a		                    LSR A
.196864		80 03		bra $196869	                    BRA store_height
.196866		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196867		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196868		1a		inc a		                    INC A
.196869		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.19686b		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.19686d		e2 20		sep #$20	                SEP #$20        ; set A short
.19686f		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196871		f0 0c		beq $19687f	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.196873		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.196877		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196879		f0 04		beq $19687f	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.19687b		c2 20		rep #$20	                REP #$20        ; set A long
.19687d		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.19687f						adjust_height
.19687f		c2 20		rep #$20	                REP #$20        ; set A long
.196881		38		sec		                    SEC
.196882		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.196884		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196886		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.196888		28		plp		done                PLP
.196889		6b		rtl		                    RTL
>19688a		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>196892		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.19689a						ANSI_SETDEVICE
.19689a		48		pha		                    PHA
.19689b		08		php		                    PHP
.19689c		e2 20		sep #$20	                SEP #$20        ; set A short
.19689e		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.1968a2		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.1968a4		f0 08		beq $1968ae	                    BEQ console                     ; Yes: point to the console
.1968a6		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.1968a8		f0 0b		beq $1968b5	                    BEQ evid                        ; Check to see if the EVID is present
.1968aa		28		plp		bad_device          PLP
.1968ab		68		pla		                    PLA
.1968ac		38		sec		                    SEC
.1968ad		6b		rtl		                    RTL
.1968ae						console
.1968ae		c2 20		rep #$20	                REP #$20        ; set A long
.1968b0		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.1968b3		80 0d		bra $1968c2	                    BRA set_dp
.1968b5						evid
.1968b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1968b7		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.1968bb		f0 ed		beq $1968aa	                    BEQ bad_device                  ; No: return that the device is bad
.1968bd		c2 20		rep #$20	                REP #$20        ; set A long
.1968bf		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.1968c2		5b		tcd		set_dp              TCD
.1968c3		28		plp		                    PLP
.1968c4		68		pla		                    PLA
.1968c5		18		clc		                    CLC
.1968c6		6b		rtl		                    RTL
.1968c7						ANSI_PUTC
.1968c7		da		phx		                    PHX
.1968c8		5a		phy		                    PHY
.1968c9		0b		phd		                    PHD
.1968ca		08		php		                    PHP
.1968cb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1968cd		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1968d1		90 03		bcc $1968d6	                    BCC get_state               ; If valid, check the current state
.1968d3		82 9d 00	brl $196973	                    BRL done                    ; If invalid, just return
.1968d6		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.1968d8		f0 0c		beq $1968e6	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.1968da		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.1968dc		f0 21		beq $1968ff	                    BEQ do_st_escape
.1968de		e0 02		cpx #$02	                    CPX #ST_CSI
.1968e0		f0 3f		beq $196921	                    BEQ do_st_csi
.1968e2		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.1968e4		80 06		bra $1968ec	                    BRA print_raw
.1968e6		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.1968e8		f0 09		beq $1968f3	                    BEQ go_escape               ; Yes, handle the ESC
.1968ea		90 0d		bcc $1968f9	                    BLT do_control              ; If less than, handle as a control code
.1968ec		22 54 6a 19	jsl $196a54	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.1968f0		82 80 00	brl $196973	                    BRL done
.1968f3		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.1968f5		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.1968f7		80 7a		bra $196973	                    BRA done
.1968f9		22 0b 6a 19	jsl $196a0b	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.1968fd		80 74		bra $196973	                    BRA done
.1968ff		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.196901		f0 08		beq $19690b	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.196903		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.196905		d0 0a		bne $196911	                    BNE chk_csi                 ; No: check to see if we have a CSI
.196907		22 00 10 19	jsl $191000	                    JSL SHOW_CREDITS            ; Yes: show the credits
.19690b		a9 00		lda #$00	go_init             LDA #ST_INIT
.19690d		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.19690f		80 62		bra $196973	                    BRA done
.196911		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.196913		d0 cd		bne $1968e2	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.196915		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.196917		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.196919		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.19691b		a9 02		lda #$02	                    LDA #ST_CSI
.19691d		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.19691f		80 52		bra $196973	                    BRA done
.196921		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.196923		90 1d		bcc $196942	                    BLT csi_not_digit
.196925		c9 3a		cmp #$3a	                    CMP #'9'+1
.196927		b0 19		bcs $196942	                    BGE csi_not_digit
.196929		38		sec		                    SEC                         ; Have digit... convert to a number
.19692a		e9 30		sbc #$30	                    SBC #'0'
.19692c		48		pha		                    PHA                         ; Save it
.19692d		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.19692f		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.196931		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.196933		0a		asl a		                    ASL A                       ; A := arg * 4
.196934		0a		asl a		                    ASL A                       ; A := arg * 8
.196935		18		clc		                    CLC
.196936		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.196938		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.19693a		18		clc		                    CLC
.19693b		68		pla		                    PLA                         ; Get the digit back
.19693c		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.19693e		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.196940		80 31		bra $196973	                    BRA done                    ; And we're done with this particular character
.196942		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.196944		d0 0e		bne $196954	                    BNE csi_not_sep
.196946		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.196948		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.19694a		d0 03		bne $19694f	                    BNE csi_next_arg            ; No: move to the next argument
.19694c		82 93 ff	brl $1968e2	                    BRL pr_and_reset            ; Yes: print and reset state
.19694f		1a		inc a		csi_next_arg        INC A
.196950		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.196952		80 1f		bra $196973	                    BRA done                    ; And we're done with this character
.196954		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.196956		90 0a		bcc $196962	                    BLT csi_not_upper
.196958		c9 5b		cmp #$5b	                    CMP #'Z'+1
.19695a		b0 06		bcs $196962	                    BGE csi_not_upper
.19695c		22 83 69 19	jsl $196983	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.196960		80 11		bra $196973	                    BRA done
.196962		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.196964		90 0a		bcc $196970	                    BLT csi_not_lower
.196966		c9 7b		cmp #$7b	                    CMP #'z'+1
.196968		b0 06		bcs $196970	                    BGE csi_not_lower
.19696a		22 c8 69 19	jsl $1969c8	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.19696e		80 03		bra $196973	                    BRA done
.196970		82 6f ff	brl $1968e2	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.196973		28		plp		done                PLP
.196974		2b		pld		                    PLD
.196975		7a		ply		                    PLY
.196976		fa		plx		                    PLX
.196977		6b		rtl		                    RTL
.196978						ANSI_INVALID
.196978		08		php		                    PHP
.196979		e2 20		sep #$20	                SEP #$20        ; set A short
.19697b		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.19697d		22 54 6a 19	jsl $196a54	                    JSL ANSI_PUTRAWC            ; Print the character
.196981		28		plp		                    PLP
.196982		6b		rtl		                    RTL
.196983						ANSI_ANSI_UPPER
.196983		08		php		                    PHP
.196984		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196986		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196988		38		sec		                    SEC
.196989		e9 40		sbc #$40	                    SBC #'@'
.19698b		0a		asl a		                    ASL A
.19698c		aa		tax		                    TAX
.19698d		fc 92 69	jsr ($196992,x)	                    JSR (ansi_table,X)
.196990		28		plp		                    PLP
.196991		6b		rtl		                    RTL
>196992		ec 6c				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>196994		6f 6a				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>196996		83 6a				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>196998		97 6a				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>19699a		ab 6a				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>19699c		78 69				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>19699e		78 69				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>1969a0		78 69				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>1969a2		bf 6a				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>1969a4		78 69				                    .word <>ANSI_INVALID    ; 'I'
>1969a6		3e 6c				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>1969a8		9b 6c				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>1969aa		78 69				                    .word <>ANSI_INVALID    ; 'L'
>1969ac		78 69				                    .word <>ANSI_INVALID    ; 'M'
>1969ae		78 69				                    .word <>ANSI_INVALID    ; 'N'
>1969b0		78 69				                    .word <>ANSI_INVALID    ; 'O'
>1969b2		30 6d				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>1969b4		78 69				                    .word <>ANSI_INVALID    ; 'Q'
>1969b6		78 69				                    .word <>ANSI_INVALID    ; 'R'
>1969b8		78 69				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>1969ba		78 69				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>1969bc		78 69				                    .word <>ANSI_INVALID    ; 'U'
>1969be		78 69				                    .word <>ANSI_INVALID    ; 'V'
>1969c0		78 69				                    .word <>ANSI_INVALID    ; 'W'
>1969c2		78 69				                    .word <>ANSI_INVALID    ; 'X'
>1969c4		78 69				                    .word <>ANSI_INVALID    ; 'Y'
>1969c6		78 69				                    .word <>ANSI_INVALID    ; 'Z'
.1969c8						ANSI_ANSI_LOWER
.1969c8		08		php		                    PHP
.1969c9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1969cb		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.1969cd		38		sec		                    SEC
.1969ce		e9 61		sbc #$61	                    SBC #'a'
.1969d0		0a		asl a		                    ASL A
.1969d1		aa		tax		                    TAX
.1969d2		fc d7 69	jsr ($1969d7,x)	                    JSR (ansi_table,X)
.1969d5		28		plp		                    PLP
.1969d6		6b		rtl		                    RTL
>1969d7		78 69				ansi_table          .word <>ANSI_INVALID    ; 'a'
>1969d9		78 69				                    .word <>ANSI_INVALID    ; 'b'
>1969db		78 69				                    .word <>ANSI_INVALID    ; 'c'
>1969dd		78 69				                    .word <>ANSI_INVALID    ; 'd'
>1969df		78 69				                    .word <>ANSI_INVALID    ; 'e'
>1969e1		78 69				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>1969e3		78 69				                    .word <>ANSI_INVALID    ; 'g'
>1969e5		d8 6a				                    .word <>ANSI_SET_MODE   ; 'h'
>1969e7		78 69				                    .word <>ANSI_INVALID    ; 'i'
>1969e9		78 69				                    .word <>ANSI_INVALID    ; 'j'
>1969eb		78 69				                    .word <>ANSI_INVALID    ; 'k'
>1969ed		15 6b				                    .word <>ANSI_RESET_MODE ; 'l'
>1969ef		52 6b				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>1969f1		78 69				                    .word <>ANSI_INVALID    ; 'n'
>1969f3		78 69				                    .word <>ANSI_INVALID    ; 'o'
>1969f5		78 69				                    .word <>ANSI_INVALID    ; 'p'
>1969f7		78 69				                    .word <>ANSI_INVALID    ; 'q'
>1969f9		78 69				                    .word <>ANSI_INVALID    ; 'r'
>1969fb		78 69				                    .word <>ANSI_INVALID    ; 's'
>1969fd		78 69				                    .word <>ANSI_INVALID    ; 't'
>1969ff		78 69				                    .word <>ANSI_INVALID    ; 'u'
>196a01		78 69				                    .word <>ANSI_INVALID    ; 'v'
>196a03		78 69				                    .word <>ANSI_INVALID    ; 'w'
>196a05		78 69				                    .word <>ANSI_INVALID    ; 'x'
>196a07		78 69				                    .word <>ANSI_INVALID    ; 'y'
>196a09		78 69				                    .word <>ANSI_INVALID    ; 'z'
.196a0b						ANSI_PR_CONTROL
.196a0b		08		php		                    PHP
.196a0c		e2 20		sep #$20	                SEP #$20        ; set A short
.196a0e		c2 10		rep #$10	                REP #$10        ; set X long
.196a10		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.196a12		f0 12		beq $196a26	                    BEQ do_cr
.196a14		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.196a16		f0 1a		beq $196a32	                    BEQ do_lf
.196a18		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.196a1a		f0 1c		beq $196a38	                    BEQ do_bs
.196a1c		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.196a1e		f0 1e		beq $196a3e	                    BEQ do_tab
.196a20		22 54 6a 19	jsl $196a54	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.196a24		80 2c		bra $196a52	                    BRA done
.196a26		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.196a29		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196a2b		c8		iny		                    INY
.196a2c		22 09 6e 19	jsl $196e09	                    JSL ANSI_LOCATE
.196a30		80 20		bra $196a52	                    BRA done
.196a32		22 e6 6d 19	jsl $196de6	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.196a36		80 1a		bra $196a52	                    BRA done
.196a38		22 aa 6d 19	jsl $196daa	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.196a3c		80 14		bra $196a52	                    BRA done
.196a3e						do_tab
.196a3e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a40		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.196a42		29 f8 ff	and #$fff8	                    AND #$FFF8
.196a45		18		clc		                    CLC
.196a46		69 08 00	adc #$0008	                    ADC #$0008
.196a49		aa		tax		                    TAX
.196a4a		e2 20		sep #$20	                SEP #$20        ; set A short
.196a4c		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196a4e		22 09 6e 19	jsl $196e09	                    JSL ANSI_LOCATE
.196a52		28		plp		done                PLP
.196a53		6b		rtl		                    RTL
.196a54						ANSI_PUTRAWC
.196a54		da		phx		                    PHX
.196a55		5a		phy		                    PHY
.196a56		0b		phd		                    PHD
.196a57		08		php		                    PHP
.196a58		e2 20		sep #$20	                SEP #$20        ; set A short
.196a5a		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.196a5e		b0 0a		bcs $196a6a	                    BCS done                        ; If invalid, just return
.196a60		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.196a62		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.196a64		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.196a66		22 7f 6d 19	jsl $196d7f	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.196a6a		28		plp		done                PLP
.196a6b		2b		pld		                    PLD
.196a6c		7a		ply		                    PLY
.196a6d		fa		plx		                    PLX
.196a6e		6b		rtl		                    RTL
.196a6f						ANSI_CUU
.196a6f		08		php		                    PHP
.196a70		e2 20		sep #$20	                SEP #$20        ; set A short
.196a72		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196a74		d0 02		bne $196a78	                    BNE loop                        ; Move so long as not 0
.196a76		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196a78		48		pha		loop                PHA                             ; Save the count
.196a79		22 c8 6d 19	jsl $196dc8	                    JSL ANSI_CSRUP                  ; Cursor Up
.196a7d		68		pla		                    PLA                             ; Restore the count
.196a7e		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196a7f		d0 f7		bne $196a78	                    BNE loop
.196a81		28		plp		                    PLP
.196a82		60		rts		                    RTS
.196a83						ANSI_CUD
.196a83		08		php		                    PHP
.196a84		e2 20		sep #$20	                SEP #$20        ; set A short
.196a86		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196a88		d0 02		bne $196a8c	                    BNE loop                        ; Move so long as not 0
.196a8a		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196a8c		48		pha		loop                PHA                             ; Save the count
.196a8d		22 e6 6d 19	jsl $196de6	                    JSL ANSI_CSRDOWN                ; Cursor Down
.196a91		68		pla		                    PLA                             ; Restore the count
.196a92		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196a93		d0 f7		bne $196a8c	                    BNE loop
.196a95		28		plp		                    PLP
.196a96		60		rts		                    RTS
.196a97						ANSI_CUF
.196a97		08		php		                    PHP
.196a98		e2 20		sep #$20	                SEP #$20        ; set A short
.196a9a		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196a9c		d0 02		bne $196aa0	                    BNE loop                        ; Move so long as not 0
.196a9e		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196aa0		48		pha		loop                PHA                             ; Save the count
.196aa1		22 7f 6d 19	jsl $196d7f	                    JSL ANSI_CSRRIGHT               ; Cursor right
.196aa5		68		pla		                    PLA                             ; Restore the count
.196aa6		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196aa7		d0 f7		bne $196aa0	                    BNE loop
.196aa9		28		plp		                    PLP
.196aaa		60		rts		                    RTS
.196aab						ANSI_CUB
.196aab		08		php		                    PHP
.196aac		e2 20		sep #$20	                SEP #$20        ; set A short
.196aae		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196ab0		d0 02		bne $196ab4	                    BNE loop                        ; Move so long as not 0
.196ab2		a9 01		lda #$01	                    LDA #1                          ; If 0, default to 1
.196ab4		48		pha		loop                PHA                             ; Save the count
.196ab5		22 aa 6d 19	jsl $196daa	                    JSL ANSI_CSRLEFT                ; Cursor left
.196ab9		68		pla		                    PLA                             ; Restore the count
.196aba		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196abb		d0 f7		bne $196ab4	                    BNE loop
.196abd		28		plp		                    PLP
.196abe		60		rts		                    RTS
.196abf						ANSI_CUP
.196abf		08		php		                    PHP
.196ac0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196ac2		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196ac4		d0 02		bne $196ac8	                    BNE get_row
.196ac6		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.196ac8		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.196aca		d0 02		bne $196ace	                    BNE adjust_coords
.196acc		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.196ace		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.196acf		88		dey		                    DEY
.196ad0		c2 30		rep #$30	                REP #$30        ; set A&X long
.196ad2		22 09 6e 19	jsl $196e09	                    JSL ANSI_LOCATE                 ; Set the cursor position
.196ad6		28		plp		                    PLP
.196ad7		60		rts		                    RTS
.196ad8						ANSI_SET_MODE
.196ad8		08		php		                    PHP
.196ad9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196adb		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196add		c9 19		cmp #$19	                    CMP #25
.196adf		d0 24		bne $196b05	                    BNE chk_break
.196ae1		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.196ae5		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.196ae7		d0 0c		bne $196af5	                    BNE check_evid
.196ae9		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.196aed		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.196aef		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.196af3		80 1e		bra $196b13	                    BRA done
.196af5		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.196af7		d0 1a		bne $196b13	                    BNE done
.196af9		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.196afd		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.196aff		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.196b03		80 0e		bra $196b13	                    BRA done
.196b05		c9 1c		cmp #$1c	chk_break           CMP #28
.196b07		d0 0a		bne $196b13	                    BNE done
.196b09		22 73 72 19	jsl $197273	                    JSL KBD_GET_CONTROL
.196b0d		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.196b0f		22 80 72 19	jsl $197280	                    JSL KBD_SET_CONTROL
.196b13		28		plp		done                PLP
.196b14		60		rts		                    RTS
.196b15						ANSI_RESET_MODE
.196b15		08		php		                    PHP
.196b16		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196b18		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196b1a		c9 19		cmp #$19	                    CMP #25
.196b1c		d0 24		bne $196b42	                    BNE chk_break
.196b1e		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.196b22		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.196b24		d0 0c		bne $196b32	                    BNE check_evid
.196b26		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.196b2a		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.196b2c		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.196b30		80 1e		bra $196b50	                    BRA done
.196b32		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.196b34		d0 1a		bne $196b50	                    BNE done
.196b36		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.196b3a		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.196b3c		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.196b40		80 0e		bra $196b50	                    BRA done
.196b42		c9 1c		cmp #$1c	chk_break           CMP #28
.196b44		d0 0a		bne $196b50	                    BNE done
.196b46		22 73 72 19	jsl $197273	                    JSL KBD_GET_CONTROL
.196b4a		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.196b4c		22 80 72 19	jsl $197280	                    JSL KBD_SET_CONTROL
.196b50		28		plp		done                PLP
.196b51		60		rts		                    RTS
.196b52						ANSI_SGR
.196b52		08		php		                    PHP
.196b53		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196b55		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196b57		d0 0d		bne $196b66	                    BNE chk_1
.196b59		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.196b5b		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196b5d		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.196b5f		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.196b61		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.196b63		82 d6 00	brl $196c3c	                    BRL done
.196b66		c9 01		cmp #$01	chk_1               CMP #1
.196b68		d0 0f		bne $196b79	                    BNE chk_2
.196b6a		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.196b6c		09 80		ora #$80	                    ORA #$80
.196b6e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196b70		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.196b72		09 40		ora #$40	                    ORA #CONTROL_BOLD
.196b74		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.196b76		82 c3 00	brl $196c3c	                    BRL done
.196b79		c9 02		cmp #$02	chk_2               CMP #2
.196b7b		f0 04		beq $196b81	                    BEQ normal_intensity
.196b7d		c9 16		cmp #$16	chk_22              CMP #22
.196b7f		d0 0f		bne $196b90	                    BNE chk_7
.196b81		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.196b83		29 7f		and #$7f	                    AND #~$80
.196b85		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196b87		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.196b89		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.196b8b		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.196b8d		82 ac 00	brl $196c3c	                    BRL done
.196b90		c9 07		cmp #$07	chk_7               CMP #7
.196b92		d0 2c		bne $196bc0	                    BNE chk_27
.196b94		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.196b96		89 80		bit #$80	                    BIT #CONTROL_INVERT
.196b98		f0 03		beq $196b9d	                    BEQ invert_on
.196b9a		82 9f 00	brl $196c3c	                    BRL done                        ; Yes: just finish
.196b9d		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.196b9f		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.196ba1		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.196ba3		0a		asl a		                    ASL  A
.196ba4		69 80		adc #$80	                    ADC  #$80
.196ba6		2a		rol a		                    ROL  A
.196ba7		0a		asl a		                    ASL  A
.196ba8		69 80		adc #$80	                    ADC  #$80
.196baa		2a		rol a		                    ROL  A
.196bab		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.196bad		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196baf		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.196bb1		89 40		bit #$40	                    BIT #CONTROL_BOLD
.196bb3		d0 03		bne $196bb8	                    BNE bold_on
.196bb5		82 84 00	brl $196c3c	                    BRL done                        ; No: we're done
.196bb8		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.196bba		09 80		ora #$80	                    ORA #$80
.196bbc		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196bbe		80 7c		bra $196c3c	                    BRA done
.196bc0		c9 1b		cmp #$1b	chk_27              CMP #27
.196bc2		d0 0c		bne $196bd0	                    BNE chk_39
.196bc4		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.196bc6		89 80		bit #$80	                    BIT #CONTROL_INVERT
.196bc8		f0 72		beq $196c3c	                    BEQ done                        ; No: just finish
.196bca		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.196bcc		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.196bce		80 d1		bra $196ba1	                    BRA swap_colors                 ; And go swap the colors
.196bd0		c9 27		cmp #$27	chk_39              CMP #39
.196bd2		d0 10		bne $196be4	                    BNE chk_49
.196bd4		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196bd6		29 0f		and #$0f	                    AND #$0F
.196bd8		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196bda		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196bdc		29 f0		and #$f0	                    AND #$F0
.196bde		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.196be0		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196be2		80 58		bra $196c3c	                    BRA done
.196be4		c9 31		cmp #$31	chk_49              CMP #49
.196be6		d0 10		bne $196bf8	                    BNE chk_foreground
.196be8		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196bea		29 f0		and #$f0	                    AND #$F0
.196bec		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196bee		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196bf0		29 0f		and #$0f	                    AND #$0F
.196bf2		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.196bf4		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196bf6		80 44		bra $196c3c	                    BRA done
.196bf8		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.196bfa		90 29		bcc $196c25	                    BLT chk_background
.196bfc		c9 26		cmp #$26	                    CMP #38
.196bfe		b0 25		bcs $196c25	                    BGE chk_background
.196c00		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196c02		29 0f		and #$0f	                    AND #$0F
.196c04		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196c06		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.196c08		38		sec		                    SEC
.196c09		e9 1e		sbc #$1e	                    SBC #30
.196c0b		0a		asl a		                    ASL A
.196c0c		0a		asl a		                    ASL A
.196c0d		0a		asl a		                    ASL A
.196c0e		0a		asl a		                    ASL A
.196c0f		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.196c11		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196c13		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.196c15		89 40		bit #$40	                    BIT #CONTROL_BOLD
.196c17		d0 03		bne $196c1c	                    BNE bold_fore                   ; No: we're done
.196c19		82 20 00	brl $196c3c	                    BRL done
.196c1c		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.196c1e		09 80		ora #$80	                    ORA #$80
.196c20		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196c22		82 17 00	brl $196c3c	                    BRL done
.196c25		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.196c27		90 13		bcc $196c3c	                    BLT done
.196c29		c9 30		cmp #$30	                    CMP #48
.196c2b		b0 0f		bcs $196c3c	                    BGE done
.196c2d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196c2f		29 f0		and #$f0	                    AND #$F0
.196c31		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196c33		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.196c35		38		sec		                    SEC
.196c36		e9 28		sbc #$28	                    SBC #40
.196c38		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.196c3a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.196c3c		28		plp		done                PLP
.196c3d		60		rts		                    RTS
.196c3e						ANSI_ED
.196c3e		5a		phy		                    PHY
.196c3f		08		php		                    PHP
.196c40		e2 20		sep #$20	                SEP #$20        ; set A short
.196c42		c2 10		rep #$10	                REP #$10        ; set X long
.196c44		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.196c46		d0 1b		bne $196c63	                    BNE not_0                           ; Is the code 0?
.196c48						code_0
.196c48		c2 20		rep #$20	                REP #$20        ; set A long
.196c4a		38		sec		                    SEC                                 ; Calculate min index to erase
.196c4b		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.196c4d		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.196c4f		a8		tay		                    TAY
.196c50		e2 20		sep #$20	                SEP #$20        ; set A short
.196c52		a9 20		lda #$20	code_2_loop         LDA #' '
.196c54		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.196c56		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196c58		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.196c5a		c8		iny		                    INY
.196c5b		c0 00 20	cpy #$2000	                    CPY #$2000
.196c5e		d0 f2		bne $196c52	                    BNE code_2_loop
.196c60		82 35 00	brl $196c98	                    BRL done
.196c63		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.196c65		d0 18		bne $196c7f	                    BNE not_1
.196c67						code_1
.196c67		c2 20		rep #$20	                REP #$20        ; set A long
.196c69		38		sec		                    SEC                                 ; Calculate max index to erase
.196c6a		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.196c6c		e5 00		sbc $0320	                    SBC #S_ANSI_VARS.SCREENBEGIN,D
.196c6e		a8		tay		                    TAY
.196c6f		e2 20		sep #$20	                SEP #$20        ; set A short
.196c71		a9 20		lda #$20	code_1_loop         LDA #' '
.196c73		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.196c75		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196c77		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.196c79		88		dey		                    DEY                                 ; Move to the previous index
.196c7a		10 f5		bpl $196c71	                    BPL code_1_loop                     ; And loop until we're done
.196c7c		82 19 00	brl $196c98	                    BRL done
.196c7f		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.196c81		f0 04		beq $196c87	                    BEQ cls_all
.196c83		c9 03		cmp #$03	                    CMP #3
.196c85		d0 11		bne $196c98	                    BNE done                            ; No: just ignore the sequence
.196c87		a0 00 00	ldy #$0000	cls_all             LDY #0                              ; Start with the cursor's position
.196c8a		a9 20		lda #$20	cls_all_loop        LDA #' '
.196c8c		97 00		sta [$0320],y	                    STA [#S_ANSI_VARS.SCREENBEGIN,D],Y  ; Clear the text cell
.196c8e		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196c90		97 16		sta [$0336],y	                    STA [#S_ANSI_VARS.COLORBEGIN,D],Y   ; And set the default color
.196c92		c8		iny		                    INY                                 ; Go to the next position
.196c93		c0 00 20	cpy #$2000	                    CPY #$2000                          ; Have we reached the end?
.196c96		d0 f2		bne $196c8a	                    BNE cls_all_loop                    ; No: keep going
.196c98		28		plp		done                PLP
.196c99		7a		ply		                    PLY
.196c9a		60		rts		                    RTS
.196c9b						ANSI_EL
.196c9b		da		phx		                    PHX
.196c9c		5a		phy		                    PHY
.196c9d		08		php		                    PHP
.196c9e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196ca0		38		sec		                    SEC
.196ca1		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.196ca3		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.196ca5		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196ca7		e2 20		sep #$20	                SEP #$20        ; set A short
.196ca9		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.196cab		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.196cad		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.196caf		d0 0e		bne $196cbf	                    BNE not_0                           ; Is the code 0?
.196cb1						code_0
.196cb1		a9 20		lda #$20	                    LDA #' '
.196cb3		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.196cb5		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.196cb7		c8		iny		                    INY
.196cb8		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.196cba		d0 f9		bne $196cb5	                    BNE code_0_loop                     ; No: keep looping
.196cbc		82 29 00	brl $196ce8	                    BRL done
.196cbf		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.196cc1		d0 11		bne $196cd4	                    BNE not_1
.196cc3						code_1
.196cc3		a9 20		lda #$20	                    LDA #' '
.196cc5		a0 00 00	ldy #$0000	                    LDY #0
.196cc8		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.196cca		c8		iny		                    INY
.196ccb		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.196ccd		d0 f9		bne $196cc8	                    BNE code_1_loop                     ; No: keep looping
.196ccf		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.196cd1		82 14 00	brl $196ce8	                    BRL done
.196cd4		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.196cd6		f0 04		beq $196cdc	                    BEQ code_2_3
.196cd8		c9 03		cmp #$03	                    CMP #3
.196cda		d0 0c		bne $196ce8	                    BNE done                            ; No: just ignore the sequence
.196cdc						code_2_3
.196cdc		a9 20		lda #$20	                    LDA #' '
.196cde		a0 00 00	ldy #$0000	                    LDY #0
.196ce1		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.196ce3		c8		iny		                    INY
.196ce4		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.196ce6		d0 f9		bne $196ce1	                    BNE code_2_3_loop                   ; No: keep looping
.196ce8		28		plp		done                PLP
.196ce9		7a		ply		                    PLY
.196cea		fa		plx		                    PLX
.196ceb		60		rts		                    RTS
.196cec						ANSI_ICH
.196cec		5a		phy		                    PHY
.196ced		08		php		                    PHP
.196cee		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196cf0		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.196cf2		f0 04		beq $196cf8	                    BEQ default_1                       ; If 0, default to 1
.196cf4		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.196cf6		d0 04		bne $196cfc	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.196cf8		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.196cfa		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.196cfc		38		sec		calc_src_dest       SEC
.196cfd		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.196cff		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.196d01		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196d03		38		sec		                    SEC
.196d04		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.196d06		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.196d08		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.196d0a		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.196d0c		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.196d0e		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.196d10		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.196d12		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.196d14		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.196d16		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.196d18		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.196d1a		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.196d1c		10 ea		bpl $196d08	                    BPL insert_loop                     ; Keep looping until we reach the end
.196d1e		a0 00		ldy #$00	                    LDY #0
.196d20		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.196d22		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.196d24		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196d26		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.196d28		c8		iny		                    INY                                 ; Move to the next byte
.196d29		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.196d2b		d0 f3		bne $196d20	                    BNE fill_loop
.196d2d		28		plp		                    PLP
.196d2e		7a		ply		                    PLY
.196d2f		60		rts		                    RTS
.196d30						ANSI_DCH
.196d30		5a		phy		                    PHY
.196d31		08		php		                    PHP
.196d32		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196d34		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.196d36		f0 04		beq $196d3c	                    BEQ default_1                       ; If 0, default to 1
.196d38		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.196d3a		d0 04		bne $196d40	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.196d3c		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.196d3e		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.196d40		a9 00		lda #$00	calc_src_dest       LDA #0
.196d42		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.196d44		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.196d46		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.196d48		38		sec		                    SEC                                 ; Calculate end offset
.196d49		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.196d4b		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.196d4d		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.196d4f		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.196d51		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.196d53		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.196d55		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.196d57		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.196d59		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.196d5b		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.196d5d		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.196d5f		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.196d61		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.196d63		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196d65		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.196d67		90 e6		bcc $196d4f	                    BLT del_loop                        ; Keep looping until we reach the end
.196d69		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.196d6a		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.196d6c		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.196d6e		a8		tay		                    TAY
.196d6f		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.196d71		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.196d73		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196d75		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.196d77		c8		iny		                    INY                                 ; Move to the next byte
.196d78		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.196d7a		90 f3		bcc $196d6f	                    BLT fill_loop
.196d7c		28		plp		                    PLP
.196d7d		7a		ply		                    PLY
.196d7e		60		rts		                    RTS
.196d7f						ANSI_CSRRIGHT
.196d7f		da		phx		                    PHX
.196d80		5a		phy		                    PHY
.196d81		0b		phd		                    PHD
.196d82		08		php		                    PHP
.196d83		c2 30		rep #$30	                REP #$30        ; set A&X long
.196d85		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.196d89		b0 1a		bcs $196da5	                    BCS done                            ; If invalid, just return
.196d8b		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.196d8d		e8		inx		                    INX
.196d8e		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.196d90		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.196d92		90 0d		bcc $196da1	                    BCC nowrap                          ; No: just set the position
.196d94		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.196d97		c8		iny		                    INY                                 ; And move to the next row
.196d98		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.196d9a		90 05		bcc $196da1	                    BCC nowrap                          ; No: just set the position
.196d9c		88		dey		                    DEY                                 ; Yes: lock to the last row
.196d9d		22 6d 6e 19	jsl $196e6d	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.196da1		22 09 6e 19	jsl $196e09	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.196da5		28		plp		done                PLP
.196da6		2b		pld		                    PLD
.196da7		7a		ply		                    PLY
.196da8		fa		plx		                    PLX
.196da9		6b		rtl		                    RTL
.196daa						ANSI_CSRLEFT
.196daa		da		phx		                    PHX
.196dab		5a		phy		                    PHY
.196dac		0b		phd		                    PHD
.196dad		08		php		                    PHP
.196dae		c2 30		rep #$30	                REP #$30        ; set A&X long
.196db0		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196db4		b0 0d		bcs $196dc3	                    BCS done                    ; If invalid, just return
.196db6		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.196db8		f0 09		beq $196dc3	                    BEQ done                    ; If so, just ignore this call
.196dba		ca		dex		                    DEX
.196dbb		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.196dbd		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196dbf		22 09 6e 19	jsl $196e09	                    JSL ANSI_LOCATE
.196dc3		28		plp		done                PLP
.196dc4		2b		pld		                    PLD
.196dc5		7a		ply		                    PLY
.196dc6		fa		plx		                    PLX
.196dc7		6b		rtl		                    RTL
.196dc8						ANSI_CSRUP
.196dc8		da		phx		                    PHX
.196dc9		5a		phy		                    PHY
.196dca		0b		phd		                    PHD
.196dcb		08		php		                    PHP
.196dcc		c2 30		rep #$30	                REP #$30        ; set A&X long
.196dce		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196dd2		b0 0d		bcs $196de1	                    BCS done                    ; If invalid, just return
.196dd4		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.196dd6		f0 09		beq $196de1	                    BEQ done                    ; If we are, just ignore the call
.196dd8		88		dey		                    DEY
.196dd9		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.196ddb		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.196ddd		22 09 6e 19	jsl $196e09	                    JSL ANSI_LOCATE
.196de1		28		plp		done                PLP
.196de2		2b		pld		                    PLD
.196de3		7a		ply		                    PLY
.196de4		fa		plx		                    PLX
.196de5		6b		rtl		                    RTL
.196de6						ANSI_CSRDOWN
.196de6		da		phx		                    PHX
.196de7		5a		phy		                    PHY
.196de8		0b		phd		                    PHD
.196de9		08		php		                    PHP
.196dea		c2 30		rep #$30	                REP #$30        ; set A&X long
.196dec		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.196df0		b0 12		bcs $196e04	                    BCS done                            ; If invalid, just return
.196df2		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.196df4		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.196df6		c8		iny		                    INY
.196df7		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.196df9		90 05		bcc $196e00	                    BCC noscroll                        ; No: go ahead and set the position
.196dfb		88		dey		                    DEY                                 ; Yes: go back to the last row
.196dfc		22 6d 6e 19	jsl $196e6d	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.196e00		22 09 6e 19	jsl $196e09	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.196e04		28		plp		done                PLP
.196e05		2b		pld		                    PLD
.196e06		7a		ply		                    PLY
.196e07		fa		plx		                    PLX
.196e08		6b		rtl		                    RTL
.196e09						ANSI_LOCATE
.196e09		da		phx		                    PHX
.196e0a		5a		phy		                    PHY
.196e0b		0b		phd		                    PHD
.196e0c		08		php		                    PHP
.196e0d		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196e11		b0 55		bcs $196e68	                    BCS done                    ; If invalid, just return
.196e13		c2 30		rep #$30	                REP #$30        ; set A&X long
.196e15						locate_scroll
.196e15		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.196e17		90 07		bcc $196e20	                    BCC locate_scrolldone
.196e19		22 6d 6e 19	jsl $196e6d	                    JSL ANSI_SCROLLUP
.196e1d		88		dey		                    DEY
.196e1e		80 f5		bra $196e15	                    BRA locate_scroll
.196e20						locate_scrolldone
.196e20		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.196e22		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.196e24		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.196e26						locate_row
.196e26		c0 00 00	cpy #$0000	                    CPY #$0
.196e29		f0 08		beq $196e33	                    BEQ locate_right
.196e2b		18		clc		locate_down         CLC
.196e2c		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.196e2e		88		dey		                    DEY
.196e2f		f0 02		beq $196e33	                    BEQ locate_right
.196e31		80 f8		bra $196e2b	                    BRA locate_down
.196e33		18		clc		locate_right        CLC
.196e34		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.196e36		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.196e38		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196e3a		e2 20		sep #$20	                SEP #$20        ; set A short
.196e3c		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.196e40		c9 04		cmp #$04	                    CMP #CHAN_EVID
.196e42		f0 0e		beq $196e52	                    beq locate_evid
.196e44		c2 20		rep #$20	                REP #$20        ; set A long
.196e46		98		tya		                    TYA
.196e47		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.196e4b		8a		txa		                    TXA
.196e4c		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.196e50		80 0c		bra $196e5e	                    BRA update_colorpos
.196e52						locate_evid
.196e52		c2 20		rep #$20	                REP #$20        ; set A long
.196e54		98		tya		                    TYA
.196e55		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.196e59		8a		txa		                    TXA
.196e5a		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.196e5e						update_colorpos
.196e5e		c2 20		rep #$20	                REP #$20        ; set A long
.196e60		18		clc		                    CLC
.196e61		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.196e63		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.196e66		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.196e68		28		plp		done                PLP
.196e69		2b		pld		                    PLD
.196e6a		7a		ply		                    PLY
.196e6b		fa		plx		                    PLX
.196e6c		6b		rtl		                    RTL
.196e6d						ANSI_SCROLLUP
.196e6d		da		phx		                    PHX
.196e6e		5a		phy		                    PHY
.196e6f		8b		phb		                    PHB
.196e70		0b		phd		                    PHD
.196e71		08		php		                    PHP
.196e72		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196e76		90 03		bcc $196e7b	                    BCC calc_size
.196e78		82 81 00	brl $196efc	                    BRL done                    ; If invalid, just return
.196e7b						calc_size
.196e7b		c2 30		rep #$30	                REP #$30        ; set A&X long
.196e7d		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.196e7f		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.196e83		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.196e85		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.196e89		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.196e8d		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196e8f		18		clc		                    CLC
.196e90		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.196e92		a8		tay		                    TAY
.196e93		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.196e95		aa		tax		                    TAX
.196e96		e2 20		sep #$20	                SEP #$20        ; set A short
.196e98		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.196e9c		c9 04		cmp #$04	                    CMP #CHAN_EVID
.196e9e		f0 09		beq $196ea9	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.196ea0						move_text_0
.196ea0		c2 20		rep #$20	                REP #$20        ; set A long
.196ea2		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196ea4		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.196ea7		80 07		bra $196eb0	                    BRA scroll_color
.196ea9						move_text_1
.196ea9		c2 20		rep #$20	                REP #$20        ; set A long
.196eab		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196ead		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.196eb0						scroll_color
.196eb0		c2 30		rep #$30	                REP #$30        ; set A&X long
.196eb2		18		clc		                    CLC
.196eb3		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.196eb5		a8		tay		                    TAY
.196eb6		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.196eb8		aa		tax		                    TAX
.196eb9		e2 20		sep #$20	                SEP #$20        ; set A short
.196ebb		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.196ebf		c9 04		cmp #$04	                    CMP #CHAN_EVID
.196ec1		f0 09		beq $196ecc	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.196ec3						move_color_0
.196ec3		c2 20		rep #$20	                REP #$20        ; set A long
.196ec5		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196ec7		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.196eca		80 07		bra $196ed3	                    BRA vicky_lastline
.196ecc						move_color_1
.196ecc		c2 20		rep #$20	                REP #$20        ; set A long
.196ece		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196ed0		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.196ed3						vicky_lastline
.196ed3		c2 20		rep #$20	                REP #$20        ; set A long
.196ed5		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.196ed7		48		pha		                    PHA
.196ed8		18		clc		                    CLC
.196ed9		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.196edb		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196edd		a0 00 00	ldy #$0000	start_clear         LDY #0
.196ee0		a9 20 00	lda #$0020	                    LDA #' '
.196ee3		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.196ee5		c8		iny		                    INY
.196ee6		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.196ee8		d0 f9		bne $196ee3	                    BNE clr_text
.196eea		68		pla		vicky_lastcolor     PLA
.196eeb		18		clc		                    CLC
.196eec		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.196eee		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.196ef0		a0 00 00	ldy #$0000	start_color         LDY #0
.196ef3		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.196ef5		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.196ef7		c8		iny		                    INY
.196ef8		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.196efa		d0 f9		bne $196ef5	                    BNE clr_color
.196efc		28		plp		done                PLP
.196efd		2b		pld		                    PLD
.196efe		ab		plb		                    PLB
.196eff		7a		ply		                    PLY
.196f00		fa		plx		                    PLX
.196f01		6b		rtl		                    RTL
.196f02						ANSI_CLRSCREEN
.196f02		da		phx		                    PHX
.196f03		5a		phy		                    PHY
.196f04		0b		phd		                    PHD
.196f05		08		php		                    PHP
.196f06		22 9a 68 19	jsl $19689a	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.196f0a		b0 1e		bcs $196f2a	                    BCS done                            ; If invalid, just return
.196f0c		e2 20		sep #$20	                SEP #$20        ; set A short
.196f0e		c2 10		rep #$10	                REP #$10        ; set X long
.196f10		a0 00 00	ldy #$0000	                    LDY #0
.196f13		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.196f15		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.196f17		c8		iny		                    INY
.196f18		c0 00 20	cpy #$2000	                    CPY #$2000
.196f1b		d0 f8		bne $196f15	                    BNE iclearloop0
.196f1d		a0 00 00	ldy #$0000	                    LDY	#0
.196f20		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.196f22		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.196f24		c8		iny		                    INY
.196f25		c0 00 20	cpy #$2000	                    CPY #$2000
.196f28		d0 f8		bne $196f22	                    BNE evid_clearloop1
.196f2a		28		plp		done                PLP
.196f2b		2b		pld		                    PLD
.196f2c		7a		ply		                    PLY
.196f2d		fa		plx		                    PLX
.196f2e		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keyboard has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keyboard controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keyboard controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keyboard controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keyboard controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.196f2f						IINITKEYBOARD
.196f2f		da		phx		                    PHX
.196f30		5a		phy		                    PHY
.196f31		0b		phd		                    PHD
.196f32		08		php		                    PHP
.196f33		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.196f36		2b		pld		                PLD
.196f37		e2 20		sep #$20	                SEP #$20        ; set A short
.196f39		c2 10		rep #$10	                REP #$10        ; set X long
.196f3b		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.196f3f		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.196f41		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.196f45		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.196f47		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.196f49		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.196f4b		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.196f4d		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.196f4f		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.196f51		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.196f53		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.196f55		c2 20		rep #$20	                REP #$20        ; set A long
.196f57		a9 00 77	lda #$7700	                    LDA #<>SC_US_UNMOD
.196f5a		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.196f5c		a9 80 77	lda #$7780	                    LDA #<>SC_US_SHFT
.196f5f		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.196f61		a9 00 78	lda #$7800	                    LDA #<>SC_US_CTRL
.196f64		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.196f66		a9 80 78	lda #$7880	                    LDA #<>SC_US_LOCK
.196f69		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.196f6b		a9 00 79	lda #$7900	                    LDA #<>SC_US_LOCK_SHFT
.196f6e		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.196f70		a9 80 79	lda #$7980	                    LDA #<>SC_US_CTRL_SHFT
.196f73		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.196f75		e2 20		sep #$20	                SEP #$20        ; set A short
.196f77		a9 19		lda #$19	                    LDA #`SC_US_UNMOD
.196f79		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.196f7b		a9 19		lda #$19	                    LDA #`SC_US_SHFT
.196f7d		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.196f7f		a9 19		lda #$19	                    LDA #`SC_US_CTRL
.196f81		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.196f83		a9 19		lda #$19	                    LDA #`SC_US_LOCK
.196f85		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.196f87		a9 19		lda #$19	                    LDA #`SC_US_LOCK_SHFT
.196f89		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.196f8b		a9 19		lda #$19	                    LDA #`SC_US_CTRL_SHFT
.196f8d		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.196f8f		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.196f91		22 15 70 19	jsl $197015	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.196f95		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.196f99		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.196f9d		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.196f9f		22 20 70 19	jsl $197020	                    JSL KBD_CTRL_SND_CMD
.196fa3		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.196fa5		f0 05		beq $196fac	                    BEQ test_AB
.196fa7		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.196fa9		82 59 00	brl $197005	                    BRL done
.196fac		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.196fae		22 20 70 19	jsl $197020	                    JSL KBD_CTRL_SND_CMD
.196fb2		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.196fb4		f0 05		beq $196fbb	                    BEQ write_command
.196fb6		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.196fb8		82 4a 00	brl $197005	                    BRL done
.196fbb		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.196fbd		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.196fc0		22 7a 70 19	jsl $19707a	                    JSL KBD_CTRL_SND_CMD_P
.196fc4		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.196fc6		22 15 70 19	jsl $197015	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.196fca		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.196fce		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.196fd0		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.196fd3		22 31 70 19	jsl $197031	                    JSL KBD_SND_CMD
.196fd7		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.196fda		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.196fdc		a2 00 00	ldx #$0000	                    LDX #0
.196fdf		22 31 70 19	jsl $197031	                    JSL KBD_SND_CMD
.196fe3		a9 36		lda #$36	set_led             LDA #"6"
.196fe5		22 18 10 00	jsl $001018	                    JSL PUTC
.196fe9		a9 00		lda #$00	                    LDA #0                      ; Set the state of the locks
.196feb		22 66 72 19	jsl $197266	                    JSL KBD_SETLOCKS
.196fef		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.196ff3		29 01		and #$01	                    AND #FNX1_INT00_KBD
.196ff5		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.196ff9		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.196ffd		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.196fff		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.197003		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.197005		28		plp		done                PLP
.197006		2b		pld		                    PLD
.197007		7a		ply		                    PLY
.197008		fa		plx		                    PLX
.197009		6b		rtl		                    RTL
.19700a						KBD_WAIT_OUT
.19700a		48		pha		                    PHA
.19700b		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.19700f		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.197011		f0 f8		beq $19700b	                    BEQ wait                ; If it isn't, keep waiting
.197013		68		pla		                    PLA
.197014		6b		rtl		                    RTL
.197015						KBD_WAIT_IN
.197015		48		pha		                    PHA
.197016		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.19701a		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.19701c		d0 f8		bne $197016	                    BNE wait                ; If not, wait for it to have something
.19701e		68		pla		                    PLA
.19701f		6b		rtl		                    RTL
.197020						KBD_CTRL_SND_CMD
.197020		22 15 70 19	jsl $197015	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.197024		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.197028		22 0a 70 19	jsl $19700a	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.19702c		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.197030		6b		rtl		                    RTL
.197031						KBD_SND_CMD
.197031		22 15 70 19	jsl $197015	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.197035		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197039		c2 10		rep #$10	                REP #$10        ; set X long
.19703b		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.19703e		f0 0b		beq $19704b	                    BEQ get_response        ; If 0, check for a response
.197040		ca		dex		                    DEX                     ; Count down
.197041		ea		nop		                    NOP                     ; And do a delay
.197042		ea		nop		                    NOP
.197043		ea		nop		                    NOP
.197044		ea		nop		                    NOP
.197045		ea		nop		                    NOP
.197046		ea		nop		                    NOP
.197047		ea		nop		                    NOP
.197048		ea		nop		                    NOP
.197049		80 f0		bra $19703b	                    BRA delay
.19704b		22 0a 70 19	jsl $19700a	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.19704f		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.197053		6b		rtl		                    RTL
.197054						KBD_SND_CMD_P
.197054		22 15 70 19	jsl $197015	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.197058		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.19705c		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.19705d		c2 10		rep #$10	                REP #$10        ; set X long
.19705f		a2 e8 03	ldx #$03e8	                    LDX #1000
.197062		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.197065		f0 0a		beq $197071	                    BEQ send_data           ; If 0, check for a response
.197067		ca		dex		                    DEX                     ; Count down
.197068		ea		nop		                    NOP                     ; And do a delay
.197069		ea		nop		                    NOP
.19706a		ea		nop		                    NOP
.19706b		ea		nop		                    NOP
.19706c		ea		nop		                    NOP
.19706d		ea		nop		                    NOP
.19706e		ea		nop		                    NOP
.19706f		80 f1		bra $197062	                    BRA delay
.197071		22 15 70 19	jsl $197015	send_data           JSL KBD_WAIT_IN
.197075		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197079						get_response
.197079		6b		rtl		                    RTL
.19707a						KBD_CTRL_SND_CMD_P
.19707a		22 15 70 19	jsl $197015	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.19707e		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.197082		8a		txa		                    TXA
.197083		22 15 70 19	jsl $197015	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.197087		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.19708b		6b		rtl		                    RTL
.19708c						KBD_PROCESS_BYTE
.19708c		8b		phb		                    PHB
.19708d		0b		phd		                    PHD
.19708e		08		php		                    PHP
.19708f		f4 19 19	pea #$1919	                PEA #((`KBD_STATE_MACH) * 256) + (`KBD_STATE_MACH)
.197092		ab		plb		                PLB
.197093		ab		plb		                PLB
.197094		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.197097		2b		pld		                PLD
.197098		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19709a		a9 00		lda #$00	                    LDA #0
.19709c		8f e0 00 00	sta $0000e0	                    STA @l MOUSE_IDX                    ; A bit of a hack to try to stabilize the mouse
.1970a0		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.1970a4		d0 03		bne $1970a9	                    BNE save_scancode
.1970a6		82 67 00	brl $197110	                    BRL done                            ; If it's 0, just ignore it
.1970a9						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.1970a9		48		pha		save_scancode       PHA
.1970aa		48		pha		                    PHA
.1970ab		29 80		and #$80	                    AND #$80
.1970ad		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.1970af		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.1970b1		bf 00 76 19	lda $197600,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.1970b5		c9 ff		cmp #$ff	                    CMP #$FF
.1970b7		d0 03		bne $1970bc	                    BNE compare_state
.1970b9		82 54 00	brl $197110	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.1970bc		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.1970be		d0 0e		bne $1970ce	                    BNE next_transition                 ; If they don't match, go to the next transition
.1970c0		bf 01 76 19	lda $197601,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.1970c4		f0 0e		beq $1970d4	                    BEQ apply                           ; Is it 0? Yes: the default applies
.1970c6		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.1970c8		df 01 76 19	cmp $197601,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.1970cc		f0 06		beq $1970d4	                    BEQ apply                           ; If equal: this matches, apply the transition
.1970ce		e8		inx		next_transition     INX                                 ; Move to the next transition
.1970cf		e8		inx		                    INX
.1970d0		e8		inx		                    INX
.1970d1		e8		inx		                    INX
.1970d2		80 dd		bra $1970b1	                    BRA chk_transition                  ; Check to see if the next transition applies
.1970d4		bf 02 76 19	lda $197602,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.1970d8		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.1970da		bf 03 76 19	lda $197603,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.1970de		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.1970e0		f0 2e		beq $197110	                    BEQ done                            ; Yes: we're done for now
.1970e2		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.1970e4		f0 06		beq $1970ec	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.1970e6		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.1970e8		f0 0f		beq $1970f9	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.1970ea		80 18		bra $197104	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.1970ec		a3 02		lda $02,s	emit_base           LDA l_code
.1970ee		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.1970f0		aa		tax		                    TAX
.1970f1		bf 00 75 19	lda $197500,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.1970f5		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.1970f7		80 0b		bra $197104	                    BRA emit_A                          ; Emit the translation
.1970f9		a3 02		lda $02,s	emit_e0             LDA l_code
.1970fb		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.1970fd		aa		tax		                    TAX
.1970fe		bf 80 75 19	lda $197580,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.197102		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.197104		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.197106		f0 08		beq $197110	                    BEQ done                            ; If so, skip enqueuing it
.197108		22 18 71 19	jsl $197118	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.19710c		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.19710e		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.197110						done
.197110		e2 20		sep #$20	                SEP #$20        ; set A short
.197112		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.197113		68		pla		                    PLA
.197114		28		plp		                    PLP
.197115		2b		pld		                    PLD
.197116		ab		plb		                    PLB
.197117		6b		rtl		                    RTL
.197118						KBD_SC_ENQUEUE
.197118		0b		phd		                    PHD
.197119		08		php		                    PHP
.19711a		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.19711b		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.19711e		2b		pld		                PLD
.19711f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197121		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.197123		f0 2f		beq $197154	                    BEQ done                        ; Yes: just ignore
.197125		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.197127		d0 10		bne $197139	                    BNE chk_locks                   ; No: check the various lock keys
.197129		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.19712b		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.19712d		f0 08		beq $197137	                    BEQ enqueue_break                   ; No: enqueue it as normal
.19712f		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.197131		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.197133		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.197135		80 1d		bra $197154	                    BRA done                            ; And we're done
.197137		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.197139		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.19713b		f0 1a		beq $197157	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.19713d		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.19713f		f0 20		beq $197161	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.197141		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.197143		f0 22		beq $197167	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.197145		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.197147		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.197149		f0 09		beq $197154	                    BEQ done                        ; Yes: we're full... ignore the scancode
.19714b		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.19714d		e8		inx		                    INX                             ; Advance to the next location
.19714e		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.197150		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.197152		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.197154		28		plp		done                PLP
.197155		2b		pld		                    PLD
.197156		6b		rtl		                    RTL
.197157		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.197159		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.19715b		22 66 72 19	jsl $197266	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.19715f		80 f3		bra $197154	                    BRA done
.197161		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.197163		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.197165		80 f4		bra $19715b	                    BRA save_locks
.197167		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.197169		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.19716b		80 ee		bra $19715b	                    BRA save_locks
.19716d						KBD_CHAR_ENQUEUE
.19716d		0b		phd		                    PHD
.19716e		08		php		                    PHP
.19716f		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.197170		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.197173		2b		pld		                PLD
.197174		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197176		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.197178		f0 0f		beq $197189	                    BEQ done                        ; Yes: just ignore
.19717a		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.19717c		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.19717e		f0 09		beq $197189	                    BEQ done                        ; Yes: we're full... ignore the scancode
.197180		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.197182		e8		inx		                    INX                             ; Advance to the next location
.197183		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.197185		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.197187		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.197189		28		plp		done                PLP
.19718a		2b		pld		                    PLD
.19718b		6b		rtl		                    RTL
.19718c						KBD_CHAR_DEQUEUE
.19718c		da		phx		                    PHX
.19718d		0b		phd		                    PHD
.19718e		08		php		                    PHP
.19718f		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.197192		2b		pld		                PLD
.197193		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.197194		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197196		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.197198		f0 21		beq $1971bb	                    BEQ return_empty                    ; If it's 0, we have no data
.19719a		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.19719c		48		pha		                    PHA                                 ; Save it
.19719d		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.19719f		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.1971a1		d0 08		bne $1971ab	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.1971a3		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.1971a5		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.1971a7		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.1971a9		80 0d		bra $1971b8	                    BRA return_head                     ; And return the character we found
.1971ab		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.1971ad		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.1971af		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.1971b1		e8		inx		                    INX                                 ; And move to the next byte
.1971b2		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.1971b4		d0 f7		bne $1971ad	                    BNE loop                            ; No: keep copying bytes
.1971b6		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.1971b8		68		pla		return_head         PLA                                 ; Get the character back
.1971b9		80 02		bra $1971bd	                    BRA done                            ; And return it
.1971bb		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.1971bd		28		plp		done                PLP
.1971be		2b		pld		                    PLD
.1971bf		fa		plx		                    PLX
.1971c0		6b		rtl		                    RTL
.1971c1						KBD_GET_SCANCODE
.1971c1		da		phx		                    PHX
.1971c2		0b		phd		                    PHD
.1971c3		08		php		                    PHP
.1971c4		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.1971c7		2b		pld		                PLD
.1971c8		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.1971c9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1971cb		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.1971cd		f0 21		beq $1971f0	                    BEQ return_empty                ; If it's 0, we have no data
.1971cf		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.1971d1		48		pha		                    PHA                             ; Save it
.1971d2		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.1971d4		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.1971d6		d0 08		bne $1971e0	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.1971d8		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.1971da		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.1971dc		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.1971de		80 0d		bra $1971ed	                    BRA return_head                 ; And return the scan code we found
.1971e0		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.1971e2		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.1971e4		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; Move it down
.1971e6		e8		inx		                    INX                             ; And move to the next byte
.1971e7		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.1971e9		d0 f7		bne $1971e2	                    BNE loop                        ; No: keep copying bytes
.1971eb		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.1971ed		68		pla		return_head         PLA                             ; Get the scan code back
.1971ee		80 02		bra $1971f2	                    BRA done                        ; And return it
.1971f0		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.1971f2		28		plp		done                PLP
.1971f3		2b		pld		                    PLD
.1971f4		fa		plx		                    PLX
.1971f5		6b		rtl		                    RTL
.1971f6						KBD_GETMODS
.1971f6		0b		phd		                PHD
.1971f7		08		php		                PHP
.1971f8		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.1971fb		2b		pld		                PLD
.1971fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1971fe		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.197200		28		plp		                PLP
.197201		2b		pld		                PLD
.197202		6b		rtl		                RTL
.197203						KBD_GET_STAT
.197203		0b		phd		                PHD
.197204		08		php		                PHP
.197205		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.197208		2b		pld		                PLD
.197209		e2 20		sep #$20	                SEP #$20        ; set A short
.19720b		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.19720d		28		plp		                PLP
.19720e		2b		pld		                PLD
.19720f		6b		rtl		                RTL
.197210						KBD_TEST_BREAK
.197210		0b		phd		                PHD
.197211		08		php		                PHP
.197212		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.197215		2b		pld		                PLD
.197216		e2 20		sep #$20	                SEP #$20        ; set A short
.197218		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.19721a		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.19721c		d0 04		bne $197222	                BNE ret_true                    ; If it was set, return TRUE
.19721e		28		plp		ret_false       PLP                             ; Otherwise, return false
.19721f		2b		pld		                PLD
.197220		18		clc		                CLC
.197221		6b		rtl		                RTL
.197222		28		plp		ret_true        PLP
.197223		2b		pld		                PLD
.197224		38		sec		                SEC
.197225		6b		rtl		                RTL
.197226						KBD_GETMODS_ANSI
.197226		0b		phd		                    PHD
.197227		08		php		                    PHP
.197228		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.19722b		2b		pld		                PLD
.19722c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19722e		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.197230		48		pha		                    PHA
>0001						l_result            .byte ?
.197231		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.197233		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.197235		f0 06		beq $19723d	                    BEQ check_alt
.197237		a3 01		lda $01,s	                    LDA l_result
.197239		09 02		ora #$02	                    ORA #%00000010
.19723b		83 01		sta $01,s	                    STA l_result
.19723d		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.19723f		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.197241		f0 06		beq $197249	                    BEQ check_ctrl
.197243		a3 01		lda $01,s	                    LDA l_result
.197245		09 04		ora #$04	                    ORA #%00000100
.197247		83 01		sta $01,s	                    STA l_result
.197249		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.19724b		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.19724d		f0 06		beq $197255	                    BEQ return_result
.19724f		a3 01		lda $01,s	                    LDA l_result
.197251		09 08		ora #$08	                    ORA #%00001000
.197253		83 01		sta $01,s	                    STA l_result
.197255		68		pla		return_result       PLA
.197256		28		plp		                    PLP
.197257		2b		pld		                    PLD
.197258		6b		rtl		                    RTL
.197259						KBD_GETLOCKS
.197259		0b		phd		                PHD
.19725a		08		php		                PHP
.19725b		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.19725e		2b		pld		                PLD
.19725f		e2 20		sep #$20	                SEP #$20        ; set A short
.197261		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.197263		28		plp		                PLP
.197264		2b		pld		                PLD
.197265		6b		rtl		                RTL
.197266						KBD_SETLOCKS
.197266		0b		phd		                PHD
.197267		08		php		                PHP
.197268		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.19726b		2b		pld		                PLD
.19726c		e2 20		sep #$20	                SEP #$20        ; set A short
.19726e		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.197270		28		plp		                PLP
.197271		2b		pld		                PLD
.197272		6b		rtl		                RTL
.197273						KBD_GET_CONTROL
.197273		0b		phd		                PHD
.197274		08		php		                PHP
.197275		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.197278		2b		pld		                PLD
.197279		e2 20		sep #$20	                SEP #$20        ; set A short
.19727b		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.19727d		28		plp		                PLP
.19727e		2b		pld		                PLD
.19727f		6b		rtl		                RTL
.197280						KBD_SET_CONTROL
.197280		0b		phd		                PHD
.197281		08		php		                PHP
.197282		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.197285		2b		pld		                PLD
.197286		e2 20		sep #$20	                SEP #$20        ; set A short
.197288		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.19728a		28		plp		                PLP
.19728b		2b		pld		                PLD
.19728c		6b		rtl		                RTL
.19728d						KBD_GETCW
.19728d		22 99 72 19	jsl $197299	                JSL KBD_GETC
.197291		c9 00		cmp #$00	                CMP #0
.197293		f0 01		beq $197296	                BEQ wait
.197295		6b		rtl		                RTL
.197296		cb		wai		wait            WAI
.197297		80 f4		bra $19728d	                BRA KBD_GETCW
.197299						KBD_GETC
.197299		0b		phd		                PHD
.19729a		08		php		                PHP
.19729b		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.19729e		2b		pld		                PLD
.19729f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1972a1		22 8c 71 19	jsl $19718c	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.1972a5		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.1972a7		f0 03		beq $1972ac	                BEQ get_scancode            ; No: try to get a scan code
.1972a9		82 cb 00	brl $197377	                BRL done                    ; Yes: return the character we had queued
.1972ac		22 c1 71 19	jsl $1971c1	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.1972b0		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.1972b2		d0 04		bne $1972b8	                BNE chk_make_break
.1972b4		28		plp		                PLP                         ; Yes: return 0... we got nothin
.1972b5		38		sec		                SEC
.1972b6		2b		pld		                PLD
.1972b7		6b		rtl		                RTL
.1972b8		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.1972ba		d0 08		bne $1972c4	                BNE handle_break            ; Yes: process the break
.1972bc		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.1972be		d0 0c		bne $1972cc	                BNE not_make_ls
.1972c0		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.1972c2		80 4e		bra $197312	                BRA set_modifier
.1972c4		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.1972c6		d0 0c		bne $1972d4	                BNE not_break_ls
.1972c8		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.1972ca		80 50		bra $19731c	                BRA clr_modifier
.1972cc		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.1972ce		d0 0c		bne $1972dc	                BNE not_make_lc
.1972d0		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.1972d2		80 3e		bra $197312	                BRA set_modifier
.1972d4		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.1972d6		d0 0c		bne $1972e4	                BNE not_break_lc
.1972d8		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.1972da		80 40		bra $19731c	                BRA clr_modifier
.1972dc		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.1972de		d0 0c		bne $1972ec	                BNE not_make_la
.1972e0		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.1972e2		80 2e		bra $197312	                BRA set_modifier
.1972e4		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.1972e6		d0 0c		bne $1972f4	                BNE not_break_la
.1972e8		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.1972ea		80 30		bra $19731c	                BRA clr_modifier
.1972ec		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.1972ee		d0 0c		bne $1972fc	                BNE not_make_rs
.1972f0		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.1972f2		80 1e		bra $197312	                BRA set_modifier
.1972f4		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.1972f6		d0 0c		bne $197304	                BNE not_break_rs
.1972f8		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.1972fa		80 20		bra $19731c	                BRA clr_modifier
.1972fc		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.1972fe		d0 0c		bne $19730c	                BNE not_make_rc
.197300		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.197302		80 0e		bra $197312	                BRA set_modifier
.197304		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.197306		d0 0e		bne $197316	                BNE not_break_rc
.197308		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.19730a		80 10		bra $19731c	                BRA clr_modifier
.19730c		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.19730e		d0 12		bne $197322	                BNE not_make_ra
.197310		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197312		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.197314		80 08		bra $19731e	                BRA return_null
.197316		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.197318		d0 04		bne $19731e	                BNE return_null                 ; No: we don't use any other break scan codes
.19731a		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.19731c		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.19731e		a9 00		lda #$00	return_null     LDA #0
.197320		80 55		bra $197377	                BRA done
.197322		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.197323		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.197325		90 0e		bcc $197335	                BLT below_38
.197327		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.197329		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.19732b		f0 2a		beq $197357	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.19732d		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.19732f		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.197331		d0 24		bne $197357	                BNE fetch_unmod                         ; If so: translate the keys as modified
.197333		80 30		bra $197365	                BRA fetch_caps                          ; No: translate the key using the lock table
.197335		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.197337		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.197339		f0 0c		beq $197347	                BEQ chk_capslock                        ; No: check for capslock
.19733b		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.19733d		f0 04		beq $197343	                BEQ fetch_control                       ; No: translate just based off of control
.19733f		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.197341		80 26		bra $197369	                BRA chk_ansi
.197343		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.197345		80 22		bra $197369	                BRA chk_ansi
.197347		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.197349		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.19734b		d0 0e		bne $19735b	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.19734d		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.19734f		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197351		f0 04		beq $197357	                BEQ fetch_unmod                         ; No: translate just based off of control
.197353		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.197355		80 12		bra $197369	                BRA chk_ansi
.197357		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.197359		80 0e		bra $197369	                BRA chk_ansi
.19735b		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.19735d		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.19735f		f0 04		beq $197365	                BEQ fetch_caps                          ; No: translate just based off of control
.197361		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.197363		80 04		bra $197369	                BRA chk_ansi
.197365		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.197367		80 00		bra $197369	                BRA chk_ansi
.197369		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.19736b		90 0a		bcc $197377	                BLT done                                ; If not, just return the character
.19736d		c9 96		cmp #$96	                CMP #$96
.19736f		b0 06		bcs $197377	                BGE done
.197371		22 b3 73 19	jsl $1973b3	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.197375		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.197377		28		plp		done            PLP
.197378		2b		pld		                PLD
.197379		18		clc		                CLC
.19737a		6b		rtl		                RTL
.19737b						KBD_ENQUEUE_BCD
.19737b		08		php		                PHP
.19737c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19737e		48		pha		                PHA                     ; Save the value
.19737f		4a		lsr a		                LSR A                   ; Get the 10s digit
.197380		4a		lsr a		                LSR A
.197381		4a		lsr a		                LSR A
.197382		4a		lsr a		                LSR A
.197383		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.197385		f0 0b		beq $197392	                BEQ enqueue_1
.197387		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.197389		b0 13		bcs $19739e	                BGE done_A
.19738b		18		clc		                CLC                     ; Enqueue the tens digit
.19738c		69 30		adc #$30	                ADC #'0'
.19738e		22 6d 71 19	jsl $19716d	                JSL KBD_CHAR_ENQUEUE
.197392		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.197393		29 0f		and #$0f	                AND #$0F
.197395		18		clc		                CLC
.197396		69 30		adc #$30	                ADC #'0'
.197398		22 6d 71 19	jsl $19716d	                JSL KBD_CHAR_ENQUEUE
.19739c		28		plp		done            PLP
.19739d		6b		rtl		                RTL
.19739e		68		pla		done_A          PLA
.19739f		80 fb		bra $19739c	                BRA done
.1973a1						KBD_BIN_TO_BCD
.1973a1		da		phx		                PHX
.1973a2		08		php		                PHP
.1973a3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1973a5		aa		tax		                TAX
.1973a6		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.1973a8		f8		sed		                SED                     ; Switch to Decimal arithmetic
.1973a9		18		clc		loop            CLC
.1973aa		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.1973ac		ca		dex		                DEX                     ; Decrement input value in X
.1973ad		10 fa		bpl $1973a9	                BPL loop                ; loop until input value < 0
.1973af		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.1973b0		28		plp		                PLP
.1973b1		fa		plx		                PLX
.1973b2		6b		rtl		                RTL
.1973b3						KBD_ENQ_ANSI
.1973b3		08		php		                PHP
.1973b4		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1973b6		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.1973b8		b0 03		bcs $1973bd	                BGE chk_high_end
.1973ba		82 4a 00	brl $197407	                BRL done                        ; Out of range, just ignore it
.1973bd		c9 96		cmp #$96	chk_high_end    CMP #$96
.1973bf		90 03		bcc $1973c4	                BLT save_value
.1973c1		82 43 00	brl $197407	                BRL done                        ; Out of range, just ignore it
.1973c4		48		pha		save_value      PHA
.1973c5		a9 5b		lda #$5b	                LDA #'['
.1973c7		22 6d 71 19	jsl $19716d	                JSL KBD_CHAR_ENQUEUE
.1973cb		68		pla		                PLA
.1973cc		38		sec		                SEC
.1973cd		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.1973cf		aa		tax		                TAX                     ; And use it as an index to...
.1973d0		bf 09 74 19	lda $197409,x	                LDA @l ENCODE_CODE,X    ; Get the number
.1973d4		10 0b		bpl $1973e1	                BPL send_number         ; If MSB is not set, send the number as-is
.1973d6		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.1973d8		18		clc		                CLC
.1973d9		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.1973db		22 6d 71 19	jsl $19716d	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.1973df		80 26		bra $197407	                BRA done
.1973e1		22 a1 73 19	jsl $1973a1	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.1973e5		22 7b 73 19	jsl $19737b	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.1973e9		22 26 72 19	jsl $197226	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.1973ed		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.1973ef		f0 10		beq $197401	                BEQ close               ; No: close the sequence
.1973f1		48		pha		                PHA
.1973f2		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.1973f4		22 6d 71 19	jsl $19716d	                JSL KBD_CHAR_ENQUEUE
.1973f8		68		pla		                PLA
.1973f9		22 a1 73 19	jsl $1973a1	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.1973fd		22 7b 73 19	jsl $19737b	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.197401		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.197403		22 6d 71 19	jsl $19716d	                JSL KBD_CHAR_ENQUEUE
.197407		28		plp		done            PLP
.197408		6b		rtl		                RTL
>197409		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>19740f		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>197413		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>197418		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>19741d		17 18				                .byte 23, 24                ; F11 - F12
.19741f						KBD_SETTABLE
.19741f		48		pha		                PHA
.197420		8b		phb		                PHB
.197421		0b		phd		                PHD
.197422		08		php		                PHP
.197423		f4 00 0f	pea #$0f00	                PEA #<>KBD_VARS         ; set DP to page 0
.197426		2b		pld		                PLD
.197427		e2 20		sep #$20	                SEP #$20        ; set A short
.197429		8b		phb		                PHB                 ; Get the data bank into A
.19742a		68		pla		                PLA
.19742b		c2 20		rep #$20	                REP #$20        ; set A long
.19742d		29 ff 00	and #$00ff	                AND #$00FF
.197430		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.197432		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.197434		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.197436		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.197438		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.19743a		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.19743c		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.19743e		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.197440		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.197442		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.197444		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.197446		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.197448		28		plp		                PLP
.197449		2b		pld		                PLD
.19744a		ab		plb		                PLB
.19744b		68		pla		                PLA
.19744c		6b		rtl		                RTL
>19744d						.align 256
>197500		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>197508		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>197510		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>197518		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>197520		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>197528		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>197530		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>197538		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>197540		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>197548		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>197550		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>197558		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>197560		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197568		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197570		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197578		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>197580		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>197588		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>197590		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>197598		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>1975a0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>1975a8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>1975b0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>1975b8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>1975c0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>1975c8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>1975d0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>1975d8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>1975e0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>1975e8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>1975f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>1975f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.197600						KBD_STATE_MACH
>197600		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>197604		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>197608		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>19760c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>197610		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>197614		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>197618		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>19761c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>197620		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>197624		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>197628		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>19762c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>197630		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>197634		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>197638		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>19763c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>197640		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>197644		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>197648		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>19764c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>197650		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>197654		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>197658		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>19765c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>197660		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>197664						.align 256
>197700		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197708		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197710		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197718		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>197720		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>197728		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197730		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>197738		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197740		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197748		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197750		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197758		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197760		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197768		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197770		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197778		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197780		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197788		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197790		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197798		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>1977a0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>1977a8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>1977b0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>1977b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1977c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>1977c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>1977d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>1977d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1977e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1977e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1977f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1977f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197800		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>197808		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>197810		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197818		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197820		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197828		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197830		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197838		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197840		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197848		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197850		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197858		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197860		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197868		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197870		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197878		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197880		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197888		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197890		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197898		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>1978a0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>1978a8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>1978b0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>1978b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1978c0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>1978c8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>1978d0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>1978d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1978e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1978e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1978f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1978f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197900		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197908		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197910		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197918		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>197920		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>197928		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197930		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>197938		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>197940		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197948		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197950		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197958		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197960		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197968		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197970		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197978		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197980		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197988		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197990		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197998		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>1979a0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>1979a8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>1979b0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>1979b8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>1979c0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>1979c8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>1979d0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>1979d8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>1979e0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>1979e8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>1979f0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>1979f8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/mouse_driver.asm

.197a00						IINITMOUSE
.197a00		48		pha		                PHA
.197a01		da		phx		                PHX
.197a02		8b		phb		                PHB
.197a03		0b		phd		                PHD
.197a04		08		php		                PHP
.197a05		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.197a08		ab		plb		                PLB
.197a09		ab		plb		                PLB
.197a0a		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.197a0d		2b		pld		                PLD
.197a0e		78		sei		                SEI
.197a0f		e2 20		sep #$20	                SEP #$20        ; set A short
.197a11		c2 10		rep #$10	                REP #$10        ; set X long
.197a13		18		clc		                CLC
.197a14		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197a17		20 02 7b	jsr $197b02	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.197a1a		b0 0b		bcs $197a27	                BCS mouse_init_fail
.197a1c		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.197a1e		8f 07 18 af	sta $af1807	                STA @l KBD_CMD_BUF
.197a22		20 da 7a	jsr $197ada	                JSR Poll_Outbuf_Mouse_TimeOut
.197a25		90 2b		bcc $197a52	                BCC mouse_found
.197a27		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.197a29		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.197a2d		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.197a31		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.197a33		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197a37		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1         ; Read the Pending Register &
.197a3b		29 01		and #$01	                AND #FNX1_INT00_KBD
.197a3d		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1         ; Writing it back will clear the Active Bit
.197a41		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197a45		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197a47		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197a4b		28		plp		                PLP                             ; Return failure
.197a4c		2b		pld		                PLD
.197a4d		ab		plb		                PLB
.197a4e		fa		plx		                PLX
.197a4f		68		pla		                PLA
.197a50		38		sec		                SEC
.197a51		6b		rtl		                RTL
.197a52		af 03 18 af	lda $af1803	mouse_found     LDA @l KBD_OUT_BUF              ; Clear the Output buffer
.197a56		c9 00		cmp #$00	                CMP #$00
.197a58		d0 bd		bne $197a17	                BNE DO_CMD_A9_AGAIN
.197a5a		a9 f5		lda #$f5	                LDA #$F5                        ; Disable the mouse
.197a5c		20 ac 7a	jsr $197aac	                JSR MOUSE_WRITE
.197a5f		20 c1 7a	jsr $197ac1	                JSR MOUSE_READ
.197a62		b0 c3		bcs $197a27	                BCS mouse_init_fail
.197a64		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.197a66		20 ac 7a	jsr $197aac	                JSR MOUSE_WRITE
.197a69		20 c1 7a	jsr $197ac1	                JSR MOUSE_READ
.197a6c		b0 b9		bcs $197a27	                BCS mouse_init_fail
.197a6e		a9 e8		lda #$e8	                LDA #$E8
.197a70		20 ac 7a	jsr $197aac	                JSR MOUSE_WRITE
.197a73		20 c1 7a	jsr $197ac1	                JSR MOUSE_READ
.197a76		b0 af		bcs $197a27	                BCS mouse_init_fail
.197a78		a9 00		lda #$00	                LDA #$00
.197a7a		20 ac 7a	jsr $197aac	                JSR MOUSE_WRITE
.197a7d		20 c1 7a	jsr $197ac1	                JSR MOUSE_READ
.197a80		b0 a5		bcs $197a27	                BCS mouse_init_fail
.197a82		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.197a84		20 ac 7a	jsr $197aac	                JSR MOUSE_WRITE
.197a87		20 c1 7a	jsr $197ac1	                JSR MOUSE_READ
.197a8a		b0 9b		bcs $197a27	                BCS mouse_init_fail
.197a8c		a9 00		lda #$00	                LDA #$00
.197a8e		8d e0 00	sta $00e0	                STA @w MOUSE_IDX
.197a91		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197a95		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197a97		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197a9b		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.197a9f		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.197aa1		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197aa5		28		plp		mouse_init_ok   PLP
.197aa6		2b		pld		                PLD
.197aa7		ab		plb		                PLB
.197aa8		fa		plx		                PLX
.197aa9		68		pla		                PLA
.197aaa		18		clc		                CLC
.197aab		6b		rtl		                RTL
.197aac						MOUSE_WRITE
.197aac		e2 20		sep #$20	                SEP #$20        ; set A short
.197aae		48		pha		                PHA
.197aaf		20 f5 7a	jsr $197af5	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.197ab2		a9 d4		lda #$d4	                LDA #$D4
.197ab4		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.197ab8		20 f5 7a	jsr $197af5	                JSR Poll_Inbuf
.197abb		68		pla		                PLA
.197abc		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.197ac0		60		rts		                RTS
.197ac1						MOUSE_READ
.197ac1		e2 20		sep #$20	                SEP #$20        ; set A short
.197ac3		20 da 7a	jsr $197ada	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.197ac6		b0 04		bcs $197acc	                BCS done
.197ac8		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.197acc		60		rts		done            RTS
.197acd						Poll_Outbuf_Mouse
.197acd		e2 20		sep #$20	                SEP #$20        ; set A short
.197acf		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197ad3		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197ad5		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197ad7		d0 f6		bne $197acf	                BNE wait
.197ad9		60		rts		                RTS
.197ada						Poll_Outbuf_Mouse_TimeOut
.197ada		e2 20		sep #$20	                SEP #$20        ; set A short
.197adc		c2 10		rep #$10	                REP #$10        ; set X long
.197ade		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197ae1		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197ae5		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197ae7		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197ae9		f0 08		beq $197af3	                BEQ ret_success
.197aeb		ca		dex		                DEX
.197aec		e0 00 00	cpx #$0000	                CPX #$0000
.197aef		d0 f0		bne $197ae1	                BNE wait
.197af1		38		sec		                SEC                     ; Return timeout error
.197af2		60		rts		                RTS
.197af3		18		clc		ret_success     CLC                     ; Return success
.197af4		60		rts		                RTS
.197af5						Poll_Inbuf
.197af5		e2 20		sep #$20	                SEP #$20        ; set A short
.197af7		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT         ; Load Status Byte
.197afb		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.197afd		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.197aff		f0 f6		beq $197af7	                BEQ wait
.197b01		60		rts		                RTS
.197b02						Poll_Inbuf_Mouse_TimeOut
.197b02		e2 20		sep #$20	                SEP #$20        ; set A short
.197b04		c2 10		rep #$10	                REP #$10        ; set X long
.197b06		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197b09		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197b0d		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.197b0f		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.197b11		d0 08		bne $197b1b	                BNE ret_success
.197b13		ca		dex		                DEX
.197b14		e0 00 00	cpx #$0000	                CPX #$0000
.197b17		d0 f0		bne $197b09	                BNE wait
.197b19		38		sec		                SEC                     ; Return timeout error
.197b1a		60		rts		                RTS
.197b1b		18		clc		ret_success     CLC                     ; Return success
.197b1c		60		rts		                RTS
.197b1d						MOUSE_INTERRUPT
.197b1d		8b		phb		                PHB
.197b1e		0b		phd		                PHD
.197b1f		08		php		                PHP
.197b20						                setasx
.197b20		78		sei		                SEI
.197b21		f4 00 00	pea #$0000	                PEA #((0) * 256) + (0)
.197b24		ab		plb		                PLB
.197b25		ab		plb		                PLB
.197b26		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.197b29		2b		pld		                PLD
.197b2a		ae e0 00	ldx $00e0	                LDX @w MOUSE_IDX                ; Get the # of the mouse byte to write
.197b2d		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.197b31		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.197b35		e8		inx		next_byte       INX                             ; Move to the next byte
.197b36		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.197b39		d0 1b		bne $197b56	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.197b3b		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.197b3f		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.197b41		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.197b45		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.197b47		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.197b4b		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.197b4d		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.197b51		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.197b53		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.197b56		8e e0 00	stx $00e0	save_ptr        STX @w MOUSE_IDX                ; Save our next byte position (state)
.197b59		28		plp		                PLP
.197b5a		2b		pld		                PLD
.197b5b		ab		plb		                PLB
.197b5c		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/boot_sound.asm

.197b5d						BOOT_SOUND
.197b5d		48		pha		                PHA
.197b5e		da		phx		                PHX
.197b5f		08		php		                PHP
.197b60		e2 20		sep #$20	                SEP #$20        ; set A short
.197b62		a9 00		lda #$00	                LDA #0
.197b64		a2 00 00	ldx #$0000	                LDX #0
.197b67		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.197b6b		e8		inx		                INX                             ; Move to the next SID register
.197b6c		e0 18 00	cpx #$0018	                CPX #24
.197b6f		d0 f6		bne $197b67	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.197b71		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.197b73		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.197b77		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.197b7b		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.197b7f		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.197b81		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.197b85		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.197b89		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.197b8d		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.197b8f		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.197b93		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.197b95		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.197b99		a9 16		lda #$16	                LDA #22
.197b9b		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.197b9f		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.197ba1		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.197ba5		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.197ba8		22 7e 0f 19	jsl $190f7e	                JSL ILOOP_MS
.197bac		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.197bae		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.197bb2		a9 08		lda #$08	                LDA #8
.197bb4		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.197bb8		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.197bba		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.197bbe		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.197bc1		22 7e 0f 19	jsl $190f7e	                JSL ILOOP_MS
.197bc5		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.197bc7		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.197bcb		a9 21		lda #$21	                LDA #33
.197bcd		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.197bd1		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.197bd3		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.197bd7		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.197bda		22 7e 0f 19	jsl $190f7e	                JSL ILOOP_MS
.197bde		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.197be0		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.197be4		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.197be8		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.197bec		a9 0e		lda #$0e	                LDA #14
.197bee		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.197bf2		a2 64 00	ldx #$0064	                LDX #100
.197bf5		22 7e 0f 19	jsl $190f7e	                JSL ILOOP_MS
.197bf9		3a		dec a		                DEC A
.197bfa		d0 f2		bne $197bee	                BNE dampen
.197bfc		28		plp		                PLP
.197bfd		fa		plx		                PLX
.197bfe		68		pla		                PLA
.197bff		6b		rtl		                RTL
.197c00						BOOT_SOUND_OFF
.197c00		48		pha		                PHA
.197c01		da		phx		                PHX
.197c02		08		php		                PHP
.197c03		a2 00 00	ldx #$0000	                LDX #0
.197c06		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.197c0a		e8		inx		                INX                             ; Move to the next SID register
.197c0b		e0 18 00	cpx #$0018	                CPX #24
.197c0e		d0 f6		bne $197c06	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.197c10		28		plp		                PLP
.197c11		fa		plx		                PLX
.197c12		68		pla		                PLA
.197c13		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\networking/net.asm


;******  Processing file: src\networking/lib_deque.asm

.0000						deque_t
>0000		00 00				head    .word   0
>0002		00 00				tail    .word   0
.0004						end
.0000						link_t
>0000						next    .word   ?
.0002						size

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/lan9221.asm

>197c14						        .align 512
.197e00						eth_read:
.197e00		da		phx		        phx
.197e01		bb		tyx		        tyx
.197e02		08		php		        php
.197e03		78		sei		        sei
.197e04		bf 02 e0 ae	lda $aee002,x	        lda @l  LAN + 2,x
.197e08		a8		tay		        tay
.197e09		bf 00 e0 ae	lda $aee000,x	        lda @l  LAN + 0,x
.197e0d		28		plp		        plp
.197e0e		fa		plx		        plx
.197e0f		60		rts		        rts
.197e10						eth_write:
.197e10		da		phx		        phx
.197e11		48		pha		        pha                     ; MSB in y, LSB on stack.
.197e12		a3 07		lda $07,s	        lda     7,s
.197e14		aa		tax		        tax
.197e15		68		pla		        pla
.197e16		08		php		        php
.197e17		78		sei		        sei
.197e18		9f 00 e0 ae	sta $aee000,x	        sta @l  LAN + 0,x
.197e1c		98		tya		        tya
.197e1d		9f 02 e0 ae	sta $aee002,x	        sta @l  LAN + 2,x
.197e21		28		plp		        plp
.197e22		fa		plx		        plx
.197e23		a3 01		lda $01,s	        lda     1,s     ; load the return address
.197e25		83 03		sta $03,s	        sta     3,s     ; store it atop the register arg
.197e27		68		pla		        pla             ; drop the return address
.197e28		60		rts		        rts
.197e29						rx_status:
.197e29		08		php		        php
.197e2a		78		sei		        sei
.197e2b		af 40 e0 ae	lda $aee040	        lda @l  LAN + hardware.lan9221.RX_STATUS_FIFO + 0
.197e2f		a8		tay		        tay
.197e30		af 42 e0 ae	lda $aee042	        lda @l  LAN + hardware.lan9221.RX_STATUS_FIFO + 2
.197e34		28		plp		        plp
.197e35		60		rts		        rts
.197e36						copy_buffer
.197e36		da		phx		        phx
.197e37		20 5d 80	jsr $19805d	        jsr     kernel.net.pbuf_alloc_x
.197e3a		20 29 7e	jsr $197e29	        jsr     rx_status   ; Already local
.197e3d		29 ff 3f	and #$3fff	        and     #$3fff
.197e40		9f 04 00 1c	sta $1c0004,x	        sta @l  kernel.net.pbuf.length,x
.197e44		18		clc		        clc
.197e45		69 03 00	adc #$0003	        adc     #3
.197e48		4a		lsr a		        lsr     a
.197e49		4a		lsr a		        lsr     a
.197e4a		18		clc		        clc
.197e4b		a8		tay		        tay
.197e4c		da		phx		        phx
.197e4d		af 00 e0 ae	lda $aee000	_loop   lda     LAN + hardware.lan9221.RX_DATA_FIFO + 0
.197e51		9f 06 00 1c	sta $1c0006,x	        sta @l  kernel.net.pbuf.eth,x
.197e55		e8		inx		        inx
.197e56		e8		inx		        inx
.197e57		af 02 e0 ae	lda $aee002	        lda     LAN + hardware.lan9221.RX_DATA_FIFO + 2
.197e5b		9f 06 00 1c	sta $1c0006,x	        sta @l  kernel.net.pbuf.eth,x
.197e5f		e8		inx		        inx
.197e60		e8		inx		        inx
.197e61		88		dey		        dey
.197e62		d0 e9		bne $197e4d	        bne     _loop
.197e64		68		pla		        pla
.197e65		fa		plx		        plx
.197e66		60		rts		        rts
.197e67						send_buffer:
.197e67		bf 04 00 1c	lda $1c0004,x	        lda     kernel.net.pbuf.length,x
.197e6b		09 00 30	ora #$3000	        ora     #4096+8192  ; first and last segment.
.197e6e		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.197e72		a9 00 00	lda #$0000	        lda     #0
.197e75		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.197e79		bf 04 00 1c	lda $1c0004,x	        lda     kernel.net.pbuf.length,x
.197e7d		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.197e81		a9 00 00	lda #$0000	        lda     #0
.197e84		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.197e88		bf 04 00 1c	lda $1c0004,x	        lda     kernel.net.pbuf.length,x
.197e8c		18		clc		        clc
.197e8d		69 03 00	adc #$0003	        adc     #3
.197e90		4a		lsr a		        lsr     a
.197e91		4a		lsr a		        lsr     a
.197e92		a8		tay		        tay
.197e93		da		phx		        phx
.197e94		bf 06 00 1c	lda $1c0006,x	_loop   lda     kernel.net.pbuf.eth,x
.197e98		8f 20 e0 ae	sta $aee020	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 0
.197e9c		e8		inx		        inx
.197e9d		e8		inx		        inx
.197e9e		bf 06 00 1c	lda $1c0006,x	        lda     kernel.net.pbuf.eth,x
.197ea2		8f 22 e0 ae	sta $aee022	        sta     LAN + hardware.lan9221.TX_DATA_FIFO + 2
.197ea6		e8		inx		        inx
.197ea7		e8		inx		        inx
.197ea8		88		dey		        dey
.197ea9		d0 e9		bne $197e94	        bne     _loop
.197eab		fa		plx		        plx     ; Packet
.197eac		60		rts		        rts
.197ead						eth_open:
.197ead		20 36 7f	jsr $197f36	        jsr     eth_is_up
.197eb0		b0 49		bcs $197efb	        bcs     _out
.197eb2		20 27 7f	jsr $197f27	        jsr     eth_reset
.197eb5		a0 50 00	ldy #$0050	        ldy     #ETH_ID_REV
.197eb8		20 00 7e	jsr $197e00	        jsr     eth_read
.197ebb		c9 21 92	cmp #$9221	        cmp     #$9221
.197ebe		a0 64 00	ldy #$0064	        ldy     #ETH_BYTE_TEST
.197ec1		20 00 7e	jsr $197e00	        jsr     eth_read
.197ec4		a0 00 77	ldy #$7700	        ldy     #$7700  ; was 7000
.197ec7		a9 00 00	lda #$0000	        lda     #$0000
.197eca		f4 88 00	pea #$0088	        pea     #ETH_GPIO_CFG
.197ecd		20 10 7e	jsr $197e10	        jsr     eth_write
.197ed0		20 71 7f	jsr $197f71	        jsr     set_mac
.197ed3		a0 10 00	ldy #$0010	        ldy     #$0010  ; full-duplex (broadcast on by default)
.197ed6		a9 0c 00	lda #$000c	        lda     #$000c  ; rx+tx
.197ed9		f4 01 00	pea #$0001	        pea     #1  ; MAC CONTROL REGISTER
.197edc		20 db 7f	jsr $197fdb	        jsr     mac_write
.197edf		a0 08 00	ldy #$0008	        ldy     #$0008
.197ee2		a9 00 00	lda #$0000	        lda     #$0000
.197ee5		f4 5c 00	pea #$005c	        pea     #ETH_INT_EN
.197ee8		20 10 7e	jsr $197e10	        jsr     eth_write
.197eeb		20 1a 7f	jsr $197f1a	        jsr     eth_timer_reset
.197eee		a0 00 00	ldy #$0000	        ldy     #0
.197ef1		a9 06 00	lda #$0006	        lda     #6  ; tx enabled, allow status overrun.
.197ef4		f4 70 00	pea #$0070	        pea     #ETH_TX_CFG
.197ef7		20 10 7e	jsr $197e10	        jsr     eth_write
.197efa		18		clc		        clc
.197efb		60		rts		_out    rts
.197efc		38		sec		_err    sec
.197efd		4c fb 7e	jmp $197efb	        jmp     _out
.197f00						eth_tick:
.197f00		a0 58 00	ldy #$0058	        ldy     #ETH_INT_STS
.197f03		20 00 7e	jsr $197e00	        jsr     eth_read
.197f06		98		tya		        tya
.197f07		29 08 00	and #$0008	        and     #$0008
.197f0a		f0 0d		beq $197f19	        beq     _out
.197f0c		a8		tay		        tay
.197f0d		a9 00 00	lda #$0000	        lda     #0
.197f10		f4 58 00	pea #$0058	        pea     #ETH_INT_STS
.197f13		20 10 7e	jsr $197e10	        jsr     eth_write
.197f16		20 1a 7f	jsr $197f1a	        jsr     eth_timer_reset
.197f19		60		rts		_out    rts
.197f1a						eth_timer_reset
.197f1a		a0 00 20	ldy #$2000	        ldy     #$2000
.197f1d		a9 e8 03	lda #$03e8	        lda     #1000   ; 100ms
.197f20		f4 8c 00	pea #$008c	        pea     #ETH_GPT_CFG
.197f23		20 10 7e	jsr $197e10	        jsr     eth_write
.197f26		60		rts		        rts
.197f27						eth_reset:
.197f27		a0 00 00	ldy #$0000	        ldy     #$0000
.197f2a		a9 01 00	lda #$0001	        lda     #$0001
.197f2d		f4 74 00	pea #$0074	        pea     #ETH_HW_CFG
.197f30		20 10 7e	jsr $197e10	        jsr     eth_write
.197f33		4c 36 7f	jmp $197f36	        jmp     eth_is_up
.197f36						eth_is_up:
.197f36		a2 64 00	ldx #$0064	        ldx     #100    ; ms ish
.197f39		a0 84 00	ldy #$0084	_loop   ldy     #ETH_PMT_CTRL
.197f3c		20 00 7e	jsr $197e00	        jsr     eth_read
.197f3f		29 01 00	and #$0001	        and     #1
.197f42		f0 02		beq $197f46	        beq     _retry
.197f44		18		clc		        clc
.197f45		60		rts		_out    rts
.197f46		38		sec		_retry  sec
.197f47		ca		dex		        dex
.197f48		f0 fb		beq $197f45	        beq     _out
.197f4a		a9 10 27	lda #$2710	        lda     #10000
.197f4d		ea		nop		_delay  nop
.197f4e		ea		nop		        nop
.197f4f		ea		nop		        nop
.197f50		ea		nop		        nop
.197f51		3a		dec a		        dec     a
.197f52		d0 f9		bne $197f4d	        bne     _delay
.197f54		4c 39 7f	jmp $197f39	        jmp     _loop
.197f57						eth_packet_send
.197f57		20 67 7e	jsr $197e67	        jsr     send_buffer
.197f5a		4c 6e 80	jmp $19806e	        jmp     kernel.net.pbuf_free_x
.197f5d						eth_packet_recv
.197f5d		20 66 7f	jsr $197f66	        jsr     get_rx_count
.197f60		f0 03		beq $197f65	        beq     _done
.197f62		20 36 7e	jsr $197e36	        jsr     copy_buffer
.197f65		60		rts		_done   rts
.197f66						get_rx_count
.197f66		a0 7c 00	ldy #$007c	        ldy     #ETH_RX_FIFO_INF
.197f69		20 00 7e	jsr $197e00	        jsr     eth_read
.197f6c		98		tya		        tya
.197f6d		29 ff 00	and #$00ff	        and     #$ff
.197f70		60		rts		        rts
.197f71						set_mac:
.197f71		a0 00 00	ldy #$0000	        ldy     #0
.197f74		af 87 86 19	lda $198687	        lda     kernel.net.conf.eth_mac+4
.197f78		f4 02 00	pea #$0002	        pea     #ETH_MAC_ADDRH
.197f7b		20 db 7f	jsr $197fdb	        jsr     mac_write
.197f7e		af 85 86 19	lda $198685	        lda     kernel.net.conf.eth_mac+2
.197f82		a8		tay		        tay
.197f83		af 83 86 19	lda $198683	        lda     kernel.net.conf.eth_mac+0
.197f87		f4 03 00	pea #$0003	        pea     #ETH_MAC_ADDRL
.197f8a		20 db 7f	jsr $197fdb	        jsr     mac_write
.197f8d		60		rts		        rts
=31						ETH_PHY_SPECIAL = 31
.197f8e						get_phy_speed:
.197f8e		a0 1f 00	ldy #$001f	        ldy     #ETH_PHY_SPECIAL
.197f91		20 9b 7f	jsr $197f9b	        jsr     phy_read
.197f94		4a		lsr a		        lsr     a
.197f95		4a		lsr a		        lsr     a
.197f96		18		clc		        clc
.197f97		29 07 00	and #$0007	        and     #7
.197f9a		60		rts		        rts
.197f9b						phy_read:
.197f9b		20 ba 7f	jsr $197fba	        jsr     phy_wait
.197f9e		98		tya		        tya
.197f9f		a0 00 00	ldy #$0000	        ldy     #0              ; MSB
.197fa2		29 1f 00	and #$001f	        and     #31
.197fa5		eb		xba		        xba
.197fa6		4a		lsr a		        lsr     a
.197fa7		4a		lsr a		        lsr     a
.197fa8		09 01 08	ora #$0801	        ora     #2049           ; LSB: PHY #1 + MIIBZY
.197fab		f4 06 00	pea #$0006	        pea     #ETH_MAC_MII_ACC
.197fae		20 db 7f	jsr $197fdb	        jsr     mac_write       ; Request the read.
.197fb1		20 ba 7f	jsr $197fba	        jsr     phy_wait        ; Data should now be in MAC's MII_DATA.
.197fb4		a0 07 00	ldy #$0007	        ldy     #ETH_MAC_MII_DATA
.197fb7		4c c8 7f	jmp $197fc8	        jmp     mac_read
.197fba						phy_wait:
.197fba		5a		phy		        phy
.197fbb		a0 06 00	ldy #$0006	_loop   ldy     #ETH_MAC_MII_ACC
.197fbe		20 c8 7f	jsr $197fc8	        jsr     mac_read
.197fc1		29 01 00	and #$0001	        and     #1
.197fc4		d0 f5		bne $197fbb	        bne     _loop
.197fc6		7a		ply		        ply
.197fc7		60		rts		        rts
.197fc8						mac_read:
.197fc8		98		tya		        tya             ; Register.
.197fc9		a0 00 c0	ldy #$c000	        ldy     #$c000  ; Read operation.
.197fcc		f4 a4 00	pea #$00a4	        pea     #ETH_MAC_CSR_CMD
.197fcf		20 10 7e	jsr $197e10	        jsr     eth_write
.197fd2		20 f4 7f	jsr $197ff4	        jsr     mac_wait
.197fd5		a0 a8 00	ldy #$00a8	        ldy     #ETH_MAC_CSR_DATA
.197fd8		4c 00 7e	jmp $197e00	        jmp     eth_read
.197fdb						mac_write:
.197fdb		f4 a8 00	pea #$00a8	        pea     #ETH_MAC_CSR_DATA
.197fde		20 10 7e	jsr $197e10	        jsr     eth_write
.197fe1		a3 03		lda $03,s	        lda     3,s     ; Register to write
.197fe3		a0 00 80	ldy #$8000	        ldy     #$8000  ; Write operation
.197fe6		f4 a4 00	pea #$00a4	        pea     #ETH_MAC_CSR_CMD
.197fe9		20 10 7e	jsr $197e10	        jsr     eth_write
.197fec		a3 01		lda $01,s	        lda     1,s
.197fee		83 03		sta $03,s	        sta     3,s
.197ff0		68		pla		        pla
.197ff1		4c f4 7f	jmp $197ff4	        jmp     mac_wait
.197ff4						mac_wait:
.197ff4		a0 a4 00	ldy #$00a4	_loop   ldy     #ETH_MAC_CSR_CMD
.197ff7		20 00 7e	jsr $197e00	        jsr     eth_read
.197ffa		c0 00 80	cpy #$8000	        cpy     #$8000
.197ffd		10 f5		bpl $197ff4	        bpl     _loop
.197fff		60		rts		        rts
=$00						RX_DATA_FIFO    = $00   ; Through $1f
=$20						TX_DATA_FIFO    = $20   ; Through $3f
=$40						RX_STATUS_FIFO  = $40
=$48						TX_STATIS_FIFO  = $48
=$50						ETH_ID_REV      = $50
=$54						ETH_IRQ_CFG     = $54
=$58						ETH_INT_STS     = $58
=$5c						ETH_INT_EN      = $5c
=$64						ETH_BYTE_TEST   = $64
=$68						ETH_FIFO_INT    = $68
=$6c						ETH_RX_CFG      = $6c
=$70						ETH_TX_CFG      = $70
=$74						ETH_HW_CFG      = $74
=$78						ETH_RX_DP_CTL   = $78
=$7c						ETH_RX_FIFO_INF = $7c
=$80						ETH_TX_FIFO_INF = $80
=$84						ETH_PMT_CTRL    = $84
=$88						ETH_GPIO_CFG    = $88
=$8c						ETH_GPT_CFG     = $8c
=$90						ETH_GPT_CNT     = $90
=$98						ETH_WORD_SWAP   = $98
=$9c						ETH_FREE_RUN    = $9c
=$a0						ETH_RX_DROP     = $a0
=$a4						ETH_MAC_CSR_CMD = $a4
=$a8						ETH_MAC_CSR_DATA= $a8
=$ac						ETH_AFC_CFG     = $ac
=$b0						ETH_E2P_CMD     = $b0
=$b4						ETH_E2P_DATA    = $b4
=$1						ETH_MAC_MAC_CR  = $1
=$2						ETH_MAC_ADDRH   = $2
=$3						ETH_MAC_ADDRL   = $3
=$4						ETH_MAC_HASHH   = $4
=$5						ETH_MAC_HASHL   = $5
=$6						ETH_MAC_MII_ACC = $6
=$7						ETH_MAC_MII_DATA= $7
=$8						ETH_MAC_FLOW    = $8
=$9						ETH_MAC_VLAN1   = $9
=$a						ETH_MAC_VLAN2   = $a
=$b						ETH_MAC_WUFF    = $b
=$c						ETH_MAC_WUCSR   = $c
=$d						ETH_MAC_COE_CR  = $d
=$e						ETH_MAC_MAX     = $e

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/user.asm


;******  Processing file: src\networking/../Libraries/networking.asm

.0000						ip_info
>0000						ip          .fill   4   ; Local ipv4 address in network order
>0004						mask        .fill   4   ; Local ipv4 netmask in network order
>0008						default     .fill   4   ; Default ipv4 route in network order
.000c						size
.0000						udp_info
>0000						local_port  .word   ?   ; local port #, little-endian
>0002						remote_ip   .fill   4   ; ipv4 address of remote machine, network order
>0006						remote_port .word   ?   ; remote port #, little endian
>0008						buffer      .dword  ?   ; 24-bit address of your data
>000c						buflen      .word   ?   ; length of the above buffer in bytes
>000e						copied      .word   ?   ; number of bytes copied in/out of the above buffer
.0010						size

;******  Return to file: src\networking/user.asm

.198000						init
.198000		20 12 80	jsr $198012	            jsr     call
.198003		6b		rtl		            rtl
>198004		97 86				            .word   <>net.init
.198006						udp_send
.198006		20 12 80	jsr $198012	            jsr     call
.198009		6b		rtl		            rtl
>19800a		62 87				            .word   <>net.udp_send
.19800c						udp_recv
.19800c		20 12 80	jsr $198012	            jsr     call
.19800f		6b		rtl		            rtl
>198010		9a 87				            .word   <>net.udp_recv
.198012						call
=195						        czvn = 1+2+64+128
.198012		c2 c3		rep #$c3	        rep     #czvn       ; Clear czvn
.198014		08		php		        php
.198015		c2 f7		rep #$f7	        rep     #255-8      ; Clear all but i
.198017		5a		phy		        phy
.198018		da		phx		        phx
.198019		0b		phd		        phd
.19801a		8b		phb		        phb
.19801b		48		pha		        pha                 ; [a:b:d:x:y:p:rts:rtl]
.19801c		a3 0b		lda $0b,s	        lda     11,s        ; return vector
.19801e		aa		tax		        tax
.19801f		a3 06		lda $06,s	        lda     6,s         ; X (new D)
.198021		5b		tcd		        tcd
>198022		fc 02 00			        .byte   $fc,2,0   ; jsr (2,x), but the assembler won't let me...
.198025		08		php		        php
.198026		e2 20		sep #$20	        sep     #$20
.198028		a3 01		lda $01,s	        lda     1,s
.19802a		29 c3		and #$c3	        and     #czvn
.19802c		03 0b		ora $0b,s	        ora     11,s
.19802e		83 0b		sta $0b,s	        sta     11,s
.198030		28		plp		        plp
.198031		68		pla		        pla
.198032		ab		plb		        plb
.198033		2b		pld		        pld
.198034		fa		plx		        plx
.198035		7a		ply		        ply
.198036		28		plp		        plp
.198037		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/packet.asm

.0000						udp_t
>0000						sport   .word   ?
>0002						dport   .word   ?
>0004						length  .word   ?
>0006						check   .word   ?
.0008						data
.0008						size
.0000						icmp_t
>0000						type    .byte   ?
>0001						code    .byte   ?
>0002						check   .fill   2
>0004						ident   .word   ?
>0006						seq     .fill   2
.0000						ip_t
>0000						ihl     .fill   1
>0001						tos     .byte   ?
>0002						len     .fill   2
>0004						id      .fill   2
>0006						flags   .fill   2
>0008						ttl     .byte   ?
>0009						proto   .byte   ?
>000a						check   .fill   2
>000c						src     .fill   4
>0010						dest    .fill   4
.0014						size
>0014						sport       .word   ?
>0016						dport       .word   ?
.0014						udp
>0014						sport   .word   ?
>0016						dport   .word   ?
>0018						length  .word   ?
>001a						check   .word   ?
.001c						data
.001c						size
.0014						icmp
>0014						type    .byte   ?
>0015						code    .byte   ?
>0016						check   .fill   2
>0018						ident   .word   ?
>001a						seq     .fill   2
.0000						arp_t
>0000						htype   .word   ?
>0002						ptype   .word   ?
>0004						hlen    .byte   ?
>0005						plen    .byte   ?
>0006						oper    .word   ?
>0008						sha     .fill   6
>000e						spa     .fill   4
>0012						tha     .fill   6
>0018						tpa     .fill   4
.001c						size
.0000						eth_t
>0000						d_mac   .fill   6
>0006						s_mac   .fill   6
>000c						type    .word   ?
.000e						size
.000e						arp
>000e						htype   .word   ?
>0010						ptype   .word   ?
>0012						hlen    .byte   ?
>0013						plen    .byte   ?
>0014						oper    .word   ?
>0016						sha     .fill   6
>001c						spa     .fill   4
>0020						tha     .fill   6
>0026						tpa     .fill   4
.002a						size
.000e						ipv4
>000e						ihl     .fill   1
>000f						tos     .byte   ?
>0010						len     .fill   2
>0012						id      .fill   2
>0014						flags   .fill   2
>0016						ttl     .byte   ?
>0017						proto   .byte   ?
>0018						check   .fill   2
>001a						src     .fill   4
>001e						dest    .fill   4
.0022						size
>0022						sport       .word   ?
>0024						dport       .word   ?
.0022						udp
>0022						sport   .word   ?
>0024						dport   .word   ?
>0026						length  .word   ?
>0028						check   .word   ?
.002a						data
.002a						size
.0022						icmp
>0022						type    .byte   ?
>0023						code    .byte   ?
>0024						check   .fill   2
>0026						ident   .word   ?
>0028						seq     .fill   2
.0000						pbuf_t
.0000						stack
.0000						deque
>0000		00 00				head    .word   0
>0002		00 00				tail    .word   0
.0004						end
>0004						length  .word   ?
.0006						eth
>0006						d_mac   .fill   6
>000c						s_mac   .fill   6
>0012						type    .word   ?
.0014						size
.0014						arp
>0014						htype   .word   ?
>0016						ptype   .word   ?
>0018						hlen    .byte   ?
>0019						plen    .byte   ?
>001a						oper    .word   ?
>001c						sha     .fill   6
>0022						spa     .fill   4
>0026						tha     .fill   6
>002c						tpa     .fill   4
.0030						size
.0014						ipv4
>0014						ihl     .fill   1
>0015						tos     .byte   ?
>0016						len     .fill   2
>0018						id      .fill   2
>001a						flags   .fill   2
>001c						ttl     .byte   ?
>001d						proto   .byte   ?
>001e						check   .fill   2
>0020						src     .fill   4
>0024						dest    .fill   4
.0028						size
>0028						sport       .word   ?
>002a						dport       .word   ?
.0028						udp
>0028						sport   .word   ?
>002a						dport   .word   ?
>002c						length  .word   ?
>002e						check   .word   ?
.0030						data
.0030						size
.0028						icmp
>0028						type    .byte   ?
>0029						code    .byte   ?
>002a						check   .fill   2
>002c						ident   .word   ?
>002e						seq     .fill   2
>0006						        .fill       14      ; ethernet header
.0014						ipv4
>0014						ihl     .fill   1
>0015						tos     .byte   ?
>0016						len     .fill   2
>0018						id      .fill   2
>001a						flags   .fill   2
>001c						ttl     .byte   ?
>001d						proto   .byte   ?
>001e						check   .fill   2
>0020						src     .fill   4
>0024						dest    .fill   4
.0028						size
>0028						sport       .word   ?
>002a						dport       .word   ?
.0028						udp
>0028						sport   .word   ?
>002a						dport   .word   ?
>002c						length  .word   ?
>002e						check   .word   ?
.0030						data
.0030						size
.0028						icmp
>0028						type    .byte   ?
>0029						code    .byte   ?
>002a						check   .fill   2
>002c						ident   .word   ?
>002e						seq     .fill   2
.1c0000						pbuf
.1c0000						stack
.1c0000						deque
>1c0000		00 00				head    .word   0
>1c0002		00 00				tail    .word   0
.1c0004						end
>1c0004						length  .word   ?
.1c0006						eth
>1c0006						d_mac   .fill   6
>1c000c						s_mac   .fill   6
>1c0012						type    .word   ?
.1c0014						size
.1c0014						arp
>1c0014						htype   .word   ?
>1c0016						ptype   .word   ?
>1c0018						hlen    .byte   ?
>1c0019						plen    .byte   ?
>1c001a						oper    .word   ?
>1c001c						sha     .fill   6
>1c0022						spa     .fill   4
>1c0026						tha     .fill   6
>1c002c						tpa     .fill   4
.1c0030						size
.1c0014						ipv4
>1c0014						ihl     .fill   1
>1c0015						tos     .byte   ?
>1c0016						len     .fill   2
>1c0018						id      .fill   2
>1c001a						flags   .fill   2
>1c001c						ttl     .byte   ?
>1c001d						proto   .byte   ?
>1c001e						check   .fill   2
>1c0020						src     .fill   4
>1c0024						dest    .fill   4
.1c0028						size
>1c0028						sport       .word   ?
>1c002a						dport       .word   ?
.1c0028						udp
>1c0028						sport   .word   ?
>1c002a						dport   .word   ?
>1c002c						length  .word   ?
>1c002e						check   .word   ?
.1c0030						data
.1c0030						size
.1c0028						icmp
>1c0028						type    .byte   ?
>1c0029						code    .byte   ?
>1c002a						check   .fill   2
>1c002c						ident   .word   ?
>1c002e						seq     .fill   2
>1c0006						        .fill       14      ; ethernet header
.1c0014						ipv4
>1c0014						ihl     .fill   1
>1c0015						tos     .byte   ?
>1c0016						len     .fill   2
>1c0018						id      .fill   2
>1c001a						flags   .fill   2
>1c001c						ttl     .byte   ?
>1c001d						proto   .byte   ?
>1c001e						check   .fill   2
>1c0020						src     .fill   4
>1c0024						dest    .fill   4
.1c0028						size
>1c0028						sport       .word   ?
>1c002a						dport       .word   ?
.1c0028						udp
>1c0028						sport   .word   ?
>1c002a						dport   .word   ?
>1c002c						length  .word   ?
>1c002e						check   .word   ?
.1c0030						data
.1c0030						size
.1c0028						icmp
>1c0028						type    .byte   ?
>1c0029						code    .byte   ?
>1c002a						check   .fill   2
>1c002c						ident   .word   ?
>1c002e						seq     .fill   2
>198038		00 00				pbufs   .word   0   ; Free-pbufs stack.
.19803a						pbuf_init
.19803a		20 4c 80	jsr $19804c	        jsr     pbank_init
.19803d		18		clc		        clc
.19803e		a9 00 08	lda #$0800	        lda     #2048       ; 1st 2k normally reserved for socket descriptors...
.198041		aa		tax		_loop   tax
.198042		20 6e 80	jsr $19806e	        jsr     pbuf_free_x
.198045		8a		txa		        txa
.198046		69 00 08	adc #$0800	        adc     #2048
.198049		d0 f6		bne $198041	        bne     _loop
.19804b		60		rts		_done   rts
.19804c						pbank_init
.19804c		a9 00 00	lda #$0000	        lda     #0
.19804f		8f 00 00 1c	sta $1c0000	        sta     @l PACKETS
.198053		aa		tax		        tax
.198054		a8		tay		        tay
.198055		c8		iny		        iny
.198056		3a		dec a		        dec     a
.198057		8b		phb		        phb
.198058		54 1c 1c	mvn $1c,$1c	        mvn     `PACKETS,`PACKETS
.19805b		ab		plb		        plb
.19805c		60		rts		        rts
.19805d						pbuf_alloc_x:
.19805d		08		php		        php
.19805e		78		sei		        sei
.19805f		ae 38 80	ldx $8038	        ldx     <>pbufs,b
.198062		f0 07		beq $19806b	        beq     _done
.198064		bf 00 00 1c	lda $1c0000,x	        lda     pbuf.stack,x
.198068		8d 38 80	sta $8038	        sta     <>pbufs,b
.19806b		28		plp		_done   plp
.19806c		8a		txa		        txa
.19806d		60		rts		        rts
.19806e						pbuf_free_x:
.19806e		08		php		        php
.19806f		78		sei		        sei
.198070		ad 38 80	lda $8038	        lda     <>pbufs,b
.198073		9f 00 00 1c	sta $1c0000,x	        sta     pbuf.stack,x
.198077		8e 38 80	stx $8038	        stx     <>pbufs,b
.19807a		28		plp		        plp
.19807b		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/arp.asm

.19807c						recv
.19807c		bf 14 00 1c	lda $1c0014,x	        lda     pbuf.eth.arp.htype,x
.198080		eb		xba		        xba
.198081		c9 01 00	cmp #$0001	        cmp     #$0001  ; Ethernet
.198084		d0 3a		bne $1980c0	        bne     _drop
.198086		bf 16 00 1c	lda $1c0016,x	        lda     pbuf.eth.arp.ptype,x
.19808a		eb		xba		        xba
.19808b		c9 00 08	cmp #$0800	        cmp     #$0800  ; IPv4
.19808e		d0 30		bne $1980c0	        bne     _drop
.198090		bf 18 00 1c	lda $1c0018,x	        lda     pbuf.eth.arp.hlen,x ; and plen
.198094		eb		xba		        xba
.198095		c9 04 06	cmp #$0604	        cmp     #$0604  ; 6 ether, 4 ip
.198098		d0 26		bne $1980c0	        bne     _drop
.19809a		bf 1a 00 1c	lda $1c001a,x	        lda     pbuf.eth.arp.oper,x
.19809e		eb		xba		        xba
.19809f		c9 02 00	cmp #$0002	        cmp     #$0002      ; reply
.1980a2		f0 19		beq $1980bd	        beq     _record
.1980a4		c9 01 00	cmp #$0001	        cmp     #$0001      ; request or broadcast
.1980a7		d0 17		bne $1980c0	        bne     _drop       ; Invalid arp packet
.1980a9		bf 2c 00 1c	lda $1c002c,x	        lda     kernel.net.pbuf.eth.arp.tpa+0,x
.1980ad		5f 22 00 1c	eor $1c0022,x	        eor     kernel.net.pbuf.eth.arp.spa+0,x
.1980b1		d0 10		bne $1980c3	        bne     _request    ; not a broadcast
.1980b3		bf 2e 00 1c	lda $1c002e,x	        lda     kernel.net.pbuf.eth.arp.tpa+2,x
.1980b7		5f 24 00 1c	eor $1c0024,x	        eor     kernel.net.pbuf.eth.arp.spa+2,x
.1980bb		d0 06		bne $1980c3	        bne     _request    ; not a broadcast
.1980bd						_record
.1980bd		20 66 82	jsr $198266	        jsr     cache_arp_reply
.1980c0		4c 6e 80	jmp $19806e	_drop   jmp     kernel.net.pbuf_free_x
.1980c3						_request
.1980c3		bf 2c 00 1c	lda $1c002c,x	        lda     kernel.net.pbuf.eth.arp.tpa+0,x
.1980c7		4f 85 86 19	eor $198685	        eor     kernel.net.conf.ip_addr+0
.1980cb		d0 f3		bne $1980c0	        bne     _drop
.1980cd		bf 2e 00 1c	lda $1c002e,x	        lda     kernel.net.pbuf.eth.arp.tpa+2,x
.1980d1		4f 87 86 19	eor $198687	        eor     kernel.net.conf.ip_addr+2
.1980d5		d0 e9		bne $1980c0	        bne     _drop
.1980d7		20 75 81	jsr $198175	        jsr     arp_reply
.1980da		4c 57 7f	jmp $197f57	        jmp     hardware.lan9221.eth_packet_send
.1980dd						arp_request
.1980dd		20 5d 80	jsr $19805d	        jsr     kernel.net.pbuf_alloc_x
.1980e0		d0 01		bne $1980e3	        bne     _good
.1980e2		60		rts		        rts
.1980e3		a9 ff ff	lda #$ffff	_good   lda     #$ffff
.1980e6		9f 06 00 1c	sta $1c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.1980ea		9f 08 00 1c	sta $1c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.1980ee		9f 0a 00 1c	sta $1c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.1980f2		a9 06 08	lda #$0806	        lda     #$0806  ; ARP packet
.1980f5		eb		xba		        xba
.1980f6		9f 12 00 1c	sta $1c0012,x	        sta     kernel.net.pbuf.eth.type,x
.1980fa		a9 01 00	lda #$0001	        lda     #1      ; ethernet request
.1980fd		eb		xba		        xba
.1980fe		9f 14 00 1c	sta $1c0014,x	        sta     kernel.net.pbuf.eth.arp.htype,x
.198102		a9 00 08	lda #$0800	        lda     #$0800  ; ethernet IPv4 type
.198105		eb		xba		        xba
.198106		9f 16 00 1c	sta $1c0016,x	        sta     kernel.net.pbuf.eth.arp.ptype,x
.19810a		a9 04 06	lda #$0604	        lda     #$0604      ; 6-byte hardware address (MAC)
.19810d		eb		xba		        xba                 ; 4-byte protocol address (IPv4)
.19810e		9f 18 00 1c	sta $1c0018,x	        sta     kernel.net.pbuf.eth.arp.hlen,x
.198112		a9 01 00	lda #$0001	        lda     #1      ; ARP request
.198115		eb		xba		        xba
.198116		9f 1a 00 1c	sta $1c001a,x	        sta     kernel.net.pbuf.eth.arp.oper,x
.19811a		a9 ff ff	lda #$ffff	        lda     #$ffff
.19811d		9f 06 00 1c	sta $1c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.198121		9f 08 00 1c	sta $1c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.198125		9f 0a 00 1c	sta $1c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.198129		af 83 86 19	lda $198683	        lda     kernel.net.conf.eth_mac+0
.19812d		9f 1c 00 1c	sta $1c001c,x	        sta     kernel.net.pbuf.eth.arp.sha+0,x
.198131		9f 0c 00 1c	sta $1c000c,x	        sta     kernel.net.pbuf.eth.s_mac+0,x
.198135		af 85 86 19	lda $198685	        lda     kernel.net.conf.eth_mac+2
.198139		9f 1e 00 1c	sta $1c001e,x	        sta     kernel.net.pbuf.eth.arp.sha+2,x
.19813d		9f 0e 00 1c	sta $1c000e,x	        sta     kernel.net.pbuf.eth.s_mac+2,x
.198141		af 87 86 19	lda $198687	        lda     kernel.net.conf.eth_mac+4
.198145		9f 20 00 1c	sta $1c0020,x	        sta     kernel.net.pbuf.eth.arp.sha+4,x
.198149		9f 10 00 1c	sta $1c0010,x	        sta     kernel.net.pbuf.eth.s_mac+4,x
.19814d		af 85 86 19	lda $198685	        lda     kernel.net.conf.ip_addr+0
.198151		9f 22 00 1c	sta $1c0022,x	        sta     kernel.net.pbuf.eth.arp.spa+0,x
.198155		af 87 86 19	lda $198687	        lda     kernel.net.conf.ip_addr+2
.198159		9f 24 00 1c	sta $1c0024,x	        sta     kernel.net.pbuf.eth.arp.spa+2,x
.19815d		b9 00 00	lda $0000,y	        lda     entry.ip+0,b,y
.198160		9f 2c 00 1c	sta $1c002c,x	        sta     kernel.net.pbuf.eth.arp.tpa+0,x
.198164		b9 02 00	lda $0002,y	        lda     entry.ip+2,b,y
.198167		9f 2e 00 1c	sta $1c002e,x	        sta     kernel.net.pbuf.eth.arp.tpa+2,x
.19816b		a9 2a 00	lda #$002a	        lda     #eth_t.arp.size
.19816e		9f 04 00 1c	sta $1c0004,x	        sta     kernel.net.pbuf.length,x
.198172		4c 57 7f	jmp $197f57	        jmp     hardware.lan9221.eth_packet_send
.198175						arp_reply
.198175		a9 02 00	lda #$0002	        lda     #$0002
.198178		eb		xba		        xba
.198179		9f 1a 00 1c	sta $1c001a,x	        sta     pbuf.eth.arp.oper,x
.19817d		bf 0c 00 1c	lda $1c000c,x	        lda     pbuf.eth.s_mac+0,x
.198181		9f 06 00 1c	sta $1c0006,x	        sta     pbuf.eth.d_mac+0,x
.198185		9f 26 00 1c	sta $1c0026,x	        sta     pbuf.eth.arp.tha+0,x
.198189		bf 0e 00 1c	lda $1c000e,x	        lda     pbuf.eth.s_mac+2,x
.19818d		9f 08 00 1c	sta $1c0008,x	        sta     pbuf.eth.d_mac+2,x
.198191		9f 28 00 1c	sta $1c0028,x	        sta     pbuf.eth.arp.tha+2,x
.198195		bf 10 00 1c	lda $1c0010,x	        lda     pbuf.eth.s_mac+4,x
.198199		9f 0a 00 1c	sta $1c000a,x	        sta     pbuf.eth.d_mac+4,x
.19819d		9f 2a 00 1c	sta $1c002a,x	        sta     pbuf.eth.arp.tha+4,x
.1981a1		20 c9 81	jsr $1981c9	        jsr     swap_ip
.1981a4		af 83 86 19	lda $198683	        lda     kernel.net.conf.eth_mac+0
.1981a8		9f 1c 00 1c	sta $1c001c,x	        sta     pbuf.eth.arp.sha+0,x
.1981ac		9f 0c 00 1c	sta $1c000c,x	        sta     pbuf.eth.s_mac+0,x
.1981b0		af 85 86 19	lda $198685	        lda     kernel.net.conf.eth_mac+2
.1981b4		9f 1e 00 1c	sta $1c001e,x	        sta     pbuf.eth.arp.sha+2,x
.1981b8		9f 0e 00 1c	sta $1c000e,x	        sta     pbuf.eth.s_mac+2,x
.1981bc		af 87 86 19	lda $198687	        lda     kernel.net.conf.eth_mac+4
.1981c0		9f 20 00 1c	sta $1c0020,x	        sta     pbuf.eth.arp.sha+4,x
.1981c4		9f 10 00 1c	sta $1c0010,x	        sta     pbuf.eth.s_mac+4,x
.1981c8		60		rts		        rts
.1981c9						swap_ip
.1981c9		5a		phy		        phy
.1981ca		bf 22 00 1c	lda $1c0022,x	        lda     pbuf.eth.arp.spa+0,x
.1981ce		a8		tay		        tay
.1981cf		bf 2c 00 1c	lda $1c002c,x	        lda     pbuf.eth.arp.tpa+0,x
.1981d3		9f 22 00 1c	sta $1c0022,x	        sta     pbuf.eth.arp.spa+0,x
.1981d7		98		tya		        tya
.1981d8		9f 2c 00 1c	sta $1c002c,x	        sta     pbuf.eth.arp.tpa+0,x
.1981dc		bf 24 00 1c	lda $1c0024,x	        lda     pbuf.eth.arp.spa+2,x
.1981e0		a8		tay		        tay
.1981e1		bf 2e 00 1c	lda $1c002e,x	        lda     pbuf.eth.arp.tpa+2,x
.1981e5		9f 24 00 1c	sta $1c0024,x	        sta     pbuf.eth.arp.spa+2,x
.1981e9		98		tya		        tya
.1981ea		9f 2e 00 1c	sta $1c002e,x	        sta     pbuf.eth.arp.tpa+2,x
.1981ee		7a		ply		        ply
.1981ef		60		rts		        rts
.0000						entry
>0000						ip      .fill   4
>0004						mac     .fill   6
>000a						pending .word   ?
>000c						last    .word   ?
.000e						size
>1981f0		00 00				count   .word   0
>1981f2		00 00 00 00 00 00 00 00		entries .fill   8*entry.size,0
>1981fa		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>19825a		00 00 00 00 00 00 00 00
.198262						entries_end
>198262						target  .fill   4
.198266						cache_arp_reply
.198266		bf 22 00 1c	lda $1c0022,x	        lda     kernel.net.pbuf.eth.arp.spa+0,x
.19826a		8f 20 00 1c	sta $1c0020	        sta     kernel.net.pbuf.ipv4.src+0
.19826e		bf 24 00 1c	lda $1c0024,x	        lda     kernel.net.pbuf.eth.arp.spa+2,x
.198272		8f 22 00 1c	sta $1c0022	        sta     kernel.net.pbuf.ipv4.src+2
.198276		bf 1c 00 1c	lda $1c001c,x	        lda     kernel.net.pbuf.eth.arp.sha+0,x
.19827a		8f 0c 00 1c	sta $1c000c	        sta     kernel.net.pbuf.eth.s_mac+0
.19827e		bf 1e 00 1c	lda $1c001e,x	        lda     kernel.net.pbuf.eth.arp.sha+2,x
.198282		8f 0e 00 1c	sta $1c000e	        sta     kernel.net.pbuf.eth.s_mac+2
.198286		bf 20 00 1c	lda $1c0020,x	        lda     kernel.net.pbuf.eth.arp.sha+4,x
.19828a		8f 10 00 1c	sta $1c0010	        sta     kernel.net.pbuf.eth.s_mac+4
.19828e		da		phx		        phx
.19828f		a2 00 00	ldx #$0000	        ldx     #0
.198292		20 97 82	jsr $198297	        jsr     cache_ip
.198295		fa		plx		        plx
.198296		60		rts		        rts
.198297						cache_ip
.198297		bf 20 00 1c	lda $1c0020,x	        lda     kernel.net.pbuf.ipv4.src+0,x
.19829b		8f 62 82 19	sta $198262	        sta     target+0
.19829f		bf 22 00 1c	lda $1c0022,x	        lda     kernel.net.pbuf.ipv4.src+2,x
.1982a3		8f 64 82 19	sta $198264	        sta     target+2
.1982a7		20 df 83	jsr $1983df	        jsr     find
.1982aa		90 11		bcc $1982bd	        bcc     _update         ; Found; update MAC.
.1982ac		20 11 84	jsr $198411	        jsr     find_oldest     ; Not found, make new entry.
.1982af		bf 20 00 1c	lda $1c0020,x	        lda     kernel.net.pbuf.ipv4.src+0,x
.1982b3		99 00 00	sta $0000,y	        sta     entry.ip+0,b,y
.1982b6		bf 22 00 1c	lda $1c0022,x	        lda     kernel.net.pbuf.ipv4.src+2,x
.1982ba		99 02 00	sta $0002,y	        sta     entry.ip+2,b,y
.1982bd						_update
.1982bd		bf 0c 00 1c	lda $1c000c,x	        lda     kernel.net.pbuf.eth.s_mac+0,x
.1982c1		99 04 00	sta $0004,y	        sta     entry.mac+0,b,y
.1982c4		bf 0e 00 1c	lda $1c000e,x	        lda     kernel.net.pbuf.eth.s_mac+2,x
.1982c8		99 06 00	sta $0006,y	        sta     entry.mac+2,b,y
.1982cb		bf 10 00 1c	lda $1c0010,x	        lda     kernel.net.pbuf.eth.s_mac+4,x
.1982cf		99 08 00	sta $0008,y	        sta     entry.mac+4,b,y
.1982d2		a9 00 00	lda #$0000	        lda     #0
.1982d5		99 0a 00	sta $000a,y	        sta     entry.pending,b,y
.1982d8		20 dc 82	jsr $1982dc	        jsr     touch
.1982db		60		rts		_out    rts
.1982dc						touch
.1982dc		af 95 86 19	lda $198695	        lda     kernel.net.conf.ticks
.1982e0		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.1982e3		60		rts		        rts
.1982e4						local:
.1982e4		bf 26 00 1c	lda $1c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.1982e8		4f 87 86 19	eor $198687	        eor     kernel.net.conf.ip_addr+2
.1982ec		2f 8b 86 19	and $19868b	        and     kernel.net.conf.ip_mask+2
.1982f0		d0 0c		bne $1982fe	        bne     _out
.1982f2		bf 24 00 1c	lda $1c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.1982f6		4f 85 86 19	eor $198685	        eor     kernel.net.conf.ip_addr+0
.1982fa		2f 89 86 19	and $198689	        and     kernel.net.conf.ip_mask+0
.1982fe		60		rts		_out    rts
.1982ff						bind:
.1982ff		bf 26 00 1c	lda $1c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.198303		4f 8f 86 19	eor $19868f	        eor     kernel.net.conf.broadcast+2
.198307		d0 1c		bne $198325	        bne     _lookup
.198309		bf 24 00 1c	lda $1c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.19830d		4f 8d 86 19	eor $19868d	        eor     kernel.net.conf.broadcast+0
.198311		d0 12		bne $198325	        bne     _lookup
.198313		a9 ff ff	lda #$ffff	        lda     #$ffff
.198316		9f 06 00 1c	sta $1c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.19831a		9f 08 00 1c	sta $1c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.19831e		9f 0a 00 1c	sta $1c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.198322		4c 77 83	jmp $198377	        jmp     _finish
.198325						_lookup
.198325		20 e4 82	jsr $1982e4	        jsr     local
.198328		d0 13		bne $19833d	        bne     _router
.19832a		bf 24 00 1c	lda $1c0024,x	        lda     kernel.net.pbuf.ipv4.dest+0,x
.19832e		8f 62 82 19	sta $198262	        sta     target+0
.198332		bf 26 00 1c	lda $1c0026,x	        lda     kernel.net.pbuf.ipv4.dest+2,x
.198336		8f 64 82 19	sta $198264	        sta     target+2
.19833a		4c 52 83	jmp $198352	        jmp     _find
.19833d						_router
.19833d		af 93 86 19	lda $198693	        lda     kernel.net.conf.default+2
.198341		c9 00 01	cmp #$0100	        cmp     #$0100
.198344		90 60		bcc $1983a6	        bcc     _fail   ; No default route
.198346		8f 64 82 19	sta $198264	        sta     target+2
.19834a		af 91 86 19	lda $198691	        lda     kernel.net.conf.default+0
.19834e		8f 62 82 19	sta $198262	        sta     target+0
.198352						_find
.198352		20 df 83	jsr $1983df	        jsr     find
.198355		b0 61		bcs $1983b8	        bcs     _arp
.198357		b9 0a 00	lda $000a,y	        lda     entry.pending,b,y
.19835a		f0 03		beq $19835f	        beq     _found
.19835c		4c a8 83	jmp $1983a8	        jmp     _retry
.19835f						_found
.19835f		b9 04 00	lda $0004,y	        lda     entry.mac+0,b,y
.198362		9f 06 00 1c	sta $1c0006,x	        sta     kernel.net.pbuf.eth.d_mac+0,x
.198366		b9 06 00	lda $0006,y	        lda     entry.mac+2,b,y
.198369		9f 08 00 1c	sta $1c0008,x	        sta     kernel.net.pbuf.eth.d_mac+2,x
.19836d		b9 08 00	lda $0008,y	        lda     entry.mac+4,b,y
.198370		9f 0a 00 1c	sta $1c000a,x	        sta     kernel.net.pbuf.eth.d_mac+4,x
.198374		20 dc 82	jsr $1982dc	        jsr     touch   ; Keep this arp entry :).
.198377						_finish
.198377		a9 00 08	lda #$0800	        lda     #$0800
.19837a		eb		xba		        xba
.19837b		9f 12 00 1c	sta $1c0012,x	        sta     kernel.net.pbuf.eth.type+0,x
.19837f		af 83 86 19	lda $198683	        lda     kernel.net.conf.eth_mac+0
.198383		9f 0c 00 1c	sta $1c000c,x	        sta     kernel.net.pbuf.eth.s_mac+0,x
.198387		af 85 86 19	lda $198685	        lda     kernel.net.conf.eth_mac+2
.19838b		9f 0e 00 1c	sta $1c000e,x	        sta     kernel.net.pbuf.eth.s_mac+2,x
.19838f		af 87 86 19	lda $198687	        lda     kernel.net.conf.eth_mac+4
.198393		9f 10 00 1c	sta $1c0010,x	        sta     kernel.net.pbuf.eth.s_mac+4,x
.198397		bf 16 00 1c	lda $1c0016,x	        lda     pbuf.ipv4.len,x
.19839b		eb		xba		        xba
.19839c		18		clc		        clc
.19839d		69 0e 00	adc #$000e	        adc     #eth_t.size
.1983a0		9f 04 00 1c	sta $1c0004,x	        sta     pbuf.length,x
.1983a4		18		clc		        clc
.1983a5		60		rts		        rts
.1983a6		38		sec		_fail   sec
.1983a7		60		rts		        rts
.1983a8		af 95 86 19	lda $198695	_retry  lda     kernel.net.conf.ticks
.1983ac		38		sec		        sec
.1983ad		f9 0c 00	sbc $000c,y	        sbc     entry.last,b,y
.1983b0		c9 05 00	cmp #$0005	        cmp     #5
.1983b3		90 f1		bcc $1983a6	        bcc     _fail    ; Too soon.
.1983b5		4c d6 83	jmp $1983d6	        jmp     _request
.1983b8						_arp
.1983b8		20 11 84	jsr $198411	        jsr     find_oldest
.1983bb		af 62 82 19	lda $198262	        lda     target+0
.1983bf		99 00 00	sta $0000,y	        sta     entry.ip+0,b,y
.1983c2		af 64 82 19	lda $198264	        lda     target+2
.1983c6		99 02 00	sta $0002,y	        sta     entry.ip+2,b,y
.1983c9		a9 01 00	lda #$0001	        lda     #1
.1983cc		99 0a 00	sta $000a,y	        sta     entry.pending,b,y
.1983cf		af 95 86 19	lda $198695	        lda     kernel.net.conf.ticks
.1983d3		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.1983d6						_request
.1983d6		20 dd 80	jsr $1980dd	        jsr     arp_request
.1983d9		20 dc 82	jsr $1982dc	        jsr     touch
.1983dc		4c a6 83	jmp $1983a6	        jmp     _fail
.1983df						find:
.1983df		a0 f2 81	ldy #$81f2	        ldy     #<>entries
.1983e2		c0 62 82	cpy #$8262	_loop   cpy     #<>entries_end
.1983e5		f0 0e		beq $1983f5	        beq     _none
.1983e7		20 00 84	jsr $198400	        jsr     compare
.1983ea		f0 0b		beq $1983f7	        beq     _done
.1983ec		98		tya		        tya
.1983ed		18		clc		        clc
.1983ee		69 0e 00	adc #$000e	        adc     #entry.size
.1983f1		a8		tay		        tay
.1983f2		4c e2 83	jmp $1983e2	        jmp     _loop
.1983f5		38		sec		_none   sec
.1983f6		60		rts		        rts
.1983f7		af 95 86 19	lda $198695	_done   lda     kernel.net.conf.ticks
.1983fb		99 0c 00	sta $000c,y	        sta     entry.last,b,y
.1983fe		18		clc		        clc
.1983ff		60		rts		        rts
.198400						compare:
.198400		af 62 82 19	lda $198262	        lda     target+0
.198404		59 00 00	eor $0000,y	        eor     entry.ip+0,b,y
.198407		d0 07		bne $198410	        bne     _done
.198409		af 64 82 19	lda $198264	        lda     target+2
.19840d		59 02 00	eor $0002,y	        eor     entry.ip+2,b,y
.198410		60		rts		_done   rts
.198411						find_oldest:
.198411		da		phx		        phx
.198412		f4 00 00	pea #$0000	        pea     #0              ; Max age
.198415		a0 f2 81	ldy #$81f2	        ldy     #<>entries
.198418		bb		tyx		        tyx
.198419		b9 00 00	lda $0000,y	_loop   lda     entry.ip+0,b,y  ; Empty is free.
.19841c		f0 19		beq $198437	        beq     _done
.19841e		af 95 86 19	lda $198695	        lda     kernel.net.conf.ticks
.198422		38		sec		        sec
.198423		f9 0c 00	sbc $000c,y	        sbc     entry.last,b,y  ; Age of this entry in A.
.198426		c3 01		cmp $01,s	        cmp     1,s
.198428		90 01		bcc $19842b	        bcc     _next
.19842a		bb		tyx		        tyx                     ; X = new oldest
.19842b		98		tya		_next   tya
.19842c		18		clc		        clc
.19842d		69 0e 00	adc #$000e	        adc     #entry.size
.198430		a8		tay		        tay
.198431		c0 62 82	cpy #$8262	        cpy     #<>entries_end
.198434		d0 e3		bne $198419	        bne     _loop
.198436		9b		txy		        txy                     ; Y = X = oldest
.198437		68		pla		_done   pla                     ; Max age
.198438		fa		plx		        plx                     ; Original
.198439		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/net_ip.asm

.19843a						ip_check:
.19843a		a0 00 00	ldy #$0000	        ldy     #0  ; for now.
.19843d		bf 14 00 1c	lda $1c0014,x	        lda     pbuf.ipv4.ihl,x
.198441		29 ff 00	and #$00ff	        and     #255            ; little endian version/ihl
.198444		c9 45 00	cmp #$0045	        cmp     #$45            ; Version 4, minimal header.
.198447		d0 2e		bne $198477	        bne     _bad
.198449		20 0a 85	jsr $19850a	        jsr     compute_ip_checksum
.19844c		1a		inc a		        inc     a
.19844d		d0 28		bne $198477	        bne     _bad
.19844f		bf 1c 00 1c	lda $1c001c,x	        lda     pbuf.ipv4.ttl,x
.198453		3a		dec a		        dec     a
.198454		89 ff 00	bit #$00ff	        bit     #$ff
.198457		f0 1e		beq $198477	        beq     _bad
.198459		9f 1c 00 1c	sta $1c001c,x	        sta     pbuf.ipv4.ttl,x
.19845d		bf 1a 00 1c	lda $1c001a,x	        lda     pbuf.ipv4.flags,x
.198461		29 00 c0	and #$c000	        and     #65536-$4000
.198464		d0 11		bne $198477	        bne     _bad
.198466		bf 1d 00 1c	lda $1c001d,x	        lda     pbuf.ipv4.proto,x
.19846a		29 ff 00	and #$00ff	        and     #255
.19846d		c9 11 00	cmp #$0011	        cmp     #17
.198470		f0 08		beq $19847a	        beq     _udp
.198472		c9 01 00	cmp #$0001	        cmp     #1
.198475		f0 06		beq $19847d	        beq     ip_icmp
.198477		4c 6e 80	jmp $19806e	_bad    jmp     pbuf_free_x
.19847a		4c 73 85	jmp $198573	_udp    jmp     ip_udp
.19847d						ip_icmp:
.19847d		bf 28 00 1c	lda $1c0028,x	        lda     pbuf.ipv4.icmp.type,x
.198481		29 ff 00	and #$00ff	        and     #255
.198484		c9 08 00	cmp #$0008	        cmp     #8
.198487		d0 06		bne $19848f	        bne     _drop
.198489		20 29 85	jsr $198529	        jsr     compute_icmp_checksum
.19848c		1a		inc a		        inc     a
.19848d		f0 03		beq $198492	        beq     _good
.19848f		4c 6e 80	jmp $19806e	_drop   jmp     pbuf_free_x
.198492						_good
.198492		bf 28 00 1c	lda $1c0028,x	        lda     pbuf.ipv4.icmp.type,x
.198496		29 00 ff	and #$ff00	        and     #$ff00
.198499		9f 28 00 1c	sta $1c0028,x	        sta     pbuf.ipv4.icmp.type,x
.19849d		20 ac 84	jsr $1984ac	        jsr     swap_ip_addrs
.1984a0		20 16 85	jsr $198516	        jsr update_ip_checksum
.1984a3		20 42 85	jsr $198542	        jsr update_icmp_checksum
.1984a6		20 d1 84	jsr $1984d1	        jsr swap_mac
.1984a9		4c 57 7f	jmp $197f57	        jmp hardware.lan9221.eth_packet_send
.1984ac						swap_ip_addrs
.1984ac		bf 20 00 1c	lda $1c0020,x	        lda     pbuf.ipv4.src+0,x
.1984b0		48		pha		        pha
.1984b1		bf 22 00 1c	lda $1c0022,x	        lda     pbuf.ipv4.src+2,x
.1984b5		48		pha		        pha
.1984b6		bf 24 00 1c	lda $1c0024,x	        lda     pbuf.ipv4.dest+0,x
.1984ba		9f 20 00 1c	sta $1c0020,x	        sta     pbuf.ipv4.src+0,x
.1984be		bf 26 00 1c	lda $1c0026,x	        lda     pbuf.ipv4.dest+2,x
.1984c2		9f 22 00 1c	sta $1c0022,x	        sta     pbuf.ipv4.src+2,x
.1984c6		68		pla		        pla
.1984c7		9f 26 00 1c	sta $1c0026,x	        sta     pbuf.ipv4.dest+2,x
.1984cb		68		pla		        pla
.1984cc		9f 24 00 1c	sta $1c0024,x	        sta     pbuf.ipv4.dest+0,x
.1984d0		60		rts		        rts
.1984d1						swap_mac
.1984d1		5a		phy		        phy
.1984d2		bf 0c 00 1c	lda $1c000c,x	        lda     pbuf.eth.s_mac+0,x
.1984d6		a8		tay		        tay
.1984d7		bf 06 00 1c	lda $1c0006,x	        lda     pbuf.eth.d_mac+0,x
.1984db		9f 0c 00 1c	sta $1c000c,x	        sta     pbuf.eth.s_mac+0,x
.1984df		98		tya		        tya
.1984e0		9f 06 00 1c	sta $1c0006,x	        sta     pbuf.eth.d_mac+0,x
.1984e4		bf 0e 00 1c	lda $1c000e,x	        lda     pbuf.eth.s_mac+2,x
.1984e8		a8		tay		        tay
.1984e9		bf 08 00 1c	lda $1c0008,x	        lda     pbuf.eth.d_mac+2,x
.1984ed		9f 0e 00 1c	sta $1c000e,x	        sta     pbuf.eth.s_mac+2,x
.1984f1		98		tya		        tya
.1984f2		9f 08 00 1c	sta $1c0008,x	        sta     pbuf.eth.d_mac+2,x
.1984f6		bf 10 00 1c	lda $1c0010,x	        lda     pbuf.eth.s_mac+4,x
.1984fa		a8		tay		        tay
.1984fb		bf 0a 00 1c	lda $1c000a,x	        lda     pbuf.eth.d_mac+4,x
.1984ff		9f 10 00 1c	sta $1c0010,x	        sta     pbuf.eth.s_mac+4,x
.198503		98		tya		        tya
.198504		9f 0a 00 1c	sta $1c000a,x	        sta     pbuf.eth.d_mac+4,x
.198508		7a		ply		        ply
.198509		60		rts		        rts
.19850a						compute_ip_checksum:
.19850a		5a		phy		        phy
.19850b		a0 14 00	ldy #$0014	        ldy     #ip_t.size      ; size of header
.19850e		a9 00 00	lda #$0000	        lda     #0              ; starting from 0
.198511		20 55 85	jsr $198555	        jsr     header_checksum
.198514		7a		ply		        ply
.198515		60		rts		        rts
.198516						update_ip_checksum:
.198516		a9 00 00	lda #$0000	        lda     #0
.198519		9f 1e 00 1c	sta $1c001e,x	        sta     pbuf.ipv4.check,x
.19851d		20 0a 85	jsr $19850a	        jsr     compute_ip_checksum
.198520		49 ff ff	eor #$ffff	        eor     #$ffff
.198523		eb		xba		        xba
.198524		9f 1e 00 1c	sta $1c001e,x	        sta     pbuf.ipv4.check,x
.198528		60		rts		        rts
.198529						compute_icmp_checksum
.198529		5a		phy		        phy
.19852a		bf 16 00 1c	lda $1c0016,x	        lda     pbuf.ipv4.len,x
.19852e		eb		xba		        xba
.19852f		89 01 00	bit #$0001	        bit     #1
.198532		f0 01		beq $198535	        beq     _check
.198534		1a		inc a		        inc     a       ; driver ensures a trailing zero.
.198535		38		sec		_check  sec
.198536		e9 14 00	sbc #$0014	        sbc     #ip_t.size
.198539		a8		tay		        tay
.19853a		a9 14 00	lda #$0014	        lda     #ip_t.size
.19853d		20 55 85	jsr $198555	        jsr     header_checksum
.198540		7a		ply		        ply
.198541		60		rts		        rts
.198542						update_icmp_checksum:
.198542		a9 00 00	lda #$0000	        lda     #0
.198545		9f 2a 00 1c	sta $1c002a,x	        sta     pbuf.ipv4.icmp.check,x
.198549		20 29 85	jsr $198529	        jsr     compute_icmp_checksum
.19854c		eb		xba		        xba
.19854d		49 ff ff	eor #$ffff	        eor     #$ffff
.198550		9f 2a 00 1c	sta $1c002a,x	        sta     pbuf.ipv4.icmp.check,x
.198554		60		rts		        rts
.198555						header_checksum:
.198555		da		phx		        phx
.198556		18		clc		        clc
.198557		63 01		adc $01,s	        adc     1,s
.198559		aa		tax		        tax
.19855a		f4 00 00	pea #$0000	        pea     #0
.19855d		18		clc		        clc
.19855e		bf 14 00 1c	lda $1c0014,x	_loop   lda     pbuf.ipv4,x
.198562		eb		xba		        xba
.198563		63 01		adc $01,s	        adc     1,s
.198565		83 01		sta $01,s	        sta     1,s
.198567		e8		inx		        inx
.198568		e8		inx		        inx
.198569		88		dey		        dey
.19856a		88		dey		        dey
.19856b		d0 f1		bne $19855e	        bne     _loop
.19856d		68		pla		        pla
.19856e		69 00 00	adc #$0000	        adc     #0
.198571		fa		plx		        plx
.198572		60		rts		        rts

;******  Return to file: src\networking/net.asm


;******  Processing file: src\networking/net_udp.asm

.198573						ip_udp
.198573		20 92 85	jsr $198592	        jsr     udp_checksum
.198576		1a		inc a		        inc     a
.198577		d0 03		bne $19857c	        bne     _done
.198579		4c 07 87	jmp $198707	        jmp     rx_enqueue
.19857c		4c 6e 80	jmp $19806e	_done   jmp     pbuf_free_x
.19857f						update_udp_checksum
.19857f		a9 00 00	lda #$0000	        lda     #0
.198582		9f 2e 00 1c	sta $1c002e,x	        sta     pbuf.ipv4.udp.check,x
.198586		20 92 85	jsr $198592	        jsr     udp_checksum
.198589		49 ff ff	eor #$ffff	        eor     #$ffff
.19858c		eb		xba		        xba
.19858d		9f 2e 00 1c	sta $1c002e,x	        sta     pbuf.ipv4.udp.check,x
.198591		60		rts		        rts
.198592						udp_checksum
.198592		5a		phy		        phy
.198593		da		phx		        phx
.198594		bf 16 00 1c	lda $1c0016,x	        lda     pbuf.ipv4.len,x
.198598		eb		xba		        xba
.198599		18		clc		        clc
.19859a		63 01		adc $01,s	        adc     1,s
.19859c		aa		tax		        tax
.19859d		a9 00 00	lda #$0000	        lda     #0
.1985a0		9f 14 00 1c	sta $1c0014,x	        sta     pbuf.ipv4,x
.1985a4		fa		plx		        plx
.1985a5		bf 16 00 1c	lda $1c0016,x	        lda     pbuf.ipv4.len,x
.1985a9		eb		xba		        xba
.1985aa		38		sec		        sec
.1985ab		e9 14 00	sbc #$0014	        sbc     #ip_t.size
.1985ae		48		pha		        pha                 ; Save for pseudo-header.
.1985af		89 01 00	bit #$0001	        bit     #1
.1985b2		f0 01		beq $1985b5	        beq     _aligned
.1985b4		1a		inc a		        inc     a
.1985b5						_aligned
.1985b5		a8		tay		        tay
.1985b6		a9 14 00	lda #$0014	        lda     #ip_t.size
.1985b9		20 55 85	jsr $198555	        jsr     header_checksum
.1985bc		18		clc		        clc
.1985bd		63 01		adc $01,s	        adc     1,s
.1985bf		83 01		sta $01,s	        sta     1,s
.1985c1		bf 1d 00 1c	lda $1c001d,x	        lda     pbuf.ipv4.proto,x
.1985c5		29 ff 00	and #$00ff	        and     #$ff
.1985c8		63 01		adc $01,s	        adc     1,s
.1985ca		83 01		sta $01,s	        sta     1,s
.1985cc		bf 20 00 1c	lda $1c0020,x	        lda     pbuf.ipv4.src+0,x
.1985d0		20 ee 85	jsr $1985ee	        jsr     _sum
.1985d3		bf 22 00 1c	lda $1c0022,x	        lda     pbuf.ipv4.src+2,x
.1985d7		20 ee 85	jsr $1985ee	        jsr     _sum
.1985da		bf 24 00 1c	lda $1c0024,x	        lda     pbuf.ipv4.dest+0,x
.1985de		20 ee 85	jsr $1985ee	        jsr     _sum
.1985e1		bf 26 00 1c	lda $1c0026,x	        lda     pbuf.ipv4.dest+2,x
.1985e5		20 ee 85	jsr $1985ee	        jsr     _sum
.1985e8		68		pla		        pla
.1985e9		69 00 00	adc #$0000	        adc     #0
.1985ec		7a		ply		        ply
.1985ed		60		rts		        rts
.1985ee		eb		xba		_sum    xba
.1985ef		63 03		adc $03,s	        adc     3,s
.1985f1		83 03		sta $03,s	        sta     3,s
.1985f3		60		rts		        rts
.1985f4						udp_make:
.1985f4		20 5d 80	jsr $19805d	        jsr     pbuf_alloc_x
.1985f7		d0 02		bne $1985fb	        bne     _fill
.1985f9		38		sec		        sec
.1985fa		60		rts		        rts
.1985fb						_fill
.1985fb		a9 45 00	lda #$0045	        lda     #$45                ; Version=4, IHL=5, TOS=0
.1985fe		9f 14 00 1c	sta $1c0014,x	        sta     pbuf.ipv4.ihl,x
.198602		a9 00 00	lda #$0000	        lda     #0                  ; Frag ID=0 (no fragmentation)
.198605		9f 18 00 1c	sta $1c0018,x	        sta     pbuf.ipv4.id,x
.198609		a9 40 00	lda #$0040	        lda     #$40                ; May fragment
.19860c		9f 1a 00 1c	sta $1c001a,x	        sta     pbuf.ipv4.flags,x
.198610		a9 40 11	lda #$1140	        lda     #$1140              ; Protocol=UDP, TTL=$40
.198613		9f 1c 00 1c	sta $1c001c,x	        sta     pbuf.ipv4.ttl,x
.198617		af 85 86 19	lda $198685	        lda     conf.ip_addr+0
.19861b		9f 20 00 1c	sta $1c0020,x	        sta     pbuf.ipv4.src+0,x
.19861f		af 87 86 19	lda $198687	        lda     conf.ip_addr+2
.198623		9f 22 00 1c	sta $1c0022,x	        sta     pbuf.ipv4.src+2,x
.198627		a5 02		lda $02		        lda     user.udp_info.remote_ip+0,d
.198629		9f 24 00 1c	sta $1c0024,x	        sta     pbuf.ipv4.dest+0,x
.19862d		a5 04		lda $04		        lda     user.udp_info.remote_ip+2,d
.19862f		9f 26 00 1c	sta $1c0026,x	        sta     pbuf.ipv4.dest+2,x
.198633		a5 00		lda $00		        lda     user.udp_info.local_port,d
.198635		eb		xba		        xba
.198636		9f 28 00 1c	sta $1c0028,x	        sta     pbuf.ipv4.udp.sport,x
.19863a		a5 06		lda $06		        lda     user.udp_info.remote_port,d
.19863c		eb		xba		        xba
.19863d		9f 2a 00 1c	sta $1c002a,x	        sta     pbuf.ipv4.udp.dport,x
.198641		20 6a 86	jsr $19866a	        jsr     copy_msg_data
.198644		a5 0c		lda $0c		        lda     user.udp_info.buflen,d
.198646		c9 b2 05	cmp #$05b2	        cmp     #1500 - eth_t.ipv4.udp.size ; Max data size
.198649		90 03		bcc $19864e	        bcc     _size
.19864b		a9 b2 05	lda #$05b2	        lda     #1500 - eth_t.ipv4.udp.size ; limit to max data size
.19864e		85 0e		sta $0e		_size   sta     user.udp_info.copied,d
.198650		18		clc		        clc
.198651		69 08 00	adc #$0008	        adc     #udp_t.size
.198654		eb		xba		        xba
.198655		9f 2c 00 1c	sta $1c002c,x	        sta     pbuf.ipv4.udp.length,x
.198659		eb		xba		        xba
.19865a		18		clc		        clc
.19865b		69 14 00	adc #$0014	        adc     #ip_t.size
.19865e		eb		xba		        xba
.19865f		9f 16 00 1c	sta $1c0016,x	        sta     pbuf.ipv4.len,x
.198663		20 7f 85	jsr $19857f	        jsr     update_udp_checksum
.198666		20 16 85	jsr $198516	        jsr     update_ip_checksum
.198669		60		rts		        rts
.19866a						copy_msg_data
.19866a		a0 00 00	ldy #$0000	        ldy     #0
.19866d		da		phx		        phx
.19866e		c4 0e		cpy $0e		_loop   cpy     user.udp_info.copied,d
.198670		b0 0d		bcs $19867f	        bcs     _done
.198672		b7 08		lda [$08],y	        lda     [user.udp_info.buffer],y
.198674		9f 30 00 1c	sta $1c0030,x	        sta     kernel.net.pbuf.ipv4.udp.data,x
.198678		e8		inx		        inx
.198679		e8		inx		        inx
.19867a		c8		iny		        iny
.19867b		c8		iny		        iny
.19867c		4c 6e 86	jmp $19866e	        jmp     _loop
.19867f		fa		plx		_done   plx
.198680		60		rts		        rts

;******  Return to file: src\networking/net.asm

>198681		00 00				init        .word   0   ; NZ if init has succeeded
>198683		c2				eth_mac     .byte   $c2 ; NIC's MAC prefix; the rest is the IP address.
>198684		56				            .byte   $56 ; c2:56: just happens to be a "local assignment" prefix :).
>198685						ip_addr     .fill   4   ; Local IP address, MUST IMMEDIATELY FOLLOW THE MAC!
>198689						ip_mask     .fill   4   ; Local netmask
>19868d						broadcast   .fill   4   ; Broadcast address
>198691		00 00 00 00			default     .dword  0   ; Default route (0 = local only)
>198695		00 00				ticks       .word   0   ; virtual timer
.198697						init
.198697		af e2 63 19	lda $1963e2	            lda     HAS_ETHERNET
.19869b		d0 02		bne $19869f	            bne     _init
.19869d		38		sec		            sec
.19869e		60		rts		            rts
.19869f						_init
.19869f		a9 00 00	lda #$0000	            lda     #0
.1986a2		8f 03 87 19	sta $198703	            sta     rx_queue+0
.1986a6		8f 05 87 19	sta $198705	            sta     rx_queue+2
.1986aa		b9 00 00	lda $0000,y	            lda     0+user.ip_info.ip,y
.1986ad		8f 85 86 19	sta $198685	            sta @l  0+conf.ip_addr
.1986b1		b9 02 00	lda $0002,y	            lda     2+user.ip_info.ip,y
.1986b4		8f 87 86 19	sta $198687	            sta @l  2+conf.ip_addr
.1986b8		b9 04 00	lda $0004,y	            lda     0+user.ip_info.mask,y
.1986bb		8f 89 86 19	sta $198689	            sta @l  0+conf.ip_mask
.1986bf		b9 06 00	lda $0006,y	            lda     2+user.ip_info.mask,y
.1986c2		8f 8b 86 19	sta $19868b	            sta @l  2+conf.ip_mask
.1986c6		b9 08 00	lda $0008,y	            lda     0+user.ip_info.default,y
.1986c9		8f 91 86 19	sta $198691	            sta @l  0+conf.default
.1986cd		b9 0a 00	lda $000a,y	            lda     2+user.ip_info.default,y
.1986d0		8f 93 86 19	sta $198693	            sta @l  2+conf.default
.1986d4		af 89 86 19	lda $198689	            lda     conf.ip_mask+0
.1986d8		49 ff ff	eor #$ffff	            eor     #$ffff
.1986db		0f 85 86 19	ora $198685	            ora     conf.ip_addr+0
.1986df		8f 8d 86 19	sta $19868d	            sta     conf.broadcast+0
.1986e3		af 8b 86 19	lda $19868b	            lda     conf.ip_mask+2
.1986e7		49 ff ff	eor #$ffff	            eor     #$ffff
.1986ea		0f 87 86 19	ora $198687	            ora     conf.ip_addr+2
.1986ee		8f 8f 86 19	sta $19868f	            sta     conf.broadcast+2
.1986f2		4b		phk		            phk
.1986f3		ab		plb		            plb
.1986f4		20 3a 80	jsr $19803a	            jsr     pbuf_init
.1986f7		20 ad 7e	jsr $197ead	            jsr     hardware.lan9221.eth_open
.1986fa		a9 01 00	lda #$0001	            lda     #1
.1986fd		8f 81 86 19	sta $198681	            sta     conf.init
.198701		18		clc		            clc
.198702		60		rts		            rts
.198703						rx_queue
>198703		00 00				head    .word   0
>198705		00 00				tail    .word   0
.198707						end
.198707						rx_enqueue
.198707		ad 03 87	lda $8703	        lda     <>rx_queue+lib.deque_t.head  ; or tail
.19870a		d0 0d		bne $198719	        bne     _ins
.19870c		9f 00 00 1c	sta $1c0000,x	        sta @l  kernel.net.pbuf.deque,x
.198710		8e 03 87	stx $8703	        stx    <>rx_queue+lib.deque_t.head,b
.198713		8e 05 87	stx $8705	        stx    <>rx_queue+lib.deque_t.tail,b
.198716		4c 2b 87	jmp $19872b	        jmp     _done
.198719		a9 00 00	lda #$0000	_ins    lda     #0
.19871c		9f 00 00 1c	sta $1c0000,x	        sta @l  kernel.net.pbuf.deque,x
.198720		8a		txa		        txa
.198721		ae 05 87	ldx $8705	        ldx    <>rx_queue+lib.deque_t.tail,b
.198724		9f 00 00 1c	sta $1c0000,x	        sta @l  kernel.net.pbuf.deque,x
.198728		8d 05 87	sta $8705	        sta     <>rx_queue+lib.deque_t.tail,b
.19872b		60		rts		        rts
.19872c						packet_recv
.19872c		20 00 7f	jsr $197f00	_loop   jsr     hardware.lan9221.eth_tick   ; NZ if the 100ms timer has reset.
.19872f		f0 09		beq $19873a	        beq     _recv
.198731		af 95 86 19	lda $198695	        lda     conf.ticks
.198735		1a		inc a		        inc     a
.198736		8f 95 86 19	sta $198695	        sta     conf.ticks
.19873a		20 5d 7f	jsr $197f5d	_recv   jsr     hardware.lan9221.eth_packet_recv
.19873d		aa		tax		        tax
.19873e		f0 21		beq $198761	        beq     _done
.198740		bf 12 00 1c	lda $1c0012,x	        lda     pbuf.eth.type,x
.198744		eb		xba		        xba
.198745		c9 00 08	cmp #$0800	        cmp     #$0800
.198748		f0 11		beq $19875b	        beq     _ipv4
.19874a		c9 06 08	cmp #$0806	        cmp     #$0806
.19874d		f0 06		beq $198755	        beq     _arp
.19874f		20 6e 80	jsr $19806e	        jsr     kernel.net.pbuf_free_x  ; We don't handle anything else.
.198752		4c 2c 87	jmp $19872c	        jmp     _loop
.198755		20 7c 80	jsr $19807c	_arp    jsr     arp.recv
.198758		4c 2c 87	jmp $19872c	        jmp     _loop
.19875b		20 3a 84	jsr $19843a	_ipv4   jsr     ip_check
.19875e		4c 2c 87	jmp $19872c	        jmp     _loop
.198761		60		rts		_done   rts
.198762						udp_send
.198762		af 81 86 19	lda $198681	            lda     conf.init
.198766		f0 30		beq $198798	            beq     _error
.198768		4b		phk		            phk
.198769		ab		plb		            plb
.19876a		20 2c 87	jsr $19872c	            jsr     packet_recv
.19876d		20 f4 85	jsr $1985f4	            jsr     udp_make
.198770		b0 22		bcs $198794	            bcs     _out
.198772		bf 24 00 1c	lda $1c0024,x	            lda     pbuf.ipv4.dest+0,x
.198776		cf 85 86 19	cmp $198685	            cmp     conf.ip_addr+0
.19877a		d0 0f		bne $19878b	            bne     _extern
.19877c		bf 26 00 1c	lda $1c0026,x	            lda     pbuf.ipv4.dest+2,x
.198780		cf 87 86 19	cmp $198687	            cmp     conf.ip_addr+2
.198784		d0 05		bne $19878b	            bne     _extern
.198786		20 3a 84	jsr $19843a	            jsr     ip_check
.198789		80 08		bra $198793	            bra     _done
.19878b		20 ff 82	jsr $1982ff	_extern     jsr     arp.bind
.19878e		b0 05		bcs $198795	            bcs     _fail
.198790		20 57 7f	jsr $197f57	            jsr     hardware.lan9221.eth_packet_send
.198793		18		clc		_done       clc
.198794		60		rts		_out        rts
.198795		20 6e 80	jsr $19806e	_fail       jsr     kernel.net.pbuf_free_x
.198798		38		sec		_error      sec
.198799		60		rts		            rts
.19879a						udp_recv
.19879a		af 81 86 19	lda $198681	            lda     conf.init
.19879e		d0 05		bne $1987a5	            bne     _recv
.1987a0		a9 00 00	lda #$0000	            lda     #0
.1987a3		38		sec		            sec
.1987a4		60		rts		            rts
.1987a5						_recv
.1987a5		4b		phk		            phk
.1987a6		ab		plb		            plb
.1987a7		20 2c 87	jsr $19872c	            jsr     packet_recv
.1987aa		64 0e		stz $0e		            stz     user.udp_info.copied,d
.1987ac		ae 03 87	ldx $8703	        ldx    <>rx_queue+lib.deque_t.head,b
.1987af		f0 0d		beq $1987be	        beq     _done
.1987b1		bf 00 00 1c	lda $1c0000,x	        lda @l  kernel.net.pbuf.deque,x
.1987b5		8d 03 87	sta $8703	        sta     <>rx_queue+lib.deque_t.head,b
.1987b8		d0 03		bne $1987bd	        bne     _okay
.1987ba		8d 05 87	sta $8705	        sta     <>rx_queue+lib.deque_t.tail,b
.1987bd		8a		txa		_okay   txa
.1987be		f0 59		beq $198819	            beq     _out
.1987c0		20 97 82	jsr $198297	            jsr     arp.cache_ip
.1987c3		bf 20 00 1c	lda $1c0020,x	            lda     pbuf.ipv4.src+0,x
.1987c7		85 02		sta $02		            sta     user.udp_info.remote_ip,d
.1987c9		bf 22 00 1c	lda $1c0022,x	            lda     pbuf.ipv4.src+2,x
.1987cd		85 04		sta $04		            sta     user.udp_info.remote_ip+2,d
.1987cf		bf 28 00 1c	lda $1c0028,x	            lda     pbuf.ipv4.udp.sport,x
.1987d3		eb		xba		            xba
.1987d4		85 06		sta $06		            sta     user.udp_info.remote_port,d
.1987d6		bf 2a 00 1c	lda $1c002a,x	            lda     pbuf.ipv4.udp.dport,x
.1987da		eb		xba		            xba
.1987db		85 00		sta $00		            sta     user.udp_info.local_port,d
.1987dd		bf 2c 00 1c	lda $1c002c,x	            lda     pbuf.ipv4.udp.length,x
.1987e1		eb		xba		            xba
.1987e2		38		sec		            sec
.1987e3		e9 08 00	sbc #$0008	            sbc     #udp_t.size
.1987e6		c5 0c		cmp $0c		            cmp     user.udp_info.buflen,d
.1987e8		90 04		bcc $1987ee	            bcc     _length
.1987ea		f0 02		beq $1987ee	            beq     _length
.1987ec		a5 0c		lda $0c		            lda     user.udp_info.buflen,d    ; Limit copy to buflen.
.1987ee		85 0e		sta $0e		_length     sta     user.udp_info.copied,d    ; copied = # of bytes to copy
.1987f0		da		phx		            phx
.1987f1		a0 00 00	ldy #$0000	            ldy     #0
.1987f4		4a		lsr a		            lsr     a
.1987f5		90 0f		bcc $198806	            bcc     _even
.1987f7		e2 20		sep #$20	_odd        sep     #$20
.1987f9		bf 30 00 1c	lda $1c0030,x	            lda     pbuf.ipv4.udp.data,x
.1987fd		97 08		sta [$08],y	            sta     [user.udp_info.buffer],y
.1987ff		e8		inx		            inx
.198800		c8		iny		            iny
.198801		c2 20		rep #$20	            rep     #$20
.198803		4c 10 88	jmp $198810	            jmp     _next
.198806		bf 30 00 1c	lda $1c0030,x	_even       lda     pbuf.ipv4.udp.data,x
.19880a		97 08		sta [$08],y	            sta     [user.udp_info.buffer],y
.19880c		e8		inx		            inx
.19880d		e8		inx		            inx
.19880e		c8		iny		            iny
.19880f		c8		iny		            iny
.198810		c4 0e		cpy $0e		_next       cpy     user.udp_info.copied,d
.198812		d0 f2		bne $198806	            bne     _even
.198814		fa		plx		            plx
.198815		20 6e 80	jsr $19806e	            jsr     kernel.net.pbuf_free_x
.198818		8a		txa		            txa     ; Set the NZ condition code.
.198819						_out
.198819		18		clc		            clc
.19881a		60		rts		            rts

;******  Return to file: src\kernel.asm

.19881b						    KERNEL_DATA
>19881b		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>198823		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198833		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>19883b		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>19884a		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198852		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198860		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198868		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198875		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>19887d		0b 0c 20 55 55 55 55 55 55 55 55 0d
>198889		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>198891		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>1988a1		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>1988b0		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>1988b8		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>1988c8		72 6e 65 6c 3a 20

;******  Processing file: src\version.asm

>1988ce		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+382 (2023-07-19)"
>1988d6		6c 70 68 61 2b 33 38 32 20 28 32 30 32 33 2d 30
>1988e6		37 2d 31 39 29

;******  Return to file: src\kernel.asm

>1988eb		0d 00				                .text $0D,$00
>1988ed		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>1988f5		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198905		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198915		f0 f0
>198917		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>19891f		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19892f		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19893f		f0 f0
>198941		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198949		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198959		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198969		f0 f0
>19896b		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198973		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198983		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198993		f0 f0
>198995		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>19899d		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1989ad		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1989bd		f0 f0
>1989bf		00 00 00 ff			fg_color_lut	.text $00, $00, $00, $FF
>1989c3		00 00 80 ff			                .text $00, $00, $80, $FF
>1989c7		00 80 00 ff			                .text $00, $80, $00, $FF
>1989cb		80 00 00 ff			                .text $80, $00, $00, $FF
>1989cf		00 80 80 ff			                .text $00, $80, $80, $FF
>1989d3		80 80 00 ff			                .text $80, $80, $00, $FF
>1989d7		80 00 80 ff			                .text $80, $00, $80, $FF
>1989db		80 80 80 ff			                .text $80, $80, $80, $FF
>1989df		00 45 ff ff			                .text $00, $45, $FF, $FF
>1989e3		13 45 8b ff			                .text $13, $45, $8B, $FF
>1989e7		00 00 20 ff			                .text $00, $00, $20, $FF
>1989eb		00 20 00 ff			                .text $00, $20, $00, $FF
>1989ef		20 00 00 ff			                .text $20, $00, $00, $FF
>1989f3		20 20 20 ff			                .text $20, $20, $20, $FF
>1989f7		40 40 40 ff			                .text $40, $40, $40, $FF
>1989fb		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1989ff		00 00 00 ff			bg_color_lut	.text $00, $00, $00, $FF
>198a03		00 00 80 ff			                .text $00, $00, $80, $FF
>198a07		00 80 00 ff			                .text $00, $80, $00, $FF
>198a0b		80 00 00 ff			                .text $80, $00, $00, $FF
>198a0f		00 20 20 ff			                .text $00, $20, $20, $FF
>198a13		20 20 00 ff			                .text $20, $20, $00, $FF
>198a17		20 00 20 ff			                .text $20, $00, $20, $FF
>198a1b		20 20 20 ff			                .text $20, $20, $20, $FF
>198a1f		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>198a23		13 45 8b ff			                .text $13, $45, $8B, $FF
>198a27		00 00 20 ff			                .text $00, $00, $20, $FF
>198a2b		00 20 00 ff			                .text $00, $20, $00, $FF
>198a2f		40 00 00 ff			                .text $40, $00, $00, $FF
>198a33		10 10 10 ff			                .text $10, $10, $10, $FF
>198a37		40 40 40 ff			                .text $40, $40, $40, $FF
>198a3b		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>198a3f		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>198a47		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>198a57		00
>198a58		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>198a60		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>198a70		00
>198a71		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>198a79		20 45 78 65 63 75 74 65 64 2e 0d 00
>198a85		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>198a8d		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>198a9d		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>198aa5		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>198ab5		64 2e 2e 2e 0d 00
>198abb		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>198ac3		20 50 72 65 73 65 6e 74 0d 00
>198acd		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>198ad5		65 73 65 6e 74 0d 00
>198adc		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>198ae4		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>198af4		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198b04		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>198b0c		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>198b1c		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198b29		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>198b31		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>198b3d		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>198b45		54 55 52 45 20 46 4f 55 4e 44 2e 00
>198b51		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>198b59		45 44 2e 00
>198b5d		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>198b65		47 20 42 4d 50 20 50 41 52 53 45 52 00
>198b72		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>198b7a		50 72 65 73 65 6e 74 3a 00
>198b83		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>198b8b		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>198b9b		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>198ba9		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>198bb1		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>198bc1		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>198bce		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>198bd6		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>198be6		72 64 2e 00
>198bea		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>198bf2		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198c02		49 44 45 20 64 72 69 76 65 2e 00
>198c0d		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>198c15		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198c25		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>198c33		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>198c3b		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>198c4a		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>198c52		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>198c61		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>198c69		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>198c79		2e 2e 00
>198c7c		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>198c84		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>198c8c		52 4f 52 00
>198c90		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>198c98		38 39 41 42 43 44 45 46 00
>198ca1						.align 256
>198d00		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198d08		37 38 39 30 2d 3d 08 09
>198d10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198d18		6f 70 5b 5d 0d 00 61 73
>198d20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198d28		27 60 00 5c 7a 78 63 76
>198d30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>198d38		00 20 00 81 82 83 84 85
>198d40		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>198d48		11 00 00 9d 00 1d 00 00
>198d50		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>198d58		8c 00 00 00 00 00 00 00
>198d60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198d68		00 00 00 00 00 00 00 00
>198d70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198d78		00 00 00 00 00 00 00 00
>198d80		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>198d88		26 2a 28 29 5f 2b 08 09
>198d90		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>198d98		4f 50 7b 7d 0d 00 41 53
>198da0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>198da8		22 7e 00 7c 5a 58 43 56
>198db0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198db8		00 20 00 00 00 00 00 00
>198dc0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198dc8		00 00 00 00 00 00 00 00
>198dd0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198dd8		00 00 00 00 00 00 00 00
>198de0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198de8		00 00 00 00 00 00 00 00
>198df0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198df8		00 00 00 00 00 00 00 00
>198e00		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198e08		37 38 39 30 2d 3d 08 09
>198e10		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>198e18		0f 10 5b 5d 0d 00 01 13
>198e20		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>198e28		27 00 00 5c 1a 18 03 16
>198e30		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198e38		00 20 00 00 00 00 00 00
>198e40		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198e48		00 00 00 00 00 00 00 00
>198e50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198e58		00 00 00 00 00 00 00 00
>198e60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198e68		00 00 00 00 00 00 00 00
>198e70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198e78		00 00 00 00 00 00 00 00
>198e80		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198e88		37 38 39 30 2d 3d 08 09
>198e90		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198e98		6f 70 5b 5d 0d 00 61 73
>198ea0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198ea8		27 60 00 5c 7a 78 63 76
>198eb0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198eb8		00 20 00 00 00 00 00 00
>198ec0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198ec8		00 00 00 00 00 00 00 00
>198ed0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198ed8		00 00 00 00 00 00 00 00
>198ee0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198ee8		00 00 00 00 00 00 00 00
>198ef0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198ef8		00 00 00 00 00 00 00 00
>198f00		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198f08		37 38 39 30 2d 3d 08 09
>198f10		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198f18		6f 70 5b 5d 0d 00 61 73
>198f20		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198f28		27 60 00 5c 7a 78 63 76
>198f30		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198f38		00 20 00 00 00 00 00 00
>198f40		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198f48		00 00 00 00 00 00 00 00
>198f50		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198f58		00 00 00 00 00 00 00 00
>198f60		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198f68		00 00 00 00 00 00 00 00
>198f70		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198f78		00 00 00 00 00 00 00 00
>198f80		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>198f88		00 00 00 00 00 00 00 00
>198f90		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>198f98		00 00 00 00 00 00 00 00
>198fa0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>198fa8		00 00 00 00 00 00 00 00
>198fb0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>198fb8		00 00 00 00 00 00 00 00
>198fc0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>198fc8		11 00 00 9d 00 1d 00 05
>198fd0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198fd8		00 00 00 00 00 00 00 00
>198fe0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198fe8		00 00 00 00 00 00 00 00
>198ff0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198ff8		00 00 00 00 00 00 00 00
>199000						.align 256
>199000		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>199008		34 37 3a 3d 3f 41 44 46
>199010		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>199018		57 58 5a 5b 5d 5e 60 61
>199020		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>199028		6d 6f 70 71 72 73 75 76
>199030		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>199038		80 81 82 83 84 85 86 87
>199040		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>199048		8f 90 91 92 93 93 94 95
>199050		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>199058		9d 9e 9e 9f a0 a1 a2 a2
>199060		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>199068		a9 aa ab ab ac ad ae ae
>199070		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>199078		b5 b5 b6 b7 b7 b8 b9 b9
>199080		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>199088		bf c0 c0 c1 c2 c2 c3 c4
>199090		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>199098		c9 ca ca cb cb cc cd cd
>1990a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1990a8		d2 d3 d4 d4 d5 d5 d6 d6
>1990b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1990b8		db dc dc dd de de df df
>1990c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1990c8		e4 e4 e5 e5 e6 e6 e7 e7
>1990d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1990d8		ec ec ed ed ee ee ef ef
>1990e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1990e8		f4 f4 f5 f5 f6 f6 f7 f7
>1990f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1990f8		fb fc fc fd fd fe fe ff
>199100						.align 256
>199100		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>199108		25 27 2a 2c 2e 30 32 34
>199110		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>199118		44 46 47 49 4a 4c 4d 4f
>199120		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>199128		5b 5c 5d 5e 60 61 62 63
>199130		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>199138		6d 6e 70 71 72 73 74 75
>199140		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>199148		7e 7f 80 81 82 83 84 84
>199150		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>199158		8d 8e 8e 8f 90 91 92 93
>199160		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>199168		9a 9b 9c 9d 9e 9f 9f a0
>199170		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>199178		a7 a8 a9 aa aa ab ac ad
>199180		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>199188		b3 b4 b5 b6 b6 b7 b8 b8
>199190		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>199198		bf bf c0 c1 c2 c2 c3 c4
>1991a0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>1991a8		ca ca cb cc cc cd ce ce
>1991b0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>1991b8		d4 d5 d6 d6 d7 d7 d8 d9
>1991c0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>1991c8		de df e0 e0 e1 e1 e2 e3
>1991d0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>1991d8		e8 e9 e9 ea ea eb ec ec
>1991e0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>1991e8		f1 f2 f3 f3 f4 f4 f5 f5
>1991f0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>1991f8		fb fb fc fc fd fd fe ff
>199200						.align 256
>199200		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		  .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>199208		83 dd ce 39 cd c5 3b 15
>199210		22 55 3b 94 e0 33 1f 38					          .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>199218		87 12 31 65 89 27 88 42
>199220		b2 32 72 84 b2 b2 31 52					          .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>199228		94 ce 56 ec fe da 58 c9
>199230		c8 5b 53 2a 08 3b 19 c1					          .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>199238		d0 10 2c b2 4b ea 32 61
>199240		da 34 33 8f 2b da 49 89					          .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>199248		a1 e6 ca 2d b3 ce b0 79
>199250		44 aa 32 82 91 e9 29 16					          .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>199258		5f e3 fb bd 15 2e be f5
>199260		e9 4a e4 2e 60 24 94 35					          .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>199268		8d 8f 2c 80 0a 5e 99 36
>199270		ac ab 21 26 42 7c 5e bc					          .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>199278		13 52 44 2f e3 ef 44 a2
>199280		86 c1 9c 47 5f 36 6d 02					          .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>199288		be 23 02 58 0a 52 5e b4
>199290		9f 06 08 c9 97 cb 9e dd					          .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>199298		d5 cf 3e df c4 9e da bb
>1992a0		9b 5d c9 f5 d9 c3 7e 87					          .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>1992a8		77 7d b1 3b 4a 68 35 6e
>1992b0		ee 47 ad 8f fd 73 2e 46					          .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>1992b8		b5 8f 44 63 55 6f e1 50
>1992c0		f4 b6 a3 4f 68 c4 a5 a4					          .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>1992c8		57 74 b9 bd 05 14 50 eb
>1992d0		a5 5c 57 2f 99 dc 2e 8a					          .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>1992d8		44 bc ec db 22 58 fc be
>1992e0		5f 3f 50 bd 2a 36 ab ae					          .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>1992e8		24 aa 82 11 5c 9f 43 4d
>1992f0		8f 0c 20 00 91 b6 45 9e					          .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>1992f8		3e 3d 66 7e 0a 1c 6b 74
>199300						.align 16
>199300		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>199308		01 01 01 00 00 00 00 00
>199310		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>199318		ff ff ff 01 00 00 00 00
>199320		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>199328		01 55 ff ff 01 00 00 00
>199330		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>199338		ff ff ff ff 01 00 00 00
>199340		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>199348		ff ff 01 ff ff 01 00 00
>199350		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>199358		01 ff ff 01 ff 01 00 00
>199360		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>199368		ff 01 ff ff ff 01 00 00
>199370		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>199378		ff ff ff ff ff 01 01 00
>199380		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>199388		ff ff ff ff 01 ff ff 01
>199390		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>199398		ff ff ff ff ff ff ff 01
>1993a0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>1993a8		55 55 01 ff ff 55 01 00
>1993b0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>1993b8		01 01 55 ff 55 01 00 00
>1993c0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>1993c8		01 55 55 55 01 00 00 00
>1993d0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>1993d8		01 55 55 01 00 00 00 00
>1993e0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>1993e8		00 01 01 00 00 00 00 00
>1993f0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>1993f8		00 00 00 00 00 00 00 00
>1a0000		5c 67 8a 1a 5c 79 70 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c 6b 27 1a 5c ba 02 1a 5c 58 00 1a 5c b8 00 1a
>1a0018		5c 0f 04 1a 5c 5e 02 1a 5c 79 02 1a 5c 80 02 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>1a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>1a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>1a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>1a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>1a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>1a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>1a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>1a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>1a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>1a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>1a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>1a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>1a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>1a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>1a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>1a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>1a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>1a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>1a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>1a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>1a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>1a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>1a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>1a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>1a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>1a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>1a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>1a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>1a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>1a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>1a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>1a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>1a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>1a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>1a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>1a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>1a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>1a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>1a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>1a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>1a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>1a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 20 69
>1a0338		03 a2 00 00 a9 00 9f 18 f0 1a e8 e0 40 00 d0 f6
>1a0348		a9 80 8f b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00
>1a0358		8f 00 02 af 8f 0c 02 af 8f 18 02 af 8f 24 02 af
>1a0368		60 08 e2 20 af 0e 08 af 09 08 8f 0e 08 af af 00
>1a0378		08 af 8f 84 e8 af af 02 08 af 8f 85 e8 af a9 03
>1a0388		8f 86 e8 af af 0e 08 af 29 f7 8f 0e 08 af ea ea
>1a0398		ea a9 01 8f 86 e8 af 28 60 08 e2 20 48 48 a9 00
>1a03a8		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>1a03b8		f8 68 28 60 08 e2 20 48 48 a9 01 22 3c 10 00 68
>1a03c8		22 18 10 00 af 89 0f 00 29 01 d0 f8 68 28 60 08
>1a03d8		c2 20 48 e2 20 a9 0d 20 18 00 c2 20 68 28 60 08
>1a03e8		22 78 10 00 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a03f8		68 28 e2 20 a5 b6 1a 85 b6 cf 13 00 00 90 05 20
>1a0408		14 00 64 b6 2b 28 60 da 5a 0b 08 08 c2 20 48 a9
>1a0418		00 08 5b 68 28 e2 20 c2 10 8f b5 08 00 af b4 08
>1a0428		00 29 20 f0 07 af b5 08 00 20 28 00 af b4 08 00
>1a0438		29 80 f0 07 af b5 08 00 20 a1 03 af b4 08 00 29
>1a0448		40 f0 14 af b5 08 00 20 bc 03 af b5 08 00 c9 0d
>1a0458		d0 05 a9 0a 20 bc 03 28 2b 7a fa 60 08 e2 20 bd
>1a0468		00 00 f0 06 20 18 00 e8 80 f5 28 60 08 c2 20 48
>1a0478		48 4a 4a 4a 4a 4a 4a 4a 4a 20 8e 04 68 29 ff 00
>1a0488		20 8e 04 68 28 60 08 c2 20 48 e2 20 48 4a 4a 4a
>1a0498		4a 20 a5 04 68 20 a5 04 c2 20 68 28 60 08 c2 30
>1a04a8		da 29 0f 00 aa bf 00 d0 1a 20 18 00 fa 28 60 08
>1a04b8		c2 30 48 da 5a 8b 0b c2 30 a3 0b 18 69 03 00 aa
>1a04c8		e2 20 a9 1a 48 ab bd 00 00 f0 06 20 a1 03 e8 80
>1a04d8		f5 c2 30 2b ab 7a fa 68 28 60 08 e2 20 c9 5b b0
>1a04e8		04 c9 41 b0 0b c9 7b b0 04 c9 61 b0 03 28 18 60
>1a04f8		28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 03 28 18
>1a0508		60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 13 c9
>1a0518		67 b0 04 c9 61 b0 0b c9 47 b0 04 c9 41 b0 03 28
>1a0528		18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30 b0 12
>1a0538		c9 67 b0 04 c9 61 b0 0f c9 47 b0 04 c9 41 b0 09
>1a0548		28 60 38 e9 30 80 f9 29 df 38 e9 37 80 f2 08 e2
>1a0558		20 c9 7b b0 06 c9 61 90 02 29 df 28 60 08 e2 20
>1a0568		c2 10 bd 00 00 f0 09 20 56 05 9d 00 00 e8 80 f2
>1a0578		28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>1a0588		48 06 23 26 25 a5 23 85 0c a5 25 85 0e 06 0c 26
>1a0598		0e 06 0c 26 0e 18 a5 23 65 0c 85 23 a5 25 65 0e
>1a05a8		85 25 68 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a05b8		68 28 c2 20 a5 23 8f 1a 01 00 a9 0a 00 8f 18 01
>1a05c8		00 af 1c 01 00 85 23 64 25 af 1e 01 00 85 29 64
>1a05d8		2b e2 20 a9 00 85 27 85 2d 2b 28 60 08 0b 08 c2
>1a05e8		20 48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00
>1a05f8		a9 64 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af
>1a0608		1e 01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b
>1a0618		28 60 08 c2 20 a5 23 d0 08 a5 25 d0 04 28 e2 02
>1a0628		60 28 c2 02 60 08 c2 30 a9 ff ff 85 23 85 25 e2
>1a0638		20 a9 00 85 27 28 60 08 c2 30 a9 00 00 85 23 85
>1a0648		25 e2 20 a9 00 85 27 28 60 08 e2 20 a5 27 c9 00
>1a0658		f0 07 c9 01 d0 05 20 ff 5b 28 60 08 c2 20 48 a9
>1a0668		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a0678		ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 2d c9
>1a0688		00 f0 37 c9 01 d0 35 c2 20 a5 25 48 a5 23 48 c2
>1a0698		20 a5 29 85 23 a5 2b 85 25 e2 20 a9 01 85 27 20
>1a06a8		ff 5b c2 20 a5 23 85 29 a5 25 85 2b e2 20 a9 00
>1a06b8		85 2d c2 20 68 85 23 68 85 25 28 60 08 c2 20 48
>1a06c8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a06d8		29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 27
>1a06e8		c9 02 d0 02 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a06f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a0708		e2 20 dc d4 08 08 e2 20 a5 27 c9 00 f0 07 c9 01
>1a0718		d0 0b 20 ff 5b c2 20 a5 25 d0 21 28 60 08 c2 20
>1a0728		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a0738		20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20 48
>1a0748		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a0758		29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a5 27
>1a0768		c9 00 f0 07 c9 01 d0 11 20 ff 5b a5 26 d0 29 a5
>1a0778		25 d0 25 a5 24 d0 21 28 60 08 c2 20 48 a9 00 08
>1a0788		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a0798		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a07a8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a07b8		5b 1e e2 20 dc d4 08 08 e2 20 a5 27 c9 01 f0 26
>1a07c8		c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a07d8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a07e8		dc d4 08 20 f9 5b 28 60 08 e2 20 a5 2d c9 01 f0
>1a07f8		26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0808		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a0818		20 dc d4 08 20 21 08 28 60 c2 20 a5 25 48 a5 23
>1a0828		48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9 00 85
>1a0838		27 20 f9 5b c2 20 a5 23 85 29 a5 25 85 2b e2 20
>1a0848		a9 01 85 2d c2 20 68 85 23 68 85 25 60 08 e2 20
>1a0858		a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2 20 48 a9 00
>1a0868		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a0878		00 20 5b 1e e2 20 dc d4 08 a5 2d c9 00 f0 16 c9
>1a0888		01 d0 d7 20 f9 5b 80 0d a5 2d c9 01 f0 07 c9 00
>1a0898		d0 c8 20 21 08 e2 20 a5 27 28 60 08 e2 20 a5 27
>1a08a8		c9 02 d0 25 a5 2d c9 02 f0 24 08 c2 20 48 a9 00
>1a08b8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a08c8		00 20 5b 1e e2 20 dc d4 08 20 55 08 a5 27 28 60
>1a08d8		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 64 23
>1a08e8		64 25 e2 20 64 27 a7 00 c9 26 f0 44 e2 20 a7 00
>1a08f8		20 fb 04 90 76 20 7a 05 38 e9 30 c2 20 29 ff 00
>1a0908		18 65 23 85 23 a5 25 69 00 00 85 25 20 1a 21 80
>1a0918		db 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a0928		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a0938		20 1a 21 a7 00 c9 48 f0 04 c9 68 d0 d4 20 1a 21
>1a0948		e2 20 a7 00 20 0c 05 90 22 20 2d 05 c2 20 06 23
>1a0958		26 25 06 23 26 25 06 23 26 25 06 23 26 25 29 ff
>1a0968		00 18 65 23 85 23 20 1a 21 80 d5 2b 28 60 08 c2
>1a0978		30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2 20 b7 1a f0
>1a0988		10 c9 20 f0 06 c9 09 f0 02 28 60 88 c0 ff ff d0
>1a0998		ec a9 00 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a09a8		c2 30 a5 1a 85 00 e2 20 a5 1c 85 02 20 3b 21 a7
>1a09b8		00 20 fb 04 90 0c 20 d8 08 c2 20 a5 23 85 d7 20
>1a09c8		3b 21 c2 20 a5 00 85 1a e2 20 a5 02 85 1c 20 ea
>1a09d8		09 e2 20 20 5b 0a c9 00 f0 05 20 06 0c 80 f4 2b
>1a09e8		28 60 08 c2 20 a5 1a 85 00 a5 1c 85 02 a2 00 00
>1a09f8		e2 20 a0 00 00 e0 00 00 f0 0d b7 00 f0 53 c9 3a
>1a0a08		f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9 52 f0 10 c9
>1a0a18		72 d0 26 b7 00 f0 3a c9 52 f0 04 c9 72 d0 1a c8
>1a0a28		b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d c8 b7 00 f0
>1a0a38		20 c9 4d f0 0a c9 6d f0 06 e8 20 1a 21 80 b3 a7
>1a0a48		00 c9 3a d0 03 20 1a 21 a9 03 85 1e a9 91 20 06
>1a0a58		0c 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0a68		20 a9 7f 85 1e c2 10 20 bb 0b a5 1e d0 03 4c fb
>1a0a78		0a c2 20 a5 1a 85 00 e2 20 a5 1c 85 02 c2 20 64
>1a0a88		04 64 06 e2 30 a0 00 b7 00 f0 da c9 91 f0 d6 c8
>1a0a98		c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05 20 1d 0b 80
>1a0aa8		28 a5 1e c9 03 90 19 c2 20 a5 00 c5 1a d0 08 e2
>1a0ab8		20 a5 02 c5 1c f0 09 e2 20 a7 04 20 42 51 b0 09
>1a0ac8		e2 20 20 2d 0b c9 00 d0 11 c2 20 a5 00 85 04 e2
>1a0ad8		20 a5 02 85 06 20 1a 21 80 a9 c9 81 d0 15 20 76
>1a0ae8		09 c9 00 f0 11 89 80 f0 08 c9 90 f0 04 a9 af 80
>1a0af8		02 a9 81 2b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a0b08		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a0b18		e2 20 dc d4 08 08 e2 20 20 1a 21 a7 00 f0 04 c9
>1a0b28		22 d0 f5 28 60 da 5a 08 0b 08 c2 20 48 a9 00 08
>1a0b38		5b 68 28 c2 20 a5 04 d0 0a e2 20 a5 04 d0 04 a9
>1a0b48		00 80 0a e2 20 a7 04 20 42 51 a9 00 2a 85 28 c2
>1a0b58		30 a9 fb 0c 85 08 e2 20 a9 1a 85 0a a2 80 00 e2
>1a0b68		20 a0 01 00 b7 08 f0 31 c5 1e d0 32 c2 30 a0 02
>1a0b78		00 b7 08 85 0c e2 20 a9 1a 85 0e a5 28 f0 07 a7
>1a0b88		0c 20 42 51 b0 18 e2 10 a0 00 b7 00 20 56 05 d7
>1a0b98		0c d0 0b c8 c4 1e 90 f2 8a 2b 28 7a fa 60 c2 30
>1a0ba8		18 a5 08 69 08 00 85 08 e2 20 a5 0a 69 00 85 0a
>1a0bb8		e8 80 ac 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>1a0bc8		c2 30 a9 fb 0c 85 08 a9 1a 00 85 0a 64 0c e2 20
>1a0bd8		a0 01 00 b7 08 f0 1d c5 1e b0 06 c5 0c 90 02 85
>1a0be8		0c c2 20 18 a5 08 69 08 00 85 08 a5 0a 69 00 00
>1a0bf8		85 0a 80 da e2 20 a5 0c 85 1e ab 2b 28 60 08 0b
>1a0c08		08 c2 20 48 a9 00 08 5b 68 28 e2 20 87 00 c2 20
>1a0c18		18 a5 00 69 01 00 85 08 a5 02 69 00 00 85 0a e2
>1a0c28		10 a4 1e 88 e2 20 b7 08 87 08 f0 13 c2 20 18 a5
>1a0c38		08 69 01 00 85 08 a5 0a 69 00 00 85 0a 80 e5 2b
>1a0c48		28 60 08 c2 30 29 7f 00 0a 0a 0a 18 69 fb 0c aa
>1a0c58		28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a0c68		e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20 4a 0c
>1a0c78		bd 00 00 c2 20 29 0f 00 2b ab 28 60 08 8b 0b 08
>1a0c88		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48
>1a0c98		ab 68 28 c2 30 20 4a 0c bd 04 00 2b ab 28 60 08
>1a0ca8		8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a0cb8		a9 1a 48 ab 68 28 e2 20 c2 10 20 4a 0c bd 00 00
>1a0cc8		c2 20 29 f0 00 2b ab 28 60 08 8b 0b 08 c2 20 48
>1a0cd8		a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28
>1a0ce8		e2 20 c2 10 20 4a 0c bd 06 00 c2 20 29 ff 00 2b
>1a0cf8		ab 28 60 03 01 10 d0 d8 27 02 00 03 01 12 d0 18
>1a0d08		28 02 00 02 01 14 d0 4f 28 02 00 02 01 16 d0 86
>1a0d18		28 02 00 02 03 18 d0 90 28 02 00 00 01 1c d0 a3
>1a0d28		28 02 00 04 02 1e d0 61 2a 02 00 04 02 21 d0 21
>1a0d38		2a 02 00 04 02 24 d0 e1 29 02 00 04 01 27 d0 21
>1a0d48		29 02 00 04 01 29 d0 a1 29 02 00 04 01 2b d0 61
>1a0d58		29 02 00 05 03 2d d0 0b 29 01 00 06 03 31 d0 dd
>1a0d68		28 02 00 07 02 35 d0 f4 28 02 00 ff 01 38 d0 00
>1a0d78		00 00 00 40 01 3a d0 00 00 00 00 20 03 3c d0 74
>1a0d88		41 00 00 20 05 40 d0 79 45 00 00 20 03 46 d0 c4
>1a0d98		44 00 00 20 04 4a d0 64 44 00 00 20 03 4f d0 5b
>1a0da8		44 00 00 20 02 53 d0 f3 43 00 00 50 04 56 d0 00
>1a0db8		00 00 00 50 04 5b d0 00 00 00 00 20 05 60 d0 36
>1a0dc8		43 00 00 20 06 66 d0 af 43 00 00 20 03 6d d0 8b
>1a0dd8		41 00 00 50 02 71 d0 00 00 00 00 50 04 74 d0 00
>1a0de8		00 00 00 20 04 79 d0 7f 42 00 00 20 02 7e d0 85
>1a0df8		41 00 00 20 04 81 d0 88 41 00 00 50 05 86 d0 00
>1a0e08		00 00 00 50 05 8c d0 00 00 00 00 20 04 92 d0 82
>1a0e18		41 00 00 20 03 97 d0 ba 44 00 00 20 04 9b d0 55
>1a0e28		41 00 00 20 04 a0 d0 e5 40 00 00 20 05 a5 d0 7b
>1a0e38		40 00 00 20 05 ab d0 08 40 00 00 20 03 b1 d0 04
>1a0e48		40 00 00 20 04 b5 d0 e5 3e 00 00 20 04 ba d0 f7
>1a0e58		3f 00 00 20 07 bf d0 fb 3f 00 00 20 03 c7 d0 38
>1a0e68		3e 00 00 20 04 cb d0 a1 3d 00 00 00 01 d0 d0 a1
>1a0e78		2a 01 00 30 03 d2 d0 91 4b 00 00 30 04 d6 d0 e1
>1a0e88		4b 00 00 30 05 db d0 aa 4c 00 00 30 05 e1 d0 37
>1a0e98		4c 00 00 30 04 e7 d0 09 4d 00 00 30 03 ec d0 5e
>1a0ea8		4d 00 00 30 03 f0 d0 a3 4d 00 00 30 03 f4 d0 2c
>1a0eb8		4e 00 00 30 03 f8 d0 b5 4e 00 00 30 03 fc d0 17
>1a0ec8		4f 00 00 30 04 00 d1 03 4b 00 00 30 03 05 d1 a2
>1a0ed8		4a 00 00 30 04 09 d1 54 4a 00 00 30 03 0e d1 fe
>1a0ee8		49 00 00 30 05 12 d1 35 49 00 00 30 06 18 d1 54
>1a0ef8		48 00 00 30 04 1f d1 9f 47 00 00 10 03 24 d1 7e
>1a0f08		50 00 00 10 03 28 d1 49 50 00 00 10 04 2c d1 52
>1a0f18		6c 00 00 10 04 31 d1 95 50 00 00 10 03 36 d1 79
>1a0f28		69 00 00 20 05 3a d1 24 6b 00 00 10 04 40 d1 ff
>1a0f38		6b 00 00 20 05 45 d1 0b 6d 00 00 20 03 4b d1 2a
>1a0f48		6e 00 00 10 04 4f d1 97 6d 00 00 20 06 54 d1 a0
>1a0f58		6e 00 00 20 04 5b d1 c4 6f 00 00 10 07 60 d1 46
>1a0f68		50 00 00 20 03 68 d1 2f 3d 00 00 20 05 6c d1 3f
>1a0f78		3c 00 00 20 09 72 d1 60 2c 00 00 20 09 7c d1 ed
>1a0f88		2b 00 00 20 0a 86 d1 1d 2c 00 00 20 07 91 d1 5a
>1a0f98		2b 00 00 30 08 99 d1 56 46 00 00 20 07 a2 d1 ef
>1a0fa8		2a 00 00 30 08 aa d1 c0 46 00 00 20 08 b3 d1 a5
>1a0fb8		2d 00 00 20 08 bc d1 d9 2c 00 00 20 06 c5 d1 df
>1a0fc8		2e 00 00 20 09 cc d1 e7 2f 00 00 20 04 d6 d1 44
>1a0fd8		31 00 00 20 04 db d1 b5 31 00 00 20 04 e0 d1 4e
>1a0fe8		32 00 00 20 06 e5 d1 8a 33 00 00 20 08 ec d1 28
>1a0ff8		34 00 00 20 0a f5 d1 76 34 00 00 20 07 00 d2 ad
>1a1008		35 00 00 20 07 08 d2 2b 36 00 00 20 08 10 d2 9d
>1a1018		36 00 00 20 06 19 d2 da 36 00 00 20 07 20 d2 0a
>1a1028		3a 00 00 50 06 28 d2 00 00 00 00 50 04 2f d2 00
>1a1038		00 00 00 20 06 34 d2 1f 3c 00 00 30 03 3b d2 6d
>1a1048		4f 00 00 30 03 3f d2 25 47 00 00 30 03 43 d2 80
>1a1058		4f 00 00 30 03 47 d2 96 4f 00 00 30 03 4b d2 ac
>1a1068		4f 00 00 30 02 4f d2 c2 4f 00 00 30 04 52 d2 d8
>1a1078		4f 00 00 30 04 57 d2 ee 4f 00 00 30 04 5c d2 04
>1a1088		50 00 00 30 03 61 d2 1a 50 00 00 30 03 65 d2 30
>1a1098		50 00 00 30 05 69 d2 7b 47 00 00 00 00 00 00 00
>1a10a8		00 00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a10b8		30 a9 ff ff 85 ba e2 20 a9 17 85 bc c2 20 64 b7
>1a10c8		64 bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85
>1a10d8		ea c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48
>1a10e8		a5 10 48 20 83 11 b0 03 20 07 11 20 0f 13 c2 20
>1a10f8		68 85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08
>1a1108		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca
>1a1118		86 0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc
>1a1128		e9 00 85 c2 20 0f 13 e2 20 a5 ea a0 00 00 97 c3
>1a1138		a9 00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00
>1a1148		00 97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3
>1a1158		e2 20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7
>1a1168		e2 20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba
>1a1178		e2 20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20
>1a1188		48 a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2
>1a1198		20 a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2
>1a11a8		20 a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28 18 60
>1a11b8		c2 20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85
>1a11c8		ce c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00
>1a11d8		85 0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e
>1a11e8		69 00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e
>1a11f8		c5 ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57
>1a1208		c2 20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85
>1a1218		bf 4c c0 12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5
>1a1228		0e 69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2
>1a1238		20 a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5
>1a1248		cb 85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8
>1a1258		b7 cf 85 cb 4c 9d 11 c2 20 a0 02 00 b7 c9 97 cf
>1a1268		e2 20 c8 c8 b7 c9 97 cf 4c c0 12 c2 20 a0 05 00
>1a1278		b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02
>1a1288		00 b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5
>1a1298		cf d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2
>1a12a8		20 a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf
>1a12b8		e2 20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20
>1a12c8		a5 cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9
>1a12d8		c2 20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97
>1a12e8		c3 c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97
>1a12f8		c3 e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9
>1a1308		00 97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00
>1a1318		85 c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5
>1a1328		c5 f0 04 c9 18 b0 12 c2 20 a5 c3 f0 0c e2 20 a0
>1a1338		01 00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5
>1a1348		f0 04 c9 18 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01
>1a1358		00 b7 c3 3a 97 c3 d0 03 20 67 13 28 60 00 ea 08
>1a1368		c2 20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf
>1a1378		c2 20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8
>1a1388		e2 20 97 c3 4c 4e 14 e2 20 a5 bf c5 c5 90 28 c2
>1a1398		20 a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3
>1a13a8		e2 20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20
>1a13b8		a5 c5 85 bf 4c 4e 14 c2 20 a5 bd 85 08 e2 20 a5
>1a13c8		bf 85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b
>1a13d8		c2 20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00
>1a13e8		b7 08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3
>1a13f8		a0 02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c 4e 14
>1a1408		c2 20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0
>1a1418		19 c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08
>1a1428		85 0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02
>1a1438		00 97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2
>1a1448		20 a0 02 00 97 c3 20 53 14 28 60 08 c2 20 a5 bd
>1a1458		85 c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20
>1a1468		a5 c5 d0 03 4c f6 14 c2 20 a0 02 00 b7 c3 85 0c
>1a1478		e2 20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85
>1a1488		10 e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0
>1a1498		08 e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3
>1a14a8		85 0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3
>1a14b8		e2 20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85
>1a14c8		0c e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c
>1a14d8		97 c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7
>1a14e8		0c 97 c3 e2 20 c8 c8 b7 0c 97 c3 4c 6f 14 28 60
>1a14f8		08 c2 20 64 16 64 18 28 60 08 c2 30 a5 16 d0 16
>1a1508		a5 18 d0 12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3
>1a1518		85 18 64 19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5
>1a1528		bb 3a c5 17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b
>1a1538		68 28 e2 20 a9 03 8f d3 08 00 c2 20 29 ff 00 20
>1a1548		5b 1e e2 20 dc d4 08 28 60 c9 00 d0 05 c0 01 00
>1a1558		f0 05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25 10
>1a1568		1a 18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49 ff
>1a1578		ff 69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12 64
>1a1588		14 a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10 a5
>1a1598		12 65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2
>1a15a8		20 20 01 15 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9
>1a15b8		20 97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20
>1a15c8		51 15 b5 10 29 0f 20 51 15 ca 10 eb c0 01 00 d0
>1a15d8		0c a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00 97
>1a15e8		16 28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00
>1a15f8		f0 04 e8 c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00
>1a1608		08 5b 68 28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7
>1a1618		29 f0 25 b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20
>1a1628		a9 01 00 85 23 e2 20 64 25 80 15 c2 20 a9 ff ff
>1a1638		85 23 e2 20 85 25 80 08 c2 20 64 23 e2 20 64 25
>1a1648		e2 20 a9 00 85 27 2b 28 60 08 0b 8b 08 c2 20 48
>1a1658		a9 00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20
>1a1668		a5 25 48 ab c2 20 68 28 a6 23 20 ed 15 84 0c 08
>1a1678		c2 20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20
>1a1688		ed 15 c2 20 98 38 65 0c aa e2 20 a9 02 20 d3 10
>1a1698		c2 20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08
>1a16a8		c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd
>1a16b8		00 00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48
>1a16c8		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97
>1a16d8		08 f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5
>1a16e8		0a 85 25 a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b
>1a16f8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5
>1a1708		08 48 c2 30 08 c2 20 48 e2 20 a5 25 48 ab c2 20
>1a1718		68 28 a6 23 20 ed 15 98 aa e8 e2 20 a9 02 20 d3
>1a1728		10 c2 20 a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20
>1a1738		b7 23 97 08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5
>1a1748		0a 85 25 c2 20 68 85 08 68 85 0a ab 2b 28 7a fa
>1a1758		60 08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9
>1a1768		84 92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b
>1a1778		c4 8f b0 12 a5 29 d0 0e 4c d7 17 20 01 15 e2 20
>1a1788		a9 00 87 16 80 39 20 01 15 c2 30 18 a5 23 65 29
>1a1798		85 23 a5 25 69 00 00 85 25 a0 00 00 e2 20 a7 23
>1a17a8		97 16 f0 1b c2 20 18 a5 23 69 01 00 85 23 a5 25
>1a17b8		69 00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2
>1a17c8		20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28
>1a17d8		60 08 c2 30 20 00 16 a5 23 c9 ff ff d0 05 20 2d
>1a17e8		06 80 03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23
>1a17f8		c9 01 00 d0 05 20 2d 06 80 03 20 3f 06 28 60 08
>1a1808		c2 30 20 00 16 a5 23 c9 00 00 d0 05 20 2d 06 80
>1a1818		03 20 3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 00
>1a1828		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>1a1838		20 00 16 a5 23 c9 ff ff f0 05 20 2d 06 80 03 20
>1a1848		3f 06 28 60 08 c2 30 20 00 16 a5 23 c9 01 00 f0
>1a1858		05 20 2d 06 80 03 20 3f 06 28 60 08 e2 20 a5 27
>1a1868		c9 02 d0 1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11
>1a1878		20 01 15 a9 00 87 16 c2 20 a5 16 85 23 a5 18 85
>1a1888		25 28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68
>1a1898		28 c2 30 a9 00 00 85 00 85 1a a9 16 00 85 02 85
>1a18a8		1c 22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55
>1a18b8		90 10 c5 59 f0 02 b0 05 20 ee 18 80 e4 28 2b 7a
>1a18c8		68 60 20 f7 21 80 da 08 c2 20 48 a9 00 08 5b 68
>1a18d8		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a18e8		1e e2 20 dc d4 08 08 c2 30 85 23 64 25 20 60 15
>1a18f8		a5 16 1a 85 23 a5 18 85 25 20 f5 45 18 a5 1a 69
>1a1908		04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20 20
>1a1918		18 00 c2 20 20 2d 19 90 fb e2 20 a9 0d 20 18 00
>1a1928		20 f7 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b
>1a1938		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10
>1a1948		a7 00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00
>1a1958		0a 0a 0a 18 69 fb 0c 85 08 a9 1a 00 69 00 00 85
>1a1968		0a 08 e2 20 48 a9 1a 48 ab 68 28 a0 02 00 b7 08
>1a1978		aa 20 64 04 c2 20 20 1a 21 ab 2b 28 18 60 ab 2b
>1a1988		28 38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21
>1a1998		a9 ff ff 85 23 85 25 85 29 85 2b e2 20 85 27 85
>1a19a8		2d 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28
>1a19b8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd
>1a19c8		00 00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00
>1a19d8		99 04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28
>1a19e8		60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a19f8		20 48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05
>1a1a08		00 85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00
>1a1a18		e2 20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60
>1a1a28		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a1a38		48 a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99 00
>1a1a48		00 88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48
>1a1a58		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a1a68		e2 20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20 29
>1a1a78		ff 00 7a ab 2b 28 60 08 e2 20 a9 01 20 28 1a 28
>1a1a88		60 5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>1a1a98		a4 21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a
>1a1aa8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a1ab8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a1ac8		48 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a1ad8		20 48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0
>1a1ae8		11 20 5a 0c 85 0c b9 01 00 20 5a 0c c5 0c f0 02
>1a1af8		90 08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68
>1a1b08		38 60 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 09
>1a1b18		1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>1a1b28		4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 3b 21 e2 20
>1a1b38		a7 00 c9 90 f0 09 c9 2c d0 0a 20 1a 21 80 cf 20
>1a1b48		1a 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a1b58		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a1b68		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a1b78		0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a1b88		d4 08 08 20 15 54 90 47 e2 20 a5 ea 29 80 d0 06
>1a1b98		20 16 52 4c d5 1b 20 88 51 90 53 c2 20 a5 c2 48
>1a1ba8		a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8 c8 b7 08
>1a1bb8		85 c2 e2 20 a9 8f 20 27 22 20 7f 1a 20 0a 1b 20
>1a1bc8		ec 68 20 89 1a c2 20 68 85 c2 68 85 c0 28 60 08
>1a1bd8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a1be8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a1bf8		20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00
>1a1c08		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 0b 08
>1a1c18		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 1a 21
>1a1c28		a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c
>1a1c38		e2 20 a9 02 a6 0c e8 20 01 15 a0 00 00 c4 0c f0
>1a1c48		29 a7 00 97 16 c8 20 1a 21 80 f2 08 c2 20 48 a9
>1a1c58		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a1c68		ff 00 20 5b 1e e2 20 dc d4 08 a9 00 97 16 c2 20
>1a1c78		a5 16 85 23 a5 18 85 25 a9 02 00 85 27 20 1a 21
>1a1c88		2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20 84 0c
>1a1c98		85 2f 20 7f 1a 08 e2 20 48 a9 00 48 ab 68 28 20
>1a1ca8		af 1c 20 89 1a 28 60 20 1a 21 6c 2f 08 48 08 0b
>1a1cb8		8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 51 1a
>1a1cc8		89 80 00 f0 37 48 20 84 0c 85 2f 68 20 d1 0c c9
>1a1cd8		01 00 f0 08 c2 30 a2 29 08 20 e9 19 c2 30 a2 23
>1a1ce8		08 20 e9 19 08 e2 20 48 a9 00 48 ab 68 28 20 06
>1a1cf8		1d a2 23 08 20 ab 19 ab 2b 28 68 60 00 ea 6c 2f
>1a1d08		08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a1d18		a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c
>1a1d28		cc 1d 30 33 c9 20 d0 03 4c c6 1d c9 3a b0 04 c9
>1a1d38		30 b0 56 c9 26 f0 52 c9 22 d0 03 4c df 1d c9 5b
>1a1d48		b0 07 c9 41 90 03 4c eb 1d c9 7b b0 07 c9 61 90
>1a1d58		03 4c eb 1d 4c cc 1d c9 8f f0 40 c9 90 f0 41 20
>1a1d68		a7 0c c9 30 d0 0c 20 8b 1c a2 23 08 20 ab 19 4c
>1a1d78		21 1d c9 00 d0 4e a7 00 a6 21 e0 ff 7f f0 05 20
>1a1d88		c8 1a b0 12 20 28 1a 80 35 c2 20 20 37 5a a2 23
>1a1d98		08 20 ab 19 80 83 20 b5 1c 80 dd 20 28 1a 80 1e
>1a1da8		e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01 00 c9 01
>1a1db8		f0 3d c9 8f f0 05 20 b5 1c 80 ee 20 51 1a 20 1a
>1a1dc8		21 4c 21 1d a6 21 e0 ff 7f b0 24 bd 01 00 c9 01
>1a1dd8		f0 1d 20 b5 1c 80 ed 20 15 1c a2 23 08 20 ab 19
>1a1de8		4c 21 1d 20 8a 1b a2 23 08 20 ab 19 4c 21 1d a2
>1a1df8		23 08 20 e9 19 fa 28 60 08 0b 8b 08 e2 20 48 a9
>1a1e08		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a1e18		30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08 c2 20 48
>1a1e28		a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6 33 2b 28
>1a1e38		60 08 c2 30 29 ff 00 20 22 1e 28 60 08 0b 08 c2
>1a1e48		20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6 33 b2 33
>1a1e58		2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a1e68		08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 23 a9 00
>1a1e78		00 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85 e9 c2
>1a1e88		20 a9 b5 1e 85 e7 20 78 53 c2 20 a5 d7 85 23 a5
>1a1e98		d9 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85 e9 c2
>1a1ea8		20 a9 b9 1e 85 e7 20 78 53 28 2b ab 60 45 52 52
>1a1eb8		00 45 52 4c 00 e2 20 c2 10 20 d7 03 af d3 08 00
>1a1ec8		0a c2 20 29 ff 00 a8 08 e2 20 48 a9 1a 48 ab 68
>1a1ed8		28 be 0f 1f 20 64 04 c2 20 a5 d7 f0 27 a2 3f 1f
>1a1ee8		20 64 04 08 e2 20 48 a9 00 48 ab 68 28 c2 20 af
>1a1ef8		d7 08 00 8f 23 08 00 a9 00 00 8f 25 08 00 20 13
>1a1f08		46 20 d7 03 4c b5 27 43 1f 46 1f 4c 1f 59 1f 67
>1a1f18		1f 75 1f 88 1f 9e 1f ae 1f bd 1f ca 1f db 1f ea
>1a1f28		1f f7 1f 05 20 14 20 25 20 3e 20 52 20 66 20 7c
>1a1f38		20 90 20 ab 20 c3 20 20 61 74 00 4f 4b 00 42 72
>1a1f48		65 61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72
>1a1f58		00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54
>1a1f68		79 70 65 20 6d 69 73 6d 61 74 63 68 00 56 61 72
>1a1f78		69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1f88		4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20
>1a1f98		66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65
>1a1fa8		72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72
>1a1fb8		66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67
>1a1fc8		65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65
>1a1fd8		6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e
>1a1fe8		64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d
>1a1ff8		61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74
>1a2008		68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69
>1a2018		73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61
>1a2028		62 6c 65 20 74 6f 20 72 65 61 64 20 64 69 72 65
>1a2038		63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20
>1a2048		6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65
>1a2058		20 74 6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e
>1a2068		61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66
>1a2078		69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 66 69
>1a2088		6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>1a2098		74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>1a20a8		72 79 00 43 6f 75 6c 64 20 6e 6f 74 20 63 6f 70
>1a20b8		79 20 74 68 65 20 66 69 6c 65 00 41 72 67 75 6d
>1a20c8		65 6e 74 20 6f 75 74 73 69 64 65 20 64 6f 6d 61
>1a20d8		69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a20e8		20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48 a9 00
>1a20f8		08 5b 68 28 08 c2 20 a9 bd 1e 8f d4 08 00 e2 20
>1a2108		a9 1a 8f d6 08 00 28 20 ba 44 20 fb 3f 64 31 28
>1a2118		2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>1a2128		18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85 02
>1a2138		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2148		20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20
>1a2158		1a 21 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a
>1a2168		f0 05 20 1a 21 80 f3 28 60 08 e2 20 64 36 a7 00
>1a2178		f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0 1a c9 9e
>1a2188		f0 1a c9 a0 f0 16 20 1a 21 80 e3 20 f7 21 c2 20
>1a2198		a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36 30 30
>1a21a8		80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 1a 21 28
>1a21b8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a21c8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a21d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a21e8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>1a21f8		c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c 85 1a
>1a2208		a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85 d7 18 a5
>1a2218		1a 69 04 00 85 00 a5 1c 69 00 00 85 02 28 60 08
>1a2228		e2 20 48 20 3b 21 68 e2 20 c7 00 d0 08 20 1a 21
>1a2238		20 3b 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2248		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a2258		20 dc d4 08 08 e2 20 20 3b 21 e2 20 a7 00 f0 10
>1a2268		c9 3a f0 0c c5 37 f0 05 20 1a 21 80 ef 28 38 60
>1a2278		28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9 3a
>1a2288		f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08 0b
>1a2298		8b 08 c2 20 48 a9 00 08 5b 68 28 20 f8 14 20 8b
>1a22a8		19 e2 20 a9 00 85 dc 22 3c 11 00 b0 4b a7 00 c9
>1a22b8		3a d0 03 20 1a 21 20 3b 21 a7 00 d0 03 4c 4a 23
>1a22c8		20 e2 04 b0 52 a7 00 10 10 20 a7 0c 85 0c c9 20
>1a22d8		d0 03 4c 38 23 a5 d2 f0 51 08 c2 20 48 a9 00 08
>1a22e8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a22f8		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a2308		68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20
>1a2318		5b 1e e2 20 dc d4 08 20 c4 44 4c 4a 23 08 e2 20
>1a2328		48 a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9
>1a2338		a7 00 20 84 0c c2 20 85 2f 20 8b 19 20 1a 21 20
>1a2348		25 23 ab 2b 28 60 08 58 20 db 20 20 00 1e e2 20
>1a2358		9c 8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c 8c 23
>1a2368		08 c2 20 a0 02 00 b7 1a 85 d7 e2 20 a5 dc c9 03
>1a2378		f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20 a5 1c
>1a2388		69 00 85 02 c2 20 20 96 22 e2 20 a5 dc c9 03 f0
>1a2398		f3 c9 00 d0 31 e2 20 20 3b 21 a7 00 f0 28 c9 3a
>1a23a8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a23b8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a23c8		08 20 1a 21 80 be 28 60 08 58 e2 20 a9 80 85 d2
>1a23d8		9c 8a 0f 20 00 1e c2 30 64 31 c2 20 a0 02 00 b7
>1a23e8		1a f0 28 20 68 23 e2 20 a5 dc c9 01 f0 1d c9 02
>1a23f8		f0 e8 c9 03 f0 e4 c2 20 a0 00 00 18 a5 1a 77 1a
>1a2408		85 1a a5 1c 69 00 00 85 1c 80 cf e2 20 a9 00 85
>1a2418		d2 28 60 08 c2 30 a9 00 00 85 08 a9 16 00 85 0a
>1a2428		a0 02 00 b7 08 f0 2c c5 23 f0 19 b0 26 a0 00 00
>1a2438		18 a5 08 77 08 85 0c a5 0a 69 00 00 85 0a a5 0c
>1a2448		85 08 80 dc c2 20 a5 08 85 1a e2 20 a5 0a 85 1c
>1a2458		28 38 60 28 18 60 08 e2 20 a7 0c 87 08 c2 20 a5
>1a2468		0c c5 00 d0 08 e2 20 a5 0e c5 02 f0 26 c2 20 18
>1a2478		a5 0c 69 01 00 85 0c e2 20 a5 0e 69 00 85 0e c2
>1a2488		20 18 a5 08 69 01 00 85 08 e2 20 a5 0a 69 00 85
>1a2498		0a 80 c4 28 60 08 e2 20 a7 0c 87 08 c2 20 a5 0c
>1a24a8		c5 00 d0 06 a5 0e c5 02 f0 26 c2 20 38 a5 0c e9
>1a24b8		01 00 85 0c e2 20 a5 0e e9 00 85 0e c2 20 38 a5
>1a24c8		08 e9 01 00 85 08 e2 20 a5 0a e9 00 85 0a 80 c6
>1a24d8		28 60 08 a0 00 00 c2 20 18 a5 08 77 08 85 0c e2
>1a24e8		20 a5 0a 69 00 85 0e c2 20 18 a5 d9 69 04 00 85
>1a24f8		00 e2 20 a5 db 69 00 85 02 a0 00 00 c2 20 38 a5
>1a2508		d9 f7 08 85 d9 e2 20 a5 db e9 00 85 db 20 5e 24
>1a2518		20 ba 44 28 60 08 08 c2 20 48 a9 00 08 5b 68 28
>1a2528		c2 30 a0 02 00 97 d9 18 a5 d9 69 04 00 85 08 e2
>1a2538		20 a5 db 69 00 85 0a e2 20 a0 00 00 b7 1a 97 08
>1a2548		f0 03 c8 80 f7 c2 20 98 18 69 05 00 85 0c c2 20
>1a2558		a0 00 00 a5 0c 97 d9 c2 20 18 a5 d9 65 0c 85 0c
>1a2568		e2 20 a5 db 69 00 85 db c2 20 a5 0c 85 d9 c2 20
>1a2578		a0 00 00 a9 00 00 97 d9 c8 c0 05 00 d0 f8 20 ba
>1a2588		44 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a2598		30 a9 00 00 85 08 a9 16 00 85 0a a0 02 00 b7 08
>1a25a8		f0 1d c5 d7 f0 25 b0 1d a0 00 00 18 a5 08 77 08
>1a25b8		85 0c a5 0a 69 00 00 85 0a a5 0c 85 08 80 dc a9
>1a25c8		00 00 28 2b 60 a9 01 00 28 2b 60 a9 02 00 28 2b
>1a25d8		60 08 c2 30 a9 05 00 85 10 a0 00 00 e2 20 b7 1a
>1a25e8		f0 07 c2 20 e6 10 c8 80 f3 c2 20 a5 08 85 00 a5
>1a25f8		0a 85 02 18 a5 d9 69 04 00 85 0c a5 db 69 00 00
>1a2608		85 0e 18 a5 d9 65 10 85 d9 a5 db 69 00 00 85 db
>1a2618		18 a5 d9 69 04 00 85 08 a5 db 69 00 00 85 0a 20
>1a2628		9d 24 c2 20 a5 10 a0 00 00 97 00 a5 d7 a0 02 00
>1a2638		97 00 18 a5 00 69 04 00 85 00 a5 02 69 00 00 85
>1a2648		02 a0 00 00 e2 20 b7 1a 97 00 f0 03 c8 80 f7 20
>1a2658		ba 44 28 60 08 c2 30 85 d7 20 8b 25 c9 00 00 f0
>1a2668		2c c9 01 00 f0 22 c2 20 a5 08 48 a5 0a 48 20 da
>1a2678		24 68 85 0a 68 85 08 a5 1a 85 00 a5 1c 85 02 20
>1a2688		3b 21 e2 20 a7 00 f0 0a 20 d9 25 80 05 a5 d7 20
>1a2698		1d 25 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a26a8		e2 20 c2 10 a2 00 00 bd 00 4f f0 03 e8 80 f8 86
>1a26b8		0c c2 30 8a c9 02 00 90 12 3a 18 69 00 4f aa 18
>1a26c8		65 8f a8 a5 0c 3a 8b 44 00 00 ab c2 20 a6 55 a0
>1a26d8		00 4f a5 8f 8b 54 00 1a ab e2 20 a5 0c c9 02 90
>1a26e8		18 a6 8f a9 22 9d 00 4f e8 bd 00 4f d0 fa a9 22
>1a26f8		9d 00 4f a9 00 e8 9d 00 4f 28 2b 60 da 5a 8b 0b
>1a2708		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 ad
>1a2718		00 4f c9 23 f0 0a c9 7c f0 17 28 2b ab 7a fa 60
>1a2728		c2 20 a9 03 00 85 8f a9 4a 27 85 55 20 9c 26 80
>1a2738		e9 c2 20 a9 04 00 85 8f a9 4e 27 85 55 20 9c 26
>1a2748		80 d8 44 49 52 00 42 52 55 4e 00 8b 08 20 3d 02
>1a2758		08 e2 20 48 a9 1a 48 ab 68 28 a2 6f d2 20 64 04
>1a2768		28 ab 60 08 e2 30 a9 01 20 1c 00 20 db 00 c9 00
>1a2778		f0 f9 c9 0d f0 02 80 f3 28 60 0b 08 08 c2 20 48
>1a2788		a9 00 08 5b 68 28 c2 30 64 d7 a9 00 4f 85 1a a9
>1a2798		00 00 85 1c 20 9c 09 c2 20 a5 d7 d0 05 20 4e 23
>1a27a8		80 07 20 5c 26 28 2b 38 60 28 2b 18 60 c2 30 a2
>1a27b8		ff fe 9a 20 53 27 20 08 00 20 0c 00 22 3c 11 00
>1a27c8		a9 00 00 20 1c 00 20 04 27 20 82 27 b0 e8 80 e3
>1a27d8		08 e2 20 20 a3 08 c9 00 f0 2c c9 01 f0 2d c9 02
>1a27e8		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a27f8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a2808		08 20 51 16 80 08 20 67 54 80 03 20 d6 56 28 60
>1a2818		08 e2 20 20 55 08 c9 00 f0 23 c9 01 f0 24 08 c2
>1a2828		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a2838		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 79 54
>1a2848		80 03 20 cb 56 28 60 08 e2 20 20 55 08 c9 00 f0
>1a2858		23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2868		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a2878		20 dc d4 08 20 8b 54 80 03 20 6c 57 28 60 20 bf
>1a2888		07 20 f0 07 20 21 57 60 a5 23 8f 1a 01 00 a5 29
>1a2898		8f 18 01 00 af 1e 01 00 85 23 60 08 c2 30 48 20
>1a28a8		bf 07 a5 2d c9 00 00 d0 0d a5 2b d0 09 da a6 29
>1a28b8		20 3f 64 fa 80 1c 20 f0 07 c2 20 a5 2b 48 a5 29
>1a28c8		48 20 ca 62 c2 20 68 85 29 68 85 2b 20 6c 57 20
>1a28d8		a9 64 68 28 60 08 20 51 06 20 82 06 c2 20 a5 23
>1a28e8		25 29 85 23 a5 25 25 2b 85 25 28 60 08 20 51 06
>1a28f8		20 82 06 c2 20 a5 23 05 29 85 23 a5 25 05 2b 85
>1a2908		25 28 60 08 20 51 06 c2 20 a5 23 49 ff ff 85 23
>1a2918		a5 25 49 ff ff 85 25 28 60 08 e2 20 20 a3 08 c9
>1a2928		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2938		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2948		ff 00 20 5b 1e e2 20 dc d4 08 20 d9 17 80 08 20
>1a2958		8c 55 80 03 20 01 5d 28 60 08 e2 20 20 a3 08 c9
>1a2968		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2978		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2988		ff 00 20 5b 1e e2 20 dc d4 08 20 f0 17 80 08 20
>1a2998		ad 55 80 03 20 16 5d 28 60 08 e2 20 20 a3 08 c9
>1a29a8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a29b8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a29c8		ff 00 20 5b 1e e2 20 dc d4 08 20 07 18 80 08 20
>1a29d8		da 55 80 03 20 2b 5d 28 60 08 e2 20 20 a3 08 c9
>1a29e8		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a29f8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2a08		ff 00 20 5b 1e e2 20 dc d4 08 20 1e 18 80 08 20
>1a2a18		f8 55 80 03 20 6a 5d 28 60 08 e2 20 20 a3 08 c9
>1a2a28		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2a38		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2a48		ff 00 20 5b 1e e2 20 dc d4 08 20 35 18 80 08 20
>1a2a58		16 56 80 03 20 55 5d 28 60 08 e2 20 20 a3 08 c9
>1a2a68		00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9
>1a2a78		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a2a88		ff 00 20 5b 1e e2 20 dc d4 08 20 4c 18 80 08 20
>1a2a98		43 56 80 03 20 40 5d 28 60 08 e2 20 a5 27 c9 00
>1a2aa8		f0 2d c9 01 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a2ab8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a2ac8		e2 20 dc d4 08 e2 20 a5 26 49 80 85 26 80 16 c2
>1a2ad8		20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85 25 e6
>1a2ae8		23 d0 02 e6 25 28 60 08 e2 20 20 09 1d 20 63 07
>1a2af8		20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 27
>1a2b08		22 20 09 1d 20 63 07 20 ae 05 a5 23 0a 0a 0a 0a
>1a2b18		05 29 48 a9 2c 20 27 22 20 09 1d 20 63 07 20 ae
>1a2b28		05 a5 23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c
>1a2b38		8f 0e 08 af 68 8f 00 08 af 68 8f 02 08 af 68 8f
>1a2b48		04 08 af af 0e 08 af 29 f7 8f 0e 08 af 20 5f 21
>1a2b58		28 60 08 e2 20 20 09 1d 20 63 07 20 ae 05 a5 23
>1a2b68		0a 0a 0a 0a 05 29 48 a9 2c 20 27 22 20 09 1d 20
>1a2b78		63 07 20 ae 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c
>1a2b88		20 27 22 20 09 1d 20 51 06 20 e4 05 c2 20 a5 23
>1a2b98		85 92 a5 29 85 23 20 ae 05 e2 20 a5 23 0a 0a 0a
>1a2ba8		0a 05 29 48 c2 20 a5 92 85 23 20 ae 05 e2 20 a5
>1a2bb8		23 0a 0a 0a 0a 05 29 48 af 0e 08 af 09 0c 8f 0e
>1a2bc8		08 af 68 8f 0f 08 af 68 8f 0a 08 af 68 8f 09 08
>1a2bd8		af 68 8f 06 08 af af 0e 08 af 29 f7 8f 0e 08 af
>1a2be8		20 5f 21 28 60 08 e2 20 48 20 09 1d 20 63 07 e2
>1a2bf8		20 a5 23 29 0f 0a 0a 0a 0a 83 01 a9 2c 20 27 22
>1a2c08		20 09 1d 20 63 07 a5 23 29 0f 03 01 8f 1e 00 00
>1a2c18		e2 20 68 28 60 08 c2 20 f4 00 00 e2 20 20 09 1d
>1a2c28		20 63 07 a5 23 83 01 a9 2c 20 27 22 20 09 1d 20
>1a2c38		63 07 a5 23 83 02 a9 2c 20 27 22 20 09 1d 20 63
>1a2c48		07 a5 23 8f 0d 00 af a3 02 8f 0e 00 af a3 01 8f
>1a2c58		0f 00 af c2 20 68 28 60 08 c2 20 f4 00 00 e2 20
>1a2c68		20 09 1d 20 51 06 a5 23 f0 16 a9 01 8f 04 00 af
>1a2c78		a9 20 8f 08 00 af 8f 09 00 af 22 2c 11 00 80 0a
>1a2c88		a9 00 8f 04 00 af 22 2c 11 00 a9 2c 85 37 20 5c
>1a2c98		22 90 39 20 1a 21 20 09 1d 20 63 07 a5 23 83 01
>1a2ca8		a9 2c 20 27 22 20 09 1d 20 63 07 a5 23 83 02 a9
>1a2cb8		2c 20 27 22 20 09 1d 20 63 07 a5 23 8f 05 00 af
>1a2cc8		a3 02 8f 06 00 af a3 01 8f 07 00 af c2 20 68 28
>1a2cd8		60 08 c2 20 3b 38 e9 05 00 1b e2 20 20 09 1d 20
>1a2ce8		63 07 a5 23 c9 0a 90 1f 08 c2 20 48 a9 00 08 5b
>1a2cf8		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>1a2d08		5b 1e e2 20 dc d4 08 83 01 a9 2c 20 27 22 20 09
>1a2d18		1d 20 63 07 a5 23 83 02 a9 2c 20 27 22 20 09 1d
>1a2d28		20 63 07 a5 23 83 03 a9 2c 20 27 22 20 09 1d 20
>1a2d38		63 07 a5 23 83 04 a9 2c 20 27 22 20 09 1d 20 63
>1a2d48		07 a5 23 83 05 a9 af 85 a0 a3 01 0a c2 20 29 ff
>1a2d58		00 aa bf 91 2d 1a 85 9e e2 20 a3 02 c2 20 29 ff
>1a2d68		00 0a 0a 18 65 9e 85 9e e2 20 a0 02 00 a3 03 97
>1a2d78		9e a0 01 00 a3 04 97 9e a0 00 00 a3 05 97 9e c2
>1a2d88		20 3b 18 69 05 00 1b 28 60 00 20 00 24 00 28 00
>1a2d98		2c 00 30 00 34 00 38 00 3c 40 1f 80 1f da 5a 08
>1a2da8		20 09 1d 20 51 06 c2 20 a5 23 89 00 01 d0 17 af
>1a2db8		00 00 af 89 00 01 f0 0e e2 20 a9 00 8f 01 00 af
>1a2dc8		a9 01 8f 01 00 af c2 20 a5 23 8f 00 00 af e2 20
>1a2dd8		a5 24 c2 20 29 03 00 0a aa c2 20 bf 2c 2e 1a 8f
>1a2de8		10 f0 1a bf 34 2e 1a 8f 12 f0 1a af 10 f0 1a 8f
>1a2df8		08 01 00 af 12 f0 1a 8f 0a 01 00 af 0c 01 00 8f
>1a2e08		14 f0 1a e2 20 af 0e 01 00 8f 16 f0 1a 22 2c 11
>1a2e18		00 c2 20 af 1a 00 00 aa af 1c 00 00 a8 20 20 00
>1a2e28		28 7a fa 60 80 02 20 03 40 01 90 01 e0 01 58 02
>1a2e38		f0 00 2c 01 50 00 64 00 28 00 32 00 3c 00 4b 00
>1a2e48		1e 00 32 00 48 00 5c 00 20 00 2a 00 34 00 43 00
>1a2e58		16 00 34 00 da 08 c2 30 c9 02 00 b0 1c 0a 0a aa
>1a2e68		bf 00 f0 1a 85 9e bf 02 f0 1a 85 a0 c9 f0 00 b0
>1a2e78		08 c9 b0 00 90 03 28 fa 60 08 c2 20 48 a9 00 08
>1a2e88		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a2e98		20 5b 1e e2 20 dc d4 08 da 08 c2 30 c9 02 00 b0
>1a2ea8		17 0a 0a aa bf 08 f0 1a 85 9e bf 0a f0 1a 85 a0
>1a2eb8		c9 40 00 b0 03 28 fa 60 08 c2 20 48 a9 00 08 5b
>1a2ec8		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a2ed8		5b 1e e2 20 dc d4 08 08 c2 30 3b 38 e9 07 00 1b
>1a2ee8		20 09 1d 20 63 07 c2 20 a5 23 c9 02 00 b0 59 83
>1a2ef8		01 e2 20 a9 2c 20 27 22 20 09 1d 20 63 07 a5 23
>1a2f08		83 03 a9 2c 20 27 22 20 09 1d 20 63 07 a3 01 0a
>1a2f18		0a 0a aa a3 03 d0 05 a5 23 0a 80 04 a5 23 38 2a
>1a2f28		9f 00 01 af c2 20 a9 2c 00 85 37 20 5c 22 b0 37
>1a2f38		c2 20 08 c2 20 a9 00 00 85 23 a9 b0 00 85 25 e2
>1a2f48		20 a9 00 85 27 28 80 27 08 c2 20 48 a9 00 08 5b
>1a2f58		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a2f68		5b 1e e2 20 dc d4 08 c2 20 20 1a 21 20 09 1d c2
>1a2f78		20 a3 01 0a 0a aa a5 23 9f 00 f0 1a 9f 08 f0 1a
>1a2f88		83 04 a5 25 9f 02 f0 1a 38 e9 b0 00 9f 0a f0 1a
>1a2f98		83 06 a3 01 0a 0a 0a aa e2 20 a3 04 9f 01 01 af
>1a2fa8		a3 05 9f 02 01 af a3 06 9f 03 01 af a9 00 9f 04
>1a2fb8		01 af 9f 05 01 af c2 30 3b 18 69 07 00 1b 28 60
>1a2fc8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a2fd8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>1a2fe8		c2 20 20 09 1d 20 63 07 a5 23 20 a0 2e c2 20 a5
>1a2ff8		9e 8f 05 04 af af 14 f0 1a 8f 08 04 af e2 20 a5
>1a3008		a0 8f 07 04 af af 16 f0 1a 8f 0a 04 af a9 00 8f
>1a3018		01 04 af a9 85 8f 00 04 af af 01 04 af 30 fa a9
>1a3028		00 8f 00 04 af 28 60 08 c2 20 a5 59 cf 10 f0 1a
>1a3038		90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a3048		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a3058		08 c2 30 a5 5d cf 12 f0 1a b0 d7 8f 08 01 00 af
>1a3068		10 f0 1a 8f 0a 01 00 18 af 0c 01 00 65 59 85 0c
>1a3078		af 0e 01 00 69 00 00 85 0e 18 a5 0c 65 9e 85 0c
>1a3088		a5 0e 65 a0 85 0e e2 20 a5 55 87 0c 28 60 c2 20
>1a3098		a9 01 00 85 dd 38 a5 61 e5 59 85 69 10 0b 49 ff
>1a30a8		ff 1a 85 69 a9 ff ff 85 dd a9 01 00 85 df 38 a5
>1a30b8		65 e5 5d 85 6d 10 0b 49 ff ff 1a 85 6d a9 ff ff
>1a30c8		85 df a5 6d c9 01 00 d0 19 a5 69 c9 01 00 d0 10
>1a30d8		20 2f 30 a5 61 85 59 a5 65 85 5d 20 2f 30 80 5b
>1a30e8		a5 6d c5 69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a
>1a30f8		48 0a 68 6a 85 71 20 2f 30 a5 59 c5 61 d0 06 a5
>1a3108		5d c5 65 f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5
>1a3118		75 10 10 f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65
>1a3128		dd 85 59 a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69
>1a3138		85 71 18 a5 5d 65 df 85 5d 80 bb 60 08 c2 20 3b
>1a3148		38 e9 06 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a3158		e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 1d 20 63
>1a3168		07 83 01 a9 2c 00 20 27 22 20 09 1d 20 51 06 a5
>1a3178		23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51 06 a5
>1a3188		23 83 05 a9 2c 00 20 27 22 20 09 1d 20 63 07 a5
>1a3198		23 85 55 a3 03 85 59 a3 05 85 5d a3 01 20 5c 2e
>1a31a8		20 2f 30 c2 20 3b 18 69 06 00 1b 28 60 08 c2 20
>1a31b8		3b 38 e9 0a 00 1b 08 c2 20 48 a9 00 08 5b 68 28
>1a31c8		08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 09 1d 20
>1a31d8		63 07 83 01 a9 2c 00 20 27 22 20 09 1d 20 51 06
>1a31e8		a5 23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51 06
>1a31f8		a5 23 83 05 a9 2c 00 20 27 22 20 09 1d 20 51 06
>1a3208		a5 23 83 07 a9 2c 00 20 27 22 20 09 1d 20 51 06
>1a3218		a5 23 83 09 a9 2c 00 20 27 22 20 09 1d 20 63 07
>1a3228		a5 23 85 55 a3 03 85 59 a3 05 85 5d a3 07 85 61
>1a3238		a3 09 85 65 a3 01 20 5c 2e 20 96 30 c2 20 3b 18
>1a3248		69 0a 00 1b 28 60 08 c2 20 3b 38 e9 0c 00 1b 08
>1a3258		c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48
>1a3268		ab 68 28 c2 30 20 09 1d 20 63 07 83 01 a9 2c 00
>1a3278		20 27 22 20 09 1d 20 51 06 a5 23 83 03 a9 2c 00
>1a3288		20 27 22 20 09 1d 20 51 06 a5 23 83 05 a9 2c 00
>1a3298		20 27 22 20 09 1d 20 51 06 a5 23 83 07 a9 2c 00
>1a32a8		20 27 22 20 09 1d 20 51 06 a5 23 83 09 a9 2c 00
>1a32b8		20 27 22 20 09 1d 20 63 07 a5 23 83 0b a3 01 20
>1a32c8		a0 2e a9 07 00 8f 00 04 af c2 20 a3 05 8f 00 01
>1a32d8		00 af 10 f0 1a 8f 02 01 00 18 af 04 01 00 63 03
>1a32e8		85 0c e2 20 af 06 01 00 69 00 85 0e c2 20 18 a5
>1a32f8		9e 65 0c 8f 05 04 af e2 20 a5 a0 65 0e 8f 07 04
>1a3308		af c2 20 38 a3 07 e3 03 85 0c 8f 08 04 af 38 af
>1a3318		10 f0 1a 8f 0e 04 af 38 a3 09 e3 05 8f 0a 04 af
>1a3328		e2 20 a3 0b 8f 01 04 af af 00 04 af 09 80 8f 00
>1a3338		04 af af 01 04 af 30 fa a9 00 8f 00 04 af c2 20
>1a3348		3b 18 69 0c 00 1b 28 60 08 c2 20 c9 40 00 b0 13
>1a3358		0a 0a 0a 18 69 00 0c 85 9e a9 af 00 69 00 00 85
>1a3368		a0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3378		09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a3388		d4 08 08 c2 20 3b 38 e9 03 00 1b c2 30 20 09 1d
>1a3398		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 e2 20 20
>1a33a8		09 1d 20 63 07 a5 23 c9 08 b0 56 83 03 a9 2c 20
>1a33b8		27 22 20 09 1d 20 51 06 c2 20 38 a5 23 e9 00 00
>1a33c8		85 23 a5 25 e9 b0 00 85 25 30 36 c2 20 a3 01 aa
>1a33d8		20 50 33 a5 23 a0 01 00 97 9e e2 20 a5 25 c8 c8
>1a33e8		97 9e bf 18 f0 1a 29 f1 85 0c a3 03 0a 29 0e 05
>1a33f8		0c 87 9e 9f 18 f0 1a c2 20 3b 18 69 03 00 1b 28
>1a3408		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a3418		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a3428		08 c2 20 3b 38 e9 04 00 1b c2 30 20 09 1d 20 63
>1a3438		07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d 20 51
>1a3448		06 a5 23 83 03 a9 2c 00 20 27 22 20 09 1d 20 51
>1a3458		06 a3 01 20 50 33 a3 03 a0 04 00 97 9e a5 23 a0
>1a3468		06 00 97 9e c2 20 3b 18 69 04 00 1b 28 60 08 c2
>1a3478		20 3b 38 e9 03 00 1b c2 30 20 09 1d 20 63 07 a5
>1a3488		23 83 01 a9 2c 00 20 27 22 e2 20 20 09 1d 20 51
>1a3498		06 a5 23 d0 04 83 03 80 04 a9 01 83 03 a9 2c 85
>1a34a8		37 20 5c 22 b0 20 c2 30 a3 01 aa 20 50 33 e2 20
>1a34b8		bf 18 f0 1a 29 fe 85 0c a3 03 29 01 05 0c 9f 18
>1a34c8		f0 1a 87 9e 80 36 c2 30 20 1a 21 20 09 1d 20 63
>1a34d8		07 a5 23 c9 08 00 b0 2e 0a 0a 0a 0a 85 0c a3 01
>1a34e8		aa 20 50 33 e2 20 a3 03 29 01 05 0c 85 0c bf 18
>1a34f8		f0 1a 29 8e 05 0c 87 9e 9f 18 f0 1a c2 20 3b 18
>1a3508		69 03 00 1b 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a3518		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a3528		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>1a3538		a9 04 00 8d 02 01 18 ad 04 01 69 80 02 85 9e a9
>1a3548		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a3558		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a3568		e2 20 dc d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01
>1a3578		a9 0c 00 8d 02 01 18 ad 04 01 69 00 02 85 9e a9
>1a3588		af 00 85 a0 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a3598		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a35a8		e2 20 dc d4 08 08 c2 20 3b 38 e9 06 00 1b c2 20
>1a35b8		20 09 1d 20 63 07 a5 23 83 01 a9 2c 00 20 27 22
>1a35c8		20 09 1d 20 63 07 a5 23 83 03 a9 2c 00 20 27 22
>1a35d8		20 09 1d 20 63 07 a5 23 83 05 a9 2c 00 20 27 22
>1a35e8		20 09 1d 20 51 06 a3 01 20 2d 35 a5 23 87 9e e2
>1a35f8		20 38 a5 25 e9 b0 a0 02 00 97 9e a3 05 d0 0d e2
>1a3608		20 a3 03 29 07 a0 03 00 97 9e 80 0d e2 20 a3 03
>1a3618		29 07 09 08 a0 03 00 97 9e c2 20 3b 18 69 06 00
>1a3628		1b 28 60 08 c2 20 3b 38 e9 06 00 1b c2 20 20 09
>1a3638		1d 20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09
>1a3648		1d 20 51 06 a5 23 83 03 a9 2c 00 20 27 22 20 09
>1a3658		1d 20 51 06 a5 23 83 05 a9 2c 00 20 27 22 20 09
>1a3668		1d 20 51 06 a3 01 20 6d 35 a5 23 a0 01 00 97 9e
>1a3678		e2 20 38 a5 25 e9 b0 c8 c8 97 9e c2 20 a3 03 a0
>1a3688		04 00 97 9e a3 05 a0 06 00 97 9e c2 20 3b 18 69
>1a3698		06 00 1b 28 60 08 c2 20 f4 00 00 c2 20 20 09 1d
>1a36a8		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d
>1a36b8		20 51 06 a3 01 20 6d 35 a5 23 d0 06 e2 20 a9 00
>1a36c8		80 04 e2 20 a9 01 e2 20 a0 00 00 97 9e c2 20 68
>1a36d8		28 60 08 c2 20 3b 38 e9 04 00 1b c2 20 20 09 1d
>1a36e8		20 63 07 a5 23 83 01 a9 2c 00 20 27 22 20 09 1d
>1a36f8		20 51 06 a5 23 83 03 a9 2c 00 20 27 22 20 09 1d
>1a3708		20 51 06 a3 01 20 6d 35 a5 23 a0 0a 00 97 9e a3
>1a3718		03 a0 08 00 97 9e c2 20 3b 18 69 04 00 1b 28 60
>1a3728		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00
>1a3738		8f 58 f0 1a af 5c f0 1a c9 b0 b0 1c 8f 24 04 af
>1a3748		af 5b f0 1a 8f 23 04 af af 5a f0 1a 8f 22 04 af
>1a3758		a9 10 8f 58 f0 1a 80 17 38 e9 b0 8f 04 04 af af
>1a3768		5b f0 1a 8f 03 04 af af 5a f0 1a 8f 02 04 af af
>1a3778		59 f0 1a d0 3c af 58 f0 1a f0 1b af 5d f0 1a 8f
>1a3788		28 04 af af 5e f0 1a 8f 29 04 af af 5f f0 1a 8f
>1a3798		2a 04 af 82 8b 00 af 5d f0 1a 8f 08 04 af af 5e
>1a37a8		f0 1a 8f 09 04 af af 5f f0 1a 8f 0a 04 af 82 70
>1a37b8		00 af 58 f0 1a 09 01 8f 58 f0 1a 89 10 f0 32 af
>1a37c8		60 f0 1a 8f 28 04 af af 61 f0 1a 8f 29 04 af af
>1a37d8		62 f0 1a 8f 2a 04 af af 63 f0 1a 8f 2b 04 af af
>1a37e8		64 f0 1a 8f 2c 04 af af 65 f0 1a 8f 2d 04 af 80
>1a37f8		30 af 60 f0 1a 8f 08 04 af af 61 f0 1a 8f 09 04
>1a3808		af af 62 f0 1a 8f 0a 04 af af 63 f0 1a 8f 0b 04
>1a3818		af af 64 f0 1a 8f 0c 04 af af 65 f0 1a 8f 0d 04
>1a3828		af e2 20 af 69 f0 1a c9 b0 b0 20 8f 27 04 af af
>1a3838		68 f0 1a 8f 26 04 af af 67 f0 1a 8f 25 04 af af
>1a3848		58 f0 1a 09 20 8f 58 f0 1a 80 17 38 e9 b0 8f 07
>1a3858		04 af af 68 f0 1a 8f 06 04 af af 67 f0 1a 8f 05
>1a3868		04 af af 66 f0 1a d0 3e af 58 f0 1a 89 20 f0 1b
>1a3878		af 6a f0 1a 8f 28 04 af af 6b f0 1a 8f 29 04 af
>1a3888		af 6c f0 1a 8f 2a 04 af 82 8b 00 af 6a f0 1a 8f
>1a3898		08 04 af af 6b f0 1a 8f 09 04 af af 6c f0 1a 8f
>1a38a8		0a 04 af 82 70 00 af 58 f0 1a 09 02 8f 58 f0 1a
>1a38b8		89 20 f0 32 af 6d f0 1a 8f 28 04 af af 6e f0 1a
>1a38c8		8f 29 04 af af 6f f0 1a 8f 2a 04 af af 70 f0 1a
>1a38d8		8f 2b 04 af af 71 f0 1a 8f 2e 04 af af 72 f0 1a
>1a38e8		8f 2f 04 af 80 30 af 6d f0 1a 8f 08 04 af af 6e
>1a38f8		f0 1a 8f 09 04 af af 6f f0 1a 8f 0a 04 af af 70
>1a3908		f0 1a 8f 0b 04 af af 71 f0 1a 8f 0e 04 af af 72
>1a3918		f0 1a 8f 0f 04 af af 58 f0 1a 29 30 f0 43 c9 10
>1a3928		f0 76 c9 20 d0 03 82 8a 00 af 58 f0 1a 29 03 f0
>1a3938		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3948		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a3958		20 dc d4 08 a9 01 80 02 a9 03 8f 20 04 af 82 7d
>1a3968		00 af 58 f0 1a 29 03 f0 23 c9 03 f0 23 08 c2 20
>1a3978		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>1a3988		20 29 ff 00 20 5b 1e e2 20 dc d4 08 a9 01 80 02
>1a3998		a9 03 8f 00 04 af 80 34 af 58 f0 1a 29 01 0a 09
>1a39a8		11 8f 20 04 af af 58 f0 1a 29 02 09 11 8f 00 04
>1a39b8		af 80 19 af 58 f0 1a 29 02 09 21 8f 20 04 af af
>1a39c8		58 f0 1a 29 01 0a 09 21 8f 00 04 af af 00 04 af
>1a39d8		09 80 8f 00 04 af af 58 f0 1a 29 30 f0 0f af 20
>1a39e8		04 af 09 80 8f 20 04 af ea ea ea ea ea af 01 04
>1a39f8		af 89 80 d0 f8 a9 00 8f 20 04 af 8f 00 04 af 28
>1a3a08		2b 60 0b 08 e2 20 c2 10 a9 00 a2 00 00 8f 59 f0
>1a3a18		1a e8 e0 1a 00 d0 f6 20 7b 22 c9 e6 f0 23 c9 e7
>1a3a28		f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a3a38		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a3a48		08 20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 5a
>1a3a58		f0 1a e2 20 a5 25 8f 5c f0 1a a9 2c 20 27 22 20
>1a3a68		09 1d 20 51 06 c2 20 a5 23 8f 5d f0 1a e2 20 a5
>1a3a78		25 8f 5f f0 1a e2 20 a9 00 8f 59 f0 1a 82 74 00
>1a3a88		20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 5a f0
>1a3a98		1a e2 20 a5 25 8f 5c f0 1a a9 2c 20 27 22 20 09
>1a3aa8		1d 20 0d 07 c2 20 a5 23 8f 60 f0 1a 8d 00 01 a9
>1a3ab8		2c 00 20 27 22 20 09 1d 20 0d 07 c2 20 a5 23 8f
>1a3ac8		62 f0 1a 8d 02 01 a9 2c 00 20 27 22 20 09 1d 20
>1a3ad8		0d 07 c2 20 a5 23 8f 64 f0 1a c2 20 ad 04 01 8f
>1a3ae8		5d f0 1a e2 20 ad 06 01 8f 5f f0 1a e2 20 a9 01
>1a3af8		8f 59 f0 1a e2 20 a9 9c 20 27 22 20 7b 22 c9 e6
>1a3b08		f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28
>1a3b18		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a3b28		e2 20 dc d4 08 20 27 22 20 09 1d 20 51 06 c2 20
>1a3b38		a5 23 8f 67 f0 1a e2 20 a5 25 8f 69 f0 1a a9 2c
>1a3b48		20 27 22 20 09 1d 20 51 06 c2 20 a5 23 8f 6a f0
>1a3b58		1a e2 20 a5 25 8f 6c f0 1a e2 20 a9 00 8f 66 f0
>1a3b68		1a 82 74 00 20 27 22 20 09 1d 20 51 06 c2 20 a5
>1a3b78		23 8f 67 f0 1a e2 20 a5 25 8f 69 f0 1a a9 2c 20
>1a3b88		27 22 20 09 1d 20 0d 07 c2 20 a5 23 8f 6d f0 1a
>1a3b98		8d 00 01 a9 2c 00 20 27 22 20 09 1d 20 0d 07 c2
>1a3ba8		20 a5 23 8f 6f f0 1a 8d 02 01 a9 2c 00 20 27 22
>1a3bb8		20 09 1d 20 0d 07 c2 20 a5 23 8f 71 f0 1a c2 20
>1a3bc8		ad 04 01 8f 6a f0 1a e2 20 ad 06 01 8f 6c f0 1a
>1a3bd8		e2 20 a9 01 8f 66 f0 1a c2 20 af 5d f0 1a cf 6a
>1a3be8		f0 1a d0 14 e2 20 af 5f f0 1a cf 6c f0 1a d0 08
>1a3bf8		c2 20 20 28 37 28 2b 60 08 c2 20 48 a9 00 08 5b
>1a3c08		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>1a3c18		5b 1e e2 20 dc d4 08 08 c2 30 20 09 1d 20 63 07
>1a3c28		a5 23 48 a9 2c 00 20 27 22 20 09 1d 20 63 07 a4
>1a3c38		23 fa 20 20 00 28 60 08 20 3b 21 e2 20 a7 00 d0
>1a3c48		03 4c e7 3c c9 3a d0 03 4c e7 3c c9 22 d0 0b 20
>1a3c58		15 1c 20 f5 45 a9 3b 20 27 22 20 e2 04 90 44 20
>1a3c68		15 54 90 3f a9 3f 20 18 00 a9 20 20 18 00 20 10
>1a3c78		00 e2 20 a5 ea c9 02 f0 49 c9 00 d0 03 82 84 00
>1a3c88		c9 01 f0 5d 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a3c98		a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a3ca8		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3cb8		02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a3cc8		d4 08 c2 20 a9 00 4c 85 23 a9 00 00 85 25 e2 20
>1a3cd8		a9 02 85 27 c2 20 20 78 53 a9 0d 00 20 18 00 28
>1a3ce8		60 c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00
>1a3cf8		a9 00 00 85 02 20 37 5a c2 20 a5 40 85 00 a5 42
>1a3d08		85 02 80 d0 c2 20 a5 00 85 40 a5 02 85 42 a9 00
>1a3d18		4c 85 00 a9 00 00 85 02 20 d8 08 c2 20 a5 40 85
>1a3d28		00 a5 42 85 02 80 ad 08 20 3b 21 e2 20 a7 00 f0
>1a3d38		47 c9 3a f0 43 20 e2 04 90 40 20 15 54 90 3b 20
>1a3d48		01 15 20 14 00 e2 20 a0 00 00 97 16 a9 00 c8 97
>1a3d58		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>1a3d68		27 20 78 53 20 3b 21 a7 00 f0 0d c9 3a f0 09 c9
>1a3d78		2c d0 07 20 1a 21 80 b0 28 60 08 c2 20 48 a9 00
>1a3d88		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a3d98		00 20 5b 1e e2 20 dc d4 08 08 20 09 1d 20 51 06
>1a3da8		e2 20 a9 5c 85 a2 c2 20 a5 23 85 a3 e2 20 a5 25
>1a3db8		85 a5 e2 20 a9 2c 85 37 20 5c 22 90 41 20 1a 21
>1a3dc8		20 09 1d 20 0d 07 c2 20 a5 23 85 55 e2 20 a9 2c
>1a3dd8		85 37 20 5c 22 90 27 20 1a 21 20 09 1d 20 0d 07
>1a3de8		c2 20 a5 23 85 59 e2 20 a9 2c 85 37 20 5c 22 90
>1a3df8		0d 20 1a 21 20 09 1d 20 0d 07 c2 20 a4 23 a6 59
>1a3e08		a5 55 0b 8b 08 22 a2 08 00 28 ab 2b 20 5f 21 28
>1a3e18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a3e28		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a3e38		08 e2 20 20 3b 21 20 15 54 90 64 a9 8f 20 27 22
>1a3e48		a9 01 20 28 1a a2 01 00 a9 00 8f 00 4d 00 20 09
>1a3e58		1d 20 51 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>1a3e68		4d 00 1a 8f 00 4d 00 30 55 e8 e8 20 3b 21 a7 00
>1a3e78		c9 2c f0 25 c9 90 d0 27 20 1a 21 20 93 66 c2 20
>1a3e88		a5 c0 85 23 e2 20 a5 c2 85 25 64 26 a5 ea 09 80
>1a3e98		85 ea 85 27 20 78 53 28 60 20 1a 21 4c 56 3e 08
>1a3ea8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a3eb8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a3ec8		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>1a3ed8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 20 3b
>1a3ee8		21 e2 20 a7 00 f0 28 c9 3a f0 24 20 e2 04 90 21
>1a3ef8		20 15 54 90 1c 20 38 3f 20 78 53 20 3b 21 a7 00
>1a3f08		f0 0d c9 3a f0 09 c9 2c d0 07 20 1a 21 80 cf 28
>1a3f18		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a3f28		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a3f38		08 a5 02 85 42 a5 00 85 40 a5 1c 85 46 a5 1a 85
>1a3f48		44 c2 20 a5 3a d0 04 a5 38 f0 4e a5 38 85 00 a5
>1a3f58		3a 85 02 a5 3c 85 1a a5 3e 85 1c e2 20 a7 00 f0
>1a3f68		53 c9 3a f0 4f c9 2c d0 03 20 1a 21 20 3b 21 a7
>1a3f78		00 c9 22 f0 4e 20 fb 04 b0 4e 08 c2 20 48 a9 00
>1a3f88		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a3f98		00 20 5b 1e e2 20 dc d4 08 c2 20 a9 00 00 85 1a
>1a3fa8		a9 16 00 85 1c 18 a5 1a 69 04 00 85 00 a5 1c 69
>1a3fb8		00 00 85 02 e2 20 a9 80 85 35 a9 ab 85 37 20 71
>1a3fc8		21 80 a9 20 15 1c 80 03 20 37 5a c2 20 a5 00 85
>1a3fd8		38 a5 02 85 3a a5 1a 85 3c a5 1c 85 3e a5 44 85
>1a3fe8		1a a5 46 85 1c a5 40 85 00 a5 42 85 02 28 60 20
>1a3ff8		5f 21 60 64 38 64 3a 64 3c 64 3e 60 20 24 00 60
>1a4008		20 09 1d c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9
>1a4018		2c d0 22 20 1a 21 20 09 1d c2 20 a5 26 d0 35 68
>1a4028		85 08 68 85 0a c2 20 a5 23 87 08 e2 20 a0 02 00
>1a4038		a5 25 97 08 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4048		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a4058		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4068		a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a4078		dc d4 08 20 09 1d c2 20 a5 25 48 a5 23 48 e2 20
>1a4088		a7 00 c9 2c d0 19 20 1a 21 20 09 1d c2 20 a5 25
>1a4098		d0 2c 68 85 08 68 85 0a c2 20 a5 23 87 08 60 08
>1a40a8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a40b8		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a40c8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a40d8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 09 1d
>1a40e8		c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 1f
>1a40f8		20 1a 21 20 09 1d e2 20 a5 24 d0 32 c2 20 a5 25
>1a4108		d0 2c 68 85 08 68 85 0a e2 20 a5 23 87 08 60 08
>1a4118		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4128		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a4138		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a4148		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20
>1a4158		48 a9 00 08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2
>1a4168		20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 e2 20 a7
>1a4178		00 f0 05 20 1a 21 80 f7 28 60 08 28 60 08 28 60
>1a4188		08 28 60 08 c2 20 a5 1c 20 22 1e a5 1a 20 22 1e
>1a4198		a5 02 48 a5 00 48 20 5f 21 a5 02 20 22 1e a5 00
>1a41a8		20 22 1e 68 85 00 68 85 02 20 3b 21 20 15 54 b0
>1a41b8		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>1a41c8		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a41d8		e2 20 a5 ea 20 39 1e a5 e9 20 39 1e c2 20 a5 e7
>1a41e8		20 22 1e 20 3b 21 e2 20 a7 00 c9 8a d0 6a a5 ea
>1a41f8		c9 00 f0 04 c9 01 f0 00 20 1a 21 20 09 1d 20 78
>1a4208		53 e2 20 a9 9c 20 27 22 20 09 1d c2 20 a5 27 20
>1a4218		22 1e a5 25 20 22 1e a5 23 20 22 1e e2 20 a9 9d
>1a4228		85 37 20 5c 22 90 1b 20 1a 21 20 09 1d e2 20 a5
>1a4238		27 20 22 1e c2 20 a5 25 20 22 1e a5 23 20 22 1e
>1a4248		80 14 c2 20 a9 00 00 20 22 1e a9 00 00 20 22 1e
>1a4258		a9 01 00 20 22 1e 28 60 08 c2 20 48 a9 00 08 5b
>1a4268		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a4278		5b 1e e2 20 dc d4 08 08 8b 08 e2 20 48 a9 00 48
>1a4288		ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4
>1a4298		33 c8 c8 c2 20 b9 0c 00 85 e7 b9 0e 00 e2 20 85
>1a42a8		e9 b9 10 00 85 ea c2 20 5a 20 16 52 7a c2 20 b9
>1a42b8		00 00 85 29 b9 02 00 85 2b e2 20 b9 04 00 85 2d
>1a42c8		c2 20 5a 20 d8 27 20 78 53 7a c2 20 b9 06 00 85
>1a42d8		29 b9 08 00 85 2b e2 20 b9 0a 00 85 2d c2 20 b9
>1a42e8		02 00 30 0a 20 61 2a 20 1a 06 f0 28 80 08 20 21
>1a42f8		2a 20 1a 06 f0 1e c2 20 b9 12 00 85 00 b9 14 00
>1a4308		85 02 b9 16 00 85 1a b9 18 00 85 1c e2 20 a9 03
>1a4318		85 dc 80 17 a2 23 08 20 e9 19 c2 20 18 a5 33 69
>1a4328		1a 00 85 33 a5 35 69 00 00 85 35 ab 28 60 08 a5
>1a4338		1a 48 a5 1c 48 20 3b 21 20 d8 08 a5 23 f0 26 20
>1a4348		1b 24 90 42 e2 20 a9 02 85 dc 20 5f 21 c2 20 68
>1a4358		20 22 1e 68 20 22 1e a5 02 20 22 1e a5 00 20 22
>1a4368		1e e6 31 28 60 68 68 08 c2 20 48 a9 00 08 5b 68
>1a4378		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a4388		1e e2 20 dc d4 08 68 68 08 c2 20 48 a9 00 08 5b
>1a4398		68 28 e2 20 a9 06 8f d3 08 00 c2 20 29 ff 00 20
>1a43a8		5b 1e e2 20 dc d4 08 08 c2 30 a5 31 f0 1e 20 44
>1a43b8		1e 85 00 20 44 1e 85 02 20 44 1e 85 1a 20 44 1e
>1a43c8		85 1c c6 31 e2 20 a9 03 85 dc 28 60 08 c2 20 48
>1a43d8		a9 00 08 5b 68 28 e2 20 a9 07 8f d3 08 00 c2 20
>1a43e8		29 ff 00 20 5b 1e e2 20 dc d4 08 08 20 09 1d 20
>1a43f8		1a 06 f0 1c e2 20 a9 97 20 27 22 20 d8 08 20 1a
>1a4408		06 f0 12 20 1b 24 90 2c e2 20 a9 02 85 dc 80 03
>1a4418		20 5f 21 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4428		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a4438		20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4448		a9 06 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a4458		dc d4 08 08 e2 20 a9 01 85 dc 28 60 08 20 3b 21
>1a4468		20 d8 08 a5 23 f0 0d 20 1b 24 90 27 e2 20 a9 02
>1a4478		85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4488		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a4498		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a44a8		06 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a44b8		d4 08 20 8b 19 20 ab 10 20 15 51 60 08 a7 00 10
>1a44c8		03 20 1a 21 20 15 54 b0 03 4c 3b 45 e2 20 a5 ea
>1a44d8		48 a5 e9 48 a5 e8 48 a5 e7 48 20 7b 22 c9 8f d0
>1a44e8		0e a9 8f 20 27 22 a9 00 8f 00 4d 00 20 0a 1b 20
>1a44f8		3b 21 e2 20 a7 00 c9 8a f0 03 4c 3b 45 20 1a 21
>1a4508		20 09 1d 68 85 e7 68 85 e8 68 85 e9 68 85 ea 29
>1a4518		80 f0 1b 20 88 51 90 3a c2 20 a0 09 00 b7 08 85
>1a4528		c0 e2 20 c8 c8 b7 08 85 c2 20 7f 68 80 03 20 78
>1a4538		53 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4548		02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a4558		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05
>1a4568		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a4578		08 08 e2 20 20 7b 22 c9 00 f0 6d 20 09 1d e2 20
>1a4588		a5 27 c9 ff f0 1b c9 02 d0 05 20 f5 45 80 12 c9
>1a4598		00 d0 05 20 13 46 80 09 c9 01 d0 4f 20 26 46 80
>1a45a8		00 20 3b 21 a7 00 f0 40 c9 3a f0 3c c9 2c f0 23
>1a45b8		c9 3b f0 24 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a45c8		a9 02 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a45d8		dc d4 08 a9 09 20 18 00 20 1a 21 20 3b 21 a7 00
>1a45e8		f0 09 c9 3a f0 05 80 93 20 d7 03 28 60 08 8b 08
>1a45f8		c2 20 48 a9 00 08 5b 68 28 e2 20 a0 00 00 b7 23
>1a4608		f0 06 20 18 00 c8 80 f6 ab 28 60 08 c2 20 20 60
>1a4618		15 a5 16 85 23 a5 18 85 25 20 f5 45 28 60 08 20
>1a4628		de 5d c2 20 a5 16 85 23 a5 18 85 25 20 f5 45 28
>1a4638		60 08 e2 20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97
>1a4648		16 c8 a5 b5 29 0f 18 69 30 97 16 c8 28 60 e2 20
>1a4658		a9 8f 20 27 22 08 20 09 1d e2 20 c2 10 af 0e 08
>1a4668		af 09 08 8f 0e 08 af 20 01 15 a0 00 00 af 06 08
>1a4678		af 20 39 46 a9 2f 97 16 c8 af 09 08 af 20 39 46
>1a4688		a9 2f 97 16 c8 af 0f 08 af 20 39 46 af 0a 08 af
>1a4698		20 39 46 a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08
>1a46a8		af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>1a46b8		27 28 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 08
>1a46c8		20 09 1d e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08
>1a46d8		af 20 01 15 a0 00 00 af 04 08 af 29 7f 20 39 46
>1a46e8		a9 3a 97 16 c8 af 02 08 af 20 39 46 a9 3a 97 16
>1a46f8		c8 af 00 08 af 20 39 46 a9 00 97 16 af 0e 08 af
>1a4708		29 f7 8f 0e 08 af c2 20 a5 16 85 23 a5 18 85 25
>1a4718		e2 20 a9 02 85 27 28 e2 20 20 1a 21 60 e2 20 a9
>1a4728		8f 20 27 22 08 20 09 1d e2 20 a9 01 85 27 a9 03
>1a4738		8f 00 e2 af a9 01 8f 01 e2 af c2 30 af 84 e8 af
>1a4748		8f 08 e2 af af 84 e8 af 29 ff 7f 8f 0a e2 af a9
>1a4758		ff ff 8f 0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea
>1a4768		af 08 e2 af 85 23 af 0a e2 af 85 25 28 e2 20 20
>1a4778		1a 21 60 e2 20 a9 8f 20 27 22 08 20 09 1d 22 28
>1a4788		10 00 e2 20 85 23 64 24 64 25 64 26 a9 00 85 27
>1a4798		28 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 08 c2
>1a47a8		30 20 09 1d 20 e3 06 c2 20 a5 25 48 a5 23 48 20
>1a47b8		3b 21 e2 20 a7 00 c9 2c f0 03 4c 16 48 20 1a 21
>1a47c8		20 09 1d 20 0d 07 c2 20 a5 23 48 20 3b 21 e2 20
>1a47d8		a7 00 c9 2c f0 03 4c 16 48 20 1a 21 20 09 1d 20
>1a47e8		0d 07 c2 20 a5 23 85 8f e2 20 a5 25 85 91 c2 20
>1a47f8		68 85 29 a9 00 00 85 2b 68 85 23 68 85 25 e2 20
>1a4808		a9 02 85 27 20 59 17 e2 20 20 1a 21 28 60 08 c2
>1a4818		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a4828		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2 20
>1a4838		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a4848		20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f
>1a4858		20 27 22 08 c2 30 20 09 1d e2 20 a5 27 c9 02 f0
>1a4868		03 4c d8 48 c2 20 a5 25 48 a5 23 48 20 3b 21 e2
>1a4878		20 a7 00 c9 2c f0 03 4c f7 48 20 1a 21 20 09 1d
>1a4888		e2 20 a5 27 c9 00 d0 48 c2 20 a5 23 85 8f c2 20
>1a4898		68 85 23 68 85 25 e2 20 a9 02 85 27 e2 20 a0 00
>1a48a8		00 b7 23 f0 03 c8 80 f9 c2 20 98 38 e5 8f 30 09
>1a48b8		85 29 a9 00 00 85 2b 80 07 a9 00 00 85 29 85 2b
>1a48c8		e2 20 a9 00 85 2d 20 59 17 e2 20 20 1a 21 28 60
>1a48d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a48e8		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08
>1a48f8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4908		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a4918		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a4928		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9
>1a4938		8f 20 27 22 08 c2 30 20 09 1d e2 20 a5 27 c9 02
>1a4948		f0 03 4c a1 49 c2 20 a5 25 48 a5 23 48 20 3b 21
>1a4958		e2 20 a7 00 c9 2c f0 03 4c c0 49 20 1a 21 20 09
>1a4968		1d e2 20 a5 27 c9 00 d0 30 c2 20 a5 23 85 8f c2
>1a4978		20 a9 00 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>1a4988		2d c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27 20
>1a4998		59 17 e2 20 20 1a 21 28 60 08 c2 20 48 a9 00 08
>1a49a8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a49b8		20 5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a49c8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a49d8		5b 1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a49e8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a49f8		1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d
>1a4a08		c2 10 e2 20 a5 27 c9 02 d0 23 c2 20 a5 00 85 40
>1a4a18		a5 02 85 42 a5 23 85 00 a5 25 85 02 20 d8 08 a5
>1a4a28		40 85 00 a5 42 85 02 e2 20 20 1a 21 60 08 c2 20
>1a4a38		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a4a48		20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f
>1a4a58		20 27 22 08 20 09 1d c2 10 e2 20 a5 27 c9 00 d0
>1a4a68		1a 20 60 15 c2 20 a5 16 85 23 a5 18 85 25 e2 20
>1a4a78		a9 02 85 27 28 e2 20 20 1a 21 60 08 c2 20 48 a9
>1a4a88		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a4a98		ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27
>1a4aa8		22 08 20 09 1d 20 e3 06 c2 20 64 0c 64 0e e2 30
>1a4ab8		a0 00 b7 23 c9 20 f0 04 c9 24 d0 03 c8 80 f3 b7
>1a4ac8		23 20 0c 05 90 1e c2 20 06 0c 26 0e 06 0c 26 0e
>1a4ad8		06 0c 26 0e 06 0c 26 0e e2 20 20 2d 05 05 0c 85
>1a4ae8		0c c8 80 db c2 20 a5 0c 85 23 a5 0e 85 25 e2 20
>1a4af8		a9 00 85 27 28 e2 20 20 1a 21 60 e2 20 a9 8f 20
>1a4b08		27 22 08 20 09 1d 20 51 06 20 01 15 e2 30 a0 ff
>1a4b18		a9 00 97 16 88 a5 23 29 0f aa bf 00 d0 1a 97 16
>1a4b28		88 a5 23 29 f0 4a 4a 4a 4a aa bf 00 d0 1a 97 16
>1a4b38		88 a5 24 85 23 a5 25 85 24 a5 26 85 25 a9 00 85
>1a4b48		26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0 c8 98 38 65
>1a4b58		16 85 23 a5 17 85 24 a5 18 85 25 a5 19 85 26 a9
>1a4b68		02 85 27 28 e2 20 20 1a 21 60 08 c2 20 48 a9 00
>1a4b78		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4b88		00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22
>1a4b98		20 09 1d e2 20 a5 27 c9 02 d0 1f 8b a5 25 48 ab
>1a4ba8		c2 10 a6 23 20 ed 15 ab 84 23 c2 20 64 25 e2 20
>1a4bb8		a9 00 85 27 e2 20 20 1a 21 60 08 c2 20 48 a9 00
>1a4bc8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a4bd8		00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22
>1a4be8		20 09 1d 20 51 06 e2 20 a5 25 c9 b0 90 10 c9 f0
>1a4bf8		b0 0c 8b 48 ab a6 23 22 44 11 00 ab 80 04 e2 20
>1a4c08		a7 23 85 23 64 24 64 25 64 26 e2 20 20 1a 21 60
>1a4c18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a4c28		08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2
>1a4c38		20 a9 8f 20 27 22 20 09 1d 20 51 06 e2 20 a5 25
>1a4c48		c9 b0 90 22 c9 f0 b0 1e 8b 48 ab a6 23 da 22 44
>1a4c58		11 00 85 0c fa e8 da 22 44 11 00 85 0d fa e8 22
>1a4c68		44 11 00 ab 80 0d c2 20 a7 23 85 0c e2 20 a0 02
>1a4c78		00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2 20 20
>1a4c88		1a 21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4c98		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a4ca8		d4 08 e2 20 a9 8f 20 27 22 20 09 1d 20 51 06 e2
>1a4cb8		20 a5 25 c9 b0 90 1d c9 f0 b0 19 8b 48 ab a6 23
>1a4cc8		da 22 44 11 00 85 23 fa e8 22 44 11 00 85 24 ab
>1a4cd8		c2 20 80 06 c2 20 a7 23 85 23 64 25 e2 20 20 1a
>1a4ce8		21 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a4cf8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a4d08		08 e2 20 a9 8f 20 27 22 20 09 1d e2 20 a5 27 c9
>1a4d18		00 d0 24 20 01 15 a5 23 87 16 a9 00 a0 01 00 97
>1a4d28		16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85
>1a4d38		27 e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68
>1a4d48		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a4d58		1e e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d
>1a4d68		e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64 24 64 25
>1a4d78		64 26 a9 00 85 27 e2 20 20 1a 21 60 08 c2 20 48
>1a4d88		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a4d98		29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9 8f 20
>1a4da8		27 22 20 09 1d e2 20 a5 27 c9 00 d0 39 e2 20 a5
>1a4db8		26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20 01 15
>1a4dc8		a4 23 e2 20 a9 00 97 16 88 30 07 a9 20 97 16 88
>1a4dd8		10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18 85 25
>1a4de8		e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4df8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a4e08		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4e18		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a4e28		20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d e2 20
>1a4e38		a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e
>1a4e48		a5 24 d0 4a c2 10 20 01 15 a4 23 e2 20 a9 00 97
>1a4e58		16 88 30 07 a9 09 97 16 88 10 fb a9 02 85 27 c2
>1a4e68		20 a5 16 85 23 a5 18 85 25 e2 20 20 1a 21 60 08
>1a4e78		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a4e88		00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 c2
>1a4e98		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a4ea8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 e2 20 a9
>1a4eb8		8f 20 27 22 20 09 1d e2 20 a5 27 c9 00 f0 23 c9
>1a4ec8		01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4ed8		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a4ee8		d4 08 c2 20 a5 25 10 21 49 ff ff 85 25 a5 23 49
>1a4ef8		ff ff 18 69 01 00 85 23 a5 25 69 00 00 85 25 80
>1a4f08		08 e2 20 a5 26 29 7f 85 26 e2 20 20 1a 21 60 e2
>1a4f18		20 a9 8f 20 27 22 20 09 1d e2 20 a5 27 c9 00 d0
>1a4f28		25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9 00 00
>1a4f38		85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25 85 23
>1a4f48		e2 20 20 1a 21 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4f58		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a4f68		e2 20 dc d4 08 e2 20 a9 8f 20 27 22 20 09 1d 20
>1a4f78		51 06 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20
>1a4f88		09 1d 20 bf 07 20 3e 62 e2 20 20 1a 21 60 e2 20
>1a4f98		a9 8f 20 27 22 20 09 1d 20 bf 07 20 6d 62 e2 20
>1a4fa8		20 1a 21 60 e2 20 a9 8f 20 27 22 20 09 1d 20 bf
>1a4fb8		07 20 9c 62 e2 20 20 1a 21 60 e2 20 a9 8f 20 27
>1a4fc8		22 20 09 1d 20 bf 07 20 ca 62 e2 20 20 1a 21 60
>1a4fd8		e2 20 a9 8f 20 27 22 20 09 1d 20 bf 07 20 f3 63
>1a4fe8		e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20 09 1d
>1a4ff8		20 bf 07 20 c9 63 e2 20 20 1a 21 60 e2 20 a9 8f
>1a5008		20 27 22 20 09 1d 20 bf 07 20 15 64 e2 20 20 1a
>1a5018		21 60 e2 20 a9 8f 20 27 22 20 09 1d 20 bf 07 20
>1a5028		a9 64 e2 20 20 1a 21 60 e2 20 a9 8f 20 27 22 20
>1a5038		09 1d 20 bf 07 20 2b 65 e2 20 20 1a 21 60 00 ea
>1a5048		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2
>1a5058		20 a9 00 00 85 d9 e2 20 a9 16 85 db c2 30 a9 00
>1a5068		00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04 00 97 d9
>1a5078		20 f0 20 2b 28 60 8b 08 c2 20 a9 00 00 85 1a a9
>1a5088		16 00 85 1c 20 f0 20 20 d0 23 28 ab 60 08 c2 20
>1a5098		64 55 a9 ff 7f 85 59 20 d7 03 20 7b 22 29 ff 00
>1a50a8		c9 00 00 f0 2c c9 81 00 f0 1a 20 3b 21 20 d8 08
>1a50b8		a5 23 85 55 20 7b 22 29 ff 00 c9 00 00 f0 12 c9
>1a50c8		81 00 d0 2a 20 27 22 20 3b 21 20 d8 08 a5 23 85
>1a50d8		59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48 20 8b 18
>1a50e8		68 85 00 68 85 02 68 85 1a 68 85 1c 28 60 08 c2
>1a50f8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a5108		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 08 08 c2
>1a5118		20 48 a9 00 08 5b 68 28 c2 20 64 e4 64 e7 e2 20
>1a5128		64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04 00 85 e1
>1a5138		e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0 1a c9 3a
>1a5148		b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b
>1a5158		b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2 10 a0
>1a5168		00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08 00 d0 f2
>1a5178		b7 e7 20 56 05 20 42 51 b0 03 28 38 60 28 18 60
>1a5188		08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7 f0 0b 20
>1a5198		56 05 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00
>1a51a8		c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9 c2 20 a5
>1a51b8		e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20 a5 e6 85
>1a51c8		0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69
>1a51d8		01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 62 51 b0
>1a51e8		2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08
>1a51f8		85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08
>1a5208		e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60 08 20
>1a5218		88 51 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5228		a9 05 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20
>1a5238		dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8 c8 b7 08
>1a5248		85 25 e2 20 a0 00 00 b7 08 85 27 28 60 08 c2 20
>1a5258		18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69 00 85 0a
>1a5268		c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08 c2 20 48
>1a5278		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a5288		29 ff 00 20 5b 1e e2 20 dc d4 08 c2 20 a5 e1 85
>1a5298		c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1 e2 20 a5
>1a52a8		0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0 33 a5 ea
>1a52b8		c9 00 d0 05 20 51 06 80 2f c9 01 d0 05 20 bf 07
>1a52c8		80 26 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a52d8		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a52e8		08 c9 02 d0 03 20 f3 16 c2 10 20 55 52 c2 30 18
>1a52f8		a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00 85 0a a0
>1a5308		00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7
>1a5318		e7 f0 10 20 56 05 20 42 51 90 08 97 08 c8 c0 08
>1a5328		00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5 25 c8 c8
>1a5338		97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20 a5 e6 97
>1a5348		c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6 e2 20 a0
>1a5358		00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2 20 a5 23
>1a5368		85 c0 e2 20 a5 25 85 c2 20 0f 13 20 24 13 80 ea
>1a5378		08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05 20 88 51
>1a5388		b0 05 20 ad 52 80 4e e2 20 a5 27 c5 ea f0 33 a5
>1a5398		ea c9 00 d0 05 20 51 06 80 2c c9 01 d0 05 20 bf
>1a53a8		07 80 23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a53b8		04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a53c8		d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23 97 08 c8
>1a53d8		c8 a5 25 97 08 28 60 20 f3 16 a0 09 00 b7 08 85
>1a53e8		c0 c8 c8 e2 20 b7 08 85 c2 20 0f 13 20 43 13 e2
>1a53f8		20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23 85 c0 e2
>1a5408		20 a5 25 85 c2 20 0f 13 20 24 13 80 b9 08 20 3b
>1a5418		21 e2 20 a7 00 20 e2 04 90 42 c2 20 a5 00 85 e7
>1a5428		e2 20 a5 02 85 e9 20 1a 21 a7 00 f0 0d c9 24 f0
>1a5438		14 c9 25 f0 09 20 42 51 b0 ec a9 01 80 0c 20 1a
>1a5448		21 a9 00 80 05 20 1a 21 a9 02 85 ea 20 7b 22 c9
>1a5458		8f d0 06 a5 ea 09 80 85 ea 28 38 60 28 18 60 08
>1a5468		c2 20 18 a5 23 65 29 85 23 a5 25 65 2b 85 25 28
>1a5478		60 08 c2 20 38 a5 23 e5 29 85 23 a5 25 e5 2b 85
>1a5488		25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2 30 a9 00
>1a5498		00 83 01 83 03 83 05 83 07 83 09 a5 25 10 18 a9
>1a54a8		00 80 83 01 a5 25 49 ff ff 85 25 a5 23 49 ff ff
>1a54b8		1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01 49 00 80
>1a54c8		83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff ff 1a 85
>1a54d8		29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a a5 23 8f
>1a54e8		00 01 00 a5 29 8f 02 01 00 af 04 01 00 83 03 af
>1a54f8		06 01 00 83 05 a5 25 8f 00 01 00 a5 29 8f 02 01
>1a5508		00 18 af 04 01 00 63 05 83 05 af 06 01 00 63 07
>1a5518		83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01 00 18 af
>1a5528		04 01 00 63 05 83 05 af 06 01 00 63 07 83 07 a3
>1a5538		07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00 08 5b 68
>1a5548		28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a5558		1e e2 20 dc d4 08 c2 30 a3 01 10 16 a3 05 49 ff
>1a5568		ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05 a3 05 1a
>1a5578		83 05 a3 03 85 23 a3 05 85 25 c2 20 3b 18 69 0a
>1a5588		00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25 e5 2b 50
>1a5598		03 49 00 80 30 06 64 23 64 25 80 07 a9 ff ff 85
>1a55a8		23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0c a5 25
>1a55b8		c5 2b d0 06 64 23 64 25 80 16 a5 29 c5 23 a5 2b
>1a55c8		e5 25 50 03 49 00 80 10 eb a9 ff ff 85 23 85 25
>1a55d8		28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29 c5 23 d0
>1a55e8		09 a9 ff ff 85 23 85 25 80 04 64 23 64 25 28 60
>1a55f8		08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23 d0 06 64
>1a5608		23 64 25 80 07 a9 ff ff 85 23 85 25 28 60 08 c2
>1a5618		20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff
>1a5628		85 23 85 25 80 13 a5 29 c5 23 a5 2b e5 25 50 03
>1a5638		49 00 80 30 e8 64 23 64 25 28 60 08 c2 20 a5 23
>1a5648		c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85
>1a5658		25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80
>1a5668		30 e8 64 23 64 25 28 60 08 c2 20 8f 12 01 00 8a
>1a5678		8f 10 01 00 af 16 01 00 aa af 14 01 00 28 60 08
>1a5688		e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2 af c2 20
>1a5698		a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9 00 00 8f
>1a56a8		0c e2 af a9 00 01 8f 0e e2 af ea ea ea ea ea ea
>1a56b8		af 08 e2 af 85 23 af 0a e2 af 85 25 a9 01 00 85
>1a56c8		27 28 60 08 e2 20 a9 40 8f 00 e2 af 80 09 08 e2
>1a56d8		20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5
>1a56e8		23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2
>1a56f8		af a5 2b 8f 0e e2 af ea ea ea e2 20 af 06 e2 af
>1a5708		29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a e2 af
>1a5718		85 25 28 60 20 b7 57 80 f9 08 e2 20 a9 01 8f 01
>1a5728		e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af
>1a5738		a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e
>1a5748		e2 af ea ea ea e2 20 af 05 e2 af 29 17 d0 10 c2
>1a5758		20 af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 20
>1a5768		b7 57 80 f9 08 e2 20 a9 00 8f 01 e2 af a9 00 8f
>1a5778		00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2
>1a5788		af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea
>1a5798		e2 20 af 04 e2 af 29 07 d0 10 c2 20 af 08 e2 af
>1a57a8		85 23 af 0a e2 af 85 25 28 60 20 b7 57 80 f9 e2
>1a57b8		20 89 01 f0 20 00 08 c2 20 48 a9 00 08 5b 68 28
>1a57c8		e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a57d8		e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48 a9 00 08
>1a57e8		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>1a57f8		20 5b 1e e2 20 dc d4 08 89 04 f0 1f 08 c2 20 48
>1a5808		a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08 00 c2 20
>1a5818		29 ff 00 20 5b 1e e2 20 dc d4 08 60 08 e2 20 a9
>1a5828		00 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9 00 a0
>1a5838		8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f 08 e2
>1a5848		af a5 25 8f 0a e2 af ea ea ea e2 20 af 04 e2 af
>1a5858		89 07 f0 01 00 c2 20 af 08 e2 af 85 23 af 0a e2
>1a5868		af 85 25 28 60 08 e2 20 a9 01 8f 01 e2 af a9 02
>1a5878		8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00
>1a5888		8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>1a5898		ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 28
>1a58a8		60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f d0 03 28
>1a58b8		38 60 28 18 60 08 e2 20 38 e9 30 20 7a 05 c2 20
>1a58c8		29 ff 00 18 65 23 85 23 a5 25 69 00 00 85 25 28
>1a58d8		60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9 61 90 04
>1a58e8		c9 67 90 0a c9 41 90 04 c9 47 90 07 80 31 38 e9
>1a58f8		57 80 08 38 e9 37 80 03 38 e9 30 06 23 26 24 26
>1a5908		25 26 26 06 23 26 24 26 25 26 26 06 23 26 24 26
>1a5918		25 26 26 06 23 26 24 26 25 26 26 05 23 85 23 28
>1a5928		60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80 0f c2 20
>1a5938		06 23 26 25 80 07 c2 20 38 26 23 26 25 28 60 08
>1a5948		e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00 8f 01 e2
>1a5958		af 80 15 e2 20 a9 03 8f 01 e2 af ea ea ea 80 62
>1a5968		e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f 00 e2 af
>1a5978		c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f 0a e2 af
>1a5988		c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af
>1a5998		ea ea ea ca f0 2c af 08 e2 af 8f 0c 08 00 af 0a
>1a59a8		e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2 af c2 20
>1a59b8		af 0c 08 00 8f 08 e2 af af 0e 08 00 8f 0a e2 af
>1a59c8		80 be c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>1a59d8		e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d 85 23 a5
>1a59e8		5f 85 25 20 f9 5b c2 20 a5 23 85 29 a5 25 85 2b
>1a59f8		c2 20 a5 59 85 23 a5 5b 85 25 20 21 57 c2 20 a5
>1a5a08		55 85 29 a5 57 85 2b 20 d6 56 c2 20 a5 23 85 29
>1a5a18		a5 25 85 2b 20 47 59 20 6c 57 c2 20 a5 65 f0 07
>1a5a28		a5 25 09 00 80 85 25 e2 20 a9 01 85 27 28 60 5a
>1a5a38		08 c2 30 64 23 64 25 64 55 64 57 64 65 64 59 64
>1a5a48		5b a9 01 00 85 5d 64 5f 64 61 64 63 64 69 e2 20
>1a5a58		a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b c9 26 f0
>1a5a68		3a 20 fb 04 90 03 82 ac 00 08 c2 20 48 a9 00 08
>1a5a78		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a5a88		20 5b 1e e2 20 dc d4 08 a9 01 85 65 c8 b7 00 c9
>1a5a98		26 f0 08 20 fb 04 90 d1 82 7a 00 c8 b7 00 c9 68
>1a5aa8		f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0 48 80 b9
>1a5ab8		c8 b7 00 20 0c 05 b0 02 80 af 20 d9 58 c8 b7 00
>1a5ac8		20 0c 05 b0 f5 e2 20 a5 65 f0 11 c2 20 38 a9 00
>1a5ad8		00 e5 23 85 23 a9 00 00 e5 25 85 25 e2 20 a9 00
>1a5ae8		85 27 c2 20 18 98 65 00 85 00 a5 02 69 00 00 85
>1a5af8		02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07 c9 31 f0
>1a5b08		03 82 65 ff 20 29 59 c8 b7 00 c9 30 f0 f6 c9 31
>1a5b18		f0 f2 82 b0 ff 20 bd 58 c8 b7 00 c9 2e f0 08 20
>1a5b28		fb 04 b0 f1 82 9e ff c2 20 20 f9 5b c2 20 a5 23
>1a5b38		85 55 a5 25 85 57 64 23 64 25 e2 20 80 36 20 bd
>1a5b48		58 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f 02 01 00
>1a5b58		af 04 01 00 85 5f a5 5d 8f 00 01 00 a9 0a 00 8f
>1a5b68		02 01 00 af 04 01 00 85 5d af 06 01 00 18 65 5f
>1a5b78		85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45 f0 20 20
>1a5b88		fb 04 b0 ba c2 20 20 f9 5b c2 20 a5 23 85 59 a5
>1a5b98		25 85 5b 64 23 64 25 20 e0 59 e2 20 82 43 ff c2
>1a5ba8		20 20 f9 5b c2 20 a5 23 85 59 a5 25 85 5b 64 23
>1a5bb8		64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d f0 08 20
>1a5bc8		fb 04 b0 12 82 a2 fe a9 01 85 69 c8 b7 00 20 fb
>1a5bd8		04 b0 03 82 93 fe 20 bd 58 c8 b7 00 20 fb 04 b0
>1a5be8		f5 c2 20 a5 23 85 61 a5 25 85 63 20 e0 59 82 f1
>1a5bf8		fe 08 20 87 56 28 60 08 c2 20 a9 f6 5e 85 29 a9
>1a5c08		1a 00 85 2b e2 20 a9 01 85 2d c2 20 20 d2 5c c9
>1a5c18		ff ff d0 0c a9 00 00 8d 23 08 8d 25 08 82 a1 00
>1a5c28		f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26 08 29 80
>1a5c38		83 01 ad 25 08 2a ad 26 08 2a 83 02 a9 00 83 06
>1a5c48		ad 25 08 09 80 83 05 ad 24 08 83 04 ad 23 08 83
>1a5c58		03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48 a9 00 08
>1a5c68		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>1a5c78		20 5b 1e e2 20 dc d4 08 c2 20 a3 05 4a 83 05 a3
>1a5c88		03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96 f0 02 80
>1a5c98		e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18 69 01 00
>1a5ca8		8d 23 08 a3 05 49 ff ff 69 00 00 8d 25 08 80 0c
>1a5cb8		c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2 20 68 68
>1a5cc8		68 e2 20 a9 00 8d 27 08 28 60 da 08 c2 20 a5 25
>1a5cd8		48 a5 23 48 20 cb 56 20 a9 58 b0 11 a5 25 89 00
>1a5ce8		80 d0 05 a9 01 00 80 08 a9 ff ff 80 03 a9 00 00
>1a5cf8		fa 86 23 fa 86 25 28 fa 60 08 c2 30 20 d2 5c c9
>1a5d08		ff ff d0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2
>1a5d18		30 20 d2 5c c9 01 00 d0 05 20 2d 06 80 03 20 3f
>1a5d28		06 28 60 08 c2 30 20 d2 5c c9 00 00 d0 05 20 2d
>1a5d38		06 80 03 20 3f 06 28 60 08 c2 30 20 d2 5c c9 01
>1a5d48		00 f0 05 20 2d 06 80 03 20 3f 06 28 60 08 c2 30
>1a5d58		20 d2 5c c9 ff ff f0 05 20 2d 06 80 03 20 3f 06
>1a5d68		28 60 08 c2 30 20 d2 5c c9 00 00 f0 05 20 2d 06
>1a5d78		80 03 20 3f 06 28 60 08 e2 20 97 23 c8 a9 00 97
>1a5d88		23 28 60 da 08 e2 20 c9 80 90 0a 48 a9 2d 20 7f
>1a5d98		5d 68 49 ff 1a c2 30 29 ff 00 c9 64 00 90 0e a2
>1a5da8		64 00 20 70 56 18 69 30 00 20 7f 5d 8a a2 0a 00
>1a5db8		20 70 56 18 69 30 00 20 7f 5d 8a 18 69 30 00 20
>1a5dc8		7f 5d 28 fa 60 08 e2 20 c2 10 a0 00 00 b7 23 f0
>1a5dd8		03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00 00 f4 00
>1a5de8		00 f4 00 00 20 a9 58 90 19 20 01 15 e2 20 a0 00
>1a5df8		00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00 97 16 82
>1a5e08		ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9 01 83 01
>1a5e18		c2 20 a9 00 00 83 03 c2 20 af f2 5e 1a 85 29 af
>1a5e28		f4 5e 1a 85 2b 20 d2 5c 89 00 80 d0 12 20 6d 58
>1a5e38		a3 03 1a 83 03 20 d2 5c c9 ff ff f0 12 80 ee 20
>1a5e48		24 58 a3 03 3a 83 03 20 d2 5c c9 ff ff f0 f0 e2
>1a5e58		30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3 05 aa f0
>1a5e68		0f a5 25 09 80 85 25 46 25 66 24 66 23 ca d0 f7
>1a5e78		c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0 11 c2 20
>1a5e88		38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25 20
>1a5e98		60 15 c2 20 a5 16 85 23 a5 18 85 25 20 cd 5d e2
>1a5ea8		20 c8 a9 00 97 23 88 88 b7 23 c8 97 23 c0 02 00
>1a5eb8		d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05 83 06 f0
>1a5ec8		19 20 cd 5d a9 45 20 7f 5d a3 06 20 8b 5d 80 0a
>1a5ed8		c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27
>1a5ee8		c2 20 3b 18 69 06 00 1b 28 60 00 50 c3 47 00 00
>1a5ef8		80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9 48 8f 00
>1a5f08		e2 af c2 20 bd 00 00 8f 08 e2 af bd 02 00 8f 0a
>1a5f18		e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af c2
>1a5f28		20 af 23 08 00 8f 0c e2 af af 25 08 00 8f 0e e2
>1a5f38		af ea ea ea af 08 e2 af 48 af 0a e2 af 8f 0a e2
>1a5f48		af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2 af c2 20
>1a5f58		bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2 af ea ea
>1a5f68		ea 88 f0 14 af 08 e2 af 48 af 0a e2 af 8f 0a e2
>1a5f78		af 68 8f 08 e2 af 80 9b af 08 e2 af 8f 23 08 00
>1a5f88		af 0a e2 af 8f 25 08 00 60 e2 20 a9 00 8f 00 e2
>1a5f98		af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2 af 8f
>1a5fa8		0c e2 af af 25 08 00 8f 0a e2 af 8f 0e e2 af ea
>1a5fb8		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 e2
>1a5fc8		20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2 20 a5
>1a5fd8		23 8f 0c e2 af af 25 08 00 8f 0e e2 af af 1b 66
>1a5fe8		1a 8f 08 e2 af af 1d 66 1a 8f 0a e2 af ea ea ea
>1a5ff8		af 08 e2 af 85 23 af 0a e2 af 85 25 60 a2 00 00
>1a6008		a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08 e2 af
>1a6018		a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af
>1a6028		0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10 09 29
>1a6038		7f 85 26 a9 01 48 80 03 a9 00 48 a9 40 8f 00 e2
>1a6048		af a9 02 8f 01 e2 af c2 30 af 83 66 1a 85 29 8f
>1a6058		0c e2 af af 85 66 1a 85 2b 8f 0e e2 af 20 05 60
>1a6068		e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5 25 8f
>1a6078		0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>1a6088		29 ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5 23 df
>1a6098		87 66 1a a5 25 ff 89 66 1a 90 2c bf 83 66 1a 8f
>1a60a8		08 e2 af bf 85 66 1a 8f 0a e2 af a5 23 8f 0c e2
>1a60b8		af a5 25 8f 0e e2 af ea ea ea af 08 e2 af 85 23
>1a60c8		af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8 e0 0c
>1a60d8		00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20 91 5f 8b
>1a60e8		e2 20 a9 1a 48 ab c2 20 a2 c3 65 5a a0 05 00 20
>1a60f8		02 5f 7a a9 01 00 8f 27 08 00 ab fa 68 28 60 08
>1a6108		c2 30 48 da a5 23 85 29 a5 25 85 2b 20 91 5f 8b
>1a6118		e2 20 a9 1a 48 ab c2 20 a2 d7 65 5a a0 05 00 20
>1a6128		02 5f 7a ab 20 6c 57 fa 68 28 60 08 c2 30 48 da
>1a6138		a5 23 85 29 a5 25 85 2b 20 91 5f 8b e2 20 a9 1a
>1a6148		48 ab c2 20 a2 eb 65 5a a0 05 00 20 02 5f 7a ab
>1a6158		20 6c 57 fa 68 28 60 08 c2 30 48 da e2 20 a9 40
>1a6168		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>1a6178		e2 af a5 25 8f 0a e2 af af 1b 66 1a 8f 0c e2 af
>1a6188		af 1d 66 1a 8f 0e e2 af ea ea ea af 08 e2 af 85
>1a6198		0c af 0a e2 af 85 0e e2 20 a9 48 8f 00 e2 af c2
>1a61a8		20 ea ea ea af 08 e2 af 85 10 af 0a e2 af 85 12
>1a61b8		e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f 08 e2 af
>1a61c8		a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5 12 8f 0e
>1a61d8		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>1a61e8		25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01 e2 af c2
>1a61f8		20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea
>1a6208		af 08 e2 af 85 29 af 0a e2 af 85 2b 20 91 5f 8b
>1a6218		e2 20 a9 1a 48 ab c2 20 a2 ff 65 5a a0 08 00 20
>1a6228		02 5f 7a a9 01 00 8f 27 08 00 8f 2d 08 00 20 6c
>1a6238		57 ab fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e
>1a6248		60 da 8a 29 01 00 d0 05 20 07 61 80 03 20 df 60
>1a6258		fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80 85 26 c2
>1a6268		20 fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e 60
>1a6278		da 8a 29 01 00 d0 05 20 df 60 80 03 20 07 61 fa
>1a6288		8a 29 02 00 f0 0a e2 20 a5 26 09 80 85 26 c2 20
>1a6298		fa 68 28 60 08 c2 30 48 da 20 31 60 20 8e 60 20
>1a62a8		33 61 8a 29 01 00 f0 03 20 c7 5f 8a e2 20 4a 4a
>1a62b8		69 00 29 01 f0 06 a5 26 09 80 85 26 c2 20 fa 68
>1a62c8		28 60 08 c2 30 48 da 5a a5 25 10 1f 08 c2 20 48
>1a62d8		a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20
>1a62e8		29 ff 00 20 5b 1e e2 20 dc d4 08 c2 30 a5 23 cf
>1a62f8		1b 66 1a a5 25 cf 1d 66 1a b0 04 20 c7 5f 18 a9
>1a6308		00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af a9 01 8f
>1a6318		01 e2 af c2 20 af 73 66 1a 85 29 8f 0c e2 af af
>1a6328		75 66 1a 85 2b 8f 0e e2 af 20 05 60 8a f0 07 0a
>1a6338		0a 0a 0a 0a 0a a8 af 77 66 1a 85 29 8f 0c e2 af
>1a6348		af 79 66 1a 85 2b 8f 0e e2 af 20 05 60 8a f0 0b
>1a6358		0a 0a 0a 0a 85 29 18 98 65 29 a8 af 7b 66 1a 85
>1a6368		29 8f 0c e2 af af 7d 66 1a 85 2b 8f 0e e2 af 20
>1a6378		05 60 8a f0 09 0a 0a 85 29 18 98 65 29 a8 af 7f
>1a6388		66 1a 85 29 8f 0c e2 af af 81 66 1a 85 2b 8f 0e
>1a6398		e2 af 20 05 60 86 29 18 98 65 29 a8 20 5f 61 a5
>1a63a8		23 85 29 a5 25 85 2b 98 85 23 64 25 20 f9 5b 20
>1a63b8		d6 56 68 d0 07 a5 25 09 00 80 85 25 7a fa 68 28
>1a63c8		60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 91
>1a63d8		5f 8b e2 20 a9 1a 48 ab c2 20 a2 23 66 a0 05 00
>1a63e8		20 02 5f ab 20 6c 57 fa 68 28 60 08 c2 30 48 da
>1a63f8		20 c9 63 af 8b 66 1a 85 29 af 8d 66 1a 85 2b 20
>1a6408		cb 56 a5 25 49 00 80 85 25 fa 68 28 60 08 c2 30
>1a6418		48 da a5 23 85 29 a5 25 85 2b 20 91 5f 8b e2 20
>1a6428		a9 1a 48 ab c2 20 a2 37 66 a0 05 00 20 02 5f ab
>1a6438		20 6c 57 fa 68 28 60 c2 20 a5 23 85 29 a5 25 85
>1a6448		2b c2 20 af 1b 66 1a 85 23 af 1d 66 1a 85 25 8a
>1a6458		f0 30 4a aa 90 03 20 6c 57 c2 20 a5 25 48 a5 23
>1a6468		48 c2 20 a5 29 85 23 a5 2b 85 25 20 91 5f c2 20
>1a6478		a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85 25
>1a6488		80 cd 60 08 c2 30 48 da 8b e2 20 a9 1a 48 ab c2
>1a6498		20 a2 4b 66 5a a0 0a 00 20 02 5f 7a ab fa 68 28
>1a64a8		60 08 c2 30 48 da 5a a5 23 05 25 d0 10 c2 20 af
>1a64b8		1b 66 1a 85 23 af 1d 66 1a 85 25 80 61 a5 25 29
>1a64c8		00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2 20 a5 25
>1a64d8		48 a5 23 48 20 51 06 a6 23 20 bf 07 c2 20 a5 23
>1a64e8		85 29 a5 25 85 2b c2 20 68 85 23 68 85 25 20 cb
>1a64f8		56 20 8b 64 c2 20 a5 25 48 a5 23 48 c2 20 af 7f
>1a6508		66 1a 85 23 af 81 66 1a 85 25 20 3f 64 c2 20 68
>1a6518		85 29 68 85 2b 20 6c 57 98 f0 03 20 c7 5f 7a fa
>1a6528		68 28 60 08 c2 30 48 a5 25 10 1f 08 c2 20 48 a9
>1a6538		00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20 29
>1a6548		ff 00 20 5b 1e e2 20 dc d4 08 c2 30 05 23 f0 68
>1a6558		c2 20 af 1f 66 1a 85 29 af 21 66 1a 85 2b e2 20
>1a6568		a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23 48 20 21
>1a6578		57 a5 25 c5 2b d0 09 a5 23 45 29 29 f8 ff f0 30
>1a6588		20 d6 56 c2 20 af 1f 66 1a 85 29 af 21 66 1a 85
>1a6598		2b 20 21 57 c2 20 a5 23 85 29 a5 25 85 2b c2 20
>1a65a8		68 85 23 68 85 25 c2 20 a5 25 48 a5 23 48 80 be
>1a65b8		c2 20 68 85 29 68 85 2b 68 28 60 01 0d d0 37 61
>1a65c8		0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00 80 3f 1d
>1a65d8		ef 38 36 01 0d 50 b9 89 88 08 3c ab aa 2a be 00
>1a65e8		00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e ab
>1a65f8		aa aa 3e 00 00 80 3f 89 88 88 3d d9 89 9d 3d 8c
>1a6608		2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc 4c 3e ab
>1a6618		aa aa 3e 00 00 80 3f 00 00 00 40 8e e3 f8 3c 6e
>1a6628		db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00 80 3f 39
>1a6638		8e e3 3d 25 49 12 be cd cc 4c 3e ab aa aa be 00
>1a6648		00 80 3f 1d ef 38 36 01 0d d0 37 01 0d 50 39 61
>1a6658		0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa 2a 3e 00
>1a6668		00 00 3f 00 00 80 3f 00 00 80 3f c1 2c a1 6d 5f
>1a6678		97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f c9 40 db
>1a6688		0f 49 40 db 0f c9 3f db 0f 49 3f 08 20 0f 13 c2
>1a6698		20 a9 01 00 85 23 a9 00 00 85 25 e2 20 af 00 4d
>1a66a8		00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00
>1a66b8		4d 00 85 29 a9 00 00 85 2b e2 20 a9 00 85 2d c2
>1a66c8		20 20 4f 28 e8 e8 88 d0 e3 c2 20 a9 04 00 85 29
>1a66d8		a9 00 00 85 2b 20 4f 28 e2 20 af 00 4d 00 85 0c
>1a66e8		a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c 85 23 a5
>1a66f8		25 69 00 00 85 25 d0 29 e2 20 a5 ea 09 80 a6 23
>1a6708		20 d3 10 e2 20 af 00 4d 00 87 c0 a0 01 00 a2 00
>1a6718		00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23 e8 c8 80
>1a6728		f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a6738		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a6748		e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5
>1a6758		c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c
>1a6768		e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08
>1a6778		c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00 85
>1a6788		0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20
>1a6798		64 08 64 0a e2 20 af 00 4d 00 85 8f 64 90 a2 01
>1a67a8		00 e2 20 a7 c0 c5 8f f0 22 a6 8f 00 08 c2 20 48
>1a67b8		a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20
>1a67c8		29 ff 00 20 5b 1e e2 20 dc d4 08 c9 01 f0 3a a0
>1a67d8		01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25 64 26
>1a67e8		b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68
>1a67f8		20 4f 28 c2 20 18 a5 08 65 23 85 08 a5 0a 65 25
>1a6808		85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00
>1a6818		85 90 65 08 85 08 a5 09 69 00 85 09 c2 20 a5 0a
>1a6828		69 00 00 85 0a c2 20 06 08 26 0a 06 08 26 0a e2
>1a6838		20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09 c2 20
>1a6848		a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08 e2 20
>1a6858		a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b
>1a6868		68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20
>1a6878		5b 1e e2 20 dc d4 08 08 20 0f 13 e2 20 a0 00 00
>1a6888		b7 c3 29 7f c9 02 d0 05 20 e3 06 80 10 c9 00 d0
>1a6898		05 20 51 06 80 07 c9 01 d0 2b 20 bf 07 a5 27 48
>1a68a8		c2 20 a5 25 48 a5 23 48 20 95 67 68 85 23 68 85
>1a68b8		25 e2 20 68 85 27 c2 20 a5 23 87 08 a0 02 00 a5
>1a68c8		25 97 08 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a68d8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2
>1a68e8		20 dc d4 08 08 20 0f 13 f4 00 00 f4 00 00 e2 20
>1a68f8		48 20 95 67 e2 20 68 c2 20 68 68 c2 20 a7 08 85
>1a6908		23 a0 02 00 b7 08 85 25 e2 20 a0 00 00 b7 c3 29
>1a6918		7f 85 27 20 63 18 28 60 da 0b 08 08 c2 20 48 a9
>1a6928		00 08 5b 68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f
>1a6938		00 d0 0c a5 23 89 00 fc d0 05 20 13 46 80 2e a2
>1a6948		0a 00 46 25 66 23 ca d0 f9 20 13 46 e2 20 a9 4b
>1a6958		20 18 00 c2 20 80 16 a2 14 00 46 25 66 23 ca d0
>1a6968		f9 20 13 46 e2 20 a9 4d 20 18 00 c2 20 28 2b fa
>1a6978		60 0b 08 c2 30 a9 00 00 8f b6 08 00 8f b8 08 00
>1a6988		e2 20 20 7b 22 c9 00 f0 08 20 09 1d 20 e3 06 80
>1a6998		11 c2 20 a9 00 00 85 23 85 25 e2 20 a9 02 85 27
>1a69a8		c2 20 20 da 6a 22 08 11 00 b0 22 20 8b 6b 08 c2
>1a69b8		20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d3 08 00
>1a69c8		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 d7 03
>1a69d8		08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7
>1a69e8		18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00
>1a69f8		b7 18 89 08 f0 03 82 a9 00 89 02 f0 03 82 83 00
>1a6a08		29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7 18 20 18
>1a6a18		00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7
>1a6a28		18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0
>1a6a38		0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f
>1a6a48		23 08 00 c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f
>1a6a58		27 08 00 20 20 69 a9 09 20 18 00 a0 0b 00 b7 18
>1a6a68		89 08 d0 1c 89 01 f0 05 a9 52 20 18 00 89 04 f0
>1a6a78		05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18 00 ea
>1a6a88		20 d7 03 20 ee 03 22 0c 11 00 90 03 82 41 ff 20
>1a6a98		8b 6b 08 c2 20 48 a9 00 08 5b 68 28 20 5f 21 28
>1a6aa8		2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f
>1a6ab8		c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20
>1a6ac8		f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00
>1a6ad8		80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68 28 c2 30
>1a6ae8		a9 73 f2 85 20 a9 1a 00 85 22 a0 00 00 e2 20 a9
>1a6af8		00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81
>1a6b08		f2 1a a9 1a 00 8f 83 f2 1a af 23 08 00 8f 75 f2
>1a6b18		1a af 25 08 00 8f 77 f2 1a 28 2b 60 08 c2 30 20
>1a6b28		3b 21 20 09 1d 20 e3 06 20 da 6a e2 20 a9 2c 85
>1a6b38		37 20 5c 22 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f
>1a6b48		56 03 00 80 17 20 1a 21 20 09 1d 20 51 06 c2 20
>1a6b58		a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18 11 00
>1a6b68		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11
>1a6b78		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a6b88		08 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a6b98		08 e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e 03 00
>1a6ba8		85 23 a9 00 85 24 85 25 85 26 a9 00 85 27 85 ea
>1a6bb8		a9 1a 85 e9 c2 20 a9 ee 6b 85 e7 20 78 53 e2 20
>1a6bc8		af 20 03 00 85 23 a9 00 85 24 85 25 85 26 a9 00
>1a6bd8		85 27 85 ea a9 1a 85 e9 c2 20 a9 f6 6b 85 e7 20
>1a6be8		78 53 28 2b ab 60 44 4f 53 53 54 41 54 00 42 49
>1a6bf8		4f 53 53 54 41 54 00 08 c2 30 20 3b 21 20 09 1d
>1a6c08		20 e3 06 a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9
>1a6c18		ff ff 8f 54 03 00 8f 56 03 00 22 24 11 00 b0 25
>1a6c28		20 5b 1e 20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28
>1a6c38		e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a6c48		e2 20 dc d4 08 20 5b 1e 28 60 08 c2 30 20 3b 21
>1a6c58		20 09 1d 20 e3 06 20 da 6a a9 00 00 8f 54 03 00
>1a6c68		a9 01 00 8f 56 03 00 20 49 50 22 18 11 00 b0 22
>1a6c78		20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6c88		11 8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc
>1a6c98		d4 08 20 8b 6b c2 20 a2 12 00 18 bf 73 f2 1a 69
>1a6ca8		00 00 85 92 bf 75 f2 1a 69 01 00 85 94 e2 20 a9
>1a6cb8		00 87 92 c2 20 a9 00 00 85 7a a9 01 00 85 7c a2
>1a6cc8		00 00 e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04
>1a6cd8		9d 00 4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20
>1a6ce8		a9 00 9d 00 4f 20 82 27 c2 20 e6 7a d0 d1 e6 7c
>1a6cf8		80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00 4f 20 82
>1a6d08		27 28 60 08 c2 30 20 3b 21 20 09 1d 20 e3 06 20
>1a6d18		da 6a e2 20 a9 2c 20 27 22 c2 20 20 09 1d 20 51
>1a6d28		06 a5 23 8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9
>1a6d38		2c c2 20 20 27 22 20 09 1d 20 51 06 a5 23 8f 58
>1a6d48		03 00 a5 25 8f 5a 03 00 22 1c 11 00 b0 22 20 8b
>1a6d58		6b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f
>1a6d68		d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08
>1a6d78		20 8b 6b 28 60 da 5a 08 a2 00 00 a0 00 00 e2 20
>1a6d88		b7 23 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08
>1a6d98		c2 30 20 3b 21 20 09 1d 20 e3 06 20 da 6a a9 00
>1a6da8		00 85 a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9
>1a6db8		00 00 85 ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55
>1a6dc8		85 57 a9 ff ff 85 59 a9 ff 7f 85 5b 20 8b 18 e2
>1a6dd8		20 a9 80 85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03
>1a6de8		00 65 ab 8f 58 03 00 a9 01 00 8f 52 03 00 69 00
>1a6df8		00 8f 5a 03 00 22 1c 11 00 b0 22 20 8b 6b 08 c2
>1a6e08		20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00
>1a6e18		c2 20 29 ff 00 20 5b 1e e2 20 dc d4 08 20 8b 6b
>1a6e28		28 60 08 c2 30 20 3b 21 20 09 1d 20 e3 06 20 7d
>1a6e38		6d 22 04 11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00
>1a6e48		08 5b 68 28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff
>1a6e58		00 20 5b 1e e2 20 dc d4 08 20 8b 6b 28 60 da 08
>1a6e68		e2 20 c9 61 90 08 c9 7b b0 04 29 df 80 13 c9 20
>1a6e78		90 13 a2 00 00 df 91 6e 1a f0 0a e8 e0 0f 00 d0
>1a6e88		f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c
>1a6e98		3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08
>1a6ea8		5b 68 28 c2 30 20 09 1d 20 e3 06 20 7d 6d 22 10
>1a6eb8		11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b 68
>1a6ec8		28 e2 20 a9 14 8f d3 08 00 c2 20 29 ff 00 20 5b
>1a6ed8		1e e2 20 dc d4 08 e2 20 a9 2c 20 27 22 c2 20 20
>1a6ee8		09 1d 20 e3 06 ad 38 03 85 08 ad 3a 03 85 0a e2
>1a6ef8		20 a2 00 00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00
>1a6f08		00 a0 00 00 b7 23 f0 76 c9 2e f0 39 22 66 6e 1a
>1a6f18		b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>1a6f28		8f d3 08 00 c2 20 29 ff 00 20 5b 1e e2 20 dc d4
>1a6f38		08 95 7e c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e
>1a6f48		f0 03 c8 80 f5 c8 a2 08 00 b7 23 f0 31 22 66 6e
>1a6f58		1a b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b 68 28
>1a6f68		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 5b 1e
>1a6f78		e2 20 dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00
>1a6f88		00 a0 00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22
>1a6f98		14 11 00 b0 22 20 8b 6b 08 c2 20 48 a9 00 08 5b
>1a6fa8		68 28 e2 20 a9 15 8f d3 08 00 c2 20 29 ff 00 20
>1a6fb8		5b 1e e2 20 dc d4 08 20 8b 6b 28 60 08 08 c2 20
>1a6fc8		48 a9 00 08 5b 68 28 c2 30 20 09 1d 20 e3 06 a5
>1a6fd8		23 8f 64 03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20
>1a6fe8		27 22 c2 20 20 09 1d 20 e3 06 a5 23 8f 68 03 00
>1a6ff8		a5 25 8f 6a 03 00 22 30 11 00 b0 1f 08 c2 20 48
>1a7008		a9 00 08 5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20
>1a7018		29 ff 00 20 5b 1e e2 20 dc d4 08 28 60 5c e2 89
>1a7028		1a 5c 33 88 1a 5c e3 89 1a 5c 5f 79 1a 5c bc 79
>1a7038		1a 5c ef 78 1a 5c 75 78 1a 5c f2 7d 1a 5c e0 74
>1a7048		1a 5c 0d 78 1a 5c c8 77 1a 5c 52 77 1a 5c f1 88
>1a7058		1a 5c ee 75 1a 5c 3e 74 1a 5c 6c 89 1a 5c 1c 75
>1a7068		1a 5c e5 89 1a 5c de 89 1a 5c 0b 77 1a 5c e6 89
>1a7078		1a 18 fb 58 5c 80 70 1a c2 30 22 3e 74 1a 20 08
>1a7088		00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f 20 65
>1a7098		05 ab 22 29 70 1a 22 31 70 1a 80 e2 08 8b e2 20
>1a70a8		a9 1a 48 ab c2 10 a2 b7 70 20 64 04 ab 28 6b 41
>1a70b8		20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65 6d 62
>1a70c8		6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65 20 61
>1a70d8		20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61
>1a70e8		72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c
>1a70f8		65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b 29 5d
>1a7108		0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20 73 65
>1a7118		63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79
>1a7128		0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>1a7138		5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c 65 20
>1a7148		61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74
>1a7158		61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65
>1a7168		3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b
>1a7178		20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74 68 20
>1a7188		61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64 72 65
>1a7198		73 73 5d 0d 20 20 53 74 61 72 74 20 65 78 65 63
>1a71a8		75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63 61 74
>1a71b8		69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d
>1a71c8		20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63
>1a71d8		61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a71e8		20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61
>1a71f8		74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d
>1a7208		48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64 3e 20
>1a7218		3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d
>1a7228		20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c 75 65
>1a7238		73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20
>1a7248		20 20 20 4c 4f 41 44 20 20 20 20 20 20 20 20 20
>1a7258		22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e 61 74
>1a7268		69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b
>1a7278		65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68 65 20
>1a7288		76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a7298		0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74 68 65
>1a72a8		20 76 61 6c 75 65 73 20 6f 66 20 74 68 65 20 72
>1a72b8		65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e
>1a72c8		20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50
>1a72d8		3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56
>1a72e8		4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e 67 65
>1a72f8		20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20 6f 66
>1a7308		20 74 68 65 20 72 65 67 69 73 74 65 72 73 0d 0d
>1a7318		53 20 20 20 20 20 53 41 56 45 20 20 20 20 20 20
>1a7328		20 20 20 22 46 69 6c 65 22 20 3c 73 74 61 72 74
>1a7338		3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61 72 74
>1a7348		3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69 6e 61
>1a7358		74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66 65 72
>1a7368		20 28 63 6f 70 79 29 20 64 61 74 61 20 77 69 74
>1a7378		68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62
>1a7388		79 74 65 3e 0d 20 20 53 65 74 20 74 68 65 20 72
>1a7398		65 67 69 73 74 65 72 20 77 69 64 74 68 20 66 6c
>1a73a8		61 67 73 20 66 6f 72 20 74 68 65 20 64 69 73 61
>1a73b8		73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65
>1a73c8		74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e
>1a73d8		20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65 3e 20
>1a73e8		5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74
>1a73f8		20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d
>1a7408		0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61 20 73
>1a7418		68 6f 72 74 20 68 65 6c 70 20 73 63 72 65 65 6e
>1a7428		0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a7438		a5 0d 85 4e 28 6b 20 3d 02 08 e2 20 48 a9 1a 48
>1a7448		ab 68 28 a2 23 8a 20 64 04 e2 20 a9 3b 20 18 00
>1a7458		a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48 ab 68
>1a7468		28 a0 03 00 a2 42 02 20 e7 03 c2 20 a9 20 00 20
>1a7478		18 00 af 44 02 00 20 74 04 a9 20 00 20 18 00 af
>1a7488		46 02 00 20 74 04 a9 20 00 20 18 00 af 48 02 00
>1a7498		20 74 04 a9 20 00 20 18 00 af 4a 02 00 20 74 04
>1a74a8		a9 20 00 20 18 00 af 4e 02 00 20 8e 04 a9 20 00
>1a74b8		20 18 00 a9 20 00 20 18 00 af 4c 02 00 20 74 04
>1a74c8		a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 3c 87 1a
>1a74d8		28 20 d7 03 20 d7 03 6b 08 0b 08 c2 20 48 a9 48
>1a74e8		08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13
>1a74f8		d0 0e c2 20 a5 0d c5 11 d0 06 20 d7 03 2b 28 6b
>1a7508		c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00
>1a7518		85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>1a7528		e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d
>1a7538		e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d
>1a7548		c5 11 d0 03 4c d3 75 c2 20 18 a5 0d 69 01 00 85
>1a7558		0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15 69 01
>1a7568		00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2 20 38
>1a7578		a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20
>1a7588		18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85 17 e2
>1a7598		20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5
>1a75a8		0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85 11 e2
>1a75b8		20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01 00 85
>1a75c8		15 e2 20 a5 16 e9 00 85 16 80 c4 20 d7 03 2b 28
>1a75d8		6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03
>1a75e8		28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9 48 08
>1a75f8		5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0
>1a7608		16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11 e2
>1a7618		20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5
>1a7628		0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11 e2
>1a7638		20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20 a5 32
>1a7648		85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 d9 75 1a
>1a7658		b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69 01 00 85
>1a7668		19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90 db a9
>1a7678		00 99 7e 08 a9 3e 20 18 00 a9 20 20 18 00 e2 20
>1a7688		a5 34 20 8e 04 a9 3a 20 18 00 c2 20 a5 32 20 74
>1a7698		04 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18 00 a7
>1a76a8		32 20 8e 04 22 1b 87 1a e2 20 c6 47 d0 ea a9 20
>1a76b8		20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00 48 ab
>1a76c8		68 28 a2 7e 08 20 64 04 20 d7 03 20 ee 03 a5 34
>1a76d8		c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 d7 03 2b
>1a76e8		ab 28 6b 4c 3f 76 08 8d 92 08 e2 20 bd 00 00 99
>1a76f8		00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08 80
>1a7708		eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28
>1a7718		08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d 85 32
>1a7728		a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59 08 a0 7e
>1a7738		08 22 ee 76 1a a0 00 00 b9 7e 08 87 32 22 1b 87
>1a7748		1a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2 20
>1a7758		48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>1a7768		28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0 7e
>1a7778		08 22 ee 76 1a c2 20 a5 0d 85 32 a5 0f 85 34 c2
>1a7788		20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2 20 a0
>1a7798		00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2 20
>1a77a8		a5 32 85 4a a5 34 85 4c 22 c5 81 1a e2 20 a9 20
>1a77b8		20 18 00 22 1b 87 1a 80 c6 20 d7 03 ab 2b 28 6b
>1a77c8		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0 0e
>1a77d8		c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46
>1a77e8		02 00 aa af 48 02 00 a8 af 4a 02 00 1b af 4c 02
>1a77f8		00 5b e2 20 a9 1a 48 a9 78 48 a9 08 48 4c 3f 78
>1a7808		ea 5c 04 00 1a 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a7818		20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f 8f
>1a7828		42 02 00 af 46 02 00 aa af 48 02 00 a8 af 4a 02
>1a7838		00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48 ab a9
>1a7848		5c 8f a2 08 00 af 42 02 00 8f a5 08 00 af 41 02
>1a7858		00 8f a4 08 00 af 40 02 00 8f a3 08 00 af 4f 02
>1a7868		00 48 c2 20 af 44 02 00 28 5c a2 08 00 08 0b 8b
>1a7878		08 e2 20 48 a9 1a 48 ab 68 28 08 c2 20 48 a9 48
>1a7888		08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c c9 03
>1a7898		d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01 00 85
>1a78a8		47 80 08 a2 e7 89 20 64 04 80 35 a5 0d 85 4a a5
>1a78b8		0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09 22 c5
>1a78c8		81 1a a9 20 20 18 00 c2 20 18 a5 4a 69 01 00 85
>1a78d8		4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20 d7 03
>1a78e8		20 d7 03 ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9 00
>1a78f8		48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a7908		a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9 01
>1a7918		f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e 46 02
>1a7928		c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6 1d 8e
>1a7938		4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9 06 f0
>1a7948		12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6 29
>1a7958		8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48
>1a7968		08 5b 68 28 e2 20 c2 10 a2 00 00 bf 54 8a 1a f0
>1a7978		18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf 95 79
>1a7988		1a 8f 2f 08 00 22 b9 79 1a ab 2b 28 6b 35 70 3d
>1a7998		70 41 70 45 70 49 70 4d 70 51 70 55 70 59 70 5d
>1a79a8		70 39 70 61 70 65 70 69 70 2b 74 6d 70 71 70 a4
>1a79b8		70 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48 08 5b 68
>1a79c8		28 e2 20 a5 31 c9 02 b0 03 4c 62 7b c2 20 a5 0d
>1a79d8		85 32 a5 0f 85 34 c2 20 22 64 7d 1a c9 ff ff f0
>1a79e8		10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85 4f 80
>1a79f8		4c 20 d7 03 08 e2 20 48 a9 1a 48 ab 68 28 c2 10
>1a7a08		a2 99 7b 20 64 04 4c 62 7b 20 d7 03 08 e2 20 48
>1a7a18		a9 1a 48 ab 68 28 c2 10 a2 a8 7b 20 64 04 4c 62
>1a7a28		7b e2 20 22 9a 7d 1a c9 ff f0 de 85 4f c9 03 f0
>1a7a38		62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22 92 7c
>1a7a48		1a b0 03 4c 2b 7b 87 32 22 1b 87 1a 08 e2 20 48
>1a7a58		a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34 85 58
>1a7a68		e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14 f0 7c
>1a7a78		29 3f c9 02 d0 03 4c 59 7b c2 20 29 ff 00 aa e2
>1a7a88		20 bf 61 86 1a c9 03 f0 57 c9 02 f0 5f c9 01 f0
>1a7a98		67 80 71 c2 20 a5 54 c9 d9 82 f0 26 c9 3d 83 f0
>1a7aa8		2a c9 bd 82 f0 1c c9 c1 82 f0 17 c9 c9 82 f0 12
>1a7ab8		c9 b1 82 f0 0d c9 c5 82 f0 08 c9 ad 82 f0 03 4c
>1a7ac8		45 7a e2 20 a9 12 85 4f 4c 45 7a e2 20 a9 16 85
>1a7ad8		4f 4c 45 7a 22 d5 7b 1a 90 60 c9 02 f0 0e 80 18
>1a7ae8		a0 02 00 b9 98 08 97 56 22 1b 87 1a a0 01 00 b9
>1a7af8		98 08 97 56 22 1b 87 1a a0 00 00 b9 98 08 97 56
>1a7b08		22 1b 87 1a e2 20 a9 41 20 18 00 a9 20 20 18 00
>1a7b18		a6 32 86 4a a6 34 86 4c 22 c5 81 1a a9 20 20 18
>1a7b28		00 80 37 20 d7 03 08 e2 20 48 a9 1a 48 ab 68 28
>1a7b38		c2 10 a2 66 7b 20 64 04 80 20 20 d7 03 08 e2 20
>1a7b48		48 a9 1a 48 ab 68 28 c2 10 a2 b6 7b 20 64 04 80
>1a7b58		09 a5 4f 29 c0 d0 95 4c 00 7b 2b ab 28 6b 41 64
>1a7b68		64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20 6e 6f
>1a7b78		74 20 64 65 66 69 6e 65 64 20 66 6f 72 20 74 68
>1a7b88		61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e 2e 0d
>1a7b98		00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d 00
>1a7ba8		42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00 52 65
>1a7bb8		6c 61 74 69 76 65 20 6f 66 66 73 65 74 20 69 73
>1a7bc8		20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08 0b 08
>1a7bd8		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f c9 12 f0
>1a7be8		0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18 a5 32
>1a7bf8		69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5 50 e5
>1a7c08		4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9 16 f0
>1a7c18		1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9 01 80
>1a7c28		26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80 18 a5
>1a7c38		51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0 04 a9
>1a7c48		02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2 10 da
>1a7c58		08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2 00 00 df
>1a7c68		00 d0 1a f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20 06
>1a7c78		50 26 52 06 50 26 52 06 50 26 52 06 50 26 52 e2
>1a7c88		20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2 20 48
>1a7c98		a9 48 08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28
>1a7ca8		e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0 00 00
>1a7cb8		bd 5f 83 f0 1b c5 54 d0 0d e2 20 b9 61 85 29 3f
>1a7cc8		c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b 6b
>1a7cd8		18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>1a7ce8		e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0 11 c9
>1a7cf8		64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8 80 eb
>1a7d08		b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20 b7 36
>1a7d18		c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41 b0 0c
>1a7d28		c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 53 7c 1a
>1a7d38		80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28 a0 00 00
>1a7d48		e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68 18 65
>1a7d58		03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08 c2 20
>1a7d68		48 a9 48 08 5b 68 28 c2 20 a5 11 85 36 a5 13 85
>1a7d78		38 a9 ed 81 85 03 a9 1a 00 85 05 22 dc 7c 1a b0
>1a7d88		0d 22 3a 7d 1a a7 03 d0 f2 a9 ff ff 80 02 a5 03
>1a7d98		2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 c2 30
>1a7da8		a5 15 85 36 a5 17 85 38 a9 79 86 85 03 a9 1a 00
>1a7db8		85 05 22 dc 7c 1a b0 22 22 3a 7d 1a c2 20 18 a5
>1a7dc8		03 69 01 00 85 03 a5 05 69 00 00 85 05 e2 20 a7
>1a7dd8		03 d0 df c2 20 a9 ff ff 80 0d 22 3a 7d 1a e2 20
>1a7de8		a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08 c2 20
>1a7df8		48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5
>1a7e08		31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00
>1a7e18		01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85
>1a7e28		32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00
>1a7e38		01 85 11 e2 20 a5 34 69 00 85 13 22 5e 7e 1a e2
>1a7e48		20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20
>1a7e58		d7 03 2b ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9
>1a7e68		20 20 18 00 08 c2 20 48 a9 7a 08 5b 68 28 c2 20
>1a7e78		a5 00 85 18 e2 20 a5 02 85 1a 22 c5 81 1a a9 20
>1a7e88		20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2 20 a5
>1a7e98		02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48
>1a7ea8		a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0 0c 48 a7
>1a7eb8		18 0f 96 08 00 8f 96 08 00 68 c2 20 29 ff 00 0a
>1a7ec8		aa bf 5f 83 1a aa 22 3f 81 1a e2 20 a7 00 aa bf
>1a7ed8		61 85 1a 22 1b 87 1a 22 ec 7e 1a 20 d7 03 20 ee
>1a7ee8		03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c
>1a7ef8		fa 7e 2a 7f 45 7f 4c 7f 71 7f 78 7f 93 7f b5 7f
>1a7f08		c6 7f 03 80 0b 80 1c 80 2d 80 34 80 59 80 86 80
>1a7f18		f2 7f d7 7f a4 7f 79 80 83 80 97 80 c6 80 74 80
>1a7f28		d7 80 a9 28 20 18 00 22 ee 80 1a a9 2c 20 18 00
>1a7f38		a9 58 20 18 00 a9 29 20 18 00 4c e8 80 22 ee 80
>1a7f48		1a 4c e8 80 e2 20 48 a9 23 20 18 00 68 29 c0 c9
>1a7f58		00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 f8 80 1a 4c
>1a7f68		e8 80 22 ee 80 1a 4c e8 80 22 f8 80 1a 4c e8 80
>1a7f78		a9 28 20 18 00 22 ee 80 1a a9 29 20 18 00 a9 2c
>1a7f88		20 18 00 a9 59 20 18 00 4c e8 80 22 ee 80 1a a9
>1a7f98		2c 20 18 00 a9 58 20 18 00 4c e8 80 22 ee 80 1a
>1a7fa8		a9 2c 20 18 00 a9 59 20 18 00 4c e8 80 22 f8 80
>1a7fb8		1a a9 2c 20 18 00 a9 59 20 18 00 4c e8 80 22 f8
>1a7fc8		80 1a a9 2c 20 18 00 a9 58 20 18 00 4c e8 80 a9
>1a7fd8		28 20 18 00 22 f8 80 1a a9 2c 20 18 00 a9 58 20
>1a7fe8		18 00 a9 29 20 18 00 4c e8 80 a9 28 20 18 00 22
>1a7ff8		ee 80 1a a9 29 20 18 00 4c e8 80 a9 41 20 18 00
>1a8008		4c ec 80 22 ee 80 1a a9 2c 20 18 00 a9 53 20 18
>1a8018		00 4c e8 80 a9 5b 20 18 00 22 ee 80 1a a9 5d 20
>1a8028		18 00 4c e8 80 22 06 81 1a 4c ec 80 a9 28 20 18
>1a8038		00 22 ee 80 1a a9 2c 20 18 00 a9 53 20 18 00 a9
>1a8048		29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00 4c e8
>1a8058		80 a9 5b 20 18 00 22 ee 80 1a a9 5d 20 18 00 a9
>1a8068		2c 20 18 00 a9 59 20 18 00 4c e8 80 a0 02 00 80
>1a8078		03 a0 01 00 22 6c 81 1a 4c ec 80 4c ec 80 22 06
>1a8088		81 1a a9 2c 20 18 00 a9 58 20 18 00 4c ec 80 a9
>1a8098		23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01 00 22
>1a80a8		e7 03 1a a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0
>1a80b8		01 00 22 e7 03 1a ab 22 1b 87 1a 4c e8 80 a9 28
>1a80c8		20 18 00 22 f8 80 1a a9 29 20 18 00 4c e8 80 a9
>1a80d8		5b 20 18 00 22 f8 80 1a a9 5d 20 18 00 4c e8 80
>1a80e8		22 1b 87 1a 28 6b 08 e2 20 a7 00 20 8e 04 28 6b
>1a80f8		08 c2 30 a7 00 20 74 04 22 1b 87 1a 28 6b 08 8b
>1a8108		0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68 28 08 e2
>1a8118		20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7 00 99
>1a8128		92 08 22 1b 87 1a c8 c0 03 00 d0 f1 22 c5 81 1a
>1a8138		c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20
>1a8148		48 a9 1a 48 ab 68 28 bd 00 00 20 18 00 e8 bd 00
>1a8158		00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20 20 18
>1a8168		00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08 5b 68 28
>1a8178		e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64 19 64
>1a8188		1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85 18 22
>1a8198		1b 87 1a a7 00 85 19 30 04 64 1a 80 04 a9 ff 85
>1a81a8		1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02 65 1a
>1a81b8		85 1a 22 c5 81 1a 22 1b 87 1a 2b 28 6b 08 0b c2
>1a81c8		20 48 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4c
>1a81d8		20 8e 04 e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 74
>1a81e8		04 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45 4f 52
>1a81f8		00 41 44 43 00 53 54 41 00 4c 44 41 00 43 4d 50
>1a8208		00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c 53 52
>1a8218		00 52 4f 52 00 53 54 58 00 4c 44 58 00 44 45 43
>1a8228		00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53 54 59
>1a8238		00 4c 44 59 00 43 50 59 00 43 50 58 00 42 52 4b
>1a8248		00 4a 53 52 00 52 54 49 00 52 54 53 00 50 48 50
>1a8258		00 50 4c 50 00 50 48 41 00 50 4c 41 00 44 45 59
>1a8268		00 54 41 59 00 49 4e 59 00 49 4e 58 00 43 4c 43
>1a8278		00 53 45 43 00 43 4c 49 00 53 45 49 00 54 59 41
>1a8288		00 43 4c 56 00 43 4c 44 00 53 45 44 00 54 58 41
>1a8298		00 54 58 53 00 54 41 58 00 54 53 58 00 44 45 58
>1a82a8		00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42 56 43
>1a82b8		00 42 56 53 00 42 43 43 00 42 43 53 00 42 4e 45
>1a82c8		00 42 45 51 00 54 53 42 00 54 52 42 00 53 54 5a
>1a82d8		00 42 52 41 00 50 48 59 00 50 4c 59 00 50 48 58
>1a82e8		00 50 4c 58 00 50 48 44 00 50 4c 44 00 50 48 4b
>1a82f8		00 52 54 4c 00 50 48 42 00 50 4c 42 00 57 41 49
>1a8308		00 58 42 41 00 54 43 53 00 54 53 43 00 54 43 44
>1a8318		00 54 44 43 00 54 58 59 00 54 59 58 00 53 54 50
>1a8328		00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57 44 4d
>1a8338		00 50 45 52 00 42 52 4c 00 52 45 50 00 53 45 50
>1a8348		00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50 45 41
>1a8358		00 4a 4d 4c 00 00 00 45 82 ed 81 2d 83 ed 81 cd
>1a8368		82 ed 81 0d 82 ed 81 55 82 ed 81 0d 82 ed 82 cd
>1a8378		82 ed 81 0d 82 ed 81 ad 82 ed 81 ed 81 ed 81 d1
>1a8388		82 ed 81 0d 82 ed 81 75 82 ed 81 29 82 0d 83 d1
>1a8398		82 ed 81 0d 82 ed 81 49 82 f1 81 31 83 f1 81 2d
>1a83a8		82 f1 81 11 82 f1 81 59 82 f1 81 11 82 f1 82 2d
>1a83b8		82 f1 81 11 82 f1 81 b1 82 f1 81 f1 81 f1 81 2d
>1a83c8		82 f1 81 11 82 f1 81 79 82 f1 81 25 82 11 83 2d
>1a83d8		82 f1 81 11 82 f1 81 4d 82 f5 81 35 83 f5 81 49
>1a83e8		83 f5 81 15 82 f5 81 5d 82 f5 81 15 82 f5 82 31
>1a83f8		82 f5 81 15 82 f5 81 b5 82 f5 81 f5 81 f5 81 4d
>1a8408		83 f5 81 15 82 f5 81 7d 82 f5 81 dd 82 15 83 59
>1a8418		83 f5 81 15 82 f5 81 51 82 f9 81 39 83 f9 81 d5
>1a8428		82 f9 81 19 82 f9 81 61 82 f9 81 19 82 f9 82 31
>1a8438		82 f9 81 19 82 f9 81 b9 82 f9 81 f9 81 f9 81 d5
>1a8448		82 f9 81 19 82 f9 81 81 82 f9 81 e1 82 19 83 31
>1a8458		82 f9 81 19 82 f9 81 d9 82 fd 81 3d 83 fd 81 35
>1a8468		82 fd 81 1d 82 fd 81 65 82 2d 82 95 82 fd 82 35
>1a8478		82 fd 81 1d 82 fd 81 bd 82 fd 81 fd 81 fd 81 35
>1a8488		82 fd 81 1d 82 fd 81 85 82 fd 81 99 82 1d 83 d5
>1a8498		82 fd 81 d5 82 fd 81 39 82 01 82 21 82 01 82 39
>1a84a8		82 01 82 21 82 01 82 69 82 01 82 9d 82 01 83 39
>1a84b8		82 01 82 21 82 01 82 c1 82 01 82 01 82 01 82 39
>1a84c8		82 01 82 21 82 01 82 89 82 01 82 a1 82 21 83 39
>1a84d8		82 01 82 21 82 01 82 3d 82 05 82 41 83 05 82 3d
>1a84e8		82 05 82 25 82 05 82 6d 82 05 82 a5 82 05 83 3d
>1a84f8		82 05 82 25 82 05 82 c5 82 05 82 05 82 05 82 51
>1a8508		83 05 82 25 82 05 82 8d 82 05 82 e5 82 25 83 59
>1a8518		83 05 82 25 82 05 82 41 82 09 82 45 83 09 82 41
>1a8528		82 09 82 29 82 09 82 71 82 09 82 a9 82 09 83 41
>1a8538		82 09 82 29 82 09 82 c9 82 09 82 09 82 09 82 55
>1a8548		83 09 82 29 82 09 82 91 82 09 82 e9 82 29 83 49
>1a8558		82 09 82 29 82 09 82 00 00 13 00 02 09 01 01 01
>1a8568		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01 05 05
>1a8578		0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01 01 01
>1a8588		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05 05 05
>1a8598		0d 13 06 08 13 07 07 07 0e 13 00 13 09 14 01 01
>1a85a8		0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14 05 05
>1a85b8		0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01 01 01
>1a85c8		0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05 05 05
>1a85d8		0d 13 06 13 13 10 07 07 0e 12 00 16 09 01 01 01
>1a85e8		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>1a85f8		0d 13 06 13 13 03 07 07 0e 82 00 42 09 01 01 01
>1a8608		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05 05 11
>1a8618		0d 13 06 13 13 07 07 06 0e 42 00 02 09 01 01 01
>1a8628		0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01 05 05
>1a8638		0d 13 06 13 13 17 07 07 0e 42 00 02 09 01 01 01
>1a8648		0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03 05 05
>1a8658		0d 13 06 13 13 10 07 07 0e 01 01 01 02 01 01 02
>1a8668		02 00 01 01 03 01 01 03 01 02 01 01 00 02 02 02
>1a8678		02 41 00 08 64 64 3a 64 64 64 64 2c 58 00 0e 64
>1a8688		64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58 00 07
>1a8698		64 64 64 64 2c 59 00 06 64 64 64 64 00 03 64 64
>1a86a8		2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53 00 09
>1a86b8		64 64 00 01 23 64 64 64 64 00 c2 23 64 64 2c 23
>1a86c8		64 64 00 14 23 64 64 00 02 28 64 64 2c 53 29 2c
>1a86d8		59 00 0c 28 64 64 64 64 2c 58 29 00 10 28 64 64
>1a86e8		64 64 29 00 10 28 64 64 2c 58 29 00 00 28 64 64
>1a86f8		29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64 64 64
>1a8708		5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00
>1a8718		0a 00 00 08 c2 20 48 18 af 7a 08 00 69 01 00 8f
>1a8728		7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c 08 00 c2
>1a8738		20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a b0 08
>1a8748		48 a9 30 20 18 00 80 06 48 a9 31 20 18 00 68 ca
>1a8758		d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a8768		20 a7 32 f0 0a c9 20 d0 06 22 1b 87 1a 80 f2 6b
>1a8778		08 08 c2 20 48 a9 48 08 5b 68 28 22 1b 87 1a 22
>1a8788		5d 87 1a c2 30 a5 31 c2 20 29 ff 00 0a 0a aa a5
>1a8798		32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9 22 f0
>1a87a8		06 22 1b 87 1a 80 f2 a9 00 87 32 22 1b 87 1a e6
>1a87b8		31 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 64
>1a87c8		4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20
>1a87d8		0c 05 90 0e 22 53 7c 1a a9 01 85 4a 22 1b 87 1a
>1a87e8		80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa
>1a87f8		a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2 20 64
>1a8808		31 22 5d 87 1a a7 32 f0 21 c9 22 d0 06 22 78 87
>1a8818		1a 80 0a 22 bb 87 1a a5 31 c9 09 b0 0d a7 32 f0
>1a8828		09 c9 20 f0 dc 20 0c 05 b0 d7 6b 08 0b 08 c2 20
>1a8838		48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31 00 74 00
>1a8848		ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f 85 00
>1a8858		85 32 e2 20 22 5d 87 1a c9 00 f0 38 c2 20 a5 32
>1a8868		85 08 e2 20 a5 34 85 0a a2 01 00 22 1b 87 1a a7
>1a8878		32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb
>1a8888		86 0b a9 00 87 32 22 1b 87 1a a7 08 c9 41 f0 07
>1a8898		22 05 88 1a 2b 28 6b 22 5d 87 1a a7 32 f0 f5 22
>1a88a8		bb 87 1a 22 5d 87 1a a7 32 f0 e9 c2 20 a5 32 85
>1a88b8		11 e2 20 a5 34 85 13 22 1b 87 1a a7 32 f0 26 c9
>1a88c8		20 d0 f4 a9 00 87 32 e6 31 22 1b 87 1a 22 5d 87
>1a88d8		1a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85
>1a88e8		17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20 a5 31
>1a88f8		d0 0f a2 e7 89 a9 1a 48 ab 20 64 04 20 d7 03 80
>1a8908		61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20
>1a8918		da 6a e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff ff 8f
>1a8928		54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f 54 03
>1a8938		00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2 20 a2
>1a8948		0d 8a a9 1a 48 ab 20 64 04 af 2e 03 00 20 8e 04
>1a8958		a9 20 20 18 00 af 20 03 00 20 8e 04 20 d7 03 20
>1a8968		d7 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0f
>1a8978		a2 e7 89 a9 1a 48 ab 20 64 04 20 d7 03 80 54 c2
>1a8988		20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 da 6a
>1a8998		a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15 8f 58
>1a89a8		03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25 e2 20
>1a89b8		a2 f7 89 a9 1a 48 ab 20 64 04 af 2e 03 00 20 8e
>1a89c8		04 a9 20 20 18 00 af 20 03 00 20 8e 04 20 d7 03
>1a89d8		20 d7 03 28 ab 6b 5c b5 27 1a 6b 00 00 00 00 42
>1a89e8		61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d 00 55
>1a89f8		6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20 66 69
>1a8a08		6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f 20 6c
>1a8a18		6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20 50 43
>1a8a28		20 20 20 20 20 41 20 20 20 20 58 20 20 20 20 59
>1a8a38		20 20 20 20 53 50 20 20 20 44 42 52 20 44 50 20
>1a8a48		20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43 44 46
>1a8a58		47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f 00 18
>1a8a68		fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a8a78		00 48 ab 68 28 c2 30 20 a6 8a a9 ff fe 1b 08 e2
>1a8a88		20 48 a9 1a 48 ab 68 28 a2 77 d2 20 64 04 08 e2
>1a8a98		20 48 a9 00 48 ab 68 28 4c b5 27 4c a3 8a 08 20
>1a8aa8		34 03 20 49 50 28 60 00 00 00 00 00 00 00 00 00
>1a8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1107 times (17712 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>1ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>1ad268		00 49 4e 4b 45 59 00 0d 52 45 41 44 59 0d 00 43
>1ad278		32 35 36 20 46 6f 65 6e 69 78 20 42 41 53 49 43
>1ad288		38 31 36 20 76 30 2e 32 2e 30 2d 61 6c 70 68 61
>1ad298		2b 34 31 35 0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>1b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f4 f4 f4 f4 f4 f4 f4 f4

;******  Processing file: src\boot_menu.asm

.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		f4 00 00	pea #$0000	                PEA #0         ; set DP to page 0
.1e0003		2b		pld		                PLD
.1e0004		c2 10		rep #$10	                REP #$10        ; set X long
.1e0006		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0008		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e000c		a9 00		lda #$00	                LDA #$00
.1e000e		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0010		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0012		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0014		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e0018		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e001a		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e001e		20 e8 00	jsr $1e00e8	                JSR Splash_Get_Machine_ID
.1e0021		20 1b 01	jsr $1e011b	                JSR Splash_Clear_Screen
.1e0024		20 05 01	jsr $1e0105	                JSR Splash_Load_FontSet
.1e0027		22 f8 02 1e	jsl $1e02f8	                JSL Splashscreen_BitMapSetup
.1e002b		20 0b 06	jsr $1e060b	                JSR Model_Update_Info_Field
.1e002e		20 ec 05	jsr $1e05ec	                JSR Set_Text_Color
.1e0031		a9 00		lda #$00	                LDA #$00
.1e0033		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e0035		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e0037		20 93 08	jsr $1e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e003a						HAVE_FUN:
.1e003a		22 00 7c 19	jsl $197c00	                JSL BOOT_SOUND_OFF
.1e003e		22 35 01 1e	jsl $1e0135	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0042		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e0044		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e0047		f0 08		beq $1e0051	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e0049		20 d0 08	jsr $1e08d0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e004c		90 21		bcc $1e006f	                BCC Still_Displaying_Char
.1e004e		20 93 08	jsr $1e0893	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0051						ByPassCharDisplay:
.1e0051		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0053		22 28 10 00	jsl $001028	                JSL GETSCANCODE         ; Try to get a scan code
.1e0057		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e0059		f0 14		beq $1e006f	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e005b		c9 3b		cmp #$3b	                CMP #CHAR_F1            ; Did the user press F1?
.1e005d		f0 1f		beq $1e007e	                BEQ return              ; Yes: return it
.1e005f		c9 3c		cmp #$3c	                CMP #CHAR_F2            ; Did the user press F2?
.1e0061		f0 1b		beq $1e007e	                BEQ return              ; Yes: return it
.1e0063		c9 3d		cmp #$3d	                CMP #CHAR_F3            ; Did the user press F3?
.1e0065		f0 17		beq $1e007e	                BEQ return              ; Yes: return it
.1e0067		c9 1c		cmp #$1c	                CMP #SCAN_CR            ; Did the user press CR?
.1e0069		f0 13		beq $1e007e	                BEQ return              ; Yes: return it
.1e006b		c9 39		cmp #$39	                CMP #SCAN_SP            ; Did the user press SPACE?
.1e006d		f0 0d		beq $1e007c	                BEQ exitshere
.1e006f						Still_Displaying_Char:
.1e006f						WaitForNextSOF:
.1e006f		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0073		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0075		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e0077		d0 f6		bne $1e006f	                BNE WaitForNextSOF;
.1e0079		4c 3a 00	jmp $1e003a	                JMP HAVE_FUN
.1e007c						exitshere:
.1e007c						timeout
.1e007c		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e007e						return
.1e007e		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0082		a9 00		lda #$00	                LDA #$00
.1e0084		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e0088		22 2c 05 1e	jsl $1e052c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e008c		20 a1 00	jsr $1e00a1	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e008f		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0093		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e0097		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e009b		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e009f		ea		nop		                NOP
.1e00a0		6b		rtl		                RTL
.1e00a1						VickyII_Registers_Clear:
.1e00a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a3		c2 10		rep #$10	                REP #$10        ; set X long
.1e00a5		a2 00 00	ldx #$0000	                LDX #$0000
.1e00a8		a9 00		lda #$00	                LDA #$00
.1e00aa						ClearSpriteRegisters:
.1e00aa		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00ae		e8		inx		                INX
.1e00af		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b2		d0 f6		bne $1e00aa	                BNE ClearSpriteRegisters
.1e00b4		a2 00 00	ldx #$0000	                LDX #$0000
.1e00b7		a9 00		lda #$00	                LDA #$00
.1e00b9						ClearTiles0Registers:
.1e00b9		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00bd		e8		inx		                INX
.1e00be		e0 30 00	cpx #$0030	                CPX #$0030
.1e00c1		d0 f6		bne $1e00b9	                BNE ClearTiles0Registers
.1e00c3		ea		nop		                NOP
.1e00c4		a2 00 00	ldx #$0000	                LDX #$0000
.1e00c7		a9 00		lda #$00	                LDA #$00
.1e00c9						ClearTiles1Registers:
.1e00c9		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00cd		e8		inx		                INX
.1e00ce		e0 20 00	cpx #$0020	                CPX #$0020
.1e00d1		d0 f6		bne $1e00c9	                BNE ClearTiles1Registers
.1e00d3		ea		nop		                NOP
.1e00d4		a2 00 00	ldx #$0000	                LDX #$0000
.1e00d7		a9 00		lda #$00	                LDA #$00
.1e00d9						ClearBitmapRegisters:
.1e00d9		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00dd		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00e1		e8		inx		                INX
.1e00e2		e0 10 00	cpx #$0010	                CPX #$0010
.1e00e5		d0 f2		bne $1e00d9	                BNE ClearBitmapRegisters
.1e00e7		60		rts		                RTS
.1e00e8						Splash_Get_Machine_ID
.1e00e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00ea		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00ee		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00f0		85 b0		sta $b0		                STA MODEL
.1e00f2		c9 00		cmp #$00	                CMP #$00
.1e00f4		f0 0e		beq $1e0104	                BEQ DONE
.1e00f6		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00fa		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e00fc		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e00fe		f0 04		beq $1e0104	                BEQ DONE
.1e0100		a9 02		lda #$02	                LDA #$02
.1e0102		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e0104						DONE:
.1e0104		60		rts		                RTS
.1e0105						Splash_Load_FontSet
.1e0105		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0107		c2 10		rep #$10	                REP #$10        ; set X long
.1e0109		a2 00 00	ldx #$0000	                LDX #$0000
.1e010c						DONE_LOADING_FONT:
.1e010c		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e0110		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e0114		e8		inx		                INX
.1e0115		e0 00 08	cpx #$0800	                CPX #2048
.1e0118		d0 f2		bne $1e010c	                BNE DONE_LOADING_FONT
.1e011a		60		rts		                RTS
.1e011b						Splash_Clear_Screen
.1e011b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e011d		c2 10		rep #$10	                REP #$10        ; set X long
.1e011f		a2 00 00	ldx #$0000	                LDX #$0000
.1e0122						Branch_Clear:
.1e0122		a9 20		lda #$20	                LDA #$20
.1e0124		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e0128		a9 f0		lda #$f0	                LDA #$F0
.1e012a		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e012e		e8		inx		                INX
.1e012f		e0 00 20	cpx #$2000	                CPX #$2000
.1e0132		d0 ee		bne $1e0122	                BNE Branch_Clear
.1e0134		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e0135						Splash_Moniker_Color_Rolling
.1e0135		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0137		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e013b		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e013d		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e0141		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.1e0143		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e0145		f0 0c		beq $1e0153	                BEQ SERVE_STATE0
.1e0147		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e0149		f0 1a		beq $1e0165	                BEQ SERVE_STATE1
.1e014b		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e014d		d0 03		bne $1e0152	                BNE NOT_SERVE_STATE2
.1e014f		82 39 01	brl $1e028b	                BRL SERVE_STATE2
.1e0152						NOT_SERVE_STATE2
.1e0152		6b		rtl		                RTL
.1e0153						SERVE_STATE0
.1e0153		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.1e0155		c9 04		cmp #$04	                CMP #$04
.1e0157		f0 03		beq $1e015c	                BEQ SERVE_NEXT_STATE
.1e0159		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.1e015b		6b		rtl		                RTL
.1e015c						SERVE_NEXT_STATE
.1e015c		a9 00		lda #$00	                LDA #$00
.1e015e		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0160		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0162		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0164		6b		rtl		                RTL
.1e0165						SERVE_STATE1
.1e0165		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0167		a9 00 00	lda #$0000	                LDA #$0000
.1e016a		a2 00 00	ldx #$0000	                LDX #$0000
.1e016d		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e016f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0171		bf b0 02 1e	lda $1e02b0,x	                LDA @lCOLOR_POINTER+0, X
.1e0175		aa		tax		                TAX
.1e0176		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e017a		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e017e		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e0182		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e0186		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e018a		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e018e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0190		bf b1 02 1e	lda $1e02b1,x	                LDA @lCOLOR_POINTER+1, X
.1e0194		aa		tax		                TAX
.1e0195		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0199		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e019d		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01a1		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01a5		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01a9		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01ad		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01af		bf b2 02 1e	lda $1e02b2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b3		aa		tax		                TAX
.1e01b4		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01b8		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01bc		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01c0		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01c4		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01c8		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01cc		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01ce		bf b3 02 1e	lda $1e02b3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d2		aa		tax		                TAX
.1e01d3		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01d7		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01db		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01df		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e3		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e01e7		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01eb		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01ed		bf b4 02 1e	lda $1e02b4,x	                LDA @lCOLOR_POINTER+4, X
.1e01f1		aa		tax		                TAX
.1e01f2		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e01f6		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e01fa		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e01fe		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0202		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0206		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e020a		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e020c		bf b5 02 1e	lda $1e02b5,x	                LDA @lCOLOR_POINTER+5, X
.1e0210		aa		tax		                TAX
.1e0211		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0215		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e0219		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e021d		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e0221		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0225		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e0229		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e022b		bf b6 02 1e	lda $1e02b6,x	                LDA @lCOLOR_POINTER+6, X
.1e022f		aa		tax		                TAX
.1e0230		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0234		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e0238		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e023c		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e0240		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e0244		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e0248		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e024a		bf b7 02 1e	lda $1e02b7,x	                LDA @lCOLOR_POINTER+7, X
.1e024e		aa		tax		                TAX
.1e024f		bf 90 02 1e	lda $1e0290,x	                LDA @lCOLOR_CHART, X
.1e0253		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e0257		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e025b		bf 91 02 1e	lda $1e0291,x	                LDA @lCOLOR_CHART+1, X
.1e025f		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0263		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e0267		bf 92 02 1e	lda $1e0292,x	                LDA @lCOLOR_CHART+2, X
.1e026b		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e026f		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0273						HERE
.1e0273		18		clc		                CLC
.1e0274		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e0276		69 09		adc #$09	                ADC #$09
.1e0278		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e027c		c9 48		cmp #$48	                CMP #$48
.1e027e		d0 04		bne $1e0284	                BNE EXIT_COLOR_CHANGE
.1e0280		a9 00		lda #$00	                LDA #$00
.1e0282		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0284						EXIT_COLOR_CHANGE
.1e0284		c2 10		rep #$10	                REP #$10        ; set X long
.1e0286		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e0288		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e028a		6b		rtl		                RTL
.1e028b						SERVE_STATE2
.1e028b		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028d		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e028f		6b		rtl		                RTL
>1e0290						.align 16
>1e0290		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e0294		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e0298		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e029c		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02a0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02a4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02a8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02ac		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02b0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02b8		00
>1e02b9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02c1		00
>1e02c2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02ca		00
>1e02cb		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02d3		00
>1e02d4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02dc		00
>1e02dd		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02e5		00
>1e02e6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02ee		00
>1e02ef		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e02f7		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e02f8						Splashscreen_BitMapSetup
.1e02f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1e02fa		c2 10		rep #$10	                REP #$10        ; set X long
.1e02fc		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e02fe		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0302		a9 00		lda #$00	        LDA #$00
.1e0304		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0308		a9 00		lda #$00	        LDA #$00
.1e030a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e030e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0310		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0314		a9 00		lda #$00	        LDA #$00
.1e0316		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e031a		a9 00		lda #$00	        LDA #$00
.1e031c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0320		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0324		a9 01		lda #$01	        LDA #$01
.1e0326		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e032a		a9 08		lda #$08	        LDA #$08
.1e032c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0330		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0334		a9 80		lda #$80	        LDA #$80
.1e0336		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e033a		a9 00		lda #$00	        LDA #$00
.1e033c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0340		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0344		a9 a0		lda #$a0	        LDA #$A0
.1e0346		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e034a		a9 10		lda #$10	        LDA #$10
.1e034c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0350		a9 10		lda #$10	        LDA #$10
.1e0352		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0356		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e035a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e035c		c2 10		rep #$10	                REP #$10        ; set X long
.1e035e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0361						SS_LUT_BRANCH:
.1e0361		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0365		ea		nop		        NOP
.1e0366		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e036a		e8		inx		        INX
.1e036b		e0 00 04	cpx #$0400	        CPX #1024
.1e036e		d0 f1		bne $1e0361	        BNE SS_LUT_BRANCH
.1e0370		a9 00		lda #$00	        LDA #$00
.1e0372		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0376		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e037a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e037e		22 2c 05 1e	jsl $1e052c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0382		c2 20		rep #$20	                REP #$20        ; set A long
.1e0384		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0387		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e038b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e038e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e0392		a9 00 00	lda #$0000	        LDA #$0000
.1e0395		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0399		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e039c		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03a0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03a3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03a7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03aa		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03ae		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03b1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03b7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03b9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03bd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03bf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03c3		a9 00		lda #$00	        LDA #$00
.1e03c5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03c9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03cb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03cf		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03d5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03d9		29 03		and #$03	        AND #$03
.1e03db		c9 00		cmp #$00	        CMP #$00
.1e03dd		f0 0b		beq $1e03ea	        BEQ DMA_FMX_Moniker
.1e03df		c9 01		cmp #$01	        CMP #$01
.1e03e1		f0 5b		beq $1e043e	        BEQ DMA_UPlus_Moniker
.1e03e3		c9 02		cmp #$02	        CMP #$02
.1e03e5		d0 03		bne $1e03ea	        BNE BAD_MODEL_NUMBER
.1e03e7		82 a8 00	brl $1e0492	        BRL DMA_U_Moniker
.1e03ea						 BAD_MODEL_NUMBER:
.1e03ea						DMA_FMX_Moniker:
.1e03ea		c2 20		rep #$20	                REP #$20        ; set A long
.1e03ec		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ef		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e03f3		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e03f6		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03fa		a9 00 00	lda #$0000	        LDA #$0000
.1e03fd		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0401		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0404		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0408		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e040b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e040f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0412		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0416		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0419		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e041d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e041f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0421		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0425		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0427		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e042b		a9 00		lda #$00	        LDA #$00
.1e042d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0431		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0433		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0437		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e043b		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e043e						DMA_UPlus_Moniker:
.1e043e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0440		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0443		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0447		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e044a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e044e		a9 00 00	lda #$0000	        LDA #$0000
.1e0451		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0455		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0458		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e045c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e045f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0463		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0466		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e046a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e046d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0471		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0473		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0475		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0479		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e047b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e047f		a9 00		lda #$00	        LDA #$00
.1e0481		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0485		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0487		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e048b		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e048f		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e0492						DMA_U_Moniker:
.1e0492		c2 20		rep #$20	                REP #$20        ; set A long
.1e0494		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e0497		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e049b		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e049e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04a2		a9 00 00	lda #$0000	        LDA #$0000
.1e04a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04a9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04b0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04b7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04c7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04cd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04d3		a9 00		lda #$00	        LDA #$00
.1e04d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04d9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04df		22 e7 04 1e	jsl $1e04e7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04e3		4c e6 04	jmp $1e04e6	        JMP Done_DMA_Model_Moniker
.1e04e6						Done_DMA_Model_Moniker
.1e04e6		6b		rtl		        RTL
.1e04e7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04e9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04eb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ef		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e04f1		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e04f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f7		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e04fb		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e04fd		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0501		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0505		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0507		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e050b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e050c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e050d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e050e		ea		nop		        NOP
.1e050f		ea		nop		        NOP
.1e0510		ea		nop		        NOP
.1e0511		ea		nop		        NOP
.1e0512		ea		nop		        NOP
.1e0513		ea		nop		        NOP
.1e0514		ea		nop		        NOP
.1e0515		a9 00		lda #$00	        LDA #$00
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b						NOTFINISHED:
.1e051b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e051f		29 80		and #$80	        AND #$80
.1e0521		c9 80		cmp #$80	        CMP #$80
.1e0523		f0 f6		beq $1e051b	        BEQ NOTFINISHED
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e052b		6b		rtl		        RTL
.1e052c						SS_VDMA_CLEAR_MEMORY_640_480
.1e052c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e052e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0530		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0534		a9 00		lda #$00	        LDA #$00
.1e0536		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e053a		c2 20		rep #$20	                REP #$20        ; set A long
.1e053c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e053f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0543		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0545		a9 00		lda #$00	        LDA #$00
.1e0547		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e054b		c2 20		rep #$20	                REP #$20        ; set A long
.1e054d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0550		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0554		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0556		a9 04		lda #$04	        LDA #`(640*480)
.1e0558		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e055c		a9 00		lda #$00	        LDA #$00
.1e055e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0562		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0566		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0568		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e056c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e056d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e056e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e056f		ea		nop		        NOP
.1e0570		ea		nop		        NOP
.1e0571		ea		nop		        NOP
.1e0572		ea		nop		        NOP
.1e0573		ea		nop		        NOP
.1e0574						SS_VDMA_CLR_LOOPA:
.1e0574		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0578		29 80		and #$80	        AND #$80
.1e057a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e057c		f0 f6		beq $1e0574	        BEQ SS_VDMA_CLR_LOOPA
.1e057e		ea		nop		        NOP
.1e057f		a9 00		lda #$00	        LDA #$00
.1e0581		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0585		6b		rtl		        RTL
.1e0586						SS_VDMA_TRANSFER_VRAM_2_VRAM
.1e0586		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0588		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.1e058a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e058e		a9 00		lda #$00	        LDA #$00
.1e0590		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e0594		c2 20		rep #$20	                REP #$20        ; set A long
.1e0596		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.1e0599		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.1e059d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e059f		a9 00		lda #$00	        LDA #$00
.1e05a1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.1e05a5		c2 20		rep #$20	                REP #$20        ; set A long
.1e05a7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e05aa		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e05ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05b0		a9 00		lda #$00	        LDA #$00
.1e05b2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e05b6		c2 20		rep #$20	                REP #$20        ; set A long
.1e05b8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.1e05bb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e05bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05c1		a9 00		lda #$00	        LDA #`(320*16)
.1e05c3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e05c7		a9 00		lda #$00	        LDA #$00
.1e05c9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e05cd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e05d1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e05d3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05d7		ea		nop		        NOP
.1e05d8		ea		nop		        NOP
.1e05d9		ea		nop		        NOP
.1e05da						SS_VDMA_CLR_LOOPB:
.1e05da		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e05de		29 80		and #$80	        AND #$80
.1e05e0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e05e2		f0 f6		beq $1e05da	        BEQ SS_VDMA_CLR_LOOPB
.1e05e4		ea		nop		        NOP
.1e05e5		a9 00		lda #$00	        LDA #$00
.1e05e7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05eb		6b		rtl		        RTL

;******  Return to file: src\boot_menu.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e05ec						Set_Text_Color:
.1e05ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05ee		a9 00 00	lda #$0000	            LDA #00
.1e05f1		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e05f3		a9 30 00	lda #$0030	            LDA #48
.1e05f6		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e05f8		20 ec 08	jsr $1e08ec	            JSR Line_Display_Compute_Pointer
.1e05fb		a0 00 00	ldy #$0000	            LDY #$0000
.1e05fe		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0600		a9 40		lda #$40	            LDA #$40
.1e0602						SetColorBranch:
.1e0602		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e0604		c8		iny		            INY
.1e0605		c0 50 00	cpy #$0050	            CPY #80
.1e0608		d0 f8		bne $1e0602	            BNE SetColorBranch
.1e060a		60		rts		            RTS
.1e060b						Model_Update_Info_Field:
.1e060b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e060d		a9 00 00	lda #$0000	            LDA #$0000
.1e0610		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0612		a5 b0		lda $b0		            LDA MODEL
.1e0614		0a		asl a		            ASL
.1e0615		0a		asl a		            ASL
.1e0616		aa		tax		            TAX
.1e0617		c2 20		rep #$20	                REP #$20        ; set A long
.1e0619		bf 9f 0c 1e	lda $1e0c9f,x	            LDA MODEL_TABLE, X
.1e061d		85 a0		sta $a0		            STA MOD_SELECT_L
.1e061f		bf a1 0c 1e	lda $1e0ca1,x	            LDA MODEL_TABLE + 2, X
.1e0623		85 a2		sta $a2		            STA MOD_SELECT_H
.1e0625		a0 00 00	ldy #$0000	            LDY #$0000
.1e0628		84 a6		sty $a6		            STY LINE_INDEX
.1e062a						Next_Change_Here:
.1e062a		c2 20		rep #$20	                REP #$20        ; set A long
.1e062c		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e062e		bb		tyx		            TYX
.1e062f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e0631		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0633		bf ef 0c 1e	lda $1e0cef,x	            LDA LINE_MOD, X
.1e0637		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0639		c8		iny		            INY
.1e063a		c8		iny		            INY
.1e063b		bb		tyx		            TYX
.1e063c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e063e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0640		bf ef 0c 1e	lda $1e0cef,x	            LDA LINE_MOD, X
.1e0644		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0646		c8		iny		            INY
.1e0647		c8		iny		            INY
.1e0648		84 a6		sty $a6		            STY LINE_INDEX
.1e064a		c0 10 00	cpy #$0010	            CPY #16
.1e064d		f0 10		beq $1e065f	            BEQ LetsMoveOn
.1e064f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0651		a0 00 00	ldy #$0000	            LDY #$0000
.1e0654						nextchar:
.1e0654		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0656		c9 00		cmp #$00	            CMP #$00
.1e0658		f0 d0		beq $1e062a	            BEQ Next_Change_Here
.1e065a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e065c		c8		iny		            INY
.1e065d		80 f5		bra $1e0654	            BRA nextchar
.1e065f						LetsMoveOn:
.1e065f		af fb 0c 1e	lda $1e0cfb	            LDA LINE_MOD + 12
.1e0663		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0665		a0 00 00	ldy #$0000	            LDY #$0000
.1e0668		e2 20		sep #$20	                SEP #$20        ; set A short
.1e066a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e066e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0670		c8		iny		            INY
.1e0671		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e0675		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0677		c8		iny		            INY
.1e0678		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e067c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e067e		18		clc		            CLC
.1e067f		af 0d 07 af	lda $af070d	            LDA @l FPGA_DOR   ; it is in BCD
.1e0683		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0686		8f ca 0a 1e	sta $1e0aca	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e068a		8f 03 0b 1e	sta $1e0b03	            STA @lLINE9 + 47    ; GABE in FMX
.1e068e		8f 49 0b 1e	sta $1e0b49	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e0692		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e0696		29 0f		and #$0f	            AND #$0F
.1e0698		69 30		adc #$30	            ADC #$30
.1e069a		8f cb 0a 1e	sta $1e0acb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e069e		8f 04 0b 1e	sta $1e0b04	            STA @lLINE9 + 48    ; GABE in FMX
.1e06a2		8f 4a 0b 1e	sta $1e0b4a	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e06a6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e06aa		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06ad		8f cd 0a 1e	sta $1e0acd	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e06b1		8f 06 0b 1e	sta $1e0b06	            STA @lLINE9 + 50    ; GABE in FMX
.1e06b5		8f 4c 0b 1e	sta $1e0b4c	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e06b9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e06bd		29 0f		and #$0f	            AND #$0F
.1e06bf		69 30		adc #$30	            ADC #$30
.1e06c1		8f ce 0a 1e	sta $1e0ace	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e06c5		8f 07 0b 1e	sta $1e0b07	            STA @lLINE9 + 51    ; GABE in FMX
.1e06c9		8f 4d 0b 1e	sta $1e0b4d	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e06cd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e06d1		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06d4		8f d0 0a 1e	sta $1e0ad0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e06d8		8f 09 0b 1e	sta $1e0b09	            STA @lLINE9 + 53    ; GABE in FMX
.1e06dc		8f 4f 0b 1e	sta $1e0b4f	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e06e0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e06e4		29 0f		and #$0f	            AND #$0F
.1e06e6		69 30		adc #$30	            ADC #$30
.1e06e8		8f d1 0a 1e	sta $1e0ad1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e06ec		8f 0a 0b 1e	sta $1e0b0a	            STA @lLINE9 + 54    ; GABE in FMX
.1e06f0		8f 50 0b 1e	sta $1e0b50	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e06f4		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e06f8		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e06fb		8f c0 0a 1e	sta $1e0ac0	            STA @lLINE8 + 46    ; U/U+
.1e06ff		8f f9 0a 1e	sta $1e0af9	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e0703		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0707		29 0f		and #$0f	            AND #$0F
.1e0709		69 30		adc #$30	            ADC #$30
.1e070b		8f c1 0a 1e	sta $1e0ac1	            STA @lLINE8 + 47
.1e070f		8f fa 0a 1e	sta $1e0afa	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e0713		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0717		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e071a		8f 3f 0b 1e	sta $1e0b3f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e071e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0722		29 0f		and #$0f	            AND #$0F
.1e0724		69 30		adc #$30	            ADC #$30
.1e0726		8f 40 0b 1e	sta $1e0b40	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e072a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e072e		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0731		8f c2 0a 1e	sta $1e0ac2	            STA @lLINE8 + 48
.1e0735		8f fb 0a 1e	sta $1e0afb	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e0739		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e073d		29 0f		and #$0f	            AND #$0F
.1e073f		69 30		adc #$30	            ADC #$30
.1e0741		8f c3 0a 1e	sta $1e0ac3	            STA @lLINE8 + 49
.1e0745		8f fc 0a 1e	sta $1e0afc	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e0749		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e074d		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0750		8f 41 0b 1e	sta $1e0b41	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e0754		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0758		29 0f		and #$0f	            AND #$0F
.1e075a		69 30		adc #$30	            ADC #$30
.1e075c		8f 42 0b 1e	sta $1e0b42	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e0760		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0764		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0767		8f b4 0a 1e	sta $1e0ab4	            STA @lLINE8 + 34
.1e076b		8f ed 0a 1e	sta $1e0aed	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e076f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0773		29 0f		and #$0f	            AND #$0F
.1e0775		69 30		adc #$30	            ADC #$30
.1e0777		8f b5 0a 1e	sta $1e0ab5	            STA @lLINE8 + 35
.1e077b		8f ee 0a 1e	sta $1e0aee	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e077f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0783		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e0786		8f 34 0b 1e	sta $1e0b34	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e078a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e078e		29 0f		and #$0f	            AND #$0F
.1e0790		69 30		adc #$30	            ADC #$30
.1e0792		8f 35 0b 1e	sta $1e0b35	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e0796		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e079a		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e079d		8f b6 0a 1e	sta $1e0ab6	            STA @lLINE8 + 36
.1e07a1		8f ef 0a 1e	sta $1e0aef	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e07a5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07a9		29 0f		and #$0f	            AND #$0F
.1e07ab		69 30		adc #$30	            ADC #$30
.1e07ad		8f b7 0a 1e	sta $1e0ab7	            STA @lLINE8 + 37
.1e07b1		8f f0 0a 1e	sta $1e0af0	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e07b5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07b9		20 e6 07	jsr $1e07e6	            JSR HighNibblerBCD
.1e07bc		8f 36 0b 1e	sta $1e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07c0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07c4		29 0f		and #$0f	            AND #$0F
.1e07c6		69 30		adc #$30	            ADC #$30
.1e07c8		8f 36 0b 1e	sta $1e0b36	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07cc		20 3f 08	jsr $1e083f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e07cf		20 60 08	jsr $1e0860	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e07d2		20 61 08	jsr $1e0861	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e07d5		a5 b0		lda $b0		            LDA MODEL
.1e07d7		29 03		and #$03	            AND #$03
.1e07d9		c9 00		cmp #$00	            CMP #$00
.1e07db		f0 12		beq $1e07ef	            BEQ Erase_FATVicky_Line;
.1e07dd		c9 01		cmp #$01	            CMP #$01
.1e07df		f0 29		beq $1e080a	            BEQ Erase_2Lines;
.1e07e1		c9 02		cmp #$02	            CMP #$02
.1e07e3		f0 25		beq $1e080a	            BEQ Erase_2Lines;
.1e07e5		60		rts		            RTS
.1e07e6						HighNibblerBCD:
.1e07e6		29 f0		and #$f0	            AND #$F0
.1e07e8		4a		lsr a		            LSR A
.1e07e9		4a		lsr a		            LSR A
.1e07ea		4a		lsr a		            LSR A
.1e07eb		4a		lsr a		            LSR A
.1e07ec		69 30		adc #$30	            ADC #$30
.1e07ee		60		rts		            RTS
.1e07ef						Erase_FATVicky_Line:
.1e07ef		c2 20		rep #$20	                REP #$20        ; set A long
.1e07f1		a9 92 0a	lda #$0a92	            LDA #<>LINE8
.1e07f4		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e07f6		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e07f9		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e07fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1e07fd		a0 00 00	ldy #$0000	            LDY #$0000
.1e0800		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0802		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0804		c8		iny		            INY
.1e0805		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0807		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0809		60		rts		            RTS
.1e080a						Erase_2Lines
.1e080a		c2 20		rep #$20	                REP #$20        ; set A long
.1e080c		a9 d4 0a	lda #$0ad4	            LDA #<>LINE9
.1e080f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0811		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e0814		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0816		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0818		a0 00 00	ldy #$0000	            LDY #$0000
.1e081b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e081d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e081f		c8		iny		            INY
.1e0820		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0822		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0824		c2 20		rep #$20	                REP #$20        ; set A long
.1e0826		a9 16 0b	lda #$0b16	            LDA #<>LINE10
.1e0829		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e082b		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e082e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0830		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0832		a0 00 00	ldy #$0000	            LDY #$0000
.1e0835		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0837		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0839		c8		iny		            INY
.1e083a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e083c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e083e		60		rts		            RTS
.1e083f						GODETECTHIRES
.1e083f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0841		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e0845		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e0847		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e0849		f0 14		beq $1e085f	            BEQ WeAreDone
.1e084b		c2 10		rep #$10	                REP #$10        ; set X long
.1e084d		a2 00 00	ldx #$0000	            LDX #$0000
.1e0850						ChangeNextChar
.1e0850		bf 4f 0d 1e	lda $1e0d4f,x	            LDA @l ON_TEXT, X
.1e0854		c9 00		cmp #$00	            CMP #$00
.1e0856		f0 07		beq $1e085f	            BEQ WeAreDone
.1e0858		9f 43 0c 1e	sta $1e0c43,x	            STA @l LINE17 +13, X
.1e085c		e8		inx		            INX
.1e085d		d0 f1		bne $1e0850	            BNE ChangeNextChar
.1e085f						WeAreDone
.1e085f						NoExpansionCardPresent
.1e085f		60		rts		            RTS
.1e0860						GODETECTHDD
.1e0860		60		rts		            RTS
.1e0861						GODETECTEXP
.1e0861		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0863		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0867		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0869		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e086b		d0 25		bne $1e0892	            BNE NoExpansionCardPresent
.1e086d		c2 10		rep #$10	                REP #$10        ; set X long
.1e086f		a2 00 00	ldx #$0000	            LDX #$0000
.1e0872						ChangeNextChar
.1e0872		bf 53 0d 1e	lda $1e0d53,x	            LDA @l YES_TEXT, X
.1e0876		c9 00		cmp #$00	            CMP #$00
.1e0878		f0 07		beq $1e0881	            BEQ WeAreDone
.1e087a		9f 75 0c 1e	sta $1e0c75,x	            STA @l LINE19 +26, X
.1e087e		e8		inx		            INX
.1e087f		d0 f1		bne $1e0872	            BNE ChangeNextChar
.1e0881						WeAreDone
.1e0881		a2 00 00	ldx #$0000	            LDX #$0000
.1e0884						AddCardName
.1e0884		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0888		9f 79 0c 1e	sta $1e0c79,x	            STA @l LINE20, X
.1e088c		e8		inx		            INX
.1e088d		e0 10 00	cpx #$0010	            CPX #$10
.1e0890		d0 f2		bne $1e0884	            BNE AddCardName
.1e0892						NoExpansionCardPresent
.1e0892		60		rts		            RTS
.1e0893						Line_Setup_Before_Display
.1e0893		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e0895		a5 a6		lda $a6		            LDA LINE_INDEX
.1e0897		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e089a		f0 33		beq $1e08cf	            BEQ DONE
.1e089c		a5 a6		lda $a6		            LDA LINE_INDEX
.1e089e		0a		asl a		            ASL A
.1e089f		0a		asl a		            ASL A
.1e08a0		aa		tax		            TAX
.1e08a1		bf 14 09 1e	lda $1e0914,x	            LDA TEXT_TABLE, X
.1e08a5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e08a7		bf 16 09 1e	lda $1e0916,x	            LDA TEXT_TABLE + 2, X
.1e08ab		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e08ad		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08af		0a		asl a		            ASL A
.1e08b0		aa		tax		            TAX
.1e08b1		bf 70 09 1e	lda $1e0970,x	            LDA TEXT_POSX, X
.1e08b5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e08b7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08bb		bf 9e 09 1e	lda $1e099e,x	            LDA TEXT_POSY, X
.1e08bf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e08c1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e08c5		20 ec 08	jsr $1e08ec	            JSR Line_Display_Compute_Pointer
.1e08c8		a9 00 00	lda #$0000	            LDA #$0000
.1e08cb		85 a0		sta $a0		            STA TEXT_INDEX
.1e08cd		e6 a6		inc $a6		            INC LINE_INDEX
.1e08cf						DONE:
.1e08cf		60		rts		            RTS
.1e08d0						Line_Display_1_Character
.1e08d0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08d2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e08d4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e08d6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08da		e2 20		sep #$20	                SEP #$20        ; set A short
.1e08dc		38		sec		            SEC
.1e08dd		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e08df		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e08e1		c9 00		cmp #$00	            CMP #$00
.1e08e3		f0 06		beq $1e08eb	            BEQ WE_ARE_DONE;
.1e08e5		18		clc		            CLC
.1e08e6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e08e8		c8		iny		            INY
.1e08e9		84 a0		sty $a0		            STY TEXT_INDEX
.1e08eb						WE_ARE_DONE:
.1e08eb		60		rts		            RTS
.1e08ec						Line_Display_Compute_Pointer
.1e08ec		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08ee		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e08f0		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e08f4		a9 50 00	lda #$0050	            LDA #80
.1e08f7		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e08fb		18		clc		            CLC
.1e08fc		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e0900		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e0902		69 00 a0	adc #$a000	            ADC #$A000
.1e0905		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0907		69 00 20	adc #$2000	            ADC #$2000
.1e090a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e090c		a9 af 00	lda #$00af	            LDA #$00AF
.1e090f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0911		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e0913		60		rts		            RTS
>1e0914		cc 09 1e 00 ed 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e091c		03 0a 1e 00 11 0a 1e 00 29 0a 1e 00 4c 0a 1e 00
>1e092c		70 0a 1e 00 85 0a 1e 00
>1e0934		92 0a 1e 00 d4 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e093c		16 0b 1e 00 58 0b 1e 00 62 0b 1e 00 8b 0b 1e 00
>1e094c		c2 0b 1e 00 e5 0b 1e 00
>1e0954		f7 0b 1e 00 36 0c 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e095c		48 0c 1e 00 5b 0c 1e 00 79 0c 1e 00 8a 0c 1e 00
>1e096c		9d 0c 1e 00
>1e0970		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0978		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0988		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e0998		2d 00 1e 00 48 00
>1e099e		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e09a6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e09b6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e09c6		35 00 39 00 39 00
=6						leftAlign = 6
>1e09cc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e09d4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e09e4		20 20 20 20 20 20 20 20 00
>1e09ed		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e09f5		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e0a03		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e0a0b		4e 46 4f 3a 20 00
>1e0a11		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e0a19		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e0a29		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e0a31		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e0a41		20 20 20 20 20 20 20 20 20 20 00
>1e0a4c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e0a54		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a64		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a70		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a78		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a85		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a8d		53 29 3a 20 00
>1e0a92		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0a9a		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0aaa		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0aba		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0aca		30 30 2f 30 30 2f 30 30 20 00
>1e0ad4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533  - GABE     - REV:0000 SUBREV:0000 DATE:00/00/00     ", $00
>1e0adc		35 33 33 20 20 2d 20 47 41 42 45 20 20 20 20 20
>1e0aec		2d 20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45
>1e0afc		56 3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30
>1e0b0c		30 2f 30 30 20 20 20 20 20 00
>1e0b16		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551  - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00     ", $00
>1e0b1e		35 35 31 20 20 2d 20 56 49 43 4b 59 20 49 49 20
>1e0b2e		2d 20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45
>1e0b3e		56 3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30
>1e0b4e		30 2f 30 30 20 20 20 20 20 00
>1e0b58		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b60		20 00
>1e0b62		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b6a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b7a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b8a		00
>1e0b8b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0b93		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0ba3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0bb3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0bc2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0bca		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0bda		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0be5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0bed		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0bf7		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0bff		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0c0f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0c1f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0c2f		46 41 55 4c 54 20 00
>1e0c36		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0c3e		4f 44 45 3a 20 4f 46 46 20 00
>1e0c48		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0c50		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c5b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c63		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c73		3a 20 4e 4f 20 00
>1e0c79		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c81		00 00 00 00 00 00 00 00 00
>1e0c8a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0c92		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0c9d		20 00				LINE22 .text " ", $00
>1e0c9f		af 0c 1e 00 bf 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0ca7		cf 0c 1e 00 df 0c 1e 00
>1e0caf		ff 0c 1e 00 3f 0d 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0cb7		3f 0d 1e 00 00 00 00 00
>1e0cbf		0f 0d 1e 00 3f 0d 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0cc7		2f 0d 1e 00 00 00 00 00
>1e0ccf		1f 0d 1e 00 2f 0d 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0cd7		2f 0d 1e 00 00 00 00 00
>1e0cdf		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0ce7		00 00 00 00 00 00 00 00
>1e0cef		dc 09 1e 00 3b 0a 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0cf7		5f 0a 1e 00 7e 0a 1e 00
>1e0cff		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0d07		4e 49 58 20 46 4d 58 00
>1e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0d17		4e 49 58 20 55 2b 20 00
>1e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0d27		4e 49 58 20 55 20 20 00
>1e0d2f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0d37		32 20 42 59 54 45 53 00
>1e0d3f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0d47		34 20 42 59 54 45 53 00
>1e0d4f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0d53		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\boot_menu.asm

>1e0d57						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00

;******  Return to file: src\kernel.asm

.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				.byte $FF               ; Last byte of flash data

;******  End of listing
