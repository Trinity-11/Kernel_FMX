
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=2 --long-address --flat -b -o kernel_U.bin --list kernel_U.lst --labels=kernel_U.lbl src\kernel.asm
; Thu May 13 16:46:43 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=2						TARGET_SYS=2

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00					        ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00					        HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10					        HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20					        HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30					        HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40					        HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60					        HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80					        Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0					        VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$18ffe0					        JMP_READY        = $18FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$18ffe4					        VECTOR_COP       = $18FFE4 ;2 Bytes Native COP Interrupt vector
=$18ffe6					        VECTOR_BRK       = $18FFE6 ;2 Bytes Native BRK Interrupt vector
=$18ffe8					        VECTOR_ABORT     = $18FFE8 ;2 Bytes Native ABORT Interrupt vector
=$18ffea					        VECTOR_NMI       = $18FFEA ;2 Bytes Native NMI Interrupt vector
=$18ffec					        VECTOR_RESET     = $18FFEC ;2 Bytes Unused (Native RESET vector)
=$18ffee					        VECTOR_IRQ       = $18FFEE ;2 Bytes Native IRQ Vector
=$18fff0					        RETURN           = $18FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$18fff4					        VECTOR_ECOP      = $18FFF4 ;2 Bytes Emulation mode interrupt handler
=$18fff6					        VECTOR_EBRK      = $18FFF6 ;2 Bytes Emulation mode interrupt handler
=$18fff8					        VECTOR_EABORT    = $18FFF8 ;2 Bytes Emulation mode interrupt handler
=$18fffa					        VECTOR_ENMI      = $18FFFA ;2 Bytes Emulation mode interrupt handler
=$18fffc					        VECTOR_ERESET    = $18FFFC ;2 Bytes Emulation mode interrupt handler
=$18fffe					        VECTOR_EIRQ      = $18FFFE ;2 Bytes Emulation mode interrupt handler
=$200000					        VECTORS_END      = $200000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.18ff00		18		clc		RHRESET         CLC
.18ff01		fb		xce		                XCE
.18ff02		5c 00 10 00	jmp $001000	                JML BOOT
.18ff10						RHCOP
.18ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12		8b		phb		                PHB
.18ff13		0b		phd		                PHD
.18ff14		48		pha		                PHA
.18ff15		da		phx		                PHX
.18ff16		5a		phy		                PHY
.18ff17		5c 08 10 00	jmp $001008	                JML BREAK
.18ff20						RHBRK
.18ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22		8b		phb		                PHB
.18ff23		0b		phd		                PHD
.18ff24		48		pha		                PHA
.18ff25		da		phx		                PHX
.18ff26		5a		phy		                PHY
.18ff27		5c 08 10 00	jmp $001008	                JML BREAK
.18ff30						RHABORT
.18ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32		8b		phb		                PHB
.18ff33		0b		phd		                PHD
.18ff34		48		pha		                PHA
.18ff35		da		phx		                PHX
.18ff36		5a		phy		                PHY
.18ff37		5c 08 10 00	jmp $001008	                JML BREAK
.18ff40						 RHNMI
.18ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42		8b		phb		                PHB
.18ff43		0b		phd		                PHD
.18ff44		48		pha		                PHA
.18ff45		da		phx		                PHX
.18ff46		5a		phy		                PHY
.18ff47		22 96 19 18	jsl $181996	                JSL NMI_HANDLER
.18ff4b		7a		ply		                PLY
.18ff4c		fa		plx		                PLX
.18ff4d		68		pla		                PLA
.18ff4e		2b		pld		                PLD
.18ff4f		ab		plb		                PLB
.18ff50		40		rti		                RTI
.18ff60						RHIRQ
.18ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62		8b		phb		                PHB
.18ff63		0b		phd		                PHD
.18ff64		48		pha		                PHA
.18ff65		da		phx		                PHX
.18ff66		5a		phy		                PHY
.18ff67		22 c0 17 18	jsl $1817c0	                JSL IRQ_HANDLER
.18ff6b		7a		ply		                PLY
.18ff6c		fa		plx		                PLX
.18ff6d		68		pla		                PLA
.18ff6e		2b		pld		                PLD
.18ff6f		ab		plb		                PLB
.18ff70		40		rti		                RTI
.18ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec		00 00				                .word $0000    ; FFEC
>18ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0		5c 79 06 19	jmp $190679	RRETURN         JML IRETURN
>18fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c 84 05 19	jmp $190584	RESTORE         JML IRESTORE
.181008	1008	5c 18 06 19	jmp $190618	BREAK           JML IBREAK
.18100c	100c	5c 5f 06 19	jmp $19065f	READY           JML IREADY
.181010	1010	5c 7f 10 19	jmp $19107f	SCINIT          JML ISCINIT
.181014	1014	5c 80 10 19	jmp $191080	IOINIT          JML IIOINIT
.181018	1018	5c 1b 07 19	jmp $19071b	PUTC            JML IPUTC
.18101c	101c	5c 04 07 19	jmp $190704	PUTS            JML IPUTS
.181020	1020	5c bf 07 19	jmp $1907bf	PUTB            JML IPUTB
.181024	1024	5c 64 3b 19	jmp $193b64	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c dc 76 19	jmp $1976dc	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.18102c	102c	5c 92 77 19	jmp $197792	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.181030	1030	5c 83 10 19	jmp $191083	OPEN            JML IOPEN
.181034	1034	5c 84 10 19	jmp $191084	CLOSE           JML ICLOSE
.181038	1038	5c 7a 06 19	jmp $19067a	SETIN           JML ISETIN
.18103c	103c	5c 83 06 19	jmp $190683	SETOUT          JML ISETOUT
.181040	1040	5c 85 10 19	jmp $191085	GETB            JML IGETB
.181044	1044	5c 01 3b 19	jmp $193b01	GETBLOCK        JML IGETBLOCK
.181048	1048	5c c8 06 19	jmp $1906c8	GETCH           JML IGETCH
.18104c	104c	5c 95 06 19	jmp $190695	GETCHW          JML IGETCHW
.181050	1050	5c 8c 06 19	jmp $19068c	GETCHE          JML IGETCHE
.181054	1054	5c 86 10 19	jmp $191086	GETS            JML IGETS
.181058	1058	5c 87 10 19	jmp $191087	GETLINE         JML IGETLINE
.18105c	105c	5c 88 10 19	jmp $191088	GETFIELD        JML IGETFIELD
.181060	1060	5c 89 10 19	jmp $191089	TRIM            JML ITRIM
.181064	1064	5c 8a 10 19	jmp $19108a	PRINTC          JML IPRINTC
.181068	1068	5c 8b 10 19	jmp $19108b	PRINTS          JML IPRINTS
.18106c	106c	5c c0 07 19	jmp $1907c0	PRINTCR         JML IPRINTCR
.181070	1070	5c 8c 10 19	jmp $19108c	PRINTF          JML IPRINTF
.181074	1074	5c 8d 10 19	jmp $19108d	PRINTI          JML IPRINTI
.181078	1078	5c 74 08 19	jmp $190874	PRINTH          JML IPRINTH
.18107c	107c	5c 8e 10 19	jmp $19108e	PRINTAI         JML IPRINTAI
.181080	1080	5c 91 08 19	jmp $190891	PRINTAH         JML IPRINTAH
.181084	1084	5c 58 08 19	jmp $190858	LOCATE          JML ILOCATE
.181088	1088	5c 8f 10 19	jmp $19108f	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c 90 10 19	jmp $191090	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c 20 08 19	jmp $190820	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c 2f 08 19	jmp $19082f	CSRLEFT         JML ICSRLEFT
.181098	1098	5c 3e 08 19	jmp $19083e	CSRUP           JML ICSRUP
.18109c	109c	5c 4d 08 19	jmp $19084d	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c 0f 08 19	jmp $19080f	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c 63 08 19	jmp $190863	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c df 08 19	jmp $1908df	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c 8a 09 19	jmp $19098a	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c b3 0b 19	jmp $190bb3	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c 28 74 19	jmp $197428	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 00 7f 19	jmp $197f00	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c 94 0b 19	jmp $190b94	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 5c 0b 19	jmp $190b5c	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c 97 09 19	jmp $190997	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c b7 09 19	jmp $1909b7	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c 7d 0a 19	jmp $190a7d	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c 00 0b 19	jmp $190b00	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 5b 0b 19	jmp $190b5b	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 5b 0b 19	jmp $190b5b	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c cd 0c 19	jmp $190ccd	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c 5c 0d 19	jmp $190d5c	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c ca 0d 19	jmp $190dca	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c 7f 0d 19	jmp $190d7f	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c 0d 31 19	jmp $19310d	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c e7 4d 19	jmp $194de7	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c 7a 4e 19	jmp $194e7a	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c b4 4e 19	jmp $194eb4	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c 4d 4f 19	jmp $194f4d	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c e8 4e 19	jmp $194ee8	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c f7 4f 19	jmp $194ff7	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c b9 4f 19	jmp $194fb9	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c f3 4f 19	jmp $194ff3	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c 90 50 19	jmp $195090	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c b7 50 19	jmp $1950b7	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c bb 50 19	jmp $1950bb	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c 16 54 19	jmp $195416	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c d7 3a 19	jmp $193ad7	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c af 54 19	jmp $1954af	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c 02 3f 19	jmp $193f02	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c fb 0a 19	jmp $190afb	SETSIZES        JML ISETSIZES
.181130	1130	5c fe 55 19	jmp $1955fe	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c 48 55 19	jmp $195548	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c 9c 55 19	jmp $19559c	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.18113c	113c	5c 3d 77 19	jmp $19773d	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.181140	1140	5c 76 79 19	jmp $197976	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.181144	1144	5c 38 0b 19	jmp $190b38	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.181700	1700	5c 79 65 19	jmp $196579	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c 93 10 19	jmp $191093	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c 93 10 19	jmp $191093	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c 93 10 19	jmp $191093	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c 93 10 19	jmp $191093	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.181714	1714	5c 93 10 19	jmp $191093	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.181718	1718	5c 93 10 19	jmp $191093	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.18171c	171c	5c 10 80 19	jmp $198010	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.181720	1720	5c 90 75 19	jmp $197590	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.181724	1724	5c 93 10 19	jmp $191093	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.181728	1728	5c 93 10 19	jmp $191093	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.18172c	172c	5c 93 10 19	jmp $191093	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.181730	1730	5c 93 10 19	jmp $191093	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.181734	1734	5c 93 10 19	jmp $191093	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.181738	1738	5c 93 10 19	jmp $191093	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.18173c	173c	5c 93 10 19	jmp $191093	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.181740	1740	5c 93 10 19	jmp $191093	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.181744	1744	5c 93 10 19	jmp $191093	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.181748	1748	5c 93 10 19	jmp $191093	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.18174c	174c	5c 93 10 19	jmp $191093	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.181750	1750	5c 93 10 19	jmp $191093	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.181754	1754	5c 93 10 19	jmp $191093	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.181758	1758	5c 93 10 19	jmp $191093	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.18175c	175c	5c 93 10 19	jmp $191093	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.181760	1760	5c 93 10 19	jmp $191093	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.181764	1764	5c 93 10 19	jmp $191093	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.181768	1768	5c 93 10 19	jmp $191093	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.18176c						ISETHANDLER
.18176c		8b		phb		                PHB
.18176d		08		php		                PHP
.18176e		48		pha		                PHA             ; begin setdbr macro
.18176f		08		php		                PHP
.181770		e2 20		sep #$20	                SEP #$20        ; set A short
.181772		a9 00		lda #$00	                LDA #0
.181774		48		pha		                PHA
.181775		ab		plb		                PLB
.181776		28		plp		                PLP
.181777		68		pla		                PLA             ; end setdbr macro
.181778		e2 20		sep #$20	                SEP #$20        ; set A short
.18177a		c2 10		rep #$10	                REP #$10        ; set X long
.18177c		48		pha		                PHA                     ; Save the interrupt number
.18177d		5a		phy		                PHY                     ; Save the handler's bank
.18177e		da		phx		                PHX                     ; Save the handler's address
.18177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.181782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.181782		29 30		and #$30	                AND #$30                ; Isolate the block #
.181784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.181785		83 01		sta $01,s	                STA l_vector
.181787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.181789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.18178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.18178c		0a		asl a		                ASL A
.18178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.18178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.181791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.181792		a9 00		lda #$00	                LDA #<VEC_INT_START
.181794		63 01		adc $01,s	                ADC l_vector
.181796		83 01		sta $01,s	                STA l_vector
.181798		a9 17		lda #$17	                LDA #>VEC_INT_START
.18179a		63 02		adc $02,s	                ADC l_vector+1
.18179c		83 02		sta $02,s	                STA l_vector+1
.18179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.18179f		a0 00 00	ldy #$0000	                LDY #0
.1817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.1817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.1817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.1817a7		a3 03		lda $03,s	                LDA l_handler
.1817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.1817ac		a3 04		lda $04,s	                LDA l_handler+1
.1817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.1817b1		a3 05		lda $05,s	                LDA l_handler+2
.1817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b5		c2 20		rep #$20	                REP #$20        ; set A long
.1817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.1817b8		3b		tsc		                TSC
.1817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.1817bc		1b		tcs		                TCS
.1817bd		28		plp		                PLP
.1817be		ab		plb		                PLB
.1817bf		6b		rtl		                RTL
.1817c0						IRQ_HANDLER
.1817c0		08		php		                PHP
.1817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.1817c7		d0 03		bne $1817cc	                BNE process_reg0
.1817c9		82 80 00	brl $18184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.1817cc						process_reg0
.1817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.1817ce		f0 0c		beq $1817dc	                BEQ continue            ; If not: skip the rest of this macro
.1817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.1817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.1817da		e2 20		sep #$20	                SEP #$20        ; set A short
.1817dc						continue
.1817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.1817de		f0 0c		beq $1817ec	                BEQ continue            ; If not: skip the rest of this macro
.1817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.1817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.1817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1817ec						continue
.1817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.1817ee		f0 0c		beq $1817fc	                BEQ continue            ; If not: skip the rest of this macro
.1817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.1817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.1817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1817fc						continue
.1817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.1817fe		f0 0c		beq $18180c	                BEQ continue            ; If not: skip the rest of this macro
.181800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.181802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.18180a		e2 20		sep #$20	                SEP #$20        ; set A short
.18180c						continue
.18180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.18180e		f0 0c		beq $18181c	                BEQ continue            ; If not: skip the rest of this macro
.181810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.181812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.18181a		e2 20		sep #$20	                SEP #$20        ; set A short
.18181c						continue
.18181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.18181e		f0 0c		beq $18182c	                BEQ continue            ; If not: skip the rest of this macro
.181820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.181822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.18182a		e2 20		sep #$20	                SEP #$20        ; set A short
.18182c						continue
.18182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.18182e		f0 0c		beq $18183c	                BEQ continue            ; If not: skip the rest of this macro
.181830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.181832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.18183a		e2 20		sep #$20	                SEP #$20        ; set A short
.18183c						continue
.18183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.18183e		f0 0c		beq $18184c	                BEQ continue            ; If not: skip the rest of this macro
.181840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.181842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.18184a		e2 20		sep #$20	                SEP #$20        ; set A short
.18184c						continue
.18184c						CHECK_PENDING_REG1
.18184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.181850		d0 03		bne $181855	                BNE process_reg1
.181852		82 80 00	brl $1818d5	                BRL CHECK_PENDING_REG2
.181855						process_reg1
.181855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.181857		f0 0c		beq $181865	                BEQ continue            ; If not: skip the rest of this macro
.181859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.18185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.181863		e2 20		sep #$20	                SEP #$20        ; set A short
.181865						continue
.181865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.181867		f0 0c		beq $181875	                BEQ continue            ; If not: skip the rest of this macro
.181869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.18186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.181873		e2 20		sep #$20	                SEP #$20        ; set A short
.181875						continue
.181875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.181877		f0 0c		beq $181885	                BEQ continue            ; If not: skip the rest of this macro
.181879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.18187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.181883		e2 20		sep #$20	                SEP #$20        ; set A short
.181885						continue
.181885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.181887		f0 0c		beq $181895	                BEQ continue            ; If not: skip the rest of this macro
.181889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.18188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.181893		e2 20		sep #$20	                SEP #$20        ; set A short
.181895						continue
.181895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.181897		f0 0c		beq $1818a5	                BEQ continue            ; If not: skip the rest of this macro
.181899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.18189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.1818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818a5						continue
.1818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.1818a7		f0 0c		beq $1818b5	                BEQ continue            ; If not: skip the rest of this macro
.1818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.1818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.1818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818b5						continue
.1818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.1818b7		f0 0c		beq $1818c5	                BEQ continue            ; If not: skip the rest of this macro
.1818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.1818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.1818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818c5						continue
.1818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.1818c7		f0 0c		beq $1818d5	                BEQ continue            ; If not: skip the rest of this macro
.1818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.1818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.1818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818d5						continue
.1818d5						CHECK_PENDING_REG2
.1818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.1818d9		d0 03		bne $1818de	                BNE process_reg2
.1818db		82 80 00	brl $18195e	                BRL CHECK_PENDING_REG3
.1818de						process_reg2
.1818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.1818e0		f0 0c		beq $1818ee	                BEQ continue            ; If not: skip the rest of this macro
.1818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.1818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.1818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1818ee						continue
.1818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.1818f0		f0 0c		beq $1818fe	                BEQ continue            ; If not: skip the rest of this macro
.1818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.1818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.1818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1818fe						continue
.1818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.181900		f0 0c		beq $18190e	                BEQ continue            ; If not: skip the rest of this macro
.181902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.181904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.18190c		e2 20		sep #$20	                SEP #$20        ; set A short
.18190e						continue
.18190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.181910		f0 0c		beq $18191e	                BEQ continue            ; If not: skip the rest of this macro
.181912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.181914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.18191c		e2 20		sep #$20	                SEP #$20        ; set A short
.18191e						continue
.18191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.181920		f0 0c		beq $18192e	                BEQ continue            ; If not: skip the rest of this macro
.181922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.181924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.18192c		e2 20		sep #$20	                SEP #$20        ; set A short
.18192e						continue
.18192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.181930		f0 0c		beq $18193e	                BEQ continue            ; If not: skip the rest of this macro
.181932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.181934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.18193c		e2 20		sep #$20	                SEP #$20        ; set A short
.18193e						continue
.18193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.181940		f0 0c		beq $18194e	                BEQ continue            ; If not: skip the rest of this macro
.181942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.181944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.18194c		e2 20		sep #$20	                SEP #$20        ; set A short
.18194e						continue
.18194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.181950		f0 0c		beq $18195e	                BEQ continue            ; If not: skip the rest of this macro
.181952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.181954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.18195c		e2 20		sep #$20	                SEP #$20        ; set A short
.18195e						continue
.18195e						CHECK_PENDING_REG3
.18195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.181962		f0 30		beq $181994	                BEQ EXIT_IRQ_HANDLE
.181964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.181966		f0 0c		beq $181974	                BEQ continue            ; If not: skip the rest of this macro
.181968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.18196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.181972		e2 20		sep #$20	                SEP #$20        ; set A short
.181974						continue
.181974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.181976		f0 0c		beq $181984	                BEQ continue            ; If not: skip the rest of this macro
.181978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.18197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.181982		e2 20		sep #$20	                SEP #$20        ; set A short
.181984						continue
.181984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.181986		f0 0c		beq $181994	                BEQ continue            ; If not: skip the rest of this macro
.181988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.18198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.181992		e2 20		sep #$20	                SEP #$20        ; set A short
.181994						continue
.181994						EXIT_IRQ_HANDLE
.181994		28		plp		                PLP
.181995		6b		rtl		                RTL
.181996		6b		rtl		NMI_HANDLER     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn $18,$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		48		pha		                PHA             ; begin setdp macro
.190416		08		php		                PHP
.190417		c2 20		rep #$20	                REP #$20        ; set A long
.190419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19041c		5b		tcd		                TCD
.19041d		28		plp		                PLP
.19041e		68		pla		                PLA             ; end setdp macro
.19041f		e2 20		sep #$20	                SEP #$20        ; set A short
.190421		a2 00 00	ldx #$0000	                LDX #$0000
.190424		a9 00		lda #$00	                LDA #$00
.190426						CLEAR_MEM_LOOP
.190426		95 00		sta $00,x	                STA $0000, X
.190428		e8		inx		                INX
.190429		e0 00 01	cpx #$0100	                CPX #$0100
.19042c		d0 f8		bne $190426	                BNE CLEAR_MEM_LOOP
.19042e		ea		nop		                NOP
.19042f		a9 ff		lda #$ff	                LDA #$FF
.190431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.19043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.190441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.190451		22 b2 0c 19	jsl $190cb2	                JSL INITRTC               ; Initialize the RTC
.190455		e2 20		sep #$20	                SEP #$20        ; set A short
.190457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.19045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.19045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.19045f		d0 1e		bne $19047f	                BNE SkipInitExpC100C200
.190461		c2 20		rep #$20	                REP #$20        ; set A long
.190463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.190467		c9 64 00	cmp #$0064	                CMP #$0064
.19046a		f0 0f		beq $19047b	                BEQ InitC100ESID
.19046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.19046f		d0 0e		bne $19047f	                BNE SkipInitExpC100C200
.190471		22 8b 69 19	jsl $19698b	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190475		22 12 6a 19	jsl $196a12	                JSL INIT_EVID_VID_MODE
.190479		80 04		bra $19047f	                BRA SkipInitExpC100C200
.19047b						InitC100ESID:
.19047b		22 8b 69 19	jsl $19698b	                JSL SIMPLE_INIT_ETHERNET_CTRL
.19047f						SkipInitExpC100C200:
.19047f		e2 20		sep #$20	                SEP #$20        ; set A short
.190481		c2 10		rep #$10	                REP #$10        ; set X long
.190483		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.190485		8f 00 f1 af	sta $aff100	                STA $AFF100
.190489		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.19048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.19048f		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.190491		8f 00 f1 af	sta $aff100	                STA $AFF100
.190495		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.190497		8f 00 f1 af	sta $aff100	                STA $AFF100
.19049b		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.19049d		85 1e		sta $1e		                STA CURCOLOR
.19049f		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.1904a3		29 01		and #$01	                AND #$01
.1904a5		c9 01		cmp #$01	                CMP #$01
.1904a7		d0 14		bne $1904bd	                BNE Alreadyin640480Mode
.1904a9		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904ad		29 fc		and #$fc	                AND #$FC
.1904af		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904b3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904b7		09 01		ora #$01	                ORA #$01
.1904b9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904bd						Alreadyin640480Mode
.1904bd		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904c1		29 fc		and #$fc	                AND #$FC
.1904c3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904c7		a9 00		lda #$00	                LDA #0
.1904c9		22 38 10 00	jsl $001038	                JSL SETIN
.1904cd		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1904d1		22 a5 6b 19	jsl $196ba5	                JSL ANSI_INIT
.1904d5		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.1904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904dd		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904e1		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.1904e5		22 75 0b 19	jsl $190b75	                JSL INITMOUSEPOINTER
.1904e9		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.1904ed		c2 20		rep #$20	                REP #$20        ; set A long
.1904ef		48		pha		                PHA             ; begin setdp macro
.1904f0		08		php		                PHP
.1904f1		c2 20		rep #$20	                REP #$20        ; set A long
.1904f3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904f6		5b		tcd		                TCD
.1904f7		28		plp		                PLP
.1904f8		68		pla		                PLA             ; end setdp macro
.1904f9		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD
.1904fd		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.1904fe		e2 20		sep #$20	                SEP #$20        ; set A short
.190500		c2 10		rep #$10	                REP #$10        ; set X long
.190502		48		pha		                PHA             ; begin setdbr macro
.190503		08		php		                PHP
.190504		e2 20		sep #$20	                SEP #$20        ; set A short
.190506		a9 19		lda #$19	                LDA #`greet_msg
.190508		48		pha		                PHA
.190509		ab		plb		                PLB
.19050a		28		plp		                PLP
.19050b		68		pla		                PLA             ; end setdbr macro
.19050c		a2 00 00	ldx #$0000	                LDX #0
.19050f		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.190513		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.190517		e8		inx		                INX
.190518		e0 00 10	cpx #$1000	                CPX #$1000
.19051b		d0 f2		bne $19050f	                BNE jmpcopy
.19051d						retry_boot
.19051d		22 30 3e 19	jsl $193e30	                JSL DOS_INIT            ; Initialize the "disc operating system"
.190521		22 4d 80 19	jsl $19804d	                JSL BOOT_SOUND          ; Play the boot sound
.190525		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.190529		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.19052d		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.190531						greet
.190531		c2 30		rep #$30	                REP #$30        ; set A&X long
.190533		48		pha		                PHA             ; begin setdbr macro
.190534		08		php		                PHP
.190535		e2 20		sep #$20	                SEP #$20        ; set A short
.190537		a9 19		lda #$19	                LDA #`greet_msg
.190539		48		pha		                PHA
.19053a		ab		plb		                PLB
.19053b		28		plp		                PLP
.19053c		68		pla		                PLA             ; end setdbr macro
.19053d		a2 04 81	ldx #$8104	                LDX #<>greet_msg
.190540		22 fb 06 19	jsl $1906fb	                JSL IPRINT              ; print the first line
.190544		22 0a 09 19	jsl $19090a	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.190548		22 f2 6a 19	jsl $196af2	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.19054c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19054e		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.190551		1b		tcs		                TAS
.190552		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE           ; Initialize the mouse
.190556		e2 20		sep #$20	                SEP #$20        ; set A short
.190558		c2 10		rep #$10	                REP #$10        ; set X long
.19055a		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.19055e		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.190560		f0 10		beq $190572	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.190562		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.190564		f0 1e		beq $190584	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.190566		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.190568		f0 62		beq $1905cc	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.19056a		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.19056c		f0 1d		beq $19058b	                BEQ BOOTSDC           ; Yes: boot via the SDC
.19056e		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.190570		f0 39		beq $1905ab	                BEQ BOOTIDE           ; Yes: boot via the IDE
.190572		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.190576		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.190578		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.19057a		f0 2f		beq $1905ab	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.19057c		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.19057e		f0 0b		beq $19058b	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.190580		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.190582		f0 48		beq $1905cc	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.190584						IRESTORE
.190584		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.190588		ea		nop		CREDIT_LOCK     NOP
.190589		80 fd		bra $190588	                BRA CREDIT_LOCK
.19058b		a2 33 85	ldx #$8533	BOOTSDC         LDX #<>sdc_boot
.19058e		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.190592		e2 20		sep #$20	                SEP #$20        ; set A short
.190594		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.190596		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.19059a		22 02 3f 19	jsl $193f02	                JSL DOS_MOUNT         ; Mount the SDC
.19059e		90 06		bcc $1905a6	                BCC sdc_error         ; Print an error message if couldn't get anything
.1905a0		22 bd 40 19	jsl $1940bd	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.1905a4		80 de		bra $190584	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.1905a6		a2 b7 84	ldx #$84b7	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905a9		80 40		bra $1905eb	                BRA PR_BOOT_ERROR
.1905ab		a2 4a 85	ldx #$854a	BOOTIDE         LDX #<>ide_boot
.1905ae		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.1905b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1905b4		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.1905b6		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905ba		22 02 3f 19	jsl $193f02	                JSL DOS_MOUNT         ; Mount the IDE drive
.1905be		90 07		bcc $1905c7	                BCC hdc_error         ; Print an error message if couldn't get anything
.1905c0		22 bd 40 19	jsl $1940bd	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.1905c4		82 bd ff	brl $190584	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.1905c7		a2 d3 84	ldx #$84d3	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.1905ca		80 1f		bra $1905eb	                BRA PR_BOOT_ERROR
.1905cc		a2 1c 85	ldx #$851c	BOOTFLOPPY      LDX #<>fdc_boot
.1905cf		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.1905d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1905d5		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.1905d7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905db		22 12 63 19	jsl $196312	                JSL FDC_MOUNT         ; Mount the floppy drive
.1905df		90 07		bcc $1905e8	                BCC fdc_error         ; Print an error message if couldn't get anything
.1905e1		22 bd 40 19	jsl $1940bd	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.1905e5		82 9c ff	brl $190584	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.1905e8		a2 f6 84	ldx #$84f6	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905eb		22 fb 06 19	jsl $1906fb	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.1905ef		a2 92 84	ldx #$8492	                LDX #<>boot_retry     ; Print the boot retry prompt
.1905f2		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.1905f6		22 95 06 19	jsl $190695	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.1905fa		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.1905fc		d0 03		bne $190601	                BNE chk_r_lc
.1905fe		82 1c ff	brl $19051d	                BRL retry_boot        ; Yes: retry the boot sequence
.190601		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.190603		d0 03		bne $190608	                BNE chk_b_lc
.190605		82 15 ff	brl $19051d	                BRL retry_boot
.190608		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.19060a		d0 03		bne $19060f	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.19060c		82 75 ff	brl $190584	                BRL BOOTBASIC
.19060f						chk_b_lc_not:
.19060f		c9 42		cmp #$42	                CMP #'B'
.190611		d0 03		bne $190616	                BNE chk_b_lc_not0
.190613		82 6e ff	brl $190584	                BRL BOOTBASIC
.190616						chk_b_lc_not0:
.190616		80 de		bra $1905f6	                BRA boot_wait_key     ; No: keep waiting
.190618						IBREAK
.190618		48		pha		                PHA             ; begin setdp macro
.190619		08		php		                PHP
.19061a		c2 20		rep #$20	                REP #$20        ; set A long
.19061c		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19061f		5b		tcd		                TCD
.190620		28		plp		                PLP
.190621		68		pla		                PLA             ; end setdp macro
.190622		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190623		8f 48 02 00	sta $000248	                STA CPUY
.190627		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.190628		8f 46 02 00	sta $000246	                STA CPUX
.19062c		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.19062d		8f 44 02 00	sta $000244	                STA CPUA
.190631		68		pla		                PLA
.190632		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.190636		e2 20		sep #$20	                SEP #$20        ; set A short
.190638		68		pla		                PLA             ; Pull Data Bank (8 bits)
.190639		8f 4e 02 00	sta $00024e	                STA CPUDBR
.19063d		68		pla		                PLA             ; Pull Flags (8 bits)
.19063e		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.190642		c2 20		rep #$20	                REP #$20        ; set A long
.190644		68		pla		                PLA             ; Pull Program Counter (16 bits)
.190645		8f 40 02 00	sta $000240	                STA CPUPC
.190649		e2 20		sep #$20	                SEP #$20        ; set A short
.19064b		68		pla		                PLA             ; Pull Program Bank (8 bits)
.19064c		8f 42 02 00	sta $000242	                STA CPUPBR
.190650		c2 20		rep #$20	                REP #$20        ; set A long
.190652		3b		tsc		                TSA             ; Get the stack
.190653		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.190657		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.19065a		1b		tcs		                TAS
.19065b		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.19065f						IREADY
.19065f		48		pha		                PHA             ; begin setdbr macro
.190660		08		php		                PHP
.190661		e2 20		sep #$20	                SEP #$20        ; set A short
.190663		a9 19		lda #$19	                LDA #`ready_msg
.190665		48		pha		                PHA
.190666		ab		plb		                PLB
.190667		28		plp		                PLP
.190668		68		pla		                PLA             ; end setdbr macro
.190669		e2 20		sep #$20	                SEP #$20        ; set A short
.19066b		a2 65 85	ldx #$8565	                LDX #<>ready_msg
.19066e		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.190672						IREADYWAIT
.190672		22 8c 06 19	jsl $19068c	                JSL IGETCHE
.190676		80 fa		bra $190672	                BRA IREADYWAIT
.190678		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.190679		db		stp		IRETURN         STP
.19067a		08		php		ISETIN          PHP
.19067b		e2 20		sep #$20	                SEP #$20        ; set A short
.19067d		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.190681		28		plp		                PLP
.190682		6b		rtl		                RTL
.190683		08		php		ISETOUT         PHP
.190684		e2 20		sep #$20	                SEP #$20        ; set A short
.190686		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.19068a		28		plp		                PLP
.19068b		6b		rtl		                RTL
.19068c		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.190690		22 18 10 00	jsl $001018	                JSL PUTC
.190694		6b		rtl		                RTL
.190695						IGETCHW
.190695		da		phx		                PHX
.190696		5a		phy		                PHY
.190697		8b		phb		                PHB
.190698		0b		phd		                PHD
.190699		08		php		                PHP
.19069a		e2 20		sep #$20	                SEP #$20        ; set A short
.19069c		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906a0		f0 1b		beq $1906bd	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906a2		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906a4		f0 0d		beq $1906b3	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906a6		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906a8		f0 09		beq $1906b3	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906aa		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906ac		28		plp		                PLP
.1906ad		38		sec		                SEC                 ; And return carry set
.1906ae		2b		pld		                PLD
.1906af		ab		plb		                PLB
.1906b0		7a		ply		                PLY
.1906b1		fa		plx		                PLX
.1906b2		6b		rtl		                RTL
.1906b3		22 16 57 19	jsl $195716	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906b7		22 ca 57 19	jsl $1957ca	                JSL UART_GETC       ; Get the charater from the COM port
.1906bb		80 04		bra $1906c1	                BRA done
.1906bd		22 de 77 19	jsl $1977de	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.1906c1		28		plp		done            PLP
.1906c2		18		clc		                CLC                 ; Return carry clear for valid data
.1906c3		2b		pld		                PLD
.1906c4		ab		plb		                PLB
.1906c5		7a		ply		                PLY
.1906c6		fa		plx		                PLX
.1906c7		6b		rtl		                RTL
.1906c8						IGETCH
.1906c8		da		phx		                PHX
.1906c9		5a		phy		                PHY
.1906ca		8b		phb		                PHB
.1906cb		0b		phd		                PHD
.1906cc		08		php		                PHP
.1906cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1906cf		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906d3		f0 1b		beq $1906f0	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906d5		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906d7		f0 0d		beq $1906e6	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906d9		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906db		f0 09		beq $1906e6	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906dd		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906df		28		plp		                PLP
.1906e0		38		sec		                SEC                 ; And return carry set
.1906e1		2b		pld		                PLD
.1906e2		ab		plb		                PLB
.1906e3		7a		ply		                PLY
.1906e4		fa		plx		                PLX
.1906e5		6b		rtl		                RTL
.1906e6		22 16 57 19	jsl $195716	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906ea		22 ca 57 19	jsl $1957ca	                JSL UART_GETC       ; Get the charater from the COM port
.1906ee		80 04		bra $1906f4	                BRA done
.1906f0		22 ea 77 19	jsl $1977ea	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.1906f4		28		plp		done            PLP
.1906f5		18		clc		                CLC                 ; Return carry clear for valid data
.1906f6		2b		pld		                PLD
.1906f7		ab		plb		                PLB
.1906f8		7a		ply		                PLY
.1906f9		fa		plx		                PLX
.1906fa		6b		rtl		                RTL
.1906fb		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.1906ff		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.190703		6b		rtl		                RTL
.190704		48		pha		IPUTS           PHA
.190705		08		php		                PHP
.190706		e2 20		sep #$20	                SEP #$20        ; set A short
.190708		c2 10		rep #$10	                REP #$10        ; set X long
.19070a		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.19070d		f0 08		beq $190717	                BEQ iputs_done
.19070f		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.190713		e8		inx		iputs3          INX
.190714		4c 0a 07	jmp $19070a	                JMP iputs1
.190717		e8		inx		iputs_done      INX
.190718		28		plp		                PLP
.190719		68		pla		                PLA
.19071a		6b		rtl		                RTL
.19071b						IPUTC
.19071b		da		phx		                PHX
.19071c		5a		phy		                PHY
.19071d		0b		phd		                PHD
.19071e		8b		phb		                PHB
.19071f		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190720		48		pha		                PHA             ; begin setdp macro
.190721		08		php		                PHP
.190722		c2 20		rep #$20	                REP #$20        ; set A long
.190724		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190727		5b		tcd		                TCD
.190728		28		plp		                PLP
.190729		68		pla		                PLA             ; end setdp macro
.19072a		48		pha		                PHA             ; begin setdbr macro
.19072b		08		php		                PHP
.19072c		e2 20		sep #$20	                SEP #$20        ; set A short
.19072e		a9 00		lda #$00	                LDA #0
.190730		48		pha		                PHA
.190731		ab		plb		                PLB
.190732		28		plp		                PLP
.190733		68		pla		                PLA             ; end setdbr macro
.190734		e2 20		sep #$20	                SEP #$20        ; set A short
.190736		c2 10		rep #$10	                REP #$10        ; set X long
.190738		48		pha		                PHA                 ; Save the character to print
.190739		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.19073d		f0 1a		beq $190759	                BEQ putc_ansi       ; If it's 0: print to the screen
.19073f		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.190741		f0 16		beq $190759	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.190743		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190745		f0 07		beq $19074e	                BEQ putc_uart       ; Yes: handle printing to the UART
.190747		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.190749		f0 03		beq $19074e	                BEQ putc_uart       ; Yes: handle printing to the UART
.19074b		68		pla		                PLA                 ; Otherwise, just exit
.19074c		80 10		bra $19075e	                BRA done
.19074e		22 16 57 19	jsl $195716	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.190752		68		pla		                PLA                 ; Recover the character to send
.190753		22 eb 57 19	jsl $1957eb	                JSL UART_PUTC       ; Send the character
.190757		80 05		bra $19075e	                BRA done
.190759		68		pla		putc_ansi       PLA                 ; Recover the character to send
.19075a		22 e4 6d 19	jsl $196de4	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.19075e		28		plp		done            PLP
.19075f		ab		plb		                PLB
.190760		2b		pld		                PLD
.190761		7a		ply		                PLY
.190762		fa		plx		                PLX
.190763		6b		rtl		                RTL
.190764		da		phx		SCRSHIFTLL      PHX
.190765		5a		phy		                PHY
.190766		48		pha		                PHA
.190767		0b		phd		                PHD
.190768		08		php		                PHP
.190769		48		pha		                PHA             ; begin setdp macro
.19076a		08		php		                PHP
.19076b		c2 20		rep #$20	                REP #$20        ; set A long
.19076d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190770		5b		tcd		                TCD
.190771		28		plp		                PLP
.190772		68		pla		                PLA             ; end setdp macro
.190773		c2 30		rep #$30	                REP #$30        ; set A&X long
.190775		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.190777		a8		tay		                TAY                 ; Set it as the destination
.190778		aa		tax		                TAX
.190779		e8		inx		                INX                 ; And set the next cell as the source
.19077a		18		clc		                CLC                 ; Calculate the length of the block to move
.19077b		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.19077d		e5 1a		sbc $1a		                SBC CURSORX
.19077f		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.190782		28		plp		                PLP
.190783		2b		pld		                PLD
.190784		68		pla		                PLA
.190785		7a		ply		                PLY
.190786		fa		plx		                PLX
.190787		6b		rtl		                RTL
.190788		da		phx		SCRSHIFTLR      PHX
.190789		48		pha		                PHA
.19078a		0b		phd		                PHD
.19078b		08		php		                PHP
.19078c		48		pha		                PHA             ; begin setdp macro
.19078d		08		php		                PHP
.19078e		c2 20		rep #$20	                REP #$20        ; set A long
.190790		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190793		5b		tcd		                TCD
.190794		28		plp		                PLP
.190795		68		pla		                PLA             ; end setdp macro
.190796		c2 30		rep #$30	                REP #$30        ; set A&X long
.190798		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.19079a		1a		inc a		                INC A
.19079b		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.19079d		b0 1b		bcs $1907ba	                BGE done            ; Yes: just skip the whole thing
.19079f		38		sec		                SEC                 ; Calculate the length of the block to move
.1907a0		a5 0f		lda $0f		                LDA COLS_VISIBLE
.1907a2		e5 1a		sbc $1a		                SBC CURSORX
.1907a4		1a		inc a		                INC A
.1907a5		18		clc		                CLC
.1907a6		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.1907a8		3a		dec a		                DEC A
.1907a9		a8		tay		                TAY                 ; Make it the destination
.1907aa		3a		dec a		                DEC A               ; Move to the previous column
.1907ab		aa		tax		                TAX                 ; Make it the source
.1907ac		38		sec		                SEC                 ; Calculate the length of the block to move
.1907ad		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1907af		e5 1a		sbc $1a		                SBC CURSORX
.1907b1		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.1907b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1907b6		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.1907b8		87 17		sta [$17]	                STA [CURSORPOS]
.1907ba		28		plp		done            PLP
.1907bb		2b		pld		                PLD
.1907bc		68		pla		                PLA
.1907bd		fa		plx		                PLX
.1907be		6b		rtl		                RTL
.1907bf						IPUTB
.1907bf		6b		rtl		                RTL
.1907c0						IPRINTCR
.1907c0		da		phx		                PHX
.1907c1		5a		phy		                PHY
.1907c2		8b		phb		                PHB
.1907c3		0b		phd		                PHD
.1907c4		08		php		                PHP
.1907c5		48		pha		                PHA             ; begin setdbr macro
.1907c6		08		php		                PHP
.1907c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1907c9		a9 00		lda #$00	                LDA #0
.1907cb		48		pha		                PHA
.1907cc		ab		plb		                PLB
.1907cd		28		plp		                PLP
.1907ce		68		pla		                PLA             ; end setdbr macro
.1907cf		48		pha		                PHA             ; begin setdp macro
.1907d0		08		php		                PHP
.1907d1		c2 20		rep #$20	                REP #$20        ; set A long
.1907d3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907d6		5b		tcd		                TCD
.1907d7		28		plp		                PLP
.1907d8		68		pla		                PLA             ; end setdp macro
.1907d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1907db		c2 10		rep #$10	                REP #$10        ; set X long
.1907dd		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.1907e1		f0 1c		beq $1907ff	                BEQ scr_printcr
.1907e3		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1907e5		f0 06		beq $1907ed	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907e7		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1907e9		f0 02		beq $1907ed	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907eb		80 1c		bra $190809	                BRA done
.1907ed		22 16 57 19	jsl $195716	uart_printcr    JSL UART_SELECT
.1907f1		a9 0d		lda #$0d	                LDA #CHAR_CR
.1907f3		22 18 10 00	jsl $001018	                JSL PUTC
.1907f7		a9 0a		lda #$0a	                LDA #CHAR_LF
.1907f9		22 18 10 00	jsl $001018	                JSL PUTC
.1907fd		80 0a		bra $190809	                BRA done
.1907ff		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.190802		a4 1c		ldy $1c		                LDY CURSORY
.190804		c8		iny		                INY
.190805		22 84 10 00	jsl $001084	                JSL LOCATE
.190809		28		plp		done            PLP
.19080a		2b		pld		                PLD
.19080b		ab		plb		                PLB
.19080c		7a		ply		                PLY
.19080d		fa		plx		                PLX
.19080e		6b		rtl		                RTL
.19080f		da		phx		ICSRHOME        PHX
.190810		5a		phy		                PHY
.190811		08		php		                PHP
.190812		a2 00 00	ldx #$0000	                LDX #0
.190815		a0 00 00	ldy #$0000	                LDY #0
.190818		22 84 10 00	jsl $001084	                JSL LOCATE
.19081c		28		plp		                PLP
.19081d		7a		ply		                PLY
.19081e		fa		plx		                PLX
.19081f		6b		rtl		                RTL
.190820		da		phx		ICSRRIGHT       PHX
.190821		5a		phy		                PHY
.190822		48		pha		                PHA
.190823		0b		phd		                PHD
.190824		08		php		                PHP
.190825		22 78 72 19	jsl $197278	                JSL ANSI_CSRRIGHT
.190829		28		plp		                PLP
.19082a		2b		pld		                PLD
.19082b		68		pla		                PLA
.19082c		7a		ply		                PLY
.19082d		fa		plx		                PLX
.19082e		6b		rtl		                RTL
.19082f						ICSRLEFT
.19082f		da		phx		                PHX
.190830		5a		phy		                PHY
.190831		48		pha		                PHA
.190832		0b		phd		                PHD
.190833		08		php		                PHP
.190834		22 a3 72 19	jsl $1972a3	                JSL ANSI_CSRLEFT
.190838		28		plp		                PLP
.190839		2b		pld		                PLD
.19083a		68		pla		                PLA
.19083b		7a		ply		                PLY
.19083c		fa		plx		                PLX
.19083d		6b		rtl		                RTL
.19083e						ICSRUP
.19083e		da		phx		                PHX
.19083f		5a		phy		                PHY
.190840		48		pha		                PHA
.190841		0b		phd		                PHD
.190842		08		php		                PHP
.190843		22 c1 72 19	jsl $1972c1	                JSL ANSI_CSRUP
.190847		28		plp		                PLP
.190848		2b		pld		                PLD
.190849		68		pla		                PLA
.19084a		7a		ply		                PLY
.19084b		fa		plx		                PLX
.19084c		6b		rtl		                RTL
.19084d		da		phx		ICSRDOWN        PHX
.19084e		5a		phy		                PHY
.19084f		0b		phd		                PHD
.190850		22 df 72 19	jsl $1972df	                JSL ANSI_CSRDOWN
.190854		2b		pld		                PLD
.190855		7a		ply		                PLY
.190856		fa		plx		                PLX
.190857		6b		rtl		                RTL
.190858		48		pha		ILOCATE         PHA
.190859		0b		phd		                PHD
.19085a		08		php		                PHP
.19085b		22 02 73 19	jsl $197302	                JSL ANSI_LOCATE
.19085f		28		plp		ilocate_done    PLP
.190860		2b		pld		                PLD
.190861		68		pla		                PLA
.190862		6b		rtl		                RTL
.190863						ISCROLLUP
.190863		48		pha		                PHA
.190864		da		phx		                PHX
.190865		5a		phy		                PHY
.190866		8b		phb		                PHB
.190867		0b		phd		                PHD
.190868		08		php		                PHP
.190869		22 66 73 19	jsl $197366	                JSL ANSI_SCROLLUP
.19086d		28		plp		                PLP
.19086e		2b		pld		                PLD
.19086f		ab		plb		                PLB
.190870		7a		ply		                PLY
.190871		fa		plx		                PLX
.190872		68		pla		                PLA
.190873		6b		rtl		                RTL
.190874		08		php		IPRINTH         PHP
.190875		48		pha		                PHA
.190876						iprinth1
.190876		e2 20		sep #$20	                SEP #$20        ; set A short
.190878		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.19087b		4a		lsr a		                LSR
.19087c		4a		lsr a		                LSR
.19087d		4a		lsr a		                LSR
.19087e		4a		lsr a		                LSR
.19087f		22 ce 08 19	jsl $1908ce	                JSL iprint_digit
.190883		bd 00 00	lda $0000,x	                LDA #0,b,x
.190886		22 ce 08 19	jsl $1908ce	                JSL iprint_digit
.19088a		ca		dex		                DEX
.19088b		88		dey		                DEY
.19088c		d0 e8		bne $190876	                BNE iprinth1
.19088e		68		pla		                PLA
.19088f		28		plp		                PLP
.190890		6b		rtl		                RTL
.190891						IPRINTAH
.190891		48		pha		                PHA
.190892		08		php		                PHP
.190893		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.190897		08		php		                PHP                   ; Get the processor status into A
.190898		e2 20		sep #$20	                SEP #$20        ; set A short
.19089a		c2 10		rep #$10	                REP #$10        ; set X long
.19089c		68		pla		                PLA
.19089d		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.19089f		c9 20		cmp #$20	                CMP #%00100000
.1908a1		f0 14		beq $1908b7	                BEQ eight_bit
.1908a3		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.1908a7		4a		lsr a		                LSR A
.1908a8		4a		lsr a		                LSR A
.1908a9		4a		lsr a		                LSR A
.1908aa		4a		lsr a		                LSR A
.1908ab		22 ce 08 19	jsl $1908ce	                JSL iprint_digit      ; And print it
.1908af		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.1908b3		22 ce 08 19	jsl $1908ce	                JSL iprint_digit      ; And print it
.1908b7		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.1908bb		4a		lsr a		                LSR A
.1908bc		4a		lsr a		                LSR A
.1908bd		4a		lsr a		                LSR A
.1908be		4a		lsr a		                LSR A
.1908bf		22 ce 08 19	jsl $1908ce	                JSL iprint_digit      ; And print it
.1908c3		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.1908c7		22 ce 08 19	jsl $1908ce	                JSL iprint_digit      ; And print it
.1908cb		28		plp		                PLP
.1908cc		68		pla		                PLA
.1908cd		6b		rtl		                RTL
.1908ce		da		phx		iprint_digit    PHX
.1908cf		c2 20		rep #$20	                REP #$20        ; set A long
.1908d1		29 0f 00	and #$000f	                AND #$0F
.1908d4		aa		tax		                TAX
.1908d5		bf 79 85 19	lda $198579,x	                LDA hex_digits,X
.1908d9		22 1b 07 19	jsl $19071b	                JSL IPUTC       ; Print the digit
.1908dd		fa		plx		                PLX
.1908de		6b		rtl		                RTL
.1908df		48		pha		ICLRSCREEN	    PHA
.1908e0		da		phx		                PHX
.1908e1		08		php		                PHP
.1908e2		22 fb 73 19	jsl $1973fb	                JSL ANSI_CLRSCREEN
.1908e6		28		plp		                PLP
.1908e7		fa		plx		                PLX
.1908e8		68		pla		                PLA
.1908e9		6b		rtl		                RTL
.1908ea						COPYBYTES42
.1908ea		08		php		                PHP
.1908eb		0b		phd		                PHD
.1908ec		48		pha		                PHA             ; begin setdp macro
.1908ed		08		php		                PHP
.1908ee		c2 20		rep #$20	                REP #$20        ; set A long
.1908f0		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.1908f3		5b		tcd		                TCD
.1908f4		28		plp		                PLP
.1908f5		68		pla		                PLA             ; end setdp macro
.1908f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1908f8		c2 10		rep #$10	                REP #$10        ; set X long
.1908fa		a0 00 00	ldy #$0000	                LDY #0
.1908fd		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.1908ff		97 04		sta [$04],y	                STA [TMPPTR2],Y
.190901		c8		iny		                INY
.190902		c0 2a 00	cpy #$002a	                CPY #42
.190905		d0 f6		bne $1908fd	                BNE copy_loop
.190907		2b		pld		                PLD
.190908		28		plp		                PLP
.190909		60		rts		                RTS
.19090a						ICOLORFLAG
.19090a		48		pha		                PHA
.19090b		da		phx		                PHX
.19090c		5a		phy		                PHY
.19090d		08		php		                PHP
.19090e		8b		phb		                PHB
.19090f		0b		phd		                PHD
.190910		48		pha		                PHA             ; begin setdp macro
.190911		08		php		                PHP
.190912		c2 20		rep #$20	                REP #$20        ; set A long
.190914		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190917		5b		tcd		                TCD
.190918		28		plp		                PLP
.190919		68		pla		                PLA             ; end setdp macro
.19091a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19091c		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.19091f		85 04		sta $04		                STA TMPPTR2
.190921		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.190924		85 06		sta $06		                STA TMPPTR2+2
.190926		a9 d6 81	lda #$81d6	                LDA #<>greet_clr_line1
.190929		85 00		sta $00		                STA TMPPTR1
.19092b		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.19092e		85 02		sta $02		                STA TMPPTR1+2
.190930		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.190933		18		clc		                CLC
.190934		a5 04		lda $04		                LDA TMPPTR2
.190936		65 11		adc $11		                ADC COLS_PER_LINE
.190938		85 04		sta $04		                STA TMPPTR2
.19093a		a9 00 82	lda #$8200	                LDA #<>greet_clr_line2
.19093d		85 00		sta $00		                STA TMPPTR1
.19093f		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.190942		85 02		sta $02		                STA TMPPTR1+2
.190944		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.190947		18		clc		                CLC
.190948		a5 04		lda $04		                LDA TMPPTR2
.19094a		65 11		adc $11		                ADC COLS_PER_LINE
.19094c		85 04		sta $04		                STA TMPPTR2
.19094e		a9 2a 82	lda #$822a	                LDA #<>greet_clr_line3
.190951		85 00		sta $00		                STA TMPPTR1
.190953		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.190956		85 02		sta $02		                STA TMPPTR1+2
.190958		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.19095b		18		clc		                CLC
.19095c		a5 04		lda $04		                LDA TMPPTR2
.19095e		65 11		adc $11		                ADC COLS_PER_LINE
.190960		85 04		sta $04		                STA TMPPTR2
.190962		a9 54 82	lda #$8254	                LDA #<>greet_clr_line4
.190965		85 00		sta $00		                STA TMPPTR1
.190967		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.19096a		85 02		sta $02		                STA TMPPTR1+2
.19096c		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.19096f		18		clc		                CLC
.190970		a5 04		lda $04		                LDA TMPPTR2
.190972		65 11		adc $11		                ADC COLS_PER_LINE
.190974		85 04		sta $04		                STA TMPPTR2
.190976		a9 7e 82	lda #$827e	                LDA #<>greet_clr_line5
.190979		85 00		sta $00		                STA TMPPTR1
.19097b		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.19097e		85 02		sta $02		                STA TMPPTR1+2
.190980		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.190983		2b		pld		                PLD
.190984		ab		plb		                PLB
.190985		28		plp		                PLP
.190986		7a		ply		                PLY
.190987		fa		plx		                PLX
.190988		68		pla		                PLA
.190989		6b		rtl		                RTL
.19098a		0b		phd		IINITCHLUT		  PHD
.19098b		08		php		                PHP
.19098c		48		pha		                PHA
.19098d		da		phx		                PHX
.19098e		22 ea 6b 19	jsl $196bea	                JSL ANSI_INIT_LUTS
.190992		fa		plx		                PLX
.190993		68		pla		                PLA
.190994		28		plp		                PLP
.190995		2b		pld		                PLD
.190996		6b		rtl		                RTL
.190997						IINITGAMMATABLE
.190997		e2 20		sep #$20	                SEP #$20        ; set A short
.190999		c2 10		rep #$10	                REP #$10        ; set X long
.19099b		a2 00 00	ldx #$0000	                ldx #$0000
.19099e		bf 00 8a 19	lda $198a00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.1909a2		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.1909a6		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.1909aa		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.1909ae		e8		inx		                inx
.1909af		e0 00 01	cpx #$0100	                cpx #$0100
.1909b2		d0 ea		bne $19099e	                bne initgammaloop
.1909b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909b6		6b		rtl		                RTL
.1909b7		48		pha		IINITALLLUT     PHA
.1909b8		da		phx		                PHX
.1909b9		a2 00 00	ldx #$0000	                LDX #$0000
.1909bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1909be		a9 00		lda #$00	                LDA #$00
.1909c0		85 0a		sta $0a		                STA $0A     ; Temp Location
.1909c2						iinit_lut_loop
.1909c2		86 02		stx $02		                STX $02
.1909c4		a6 0a		ldx $0a		                LDX $0A
.1909c6		bf 00 89 19	lda $198900,x	                LDA GAMMA_2_2_Tbl, x
.1909ca		49 55		eor #$55	                EOR  #$55
.1909cc		a6 02		ldx $02		                LDX $02
.1909ce		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909d2		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1909d6		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1909da		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1909de		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1909e2		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1909e6		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1909ea		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1909ee		e8		inx		                inx
.1909ef		86 02		stx $02		                STX $02
.1909f1		a6 0a		ldx $0a		                LDX $0A
.1909f3		bf 00 8b 19	lda $198b00,x	                LDA RANDOM_LUT_Tbl, x
.1909f7		a6 02		ldx $02		                LDX $02
.1909f9		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909fd		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a01		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a05		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a09		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a0d		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a11		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a15		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a19		e8		inx		                inx
.190a1a		86 02		stx $02		                STX $02
.190a1c		a6 0a		ldx $0a		                LDX $0A
.190a1e		bf 00 8a 19	lda $198a00,x	                LDA GAMMA_1_8_Tbl, x
.190a22		49 aa		eor #$aa	                EOR  #$AA
.190a24		a6 02		ldx $02		                LDX $02
.190a26		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a2a		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a2e		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a32		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a36		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a3a		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a3e		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a42		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a46		e8		inx		                inx
.190a47		a9 ff		lda #$ff	                LDA #$FF
.190a49		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a4d		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a51		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a55		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a59		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a5d		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a61		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a65		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a69		e6 0a		inc $0a		                inc $0A
.190a6b		e8		inx		                inx
.190a6c		e0 00 04	cpx #$0400	                cpx #$0400
.190a6f		f0 03		beq $190a74	                beq iinit_lut_exit
.190a71		82 4e ff	brl $1909c2	                brl iinit_lut_loop
.190a74						iinit_lut_exit
.190a74		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a76		fa		plx		                PLX
.190a77		68		pla		                PLA
.190a78		6b		rtl		                RTL
.190a79						INITVKYTXTMODE_BYPASS_DPSW
.190a79		48		pha		                PHA
.190a7a		08		php		                PHP
.190a7b		80 24		bra $190aa1	                BRA WeNeed640480Here
.190a7d						IINITVKYTXTMODE
.190a7d		48		pha		                PHA
.190a7e		08		php		                PHP
.190a7f		e2 20		sep #$20	                SEP #$20        ; set A short
.190a81		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190a85		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190a87		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190a89		f0 16		beq $190aa1	                BEQ WeNeed640480Here
.190a8b		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190a8f		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190a91		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190a93		f0 33		beq $190ac8	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190a95		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190a99		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190a9b		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190a9f		80 27		bra $190ac8	                BRA INITVICKYMODEHIRES
.190aa1						WeNeed640480Here:
.190aa1		e2 20		sep #$20	                SEP #$20        ; set A short
.190aa3		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190aa7		29 01		and #$01	                AND #$01
.190aa9		c9 01		cmp #$01	                CMP #$01
.190aab		d0 15		bne $190ac2	                BNE INITVICKYMODE
.190aad		a9 00		lda #$00	                LDA #$00
.190aaf		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ab3		ea		nop		                NOP
.190ab4		ea		nop		                NOP
.190ab5		ea		nop		                NOP
.190ab6		ea		nop		                NOP
.190ab7		ea		nop		                NOP
.190ab8		a9 01		lda #$01	                LDA #$01
.190aba		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190abe		ea		nop		                NOP
.190abf		ea		nop		                NOP
.190ac0		ea		nop		                NOP
.190ac1		ea		nop		                NOP
.190ac2						INITVICKYMODE
.190ac2		a9 00		lda #$00	                LDA #$00
.190ac4		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190ac8						INITVICKYMODEHIRES
.190ac8		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190aca		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190ace		e2 20		sep #$20	                SEP #$20        ; set A short
.190ad0		a9 00		lda #$00	                LDA #$00
.190ad2		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190ad6		a9 54		lda #$54	                LDA #$54
.190ad8		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190adc		a9 54		lda #$54	                LDA #$54
.190ade		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190ae2		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190ae4		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190ae8		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190aea		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190aee		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190af2		c2 30		rep #$30	                REP #$30        ; set A&X long
.190af4		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.190af8		28		plp		                PLP
.190af9		68		pla		                PLA
.190afa		6b		rtl		                RTL
.190afb						ISETSIZES
.190afb		22 bb 6c 19	jsl $196cbb	                JSL ANSI_SETSIZES
.190aff		6b		rtl		                RTL
.190b00						IINITVKYGRPMODE
.190b00		48		pha		                PHA
.190b01		e2 20		sep #$20	                SEP #$20        ; set A short
.190b03		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b05		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190b09		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b0b		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190b0f		a9 c0		lda #$c0	                LDA #$C0
.190b11		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190b15		a9 00		lda #$00	                LDA #$00
.190b17		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190b1b		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b1d		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190b21		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b23		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190b27		a9 c0		lda #$c0	                LDA #$C0
.190b29		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190b2d		a9 00		lda #$00	                LDA #$00
.190b2f		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190b33		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b35		68		pla		                PLA
.190b36		6b		rtl		                RTL
.190b37						IINITTILEMODE
.190b37		6b		rtl		                RTL
.190b38						IREADVRAM
.190b38		08		php		                PHP
.190b39		e2 20		sep #$20	                SEP #$20        ; set A short
.190b3b		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.190b3e		c2 20		rep #$20	                REP #$20        ; set A long
.190b40		a2 64 00	ldx #$0064	                LDX #100
.190b43		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.190b47		89 00 80	bit #$8000	                BIT #$8000
.190b4a		f0 06		beq $190b52	                BEQ read_byte                   ; If it has data, go read the byte
.190b4c		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.190b4d		d0 f4		bne $190b43	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.190b4f		28		plp		ret_failure     PLP                             ; Return failure
.190b50		18		clc		                CLC
.190b51		6b		rtl		                RTL
.190b52						read_byte
.190b52		e2 20		sep #$20	                SEP #$20        ; set A short
.190b54		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.190b58		28		plp		ret_success     PLP                             ; Return success
.190b59		18		clc		                CLC
.190b5a		6b		rtl		                RTL
.190b5b		6b		rtl		INOP            RTL
.190b5c						IINITFONTSET
.190b5c		48		pha		                PHA
.190b5d		da		phx		                PHX
.190b5e		5a		phy		                PHY
.190b5f		8b		phb		                PHB
.190b60		08		php		                PHP
.190b61		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b63		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190b66		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190b69		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190b6c		54 af 1f	mvn $1f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190b6f		28		plp		                PLP
.190b70		ab		plb		                PLB
.190b71		7a		ply		                PLY
.190b72		fa		plx		                PLX
.190b73		68		pla		                PLA
.190b74		6b		rtl		                RTL
.190b75						INITMOUSEPOINTER
.190b75		e2 20		sep #$20	                SEP #$20        ; set A short
.190b77		c2 10		rep #$10	                REP #$10        ; set X long
.190b79		a2 00 00	ldx #$0000	                LDX #$0000
.190b7c						FILL_MOUSE_MARKER
.190b7c		bf 00 8c 19	lda $198c00,x	                LDA @lMOUSE_POINTER_PTR,X
.190b80		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190b84		e8		inx		                INX
.190b85		e0 00 01	cpx #$0100	                CPX #$0100
.190b88		d0 f2		bne $190b7c	                BNE FILL_MOUSE_MARKER
.190b8a		ea		nop		                nop
.190b8b		a9 01		lda #$01	                LDA #$01
.190b8d		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190b91		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b93		6b		rtl		                RTL
.190b94						IINITCURSOR
.190b94		e2 20		sep #$20	                SEP #$20        ; set A short
.190b96		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190b98		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190b9c		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190b9e		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190ba2		c2 30		rep #$30	                REP #$30        ; set A&X long
.190ba4		a9 00 00	lda #$0000	                LDA #$0000;
.190ba7		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190bab		a9 06 00	lda #$0006	                LDA #$0006;
.190bae		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190bb2		6b		rtl		                RTL
.190bb3		0b		phd		IINITSUPERIO	  PHD
.190bb4		08		php		                PHP
.190bb5		48		pha		                PHA
.190bb6		e2 20		sep #$20	                SEP #$20        ; set A short
.190bb8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bba		8f 23 11 af	sta $af1123	                STA GP10_REG
.190bbe		af 23 11 af	lda $af1123	                LDA GP10_REG
.190bc2		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bc4		8f 24 11 af	sta $af1124	                STA GP11_REG
.190bc8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bca		8f 25 11 af	sta $af1125	                STA GP12_REG
.190bce		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bd0		8f 26 11 af	sta $af1126	                STA GP13_REG
.190bd4		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190bd6		8f 27 11 af	sta $af1127	                STA GP14_REG
.190bda		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190bdc		8f 28 11 af	sta $af1128	                STA GP15_REG
.190be0		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190be2		8f 29 11 af	sta $af1129	                STA GP16_REG
.190be6		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190be8		8f 2a 11 af	sta $af112a	                STA GP17_REG
.190bec		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190bee		8f 2b 11 af	sta $af112b	                STA GP20_REG
.190bf2		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bf4		8f 2f 11 af	sta $af112f	                STA GP24_REG
.190bf8		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190bfa		8f 30 11 af	sta $af1130	                STA GP25_REG
.190bfe		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190c00		8f 31 11 af	sta $af1131	                STA GP26_REG
.190c04		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190c06		8f 33 11 af	sta $af1133	                STA GP30_REG
.190c0a		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190c0c		8f 34 11 af	sta $af1134	                STA GP31_REG
.190c10		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190c12		8f 35 11 af	sta $af1135	                STA GP32_REG
.190c16		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190c18		8f 36 11 af	sta $af1136	                STA GP33_REG
.190c1c		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190c1e		8f 37 11 af	sta $af1137	                STA GP34_REG
.190c22		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190c24		8f 38 11 af	sta $af1138	                STA GP35_REG
.190c28		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190c2a		8f 39 11 af	sta $af1139	                STA GP36_REG
.190c2e		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190c30		8f 3a 11 af	sta $af113a	                STA GP37_REG
.190c34		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190c36		8f 3d 11 af	sta $af113d	                STA GP42_REG
.190c3a		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190c3c		8f 3e 11 af	sta $af113e	                STA GP43_REG
.190c40		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190c42		8f 3f 11 af	sta $af113f	                STA GP50_REG
.190c46		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190c48		8f 40 11 af	sta $af1140	                STA GP51_REG
.190c4c		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190c4e		8f 41 11 af	sta $af1141	                STA GP52_REG
.190c52		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190c54		8f 42 11 af	sta $af1142	                STA GP53_REG
.190c58		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190c5a		8f 43 11 af	sta $af1143	                STA GP54_REG
.190c5e		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190c60		8f 44 11 af	sta $af1144	                STA GP55_REG
.190c64		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190c66		8f 45 11 af	sta $af1145	                STA GP56_REG
.190c6a		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190c6c		8f 46 11 af	sta $af1146	                STA GP57_REG
.190c70		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190c72		8f 47 11 af	sta $af1147	                STA GP60_REG
.190c76		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190c78		8f 48 11 af	sta $af1148	                STA GP61_REG
.190c7c		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190c7e		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190c82		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190c84		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190c88		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190c8a		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190c8e		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190c90		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190c94		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190c96		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190c9a		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190c9c		8f 50 11 af	sta $af1150	                STA GP6_REG
.190ca0		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190ca2		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190ca6		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190ca8		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190cac		c2 20		rep #$20	                REP #$20        ; set A long
.190cae		68		pla		                PLA
.190caf		28		plp			              PLP
.190cb0		2b		pld				            PLD
.190cb1		6b		rtl		                RTL
.190cb2		48		pha		INITRTC         PHA
.190cb3		08		php		                PHP
.190cb4		e2 20		sep #$20	                SEP #$20        ; set A short
.190cb6		a9 00		lda #$00	                LDA #0
.190cb8		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.190cbc		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.190cc0		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.190cc4		09 04		ora #$04	                ORA #%00000100
.190cc6		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190cca		28		plp		                PLP
.190ccb		68		pla		                PLA
.190ccc		6b		rtl		                RTL
.190ccd		48		pha		IINITCODEC      PHA
.190cce		08		php		                PHP
.190ccf		c2 20		rep #$20	                REP #$20        ; set A long
.190cd1		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.190cd4		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cd8		a9 01 00	lda #$0001	                LDA #$0001
.190cdb		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cdf		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190ce2		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190ce5		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190ce9		a9 01 00	lda #$0001	                LDA #$0001
.190cec		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cf0		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190cf3		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.190cf6		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cfa		a9 01 00	lda #$0001	                LDA #$0001
.190cfd		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d01		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190d04		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190d07		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d0b		a9 01 00	lda #$0001	                LDA #$0001
.190d0e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d12		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190d15		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190d18		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d1c		a9 01 00	lda #$0001	                LDA #$0001
.190d1f		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d23		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190d26		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.190d29		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d2d		a9 01 00	lda #$0001	                LDA #$0001
.190d30		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d34		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190d37		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.190d3a		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d3e		a9 01 00	lda #$0001	                LDA #$0001
.190d41		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d45		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190d48		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.190d4b		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d4f		a9 01 00	lda #$0001	                LDA #$0001
.190d52		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d56		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190d59		28		plp		                PLP
.190d5a		68		pla		                PLA
.190d5b		6b		rtl		                RTL
.190d5c						IRESETCODEC
.190d5c		c2 20		rep #$20	                REP #$20        ; set A long
.190d5e		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190d61		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d65		a9 01 00	lda #$0001	                LDA #$0001
.190d68		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d6c		20 70 0d	jsr $190d70	                JSR CODEC_TRF_FINISHED
.190d6f		6b		rtl		                RTL
.190d70						CODEC_TRF_FINISHED
.190d70		e2 20		sep #$20	                SEP #$20        ; set A short
.190d72		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.190d76		29 01		and #$01	                AND #$01
.190d78		c9 01		cmp #$01	                CMP #$01
.190d7a		f0 f6		beq $190d72	                BEQ CODEC_LOOP
.190d7c		c2 20		rep #$20	                REP #$20        ; set A long
.190d7e		60		rts		                RTS
.190d7f						IBM_FILL_SCREEN
.190d7f		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d81		a9 00 00	lda #$0000	                LDA #$0000
.190d84		a2 00 00	ldx #$0000	                LDX #$0000
.190d87						BM_FILL_SCREEN_LOOPY
.190d87		a0 00 00	ldy #$0000	                LDY #$0000
.190d8a		e2 20		sep #$20	                SEP #$20        ; set A short
.190d8c						BM_FILL_SCREEN_LOOPX
.190d8c		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190d8e		c8		iny		                INY
.190d8f		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190d91		d0 f9		bne $190d8c	                BNE BM_FILL_SCREEN_LOOPX
.190d93		20 9e 0d	jsr $190d9e	                JSR BM_FILL_COMPUTE_Y_DST
.190d96		e8		inx		                INX
.190d97		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190d99		d0 ec		bne $190d87	                BNE BM_FILL_SCREEN_LOOPY
.190d9b		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d9d		6b		rtl		                RTL
.190d9e						BM_FILL_COMPUTE_Y_DST
.190d9e		c2 20		rep #$20	                REP #$20        ; set A long
.190da0		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190da2		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190da6		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190da8		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190dac		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190daf		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190db3		a9 00 00	lda #$0000	                LDA #$0000
.190db6		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dba		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dbe		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190dc0		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190dc4		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190dc6		a9 00 00	lda #$0000	                LDA #$0000
.190dc9		60		rts		                RTS
.190dca						IBMP_PARSER
.190dca		c2 30		rep #$30	                REP #$30        ; set A&X long
.190dcc		a0 00 00	ldy #$0000	                LDY #$0000
.190dcf		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190dd1		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190dd4		f0 03		beq $190dd9	                BEQ IBMP_PARSER_CONT
.190dd6		82 04 01	brl $190edd	                BRL BMP_PARSER_END_WITH_ERROR
.190dd9						IBMP_PARSER_CONT
.190dd9		a0 02 00	ldy #$0002	                LDY #$0002
.190ddc		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190dde		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190de2		a0 04 00	ldy #$0004	                LDY #$0004
.190de5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190de7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190deb		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190dee		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190df2		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190df6		18		clc		                CLC
.190df7		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dfb		85 50		sta $50		                STA BMP_FILE_SIZE
.190dfd		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e01		85 52		sta $52		                STA BMP_FILE_SIZE+2
.190e03		a0 12 00	ldy #$0012	                LDY #$0012
.190e06		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e08		85 40		sta $40		                STA BMP_X_SIZE
.190e0a		a0 16 00	ldy #$0016	                LDY #$0016
.190e0d		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e0f		85 42		sta $42		                STA BMP_Y_SIZE
.190e11		a0 2e 00	ldy #$002e	                LDY #$002E
.190e14		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e16		0a		asl a		                ASL A; Multiply by 2
.190e17		0a		asl a		                ASL A; Multiply by 2
.190e18		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190e1a		e0 00 00	cpx #$0000	                CPX #$0000
.190e1d		d0 05		bne $190e24	                BNE BMP_LUT1_PICK
.190e1f		20 e5 0e	jsr $190ee5	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190e22		80 08		bra $190e2c	                BRA DONE_TRANSFER_LUT;
.190e24						  BMP_LUT1_PICK
.190e24		e0 01 00	cpx #$0001	                CPX #$0001
.190e27		d0 03		bne $190e2c	                BNE BMP_LUT2_PICK
.190e29		20 15 0f	jsr $190f15	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190e2c						  BMP_LUT2_PICK
.190e2c						  DONE_TRANSFER_LUT
.190e2c		a5 56		lda $56		                LDA BMP_POSITION_Y
.190e2e		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.190e32		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190e34		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.190e38		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.190e3c		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e40		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.190e44		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e48		a5 54		lda $54		                LDA BMP_POSITION_X
.190e4a		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190e4e		a9 00 00	lda #$0000	                LDA #$0000
.190e51		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e55		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190e59		85 f0		sta $f0		                STA USER_TEMP
.190e5b		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190e5f		85 f2		sta $f2		                STA USER_TEMP+2
.190e61		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190e63		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e67		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190e69		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e6d		a5 f0		lda $f0		                LDA USER_TEMP
.190e6f		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190e73		a5 f2		lda $f2		                LDA USER_TEMP+2
.190e75		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190e79		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190e7d		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190e7f		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190e83		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190e85		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190e87		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190e8b		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190e8d		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190e91		a5 50		lda $50		                LDA BMP_FILE_SIZE
.190e93		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190e97		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190e99		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e9d		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ea1		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ea3		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ea7		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190ea9		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190eab		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190eaf		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190eb1		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190eb5		18		clc		                CLC
.190eb6		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190eb8		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190ebb		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190ebe		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190ec2		a9 ff ff	lda #$ffff	                LDA #$FFFF
.190ec5		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190ec9		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ecd		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ecf		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ed3		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190ed5		20 45 0f	jsr $190f45	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190ed8		a2 3a 84	ldx #$843a	                LDX #<>bmp_parser_msg0
.190edb		80 03		bra $190ee0	                BRA BMP_PARSER_END_NO_ERROR
.190edd						BMP_PARSER_END_WITH_ERROR
.190edd		a2 26 84	ldx #$8426	                LDX #<>bmp_parser_err0
.190ee0						BMP_PARSER_END_NO_ERROR
.190ee0		22 fb 06 19	jsl $1906fb	                JSL IPRINT       ; print the first line
.190ee4		6b		rtl		                RTL
.190ee5						BMP_PARSER_UPDATE_LUT0
.190ee5		38		sec		                SEC
.190ee6		a0 7a 00	ldy #$007a	                LDY #$007A
.190ee9		a2 00 00	ldx #$0000	                LDX #$0000
.190eec		e2 20		sep #$20	                SEP #$20        ; set A short
.190eee						BMP_PARSER_UPDATE_LOOP
.190eee		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190ef0		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190ef4		c8		iny		                INY
.190ef5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190ef7		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190efb		c8		iny		                INY
.190efc		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190efe		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f02		c8		iny		                INY
.190f03		a9 80		lda #$80	                LDA #$80
.190f05		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f09		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f0a		e8		inx		                INX
.190f0b		e8		inx		                INX
.190f0c		e8		inx		                INX
.190f0d		e8		inx		                INX
.190f0e		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f10		d0 dc		bne $190eee	                BNE BMP_PARSER_UPDATE_LOOP
.190f12		c2 20		rep #$20	                REP #$20        ; set A long
.190f14		60		rts		                RTS
.190f15						BMP_PARSER_UPDATE_LUT1
.190f15		38		sec		                SEC
.190f16		a0 36 00	ldy #$0036	                LDY #$0036
.190f19		a2 00 00	ldx #$0000	                LDX #$0000
.190f1c		e2 20		sep #$20	                SEP #$20        ; set A short
.190f1e						PALETTE_LUT1_LOOP
.190f1e		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190f20		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190f24		c8		iny		                INY
.190f25		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190f27		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f2b		c8		iny		                INY
.190f2c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f2e		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f32		c8		iny		                INY
.190f33		a9 80		lda #$80	                LDA #$80
.190f35		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f39		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f3a		e8		inx		                INX
.190f3b		e8		inx		                INX
.190f3c		e8		inx		                INX
.190f3d		e8		inx		                INX
.190f3e		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f40		d0 dc		bne $190f1e	                BNE PALETTE_LUT1_LOOP
.190f42		c2 20		rep #$20	                REP #$20        ; set A long
.190f44		60		rts		                RTS
.190f45						BMP_PARSER_DMA_SHIT_OUT
.190f45		a2 00 00	ldx #$0000	                LDX #$0000
.190f48						BMP_PARSER_LOOPY
.190f48		a0 00 00	ldy #$0000	                LDY #$0000
.190f4b		e2 20		sep #$20	                SEP #$20        ; set A short
.190f4d						BMP_PARSER_LOOPX
.190f4d		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190f4f		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f51		c8		iny		                INY
.190f52		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190f54		d0 f7		bne $190f4d	                BNE BMP_PARSER_LOOPX
.190f56		20 62 0f	jsr $190f62	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190f59		20 7d 0f	jsr $190f7d	                JSR BMP_PARSER_COMPUTE_Y_DST
.190f5c		e8		inx		                INX
.190f5d		e4 42		cpx $42		                CPX BMP_Y_SIZE
.190f5f		d0 e7		bne $190f48	                BNE BMP_PARSER_LOOPY
.190f61		60		rts		                RTS
.190f62						BMP_PARSER_COMPUTE_Y_SRC
.190f62		c2 20		rep #$20	                REP #$20        ; set A long
.190f64		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f66		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f6a		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190f6c		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f70		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f74		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f76		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190f7a		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190f7c		60		rts		                RTS
.190f7d						BMP_PARSER_COMPUTE_Y_DST
.190f7d		c2 20		rep #$20	                REP #$20        ; set A long
.190f7f		18		clc		                CLC
.190f80		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f82		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190f84		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f86		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f88		69 00 00	adc #$0000	                ADC #$0000
.190f8b		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190f8d		60		rts		                RTS
.190f8e		ea		nop		ILOOP           NOP
.190f8f		ea		nop		                NOP
.190f90		ea		nop		                NOP
.190f91		ea		nop		                NOP
.190f92		ea		nop		                NOP
.190f93		ea		nop		                NOP
.190f94		ea		nop		                NOP
.190f95		ea		nop		                NOP
.190f96		ea		nop		                NOP
.190f97		ea		nop		                NOP
.190f98		6b		rtl		                RTL
.190f99		22 8e 0f 19	jsl $190f8e	ILOOP_1         JSL ILOOP
.190f9d		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fa1		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fa5		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fa9		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fad		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fb1		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fb5		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fb9		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fbd		22 8e 0f 19	jsl $190f8e	                JSL ILOOP
.190fc1		6b		rtl		                RTL
.190fc2		22 99 0f 19	jsl $190f99	ILOOP_1MS       JSL ILOOP_1
.190fc6		6b		rtl		                RTL
.190fc7		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.190fca		f0 07		beq $190fd3	                BEQ LOOP_MS_END
.190fcc		22 c2 0f 19	jsl $190fc2	                JSL ILOOP_1MS
.190fd0		ca		dex		                DEX
.190fd1		80 f4		bra $190fc7	                BRA ILOOP_MS
.190fd3		6b		rtl		LOOP_MS_END     RTL
.190fd4						IDELAY
.190fd4		8b		phb		                PHB
.190fd5		08		php		                PHP
.190fd6		48		pha		                PHA             ; begin setdbr macro
.190fd7		08		php		                PHP
.190fd8		e2 20		sep #$20	                SEP #$20        ; set A short
.190fda		a9 00		lda #$00	                LDA #0
.190fdc		48		pha		                PHA
.190fdd		ab		plb		                PLB
.190fde		28		plp		                PLP
.190fdf		68		pla		                PLA             ; end setdbr macro
.190fe0		e2 20		sep #$20	                SEP #$20        ; set A short
.190fe2		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.190fe4		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.190fe8		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.190fec		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.190fee		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.190ff2		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.190ff4		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.190ff7		a9 00		lda #$00	                LDA #0
.190ff9		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.190ffd		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.191001		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.191005		c2 30		rep #$30	                REP #$30        ; set A&X long
.191007		8a		txa		                TXA
.191008		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.19100c		98		tya		                TYA
.19100d		e2 20		sep #$20	                SEP #$20        ; set A short
.19100f		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.191013		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.191015		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191019		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.19101b		cb		wai		loop            WAI                         ; Wait for an interrupt
.19101c		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.19101f		f0 fa		beq $19101b	                BEQ loop                    ; Keep checking until it's set
.191021		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.191023		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.191027		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.191029		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.19102c		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.191030		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.191032		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.191036		28		plp		                PLP
.191037		ab		plb		                PLB
.191038		6b		rtl		                RTL
.191039						SHOW_CREDITS
.191039		48		pha		                PHA
.19103a		da		phx		                PHX
.19103b		5a		phy		                PHY
.19103c		08		php		                PHP
.19103d		e2 20		sep #$20	                SEP #$20        ; set A short
.19103f		c2 10		rep #$10	                REP #$10        ; set X long
.191041		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.191045		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.191047		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.19104b		a2 00 00	ldx #$0000	                LDX #0
.19104e		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.191052		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.191056		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.19105a		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.19105e		e8		inx		                INX
.19105f		e0 00 20	cpx #$2000	                CPX #128 * 64
.191062		d0 ea		bne $19104e	                BNE credit_loop
.191064		22 95 06 19	jsl $190695	                JSL IGETCHW                     ; Wait for a keypress
.191068		22 df 08 19	jsl $1908df	                JSL ICLRSCREEN                  ; Then clear the screen and return
.19106c		22 0f 08 19	jsl $19080f	                JSL ICSRHOME                    ; Move cursor to the home position
.191070		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.191074		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.191076		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.19107a		28		plp		                PLP
.19107b		7a		ply		                PLY
.19107c		fa		plx		                PLX
.19107d		68		pla		                PLA
.19107e		6b		rtl		                RTL
.19107f		00		brk #		ISCINIT         BRK ;
.191080		00		brk #		IIOINIT         BRK ;
.191081		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.191082		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.191083		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.191084		00		brk #		ICLOSE          BRK ; Close a channel
.191085		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.191086		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.191087		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.191088		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.191089		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.19108a		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.19108b		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.19108c		00		brk #		IPRINTF         BRK ; Print a float value
.19108d		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.19108e		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.19108f		00		brk #		IPUSHKEY        BRK ;
.191090		00		brk #		IPUSHKEYS       BRK ;
.191091		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.191092		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.191093		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>191094		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>19109c		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>1910ac		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>1910b4		12
>1910b5		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>1910bd		15
>1910be		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1910c4		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1910c9		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>1910cf		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>1910d7		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>1910e5		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>1910ed		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>1910fb		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>191103		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>191111		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>191119		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>191127		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>19112f		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>19113d		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>191145		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>191153		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>19115b		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>191169		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>191171		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>19117f		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>191187		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>191195		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>19119d		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>1911ab		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>1911b3		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>1911c1		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>1911c9		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>1911d7		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>1911df		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>1911ed		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>1911f5		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>191203		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>19120b		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>191219		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>191221		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>19122f		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>191237		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>191245		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>19124d		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>19125b		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>191263		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>191271		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>191279		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>191287		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>19128f		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>19129d		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>1912a5		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>1912b3		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>1912bb		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>1912c9		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>1912d1		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>1912df		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>1912e7		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>1912f5		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>1912fd		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>19130b		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>191313		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>191321		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>191329		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>191337		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>19133f		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>19134d		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>191355		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>191363		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>19136b		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>191379		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>191381		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>19138f		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>191397		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>1913a5		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>1913ad		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>1913bb		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>1913c3		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>1913d1		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>1913d9		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>1913e7		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>1913ef		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>1913fd		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>191405		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>191413		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>19141b		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>191429		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>191431		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>19143f		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>191447		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>191455		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>19145d		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>19146b		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>191473		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>191481		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>191489		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>191497		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>19149f		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>1914ad		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>1914b5		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>1914c3		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>1914cb		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>1914d9		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>1914e1		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>1914ef		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>1914f7		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>191505		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>19150d		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>19151b		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>191523		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>191531		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>191539		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>191547		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>19154f		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>19155d		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>191565		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>191573		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>19157b		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>191589		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>191591		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>19159f		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>1915a7		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>1915b5		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>1915bd		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>1915cb		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>1915d3		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>1915e1		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>1915e9		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>1915f7		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>1915ff		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>19160d		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>191615		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>191623		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>19162b		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>191639		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>191641		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>19164f		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>191657		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>191665		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>19166d		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>19167b		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>191683		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>191691		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>191699		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>1916a7		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>1916af		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>1916bd		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>1916c5		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>1916d3		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>1916db		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>1916e9		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>1916f1		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>1916ff		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>191707		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>191715		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>19171d		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>19172b		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>191733		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>191741		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>191749		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>191757		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>19175f		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>19176d		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>191775		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>191783		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>19178b		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>191799		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>1917a1		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>1917af		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>1917b7		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>1917c5		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>1917cd		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>1917db		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>1917e3		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>1917f1		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>1917f9		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>191807		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>19180f		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>19181d		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>191825		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>191833		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>19183b		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>191849		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>191851		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>19185f		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>191867		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>191875		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>19187d		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>19188b		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>191893		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>1918a1		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>1918a9		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>1918b7		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>1918bf		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>1918cd		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>1918d5		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>1918e3		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>1918eb		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>1918f9		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>191901		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>19190f		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>191917		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>191925		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>19192d		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>19193b		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>191943		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>191951		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>191959		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>191967		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>19196f		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>19197d		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>191985		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>191993		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>19199b		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>1919a9		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>1919b1		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>1919bf		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>1919c7		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>1919d5		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>1919dd		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>1919eb		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>1919f3		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>191a01		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>191a09		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>191a17		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>191a1f		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>191a2d		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>191a35		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191a43		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191a4b		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191a59		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191a61		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191a6f		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191a77		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191a85		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191a8d		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191a9b		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191aa3		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191ab1		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191ab9		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191ac7		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191acf		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191add		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191ae5		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191af3		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191afb		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191b09		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191b11		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191b1f		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191b27		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191b35		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191b3d		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191b4b		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191b53		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191b61		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191b69		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191b77		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191b7f		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>191b8d		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>191b95		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>191ba3		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>191bab		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>191bb9		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>191bc1		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>191bcf		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>191bd7		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>191be5		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>191bed		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>191bfb		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>191c03		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>191c11		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>191c19		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>191c27		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>191c2f		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>191c3d		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>191c45		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>191c53		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>191c5b		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>191c69		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>191c71		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>191c7f		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>191c87		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>191c95		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>191c9d		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>191cab		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>191cb3		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>191cc1		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>191cc9		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>191cd7		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>191cdf		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>191ced		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>191cf5		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>191d03		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>191d0b		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>191d19		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>191d21		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>191d2f		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>191d37		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>191d45		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191d4d		00 87 fa 00
>191d51		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d59		00 88 98 03
>191d5d		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d65		00 88 98 03
>191d69		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191d71		00 f9 69 00
>191d75		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>191d7d		80 e8 4a 00
>191d81		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191d89		00 f6 9a 00
>191d8d		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>191d95		1b f2 34 00
>191d99		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>191da1		00 f7 8a 00
>191da5		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>191dad		00 f6 47 00
>191db1		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191db9		00 f9 69 00
>191dbd		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191dc5		00 f7 a9 00
>191dc9		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191dd1		00 87 fa 00
>191dd5		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191ddd		00 f7 a9 00
>191de1		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191de9		00 f5 f5 00
>191ded		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191df5		06 b8 d8 03
>191df9		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e01		00 f5 f5 00
>191e05		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191e0d		06 b8 d8 03
>191e11		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e19		00 f5 f5 00
>191e1d		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>191e25		10 74 f8 03
>191e29		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e31		00 f5 f5 00
>191e35		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e3d		00 f5 f5 00
>191e41		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e49		05 c5 d4 03
>191e4d		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e55		00 f5 f5 00
>191e59		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e61		04 f9 44 03
>191e65		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e6d		05 c5 d4 03
>191e71		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e79		04 f9 44 03
>191e7d		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>191e85		03 87 f7 03
>191e89		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e91		05 c5 d4 03
>191e95		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>191e9d		00 f6 28 00
>191ea1		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191ea9		05 c5 d4 03
>191ead		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>191eb5		00 f5 f7 01
>191eb9		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191ec1		04 f9 44 03
>191ec5		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191ecd		00 99 f9 00
>191ed1		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>191ed9		00 a8 f7 00
>191edd		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191ee5		00 99 f9 00
>191ee9		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191ef1		00 a6 f6 00
>191ef5		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191efd		00 a6 f6 00
>191f01		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f09		00 f6 36 02
>191f0d		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f15		00 f6 36 02
>191f19		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f21		00 96 e8 01
>191f25		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f2d		00 96 e8 01
>191f31		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f39		02 79 77 03
>191f3d		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f45		02 79 77 03
>191f49		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>191f51		00 a5 2b 02
>191f55		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>191f5d		00 93 3b 02
>191f61		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>191f69		01 89 3b 03
>191f6d		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>191f75		0a 53 2b 02
>191f79		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>191f81		00 f6 89 00
>191f85		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191f8d		00 f6 9a 00
>191f91		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191f99		00 f6 9a 00
>191f9d		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>191fa5		00 87 4b 01
>191fa9		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>191fb1		00 78 67 01
>191fb5		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>191fbd		02 f8 fc 00
>191fc1		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fc9		40 f5 f5 00
>191fcd		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191fd5		02 79 77 03
>191fd9		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fe1		40 f5 f5 00
>191fe5		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fed		40 f5 f5 00
>191ff1		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191ff9		00 f9 69 00
>191ffd		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>192005		00 f9 69 00
>192009		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192011		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>192015		45 1d 19 00 51 1d 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>19201d		5d 1d 19 00 69 1d 19 00
>192025		75 1d 19 00 81 1d 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>19202d		8d 1d 19 00 99 1d 19 00
>192035		a5 1d 19 00 b1 1d 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>19203d		bd 1d 19 00 c9 1d 19 00
>192045		d5 1d 19 00 e1 1d 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>19204d		ed 1d 19 00 f9 1d 19 00
>192055		05 1e 19 00 11 1e 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>19205d		1d 1e 19 00 29 1e 19 00
>192065		35 1e 19 00 41 1e 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>19206d		4d 1e 19 00 59 1e 19 00
>192075		65 1e 19 00 71 1e 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>19207d		7d 1e 19 00 89 1e 19 00
>192085		95 1e 19 00 a1 1e 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>19208d		ad 1e 19 00 b9 1e 19 00
>192095		c5 1e 19 00 d1 1e 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>19209d		dd 1e 19 00 e9 1e 19 00
>1920a5		f5 1e 19 00 01 1f 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>1920ad		0d 1f 19 00 19 1f 19 00
>1920b5		25 1f 19 00 31 1f 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>1920bd		3d 1f 19 00 49 1f 19 00
>1920c5		55 1f 19 00 61 1f 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>1920cd		6d 1f 19 00 79 1f 19 00
>1920d5		85 1f 19 00 91 1f 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>1920dd		9d 1f 19 00 a9 1f 19 00
>1920e5		b5 1f 19 00 c1 1f 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>1920ed		cd 1f 19 00 d9 1f 19 00
>1920f5		e5 1f 19 00 f1 1f 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>1920fd		fd 1f 19 00 09 20 19 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>192105		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>19210d		00 b1 f5 01
>192111		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>192119		03 f1 f5 00
>19211d		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>192125		03 c1 f5 00
>192129		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>192131		00 92 f5 01
>192135		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>19213d		00 f1 f9 00
>192141		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>192149		00 f1 f5 00
>19214d		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>192155		02 81 f6 01
>192159		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>192161		00 c2 b9 01
>192165		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>19216d		05 b2 35 00
>192171		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>192179		1b f2 34 00
>19217d		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>192185		01 f5 74 00
>192189		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>192191		00 61 e3 00
>192195		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>19219d		00 a4 64 00
>1921a1		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>1921a9		07 b5 f5 00
>1921ad		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>1921b5		00 f3 74 00
>1921b9		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>1921c1		00 c3 94 01
>1921c5		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>1921cd		00 f4 0d 01
>1921d1		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>1921d9		00 f5 0b 01
>1921dd		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>1921e5		00 bf 07 00
>1921e9		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>1921f1		00 6d 08 01
>1921f5		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>1921fd		00 51 17 01
>192201		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>192209		00 51 17 01
>19220d		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>192215		00 53 08 01
>192219		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>192221		00 53 06 01
>192225		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>19222d		00 d2 f8 00
>192231		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>192239		00 e2 c7 01
>19223d		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>192245		00 f1 9c 00
>192249		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>192251		02 f2 c9 01
>192255		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>19225d		03 95 fb 00
>192261		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>192269		04 a1 59 00
>19226d		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>192275		03 91 fc 03
>192279		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>192281		02 b4 ec 00
>192285		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>19228d		00 93 f7 00
>192291		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>192299		04 c1 58 00
>19229d		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>1922a5		02 c3 6a 00
>1922a9		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>1922b1		00 62 87 00
>1922b5		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>1922bd		00 f3 97 00
>1922c1		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>1922c9		00 b3 97 00
>1922cd		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>1922d5		04 f3 cc 00
>1922d9		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>1922e1		00 93 aa 00
>1922e5		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>1922ed		00 78 08 01
>1922f1		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>1922f9		00 78 08 01
>1922fd		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>192305		00 54 27 01
>192309		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>192311		00 61 56 00
>192315		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>19231d		00 75 16 01
>192321		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>192329		00 f5 f6 01
>19232d		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>192335		80 f3 e3 00
>192339		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>192341		00 b5 f5 00
>192345		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>19234d		80 71 16 00
>192351		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>192359		00 30 55 01
>19235d		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>192365		00 62 36 01
>192369		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>192371		02 51 07 00
>192375		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>19237d		00 62 39 00
>192381		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>192389		00 66 27 00
>19238d		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>192395		00 73 46 00
>192399		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>1923a1		00 74 76 01
>1923a5		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>1923ad		81 92 38 00
>1923b1		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>1923b9		02 71 19 00
>1923bd		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>1923c5		01 81 09 00
>1923c9		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>1923d1		00 83 4b 02
>1923d5		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>1923dd		05 71 59 00
>1923e1		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>1923e9		03 82 39 00
>1923ed		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>1923f5		82 84 17 00
>1923f9		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>192401		02 72 16 00
>192405		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>19240d		00 7b 0a 00
>192411		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>192419		00 85 0c 01
>19241d		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>192425		00 7b 0a 01
>192429		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>192431		00 79 18 01
>192435		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>19243d		01 73 08 00
>192441		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>192449		04 77 0a 00
>19244d		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>192455		00 51 19 00
>192459		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>192461		01 74 09 00
>192465		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>19246d		01 63 28 00
>192471		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>192479		00 65 0a 00
>19247d		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>192485		00 67 29 00
>192489		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>192491		00 67 09 00
>192495		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>19249d		01 6a 28 00
>1924a1		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>1924a9		00 55 27 00
>1924ad		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>1924b5		00 6f 08 00
>1924b9		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>1924c1		00 7a 07 00
>1924c5		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>1924cd		06 a2 0d 00
>1924d1		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>1924d9		00 a3 5f 00
>1924dd		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>1924e5		00 42 27 00
>1924e9		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>1924f1		05 b2 49 00
>1924f5		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>1924fd		00 b2 79 01
>192501		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>192509		00 7a 1a 00
>19250d		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>192515		00 82 28 01
>192519		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>192521		02 c3 5f 00
>192525		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>19252d		86 c4 95 01
>192531		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>192539		00 44 15 00
>19253d		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>192545		00 d1 06 00
>192549		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>192551		00 82 37 00
>192555		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>19255d		00 41 35 00
>192561		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>192569		02 32 f5 01
>19256d		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>192575		00 61 26 00
>192579		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>192581		84 3f 05 01
>192585		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>19258d		01 d1 f6 00
>192591		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>192599		00 41 05 01
>19259d		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>1925a5		05 f3 e4 00
>1925a9		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>1925b1		00 92 f5 01
>1925b5		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>1925bd		04 f2 e4 01
>1925c1		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>1925c9		00 45 25 00
>1925cd		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>1925d5		01 a3 36 00
>1925d9		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>1925e1		01 98 05 01
>1925e5		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>1925ed		02 a3 f6 01
>1925f1		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>1925f9		00 f6 f8 00
>1925fd		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>192605		00 f3 f5 00
>192609		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>192611		00 94 e5 01
>192615		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>19261d		00 84 44 00
>192621		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>192629		03 83 18 01
>19262d		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>192635		01 78 08 01
>192639		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>192641		03 8e 08 01
>192645		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>19264d		09 f2 46 00
>192651		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>192659		00 96 e8 01
>19265d		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>192665		00 f6 f6 01
>192669		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192671		00 f6 9a 00
>192675		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>19267d		00 c6 45 00
>192681		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>192689		00 f4 b4 00
>19268d		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>192695		00 d5 25 00
>192699		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>1926a1		0e 21 2d 00
>1926a5		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>1926ad		00 55 87 02
>1926b1		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>1926b9		08 98 87 01
>1926bd		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>1926c5		04 17 04 03
>1926c9		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>1926d1		05 77 f9 02
>1926d5		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>1926dd		02 f4 08 00
>1926e1		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>1926e9		00 36 05 01
>1926ed		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>1926f5		05 32 55 03
>1926f9		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>192701		00 f3 df 00
>192705		05 21 19 00 11 21 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>19270d		1d 21 19 00 29 21 19 00 35 21 19 00 41 21 19 00
>19271d		4d 21 19 00 59 21 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>192725		65 21 19 00 71 21 19 00 7d 21 19 00 89 21 19 00
>192735		95 21 19 00 a1 21 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>19273d		ad 21 19 00 b9 21 19 00 c5 21 19 00 d1 21 19 00
>19274d		dd 21 19 00 e9 21 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>192755		f5 21 19 00 01 22 19 00 0d 22 19 00 19 22 19 00
>192765		25 22 19 00 31 22 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>19276d		3d 22 19 00 49 22 19 00 55 22 19 00 61 22 19 00
>19277d		6d 22 19 00 79 22 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>192785		85 22 19 00 91 22 19 00 9d 22 19 00 a9 22 19 00
>192795		b5 22 19 00 c1 22 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>19279d		cd 22 19 00 d9 22 19 00 e5 22 19 00 f1 22 19 00
>1927ad		fd 22 19 00 09 23 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>1927b5		15 23 19 00 21 23 19 00 2d 23 19 00 39 23 19 00
>1927c5		45 23 19 00 51 23 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>1927cd		5d 23 19 00 69 23 19 00 75 23 19 00 81 23 19 00
>1927dd		8d 23 19 00 99 23 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>1927e5		a5 23 19 00 b1 23 19 00 bd 23 19 00 c9 23 19 00
>1927f5		d5 23 19 00 e1 23 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>1927fd		ed 23 19 00 f9 23 19 00 05 24 19 00 11 24 19 00
>19280d		1d 24 19 00 29 24 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>192815		35 24 19 00 41 24 19 00 4d 24 19 00 59 24 19 00
>192825		65 24 19 00 71 24 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>19282d		7d 24 19 00 89 24 19 00 95 24 19 00 a1 24 19 00
>19283d		ad 24 19 00 b9 24 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>192845		c5 24 19 00 d1 24 19 00 dd 24 19 00 e9 24 19 00
>192855		f5 24 19 00 01 25 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>19285d		0d 25 19 00 19 25 19 00 25 25 19 00 31 25 19 00
>19286d		3d 25 19 00 49 25 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>192875		55 25 19 00 61 25 19 00 6d 25 19 00 79 25 19 00
>192885		85 25 19 00 91 25 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>19288d		9d 25 19 00 a9 25 19 00 b5 25 19 00 c1 25 19 00
>19289d		cd 25 19 00 d9 25 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>1928a5		e5 25 19 00 f1 25 19 00 fd 25 19 00 09 26 19 00
>1928b5		15 26 19 00 21 26 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>1928bd		2d 26 19 00 39 26 19 00 45 26 19 00 51 26 19 00
>1928cd		5d 26 19 00 69 26 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>1928d5		75 26 19 00 81 26 19 00 8d 26 19 00 99 26 19 00
>1928e5		a5 26 19 00 b1 26 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>1928ed		bd 26 19 00 c9 26 19 00 d5 26 19 00 e1 26 19 00
>1928fd		ed 26 19 00 f9 26 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>192905		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>19290d		0d f2 f7 00
>192911		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>192919		07 f2 f7 00
>19291d		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>192925		07 f2 f6 00
>192929		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>192931		07 f2 f7 00
>192935		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>19293d		07 f2 f7 00
>192941		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192949		07 f2 f7 00
>19294d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192955		00 00 00 00
>192959		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192961		00 00 00 00
>192965		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19296d		00 00 00 00
>192971		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>192979		87 f2 f1 00
>19297d		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>192985		07 f4 f4 00
>192989		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>192991		07 f2 f6 00
>192995		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>19299d		07 e7 f7 00
>1929a1		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>1929a9		07 f6 f6 00
>1929ad		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>1929b5		87 a3 f3 00
>1929b9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929c1		00 00 00 00
>1929c5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929cd		00 00 00 00
>1929d1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929d9		00 00 00 00
>1929dd		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>1929e5		07 8a 08 00
>1929e9		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>1929f1		07 55 14 00
>1929f5		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>1929fd		87 55 04 00
>192a01		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>192a09		07 46 1a 00
>192a0d		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>192a15		07 61 07 00
>192a19		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>192a21		90 61 07 00
>192a25		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a2d		00 00 00 00
>192a31		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a39		00 00 00 00
>192a3d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a45		00 00 00 00
>192a49		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192a51		87 f3 f8 00
>192a55		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192a5d		07 f6 3a 00
>192a61		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192a69		0c 84 19 00
>192a6d		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192a75		07 94 19 00
>192a79		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192a81		87 d1 f8 00
>192a85		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192a8d		07 c3 a6 00
>192a91		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a99		00 00 00 00
>192a9d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192aa5		00 00 00 00
>192aa9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ab1		00 00 00 00
>192ab5		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192abd		47 f2 df 00
>192ac1		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192ac9		0f a1 df 00
>192acd		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192ad5		07 f1 78 00
>192ad9		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192ae1		07 f1 18 00
>192ae5		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192aed		07 56 26 00
>192af1		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192af9		07 66 06 00
>192afd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b05		00 00 00 00
>192b09		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b11		00 00 00 00
>192b15		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b1d		00 00 00 00
>192b21		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192b29		87 85 35 00
>192b2d		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192b35		87 f3 f4 00
>192b39		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192b41		07 f2 c3 00
>192b45		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192b4d		08 72 08 00
>192b51		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192b59		07 3f 07 01
>192b5d		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192b65		07 4f 05 00
>192b69		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b71		00 00 00 00
>192b75		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b7d		00 00 00 00
>192b81		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b89		00 00 00 00
>192b8d		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>192b95		07 7a 05 00
>192b99		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>192ba1		07 a5 45 00
>192ba5		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>192bad		08 8f 09 00
>192bb1		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>192bb9		0c 8f 09 00
>192bbd		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>192bc5		07 82 37 00
>192bc9		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>192bd1		07 62 2c 01
>192bd5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bdd		00 00 00 00
>192be1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192be9		00 00 00 00
>192bed		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bf5		00 00 00 00
>192bf9		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>192c01		07 a6 1c 00
>192c05		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>192c0d		07 72 0b 00
>192c11		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>192c19		07 72 09 00
>192c1d		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>192c25		07 82 09 00
>192c29		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>192c31		07 72 0f 00
>192c35		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>192c3d		07 8f 0a 00
>192c41		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c49		00 00 00 00
>192c4d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c55		00 00 00 00
>192c59		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c61		00 00 00 00
>192c65		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c6d		07 65 1a 00
>192c71		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c79		07 65 1a 00
>192c7d		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>192c85		07 75 0a 00
>192c89		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>192c91		07 65 1a 00
>192c95		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>192c9d		07 65 26 00
>192ca1		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>192ca9		07 55 36 00
>192cad		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cb5		00 00 00 00
>192cb9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cc1		00 00 00 00
>192cc5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ccd		00 00 00 00
>192cd1		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>192cd9		07 ff 0f 01
>192cdd		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>192ce5		87 64 18 00
>192ce9		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>192cf1		07 96 0a 00
>192cf5		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>192cfd		07 91 2a 00
>192d01		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>192d09		47 6f 07 00
>192d0d		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>192d15		07 8f 06 02
>192d19		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d21		00 00 00 00
>192d25		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d2d		00 00 00 00
>192d31		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d39		00 00 00 00
>192d3d		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>192d45		07 55 16 00
>192d49		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>192d51		07 6a 03 00
>192d55		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>192d5d		07 42 35 00
>192d61		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>192d69		07 31 47 01
>192d6d		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>192d75		0a 42 25 00
>192d79		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>192d81		07 cf 07 00
>192d85		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d8d		00 00 00 00
>192d91		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d99		00 00 00 00
>192d9d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192da5		00 00 00 00
>192da9		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>192db1		8a f2 26 00
>192db5		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>192dbd		07 f2 f5 00
>192dc1		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>192dc9		87 11 13 00
>192dcd		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>192dd5		87 1d 03 00
>192dd9		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>192de1		07 81 23 00
>192de5		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>192ded		0a f2 f6 01
>192df1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192df9		00 00 00 00
>192dfd		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e05		00 00 00 00
>192e09		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e11		00 00 00 00
>192e15		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>192e1d		07 c2 05 00
>192e21		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>192e29		07 6f 0c 01
>192e2d		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>192e35		07 56 16 00
>192e39		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>192e41		88 8f 0b 00
>192e45		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>192e4d		87 c3 e5 00
>192e51		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>192e59		07 f8 16 00
>192e5d		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e65		00 00 00 00
>192e69		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e71		00 00 00 00
>192e75		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e7d		00 00 00 00
>192e81		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>192e89		0a f3 03 00
>192e8d		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>192e95		07 f3 02 00
>192e99		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>192ea1		07 1f ff 03
>192ea5		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>192ead		8f 56 84 02
>192eb1		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>192eb9		0c 34 04 03
>192ebd		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>192ec5		07 1f 02 03
>192ec9		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ed1		00 00 00 00
>192ed5		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192edd		00 00 00 00
>192ee1		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ee9		00 00 00 00
>192eed		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>192ef5		07 12 16 01
>192ef9		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>192f01		07 f6 c9 02
>192f05		05 29 19 00 11 29 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>192f0d		1d 29 19 00 29 29 19 00 35 29 19 00 41 29 19 00
>192f1d		4d 29 19 00 59 29 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>192f25		65 29 19 00 71 29 19 00 7d 29 19 00 89 29 19 00
>192f35		95 29 19 00 a1 29 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>192f3d		ad 29 19 00 b9 29 19 00 c5 29 19 00 d1 29 19 00
>192f4d		dd 29 19 00 e9 29 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>192f55		f5 29 19 00 01 2a 19 00 0d 2a 19 00 19 2a 19 00
>192f65		25 2a 19 00 31 2a 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>192f6d		3d 2a 19 00 49 2a 19 00 55 2a 19 00 61 2a 19 00
>192f7d		6d 2a 19 00 79 2a 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>192f85		85 2a 19 00 91 2a 19 00 9d 2a 19 00 a9 2a 19 00
>192f95		b5 2a 19 00 c1 2a 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>192f9d		cd 2a 19 00 d9 2a 19 00 e5 2a 19 00 f1 2a 19 00
>192fad		fd 2a 19 00 09 2b 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>192fb5		15 2b 19 00 21 2b 19 00 2d 2b 19 00 39 2b 19 00
>192fc5		45 2b 19 00 51 2b 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>192fcd		5d 2b 19 00 69 2b 19 00 75 2b 19 00 81 2b 19 00
>192fdd		8d 2b 19 00 99 2b 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>192fe5		a5 2b 19 00 b1 2b 19 00 bd 2b 19 00 c9 2b 19 00
>192ff5		d5 2b 19 00 e1 2b 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>192ffd		ed 2b 19 00 f9 2b 19 00 05 2c 19 00 11 2c 19 00
>19300d		1d 2c 19 00 29 2c 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>193015		35 2c 19 00 41 2c 19 00 4d 2c 19 00 59 2c 19 00
>193025		65 2c 19 00 71 2c 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>19302d		7d 2c 19 00 89 2c 19 00 95 2c 19 00 a1 2c 19 00
>19303d		ad 2c 19 00 b9 2c 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>193045		c5 2c 19 00 d1 2c 19 00 dd 2c 19 00 e9 2c 19 00
>193055		f5 2c 19 00 01 2d 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>19305d		0d 2d 19 00 19 2d 19 00 25 2d 19 00 31 2d 19 00
>19306d		3d 2d 19 00 49 2d 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>193075		55 2d 19 00 61 2d 19 00 6d 2d 19 00 79 2d 19 00
>193085		85 2d 19 00 91 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>19308d		9d 2d 19 00 a9 2d 19 00 b5 2d 19 00 c1 2d 19 00
>19309d		cd 2d 19 00 d9 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>1930a5		e5 2d 19 00 f1 2d 19 00 fd 2d 19 00 09 2e 19 00
>1930b5		15 2e 19 00 21 2e 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>1930bd		2d 2e 19 00 39 2e 19 00 45 2e 19 00 51 2e 19 00
>1930cd		5d 2e 19 00 69 2e 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>1930d5		75 2e 19 00 81 2e 19 00 8d 2e 19 00 99 2e 19 00
>1930e5		a5 2e 19 00 b1 2e 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>1930ed		bd 2e 19 00 c9 2e 19 00 d5 2e 19 00 e1 2e 19 00
>1930fd		ed 2e 19 00 f9 2e 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>193105		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.19310d						IOPL2_TONE_TEST
.19310d		e2 20		sep #$20	                SEP #$20        ; set A short
.19310f		c2 10		rep #$10	                REP #$10        ; set X long
.193111		a2 00 00	ldx #$0000	                LDX #0
.193114						OPL2_TONE_TESTING_L1
.193114		bf 05 31 19	lda $193105,x	                LDA NOTE_INTRO, X
.193118		29 0f		and #$0f	                AND #$F
.19311a		85 30		sta $30		                STA OPL2_NOTE ; start at C
.19311c		bf 05 31 19	lda $193105,x	                LDA NOTE_INTRO, X
.193120		29 70		and #$70	                AND #$70
.193122		4a		lsr a		                LSR A
.193123		4a		lsr a		                LSR A
.193124		4a		lsr a		                LSR A
.193125		4a		lsr a		                LSR A
.193126		85 31		sta $31		                STA OPL2_OCTAVE
.193128		8a		txa		                TXA
.193129		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.19312b		85 27		sta $27		                STA OPL2_CHANNEL
.19312d		22 fd 32 19	jsl $1932fd	                JSL OPL2_PLAYNOTE
.193131		a0 00 00	ldy #$0000	                LDY #$0000
.193134						OPL2_TONE_TESTING_L2
.193134		ea		nop		                NOP
.193135		ea		nop		                NOP
.193136		ea		nop		                NOP
.193137		ea		nop		                NOP
.193138		c8		iny		                INY
.193139		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.19313c		d0 f6		bne $193134	                BNE OPL2_TONE_TESTING_L2
.19313e		e8		inx		                INX
.19313f		e0 08 00	cpx #$0008	                CPX #8
.193142		d0 d0		bne $193114	                BNE OPL2_TONE_TESTING_L1
.193144		6b		rtl		                RTL
.193145						OPL2_INIT
.193145		c2 20		rep #$20	                REP #$20        ; set A long
.193147		a9 00 00	lda #$0000	                LDA #$0000
.19314a		85 28		sta $28		                STA OPL2_REG_REGION
.19314c		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19314e		85 30		sta $30		                STA OPL2_NOTE
.193150		85 32		sta $32		                STA OPL2_PARAMETER0
.193152		85 34		sta $34		                STA OPL2_PARAMETER2
.193154		a9 cf 10	lda #$10cf	                LDA #<>INSTRUMENT_ACCORDN
.193157		85 50		sta $50		                STA RAD_ADDR
.193159		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.19315c		85 52		sta $52		                STA RAD_ADDR + 2
.19315e		e2 20		sep #$20	                SEP #$20        ; set A short
.193160		6b		rtl		                RTL
.193161						OPL2_Reset
.193161		6b		rtl		                RTL
.193162						OPL2_Get_FrequencyBlock
.193162		6b		rtl		                RTL
.193163						OPL2_GET_REGISTER
.193163		48		pha		                PHA             ; begin setdp macro
.193164		08		php		                PHP
.193165		c2 20		rep #$20	                REP #$20        ; set A long
.193167		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19316a		5b		tcd		                TCD
.19316b		28		plp		                PLP
.19316c		68		pla		                PLA             ; end setdp macro
.19316d		c2 20		rep #$20	                REP #$20        ; set A long
.19316f		18		clc		              CLC
.193170		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193173		65 32		adc $32		              ADC OPL2_PARAMETER0
.193175		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193177		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19317a		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19317c		e2 20		sep #$20	                SEP #$20        ; set A short
.19317e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193180		6b		rtl		              RTL
.193181						OPL2_GET_WAVEFORM_SELECT
.193181		48		pha		                PHA             ; begin setdp macro
.193182		08		php		                PHP
.193183		c2 20		rep #$20	                REP #$20        ; set A long
.193185		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193188		5b		tcd		                TCD
.193189		28		plp		                PLP
.19318a		68		pla		                PLA             ; end setdp macro
.19318b		c2 20		rep #$20	                REP #$20        ; set A long
.19318d		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193190		69 01 00	adc #$0001	              ADC #$0001
.193193		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193195		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193198		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19319a		e2 20		sep #$20	                SEP #$20        ; set A short
.19319c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19319e		29 20		and #$20	              AND #$20
.1931a0		6b		rtl		              RTL
.1931a1						OPL2_GET_SCALINGLEVEL
.1931a1		48		pha		                PHA             ; begin setdp macro
.1931a2		08		php		                PHP
.1931a3		c2 20		rep #$20	                REP #$20        ; set A long
.1931a5		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931a8		5b		tcd		                TCD
.1931a9		28		plp		                PLP
.1931aa		68		pla		                PLA             ; end setdp macro
.1931ab		c2 20		rep #$20	                REP #$20        ; set A long
.1931ad		a9 40 00	lda #$0040	              LDA #$0040  ;
.1931b0		85 28		sta $28		              STA OPL2_REG_REGION
.1931b2		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.1931b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1931b7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931b9		29 c0		and #$c0	              AND #$C0
.1931bb		4a		lsr a		              LSR A
.1931bc		4a		lsr a		              LSR A
.1931bd		4a		lsr a		              LSR A
.1931be		4a		lsr a		              LSR A
.1931bf		4a		lsr a		              LSR A
.1931c0		4a		lsr a		              LSR A
.1931c1		6b		rtl		              RTL
.1931c2						OPL2_GET_BLOCK
.1931c2		48		pha		                PHA             ; begin setdp macro
.1931c3		08		php		                PHP
.1931c4		c2 20		rep #$20	                REP #$20        ; set A long
.1931c6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931c9		5b		tcd		                TCD
.1931ca		28		plp		                PLP
.1931cb		68		pla		                PLA             ; end setdp macro
.1931cc		e2 20		sep #$20	                SEP #$20        ; set A short
.1931ce		18		clc		              CLC
.1931cf		a5 27		lda $27		              LDA OPL2_CHANNEL
.1931d1		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1931d3		69 b0		adc #$b0	              ADC #$B0
.1931d5		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1931d7		a9 00		lda #$00	              LDA #$00
.1931d9		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1931db		c2 30		rep #$30	                REP #$30        ; set A&X long
.1931dd		18		clc		              CLC
.1931de		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931e1		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1931e3		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1931e5		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1931e8		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1931ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1931ec		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931ee		29 1c		and #$1c	              AND #$1C
.1931f0		4a		lsr a		              LSR A
.1931f1		4a		lsr a		              LSR A
.1931f2		6b		rtl		              RTL
.1931f3						OPL2_GET_KEYON
.1931f3		48		pha		                PHA             ; begin setdp macro
.1931f4		08		php		                PHP
.1931f5		c2 20		rep #$20	                REP #$20        ; set A long
.1931f7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931fa		5b		tcd		                TCD
.1931fb		28		plp		                PLP
.1931fc		68		pla		                PLA             ; end setdp macro
.1931fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1931ff		18		clc		              CLC
.193200		a5 27		lda $27		              LDA OPL2_CHANNEL
.193202		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193204		69 b0		adc #$b0	              ADC #$B0
.193206		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193208		a9 00		lda #$00	              LDA #$00
.19320a		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19320c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19320e		18		clc		              CLC
.19320f		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193212		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193214		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193216		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193219		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19321b		e2 20		sep #$20	                SEP #$20        ; set A short
.19321d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19321f		29 20		and #$20	              AND #$20
.193221		6b		rtl		              RTL
.193222						OPL2_GET_FEEDBACK
.193222		48		pha		                PHA             ; begin setdp macro
.193223		08		php		                PHP
.193224		c2 20		rep #$20	                REP #$20        ; set A long
.193226		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193229		5b		tcd		                TCD
.19322a		28		plp		                PLP
.19322b		68		pla		                PLA             ; end setdp macro
.19322c		e2 20		sep #$20	                SEP #$20        ; set A short
.19322e		18		clc		              CLC
.19322f		a5 27		lda $27		              LDA OPL2_CHANNEL
.193231		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193233		69 c0		adc #$c0	              ADC #$C0
.193235		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193237		a9 00		lda #$00	              LDA #$00
.193239		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19323b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19323d		18		clc		              CLC
.19323e		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193241		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193243		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193245		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193248		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19324a		e2 20		sep #$20	                SEP #$20        ; set A short
.19324c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19324e		29 e0		and #$e0	              AND #$E0
.193250		4a		lsr a		              LSR
.193251		6b		rtl		              RTL
.193252						OPL2_GET_SYNTHMODE
.193252		48		pha		                PHA             ; begin setdp macro
.193253		08		php		                PHP
.193254		c2 20		rep #$20	                REP #$20        ; set A long
.193256		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193259		5b		tcd		                TCD
.19325a		28		plp		                PLP
.19325b		68		pla		                PLA             ; end setdp macro
.19325c		e2 20		sep #$20	                SEP #$20        ; set A short
.19325e		18		clc		              CLC
.19325f		a5 27		lda $27		              LDA OPL2_CHANNEL
.193261		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193263		69 c0		adc #$c0	              ADC #$C0
.193265		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193267		a9 00		lda #$00	              LDA #$00
.193269		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19326b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19326d		18		clc		              CLC
.19326e		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193271		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193273		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193275		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193278		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19327a		e2 20		sep #$20	                SEP #$20        ; set A short
.19327c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19327e		29 01		and #$01	              AND #$01
.193280		6b		rtl		              RTL
.193281						OPL2_GET_DEEPTREMOLO
.193281		48		pha		                PHA             ; begin setdp macro
.193282		08		php		                PHP
.193283		c2 20		rep #$20	                REP #$20        ; set A long
.193285		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193288		5b		tcd		                TCD
.193289		28		plp		                PLP
.19328a		68		pla		                PLA             ; end setdp macro
.19328b		c2 20		rep #$20	                REP #$20        ; set A long
.19328d		a9 bd 00	lda #$00bd	              LDA #$00BD;
.193290		85 28		sta $28		              STA OPL2_REG_REGION
.193292		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193295		e2 20		sep #$20	                SEP #$20        ; set A short
.193297		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193299		29 80		and #$80	              AND #$80
.19329b		6b		rtl		              RTL
.19329c						OPL2_GET_DEEPVIBRATO
.19329c		48		pha		                PHA             ; begin setdp macro
.19329d		08		php		                PHP
.19329e		c2 20		rep #$20	                REP #$20        ; set A long
.1932a0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932a3		5b		tcd		                TCD
.1932a4		28		plp		                PLP
.1932a5		68		pla		                PLA             ; end setdp macro
.1932a6		c2 20		rep #$20	                REP #$20        ; set A long
.1932a8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932ab		69 bd 00	adc #$00bd	              ADC #$00BD
.1932ae		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932b0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932b3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1932b7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932b9		29 40		and #$40	              AND #$40
.1932bb		6b		rtl		              RTL
.1932bc						OPL2_GET_PERCUSSION
.1932bc		48		pha		                PHA             ; begin setdp macro
.1932bd		08		php		                PHP
.1932be		c2 20		rep #$20	                REP #$20        ; set A long
.1932c0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932c3		5b		tcd		                TCD
.1932c4		28		plp		                PLP
.1932c5		68		pla		                PLA             ; end setdp macro
.1932c6		c2 20		rep #$20	                REP #$20        ; set A long
.1932c8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932cb		69 bd 00	adc #$00bd	              ADC #$00BD
.1932ce		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932d0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932d3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1932d7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932d9		29 20		and #$20	              AND #$20
.1932db		6b		rtl		              RTL
.1932dc						OPL2_GET_DRUMS
.1932dc		48		pha		                PHA             ; begin setdp macro
.1932dd		08		php		                PHP
.1932de		c2 20		rep #$20	                REP #$20        ; set A long
.1932e0		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932e3		5b		tcd		                TCD
.1932e4		28		plp		                PLP
.1932e5		68		pla		                PLA             ; end setdp macro
.1932e6		c2 20		rep #$20	                REP #$20        ; set A long
.1932e8		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932eb		69 bd 00	adc #$00bd	              ADC #$00BD
.1932ee		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932f0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932f3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1932f7		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932f9		29 1f		and #$1f	              AND #$1F
.1932fb		6b		rtl		              RTL
.1932fc						OPL2_Get_WaveForm
.1932fc		6b		rtl		                RTL
.1932fd						OPL2_PLAYNOTE
.1932fd		48		pha		                PHA             ; begin setdp macro
.1932fe		08		php		                PHP
.1932ff		c2 20		rep #$20	                REP #$20        ; set A long
.193301		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193304		5b		tcd		                TCD
.193305		28		plp		                PLP
.193306		68		pla		                PLA             ; end setdp macro
.193307		e2 20		sep #$20	                SEP #$20        ; set A short
.193309		da		phx		                PHX
.19330a		a9 00		lda #$00	                LDA #$00
.19330c		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.19330e		20 e5 38	jsr $1938e5	                JSR OPL2_SET_KEYON
.193311		20 aa 38	jsr $1938aa	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.193314		e2 10		sep #$10	                SEP #$10        ; set X short
.193316		a5 30		lda $30		                LDA OPL2_NOTE
.193318		3a		dec a		                DEC A
.193319		0a		asl a		                ASL A
.19331a		aa		tax		                TAX
.19331b		bf 94 10 19	lda $191094,x	                LDA @lnoteFNumbers,X
.19331f		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.193321		e8		inx		                INX
.193322		bf 94 10 19	lda $191094,x	                LDA @lnoteFNumbers,X
.193326		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.193328		22 28 38 19	jsl $193828	                JSL OPL2_SET_FNUMBER
.19332c		a9 01		lda #$01	                LDA #$01
.19332e		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193330		20 e5 38	jsr $1938e5	                JSR OPL2_SET_KEYON
.193333		c2 10		rep #$10	                REP #$10        ; set X long
.193335		fa		plx		                PLX
.193336		6b		rtl		                RTL
.193337						OPL2_PLAYDRUM
.193337		6b		rtl		                RTL
.193338						OPL2_SET_INSTRUMENT
.193338		48		pha		                PHA             ; begin setdp macro
.193339		08		php		                PHP
.19333a		c2 20		rep #$20	                REP #$20        ; set A long
.19333c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19333f		5b		tcd		                TCD
.193340		28		plp		                PLP
.193341		68		pla		                PLA             ; end setdp macro
.193342		38		sec		              SEC ; Set the WaveFormSelect to True
.193343		22 26 35 19	jsl $193526	              JSL OPL2_SET_WAVEFORMSELECT;
.193347		e2 20		sep #$20	                SEP #$20        ; set A short
.193349		c2 10		rep #$10	                REP #$10        ; set X long
.19334b		a0 00 00	ldy #$0000	              LDY #$0000
.19334e		a2 00 00	ldx #$0000	              LDX #$0000
.193351		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.193353		85 35		sta $35		              STA OPL2_PARAMETER3
.193355		c8		iny		              INY
.193356		c9 06		cmp #$06	              CMP #$06
.193358		d0 03		bne $19335d	              BNE PERCUSSION_NEXT07
.19335a		82 70 01	brl $1934cd	              BRL Percussion_6
.19335d						PERCUSSION_NEXT07
.19335d		c9 07		cmp #$07	              CMP #$07
.19335f		d0 03		bne $193364	              BNE PERCUSSION_NEXT08
.193361		82 44 01	brl $1934a8	              BRL Percussion_7
.193364						PERCUSSION_NEXT08
.193364		c9 08		cmp #$08	              CMP #$08
.193366		d0 03		bne $19336b	              BNE PERCUSSION_NEXT09
.193368		82 18 01	brl $193483	              BRL Percussion_8
.19336b						PERCUSSION_NEXT09
.19336b		c9 09		cmp #$09	              CMP #$09
.19336d		d0 03		bne $193372	              BNE PERCUSSION_NEXT0A
.19336f		82 ec 00	brl $19345e	              BRL Percussion_9
.193372						PERCUSSION_NEXT0A
.193372		c9 0a		cmp #$0a	              CMP #$0A
.193374		d0 03		bne $193379	              BNE Percussion_Default
.193376		82 c0 00	brl $193439	              BRL Percussion_A
.193379						Percussion_Default
.193379		a9 00		lda #$00	              LDA #$00
.19337b		85 26		sta $26		              STA OPL2_OPERATOR
.19337d		c2 20		rep #$20	                REP #$20        ; set A long
.19337f		a9 20 00	lda #$0020	              LDA #$0020;
.193382		85 28		sta $28		              STA OPL2_REG_REGION
.193384		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193387		e2 20		sep #$20	                SEP #$20        ; set A short
.193389		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19338b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19338d		c8		iny		              INY
.19338e		c2 20		rep #$20	                REP #$20        ; set A long
.193390		a9 40 00	lda #$0040	              LDA #$0040;
.193393		85 28		sta $28		              STA OPL2_REG_REGION
.193395		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193398		e2 20		sep #$20	                SEP #$20        ; set A short
.19339a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19339c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19339e		c8		iny		              INY
.19339f		c2 20		rep #$20	                REP #$20        ; set A long
.1933a1		a9 60 00	lda #$0060	              LDA #$0060;
.1933a4		85 28		sta $28		              STA OPL2_REG_REGION
.1933a6		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.1933a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1933ab		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1933ad		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933af		c8		iny		              INY
.1933b0		c2 20		rep #$20	                REP #$20        ; set A long
.1933b2		a9 80 00	lda #$0080	              LDA #$0080;
.1933b5		85 28		sta $28		              STA OPL2_REG_REGION
.1933b7		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.1933ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1933bc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1933be		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933c0		c8		iny		              INY
.1933c1		c2 20		rep #$20	                REP #$20        ; set A long
.1933c3		a9 e0 00	lda #$00e0	              LDA #$00E0;
.1933c6		85 28		sta $28		              STA OPL2_REG_REGION
.1933c8		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.1933cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1933cd		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1933cf		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933d1		c8		iny		              INY
.1933d2		e2 10		sep #$10	                SEP #$10        ; set X short
.1933d4		a5 27		lda $27		              LDA OPL2_CHANNEL
.1933d6		29 0f		and #$0f	              AND #$0F
.1933d8		aa		tax		              TAX
.1933d9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.1933db		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.1933df		c8		iny		              INY
.1933e0		a9 01		lda #$01	              LDA #$01
.1933e2		85 26		sta $26		              STA OPL2_OPERATOR
.1933e4		c2 20		rep #$20	                REP #$20        ; set A long
.1933e6		a9 20 00	lda #$0020	              LDA #$0020;
.1933e9		85 28		sta $28		              STA OPL2_REG_REGION
.1933eb		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.1933ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1933f0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.1933f2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933f4		c8		iny		              INY
.1933f5		c2 20		rep #$20	                REP #$20        ; set A long
.1933f7		a9 40 00	lda #$0040	              LDA #$0040;
.1933fa		85 28		sta $28		              STA OPL2_REG_REGION
.1933fc		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.1933ff		e2 20		sep #$20	                SEP #$20        ; set A short
.193401		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.193403		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193405		c8		iny		              INY
.193406		c2 20		rep #$20	                REP #$20        ; set A long
.193408		a9 60 00	lda #$0060	              LDA #$0060;
.19340b		85 28		sta $28		              STA OPL2_REG_REGION
.19340d		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193410		e2 20		sep #$20	                SEP #$20        ; set A short
.193412		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.193414		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193416		c8		iny		              INY
.193417		c2 20		rep #$20	                REP #$20        ; set A long
.193419		a9 80 00	lda #$0080	              LDA #$0080;
.19341c		85 28		sta $28		              STA OPL2_REG_REGION
.19341e		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193421		e2 20		sep #$20	                SEP #$20        ; set A short
.193423		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.193425		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193427		c8		iny		              INY
.193428		c2 20		rep #$20	                REP #$20        ; set A long
.19342a		a9 e0 00	lda #$00e0	              LDA #$00E0;
.19342d		85 28		sta $28		              STA OPL2_REG_REGION
.19342f		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193432		e2 20		sep #$20	                SEP #$20        ; set A short
.193434		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.193436		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193438		6b		rtl		                RTL
.193439						Percussion_A
.193439		e2 20		sep #$20	                SEP #$20        ; set A short
.19343b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19343d		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.193441		c8		iny		              INY
.193442		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193444		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.193448		c8		iny		              INY
.193449		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.19344b		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.19344f		c8		iny		              INY
.193450		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193452		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.193456		c8		iny		              INY
.193457		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193459		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.19345d		6b		rtl		                RTL
.19345e						Percussion_9
.19345e		e2 20		sep #$20	                SEP #$20        ; set A short
.193460		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193462		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.193466		c8		iny		              INY
.193467		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.193469		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.19346d		c8		iny		              INY
.19346e		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193470		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.193474		c8		iny		              INY
.193475		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193477		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.19347b		c8		iny		              INY
.19347c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19347e		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.193482		6b		rtl		              RTL
.193483						Percussion_8
.193483		e2 20		sep #$20	                SEP #$20        ; set A short
.193485		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193487		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.19348b		c8		iny		              INY
.19348c		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19348e		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.193492		c8		iny		              INY
.193493		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193495		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.193499		c8		iny		              INY
.19349a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19349c		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.1934a0		c8		iny		              INY
.1934a1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934a3		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.1934a7		6b		rtl		              RTL
.1934a8						Percussion_7
.1934a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1934aa		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934ac		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.1934b0		c8		iny		              INY
.1934b1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934b3		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.1934b7		c8		iny		              INY
.1934b8		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934ba		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.1934be		c8		iny		              INY
.1934bf		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934c1		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.1934c5		c8		iny		              INY
.1934c6		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934c8		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.1934cc		6b		rtl		              RTL
.1934cd						Percussion_6
.1934cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1934cf		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934d1		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.1934d5		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.1934d9		c8		iny		              INY
.1934da		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934dc		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.1934e0		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.1934e4		c8		iny		              INY
.1934e5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934e7		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.1934eb		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.1934ef		c8		iny		              INY
.1934f0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934f2		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.1934f6		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.1934fa		c8		iny		              INY
.1934fb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934fd		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.193501		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.193505		6b		rtl		              RTL
.193506						OPL2_SET_REGISTER
.193506		48		pha		                PHA             ; begin setdp macro
.193507		08		php		                PHP
.193508		c2 20		rep #$20	                REP #$20        ; set A long
.19350a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19350d		5b		tcd		                TCD
.19350e		28		plp		                PLP
.19350f		68		pla		                PLA             ; end setdp macro
.193510		c2 20		rep #$20	                REP #$20        ; set A long
.193512		18		clc		              CLC
.193513		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193516		65 32		adc $32		              ADC OPL2_PARAMETER0
.193518		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19351a		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19351d		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19351f		e2 20		sep #$20	                SEP #$20        ; set A short
.193521		a5 33		lda $33		              LDA OPL2_PARAMETER1
.193523		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193525		6b		rtl		              RTL
.193526						OPL2_SET_WAVEFORMSELECT
.193526		48		pha		                PHA             ; begin setdp macro
.193527		08		php		                PHP
.193528		c2 20		rep #$20	                REP #$20        ; set A long
.19352a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19352d		5b		tcd		                TCD
.19352e		28		plp		                PLP
.19352f		68		pla		                PLA             ; end setdp macro
.193530		c2 20		rep #$20	                REP #$20        ; set A long
.193532		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.193535		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193537		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19353a		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19353c		e2 20		sep #$20	                SEP #$20        ; set A short
.19353e		b0 07		bcs $193547	              BCS OPL2_Set_WaveFormSelect_set
.193540		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193542		29 df		and #$df	              AND #$DF
.193544		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193546		6b		rtl		              RTL
.193547						OPL2_Set_WaveFormSelect_set
.193547		48		pha		                PHA             ; begin setdp macro
.193548		08		php		                PHP
.193549		c2 20		rep #$20	                REP #$20        ; set A long
.19354b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19354e		5b		tcd		                TCD
.19354f		28		plp		                PLP
.193550		68		pla		                PLA             ; end setdp macro
.193551		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193553		09 20 00	ora #$0020	              ORA #$20
.193556		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193558		6b		rtl		                RTL
.193559						OPL2_SET_TREMOLO
.193559		48		pha		                PHA             ; begin setdp macro
.19355a		08		php		                PHP
.19355b		c2 20		rep #$20	                REP #$20        ; set A long
.19355d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193560		5b		tcd		                TCD
.193561		28		plp		                PLP
.193562		68		pla		                PLA             ; end setdp macro
.193563		08		php		                PHP ; Push the Carry
.193564		c2 20		rep #$20	                REP #$20        ; set A long
.193566		18		clc		                CLC
.193567		a9 20 00	lda #$0020	                LDA #$0020 ;
.19356a		85 28		sta $28		                STA OPL2_REG_REGION
.19356c		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.19356f		28		plp		                PLP ; Pull the Carry out
.193570		e2 20		sep #$20	                SEP #$20        ; set A short
.193572		b0 08		bcs $19357c	                BCS OPL2_Set_Tremolo_Set;
.193574		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193576		29 7f		and #$7f	                AND #$7F
.193578		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19357a		80 06		bra $193582	                BRA OPL2_Set_Tremolo_Exit
.19357c						OPL2_Set_Tremolo_Set
.19357c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19357e		09 80		ora #$80	                ORA #$80
.193580		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193582						OPL2_Set_Tremolo_Exit
.193582		6b		rtl		                RTL
.193583						OPL2_GET_TREMOLO
.193583		48		pha		                PHA             ; begin setdp macro
.193584		08		php		                PHP
.193585		c2 20		rep #$20	                REP #$20        ; set A long
.193587		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19358a		5b		tcd		                TCD
.19358b		28		plp		                PLP
.19358c		68		pla		                PLA             ; end setdp macro
.19358d		c2 20		rep #$20	                REP #$20        ; set A long
.19358f		a9 20 00	lda #$0020	                LDA #$0020;
.193592		85 28		sta $28		                STA OPL2_REG_REGION
.193594		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.193597		e2 20		sep #$20	                SEP #$20        ; set A short
.193599		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19359b		29 80		and #$80	                AND #$80
.19359d		6b		rtl		                RTL
.19359e						OPL2_SET_VIBRATO
.19359e		48		pha		                PHA             ; begin setdp macro
.19359f		08		php		                PHP
.1935a0		c2 20		rep #$20	                REP #$20        ; set A long
.1935a2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935a5		5b		tcd		                TCD
.1935a6		28		plp		                PLP
.1935a7		68		pla		                PLA             ; end setdp macro
.1935a8		08		php		                PHP ; Push the Carry
.1935a9		c2 20		rep #$20	                REP #$20        ; set A long
.1935ab		18		clc		                CLC
.1935ac		a9 20 00	lda #$0020	                LDA #$0020;
.1935af		85 28		sta $28		                STA OPL2_REG_REGION
.1935b1		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.1935b4		28		plp		                PLP ; Pull the Carry out
.1935b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1935b7		b0 08		bcs $1935c1	                BCS OPL2_Set_Vibrato_Set;
.1935b9		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935bb		29 bf		and #$bf	                AND #$BF
.1935bd		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935bf		80 06		bra $1935c7	                BRA OPL2_Set_Vibrato_Exit
.1935c1						OPL2_Set_Vibrato_Set
.1935c1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935c3		09 40		ora #$40	                ORA #$40
.1935c5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935c7						OPL2_Set_Vibrato_Exit
.1935c7		6b		rtl		                RTL
.1935c8						OPL2_GET_VIBRATO
.1935c8		48		pha		                PHA             ; begin setdp macro
.1935c9		08		php		                PHP
.1935ca		c2 20		rep #$20	                REP #$20        ; set A long
.1935cc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935cf		5b		tcd		                TCD
.1935d0		28		plp		                PLP
.1935d1		68		pla		                PLA             ; end setdp macro
.1935d2		c2 20		rep #$20	                REP #$20        ; set A long
.1935d4		a9 20 00	lda #$0020	                LDA #$0020;
.1935d7		85 28		sta $28		                STA OPL2_REG_REGION
.1935d9		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.1935dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1935de		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935e0		29 40		and #$40	                AND #$40
.1935e2		6b		rtl		                RTL
.1935e3						OPL2_SET_MAINTAINSUSTAIN
.1935e3		48		pha		                PHA             ; begin setdp macro
.1935e4		08		php		                PHP
.1935e5		c2 20		rep #$20	                REP #$20        ; set A long
.1935e7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935ea		5b		tcd		                TCD
.1935eb		28		plp		                PLP
.1935ec		68		pla		                PLA             ; end setdp macro
.1935ed		08		php		              PHP ; Push the Carry
.1935ee		c2 20		rep #$20	                REP #$20        ; set A long
.1935f0		18		clc		              CLC
.1935f1		a9 20 00	lda #$0020	              LDA #$0020;
.1935f4		85 28		sta $28		              STA OPL2_REG_REGION
.1935f6		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.1935f9		28		plp		              PLP ; Pull the Carry out
.1935fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1935fc		b0 08		bcs $193606	              BCS OPL2_Set_MaintainSustain_Set;
.1935fe		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193600		29 df		and #$df	              AND #$DF
.193602		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193604		80 06		bra $19360c	              BRA OPL2_Set_MaintainSustain_Exit
.193606						OPL2_Set_MaintainSustain_Set
.193606		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193608		09 20		ora #$20	              ORA #$20
.19360a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19360c						OPL2_Set_MaintainSustain_Exit
.19360c		6b		rtl		                RTL
.19360d						OPL2_GET_MAINTAINSUSTAIN
.19360d		48		pha		                PHA             ; begin setdp macro
.19360e		08		php		                PHP
.19360f		c2 20		rep #$20	                REP #$20        ; set A long
.193611		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193614		5b		tcd		                TCD
.193615		28		plp		                PLP
.193616		68		pla		                PLA             ; end setdp macro
.193617		c2 20		rep #$20	                REP #$20        ; set A long
.193619		a9 20 00	lda #$0020	              LDA #$0020;
.19361c		85 28		sta $28		              STA OPL2_REG_REGION
.19361e		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193621		e2 20		sep #$20	                SEP #$20        ; set A short
.193623		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193625		29 20		and #$20	              AND #$20
.193627		6b		rtl		                RTL
.193628						OPL2_SET_ENVELOPESCALING
.193628		48		pha		                PHA             ; begin setdp macro
.193629		08		php		                PHP
.19362a		c2 20		rep #$20	                REP #$20        ; set A long
.19362c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19362f		5b		tcd		                TCD
.193630		28		plp		                PLP
.193631		68		pla		                PLA             ; end setdp macro
.193632		08		php		              PHP ; Push the Carry
.193633		c2 20		rep #$20	                REP #$20        ; set A long
.193635		18		clc		              CLC
.193636		a9 20 00	lda #$0020	              LDA #$0020;
.193639		85 28		sta $28		              STA OPL2_REG_REGION
.19363b		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.19363e		28		plp		              PLP ; Pull the Carry out
.19363f		e2 20		sep #$20	                SEP #$20        ; set A short
.193641		b0 08		bcs $19364b	              BCS OPL2_Set_EnvelopeScaling_Set;
.193643		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193645		29 ef		and #$ef	              AND #$EF
.193647		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193649		80 06		bra $193651	              BRA OPL2_Set_EnvelopeScaling_Exit
.19364b						OPL2_Set_EnvelopeScaling_Set
.19364b		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19364d		09 10		ora #$10	              ORA #$10
.19364f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193651						OPL2_Set_EnvelopeScaling_Exit
.193651		6b		rtl		                RTL
.193652						OPL2_GET_ENVELOPESCALING
.193652		48		pha		                PHA             ; begin setdp macro
.193653		08		php		                PHP
.193654		c2 20		rep #$20	                REP #$20        ; set A long
.193656		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193659		5b		tcd		                TCD
.19365a		28		plp		                PLP
.19365b		68		pla		                PLA             ; end setdp macro
.19365c		c2 20		rep #$20	                REP #$20        ; set A long
.19365e		a9 20 00	lda #$0020	              LDA #$0020;
.193661		85 28		sta $28		              STA OPL2_REG_REGION
.193663		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193666		e2 20		sep #$20	                SEP #$20        ; set A short
.193668		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19366a		29 10		and #$10	              AND #$10
.19366c		6b		rtl		                RTL
.19366d						OPL2_GET_MODFREQMULTIPLE
.19366d		48		pha		                PHA             ; begin setdp macro
.19366e		08		php		                PHP
.19366f		c2 20		rep #$20	                REP #$20        ; set A long
.193671		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193674		5b		tcd		                TCD
.193675		28		plp		                PLP
.193676		68		pla		                PLA             ; end setdp macro
.193677		c2 20		rep #$20	                REP #$20        ; set A long
.193679		a9 20 00	lda #$0020	              LDA #$0020;
.19367c		85 28		sta $28		              STA OPL2_REG_REGION
.19367e		20 64 3a	jsr $193a64	              JSR OPL2_GET_REG_OFFSET
.193681		e2 20		sep #$20	                SEP #$20        ; set A short
.193683		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193685		29 0f		and #$0f	              AND #$0F
.193687		6b		rtl		              RTL
.193688						OPL2_SET_MODFREQMULTIPLE
.193688		48		pha		                PHA             ; begin setdp macro
.193689		08		php		                PHP
.19368a		c2 20		rep #$20	                REP #$20        ; set A long
.19368c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19368f		5b		tcd		                TCD
.193690		28		plp		                PLP
.193691		68		pla		                PLA             ; end setdp macro
.193692		c2 20		rep #$20	                REP #$20        ; set A long
.193694		a9 20 00	lda #$0020	                LDA #$0020;
.193697		85 28		sta $28		                STA OPL2_REG_REGION
.193699		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.19369c		e2 20		sep #$20	                SEP #$20        ; set A short
.19369e		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1936a0		29 0f		and #$0f	                AND #$0F
.1936a2		85 32		sta $32		                STA OPL2_PARAMETER0
.1936a4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936a6		29 f0		and #$f0	                AND #$F0
.1936a8		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936aa		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936ac		6b		rtl		                RTL
.1936ad						OPL2_SET_SCALINGLEVEL
.1936ad		48		pha		                PHA             ; begin setdp macro
.1936ae		08		php		                PHP
.1936af		c2 20		rep #$20	                REP #$20        ; set A long
.1936b1		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936b4		5b		tcd		                TCD
.1936b5		28		plp		                PLP
.1936b6		68		pla		                PLA             ; end setdp macro
.1936b7		c2 20		rep #$20	                REP #$20        ; set A long
.1936b9		a9 40 00	lda #$0040	                LDA #$0040;
.1936bc		85 28		sta $28		                STA OPL2_REG_REGION
.1936be		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.1936c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1936c3		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1936c5		29 03		and #$03	                AND #$03
.1936c7		0a		asl a		                ASL
.1936c8		0a		asl a		                ASL
.1936c9		0a		asl a		                ASL
.1936ca		0a		asl a		                ASL
.1936cb		0a		asl a		                ASL
.1936cc		0a		asl a		                ASL
.1936cd		85 32		sta $32		                STA OPL2_PARAMETER0
.1936cf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936d1		29 3f		and #$3f	                AND #$3F
.1936d3		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936d5		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936d7		6b		rtl		                RTL
.1936d8						OPL2_SET_VOLUME
.1936d8		48		pha		                PHA             ; begin setdp macro
.1936d9		08		php		                PHP
.1936da		c2 20		rep #$20	                REP #$20        ; set A long
.1936dc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936df		5b		tcd		                TCD
.1936e0		28		plp		                PLP
.1936e1		68		pla		                PLA             ; end setdp macro
.1936e2		c2 20		rep #$20	                REP #$20        ; set A long
.1936e4		a9 40 00	lda #$0040	                LDA #$0040  ;
.1936e7		85 28		sta $28		                STA OPL2_REG_REGION
.1936e9		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.1936ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1936ee		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.1936f0		29 3f		and #$3f	                AND #$3F
.1936f2		85 32		sta $32		                STA OPL2_PARAMETER0
.1936f4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936f6		29 c0		and #$c0	                AND #$C0
.1936f8		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936fa		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936fc		6b		rtl		                RTL
.1936fd						OPL2_GET_VOLUME
.1936fd		48		pha		                PHA             ; begin setdp macro
.1936fe		08		php		                PHP
.1936ff		c2 20		rep #$20	                REP #$20        ; set A long
.193701		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193704		5b		tcd		                TCD
.193705		28		plp		                PLP
.193706		68		pla		                PLA             ; end setdp macro
.193707		c2 20		rep #$20	                REP #$20        ; set A long
.193709		a9 40 00	lda #$0040	                LDA #$0040  ;
.19370c		85 28		sta $28		                STA OPL2_REG_REGION
.19370e		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.193711		e2 20		sep #$20	                SEP #$20        ; set A short
.193713		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193715		29 3f		and #$3f	                AND #$3F
.193717		6b		rtl		                RTL
.193718						OPL2_SET_ATTACK
.193718		48		pha		                PHA             ; begin setdp macro
.193719		08		php		                PHP
.19371a		c2 20		rep #$20	                REP #$20        ; set A long
.19371c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19371f		5b		tcd		                TCD
.193720		28		plp		                PLP
.193721		68		pla		                PLA             ; end setdp macro
.193722		c2 20		rep #$20	                REP #$20        ; set A long
.193724		a9 60 00	lda #$0060	                LDA #$0060  ;
.193727		85 28		sta $28		                STA OPL2_REG_REGION
.193729		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.19372c		e2 20		sep #$20	                SEP #$20        ; set A short
.19372e		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193730		29 0f		and #$0f	                AND #$0F
.193732		0a		asl a		                ASL
.193733		0a		asl a		                ASL
.193734		0a		asl a		                ASL
.193735		0a		asl a		                ASL
.193736		85 32		sta $32		                STA OPL2_PARAMETER0
.193738		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19373a		29 0f		and #$0f	                AND #$0F
.19373c		05 32		ora $32		                ORA OPL2_PARAMETER0
.19373e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193740		6b		rtl		                RTL
.193741						OPL2_GET_ATTACK
.193741		48		pha		                PHA             ; begin setdp macro
.193742		08		php		                PHP
.193743		c2 20		rep #$20	                REP #$20        ; set A long
.193745		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193748		5b		tcd		                TCD
.193749		28		plp		                PLP
.19374a		68		pla		                PLA             ; end setdp macro
.19374b		c2 20		rep #$20	                REP #$20        ; set A long
.19374d		a9 60 00	lda #$0060	                LDA #$0060
.193750		85 28		sta $28		                STA OPL2_REG_REGION
.193752		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.193755		e2 20		sep #$20	                SEP #$20        ; set A short
.193757		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193759		29 f0		and #$f0	                AND #$F0
.19375b		4a		lsr a		                LSR
.19375c		4a		lsr a		                LSR
.19375d		4a		lsr a		                LSR
.19375e		4a		lsr a		                LSR
.19375f		6b		rtl		                RTL
.193760						OPL2_SET_DECAY
.193760		48		pha		                PHA             ; begin setdp macro
.193761		08		php		                PHP
.193762		c2 20		rep #$20	                REP #$20        ; set A long
.193764		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193767		5b		tcd		                TCD
.193768		28		plp		                PLP
.193769		68		pla		                PLA             ; end setdp macro
.19376a		c2 20		rep #$20	                REP #$20        ; set A long
.19376c		a9 60 00	lda #$0060	                LDA #$0060;
.19376f		85 28		sta $28		                STA OPL2_REG_REGION
.193771		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.193774		e2 20		sep #$20	                SEP #$20        ; set A short
.193776		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193778		29 0f		and #$0f	                AND #$0F
.19377a		85 32		sta $32		                STA OPL2_PARAMETER0
.19377c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19377e		29 f0		and #$f0	                AND #$F0
.193780		05 32		ora $32		                ORA OPL2_PARAMETER0
.193782		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193784		6b		rtl		                RTL
.193785						OPL2_GET_DECAY
.193785		48		pha		                PHA             ; begin setdp macro
.193786		08		php		                PHP
.193787		c2 20		rep #$20	                REP #$20        ; set A long
.193789		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19378c		5b		tcd		                TCD
.19378d		28		plp		                PLP
.19378e		68		pla		                PLA             ; end setdp macro
.19378f		c2 20		rep #$20	                REP #$20        ; set A long
.193791		a9 60 00	lda #$0060	                LDA #$0060
.193794		85 28		sta $28		                STA OPL2_REG_REGION
.193796		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.193799		e2 20		sep #$20	                SEP #$20        ; set A short
.19379b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19379d		29 0f		and #$0f	                AND #$0F
.19379f		6b		rtl		                RTL
.1937a0						OPL2_SET_SUSTAIN
.1937a0		48		pha		                PHA             ; begin setdp macro
.1937a1		08		php		                PHP
.1937a2		c2 20		rep #$20	                REP #$20        ; set A long
.1937a4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937a7		5b		tcd		                TCD
.1937a8		28		plp		                PLP
.1937a9		68		pla		                PLA             ; end setdp macro
.1937aa		c2 20		rep #$20	                REP #$20        ; set A long
.1937ac		a9 80 00	lda #$0080	                LDA #$0080;
.1937af		85 28		sta $28		                STA OPL2_REG_REGION
.1937b1		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.1937b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1937b6		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1937b8		29 0f		and #$0f	                AND #$0F
.1937ba		0a		asl a		                ASL
.1937bb		0a		asl a		                ASL
.1937bc		0a		asl a		                ASL
.1937bd		0a		asl a		                ASL
.1937be		85 32		sta $32		                STA OPL2_PARAMETER0
.1937c0		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937c2		29 0f		and #$0f	                AND #$0F
.1937c4		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937c6		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937c8		6b		rtl		                RTL
.1937c9						OPL2_GET_SUSTAIN
.1937c9		48		pha		                PHA             ; begin setdp macro
.1937ca		08		php		                PHP
.1937cb		c2 20		rep #$20	                REP #$20        ; set A long
.1937cd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937d0		5b		tcd		                TCD
.1937d1		28		plp		                PLP
.1937d2		68		pla		                PLA             ; end setdp macro
.1937d3		c2 20		rep #$20	                REP #$20        ; set A long
.1937d5		a9 80 00	lda #$0080	                LDA #$0080
.1937d8		85 28		sta $28		                STA OPL2_REG_REGION
.1937da		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.1937dd		e2 20		sep #$20	                SEP #$20        ; set A short
.1937df		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937e1		29 f0		and #$f0	                AND #$F0
.1937e3		4a		lsr a		                LSR
.1937e4		4a		lsr a		                LSR
.1937e5		4a		lsr a		                LSR
.1937e6		4a		lsr a		                LSR
.1937e7		6b		rtl		                RTL
.1937e8						OPL2_SET_RELEASE
.1937e8		48		pha		                PHA             ; begin setdp macro
.1937e9		08		php		                PHP
.1937ea		c2 20		rep #$20	                REP #$20        ; set A long
.1937ec		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937ef		5b		tcd		                TCD
.1937f0		28		plp		                PLP
.1937f1		68		pla		                PLA             ; end setdp macro
.1937f2		c2 20		rep #$20	                REP #$20        ; set A long
.1937f4		a9 80 00	lda #$0080	                LDA #$0080;
.1937f7		85 28		sta $28		                STA OPL2_REG_REGION
.1937f9		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.1937fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1937fe		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193800		29 0f		and #$0f	                AND #$0F
.193802		85 32		sta $32		                STA OPL2_PARAMETER0
.193804		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193806		29 f0		and #$f0	                AND #$F0
.193808		05 32		ora $32		                ORA OPL2_PARAMETER0
.19380a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19380c		6b		rtl		                RTL
.19380d						OPL2_GET_RELEASE
.19380d		48		pha		                PHA             ; begin setdp macro
.19380e		08		php		                PHP
.19380f		c2 20		rep #$20	                REP #$20        ; set A long
.193811		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193814		5b		tcd		                TCD
.193815		28		plp		                PLP
.193816		68		pla		                PLA             ; end setdp macro
.193817		c2 20		rep #$20	                REP #$20        ; set A long
.193819		a9 80 00	lda #$0080	                LDA #$0080
.19381c		85 28		sta $28		                STA OPL2_REG_REGION
.19381e		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.193821		e2 20		sep #$20	                SEP #$20        ; set A short
.193823		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193825		29 0f		and #$0f	                AND #$0F
.193827		6b		rtl		                RTL
.193828						OPL2_SET_FNUMBER
.193828		48		pha		                PHA             ; begin setdp macro
.193829		08		php		                PHP
.19382a		c2 20		rep #$20	                REP #$20        ; set A long
.19382c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19382f		5b		tcd		                TCD
.193830		28		plp		                PLP
.193831		68		pla		                PLA             ; end setdp macro
.193832		e2 20		sep #$20	                SEP #$20        ; set A short
.193834		18		clc		                CLC
.193835		a5 27		lda $27		                LDA OPL2_CHANNEL
.193837		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193839		69 a0		adc #$a0	                ADC #$A0
.19383b		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.19383d		a9 00		lda #$00	                LDA #$00
.19383f		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193841		c2 30		rep #$30	                REP #$30        ; set A&X long
.193843		18		clc		                CLC
.193844		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193847		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193849		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19384b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.19384e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193850		e2 20		sep #$20	                SEP #$20        ; set A short
.193852		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.193854		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.193856		18		clc		                CLC
.193857		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.193859		69 10		adc #$10	                ADC #$10
.19385b		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19385d		a5 33		lda $33		                LDA OPL2_PARAMETER1
.19385f		29 03		and #$03	                AND #$03
.193861		85 33		sta $33		                STA OPL2_PARAMETER1
.193863		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193865		29 fc		and #$fc	                AND #$FC
.193867		05 33		ora $33		                ORA OPL2_PARAMETER1
.193869		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19386b		6b		rtl		                RTL
.19386c						OPL2_GET_FNUMBER
.19386c		48		pha		                PHA             ; begin setdp macro
.19386d		08		php		                PHP
.19386e		c2 20		rep #$20	                REP #$20        ; set A long
.193870		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193873		5b		tcd		                TCD
.193874		28		plp		                PLP
.193875		68		pla		                PLA             ; end setdp macro
.193876		e2 20		sep #$20	                SEP #$20        ; set A short
.193878		18		clc		                CLC
.193879		a5 27		lda $27		                LDA OPL2_CHANNEL
.19387b		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19387d		69 a0		adc #$a0	                ADC #$A0
.19387f		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193881		a9 00		lda #$00	                LDA #$00
.193883		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193885		c2 30		rep #$30	                REP #$30        ; set A&X long
.193887		18		clc		                CLC
.193888		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19388b		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19388d		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19388f		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193892		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193894		e2 20		sep #$20	                SEP #$20        ; set A short
.193896		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193898		85 32		sta $32		                STA OPL2_PARAMETER0
.19389a		18		clc		                CLC
.19389b		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.19389d		69 10		adc #$10	                ADC #$10
.19389f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938a1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938a3		29 03		and #$03	                AND #$03
.1938a5		85 33		sta $33		                STA OPL2_PARAMETER1
.1938a7		6b		rtl		                RTL
.1938a8						OPL2_Set_Frequency
.1938a8		6b		rtl		                RTL
.1938a9						OPL2_Get_Frequency
.1938a9		6b		rtl		                RTL
.1938aa						OPL2_SET_BLOCK
.1938aa		48		pha		                PHA             ; begin setdp macro
.1938ab		08		php		                PHP
.1938ac		c2 20		rep #$20	                REP #$20        ; set A long
.1938ae		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938b1		5b		tcd		                TCD
.1938b2		28		plp		                PLP
.1938b3		68		pla		                PLA             ; end setdp macro
.1938b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1938b6		18		clc		                CLC
.1938b7		a5 27		lda $27		                LDA OPL2_CHANNEL
.1938b9		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1938bb		69 b0		adc #$b0	                ADC #$B0
.1938bd		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1938bf		a9 00		lda #$00	                LDA #$00
.1938c1		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1938c3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1938c5		18		clc		                CLC
.1938c6		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1938c9		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1938cb		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938cd		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938d0		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938d2		e2 20		sep #$20	                SEP #$20        ; set A short
.1938d4		a5 31		lda $31		                LDA OPL2_OCTAVE
.1938d6		29 07		and #$07	                AND #$07
.1938d8		0a		asl a		                ASL
.1938d9		0a		asl a		                ASL
.1938da		85 31		sta $31		                STA OPL2_OCTAVE
.1938dc		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938de		29 e3		and #$e3	                AND #$E3
.1938e0		05 31		ora $31		                ORA OPL2_OCTAVE
.1938e2		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938e4		60		rts		                RTS
.1938e5						OPL2_SET_KEYON
.1938e5		48		pha		                PHA             ; begin setdp macro
.1938e6		08		php		                PHP
.1938e7		c2 20		rep #$20	                REP #$20        ; set A long
.1938e9		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938ec		5b		tcd		                TCD
.1938ed		28		plp		                PLP
.1938ee		68		pla		                PLA             ; end setdp macro
.1938ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1938f1		18		clc		                CLC
.1938f2		a5 27		lda $27		                LDA OPL2_CHANNEL
.1938f4		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1938f6		69 b0		adc #$b0	                ADC #$B0
.1938f8		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1938fa		a9 00		lda #$00	                LDA #$00
.1938fc		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1938fe		c2 30		rep #$30	                REP #$30        ; set A&X long
.193900		18		clc		                CLC
.193901		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193904		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193906		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193908		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.19390b		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.19390d		e2 20		sep #$20	                SEP #$20        ; set A short
.19390f		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193911		29 01		and #$01	                AND #$01
.193913		f0 02		beq $193917	                BEQ SET_KEYON_OFF
.193915		a9 20		lda #$20	                LDA #$20
.193917						    SET_KEYON_OFF
.193917		85 32		sta $32		                STA OPL2_PARAMETER0
.193919		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19391b		29 df		and #$df	                AND #$DF
.19391d		05 32		ora $32		                ORA OPL2_PARAMETER0
.19391f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193921		60		rts		                RTS
.193922						OPL2_SET_FEEDBACK
.193922		48		pha		                PHA             ; begin setdp macro
.193923		08		php		                PHP
.193924		c2 20		rep #$20	                REP #$20        ; set A long
.193926		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193929		5b		tcd		                TCD
.19392a		28		plp		                PLP
.19392b		68		pla		                PLA             ; end setdp macro
.19392c		e2 20		sep #$20	                SEP #$20        ; set A short
.19392e		18		clc		              CLC
.19392f		a5 27		lda $27		              LDA OPL2_CHANNEL
.193931		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193933		69 c0		adc #$c0	              ADC #$C0
.193935		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193937		a9 00		lda #$00	              LDA #$00
.193939		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19393b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19393d		18		clc		              CLC
.19393e		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193941		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193943		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193945		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193948		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19394a		e2 20		sep #$20	                SEP #$20        ; set A short
.19394c		a5 32		lda $32		              LDA OPL2_PARAMETER0
.19394e		29 07		and #$07	              AND #$07
.193950		0a		asl a		              ASL
.193951		85 32		sta $32		              STA OPL2_PARAMETER0
.193953		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193955		29 01		and #$01	              AND #$01
.193957		05 32		ora $32		              ORA OPL2_PARAMETER0
.193959		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19395b		6b		rtl		                RTL
.19395c						OPL2_SET_SYNTHMODE
.19395c		48		pha		                PHA             ; begin setdp macro
.19395d		08		php		                PHP
.19395e		c2 20		rep #$20	                REP #$20        ; set A long
.193960		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193963		5b		tcd		                TCD
.193964		28		plp		                PLP
.193965		68		pla		                PLA             ; end setdp macro
.193966		08		php		              PHP ; Push the Carry
.193967		e2 20		sep #$20	                SEP #$20        ; set A short
.193969		18		clc		              CLC
.19396a		a5 27		lda $27		              LDA OPL2_CHANNEL
.19396c		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19396e		69 c0		adc #$c0	              ADC #$C0
.193970		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193972		a9 00		lda #$00	              LDA #$00
.193974		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193976		c2 30		rep #$30	                REP #$30        ; set A&X long
.193978		18		clc		              CLC
.193979		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19397c		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19397e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193980		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193983		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193985		28		plp		              PLP ; Pull the Carry out
.193986		e2 20		sep #$20	                SEP #$20        ; set A short
.193988		b0 08		bcs $193992	              BCS OPL2_Set_Synthmode_Set;
.19398a		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19398c		29 fe		and #$fe	              AND #$FE
.19398e		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193990		80 06		bra $193998	              BRA OPL2_Set_Synthmode_Exit
.193992						OPL2_Set_Synthmode_Set
.193992		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193994		09 01		ora #$01	              ORA #$01
.193996		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193998						OPL2_Set_Synthmode_Exit
.193998		6b		rtl		                RTL
.193999						OPL2_SET_DEEPTREMOLO
.193999		48		pha		                PHA             ; begin setdp macro
.19399a		08		php		                PHP
.19399b		c2 20		rep #$20	                REP #$20        ; set A long
.19399d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939a0		5b		tcd		                TCD
.1939a1		28		plp		                PLP
.1939a2		68		pla		                PLA             ; end setdp macro
.1939a3		c2 20		rep #$20	                REP #$20        ; set A long
.1939a5		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939a8		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939aa		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939ad		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939af		e2 20		sep #$20	                SEP #$20        ; set A short
.1939b1		b0 08		bcs $1939bb	              BCS OPL2_Set_DeepTremolo_Set;
.1939b3		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939b5		29 7f		and #$7f	              AND #$7F
.1939b7		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939b9		80 06		bra $1939c1	              BRA OPL2_Set_DeepTremolo_Exit
.1939bb						OPL2_Set_DeepTremolo_Set
.1939bb		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939bd		09 80		ora #$80	              ORA #$80
.1939bf		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939c1						OPL2_Set_DeepTremolo_Exit
.1939c1		6b		rtl		                RTL
.1939c2						OPL2_SET_DEEPVIBRATO
.1939c2		48		pha		                PHA             ; begin setdp macro
.1939c3		08		php		                PHP
.1939c4		c2 20		rep #$20	                REP #$20        ; set A long
.1939c6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939c9		5b		tcd		                TCD
.1939ca		28		plp		                PLP
.1939cb		68		pla		                PLA             ; end setdp macro
.1939cc		c2 20		rep #$20	                REP #$20        ; set A long
.1939ce		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939d1		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939d3		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939d6		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1939da		b0 08		bcs $1939e4	              BCS OPL2_Set_DeepVibrato_Set;
.1939dc		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939de		29 bf		and #$bf	              AND #$BF
.1939e0		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939e2		80 06		bra $1939ea	              BRA OPL2_Set_DeepVibrato_Exit
.1939e4						OPL2_Set_DeepVibrato_Set
.1939e4		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939e6		09 40		ora #$40	              ORA #$40
.1939e8		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939ea						OPL2_Set_DeepVibrato_Exit
.1939ea		6b		rtl		                RTL
.1939eb						OPL2_SET_PERCUSSION
.1939eb		48		pha		                PHA             ; begin setdp macro
.1939ec		08		php		                PHP
.1939ed		c2 20		rep #$20	                REP #$20        ; set A long
.1939ef		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939f2		5b		tcd		                TCD
.1939f3		28		plp		                PLP
.1939f4		68		pla		                PLA             ; end setdp macro
.1939f5		c2 20		rep #$20	                REP #$20        ; set A long
.1939f7		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.1939fa		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1939fc		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1939ff		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a01		e2 20		sep #$20	                SEP #$20        ; set A short
.193a03		b0 08		bcs $193a0d	                BCS OPL2_Set_Percussion_Set;
.193a05		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a07		29 df		and #$df	                AND #$DF
.193a09		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a0b		80 06		bra $193a13	                BRA OPL2_Set_Percussion_Exit
.193a0d						OPL2_Set_Percussion_Set
.193a0d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a0f		09 20		ora #$20	                ORA #$20
.193a11		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a13						OPL2_Set_Percussion_Exit
.193a13		6b		rtl		                RTL
.193a14						OPL2_SET_DRUMS
.193a14		48		pha		                PHA             ; begin setdp macro
.193a15		08		php		                PHP
.193a16		c2 20		rep #$20	                REP #$20        ; set A long
.193a18		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a1b		5b		tcd		                TCD
.193a1c		28		plp		                PLP
.193a1d		68		pla		                PLA             ; end setdp macro
.193a1e		c2 20		rep #$20	                REP #$20        ; set A long
.193a20		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a23		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a25		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a28		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a2a		e2 20		sep #$20	                SEP #$20        ; set A short
.193a2c		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a2e		29 1f		and #$1f	                AND #$1F
.193a30		85 32		sta $32		                STA OPL2_PARAMETER0
.193a32		49 ff		eor #$ff	                EOR #$FF
.193a34		85 33		sta $33		                STA OPL2_PARAMETER1
.193a36		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a38		25 33		and $33		                AND OPL2_PARAMETER1
.193a3a		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a3c		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a3e		6b		rtl		                RTL
.193a3f						OPL2_SET_WAVEFORM
.193a3f		48		pha		                PHA             ; begin setdp macro
.193a40		08		php		                PHP
.193a41		c2 20		rep #$20	                REP #$20        ; set A long
.193a43		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a46		5b		tcd		                TCD
.193a47		28		plp		                PLP
.193a48		68		pla		                PLA             ; end setdp macro
.193a49		c2 20		rep #$20	                REP #$20        ; set A long
.193a4b		a9 e0 00	lda #$00e0	                LDA #$00E0;
.193a4e		85 28		sta $28		                STA OPL2_REG_REGION
.193a50		20 64 3a	jsr $193a64	                JSR OPL2_GET_REG_OFFSET
.193a53		e2 20		sep #$20	                SEP #$20        ; set A short
.193a55		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a57		29 03		and #$03	                AND #$03
.193a59		85 32		sta $32		                STA OPL2_PARAMETER0
.193a5b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a5d		29 fc		and #$fc	                AND #$FC
.193a5f		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a61		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a63		6b		rtl		                RTL
.193a64						OPL2_GET_REG_OFFSET
.193a64		e2 30		sep #$30	                SEP #$30        ; set A&X short
.193a66		a5 27		lda $27		                LDA OPL2_CHANNEL
.193a68		29 0f		and #$0f	                AND #$0F
.193a6a		aa		tax		                TAX
.193a6b		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193a6d		d0 06		bne $193a75	                BNE OPL2_Get_Register_Offset_l0
.193a6f		bf ac 10 19	lda $1910ac,x	                LDA @lregisterOffsets_operator0, X
.193a73		80 04		bra $193a79	                BRA OPL2_Get_Register_Offset_exit
.193a75						OPL2_Get_Register_Offset_l0
.193a75		bf b5 10 19	lda $1910b5,x	                LDA @lregisterOffsets_operator1, X
.193a79						OPL2_Get_Register_Offset_exit
.193a79		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193a7b		a9 00		lda #$00	                LDA #$00
.193a7d		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193a7f		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a81		18		clc		                CLC
.193a82		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193a85		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193a87		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.193a89		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a8b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a8e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a90		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193a91						ITRACE
.193a91		08		php		                PHP
.193a92		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a94		8b		phb		                PHB                 ; Print the text
.193a95		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.193a97		aa		tax		                TAX                 ; ... into X
.193a98		e2 20		sep #$20	                SEP #$20        ; set A short
.193a9a		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.193a9c		48		pha		                PHA
.193a9d		ab		plb		                PLB                 ; ... into B
.193a9e		22 04 07 19	jsl $190704	                JSL IPUTS           ; Print the string
.193aa2		c2 20		rep #$20	                REP #$20        ; set A long
.193aa4		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.193aa6		83 08		sta $08,s	                STA #8,S
.193aa8		a3 02		lda $02,s	                LDA #2,S
.193aaa		83 06		sta $06,s	                STA #6,S
.193aac		ab		plb		                PLB
.193aad		68		pla		                PLA                 ; Clean up the stack
.193aae		68		pla		                PLA
.193aaf		28		plp		                PLP
.193ab0		6b		rtl		                RTL
.193ab1						ISETTIMEOUT
.193ab1		8b		phb		                PHB
.193ab2		0b		phd		                PHD
.193ab3		08		php		                PHP
.193ab4		48		pha		                PHA             ; begin setdbr macro
.193ab5		08		php		                PHP
.193ab6		e2 20		sep #$20	                SEP #$20        ; set A short
.193ab8		a9 00		lda #$00	                LDA #0
.193aba		48		pha		                PHA
.193abb		ab		plb		                PLB
.193abc		28		plp		                PLP
.193abd		68		pla		                PLA             ; end setdbr macro
.193abe		48		pha		                PHA             ; begin setdp macro
.193abf		08		php		                PHP
.193ac0		c2 20		rep #$20	                REP #$20        ; set A long
.193ac2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193ac5		5b		tcd		                TCD
.193ac6		28		plp		                PLP
.193ac7		68		pla		                PLA             ; end setdp macro
.193ac8		78		sei		                SEI                             ; We don't want to be interrupted
.193ac9		e2 20		sep #$20	                SEP #$20        ; set A short
.193acb		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193acd		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.193acf		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.193ad1		85 0c		sta $032c	                STA @b BIOS_FLAGS
.193ad3		28		plp		done            PLP
.193ad4		2b		pld		                PLD
.193ad5		ab		plb		                PLB
.193ad6		6b		rtl		                RTL
.193ad7						ICMDBLOCK
.193ad7		0b		phd		                PHD
.193ad8		08		php		                PHP
.193ad9		48		pha		                PHA             ; begin setdp macro
.193ada		08		php		                PHP
.193adb		c2 20		rep #$20	                REP #$20        ; set A long
.193add		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193ae0		5b		tcd		                TCD
.193ae1		28		plp		                PLP
.193ae2		68		pla		                PLA             ; end setdp macro
.193ae3		e2 20		sep #$20	                SEP #$20        ; set A short
.193ae5		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.193ae7		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.193ae9		d0 06		bne $193af1	                BNE ret_success             ; No: just return
.193aeb		22 3c 64 19	jsl $19643c	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193aef		90 0c		bcc $193afd	                BCC pass_failure
.193af1						ret_success
.193af1		e2 20		sep #$20	                SEP #$20        ; set A short
.193af3		64 00		stz $0320	                STZ BIOS_STATUS
.193af5		28		plp		                PLP
.193af6		2b		pld		                PLD
.193af7		38		sec		                SEC
.193af8		6b		rtl		                RTL
.193af9						ret_failure
.193af9		e2 20		sep #$20	                SEP #$20        ; set A short
.193afb		85 00		sta $0320	                STA BIOS_STATUS
.193afd		28		plp		pass_failure    PLP
.193afe		2b		pld		                PLD
.193aff		18		clc		                CLC
.193b00		6b		rtl		                RTL
.193b01						IGETBLOCK
.193b01		5a		phy		                PHY
.193b02		0b		phd		                PHD
.193b03		8b		phb		                PHB
.193b04		08		php		                PHP
.193b05		48		pha		                PHA             ; begin setdbr macro
.193b06		08		php		                PHP
.193b07		e2 20		sep #$20	                SEP #$20        ; set A short
.193b09		a9 00		lda #$00	                LDA #0
.193b0b		48		pha		                PHA
.193b0c		ab		plb		                PLB
.193b0d		28		plp		                PLP
.193b0e		68		pla		                PLA             ; end setdbr macro
.193b0f		48		pha		                PHA             ; begin setdp macro
.193b10		08		php		                PHP
.193b11		c2 20		rep #$20	                REP #$20        ; set A long
.193b13		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b16		5b		tcd		                TCD
.193b17		28		plp		                PLP
.193b18		68		pla		                PLA             ; end setdp macro
.193b19		e2 20		sep #$20	                SEP #$20        ; set A short
.193b1b		a0 00 00	ldy #$0000	                LDY #0
.193b1e		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.193b20		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.193b22		c8		iny		                INY
.193b23		c0 00 02	cpy #$0200	                CPY #512
.193b26		d0 f8		bne $193b20	                BNE clr_loop
.193b28		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b2a		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b2c		f0 14		beq $193b42	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.193b2e		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.193b30		f0 18		beq $193b4a	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.193b32		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b34		f0 1c		beq $193b52	                BEQ hd_getblock
.193b36		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193b38						ret_failure
.193b38		e2 20		sep #$20	                SEP #$20        ; set A short
.193b3a		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193b3c		28		plp		                PLP
.193b3d		ab		plb		                PLB
.193b3e		2b		pld		                PLD
.193b3f		7a		ply		                PLY
.193b40		38		sec		                SEC                                 ; Return failure
.193b41		6b		rtl		                RTL
.193b42		22 48 59 19	jsl $195948	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.193b46		b0 12		bcs $193b5a	                BCS ret_success
.193b48		80 ee		bra $193b38	                BRA ret_failure
.193b4a		22 41 62 19	jsl $196241	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.193b4e		b0 0a		bcs $193b5a	                BCS ret_success
.193b50		80 e6		bra $193b38	                BRA ret_failure
.193b52		22 55 68 19	jsl $196855	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.193b56		b0 02		bcs $193b5a	                BCS ret_success
.193b58		80 de		bra $193b38	                BRA ret_failure
.193b5a						ret_success
.193b5a		e2 20		sep #$20	                SEP #$20        ; set A short
.193b5c		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193b5e		28		plp		                PLP
.193b5f		ab		plb		                PLB
.193b60		2b		pld		                PLD
.193b61		7a		ply		                PLY
.193b62		38		sec		                SEC                                 ; Return success
.193b63		6b		rtl		                RTL
.193b64						IPUTBLOCK
.193b64		0b		phd		                PHD
.193b65		8b		phb		                PHB
.193b66		08		php		                PHP
.193b67		48		pha		                PHA             ; begin setdbr macro
.193b68		08		php		                PHP
.193b69		e2 20		sep #$20	                SEP #$20        ; set A short
.193b6b		a9 00		lda #$00	                LDA #0
.193b6d		48		pha		                PHA
.193b6e		ab		plb		                PLB
.193b6f		28		plp		                PLP
.193b70		68		pla		                PLA             ; end setdbr macro
.193b71		48		pha		                PHA             ; begin setdp macro
.193b72		08		php		                PHP
.193b73		c2 20		rep #$20	                REP #$20        ; set A long
.193b75		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b78		5b		tcd		                TCD
.193b79		28		plp		                PLP
.193b7a		68		pla		                PLA             ; end setdp macro
.193b7b		e2 20		sep #$20	                SEP #$20        ; set A short
.193b7d		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b7f		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b81		f0 13		beq $193b96	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.193b83		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193b85		f0 17		beq $193b9e	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193b87		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b89		f0 1b		beq $193ba6	                BEQ hd_putblock
.193b8b		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193b8d						ret_failure
.193b8d		e2 20		sep #$20	                SEP #$20        ; set A short
.193b8f		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193b91		28		plp		                PLP
.193b92		ab		plb		                PLB
.193b93		2b		pld		                PLD
.193b94		18		clc		                CLC                                 ; Return failure
.193b95		6b		rtl		                RTL
.193b96		22 ef 59 19	jsl $1959ef	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.193b9a		90 f1		bcc $193b8d	                BCC ret_failure
.193b9c		80 10		bra $193bae	                BRA ret_success
.193b9e		22 a6 62 19	jsl $1962a6	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.193ba2		90 e9		bcc $193b8d	                BCC ret_failure
.193ba4		80 08		bra $193bae	                BRA ret_success
.193ba6		22 e0 68 19	jsl $1968e0	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.193baa		90 e1		bcc $193b8d	                BCC ret_failure
.193bac		80 00		bra $193bae	                BRA ret_success
.193bae						ret_success
.193bae		e2 20		sep #$20	                SEP #$20        ; set A short
.193bb0		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193bb2		28		plp		                PLP
.193bb3		ab		plb		                PLB
.193bb4		2b		pld		                PLD
.193bb5		38		sec		                SEC                                 ; Return success
.193bb6		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.193bb7						DOS_DIROPEN
.193bb7		da		phx		                PHX
.193bb8		5a		phy		                PHY
.193bb9		0b		phd		                PHD
.193bba		8b		phb		                PHB
.193bbb		08		php		                PHP
.193bbc		48		pha		                PHA             ; begin setdbr macro
.193bbd		08		php		                PHP
.193bbe		e2 20		sep #$20	                SEP #$20        ; set A short
.193bc0		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193bc2		48		pha		                PHA
.193bc3		ab		plb		                PLB
.193bc4		28		plp		                PLP
.193bc5		68		pla		                PLA             ; end setdbr macro
.193bc6		48		pha		                PHA             ; begin setdp macro
.193bc7		08		php		                PHP
.193bc8		c2 20		rep #$20	                REP #$20        ; set A long
.193bca		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193bcd		5b		tcd		                TCD
.193bce		28		plp		                PLP
.193bcf		68		pla		                PLA             ; end setdp macro
.193bd0		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.193bd3		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.193bd6		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.193bd9		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193bdc		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.193bdf		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193be1		85 18		sta $0338	                STA DOS_DIR_PTR
.193be3		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193be6		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193be8		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193bea		e2 20		sep #$20	                SEP #$20        ; set A short
.193bec		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.193bef		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.193bf1		d0 24		bne $193c17	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.193bf3						fetch_fat12
.193bf3		e2 20		sep #$20	                SEP #$20        ; set A short
.193bf5		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.193bf7		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193bfa		c2 20		rep #$20	                REP #$20        ; set A long
.193bfc		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.193bfe		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193c00		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c02		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193c04		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.193c07		85 02		sta $0322	                STA BIOS_LBA
.193c09		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c0c		85 04		sta $0324	                STA BIOS_LBA+2
.193c0e		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.193c12		b0 1f		bcs $193c33	                BCS do_success              ; If sucessful, set the directory cursor
.193c14		82 84 18	brl $19549b	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c17						fetch_fat32
.193c17		e2 20		sep #$20	                SEP #$20        ; set A short
.193c19		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.193c1b		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193c1e		c2 20		rep #$20	                REP #$20        ; set A long
.193c20		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193c23		85 10		sta $0330	                STA DOS_CLUS_ID
.193c25		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c28		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193c2a		22 9a 41 19	jsl $19419a	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193c2e		b0 03		bcs $193c33	                BCS do_success              ; If successful: set the directory cursor
.193c30		82 68 18	brl $19549b	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c33		82 6c 18	brl $1954a2	do_success      BRL IF_SUCCESS
.193c36						DOS_DIRFIRST
.193c36		0b		phd		                PHD
.193c37		08		php		                PHP
.193c38		48		pha		                PHA             ; begin setdp macro
.193c39		08		php		                PHP
.193c3a		c2 20		rep #$20	                REP #$20        ; set A long
.193c3c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c3f		5b		tcd		                TCD
.193c40		28		plp		                PLP
.193c41		68		pla		                PLA             ; end setdp macro
.193c42		c2 20		rep #$20	                REP #$20        ; set A long
.193c44		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193c47		85 18		sta $0338	                STA DOS_DIR_PTR
.193c49		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193c4c		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c4e		28		plp		                PLP
.193c4f		2b		pld		                PLD
.193c50		6b		rtl		                RTL
.193c51						DOS_DIRNEXT
.193c51		da		phx		                PHX
.193c52		5a		phy		                PHY
.193c53		0b		phd		                PHD
.193c54		8b		phb		                PHB
.193c55		08		php		                PHP
.193c56		48		pha		                PHA             ; begin setdbr macro
.193c57		08		php		                PHP
.193c58		e2 20		sep #$20	                SEP #$20        ; set A short
.193c5a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193c5c		48		pha		                PHA
.193c5d		ab		plb		                PLB
.193c5e		28		plp		                PLP
.193c5f		68		pla		                PLA             ; end setdbr macro
.193c60		48		pha		                PHA             ; begin setdp macro
.193c61		08		php		                PHP
.193c62		c2 20		rep #$20	                REP #$20        ; set A long
.193c64		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c67		5b		tcd		                TCD
.193c68		28		plp		                PLP
.193c69		68		pla		                PLA             ; end setdp macro
.193c6a		c2 20		rep #$20	                REP #$20        ; set A long
.193c6c		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.193c6d		a5 18		lda $0338	                LDA DOS_DIR_PTR
.193c6f		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.193c72		85 18		sta $0338	                STA DOS_DIR_PTR
.193c74		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c76		69 00 00	adc #$0000	                ADC #0
.193c79		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c7b		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.193c7c		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.193c7f		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.193c81		85 28		sta $0348	                STA DOS_TEMP
.193c83		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.193c86		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.193c88		85 2a		sta $034a	                STA DOS_TEMP+2
.193c8a		30 0c		bmi $193c98	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.193c8c		f0 03		beq $193c91	                BEQ check_lower
.193c8e		82 11 18	brl $1954a2	                BRL IF_SUCCESS
.193c91		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.193c93		f0 03		beq $193c98	                BEQ get_next_block
.193c95		82 0a 18	brl $1954a2	                BRL IF_SUCCESS
.193c98						get_next_block
.193c98		e2 20		sep #$20	                SEP #$20        ; set A short
.193c9a		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193c9d		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.193c9f		f0 38		beq $193cd9	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.193ca1						next_sector
.193ca1		c2 20		rep #$20	                REP #$20        ; set A long
.193ca3		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193ca6		1a		inc a		                INC A
.193ca7		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.193caa		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.193cad		d0 07		bne $193cb6	                BNE read_sector
.193caf		e2 20		sep #$20	                SEP #$20        ; set A short
.193cb1		a9 00		lda #$00	                LDA #0
.193cb3		82 e1 17	brl $195497	                BRL IF_FAILURE
.193cb6						read_sector
.193cb6		c2 20		rep #$20	                REP #$20        ; set A long
.193cb8		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.193cbb		85 02		sta $0322	                STA BIOS_LBA
.193cbd		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193cc0		85 04		sta $0324	                STA BIOS_LBA+2
.193cc2		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.193cc5		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193cc7		85 18		sta $0338	                STA DOS_DIR_PTR
.193cc9		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193ccc		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193cce		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193cd0		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.193cd4		b0 39		bcs $193d0f	                BCS do_success              ; If successful: set the directory cursor
.193cd6		82 c2 17	brl $19549b	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193cd9						next_cluster
.193cd9		c2 20		rep #$20	                REP #$20        ; set A long
.193cdb		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.193cde		85 10		sta $0330	                STA DOS_CLUS_ID
.193ce0		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193ce3		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193ce5		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193ce8		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193cea		85 18		sta $0338	                STA DOS_DIR_PTR
.193cec		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193cef		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193cf1		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193cf3		22 ae 45 19	jsl $1945ae	                JSL NEXTCLUSTER             ; Try to find the next cluster
.193cf7		b0 03		bcs $193cfc	                BCS set_next
.193cf9		82 9f 17	brl $19549b	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.193cfc		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.193cfe		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193d01		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.193d03		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193d06		22 9a 41 19	jsl $19419a	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193d0a		b0 03		bcs $193d0f	                BCS do_success              ; If successful: set the directory cursor
.193d0c		82 8c 17	brl $19549b	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193d0f		82 90 17	brl $1954a2	do_success      BRL IF_SUCCESS
.193d12						DOS_DIRFINDFREE
.193d12		da		phx		                PHX
.193d13		5a		phy		                PHY
.193d14		0b		phd		                PHD
.193d15		8b		phb		                PHB
.193d16		08		php		                PHP
.193d17		48		pha		                PHA             ; begin setdbr macro
.193d18		08		php		                PHP
.193d19		e2 20		sep #$20	                SEP #$20        ; set A short
.193d1b		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d1d		48		pha		                PHA
.193d1e		ab		plb		                PLB
.193d1f		28		plp		                PLP
.193d20		68		pla		                PLA             ; end setdbr macro
.193d21		48		pha		                PHA             ; begin setdp macro
.193d22		08		php		                PHP
.193d23		c2 20		rep #$20	                REP #$20        ; set A long
.193d25		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d28		5b		tcd		                TCD
.193d29		28		plp		                PLP
.193d2a		68		pla		                PLA             ; end setdp macro
.193d2b		22 b9 4f 19	jsl $194fb9	                JSL IF_DIROPEN
.193d2f		b0 06		bcs $193d37	                BCS start_walk
.193d31		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.193d34		82 28 00	brl $193d5f	                BRL ret_failure
.193d37		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.193d3a						chk_entry
.193d3a		e2 20		sep #$20	                SEP #$20        ; set A short
.193d3c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.193d3e		f0 1c		beq $193d5c	                BEQ ret_success             ; If 0: we have a blank... return it
.193d40		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.193d42		f0 18		beq $193d5c	                BEQ ret_success             ; Yes: return it
.193d44		22 f3 4f 19	jsl $194ff3	                JSL IF_DIRNEXT              ; Go to the next directory entry
.193d48		b0 ed		bcs $193d37	                BCS start_walk              ; If we got one, start walking it
.193d4a		22 62 3d 19	jsl $193d62	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.193d4e		90 0f		bcc $193d5f	                BCC ret_failure             ; If that didn't work, return the failure
.193d50		c2 20		rep #$20	                REP #$20        ; set A long
.193d52		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.193d55		85 18		sta $0338	                STA DOS_DIR_PTR
.193d57		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193d5a		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d5c		82 43 17	brl $1954a2	ret_success     BRL IF_SUCCESS
.193d5f		82 35 17	brl $195497	ret_failure     BRL IF_FAILURE
.193d62						DOS_DIRAPPEND
.193d62		da		phx		                PHX
.193d63		8b		phb		                PHB
.193d64		0b		phd		                PHD
.193d65		08		php		                PHP
.193d66		48		pha		                PHA             ; begin setdbr macro
.193d67		08		php		                PHP
.193d68		e2 20		sep #$20	                SEP #$20        ; set A short
.193d6a		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d6c		48		pha		                PHA
.193d6d		ab		plb		                PLB
.193d6e		28		plp		                PLP
.193d6f		68		pla		                PLA             ; end setdbr macro
.193d70		48		pha		                PHA             ; begin setdp macro
.193d71		08		php		                PHP
.193d72		c2 20		rep #$20	                REP #$20        ; set A long
.193d74		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d77		5b		tcd		                TCD
.193d78		28		plp		                PLP
.193d79		68		pla		                PLA             ; end setdp macro
.193d7a		e2 20		sep #$20	                SEP #$20        ; set A short
.193d7c		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.193d7f		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.193d81		f0 09		beq $193d8c	                BEQ clr_sector                  ; Yes: clear out the directory data
.193d83						ret_failure
.193d83		e2 20		sep #$20	                SEP #$20        ; set A short
.193d85		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.193d87		85 0e		sta $032e	                STA DOS_STATUS
.193d89		82 3e 00	brl $193dca	                BRL pass_failure
.193d8c						clr_sector
.193d8c		c2 20		rep #$20	                REP #$20        ; set A long
.193d8e		a9 00 00	lda #$0000	                LDA #0
.193d91		a2 00 00	ldx #$0000	                LDX #0
.193d94		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.193d97		e8		inx		                INX
.193d98		e8		inx		                INX
.193d99		e0 00 02	cpx #$0200	                CPX #512
.193d9c		d0 f6		bne $193d94	                BNE clr_loop
.193d9e		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.193da1		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193da3		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193da6		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193da8		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.193dab		85 10		sta $0330	                STA DOS_CLUS_ID
.193dad		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193db0		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193db2		22 cf 49 19	jsl $1949cf	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.193db6		90 12		bcc $193dca	                BCC pass_failure                ; If there was an error, pass it up the chain
.193db8		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.193dbb		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193dbe		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.193dc1		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193dc4		28		plp		ret_success     PLP
.193dc5		2b		pld		                PLD
.193dc6		ab		plb		                PLB
.193dc7		fa		plx		                PLX
.193dc8		38		sec		                SEC
.193dc9		6b		rtl		                RTL
.193dca		28		plp		pass_failure    PLP
.193dcb		2b		pld		                PLD
.193dcc		ab		plb		                PLB
.193dcd		fa		plx		                PLX
.193dce		18		clc		                CLC
.193dcf		6b		rtl		                RTL
.193dd0						DOS_DIRWRITE
.193dd0		da		phx		                PHX
.193dd1		5a		phy		                PHY
.193dd2		0b		phd		                PHD
.193dd3		8b		phb		                PHB
.193dd4		08		php		                PHP
.193dd5		48		pha		                PHA             ; begin setdbr macro
.193dd6		08		php		                PHP
.193dd7		e2 20		sep #$20	                SEP #$20        ; set A short
.193dd9		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193ddb		48		pha		                PHA
.193ddc		ab		plb		                PLB
.193ddd		28		plp		                PLP
.193dde		68		pla		                PLA             ; end setdbr macro
.193ddf		48		pha		                PHA             ; begin setdp macro
.193de0		08		php		                PHP
.193de1		c2 20		rep #$20	                REP #$20        ; set A long
.193de3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193de6		5b		tcd		                TCD
.193de7		28		plp		                PLP
.193de8		68		pla		                PLA             ; end setdp macro
.193de9		e2 20		sep #$20	                SEP #$20        ; set A short
.193deb		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193dee		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.193df0		f0 1f		beq $193e11	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.193df2						write_sector
.193df2		c2 20		rep #$20	                REP #$20        ; set A long
.193df4		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.193df7		85 02		sta $0322	                STA BIOS_LBA
.193df9		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193dfc		85 04		sta $0324	                STA BIOS_LBA+2
.193dfe		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e01		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193e03		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e06		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193e08		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.193e0c		b0 1f		bcs $193e2d	                BCS ret_success
.193e0e		82 86 16	brl $195497	ret_failure     BRL IF_FAILURE
.193e11						write_cluster
.193e11		c2 20		rep #$20	                REP #$20        ; set A long
.193e13		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.193e16		85 10		sta $0330	                STA DOS_CLUS_ID
.193e18		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193e1b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193e1d		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e20		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193e22		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e25		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193e27		22 d7 41 19	jsl $1941d7	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.193e2b		90 e1		bcc $193e0e	                BCC ret_failure
.193e2d		82 72 16	brl $1954a2	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.193e30						DOS_INIT
.193e30		8b		phb		                PHB
.193e31		0b		phd		                PHD
.193e32		08		php		                PHP
.193e33		48		pha		                PHA             ; begin setdbr macro
.193e34		08		php		                PHP
.193e35		e2 20		sep #$20	                SEP #$20        ; set A short
.193e37		a9 00		lda #$00	                LDA #0
.193e39		48		pha		                PHA
.193e3a		ab		plb		                PLB
.193e3b		28		plp		                PLP
.193e3c		68		pla		                PLA             ; end setdbr macro
.193e3d		48		pha		                PHA             ; begin setdp macro
.193e3e		08		php		                PHP
.193e3f		c2 20		rep #$20	                REP #$20        ; set A long
.193e41		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e44		5b		tcd		                TCD
.193e45		28		plp		                PLP
.193e46		68		pla		                PLA             ; end setdp macro
.193e47		e2 20		sep #$20	                SEP #$20        ; set A short
.193e49		c2 10		rep #$10	                REP #$10        ; set X long
.193e4b		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.193e4e		a9 00		lda #$00	                LDA #0
.193e50		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.193e53		e8		inx		                INX
.193e54		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.193e57		d0 f7		bne $193e50	                BNE b0_clr_loop
.193e59		48		pha		                PHA             ; begin setdbr macro
.193e5a		08		php		                PHP
.193e5b		e2 20		sep #$20	                SEP #$20        ; set A short
.193e5d		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193e5f		48		pha		                PHA
.193e60		ab		plb		                PLB
.193e61		28		plp		                PLP
.193e62		68		pla		                PLA             ; end setdbr macro
.193e63		48		pha		                PHA             ; begin setdp macro
.193e64		08		php		                PHP
.193e65		c2 20		rep #$20	                REP #$20        ; set A long
.193e67		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e6a		5b		tcd		                TCD
.193e6b		28		plp		                PLP
.193e6c		68		pla		                PLA             ; end setdp macro
.193e6d		e2 20		sep #$20	                SEP #$20        ; set A short
.193e6f		c2 10		rep #$10	                REP #$10        ; set X long
.193e71		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.193e74		a9 00		lda #$00	                LDA #0
.193e76		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.193e79		e8		inx		                INX
.193e7a		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.193e7d		d0 f7		bne $193e76	                BNE b38_clr_loop
.193e7f		c2 20		rep #$20	                REP #$20        ; set A long
.193e81		a9 2f 42	lda #$422f	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.193e84		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.193e88		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.193e8b		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.193e8f		e2 20		sep #$20	                SEP #$20        ; set A short
.193e91		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.193e93		85 01		sta $0321	                STA BIOS_DEV
.193e95		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.193e97		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.193e9b		a9 00		lda #$00	                LDA #0
.193e9d		a2 00 00	ldx #$0000	                LDX #0
.193ea0		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.193ea3		e8		inx		                INX
.193ea4		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.193ea7		d0 f7		bne $193ea0	                BNE fd_zero_loop
.193ea9		a9 00		lda #$00	                LDA #0
.193eab		a2 00 00	ldx #$0000	                LDX #0
.193eae		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.193eb1		e8		inx		                INX
.193eb2		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.193eb5		d0 f7		bne $193eae	                BNE sect_zero_loop
.193eb7		c2 20		rep #$20	                REP #$20        ; set A long
.193eb9		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.193ebc		85 20		sta $0340	                STA @b DOS_FD_PTR
.193ebe		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.193ec1		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193ec3		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.193ec6		85 28		sta $0348	                STA @b DOS_TEMP
.193ec8		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.193ecb		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193ecd		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.193ed0		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.193ed3		a5 28		lda $0348	                LDA @b DOS_TEMP
.193ed5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193ed7		c8		iny		                INY
.193ed8		c8		iny		                INY
.193ed9		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193edb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193edd		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.193ede		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.193ee0		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.193ee3		85 20		sta $0340	                STA @b DOS_FD_PTR
.193ee5		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.193ee7		69 00 00	adc #$0000	                ADC #0
.193eea		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193eec		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.193eed		a5 28		lda $0348	                LDA @b DOS_TEMP
.193eef		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.193ef2		85 28		sta $0348	                STA @b DOS_TEMP
.193ef4		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193ef6		69 00 00	adc #$0000	                ADC #0
.193ef9		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193efb		ca		dex		                DEX                     ; Count down the descriptors...
.193efc		d0 d2		bne $193ed0	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.193efe		28		plp		                PLP
.193eff		2b		pld		                PLD
.193f00		ab		plb		                PLB
.193f01		6b		rtl		                RTL
.193f02						DOS_MOUNT
.193f02		8b		phb		                PHB
.193f03		0b		phd		                PHD
.193f04		08		php		                PHP
.193f05		48		pha		                PHA             ; begin setdbr macro
.193f06		08		php		                PHP
.193f07		e2 20		sep #$20	                SEP #$20        ; set A short
.193f09		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193f0b		48		pha		                PHA
.193f0c		ab		plb		                PLB
.193f0d		28		plp		                PLP
.193f0e		68		pla		                PLA             ; end setdbr macro
.193f0f		48		pha		                PHA             ; begin setdp macro
.193f10		08		php		                PHP
.193f11		c2 20		rep #$20	                REP #$20        ; set A long
.193f13		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f16		5b		tcd		                TCD
.193f17		28		plp		                PLP
.193f18		68		pla		                PLA             ; end setdp macro
.193f19		e2 20		sep #$20	                SEP #$20        ; set A short
.193f1b		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.193f1d		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.193f21		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.193f23		f0 1f		beq $193f44	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.193f25		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.193f27		f0 26		beq $193f4f	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.193f29		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.193f2b		f0 0b		beq $193f38	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.193f2d		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.193f2f		85 0e		sta $032e	                STA DOS_STATUS
.193f31		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.193f33		85 00		sta $0320	                STA BIOS_STATUS
.193f35		82 7c 01	brl $1940b4	                BRL ret_failure
.193f38		22 12 63 19	jsl $196312	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.193f3c		b0 03		bcs $193f41	                BCS fdc_success
.193f3e		82 73 01	brl $1940b4	                BRL ret_failure
.193f41		82 67 01	brl $1940ab	fdc_success     BRL ret_success
.193f44		22 fa 58 19	jsl $1958fa	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.193f48		b0 10		bcs $193f5a	                BCS get_mbr             ; Continue if success
.193f4a		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f4c		82 65 01	brl $1940b4	                BRL ret_failure
.193f4f		22 5a 67 19	jsl $19675a	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.193f53		b0 05		bcs $193f5a	                BCS get_mbr             ; Continue if success
.193f55		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f57		82 5a 01	brl $1940b4	                BRL ret_failure
.193f5a						get_mbr
.193f5a		c2 30		rep #$30	                REP #$30        ; set A&X long
.193f5c		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.193f5e		64 04		stz $0324	                STZ BIOS_LBA+2
.193f60		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.193f63		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193f65		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193f68		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193f6a		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.193f6e		b0 07		bcs $193f77	                BCS chk_signature       ; If success, check the signature bytes
.193f70		e2 20		sep #$20	                SEP #$20        ; set A short
.193f72		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.193f74		82 3d 01	brl $1940b4	                BRL ret_failure
.193f77						chk_signature
.193f77		e2 20		sep #$20	                SEP #$20        ; set A short
.193f79		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.193f7c		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193f7e		d0 07		bne $193f87	                BNE not_mbr             ; No: signal we could find the MBR
.193f80		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.193f83		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193f85		f0 05		beq $193f8c	                BEQ chk_part_type       ; Yes: we have an MBR
.193f87		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.193f89		82 28 01	brl $1940b4	                BRL ret_failure
.193f8c		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.193f8f		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.193f91		f0 05		beq $193f98	                BEQ get_LBA             ; Is FAT32 with LBA?
.193f93		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.193f95		82 1c 01	brl $1940b4	                BRL ret_failure
.193f98		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.193f9b		c2 20		rep #$20	                REP #$20        ; set A long
.193f9d		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.193fa0		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.193fa3		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.193fa6		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.193fa9		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.193fac		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.193faf		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.193fb2		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.193fb5		e2 20		sep #$20	                SEP #$20        ; set A short
.193fb7		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.193fb9		8d 00 a0	sta $18a000	                STA DEVICE
.193fbc		a9 00		lda #$00	                LDA #0
.193fbe		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.193fc1		c2 20		rep #$20	                REP #$20        ; set A long
.193fc3		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.193fc6		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193fc8		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193fcb		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193fcd		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.193fd0		85 02		sta $0322	                STA BIOS_LBA
.193fd2		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.193fd5		85 04		sta $0324	                STA BIOS_LBA+2
.193fd7		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.193fdb		b0 1c		bcs $193ff9	                BCS get_first_sec       ; Got it? Start parsing it
.193fdd		e2 20		sep #$20	                SEP #$20        ; set A short
.193fdf		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.193fe1		82 d0 00	brl $1940b4	                BRL ret_failure
.193fe4						chk_bpb_sig
.193fe4		e2 20		sep #$20	                SEP #$20        ; set A short
.193fe6		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.193fe9		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193feb		d0 07		bne $193ff4	                BNE not_bpb             ; No: signal we could find the volume ID
.193fed		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.193ff0		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193ff2		f0 05		beq $193ff9	                BEQ get_first_sec       ; Yes: we have an volume ID
.193ff4		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.193ff6		82 bb 00	brl $1940b4	                BRL ret_failure
.193ff9						get_first_sec
.193ff9		c2 20		rep #$20	                REP #$20        ; set A long
.193ffb		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.193ffe		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.194001		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.194004		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.194007		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.19400a		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.19400d		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.19400e		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.194011		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.194014		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.194017		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.19401a		69 00 00	adc #$0000	                ADC #0
.19401d		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.194020		e2 20		sep #$20	                SEP #$20        ; set A short
.194022		a2 00 00	ldx #$0000	                LDX #0
.194025		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.194029		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.19402d		e8		inx		                INX
.19402e		e0 04 00	cpx #$0004	                CPX #4
.194031		d0 f2		bne $194025	                BNE cpy_secperfat
.194033		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.194036		0a		asl a		                ASL A
.194037		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.19403a		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.19403d		2a		rol a		                ROL A
.19403e		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.194041		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.194044		2a		rol a		                ROL A
.194045		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.194048		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.19404b		2a		rol a		                ROL A
.19404c		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.19404f		18		clc		                CLC
.194050		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.194053		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.194056		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.194059		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.19405c		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.19405f		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.194062		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.194065		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.194068		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.19406b		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.19406e		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.194071		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.194074		e2 20		sep #$20	                SEP #$20        ; set A short
.194076		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.194079		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.19407c		18		clc		                CLC
.19407d		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.194080		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.194083		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.194086		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.194089		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.19408c		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.19408f		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194092		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.194095		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.194098		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.19409b		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.19409e		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.1940a1		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.1940a3		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.1940a6		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.1940a8		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.1940ab						ret_success
.1940ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1940ad		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.1940af		28		plp		                PLP
.1940b0		2b		pld		                PLD
.1940b1		ab		plb		                PLB
.1940b2		38		sec		                SEC
.1940b3		6b		rtl		                RTL
.1940b4						ret_failure
.1940b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1940b6		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.1940b8		28		plp		                PLP
.1940b9		2b		pld		                PLD
.1940ba		ab		plb		                PLB
.1940bb		18		clc		                CLC
.1940bc		6b		rtl		                RTL
.1940bd						DOS_TESTBOOT
.1940bd		8b		phb		                PHB
.1940be		0b		phd		                PHD
.1940bf		da		phx		                PHX
.1940c0		08		php		                PHP
.1940c1		48		pha		                PHA             ; begin setdbr macro
.1940c2		08		php		                PHP
.1940c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1940c5		a9 00		lda #$00	                LDA #0
.1940c7		48		pha		                PHA
.1940c8		ab		plb		                PLB
.1940c9		28		plp		                PLP
.1940ca		68		pla		                PLA             ; end setdbr macro
.1940cb		48		pha		                PHA             ; begin setdp macro
.1940cc		08		php		                PHP
.1940cd		c2 20		rep #$20	                REP #$20        ; set A long
.1940cf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940d2		5b		tcd		                TCD
.1940d3		28		plp		                PLP
.1940d4		68		pla		                PLA             ; end setdp macro
.1940d5		c2 10		rep #$10	                REP #$10        ; set X long
.1940d7						chk_dev
.1940d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1940d9		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.1940db		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.1940dd		f0 24		beq $194103	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.1940df		c2 30		rep #$30	                REP #$30        ; set A&X long
.1940e1		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.1940e4		85 02		sta $0322	                STA @b BIOS_LBA
.1940e6		85 04		sta $0324	                STA @b BIOS_LBA+2
.1940e8		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.1940eb		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.1940ed		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1940f0		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.1940f2		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.1940f6		b0 03		bcs $1940fb	                BCS chk_mbr_brl
.1940f8		82 47 00	brl $194142	                BRL done                    ; If failed... just return
.1940fb						chk_mbr_brl
.1940fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1940fd		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.194101		80 04		bra $194107	                BRA chk_brl
.194103		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.194107		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.194109		f0 06		beq $194111	                BEQ chk_magic               ; Yes: check for the magic text
.19410b		c9 82		cmp #$82	                CMP #$82
.19410d		f0 02		beq $194111	                BEQ chk_magic
.19410f		80 31		bra $194142	                BRA done                    ; No: just return
.194111		a2 00 00	ldx #$0000	chk_magic       LDX #0
.194114		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.194118		df 47 41 19	cmp $194147,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.19411c		d0 24		bne $194142	                BNE done                    ; If it's not equal, just return
.19411e		e8		inx		                INX                         ; Otherwise, check the next one
.19411f		e0 08 00	cpx #$0008	                CPX #8
.194122		d0 f0		bne $194114	                BNE magic_loop              ; Until we've checked all 8 bytes
.194124		c2 30		rep #$30	                REP #$30        ; set A&X long
.194126		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.194129		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.19412c		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.19412f		44 18 18	mvp $18,$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.194132		e2 20		sep #$20	                SEP #$20        ; set A short
.194134		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.194136		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.194138		f0 04		beq $19413e	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.19413a		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.19413e		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.194142		28		plp		done            PLP
.194143		2b		pld		                PLD
.194144		ab		plb		                PLB
.194145		fa		plx		                PLX
.194146		6b		rtl		                RTL
>194147		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.19414f						DOS_CALC_LBA
.19414f		8b		phb		                PHB
.194150		0b		phd		                PHD
.194151		08		php		                PHP
.194152		48		pha		                PHA             ; begin setdbr macro
.194153		08		php		                PHP
.194154		e2 20		sep #$20	                SEP #$20        ; set A short
.194156		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194158		48		pha		                PHA
.194159		ab		plb		                PLB
.19415a		28		plp		                PLP
.19415b		68		pla		                PLA             ; end setdbr macro
.19415c		48		pha		                PHA             ; begin setdp macro
.19415d		08		php		                PHP
.19415e		c2 20		rep #$20	                REP #$20        ; set A long
.194160		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194163		5b		tcd		                TCD
.194164		28		plp		                PLP
.194165		68		pla		                PLA             ; end setdp macro
.194166		c2 20		rep #$20	                REP #$20        ; set A long
.194168		38		sec		                SEC
.194169		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.19416b		e9 02 00	sbc #$0002	                SBC #2
.19416e		85 28		sta $0348	                STA DOS_TEMP
.194170		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194172		e9 00 00	sbc #$0000	                SBC #0
.194175		85 2a		sta $034a	                STA DOS_TEMP+2
.194177		e2 10		sep #$10	                SEP #$10        ; set X short
.194179		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.19417c		e0 01		cpx #$01	mult_loop       CPX #1
.19417e		f0 07		beq $194187	                BEQ add_offset
.194180		06 28		asl $0348	                ASL DOS_TEMP
.194182		26 28		rol $0348	                ROL DOS_TEMP
.194184		ca		dex		                DEX
.194185		80 f5		bra $19417c	                BRA mult_loop
.194187		18		clc		add_offset      CLC
.194188		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.19418a		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.19418d		85 02		sta $0322	                STA BIOS_LBA
.19418f		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194191		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.194194		85 04		sta $0324	                STA BIOS_LBA+2
.194196		28		plp		                PLP
.194197		2b		pld		                PLD
.194198		ab		plb		                PLB
.194199		6b		rtl		                RTL
.19419a						DOS_GETCLUSTER
.19419a		8b		phb		                PHB
.19419b		0b		phd		                PHD
.19419c		08		php		                PHP
.19419d		48		pha		                PHA             ; begin setdbr macro
.19419e		08		php		                PHP
.19419f		e2 20		sep #$20	                SEP #$20        ; set A short
.1941a1		a9 00		lda #$00	                LDA #0
.1941a3		48		pha		                PHA
.1941a4		ab		plb		                PLB
.1941a5		28		plp		                PLP
.1941a6		68		pla		                PLA             ; end setdbr macro
.1941a7		48		pha		                PHA             ; begin setdp macro
.1941a8		08		php		                PHP
.1941a9		c2 20		rep #$20	                REP #$20        ; set A long
.1941ab		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941ae		5b		tcd		                TCD
.1941af		28		plp		                PLP
.1941b0		68		pla		                PLA             ; end setdp macro
.1941b1		c2 20		rep #$20	                REP #$20        ; set A long
.1941b3		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1941b5		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1941b7		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941b9		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1941bb		22 4f 41 19	jsl $19414f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1941bf		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.1941c3		90 09		bcc $1941ce	                BCC ret_failure
.1941c5						ret_success
.1941c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1941c7		64 0e		stz $032e	                STZ DOS_STATUS
.1941c9		28		plp		                PLP
.1941ca		2b		pld		                PLD
.1941cb		ab		plb		                PLB
.1941cc		38		sec		                SEC
.1941cd		6b		rtl		                RTL
.1941ce						ret_failure
.1941ce		e2 20		sep #$20	                SEP #$20        ; set A short
.1941d0		85 0e		sta $032e	                STA DOS_STATUS
.1941d2		28		plp		                PLP
.1941d3		2b		pld		                PLD
.1941d4		ab		plb		                PLB
.1941d5		18		clc		                CLC
.1941d6		6b		rtl		                RTL
.1941d7						DOS_PUTCLUSTER
.1941d7		8b		phb		                PHB
.1941d8		0b		phd		                PHD
.1941d9		08		php		                PHP
.1941da		48		pha		                PHA             ; begin setdbr macro
.1941db		08		php		                PHP
.1941dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1941de		a9 00		lda #$00	                LDA #0
.1941e0		48		pha		                PHA
.1941e1		ab		plb		                PLB
.1941e2		28		plp		                PLP
.1941e3		68		pla		                PLA             ; end setdbr macro
.1941e4		48		pha		                PHA             ; begin setdp macro
.1941e5		08		php		                PHP
.1941e6		c2 20		rep #$20	                REP #$20        ; set A long
.1941e8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941eb		5b		tcd		                TCD
.1941ec		28		plp		                PLP
.1941ed		68		pla		                PLA             ; end setdp macro
.1941ee		c2 20		rep #$20	                REP #$20        ; set A long
.1941f0		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1941f2		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1941f4		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941f6		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1941f8		22 4f 41 19	jsl $19414f	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1941fc		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.194200		90 09		bcc $19420b	                BCC ret_failure
.194202						ret_success
.194202		e2 20		sep #$20	                SEP #$20        ; set A short
.194204		64 0e		stz $032e	                STZ DOS_STATUS
.194206		28		plp		                PLP
.194207		2b		pld		                PLD
.194208		ab		plb		                PLB
.194209		38		sec		                SEC
.19420a		6b		rtl		                RTL
.19420b						ret_failure
.19420b		e2 20		sep #$20	                SEP #$20        ; set A short
.19420d		85 0e		sta $032e	                STA DOS_STATUS
.19420f		28		plp		                PLP
.194210		2b		pld		                PLD
.194211		ab		plb		                PLB
.194212		18		clc		                CLC
.194213		6b		rtl		                RTL
>194214		40 46 00			DOS_FDC_NAME    .null "@F"
.194217						DOS_FDC_DESC
>194217		14 42 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>19421b		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>19421c		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>194220		40 53 00			DOS_SDC_NAME    .null "@S"
.194223						DOS_SDC_DESC
>194223		20 42 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>194227		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>194228		17 42 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>19422c		40 48 00			DOS_HDC_NAME    .null "@H"
.19422f						DOS_HD_DESC
>19422f		2c 42 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>194233		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>194234		23 42 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.194238						DOS_PARSE_DEV
.194238		8b		phb		                PHB
.194239		0b		phd		                PHD
.19423a		08		php		                PHP
.19423b		48		pha		                PHA             ; begin setdbr macro
.19423c		08		php		                PHP
.19423d		e2 20		sep #$20	                SEP #$20        ; set A short
.19423f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194241		48		pha		                PHA
.194242		ab		plb		                PLB
.194243		28		plp		                PLP
.194244		68		pla		                PLA             ; end setdbr macro
.194245		48		pha		                PHA             ; begin setdp macro
.194246		08		php		                PHP
.194247		c2 20		rep #$20	                REP #$20        ; set A long
.194249		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19424c		5b		tcd		                TCD
.19424d		28		plp		                PLP
.19424e		68		pla		                PLA             ; end setdp macro
.19424f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194251		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.194255		85 28		sta $0348	                STA DOS_TEMP
.194257		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.19425b		85 2a		sta $034a	                STA DOS_TEMP+2
.19425d		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.194260		85 48		sta $0368	                STA DOS_STR2_PTR
.194262		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.194265		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.194267		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.19426a		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19426c		85 44		sta $0364	                STA DOS_STR1_PTR
.19426e		c8		iny		                INY
.19426f		c8		iny		                INY
.194270		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194272		85 46		sta $0366	                STA DOS_STR1_PTR+2
.194274		e2 20		sep #$20	                SEP #$20        ; set A short
.194276		a0 00 00	ldy #$0000	                LDY #0
.194279		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.19427b		f0 24		beq $1942a1	                BEQ found                   ; If it's NULL, we found a match
.19427d		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.19427f		d0 03		bne $194284	                BNE next_device             ; If no match, try to load the next device
.194281		c8		iny		                INY                         ; Go to the next character
.194282		80 f5		bra $194279	                BRA cmp_loop
.194284						next_device
.194284		c2 20		rep #$20	                REP #$20        ; set A long
.194286		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.194289		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.19428b		48		pha		                PHA
.19428c		c8		iny		                INY
.19428d		c8		iny		                INY
.19428e		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194290		85 2a		sta $034a	                STA DOS_TEMP+2
.194292		68		pla		                PLA
.194293		85 28		sta $0348	                STA DOS_TEMP
.194295		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.194297		d0 ce		bne $194267	                BNE dev_loop                ; No: check this device
.194299		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19429b		d0 ca		bne $194267	                BNE dev_loop
.19429d		28		plp		done            PLP                         ; Otherwise, return having not found a match
.19429e		2b		pld		                PLD
.19429f		ab		plb		                PLB
.1942a0		6b		rtl		                RTL
.1942a1		22 b2 42 19	jsl $1942b2	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.1942a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1942a7		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.1942aa		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1942ac		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1942b0		80 eb		bra $19429d	                BRA done
.1942b2						DOS_ADJUSTPATH
.1942b2		da		phx		                PHX
.1942b3		5a		phy		                PHY
.1942b4		8b		phb		                PHB
.1942b5		0b		phd		                PHD
.1942b6		08		php		                PHP
.1942b7		48		pha		                PHA             ; begin setdbr macro
.1942b8		08		php		                PHP
.1942b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1942bb		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942bd		48		pha		                PHA
.1942be		ab		plb		                PLB
.1942bf		28		plp		                PLP
.1942c0		68		pla		                PLA             ; end setdbr macro
.1942c1		48		pha		                PHA             ; begin setdp macro
.1942c2		08		php		                PHP
.1942c3		c2 20		rep #$20	                REP #$20        ; set A long
.1942c5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942c8		5b		tcd		                TCD
.1942c9		28		plp		                PLP
.1942ca		68		pla		                PLA             ; end setdp macro
.1942cb		c2 30		rep #$30	                REP #$30        ; set A&X long
.1942cd		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.1942cf		98		tya		                TYA                             ; Compute the address of the first source byte
.1942d0		18		clc		                CLC
.1942d1		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.1942d4		aa		tax		                TAX
.1942d5		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.1942d8		a8		tay		                TAY
.1942d9		38		sec		                SEC                             ; Compute the number of bytes to copy
.1942da		a9 00 01	lda #$0100	                LDA #256
.1942dd		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.1942df		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.1942e2		28		plp		                PLP
.1942e3		2b		pld		                PLD
.1942e4		ab		plb		                PLB
.1942e5		7a		ply		                PLY
.1942e6		fa		plx		                PLX
.1942e7		6b		rtl		                RTL
.1942e8						DOS_PARSE_PATH
.1942e8		8b		phb		                PHB
.1942e9		0b		phd		                PHD
.1942ea		08		php		                PHP
.1942eb		48		pha		                PHA             ; begin setdbr macro
.1942ec		08		php		                PHP
.1942ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1942ef		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942f1		48		pha		                PHA
.1942f2		ab		plb		                PLB
.1942f3		28		plp		                PLP
.1942f4		68		pla		                PLA             ; end setdbr macro
.1942f5		48		pha		                PHA             ; begin setdp macro
.1942f6		08		php		                PHP
.1942f7		c2 20		rep #$20	                REP #$20        ; set A long
.1942f9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942fc		5b		tcd		                TCD
.1942fd		28		plp		                PLP
.1942fe		68		pla		                PLA             ; end setdp macro
.1942ff		c2 10		rep #$10	                REP #$10        ; set X long
.194301		e2 20		sep #$20	                SEP #$20        ; set A short
.194303		a2 00 00	ldx #$0000	                LDX #0
.194306		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.194308		f0 1b		beq $194325	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.19430a		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.19430c		b0 05		bcs $194313	                BGE check_case          ; No: check the case
.19430e		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.194310		82 64 00	brl $194377	                BRL ret_failure
.194313		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.194315		90 08		bcc $19431f	                BLT next_char
.194317		c9 7b		cmp #$7b	                CMP #'z'+1
.194319		b0 04		bcs $19431f	                BGE next_char
.19431b		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.19431d		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.19431f		e8		inx		next_char       INX                     ; Move to the next character
.194320		e0 00 01	cpx #$0100	                CPX #$100
.194323		d0 e1		bne $194306	                BNE upcase_loop
.194325		22 38 42 19	jsl $194238	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.194329		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.19432b		c9 3a		cmp #$3a	                CMP #':'
.19432d		d0 07		bne $194336	                BNE clr_name            ; If not colon, treat it as a file name
.19432f		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.194332		22 b2 42 19	jsl $1942b2	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.194336		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.194339		a9 20		lda #$20	                LDA #' '
.19433b		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.19433e		c8		iny		                INY
.19433f		c0 0b 00	cpy #$000b	                CPY #11
.194342		d0 f7		bne $19433b	                BNE clr_loop
.194344		a2 00 00	ldx #$0000	                LDX #0
.194347		a0 00 00	ldy #$0000	                LDY #0
.19434a		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.19434c		f0 20		beq $19436e	                BEQ ret_success         ; If NULL: we've finished parsing the path
.19434e		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.194350		f0 0a		beq $19435c	                BEQ cpy_ext             ; And move to the extension
.194352		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.194355		e8		inx		                INX
.194356		c8		iny		                INY                     ; Move to the next character
.194357		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.19435a		d0 ee		bne $19434a	                BNE cpy_name_loop       ; No: process this one
.19435c		e8		inx		cpy_ext         INX                     ; Skip the dot
.19435d		a0 08 00	ldy #$0008	                LDY #8
.194360		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.194362		f0 0a		beq $19436e	                BEQ ret_success         ; If it's NULL, we've finished
.194364		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.194367		e8		inx		                INX
.194368		c8		iny		                INY                     ; Move to the next character
.194369		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.19436c		d0 f2		bne $194360	                BNE cpy_ext_loop        ; No: process this one
.19436e						ret_success
.19436e		e2 20		sep #$20	                SEP #$20        ; set A short
.194370		64 0e		stz $032e	                STZ DOS_STATUS
.194372		28		plp		                PLP
.194373		2b		pld		                PLD
.194374		ab		plb		                PLB
.194375		38		sec		                SEC
.194376		6b		rtl		                RTL
.194377						ret_failure
.194377		e2 20		sep #$20	                SEP #$20        ; set A short
.194379		85 0e		sta $032e	                STA DOS_STATUS
.19437b		28		plp		                PLP
.19437c		2b		pld		                PLD
.19437d		ab		plb		                PLB
.19437e		18		clc		                CLC
.19437f		6b		rtl		                RTL
.194380						DOS_FINDFILE
.194380		8b		phb		                PHB
.194381		0b		phd		                PHD
.194382		08		php		                PHP
.194383		48		pha		                PHA             ; begin setdbr macro
.194384		08		php		                PHP
.194385		e2 20		sep #$20	                SEP #$20        ; set A short
.194387		a9 00		lda #$00	                LDA #0
.194389		48		pha		                PHA
.19438a		ab		plb		                PLB
.19438b		28		plp		                PLP
.19438c		68		pla		                PLA             ; end setdbr macro
.19438d		48		pha		                PHA             ; begin setdp macro
.19438e		08		php		                PHP
.19438f		c2 20		rep #$20	                REP #$20        ; set A long
.194391		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194394		5b		tcd		                TCD
.194395		28		plp		                PLP
.194396		68		pla		                PLA             ; end setdp macro
.194397		c2 30		rep #$30	                REP #$30        ; set A&X long
.194399		22 e8 42 19	jsl $1942e8	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.19439d		b0 05		bcs $1943a4	                BCS mount                       ; If success: try to open the directory
.19439f		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.1943a0		2b		pld		                PLD
.1943a1		ab		plb		                PLB
.1943a2		18		clc		                CLC
.1943a3		6b		rtl		                RTL
.1943a4		22 02 3f 19	jsl $193f02	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.1943a8		b0 07		bcs $1943b1	                BCS get_directory
.1943aa		e2 20		sep #$20	                SEP #$20        ; set A short
.1943ac		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.1943ae		82 56 00	brl $194407	                BRL ret_failure
.1943b1						get_directory
.1943b1		c2 20		rep #$20	                REP #$20        ; set A long
.1943b3		22 b7 3b 19	jsl $193bb7	                JSL DOS_DIROPEN                 ; Get the directory
.1943b7		b0 07		bcs $1943c0	                BCS scan_entries                ; If success: start scanning the directory entries
.1943b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1943bb		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.1943bd		82 47 00	brl $194407	                BRL ret_failure
.1943c0		22 36 3c 19	jsl $193c36	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.1943c4						scan_loop
.1943c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1943c6		a0 00 00	ldy #$0000	                LDY #0
.1943c9		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.1943cb		d0 05		bne $1943d2	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.1943cd		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.1943cf		82 35 00	brl $194407	                BRL ret_failure
.1943d2		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.1943d4		f0 26		beq $1943fc	                BEQ next_entry                  ; Go to the next entry
.1943d6		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.1943d9		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1943db		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.1943dd		d0 1d		bne $1943fc	                BNE next_entry                  ; Yes: skip it!
.1943df		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.1943e1		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.1943e3		f0 17		beq $1943fc	                BEQ next_entry                  ; Yes: skip it!
.1943e5		a2 00 00	ldx #$0000	                LDX #0
.1943e8		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.1943eb		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.1943ed		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.1943f1		d0 09		bne $1943fc	                BNE next_entry                  ; If not equal: try the next entry
.1943f3		c8		iny		                INY                             ; Advance to the next character
.1943f4		e8		inx		                INX
.1943f5		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.1943f8		f0 16		beq $194410	                BEQ match                       ; Yes: we have a match!
.1943fa		80 ef		bra $1943eb	                BRA scan_cmp_loop               ; No: keep checking
.1943fc		22 51 3c 19	jsl $193c51	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.194400		90 05		bcc $194407	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.194402		82 bf ff	brl $1943c4	                BRL scan_loop                   ; If found: keep scanning
.194405		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.194407						ret_failure
.194407		e2 20		sep #$20	                SEP #$20        ; set A short
.194409		85 0e		sta $032e	                STA DOS_STATUS
.19440b		28		plp		                PLP
.19440c		2b		pld		                PLD
.19440d		ab		plb		                PLB
.19440e		18		clc		                CLC
.19440f		6b		rtl		                RTL
.194410						match
.194410		c2 20		rep #$20	                REP #$20        ; set A long
.194412		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.194415		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194417		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.194419		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.19441c		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19441e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194420						ret_success
.194420		e2 20		sep #$20	                SEP #$20        ; set A short
.194422		64 0e		stz $032e	                STZ DOS_STATUS
.194424		28		plp		                PLP
.194425		2b		pld		                PLD
.194426		ab		plb		                PLB
.194427		38		sec		                SEC
.194428		6b		rtl		                RTL
.194429						DOS_READFILE
.194429		8b		phb		                PHB
.19442a		0b		phd		                PHD
.19442b		08		php		                PHP
.19442c		48		pha		                PHA             ; begin setdbr macro
.19442d		08		php		                PHP
.19442e		e2 20		sep #$20	                SEP #$20        ; set A short
.194430		a9 00		lda #$00	                LDA #0
.194432		48		pha		                PHA
.194433		ab		plb		                PLB
.194434		28		plp		                PLP
.194435		68		pla		                PLA             ; end setdbr macro
.194436		48		pha		                PHA             ; begin setdp macro
.194437		08		php		                PHP
.194438		c2 20		rep #$20	                REP #$20        ; set A long
.19443a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19443d		5b		tcd		                TCD
.19443e		28		plp		                PLP
.19443f		68		pla		                PLA             ; end setdp macro
.194440		c2 30		rep #$30	                REP #$30        ; set A&X long
.194442		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.194444		48		pha		                PHA
.194445		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.194447		48		pha		                PHA
.194448		22 80 43 19	jsl $194380	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.19444c		68		pla		                PLA
.19444d		85 1c		sta $033c	                STA DOS_BUFF_PTR
.19444f		68		pla		                PLA
.194450		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194452		90 0f		bcc $194463	                BCC pass_failure                    ; If found: try to load the cluster
.194454		22 9a 41 19	jsl $19419a	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.194458		90 09		bcc $194463	                BCC pass_failure                    ; If there's an error... pass it up the chain
.19445a						ret_success
.19445a		e2 20		sep #$20	                SEP #$20        ; set A short
.19445c		64 0e		stz $032e	                STZ DOS_STATUS
.19445e		28		plp		                PLP
.19445f		2b		pld		                PLD
.194460		ab		plb		                PLB
.194461		38		sec		                SEC
.194462		6b		rtl		                RTL
.194463		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.194464		2b		pld		                PLD
.194465		ab		plb		                PLB
.194466		18		clc		                CLC
.194467		6b		rtl		                RTL
.194468						ENTRYFORCLUS12
.194468		8b		phb		                PHB
.194469		0b		phd		                PHD
.19446a		08		php		                PHP
.19446b		48		pha		                PHA             ; begin setdbr macro
.19446c		08		php		                PHP
.19446d		e2 20		sep #$20	                SEP #$20        ; set A short
.19446f		a9 00		lda #$00	                LDA #0
.194471		48		pha		                PHA
.194472		ab		plb		                PLB
.194473		28		plp		                PLP
.194474		68		pla		                PLA             ; end setdbr macro
.194475		48		pha		                PHA             ; begin setdp macro
.194476		08		php		                PHP
.194477		c2 20		rep #$20	                REP #$20        ; set A long
.194479		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19447c		5b		tcd		                TCD
.19447d		28		plp		                PLP
.19447e		68		pla		                PLA             ; end setdp macro
.19447f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194481		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.194483		0a		asl a		                ASL A
.194484		85 28		sta $0348	                STA DOS_TEMP
.194486		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194488		2a		rol a		                ROL A
.194489		85 2a		sta $034a	                STA DOS_TEMP+2
.19448b		18		clc		                CLC
.19448c		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19448e		65 28		adc $0348	                ADC DOS_TEMP
.194490		85 28		sta $0348	                STA DOS_TEMP
.194492		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194494		65 2a		adc $034a	                ADC DOS_TEMP+2
.194496		85 2a		sta $034a	                STA DOS_TEMP+2
.194498		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.19449a		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.19449c		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.19449e		29 ff 03	and #$03ff	                AND #$003FF
.1944a1		aa		tax		                TAX
.1944a2		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944a4		66 28		ror $0348	                ROR DOS_TEMP
.1944a6		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944a8		66 28		ror $0348	                ROR DOS_TEMP
.1944aa		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944ac		66 28		ror $0348	                ROR DOS_TEMP
.1944ae		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944b0		66 28		ror $0348	                ROR DOS_TEMP
.1944b2		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944b4		66 28		ror $0348	                ROR DOS_TEMP
.1944b6		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944b8		66 28		ror $0348	                ROR DOS_TEMP
.1944ba		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944bc		66 28		ror $0348	                ROR DOS_TEMP
.1944be		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944c0		66 28		ror $0348	                ROR DOS_TEMP
.1944c2		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944c4		66 28		ror $0348	                ROR DOS_TEMP
.1944c6		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.1944c7		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.1944cb		65 28		adc $0348	                ADC DOS_TEMP
.1944cd		85 24		sta $0344	                STA DOS_FAT_LBA
.1944cf		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1944d3		65 2a		adc $034a	                ADC DOS_TEMP+2
.1944d5		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1944d7		28		plp		                PLP
.1944d8		2b		pld		                PLD
.1944d9		ab		plb		                PLB
.1944da		6b		rtl		                RTL
.1944db						FATFORCLUSTER12
.1944db		8b		phb		                PHB
.1944dc		0b		phd		                PHD
.1944dd		08		php		                PHP
.1944de		48		pha		                PHA             ; begin setdbr macro
.1944df		08		php		                PHP
.1944e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1944e2		a9 00		lda #$00	                LDA #0
.1944e4		48		pha		                PHA
.1944e5		ab		plb		                PLB
.1944e6		28		plp		                PLP
.1944e7		68		pla		                PLA             ; end setdbr macro
.1944e8		48		pha		                PHA             ; begin setdp macro
.1944e9		08		php		                PHP
.1944ea		c2 20		rep #$20	                REP #$20        ; set A long
.1944ec		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1944ef		5b		tcd		                TCD
.1944f0		28		plp		                PLP
.1944f1		68		pla		                PLA             ; end setdp macro
.1944f2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1944f4		a2 00 00	ldx #$0000	                LDX #0
.1944f7		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.1944fa		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.1944fe		e8		inx		                INX
.1944ff		e8		inx		                INX
.194500		e0 00 04	cpx #$0400	                CPX #1024
.194503		d0 f5		bne $1944fa	                BNE clr_loop
.194505		22 68 44 19	jsl $194468	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.194509		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.19450b		85 02		sta $0322	                STA BIOS_LBA
.19450d		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19450f		85 04		sta $0324	                STA BIOS_LBA+2
.194511		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.194514		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194516		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194519		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19451b		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.19451f		90 17		bcc $194538	                BCC error
.194521		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.194523		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.194526		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194528		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19452b		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19452d		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194531		90 05		bcc $194538	                BCC error
.194533		28		plp		                PLP
.194534		2b		pld		                PLD
.194535		ab		plb		                PLB
.194536		38		sec		                SEC
.194537		6b		rtl		                RTL
.194538						error
.194538		e2 20		sep #$20	                SEP #$20        ; set A short
.19453a		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19453c		85 0e		sta $032e	                STA DOS_STATUS
.19453e		28		plp		                PLP
.19453f		2b		pld		                PLD
.194540		ab		plb		                PLB
.194541		18		clc		                CLC
.194542		6b		rtl		                RTL
.194543						FATFORCLUSTER32
.194543		8b		phb		                PHB
.194544		0b		phd		                PHD
.194545		48		pha		                PHA             ; begin setdbr macro
.194546		08		php		                PHP
.194547		e2 20		sep #$20	                SEP #$20        ; set A short
.194549		a9 00		lda #$00	                LDA #0
.19454b		48		pha		                PHA
.19454c		ab		plb		                PLB
.19454d		28		plp		                PLP
.19454e		68		pla		                PLA             ; end setdbr macro
.19454f		48		pha		                PHA             ; begin setdp macro
.194550		08		php		                PHP
.194551		c2 20		rep #$20	                REP #$20        ; set A long
.194553		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194556		5b		tcd		                TCD
.194557		28		plp		                PLP
.194558		68		pla		                PLA             ; end setdp macro
.194559		c2 30		rep #$30	                REP #$30        ; set A&X long
.19455b		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19455d		85 24		sta $0344	                STA DOS_FAT_LBA
.19455f		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194561		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194563		a2 07 00	ldx #$0007	                LDX #7
.194566		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.194568		66 24		ror $0344	                ROR DOS_FAT_LBA
.19456a		ca		dex		                DEX
.19456b		d0 f9		bne $194566	                BNE div_loop
.19456d		18		clc		                CLC
.19456e		a5 24		lda $0344	                LDA DOS_FAT_LBA
.194570		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.194574		85 24		sta $0344	                STA DOS_FAT_LBA
.194576		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194578		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.19457c		85 26		sta $0346	                STA DOS_FAT_LBA+2
.19457e		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.194580		85 02		sta $0322	                STA BIOS_LBA
.194582		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194584		85 04		sta $0324	                STA BIOS_LBA+2
.194586		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.194589		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19458b		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19458e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194590		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.194594		b0 06		bcs $19459c	                BCS find_entry
.194596		e2 20		sep #$20	                SEP #$20        ; set A short
.194598		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19459a		80 0e		bra $1945aa	                BRA ret_failure
.19459c						find_entry
.19459c		c2 20		rep #$20	                REP #$20        ; set A long
.19459e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1945a0		0a		asl a		                ASL A
.1945a1		0a		asl a		                ASL A                           ; * 4
.1945a2		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.1945a5		aa		tax		                TAX                             ; X should be the offset within the sector
.1945a6		2b		pld		ret_success     PLD
.1945a7		ab		plb		                PLB
.1945a8		38		sec		                SEC                             ; return success
.1945a9		6b		rtl		                RTL
.1945aa		2b		pld		ret_failure     PLD
.1945ab		ab		plb		                PLB
.1945ac		18		clc		                CLC                             ; Return failure
.1945ad		6b		rtl		                RTL
.1945ae						NEXTCLUSTER
.1945ae		08		php		                PHP
.1945af		e2 20		sep #$20	                SEP #$20        ; set A short
.1945b1		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1945b5		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1945b7		d0 08		bne $1945c1	                BNE fat32                       ; No: assume it's FAT32
.1945b9		22 cf 45 19	jsl $1945cf	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.1945bd		90 0d		bcc $1945cc	                BCC pass_failure                ; If there was an error, pass it up the chain
.1945bf		80 06		bra $1945c7	                BRA ret_success
.1945c1		22 37 46 19	jsl $194637	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.1945c5		90 05		bcc $1945cc	                BCC pass_failure                ; If there was an error, pass it up the chain
.1945c7		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1945c9		28		plp		                PLP
.1945ca		38		sec		                SEC
.1945cb		6b		rtl		                RTL
.1945cc		28		plp		pass_failure    PLP
.1945cd		18		clc		                CLC
.1945ce		6b		rtl		                RTL
.1945cf						NEXTCLUSTER12
.1945cf		8b		phb		                    PHB
.1945d0		0b		phd		                    PHD
.1945d1		08		php		                    PHP
.1945d2		48		pha		                PHA             ; begin setdbr macro
.1945d3		08		php		                PHP
.1945d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1945d6		a9 00		lda #$00	                LDA #0
.1945d8		48		pha		                PHA
.1945d9		ab		plb		                PLB
.1945da		28		plp		                PLP
.1945db		68		pla		                PLA             ; end setdbr macro
.1945dc		48		pha		                PHA             ; begin setdp macro
.1945dd		08		php		                PHP
.1945de		c2 20		rep #$20	                REP #$20        ; set A long
.1945e0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1945e3		5b		tcd		                TCD
.1945e4		28		plp		                PLP
.1945e5		68		pla		                PLA             ; end setdp macro
.1945e6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1945e8		22 db 44 19	jsl $1944db	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.1945ec		b0 03		bcs $1945f1	                    BCS chk_clus_id
.1945ee		82 41 00	brl $194632	                    BRL pass_failure
.1945f1		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.1945f3		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.1945f6		d0 0d		bne $194605	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.1945f8						is_even
.1945f8		c2 20		rep #$20	                REP #$20        ; set A long
.1945fa		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.1945fe		29 ff 0f	and #$0fff	                    AND #$0FFF
.194601		85 28		sta $0348	                    STA DOS_TEMP
.194603		80 0c		bra $194611	                    BRA check_id
.194605						is_odd
.194605		c2 20		rep #$20	                REP #$20        ; set A long
.194607		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.19460b		4a		lsr a		                    LSR A
.19460c		4a		lsr a		                    LSR A
.19460d		4a		lsr a		                    LSR A
.19460e		4a		lsr a		                    LSR A
.19460f		85 28		sta $0348	                    STA DOS_TEMP
.194611						check_id
.194611		c2 20		rep #$20	                REP #$20        ; set A long
.194613		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.194615		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.194618		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.19461b		f0 0f		beq $19462c	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.19461d		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.19461f		85 10		sta $0330	                    STA DOS_CLUS_ID
.194621		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.194623						ret_success
.194623		e2 20		sep #$20	                SEP #$20        ; set A short
.194625		64 0e		stz $032e	                    STZ DOS_STATUS
.194627		28		plp		                    PLP
.194628		2b		pld		                    PLD
.194629		ab		plb		                    PLB
.19462a		38		sec		                    SEC
.19462b		6b		rtl		                    RTL
.19462c						no_more
.19462c		e2 20		sep #$20	                SEP #$20        ; set A short
.19462e		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.194630		85 0e		sta $032e	                    STA DOS_STATUS
.194632		28		plp		pass_failure        PLP
.194633		2b		pld		                    PLD
.194634		ab		plb		                    PLB
.194635		18		clc		                    CLC
.194636		6b		rtl		                    RTL
.194637						NEXTCLUSTER32
.194637		8b		phb		                PHB
.194638		0b		phd		                PHD
.194639		08		php		                PHP
.19463a		48		pha		                PHA             ; begin setdbr macro
.19463b		08		php		                PHP
.19463c		e2 20		sep #$20	                SEP #$20        ; set A short
.19463e		a9 00		lda #$00	                LDA #0
.194640		48		pha		                PHA
.194641		ab		plb		                PLB
.194642		28		plp		                PLP
.194643		68		pla		                PLA             ; end setdbr macro
.194644		48		pha		                PHA             ; begin setdp macro
.194645		08		php		                PHP
.194646		c2 20		rep #$20	                REP #$20        ; set A long
.194648		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19464b		5b		tcd		                TCD
.19464c		28		plp		                PLP
.19464d		68		pla		                PLA             ; end setdp macro
.19464e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194650		22 43 45 19	jsl $194543	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.194654		90 53		bcc $1946a9	                BCC ret_failure                 ; If it did not work, return the error
.194656		e2 20		sep #$20	                SEP #$20        ; set A short
.194658		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.19465c		85 28		sta $0348	                STA DOS_TEMP
.19465e		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.194662		85 29		sta $0349	                STA DOS_TEMP+1
.194664		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.194668		85 2a		sta $034a	                STA DOS_TEMP+2
.19466a		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.19466e		85 2b		sta $034b	                STA DOS_TEMP+3
.194670		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.194672		c9 ff		cmp #$ff	                CMP #$FF
.194674		d0 18		bne $19468e	                BNE found_next
.194676		a5 29		lda $0349	                LDA DOS_TEMP+1
.194678		c9 ff		cmp #$ff	                CMP #$FF
.19467a		d0 12		bne $19468e	                BNE found_next
.19467c		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19467e		c9 ff		cmp #$ff	                CMP #$FF
.194680		d0 0c		bne $19468e	                BNE found_next
.194682		a5 2b		lda $034b	                LDA DOS_TEMP+3
.194684		c9 0f		cmp #$0f	                CMP #$0F
.194686		d0 06		bne $19468e	                BNE found_next                  ; No: return this cluster as the next
.194688		e2 20		sep #$20	                SEP #$20        ; set A short
.19468a		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.19468c		80 1b		bra $1946a9	                BRA ret_failure
.19468e						found_next
.19468e		e2 20		sep #$20	                SEP #$20        ; set A short
.194690		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.194692		85 10		sta $0330	                STA DOS_CLUS_ID
.194694		a5 29		lda $0349	                LDA DOS_TEMP+1
.194696		85 11		sta $0331	                STA DOS_CLUS_ID+1
.194698		a5 2a		lda $034a	                LDA DOS_TEMP+2
.19469a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19469c		a5 2b		lda $034b	                LDA DOS_TEMP+3
.19469e		85 13		sta $0333	                STA DOS_CLUS_ID+3
.1946a0						ret_success
.1946a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1946a2		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.1946a4		28		plp		                PLP
.1946a5		2b		pld		                PLD
.1946a6		ab		plb		                PLB
.1946a7		38		sec		                SEC
.1946a8		6b		rtl		                RTL
.1946a9						ret_failure
.1946a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1946ab		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.1946ad		28		plp		                PLP
.1946ae		2b		pld		                PLD
.1946af		ab		plb		                PLB
.1946b0		18		clc		                CLC
.1946b1		6b		rtl		                RTL
.1946b2						DOS_READNEXT
.1946b2		08		php		                PHP
.1946b3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946b5		22 ae 45 19	jsl $1945ae	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.1946b9		90 09		bcc $1946c4	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.1946bb		22 9a 41 19	jsl $19419a	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.1946bf		90 03		bcc $1946c4	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.1946c1		28		plp		ret_success     PLP
.1946c2		38		sec		                SEC
.1946c3		6b		rtl		                RTL
.1946c4		28		plp		pass_failure    PLP
.1946c5		18		clc		                CLC
.1946c6		6b		rtl		                RTL
.1946c7						DOS_FREECLUS
.1946c7		08		php		                PHP
.1946c8		48		pha		                PHA             ; begin setdp macro
.1946c9		08		php		                PHP
.1946ca		c2 20		rep #$20	                REP #$20        ; set A long
.1946cc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1946cf		5b		tcd		                TCD
.1946d0		28		plp		                PLP
.1946d1		68		pla		                PLA             ; end setdp macro
.1946d2		e2 20		sep #$20	                SEP #$20        ; set A short
.1946d4		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1946d8		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1946da		d0 08		bne $1946e4	                BNE fat32                       ; No: assume it's FAT32
.1946dc		22 58 47 19	jsl $194758	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.1946e0		90 0d		bcc $1946ef	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946e2		80 06		bra $1946ea	                BRA ret_success
.1946e4		22 30 48 19	jsl $194830	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.1946e8		90 05		bcc $1946ef	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946ea		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1946ec		28		plp		                PLP
.1946ed		38		sec		                SEC
.1946ee		6b		rtl		                RTL
.1946ef		28		plp		pass_failure    PLP
.1946f0		18		clc		                CLC
.1946f1		6b		rtl		                RTL
.1946f2						FDC_READ2FAT12
.1946f2		8b		phb		                    PHB
.1946f3		0b		phd		                    PHD
.1946f4		08		php		                    PHP
.1946f5		48		pha		                PHA             ; begin setdbr macro
.1946f6		08		php		                PHP
.1946f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1946f9		a9 00		lda #$00	                LDA #0
.1946fb		48		pha		                PHA
.1946fc		ab		plb		                PLB
.1946fd		28		plp		                PLP
.1946fe		68		pla		                PLA             ; end setdbr macro
.1946ff		48		pha		                PHA             ; begin setdp macro
.194700		08		php		                PHP
.194701		c2 20		rep #$20	                REP #$20        ; set A long
.194703		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194706		5b		tcd		                TCD
.194707		28		plp		                PLP
.194708		68		pla		                PLA             ; end setdp macro
.194709		c2 30		rep #$30	                REP #$30        ; set A&X long
.19470b		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.19470e		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194710		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.194713		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194715		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.194717		85 02		sta $0322	                    STA BIOS_LBA
.194719		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.19471b		85 04		sta $0324	                    STA BIOS_LBA+2
.19471d		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.194721		b0 07		bcs $19472a	                    BCS inc_sect2                   ; If success: start getting the second sector
.194723		e2 20		sep #$20	                SEP #$20        ; set A short
.194725		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194727		82 1c 00	brl $194746	                    BRL ret_failure
.19472a						inc_sect2
.19472a		c2 20		rep #$20	                REP #$20        ; set A long
.19472c		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.19472e		d0 02		bne $194732	                    BNE inc_buff_ptr
.194730		e6 04		inc $0324	                    INC BIOS_LBA+2
.194732		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194735		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194737		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.19473a		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.19473c		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.194740		b0 0d		bcs $19474f	                    BCS ret_success                 ; If success, return success
.194742		e2 20		sep #$20	                SEP #$20        ; set A short
.194744		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.194746						ret_failure
.194746		e2 20		sep #$20	                SEP #$20        ; set A short
.194748		85 00		sta $0320	                    STA BIOS_STATUS
.19474a		28		plp		                    PLP
.19474b		2b		pld		                    PLD
.19474c		ab		plb		                    PLB
.19474d		18		clc		                    CLC
.19474e		6b		rtl		                    RTL
.19474f						ret_success
.19474f		e2 20		sep #$20	                SEP #$20        ; set A short
.194751		64 00		stz $0320	                    STZ BIOS_STATUS
.194753		28		plp		                    PLP
.194754		2b		pld		                    PLD
.194755		ab		plb		                    PLB
.194756		38		sec		                    SEC
.194757		6b		rtl		                    RTL
.194758						DOS_FREECLUS12
.194758		da		phx		                PHX
.194759		8b		phb		                PHB
.19475a		0b		phd		                PHD
.19475b		08		php		                PHP
.19475c		48		pha		                PHA             ; begin setdbr macro
.19475d		08		php		                PHP
.19475e		e2 20		sep #$20	                SEP #$20        ; set A short
.194760		a9 00		lda #$00	                LDA #0
.194762		48		pha		                PHA
.194763		ab		plb		                PLB
.194764		28		plp		                PLP
.194765		68		pla		                PLA             ; end setdbr macro
.194766		48		pha		                PHA             ; begin setdp macro
.194767		08		php		                PHP
.194768		c2 20		rep #$20	                REP #$20        ; set A long
.19476a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19476d		5b		tcd		                TCD
.19476e		28		plp		                PLP
.19476f		68		pla		                PLA             ; end setdp macro
.194770		c2 30		rep #$30	                REP #$30        ; set A&X long
.194772		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.194775		85 10		sta $0330	                STA DOS_CLUS_ID
.194777		a9 00 00	lda #$0000	                LDA #0
.19477a		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19477c		22 68 44 19	jsl $194468	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.194780		22 f2 46 19	jsl $1946f2	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.194784		b0 07		bcs $19478d	                BCS start_of_fat                ; If success, move X to the start of the FAT
.194786		e2 20		sep #$20	                SEP #$20        ; set A short
.194788		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19478a		82 99 00	brl $194826	                BRL ret_failure
.19478d						start_of_fat
.19478d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19478f		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.194791		89 01 00	bit #$0001	                BIT #1
.194794		d0 09		bne $19479f	                BNE is_odd
.194796		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.19479a		29 ff 0f	and #$0fff	                AND #$0FFF
.19479d		80 08		bra $1947a7	                BRA chk_available
.19479f		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.1947a3		4a		lsr a		                LSR A
.1947a4		4a		lsr a		                LSR A
.1947a5		4a		lsr a		                LSR A
.1947a6		4a		lsr a		                LSR A
.1947a7						chk_available
.1947a7		85 28		sta $0348	                STA DOS_TEMP
.1947a9		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.1947ac		f0 03		beq $1947b1	                BEQ chk_found
.1947ae		82 39 00	brl $1947ea	                BRL next_cluster                ; No: advance to the next cluster
.1947b1		8a		txa		chk_found       TXA
.1947b2		85 2a		sta $034a	                STA DOS_TEMP+2
.1947b4		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.1947b6		89 01 00	bit #$0001	                BIT #1
.1947b9		d0 0d		bne $1947c8	                BNE is_odd2
.1947bb						is_even2
.1947bb		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.1947bf		09 ff 0f	ora #$0fff	                ORA #$0FFF
.1947c2		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1947c6		80 0b		bra $1947d3	                BRA write_fat
.1947c8						is_odd2
.1947c8		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.1947cc		09 f0 ff	ora #$fff0	                ORA #$FFF0
.1947cf		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1947d3		22 fa 48 19	jsl $1948fa	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.1947d7		b0 07		bcs $1947e0	                BCS ret_success                 ; If success: return success
.1947d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1947db		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.1947dd		82 46 00	brl $194826	                BRL ret_failure
.1947e0						ret_success
.1947e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1947e2		64 0e		stz $032e	                STZ DOS_STATUS
.1947e4		28		plp		                PLP
.1947e5		2b		pld		                PLD
.1947e6		ab		plb		                PLB
.1947e7		fa		plx		                PLX
.1947e8		38		sec		                SEC
.1947e9		6b		rtl		                RTL
.1947ea						next_cluster
.1947ea		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.1947ec		d0 02		bne $1947f0	                BNE calc_entry
.1947ee		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.1947f0		22 68 44 19	jsl $194468	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.1947f4		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.1947f7		f0 03		beq $1947fc	                BEQ chk_end_of_fat
.1947f9		82 93 ff	brl $19478f	                BRL chk_cluster                 ; No: go back and check it too
.1947fc						chk_end_of_fat
.1947fc		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.1947fe		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.194802		d0 0f		bne $194813	                BNE next_2
.194804		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194806		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.19480a		d0 07		bne $194813	                BNE next_2                      ; No: get the next to sectors
.19480c		e2 20		sep #$20	                SEP #$20        ; set A short
.19480e		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.194810		82 13 00	brl $194826	                BRL ret_failure
.194813						next_2
.194813		22 f2 46 19	jsl $1946f2	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.194817		90 06		bcc $19481f	                BCC fat_fail                    ; If failed: return error
.194819		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.19481c		82 70 ff	brl $19478f	                BRL chk_cluster                 ; And start checking from there
.19481f						fat_fail
.19481f		e2 20		sep #$20	                SEP #$20        ; set A short
.194821		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194823		82 00 00	brl $194826	                BRL ret_failure
.194826						ret_failure
.194826		e2 20		sep #$20	                SEP #$20        ; set A short
.194828		85 0e		sta $032e	                STA DOS_STATUS
.19482a		28		plp		                PLP
.19482b		2b		pld		                PLD
.19482c		ab		plb		                PLB
.19482d		fa		plx		                PLX
.19482e		18		clc		                CLC
.19482f		6b		rtl		                RTL
.194830						DOS_FREECLUS32
.194830		8b		phb		                PHB
.194831		0b		phd		                PHD
.194832		08		php		                PHP
.194833		48		pha		                PHA             ; begin setdbr macro
.194834		08		php		                PHP
.194835		e2 20		sep #$20	                SEP #$20        ; set A short
.194837		a9 00		lda #$00	                LDA #0
.194839		48		pha		                PHA
.19483a		ab		plb		                PLB
.19483b		28		plp		                PLP
.19483c		68		pla		                PLA             ; end setdbr macro
.19483d		48		pha		                PHA             ; begin setdp macro
.19483e		08		php		                PHP
.19483f		c2 20		rep #$20	                REP #$20        ; set A long
.194841		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194844		5b		tcd		                TCD
.194845		28		plp		                PLP
.194846		68		pla		                PLA             ; end setdp macro
.194847		c2 30		rep #$30	                REP #$30        ; set A&X long
.194849		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.19484c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19484e		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194851		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194853		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.194857		85 02		sta $0322	                STA BIOS_LBA
.194859		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.19485d		85 04		sta $0324	                STA BIOS_LBA+2
.19485f		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.194863		b0 07		bcs $19486c	                BCS initial_entry               ; If OK: set the initial entry to check
.194865		e2 20		sep #$20	                SEP #$20        ; set A short
.194867		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.194869		82 6b 00	brl $1948d7	                BRL ret_failure
.19486c						initial_entry
.19486c		c2 20		rep #$20	                REP #$20        ; set A long
.19486e		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.194871		85 10		sta $0330	                STA DOS_CLUS_ID
.194873		a9 00 00	lda #$0000	                LDA #0
.194876		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194878		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.19487b		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.19487f		d0 06		bne $194887	                BNE next_entry                  ; No: move to the next entry
.194881		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.194885		f0 36		beq $1948bd	                BEQ found_free                  ; Yes: go to allocate and return it
.194887		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.194889		d0 02		bne $19488d	                BNE inc_ptr
.19488b		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.19488d		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.19488e		e8		inx		                INX
.19488f		e8		inx		                INX
.194890		e8		inx		                INX
.194891		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.194894		90 e5		bcc $19487b	                BLT chk_entry                   ; No: check this entry
.194896		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194898		d0 18		bne $1948b2	                BNE get_block
.19489a		e6 04		inc $0324	                INC BIOS_LBA+2
.19489c		a5 04		lda $0324	                LDA BIOS_LBA+2
.19489e		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.1948a2		90 0e		bcc $1948b2	                BLT get_block
.1948a4		a5 02		lda $0322	                LDA BIOS_LBA
.1948a6		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.1948aa		90 06		bcc $1948b2	                BLT get_block
.1948ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1948ae		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.1948b0		80 25		bra $1948d7	                BRA ret_failure
.1948b2		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.1948b6		90 1b		bcc $1948d3	                BCC ret_fat_error               ; If error: throw a FAT error
.1948b8		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.1948bb		80 be		bra $19487b	                BRA chk_entry                   ; Check this entry
.1948bd						found_free
.1948bd		c2 20		rep #$20	                REP #$20        ; set A long
.1948bf		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.1948c2		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.1948c6		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.1948c9		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.1948cd		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1948d1		b0 0d		bcs $1948e0	                BCS ret_success                 ; If OK: return success
.1948d3						ret_fat_error
.1948d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1948d5		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.1948d7						ret_failure
.1948d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1948d9		85 0e		sta $032e	                STA DOS_STATUS
.1948db		28		plp		                PLP
.1948dc		2b		pld		                PLD
.1948dd		ab		plb		                PLB
.1948de		18		clc		                CLC
.1948df		6b		rtl		                RTL
.1948e0						ret_success
.1948e0		e2 20		sep #$20	                SEP #$20        ; set A short
.1948e2		64 0e		stz $032e	                STZ DOS_STATUS
.1948e4		28		plp		                PLP
.1948e5		2b		pld		                PLD
.1948e6		ab		plb		                PLB
.1948e7		38		sec		                SEC
.1948e8		6b		rtl		                RTL
.1948e9						DELCLUSTER
.1948e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1948eb		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1948ef		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1948f1		d0 04		bne $1948f7	                BNE fat32                       ; No: assume it's FAT32
.1948f3		5c 41 49 19	jmp $194941	fat12           JML DELCLUSTER12
.1948f7		4c 8f 49	jmp $19498f	fat32           JMP DELCLUSTER32
.1948fa						WRITEFAT12
.1948fa		8b		phb		                PHB
.1948fb		0b		phd		                PHD
.1948fc		48		pha		                PHA             ; begin setdbr macro
.1948fd		08		php		                PHP
.1948fe		e2 20		sep #$20	                SEP #$20        ; set A short
.194900		a9 00		lda #$00	                LDA #0
.194902		48		pha		                PHA
.194903		ab		plb		                PLB
.194904		28		plp		                PLP
.194905		68		pla		                PLA             ; end setdbr macro
.194906		48		pha		                PHA             ; begin setdp macro
.194907		08		php		                PHP
.194908		c2 20		rep #$20	                REP #$20        ; set A long
.19490a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19490d		5b		tcd		                TCD
.19490e		28		plp		                PLP
.19490f		68		pla		                PLA             ; end setdp macro
.194910		c2 30		rep #$30	                REP #$30        ; set A&X long
.194912		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.194915		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194917		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19491a		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19491c		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.19491e		85 02		sta $0322	                STA BIOS_LBA
.194920		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194922		85 04		sta $0324	                STA BIOS_LBA+2
.194924		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.194928		90 14		bcc $19493e	                BCC done
.19492a		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.19492d		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19492f		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194932		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194934		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.194936		d0 02		bne $19493a	                BNE put_second
.194938		e6 04		inc $0324	                INC BIOS_LBA+2
.19493a		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.19493e		2b		pld		done            PLD
.19493f		ab		plb		                PLB
.194940		6b		rtl		                RTL
.194941						DELCLUSTER12
.194941		8b		phb		                PHB
.194942		0b		phd		                PHD
.194943		08		php		                PHP
.194944		48		pha		                PHA             ; begin setdbr macro
.194945		08		php		                PHP
.194946		e2 20		sep #$20	                SEP #$20        ; set A short
.194948		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19494a		48		pha		                PHA
.19494b		ab		plb		                PLB
.19494c		28		plp		                PLP
.19494d		68		pla		                PLA             ; end setdbr macro
.19494e		48		pha		                PHA             ; begin setdp macro
.19494f		08		php		                PHP
.194950		c2 20		rep #$20	                REP #$20        ; set A long
.194952		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194955		5b		tcd		                TCD
.194956		28		plp		                PLP
.194957		68		pla		                PLA             ; end setdp macro
.194958		c2 30		rep #$30	                REP #$30        ; set A&X long
.19495a		22 db 44 19	jsl $1944db	                JSL FATFORCLUSTER12
.19495e		8a		txa		                TXA                             ; Check to see if the index is odd or even
.19495f		89 01 00	bit #$0001	                BIT #1
.194962		d0 08		bne $19496c	                BNE is_odd
.194964		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194967		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.19496a		80 06		bra $194972	                BRA save_update
.19496c		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.19496f		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.194972		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.194975		22 fa 48 19	jsl $1948fa	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194979		b0 0b		bcs $194986	                BCS ret_success
.19497b						ret_failure
.19497b		e2 20		sep #$20	                SEP #$20        ; set A short
.19497d		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.19497f		85 0e		sta $032e	                STA DOS_STATUS
.194981		28		plp		                PLP
.194982		2b		pld		                PLD
.194983		ab		plb		                PLB
.194984		18		clc		                CLC
.194985		6b		rtl		                RTL
.194986						ret_success
.194986		e2 20		sep #$20	                SEP #$20        ; set A short
.194988		64 0e		stz $032e	                STZ DOS_STATUS
.19498a		28		plp		                PLP
.19498b		2b		pld		                PLD
.19498c		ab		plb		                PLB
.19498d		38		sec		                SEC
.19498e		6b		rtl		                RTL
.19498f						DELCLUSTER32
.19498f		8b		phb		                PHB
.194990		0b		phd		                PHD
.194991		08		php		                PHP
.194992		c2 30		rep #$30	                REP #$30        ; set A&X long
.194994		48		pha		                PHA             ; begin setdbr macro
.194995		08		php		                PHP
.194996		e2 20		sep #$20	                SEP #$20        ; set A short
.194998		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19499a		48		pha		                PHA
.19499b		ab		plb		                PLB
.19499c		28		plp		                PLP
.19499d		68		pla		                PLA             ; end setdbr macro
.19499e		48		pha		                PHA             ; begin setdp macro
.19499f		08		php		                PHP
.1949a0		c2 20		rep #$20	                REP #$20        ; set A long
.1949a2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949a5		5b		tcd		                TCD
.1949a6		28		plp		                PLP
.1949a7		68		pla		                PLA             ; end setdp macro
.1949a8		22 43 45 19	jsl $194543	                JSL FATFORCLUSTER32
.1949ac		a9 00 00	lda #$0000	                LDA #0
.1949af		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.1949b2		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.1949b5		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1949b9		b0 0b		bcs $1949c6	                BCS ret_success
.1949bb						ret_failure
.1949bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1949bd		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1949bf		85 0e		sta $032e	                STA DOS_STATUS
.1949c1		28		plp		                PLP
.1949c2		2b		pld		                PLD
.1949c3		ab		plb		                PLB
.1949c4		18		clc		                CLC
.1949c5		6b		rtl		                RTL
.1949c6						ret_success
.1949c6		e2 20		sep #$20	                SEP #$20        ; set A short
.1949c8		64 0e		stz $032e	                STZ DOS_STATUS
.1949ca		28		plp		                PLP
.1949cb		2b		pld		                PLD
.1949cc		ab		plb		                PLB
.1949cd		38		sec		                SEC
.1949ce		6b		rtl		                RTL
.1949cf						DOS_APPENDCLUS
.1949cf		8b		phb		                PHB
.1949d0		0b		phd		                PHD
.1949d1		08		php		                PHP
.1949d2		48		pha		                PHA             ; begin setdbr macro
.1949d3		08		php		                PHP
.1949d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1949d6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1949d8		48		pha		                PHA
.1949d9		ab		plb		                PLB
.1949da		28		plp		                PLP
.1949db		68		pla		                PLA             ; end setdbr macro
.1949dc		48		pha		                PHA             ; begin setdp macro
.1949dd		08		php		                PHP
.1949de		c2 20		rep #$20	                REP #$20        ; set A long
.1949e0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949e3		5b		tcd		                TCD
.1949e4		28		plp		                PLP
.1949e5		68		pla		                PLA             ; end setdp macro
.1949e6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949e8		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.1949ea		48		pha		                PHA
.1949eb		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1949ed		48		pha		                PHA
.1949ee		22 c7 46 19	jsl $1946c7	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.1949f2		b0 09		bcs $1949fd	                BCS save_cluster                ; If we got a cluster, write the data to it
.1949f4		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.1949f5		85 10		sta $0330	                STA DOS_CLUS_ID
.1949f7		68		pla		                PLA
.1949f8		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1949fa		82 7d 00	brl $194a7a	                BRL pass_failure                ; Pass the failure back up the chain
.1949fd		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.1949ff		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a02		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194a04		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.194a07		22 d7 41 19	jsl $1941d7	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.194a0b		90 e7		bcc $1949f4	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.194a0d		68		pla		                PLA                             ; Restore the cluster of the file
.194a0e		85 10		sta $0330	                STA DOS_CLUS_ID
.194a10		68		pla		                PLA
.194a11		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194a13		22 ae 45 19	jsl $1945ae	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.194a17		b0 fa		bcs $194a13	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.194a19		e2 20		sep #$20	                SEP #$20        ; set A short
.194a1b		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194a1f		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194a21		d0 3d		bne $194a60	                BNE fat32                       ; No: assume it's FAT32
.194a23						fat12
.194a23		c2 20		rep #$20	                REP #$20        ; set A long
.194a25		22 68 44 19	jsl $194468	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.194a29		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.194a2b		89 01 00	bit #$0001	                BIT #1
.194a2e		d0 11		bne $194a41	                BNE is_odd
.194a30		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.194a33		29 ff 0f	and #$0fff	                AND #$0FFF
.194a36		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a39		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a3c		29 00 f0	and #$f000	                AND #$F000
.194a3f		80 10		bra $194a51	                BRA update_fat12
.194a41		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194a44		0a		asl a		                ASL A
.194a45		0a		asl a		                ASL A
.194a46		0a		asl a		                ASL A
.194a47		0a		asl a		                ASL A
.194a48		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a4b		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a4e		29 0f 00	and #$000f	                AND #$000F
.194a51		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194a54		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a57		22 fa 48 19	jsl $1948fa	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194a5b		b0 22		bcs $194a7f	                BCS ret_success
.194a5d		82 1a 00	brl $194a7a	                BRL pass_failure
.194a60						fat32
.194a60		c2 20		rep #$20	                REP #$20        ; set A long
.194a62		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194a65		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a68		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194a6b		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194a6e		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.194a72		b0 0b		bcs $194a7f	                BCS ret_success
.194a74		e2 20		sep #$20	                SEP #$20        ; set A short
.194a76		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.194a78		85 0e		sta $032e	                STA DOS_STATUS
.194a7a		28		plp		pass_failure    PLP
.194a7b		2b		pld		                PLD
.194a7c		ab		plb		                PLB
.194a7d		18		clc		                CLC
.194a7e		6b		rtl		                RTL
.194a7f						ret_success
.194a7f		e2 20		sep #$20	                SEP #$20        ; set A short
.194a81		64 0e		stz $032e	                STZ DOS_STATUS
.194a83		28		plp		                PLP
.194a84		2b		pld		                PLD
.194a85		ab		plb		                PLB
.194a86		38		sec		                SEC
.194a87		6b		rtl		                RTL
.194a88						BCD2BIN
.194a88		8b		phb		                PHB
.194a89		0b		phd		                PHD
.194a8a		08		php		                PHP
.194a8b		48		pha		                PHA             ; begin setdbr macro
.194a8c		08		php		                PHP
.194a8d		e2 20		sep #$20	                SEP #$20        ; set A short
.194a8f		a9 00		lda #$00	                LDA #0
.194a91		48		pha		                PHA
.194a92		ab		plb		                PLB
.194a93		28		plp		                PLP
.194a94		68		pla		                PLA             ; end setdbr macro
.194a95		48		pha		                PHA             ; begin setdp macro
.194a96		08		php		                PHP
.194a97		c2 20		rep #$20	                REP #$20        ; set A long
.194a99		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194a9c		5b		tcd		                TCD
.194a9d		28		plp		                PLP
.194a9e		68		pla		                PLA             ; end setdp macro
.194a9f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194aa1		85 28		sta $0348	                STA DOS_TEMP
.194aa3		29 0f 00	and #$000f	                AND #$000F
.194aa6		85 2a		sta $034a	                STA DOS_TEMP+2
.194aa8		a5 28		lda $0348	                LDA DOS_TEMP
.194aaa		4a		lsr a		                LSR A
.194aab		4a		lsr a		                LSR A
.194aac		4a		lsr a		                LSR A
.194aad		4a		lsr a		                LSR A
.194aae		85 28		sta $0348	                STA DOS_TEMP
.194ab0		29 0f 00	and #$000f	                AND #$000F
.194ab3		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194ab7		a9 0a 00	lda #$000a	                LDA #10
.194aba		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194abe		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194ac2		18		clc		                CLC
.194ac3		65 2a		adc $034a	                ADC DOS_TEMP+2
.194ac5		85 2a		sta $034a	                STA DOS_TEMP+2
.194ac7		a5 28		lda $0348	                LDA DOS_TEMP
.194ac9		4a		lsr a		                LSR A
.194aca		4a		lsr a		                LSR A
.194acb		4a		lsr a		                LSR A
.194acc		4a		lsr a		                LSR A
.194acd		85 28		sta $0348	                STA DOS_TEMP
.194acf		29 0f 00	and #$000f	                AND #$000F
.194ad2		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194ad6		a9 64 00	lda #$0064	                LDA #100
.194ad9		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194add		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194ae1		18		clc		                CLC
.194ae2		65 2a		adc $034a	                ADC DOS_TEMP+2
.194ae4		85 2a		sta $034a	                STA DOS_TEMP+2
.194ae6		a5 28		lda $0348	                LDA DOS_TEMP
.194ae8		4a		lsr a		                LSR A
.194ae9		4a		lsr a		                LSR A
.194aea		4a		lsr a		                LSR A
.194aeb		4a		lsr a		                LSR A
.194aec		29 0f 00	and #$000f	                AND #$000F
.194aef		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194af3		a9 e8 03	lda #$03e8	                LDA #1000
.194af6		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194afa		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194afe		18		clc		                CLC
.194aff		65 2a		adc $034a	                ADC DOS_TEMP+2
.194b01		28		plp		                PLP
.194b02		2b		pld		                PLD
.194b03		ab		plb		                PLB
.194b04		6b		rtl		                RTL
.194b05						DOS_RTCCREATE
.194b05		8b		phb		                PHB
.194b06		0b		phd		                PHD
.194b07		08		php		                PHP
.194b08		48		pha		                PHA             ; begin setdbr macro
.194b09		08		php		                PHP
.194b0a		e2 20		sep #$20	                SEP #$20        ; set A short
.194b0c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194b0e		48		pha		                PHA
.194b0f		ab		plb		                PLB
.194b10		28		plp		                PLP
.194b11		68		pla		                PLA             ; end setdbr macro
.194b12		48		pha		                PHA             ; begin setdp macro
.194b13		08		php		                PHP
.194b14		c2 20		rep #$20	                REP #$20        ; set A long
.194b16		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b19		5b		tcd		                TCD
.194b1a		28		plp		                PLP
.194b1b		68		pla		                PLA             ; end setdp macro
.194b1c		c2 10		rep #$10	                REP #$10        ; set X long
.194b1e		e2 20		sep #$20	                SEP #$20        ; set A short
.194b20		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.194b24		09 08		ora #$08	                ORA #%00001000
.194b26		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194b2a		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.194b2e		85 29		sta $0349	                STA DOS_TEMP+1
.194b30		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.194b34		85 28		sta $0348	                STA DOS_TEMP
.194b36		c2 20		rep #$20	                REP #$20        ; set A long
.194b38		a5 28		lda $0348	                LDA DOS_TEMP
.194b3a		22 88 4a 19	jsl $194a88	                JSL BCD2BIN                 ; Convert it to binary
.194b3e		85 28		sta $0348	                STA DOS_TEMP
.194b40		38		sec		                SEC                         ; Year is relative to 1980
.194b41		e9 bc 07	sbc #$07bc	                SBC #1980
.194b44		c2 20		rep #$20	                REP #$20        ; set A long
.194b46		0a		asl a		                ASL A
.194b47		0a		asl a		                ASL A
.194b48		0a		asl a		                ASL A
.194b49		0a		asl a		                ASL A
.194b4a		0a		asl a		                ASL A
.194b4b		0a		asl a		                ASL A
.194b4c		0a		asl a		                ASL A
.194b4d		0a		asl a		                ASL A
.194b4e		0a		asl a		                ASL A
.194b4f		29 00 fe	and #$fe00	                AND #$FE00
.194b52		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b55		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b57		e2 20		sep #$20	                SEP #$20        ; set A short
.194b59		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.194b5d		c2 20		rep #$20	                REP #$20        ; set A long
.194b5f		29 ff 00	and #$00ff	                AND #$00FF
.194b62		22 88 4a 19	jsl $194a88	                JSL BCD2BIN                 ; Convert it to binary
.194b66		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.194b69		0a		asl a		                ASL A
.194b6a		0a		asl a		                ASL A
.194b6b		0a		asl a		                ASL A
.194b6c		0a		asl a		                ASL A
.194b6d		0a		asl a		                ASL A
.194b6e		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.194b71		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b74		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194b76		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b78		e2 20		sep #$20	                SEP #$20        ; set A short
.194b7a		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.194b7e		c2 20		rep #$20	                REP #$20        ; set A long
.194b80		29 ff 00	and #$00ff	                AND #$00FF
.194b83		22 88 4a 19	jsl $194a88	                JSL BCD2BIN                 ; Convert it to binary
.194b87		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.194b8a		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b8d		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194b8f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b91		e2 20		sep #$20	                SEP #$20        ; set A short
.194b93		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.194b97		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.194b99		c2 20		rep #$20	                REP #$20        ; set A long
.194b9b		29 ff 00	and #$00ff	                AND #$00FF
.194b9e		22 88 4a 19	jsl $194a88	                JSL BCD2BIN                 ; Convert it to binary
.194ba2		c2 20		rep #$20	                REP #$20        ; set A long
.194ba4		0a		asl a		                ASL A
.194ba5		0a		asl a		                ASL A
.194ba6		0a		asl a		                ASL A
.194ba7		0a		asl a		                ASL A
.194ba8		0a		asl a		                ASL A
.194ba9		0a		asl a		                ASL A
.194baa		0a		asl a		                ASL A
.194bab		0a		asl a		                ASL A
.194bac		0a		asl a		                ASL A
.194bad		0a		asl a		                ASL A
.194bae		0a		asl a		                ASL A
.194baf		29 00 f8	and #$f800	                AND #$F800
.194bb2		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194bb5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bb7		e2 20		sep #$20	                SEP #$20        ; set A short
.194bb9		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.194bbd		c2 20		rep #$20	                REP #$20        ; set A long
.194bbf		29 ff 00	and #$00ff	                AND #$00FF
.194bc2		22 88 4a 19	jsl $194a88	                JSL BCD2BIN                 ; Convert it to binary
.194bc6		c2 20		rep #$20	                REP #$20        ; set A long
.194bc8		0a		asl a		                ASL A
.194bc9		0a		asl a		                ASL A
.194bca		0a		asl a		                ASL A
.194bcb		0a		asl a		                ASL A
.194bcc		0a		asl a		                ASL A
.194bcd		29 e0 07	and #$07e0	                AND #$07E0
.194bd0		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194bd3		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194bd5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bd7		e2 20		sep #$20	                SEP #$20        ; set A short
.194bd9		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.194bdd		c2 20		rep #$20	                REP #$20        ; set A long
.194bdf		29 ff 00	and #$00ff	                AND #$00FF
.194be2		22 88 4a 19	jsl $194a88	                JSL BCD2BIN                 ; Convert it to binary
.194be6		c2 20		rep #$20	                REP #$20        ; set A long
.194be8		29 1f 00	and #$001f	                AND #$001F
.194beb		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194bee		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194bf0		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bf2		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.194bf6		29 f7 00	and #$00f7	                AND #%11110111
.194bf9		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194bfd		28		plp		                PLP
.194bfe		2b		pld		                PLD
.194bff		ab		plb		                PLB
.194c00		6b		rtl		                RTL
.194c01						DOS_CREATE
.194c01		8b		phb		                PHB
.194c02		0b		phd		                PHD
.194c03		08		php		                PHP
.194c04		48		pha		                PHA             ; begin setdbr macro
.194c05		08		php		                PHP
.194c06		e2 20		sep #$20	                SEP #$20        ; set A short
.194c08		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194c0a		48		pha		                PHA
.194c0b		ab		plb		                PLB
.194c0c		28		plp		                PLP
.194c0d		68		pla		                PLA             ; end setdbr macro
.194c0e		48		pha		                PHA             ; begin setdp macro
.194c0f		08		php		                PHP
.194c10		c2 20		rep #$20	                REP #$20        ; set A long
.194c12		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194c15		5b		tcd		                TCD
.194c16		28		plp		                PLP
.194c17		68		pla		                PLA             ; end setdp macro
.194c18		c2 30		rep #$30	                REP #$30        ; set A&X long
.194c1a		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.194c1d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c1f		85 28		sta $0348	                STA DOS_TEMP
.194c21		c8		iny		                INY
.194c22		c8		iny		                INY
.194c23		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c25		85 2a		sta $034a	                STA DOS_TEMP+2
.194c27		e2 20		sep #$20	                SEP #$20        ; set A short
.194c29		a0 00 00	ldy #$0000	                LDY #0
.194c2c		a2 00 00	ldx #$0000	                LDX #0
.194c2f		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.194c31		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.194c33		f0 04		beq $194c39	                BEQ find_file                   ; If it's NULL, we're done
.194c35		e8		inx		                INX
.194c36		c8		iny		                INY
.194c37		80 f6		bra $194c2f	                BRA path_loop
.194c39		22 e8 42 19	jsl $1942e8	find_file       JSL DOS_PARSE_PATH
.194c3d		22 80 43 19	jsl $194380	                JSL DOS_FINDFILE
.194c41		90 07		bcc $194c4a	                BCC set_device
.194c43		e2 20		sep #$20	                SEP #$20        ; set A short
.194c45		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.194c47		82 d2 00	brl $194d1c	                BRL ret_failure
.194c4a						set_device
.194c4a		e2 20		sep #$20	                SEP #$20        ; set A short
.194c4c		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194c4f		a5 01		lda $0321	                LDA BIOS_DEV
.194c51		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c53						validate_name
.194c53		22 c7 46 19	jsl $1946c7	                JSL DOS_FREECLUS
.194c57		b0 03		bcs $194c5c	                BCS save_data
.194c59		82 c4 00	brl $194d20	                BRL pass_failure
.194c5c						save_data
.194c5c		c2 20		rep #$20	                REP #$20        ; set A long
.194c5e		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.194c61		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.194c63		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c65		c8		iny		                INY
.194c66		c8		iny		                INY
.194c67		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194c69		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c6b		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.194c6e		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c70		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194c72		c8		iny		                INY
.194c73		c8		iny		                INY
.194c74		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c76		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194c78		22 d7 41 19	jsl $1941d7	                JSL DOS_PUTCLUSTER
.194c7c		b0 00		bcs $194c7e	                BCS find_dir
.194c7e						find_dir
.194c7e		c2 20		rep #$20	                REP #$20        ; set A long
.194c80		22 12 3d 19	jsl $193d12	                JSL DOS_DIRFINDFREE
.194c84		b0 1a		bcs $194ca0	                BCS set_entry
.194c86		c2 20		rep #$20	                REP #$20        ; set A long
.194c88		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.194c8b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.194c8d		85 10		sta $0330	                STA DOS_CLUS_ID
.194c8f		c8		iny		                INY
.194c90		c8		iny		                INY
.194c91		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c93		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194c95		22 8f 49 19	jsl $19498f	                JSL DELCLUSTER32                ; Delete the cluster
.194c99		e2 20		sep #$20	                SEP #$20        ; set A short
.194c9b		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.194c9d		82 7c 00	brl $194d1c	                BRL ret_failure
.194ca0						set_entry
.194ca0		e2 20		sep #$20	                SEP #$20        ; set A short
.194ca2		a0 00 00	ldy #$0000	                LDY #0
.194ca5		a9 00		lda #$00	                LDA #0                          ; NULL
.194ca7		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.194ca9		c8		iny		                INY
.194caa		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.194cad		d0 f8		bne $194ca7	                BNE copy_dir_loop
.194caf		a0 00 00	ldy #$0000	                LDY #0
.194cb2		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.194cb5		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cb7		c8		iny		                INY
.194cb8		c0 0b 00	cpy #$000b	                CPY #11
.194cbb		d0 f5		bne $194cb2	                BNE name_loop
.194cbd		c2 20		rep #$20	                REP #$20        ; set A long
.194cbf		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.194cc2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cc4		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.194cc7		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cc9		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.194ccc		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cce		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194cd1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cd3		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.194cd6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cd8		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.194cdb		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cdd		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194ce0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ce2		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194ce5		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194ce7		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.194cea		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.194ced		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194cef		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.194cf2		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194cf4		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.194cf7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cf9		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.194cfc		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cfe		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.194d01		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d03		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.194d06		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d08		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.194d0b		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d0d		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.194d10		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d12		c2 20		rep #$20	                REP #$20        ; set A long
.194d14		22 d0 3d 19	jsl $193dd0	                JSL DOS_DIRWRITE
.194d18		b0 0b		bcs $194d25	                BCS ret_success
.194d1a		80 04		bra $194d20	                BRA pass_failure
.194d1c						ret_failure
.194d1c		e2 20		sep #$20	                SEP #$20        ; set A short
.194d1e		85 0e		sta $032e	                STA DOS_STATUS
.194d20		28		plp		pass_failure    PLP
.194d21		2b		pld		                PLD
.194d22		ab		plb		                PLB
.194d23		18		clc		                CLC
.194d24		6b		rtl		                RTL
.194d25						ret_success
.194d25		e2 20		sep #$20	                SEP #$20        ; set A short
.194d27		64 0e		stz $032e	                STZ DOS_STATUS
.194d29		28		plp		                PLP
.194d2a		2b		pld		                PLD
.194d2b		ab		plb		                PLB
.194d2c		38		sec		                SEC
.194d2d		6b		rtl		                RTL
.194d2e						DOS_COPYPATH
.194d2e		da		phx		                PHX
.194d2f		5a		phy		                PHY
.194d30		8b		phb		                PHB
.194d31		0b		phd		                PHD
.194d32		08		php		                PHP
.194d33		48		pha		                PHA             ; begin setdbr macro
.194d34		08		php		                PHP
.194d35		e2 20		sep #$20	                SEP #$20        ; set A short
.194d37		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194d39		48		pha		                PHA
.194d3a		ab		plb		                PLB
.194d3b		28		plp		                PLP
.194d3c		68		pla		                PLA             ; end setdbr macro
.194d3d		48		pha		                PHA             ; begin setdp macro
.194d3e		08		php		                PHP
.194d3f		c2 20		rep #$20	                REP #$20        ; set A long
.194d41		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194d44		5b		tcd		                TCD
.194d45		28		plp		                PLP
.194d46		68		pla		                PLA             ; end setdp macro
.194d47		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d49		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.194d4c		a2 00 00	ldx #$0000	                LDX #0
.194d4f		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.194d51		e8		inx		                INX
.194d52		e8		inx		                INX
.194d53		e0 00 01	cpx #$0100	                CPX #256
.194d56		d0 f7		bne $194d4f	                BNE clr_loop
.194d58		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.194d5a		d0 04		bne $194d60	                BNE get_path            ; No: attempt to fetch the path
.194d5c		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.194d5e		f0 27		beq $194d87	                BEQ done                ; Yes: return an empty buffer
.194d60		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.194d63		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d65		85 28		sta $0348	                STA DOS_TEMP
.194d67		c8		iny		                INY
.194d68		c8		iny		                INY
.194d69		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d6b		85 2a		sta $034a	                STA DOS_TEMP+2
.194d6d		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.194d6f		d0 04		bne $194d75	                BNE start_copy          ; No: start copying it
.194d71		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194d73		f0 12		beq $194d87	                BEQ done                ; Yes: return an empty buffer
.194d75						start_copy
.194d75		e2 20		sep #$20	                SEP #$20        ; set A short
.194d77		a2 00 00	ldx #$0000	                LDX #0
.194d7a		a0 00 00	ldy #$0000	                LDY #0
.194d7d		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.194d7f		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194d81		f0 04		beq $194d87	                BEQ done
.194d83		e8		inx		                INX
.194d84		c8		iny		                INY
.194d85		d0 f6		bne $194d7d	                BNE loop
.194d87		28		plp		done            PLP
.194d88		2b		pld		                PLD
.194d89		ab		plb		                PLB
.194d8a		7a		ply		                PLY
.194d8b		fa		plx		                PLX
.194d8c		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.194d8d						DOS_TEST
.194d8d		8b		phb		                PHB
.194d8e		0b		phd		                PHD
.194d8f		08		php		                PHP
.194d90		48		pha		                PHA             ; begin setdbr macro
.194d91		08		php		                PHP
.194d92		e2 20		sep #$20	                SEP #$20        ; set A short
.194d94		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194d96		48		pha		                PHA
.194d97		ab		plb		                PLB
.194d98		28		plp		                PLP
.194d99		68		pla		                PLA             ; end setdbr macro
.194d9a		48		pha		                PHA             ; begin setdp macro
.194d9b		08		php		                PHP
.194d9c		c2 20		rep #$20	                REP #$20        ; set A long
.194d9e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194da1		5b		tcd		                TCD
.194da2		28		plp		                PLP
.194da3		68		pla		                PLA             ; end setdp macro
.194da4		c2 30		rep #$30	                REP #$30        ; set A&X long
.194da6		a9 cc 4d	lda #$4dcc	                LDA #<>src_file
.194da9		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.194dad		a9 19 00	lda #$0019	                LDA #`src_file
.194db0		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.194db4		a9 d9 4d	lda #$4dd9	                LDA #<>dst_file
.194db7		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.194dbb		a9 19 00	lda #$0019	                LDA #`dst_file
.194dbe		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.194dc2		22 fe 55 19	jsl $1955fe	                JSL IF_COPY
.194dc6		b0 00		bcs $194dc8	                BCS done
.194dc8		28		plp		done            PLP
.194dc9		2b		pld		                PLD
.194dca		ab		plb		                PLB
.194dcb		6b		rtl		                RTL
>194dcc		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>194dd4		2e 62 61 73 00
>194dd9		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>194de1		32 2e 62 61 73 00
.194de7						IF_OPEN
.194de7		da		phx		                PHX
.194de8		5a		phy		                PHY
.194de9		0b		phd		                PHD
.194dea		8b		phb		                PHB
.194deb		08		php		                PHP
.194dec		48		pha		                PHA             ; begin setdbr macro
.194ded		08		php		                PHP
.194dee		e2 20		sep #$20	                SEP #$20        ; set A short
.194df0		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194df2		48		pha		                PHA
.194df3		ab		plb		                PLB
.194df4		28		plp		                PLP
.194df5		68		pla		                PLA             ; end setdbr macro
.194df6		48		pha		                PHA             ; begin setdp macro
.194df7		08		php		                PHP
.194df8		c2 20		rep #$20	                REP #$20        ; set A long
.194dfa		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194dfd		5b		tcd		                TCD
.194dfe		28		plp		                PLP
.194dff		68		pla		                PLA             ; end setdp macro
.194e00		e2 20		sep #$20	                SEP #$20        ; set A short
.194e02		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.194e05		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e07		89 20		bit #$20	                BIT #FD_STAT_OPEN
.194e09		f0 05		beq $194e10	                BEQ ok_to_open
.194e0b		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.194e0d		82 87 06	brl $195497	                BRL IF_FAILURE
.194e10		22 2e 4d 19	jsl $194d2e	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.194e14		22 80 43 19	jsl $194380	                JSL DOS_FINDFILE                ; Attempt to find the file
.194e18		b0 03		bcs $194e1d	                BCS is_found                    ; If OK: we found the file
.194e1a		82 7e 06	brl $19549b	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.194e1d						is_found
.194e1d		e2 20		sep #$20	                SEP #$20        ; set A short
.194e1f		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194e22		a5 01		lda $0321	                LDA BIOS_DEV
.194e24		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e26		c2 20		rep #$20	                REP #$20        ; set A long
.194e28		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.194e2b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e2d		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194e2f		c8		iny		                INY
.194e30		c8		iny		                INY
.194e31		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e33		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194e35		22 9a 41 19	jsl $19419a	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.194e39		b0 03		bcs $194e3e	                BCS read_cluster
.194e3b		82 5d 06	brl $19549b	                BRL IF_PASSFAILURE
.194e3e		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.194e41		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e43		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e45		c8		iny		                INY
.194e46		c8		iny		                INY
.194e47		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e49		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e4b		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.194e4e		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e50		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e52		c8		iny		                INY
.194e53		c8		iny		                INY
.194e54		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e56		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e58		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.194e5b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e5d		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.194e60		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e62		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194e65		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e67		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194e6a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e6c		e2 20		sep #$20	                SEP #$20        ; set A short
.194e6e		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.194e71		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.194e73		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194e75		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e77		82 28 06	brl $1954a2	                BRL IF_SUCCESS
.194e7a						IF_CREATE
.194e7a		da		phx		                PHX
.194e7b		5a		phy		                PHY
.194e7c		0b		phd		                PHD
.194e7d		8b		phb		                PHB
.194e7e		08		php		                PHP
.194e7f		48		pha		                PHA             ; begin setdbr macro
.194e80		08		php		                PHP
.194e81		e2 20		sep #$20	                SEP #$20        ; set A short
.194e83		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e85		48		pha		                PHA
.194e86		ab		plb		                PLB
.194e87		28		plp		                PLP
.194e88		68		pla		                PLA             ; end setdbr macro
.194e89		48		pha		                PHA             ; begin setdp macro
.194e8a		08		php		                PHP
.194e8b		c2 20		rep #$20	                REP #$20        ; set A long
.194e8d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e90		5b		tcd		                TCD
.194e91		28		plp		                PLP
.194e92		68		pla		                PLA             ; end setdp macro
.194e93		22 01 4c 19	jsl $194c01	                JSL DOS_CREATE                  ; Attempt to create the file
.194e97		90 18		bcc $194eb1	                BCC pass_failure                ; If it fails: pass the failure up the chain
.194e99		c2 30		rep #$30	                REP #$30        ; set A&X long
.194e9b		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.194e9e		a9 00 00	lda #$0000	                LDA #0
.194ea1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194ea3		c8		iny		                INY
.194ea4		c8		iny		                INY
.194ea5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194ea7		e2 20		sep #$20	                SEP #$20        ; set A short
.194ea9		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.194eac		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.194eae		82 f1 05	brl $1954a2	                BRL IF_SUCCESS
.194eb1		82 e3 05	brl $195497	pass_failure    BRL IF_FAILURE
.194eb4						IF_CLOSE
.194eb4		da		phx		                PHX
.194eb5		5a		phy		                PHY
.194eb6		0b		phd		                PHD
.194eb7		8b		phb		                PHB
.194eb8		08		php		                PHP
.194eb9		48		pha		                PHA             ; begin setdbr macro
.194eba		08		php		                PHP
.194ebb		e2 20		sep #$20	                SEP #$20        ; set A short
.194ebd		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194ebf		48		pha		                PHA
.194ec0		ab		plb		                PLB
.194ec1		28		plp		                PLP
.194ec2		68		pla		                PLA             ; end setdbr macro
.194ec3		48		pha		                PHA             ; begin setdp macro
.194ec4		08		php		                PHP
.194ec5		c2 20		rep #$20	                REP #$20        ; set A long
.194ec7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194eca		5b		tcd		                TCD
.194ecb		28		plp		                PLP
.194ecc		68		pla		                PLA             ; end setdp macro
.194ecd		e2 20		sep #$20	                SEP #$20        ; set A short
.194ecf		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.194ed2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ed4		89 02		bit #$02	                BIT #FD_STAT_WRITE
.194ed6		f0 09		beq $194ee1	                BEQ set_flag                    ; No, just mark it closed
.194ed8		22 4d 4f 19	jsl $194f4d	                JSL IF_WRITE                    ; Attempt to write the cluster
.194edc		b0 03		bcs $194ee1	                BCS set_flag
.194ede		82 ba 05	brl $19549b	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.194ee1		22 9c 55 19	jsl $19559c	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.194ee5		82 ba 05	brl $1954a2	                BRL IF_SUCCESS
.194ee8						IF_READ
.194ee8		da		phx		                PHX
.194ee9		5a		phy		                PHY
.194eea		0b		phd		                PHD
.194eeb		8b		phb		                PHB
.194eec		08		php		                PHP
.194eed		48		pha		                PHA             ; begin setdbr macro
.194eee		08		php		                PHP
.194eef		e2 20		sep #$20	                SEP #$20        ; set A short
.194ef1		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194ef3		48		pha		                PHA
.194ef4		ab		plb		                PLB
.194ef5		28		plp		                PLP
.194ef6		68		pla		                PLA             ; end setdbr macro
.194ef7		48		pha		                PHA             ; begin setdp macro
.194ef8		08		php		                PHP
.194ef9		c2 20		rep #$20	                REP #$20        ; set A long
.194efb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194efe		5b		tcd		                TCD
.194eff		28		plp		                PLP
.194f00		68		pla		                PLA             ; end setdp macro
.194f01		c2 10		rep #$10	                REP #$10        ; set X long
.194f03		e2 20		sep #$20	                SEP #$20        ; set A short
.194f05						get_dev
.194f05		e2 20		sep #$20	                SEP #$20        ; set A short
.194f07		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194f0a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f0c		85 01		sta $0321	                STA BIOS_DEV
.194f0e		22 02 3f 19	jsl $193f02	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194f12		c2 20		rep #$20	                REP #$20        ; set A long
.194f14		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194f17		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f19		85 10		sta $0330	                STA DOS_CLUS_ID
.194f1b		c8		iny		                INY
.194f1c		c8		iny		                INY
.194f1d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f1f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194f21		22 ae 45 19	jsl $1945ae	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.194f25		90 13		bcc $194f3a	                BCC pass_failure                ; If not OK: pass the failure up the chain
.194f27		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194f2a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f2c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f2e		c8		iny		                INY
.194f2f		c8		iny		                INY
.194f30		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f32		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f34		22 9a 41 19	jsl $19419a	                JSL DOS_GETCLUSTER              ; Get the cluster
.194f38		b0 03		bcs $194f3d	                BCS ret_success                 ; If ok: return success
.194f3a						pass_failure
.194f3a		82 5e 05	brl $19549b	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194f3d		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.194f40		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194f42		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f44		c8		iny		                INY
.194f45		c8		iny		                INY
.194f46		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194f48		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f4a		82 55 05	brl $1954a2	                BRL IF_SUCCESS
.194f4d						IF_WRITE
.194f4d		da		phx		                PHX
.194f4e		5a		phy		                PHY
.194f4f		0b		phd		                PHD
.194f50		8b		phb		                PHB
.194f51		08		php		                PHP
.194f52		48		pha		                PHA             ; begin setdbr macro
.194f53		08		php		                PHP
.194f54		e2 20		sep #$20	                SEP #$20        ; set A short
.194f56		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f58		48		pha		                PHA
.194f59		ab		plb		                PLB
.194f5a		28		plp		                PLP
.194f5b		68		pla		                PLA             ; end setdbr macro
.194f5c		48		pha		                PHA             ; begin setdp macro
.194f5d		08		php		                PHP
.194f5e		c2 20		rep #$20	                REP #$20        ; set A long
.194f60		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f63		5b		tcd		                TCD
.194f64		28		plp		                PLP
.194f65		68		pla		                PLA             ; end setdp macro
.194f66		c2 10		rep #$10	                REP #$10        ; set X long
.194f68		e2 20		sep #$20	                SEP #$20        ; set A short
.194f6a		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194f6d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f6f		85 01		sta $0321	                STA BIOS_DEV
.194f71		22 02 3f 19	jsl $193f02	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194f75		c2 20		rep #$20	                REP #$20        ; set A long
.194f77		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194f7a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f7c		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f7e		c8		iny		                INY
.194f7f		c8		iny		                INY
.194f80		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f82		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f84		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194f87		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f89		85 10		sta $0330	                STA DOS_CLUS_ID
.194f8b		c8		iny		                INY
.194f8c		c8		iny		                INY
.194f8d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f8f		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194f91		d0 1a		bne $194fad	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.194f93		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194f95		d0 16		bne $194fad	                BNE rewrite_cluster
.194f97		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.194f9a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f9c		85 10		sta $0330	                STA DOS_CLUS_ID
.194f9e		c8		iny		                INY
.194f9f		c8		iny		                INY
.194fa0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fa2		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194fa4		22 cf 49 19	jsl $1949cf	                JSL DOS_APPENDCLUS              ; Append the cluster
.194fa8		b0 0c		bcs $194fb6	                BCS ret_success                 ; If OK: return success
.194faa		82 ee 04	brl $19549b	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194fad		22 d7 41 19	jsl $1941d7	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.194fb1		b0 03		bcs $194fb6	                BCS ret_success                 ; If ok: return success
.194fb3		82 e5 04	brl $19549b	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194fb6		82 e9 04	brl $1954a2	ret_success     BRL IF_SUCCESS
.194fb9						IF_DIROPEN
.194fb9		da		phx		                PHX
.194fba		5a		phy		                PHY
.194fbb		0b		phd		                PHD
.194fbc		8b		phb		                PHB
.194fbd		08		php		                PHP
.194fbe		48		pha		                PHA             ; begin setdbr macro
.194fbf		08		php		                PHP
.194fc0		e2 20		sep #$20	                SEP #$20        ; set A short
.194fc2		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194fc4		48		pha		                PHA
.194fc5		ab		plb		                PLB
.194fc6		28		plp		                PLP
.194fc7		68		pla		                PLA             ; end setdbr macro
.194fc8		48		pha		                PHA             ; begin setdp macro
.194fc9		08		php		                PHP
.194fca		c2 20		rep #$20	                REP #$20        ; set A long
.194fcc		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194fcf		5b		tcd		                TCD
.194fd0		28		plp		                PLP
.194fd1		68		pla		                PLA             ; end setdp macro
.194fd2		c2 30		rep #$30	                REP #$30        ; set A&X long
.194fd4		22 2e 4d 19	jsl $194d2e	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.194fd8		22 e8 42 19	jsl $1942e8	                JSL DOS_PARSE_PATH          ; Parse the path
.194fdc		22 02 3f 19	jsl $193f02	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.194fe0		b0 03		bcs $194fe5	                BCS get_root_dir            ; If successful: get the root directory
.194fe2		82 b6 04	brl $19549b	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.194fe5						get_root_dir
.194fe5		c2 30		rep #$30	                REP #$30        ; set A&X long
.194fe7		22 b7 3b 19	jsl $193bb7	                JSL DOS_DIROPEN
.194feb		b0 03		bcs $194ff0	                BCS success
.194fed		82 ab 04	brl $19549b	                BRL IF_PASSFAILURE
.194ff0		82 af 04	brl $1954a2	success         BRL IF_SUCCESS
.194ff3						IF_DIRNEXT
.194ff3		5c 51 3c 19	jmp $193c51	                JML DOS_DIRNEXT
.194ff7						IF_DELETE
.194ff7		da		phx		                PHX
.194ff8		5a		phy		                PHY
.194ff9		0b		phd		                PHD
.194ffa		8b		phb		                PHB
.194ffb		08		php		                PHP
.194ffc		48		pha		                PHA             ; begin setdbr macro
.194ffd		08		php		                PHP
.194ffe		e2 20		sep #$20	                SEP #$20        ; set A short
.195000		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195002		48		pha		                PHA
.195003		ab		plb		                PLB
.195004		28		plp		                PLP
.195005		68		pla		                PLA             ; end setdbr macro
.195006		48		pha		                PHA             ; begin setdp macro
.195007		08		php		                PHP
.195008		c2 20		rep #$20	                REP #$20        ; set A long
.19500a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19500d		5b		tcd		                TCD
.19500e		28		plp		                PLP
.19500f		68		pla		                PLA             ; end setdp macro
.195010		c2 30		rep #$30	                REP #$30        ; set A&X long
.195012		22 80 43 19	jsl $194380	                JSL DOS_FINDFILE
.195016		b0 03		bcs $19501b	                BCS get_first_clus
.195018		82 80 04	brl $19549b	                BRL IF_PASSFAILURE
.19501b						get_first_clus
.19501b		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.19501e		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.195020		85 10		sta $0330	                STA DOS_CLUS_ID
.195022		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.195025		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.195027		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195029		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19502b		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.19502e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195030		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.195033		22 ae 45 19	jsl $1945ae	del_loop        JSL NEXTCLUSTER
.195037		90 2f		bcc $195068	                BCC del_one
.195039		a5 10		lda $0330	                LDA DOS_CLUS_ID
.19503b		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.19503e		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195040		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.195043		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.195046		85 10		sta $0330	                STA DOS_CLUS_ID
.195048		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.19504b		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19504d		22 8f 49 19	jsl $19498f	                JSL DELCLUSTER32
.195051		b0 03		bcs $195056	                BCS go_next
.195053		82 45 04	brl $19549b	                BRL IF_PASSFAILURE
.195056						go_next
.195056		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.195059		85 10		sta $0330	                STA DOS_CLUS_ID
.19505b		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.19505e		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.195061		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195063		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.195066		80 cb		bra $195033	                BRA del_loop
.195068						del_one
.195068		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.19506b		85 10		sta $0330	                STA DOS_CLUS_ID
.19506d		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.195070		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195072		22 e9 48 19	jsl $1948e9	                JSL DELCLUSTER
.195076		b0 03		bcs $19507b	                BCS free_dir_entry
.195078		82 20 04	brl $19549b	                BRL IF_PASSFAILURE
.19507b						free_dir_entry
.19507b		e2 20		sep #$20	                SEP #$20        ; set A short
.19507d		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.195080		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.195082		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.195084		22 d0 3d 19	jsl $193dd0	                JSL DOS_DIRWRITE                ; Write the directory entry back
.195088		b0 03		bcs $19508d	                BCS ret_success
.19508a		82 0e 04	brl $19549b	                BRL IF_PASSFAILURE
.19508d		82 12 04	brl $1954a2	ret_success     BRL IF_SUCCESS
.195090						IF_DIRREAD
.195090		da		phx		                PHX
.195091		5a		phy		                PHY
.195092		0b		phd		                PHD
.195093		8b		phb		                PHB
.195094		08		php		                PHP
.195095		48		pha		                PHA             ; begin setdbr macro
.195096		08		php		                PHP
.195097		e2 20		sep #$20	                SEP #$20        ; set A short
.195099		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19509b		48		pha		                PHA
.19509c		ab		plb		                PLB
.19509d		28		plp		                PLP
.19509e		68		pla		                PLA             ; end setdbr macro
.19509f		48		pha		                PHA             ; begin setdp macro
.1950a0		08		php		                PHP
.1950a1		c2 20		rep #$20	                REP #$20        ; set A long
.1950a3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950a6		5b		tcd		                TCD
.1950a7		28		plp		                PLP
.1950a8		68		pla		                PLA             ; end setdp macro
.1950a9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950ab		22 80 43 19	jsl $194380	                JSL DOS_FINDFILE
.1950af		b0 03		bcs $1950b4	                BCS success
.1950b1		82 e3 03	brl $195497	                BRL IF_FAILURE
.1950b4		82 eb 03	brl $1954a2	success         BRL IF_SUCCESS
.1950b7						IF_DIRWRITE
.1950b7		5c d0 3d 19	jmp $193dd0	                JML DOS_DIRWRITE
.1950bb						IF_LOAD
.1950bb		da		phx		                PHX
.1950bc		5a		phy		                PHY
.1950bd		0b		phd		                PHD
.1950be		8b		phb		                PHB
.1950bf		08		php		                PHP
.1950c0		48		pha		                PHA             ; begin setdbr macro
.1950c1		08		php		                PHP
.1950c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1950c4		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950c6		48		pha		                PHA
.1950c7		ab		plb		                PLB
.1950c8		28		plp		                PLP
.1950c9		68		pla		                PLA             ; end setdbr macro
.1950ca		48		pha		                PHA             ; begin setdp macro
.1950cb		08		php		                PHP
.1950cc		c2 20		rep #$20	                REP #$20        ; set A long
.1950ce		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950d1		5b		tcd		                TCD
.1950d2		28		plp		                PLP
.1950d3		68		pla		                PLA             ; end setdp macro
.1950d4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950d6		22 e7 4d 19	jsl $194de7	                JSL IF_OPEN
.1950da		b0 03		bcs $1950df	                BCS setup                   ; If success: start setting things up
.1950dc		82 bc 03	brl $19549b	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.1950df						setup
.1950df		c2 20		rep #$20	                REP #$20        ; set A long
.1950e1		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.1950e4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950e6		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1950e8		c8		iny		                INY
.1950e9		c8		iny		                INY
.1950ea		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950ec		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1950ee		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.1950f1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950f3		85 30		sta $0350	                STA DOS_SRC_PTR
.1950f5		c8		iny		                INY
.1950f6		c8		iny		                INY
.1950f7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950f9		85 32		sta $0352	                STA DOS_SRC_PTR+2
.1950fb		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.1950fd		c9 40 00	cmp #$0040	                CMP #$0040
.195100		b0 04		bcs $195106	                BGE load_by_type            ; No: try to load it by type
.195102		5c 4c 53 19	jmp $19534c	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.195106		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.195109		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.19510c						type_loop
.19510c		e2 20		sep #$20	                SEP #$20        ; set A short
.19510e		bf 52 51 19	lda $195152,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.195112		f0 37		beq $19514b	                BEQ no_match                ; If NULL... we didn't get a match
.195114		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.195117		d0 28		bne $195141	                BNE next_entry              ; If they don't match, try the next entry
.195119		bf 53 51 19	lda $195153,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.19511d		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.195120		d0 1f		bne $195141	                BNE next_entry              ; If they don't match, try the next entry
.195122		bf 54 51 19	lda $195154,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.195126		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.195129		d0 16		bne $195141	                BNE next_entry              ; If they don't match, try the next entry
.19512b		c2 20		rep #$20	                REP #$20        ; set A long
.19512d		bf 55 51 19	lda $195155,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.195131		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.195133		e2 20		sep #$20	                SEP #$20        ; set A short
.195135		bf 57 51 19	lda $195157,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.195139		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.19513b		a2 00 00	ldx #$0000	                LDX #0
.19513e		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.195141						next_entry
.195141		c2 30		rep #$30	                REP #$30        ; set A&X long
.195143		8a		txa		                TXA
.195144		18		clc		                CLC
.195145		69 06 00	adc #$0006	                ADC #6
.195148		aa		tax		                TAX
.195149		80 c1		bra $19510c	                BRA type_loop               ; And check it against the file
.19514b						no_match
.19514b		e2 20		sep #$20	                SEP #$20        ; set A short
.19514d		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.19514f		82 45 03	brl $195497	                BRL IF_FAILURE
>195152		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>195155		5f 51				                .word <>IF_LOADPGX
>195157		19				                .byte `IF_LOADPGX
>195158		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>19515b		e7 51				                .word <>IF_LOADPGZ
>19515d		19				                .byte `IF_LOADPGZ
>19515e		00				                .byte 0
.19515f						IF_LOADPGX
.19515f		c2 10		rep #$10	                REP #$10        ; set X long
.195161		e2 20		sep #$20	                SEP #$20        ; set A short
.195163		a0 00 00	ldy #$0000	                LDY #0
.195166		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.195168		c9 50		cmp #$50	                CMP #'P'
.19516a		d0 15		bne $195181	                BNE fail_sig                        ; If not found, fail
.19516c		c8		iny		                INY
.19516d		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19516f		c9 47		cmp #$47	                CMP #'G'
.195171		d0 0e		bne $195181	                BNE fail_sig
.195173		c8		iny		                INY
.195174		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195176		c9 58		cmp #$58	                CMP #'X'
.195178		d0 07		bne $195181	                BNE fail_sig
.19517a		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.19517b		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19517d		c9 01		cmp #$01	                CMP #$01
.19517f		f0 17		beq $195198	                BEQ get_dest                        ; All passes: go to get the destination address
.195181		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.195183		22 97 54 19	jsl $195497	                JSL IF_FAILURE
.195187						adjust_size
.195187		c2 20		rep #$20	                REP #$20        ; set A long
.195189		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.19518a		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.19518c		e9 08 00	sbc #$0008	                SBC #8
.19518f		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195191		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195193		e9 00 00	sbc #$0000	                SBC #0
.195196		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195198						get_dest
.195198		c2 20		rep #$20	                REP #$20        ; set A long
.19519a		c8		iny		                INY
.19519b		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.19519d		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.19519f		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.1951a1		c8		iny		                INY
.1951a2		c8		iny		                INY
.1951a3		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.1951a5		85 36		sta $0356	                STA DOS_DST_PTR+2
.1951a7		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1951a9		c8		iny		                INY                                 ; Point to the first data byte
.1951aa		c8		iny		                INY
.1951ab						copy_loop
.1951ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1951ad		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.1951af		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.1951b1		c2 20		rep #$20	                REP #$20        ; set A long
.1951b3		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.1951b5		d0 02		bne $1951b9	                BNE dec_file_size
.1951b7		e6 36		inc $0356	                INC DOS_DST_PTR+2
.1951b9		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.1951ba		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1951bc		e9 01 00	sbc #$0001	                SBC #1
.1951bf		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1951c1		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951c3		e9 00 00	sbc #$0000	                SBC #0
.1951c6		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1951c8		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.1951ca		d0 04		bne $1951d0	                BNE next_byte
.1951cc		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951ce		f0 14		beq $1951e4	                BEQ done                            ; Yes: we're done
.1951d0		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.1951d1		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.1951d4		d0 d5		bne $1951ab	                BNE copy_loop                       ; No: keep copying
.1951d6		22 b2 46 19	jsl $1946b2	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.1951da		b0 03		bcs $1951df	                BCS next_cluster
.1951dc		82 bc 02	brl $19549b	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.1951df		a0 00 00	ldy #$0000	next_cluster    LDY #0
.1951e2		80 c7		bra $1951ab	                BRA copy_loop                       ; Go back to copying
.1951e4		82 bb 02	brl $1954a2	done            BRL IF_SUCCESS
.1951e7						IF_LOADPGZ
.1951e7		48		pha		                PHA             ; begin setdbr macro
.1951e8		08		php		                PHP
.1951e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1951eb		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1951ed		48		pha		                PHA
.1951ee		ab		plb		                PLB
.1951ef		28		plp		                PLP
.1951f0		68		pla		                PLA             ; end setdbr macro
.1951f1		48		pha		                PHA             ; begin setdp macro
.1951f2		08		php		                PHP
.1951f3		c2 20		rep #$20	                REP #$20        ; set A long
.1951f5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1951f8		5b		tcd		                TCD
.1951f9		28		plp		                PLP
.1951fa		68		pla		                PLA             ; end setdp macro
.1951fb		c2 30		rep #$30	                REP #$30        ; set A&X long
.1951fd		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.195200		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195202		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.195204		c8		iny		                INY
.195205		c8		iny		                INY
.195206		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195208		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19520a		e2 20		sep #$20	                SEP #$20        ; set A short
.19520c		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.19520f		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.195211		c9 5a		cmp #$5a	                CMP #'Z'
.195213		f0 06		beq $19521b	                BEQ start_block                     ; If found, get the starting address
.195215		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.195217		22 97 54 19	jsl $195497	                JSL IF_FAILURE
.19521b		c8		iny		start_block     INY
.19521c						get_addr
.19521c		e2 20		sep #$20	                SEP #$20        ; set A short
.19521e		22 a1 52 19	jsl $1952a1	                JSL IF_FILE_EOF                     ; Check if EOF
.195222		90 03		bcc $195227	                BCC get_addr_lo
.195224		82 7b 02	brl $1954a2	done            BRL IF_SUCCESS                      ; If so: we're done
.195227		22 df 52 19	jsl $1952df	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.19522b		90 47		bcc $195274	                BCC ret_failure                     ; Got an error: pass it on
.19522d		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.19522f		22 df 52 19	jsl $1952df	                JSL IF_READ_NEXT                    ; Get the next byte
.195233		90 3f		bcc $195274	                BCC ret_failure                     ; Got an error: pass it on
.195235		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.195237		22 df 52 19	jsl $1952df	                JSL IF_READ_NEXT                    ; Get the next byte
.19523b		90 37		bcc $195274	                BCC ret_failure                     ; Got an error: pass it on
.19523d		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.19523f		22 df 52 19	jsl $1952df	                JSL IF_READ_NEXT                    ; Get the next byte
.195243		90 2f		bcc $195274	                BCC ret_failure                     ; Got an error: pass it on
.195245		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.195247		22 df 52 19	jsl $1952df	                JSL IF_READ_NEXT                    ; Get the next byte
.19524b		90 27		bcc $195274	                BCC ret_failure                     ; Got an error: pass it on
.19524d		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.19524f		22 df 52 19	jsl $1952df	                JSL IF_READ_NEXT                    ; Get the next byte
.195253		90 1f		bcc $195274	                BCC ret_failure                     ; Got an error: pass it on
.195255		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.195257		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.195259		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.19525b		d0 1a		bne $195277	                BNE read_data
.19525d		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.19525f		d0 16		bne $195277	                BNE read_data
.195261		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.195263		d0 12		bne $195277	                BNE read_data
.195265		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.195267		85 3c		sta $035c	                STA DOS_RUN_PTR
.195269		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.19526b		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.19526d		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.19526f		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195271		82 2e 02	brl $1954a2	                BRL IF_SUCCESS                      ; And finish
.195274		82 20 02	brl $195497	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.195277						read_data
.195277		e2 20		sep #$20	                SEP #$20        ; set A short
.195279		22 df 52 19	jsl $1952df	                JSL IF_READ_NEXT                    ; Get the next byte
.19527d		90 f5		bcc $195274	                BCC ret_failure
.19527f		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.195281		c2 20		rep #$20	                REP #$20        ; set A long
.195283		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.195285		d0 02		bne $195289	                BNE dec_block_size
.195287		e6 36		inc $0356	                INC DOS_DST_PTR+2
.195289		38		sec		dec_block_size  SEC
.19528a		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.19528c		e9 01 00	sbc #$0001	                SBC #1
.19528f		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.195291		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.195293		e9 00 00	sbc #$0000	                SBC #0
.195296		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.195298		d0 dd		bne $195277	                BNE read_data
.19529a		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.19529c		d0 d9		bne $195277	                BNE read_data                       ; No: keep reading data
.19529e		82 7b ff	brl $19521c	                BRL get_addr                        ; Yes: check for another block
.1952a1						IF_FILE_EOF
.1952a1		48		pha		                PHA
.1952a2		5a		phy		                PHY
.1952a3		8b		phb		                PHB
.1952a4		0b		phd		                PHD
.1952a5		08		php		                PHP
.1952a6		48		pha		                PHA             ; begin setdbr macro
.1952a7		08		php		                PHP
.1952a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1952aa		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952ac		48		pha		                PHA
.1952ad		ab		plb		                PLB
.1952ae		28		plp		                PLP
.1952af		68		pla		                PLA             ; end setdbr macro
.1952b0		48		pha		                PHA             ; begin setdp macro
.1952b1		08		php		                PHP
.1952b2		c2 20		rep #$20	                REP #$20        ; set A long
.1952b4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952b7		5b		tcd		                TCD
.1952b8		28		plp		                PLP
.1952b9		68		pla		                PLA             ; end setdp macro
.1952ba		e2 20		sep #$20	                SEP #$20        ; set A short
.1952bc		c2 10		rep #$10	                REP #$10        ; set X long
.1952be		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.1952c1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.1952c3		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.1952c5		f0 07		beq $1952ce	                BEQ chk_file_size                   ; If not: check the file size
.1952c7		28		plp		ret_true        PLP                                 ; Return true
.1952c8		2b		pld		                PLD
.1952c9		ab		plb		                PLB
.1952ca		7a		ply		                PLY
.1952cb		68		pla		                PLA
.1952cc		38		sec		                SEC
.1952cd		6b		rtl		                RTL
.1952ce						chk_file_size
.1952ce		c2 20		rep #$20	                REP #$20        ; set A long
.1952d0		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.1952d2		d0 04		bne $1952d8	                BNE ret_false
.1952d4		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1952d6		f0 ef		beq $1952c7	                BEQ ret_true
.1952d8		28		plp		ret_false       PLP                                 ; Return false
.1952d9		2b		pld		                PLD
.1952da		ab		plb		                PLB
.1952db		7a		ply		                PLY
.1952dc		68		pla		                PLA
.1952dd		18		clc		                CLC
.1952de		6b		rtl		                RTL
.1952df						IF_READ_NEXT
.1952df		8b		phb		                PHB
.1952e0		0b		phd		                PHD
.1952e1		08		php		                PHP
.1952e2		48		pha		                PHA             ; begin setdbr macro
.1952e3		08		php		                PHP
.1952e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1952e6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952e8		48		pha		                PHA
.1952e9		ab		plb		                PLB
.1952ea		28		plp		                PLP
.1952eb		68		pla		                PLA             ; end setdbr macro
.1952ec		48		pha		                PHA             ; begin setdp macro
.1952ed		08		php		                PHP
.1952ee		c2 20		rep #$20	                REP #$20        ; set A long
.1952f0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952f3		5b		tcd		                TCD
.1952f4		28		plp		                PLP
.1952f5		68		pla		                PLA             ; end setdp macro
.1952f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1952f8		c2 10		rep #$10	                REP #$10        ; set X long
.1952fa		22 a1 52 19	jsl $1952a1	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.1952fe		90 06		bcc $195306	                BCC get_byte                        ; If not: get the next byte
.195300		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.195302		85 0e		sta $032e	                STA DOS_STATUS
.195304		80 3f		bra $195345	                BRA ret_failure
.195306		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.195308		48		pha		                PHA                                 ; And save it for the moment
.195309		c2 20		rep #$20	                REP #$20        ; set A long
.19530b		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.19530d		d0 02		bne $195311	                BNE dec_low
.19530f		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.195311		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.195313		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.195315		d0 04		bne $19531b	                BNE next_byte
.195317		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195319		f0 1b		beq $195336	                BEQ ret_eof                         ; Yes: mark the file as EOF
.19531b						next_byte
.19531b		e2 20		sep #$20	                SEP #$20        ; set A short
.19531d		c8		iny		                INY                                 ; Move to the next byte
.19531e		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.195321		90 0b		bcc $19532e	                BLT ret_success                     ; No: just return the byte
.195323		22 b2 46 19	jsl $1946b2	                JSL DOS_READNEXT                    ; Yes: read the next sector
.195327		b0 02		bcs $19532b	                BCS reset_index
.195329		80 1a		bra $195345	                BRA ret_failure                     ; If failure: pass the error up the chain
.19532b		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.19532e						ret_success
.19532e		e2 20		sep #$20	                SEP #$20        ; set A short
.195330		68		pla		                PLA                                 ; Return the byte retrieved
.195331		28		plp		                PLP
.195332		2b		pld		                PLD
.195333		ab		plb		                PLB
.195334		38		sec		                SEC
.195335		6b		rtl		                RTL
.195336						ret_eof
.195336		e2 20		sep #$20	                SEP #$20        ; set A short
.195338		5a		phy		                PHY                                 ; Save the index
.195339		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.19533c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19533e		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.195340		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.195342		7a		ply		                PLY                                 ; Restore the index
.195343		80 e9		bra $19532e	                BRA ret_success
.195345						ret_failure
.195345		e2 20		sep #$20	                SEP #$20        ; set A short
.195347		28		plp		                PLP
.195348		2b		pld		                PLD
.195349		ab		plb		                PLB
.19534a		18		clc		                CLC
.19534b		6b		rtl		                RTL
.19534c						IF_LOADRAW
.19534c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19534e		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.195351						copy_loop
.195351		e2 20		sep #$20	                SEP #$20        ; set A short
.195353		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.195355		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195357		c2 20		rep #$20	                REP #$20        ; set A long
.195359		38		sec		                SEC                         ; Count down the number of bytes left
.19535a		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.19535c		e9 01 00	sbc #$0001	                SBC #1
.19535f		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195361		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195363		e9 00 00	sbc #$0000	                SBC #0
.195366		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195368		d0 04		bne $19536e	                BNE continue
.19536a		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.19536c		f0 1b		beq $195389	                BEQ close_file              ; If not: we're done
.19536e		c8		iny		continue        INY
.19536f		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.195372		d0 dd		bne $195351	                BNE copy_loop               ; No: keep processing the bytes
.195374		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.195375		a5 34		lda $0354	                LDA DOS_DST_PTR
.195377		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.19537a		85 34		sta $0354	                STA DOS_DST_PTR
.19537c		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.19537e		69 00 00	adc #$0000	                ADC #0
.195381		85 36		sta $0356	                STA DOS_DST_PTR+2
.195383		22 e8 4e 19	jsl $194ee8	                JSL IF_READ                 ; Yes: load the next cluster
.195387		b0 c5		bcs $19534e	                BCS copy_cluster            ; And start copying it
.195389						close_file
.195389		82 16 01	brl $1954a2	ret_success     BRL IF_SUCCESS
.19538c						IF_NULLBUFFER
.19538c		5a		phy		                PHY
.19538d		8b		phb		                PHB
.19538e		0b		phd		                PHD
.19538f		08		php		                PHP
.195390		48		pha		                PHA             ; begin setdbr macro
.195391		08		php		                PHP
.195392		e2 20		sep #$20	                SEP #$20        ; set A short
.195394		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195396		48		pha		                PHA
.195397		ab		plb		                PLB
.195398		28		plp		                PLP
.195399		68		pla		                PLA             ; end setdbr macro
.19539a		48		pha		                PHA             ; begin setdp macro
.19539b		08		php		                PHP
.19539c		c2 20		rep #$20	                REP #$20        ; set A long
.19539e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953a1		5b		tcd		                TCD
.1953a2		28		plp		                PLP
.1953a3		68		pla		                PLA             ; end setdp macro
.1953a4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953a6		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953a9		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953ab		85 28		sta $0348	                STA DOS_TEMP
.1953ad		c8		iny		                INY
.1953ae		c8		iny		                INY
.1953af		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953b1		85 2a		sta $034a	                STA DOS_TEMP+2
.1953b3		a0 00 00	ldy #$0000	                LDY #0
.1953b6		a9 00 00	lda #$0000	                LDA #0
.1953b9		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.1953bb		c8		iny		                INY
.1953bc		c8		iny		                INY
.1953bd		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.1953c0		d0 f7		bne $1953b9	                BNE loop
.1953c2		28		plp		                PLP
.1953c3		2b		pld		                PLD
.1953c4		ab		plb		                PLB
.1953c5		7a		ply		                PLY
.1953c6		6b		rtl		                RTL
.1953c7						IF_COPY2BUFF
.1953c7		5a		phy		                PHY
.1953c8		8b		phb		                PHB
.1953c9		0b		phd		                PHD
.1953ca		08		php		                PHP
.1953cb		48		pha		                PHA             ; begin setdbr macro
.1953cc		08		php		                PHP
.1953cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1953cf		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953d1		48		pha		                PHA
.1953d2		ab		plb		                PLB
.1953d3		28		plp		                PLP
.1953d4		68		pla		                PLA             ; end setdbr macro
.1953d5		48		pha		                PHA             ; begin setdp macro
.1953d6		08		php		                PHP
.1953d7		c2 20		rep #$20	                REP #$20        ; set A long
.1953d9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953dc		5b		tcd		                TCD
.1953dd		28		plp		                PLP
.1953de		68		pla		                PLA             ; end setdp macro
.1953df		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953e1		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953e4		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953e6		85 28		sta $0348	                STA DOS_TEMP
.1953e8		c8		iny		                INY
.1953e9		c8		iny		                INY
.1953ea		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953ec		85 2a		sta $034a	                STA DOS_TEMP+2
.1953ee		a0 00 00	ldy #$0000	                LDY #0
.1953f1						copy_loop
.1953f1		e2 20		sep #$20	                SEP #$20        ; set A short
.1953f3		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.1953f5		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.1953f7		c2 20		rep #$20	                REP #$20        ; set A long
.1953f9		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.1953fb		d0 02		bne $1953ff	                BNE adv_dest
.1953fd		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.1953ff		c8		iny		adv_dest        INY                         ; Count it
.195400		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.195403		f0 0c		beq $195411	                BEQ done                    ; Yes: we're done
.195405		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.195407		c5 38		cmp $0358	                CMP DOS_END_PTR
.195409		d0 e6		bne $1953f1	                BNE copy_loop               ; No: keep copying
.19540b		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.19540d		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.19540f		d0 e0		bne $1953f1	                BNE copy_loop
.195411		28		plp		done            PLP
.195412		2b		pld		                PLD
.195413		ab		plb		                PLB
.195414		7a		ply		                PLY
.195415		6b		rtl		                RTL
.195416						IF_SAVE
.195416		da		phx		                PHX
.195417		5a		phy		                PHY
.195418		0b		phd		                PHD
.195419		8b		phb		                PHB
.19541a		08		php		                PHP
.19541b		48		pha		                PHA             ; begin setdbr macro
.19541c		08		php		                PHP
.19541d		e2 20		sep #$20	                SEP #$20        ; set A short
.19541f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195421		48		pha		                PHA
.195422		ab		plb		                PLB
.195423		28		plp		                PLP
.195424		68		pla		                PLA             ; end setdbr macro
.195425		48		pha		                PHA             ; begin setdp macro
.195426		08		php		                PHP
.195427		c2 20		rep #$20	                REP #$20        ; set A long
.195429		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19542c		5b		tcd		                TCD
.19542d		28		plp		                PLP
.19542e		68		pla		                PLA             ; end setdp macro
.19542f		c2 30		rep #$30	                REP #$30        ; set A&X long
.195431		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.195434		38		sec		                SEC
.195435		a5 38		lda $0358	                LDA DOS_END_PTR
.195437		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.195439		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19543b		c8		iny		                INY
.19543c		c8		iny		                INY
.19543d		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.19543f		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.195441		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195443		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.195446		18		clc		                CLC
.195447		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195449		69 01 00	adc #$0001	                ADC #1
.19544c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19544e		90 09		bcc $195459	                BCC first_block
.195450		c8		iny		                INY
.195451		c8		iny		                INY
.195452		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195454		69 00 00	adc #$0000	                ADC #0
.195457		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195459		22 8c 53 19	jsl $19538c	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.19545d		22 c7 53 19	jsl $1953c7	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.195461		22 7a 4e 19	jsl $194e7a	                JSL IF_CREATE           ; Create file.
.195465		b0 03		bcs $19546a	                BCS check_for_end
.195467		82 31 00	brl $19549b	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.19546a		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.19546c		c5 38		cmp $0358	                CMP DOS_END_PTR
.19546e		d0 06		bne $195476	                BNE next_block
.195470		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195472		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.195474		f0 1d		beq $195493	                BEQ done                ; Yes: we're done
.195476		22 8c 53 19	jsl $19538c	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.19547a		22 c7 53 19	jsl $1953c7	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.19547e		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.195481		a9 00 00	lda #$0000	                LDA #0
.195484		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195486		c8		iny		                INY
.195487		c8		iny		                INY
.195488		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19548a		22 4d 4f 19	jsl $194f4d	                JSL IF_WRITE            ; Append to the file
.19548e		b0 da		bcs $19546a	                BCS check_for_end       ; And try again
.195490		82 08 00	brl $19549b	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.195493		5c a2 54 19	jmp $1954a2	done            JML IF_SUCCESS
.195497						IF_FAILURE
.195497		e2 20		sep #$20	                SEP #$20        ; set A short
.195499		85 0e		sta $032e	                STA DOS_STATUS
.19549b		28		plp		IF_PASSFAILURE  PLP
.19549c		18		clc		                CLC
.19549d		ab		plb		                PLB
.19549e		2b		pld		                PLD
.19549f		7a		ply		                PLY
.1954a0		fa		plx		                PLX
.1954a1		6b		rtl		                RTL
.1954a2						IF_SUCCESS
.1954a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1954a4		64 00		stz $0320	                STZ BIOS_STATUS
.1954a6		64 0e		stz $032e	                STZ DOS_STATUS
.1954a8		28		plp		                PLP
.1954a9		38		sec		                SEC
.1954aa		ab		plb		                PLB
.1954ab		2b		pld		                PLD
.1954ac		7a		ply		                PLY
.1954ad		fa		plx		                PLX
.1954ae		6b		rtl		                RTL
.1954af						IF_RUN
.1954af		da		phx		                PHX
.1954b0		5a		phy		                PHY
.1954b1		0b		phd		                PHD
.1954b2		8b		phb		                PHB
.1954b3		08		php		                PHP
.1954b4		48		pha		                PHA             ; begin setdbr macro
.1954b5		08		php		                PHP
.1954b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1954b8		a9 00		lda #$00	                LDA #0
.1954ba		48		pha		                PHA
.1954bb		ab		plb		                PLB
.1954bc		28		plp		                PLP
.1954bd		68		pla		                PLA             ; end setdbr macro
.1954be		48		pha		                PHA             ; begin setdp macro
.1954bf		08		php		                PHP
.1954c0		c2 20		rep #$20	                REP #$20        ; set A long
.1954c2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1954c5		5b		tcd		                TCD
.1954c6		28		plp		                PLP
.1954c7		68		pla		                PLA             ; end setdp macro
.1954c8		e2 20		sep #$20	                SEP #$20        ; set A short
.1954ca		c2 10		rep #$10	                REP #$10        ; set X long
.1954cc		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.1954ce		a2 00 00	ldx #$0000	                LDX #0
.1954d1		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.1954d5		e8		inx		                INX
.1954d6		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.1954d9		d0 f6		bne $1954d1	                BNE clr_fd_loop
.1954db		c2 20		rep #$20	                REP #$20        ; set A long
.1954dd		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.1954e0		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.1954e4		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.1954e7		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.1954eb		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.1954ed		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.1954f1		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.1954f3		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.1954f7		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.1954fa		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.1954fc		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1954fe		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.195501		85 20		sta $0340	                STA DOS_FD_PTR
.195503		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.195506		85 22		sta $0342	                STA DOS_FD_PTR+2
.195508		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.19550b		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.19550f		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.195513		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.195517		b0 03		bcs $19551c	                BCS chk_execute
.195519		82 7f ff	brl $19549b	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.19551c						chk_execute
.19551c		c2 20		rep #$20	                REP #$20        ; set A long
.19551e		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.195520		d0 0b		bne $19552d	                BNE try_execute                         ; If so: call it
.195522		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.195524		d0 07		bne $19552d	                BNE try_execute
.195526		e2 20		sep #$20	                SEP #$20        ; set A short
.195528		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.19552a		82 6a ff	brl $195497	                BRL IF_FAILURE
.19552d						try_execute
.19552d		e2 20		sep #$20	                SEP #$20        ; set A short
.19552f		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.195531		48		pha		                PHA
.195532		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.195534		48		pha		                PHA
.195535		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.195537		48		pha		                PHA
.195538		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.19553a		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.19553c		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.195540		e2 20		sep #$20	                SEP #$20        ; set A short
.195542		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.195543		68		pla		                PLA
.195544		68		pla		                PLA
.195545		82 5a ff	brl $1954a2	                BRL IF_SUCCESS                          ; Return success
.195548						IF_ALLOCFD
.195548		da		phx		                PHX
.195549		5a		phy		                PHY
.19554a		0b		phd		                PHD
.19554b		8b		phb		                PHB
.19554c		08		php		                PHP
.19554d		48		pha		                PHA             ; begin setdbr macro
.19554e		08		php		                PHP
.19554f		e2 20		sep #$20	                SEP #$20        ; set A short
.195551		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195553		48		pha		                PHA
.195554		ab		plb		                PLB
.195555		28		plp		                PLP
.195556		68		pla		                PLA             ; end setdbr macro
.195557		48		pha		                PHA             ; begin setdp macro
.195558		08		php		                PHP
.195559		c2 20		rep #$20	                REP #$20        ; set A long
.19555b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19555e		5b		tcd		                TCD
.19555f		28		plp		                PLP
.195560		68		pla		                PLA             ; end setdp macro
.195561		c2 10		rep #$10	                REP #$10        ; set X long
.195563		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.195566						chk_fd
.195566		e2 20		sep #$20	                SEP #$20        ; set A short
.195568		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.19556b		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.19556d		f0 14		beq $195583	                BEQ found                           ; No: flag and return the found descriptor
.19556f						next_fd
.19556f		c2 20		rep #$20	                REP #$20        ; set A long
.195571		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.195572		18		clc		                CLC
.195573		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.195576		aa		tax		                TAX
.195577		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.19557a		90 ea		bcc $195566	                BLT chk_fd                          ; No: check this new file descriptor
.19557c		e2 20		sep #$20	                SEP #$20        ; set A short
.19557e		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.195580		82 14 ff	brl $195497	                BRL IF_FAILURE
.195583		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.195585		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.195588		c2 20		rep #$20	                REP #$20        ; set A long
.19558a		8a		txa		                TXA
.19558b		18		clc		                CLC
.19558c		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.19558f		85 20		sta $0340	                STA @b DOS_FD_PTR
.195591		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.195594		69 00 00	adc #$0000	                ADC #0
.195597		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195599		82 06 ff	brl $1954a2	                BRL IF_SUCCESS                      ; Return this file descriptor
.19559c						IF_FREEFD
.19559c		da		phx		                PHX
.19559d		5a		phy		                PHY
.19559e		0b		phd		                PHD
.19559f		8b		phb		                PHB
.1955a0		08		php		                PHP
.1955a1		48		pha		                PHA             ; begin setdbr macro
.1955a2		08		php		                PHP
.1955a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1955a5		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1955a7		48		pha		                PHA
.1955a8		ab		plb		                PLB
.1955a9		28		plp		                PLP
.1955aa		68		pla		                PLA             ; end setdbr macro
.1955ab		48		pha		                PHA             ; begin setdp macro
.1955ac		08		php		                PHP
.1955ad		c2 20		rep #$20	                REP #$20        ; set A long
.1955af		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955b2		5b		tcd		                TCD
.1955b3		28		plp		                PLP
.1955b4		68		pla		                PLA             ; end setdp macro
.1955b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1955b7		c2 10		rep #$10	                REP #$10        ; set X long
.1955b9		a9 00		lda #$00	                LDA #0
.1955bb		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.1955bd		82 e2 fe	brl $1954a2	                BRL IF_SUCCESS
.1955c0						DOS_SRC2DST
.1955c0		da		phx		                PHX
.1955c1		5a		phy		                PHY
.1955c2		0b		phd		                PHD
.1955c3		8b		phb		                PHB
.1955c4		08		php		                PHP
.1955c5		48		pha		                PHA             ; begin setdp macro
.1955c6		08		php		                PHP
.1955c7		c2 20		rep #$20	                REP #$20        ; set A long
.1955c9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955cc		5b		tcd		                TCD
.1955cd		28		plp		                PLP
.1955ce		68		pla		                PLA             ; end setdp macro
.1955cf		c2 30		rep #$30	                REP #$30        ; set A&X long
.1955d1		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1955d4		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955d6		aa		tax		                TAX                                     ; X := source buffer address
.1955d7		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.1955d9		a8		tay		                TAY                                     ; Y := destination buffer address
.1955da		e2 20		sep #$20	                SEP #$20        ; set A short
.1955dc		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.1955de		48		pha		                PHA
.1955df		ab		plb		                PLB
.1955e0		c2 20		rep #$20	                REP #$20        ; set A long
.1955e2		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.1955e5		f0 11		beq $1955f8	loop            BEQ done
.1955e7		48		pha		                PHA
.1955e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1955ea		bd 00 00	lda $180000,x	                LDA #0,B,X
.1955ed		99 00 00	sta $180000,y	                STA #0,B,Y
.1955f0		c2 20		rep #$20	                REP #$20        ; set A long
.1955f2		68		pla		                PLA
.1955f3		3a		dec a		                DEC A
.1955f4		e8		inx		                INX
.1955f5		c8		iny		                INY
.1955f6		80 ed		bra $1955e5	                BRA loop
.1955f8		28		plp		done            PLP
.1955f9		ab		plb		                PLB
.1955fa		2b		pld		                PLD
.1955fb		7a		ply		                PLY
.1955fc		fa		plx		                PLX
.1955fd		6b		rtl		                RTL
.1955fe						IF_COPY
.1955fe		da		phx		                PHX
.1955ff		5a		phy		                PHY
.195600		0b		phd		                PHD
.195601		8b		phb		                PHB
.195602		08		php		                PHP
.195603		48		pha		                PHA             ; begin setdbr macro
.195604		08		php		                PHP
.195605		e2 20		sep #$20	                SEP #$20        ; set A short
.195607		a9 00		lda #$00	                LDA #0
.195609		48		pha		                PHA
.19560a		ab		plb		                PLB
.19560b		28		plp		                PLP
.19560c		68		pla		                PLA             ; end setdbr macro
.19560d		48		pha		                PHA             ; begin setdp macro
.19560e		08		php		                PHP
.19560f		c2 20		rep #$20	                REP #$20        ; set A long
.195611		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195614		5b		tcd		                TCD
.195615		28		plp		                PLP
.195616		68		pla		                PLA             ; end setdp macro
.195617		22 48 55 19	jsl $195548	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.19561b		b0 03		bcs $195620	                BCS set_src_path
.19561d		82 7b fe	brl $19549b	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.195620						set_src_path
.195620		c2 30		rep #$30	                REP #$30        ; set A&X long
.195622		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.195625		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.195627		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195629		c8		iny		                INY
.19562a		c8		iny		                INY
.19562b		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.19562d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19562f						alloc_dest
.19562f		c2 30		rep #$30	                REP #$30        ; set A&X long
.195631		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.195633		85 30		sta $0350	                STA @b DOS_SRC_PTR
.195635		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195637		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.195639		22 48 55 19	jsl $195548	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.19563d		b0 0f		bcs $19564e	                BCS set_paths                   ; If everything is ok... start setting the paths
.19563f		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195641		85 20		sta $0340	                STA @b DOS_FD_PTR
.195643		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195645		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195647		22 9c 55 19	jsl $19559c	                JSL IF_FREEFD                   ; And free it
.19564b		82 4d fe	brl $19549b	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.19564e						set_paths
.19564e		c2 30		rep #$30	                REP #$30        ; set A&X long
.195650		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.195652		85 34		sta $0354	                STA @b DOS_DST_PTR
.195654		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.195656		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.195658		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.19565b		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.19565d		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19565f		c8		iny		                INY
.195660		c8		iny		                INY
.195661		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.195663		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195665		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195667		85 20		sta $0340	                STA @b DOS_FD_PTR
.195669		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.19566b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19566d		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.195671		b0 10		bcs $195683	                BCS src_open                    ; If success, work with the openned file
.195673		00		brk #		                BRK
.195674		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195676		85 20		sta $0340	                STA @b DOS_FD_PTR
.195678		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.19567a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19567c		22 9c 55 19	jsl $19559c	                JSL IF_FREEFD                   ; And free it
.195680		82 bc ff	brl $19563f	                BRL err_free_src_fd             ; Free the source file descriptor
.195683		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.195686		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195688		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19568a		c8		iny		                INY
.19568b		c8		iny		                INY
.19568c		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19568e		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195690		22 c0 55 19	jsl $1955c0	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.195694		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195696		85 20		sta $0340	                STA @b DOS_FD_PTR
.195698		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.19569a		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19569c		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.1956a0		b0 0f		bcs $1956b1	                BCS read_next                   ; If sucessful, try to get the next cluster
.1956a2		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1956a4		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956a6		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1956a8		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956aa		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.1956ae		82 c3 ff	brl $195674	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.1956b1						read_next
.1956b1		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1956b3		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956b5		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1956b7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956b9		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.1956bd		b0 19		bcs $1956d8	                BCS copy2dest                   ; If successful, copy the sector
.1956bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1956c1		a5 0e		lda $032e	                LDA @b DOS_STATUS
.1956c3		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.1956c5		f0 32		beq $1956f9	                BEQ file_copied                 ; Yes: we're done copying
.1956c7						err_dest_close
.1956c7		c2 20		rep #$20	                REP #$20        ; set A long
.1956c9		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956cb		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956cd		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956cf		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956d1		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.1956d5		82 ca ff	brl $1956a2	                BRL err_src_close               ; Close the source and throw an error
.1956d8						copy2dest
.1956d8		22 c0 55 19	jsl $1955c0	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.1956dc		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.1956df		a9 00 00	lda #$0000	                LDA #0
.1956e2		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956e4		c8		iny		                INY
.1956e5		c8		iny		                INY
.1956e6		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956e8		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956ea		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956ec		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956ee		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956f0		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.1956f4		90 d1		bcc $1956c7	                BCC err_dest_close              ; If error: close all files and throw the error
.1956f6		82 b8 ff	brl $1956b1	                BRL read_next                   ; Otherwise: repeat the loop
.1956f9						file_copied
.1956f9		c2 20		rep #$20	                REP #$20        ; set A long
.1956fb		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956fd		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956ff		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195701		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195703		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.195707		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195709		85 20		sta $0340	                STA @b DOS_FD_PTR
.19570b		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.19570d		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19570f		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.195713		82 8c fd	brl $1954a2	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.195716						UART_SELECT
.195716		08		php		            PHP
.195717		c2 20		rep #$20	                REP #$20        ; set A long
.195719		c9 02 00	cmp #$0002	            CMP #2
.19571c		f0 07		beq $195725	            BEQ is_COM2
.19571e		c2 20		rep #$20	                REP #$20        ; set A long
.195720		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.195723		80 05		bra $19572a	            BRA setaddr
.195725						is_COM2
.195725		c2 20		rep #$20	                REP #$20        ; set A long
.195727		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.19572a		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.19572e		e2 20		sep #$20	                SEP #$20        ; set A short
.195730		a9 af		lda #$af	            LDA #`UART1_BASE
.195732		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.195736		28		plp		            PLP
.195737		6b		rtl		            RTL
.195738						UART_SETBPS
.195738		08		php		            PHP
.195739		0b		phd		            PHD
.19573a		48		pha		                PHA             ; begin setdp macro
.19573b		08		php		                PHP
.19573c		c2 20		rep #$20	                REP #$20        ; set A long
.19573e		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195741		5b		tcd		                TCD
.195742		28		plp		                PLP
.195743		68		pla		                PLA             ; end setdp macro
.195744		c2 30		rep #$30	                REP #$30        ; set A&X long
.195746		48		pha		            PHA
.195747		e2 20		sep #$20	                SEP #$20        ; set A short
.195749		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.19574c		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.19574e		09 80		ora #$80	            ORA #LCR_DLB
.195750		97 00		sta [$0700],y	            STA [CURRUART],Y
.195752		c2 20		rep #$20	                REP #$20        ; set A long
.195754		68		pla		            PLA
.195755		a0 00 00	ldy #$0000	            LDY #UART_DLL
.195758		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.19575a		e2 20		sep #$20	                SEP #$20        ; set A short
.19575c		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.19575f		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195761		49 80		eor #$80	            EOR #LCR_DLB
.195763		97 00		sta [$0700],y	            STA [CURRUART],Y
.195765		2b		pld		            PLD
.195766		28		plp		            PLP
.195767		6b		rtl		            RTL
.195768						UART_SETLCR
.195768		08		php		            PHP
.195769		0b		phd		            PHD
.19576a		48		pha		                PHA             ; begin setdp macro
.19576b		08		php		                PHP
.19576c		c2 20		rep #$20	                REP #$20        ; set A long
.19576e		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195771		5b		tcd		                TCD
.195772		28		plp		                PLP
.195773		68		pla		                PLA             ; end setdp macro
.195774		e2 20		sep #$20	                SEP #$20        ; set A short
.195776		c2 10		rep #$10	                REP #$10        ; set X long
.195778		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.19577a		a0 03 00	ldy #$0003	            LDY #UART_LCR
.19577d		97 00		sta [$0700],y	            STA [CURRUART],Y
.19577f		2b		pld		            PLD
.195780		28		plp		            PLP
.195781		6b		rtl		            RTL
.195782						UART_INIT
.195782		08		php		            PHP
.195783		0b		phd		            PHD
.195784		c2 30		rep #$30	                REP #$30        ; set A&X long
.195786		48		pha		                PHA             ; begin setdp macro
.195787		08		php		                PHP
.195788		c2 20		rep #$20	                REP #$20        ; set A long
.19578a		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.19578d		5b		tcd		                TCD
.19578e		28		plp		                PLP
.19578f		68		pla		                PLA             ; end setdp macro
.195790		a9 01 00	lda #$0001	            LDA #UART_115200
.195793		22 38 57 19	jsl $195738	            JSL UART_SETBPS
.195797		e2 20		sep #$20	                SEP #$20        ; set A short
.195799		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.19579b		22 68 57 19	jsl $195768	            JSL UART_SETLCR
.19579f		a9 e1		lda #$e1	            LDA #%11100001
.1957a1		a0 02 00	ldy #$0002	            LDY #UART_FCR
.1957a4		97 00		sta [$0700],y	            STA [CURRUART],Y
.1957a6		2b		pld		            PLD
.1957a7		28		plp		            PLP
.1957a8		6b		rtl		            RTL
.1957a9						UART_HASBYT
.1957a9		08		php		            PHP
.1957aa		0b		phd		            PHD
.1957ab		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957ad		48		pha		                PHA             ; begin setdp macro
.1957ae		08		php		                PHP
.1957af		c2 20		rep #$20	                REP #$20        ; set A long
.1957b1		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957b4		5b		tcd		                TCD
.1957b5		28		plp		                PLP
.1957b6		68		pla		                PLA             ; end setdp macro
.1957b7		e2 20		sep #$20	                SEP #$20        ; set A short
.1957b9		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1957bc		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1957be		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1957c0		d0 04		bne $1957c6	            BNE ret_true            ; If flag is set, return true
.1957c2		2b		pld		ret_false   PLD                     ; Return false
.1957c3		28		plp		            PLP
.1957c4		18		clc		            CLC
.1957c5		6b		rtl		            RTL
.1957c6		2b		pld		ret_true    PLD                     ; Return true
.1957c7		28		plp		            PLP
.1957c8		38		sec		            SEC
.1957c9		6b		rtl		            RTL
.1957ca						UART_GETC
.1957ca		08		php		            PHP
.1957cb		0b		phd		            PHD
.1957cc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957ce		48		pha		                PHA             ; begin setdp macro
.1957cf		08		php		                PHP
.1957d0		c2 20		rep #$20	                REP #$20        ; set A long
.1957d2		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957d5		5b		tcd		                TCD
.1957d6		28		plp		                PLP
.1957d7		68		pla		                PLA             ; end setdp macro
.1957d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1957da		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1957dd		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.1957df		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1957e1		f0 fa		beq $1957dd	            BEQ wait_getc           ; If the flag is clear, wait
.1957e3		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.1957e6		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.1957e8		2b		pld		            PLD
.1957e9		28		plp		            PLP
.1957ea		6b		rtl		            RTL
.1957eb						UART_PUTC
.1957eb		08		php		            PHP
.1957ec		0b		phd		            PHD
.1957ed		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957ef		48		pha		                PHA             ; begin setdp macro
.1957f0		08		php		                PHP
.1957f1		c2 20		rep #$20	                REP #$20        ; set A long
.1957f3		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957f6		5b		tcd		                TCD
.1957f7		28		plp		                PLP
.1957f8		68		pla		                PLA             ; end setdp macro
.1957f9		e2 20		sep #$20	                SEP #$20        ; set A short
.1957fb		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.1957fc		a0 05 00	ldy #$0005	            LDY #UART_LSR
.1957ff		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195801		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.195803		f0 fa		beq $1957ff	            BEQ wait_putc
.195805		68		pla		            PLA
.195806		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.195809		97 00		sta [$0700],y	            STA [CURRUART],Y
.19580b		2b		pld		            PLD
.19580c		28		plp		            PLP
.19580d		6b		rtl		            RTL
.19580e						UART_PUTS
.19580e		08		php		            PHP
.19580f		e2 20		sep #$20	                SEP #$20        ; set A short
.195811		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.195814		f0 07		beq $19581d	            BEQ done
.195816		22 eb 57 19	jsl $1957eb	            JSL UART_PUTC
.19581a		e8		inx		            INX
.19581b		80 f4		bra $195811	            BRA put_loop
.19581d		28		plp		done        PLP
.19581e		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.19581f						JOYSTICK_SET_NES_MODE
.19581f		e2 20		sep #$20	                SEP #$20        ; set A short
.195821		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195825		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.195827		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19582b		6b		rtl		          RTL
.19582c						JOYSTICK_SET_SNES_MODE
.19582c		e2 20		sep #$20	                SEP #$20        ; set A short
.19582e		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195832		29 fb		and #$fb	          AND #~NES_SNES_JOY
.195834		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.195836		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19583a		6b		rtl		          RTL
.19583b						JOYSTICK_ENABLE_NES_SNES_PORT0
.19583b		e2 20		sep #$20	                SEP #$20        ; set A short
.19583d		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195841		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195843		09 01		ora #$01	          ORA #NES_SNES_EN0
.195845		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195849		6b		rtl		          RTL
.19584a						JOYSTICK_ENABLE_NES_SNES_PORT1
.19584a		e2 20		sep #$20	                SEP #$20        ; set A short
.19584c		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195850		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195852		09 02		ora #$02	          ORA #NES_SNES_EN1
.195854		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195858		6b		rtl		          RTL
.195859						JOYSTICK_DISABLE_NES_SNES_PORT0
.195859		e2 20		sep #$20	                SEP #$20        ; set A short
.19585b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19585f		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195861		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195865		6b		rtl		          RTL
.195866						JOYSTICK_DISABLE_NES_SNES_PORT1
.195866		e2 20		sep #$20	                SEP #$20        ; set A short
.195868		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19586c		29 fd		and #$fd	          AND #~NES_SNES_EN1
.19586e		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195872		6b		rtl		          RTL
.195873						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.195873		e2 20		sep #$20	                SEP #$20        ; set A short
.195875		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195879		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.19587b		c9 00		cmp #$00	          CMP #$00
.19587d		f0 14		beq $195893	          BEQ END_OF_JOYSTICK_POLL
.19587f		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195883		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.195885		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195889						JOYSTICK_POLLING_ISNOTOVER
.195889		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.19588d		29 40		and #$40	          AND #NES_SNES_DONE
.19588f		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.195891		d0 f6		bne $195889	          BNE JOYSTICK_POLLING_ISNOTOVER
.195893						END_OF_JOYSTICK_POLL
.195893		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.195894						SDC_TEST
.195894		8b		phb		                PHB
.195895		0b		phd		                PHD
.195896		08		php		                PHP
.195897		48		pha		                PHA             ; begin setdbr macro
.195898		08		php		                PHP
.195899		e2 20		sep #$20	                SEP #$20        ; set A short
.19589b		a9 00		lda #$00	                LDA #0
.19589d		48		pha		                PHA
.19589e		ab		plb		                PLB
.19589f		28		plp		                PLP
.1958a0		68		pla		                PLA             ; end setdbr macro
.1958a1		48		pha		                PHA             ; begin setdp macro
.1958a2		08		php		                PHP
.1958a3		c2 20		rep #$20	                REP #$20        ; set A long
.1958a5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1958a8		5b		tcd		                TCD
.1958a9		28		plp		                PLP
.1958aa		68		pla		                PLA             ; end setdp macro
.1958ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1958ad		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.1958af		8d 1e 00	sta $001e	                STA @w CURCOLOR
.1958b2		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.1958b6		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.1958ba		22 fa 58 19	jsl $1958fa	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.1958be		b0 03		bcs $1958c3	                BCS init_ok
.1958c0		82 15 00	brl $1958d8	                BRL done
.1958c3		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.1958c5		85 01		sta $0321	                STA BIOS_DEV
.1958c7		22 02 3f 19	jsl $193f02	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.1958cb		b0 03		bcs $1958d0	                BCS mount_ok
.1958cd		82 08 00	brl $1958d8	                BRL done
.1958d0		22 b9 4f 19	jsl $194fb9	mount_ok        JSL IF_DIROPEN
.1958d4		b0 02		bcs $1958d8	                BCS all_ok
.1958d6		80 00		bra $1958d8	                BRA done
.1958d8						all_ok
.1958d8		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.1958dc		28		plp		                PLP
.1958dd		2b		pld		                PLD
.1958de		ab		plb		                PLB
.1958df		6b		rtl		                RTL
.1958e0						SDC_WAITBUSY
.1958e0		08		php		                PHP
.1958e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1958e3		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.1958e7		29 01		and #$01	                AND #SDC_TRANS_BUSY
.1958e9		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.1958eb		f0 f6		beq $1958e3	                BEQ wait_xact
.1958ed		28		plp		                PLP
.1958ee		6b		rtl		                RTL
.1958ef						SDC_RESET
.1958ef		08		php		                PHP
.1958f0		e2 20		sep #$20	                SEP #$20        ; set A short
.1958f2		a9 01		lda #$01	                LDA #1
.1958f4		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.1958f8		28		plp		                PLP
.1958f9		6b		rtl		                RTL
.1958fa						SDC_INIT
.1958fa		0b		phd		                PHD
.1958fb		8b		phb		                PHB
.1958fc		08		php		                PHP
.1958fd		48		pha		                PHA             ; begin setdbr macro
.1958fe		08		php		                PHP
.1958ff		e2 20		sep #$20	                SEP #$20        ; set A short
.195901		a9 00		lda #$00	                LDA #0
.195903		48		pha		                PHA
.195904		ab		plb		                PLB
.195905		28		plp		                PLP
.195906		68		pla		                PLA             ; end setdbr macro
.195907		48		pha		                PHA             ; begin setdp macro
.195908		08		php		                PHP
.195909		c2 20		rep #$20	                REP #$20        ; set A long
.19590b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19590e		5b		tcd		                TCD
.19590f		28		plp		                PLP
.195910		68		pla		                PLA             ; end setdp macro
.195911		e2 20		sep #$20	                SEP #$20        ; set A short
.195913		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195917		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195919		f0 04		beq $19591f	                BEQ start_trans                     ; Yes: start the transaction
.19591b		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.19591d		80 22		bra $195941	                BRA set_error
.19591f		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.195921		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.195925		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195927		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.19592b		22 e0 58 19	jsl $1958e0	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.19592f		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195933		d0 07		bne $19593c	                BNE ret_error                       ; Is there one? Process the error
.195935		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.195937		28		plp		                PLP
.195938		ab		plb		                PLB
.195939		2b		pld		                PLD
.19593a		38		sec		                SEC
.19593b		6b		rtl		                RTL
.19593c		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.19593f		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.195941		85 00		sta $0320	set_error       STA BIOS_STATUS
.195943		28		plp		                PLP
.195944		ab		plb		                PLB
.195945		2b		pld		                PLD
.195946		18		clc		                CLC
.195947		6b		rtl		                RTL
.195948						SDC_GETBLOCK
.195948		0b		phd		                PHD
.195949		8b		phb		                PHB
.19594a		08		php		                PHP
.19594b		48		pha		                PHA             ; begin setdbr macro
.19594c		08		php		                PHP
.19594d		e2 20		sep #$20	                SEP #$20        ; set A short
.19594f		a9 00		lda #$00	                LDA #0
.195951		48		pha		                PHA
.195952		ab		plb		                PLB
.195953		28		plp		                PLP
.195954		68		pla		                PLA             ; end setdbr macro
.195955		48		pha		                PHA             ; begin setdp macro
.195956		08		php		                PHP
.195957		c2 20		rep #$20	                REP #$20        ; set A long
.195959		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19595c		5b		tcd		                TCD
.19595d		28		plp		                PLP
.19595e		68		pla		                PLA             ; end setdp macro
.19595f		e2 20		sep #$20	                SEP #$20        ; set A short
.195961		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195965		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195967		f0 04		beq $19596d	                BEQ led_on                          ; Yes: turn on the LED
.195969		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.19596b		80 71		bra $1959de	                BRA ret_error
.19596d		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195971		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195973		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195977		a9 00		lda #$00	                LDA #0
.195979		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.19597d		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.19597f		0a		asl a		                ASL A
.195980		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195984		a5 03		lda $0323	                LDA BIOS_LBA+1
.195986		2a		rol a		                ROL A
.195987		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.19598b		a5 04		lda $0324	                LDA BIOS_LBA+2
.19598d		2a		rol a		                ROL A
.19598e		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195992		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.195994		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195998		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.19599a		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.19599e		22 e0 58 19	jsl $1958e0	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.1959a2		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1959a6		d0 36		bne $1959de	                BNE ret_error                       ; Is there one? Process the error
.1959a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1959aa		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.1959ae		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.1959b0		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.1959b4		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.1959b6		c2 10		rep #$10	                REP #$10        ; set X long
.1959b8		a0 00 00	ldy #$0000	                LDY #0
.1959bb		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.1959bf		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.1959c1		c8		iny		                INY                                 ; Advance to the next byte
.1959c2		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.1959c5		d0 f4		bne $1959bb	                BNE loop_rd                         ; No: keep reading
.1959c7		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1959cb		d0 11		bne $1959de	                BNE ret_error                       ; Is there one? Process the error
.1959cd		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.1959cf		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1959d3		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1959d5		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1959d9		28		plp		                PLP
.1959da		ab		plb		                PLB
.1959db		2b		pld		                PLD
.1959dc		38		sec		                SEC
.1959dd		6b		rtl		                RTL
.1959de		85 00		sta $0320	ret_error       STA BIOS_STATUS
.1959e0		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1959e4		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1959e6		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1959ea		28		plp		                PLP
.1959eb		ab		plb		                PLB
.1959ec		2b		pld		                PLD
.1959ed		18		clc		                CLC
.1959ee		6b		rtl		                RTL
.1959ef						SDC_PUTBLOCK
.1959ef		0b		phd		                PHD
.1959f0		8b		phb		                PHB
.1959f1		08		php		                PHP
.1959f2		48		pha		                PHA             ; begin setdbr macro
.1959f3		08		php		                PHP
.1959f4		e2 20		sep #$20	                SEP #$20        ; set A short
.1959f6		a9 00		lda #$00	                LDA #0
.1959f8		48		pha		                PHA
.1959f9		ab		plb		                PLB
.1959fa		28		plp		                PLP
.1959fb		68		pla		                PLA             ; end setdbr macro
.1959fc		48		pha		                PHA             ; begin setdp macro
.1959fd		08		php		                PHP
.1959fe		c2 20		rep #$20	                REP #$20        ; set A long
.195a00		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195a03		5b		tcd		                TCD
.195a04		28		plp		                PLP
.195a05		68		pla		                PLA             ; end setdp macro
.195a06		e2 20		sep #$20	                SEP #$20        ; set A short
.195a08		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195a0c		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195a0e		f0 04		beq $195a14	                BEQ check_wp                        ; Yes: check for write protect
.195a10		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195a12		80 65		bra $195a79	                BRA ret_error
.195a14		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.195a16		f0 04		beq $195a1c	                BEQ led_on                          ; Yes: start the transaction
.195a18		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.195a1a		80 5d		bra $195a79	                BRA ret_error
.195a1c		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195a20		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195a22		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a26		c2 10		rep #$10	                REP #$10        ; set X long
.195a28		a0 00 00	ldy #$0000	                LDY #0
.195a2b		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.195a2d		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.195a31		c8		iny		                INY                                 ; Advance to the next byte
.195a32		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195a35		d0 f4		bne $195a2b	                BNE loop_wr                         ; No: keep writing
.195a37		a9 00		lda #$00	                LDA #0
.195a39		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195a3d		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.195a3f		0a		asl a		                ASL A
.195a40		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195a44		a5 03		lda $0323	                LDA BIOS_LBA+1
.195a46		2a		rol a		                ROL A
.195a47		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195a4b		a5 04		lda $0324	                LDA BIOS_LBA+2
.195a4d		2a		rol a		                ROL A
.195a4e		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195a52		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.195a54		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195a58		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195a5a		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195a5e		22 e0 58 19	jsl $1958e0	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195a62		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195a66		d0 11		bne $195a79	                BNE ret_error                       ; Is there one? Process the error
.195a68		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195a6a		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195a6e		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195a70		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a74		28		plp		                PLP
.195a75		ab		plb		                PLB
.195a76		2b		pld		                PLD
.195a77		38		sec		                SEC
.195a78		6b		rtl		                RTL
.195a79		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195a7b		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195a7f		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195a81		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a85		28		plp		                PLP
.195a86		ab		plb		                PLB
.195a87		2b		pld		                PLD
.195a88		18		clc		                CLC
.195a89		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.195a8a						FDC_TEST
.195a8a		8b		phb		                    PHB
.195a8b		0b		phd		                    PHD
.195a8c		08		php		                    PHP
.195a8d		48		pha		                PHA             ; begin setdbr macro
.195a8e		08		php		                PHP
.195a8f		e2 20		sep #$20	                SEP #$20        ; set A short
.195a91		a9 00		lda #$00	                LDA #0
.195a93		48		pha		                PHA
.195a94		ab		plb		                PLB
.195a95		28		plp		                PLP
.195a96		68		pla		                PLA             ; end setdbr macro
.195a97		48		pha		                PHA             ; begin setdp macro
.195a98		08		php		                PHP
.195a99		c2 20		rep #$20	                REP #$20        ; set A long
.195a9b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195a9e		5b		tcd		                TCD
.195a9f		28		plp		                PLP
.195aa0		68		pla		                PLA             ; end setdp macro
.195aa1		e2 20		sep #$20	                SEP #$20        ; set A short
.195aa3		a9 f0		lda #$f0	                    LDA #$F0
.195aa5		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.195aa8		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.195aac		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.195ab0		c2 30		rep #$30	                REP #$30        ; set A&X long
.195ab2		22 80 5d 19	jsl $195d80	                    JSL FDC_Init
.195ab6		b0 03		bcs $195abb	                    BCS init_ok
.195ab8		82 20 00	brl $195adb	                    BRL motor_off
.195abb		22 7f 64 19	jsl $19647f	init_ok             JSL FDC_CHK_MEDIA
.195abf		90 03		bcc $195ac4	                    BCC no_media
.195ac1		82 03 00	brl $195ac7	                    BRL is_ok1
.195ac4						no_media
.195ac4		82 14 00	brl $195adb	                    BRL motor_off
.195ac7		22 12 63 19	jsl $196312	is_ok1              JSL FDC_MOUNT
.195acb		90 03		bcc $195ad0	                    BCC mount_err
.195acd		82 03 00	brl $195ad3	                    BRL is_ok2
.195ad0						mount_err
.195ad0		82 08 00	brl $195adb	                    BRL motor_off
.195ad3		22 e7 5a 19	jsl $195ae7	is_ok2              JSL FDC_TEST_PUTBLOCK
.195ad7		b0 02		bcs $195adb	                    BCS all_ok
.195ad9		80 00		bra $195adb	                    BRA motor_off
.195adb						all_ok
.195adb		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.195adf		22 30 5e 19	jsl $195e30	                    JSL FDC_Motor_Off
.195ae3		28		plp		                    PLP
.195ae4		2b		pld		                    PLD
.195ae5		ab		plb		                    PLB
.195ae6		6b		rtl		                    RTL
.195ae7						FDC_TEST_PUTBLOCK
.195ae7		e2 20		sep #$20	                SEP #$20        ; set A short
.195ae9		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.195aeb		a2 00 00	ldx #$0000	                    LDX #0
.195aee		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.195af2		1a		inc a		                    INC A
.195af3		e8		inx		                    INX
.195af4		e0 00 02	cpx #$0200	                    CPX #512
.195af7		d0 f5		bne $195aee	                    BNE init_loop
.195af9		c2 20		rep #$20	                REP #$20        ; set A long
.195afb		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.195afe		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.195b02		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.195b05		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.195b09		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.195b0c		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.195b10		a9 00 00	lda #$0000	                    LDA #0
.195b13		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.195b17		22 a6 62 19	jsl $1962a6	                    JSL FDC_PUTBLOCK                ; Try to write the data
.195b1b		6b		rtl		                    RTL
>195b1c		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195b24		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>195b34		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.195b38						FDC_Check_RQM
.195b38		0b		phd		                    PHD
.195b39		08		php		                    PHP
.195b3a		48		pha		                PHA             ; begin setdp macro
.195b3b		08		php		                PHP
.195b3c		c2 20		rep #$20	                REP #$20        ; set A long
.195b3e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b41		5b		tcd		                TCD
.195b42		28		plp		                PLP
.195b43		68		pla		                PLA             ; end setdp macro
.195b44		e2 20		sep #$20	                SEP #$20        ; set A short
.195b46		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b48		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195b4c		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b4e		30 12		bmi $195b62	                    BMI time_out            ; If so: signal a time out
.195b50		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b54		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195b56		f0 f4		beq $195b4c	                    BEQ loop
.195b58		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b5a		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195b5e		28		plp		                    PLP
.195b5f		2b		pld		                    PLD
.195b60		38		sec		                    SEC
.195b61		60		rts		                    RTS
.195b62		28		plp		time_out            PLP
.195b63		2b		pld		                    PLD
.195b64		18		clc		                    CLC
.195b65		60		rts		                    RTS
.195b66						FDC_Check_DRV0_BSY
.195b66		0b		phd		                    PHD
.195b67		08		php		                    PHP
.195b68		48		pha		                PHA             ; begin setdp macro
.195b69		08		php		                PHP
.195b6a		c2 20		rep #$20	                REP #$20        ; set A long
.195b6c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b6f		5b		tcd		                TCD
.195b70		28		plp		                PLP
.195b71		68		pla		                PLA             ; end setdp macro
.195b72		e2 20		sep #$20	                SEP #$20        ; set A short
.195b74		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b76		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195b7a		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b7c		30 12		bmi $195b90	                    BMI time_out            ; If so: signal a time out
.195b7e		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b82		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.195b84		d0 f4		bne $195b7a	                    BNE loop
.195b86		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b88		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195b8c		28		plp		                    PLP
.195b8d		2b		pld		                    PLD
.195b8e		38		sec		                    SEC
.195b8f		60		rts		                    RTS
.195b90		28		plp		time_out            PLP
.195b91		2b		pld		                    PLD
.195b92		18		clc		                    CLC
.195b93		60		rts		                    RTS
.195b94						FDC_Check_CMD_BSY
.195b94		0b		phd		                    PHD
.195b95		08		php		                    PHP
.195b96		48		pha		                PHA             ; begin setdp macro
.195b97		08		php		                PHP
.195b98		c2 20		rep #$20	                REP #$20        ; set A long
.195b9a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b9d		5b		tcd		                TCD
.195b9e		28		plp		                PLP
.195b9f		68		pla		                PLA             ; end setdp macro
.195ba0		e2 20		sep #$20	                SEP #$20        ; set A short
.195ba2		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195ba4		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195ba8		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195baa		30 12		bmi $195bbe	                    BMI time_out            ; If so: signal a time out
.195bac		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195bb0		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195bb2		d0 f4		bne $195ba8	                    BNE loop
.195bb4		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195bb6		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195bba		28		plp		                    PLP
.195bbb		2b		pld		                    PLD
.195bbc		38		sec		                    SEC
.195bbd		60		rts		                    RTS
.195bbe		28		plp		time_out            PLP
.195bbf		2b		pld		                    PLD
.195bc0		18		clc		                    CLC
.195bc1		60		rts		                    RTS
.195bc2						FDC_Can_Read_Data
.195bc2		0b		phd		                    PHD
.195bc3		08		php		                    PHP
.195bc4		48		pha		                PHA             ; begin setdp macro
.195bc5		08		php		                PHP
.195bc6		c2 20		rep #$20	                REP #$20        ; set A long
.195bc8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195bcb		5b		tcd		                TCD
.195bcc		28		plp		                PLP
.195bcd		68		pla		                PLA             ; end setdp macro
.195bce		e2 20		sep #$20	                SEP #$20        ; set A short
.195bd0		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195bd2		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195bd6		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195bd8		30 14		bmi $195bee	                    BMI time_out            ; If so: signal a time out
.195bda		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195bde		29 40		and #$40	                    AND #FDC_MSR_DIO
.195be0		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.195be2		d0 f2		bne $195bd6	                    BNE loop
.195be4		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195be6		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195bea		28		plp		                    PLP
.195beb		2b		pld		                    PLD
.195bec		38		sec		                    SEC
.195bed		60		rts		                    RTS
.195bee		28		plp		time_out            PLP
.195bef		2b		pld		                    PLD
.195bf0		18		clc		                    CLC
.195bf1		60		rts		                    RTS
.195bf2						FDC_CAN_WRITE
.195bf2		0b		phd		                    PHD
.195bf3		08		php		                    PHP
.195bf4		48		pha		                PHA             ; begin setdp macro
.195bf5		08		php		                PHP
.195bf6		c2 20		rep #$20	                REP #$20        ; set A long
.195bf8		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195bfb		5b		tcd		                TCD
.195bfc		28		plp		                PLP
.195bfd		68		pla		                PLA             ; end setdp macro
.195bfe		e2 20		sep #$20	                SEP #$20        ; set A short
.195c00		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195c02		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195c06		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195c08		30 14		bmi $195c1e	                    BMI time_out            ; If so: signal a time out
.195c0a		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195c0e		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195c10		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195c12		d0 f2		bne $195c06	                    BNE loop
.195c14		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195c16		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195c1a		28		plp		                    PLP
.195c1b		2b		pld		                    PLD
.195c1c		38		sec		                    SEC
.195c1d		60		rts		                    RTS
.195c1e		28		plp		time_out            PLP
.195c1f		2b		pld		                    PLD
.195c20		18		clc		                    CLC
.195c21		60		rts		                    RTS
.195c22						FDC_DELAY_10MS
.195c22		da		phx		                    PHX
.195c23		08		php		                    PHP
.195c24		c2 10		rep #$10	                REP #$10        ; set X long
.195c26		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.195c29		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.195c2a		ca		dex		                    DEX
.195c2b		e0 00 00	cpx #$0000	                    CPX #0
.195c2e		d0 f9		bne $195c29	                    BNE loop
.195c30		28		plp		                    PLP
.195c31		fa		plx		                    PLX
.195c32		6b		rtl		                    RTL
.195c33						FDC_COMMAND
.195c33		da		phx		                    PHX
.195c34		8b		phb		                    PHB
.195c35		0b		phd		                    PHD
.195c36		08		php		                    PHP
.195c37		48		pha		                PHA             ; begin setdbr macro
.195c38		08		php		                PHP
.195c39		e2 20		sep #$20	                SEP #$20        ; set A short
.195c3b		a9 00		lda #$00	                LDA #0
.195c3d		48		pha		                PHA
.195c3e		ab		plb		                PLB
.195c3f		28		plp		                PLP
.195c40		68		pla		                PLA             ; end setdbr macro
.195c41		48		pha		                PHA             ; begin setdp macro
.195c42		08		php		                PHP
.195c43		c2 20		rep #$20	                REP #$20        ; set A long
.195c45		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c48		5b		tcd		                TCD
.195c49		28		plp		                PLP
.195c4a		68		pla		                PLA             ; end setdp macro
.195c4b		22 22 5c 19	jsl $195c22	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.195c4f		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195c51		a2 00		ldx #$00	                    LDX #0
.195c53		a9 00		lda #$00	                    LDA #0
.195c55		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.195c58		e8		inx		                    INX
.195c59		e0 10		cpx #$10	                    CPX #16
.195c5b		d0 f8		bne $195c55	                    BNE clr_results
.195c5d		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.195c61		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195c63		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195c65		f0 04		beq $195c6b	                    BEQ start_send                          ; If so, start sending
.195c67		22 80 5d 19	jsl $195d80	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.195c6b						start_send
.195c6b		e2 10		sep #$10	                SEP #$10        ; set X short
.195c6d		a2 00		ldx #$00	                    LDX #0
.195c6f		20 38 5b	jsr $195b38	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.195c72		b0 03		bcs $195c77	                    BCS send_param
.195c74		82 5e 00	brl $195cd5	                    BRL time_out                            ; If there was a timeout, flag the time out
.195c77		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.195c7a		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.195c7e		22 22 5c 19	jsl $195c22	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.195c82		e8		inx		                    INX                                     ; Advance to the next byte
.195c83		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.195c86		d0 e7		bne $195c6f	                    BNE send_loop                           ; Keep sending until we've sent them all
.195c88		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.195c8b		d0 03		bne $195c90	                    BNE chk_data_dir
.195c8d		82 80 00	brl $195d10	                    BRL result_phase                        ; If 0: we just want a result
.195c90		10 3c		bpl $195cce	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.195c92						wr_data
.195c92		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195c94		30 03		bmi $195c99	                    BMI wr_chk_rqm
.195c96		82 3c 00	brl $195cd5	                    BRL time_out                            ; If not, raise an error
.195c99		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.195c9d		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195c9f		f0 f1		beq $195c92	                    BEQ wr_data_rdy
.195ca1		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.195ca3		d0 03		bne $195ca8	                    BNE wr_data_phase                       ; If so: transfer the data
.195ca5		82 68 00	brl $195d10	                    BRL result_phase                          ; If not: it's an error
.195ca8						wr_data_phase
.195ca8		c2 10		rep #$10	                REP #$10        ; set X long
.195caa		a0 00 00	ldy #$0000	                    LDY #0
.195cad		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195caf		30 03		bmi $195cb4	                    BMI wr_chk_nondma
.195cb1		82 21 00	brl $195cd5	                    BRL time_out                            ; If not, raise an error
.195cb4		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195cb8		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195cba		f0 54		beq $195d10	                    BEQ result_phase                        ; If not: break out to result phase
.195cbc		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.195cbe		f0 ed		beq $195cad	                    BEQ wr_data_loop                        ; No: keep waiting
.195cc0		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.195cc2		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.195cc6		c8		iny		                    INY                                     ; Move to the next position
.195cc7		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195cca		d0 e1		bne $195cad	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.195ccc		80 42		bra $195d10	                    BRA result_phase                        ; ready for the result phase
.195cce		20 c2 5b	jsr $195bc2	rd_data             JSR FDC_Can_Read_Data
.195cd1		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195cd3		30 07		bmi $195cdc	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.195cd5						time_out
.195cd5		e2 20		sep #$20	                SEP #$20        ; set A short
.195cd7		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.195cd9		82 9c 00	brl $195d78	                    BRL pass_error
.195cdc		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.195ce0		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195ce2		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195ce4		d0 eb		bne $195cd1	                    BNE rd_data_rdy
.195ce6		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195cea		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195cec		d0 03		bne $195cf1	                    BNE rd_data_phase                       ; If so: transfer the data
.195cee		82 83 00	brl $195d74	                    BRL error                               ; If not: it's an error
.195cf1						rd_data_phase
.195cf1		c2 10		rep #$10	                REP #$10        ; set X long
.195cf3		a0 00 00	ldy #$0000	                    LDY #0
.195cf6		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195cf8		10 db		bpl $195cd5	                    BPL time_out                            ; If not: throw a timeout error
.195cfa		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.195cfe		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195d00		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195d02		d0 f2		bne $195cf6	                    BNE rd_data_loop
.195d04		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.195d08		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.195d0a		c8		iny		                    INY                                     ; Move to the next position
.195d0b		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195d0e		d0 e6		bne $195cf6	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.195d10		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.195d13		f0 34		beq $195d49	                    BEQ chk_busy                            ; Then we're done
.195d15		e2 10		sep #$10	                SEP #$10        ; set X short
.195d17		a2 00		ldx #$00	                    LDX #0
.195d19		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.195d1b		22 b1 3a 19	jsl $193ab1	                    JSL ISETTIMEOUT
.195d1f		20 c2 5b	jsr $195bc2	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d22		90 b1		bcc $195cd5	                    BCC time_out                            ; If there was a time out, raise an error
.195d24		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195d28		20 c2 5b	jsr $195bc2	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d2b		90 a8		bcc $195cd5	                    BCC time_out                            ; If there was a time out, raise an error
.195d2d		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195d31		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.195d34		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM
.195d37		90 9c		bcc $195cd5	                    BCC time_out                            ; If there was a time out, flag the error
.195d39		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.195d3d		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195d3f		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195d41		d0 06		bne $195d49	                    BNE chk_busy
.195d43		e8		inx		                    INX                                     ; Move to the next result positions
.195d44		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.195d47		d0 e4		bne $195d2d	                    BNE read_result                         ; And keep looping until we've read all
.195d49						chk_busy
.195d49		c2 10		rep #$10	                REP #$10        ; set X long
.195d4b		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.195d4e		22 c7 0f 19	jsl $190fc7	                    JSL ILOOP_MS
.195d52		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.195d56		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195d58		f0 12		beq $195d6c	                    BEQ done                                ; If not set: we're done
.195d5a		20 c2 5b	jsr $195bc2	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d5d		b0 03		bcs $195d62	                    BCS get_result_byte
.195d5f		82 73 ff	brl $195cd5	                    BRL time_out                            ; If there was a time out, flag the error
.195d62		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.195d66		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.195d69		e8		inx		                    INX
.195d6a		80 dd		bra $195d49	                    BRA chk_busy                            ; And keep checking
.195d6c						done
.195d6c		64 20		stz $0320	                    STZ BIOS_STATUS
.195d6e		28		plp		                    PLP
.195d6f		2b		pld		                    PLD
.195d70		ab		plb		                    PLB
.195d71		fa		plx		                    PLX
.195d72		38		sec		                    SEC
.195d73		6b		rtl		                    RTL
.195d74						error
.195d74		e2 20		sep #$20	                SEP #$20        ; set A short
.195d76		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.195d78		85 20		sta $0320	pass_error          STA BIOS_STATUS
.195d7a		28		plp		                    PLP
.195d7b		2b		pld		                    PLD
.195d7c		ab		plb		                    PLB
.195d7d		fa		plx		                    PLX
.195d7e		18		clc		                    CLC
.195d7f		6b		rtl		                    RTL
.195d80						FDC_Init
.195d80		08		php		                    PHP
.195d81		c2 10		rep #$10	                REP #$10        ; set X long
.195d83		e2 20		sep #$20	                SEP #$20        ; set A short
.195d85		a9 00		lda #$00	                    LDA #0
.195d87		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195d8b		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.195d8e		a0 00 00	ldy #$0000	                    LDY #0
.195d91		22 d4 0f 19	jsl $190fd4	                    JSL IDELAY
.195d95		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.195d97		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195d9b		ea		nop		                    NOP
.195d9c		ea		nop		                    NOP
.195d9d		ea		nop		                    NOP
.195d9e		ea		nop		                    NOP
.195d9f		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.195da1		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.195da5		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.195da7		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.195dab		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.195dae		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.195db1		22 d4 0f 19	jsl $190fd4	                    JSL IDELAY
.195db5		22 90 5e 19	jsl $195e90	                    JSL FDC_Sense_Int_Status
.195db9		90 25		bcc $195de0	                    BCC pass_failure
.195dbb		22 90 5e 19	jsl $195e90	                    JSL FDC_Sense_Int_Status
.195dbf		90 1f		bcc $195de0	                    BCC pass_failure
.195dc1		22 90 5e 19	jsl $195e90	                    JSL FDC_Sense_Int_Status
.195dc5		90 19		bcc $195de0	                    BCC pass_failure
.195dc7		22 90 5e 19	jsl $195e90	                    JSL FDC_Sense_Int_Status
.195dcb		90 13		bcc $195de0	                    BCC pass_failure
.195dcd		22 52 5f 19	jsl $195f52	                    JSL FDC_Configure_Command
.195dd1		90 0d		bcc $195de0	                    BCC pass_failure
.195dd3		22 f9 5e 19	jsl $195ef9	                    JSL FDC_Specify_Command
.195dd7		90 07		bcc $195de0	                    BCC pass_failure
.195dd9		22 fc 5d 19	jsl $195dfc	                    JSL FDC_Motor_On
.195ddd		28		plp		                    PLP
.195dde		38		sec		                    SEC
.195ddf		6b		rtl		                    RTL
.195de0		28		plp		pass_failure        PLP
.195de1		18		clc		                    CLC
.195de2		6b		rtl		                    RTL
.195de3						FDC_MOTOR_NEEDED
.195de3		08		php		                    PHP
.195de4		c2 20		rep #$20	                REP #$20        ; set A long
.195de6		78		sei		                    SEI                         ; Turn off interrupts
.195de7		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.195dea		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195dee		e2 20		sep #$20	                SEP #$20        ; set A short
.195df0		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195df4		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.195df6		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195dfa		28		plp		                    PLP
.195dfb		6b		rtl		                    RTL
.195dfc						FDC_Motor_On
.195dfc		08		php		                    PHP
.195dfd		22 e3 5d 19	jsl $195de3	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195e01		e2 20		sep #$20	                SEP #$20        ; set A short
.195e03		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.195e07		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.195e09		d0 1f		bne $195e2a	                    BNE done                    ; If so: skip
.195e0b		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.195e0d		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195e11		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.195e14		90 17		bcc $195e2d	                    BCC time_out
.195e16		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.195e19		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.195e1c		22 d4 0f 19	jsl $190fd4	                    JSL IDELAY
.195e20		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195e24		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.195e26		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195e2a		28		plp		done                PLP
.195e2b		38		sec		                    SEC
.195e2c		6b		rtl		                    RTL
.195e2d		28		plp		time_out            PLP                         ; Return a timeout error
.195e2e		18		clc		                    CLC
.195e2f		6b		rtl		                    RTL
.195e30						FDC_Motor_Off
.195e30		08		php		                    PHP
.195e31		e2 20		sep #$20	                SEP #$20        ; set A short
.195e33		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.195e35		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.195e39		c2 20		rep #$20	                REP #$20        ; set A long
.195e3b		78		sei		                    SEI                         ; Turn off interrupts
.195e3c		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.195e3f		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195e43		e2 20		sep #$20	                SEP #$20        ; set A short
.195e45		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195e49		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.195e4b		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195e4f		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195e53		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.195e55		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195e59		28		plp		                    PLP
.195e5a		6b		rtl		                    RTL
.195e5b						FDC_Recalibrate_Command
.195e5b		0b		phd		                    PHD
.195e5c		08		php		                    PHP
.195e5d		48		pha		                PHA             ; begin setdp macro
.195e5e		08		php		                PHP
.195e5f		c2 20		rep #$20	                REP #$20        ; set A long
.195e61		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e64		5b		tcd		                TCD
.195e65		28		plp		                PLP
.195e66		68		pla		                PLA             ; end setdp macro
.195e67		22 e3 5d 19	jsl $195de3	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195e6b		e2 20		sep #$20	                SEP #$20        ; set A short
.195e6d		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.195e6f		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195e72		a5 00		lda $0300	                    LDA FDC_DRIVE
.195e74		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195e77		a9 02		lda #$02	                    LDA #2
.195e79		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.195e7c		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.195e7f		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.195e82		22 33 5c 19	jsl $195c33	                    JSL FDC_COMMAND             ; Issue the command
.195e86		90 04		bcc $195e8c	                    BCC pass_failure            ; If failure, pass the failure up
.195e88		28		plp		                    PLP
.195e89		2b		pld		                    PLD
.195e8a		38		sec		                    SEC
.195e8b		6b		rtl		                    RTL
.195e8c		28		plp		pass_failure        PLP
.195e8d		2b		pld		                    PLD
.195e8e		18		clc		                    CLC
.195e8f		6b		rtl		                    RTL
.195e90						FDC_Sense_Int_Status
.195e90		8b		phb		                    PHB
.195e91		0b		phd		                    PHD
.195e92		08		php		                    PHP
.195e93		48		pha		                PHA             ; begin setdbr macro
.195e94		08		php		                PHP
.195e95		e2 20		sep #$20	                SEP #$20        ; set A short
.195e97		a9 00		lda #$00	                LDA #0
.195e99		48		pha		                PHA
.195e9a		ab		plb		                PLB
.195e9b		28		plp		                PLP
.195e9c		68		pla		                PLA             ; end setdbr macro
.195e9d		48		pha		                PHA             ; begin setdp macro
.195e9e		08		php		                PHP
.195e9f		c2 20		rep #$20	                REP #$20        ; set A long
.195ea1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195ea4		5b		tcd		                TCD
.195ea5		28		plp		                PLP
.195ea6		68		pla		                PLA             ; end setdp macro
.195ea7		c2 30		rep #$30	                REP #$30        ; set A&X long
.195ea9		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.195eac		22 c7 0f 19	jsl $190fc7	                    JSL ILOOP_MS
.195eb0		e2 20		sep #$20	                SEP #$20        ; set A short
.195eb2		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.195eb4		a9 ff		lda #$ff	                    LDA #$FF
.195eb6		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.195eb8		20 94 5b	jsr $195b94	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.195ebb		90 30		bcc $195eed	                    BCC time_out                        ; If there was a time out, raise an error
.195ebd		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195ec0		90 2b		bcc $195eed	                    BCC time_out                        ; If there was a time out, raise an error
.195ec2		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.195ec4		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195ec8		20 c2 5b	jsr $195bc2	                    JSR FDC_Can_Read_Data
.195ecb		90 20		bcc $195eed	                    BCC time_out                        ; If there was a time out, raise an error
.195ecd		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195ed0		90 1b		bcc $195eed	                    BCC time_out                        ; If there was a time out, raise an error
.195ed2		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195ed6		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195ed8		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195edb		90 10		bcc $195eed	                    BCC time_out                        ; If there was a time out, raise an error
.195edd		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195ee1		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.195ee3		e2 20		sep #$20	                SEP #$20        ; set A short
.195ee5		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.195ee8		28		plp		                    PLP
.195ee9		2b		pld		                    PLD
.195eea		ab		plb		                    PLB
.195eeb		38		sec		                    SEC
.195eec		6b		rtl		                    RTL
.195eed						time_out
.195eed		e2 20		sep #$20	                SEP #$20        ; set A short
.195eef		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.195ef1		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195ef4		28		plp		                    PLP
.195ef5		2b		pld		                    PLD
.195ef6		ab		plb		                    PLB
.195ef7		18		clc		                    CLC
.195ef8		6b		rtl		                    RTL
.195ef9						FDC_Specify_Command
.195ef9		8b		phb		                    PHB
.195efa		0b		phd		                    PHD
.195efb		08		php		                    PHP
.195efc		48		pha		                PHA             ; begin setdbr macro
.195efd		08		php		                PHP
.195efe		e2 20		sep #$20	                SEP #$20        ; set A short
.195f00		a9 00		lda #$00	                LDA #0
.195f02		48		pha		                PHA
.195f03		ab		plb		                PLB
.195f04		28		plp		                PLP
.195f05		68		pla		                PLA             ; end setdbr macro
.195f06		48		pha		                PHA             ; begin setdp macro
.195f07		08		php		                PHP
.195f08		c2 20		rep #$20	                REP #$20        ; set A long
.195f0a		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f0d		5b		tcd		                TCD
.195f0e		28		plp		                PLP
.195f0f		68		pla		                PLA             ; end setdp macro
.195f10		c2 30		rep #$30	                REP #$30        ; set A&X long
.195f12		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195f15		22 c7 0f 19	jsl $190fc7	                    JSL ILOOP_MS
.195f19		e2 20		sep #$20	                SEP #$20        ; set A short
.195f1b		20 94 5b	jsr $195b94	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195f1e		90 26		bcc $195f46	                    BCC time_out            ; If there was a time out, raise an error
.195f20		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f23		90 21		bcc $195f46	                    BCC time_out            ; If there was a time out, raise an error
.195f25		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.195f27		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f2b		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f2e		90 16		bcc $195f46	                    BCC time_out            ; If there was a time out, raise an error
.195f30		a9 cf		lda #$cf	                    LDA #$CF
.195f32		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f36		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f39		90 0b		bcc $195f46	                    BCC time_out            ; If there was a time out, raise an error
.195f3b		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.195f3d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f41		28		plp		                    PLP
.195f42		2b		pld		                    PLD
.195f43		ab		plb		                    PLB
.195f44		38		sec		                    SEC
.195f45		6b		rtl		                    RTL
.195f46						time_out
.195f46		e2 20		sep #$20	                SEP #$20        ; set A short
.195f48		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195f4a		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195f4d		28		plp		                    PLP
.195f4e		2b		pld		                    PLD
.195f4f		ab		plb		                    PLB
.195f50		18		clc		                    CLC
.195f51		6b		rtl		                    RTL
.195f52						FDC_Configure_Command
.195f52		8b		phb		                    PHB
.195f53		0b		phd		                    PHD
.195f54		08		php		                    PHP
.195f55		48		pha		                PHA             ; begin setdbr macro
.195f56		08		php		                PHP
.195f57		e2 20		sep #$20	                SEP #$20        ; set A short
.195f59		a9 00		lda #$00	                LDA #0
.195f5b		48		pha		                PHA
.195f5c		ab		plb		                PLB
.195f5d		28		plp		                PLP
.195f5e		68		pla		                PLA             ; end setdbr macro
.195f5f		48		pha		                PHA             ; begin setdp macro
.195f60		08		php		                PHP
.195f61		c2 20		rep #$20	                REP #$20        ; set A long
.195f63		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f66		5b		tcd		                TCD
.195f67		28		plp		                PLP
.195f68		68		pla		                PLA             ; end setdp macro
.195f69		c2 30		rep #$30	                REP #$30        ; set A&X long
.195f6b		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195f6e		22 c7 0f 19	jsl $190fc7	                    JSL ILOOP_MS
.195f72		e2 20		sep #$20	                SEP #$20        ; set A short
.195f74		20 94 5b	jsr $195b94	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195f77		90 36		bcc $195faf	                    BCC time_out            ; If there was a time out, raise an error
.195f79		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f7c		90 31		bcc $195faf	                    BCC time_out            ; If there was a time out, raise an error
.195f7e		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.195f80		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f84		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f87		90 26		bcc $195faf	                    BCC time_out            ; If there was a time out, raise an error
.195f89		a9 00		lda #$00	                    LDA #$00
.195f8b		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f8f		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f92		90 1b		bcc $195faf	                    BCC time_out            ; If there was a time out, raise an error
.195f94		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.195f96		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f9a		20 38 5b	jsr $195b38	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f9d		90 10		bcc $195faf	                    BCC time_out            ; If there was a time out, raise an error
.195f9f		a9 00		lda #$00	                    LDA #$00
.195fa1		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195fa5		20 94 5b	jsr $195b94	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195fa8		90 05		bcc $195faf	                    BCC time_out            ; If there was a time out, raise an error
.195faa		28		plp		                    PLP
.195fab		2b		pld		                    PLD
.195fac		ab		plb		                    PLB
.195fad		38		sec		                    SEC
.195fae		6b		rtl		                    RTL
.195faf						time_out
.195faf		e2 20		sep #$20	                SEP #$20        ; set A short
.195fb1		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195fb3		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195fb6		28		plp		                    PLP
.195fb7		2b		pld		                    PLD
.195fb8		ab		plb		                    PLB
.195fb9		18		clc		                    CLC
.195fba		6b		rtl		                    RTL
.195fbb						FDC_Read_ID_Command
.195fbb		8b		phb		                    PHB
.195fbc		0b		phd		                    PHD
.195fbd		08		php		                    PHP
.195fbe		48		pha		                PHA             ; begin setdbr macro
.195fbf		08		php		                PHP
.195fc0		e2 20		sep #$20	                SEP #$20        ; set A short
.195fc2		a9 00		lda #$00	                LDA #0
.195fc4		48		pha		                PHA
.195fc5		ab		plb		                PLB
.195fc6		28		plp		                PLP
.195fc7		68		pla		                PLA             ; end setdbr macro
.195fc8		48		pha		                PHA             ; begin setdp macro
.195fc9		08		php		                PHP
.195fca		c2 20		rep #$20	                REP #$20        ; set A long
.195fcc		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195fcf		5b		tcd		                TCD
.195fd0		28		plp		                PLP
.195fd1		68		pla		                PLA             ; end setdp macro
.195fd2		e2 20		sep #$20	                SEP #$20        ; set A short
.195fd4		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.195fd6		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195fd9		a9 01		lda #$01	                    LDA #1
.195fdb		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.195fde		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.195fe1		a9 07		lda #$07	                    LDA #7
.195fe3		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195fe6		22 33 5c 19	jsl $195c33	                    JSL FDC_COMMAND                     ; Issue the command
.195fea		90 27		bcc $196013	                    BCC pass_failure
.195fec		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.195fef		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.195ff1		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.195ff4		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.195ff6		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.195ff9		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.195ffb		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.195ffe		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.196000		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196003		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.196005		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196008		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.19600a		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.19600d		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.19600f		28		plp		                    PLP
.196010		2b		pld		                    PLD
.196011		ab		plb		                    PLB
.196012		6b		rtl		                    RTL
.196013		28		plp		pass_failure        PLP
.196014		2b		pld		                    PLD
.196015		ab		plb		                    PLB
.196016		18		clc		                    CLC
.196017		6b		rtl		                    RTL
.196018						FDC_DumpReg_Command
.196018		0b		phd		                    PHD
.196019		08		php		                    PHP
.19601a		e2 20		sep #$20	                SEP #$20        ; set A short
.19601c		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.19601e		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196021		a9 01		lda #$01	                    LDA #1
.196023		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.196026		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.196029		a9 0a		lda #$0a	                    LDA #10
.19602b		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.19602e		22 33 5c 19	jsl $195c33	                    JSL FDC_COMMAND                     ; Issue the command
.196032		90 03		bcc $196037	                    BCC pass_failure
.196034		28		plp		                    PLP
.196035		2b		pld		                    PLD
.196036		6b		rtl		                    RTL
.196037		28		plp		pass_failure        PLP
.196038		2b		pld		                    PLD
.196039		18		clc		                    CLC
.19603a		6b		rtl		                    RTL
.19603b						FDC_Seek_Track
.19603b		8b		phb		                    PHB
.19603c		0b		phd		                    PHD
.19603d		08		php		                    PHP
.19603e		48		pha		                PHA             ; begin setdbr macro
.19603f		08		php		                PHP
.196040		e2 20		sep #$20	                SEP #$20        ; set A short
.196042		a9 00		lda #$00	                LDA #0
.196044		48		pha		                PHA
.196045		ab		plb		                PLB
.196046		28		plp		                PLP
.196047		68		pla		                PLA             ; end setdbr macro
.196048		48		pha		                PHA             ; begin setdp macro
.196049		08		php		                PHP
.19604a		c2 20		rep #$20	                REP #$20        ; set A long
.19604c		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19604f		5b		tcd		                TCD
.196050		28		plp		                PLP
.196051		68		pla		                PLA             ; end setdp macro
.196052		22 e3 5d 19	jsl $195de3	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196056		e2 20		sep #$20	                SEP #$20        ; set A short
.196058		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.19605a		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.19605d		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.19605f		29 01		and #$01	                    AND #$01
.196061		0a		asl a		                    ASL A
.196062		0a		asl a		                    ASL A
.196063		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196065		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196068		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.19606a		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.19606d		a9 03		lda #$03	                    LDA #3
.19606f		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.196072		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.196075		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.196078		22 33 5c 19	jsl $195c33	                    JSL FDC_COMMAND                     ; Issue the command
.19607c		90 05		bcc $196083	                    BCC pass_failure
.19607e		28		plp		                    PLP
.19607f		2b		pld		                    PLD
.196080		ab		plb		                    PLB
.196081		38		sec		                    SEC
.196082		6b		rtl		                    RTL
.196083		28		plp		pass_failure        PLP
.196084		2b		pld		                    PLD
.196085		ab		plb		                    PLB
.196086		18		clc		                    CLC
.196087		6b		rtl		                    RTL
.196088						FDC_Read_Sector
.196088		8b		phb		                    PHB
.196089		0b		phd		                    PHD
.19608a		08		php		                    PHP
.19608b		48		pha		                PHA             ; begin setdbr macro
.19608c		08		php		                PHP
.19608d		e2 20		sep #$20	                SEP #$20        ; set A short
.19608f		a9 00		lda #$00	                LDA #0
.196091		48		pha		                PHA
.196092		ab		plb		                PLB
.196093		28		plp		                PLP
.196094		68		pla		                PLA             ; end setdbr macro
.196095		48		pha		                PHA             ; begin setdp macro
.196096		08		php		                PHP
.196097		c2 20		rep #$20	                REP #$20        ; set A long
.196099		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19609c		5b		tcd		                TCD
.19609d		28		plp		                PLP
.19609e		68		pla		                PLA             ; end setdp macro
.19609f		22 e3 5d 19	jsl $195de3	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.1960a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1960a5		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.1960a7		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.1960a9		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1960ac		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.1960ae		29 01		and #$01	                    AND #$01
.1960b0		0a		asl a		                    ASL A
.1960b1		0a		asl a		                    ASL A
.1960b2		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.1960b4		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1960b7		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.1960b9		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.1960bc		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.1960be		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.1960c1		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.1960c3		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.1960c6		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.1960c8		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.1960cb		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.1960cd		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.1960d0		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.1960d2		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.1960d5		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.1960d7		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.1960da		a9 09		lda #$09	                    LDA #9
.1960dc		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.1960df		a9 01		lda #$01	                    LDA #1
.1960e1		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.1960e4		a9 07		lda #$07	                    LDA #7
.1960e6		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.1960e9		22 33 5c 19	jsl $195c33	command             JSL FDC_COMMAND                     ; Issue the command
.1960ed		08		php		                    PHP
.1960ee		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.1960f1		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.1960f3		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1960f6		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.1960f8		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.1960fb		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.1960fd		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196100		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.196102		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196105		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.196107		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.19610a		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.19610c		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.19610f		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.196111		28		plp		                    PLP
.196112		90 04		bcc $196118	                    BCC pass_failure
.196114		28		plp		done                PLP
.196115		2b		pld		                    PLD
.196116		ab		plb		                    PLB
.196117		6b		rtl		                    RTL
.196118		28		plp		pass_failure        PLP
.196119		2b		pld		                    PLD
.19611a		ab		plb		                    PLB
.19611b		18		clc		                    CLC
.19611c		6b		rtl		                    RTL
.19611d						FDC_Write_Sector
.19611d		8b		phb		                    PHB
.19611e		0b		phd		                    PHD
.19611f		08		php		                    PHP
.196120		48		pha		                PHA             ; begin setdbr macro
.196121		08		php		                PHP
.196122		e2 20		sep #$20	                SEP #$20        ; set A short
.196124		a9 00		lda #$00	                LDA #0
.196126		48		pha		                PHA
.196127		ab		plb		                PLB
.196128		28		plp		                PLP
.196129		68		pla		                PLA             ; end setdbr macro
.19612a		48		pha		                PHA             ; begin setdp macro
.19612b		08		php		                PHP
.19612c		c2 20		rep #$20	                REP #$20        ; set A long
.19612e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196131		5b		tcd		                TCD
.196132		28		plp		                PLP
.196133		68		pla		                PLA             ; end setdp macro
.196134		e2 20		sep #$20	                SEP #$20        ; set A short
.196136		22 e3 5d 19	jsl $195de3	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.19613a		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.19613c		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.19613e		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196141		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.196143		29 01		and #$01	                    AND #$01
.196145		0a		asl a		                    ASL A
.196146		0a		asl a		                    ASL A
.196147		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.196149		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.19614c		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.19614e		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.196151		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.196153		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.196156		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.196158		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.19615b		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.19615d		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.196160		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.196162		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.196165		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.196167		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.19616a		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.19616c		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.19616f		a9 09		lda #$09	                    LDA #9
.196171		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.196174		a9 ff		lda #$ff	                    LDA #$FF
.196176		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.196179		a9 07		lda #$07	                    LDA #7
.19617b		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.19617e		22 33 5c 19	jsl $195c33	command             JSL FDC_COMMAND                     ; Issue the command
.196182		08		php		                    PHP
.196183		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.196186		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.196188		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.19618b		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.19618d		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.196190		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.196192		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196195		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.196197		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.19619a		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.19619c		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.19619f		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.1961a1		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.1961a4		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.1961a6		28		plp		check_status        PLP
.1961a7		90 04		bcc $1961ad	                    BCC pass_failure
.1961a9		28		plp		done                PLP
.1961aa		2b		pld		                    PLD
.1961ab		ab		plb		                    PLB
.1961ac		6b		rtl		                    RTL
.1961ad		28		plp		pass_failure        PLP
.1961ae		2b		pld		                    PLD
.1961af		ab		plb		                    PLB
.1961b0		18		clc		                    CLC
.1961b1		6b		rtl		                    RTL
.1961b2						DIVIDE32
.1961b2		da		phx		                    PHX
.1961b3		5a		phy		                    PHY
.1961b4		0b		phd		                    PHD
.1961b5		08		php		                    PHP
.1961b6		48		pha		                PHA             ; begin setdp macro
.1961b7		08		php		                PHP
.1961b8		c2 20		rep #$20	                REP #$20        ; set A long
.1961ba		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.1961bd		5b		tcd		                TCD
.1961be		28		plp		                PLP
.1961bf		68		pla		                PLA             ; end setdp macro
.1961c0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1961c2		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.1961c4		64 0a		stz $0316	                    STZ REMAINDER+2
.1961c6		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.1961c9		06 00		asl $030c	loop                ASL DIVIDEND
.1961cb		26 02		rol $030e	                    ROL DIVIDEND+2
.1961cd		26 08		rol $0314	                    ROL REMAINDER
.1961cf		26 0a		rol $0316	                    ROL REMAINDER+2
.1961d1		a5 08		lda $0314	                    LDA REMAINDER
.1961d3		38		sec		                    SEC
.1961d4		e5 04		sbc $0310	                    SBC DIVISOR
.1961d6		a8		tay		                    TAY
.1961d7		a5 0a		lda $0316	                    LDA REMAINDER+2
.1961d9		e5 06		sbc $0312	                    SBC DIVISOR+2
.1961db		90 06		bcc $1961e3	                    BCC skip
.1961dd		85 0a		sta $0316	                    STA REMAINDER+2
.1961df		84 08		sty $0314	                    STY REMAINDER
.1961e1		e6 00		inc $030c	                    INC DIVIDEND
.1961e3		ca		dex		skip                DEX
.1961e4		d0 e3		bne $1961c9	                    BNE loop
.1961e6		28		plp		                    PLP
.1961e7		2b		pld		                    PLD
.1961e8		7a		ply		                    PLY
.1961e9		fa		plx		                    PLX
.1961ea		60		rts		                    RTS
.1961eb						LBA2CHS
.1961eb		8b		phb		                    PHB
.1961ec		0b		phd		                    PHD
.1961ed		08		php		                    PHP
.1961ee		48		pha		                PHA             ; begin setdbr macro
.1961ef		08		php		                PHP
.1961f0		e2 20		sep #$20	                SEP #$20        ; set A short
.1961f2		a9 00		lda #$00	                LDA #0
.1961f4		48		pha		                PHA
.1961f5		ab		plb		                PLB
.1961f6		28		plp		                PLP
.1961f7		68		pla		                PLA             ; end setdbr macro
.1961f8		48		pha		                PHA             ; begin setdp macro
.1961f9		08		php		                PHP
.1961fa		c2 20		rep #$20	                REP #$20        ; set A long
.1961fc		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1961ff		5b		tcd		                TCD
.196200		28		plp		                PLP
.196201		68		pla		                PLA             ; end setdp macro
.196202		c2 30		rep #$30	                REP #$30        ; set A&X long
.196204		a5 22		lda $0322	                    LDA BIOS_LBA
.196206		85 0c		sta $030c	                    STA DIVIDEND
.196208		a5 24		lda $0324	                    LDA BIOS_LBA+2
.19620a		85 0e		sta $030e	                    STA DIVIDEND+2
.19620c		a9 24 00	lda #$0024	                    LDA #36
.19620f		85 10		sta $0310	                    STA DIVISOR
.196211		64 12		stz $0312	                    STZ DIVISOR+2
.196213		20 b2 61	jsr $1961b2	                    JSR DIVIDE32
.196216		e2 20		sep #$20	                SEP #$20        ; set A short
.196218		a5 0c		lda $030c	                    LDA DIVIDEND
.19621a		85 02		sta $0302	                    STA FDC_CYLINDER
.19621c		c2 20		rep #$20	                REP #$20        ; set A long
.19621e		a5 14		lda $0314	                    LDA REMAINDER
.196220		85 0c		sta $030c	                    STA DIVIDEND
.196222		a5 16		lda $0316	                    LDA REMAINDER+2
.196224		85 0e		sta $030e	                    STA DIVIDEND+2
.196226		a9 12 00	lda #$0012	                    LDA #18
.196229		85 10		sta $0310	                    STA DIVISOR
.19622b		64 12		stz $0312	                    STZ DIVISOR+2
.19622d		20 b2 61	jsr $1961b2	                    JSR DIVIDE32
.196230		e2 20		sep #$20	                SEP #$20        ; set A short
.196232		a5 0c		lda $030c	                    LDA DIVIDEND
.196234		29 01		and #$01	                    AND #$01
.196236		85 01		sta $0301	                    STA FDC_HEAD
.196238		a5 14		lda $0314	                    LDA REMAINDER
.19623a		1a		inc a		                    INC A
.19623b		85 03		sta $0303	                    STA FDC_SECTOR
.19623d		28		plp		                    PLP
.19623e		2b		pld		                    PLD
.19623f		ab		plb		                    PLB
.196240		6b		rtl		                    RTL
.196241						FDC_GETBLOCK
.196241		8b		phb		                    PHB
.196242		0b		phd		                    PHD
.196243		08		php		                    PHP
.196244		48		pha		                PHA             ; begin setdbr macro
.196245		08		php		                PHP
.196246		e2 20		sep #$20	                SEP #$20        ; set A short
.196248		a9 00		lda #$00	                LDA #0
.19624a		48		pha		                PHA
.19624b		ab		plb		                PLB
.19624c		28		plp		                PLP
.19624d		68		pla		                PLA             ; end setdbr macro
.19624e		48		pha		                PHA             ; begin setdp macro
.19624f		08		php		                PHP
.196250		c2 20		rep #$20	                REP #$20        ; set A long
.196252		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196255		5b		tcd		                TCD
.196256		28		plp		                PLP
.196257		68		pla		                PLA             ; end setdp macro
.196258		e2 20		sep #$20	                SEP #$20        ; set A short
.19625a		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.19625c		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.19625f		c2 30		rep #$30	                REP #$30        ; set A&X long
.196261		22 eb 61 19	jsl $1961eb	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.196265		e2 20		sep #$20	                SEP #$20        ; set A short
.196267		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.196269		f0 29		beq $196294	                    BEQ read_failure
.19626b						try_read
.19626b		c2 20		rep #$20	                REP #$20        ; set A long
.19626d		22 88 60 19	jsl $196088	                    JSL FDC_Read_Sector         ; Read the sector
.196271		90 14		bcc $196287	                    BCC retry
.196273		e2 20		sep #$20	                SEP #$20        ; set A short
.196275		a5 06		lda $0306	                    LDA FDC_ST0
.196277		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.196279		d0 19		bne $196294	                    BNE read_failure
.19627b						ret_success
.19627b		e2 20		sep #$20	                SEP #$20        ; set A short
.19627d		a9 00		lda #$00	                    LDA #0
.19627f		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196282		28		plp		                    PLP
.196283		2b		pld		                    PLD
.196284		ab		plb		                    PLB
.196285		38		sec		                    SEC
.196286		6b		rtl		                    RTL
.196287						retry
.196287		e2 20		sep #$20	                SEP #$20        ; set A short
.196289		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.19628c		30 13		bmi $1962a1	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.19628e		22 80 5d 19	jsl $195d80	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.196292		80 d7		bra $19626b	                    BRA try_read                ; And try the read again
.196294						read_failure
.196294		e2 20		sep #$20	                SEP #$20        ; set A short
.196296		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.196298		80 04		bra $19629e	                    BRA ret_failure
.19629a						seek_failure
.19629a		e2 20		sep #$20	                SEP #$20        ; set A short
.19629c		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.19629e		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.1962a1		28		plp		pass_failure        PLP
.1962a2		2b		pld		                    PLD
.1962a3		ab		plb		                    PLB
.1962a4		18		clc		                    CLC
.1962a5		6b		rtl		                    RTL
.1962a6						FDC_PUTBLOCK
.1962a6		8b		phb		                    PHB
.1962a7		0b		phd		                    PHD
.1962a8		08		php		                    PHP
.1962a9		48		pha		                PHA             ; begin setdbr macro
.1962aa		08		php		                PHP
.1962ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1962ad		a9 00		lda #$00	                LDA #0
.1962af		48		pha		                PHA
.1962b0		ab		plb		                PLB
.1962b1		28		plp		                PLP
.1962b2		68		pla		                PLA             ; end setdbr macro
.1962b3		48		pha		                PHA             ; begin setdp macro
.1962b4		08		php		                PHP
.1962b5		c2 20		rep #$20	                REP #$20        ; set A long
.1962b7		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1962ba		5b		tcd		                TCD
.1962bb		28		plp		                PLP
.1962bc		68		pla		                PLA             ; end setdp macro
.1962bd		e2 20		sep #$20	                SEP #$20        ; set A short
.1962bf		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.1962c1		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.1962c4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1962c6		22 eb 61 19	jsl $1961eb	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.1962ca		22 1d 61 19	jsl $19611d	retry               JSL FDC_Write_Sector        ; Write the sector
.1962ce		b0 03		bcs $1962d3	                    BCS chk_st0
.1962d0		82 28 00	brl $1962fb	                    BRL attempt_retry
.1962d3						chk_st0
.1962d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1962d5		a5 06		lda $0306	                    LDA FDC_ST0
.1962d7		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.1962d9		d0 0c		bne $1962e7	                    BNE write_failure
.1962db						ret_success
.1962db		e2 20		sep #$20	                SEP #$20        ; set A short
.1962dd		a9 00		lda #$00	                    LDA #0
.1962df		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1962e2		28		plp		                    PLP
.1962e3		2b		pld		                    PLD
.1962e4		ab		plb		                    PLB
.1962e5		38		sec		                    SEC
.1962e6		6b		rtl		                    RTL
.1962e7						write_failure
.1962e7		e2 20		sep #$20	                SEP #$20        ; set A short
.1962e9		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.1962eb		89 02		bit #$02	                    BIT #FDC_ST1_NW
.1962ed		f0 04		beq $1962f3	                    BEQ generic_err
.1962ef		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.1962f1		80 17		bra $19630a	                    BRA ret_failure
.1962f3		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.1962f5		d0 e4		bne $1962db	                    BNE ret_success
.1962f7		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.1962f9		d0 e0		bne $1962db	                    BNE ret_success
.1962fb						attempt_retry
.1962fb		e2 20		sep #$20	                SEP #$20        ; set A short
.1962fd		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.196300		d0 c8		bne $1962ca	                    BNE retry                           ; And retry unless we have none left
.196302		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.196304		80 04		bra $19630a	                    BRA ret_failure
.196306						seek_failure
.196306		e2 20		sep #$20	                SEP #$20        ; set A short
.196308		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.19630a						ret_failure
.19630a		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.19630d		28		plp		pass_failure        PLP
.19630e		2b		pld		                    PLD
.19630f		ab		plb		                    PLB
.196310		18		clc		                    CLC
.196311		6b		rtl		                    RTL
.196312						FDC_MOUNT
.196312		8b		phb		                    PHB
.196313		0b		phd		                    PHD
.196314		08		php		                    PHP
.196315		48		pha		                PHA             ; begin setdbr macro
.196316		08		php		                PHP
.196317		e2 20		sep #$20	                SEP #$20        ; set A short
.196319		a9 00		lda #$00	                LDA #0
.19631b		48		pha		                PHA
.19631c		ab		plb		                PLB
.19631d		28		plp		                PLP
.19631e		68		pla		                PLA             ; end setdbr macro
.19631f		48		pha		                PHA             ; begin setdp macro
.196320		08		php		                PHP
.196321		c2 20		rep #$20	                REP #$20        ; set A long
.196323		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196326		5b		tcd		                TCD
.196327		28		plp		                PLP
.196328		68		pla		                PLA             ; end setdp macro
.196329		22 80 5d 19	jsl $195d80	                    JSL FDC_INIT
.19632d		e2 20		sep #$20	                SEP #$20        ; set A short
.19632f		c2 10		rep #$10	                REP #$10        ; set X long
.196331		a9 00		lda #$00	                    LDA #0
.196333		a2 00 00	ldx #$0000	                    LDX #0
.196336		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.19633a		e8		inx		                    INX
.19633b		e0 00 02	cpx #$0200	                    CPX #512
.19633e		d0 f6		bne $196336	                    BNE zero_loop
.196340		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.196342		85 00		sta $0300	                    STA FDC_DRIVE
.196344		22 fc 5d 19	jsl $195dfc	                    JSL FDC_Motor_On                        ; Turn the motor on
.196348		c2 30		rep #$30	                REP #$30        ; set A&X long
.19634a		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.19634d		85 22		sta $0322	                    STA BIOS_LBA
.19634f		85 24		sta $0324	                    STA BIOS_LBA+2
.196351		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.196354		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.196356		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.196359		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.19635b		22 41 62 19	jsl $196241	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.19635f		b0 03		bcs $196364	                    BCS parse_boot                          ; If ok: start parsing the boot record
.196361		82 d3 00	brl $196437	                    BRL pass_failure                        ; Pass the error up the chain
.196364						parse_boot
.196364		e2 20		sep #$20	                SEP #$20        ; set A short
.196366		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.196368		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.19636c		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.19636e		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.196372		e2 20		sep #$20	                SEP #$20        ; set A short
.196374		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.196378		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.19637c		c2 20		rep #$20	                REP #$20        ; set A long
.19637e		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.196381		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.196385		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.196389		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.19638d		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.196391		a9 00 00	lda #$0000	                    LDA #0
.196394		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.196398		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.19639b		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.19639f		18		clc		                    CLC
.1963a0		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1963a4		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.1963a8		a9 00 00	lda #$0000	                    LDA #0
.1963ab		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.1963af		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.1963b3		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.1963b4		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.1963b8		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1963bc		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.1963c0		a9 00 00	lda #$0000	                    LDA #0
.1963c3		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.1963c7		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.1963cb		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.1963cf		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.1963d0		4a		lsr a		                    LSR A
.1963d1		4a		lsr a		                    LSR A
.1963d2		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.1963d3		18		clc		                    CLC
.1963d4		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.1963d8		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.1963dc		a9 00 00	lda #$0000	                    LDA #0
.1963df		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.1963e3		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.1963e7		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.1963eb		a9 00 00	lda #$0000	                    LDA #0
.1963ee		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.1963f2		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.1963f6		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.1963fa		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.1963fd		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.196401		e2 20		sep #$20	                SEP #$20        ; set A short
.196403		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.196407		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.196409		80 14		bra $19641f	                    BRA no_volume_id                        ; No: there is no volume ID
.19640b						is_extended
.19640b		c2 20		rep #$20	                REP #$20        ; set A long
.19640d		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.196411		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.196415		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.196419		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.19641d		80 0d		bra $19642c	                    BRA ret_success
.19641f						no_volume_id
.19641f		c2 20		rep #$20	                REP #$20        ; set A long
.196421		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.196424		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.196428		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.19642c						ret_success
.19642c		e2 20		sep #$20	                SEP #$20        ; set A short
.19642e		a9 00		lda #$00	                    LDA #0
.196430		85 20		sta $0320	                    STA BIOS_STATUS
.196432		28		plp		                    PLP
.196433		2b		pld		                    PLD
.196434		ab		plb		                    PLB
.196435		38		sec		                    SEC
.196436		6b		rtl		                    RTL
.196437		28		plp		pass_failure        PLP
.196438		2b		pld		                    PLD
.196439		ab		plb		                    PLB
.19643a		18		clc		                    CLC
.19643b		6b		rtl		                    RTL
.19643c						FDC_CMDBLOCK
.19643c		8b		phb		                    PHB
.19643d		0b		phd		                    PHD
.19643e		08		php		                    PHP
.19643f		48		pha		                PHA             ; begin setdbr macro
.196440		08		php		                PHP
.196441		e2 20		sep #$20	                SEP #$20        ; set A short
.196443		a9 00		lda #$00	                LDA #0
.196445		48		pha		                PHA
.196446		ab		plb		                PLB
.196447		28		plp		                PLP
.196448		68		pla		                PLA             ; end setdbr macro
.196449		48		pha		                PHA             ; begin setdp macro
.19644a		08		php		                PHP
.19644b		c2 20		rep #$20	                REP #$20        ; set A long
.19644d		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196450		5b		tcd		                TCD
.196451		28		plp		                PLP
.196452		68		pla		                PLA             ; end setdp macro
.196453		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196455		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.196457		f0 0f		beq $196468	                    BEQ motor_on
.196459		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.19645b		f0 11		beq $19646e	                    BEQ motor_off
.19645d		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.19645f		f0 13		beq $196474	                    BEQ recalibrate
.196461		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.196463		28		plp		                    PLP
.196464		2b		pld		                    PLD
.196465		ab		plb		                    PLB
.196466		38		sec		                    SEC
.196467		6b		rtl		                    RTL
.196468		22 fc 5d 19	jsl $195dfc	motor_on            JSL FDC_Motor_On
.19646c		80 f3		bra $196461	                    BRA ret_success
.19646e		22 30 5e 19	jsl $195e30	motor_off           JSL FDC_Motor_Off
.196472		80 ed		bra $196461	                    BRA ret_success
.196474		22 5b 5e 19	jsl $195e5b	recalibrate         JSL FDC_Recalibrate_Command
.196478		b0 e7		bcs $196461	                    BCS ret_success
.19647a		28		plp		pass_failure        PLP
.19647b		2b		pld		                    PLD
.19647c		ab		plb		                    PLB
.19647d		18		clc		                    CLC
.19647e		6b		rtl		                    RTL
.19647f						FDC_CHK_MEDIA
.19647f		0b		phd		                    PHD
.196480		08		php		                    PHP
.196481		48		pha		                PHA             ; begin setdp macro
.196482		08		php		                PHP
.196483		c2 20		rep #$20	                REP #$20        ; set A long
.196485		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196488		5b		tcd		                TCD
.196489		28		plp		                PLP
.19648a		68		pla		                PLA             ; end setdp macro
.19648b		22 fc 5d 19	jsl $195dfc	                    JSL FDC_Motor_On                ; Turn on the motor
.19648f		e2 20		sep #$20	                SEP #$20        ; set A short
.196491		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.196495		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.196497		f0 42		beq $1964db	                    BEQ ret_true                    ; If not: assume the disk is present
.196499		a9 00		lda #$00	                    LDA #0
.19649b		85 00		sta $0300	                    STA FDC_DRIVE
.19649d		a9 00		lda #$00	                    LDA #0
.19649f		85 01		sta $0301	                    STA FDC_HEAD
.1964a1		a9 50		lda #$50	                    LDA #80
.1964a3		85 02		sta $0302	                    STA FDC_CYLINDER
.1964a5		22 3b 60 19	jsl $19603b	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.1964a9		90 34		bcc $1964df	                    BCC ret_false                   ; If fail: return false
.1964ab		c2 10		rep #$10	                REP #$10        ; set X long
.1964ad		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1964b0		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1964b3		22 d4 0f 19	jsl $190fd4	                    JSL IDELAY
.1964b7		22 90 5e 19	jsl $195e90	                    JSL FDC_Sense_Int_Status
.1964bb		a5 06		lda $0306	                    LDA FDC_ST0
.1964bd		29 d0		and #$d0	                    AND #%11010000
.1964bf		d0 1e		bne $1964df	                    BNE ret_false
.1964c1		22 5b 5e 19	jsl $195e5b	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.1964c5		90 18		bcc $1964df	                    BCC ret_false                   ; If fail: return false
.1964c7		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1964ca		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1964cd		22 d4 0f 19	jsl $190fd4	                    JSL IDELAY
.1964d1		22 90 5e 19	jsl $195e90	                    JSL FDC_Sense_Int_Status
.1964d5		a5 06		lda $0306	                    LDA FDC_ST0
.1964d7		29 d0		and #$d0	                    AND #%11010000
.1964d9		d0 04		bne $1964df	                    BNE ret_false
.1964db						ret_true
.1964db		28		plp		                    PLP
.1964dc		2b		pld		                    PLD
.1964dd		38		sec		                    SEC
.1964de		6b		rtl		                    RTL
.1964df						ret_false
.1964df		28		plp		                    PLP
.1964e0		2b		pld		                    PLD
.1964e1		18		clc		                    CLC
.1964e2		6b		rtl		                    RTL
.1964e3						FDC_WRITEVBR
.1964e3		8b		phb		                    PHB
.1964e4		0b		phd		                    PHD
.1964e5		08		php		                    PHP
.1964e6		48		pha		                PHA             ; begin setdbr macro
.1964e7		08		php		                PHP
.1964e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1964ea		a9 00		lda #$00	                LDA #0
.1964ec		48		pha		                PHA
.1964ed		ab		plb		                PLB
.1964ee		28		plp		                PLP
.1964ef		68		pla		                PLA             ; end setdbr macro
.1964f0		48		pha		                PHA             ; begin setdp macro
.1964f1		08		php		                PHP
.1964f2		c2 20		rep #$20	                REP #$20        ; set A long
.1964f4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1964f7		5b		tcd		                TCD
.1964f8		28		plp		                PLP
.1964f9		68		pla		                PLA             ; end setdp macro
.1964fa		22 12 63 19	jsl $196312	                    JSL FDC_MOUNT               ; Mount the floppy disk
.1964fe		c2 30		rep #$30	                REP #$30        ; set A&X long
.196500		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.196503		a2 00 00	ldx #$0000	                    LDX #0
.196506		9f 00 a3 18	sta $18a300,x	clr_loop            STA DOS_SECTOR,X
.19650a		e8		inx		                    INX
.19650b		e8		inx		                    INX
.19650c		e0 00 02	cpx #$0200	                    CPX #512
.19650f		d0 f5		bne $196506	                    BNE clr_loop
.196511		e2 20		sep #$20	                SEP #$20        ; set A short
.196513		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.196516		bf cb 65 19	lda $1965cb,x	copy_loop           LDA FDC_VBR_BEGIN,X
.19651a		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.19651e		e8		inx		                    INX
.19651f		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.196522		d0 f2		bne $196516	                    BNE copy_loop
.196524		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.196527		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.19652a		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.19652c		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.196530		f0 07		beq $196539	                    BEQ path_copy_done
.196532		e8		inx		                    INX
.196533		c8		iny		                    INY
.196534		c0 80 00	cpy #$0080	                    CPY #128
.196537		d0 f1		bne $19652a	                    BNE path_copy_loop
.196539						path_copy_done
.196539		c2 20		rep #$20	                REP #$20        ; set A long
.19653b		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.19653e		8f fe a4 18	sta $18a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.196542		c2 20		rep #$20	                REP #$20        ; set A long
.196544		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.196547		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.196549		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.19654c		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.19654e		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.196551		85 02		sta $0322	                    STA BIOS_LBA
.196553		85 04		sta $0324	                    STA BIOS_LBA+2
.196555		e2 20		sep #$20	                SEP #$20        ; set A short
.196557		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.196559		85 01		sta $0321	                    STA BIOS_DEV
.19655b		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.19655f		b0 09		bcs $19656a	                    BCS ret_success
.196561		22 30 5e 19	jsl $195e30	                    JSL FDC_Motor_Off
.196565		28		plp		                    PLP                         ; Return the failure
.196566		2b		pld		                    PLD
.196567		ab		plb		                    PLB
.196568		18		clc		                    CLC
.196569		6b		rtl		                    RTL
.19656a		22 30 5e 19	jsl $195e30	ret_success         JSL FDC_Motor_Off
.19656e		e2 20		sep #$20	                SEP #$20        ; set A short
.196570		a9 00		lda #$00	                    LDA #0
.196572		85 00		sta $0320	                    STA BIOS_STATUS
.196574		28		plp		                    PLP
.196575		2b		pld		                    PLD
.196576		ab		plb		                    PLB
.196577		38		sec		                    SEC
.196578		6b		rtl		                    RTL
.196579						FDC_TIME_HANDLE
.196579		08		php		                    PHP
.19657a		e2 20		sep #$20	                SEP #$20        ; set A short
.19657c		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.196580		d0 06		bne $196588	                    BNE dec_motor                   ; If not zero: decrement the timer
.196582		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.196586		f0 28		beq $1965b0	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.196588		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.19658c		3a		dec a		                    DEC A
.19658d		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.196591		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.196593		d0 0b		bne $1965a0	                    BNE chk_motor_end               ; No: check to see if we're a the end
.196595		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.196599		3a		dec a		                    DEC A
.19659a		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.19659e		80 10		bra $1965b0	                    BRA sof_timeout                 ; And move on to the next timer
.1965a0		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.1965a4		d0 0a		bne $1965b0	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.1965a6		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.1965aa		d0 04		bne $1965b0	                    BNE sof_timeout
.1965ac		22 30 5e 19	jsl $195e30	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.1965b0						sof_timeout
.1965b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1965b2		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.1965b6		f0 11		beq $1965c9	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.1965b8		3a		dec a		                    DEC A                           ; Count down one tick
.1965b9		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.1965bd		d0 0a		bne $1965c9	                    BNE sof_int_done                ; If not 0, we're done
.1965bf		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.1965c3		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.1965c5		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.1965c9		28		plp		sof_int_done        PLP
.1965ca		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.1965cb						FDC_VBR_BEGIN
>1965cb		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>1965ce		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>1965d6		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>1965d8		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>1965d9		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>1965db		02				num_fat             .byte 2                 ; Number of FATs
>1965dc		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>1965de		40 0b				total_sectors       .word 2880              ; Total sectors
>1965e0		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>1965e1		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>1965e3		12 00				sec_per_track       .word 18                ; Sectors per track
>1965e5		02 00				num_head            .word 2                 ; Number of heads
>1965e7		00 00 00 00			ignore2             .dword 0
>1965eb		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>1965ef		00 00				ignore3             .word 0
>1965f1		29				boot_signature      .byte $29
>1965f2		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>1965f6		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>1965fe		20 20 20
>196601		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.196609		80 40		bra $19664b	                    BRA vbr_start
>19660b						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.19664b						vbr_start
.19664b		c2 20		rep #$20	                REP #$20        ; set A long
.19664d		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196650		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.196654		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196657		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.19665b		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.19665f		b0 0c		bcs $19666d	                    BCS lock                ; If it returned success... lock up... I guess?
.196661						error
.196661		e2 20		sep #$20	                SEP #$20        ; set A short
.196663		4b		phk		                    PHK                     ; Otherwise, print an error message
.196664		ab		plb		                    PLB
.196665		62 08 00	per $196670	                    PER message
.196668		fa		plx		                    PLX
.196669		22 1c 10 00	jsl $00101c	                    JSL PUTS
.19666d		ea		nop		lock                NOP                     ; And lock up
.19666e		80 fd		bra $19666d	                    BRA lock
>196670		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>196678		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>196688		65 20 62 69 6e 61 72 79 2e 0d 00
.196693						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.196693						IDE_TEST
.196693		08		php		                PHP
.196694		c2 20		rep #$20	                REP #$20        ; set A long
.196696		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.196699		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.19669d		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1966a0		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.1966a4		22 c7 67 19	jsl $1967c7	                JSL IDE_IDENTIFY
.1966a8		b0 03		bcs $1966ad	                BCS id_ok
.1966aa		82 ab 00	brl $196758	                BRL done
.1966ad						id_ok
.1966ad		c2 10		rep #$10	                REP #$10        ; set X long
.1966af		e2 20		sep #$20	                SEP #$20        ; set A short
.1966b1		a0 28 00	ldy #$0028	                LDY #40
.1966b4		a2 36 00	ldx #$0036	                LDX #27*2
.1966b7		bf 01 a3 18	lda $18a301,x	pr_model        LDA DOS_SECTOR+1,X
.1966bb		22 18 10 00	jsl $001018	                JSL PUTC
.1966bf		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1966c3		22 18 10 00	jsl $001018	                JSL PUTC
.1966c7		e8		inx		                INX
.1966c8		e8		inx		                INX
.1966c9		88		dey		                DEY
.1966ca		88		dey		                DEY
.1966cb		d0 ea		bne $1966b7	                BNE pr_model
.1966cd		c2 10		rep #$10	                REP #$10        ; set X long
.1966cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1966d1		a0 14 00	ldy #$0014	                LDY #20
.1966d4		a2 14 00	ldx #$0014	                LDX #10*2
.1966d7		bf 01 a3 18	lda $18a301,x	pr_serial       LDA DOS_SECTOR+1,X
.1966db		22 18 10 00	jsl $001018	                JSL PUTC
.1966df		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1966e3		22 18 10 00	jsl $001018	                JSL PUTC
.1966e7		e8		inx		                INX
.1966e8		e8		inx		                INX
.1966e9		88		dey		                DEY
.1966ea		88		dey		                DEY
.1966eb		d0 ea		bne $1966d7	                BNE pr_serial
.1966ed		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.1966f1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1966f3		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.1966f6		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.1966fa		a9 00 00	lda #$0000	                LDA #0
.1966fd		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196701		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.196704		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196708		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.19670b		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.19670f		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.196712		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.196715		9f 00 a3 18	sta $18a300,x	init_loop       STA DOS_SECTOR,X
.196719		e8		inx		                INX
.19671a		e8		inx		                INX
.19671b		e0 00 02	cpx #$0200	                CPX #512
.19671e		d0 f5		bne $196715	                BNE init_loop
.196720		22 e0 68 19	jsl $1968e0	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.196724		b0 06		bcs $19672c	                BCS read_sect1
.196726		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.19672a		80 2c		bra $196758	                BRA done
.19672c		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.19672f		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.196733		a9 00 00	lda #$0000	                LDA #0
.196736		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.19673a		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.19673d		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196741		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.196744		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196748		22 55 68 19	jsl $196855	                JSL IDE_GETBLOCK        ; Attempt to read the block
.19674c		b0 06		bcs $196754	                BCS all_ok
.19674e		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196752		80 04		bra $196758	                BRA done
.196754						all_ok
.196754		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196758		28		plp		done            PLP
.196759		6b		rtl		                RTL
.19675a						IDE_INIT
.19675a		e2 20		sep #$20	                SEP #$20        ; set A short
.19675c		a9 00		lda #$00	              LDA #$00
.19675e		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.196762		20 83 67	jsr $196783	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.196765		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.196767		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.19676b		a9 01		lda #$01	              LDA #$01
.19676d		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.196771		a9 00		lda #$00	              LDA #$00
.196773		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.196777		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.19677b		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.19677f		20 a1 67	jsr $1967a1	              JSR IDE_DRV_READY_NOTBUSY
.196782		6b		rtl		              RTL
.196783						IDE_DRIVE_BSY
.196783		08		php		                PHP
.196784		e2 20		sep #$20	                SEP #$20        ; set A short
.196786		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.19678a		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.19678c		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.19678e		f0 f6		beq $196786	                BEQ loop
.196790		28		plp		                PLP
.196791		60		rts		                RTS
.196792						IDE_DRIVE_READY
.196792		08		php		                PHP
.196793		e2 20		sep #$20	                SEP #$20        ; set A short
.196795		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.196799		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.19679b		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.19679d		d0 f6		bne $196795	                BNE loop
.19679f		28		plp		                PLP
.1967a0		60		rts		                RTS
.1967a1						IDE_DRV_READY_NOTBUSY
.1967a1		08		php		                PHP
.1967a2		e2 20		sep #$20	                SEP #$20        ; set A short
.1967a4		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.1967a8		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.1967aa		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.1967ac		d0 f6		bne $1967a4	                BNE loop                            ; No: keep waiting
.1967ae		28		plp		ret_success     PLP                                 ; Return success
.1967af		38		sec		                SEC
.1967b0		60		rts		                RTS
.1967b1		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.1967b5		28		plp		                PLP                                 ; Return failure
.1967b6		18		clc		                CLC
.1967b7		60		rts		                RTS
.1967b8						IDE_NOT_DRQ
.1967b8		08		php		                PHP
.1967b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1967bb		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.1967bf		29 08		and #$08	                AND #IDE_STAT_DRQ
.1967c1		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.1967c3		d0 f6		bne $1967bb	                BNE loop                ; No: keep waiting
.1967c5		28		plp		                PLP
.1967c6		60		rts		                RTS
.1967c7						IDE_IDENTIFY
.1967c7		5a		phy		                PHY
.1967c8		8b		phb		                PHB
.1967c9		0b		phd		                PHD
.1967ca		08		php		                PHP
.1967cb		48		pha		                PHA             ; begin setdbr macro
.1967cc		08		php		                PHP
.1967cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1967cf		a9 00		lda #$00	                LDA #0
.1967d1		48		pha		                PHA
.1967d2		ab		plb		                PLB
.1967d3		28		plp		                PLP
.1967d4		68		pla		                PLA             ; end setdbr macro
.1967d5		48		pha		                PHA             ; begin setdp macro
.1967d6		08		php		                PHP
.1967d7		c2 20		rep #$20	                REP #$20        ; set A long
.1967d9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1967dc		5b		tcd		                TCD
.1967dd		28		plp		                PLP
.1967de		68		pla		                PLA             ; end setdp macro
.1967df		e2 20		sep #$20	                SEP #$20        ; set A short
.1967e1		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1967e4		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1967e6		29 07		and #$07	                AND #$07
.1967e8		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.1967ea		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.1967ee		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.1967f1		e2 20		sep #$20	                SEP #$20        ; set A short
.1967f3		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.1967f5		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.1967f9		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.1967fd		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196801		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196805		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.196807		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.19680b		f0 29		beq $196836	                BEQ no_media                    ; If 0: there is no drive
.19680d		20 83 67	jsr $196783	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.196810		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196813		90 2d		bcc $196842	                BCC ret_failure                 ; If an error occurred, return it
.196815		c2 30		rep #$30	                REP #$30        ; set A&X long
.196817		a0 00 00	ldy #$0000	                LDY #0
.19681a		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.19681e		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196820		c8		iny		                INY                             ; Move to the next position
.196821		c8		iny		                INY
.196822		c0 00 02	cpy #$0200	                CPY #512
.196825		d0 f3		bne $19681a	                BNE read_loop
.196827						ret_success
.196827		e2 20		sep #$20	                SEP #$20        ; set A short
.196829		a9 00		lda #$00	                LDA #0
.19682b		85 00		sta $0320	                STA BIOS_STATUS
.19682d		8d 06 03	sta $0306	                STA @w FDC_ST0
.196830		28		plp		                PLP                             ; Return success
.196831		2b		pld		                PLD
.196832		ab		plb		                PLB
.196833		7a		ply		                PLY
.196834		38		sec		                SEC
.196835		6b		rtl		                RTL
.196836						no_media
.196836		e2 20		sep #$20	                SEP #$20        ; set A short
.196838		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.19683a		80 0a		bra $196846	                BRA pass_failure
.19683c						not_ata
.19683c		e2 20		sep #$20	                SEP #$20        ; set A short
.19683e		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.196840		80 04		bra $196846	                BRA pass_failure
.196842						ret_failure
.196842		e2 20		sep #$20	                SEP #$20        ; set A short
.196844		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.196846		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.196848		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.19684c		8d 06 03	sta $0306	                STA @w FDC_ST0
.19684f		28		plp		                PLP
.196850		2b		pld		                PLD
.196851		ab		plb		                PLB
.196852		7a		ply		                PLY
.196853		18		clc		                CLC
.196854		6b		rtl		                RTL
.196855						IDE_GETBLOCK
.196855		5a		phy		                PHY
.196856		8b		phb		                PHB
.196857		0b		phd		                PHD
.196858		08		php		                PHP
.196859		48		pha		                PHA             ; begin setdbr macro
.19685a		08		php		                PHP
.19685b		e2 20		sep #$20	                SEP #$20        ; set A short
.19685d		a9 00		lda #$00	                LDA #0
.19685f		48		pha		                PHA
.196860		ab		plb		                PLB
.196861		28		plp		                PLP
.196862		68		pla		                PLA             ; end setdbr macro
.196863		48		pha		                PHA             ; begin setdp macro
.196864		08		php		                PHP
.196865		c2 20		rep #$20	                REP #$20        ; set A long
.196867		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19686a		5b		tcd		                TCD
.19686b		28		plp		                PLP
.19686c		68		pla		                PLA             ; end setdp macro
.19686d		e2 20		sep #$20	                SEP #$20        ; set A short
.19686f		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196872		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196874		29 07		and #$07	                AND #$07
.196876		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196878		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.19687c		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.19687f		e2 20		sep #$20	                SEP #$20        ; set A short
.196881		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196883		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196887		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196889		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.19688d		a5 03		lda $0323	                LDA BIOS_LBA+1
.19688f		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196893		a5 04		lda $0324	                LDA BIOS_LBA+2
.196895		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196899		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.19689b		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.19689f		ea		nop		                NOP                             ; Wait about 500ns
.1968a0		ea		nop		                NOP
.1968a1		ea		nop		                NOP
.1968a2		ea		nop		                NOP
.1968a3		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1968a6		90 25		bcc $1968cd	                BCC ret_failure                 ; If an error occurred, return it
.1968a8		a0 00 00	ldy #$0000	                LDY #0
.1968ab		c2 20		rep #$20	                REP #$20        ; set A long
.1968ad		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.1968b1		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.1968b3		c8		iny		                INY                             ; Move to the next position
.1968b4		c8		iny		                INY
.1968b5		c0 00 02	cpy #$0200	                CPY #512
.1968b8		d0 f3		bne $1968ad	                BNE read_loop
.1968ba		ea		nop		                NOP                             ; Wait about 500ns
.1968bb		ea		nop		                NOP
.1968bc		ea		nop		                NOP
.1968bd		ea		nop		                NOP
.1968be						ret_success
.1968be		e2 20		sep #$20	                SEP #$20        ; set A short
.1968c0		a9 00		lda #$00	                LDA #0
.1968c2		85 00		sta $0320	                STA BIOS_STATUS
.1968c4		8d 06 03	sta $0306	                STA @w FDC_ST0
.1968c7		28		plp		                PLP                             ; Return success
.1968c8		2b		pld		                PLD
.1968c9		ab		plb		                PLB
.1968ca		7a		ply		                PLY
.1968cb		38		sec		                SEC
.1968cc		6b		rtl		                RTL
.1968cd						ret_failure
.1968cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1968cf		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1968d3		8d 06 03	sta $0306	                STA @w FDC_ST0
.1968d6		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.1968d8		85 00		sta $0320	                STA BIOS_STATUS
.1968da		28		plp		                PLP
.1968db		2b		pld		                PLD
.1968dc		ab		plb		                PLB
.1968dd		7a		ply		                PLY
.1968de		18		clc		                CLC
.1968df		6b		rtl		                RTL
.1968e0						IDE_PUTBLOCK
.1968e0		5a		phy		                PHY
.1968e1		8b		phb		                PHB
.1968e2		0b		phd		                PHD
.1968e3		08		php		                PHP
.1968e4		48		pha		                PHA             ; begin setdbr macro
.1968e5		08		php		                PHP
.1968e6		e2 20		sep #$20	                SEP #$20        ; set A short
.1968e8		a9 00		lda #$00	                LDA #0
.1968ea		48		pha		                PHA
.1968eb		ab		plb		                PLB
.1968ec		28		plp		                PLP
.1968ed		68		pla		                PLA             ; end setdbr macro
.1968ee		48		pha		                PHA             ; begin setdp macro
.1968ef		08		php		                PHP
.1968f0		c2 20		rep #$20	                REP #$20        ; set A long
.1968f2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1968f5		5b		tcd		                TCD
.1968f6		28		plp		                PLP
.1968f7		68		pla		                PLA             ; end setdp macro
.1968f8		e2 20		sep #$20	                SEP #$20        ; set A short
.1968fa		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1968fd		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1968ff		29 07		and #$07	                AND #$07
.196901		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196903		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196907		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.19690a		e2 20		sep #$20	                SEP #$20        ; set A short
.19690c		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.19690e		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196912		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.196914		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196918		a5 03		lda $0323	                LDA BIOS_LBA+1
.19691a		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.19691e		a5 04		lda $0324	                LDA BIOS_LBA+2
.196920		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.196924		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.196926		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.19692a		ea		nop		                NOP                             ; Wait about 500ns
.19692b		ea		nop		                NOP
.19692c		ea		nop		                NOP
.19692d		ea		nop		                NOP
.19692e		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196931		90 37		bcc $19696a	                BCC ret_failure                 ; If an error occurred, return it
.196933		c2 30		rep #$30	                REP #$30        ; set A&X long
.196935		a0 00 00	ldy #$0000	                LDY #0
.196938		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.19693a		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.19693e		c8		iny		                INY                             ; Move to the next position
.19693f		c8		iny		                INY
.196940		c0 00 02	cpy #$0200	                CPY #512
.196943		d0 f3		bne $196938	                BNE read_loop
.196945		ea		nop		                NOP                             ; Wait about 500ns
.196946		ea		nop		                NOP
.196947		ea		nop		                NOP
.196948		ea		nop		                NOP
.196949		20 a1 67	jsr $1967a1	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.19694c		90 1c		bcc $19696a	                BCC ret_failure                 ; If an error occurred, return it
.19694e		ea		nop		                NOP                             ; Wait about 500ns
.19694f		ea		nop		                NOP
.196950		ea		nop		                NOP
.196951		ea		nop		                NOP
.196952		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.196956		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.196959		d0 0f		bne $19696a	                BNE ret_failure                 ; If error: return failure
.19695b						ret_success
.19695b		e2 20		sep #$20	                SEP #$20        ; set A short
.19695d		a9 00		lda #$00	                LDA #0
.19695f		85 00		sta $0320	                STA BIOS_STATUS
.196961		8d 06 03	sta $0306	                STA @w FDC_ST0
.196964		28		plp		                PLP                             ; Return success
.196965		2b		pld		                PLD
.196966		ab		plb		                PLB
.196967		7a		ply		                PLY
.196968		38		sec		                SEC
.196969		6b		rtl		                RTL
.19696a		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.19696b		ea		nop		                NOP
.19696c		ea		nop		                NOP
.19696d		ea		nop		                NOP
.19696e		e2 20		sep #$20	                SEP #$20        ; set A short
.196970		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196974		80 08		bra $19697e	                BRA save_error
.196976		ea		nop		                NOP
.196977		ea		nop		                NOP
.196978		ea		nop		                NOP
.196979		ea		nop		                NOP
.19697a		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.19697e		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.196981		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.196983		85 00		sta $0320	                STA BIOS_STATUS
.196985		28		plp		                PLP
.196986		2b		pld		                PLD
.196987		ab		plb		                PLB
.196988		7a		ply		                PLY
.196989		18		clc		                CLC
.19698a		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.19698b						SIMPLE_INIT_ETHERNET_CTRL
.19698b						WaitforittobeReady:
.19698b		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.19698f		29 01 00	and #$0001	                AND #$0001
.196992		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.196995		d0 f4		bne $19698b	                BNE WaitforittobeReady
.196997		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.19699b		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.19699f		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.1969a3		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.1969a7		a9 00 00	lda #$0000	                LDA #$0000
.1969aa		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.1969ae		a9 00 70	lda #$7000	                LDA #$7000
.1969b1		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.1969b5		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.1969b8		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1969bc		a9 0b 00	lda #$000b	                LDA #$000B
.1969bf		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1969c3		a9 00 00	lda #$0000	                LDA #$0000
.1969c6		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1969ca		20 fe 69	jsr $1969fe	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1969cd		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.1969d0		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1969d4		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.1969d7		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1969db		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.1969de		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1969e2		20 fe 69	jsr $1969fe	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1969e5		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.1969e8		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1969ec		a9 0c 00	lda #$000c	                LDA #$000C
.1969ef		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1969f3		a9 04 00	lda #$0004	                LDA #$0004
.1969f6		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1969fa		20 fe 69	jsr $1969fe	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1969fd		6b		rtl		                RTL
.1969fe						MAC_ACCESS_WAIT_FOR_COMPLETION
.1969fe		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.196a01		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.196a05						WaitForCompletion:
.196a05		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.196a09		29 00 80	and #$8000	                AND #$8000
.196a0c		c9 00 80	cmp #$8000	                CMP #$8000
.196a0f		f0 f4		beq $196a05	                BEQ WaitForCompletion
.196a11		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.196a12						INIT_EVID_VID_MODE
.196a12		e2 20		sep #$20	                SEP #$20        ; set A short
.196a14		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.196a16		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.196a1a		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.196a1c		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.196a20		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.196a22		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.196a26		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.196a2a		a9 20		lda #$20	                LDA #$20
.196a2c		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.196a30		a9 00		lda #$00	                LDA #$00
.196a32		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.196a36		a9 20		lda #$20	                LDA #$20
.196a38		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.196a3c		22 3e 6b 19	jsl $196b3e	                JSL INIT_EVID_LUT
.196a40		22 27 6b 19	jsl $196b27	                JSL INIT_EVID_FONTSET
.196a44		22 62 6b 19	jsl $196b62	                JSL INIT_EVID_CURSOR
.196a48		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a4a		a9 62 00	lda #$0062	                LDA #(100-2)
.196a4d		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.196a51		a9 49 00	lda #$0049	                LDA #(75-2)
.196a54		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.196a58		a9 64 00	lda #$0064	                LDA #100
.196a5b		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.196a5f		a9 4b 00	lda #$004b	                LDA #75
.196a62		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.196a66		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.196a69		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.196a6d		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a6f		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.196a72		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.196a76		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.196a7a		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.196a7d		8d 76 00	sta $0076	                STA EVID_COLORPOS
.196a80		e2 20		sep #$20	                SEP #$20        ; set A short
.196a82		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.196a84		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.196a88		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.196a8c		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.196a8e		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.196a92		6b		rtl		                RTL
>196a93		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>196a9b		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>196aab		0c 1b
>196aad		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>196ab5		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>196ac5		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>196ad5		56 49 44 0d 00
>196ada		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>196ae2		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.196af2						EVID_GREET
.196af2		48		pha		                PHA
.196af3		da		phx		                PHX
.196af4		08		php		                PHP
.196af5		e2 20		sep #$20	                SEP #$20        ; set A short
.196af7		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.196afb		f0 26		beq $196b23	                BEQ done                        ; If not, skip this routine
.196afd		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.196aff		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196b03		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.196b07		c2 10		rep #$10	                REP #$10        ; set X long
.196b09		8b		phb		                PHB                             ; Print the messages
.196b0a		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.196b0c		48		pha		                PHA
.196b0d		ab		plb		                PLB
.196b0e		a2 93 6a	ldx #$6a93	                LDX #<>EVID_DEV_RDY0
.196b11		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.196b15		a2 da 6a	ldx #$6ada	                LDX #<>EVID_DEV_RDY1
.196b18		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.196b1c		ab		plb		                PLB
.196b1d		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.196b1f		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196b23		28		plp		done            PLP
.196b24		fa		plx		                PLX
.196b25		68		pla		                PLA
.196b26		6b		rtl		                RTL
.196b27						INIT_EVID_FONTSET
.196b27		e2 20		sep #$20	                SEP #$20        ; set A short
.196b29		c2 10		rep #$10	                REP #$10        ; set X long
.196b2b		a2 00 00	ldx #$0000	                LDX #$0000
.196b2e						initFontsetbranch0
.196b2e		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.196b32		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.196b36		e8		inx		                INX
.196b37		e0 00 08	cpx #$0800	                CPX #$0800
.196b3a		d0 f2		bne $196b2e	                BNE initFontsetbranch0
.196b3c		ea		nop		                NOP
.196b3d		6b		rtl		                RTL
.196b3e						INIT_EVID_LUT
.196b3e		e2 20		sep #$20	                SEP #$20        ; set A short
.196b40		e2 10		sep #$10	                SEP #$10        ; set X short
.196b42		a2 00		ldx #$00	                LDX	#$00
.196b44		bf a8 82 19	lda $1982a8,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.196b48		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.196b4c		e8		inx		                inx
.196b4d		e0 40		cpx #$40	                cpx #$40
.196b4f		d0 f3		bne $196b44	                bne lutinitloop0
.196b51		a2 00		ldx #$00	                LDX	#$00
.196b53		bf e8 82 19	lda $1982e8,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.196b57		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.196b5b		e8		inx		                INX
.196b5c		e0 40		cpx #$40	                CPX #$40
.196b5e		d0 f3		bne $196b53	                bne lutinitloop1
.196b60		ea		nop		                NOP
.196b61		6b		rtl		                RTL
.196b62						INIT_EVID_CURSOR
.196b62		08		php		                PHP
.196b63		e2 20		sep #$20	                SEP #$20        ; set A short
.196b65		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.196b67		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.196b6b		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.196b6d		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.196b71		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b73		a9 00 00	lda #$0000	                LDA #$0000;
.196b76		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.196b7a		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.196b7e		28		plp		                PLP
.196b7f		6b		rtl		                RTL
.196b80						INIT_EVID_CLRSCREEN
.196b80		08		php		                PHP
.196b81		e2 20		sep #$20	                SEP #$20        ; set A short
.196b83		c2 10		rep #$10	                REP #$10        ; set X long
.196b85		a2 00 00	ldx #$0000	                LDX #$0000		        ; Only Use One Pointer
.196b88		a9 20		lda #$20	                LDA #$20		        ; Fill the Entire Screen with Space
.196b8a		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA @l EVID_TEXT_MEM,X
.196b8e		e8		inx		                inx
.196b8f		e0 00 20	cpx #$2000	                cpx #$2000
.196b92		d0 f6		bne $196b8a	                bne iclearloop0
.196b94		a2 00 00	ldx #$0000	                LDX	#$0000		        ; Only Use One Pointer
.196b97		a9 f0		lda #$f0	                LDA #$F0		        ; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.196b99		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA @l EVID_COLOR_MEM,X
.196b9d		e8		inx		                inx
.196b9e		e0 00 20	cpx #$2000	                cpx #$2000
.196ba1		d0 f6		bne $196b99	                bne iclearloop1
.196ba3		28		plp		                PLP
.196ba4		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.196ba5						ANSI_INIT
.196ba5		da		phx		                    PHX
.196ba6		5a		phy		                    PHY
.196ba7		8b		phb		                    PHB
.196ba8		0b		phd		                    PHD
.196ba9		08		php		                    PHP
.196baa		c2 30		rep #$30	                REP #$30        ; set A&X long
.196bac		a0 00 00	ldy #$0000	                    LDY #0
.196baf		22 5b 6c 19	jsl $196c5b	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.196bb3		e2 20		sep #$20	                SEP #$20        ; set A short
.196bb5		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.196bb9		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.196bbb		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.196bbd		d0 1d		bne $196bdc	                    BNE no_evid
.196bbf		c2 20		rep #$20	                REP #$20        ; set A long
.196bc1		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.196bc5		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.196bc8		d0 12		bne $196bdc	                    BNE no_evid                     ; No: mark the EVID screen as not present
.196bca		e2 20		sep #$20	                SEP #$20        ; set A short
.196bcc		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.196bce		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196bd2		a0 01 00	ldy #$0001	                    LDY #1
.196bd5		22 5b 6c 19	jsl $196c5b	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.196bd9		80 09		bra $196be4	                    BRA done
.196bdb		00		brk #		                    BRK
.196bdc						no_evid
.196bdc		e2 20		sep #$20	                SEP #$20        ; set A short
.196bde		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.196be0		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196be4		28		plp		done                PLP
.196be5		2b		pld		                    PLD
.196be6		ab		plb		                    PLB
.196be7		7a		ply		                    PLY
.196be8		fa		plx		                    PLX
.196be9		6b		rtl		                    RTL
.196bea						ANSI_INIT_LUTS
.196bea		08		php		                    PHP
.196beb		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196bed		a2 00		ldx #$00	                    LDX #0
.196bef		bf 1b 6c 19	lda $196c1b,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196bf3		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.196bf7		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.196bfb		e8		inx		                    INX
.196bfc		e0 40		cpx #$40	                    CPX #4*16
.196bfe		d0 ef		bne $196bef	                    BNE vicky_loop
.196c00		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.196c04		f0 13		beq $196c19	                    BEQ done                        ; If not, we're done
.196c06		a2 00		ldx #$00	                    LDX #0
.196c08		bf 1b 6c 19	lda $196c1b,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196c0c		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.196c10		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.196c14		e8		inx		                    INX
.196c15		e0 40		cpx #$40	                    CPX #4*16
.196c17		d0 ef		bne $196c08	                    BNE evid_loop
.196c19		28		plp		done                PLP
.196c1a		6b		rtl		                    RTL
.196c1b						ANSI_TEXT_LUT
>196c1b		00 00 00 00			                    .byte 0, 0, 0, 0
>196c1f		00 00 80 00			                    .byte 0, 0, 128, 0
>196c23		00 80 00 00			                    .byte 0, 128, 0, 0
>196c27		00 80 80 00			                    .byte 0, 128, 128, 0
>196c2b		80 00 00 00			                    .byte 128, 0, 0, 0
>196c2f		80 00 80 00			                    .byte 128, 0, 128, 0
>196c33		80 80 00 00			                    .byte 128, 128, 0, 0
>196c37		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>196c3b		80 80 80 00			                    .byte 128, 128, 128, 0
>196c3f		00 00 ff 00			                    .byte 0, 0, 255, 0
>196c43		00 ff 00 00			                    .byte 0, 255, 0, 0
>196c47		00 ff ff 00			                    .byte 0, 255, 255, 0
>196c4b		ff 00 00 00			                    .byte 255, 0, 0, 0
>196c4f		00 7f fc 00			                    .byte 0, 127, 252, 0
>196c53		ff ff 00 00			                    .byte 255, 255, 0, 0
>196c57		ff ff ff 00			                    .byte 255, 255, 255, 0
.196c5b						INIT_SCREEN_Y
.196c5b		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c5d		c0 00 00	cpy #$0000	                    CPY #0
.196c60		f0 06		beq $196c68	                    BEQ setdp_0
.196c62		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.196c65		5b		tcd		                    TCD
.196c66		80 04		bra $196c6c	                    BRA set_addresses
.196c68		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.196c6b		5b		tcd		                    TCD
.196c6c		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.196c6d		0a		asl a		                    ASL A
.196c6e		0a		asl a		                    ASL A
.196c6f		aa		tax		                    TAX
.196c70		bf ab 6c 19	lda $196cab,x	                    LDA @l text_address,X
.196c74		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.196c76		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.196c78		e2 20		sep #$20	                SEP #$20        ; set A short
.196c7a		bf ad 6c 19	lda $196cad,x	                    LDA @l text_address+2,X
.196c7e		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.196c80		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.196c82		c2 20		rep #$20	                REP #$20        ; set A long
.196c84		bf b3 6c 19	lda $196cb3,x	                    LDA @l color_address,X
.196c88		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.196c8a		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.196c8c		e2 20		sep #$20	                SEP #$20        ; set A short
.196c8e		bf b5 6c 19	lda $196cb5,x	                    LDA @l color_address+2,X
.196c92		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.196c94		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.196c96		c2 20		rep #$20	                REP #$20        ; set A long
.196c98		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.196c9a		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.196c9c		e2 20		sep #$20	                SEP #$20        ; set A short
.196c9e		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.196ca0		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.196ca2		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196ca4		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.196ca6		22 f4 6c 19	jsl $196cf4	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.196caa		6b		rtl		                    RTL
>196cab		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>196cb3		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.196cbb						ANSI_SETSIZES
.196cbb		48		pha		                    PHA
.196cbc		da		phx		                    PHX
.196cbd		5a		phy		                    PHY
.196cbe		0b		phd		                    PHD
.196cbf		08		php		                    PHP
.196cc0		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196cc2		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.196cc6		48		pha		                    PHA
.196cc7		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.196cc9		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.196ccd		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196cd1		a0 00		ldy #$00	                    LDY #0
.196cd3		22 f4 6c 19	jsl $196cf4	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196cd7		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.196cd9		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.196cdd		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196ce1		b0 06		bcs $196ce9	                    BCS done                        ; Not present, just return
.196ce3		a0 01		ldy #$01	                    LDY #1
.196ce5		22 f4 6c 19	jsl $196cf4	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196ce9		68		pla		done                PLA
.196cea		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.196cee		28		plp		                    PLP
.196cef		2b		pld		                    PLD
.196cf0		7a		ply		                    PLY
.196cf1		fa		plx		                    PLX
.196cf2		68		pla		                    PLA
.196cf3		6b		rtl		                    RTL
.196cf4						ANSI_SETSIZE_Y
.196cf4		08		php		                    PHP
.196cf5		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196cf7		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196cf9		f0 06		beq $196d01	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.196cfb		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.196cff		80 04		bra $196d05	                    BRA resolution
.196d01		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.196d05		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.196d07		0a		asl a		                    ASL A
.196d08		aa		tax		                    TAX                                 ; Index to the col/line count in X
.196d09		c2 20		rep #$20	                REP #$20        ; set A long
.196d0b		bf a7 6d 19	lda $196da7,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.196d0f		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.196d11		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.196d13		bf af 6d 19	lda $196daf,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.196d17		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.196d19		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.196d1b		e2 20		sep #$20	                SEP #$20        ; set A short
.196d1d		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d1f		f0 06		beq $196d27	                    BEQ vky_border                      ; Yes: get the border from Vicky
.196d21		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.196d25		80 04		bra $196d2b	                    BRA border
.196d27		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.196d2b		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.196d2d		f0 76		beq $196da5	                    BEQ done                            ; No border... the sizes are correct now
.196d2f		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d31		f0 06		beq $196d39	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.196d33		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.196d37		80 04		bra $196d3d	                    BRA get_border_x_size
.196d39		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.196d3d		29 3f		and #$3f	get_border_x_size   AND #$3F
.196d3f		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196d41		d0 04		bne $196d47	                    BNE frac_width
.196d43		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196d44		4a		lsr a		                    LSR A
.196d45		80 03		bra $196d4a	                    BRA store_width
.196d47		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196d48		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196d49		1a		inc a		                    INC A
.196d4a		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.196d4c		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196d4e		e2 20		sep #$20	                SEP #$20        ; set A short
.196d50		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196d52		f0 0c		beq $196d60	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.196d54		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.196d58		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196d5a		f0 04		beq $196d60	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.196d5c		c2 20		rep #$20	                REP #$20        ; set A long
.196d5e		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196d60						adjust_width
.196d60		c2 20		rep #$20	                REP #$20        ; set A long
.196d62		38		sec		                    SEC
.196d63		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.196d65		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196d67		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.196d69		e2 20		sep #$20	                SEP #$20        ; set A short
.196d6b		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d6d		f0 06		beq $196d75	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.196d6f		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.196d73		80 04		bra $196d79	                    BRA get_border_y_size
.196d75		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.196d79		29 3f		and #$3f	get_border_y_size   AND #$3F
.196d7b		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196d7d		d0 04		bne $196d83	                    BNE frac_height
.196d7f		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196d80		4a		lsr a		                    LSR A
.196d81		80 03		bra $196d86	                    BRA store_height
.196d83		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196d84		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196d85		1a		inc a		                    INC A
.196d86		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.196d88		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196d8a		e2 20		sep #$20	                SEP #$20        ; set A short
.196d8c		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196d8e		f0 0c		beq $196d9c	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.196d90		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.196d94		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196d96		f0 04		beq $196d9c	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.196d98		c2 20		rep #$20	                REP #$20        ; set A long
.196d9a		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196d9c						adjust_height
.196d9c		c2 20		rep #$20	                REP #$20        ; set A long
.196d9e		38		sec		                    SEC
.196d9f		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.196da1		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196da3		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.196da5		28		plp		done                PLP
.196da6		6b		rtl		                    RTL
>196da7		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>196daf		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.196db7						ANSI_SETDEVICE
.196db7		48		pha		                    PHA
.196db8		08		php		                    PHP
.196db9		e2 20		sep #$20	                SEP #$20        ; set A short
.196dbb		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.196dbf		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.196dc1		f0 08		beq $196dcb	                    BEQ console                     ; Yes: point to the console
.196dc3		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.196dc5		f0 0b		beq $196dd2	                    BEQ evid                        ; Check to see if the EVID is present
.196dc7		28		plp		bad_device          PLP
.196dc8		68		pla		                    PLA
.196dc9		38		sec		                    SEC
.196dca		6b		rtl		                    RTL
.196dcb						console
.196dcb		c2 20		rep #$20	                REP #$20        ; set A long
.196dcd		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.196dd0		80 0d		bra $196ddf	                    BRA set_dp
.196dd2						evid
.196dd2		e2 20		sep #$20	                SEP #$20        ; set A short
.196dd4		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.196dd8		f0 ed		beq $196dc7	                    BEQ bad_device                  ; No: return that the device is bad
.196dda		c2 20		rep #$20	                REP #$20        ; set A long
.196ddc		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.196ddf		5b		tcd		set_dp              TCD
.196de0		28		plp		                    PLP
.196de1		68		pla		                    PLA
.196de2		18		clc		                    CLC
.196de3		6b		rtl		                    RTL
.196de4						ANSI_PUTC
.196de4		da		phx		                    PHX
.196de5		5a		phy		                    PHY
.196de6		0b		phd		                    PHD
.196de7		08		php		                    PHP
.196de8		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196dea		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196dee		90 03		bcc $196df3	                    BCC get_state               ; If valid, check the current state
.196df0		82 9d 00	brl $196e90	                    BRL done                    ; If invalid, just return
.196df3		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.196df5		f0 0c		beq $196e03	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.196df7		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.196df9		f0 21		beq $196e1c	                    BEQ do_st_escape
.196dfb		e0 02		cpx #$02	                    CPX #ST_CSI
.196dfd		f0 3f		beq $196e3e	                    BEQ do_st_csi
.196dff		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196e01		80 06		bra $196e09	                    BRA print_raw
.196e03		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.196e05		f0 09		beq $196e10	                    BEQ go_escape               ; Yes, handle the ESC
.196e07		90 0d		bcc $196e16	                    BLT do_control              ; If less than, handle as a control code
.196e09		22 71 6f 19	jsl $196f71	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.196e0d		82 80 00	brl $196e90	                    BRL done
.196e10		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.196e12		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.196e14		80 7a		bra $196e90	                    BRA done
.196e16		22 28 6f 19	jsl $196f28	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.196e1a		80 74		bra $196e90	                    BRA done
.196e1c		c9 5c		cmp #$5c	do_st_escape        CMP #'\'                    ; Have we gotten 'ESC\' (String terminator)?
.196e1e		f0 08		beq $196e28	                    BEQ go_init                 ; Yes: go back to the init state (we do nothing with this)
.196e20		c9 5f		cmp #$5f	chk_apc             CMP #'_'                    ; Have we gotten 'ESC_' (Application Program Command)?
.196e22		d0 0a		bne $196e2e	                    BNE chk_csi                 ; No: check to see if we have a CSI
.196e24		22 39 10 19	jsl $191039	                    JSL SHOW_CREDITS            ; Yes: show the credits
.196e28		a9 00		lda #$00	go_init             LDA #ST_INIT
.196e2a		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the INIT state
.196e2c		80 62		bra $196e90	                    BRA done
.196e2e		c9 5b		cmp #$5b	chk_csi             CMP #'['                    ; Have we gotten 'ESC['?
.196e30		d0 cd		bne $196dff	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.196e32		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.196e34		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.196e36		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.196e38		a9 02		lda #$02	                    LDA #ST_CSI
.196e3a		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.196e3c		80 52		bra $196e90	                    BRA done
.196e3e		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.196e40		90 1d		bcc $196e5f	                    BLT csi_not_digit
.196e42		c9 3a		cmp #$3a	                    CMP #'9'+1
.196e44		b0 19		bcs $196e5f	                    BGE csi_not_digit
.196e46		38		sec		                    SEC                         ; Have digit... convert to a number
.196e47		e9 30		sbc #$30	                    SBC #'0'
.196e49		48		pha		                    PHA                         ; Save it
.196e4a		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.196e4c		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.196e4e		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.196e50		0a		asl a		                    ASL A                       ; A := arg * 4
.196e51		0a		asl a		                    ASL A                       ; A := arg * 8
.196e52		18		clc		                    CLC
.196e53		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.196e55		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.196e57		18		clc		                    CLC
.196e58		68		pla		                    PLA                         ; Get the digit back
.196e59		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.196e5b		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.196e5d		80 31		bra $196e90	                    BRA done                    ; And we're done with this particular character
.196e5f		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.196e61		d0 0e		bne $196e71	                    BNE csi_not_sep
.196e63		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.196e65		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.196e67		d0 03		bne $196e6c	                    BNE csi_next_arg            ; No: move to the next argument
.196e69		82 93 ff	brl $196dff	                    BRL pr_and_reset            ; Yes: print and reset state
.196e6c		1a		inc a		csi_next_arg        INC A
.196e6d		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.196e6f		80 1f		bra $196e90	                    BRA done                    ; And we're done with this character
.196e71		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.196e73		90 0a		bcc $196e7f	                    BLT csi_not_upper
.196e75		c9 5b		cmp #$5b	                    CMP #'Z'+1
.196e77		b0 06		bcs $196e7f	                    BGE csi_not_upper
.196e79		22 a0 6e 19	jsl $196ea0	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.196e7d		80 11		bra $196e90	                    BRA done
.196e7f		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.196e81		90 0a		bcc $196e8d	                    BLT csi_not_lower
.196e83		c9 7b		cmp #$7b	                    CMP #'z'+1
.196e85		b0 06		bcs $196e8d	                    BGE csi_not_lower
.196e87		22 e5 6e 19	jsl $196ee5	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.196e8b		80 03		bra $196e90	                    BRA done
.196e8d		82 6f ff	brl $196dff	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.196e90		28		plp		done                PLP
.196e91		2b		pld		                    PLD
.196e92		7a		ply		                    PLY
.196e93		fa		plx		                    PLX
.196e94		6b		rtl		                    RTL
.196e95						ANSI_INVALID
.196e95		08		php		                    PHP
.196e96		e2 20		sep #$20	                SEP #$20        ; set A short
.196e98		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196e9a		22 71 6f 19	jsl $196f71	                    JSL ANSI_PUTRAWC            ; Print the character
.196e9e		28		plp		                    PLP
.196e9f		6b		rtl		                    RTL
.196ea0						ANSI_ANSI_UPPER
.196ea0		08		php		                    PHP
.196ea1		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196ea3		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196ea5		38		sec		                    SEC
.196ea6		e9 40		sbc #$40	                    SBC #'@'
.196ea8		0a		asl a		                    ASL A
.196ea9		aa		tax		                    TAX
.196eaa		fc af 6e	jsr ($196eaf,x)	                    JSR (ansi_table,X)
.196ead		28		plp		                    PLP
.196eae		6b		rtl		                    RTL
>196eaf		e5 71				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>196eb1		8c 6f				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>196eb3		9f 6f				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>196eb5		b0 6f				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>196eb7		c1 6f				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>196eb9		95 6e				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>196ebb		95 6e				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>196ebd		95 6e				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>196ebf		d2 6f				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>196ec1		95 6e				                    .word <>ANSI_INVALID    ; 'I'
>196ec3		51 71				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>196ec5		94 71				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>196ec7		95 6e				                    .word <>ANSI_INVALID    ; 'L'
>196ec9		95 6e				                    .word <>ANSI_INVALID    ; 'M'
>196ecb		95 6e				                    .word <>ANSI_INVALID    ; 'N'
>196ecd		95 6e				                    .word <>ANSI_INVALID    ; 'O'
>196ecf		29 72				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>196ed1		95 6e				                    .word <>ANSI_INVALID    ; 'Q'
>196ed3		95 6e				                    .word <>ANSI_INVALID    ; 'R'
>196ed5		95 6e				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>196ed7		95 6e				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>196ed9		95 6e				                    .word <>ANSI_INVALID    ; 'U'
>196edb		95 6e				                    .word <>ANSI_INVALID    ; 'V'
>196edd		95 6e				                    .word <>ANSI_INVALID    ; 'W'
>196edf		95 6e				                    .word <>ANSI_INVALID    ; 'X'
>196ee1		95 6e				                    .word <>ANSI_INVALID    ; 'Y'
>196ee3		95 6e				                    .word <>ANSI_INVALID    ; 'Z'
.196ee5						ANSI_ANSI_LOWER
.196ee5		08		php		                    PHP
.196ee6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196ee8		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196eea		38		sec		                    SEC
.196eeb		e9 61		sbc #$61	                    SBC #'a'
.196eed		0a		asl a		                    ASL A
.196eee		aa		tax		                    TAX
.196eef		fc f4 6e	jsr ($196ef4,x)	                    JSR (ansi_table,X)
.196ef2		28		plp		                    PLP
.196ef3		6b		rtl		                    RTL
>196ef4		95 6e				ansi_table          .word <>ANSI_INVALID    ; 'a'
>196ef6		95 6e				                    .word <>ANSI_INVALID    ; 'b'
>196ef8		95 6e				                    .word <>ANSI_INVALID    ; 'c'
>196efa		95 6e				                    .word <>ANSI_INVALID    ; 'd'
>196efc		95 6e				                    .word <>ANSI_INVALID    ; 'e'
>196efe		95 6e				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>196f00		95 6e				                    .word <>ANSI_INVALID    ; 'g'
>196f02		eb 6f				                    .word <>ANSI_SET_MODE   ; 'h'
>196f04		95 6e				                    .word <>ANSI_INVALID    ; 'i'
>196f06		95 6e				                    .word <>ANSI_INVALID    ; 'j'
>196f08		95 6e				                    .word <>ANSI_INVALID    ; 'k'
>196f0a		28 70				                    .word <>ANSI_RESET_MODE ; 'l'
>196f0c		65 70				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>196f0e		95 6e				                    .word <>ANSI_INVALID    ; 'n'
>196f10		95 6e				                    .word <>ANSI_INVALID    ; 'o'
>196f12		95 6e				                    .word <>ANSI_INVALID    ; 'p'
>196f14		95 6e				                    .word <>ANSI_INVALID    ; 'q'
>196f16		95 6e				                    .word <>ANSI_INVALID    ; 'r'
>196f18		95 6e				                    .word <>ANSI_INVALID    ; 's'
>196f1a		95 6e				                    .word <>ANSI_INVALID    ; 't'
>196f1c		95 6e				                    .word <>ANSI_INVALID    ; 'u'
>196f1e		95 6e				                    .word <>ANSI_INVALID    ; 'v'
>196f20		95 6e				                    .word <>ANSI_INVALID    ; 'w'
>196f22		95 6e				                    .word <>ANSI_INVALID    ; 'x'
>196f24		95 6e				                    .word <>ANSI_INVALID    ; 'y'
>196f26		95 6e				                    .word <>ANSI_INVALID    ; 'z'
.196f28						ANSI_PR_CONTROL
.196f28		08		php		                    PHP
.196f29		e2 20		sep #$20	                SEP #$20        ; set A short
.196f2b		c2 10		rep #$10	                REP #$10        ; set X long
.196f2d		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.196f2f		f0 12		beq $196f43	                    BEQ do_cr
.196f31		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.196f33		f0 1a		beq $196f4f	                    BEQ do_lf
.196f35		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.196f37		f0 1c		beq $196f55	                    BEQ do_bs
.196f39		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.196f3b		f0 1e		beq $196f5b	                    BEQ do_tab
.196f3d		22 71 6f 19	jsl $196f71	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.196f41		80 2c		bra $196f6f	                    BRA done
.196f43		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.196f46		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196f48		c8		iny		                    INY
.196f49		22 02 73 19	jsl $197302	                    JSL ANSI_LOCATE
.196f4d		80 20		bra $196f6f	                    BRA done
.196f4f		22 df 72 19	jsl $1972df	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.196f53		80 1a		bra $196f6f	                    BRA done
.196f55		22 a3 72 19	jsl $1972a3	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.196f59		80 14		bra $196f6f	                    BRA done
.196f5b						do_tab
.196f5b		c2 30		rep #$30	                REP #$30        ; set A&X long
.196f5d		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.196f5f		29 f8 ff	and #$fff8	                    AND #$FFF8
.196f62		18		clc		                    CLC
.196f63		69 08 00	adc #$0008	                    ADC #$0008
.196f66		aa		tax		                    TAX
.196f67		e2 20		sep #$20	                SEP #$20        ; set A short
.196f69		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196f6b		22 02 73 19	jsl $197302	                    JSL ANSI_LOCATE
.196f6f		28		plp		done                PLP
.196f70		6b		rtl		                    RTL
.196f71						ANSI_PUTRAWC
.196f71		da		phx		                    PHX
.196f72		5a		phy		                    PHY
.196f73		0b		phd		                    PHD
.196f74		08		php		                    PHP
.196f75		e2 20		sep #$20	                SEP #$20        ; set A short
.196f77		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.196f7b		b0 0a		bcs $196f87	                    BCS done                        ; If invalid, just return
.196f7d		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.196f7f		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.196f81		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.196f83		22 78 72 19	jsl $197278	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.196f87		28		plp		done                PLP
.196f88		2b		pld		                    PLD
.196f89		7a		ply		                    PLY
.196f8a		fa		plx		                    PLX
.196f8b		6b		rtl		                    RTL
.196f8c						ANSI_CUU
.196f8c		08		php		                    PHP
.196f8d		e2 20		sep #$20	                SEP #$20        ; set A short
.196f8f		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f91		1a		inc a		                    INC A
.196f92		a9 01		lda #$01	default             LDA #1                          ; Otherwise: treat it as 1
.196f94		48		pha		loop                PHA                             ; Save the count
.196f95		22 c1 72 19	jsl $1972c1	                    JSL ANSI_CSRUP                  ; Cursor Up
.196f99		68		pla		                    PLA                             ; Restore the count
.196f9a		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196f9b		d0 f7		bne $196f94	                    BNE loop
.196f9d		28		plp		                    PLP
.196f9e		60		rts		                    RTS
.196f9f						ANSI_CUD
.196f9f		08		php		                    PHP
.196fa0		e2 20		sep #$20	                SEP #$20        ; set A short
.196fa2		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fa4		1a		inc a		                    INC A
.196fa5		48		pha		loop                PHA                             ; Save the count
.196fa6		22 df 72 19	jsl $1972df	                    JSL ANSI_CSRDOWN                ; Cursor Down
.196faa		68		pla		                    PLA                             ; Restore the count
.196fab		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fac		d0 f7		bne $196fa5	                    BNE loop
.196fae		28		plp		                    PLP
.196faf		60		rts		                    RTS
.196fb0						ANSI_CUF
.196fb0		08		php		                    PHP
.196fb1		e2 20		sep #$20	                SEP #$20        ; set A short
.196fb3		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fb5		1a		inc a		                    INC A
.196fb6		48		pha		loop                PHA                             ; Save the count
.196fb7		22 78 72 19	jsl $197278	                    JSL ANSI_CSRRIGHT               ; Cursor right
.196fbb		68		pla		                    PLA                             ; Restore the count
.196fbc		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fbd		d0 f7		bne $196fb6	                    BNE loop
.196fbf		28		plp		                    PLP
.196fc0		60		rts		                    RTS
.196fc1						ANSI_CUB
.196fc1		08		php		                    PHP
.196fc2		e2 20		sep #$20	                SEP #$20        ; set A short
.196fc4		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fc6		1a		inc a		                    INC A
.196fc7		48		pha		loop                PHA                             ; Save the count
.196fc8		22 a3 72 19	jsl $1972a3	                    JSL ANSI_CSRLEFT                ; Cursor left
.196fcc		68		pla		                    PLA                             ; Restore the count
.196fcd		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fce		d0 f7		bne $196fc7	                    BNE loop
.196fd0		28		plp		                    PLP
.196fd1		60		rts		                    RTS
.196fd2						ANSI_CUP
.196fd2		08		php		                    PHP
.196fd3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196fd5		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fd7		d0 02		bne $196fdb	                    BNE get_row
.196fd9		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.196fdb		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.196fdd		d0 02		bne $196fe1	                    BNE adjust_coords
.196fdf		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.196fe1		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.196fe2		88		dey		                    DEY
.196fe3		c2 30		rep #$30	                REP #$30        ; set A&X long
.196fe5		22 02 73 19	jsl $197302	                    JSL ANSI_LOCATE                 ; Set the cursor position
.196fe9		28		plp		                    PLP
.196fea		60		rts		                    RTS
.196feb						ANSI_SET_MODE
.196feb		08		php		                    PHP
.196fec		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196fee		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196ff0		c9 19		cmp #$19	                    CMP #25
.196ff2		d0 24		bne $197018	                    BNE chk_break
.196ff4		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.196ff8		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.196ffa		d0 0c		bne $197008	                    BNE check_evid
.196ffc		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.197000		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.197002		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.197006		80 1e		bra $197026	                    BRA done
.197008		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.19700a		d0 1a		bne $197026	                    BNE done
.19700c		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.197010		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.197012		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.197016		80 0e		bra $197026	                    BRA done
.197018		c9 1c		cmp #$1c	chk_break           CMP #28
.19701a		d0 0a		bne $197026	                    BNE done
.19701c		22 b8 77 19	jsl $1977b8	                    JSL KBD_GET_CONTROL
.197020		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.197022		22 cb 77 19	jsl $1977cb	                    JSL KBD_SET_CONTROL
.197026		28		plp		done                PLP
.197027		60		rts		                    RTS
.197028						ANSI_RESET_MODE
.197028		08		php		                    PHP
.197029		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19702b		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19702d		c9 19		cmp #$19	                    CMP #25
.19702f		d0 24		bne $197055	                    BNE chk_break
.197031		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.197035		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.197037		d0 0c		bne $197045	                    BNE check_evid
.197039		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.19703d		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.19703f		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.197043		80 1e		bra $197063	                    BRA done
.197045		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.197047		d0 1a		bne $197063	                    BNE done
.197049		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.19704d		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.19704f		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.197053		80 0e		bra $197063	                    BRA done
.197055		c9 1c		cmp #$1c	chk_break           CMP #28
.197057		d0 0a		bne $197063	                    BNE done
.197059		22 b8 77 19	jsl $1977b8	                    JSL KBD_GET_CONTROL
.19705d		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.19705f		22 cb 77 19	jsl $1977cb	                    JSL KBD_SET_CONTROL
.197063		28		plp		done                PLP
.197064		60		rts		                    RTS
.197065						ANSI_SGR
.197065		08		php		                    PHP
.197066		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197068		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19706a		d0 0d		bne $197079	                    BNE chk_1
.19706c		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.19706e		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197070		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.197072		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.197074		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.197076		82 d6 00	brl $19714f	                    BRL done
.197079		c9 01		cmp #$01	chk_1               CMP #1
.19707b		d0 0f		bne $19708c	                    BNE chk_2
.19707d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.19707f		09 80		ora #$80	                    ORA #$80
.197081		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197083		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.197085		09 40		ora #$40	                    ORA #CONTROL_BOLD
.197087		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.197089		82 c3 00	brl $19714f	                    BRL done
.19708c		c9 02		cmp #$02	chk_2               CMP #2
.19708e		f0 04		beq $197094	                    BEQ normal_intensity
.197090		c9 16		cmp #$16	chk_22              CMP #22
.197092		d0 0f		bne $1970a3	                    BNE chk_7
.197094		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.197096		29 7f		and #$7f	                    AND #~$80
.197098		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19709a		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.19709c		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.19709e		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970a0		82 ac 00	brl $19714f	                    BRL done
.1970a3		c9 07		cmp #$07	chk_7               CMP #7
.1970a5		d0 2c		bne $1970d3	                    BNE chk_27
.1970a7		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.1970a9		89 80		bit #$80	                    BIT #CONTROL_INVERT
.1970ab		f0 03		beq $1970b0	                    BEQ invert_on
.1970ad		82 9f 00	brl $19714f	                    BRL done                        ; Yes: just finish
.1970b0		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.1970b2		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970b4		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.1970b6		0a		asl a		                    ASL  A
.1970b7		69 80		adc #$80	                    ADC  #$80
.1970b9		2a		rol a		                    ROL  A
.1970ba		0a		asl a		                    ASL  A
.1970bb		69 80		adc #$80	                    ADC  #$80
.1970bd		2a		rol a		                    ROL  A
.1970be		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.1970c0		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970c2		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.1970c4		89 40		bit #$40	                    BIT #CONTROL_BOLD
.1970c6		d0 03		bne $1970cb	                    BNE bold_on
.1970c8		82 84 00	brl $19714f	                    BRL done                        ; No: we're done
.1970cb		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.1970cd		09 80		ora #$80	                    ORA #$80
.1970cf		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970d1		80 7c		bra $19714f	                    BRA done
.1970d3		c9 1b		cmp #$1b	chk_27              CMP #27
.1970d5		d0 0c		bne $1970e3	                    BNE chk_39
.1970d7		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.1970d9		89 80		bit #$80	                    BIT #CONTROL_INVERT
.1970db		f0 72		beq $19714f	                    BEQ done                        ; No: just finish
.1970dd		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.1970df		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970e1		80 d1		bra $1970b4	                    BRA swap_colors                 ; And go swap the colors
.1970e3		c9 27		cmp #$27	chk_39              CMP #39
.1970e5		d0 10		bne $1970f7	                    BNE chk_49
.1970e7		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1970e9		29 0f		and #$0f	                    AND #$0F
.1970eb		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970ed		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.1970ef		29 f0		and #$f0	                    AND #$F0
.1970f1		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.1970f3		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970f5		80 58		bra $19714f	                    BRA done
.1970f7		c9 31		cmp #$31	chk_49              CMP #49
.1970f9		d0 10		bne $19710b	                    BNE chk_foreground
.1970fb		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1970fd		29 f0		and #$f0	                    AND #$F0
.1970ff		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197101		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197103		29 0f		and #$0f	                    AND #$0F
.197105		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.197107		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197109		80 44		bra $19714f	                    BRA done
.19710b		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.19710d		90 29		bcc $197138	                    BLT chk_background
.19710f		c9 26		cmp #$26	                    CMP #38
.197111		b0 25		bcs $197138	                    BGE chk_background
.197113		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197115		29 0f		and #$0f	                    AND #$0F
.197117		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197119		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.19711b		38		sec		                    SEC
.19711c		e9 1e		sbc #$1e	                    SBC #30
.19711e		0a		asl a		                    ASL A
.19711f		0a		asl a		                    ASL A
.197120		0a		asl a		                    ASL A
.197121		0a		asl a		                    ASL A
.197122		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.197124		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197126		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.197128		89 40		bit #$40	                    BIT #CONTROL_BOLD
.19712a		d0 03		bne $19712f	                    BNE bold_fore                   ; No: we're done
.19712c		82 20 00	brl $19714f	                    BRL done
.19712f		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.197131		09 80		ora #$80	                    ORA #$80
.197133		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197135		82 17 00	brl $19714f	                    BRL done
.197138		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.19713a		90 13		bcc $19714f	                    BLT done
.19713c		c9 30		cmp #$30	                    CMP #48
.19713e		b0 0f		bcs $19714f	                    BGE done
.197140		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197142		29 f0		and #$f0	                    AND #$F0
.197144		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197146		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.197148		38		sec		                    SEC
.197149		e9 28		sbc #$28	                    SBC #40
.19714b		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.19714d		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19714f		28		plp		done                PLP
.197150		60		rts		                    RTS
.197151						ANSI_ED
.197151		5a		phy		                    PHY
.197152		08		php		                    PHP
.197153		e2 20		sep #$20	                SEP #$20        ; set A short
.197155		c2 10		rep #$10	                REP #$10        ; set X long
.197157		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.197159		d0 0f		bne $19716a	                    BNE not_0                       ; Is the code 0?
.19715b						code_0
.19715b		a9 20		lda #$20	                    LDA #' '
.19715d		a4 17		ldy $0337	                    LDY #CURSORPOS,D                ; Start with the cursor's position
.19715f		97 0c		sta [$032c],y	code_0_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.197161		c8		iny		                    INY                             ; Go to the next position
.197162		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.197165		d0 f8		bne $19715f	                    BNE code_0_loop                 ; No: keep going
.197167		82 27 00	brl $197191	                    BRL done
.19716a		c9 01		cmp #$01	not_0               CMP #1                          ; Is the code 1?
.19716c		d0 0e		bne $19717c	                    BNE not_1
.19716e						code_1
.19716e		a9 20		lda #$20	                    LDA #' '
.197170		a4 17		ldy $0337	                    LDY #CURSORPOS,D                ; Start with the cursor's position
.197172		97 0c		sta [$032c],y	code_1_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.197174		88		dey		                    DEY                             ; Go to the previous position
.197175		d0 fb		bne $197172	                    BNE code_1_loop
.197177		97 0c		sta [$032c],y	                    STA [#SCREENBEGIN,D],Y          ; Clear the first cell
.197179		82 15 00	brl $197191	                    BRL done
.19717c		c9 02		cmp #$02	not_1               CMP #2                          ; Is the code 2 or 3?
.19717e		f0 04		beq $197184	                    BEQ code_2_3
.197180		c9 03		cmp #$03	                    CMP #3
.197182		d0 0d		bne $197191	                    BNE done                        ; No: just ignore the sequence
.197184						code_2_3
.197184		a9 20		lda #$20	                    LDA #' '
.197186		a0 00 00	ldy #$0000	                    LDY #0                          ; Start with the cursor's position
.197189		97 0c		sta [$032c],y	code_2_3_loop       STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.19718b		c8		iny		                    INY                             ; Go to the next position
.19718c		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.19718f		d0 ce		bne $19715f	                    BNE code_0_loop                 ; No: keep going
.197191		28		plp		done                PLP
.197192		7a		ply		                    PLY
.197193		60		rts		                    RTS
.197194						ANSI_EL
.197194		da		phx		                    PHX
.197195		5a		phy		                    PHY
.197196		08		php		                    PHP
.197197		c2 30		rep #$30	                REP #$30        ; set A&X long
.197199		38		sec		                    SEC
.19719a		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.19719c		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.19719e		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1971a0		e2 20		sep #$20	                SEP #$20        ; set A short
.1971a2		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.1971a4		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.1971a6		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.1971a8		d0 0e		bne $1971b8	                    BNE not_0                           ; Is the code 0?
.1971aa						code_0
.1971aa		a9 20		lda #$20	                    LDA #' '
.1971ac		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.1971ae		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1971b0		c8		iny		                    INY
.1971b1		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.1971b3		d0 f9		bne $1971ae	                    BNE code_0_loop                     ; No: keep looping
.1971b5		82 29 00	brl $1971e1	                    BRL done
.1971b8		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.1971ba		d0 11		bne $1971cd	                    BNE not_1
.1971bc						code_1
.1971bc		a9 20		lda #$20	                    LDA #' '
.1971be		a0 00 00	ldy #$0000	                    LDY #0
.1971c1		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1971c3		c8		iny		                    INY
.1971c4		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.1971c6		d0 f9		bne $1971c1	                    BNE code_1_loop                     ; No: keep looping
.1971c8		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.1971ca		82 14 00	brl $1971e1	                    BRL done
.1971cd		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.1971cf		f0 04		beq $1971d5	                    BEQ code_2_3
.1971d1		c9 03		cmp #$03	                    CMP #3
.1971d3		d0 0c		bne $1971e1	                    BNE done                            ; No: just ignore the sequence
.1971d5						code_2_3
.1971d5		a9 20		lda #$20	                    LDA #' '
.1971d7		a0 00 00	ldy #$0000	                    LDY #0
.1971da		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1971dc		c8		iny		                    INY
.1971dd		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.1971df		d0 f9		bne $1971da	                    BNE code_2_3_loop                   ; No: keep looping
.1971e1		28		plp		done                PLP
.1971e2		7a		ply		                    PLY
.1971e3		fa		plx		                    PLX
.1971e4		60		rts		                    RTS
.1971e5						ANSI_ICH
.1971e5		5a		phy		                    PHY
.1971e6		08		php		                    PHP
.1971e7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1971e9		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.1971eb		f0 04		beq $1971f1	                    BEQ default_1                       ; If 0, default to 1
.1971ed		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.1971ef		d0 04		bne $1971f5	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.1971f1		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.1971f3		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.1971f5		38		sec		calc_src_dest       SEC
.1971f6		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.1971f8		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.1971fa		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1971fc		38		sec		                    SEC
.1971fd		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.1971ff		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.197201		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.197203		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.197205		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.197207		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197209		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.19720b		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.19720d		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.19720f		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.197211		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.197213		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.197215		10 ea		bpl $197201	                    BPL insert_loop                     ; Keep looping until we reach the end
.197217		a0 00		ldy #$00	                    LDY #0
.197219		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.19721b		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.19721d		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19721f		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.197221		c8		iny		                    INY                                 ; Move to the next byte
.197222		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.197224		d0 f3		bne $197219	                    BNE fill_loop
.197226		28		plp		                    PLP
.197227		7a		ply		                    PLY
.197228		60		rts		                    RTS
.197229						ANSI_DCH
.197229		5a		phy		                    PHY
.19722a		08		php		                    PHP
.19722b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19722d		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.19722f		f0 04		beq $197235	                    BEQ default_1                       ; If 0, default to 1
.197231		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.197233		d0 04		bne $197239	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.197235		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.197237		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.197239		a9 00		lda #$00	calc_src_dest       LDA #0
.19723b		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.19723d		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.19723f		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.197241		38		sec		                    SEC                                 ; Calculate end offset
.197242		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.197244		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.197246		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.197248		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.19724a		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.19724c		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.19724e		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197250		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.197252		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.197254		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.197256		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.197258		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.19725a		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.19725c		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.19725e		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.197260		90 e6		bcc $197248	                    BLT del_loop                        ; Keep looping until we reach the end
.197262		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.197263		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.197265		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.197267		a8		tay		                    TAY
.197268		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.19726a		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.19726c		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.19726e		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.197270		c8		iny		                    INY                                 ; Move to the next byte
.197271		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.197273		90 f3		bcc $197268	                    BLT fill_loop
.197275		28		plp		                    PLP
.197276		7a		ply		                    PLY
.197277		60		rts		                    RTS
.197278						ANSI_CSRRIGHT
.197278		da		phx		                    PHX
.197279		5a		phy		                    PHY
.19727a		0b		phd		                    PHD
.19727b		08		php		                    PHP
.19727c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19727e		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.197282		b0 1a		bcs $19729e	                    BCS done                            ; If invalid, just return
.197284		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.197286		e8		inx		                    INX
.197287		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.197289		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.19728b		90 0d		bcc $19729a	                    BCC nowrap                          ; No: just set the position
.19728d		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.197290		c8		iny		                    INY                                 ; And move to the next row
.197291		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.197293		90 05		bcc $19729a	                    BCC nowrap                          ; No: just set the position
.197295		88		dey		                    DEY                                 ; Yes: lock to the last row
.197296		22 66 73 19	jsl $197366	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.19729a		22 02 73 19	jsl $197302	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.19729e		28		plp		done                PLP
.19729f		2b		pld		                    PLD
.1972a0		7a		ply		                    PLY
.1972a1		fa		plx		                    PLX
.1972a2		6b		rtl		                    RTL
.1972a3						ANSI_CSRLEFT
.1972a3		da		phx		                    PHX
.1972a4		5a		phy		                    PHY
.1972a5		0b		phd		                    PHD
.1972a6		08		php		                    PHP
.1972a7		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972a9		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1972ad		b0 0d		bcs $1972bc	                    BCS done                    ; If invalid, just return
.1972af		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.1972b1		f0 09		beq $1972bc	                    BEQ done                    ; If so, just ignore this call
.1972b3		ca		dex		                    DEX
.1972b4		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.1972b6		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.1972b8		22 02 73 19	jsl $197302	                    JSL ANSI_LOCATE
.1972bc		28		plp		done                PLP
.1972bd		2b		pld		                    PLD
.1972be		7a		ply		                    PLY
.1972bf		fa		plx		                    PLX
.1972c0		6b		rtl		                    RTL
.1972c1						ANSI_CSRUP
.1972c1		da		phx		                    PHX
.1972c2		5a		phy		                    PHY
.1972c3		0b		phd		                    PHD
.1972c4		08		php		                    PHP
.1972c5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972c7		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1972cb		b0 0d		bcs $1972da	                    BCS done                    ; If invalid, just return
.1972cd		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.1972cf		f0 09		beq $1972da	                    BEQ done                    ; If we are, just ignore the call
.1972d1		88		dey		                    DEY
.1972d2		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.1972d4		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.1972d6		22 02 73 19	jsl $197302	                    JSL ANSI_LOCATE
.1972da		28		plp		done                PLP
.1972db		2b		pld		                    PLD
.1972dc		7a		ply		                    PLY
.1972dd		fa		plx		                    PLX
.1972de		6b		rtl		                    RTL
.1972df						ANSI_CSRDOWN
.1972df		da		phx		                    PHX
.1972e0		5a		phy		                    PHY
.1972e1		0b		phd		                    PHD
.1972e2		08		php		                    PHP
.1972e3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972e5		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.1972e9		b0 12		bcs $1972fd	                    BCS done                            ; If invalid, just return
.1972eb		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.1972ed		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.1972ef		c8		iny		                    INY
.1972f0		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.1972f2		90 05		bcc $1972f9	                    BCC noscroll                        ; No: go ahead and set the position
.1972f4		88		dey		                    DEY                                 ; Yes: go back to the last row
.1972f5		22 66 73 19	jsl $197366	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.1972f9		22 02 73 19	jsl $197302	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.1972fd		28		plp		done                PLP
.1972fe		2b		pld		                    PLD
.1972ff		7a		ply		                    PLY
.197300		fa		plx		                    PLX
.197301		6b		rtl		                    RTL
.197302						ANSI_LOCATE
.197302		da		phx		                    PHX
.197303		5a		phy		                    PHY
.197304		0b		phd		                    PHD
.197305		08		php		                    PHP
.197306		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.19730a		b0 55		bcs $197361	                    BCS done                    ; If invalid, just return
.19730c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19730e						locate_scroll
.19730e		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.197310		90 07		bcc $197319	                    BCC locate_scrolldone
.197312		22 66 73 19	jsl $197366	                    JSL ANSI_SCROLLUP
.197316		88		dey		                    DEY
.197317		80 f5		bra $19730e	                    BRA locate_scroll
.197319						locate_scrolldone
.197319		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.19731b		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.19731d		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.19731f						locate_row
.19731f		c0 00 00	cpy #$0000	                    CPY #$0
.197322		f0 08		beq $19732c	                    BEQ locate_right
.197324		18		clc		locate_down         CLC
.197325		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.197327		88		dey		                    DEY
.197328		f0 02		beq $19732c	                    BEQ locate_right
.19732a		80 f8		bra $197324	                    BRA locate_down
.19732c		18		clc		locate_right        CLC
.19732d		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.19732f		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.197331		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.197333		e2 20		sep #$20	                SEP #$20        ; set A short
.197335		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.197339		c9 04		cmp #$04	                    CMP #CHAN_EVID
.19733b		f0 0e		beq $19734b	                    beq locate_evid
.19733d		c2 20		rep #$20	                REP #$20        ; set A long
.19733f		98		tya		                    TYA
.197340		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.197344		8a		txa		                    TXA
.197345		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.197349		80 0c		bra $197357	                    BRA update_colorpos
.19734b						locate_evid
.19734b		c2 20		rep #$20	                REP #$20        ; set A long
.19734d		98		tya		                    TYA
.19734e		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.197352		8a		txa		                    TXA
.197353		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.197357						update_colorpos
.197357		c2 20		rep #$20	                REP #$20        ; set A long
.197359		18		clc		                    CLC
.19735a		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.19735c		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.19735f		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.197361		28		plp		done                PLP
.197362		2b		pld		                    PLD
.197363		7a		ply		                    PLY
.197364		fa		plx		                    PLX
.197365		6b		rtl		                    RTL
.197366						ANSI_SCROLLUP
.197366		da		phx		                    PHX
.197367		5a		phy		                    PHY
.197368		8b		phb		                    PHB
.197369		0b		phd		                    PHD
.19736a		08		php		                    PHP
.19736b		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.19736f		90 03		bcc $197374	                    BCC calc_size
.197371		82 81 00	brl $1973f5	                    BRL done                    ; If invalid, just return
.197374						calc_size
.197374		c2 30		rep #$30	                REP #$30        ; set A&X long
.197376		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.197378		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.19737c		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.19737e		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.197382		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.197386		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.197388		18		clc		                    CLC
.197389		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.19738b		a8		tay		                    TAY
.19738c		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.19738e		aa		tax		                    TAX
.19738f		e2 20		sep #$20	                SEP #$20        ; set A short
.197391		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.197395		c9 04		cmp #$04	                    CMP #CHAN_EVID
.197397		f0 09		beq $1973a2	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.197399						move_text_0
.197399		c2 20		rep #$20	                REP #$20        ; set A long
.19739b		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.19739d		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.1973a0		80 07		bra $1973a9	                    BRA scroll_color
.1973a2						move_text_1
.1973a2		c2 20		rep #$20	                REP #$20        ; set A long
.1973a4		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973a6		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.1973a9						scroll_color
.1973a9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1973ab		18		clc		                    CLC
.1973ac		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.1973ae		a8		tay		                    TAY
.1973af		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.1973b1		aa		tax		                    TAX
.1973b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1973b4		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.1973b8		c9 04		cmp #$04	                    CMP #CHAN_EVID
.1973ba		f0 09		beq $1973c5	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.1973bc						move_color_0
.1973bc		c2 20		rep #$20	                REP #$20        ; set A long
.1973be		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973c0		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.1973c3		80 07		bra $1973cc	                    BRA vicky_lastline
.1973c5						move_color_1
.1973c5		c2 20		rep #$20	                REP #$20        ; set A long
.1973c7		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973c9		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.1973cc						vicky_lastline
.1973cc		c2 20		rep #$20	                REP #$20        ; set A long
.1973ce		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973d0		48		pha		                    PHA
.1973d1		18		clc		                    CLC
.1973d2		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.1973d4		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1973d6		a0 00 00	ldy #$0000	start_clear         LDY #0
.1973d9		a9 20 00	lda #$0020	                    LDA #' '
.1973dc		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.1973de		c8		iny		                    INY
.1973df		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.1973e1		d0 f9		bne $1973dc	                    BNE clr_text
.1973e3		68		pla		vicky_lastcolor     PLA
.1973e4		18		clc		                    CLC
.1973e5		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.1973e7		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1973e9		a0 00 00	ldy #$0000	start_color         LDY #0
.1973ec		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1973ee		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.1973f0		c8		iny		                    INY
.1973f1		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.1973f3		d0 f9		bne $1973ee	                    BNE clr_color
.1973f5		28		plp		done                PLP
.1973f6		2b		pld		                    PLD
.1973f7		ab		plb		                    PLB
.1973f8		7a		ply		                    PLY
.1973f9		fa		plx		                    PLX
.1973fa		6b		rtl		                    RTL
.1973fb						ANSI_CLRSCREEN
.1973fb		da		phx		                    PHX
.1973fc		5a		phy		                    PHY
.1973fd		0b		phd		                    PHD
.1973fe		08		php		                    PHP
.1973ff		22 b7 6d 19	jsl $196db7	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.197403		b0 1e		bcs $197423	                    BCS done                            ; If invalid, just return
.197405		e2 20		sep #$20	                SEP #$20        ; set A short
.197407		c2 10		rep #$10	                REP #$10        ; set X long
.197409		a0 00 00	ldy #$0000	                    LDY #0
.19740c		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.19740e		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.197410		c8		iny		                    INY
.197411		c0 00 20	cpy #$2000	                    CPY #$2000
.197414		d0 f8		bne $19740e	                    BNE iclearloop0
.197416		a0 00 00	ldy #$0000	                    LDY	#0
.197419		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.19741b		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.19741d		c8		iny		                    INY
.19741e		c0 00 20	cpy #$2000	                    CPY #$2000
.197421		d0 f8		bne $19741b	                    BNE evid_clearloop1
.197423		28		plp		done                PLP
.197424		2b		pld		                    PLD
.197425		7a		ply		                    PLY
.197426		fa		plx		                    PLX
.197427		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keybaord has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keybaord controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keybaord controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keybaord controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keybaord controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.197428						IINITKEYBOARD
.197428		da		phx		                    PHX
.197429		5a		phy		                    PHY
.19742a		0b		phd		                    PHD
.19742b		08		php		                    PHP
.19742c		48		pha		                PHA             ; begin setdp macro
.19742d		08		php		                PHP
.19742e		c2 20		rep #$20	                REP #$20        ; set A long
.197430		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197433		5b		tcd		                TCD
.197434		28		plp		                PLP
.197435		68		pla		                PLA             ; end setdp macro
.197436		e2 20		sep #$20	                SEP #$20        ; set A short
.197438		c2 10		rep #$10	                REP #$10        ; set X long
.19743a		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.19743e		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.197440		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.197444		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.197446		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.197448		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.19744a		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.19744c		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.19744e		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.197450		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.197452		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.197454		c2 20		rep #$20	                REP #$20        ; set A long
.197456		a9 00 7c	lda #$7c00	                    LDA #<>SC_US_UNMOD
.197459		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.19745b		a9 80 7c	lda #$7c80	                    LDA #<>SC_US_SHFT
.19745e		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.197460		a9 00 7d	lda #$7d00	                    LDA #<>SC_US_CTRL
.197463		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.197465		a9 80 7d	lda #$7d80	                    LDA #<>SC_US_LOCK
.197468		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.19746a		a9 00 7e	lda #$7e00	                    LDA #<>SC_US_LOCK_SHFT
.19746d		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.19746f		a9 80 7e	lda #$7e80	                    LDA #<>SC_US_CTRL_SHFT
.197472		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.197474		e2 20		sep #$20	                SEP #$20        ; set A short
.197476		a9 19		lda #$19	                    LDA #`SC_US_UNMOD
.197478		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.19747a		a9 19		lda #$19	                    LDA #`SC_US_SHFT
.19747c		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.19747e		a9 19		lda #$19	                    LDA #`SC_US_CTRL
.197480		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.197482		a9 19		lda #$19	                    LDA #`SC_US_LOCK
.197484		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.197486		a9 19		lda #$19	                    LDA #`SC_US_LOCK_SHFT
.197488		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.19748a		a9 19		lda #$19	                    LDA #`SC_US_CTRL_SHFT
.19748c		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.19748e		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.197490		22 19 75 19	jsl $197519	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.197494		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.197498		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.19749c		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.19749e		22 24 75 19	jsl $197524	                    JSL KBD_CTRL_SND_CMD
.1974a2		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.1974a4		f0 05		beq $1974ab	                    BEQ test_AB
.1974a6		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.1974a8		82 5e 00	brl $197509	                    BRL done
.1974ab		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.1974ad		22 24 75 19	jsl $197524	                    JSL KBD_CTRL_SND_CMD
.1974b1		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.1974b3		f0 05		beq $1974ba	                    BEQ write_command
.1974b5		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.1974b7		82 4f 00	brl $197509	                    BRL done
.1974ba		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.1974bc		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.1974bf		22 7e 75 19	jsl $19757e	                    JSL KBD_CTRL_SND_CMD_P
.1974c3		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.1974c5		22 19 75 19	jsl $197519	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.1974c9		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1974cd		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.1974cf		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.1974d2		22 35 75 19	jsl $197535	                    JSL KBD_SND_CMD
.1974d6		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.1974d9		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.1974db		a2 00 00	ldx #$0000	                    LDX #0
.1974de		22 35 75 19	jsl $197535	                    JSL KBD_SND_CMD
.1974e2		c9 fa		cmp #$fa	                    CMP #KBD_RESP_ACK           ; Did the keyboard acknowledge the command?
.1974e4		f0 07		beq $1974ed	                    BEQ set_led                 ; Yes: try to set the LEDs
.1974e6		88		dey		                    DEY                         ; No: try again... counting down
.1974e7		d0 f0		bne $1974d9	                    BNE enable_loop             ; If we are out of attempts...
.1974e9		a9 05		lda #$05	                    LDA #5                      ; Return error #5
.1974eb		80 1c		bra $197509	                    BRA done
.1974ed		a9 00		lda #$00	set_led             LDA #0                      ; Set the state of the locks
.1974ef		22 a5 77 19	jsl $1977a5	                    JSL KBD_SETLOCKS
.1974f3		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.1974f7		29 01		and #$01	                    AND #FNX1_INT00_KBD
.1974f9		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.1974fd		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.197501		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.197503		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.197507		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.197509		28		plp		done                PLP
.19750a		2b		pld		                    PLD
.19750b		7a		ply		                    PLY
.19750c		fa		plx		                    PLX
.19750d		6b		rtl		                    RTL
.19750e						KBD_WAIT_OUT
.19750e		48		pha		                    PHA
.19750f		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.197513		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.197515		f0 f8		beq $19750f	                    BEQ wait                ; If it isn't, keep waiting
.197517		68		pla		                    PLA
.197518		6b		rtl		                    RTL
.197519						KBD_WAIT_IN
.197519		48		pha		                    PHA
.19751a		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.19751e		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.197520		d0 f8		bne $19751a	                    BNE wait                ; If not, wait for it to have something
.197522		68		pla		                    PLA
.197523		6b		rtl		                    RTL
.197524						KBD_CTRL_SND_CMD
.197524		22 19 75 19	jsl $197519	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.197528		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.19752c		22 0e 75 19	jsl $19750e	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.197530		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.197534		6b		rtl		                    RTL
.197535						KBD_SND_CMD
.197535		22 19 75 19	jsl $197519	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.197539		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.19753d		c2 10		rep #$10	                REP #$10        ; set X long
.19753f		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.197542		f0 0b		beq $19754f	                    BEQ get_response        ; If 0, check for a response
.197544		ca		dex		                    DEX                     ; Count down
.197545		ea		nop		                    NOP                     ; And do a delay
.197546		ea		nop		                    NOP
.197547		ea		nop		                    NOP
.197548		ea		nop		                    NOP
.197549		ea		nop		                    NOP
.19754a		ea		nop		                    NOP
.19754b		ea		nop		                    NOP
.19754c		ea		nop		                    NOP
.19754d		80 f0		bra $19753f	                    BRA delay
.19754f		22 0e 75 19	jsl $19750e	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.197553		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.197557		6b		rtl		                    RTL
.197558						KBD_SND_CMD_P
.197558		22 19 75 19	jsl $197519	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.19755c		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197560		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.197561		c2 10		rep #$10	                REP #$10        ; set X long
.197563		a2 e8 03	ldx #$03e8	                    LDX #1000
.197566		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.197569		f0 0a		beq $197575	                    BEQ send_data           ; If 0, check for a response
.19756b		ca		dex		                    DEX                     ; Count down
.19756c		ea		nop		                    NOP                     ; And do a delay
.19756d		ea		nop		                    NOP
.19756e		ea		nop		                    NOP
.19756f		ea		nop		                    NOP
.197570		ea		nop		                    NOP
.197571		ea		nop		                    NOP
.197572		ea		nop		                    NOP
.197573		80 f1		bra $197566	                    BRA delay
.197575		22 19 75 19	jsl $197519	send_data           JSL KBD_WAIT_IN
.197579		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.19757d						get_response
.19757d		6b		rtl		                    RTL
.19757e						KBD_CTRL_SND_CMD_P
.19757e		22 19 75 19	jsl $197519	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.197582		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.197586		8a		txa		                    TXA
.197587		22 19 75 19	jsl $197519	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.19758b		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.19758f		6b		rtl		                    RTL
.197590						KBD_PROCESS_BYTE
.197590		8b		phb		                    PHB
.197591		0b		phd		                    PHD
.197592		08		php		                    PHP
.197593		48		pha		                PHA             ; begin setdbr macro
.197594		08		php		                PHP
.197595		e2 20		sep #$20	                SEP #$20        ; set A short
.197597		a9 19		lda #$19	                LDA #`KBD_STATE_MACH
.197599		48		pha		                PHA
.19759a		ab		plb		                PLB
.19759b		28		plp		                PLP
.19759c		68		pla		                PLA             ; end setdbr macro
.19759d		48		pha		                PHA             ; begin setdp macro
.19759e		08		php		                PHP
.19759f		c2 20		rep #$20	                REP #$20        ; set A long
.1975a1		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1975a4		5b		tcd		                TCD
.1975a5		28		plp		                PLP
.1975a6		68		pla		                PLA             ; end setdp macro
.1975a7		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1975a9		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.1975ad		d0 03		bne $1975b2	                    BNE save_scancode
.1975af		82 67 00	brl $197619	                    BRL done                            ; If it's 0, just ignore it
.1975b2						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.1975b2		48		pha		save_scancode       PHA
.1975b3		48		pha		                    PHA
.1975b4		29 80		and #$80	                    AND #$80
.1975b6		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.1975b8		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.1975ba		bf 00 7b 19	lda $197b00,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.1975be		c9 ff		cmp #$ff	                    CMP #$FF
.1975c0		d0 03		bne $1975c5	                    BNE compare_state
.1975c2		82 54 00	brl $197619	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.1975c5		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.1975c7		d0 0e		bne $1975d7	                    BNE next_transition                 ; If they don't match, go to the next transition
.1975c9		bf 01 7b 19	lda $197b01,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.1975cd		f0 0e		beq $1975dd	                    BEQ apply                           ; Is it 0? Yes: the default applies
.1975cf		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.1975d1		df 01 7b 19	cmp $197b01,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.1975d5		f0 06		beq $1975dd	                    BEQ apply                           ; If equal: this matches, apply the transition
.1975d7		e8		inx		next_transition     INX                                 ; Move to the next transition
.1975d8		e8		inx		                    INX
.1975d9		e8		inx		                    INX
.1975da		e8		inx		                    INX
.1975db		80 dd		bra $1975ba	                    BRA chk_transition                  ; Check to see if the next transition applies
.1975dd		bf 02 7b 19	lda $197b02,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.1975e1		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.1975e3		bf 03 7b 19	lda $197b03,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.1975e7		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.1975e9		f0 2e		beq $197619	                    BEQ done                            ; Yes: we're done for now
.1975eb		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.1975ed		f0 06		beq $1975f5	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.1975ef		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.1975f1		f0 0f		beq $197602	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.1975f3		80 18		bra $19760d	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.1975f5		a3 02		lda $02,s	emit_base           LDA l_code
.1975f7		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.1975f9		aa		tax		                    TAX
.1975fa		bf 00 7a 19	lda $197a00,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.1975fe		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.197600		80 0b		bra $19760d	                    BRA emit_A                          ; Emit the translation
.197602		a3 02		lda $02,s	emit_e0             LDA l_code
.197604		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.197606		aa		tax		                    TAX
.197607		bf 80 7a 19	lda $197a80,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.19760b		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.19760d		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.19760f		f0 08		beq $197619	                    BEQ done                            ; If so, skip enqueuing it
.197611		22 21 76 19	jsl $197621	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.197615		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.197617		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.197619						done
.197619		e2 20		sep #$20	                SEP #$20        ; set A short
.19761b		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.19761c		68		pla		                    PLA
.19761d		28		plp		                    PLP
.19761e		2b		pld		                    PLD
.19761f		ab		plb		                    PLB
.197620		6b		rtl		                    RTL
.197621						KBD_SC_ENQUEUE
.197621		0b		phd		                    PHD
.197622		08		php		                    PHP
.197623		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.197624		48		pha		                PHA             ; begin setdp macro
.197625		08		php		                PHP
.197626		c2 20		rep #$20	                REP #$20        ; set A long
.197628		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19762b		5b		tcd		                TCD
.19762c		28		plp		                PLP
.19762d		68		pla		                PLA             ; end setdp macro
.19762e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197630		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.197632		f0 2f		beq $197663	                    BEQ done                        ; Yes: just ignore
.197634		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.197636		d0 10		bne $197648	                    BNE chk_locks                   ; No: check the various lock keys
.197638		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.19763a		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.19763c		f0 08		beq $197646	                    BEQ enqueue_break                   ; No: enqueue it as normal
.19763e		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.197640		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.197642		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.197644		80 1d		bra $197663	                    BRA done                            ; And we're done
.197646		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.197648		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.19764a		f0 1a		beq $197666	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.19764c		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.19764e		f0 20		beq $197670	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.197650		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.197652		f0 22		beq $197676	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.197654		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.197656		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.197658		f0 09		beq $197663	                    BEQ done                        ; Yes: we're full... ignore the scancode
.19765a		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.19765c		e8		inx		                    INX                             ; Advance to the next location
.19765d		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.19765f		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.197661		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.197663		28		plp		done                PLP
.197664		2b		pld		                    PLD
.197665		6b		rtl		                    RTL
.197666		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.197668		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.19766a		22 a5 77 19	jsl $1977a5	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.19766e		80 f3		bra $197663	                    BRA done
.197670		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.197672		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.197674		80 f4		bra $19766a	                    BRA save_locks
.197676		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.197678		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.19767a		80 ee		bra $19766a	                    BRA save_locks
.19767c						KBD_CHAR_ENQUEUE
.19767c		0b		phd		                    PHD
.19767d		08		php		                    PHP
.19767e		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.19767f		48		pha		                PHA             ; begin setdp macro
.197680		08		php		                PHP
.197681		c2 20		rep #$20	                REP #$20        ; set A long
.197683		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197686		5b		tcd		                TCD
.197687		28		plp		                PLP
.197688		68		pla		                PLA             ; end setdp macro
.197689		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19768b		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.19768d		f0 0f		beq $19769e	                    BEQ done                        ; Yes: just ignore
.19768f		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.197691		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.197693		f0 09		beq $19769e	                    BEQ done                        ; Yes: we're full... ignore the scancode
.197695		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.197697		e8		inx		                    INX                             ; Advance to the next location
.197698		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.19769a		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.19769c		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.19769e		28		plp		done                PLP
.19769f		2b		pld		                    PLD
.1976a0		6b		rtl		                    RTL
.1976a1						KBD_CHAR_DEQUEUE
.1976a1		da		phx		                    PHX
.1976a2		0b		phd		                    PHD
.1976a3		08		php		                    PHP
.1976a4		48		pha		                PHA             ; begin setdp macro
.1976a5		08		php		                PHP
.1976a6		c2 20		rep #$20	                REP #$20        ; set A long
.1976a8		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976ab		5b		tcd		                TCD
.1976ac		28		plp		                PLP
.1976ad		68		pla		                PLA             ; end setdp macro
.1976ae		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.1976af		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1976b1		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.1976b3		f0 21		beq $1976d6	                    BEQ return_empty                    ; If it's 0, we have no data
.1976b5		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.1976b7		48		pha		                    PHA                                 ; Save it
.1976b8		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.1976ba		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.1976bc		d0 08		bne $1976c6	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.1976be		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.1976c0		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.1976c2		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.1976c4		80 0d		bra $1976d3	                    BRA return_head                     ; And return the character we found
.1976c6		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.1976c8		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.1976ca		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.1976cc		e8		inx		                    INX                                 ; And move to the next byte
.1976cd		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.1976cf		d0 f7		bne $1976c8	                    BNE loop                            ; No: keep copying bytes
.1976d1		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.1976d3		68		pla		return_head         PLA                                 ; Get the character back
.1976d4		80 02		bra $1976d8	                    BRA done                            ; And return it
.1976d6		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.1976d8		28		plp		done                PLP
.1976d9		2b		pld		                    PLD
.1976da		fa		plx		                    PLX
.1976db		6b		rtl		                    RTL
.1976dc						KBD_GET_SCANCODE
.1976dc		da		phx		                    PHX
.1976dd		0b		phd		                    PHD
.1976de		08		php		                    PHP
.1976df		48		pha		                PHA             ; begin setdp macro
.1976e0		08		php		                PHP
.1976e1		c2 20		rep #$20	                REP #$20        ; set A long
.1976e3		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976e6		5b		tcd		                TCD
.1976e7		28		plp		                PLP
.1976e8		68		pla		                PLA             ; end setdp macro
.1976e9		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.1976ea		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1976ec		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.1976ee		f0 21		beq $197711	                    BEQ return_empty                ; If it's 0, we have no data
.1976f0		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.1976f2		48		pha		                    PHA                             ; Save it
.1976f3		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.1976f5		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.1976f7		d0 08		bne $197701	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.1976f9		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.1976fb		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.1976fd		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.1976ff		80 0d		bra $19770e	                    BRA return_head                 ; And return the scan code we found
.197701		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.197703		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.197705		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.197707		e8		inx		                    INX                             ; And move to the next byte
.197708		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.19770a		d0 f7		bne $197703	                    BNE loop                        ; No: keep copying bytes
.19770c		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.19770e		68		pla		return_head         PLA                             ; Get the scan code back
.19770f		80 02		bra $197713	                    BRA done                        ; And return it
.197711		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.197713		28		plp		done                PLP
.197714		2b		pld		                    PLD
.197715		fa		plx		                    PLX
.197716		6b		rtl		                    RTL
.197717						KBD_GETMODS
.197717		0b		phd		                PHD
.197718		08		php		                PHP
.197719		48		pha		                PHA             ; begin setdp macro
.19771a		08		php		                PHP
.19771b		c2 20		rep #$20	                REP #$20        ; set A long
.19771d		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197720		5b		tcd		                TCD
.197721		28		plp		                PLP
.197722		68		pla		                PLA             ; end setdp macro
.197723		e2 20		sep #$20	                SEP #$20        ; set A short
.197725		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.197727		28		plp		                PLP
.197728		2b		pld		                PLD
.197729		6b		rtl		                RTL
.19772a						KBD_GET_STAT
.19772a		0b		phd		                PHD
.19772b		08		php		                PHP
.19772c		48		pha		                PHA             ; begin setdp macro
.19772d		08		php		                PHP
.19772e		c2 20		rep #$20	                REP #$20        ; set A long
.197730		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197733		5b		tcd		                TCD
.197734		28		plp		                PLP
.197735		68		pla		                PLA             ; end setdp macro
.197736		e2 20		sep #$20	                SEP #$20        ; set A short
.197738		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.19773a		28		plp		                PLP
.19773b		2b		pld		                PLD
.19773c		6b		rtl		                RTL
.19773d						KBD_TEST_BREAK
.19773d		0b		phd		                PHD
.19773e		08		php		                PHP
.19773f		48		pha		                PHA             ; begin setdp macro
.197740		08		php		                PHP
.197741		c2 20		rep #$20	                REP #$20        ; set A long
.197743		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197746		5b		tcd		                TCD
.197747		28		plp		                PLP
.197748		68		pla		                PLA             ; end setdp macro
.197749		e2 20		sep #$20	                SEP #$20        ; set A short
.19774b		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.19774d		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.19774f		d0 04		bne $197755	                BNE ret_true                    ; If it was set, return TRUE
.197751		28		plp		ret_false       PLP                             ; Otherwise, return false
.197752		2b		pld		                PLD
.197753		18		clc		                CLC
.197754		6b		rtl		                RTL
.197755		28		plp		ret_true        PLP
.197756		2b		pld		                PLD
.197757		38		sec		                SEC
.197758		6b		rtl		                RTL
.197759						KBD_GETMODS_ANSI
.197759		0b		phd		                    PHD
.19775a		08		php		                    PHP
.19775b		48		pha		                PHA             ; begin setdp macro
.19775c		08		php		                PHP
.19775d		c2 20		rep #$20	                REP #$20        ; set A long
.19775f		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197762		5b		tcd		                TCD
.197763		28		plp		                PLP
.197764		68		pla		                PLA             ; end setdp macro
.197765		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197767		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.197769		48		pha		                    PHA
>0001						l_result            .byte ?
.19776a		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.19776c		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.19776e		f0 06		beq $197776	                    BEQ check_alt
.197770		a3 01		lda $01,s	                    LDA l_result
.197772		09 02		ora #$02	                    ORA #%00000010
.197774		83 01		sta $01,s	                    STA l_result
.197776		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.197778		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.19777a		f0 06		beq $197782	                    BEQ check_ctrl
.19777c		a3 01		lda $01,s	                    LDA l_result
.19777e		09 04		ora #$04	                    ORA #%00000100
.197780		83 01		sta $01,s	                    STA l_result
.197782		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.197784		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.197786		f0 06		beq $19778e	                    BEQ return_result
.197788		a3 01		lda $01,s	                    LDA l_result
.19778a		09 08		ora #$08	                    ORA #%00001000
.19778c		83 01		sta $01,s	                    STA l_result
.19778e		68		pla		return_result       PLA
.19778f		28		plp		                    PLP
.197790		2b		pld		                    PLD
.197791		6b		rtl		                    RTL
.197792						KBD_GETLOCKS
.197792		0b		phd		                PHD
.197793		08		php		                PHP
.197794		48		pha		                PHA             ; begin setdp macro
.197795		08		php		                PHP
.197796		c2 20		rep #$20	                REP #$20        ; set A long
.197798		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19779b		5b		tcd		                TCD
.19779c		28		plp		                PLP
.19779d		68		pla		                PLA             ; end setdp macro
.19779e		e2 20		sep #$20	                SEP #$20        ; set A short
.1977a0		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.1977a2		28		plp		                PLP
.1977a3		2b		pld		                PLD
.1977a4		6b		rtl		                RTL
.1977a5						KBD_SETLOCKS
.1977a5		0b		phd		                PHD
.1977a6		08		php		                PHP
.1977a7		48		pha		                PHA             ; begin setdp macro
.1977a8		08		php		                PHP
.1977a9		c2 20		rep #$20	                REP #$20        ; set A long
.1977ab		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977ae		5b		tcd		                TCD
.1977af		28		plp		                PLP
.1977b0		68		pla		                PLA             ; end setdp macro
.1977b1		e2 20		sep #$20	                SEP #$20        ; set A short
.1977b3		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.1977b5		28		plp		                PLP
.1977b6		2b		pld		                PLD
.1977b7		6b		rtl		                RTL
.1977b8						KBD_GET_CONTROL
.1977b8		0b		phd		                PHD
.1977b9		08		php		                PHP
.1977ba		48		pha		                PHA             ; begin setdp macro
.1977bb		08		php		                PHP
.1977bc		c2 20		rep #$20	                REP #$20        ; set A long
.1977be		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977c1		5b		tcd		                TCD
.1977c2		28		plp		                PLP
.1977c3		68		pla		                PLA             ; end setdp macro
.1977c4		e2 20		sep #$20	                SEP #$20        ; set A short
.1977c6		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.1977c8		28		plp		                PLP
.1977c9		2b		pld		                PLD
.1977ca		6b		rtl		                RTL
.1977cb						KBD_SET_CONTROL
.1977cb		0b		phd		                PHD
.1977cc		08		php		                PHP
.1977cd		48		pha		                PHA             ; begin setdp macro
.1977ce		08		php		                PHP
.1977cf		c2 20		rep #$20	                REP #$20        ; set A long
.1977d1		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977d4		5b		tcd		                TCD
.1977d5		28		plp		                PLP
.1977d6		68		pla		                PLA             ; end setdp macro
.1977d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1977d9		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.1977db		28		plp		                PLP
.1977dc		2b		pld		                PLD
.1977dd		6b		rtl		                RTL
.1977de						KBD_GETCW
.1977de		22 ea 77 19	jsl $1977ea	                JSL KBD_GETC
.1977e2		c9 00		cmp #$00	                CMP #0
.1977e4		f0 01		beq $1977e7	                BEQ wait
.1977e6		6b		rtl		                RTL
.1977e7		cb		wai		wait            WAI
.1977e8		80 f4		bra $1977de	                BRA KBD_GETCW
.1977ea						KBD_GETC
.1977ea		0b		phd		                PHD
.1977eb		08		php		                PHP
.1977ec		48		pha		                PHA             ; begin setdp macro
.1977ed		08		php		                PHP
.1977ee		c2 20		rep #$20	                REP #$20        ; set A long
.1977f0		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977f3		5b		tcd		                TCD
.1977f4		28		plp		                PLP
.1977f5		68		pla		                PLA             ; end setdp macro
.1977f6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1977f8		22 a1 76 19	jsl $1976a1	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.1977fc		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.1977fe		f0 03		beq $197803	                BEQ get_scancode            ; No: try to get a scan code
.197800		82 cb 00	brl $1978ce	                BRL done                    ; Yes: return the character we had queued
.197803		22 dc 76 19	jsl $1976dc	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.197807		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.197809		d0 04		bne $19780f	                BNE chk_make_break
.19780b		28		plp		                PLP                         ; Yes: return 0... we got nothin
.19780c		38		sec		                SEC
.19780d		2b		pld		                PLD
.19780e		6b		rtl		                RTL
.19780f		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.197811		d0 08		bne $19781b	                BNE handle_break            ; Yes: process the break
.197813		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.197815		d0 0c		bne $197823	                BNE not_make_ls
.197817		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.197819		80 4e		bra $197869	                BRA set_modifier
.19781b		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.19781d		d0 0c		bne $19782b	                BNE not_break_ls
.19781f		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.197821		80 50		bra $197873	                BRA clr_modifier
.197823		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.197825		d0 0c		bne $197833	                BNE not_make_lc
.197827		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.197829		80 3e		bra $197869	                BRA set_modifier
.19782b		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.19782d		d0 0c		bne $19783b	                BNE not_break_lc
.19782f		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.197831		80 40		bra $197873	                BRA clr_modifier
.197833		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.197835		d0 0c		bne $197843	                BNE not_make_la
.197837		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.197839		80 2e		bra $197869	                BRA set_modifier
.19783b		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.19783d		d0 0c		bne $19784b	                BNE not_break_la
.19783f		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.197841		80 30		bra $197873	                BRA clr_modifier
.197843		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.197845		d0 0c		bne $197853	                BNE not_make_rs
.197847		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.197849		80 1e		bra $197869	                BRA set_modifier
.19784b		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.19784d		d0 0c		bne $19785b	                BNE not_break_rs
.19784f		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.197851		80 20		bra $197873	                BRA clr_modifier
.197853		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.197855		d0 0c		bne $197863	                BNE not_make_rc
.197857		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.197859		80 0e		bra $197869	                BRA set_modifier
.19785b		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.19785d		d0 0e		bne $19786d	                BNE not_break_rc
.19785f		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.197861		80 10		bra $197873	                BRA clr_modifier
.197863		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.197865		d0 12		bne $197879	                BNE not_make_ra
.197867		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197869		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.19786b		80 08		bra $197875	                BRA return_null
.19786d		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.19786f		d0 04		bne $197875	                BNE return_null                 ; No: we don't use any other break scan codes
.197871		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197873		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.197875		a9 00		lda #$00	return_null     LDA #0
.197877		80 55		bra $1978ce	                BRA done
.197879		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.19787a		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.19787c		90 0e		bcc $19788c	                BLT below_38
.19787e		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.197880		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.197882		f0 2a		beq $1978ae	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.197884		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.197886		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.197888		d0 24		bne $1978ae	                BNE fetch_unmod                         ; If so: translate the keys as modified
.19788a		80 30		bra $1978bc	                BRA fetch_caps                          ; No: translate the key using the lock table
.19788c		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.19788e		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.197890		f0 0c		beq $19789e	                BEQ chk_capslock                        ; No: check for capslock
.197892		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197894		f0 04		beq $19789a	                BEQ fetch_control                       ; No: translate just based off of control
.197896		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.197898		80 26		bra $1978c0	                BRA chk_ansi
.19789a		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.19789c		80 22		bra $1978c0	                BRA chk_ansi
.19789e		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.1978a0		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.1978a2		d0 0e		bne $1978b2	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.1978a4		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.1978a6		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.1978a8		f0 04		beq $1978ae	                BEQ fetch_unmod                         ; No: translate just based off of control
.1978aa		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.1978ac		80 12		bra $1978c0	                BRA chk_ansi
.1978ae		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.1978b0		80 0e		bra $1978c0	                BRA chk_ansi
.1978b2		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.1978b4		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.1978b6		f0 04		beq $1978bc	                BEQ fetch_caps                          ; No: translate just based off of control
.1978b8		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.1978ba		80 04		bra $1978c0	                BRA chk_ansi
.1978bc		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.1978be		80 00		bra $1978c0	                BRA chk_ansi
.1978c0		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.1978c2		90 0a		bcc $1978ce	                BLT done                                ; If not, just return the character
.1978c4		c9 96		cmp #$96	                CMP #$96
.1978c6		b0 06		bcs $1978ce	                BGE done
.1978c8		22 0a 79 19	jsl $19790a	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.1978cc		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.1978ce		28		plp		done            PLP
.1978cf		2b		pld		                PLD
.1978d0		18		clc		                CLC
.1978d1		6b		rtl		                RTL
.1978d2						KBD_ENQUEUE_BCD
.1978d2		08		php		                PHP
.1978d3		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1978d5		48		pha		                PHA                     ; Save the value
.1978d6		4a		lsr a		                LSR A                   ; Get the 10s digit
.1978d7		4a		lsr a		                LSR A
.1978d8		4a		lsr a		                LSR A
.1978d9		4a		lsr a		                LSR A
.1978da		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.1978dc		f0 0b		beq $1978e9	                BEQ enqueue_1
.1978de		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.1978e0		b0 13		bcs $1978f5	                BGE done_A
.1978e2		18		clc		                CLC                     ; Enqueue the tens digit
.1978e3		69 30		adc #$30	                ADC #'0'
.1978e5		22 7c 76 19	jsl $19767c	                JSL KBD_CHAR_ENQUEUE
.1978e9		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.1978ea		29 0f		and #$0f	                AND #$0F
.1978ec		18		clc		                CLC
.1978ed		69 30		adc #$30	                ADC #'0'
.1978ef		22 7c 76 19	jsl $19767c	                JSL KBD_CHAR_ENQUEUE
.1978f3		28		plp		done            PLP
.1978f4		6b		rtl		                RTL
.1978f5		68		pla		done_A          PLA
.1978f6		80 fb		bra $1978f3	                BRA done
.1978f8						KBD_BIN_TO_BCD
.1978f8		da		phx		                PHX
.1978f9		08		php		                PHP
.1978fa		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1978fc		aa		tax		                TAX
.1978fd		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.1978ff		f8		sed		                SED                     ; Switch to Decimal arithmetic
.197900		18		clc		loop            CLC
.197901		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.197903		ca		dex		                DEX                     ; Decrement input value in X
.197904		10 fa		bpl $197900	                BPL loop                ; loop until input value < 0
.197906		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.197907		28		plp		                PLP
.197908		fa		plx		                PLX
.197909		6b		rtl		                RTL
.19790a						KBD_ENQ_ANSI
.19790a		08		php		                PHP
.19790b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19790d		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.19790f		b0 03		bcs $197914	                BGE chk_high_end
.197911		82 4a 00	brl $19795e	                BRL done                        ; Out of range, just ignore it
.197914		c9 96		cmp #$96	chk_high_end    CMP #$96
.197916		90 03		bcc $19791b	                BLT save_value
.197918		82 43 00	brl $19795e	                BRL done                        ; Out of range, just ignore it
.19791b		48		pha		save_value      PHA
.19791c		a9 5b		lda #$5b	                LDA #'['
.19791e		22 7c 76 19	jsl $19767c	                JSL KBD_CHAR_ENQUEUE
.197922		68		pla		                PLA
.197923		38		sec		                SEC
.197924		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.197926		aa		tax		                TAX                     ; And use it as an index to...
.197927		bf 60 79 19	lda $197960,x	                LDA @l ENCODE_CODE,X    ; Get the number
.19792b		10 0b		bpl $197938	                BPL send_number         ; If MSB is not set, send the number as-is
.19792d		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.19792f		18		clc		                CLC
.197930		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.197932		22 7c 76 19	jsl $19767c	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.197936		80 26		bra $19795e	                BRA done
.197938		22 f8 78 19	jsl $1978f8	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.19793c		22 d2 78 19	jsl $1978d2	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.197940		22 59 77 19	jsl $197759	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.197944		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.197946		f0 10		beq $197958	                BEQ close               ; No: close the sequence
.197948		48		pha		                PHA
.197949		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.19794b		22 7c 76 19	jsl $19767c	                JSL KBD_CHAR_ENQUEUE
.19794f		68		pla		                PLA
.197950		22 f8 78 19	jsl $1978f8	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.197954		22 d2 78 19	jsl $1978d2	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.197958		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.19795a		22 7c 76 19	jsl $19767c	                JSL KBD_CHAR_ENQUEUE
.19795e		28		plp		done            PLP
.19795f		6b		rtl		                RTL
>197960		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>197966		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>19796a		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>19796f		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>197974		17 18				                .byte 23, 24                ; F11 - F12
.197976						KBD_SETTABLE
.197976		48		pha		                PHA
.197977		8b		phb		                PHB
.197978		0b		phd		                PHD
.197979		08		php		                PHP
.19797a		48		pha		                PHA             ; begin setdp macro
.19797b		08		php		                PHP
.19797c		c2 20		rep #$20	                REP #$20        ; set A long
.19797e		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197981		5b		tcd		                TCD
.197982		28		plp		                PLP
.197983		68		pla		                PLA             ; end setdp macro
.197984		e2 20		sep #$20	                SEP #$20        ; set A short
.197986		8b		phb		                PHB                 ; Get the data bank into A
.197987		68		pla		                PLA
.197988		c2 20		rep #$20	                REP #$20        ; set A long
.19798a		29 ff 00	and #$00ff	                AND #$00FF
.19798d		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.19798f		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.197991		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.197993		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.197995		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.197997		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.197999		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.19799b		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.19799d		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.19799f		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.1979a1		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.1979a3		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.1979a5		28		plp		                PLP
.1979a6		2b		pld		                PLD
.1979a7		ab		plb		                PLB
.1979a8		68		pla		                PLA
.1979a9		6b		rtl		                RTL
>1979aa						.align 256
>197a00		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>197a08		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>197a10		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>197a18		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>197a20		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>197a28		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>197a30		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>197a38		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>197a40		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>197a48		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>197a50		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>197a58		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>197a60		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197a68		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197a70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197a78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>197a80		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>197a88		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>197a90		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>197a98		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>197aa0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>197aa8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>197ab0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>197ab8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>197ac0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>197ac8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>197ad0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>197ad8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>197ae0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197ae8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197af0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197af8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.197b00						KBD_STATE_MACH
>197b00		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>197b04		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>197b08		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>197b0c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>197b10		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>197b14		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>197b18		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>197b1c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>197b20		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>197b24		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>197b28		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>197b2c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>197b30		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>197b34		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>197b38		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>197b3c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>197b40		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>197b44		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>197b48		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>197b4c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>197b50		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>197b54		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>197b58		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>197b5c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>197b60		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>197b64						.align 256
>197c00		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197c08		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197c10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197c18		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>197c20		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>197c28		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197c30		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>197c38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197c40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197c48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197c50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197c58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197c60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197c68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197c70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197c78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197c80		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197c88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197c90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197c98		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>197ca0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>197ca8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>197cb0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>197cb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197cc0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197cc8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197cd0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197cd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197ce0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197ce8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197cf0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197cf8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197d00		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>197d08		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>197d10		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197d18		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197d20		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197d28		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197d30		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197d38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197d40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197d48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197d50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197d58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197d60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197d68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197d70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197d78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197d80		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197d88		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197d90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197d98		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>197da0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>197da8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>197db0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>197db8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197dc0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197dc8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197dd0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197dd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197de0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197de8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197df0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197df8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197e00		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197e08		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197e10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197e18		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>197e20		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>197e28		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197e30		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>197e38		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>197e40		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197e48		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197e50		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197e58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197e60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197e68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197e70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197e78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197e80		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197e88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197e90		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197e98		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197ea0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197ea8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197eb0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197eb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197ec0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197ec8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197ed0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197ed8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197ee0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197ee8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197ef0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197ef8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/mouse_driver.asm

.197f00						IINITMOUSE
.197f00		48		pha		                PHA
.197f01		da		phx		                PHX
.197f02		0b		phd		                PHD
.197f03		08		php		                PHP
.197f04		48		pha		                PHA             ; begin setdp macro
.197f05		08		php		                PHP
.197f06		c2 20		rep #$20	                REP #$20        ; set A long
.197f08		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.197f0b		5b		tcd		                TCD
.197f0c		28		plp		                PLP
.197f0d		68		pla		                PLA             ; end setdp macro
.197f0e		78		sei		                SEI
.197f0f		e2 20		sep #$20	                SEP #$20        ; set A short
.197f11		c2 10		rep #$10	                REP #$10        ; set X long
.197f13		18		clc		                CLC
.197f14		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197f17		20 f5 7f	jsr $197ff5	DO_CMD_A9_AGAIN JSR Poll_Inbuf_Mouse_TimeOut
.197f1a		b0 0b		bcs $197f27	                BCS mouse_init_fail
.197f1c		a9 a9		lda #$a9	                LDA #$A9                        ; Tests second PS2 Channel
.197f1e		8f 07 18 af	sta $af1807	                STA @l KBD_CMD_BUF
.197f22		20 cd 7f	jsr $197fcd	                JSR Poll_Outbuf_Mouse_TimeOut
.197f25		90 2a		bcc $197f51	                BCC mouse_found
.197f27		a9 00		lda #$00	mouse_init_fail LDA #0                          ; Disable the mouse pointer
.197f29		8f 00 07 af	sta $af0700	                STA @l MOUSE_PTR_CTRL_REG_L
.197f2d		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Make sure the mouse interrupt is disabled
.197f31		09 80		ora #$80	                ORA #FNX0_INT07_MOUSE
.197f33		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197f37		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.197f3b		29 01		and #$01	                AND #FNX1_INT00_KBD
.197f3d		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.197f41		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197f45		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197f47		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197f4b		28		plp		                PLP                             ; Return failure
.197f4c		2b		pld		                PLD
.197f4d		fa		plx		                PLX
.197f4e		68		pla		                PLA
.197f4f		38		sec		                SEC
.197f50		6b		rtl		                RTL
.197f51		af 03 18 af	lda $af1803	mouse_found     LDA KBD_OUT_BUF		            ; Clear the Output buffer
.197f55		c9 00		cmp #$00	                CMP #$00
.197f57		d0 be		bne $197f17	                BNE DO_CMD_A9_AGAIN
.197f59		a9 f6		lda #$f6	                LDA #$F6                        ;Tell the mouse to use default settings
.197f5b		20 9f 7f	jsr $197f9f	                JSR MOUSE_WRITE
.197f5e		20 b4 7f	jsr $197fb4	                JSR MOUSE_READ
.197f61		b0 c4		bcs $197f27	                BCS mouse_init_fail
.197f63		a9 e8		lda #$e8	                LDA #$E8
.197f65		20 9f 7f	jsr $197f9f	                JSR MOUSE_WRITE
.197f68		20 b4 7f	jsr $197fb4	                JSR MOUSE_READ
.197f6b		b0 ba		bcs $197f27	                BCS mouse_init_fail
.197f6d		a9 00		lda #$00	                LDA #$00
.197f6f		20 9f 7f	jsr $197f9f	                JSR MOUSE_WRITE
.197f72		20 b4 7f	jsr $197fb4	                JSR MOUSE_READ
.197f75		b0 b0		bcs $197f27	                BCS mouse_init_fail
.197f77		a9 f4		lda #$f4	                LDA #$F4                        ; Enable the Mouse
.197f79		20 9f 7f	jsr $197f9f	                JSR MOUSE_WRITE
.197f7c		20 b4 7f	jsr $197fb4	                JSR MOUSE_READ
.197f7f		b0 a6		bcs $197f27	                BCS mouse_init_fail
.197f81		a9 00		lda #$00	                LDA #$00
.197f83		85 e0		sta $e0		                STA MOUSE_PTR
.197f85		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0          ; Read the Pending Register &
.197f89		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197f8b		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0          ; Writing it back will clear the Active Bit
.197f8f		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0             ; Enable the mouse interrupt
.197f93		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.197f95		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197f99		28		plp		mouse_init_ok   PLP
.197f9a		2b		pld		                PLD
.197f9b		fa		plx		                PLX
.197f9c		68		pla		                PLA
.197f9d		18		clc		                CLC
.197f9e		6b		rtl		                RTL
.197f9f						MOUSE_WRITE
.197f9f		e2 20		sep #$20	                SEP #$20        ; set A short
.197fa1		48		pha		                PHA
.197fa2		20 e8 7f	jsr $197fe8	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.197fa5		a9 d4		lda #$d4	                LDA #$D4
.197fa7		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.197fab		20 e8 7f	jsr $197fe8	                JSR Poll_Inbuf
.197fae		68		pla		                PLA
.197faf		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.197fb3		60		rts		                RTS
.197fb4						MOUSE_READ
.197fb4		e2 20		sep #$20	                SEP #$20        ; set A short
.197fb6		20 cd 7f	jsr $197fcd	                JSR Poll_Outbuf_Mouse_TimeOut   ; Test bit $01 (if 1, Full)
.197fb9		b0 04		bcs $197fbf	                BCS done
.197fbb		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.197fbf		60		rts		done            RTS
.197fc0						Poll_Outbuf_Mouse
.197fc0		e2 20		sep #$20	                SEP #$20        ; set A short
.197fc2		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197fc6		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197fc8		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197fca		d0 f6		bne $197fc2	                BNE wait
.197fcc		60		rts		                RTS
.197fcd						Poll_Outbuf_Mouse_TimeOut
.197fcd		e2 20		sep #$20	                SEP #$20        ; set A short
.197fcf		c2 10		rep #$10	                REP #$10        ; set X long
.197fd1		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197fd4		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.197fd8		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197fda		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197fdc		f0 08		beq $197fe6	                BEQ ret_success
.197fde		ca		dex		                DEX
.197fdf		e0 00 00	cpx #$0000	                CPX #$0000
.197fe2		d0 f0		bne $197fd4	                BNE wait
.197fe4		38		sec		                SEC                     ; Return timeout error
.197fe5		60		rts		                RTS
.197fe6		18		clc		ret_success     CLC                     ; Return success
.197fe7		60		rts		                RTS
.197fe8						Poll_Inbuf
.197fe8		e2 20		sep #$20	                SEP #$20        ; set A short
.197fea		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT         ; Load Status Byte
.197fee		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.197ff0		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.197ff2		f0 f6		beq $197fea	                BEQ wait
.197ff4		60		rts		                RTS
.197ff5						Poll_Inbuf_Mouse_TimeOut
.197ff5		e2 20		sep #$20	                SEP #$20        ; set A short
.197ff7		c2 10		rep #$10	                REP #$10        ; set X long
.197ff9		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197ffc		af 07 18 af	lda $af1807	wait            LDA STATUS_PORT
.198000		29 02		and #$02	                AND	#<INPT_BUF_FULL     ; Test bit $02 (if 0, Empty)
.198002		c9 02		cmp #$02	                CMP #<INPT_BUF_FULL
.198004		d0 08		bne $19800e	                BNE ret_success
.198006		ca		dex		                DEX
.198007		e0 00 00	cpx #$0000	                CPX #$0000
.19800a		d0 f0		bne $197ffc	                BNE wait
.19800c		38		sec		                SEC                     ; Return timeout error
.19800d		60		rts		                RTS
.19800e		18		clc		ret_success     CLC                     ; Return success
.19800f		60		rts		                RTS
.198010						MOUSE_INTERRUPT
.198010		0b		phd		                PHD
.198011		08		php		                PHP
.198012						                setasx
.198012		78		sei		                SEI
.198013		48		pha		                PHA             ; begin setdp macro
.198014		08		php		                PHP
.198015		c2 20		rep #$20	                REP #$20        ; set A long
.198017		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19801a		5b		tcd		                TCD
.19801b		28		plp		                PLP
.19801c		68		pla		                PLA             ; end setdp macro
.19801d		a6 e0		ldx $e0		                LDX @b MOUSE_PTR                ; Get the # of the mouse byte to write
.19801f		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.198023		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.198027		e8		inx		                INX                             ; Move to the next byte
.198028		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.19802b		d0 1b		bne $198048	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.19802d		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.198031		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.198033		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.198037		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.198039		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.19803d		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.19803f		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.198043		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.198045		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.198048		86 e0		stx $e0		save_ptr        STX @b MOUSE_PTR                ; Save our next byte position (state)
.19804a		28		plp		                PLP
.19804b		2b		pld		                PLD
.19804c		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/boot_sound.asm

.19804d						BOOT_SOUND
.19804d		48		pha		                PHA
.19804e		da		phx		                PHX
.19804f		08		php		                PHP
.198050		e2 20		sep #$20	                SEP #$20        ; set A short
.198052		a9 00		lda #$00	                LDA #0
.198054		a2 00 00	ldx #$0000	                LDX #0
.198057		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.19805b		e8		inx		                INX                             ; Move to the next SID register
.19805c		e0 18 00	cpx #$0018	                CPX #24
.19805f		d0 f6		bne $198057	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.198061		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.198063		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.198067		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.19806b		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.19806f		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.198071		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.198075		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.198079		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.19807d		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.19807f		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.198083		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.198085		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.198089		a9 16		lda #$16	                LDA #22
.19808b		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.19808f		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.198091		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.198095		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.198098		22 c7 0f 19	jsl $190fc7	                JSL ILOOP_MS
.19809c		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.19809e		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.1980a2		a9 08		lda #$08	                LDA #8
.1980a4		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.1980a8		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1980aa		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.1980ae		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.1980b1		22 c7 0f 19	jsl $190fc7	                JSL ILOOP_MS
.1980b5		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.1980b7		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.1980bb		a9 21		lda #$21	                LDA #33
.1980bd		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.1980c1		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.1980c3		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.1980c7		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.1980ca		22 c7 0f 19	jsl $190fc7	                JSL ILOOP_MS
.1980ce		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.1980d0		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.1980d4		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.1980d8		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.1980dc		a9 0e		lda #$0e	                LDA #14
.1980de		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.1980e2		a2 64 00	ldx #$0064	                LDX #100
.1980e5		22 c7 0f 19	jsl $190fc7	                JSL ILOOP_MS
.1980e9		3a		dec a		                DEC A
.1980ea		d0 f2		bne $1980de	                BNE dampen
.1980ec		28		plp		                PLP
.1980ed		fa		plx		                PLX
.1980ee		68		pla		                PLA
.1980ef		6b		rtl		                RTL
.1980f0						BOOT_SOUND_OFF
.1980f0		48		pha		                PHA
.1980f1		da		phx		                PHX
.1980f2		08		php		                PHP
.1980f3		a2 00 00	ldx #$0000	                LDX #0
.1980f6		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.1980fa		e8		inx		                INX                             ; Move to the next SID register
.1980fb		e0 18 00	cpx #$0018	                CPX #24
.1980fe		d0 f6		bne $1980f6	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.198100		28		plp		                PLP
.198101		fa		plx		                PLX
.198102		68		pla		                PLA
.198103		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.198104						    KERNEL_DATA
>198104		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>19810c		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>19811c		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198124		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198133		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>19813b		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>198149		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>198151		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>19815e		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>198166		0b 0c 20 55 55 55 55 55 55 55 55 0d
>198172		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>19817a		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>19818a		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>198199		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>1981a1		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>1981b1		72 6e 65 6c 3a 20

;******  Processing file: src\version.asm

>1981b7		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+250 (2021-05-13)"
>1981bf		6c 70 68 61 2b 32 35 30 20 28 32 30 32 31 2d 30
>1981cf		35 2d 31 33 29

;******  Return to file: src\kernel.asm

>1981d4		0d 00				                .text $0D,$00
>1981d6		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>1981de		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1981ee		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1981fe		f0 f0
>198200		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198208		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198218		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198228		f0 f0
>19822a		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198232		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198242		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198252		f0 f0
>198254		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>19825c		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19826c		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19827c		f0 f0
>19827e		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198286		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198296		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1982a6		f0 f0
>1982a8		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>1982ac		00 00 80 ff			                .text $00, $00, $80, $FF
>1982b0		00 80 00 ff			                .text $00, $80, $00, $FF
>1982b4		80 00 00 ff			                .text $80, $00, $00, $FF
>1982b8		00 80 80 ff			                .text $00, $80, $80, $FF
>1982bc		80 80 00 ff			                .text $80, $80, $00, $FF
>1982c0		80 00 80 ff			                .text $80, $00, $80, $FF
>1982c4		80 80 80 ff			                .text $80, $80, $80, $FF
>1982c8		00 45 ff ff			                .text $00, $45, $FF, $FF
>1982cc		13 45 8b ff			                .text $13, $45, $8B, $FF
>1982d0		00 00 20 ff			                .text $00, $00, $20, $FF
>1982d4		00 20 00 ff			                .text $00, $20, $00, $FF
>1982d8		20 00 00 ff			                .text $20, $00, $00, $FF
>1982dc		20 20 20 ff			                .text $20, $20, $20, $FF
>1982e0		40 40 40 ff			                .text $40, $40, $40, $FF
>1982e4		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1982e8		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>1982ec		00 00 80 ff			                .text $00, $00, $80, $FF
>1982f0		00 80 00 ff			                .text $00, $80, $00, $FF
>1982f4		80 00 00 ff			                .text $80, $00, $00, $FF
>1982f8		00 20 20 ff			                .text $00, $20, $20, $FF
>1982fc		20 20 00 ff			                .text $20, $20, $00, $FF
>198300		20 00 20 ff			                .text $20, $00, $20, $FF
>198304		20 20 20 ff			                .text $20, $20, $20, $FF
>198308		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>19830c		13 45 8b ff			                .text $13, $45, $8B, $FF
>198310		00 00 20 ff			                .text $00, $00, $20, $FF
>198314		00 20 00 ff			                .text $00, $20, $00, $FF
>198318		40 00 00 ff			                .text $40, $00, $00, $FF
>19831c		10 10 10 ff			                .text $10, $10, $10, $FF
>198320		40 40 40 ff			                .text $40, $40, $40, $FF
>198324		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>198328		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>198330		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>198340		00
>198341		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>198349		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>198359		00
>19835a		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>198362		20 45 78 65 63 75 74 65 64 2e 0d 00
>19836e		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>198376		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>198386		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>19838e		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>19839e		64 2e 2e 2e 0d 00
>1983a4		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>1983ac		20 50 72 65 73 65 6e 74 0d 00
>1983b6		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>1983be		65 73 65 6e 74 0d 00
>1983c5		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>1983cd		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>1983dd		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>1983ed		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>1983f5		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>198405		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198412		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>19841a		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>198426		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>19842e		54 55 52 45 20 46 4f 55 4e 44 2e 00
>19843a		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>198442		45 44 2e 00
>198446		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>19844e		47 20 42 4d 50 20 50 41 52 53 45 52 00
>19845b		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>198463		50 72 65 73 65 6e 74 3a 00
>19846c		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>198474		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>198484		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>198492		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>19849a		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>1984aa		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>1984b7		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>1984bf		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>1984cf		72 64 2e 00
>1984d3		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>1984db		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>1984eb		49 44 45 20 64 72 69 76 65 2e 00
>1984f6		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>1984fe		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>19850e		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>19851c		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>198524		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>198533		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>19853b		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>19854a		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>198552		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>198562		2e 2e 00
>198565		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>19856d		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>198575		52 4f 52 00
>198579		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>198581		38 39 41 42 43 44 45 46 00
>19858a						.align 256
>198600		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198608		37 38 39 30 2d 3d 08 09
>198610		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198618		6f 70 5b 5d 0d 00 61 73
>198620		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198628		27 60 00 5c 7a 78 63 76
>198630		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>198638		00 20 00 81 82 83 84 85
>198640		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>198648		11 00 00 9d 00 1d 00 00
>198650		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>198658		8c 00 00 00 00 00 00 00
>198660		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198668		00 00 00 00 00 00 00 00
>198670		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198678		00 00 00 00 00 00 00 00
>198680		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>198688		26 2a 28 29 5f 2b 08 09
>198690		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>198698		4f 50 7b 7d 0d 00 41 53
>1986a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>1986a8		22 7e 00 7c 5a 58 43 56
>1986b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1986b8		00 20 00 00 00 00 00 00
>1986c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1986c8		00 00 00 00 00 00 00 00
>1986d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1986d8		00 00 00 00 00 00 00 00
>1986e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1986e8		00 00 00 00 00 00 00 00
>1986f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1986f8		00 00 00 00 00 00 00 00
>198700		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198708		37 38 39 30 2d 3d 08 09
>198710		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>198718		0f 10 5b 5d 0d 00 01 13
>198720		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>198728		27 00 00 5c 1a 18 03 16
>198730		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198738		00 20 00 00 00 00 00 00
>198740		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198748		00 00 00 00 00 00 00 00
>198750		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198758		00 00 00 00 00 00 00 00
>198760		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198768		00 00 00 00 00 00 00 00
>198770		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198778		00 00 00 00 00 00 00 00
>198780		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198788		37 38 39 30 2d 3d 08 09
>198790		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198798		6f 70 5b 5d 0d 00 61 73
>1987a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1987a8		27 60 00 5c 7a 78 63 76
>1987b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1987b8		00 20 00 00 00 00 00 00
>1987c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1987c8		00 00 00 00 00 00 00 00
>1987d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1987d8		00 00 00 00 00 00 00 00
>1987e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1987e8		00 00 00 00 00 00 00 00
>1987f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1987f8		00 00 00 00 00 00 00 00
>198800		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198808		37 38 39 30 2d 3d 08 09
>198810		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198818		6f 70 5b 5d 0d 00 61 73
>198820		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198828		27 60 00 5c 7a 78 63 76
>198830		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198838		00 20 00 00 00 00 00 00
>198840		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198848		00 00 00 00 00 00 00 00
>198850		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198858		00 00 00 00 00 00 00 00
>198860		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198868		00 00 00 00 00 00 00 00
>198870		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198878		00 00 00 00 00 00 00 00
>198880		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>198888		00 00 00 00 00 00 00 00
>198890		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>198898		00 00 00 00 00 00 00 00
>1988a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>1988a8		00 00 00 00 00 00 00 00
>1988b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>1988b8		00 00 00 00 00 00 00 00
>1988c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>1988c8		11 00 00 9d 00 1d 00 05
>1988d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1988d8		00 00 00 00 00 00 00 00
>1988e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1988e8		00 00 00 00 00 00 00 00
>1988f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1988f8		00 00 00 00 00 00 00 00
>198900						.align 256
>198900		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>198908		34 37 3a 3d 3f 41 44 46
>198910		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>198918		57 58 5a 5b 5d 5e 60 61
>198920		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>198928		6d 6f 70 71 72 73 75 76
>198930		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>198938		80 81 82 83 84 85 86 87
>198940		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>198948		8f 90 91 92 93 93 94 95
>198950		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>198958		9d 9e 9e 9f a0 a1 a2 a2
>198960		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>198968		a9 aa ab ab ac ad ae ae
>198970		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>198978		b5 b5 b6 b7 b7 b8 b9 b9
>198980		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>198988		bf c0 c0 c1 c2 c2 c3 c4
>198990		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>198998		c9 ca ca cb cb cc cd cd
>1989a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1989a8		d2 d3 d4 d4 d5 d5 d6 d6
>1989b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1989b8		db dc dc dd de de df df
>1989c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1989c8		e4 e4 e5 e5 e6 e6 e7 e7
>1989d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1989d8		ec ec ed ed ee ee ef ef
>1989e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1989e8		f4 f4 f5 f5 f6 f6 f7 f7
>1989f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1989f8		fb fc fc fd fd fe fe ff
>198a00						.align 256
>198a00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>198a08		25 27 2a 2c 2e 30 32 34
>198a10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>198a18		44 46 47 49 4a 4c 4d 4f
>198a20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>198a28		5b 5c 5d 5e 60 61 62 63
>198a30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>198a38		6d 6e 70 71 72 73 74 75
>198a40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>198a48		7e 7f 80 81 82 83 84 84
>198a50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>198a58		8d 8e 8e 8f 90 91 92 93
>198a60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>198a68		9a 9b 9c 9d 9e 9f 9f a0
>198a70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>198a78		a7 a8 a9 aa aa ab ac ad
>198a80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>198a88		b3 b4 b5 b6 b6 b7 b8 b8
>198a90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>198a98		bf bf c0 c1 c2 c2 c3 c4
>198aa0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>198aa8		ca ca cb cc cc cd ce ce
>198ab0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>198ab8		d4 d5 d6 d6 d7 d7 d8 d9
>198ac0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>198ac8		de df e0 e0 e1 e1 e2 e3
>198ad0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>198ad8		e8 e9 e9 ea ea eb ec ec
>198ae0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>198ae8		f1 f2 f3 f3 f4 f4 f5 f5
>198af0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>198af8		fb fb fc fc fd fd fe ff
>198b00						.align 256
>198b00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>198b08		83 dd ce 39 cd c5 3b 15
>198b10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>198b18		87 12 31 65 89 27 88 42
>198b20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>198b28		94 ce 56 ec fe da 58 c9
>198b30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>198b38		d0 10 2c b2 4b ea 32 61
>198b40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>198b48		a1 e6 ca 2d b3 ce b0 79
>198b50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>198b58		5f e3 fb bd 15 2e be f5
>198b60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>198b68		8d 8f 2c 80 0a 5e 99 36
>198b70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>198b78		13 52 44 2f e3 ef 44 a2
>198b80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>198b88		be 23 02 58 0a 52 5e b4
>198b90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>198b98		d5 cf 3e df c4 9e da bb
>198ba0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>198ba8		77 7d b1 3b 4a 68 35 6e
>198bb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>198bb8		b5 8f 44 63 55 6f e1 50
>198bc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>198bc8		57 74 b9 bd 05 14 50 eb
>198bd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>198bd8		44 bc ec db 22 58 fc be
>198be0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>198be8		24 aa 82 11 5c 9f 43 4d
>198bf0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>198bf8		3e 3d 66 7e 0a 1c 6b 74
>198c00						.align 16
>198c00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>198c08		01 01 01 00 00 00 00 00
>198c10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>198c18		ff ff ff 01 00 00 00 00
>198c20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>198c28		01 55 ff ff 01 00 00 00
>198c30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>198c38		ff ff ff ff 01 00 00 00
>198c40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>198c48		ff ff 01 ff ff 01 00 00
>198c50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>198c58		01 ff ff 01 ff 01 00 00
>198c60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>198c68		ff 01 ff ff ff 01 00 00
>198c70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>198c78		ff ff ff ff ff 01 01 00
>198c80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>198c88		ff ff ff ff 01 ff ff 01
>198c90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>198c98		ff ff ff ff ff ff ff 01
>198ca0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>198ca8		55 55 01 ff ff 55 01 00
>198cb0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>198cb8		01 01 55 ff 55 01 00 00
>198cc0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>198cc8		01 55 55 55 01 00 00 00
>198cd0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>198cd8		01 55 55 01 00 00 00 00
>198ce0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>198ce8		00 01 01 00 00 00 00 00
>198cf0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>198cf8		00 00 00 00 00 00 00 00
>1a0000		5c d4 89 1a 5c e6 6f 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c 33 27 1a 5c ba 02 1a 5c 58 00 1a 5c b8 00 1a
>1a0018		5c d4 03 1a 5c 5e 02 1a 5c 79 02 1a 5c 80 02 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>1a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>1a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>1a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>1a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>1a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>1a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>1a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>1a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>1a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>1a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>1a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>1a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>1a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>1a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>1a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>1a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>1a0188		03 d0 41 a3 01 c9 30 90 29 c9 3a b0 25 a3 03 8f
>1a0198		00 01 00 a9 00 8f 01 01 00 8f 03 01 00 a9 0a 8f
>1a01a8		02 01 00 a3 01 38 e9 30 18 6f 04 01 00 83 03 82
>1a01b8		4a ff c9 3b d0 07 a9 04 83 02 82 3f ff c9 7e f0
>1a01c8		40 82 30 ff c9 04 f0 03 82 5f ff a3 01 c9 30 90
>1a01d8		29 c9 3a b0 25 a3 04 8f 00 01 00 a9 00 8f 01 01
>1a01e8		00 8f 03 01 00 a9 0a 8f 02 01 00 a3 01 38 e9 30
>1a01f8		18 6f 04 01 00 83 04 82 02 ff c9 7e f0 03 82 f3
>1a0208		fe a3 03 c9 02 f0 0b c9 03 f0 0b c9 18 f0 0f 82
>1a0218		e2 fe a9 40 80 02 a9 50 20 c7 00 82 d6 fe a5 d2
>1a0228		d0 10 a3 04 c9 08 d0 0a a9 1b 20 18 00 a9 5f 20
>1a0238		18 00 82 bf fe 08 e2 20 af 00 00 af 89 3c f0 08
>1a0248		09 03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00
>1a0258		22 3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00
>1a0268		af 09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28
>1a0278		60 08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2
>1a0288		10 a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00
>1a0298		c0 af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b
>1a02a8		68 28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa
>1a02b8		68 60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a02c8		c2 30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20
>1a02d8		29 ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00
>1a02e8		00 3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5
>1a02f8		0a 69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00
>1a0308		00 a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4
>1a0318		af 0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00
>1a0328		9f 00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a2 00
>1a0338		00 a9 00 9f 18 f0 1a e8 e0 40 00 d0 f6 a9 80 8f
>1a0348		b4 08 00 e2 20 a9 00 8f 89 0f 00 a9 00 8f 00 02
>1a0358		af 8f 0c 02 af 8f 18 02 af 8f 24 02 af 60 08 e2
>1a0368		20 48 48 a9 00 22 3c 10 00 68 22 18 10 00 af 89
>1a0378		0f 00 29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01
>1a0388		22 3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0
>1a0398		f8 68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2
>1a03a8		20 68 28 60 08 22 78 10 00 28 60 08 0b 08 c2 20
>1a03b8		48 a9 00 08 5b 68 28 e2 20 a5 b6 1a 85 b6 cf 13
>1a03c8		00 00 90 05 20 14 00 64 b6 2b 28 60 da 5a 0b 08
>1a03d8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 8f b5
>1a03e8		08 00 af b4 08 00 29 20 f0 07 af b5 08 00 20 28
>1a03f8		00 af b4 08 00 29 80 f0 07 af b5 08 00 20 66 03
>1a0408		af b4 08 00 29 40 f0 14 af b5 08 00 20 81 03 af
>1a0418		b5 08 00 c9 0d d0 05 a9 0a 20 81 03 28 2b 7a fa
>1a0428		60 08 e2 20 bd 00 00 f0 06 20 18 00 e8 80 f5 28
>1a0438		60 08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 53
>1a0448		04 68 29 ff 00 20 53 04 68 28 60 08 c2 20 48 e2
>1a0458		20 48 4a 4a 4a 4a 20 6a 04 68 20 6a 04 c2 20 68
>1a0468		28 60 08 c2 30 da 29 0f 00 aa bf 00 d0 1a 20 18
>1a0478		00 fa 28 60 08 c2 30 48 da 5a 8b 0b c2 30 a3 0b
>1a0488		18 69 03 00 aa e2 20 a9 1a 48 ab bd 00 00 f0 06
>1a0498		20 66 03 e8 80 f5 c2 30 2b ab 7a fa 68 28 60 08
>1a04a8		e2 20 c9 5b b0 04 c9 41 b0 0b c9 7b b0 04 c9 61
>1a04b8		b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9
>1a04c8		30 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04
>1a04d8		c9 30 b0 13 c9 67 b0 04 c9 61 b0 0b c9 47 b0 04
>1a04e8		c9 41 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0
>1a04f8		04 c9 30 b0 12 c9 67 b0 04 c9 61 b0 0f c9 47 b0
>1a0508		04 c9 41 b0 09 28 60 38 e9 30 80 f9 29 df 38 e9
>1a0518		37 80 f2 08 e2 20 c9 7b b0 06 c9 61 90 02 29 df
>1a0528		28 60 08 e2 20 c2 10 bd 00 00 f0 09 20 1b 05 9d
>1a0538		00 00 e8 80 f2 28 60 08 0b 08 c2 20 48 a9 00 08
>1a0548		5b 68 28 c2 20 48 06 23 26 25 a5 23 85 0c a5 25
>1a0558		85 0e 06 0c 26 0e 06 0c 26 0e 18 a5 23 65 0c 85
>1a0568		23 a5 25 65 0e 85 25 68 2b 28 60 08 0b 08 c2 20
>1a0578		48 a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9
>1a0588		0a 00 8f 18 01 00 af 1c 01 00 85 23 64 25 af 1e
>1a0598		01 00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b 28
>1a05a8		60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5
>1a05b8		23 8f 1a 01 00 a9 64 00 8f 18 01 00 af 1c 01 00
>1a05c8		85 23 64 25 af 1e 01 00 85 29 64 2b e2 20 a9 00
>1a05d8		85 27 85 2d 2b 28 60 08 c2 20 a5 23 d0 08 a5 25
>1a05e8		d0 04 28 e2 02 60 28 c2 02 60 08 c2 30 a9 ff ff
>1a05f8		85 23 85 25 e2 20 a9 00 85 27 28 60 08 c2 30 a9
>1a0608		00 00 85 23 85 25 e2 20 a9 00 85 27 28 60 08 e2
>1a0618		20 a5 27 c9 00 f0 07 c9 01 d0 05 20 6c 5b 28 60
>1a0628		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a0638		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08
>1a0648		e2 20 a5 2d c9 00 f0 37 c9 01 d0 35 c2 20 a5 25
>1a0658		48 a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20
>1a0668		a9 01 85 27 20 6c 5b c2 20 a5 23 85 29 a5 25 85
>1a0678		2b e2 20 a9 00 85 2d c2 20 68 85 23 68 85 25 28
>1a0688		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a0698		d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08
>1a06a8		08 e2 20 a5 27 c9 02 d0 02 28 60 08 c2 20 48 a9
>1a06b8		00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29
>1a06c8		ff 00 20 1b 1e e2 20 dc d4 08 08 e2 20 a5 27 c9
>1a06d8		00 f0 07 c9 01 d0 0b 20 6c 5b c2 20 a5 25 d0 21
>1a06e8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a06f8		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a0708		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a0718		d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08
>1a0728		08 e2 20 a5 27 c9 00 f0 07 c9 01 d0 11 20 6c 5b
>1a0738		a5 26 d0 29 a5 25 d0 25 a5 24 d0 21 28 60 08 c2
>1a0748		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a0758		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20
>1a0768		48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2
>1a0778		20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 e2 20 a5
>1a0788		27 c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08
>1a0798		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a07a8		20 1b 1e e2 20 dc d4 08 20 66 5b 28 60 08 e2 20
>1a07b8		a5 2d c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00
>1a07c8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a07d8		00 20 1b 1e e2 20 dc d4 08 20 e6 07 28 60 c2 20
>1a07e8		a5 25 48 a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25
>1a07f8		e2 20 a9 00 85 27 20 66 5b c2 20 a5 23 85 29 a5
>1a0808		25 85 2b e2 20 a9 01 85 2d c2 20 68 85 23 68 85
>1a0818		25 60 08 e2 20 a5 27 c9 00 f0 23 c9 01 f0 2e 08
>1a0828		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a0838		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 a5 2d
>1a0848		c9 00 f0 16 c9 01 d0 d7 20 66 5b 80 0d a5 2d c9
>1a0858		01 f0 07 c9 00 d0 c8 20 e6 07 e2 20 a5 27 28 60
>1a0868		08 e2 20 a5 27 c9 02 d0 25 a5 2d c9 02 f0 24 08
>1a0878		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a0888		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 20 1a
>1a0898		08 a5 27 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a08a8		28 c2 30 64 23 64 25 e2 20 64 27 a7 00 c9 26 f0
>1a08b8		44 e2 20 a7 00 20 c0 04 90 76 20 3f 05 38 e9 30
>1a08c8		c2 20 29 ff 00 18 65 23 85 23 a5 25 69 00 00 85
>1a08d8		25 20 da 20 80 db 08 c2 20 48 a9 00 08 5b 68 28
>1a08e8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a08f8		e2 20 dc d4 08 20 da 20 a7 00 c9 48 f0 04 c9 68
>1a0908		d0 d4 20 da 20 e2 20 a7 00 20 d1 04 90 22 20 f2
>1a0918		04 c2 20 06 23 26 25 06 23 26 25 06 23 26 25 06
>1a0928		23 26 25 29 ff 00 18 65 23 85 23 20 da 20 80 d5
>1a0938		2b 28 60 08 c2 30 a5 04 f0 1c 38 a5 04 e5 1a a8
>1a0948		e2 20 b7 1a f0 10 c9 20 f0 06 c9 09 f0 02 28 60
>1a0958		88 c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9
>1a0968		00 08 5b 68 28 c2 30 a5 1a 85 00 e2 20 a5 1c 85
>1a0978		02 20 fb 20 a7 00 20 c0 04 90 0c 20 9d 08 c2 20
>1a0988		a5 23 85 d7 20 fb 20 c2 20 a5 00 85 1a e2 20 a5
>1a0998		02 85 1c 20 af 09 e2 20 20 20 0a c9 00 f0 05 20
>1a09a8		cb 0b 80 f4 2b 28 60 08 c2 20 a5 1a 85 00 a5 1c
>1a09b8		85 02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7
>1a09c8		00 f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46
>1a09d8		c9 52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04
>1a09e8		c9 72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0
>1a09f8		0d c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20
>1a0a08		da 20 80 b3 a7 00 c9 3a d0 03 20 da 20 a9 03 85
>1a0a18		1e a9 91 20 cb 0b 28 60 08 0b 08 c2 20 48 a9 00
>1a0a28		08 5b 68 28 e2 20 a9 7f 85 1e c2 10 20 80 0b a5
>1a0a38		1e d0 03 4c c0 0a c2 20 a5 1a 85 00 e2 20 a5 1c
>1a0a48		85 02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da
>1a0a58		c9 91 f0 d6 c8 c4 1e 90 f3 c2 10 a7 00 c9 22 d0
>1a0a68		05 20 e2 0a 80 28 a5 1e c9 03 90 19 c2 20 a5 00
>1a0a78		c5 1a d0 08 e2 20 a5 02 c5 1c f0 09 e2 20 a7 04
>1a0a88		20 af 50 b0 09 e2 20 20 f2 0a c9 00 d0 11 c2 20
>1a0a98		a5 00 85 04 e2 20 a5 02 85 06 20 da 20 80 a9 c9
>1a0aa8		81 d0 15 20 3b 09 c9 00 f0 11 89 80 f0 08 c9 90
>1a0ab8		f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20 48 a9
>1a0ac8		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a0ad8		ff 00 20 1b 1e e2 20 dc d4 08 08 e2 20 20 da 20
>1a0ae8		a7 00 f0 04 c9 22 d0 f5 28 60 da 5a 08 0b 08 c2
>1a0af8		20 48 a9 00 08 5b 68 28 c2 20 a5 04 d0 0a e2 20
>1a0b08		a5 04 d0 04 a9 00 80 0a e2 20 a7 04 20 af 50 a9
>1a0b18		00 2a 85 28 c2 30 a9 c0 0c 85 08 e2 20 a9 1a 85
>1a0b28		0a a2 80 00 e2 20 a0 01 00 b7 08 f0 31 c5 1e d0
>1a0b38		32 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 1a 85 0e
>1a0b48		a5 28 f0 07 a7 0c 20 af 50 b0 18 e2 10 a0 00 b7
>1a0b58		00 20 1b 05 d7 0c d0 0b c8 c4 1e 90 f2 8a 2b 28
>1a0b68		7a fa 60 c2 30 18 a5 08 69 08 00 85 08 e2 20 a5
>1a0b78		0a 69 00 85 0a e8 80 ac 08 0b 8b 08 c2 20 48 a9
>1a0b88		00 08 5b 68 28 c2 30 a9 c0 0c 85 08 a9 1a 00 85
>1a0b98		0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e b0 06
>1a0ba8		c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00 85 08
>1a0bb8		a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85 1e ab
>1a0bc8		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0bd8		20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5 02 69
>1a0be8		00 00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87 08 f0
>1a0bf8		13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00 00
>1a0c08		85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a 0a 0a
>1a0c18		18 69 c0 0c aa 28 60 08 8b 0b 08 c2 20 48 a9 00
>1a0c28		08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20
>1a0c38		c2 10 20 0f 0c bd 00 00 c2 20 29 0f 00 2b ab 28
>1a0c48		60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a0c58		20 48 a9 1a 48 ab 68 28 c2 30 20 0f 0c bd 04 00
>1a0c68		2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68
>1a0c78		28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 c2 10 20
>1a0c88		0f 0c bd 00 00 c2 20 29 f0 00 2b ab 28 60 08 8b
>1a0c98		0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a0ca8		1a 48 ab 68 28 e2 20 c2 10 20 0f 0c bd 06 00 c2
>1a0cb8		20 29 ff 00 2b ab 28 60 03 01 10 d0 a0 27 02 00
>1a0cc8		03 01 12 d0 e0 27 02 00 02 01 14 d0 17 28 02 00
>1a0cd8		02 01 16 d0 4e 28 02 00 02 03 18 d0 58 28 02 00
>1a0ce8		00 01 1c d0 6b 28 02 00 04 02 1e d0 29 2a 02 00
>1a0cf8		04 02 21 d0 e9 29 02 00 04 02 24 d0 a9 29 02 00
>1a0d08		04 01 27 d0 e9 28 02 00 04 01 29 d0 69 29 02 00
>1a0d18		04 01 2b d0 29 29 02 00 05 03 2d d0 d3 28 01 00
>1a0d28		06 03 31 d0 a5 28 02 00 07 02 35 d0 bc 28 02 00
>1a0d38		ff 01 38 d0 00 00 00 00 40 01 3a d0 00 00 00 00
>1a0d48		20 03 3c d0 3c 41 00 00 20 05 40 d0 41 45 00 00
>1a0d58		20 03 46 d0 8c 44 00 00 20 04 4a d0 2c 44 00 00
>1a0d68		20 03 4f d0 23 44 00 00 20 02 53 d0 bb 43 00 00
>1a0d78		50 04 56 d0 00 00 00 00 50 04 5b d0 00 00 00 00
>1a0d88		20 05 60 d0 fe 42 00 00 20 06 66 d0 77 43 00 00
>1a0d98		20 03 6d d0 53 41 00 00 50 02 71 d0 00 00 00 00
>1a0da8		50 04 74 d0 00 00 00 00 20 04 79 d0 47 42 00 00
>1a0db8		20 02 7e d0 4d 41 00 00 20 04 81 d0 50 41 00 00
>1a0dc8		50 05 86 d0 00 00 00 00 50 05 8c d0 00 00 00 00
>1a0dd8		20 04 92 d0 4a 41 00 00 20 03 97 d0 82 44 00 00
>1a0de8		20 04 9b d0 1d 41 00 00 20 04 a0 d0 ad 40 00 00
>1a0df8		20 05 a5 d0 43 40 00 00 20 05 ab d0 d0 3f 00 00
>1a0e08		20 03 b1 d0 cc 3f 00 00 20 04 b5 d0 ad 3e 00 00
>1a0e18		20 04 ba d0 bf 3f 00 00 20 07 bf d0 c3 3f 00 00
>1a0e28		20 03 c7 d0 00 3e 00 00 20 04 cb d0 69 3d 00 00
>1a0e38		00 01 d0 d0 69 2a 01 00 30 03 d2 d0 35 4b 00 00
>1a0e48		30 04 d6 d0 85 4b 00 00 30 05 db d0 37 4c 00 00
>1a0e58		30 05 e1 d0 e9 4b 00 00 30 04 e7 d0 76 4c 00 00
>1a0e68		30 03 ec d0 cb 4c 00 00 30 03 f0 d0 10 4d 00 00
>1a0e78		30 03 f4 d0 99 4d 00 00 30 03 f8 d0 22 4e 00 00
>1a0e88		30 03 fc d0 84 4e 00 00 30 04 00 d1 a7 4a 00 00
>1a0e98		30 03 05 d1 46 4a 00 00 30 04 09 d1 f8 49 00 00
>1a0ea8		30 03 0e d1 a2 49 00 00 30 05 12 d1 d9 48 00 00
>1a0eb8		30 06 18 d1 f8 47 00 00 30 04 1f d1 43 47 00 00
>1a0ec8		10 03 24 d1 eb 4f 00 00 10 03 28 d1 b6 4f 00 00
>1a0ed8		10 04 2c d1 bf 6b 00 00 10 04 31 d1 02 50 00 00
>1a0ee8		10 03 36 d1 e6 68 00 00 20 05 3a d1 91 6a 00 00
>1a0ef8		10 04 40 d1 6c 6b 00 00 20 05 45 d1 78 6c 00 00
>1a0f08		20 03 4b d1 97 6d 00 00 10 04 4f d1 04 6d 00 00
>1a0f18		20 06 54 d1 0d 6e 00 00 20 04 5b d1 31 6f 00 00
>1a0f28		10 07 60 d1 b3 4f 00 00 20 03 68 d1 f7 3c 00 00
>1a0f38		20 05 6c d1 07 3c 00 00 20 09 72 d1 28 2c 00 00
>1a0f48		20 09 7c d1 b5 2b 00 00 20 0a 86 d1 e5 2b 00 00
>1a0f58		20 07 91 d1 22 2b 00 00 30 08 99 d1 1e 46 00 00
>1a0f68		20 07 a2 d1 b7 2a 00 00 30 08 aa d1 88 46 00 00
>1a0f78		20 08 b3 d1 6d 2d 00 00 20 08 bc d1 a1 2c 00 00
>1a0f88		20 06 c5 d1 a7 2e 00 00 20 09 cc d1 af 2f 00 00
>1a0f98		20 04 d6 d1 0c 31 00 00 20 04 db d1 7d 31 00 00
>1a0fa8		20 04 e0 d1 16 32 00 00 20 06 e5 d1 52 33 00 00
>1a0fb8		20 08 ec d1 f0 33 00 00 20 0a f5 d1 3e 34 00 00
>1a0fc8		20 07 00 d2 75 35 00 00 20 07 08 d2 f3 35 00 00
>1a0fd8		20 08 10 d2 65 36 00 00 20 06 19 d2 a2 36 00 00
>1a0fe8		20 07 20 d2 d2 39 00 00 50 06 28 d2 00 00 00 00
>1a0ff8		50 04 2f d2 00 00 00 00 20 06 34 d2 e7 3b 00 00
>1a1008		30 03 3b d2 da 4e 00 00 30 03 3f d2 ed 46 00 00
>1a1018		30 03 43 d2 ed 4e 00 00 30 03 47 d2 03 4f 00 00
>1a1028		30 03 4b d2 19 4f 00 00 30 02 4f d2 2f 4f 00 00
>1a1038		30 04 52 d2 45 4f 00 00 30 04 57 d2 5b 4f 00 00
>1a1048		30 04 5c d2 71 4f 00 00 30 03 61 d2 87 4f 00 00
>1a1058		30 03 65 d2 9d 4f 00 00 00 00 00 00 00 00 00 00
>1a1068		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 a9 ff
>1a1078		ff 85 ba e2 20 a9 17 85 bc c2 20 64 b7 64 bd e2
>1a1088		20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85 ea c2 10
>1a1098		86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5 10 48
>1a10a8		20 40 11 b0 03 20 c4 10 20 cc 12 c2 20 68 85 10
>1a10b8		68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b 08 c2
>1a10c8		20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca 86 0c e8
>1a10d8		c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc e9 00 85
>1a10e8		c2 20 cc 12 e2 20 a5 ea a0 00 00 97 c3 a9 00 a0
>1a10f8		01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00 00 97 c3
>1a1108		c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3 e2 20 c8
>1a1118		c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7 e2 20 a5
>1a1128		c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba e2 20 a5
>1a1138		c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20 48 a9 00
>1a1148		08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2 20 a5 bf
>1a1158		85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2 20 a9 00
>1a1168		00 85 cf e2 20 a9 00 85 d1 2b 28 18 60 c2 20 a0
>1a1178		05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85 ce c2 20
>1a1188		18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00 85 0e c2
>1a1198		20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69 00 85
>1a11a8		0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e c5 ce d0
>1a11b8		20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57 c2 20 a0
>1a11c8		02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85 bf 4c 7d
>1a11d8		12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e 69 00
>1a11e8		85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2 20 a5 c6
>1a11f8		c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5 cb 85 d1
>1a1208		c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8 b7 cf 85
>1a1218		cb 4c 5a 11 c2 20 a0 02 00 b7 c9 97 cf e2 20 c8
>1a1228		c8 b7 c9 97 cf 4c 7d 12 c2 20 a0 05 00 b7 c9 97
>1a1238		0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02 00 b7 c9
>1a1248		97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5 cf d0 14
>1a1258		e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2 20 a5 0e
>1a1268		85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf e2 20 c8
>1a1278		c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20 a5 cb 85
>1a1288		c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9 c2 20 a0
>1a1298		05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97 c3 c2 20
>1a12a8		a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97 c3 e2 20
>1a12b8		a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9 00 97 c3
>1a12c8		2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00 85 c3 e2
>1a12d8		20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5 c5 f0 04
>1a12e8		c9 18 b0 12 c2 20 a5 c3 f0 0c e2 20 a0 01 00 b7
>1a12f8		c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5 f0 04 c9
>1a1308		18 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01 00 b7 c3
>1a1318		3a 97 c3 d0 03 20 24 13 28 60 00 ea 08 c2 20 a5
>1a1328		bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf c2 20 a5
>1a1338		c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8 e2 20 97
>1a1348		c3 4c 0b 14 e2 20 a5 bf c5 c5 90 28 c2 20 a5 bd
>1a1358		c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3 e2 20 c8
>1a1368		c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20 a5 c5 85
>1a1378		bf 4c 0b 14 c2 20 a5 bd 85 08 e2 20 a5 bf 85 0a
>1a1388		e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b c2 20 a0
>1a1398		02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00 b7 08 97
>1a13a8		c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3 a0 02 00
>1a13b8		97 08 e2 20 a5 c5 c8 c8 97 08 4c 0b 14 c2 20 a0
>1a13c8		02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19 c2 20
>1a13d8		a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85 0a c2
>1a13e8		20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02 00 97 08
>1a13f8		e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2 20 a0 02
>1a1408		00 97 c3 20 10 14 28 60 08 c2 20 a5 bd 85 c3 e2
>1a1418		20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20 a5 c5 d0
>1a1428		03 4c b3 14 c2 20 a0 02 00 b7 c3 85 0c e2 20 c8
>1a1438		c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85 10 e2 20
>1a1448		c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0 08 e2 20
>1a1458		a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3 85 0c e2
>1a1468		20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3 e2 20 a5
>1a1478		0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85 0c e2 20
>1a1488		c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c 97 c3 e2
>1a1498		20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7 0c 97 c3
>1a14a8		e2 20 c8 c8 b7 0c 97 c3 4c 2c 14 28 60 08 c2 20
>1a14b8		64 16 64 18 28 60 08 c2 30 a5 16 d0 16 a5 18 d0
>1a14c8		12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3 85 18 64
>1a14d8		19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5 bb 3a c5
>1a14e8		17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a14f8		20 a9 03 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2
>1a1508		20 dc d4 08 28 60 c9 00 d0 05 c0 01 00 f0 05 09
>1a1518		30 97 16 c8 60 08 c2 30 64 0c a5 25 10 1a 18 a5
>1a1528		23 49 ff ff 69 01 00 85 23 a5 25 49 ff ff 69 00
>1a1538		00 85 25 a9 ff ff 85 0c 64 10 64 12 64 14 a2 1f
>1a1548		00 f8 06 23 26 25 a5 10 65 10 85 10 a5 12 65 12
>1a1558		85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2 20 20 be
>1a1568		14 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20 97 16
>1a1578		c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20 0e 15 b5
>1a1588		10 29 0f 20 0e 15 ca 10 eb c0 01 00 d0 0c a9 20
>1a1598		87 16 a0 01 00 a9 30 97 16 c8 a9 00 97 16 28 60
>1a15a8		00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0 04 e8
>1a15b8		c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a15c8		28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7 29 f0 25
>1a15d8		b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20 a9 01 00
>1a15e8		85 23 e2 20 64 25 80 15 c2 20 a9 ff ff 85 23 e2
>1a15f8		20 85 25 80 08 c2 20 64 23 e2 20 64 25 e2 20 a9
>1a1608		00 85 27 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>1a1618		5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5 25 48
>1a1628		ab c2 20 68 28 a6 23 20 aa 15 84 0c 08 c2 20 48
>1a1638		e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20 aa 15 c2
>1a1648		20 98 38 65 0c aa e2 20 a9 02 20 90 10 c2 20 a5
>1a1658		b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08 c2 20 48
>1a1668		e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd 00 00 f0
>1a1678		06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2 20 a5
>1a1688		2b 48 ab c2 20 68 28 a6 29 bd 00 00 97 08 f0 04
>1a1698		e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5 0a 85 25
>1a16a8		a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b 08 c2 20
>1a16b8		48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5 08 48 c2
>1a16c8		30 08 c2 20 48 e2 20 a5 25 48 ab c2 20 68 28 a6
>1a16d8		23 20 aa 15 98 aa e8 e2 20 a9 02 20 90 10 c2 20
>1a16e8		a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20 b7 23 97
>1a16f8		08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5 0a 85 25
>1a1708		c2 20 68 85 08 68 85 0a ab 2b 28 7a fa 60 08 e2
>1a1718		20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9 84 92 c2
>1a1728		30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b c4 8f b0
>1a1738		12 a5 29 d0 0e 4c 94 17 20 be 14 e2 20 a9 00 87
>1a1748		16 80 39 20 be 14 c2 30 18 a5 23 65 29 85 23 a5
>1a1758		25 69 00 00 85 25 a0 00 00 e2 20 a7 23 97 16 f0
>1a1768		1b c2 20 18 a5 23 69 01 00 85 23 a5 25 69 00 00
>1a1778		85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2 20 a5 16
>1a1788		85 23 a5 18 85 25 e2 20 a9 02 85 27 28 60 08 c2
>1a1798		30 20 bd 15 a5 23 c9 ff ff d0 05 20 f2 05 80 03
>1a17a8		20 04 06 28 60 08 c2 30 20 bd 15 a5 23 c9 01 00
>1a17b8		d0 05 20 f2 05 80 03 20 04 06 28 60 08 c2 30 20
>1a17c8		bd 15 a5 23 c9 00 00 d0 05 20 f2 05 80 03 20 04
>1a17d8		06 28 60 08 c2 30 20 bd 15 a5 23 c9 00 00 f0 05
>1a17e8		20 f2 05 80 03 20 04 06 28 60 08 c2 30 20 bd 15
>1a17f8		a5 23 c9 ff ff f0 05 20 f2 05 80 03 20 04 06 28
>1a1808		60 08 c2 30 20 bd 15 a5 23 c9 01 00 f0 05 20 f2
>1a1818		05 80 03 20 04 06 28 60 08 e2 20 a5 27 c9 02 d0
>1a1828		1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11 20 be 14
>1a1838		a9 00 87 16 c2 20 a5 16 85 23 a5 18 85 25 28 60
>1a1848		48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a1858		a9 00 00 85 00 85 1a a9 16 00 85 02 85 1c 22 3c
>1a1868		11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55 90 10 c5
>1a1878		59 f0 02 b0 05 20 ab 18 80 e4 28 2b 7a 68 60 20
>1a1888		b7 21 80 da 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a1898		a9 01 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20
>1a18a8		dc d4 08 08 c2 30 85 23 64 25 20 1d 15 a5 16 1a
>1a18b8		85 23 a5 18 85 25 20 bd 45 18 a5 1a 69 04 00 85
>1a18c8		00 a5 1c 69 00 00 85 02 e2 20 a9 20 20 18 00 c2
>1a18d8		20 20 ea 18 90 fb e2 20 a9 0d 20 18 00 20 b7 21
>1a18e8		28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a18f8		e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a7 00 f0
>1a1908		3a 30 05 20 18 00 80 29 c2 20 29 7f 00 0a 0a 0a
>1a1918		18 69 c0 0c 85 08 a9 1a 00 69 00 00 85 0a 08 e2
>1a1928		20 48 a9 1a 48 ab 68 28 a0 02 00 b7 08 aa 20 29
>1a1938		04 c2 20 20 da 20 ab 2b 28 18 60 ab 2b 28 38 60
>1a1948		08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21 a9 ff ff
>1a1958		85 23 85 25 85 29 85 2b e2 20 85 27 85 2d 28 60
>1a1968		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a1978		48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd 00 00 99
>1a1988		00 00 bd 02 00 99 02 00 e2 20 bd 04 00 99 04 00
>1a1998		c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28 60 08 0b
>1a19a8		8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a19b8		00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05 00 85 1f
>1a19c8		a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00 e2 20 b9
>1a19d8		04 00 9d 04 00 bd 00 00 7a ab 2b 28 60 08 0b 8b
>1a19e8		08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00
>1a19f8		48 ab 68 28 e2 20 c2 10 5a a4 21 99 00 00 88 84
>1a1a08		21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9 00 08
>1a1a18		5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2
>1a1a28		10 5a a4 21 c8 84 21 b9 00 00 c2 20 29 ff 00 7a
>1a1a38		ab 2b 28 60 08 e2 20 a9 01 20 e5 19 28 60 5a 08
>1a1a48		8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4 21 b9
>1a1a58		01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a 60 08 c2
>1a1a68		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a1a78		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 48 08 0b
>1a1a88		8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48 a9
>1a1a98		00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0 11 20 1f
>1a1aa8		0c 85 0c b9 01 00 20 1f 0c c5 0c f0 02 90 08 c2
>1a1ab8		20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68 38 60 4c
>1a1ac8		9d 08 08 e2 20 a9 00 8f 00 4d 00 a2 01 00 20 c9
>1a1ad8		1c 20 16 06 c2 20 a5 23 9f 00 4d 00 e2 20 af 00
>1a1ae8		4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 fb 20 e2 20
>1a1af8		a7 00 c9 90 f0 09 c9 2c d0 0a 20 da 20 80 cf 20
>1a1b08		da 20 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a1b18		a9 02 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20
>1a1b28		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a1b38		0a 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a1b48		d4 08 08 20 82 53 90 47 e2 20 a5 ea 29 80 d0 06
>1a1b58		20 83 51 4c 95 1b 20 f5 50 90 53 c2 20 a5 c2 48
>1a1b68		a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8 c8 b7 08
>1a1b78		85 c2 e2 20 a9 8f 20 e7 21 20 3c 1a 20 ca 1a 20
>1a1b88		59 68 20 46 1a c2 20 68 85 c2 68 85 c0 28 60 08
>1a1b98		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a1ba8		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2
>1a1bb8		20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00
>1a1bc8		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 0b 08
>1a1bd8		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20 da 20
>1a1be8		a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5 84 0c
>1a1bf8		e2 20 a9 02 a6 0c e8 20 be 14 a0 00 00 c4 0c f0
>1a1c08		29 a7 00 97 16 c8 20 da 20 80 f2 08 c2 20 48 a9
>1a1c18		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a1c28		ff 00 20 1b 1e e2 20 dc d4 08 a9 00 97 16 c2 20
>1a1c38		a5 16 85 23 a5 18 85 25 a9 02 00 85 27 20 da 20
>1a1c48		2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20 49 0c
>1a1c58		85 2f 20 3c 1a 08 e2 20 48 a9 00 48 ab 68 28 20
>1a1c68		6f 1c 20 46 1a 28 60 20 da 20 6c 2f 08 48 08 0b
>1a1c78		8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20 0e 1a
>1a1c88		89 80 00 f0 37 48 20 49 0c 85 2f 68 20 96 0c c9
>1a1c98		01 00 f0 08 c2 30 a2 29 08 20 a6 19 c2 30 a2 23
>1a1ca8		08 20 a6 19 08 e2 20 48 a9 00 48 ab 68 28 20 c6
>1a1cb8		1c a2 23 08 20 68 19 ab 2b 28 68 60 00 ea 6c 2f
>1a1cc8		08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a1cd8		a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0 03 4c
>1a1ce8		8c 1d 30 33 c9 20 d0 03 4c 86 1d c9 3a b0 04 c9
>1a1cf8		30 b0 56 c9 26 f0 52 c9 22 d0 03 4c 9f 1d c9 5b
>1a1d08		b0 07 c9 41 90 03 4c ab 1d c9 7b b0 07 c9 61 90
>1a1d18		03 4c ab 1d 4c 8c 1d c9 8f f0 40 c9 90 f0 41 20
>1a1d28		6c 0c c9 30 d0 0c 20 4b 1c a2 23 08 20 68 19 4c
>1a1d38		e1 1c c9 00 d0 4e a7 00 a6 21 e0 ff 7f f0 05 20
>1a1d48		85 1a b0 12 20 e5 19 80 35 c2 20 20 a4 59 a2 23
>1a1d58		08 20 68 19 80 83 20 75 1c 80 dd 20 e5 19 80 1e
>1a1d68		e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01 00 c9 01
>1a1d78		f0 3d c9 8f f0 05 20 75 1c 80 ee 20 0e 1a 20 da
>1a1d88		20 4c e1 1c a6 21 e0 ff 7f b0 24 bd 01 00 c9 01
>1a1d98		f0 1d 20 75 1c 80 ed 20 d5 1b a2 23 08 20 68 19
>1a1da8		4c e1 1c 20 4a 1b a2 23 08 20 68 19 4c e1 1c a2
>1a1db8		23 08 20 a6 19 fa 28 60 08 0b 8b 08 e2 20 48 a9
>1a1dc8		00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a1dd8		30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08 c2 20 48
>1a1de8		a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6 33 2b 28
>1a1df8		60 08 c2 30 29 ff 00 20 e2 1d 28 60 08 0b 08 c2
>1a1e08		20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6 33 b2 33
>1a1e18		2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a1e28		08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 23 a9 00
>1a1e38		00 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85 e9 c2
>1a1e48		20 a9 75 1e 85 e7 20 e5 52 c2 20 a5 d7 85 23 a5
>1a1e58		d9 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85 e9 c2
>1a1e68		20 a9 79 1e 85 e7 20 e5 52 28 2b ab 60 45 52 52
>1a1e78		00 45 52 4c 00 e2 20 c2 10 20 9c 03 af d3 08 00
>1a1e88		0a c2 20 29 ff 00 a8 08 e2 20 48 a9 1a 48 ab 68
>1a1e98		28 be cf 1e 20 29 04 c2 20 a5 d7 f0 27 a2 ff 1e
>1a1ea8		20 29 04 08 e2 20 48 a9 00 48 ab 68 28 c2 20 af
>1a1eb8		d7 08 00 8f 23 08 00 a9 00 00 8f 25 08 00 20 db
>1a1ec8		45 20 9c 03 4c 7d 27 03 1f 06 1f 0c 1f 19 1f 27
>1a1ed8		1f 35 1f 48 1f 5e 1f 6e 1f 7d 1f 8a 1f 9b 1f aa
>1a1ee8		1f b7 1f c5 1f d4 1f e5 1f fe 1f 12 20 26 20 3c
>1a1ef8		20 50 20 6b 20 83 20 20 61 74 00 4f 4b 00 42 72
>1a1f08		65 61 6b 00 53 79 6e 74 61 78 20 65 72 72 6f 72
>1a1f18		00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79 00 54
>1a1f28		79 70 65 20 6d 69 73 6d 61 74 63 68 00 56 61 72
>1a1f38		69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 00
>1a1f48		4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f 74 20
>1a1f58		66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e 64 65
>1a1f68		72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76 65 72
>1a1f78		66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61 6e 67
>1a1f88		65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75 6d 65
>1a1f98		6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e
>1a1fa8		64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72 00 4d
>1a1fb8		61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d 61 74
>1a1fc8		68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69 76 69
>1a1fd8		73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55 6e 61
>1a1fe8		62 6c 65 20 74 6f 20 72 65 61 64 20 64 69 72 65
>1a1ff8		63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74 6f 20
>1a2008		6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62 6c 65
>1a2018		20 74 6f 20 73 61 76 65 20 66 69 6c 65 00 55 6e
>1a2028		61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65 20 66
>1a2038		69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20 66 69
>1a2048		6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f
>1a2058		74 20 75 70 64 61 74 65 20 64 69 72 65 63 74 6f
>1a2068		72 79 00 43 6f 75 6c 64 20 6e 6f 74 20 63 6f 70
>1a2078		79 20 74 68 65 20 66 69 6c 65 00 41 72 67 75 6d
>1a2088		65 6e 74 20 6f 75 74 73 69 64 65 20 64 6f 6d 61
>1a2098		69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a20a8		20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48 a9 00
>1a20b8		08 5b 68 28 08 c2 20 a9 7d 1e 8f d4 08 00 e2 20
>1a20c8		a9 1a 8f d6 08 00 28 20 82 44 20 c3 3f 64 31 28
>1a20d8		2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20
>1a20e8		18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00 85 02
>1a20f8		2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2108		20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80 05 20
>1a2118		da 20 80 ed 2b 28 60 08 e2 20 a7 00 f0 09 c9 3a
>1a2128		f0 05 20 da 20 80 f3 28 60 08 e2 20 64 36 a7 00
>1a2138		f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0 1a c9 9e
>1a2148		f0 1a c9 a0 f0 16 20 da 20 80 e3 20 b7 21 c2 20
>1a2158		a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36 30 30
>1a2168		80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 da 20 28
>1a2178		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a2188		d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08
>1a2198		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a21a8		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08
>1a21b8		c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c 85 1a
>1a21c8		a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85 d7 18 a5
>1a21d8		1a 69 04 00 85 00 a5 1c 69 00 00 85 02 28 60 08
>1a21e8		e2 20 48 20 fb 20 68 e2 20 c7 00 d0 08 20 da 20
>1a21f8		20 fb 20 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2208		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2
>1a2218		20 dc d4 08 08 e2 20 20 fb 20 e2 20 a7 00 f0 10
>1a2228		c9 3a f0 0c c5 37 f0 05 20 da 20 80 ef 28 38 60
>1a2238		28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d c9 3a
>1a2248		f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60 08 0b
>1a2258		8b 08 c2 20 48 a9 00 08 5b 68 28 20 48 19 e2 20
>1a2268		a9 00 85 dc 22 3c 11 00 b0 4b a7 00 c9 3a d0 03
>1a2278		20 da 20 20 fb 20 a7 00 d0 03 4c 07 23 20 a7 04
>1a2288		b0 52 a7 00 10 10 20 6c 0c 85 0c c9 20 d0 03 4c
>1a2298		f5 22 a5 d2 f0 51 08 c2 20 48 a9 00 08 5b 68 28
>1a22a8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a22b8		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a22c8		20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2
>1a22d8		20 dc d4 08 20 8c 44 4c 07 23 08 e2 20 48 a9 00
>1a22e8		48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9 a7 00 20
>1a22f8		49 0c c2 20 85 2f 20 48 19 20 da 20 20 e2 22 ab
>1a2308		2b 28 60 08 58 20 9b 20 20 c0 1d e2 20 9c 8a 0f
>1a2318		c2 20 a5 1a 85 00 a5 1c 85 02 4c 4c 23 08 c2 20
>1a2328		a0 02 00 b7 1a 85 d7 20 b5 14 e2 20 a5 dc c9 03
>1a2338		f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20 a5 1c
>1a2348		69 00 85 02 c2 20 20 56 22 e2 20 a5 dc c9 03 f0
>1a2358		f3 c9 00 d0 31 e2 20 20 fb 20 a7 00 f0 28 c9 3a
>1a2368		f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a2378		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a2388		08 20 da 20 80 be 28 60 08 58 e2 20 a9 80 85 d2
>1a2398		9c 8a 0f 20 c0 1d c2 30 64 31 a0 02 00 b7 1a f0
>1a23a8		29 20 25 23 e2 20 a5 dc c9 01 f0 1e c9 02 f0 ea
>1a23b8		c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77 1a 85 1a
>1a23c8		e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9 00 85 d2
>1a23d8		28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 16 00 85
>1a23e8		0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0 1e b0 2b
>1a23f8		c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20 a5 0a
>1a2408		69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20 a5 08
>1a2418		85 1a e2 20 a5 0a 85 1c 28 38 60 28 18 60 08 e2
>1a2428		20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2 20 a5
>1a2438		0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85 0c e2
>1a2448		20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01 00 85
>1a2458		08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08 e2 20
>1a2468		a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e c5 02
>1a2478		f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20 a5 0e
>1a2488		e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08 e2 20
>1a2498		a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00 c2 20
>1a24a8		18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85 0e c2
>1a24b8		20 18 a5 d9 69 04 00 85 00 e2 20 a5 db 69 00 85
>1a24c8		02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9 e2 20 a5
>1a24d8		db e9 00 85 db 20 26 24 20 82 44 28 60 08 08 c2
>1a24e8		20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97 d9 18
>1a24f8		a5 d9 69 04 00 85 08 e2 20 a5 db 69 00 85 0a e2
>1a2508		20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7 c2 20 98
>1a2518		18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97 d9 c2
>1a2528		20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69 00 85 db
>1a2538		c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00 00 97 d9
>1a2548		c8 c0 05 00 d0 f8 20 82 44 28 60 0b 08 08 c2 20
>1a2558		48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08 a9 16
>1a2568		00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0 25 b0 1d
>1a2578		a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00 00 85
>1a2588		0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9 01 00
>1a2598		28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05 00 85
>1a25a8		10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6 10 c8 80
>1a25b8		f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d9 69 04
>1a25c8		00 85 0c a5 db 69 00 00 85 0e 18 a5 d9 65 10 85
>1a25d8		d9 a5 db 69 00 00 85 db 18 a5 d9 69 04 00 85 08
>1a25e8		a5 db 69 00 00 85 0a 20 65 24 c2 20 a5 10 a0 00
>1a25f8		00 97 00 a5 d7 a0 02 00 97 00 18 a5 00 69 04 00
>1a2608		85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20 b7 1a
>1a2618		97 00 f0 03 c8 80 f7 20 82 44 28 60 08 c2 30 85
>1a2628		d7 20 53 25 c9 00 00 f0 2c c9 01 00 f0 22 c2 20
>1a2638		a5 08 48 a5 0a 48 20 a2 24 68 85 0a 68 85 08 a5
>1a2648		1a 85 00 a5 1c 85 02 20 fb 20 e2 20 a7 00 f0 0a
>1a2658		20 a1 25 80 05 a5 d7 20 e5 24 28 60 0b 08 08 c2
>1a2668		20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2 00 00 bd
>1a2678		00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9 02 00 90
>1a2688		12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c 3a 8b 44
>1a2698		00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b 54 00 1a
>1a26a8		ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22 9d 00 4f
>1a26b8		e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00 e8 9d 00
>1a26c8		4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48 a9 00 08
>1a26d8		5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0 0a c9 7c
>1a26e8		f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00 85 8f a9
>1a26f8		12 27 85 55 20 64 26 80 e9 c2 20 a9 04 00 85 8f
>1a2708		a9 16 27 85 55 20 64 26 80 d8 44 49 52 00 42 52
>1a2718		55 4e 00 8b 08 20 3d 02 08 e2 20 48 a9 1a 48 ab
>1a2728		68 28 a2 69 d2 20 29 04 28 ab 60 08 e2 30 a9 01
>1a2738		20 1c 00 20 db 00 c9 00 f0 f9 c9 0d f0 02 80 f3
>1a2748		28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a2758		64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 61 09 c2
>1a2768		20 a5 d7 d0 05 20 0b 23 80 07 20 24 26 28 2b 38
>1a2778		60 28 2b 18 60 c2 30 a2 ff fe 9a 20 1b 27 20 08
>1a2788		00 20 0c 00 22 3c 11 00 a9 00 00 20 1c 00 20 cc
>1a2798		26 20 4a 27 b0 e8 80 e3 08 e2 20 20 68 08 c9 00
>1a27a8		f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48 a9 00
>1a27b8		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a27c8		00 20 1b 1e e2 20 dc d4 08 20 0e 16 80 08 20 d4
>1a27d8		53 80 03 20 43 56 28 60 08 e2 20 20 1a 08 c9 00
>1a27e8		f0 23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b 68 28
>1a27f8		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a2808		e2 20 dc d4 08 20 e6 53 80 03 20 38 56 28 60 08
>1a2818		e2 20 20 1a 08 c9 00 f0 23 c9 01 f0 24 08 c2 20
>1a2828		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a2838		20 29 ff 00 20 1b 1e e2 20 dc d4 08 20 f8 53 80
>1a2848		03 20 d9 56 28 60 20 84 07 20 b5 07 20 8e 56 60
>1a2858		a5 23 8f 1a 01 00 a5 29 8f 18 01 00 af 1e 01 00
>1a2868		85 23 60 08 c2 30 48 20 84 07 a5 2d c9 00 00 d0
>1a2878		0d a5 2b d0 09 da a6 29 20 ac 63 fa 80 1c 20 b5
>1a2888		07 c2 20 a5 2b 48 a5 29 48 20 37 62 c2 20 68 85
>1a2898		29 68 85 2b 20 d9 56 20 16 64 68 28 60 08 20 16
>1a28a8		06 20 47 06 c2 20 a5 23 25 29 85 23 a5 25 25 2b
>1a28b8		85 25 28 60 08 20 16 06 20 47 06 c2 20 a5 23 05
>1a28c8		29 85 23 a5 25 05 2b 85 25 28 60 08 20 16 06 c2
>1a28d8		20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85 25 28
>1a28e8		60 08 e2 20 20 68 08 c9 00 f0 2c c9 01 f0 2d c9
>1a28f8		02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2908		04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a2918		d4 08 20 96 17 80 08 20 f9 54 80 03 20 6e 5c 28
>1a2928		60 08 e2 20 20 68 08 c9 00 f0 2c c9 01 f0 2d c9
>1a2938		02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2948		04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a2958		d4 08 20 ad 17 80 08 20 1a 55 80 03 20 83 5c 28
>1a2968		60 08 e2 20 20 68 08 c9 00 f0 2c c9 01 f0 2d c9
>1a2978		02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2988		04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a2998		d4 08 20 c4 17 80 08 20 47 55 80 03 20 98 5c 28
>1a29a8		60 08 e2 20 20 68 08 c9 00 f0 2c c9 01 f0 2d c9
>1a29b8		02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a29c8		04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a29d8		d4 08 20 db 17 80 08 20 65 55 80 03 20 d7 5c 28
>1a29e8		60 08 e2 20 20 68 08 c9 00 f0 2c c9 01 f0 2d c9
>1a29f8		02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2a08		04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a2a18		d4 08 20 f2 17 80 08 20 83 55 80 03 20 c2 5c 28
>1a2a28		60 08 e2 20 20 68 08 c9 00 f0 2c c9 01 f0 2d c9
>1a2a38		02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2a48		04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a2a58		d4 08 20 09 18 80 08 20 b0 55 80 03 20 ad 5c 28
>1a2a68		60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0 1f 08 c2
>1a2a78		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a2a88		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 e2 20 a5
>1a2a98		26 49 80 85 26 80 16 c2 20 a5 23 49 ff ff 85 23
>1a2aa8		a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25 28 60 08
>1a2ab8		e2 20 20 c9 1c 20 28 07 20 73 05 a5 23 0a 0a 0a
>1a2ac8		0a 05 29 48 a9 2c 20 e7 21 20 c9 1c 20 28 07 20
>1a2ad8		73 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20 e7 21
>1a2ae8		20 c9 1c 20 28 07 20 73 05 a5 23 0a 0a 0a 0a 05
>1a2af8		29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 00 08
>1a2b08		af 68 8f 02 08 af 68 8f 04 08 af af 0e 08 af 29
>1a2b18		f7 8f 0e 08 af 20 1f 21 28 60 08 e2 20 20 c9 1c
>1a2b28		20 28 07 20 73 05 a5 23 0a 0a 0a 0a 05 29 48 a9
>1a2b38		2c 20 e7 21 20 c9 1c 20 28 07 20 73 05 a5 23 0a
>1a2b48		0a 0a 0a 05 29 48 a9 2c 20 e7 21 20 c9 1c 20 16
>1a2b58		06 20 a9 05 c2 20 a5 23 85 92 a5 29 85 23 20 73
>1a2b68		05 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2 20 a5 92
>1a2b78		85 23 20 73 05 e2 20 a5 23 0a 0a 0a 0a 05 29 48
>1a2b88		af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08 af 68
>1a2b98		8f 0a 08 af 68 8f 09 08 af 68 8f 06 08 af af 0e
>1a2ba8		08 af 29 f7 8f 0e 08 af 20 1f 21 28 60 08 e2 20
>1a2bb8		48 20 c9 1c 20 28 07 e2 20 a5 23 29 0f 0a 0a 0a
>1a2bc8		0a 83 01 a9 2c 20 e7 21 20 c9 1c 20 28 07 a5 23
>1a2bd8		29 0f 03 01 8f 1e 00 00 e2 20 68 28 60 08 c2 20
>1a2be8		f4 00 00 e2 20 20 c9 1c 20 28 07 a5 23 83 01 a9
>1a2bf8		2c 20 e7 21 20 c9 1c 20 28 07 a5 23 83 02 a9 2c
>1a2c08		20 e7 21 20 c9 1c 20 28 07 a5 23 8f 0d 00 af a3
>1a2c18		02 8f 0e 00 af a3 01 8f 0f 00 af c2 20 68 28 60
>1a2c28		08 c2 20 f4 00 00 e2 20 20 c9 1c 20 16 06 a5 23
>1a2c38		f0 16 a9 01 8f 04 00 af a9 20 8f 08 00 af 8f 09
>1a2c48		00 af 22 2c 11 00 80 0a a9 00 8f 04 00 af 22 2c
>1a2c58		11 00 a9 2c 85 37 20 1c 22 90 39 20 da 20 20 c9
>1a2c68		1c 20 28 07 a5 23 83 01 a9 2c 20 e7 21 20 c9 1c
>1a2c78		20 28 07 a5 23 83 02 a9 2c 20 e7 21 20 c9 1c 20
>1a2c88		28 07 a5 23 8f 05 00 af a3 02 8f 06 00 af a3 01
>1a2c98		8f 07 00 af c2 20 68 28 60 08 c2 20 3b 38 e9 05
>1a2ca8		00 1b e2 20 20 c9 1c 20 28 07 a5 23 c9 0a 90 1f
>1a2cb8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a2cc8		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 83
>1a2cd8		01 a9 2c 20 e7 21 20 c9 1c 20 28 07 a5 23 83 02
>1a2ce8		a9 2c 20 e7 21 20 c9 1c 20 28 07 a5 23 83 03 a9
>1a2cf8		2c 20 e7 21 20 c9 1c 20 28 07 a5 23 83 04 a9 2c
>1a2d08		20 e7 21 20 c9 1c 20 28 07 a5 23 83 05 a9 af 85
>1a2d18		a0 a3 01 0a c2 20 29 ff 00 aa bf 59 2d 1a 85 9e
>1a2d28		e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65 9e 85 9e
>1a2d38		e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3 04 97 9e
>1a2d48		a0 00 00 a3 05 97 9e c2 20 3b 18 69 05 00 1b 28
>1a2d58		60 00 20 00 24 00 28 00 2c 00 30 00 34 00 38 00
>1a2d68		3c 40 1f 80 1f da 5a 08 20 c9 1c 20 16 06 c2 20
>1a2d78		a5 23 89 00 01 d0 17 af 00 00 af 89 00 01 f0 0e
>1a2d88		e2 20 a9 00 8f 01 00 af a9 01 8f 01 00 af c2 20
>1a2d98		a5 23 8f 00 00 af e2 20 a5 24 c2 20 29 03 00 0a
>1a2da8		aa c2 20 bf f4 2d 1a 8f 10 f0 1a bf fc 2d 1a 8f
>1a2db8		12 f0 1a af 10 f0 1a 8f 08 01 00 af 12 f0 1a 8f
>1a2dc8		0a 01 00 af 0c 01 00 8f 14 f0 1a e2 20 af 0e 01
>1a2dd8		00 8f 16 f0 1a 22 2c 11 00 c2 20 af 1a 00 00 aa
>1a2de8		af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02 20 03
>1a2df8		40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00 64 00
>1a2e08		28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00 5c 00
>1a2e18		20 00 2a 00 34 00 43 00 16 00 34 00 da 08 c2 30
>1a2e28		c9 02 00 b0 1c 0a 0a aa bf 00 f0 1a 85 9e bf 02
>1a2e38		f0 1a 85 a0 c9 f0 00 b0 08 c9 b0 00 90 03 28 fa
>1a2e48		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a2e58		d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08
>1a2e68		da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf 08 f0 1a
>1a2e78		85 9e bf 0a f0 1a 85 a0 c9 40 00 b0 03 28 fa 60
>1a2e88		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a2e98		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08
>1a2ea8		c2 30 3b 38 e9 07 00 1b 20 c9 1c 20 28 07 c2 20
>1a2eb8		a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c 20 e7 21
>1a2ec8		20 c9 1c 20 28 07 a5 23 83 03 a9 2c 20 e7 21 20
>1a2ed8		c9 1c 20 28 07 a3 01 0a 0a 0a aa a3 03 d0 05 a5
>1a2ee8		23 0a 80 04 a5 23 38 2a 9f 00 01 af c2 20 a9 2c
>1a2ef8		00 85 37 20 1c 22 b0 37 c2 20 08 c2 20 a9 00 00
>1a2f08		85 23 a9 b0 00 85 25 e2 20 a9 00 85 27 28 80 27
>1a2f18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a2f28		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 c2
>1a2f38		20 20 da 20 20 c9 1c c2 20 a3 01 0a 0a aa a5 23
>1a2f48		9f 00 f0 1a 9f 08 f0 1a 83 04 a5 25 9f 02 f0 1a
>1a2f58		38 e9 b0 00 9f 0a f0 1a 83 06 a3 01 0a 0a 0a aa
>1a2f68		e2 20 a3 04 9f 01 01 af a3 05 9f 02 01 af a3 06
>1a2f78		9f 03 01 af a9 00 9f 04 01 af 9f 05 01 af c2 30
>1a2f88		3b 18 69 07 00 1b 28 60 08 c2 20 48 a9 00 08 5b
>1a2f98		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>1a2fa8		1b 1e e2 20 dc d4 08 08 c2 20 20 c9 1c 20 28 07
>1a2fb8		a5 23 20 68 2e c2 20 a5 9e 8f 05 04 af af 14 f0
>1a2fc8		1a 8f 08 04 af e2 20 a5 a0 8f 07 04 af af 16 f0
>1a2fd8		1a 8f 0a 04 af a9 00 8f 01 04 af a9 85 8f 00 04
>1a2fe8		af af 01 04 af 30 fa a9 00 8f 00 04 af 28 60 08
>1a2ff8		c2 20 a5 59 cf 10 f0 1a 90 1f 08 c2 20 48 a9 00
>1a3008		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>1a3018		00 20 1b 1e e2 20 dc d4 08 c2 30 a5 5d cf 12 f0
>1a3028		1a b0 d7 8f 08 01 00 af 10 f0 1a 8f 0a 01 00 18
>1a3038		af 0c 01 00 65 59 85 0c af 0e 01 00 69 00 00 85
>1a3048		0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0 85 0e e2 20
>1a3058		a5 55 87 0c 28 60 c2 20 a9 01 00 85 dd 38 a5 61
>1a3068		e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9 ff ff 85
>1a3078		dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d 10 0b 49
>1a3088		ff ff 1a 85 6d a9 ff ff 85 df a5 6d c9 01 00 d0
>1a3098		19 a5 69 c9 01 00 d0 10 20 f7 2f a5 61 85 59 a5
>1a30a8		65 85 5d 20 f7 2f 80 5b a5 6d c5 69 b0 04 a5 69
>1a30b8		80 06 a5 6d 49 ff ff 1a 48 0a 68 6a 85 71 20 f7
>1a30c8		2f a5 59 c5 61 d0 06 a5 5d c5 65 f0 36 a5 71 85
>1a30d8		75 a5 69 49 ff ff 1a c5 75 10 10 f0 0e 38 a5 71
>1a30e8		e5 6d 85 71 18 a5 59 65 dd 85 59 a5 75 c5 6d 10
>1a30f8		cd f0 cb 18 a5 71 65 69 85 71 18 a5 5d 65 df 85
>1a3108		5d 80 bb 60 08 c2 20 3b 38 e9 06 00 1b 08 c2 20
>1a3118		48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68
>1a3128		28 c2 30 20 c9 1c 20 28 07 83 01 a9 2c 00 20 e7
>1a3138		21 20 c9 1c 20 16 06 a5 23 83 03 a9 2c 00 20 e7
>1a3148		21 20 c9 1c 20 16 06 a5 23 83 05 a9 2c 00 20 e7
>1a3158		21 20 c9 1c 20 28 07 a5 23 85 55 a3 03 85 59 a3
>1a3168		05 85 5d a3 01 20 24 2e 20 f7 2f c2 20 3b 18 69
>1a3178		06 00 1b 28 60 08 c2 20 3b 38 e9 0a 00 1b 08 c2
>1a3188		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>1a3198		68 28 c2 30 20 c9 1c 20 28 07 83 01 a9 2c 00 20
>1a31a8		e7 21 20 c9 1c 20 16 06 a5 23 83 03 a9 2c 00 20
>1a31b8		e7 21 20 c9 1c 20 16 06 a5 23 83 05 a9 2c 00 20
>1a31c8		e7 21 20 c9 1c 20 16 06 a5 23 83 07 a9 2c 00 20
>1a31d8		e7 21 20 c9 1c 20 16 06 a5 23 83 09 a9 2c 00 20
>1a31e8		e7 21 20 c9 1c 20 28 07 a5 23 85 55 a3 03 85 59
>1a31f8		a3 05 85 5d a3 07 85 61 a3 09 85 65 a3 01 20 24
>1a3208		2e 20 5e 30 c2 20 3b 18 69 0a 00 1b 28 60 08 c2
>1a3218		20 3b 38 e9 0c 00 1b 08 c2 20 48 a9 00 08 5b 68
>1a3228		28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 20 c9 1c
>1a3238		20 28 07 83 01 a9 2c 00 20 e7 21 20 c9 1c 20 16
>1a3248		06 a5 23 83 03 a9 2c 00 20 e7 21 20 c9 1c 20 16
>1a3258		06 a5 23 83 05 a9 2c 00 20 e7 21 20 c9 1c 20 16
>1a3268		06 a5 23 83 07 a9 2c 00 20 e7 21 20 c9 1c 20 16
>1a3278		06 a5 23 83 09 a9 2c 00 20 e7 21 20 c9 1c 20 28
>1a3288		07 a5 23 83 0b a3 01 20 68 2e a9 07 00 8f 00 04
>1a3298		af c2 20 a3 05 8f 00 01 00 af 10 f0 1a 8f 02 01
>1a32a8		00 18 af 04 01 00 63 03 85 0c e2 20 af 06 01 00
>1a32b8		69 00 85 0e c2 20 18 a5 9e 65 0c 8f 05 04 af e2
>1a32c8		20 a5 a0 65 0e 8f 07 04 af c2 20 38 a3 07 e3 03
>1a32d8		85 0c 8f 08 04 af 38 af 10 f0 1a 8f 0e 04 af 38
>1a32e8		a3 09 e3 05 8f 0a 04 af e2 20 a3 0b 8f 01 04 af
>1a32f8		af 00 04 af 09 80 8f 00 04 af af 01 04 af 30 fa
>1a3308		a9 00 8f 00 04 af c2 20 3b 18 69 0c 00 1b 28 60
>1a3318		08 c2 20 c9 40 00 b0 13 0a 0a 0a 18 69 00 0c 85
>1a3328		9e a9 af 00 69 00 00 85 a0 28 60 08 c2 20 48 a9
>1a3338		00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29
>1a3348		ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 3b 38 e9
>1a3358		03 00 1b c2 30 20 c9 1c 20 28 07 a5 23 83 01 a9
>1a3368		2c 00 20 e7 21 e2 20 20 c9 1c 20 28 07 a5 23 c9
>1a3378		08 b0 56 83 03 a9 2c 20 e7 21 20 c9 1c 20 16 06
>1a3388		c2 20 38 a5 23 e9 00 00 85 23 a5 25 e9 b0 00 85
>1a3398		25 30 36 c2 20 a3 01 aa 20 18 33 a5 23 a0 01 00
>1a33a8		97 9e e2 20 a5 25 c8 c8 97 9e bf 18 f0 1a 29 f1
>1a33b8		85 0c a3 03 0a 29 0e 05 0c 87 9e 9f 18 f0 1a c2
>1a33c8		20 3b 18 69 03 00 1b 28 60 08 c2 20 48 a9 00 08
>1a33d8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a33e8		20 1b 1e e2 20 dc d4 08 08 c2 20 3b 38 e9 04 00
>1a33f8		1b c2 30 20 c9 1c 20 28 07 a5 23 83 01 a9 2c 00
>1a3408		20 e7 21 20 c9 1c 20 16 06 a5 23 83 03 a9 2c 00
>1a3418		20 e7 21 20 c9 1c 20 16 06 a3 01 20 18 33 a3 03
>1a3428		a0 04 00 97 9e a5 23 a0 06 00 97 9e c2 20 3b 18
>1a3438		69 04 00 1b 28 60 08 c2 20 3b 38 e9 03 00 1b c2
>1a3448		30 20 c9 1c 20 28 07 a5 23 83 01 a9 2c 00 20 e7
>1a3458		21 e2 20 20 c9 1c 20 16 06 a5 23 d0 04 83 03 80
>1a3468		04 a9 01 83 03 a9 2c 85 37 20 1c 22 b0 20 c2 30
>1a3478		a3 01 aa 20 18 33 e2 20 bf 18 f0 1a 29 fe 85 0c
>1a3488		a3 03 29 01 05 0c 9f 18 f0 1a 87 9e 80 36 c2 30
>1a3498		20 da 20 20 c9 1c 20 28 07 a5 23 c9 08 00 b0 2e
>1a34a8		0a 0a 0a 0a 85 0c a3 01 aa 20 18 33 e2 20 a3 03
>1a34b8		29 01 05 0c 85 0c bf 18 f0 1a 29 8e 05 0c 87 9e
>1a34c8		9f 18 f0 1a c2 20 3b 18 69 03 00 1b 28 60 08 c2
>1a34d8		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a34e8		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20
>1a34f8		c9 04 00 b0 19 8d 00 01 a9 04 00 8d 02 01 18 ad
>1a3508		04 01 69 80 02 85 9e a9 af 00 85 a0 28 60 08 c2
>1a3518		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a3528		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20
>1a3538		c9 04 00 b0 19 8d 00 01 a9 0c 00 8d 02 01 18 ad
>1a3548		04 01 69 00 02 85 9e a9 af 00 85 a0 28 60 08 c2
>1a3558		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a3568		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20
>1a3578		3b 38 e9 06 00 1b c2 20 20 c9 1c 20 28 07 a5 23
>1a3588		83 01 a9 2c 00 20 e7 21 20 c9 1c 20 28 07 a5 23
>1a3598		83 03 a9 2c 00 20 e7 21 20 c9 1c 20 28 07 a5 23
>1a35a8		83 05 a9 2c 00 20 e7 21 20 c9 1c 20 16 06 a3 01
>1a35b8		20 f5 34 a5 23 87 9e e2 20 38 a5 25 e9 b0 a0 02
>1a35c8		00 97 9e a3 05 d0 0d e2 20 a3 03 29 07 a0 03 00
>1a35d8		97 9e 80 0d e2 20 a3 03 29 07 09 08 a0 03 00 97
>1a35e8		9e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38
>1a35f8		e9 06 00 1b c2 20 20 c9 1c 20 28 07 a5 23 83 01
>1a3608		a9 2c 00 20 e7 21 20 c9 1c 20 16 06 a5 23 83 03
>1a3618		a9 2c 00 20 e7 21 20 c9 1c 20 16 06 a5 23 83 05
>1a3628		a9 2c 00 20 e7 21 20 c9 1c 20 16 06 a3 01 20 35
>1a3638		35 a5 23 a0 01 00 97 9e e2 20 38 a5 25 e9 b0 c8
>1a3648		c8 97 9e c2 20 a3 03 a0 04 00 97 9e a3 05 a0 06
>1a3658		00 97 9e c2 20 3b 18 69 06 00 1b 28 60 08 c2 20
>1a3668		f4 00 00 c2 20 20 c9 1c 20 28 07 a5 23 83 01 a9
>1a3678		2c 00 20 e7 21 20 c9 1c 20 16 06 a3 01 20 35 35
>1a3688		a5 23 d0 06 e2 20 a9 00 80 04 e2 20 a9 01 e2 20
>1a3698		a0 00 00 97 9e c2 20 68 28 60 08 c2 20 3b 38 e9
>1a36a8		04 00 1b c2 20 20 c9 1c 20 28 07 a5 23 83 01 a9
>1a36b8		2c 00 20 e7 21 20 c9 1c 20 16 06 a5 23 83 03 a9
>1a36c8		2c 00 20 e7 21 20 c9 1c 20 16 06 a3 01 20 35 35
>1a36d8		a5 23 a0 0a 00 97 9e a3 03 a0 08 00 97 9e c2 20
>1a36e8		3b 18 69 04 00 1b 28 60 0b 08 08 c2 20 48 a9 00
>1a36f8		08 5b 68 28 e2 20 a9 00 8f 58 f0 1a af 5c f0 1a
>1a3708		c9 b0 b0 1c 8f 24 04 af af 5b f0 1a 8f 23 04 af
>1a3718		af 5a f0 1a 8f 22 04 af a9 10 8f 58 f0 1a 80 17
>1a3728		38 e9 b0 8f 04 04 af af 5b f0 1a 8f 03 04 af af
>1a3738		5a f0 1a 8f 02 04 af af 59 f0 1a d0 3c af 58 f0
>1a3748		1a f0 1b af 5d f0 1a 8f 28 04 af af 5e f0 1a 8f
>1a3758		29 04 af af 5f f0 1a 8f 2a 04 af 82 8b 00 af 5d
>1a3768		f0 1a 8f 08 04 af af 5e f0 1a 8f 09 04 af af 5f
>1a3778		f0 1a 8f 0a 04 af 82 70 00 af 58 f0 1a 09 01 8f
>1a3788		58 f0 1a 89 10 f0 32 af 60 f0 1a 8f 28 04 af af
>1a3798		61 f0 1a 8f 29 04 af af 62 f0 1a 8f 2a 04 af af
>1a37a8		63 f0 1a 8f 2b 04 af af 64 f0 1a 8f 2c 04 af af
>1a37b8		65 f0 1a 8f 2d 04 af 80 30 af 60 f0 1a 8f 08 04
>1a37c8		af af 61 f0 1a 8f 09 04 af af 62 f0 1a 8f 0a 04
>1a37d8		af af 63 f0 1a 8f 0b 04 af af 64 f0 1a 8f 0c 04
>1a37e8		af af 65 f0 1a 8f 0d 04 af e2 20 af 69 f0 1a c9
>1a37f8		b0 b0 20 8f 27 04 af af 68 f0 1a 8f 26 04 af af
>1a3808		67 f0 1a 8f 25 04 af af 58 f0 1a 09 20 8f 58 f0
>1a3818		1a 80 17 38 e9 b0 8f 07 04 af af 68 f0 1a 8f 06
>1a3828		04 af af 67 f0 1a 8f 05 04 af af 66 f0 1a d0 3e
>1a3838		af 58 f0 1a 89 20 f0 1b af 6a f0 1a 8f 28 04 af
>1a3848		af 6b f0 1a 8f 29 04 af af 6c f0 1a 8f 2a 04 af
>1a3858		82 8b 00 af 6a f0 1a 8f 08 04 af af 6b f0 1a 8f
>1a3868		09 04 af af 6c f0 1a 8f 0a 04 af 82 70 00 af 58
>1a3878		f0 1a 09 02 8f 58 f0 1a 89 20 f0 32 af 6d f0 1a
>1a3888		8f 28 04 af af 6e f0 1a 8f 29 04 af af 6f f0 1a
>1a3898		8f 2a 04 af af 70 f0 1a 8f 2b 04 af af 71 f0 1a
>1a38a8		8f 2e 04 af af 72 f0 1a 8f 2f 04 af 80 30 af 6d
>1a38b8		f0 1a 8f 08 04 af af 6e f0 1a 8f 09 04 af af 6f
>1a38c8		f0 1a 8f 0a 04 af af 70 f0 1a 8f 0b 04 af af 71
>1a38d8		f0 1a 8f 0e 04 af af 72 f0 1a 8f 0f 04 af af 58
>1a38e8		f0 1a 29 30 f0 43 c9 10 f0 76 c9 20 d0 03 82 8a
>1a38f8		00 af 58 f0 1a 29 03 f0 23 c9 03 f0 23 08 c2 20
>1a3908		48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2
>1a3918		20 29 ff 00 20 1b 1e e2 20 dc d4 08 a9 01 80 02
>1a3928		a9 03 8f 20 04 af 82 7d 00 af 58 f0 1a 29 03 f0
>1a3938		23 c9 03 f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3948		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2
>1a3958		20 dc d4 08 a9 01 80 02 a9 03 8f 00 04 af 80 34
>1a3968		af 58 f0 1a 29 01 0a 09 11 8f 20 04 af af 58 f0
>1a3978		1a 29 02 09 11 8f 00 04 af 80 19 af 58 f0 1a 29
>1a3988		02 09 21 8f 20 04 af af 58 f0 1a 29 01 0a 09 21
>1a3998		8f 00 04 af af 00 04 af 09 80 8f 00 04 af af 58
>1a39a8		f0 1a 29 30 f0 0f af 20 04 af 09 80 8f 20 04 af
>1a39b8		ea ea ea ea ea af 01 04 af 89 80 d0 f8 a9 00 8f
>1a39c8		20 04 af 8f 00 04 af 28 2b 60 0b 08 e2 20 c2 10
>1a39d8		a9 00 a2 00 00 8f 59 f0 1a e8 e0 1a 00 d0 f6 20
>1a39e8		3b 22 c9 e6 f0 23 c9 e7 f0 5e 08 c2 20 48 a9 00
>1a39f8		08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff
>1a3a08		00 20 1b 1e e2 20 dc d4 08 20 e7 21 20 c9 1c 20
>1a3a18		16 06 c2 20 a5 23 8f 5a f0 1a e2 20 a5 25 8f 5c
>1a3a28		f0 1a a9 2c 20 e7 21 20 c9 1c 20 16 06 c2 20 a5
>1a3a38		23 8f 5d f0 1a e2 20 a5 25 8f 5f f0 1a e2 20 a9
>1a3a48		00 8f 59 f0 1a 82 74 00 20 e7 21 20 c9 1c 20 16
>1a3a58		06 c2 20 a5 23 8f 5a f0 1a e2 20 a5 25 8f 5c f0
>1a3a68		1a a9 2c 20 e7 21 20 c9 1c 20 d2 06 c2 20 a5 23
>1a3a78		8f 60 f0 1a 8d 00 01 a9 2c 00 20 e7 21 20 c9 1c
>1a3a88		20 d2 06 c2 20 a5 23 8f 62 f0 1a 8d 02 01 a9 2c
>1a3a98		00 20 e7 21 20 c9 1c 20 d2 06 c2 20 a5 23 8f 64
>1a3aa8		f0 1a c2 20 ad 04 01 8f 5d f0 1a e2 20 ad 06 01
>1a3ab8		8f 5f f0 1a e2 20 a9 01 8f 59 f0 1a e2 20 a9 9c
>1a3ac8		20 e7 21 20 3b 22 c9 e6 f0 23 c9 e7 f0 5e 08 c2
>1a3ad8		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a3ae8		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 20 e7 21
>1a3af8		20 c9 1c 20 16 06 c2 20 a5 23 8f 67 f0 1a e2 20
>1a3b08		a5 25 8f 69 f0 1a a9 2c 20 e7 21 20 c9 1c 20 16
>1a3b18		06 c2 20 a5 23 8f 6a f0 1a e2 20 a5 25 8f 6c f0
>1a3b28		1a e2 20 a9 00 8f 66 f0 1a 82 74 00 20 e7 21 20
>1a3b38		c9 1c 20 16 06 c2 20 a5 23 8f 67 f0 1a e2 20 a5
>1a3b48		25 8f 69 f0 1a a9 2c 20 e7 21 20 c9 1c 20 d2 06
>1a3b58		c2 20 a5 23 8f 6d f0 1a 8d 00 01 a9 2c 00 20 e7
>1a3b68		21 20 c9 1c 20 d2 06 c2 20 a5 23 8f 6f f0 1a 8d
>1a3b78		02 01 a9 2c 00 20 e7 21 20 c9 1c 20 d2 06 c2 20
>1a3b88		a5 23 8f 71 f0 1a c2 20 ad 04 01 8f 6a f0 1a e2
>1a3b98		20 ad 06 01 8f 6c f0 1a e2 20 a9 01 8f 66 f0 1a
>1a3ba8		c2 20 af 5d f0 1a cf 6a f0 1a d0 14 e2 20 af 5f
>1a3bb8		f0 1a cf 6c f0 1a d0 08 c2 20 20 f0 36 28 2b 60
>1a3bc8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3
>1a3bd8		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08
>1a3be8		c2 30 20 c9 1c 20 28 07 a5 23 48 a9 2c 00 20 e7
>1a3bf8		21 20 c9 1c 20 28 07 a4 23 fa 20 20 00 28 60 08
>1a3c08		20 fb 20 e2 20 a7 00 d0 03 4c af 3c c9 3a d0 03
>1a3c18		4c af 3c c9 22 d0 0b 20 d5 1b 20 bd 45 a9 3b 20
>1a3c28		e7 21 20 a7 04 90 44 20 82 53 90 3f a9 3f 20 18
>1a3c38		00 a9 20 20 18 00 20 10 00 e2 20 a5 ea c9 02 f0
>1a3c48		49 c9 00 d0 03 82 84 00 c9 01 f0 5d 08 c2 20 48
>1a3c58		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a3c68		29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 48 a9
>1a3c78		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a3c88		ff 00 20 1b 1e e2 20 dc d4 08 c2 20 a9 00 4c 85
>1a3c98		23 a9 00 00 85 25 e2 20 a9 02 85 27 c2 20 20 e5
>1a3ca8		52 a9 0d 00 20 18 00 28 60 c2 20 a5 00 85 40 a5
>1a3cb8		02 85 42 a9 00 4c 85 00 a9 00 00 85 02 20 a4 59
>1a3cc8		c2 20 a5 40 85 00 a5 42 85 02 80 d0 c2 20 a5 00
>1a3cd8		85 40 a5 02 85 42 a9 00 4c 85 00 a9 00 00 85 02
>1a3ce8		20 9d 08 c2 20 a5 40 85 00 a5 42 85 02 80 ad 08
>1a3cf8		20 fb 20 e2 20 a7 00 f0 47 c9 3a f0 43 20 a7 04
>1a3d08		90 40 20 82 53 90 3b 20 be 14 20 14 00 e2 20 a0
>1a3d18		00 00 97 16 a9 00 c8 97 16 c2 20 a5 16 85 23 a5
>1a3d28		18 85 25 e2 20 a9 02 85 27 20 e5 52 20 fb 20 a7
>1a3d38		00 f0 0d c9 3a f0 09 c9 2c d0 07 20 da 20 80 b0
>1a3d48		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a3d58		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a3d68		08 08 20 c9 1c 20 16 06 e2 20 a9 5c 85 a2 c2 20
>1a3d78		a5 23 85 a3 e2 20 a5 25 85 a5 e2 20 a9 2c 85 37
>1a3d88		20 1c 22 90 41 20 da 20 20 c9 1c 20 d2 06 c2 20
>1a3d98		a5 23 85 55 e2 20 a9 2c 85 37 20 1c 22 90 27 20
>1a3da8		da 20 20 c9 1c 20 d2 06 c2 20 a5 23 85 59 e2 20
>1a3db8		a9 2c 85 37 20 1c 22 90 0d 20 da 20 20 c9 1c 20
>1a3dc8		d2 06 c2 20 a4 23 a6 59 a5 55 0b 8b 08 22 a2 08
>1a3dd8		00 28 ab 2b 20 1f 21 28 60 08 c2 20 48 a9 00 08
>1a3de8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a3df8		20 1b 1e e2 20 dc d4 08 08 e2 20 20 fb 20 20 82
>1a3e08		53 90 64 a9 8f 20 e7 21 a9 01 20 e5 19 a2 01 00
>1a3e18		a9 00 8f 00 4d 00 20 c9 1c 20 16 06 c2 20 a5 23
>1a3e28		9f 00 4d 00 e2 20 af 00 4d 00 1a 8f 00 4d 00 30
>1a3e38		55 e8 e8 20 fb 20 a7 00 c9 2c f0 25 c9 90 d0 27
>1a3e48		20 da 20 20 00 66 c2 20 a5 c0 85 23 e2 20 a5 c2
>1a3e58		85 25 64 26 a5 ea 09 80 85 ea 85 27 20 e5 52 28
>1a3e68		60 20 da 20 4c 1e 3e 08 c2 20 48 a9 00 08 5b 68
>1a3e78		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 1b
>1a3e88		1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a3e98		e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a3ea8		e2 20 dc d4 08 08 20 fb 20 e2 20 a7 00 f0 28 c9
>1a3eb8		3a f0 24 20 a7 04 90 21 20 82 53 90 1c 20 00 3f
>1a3ec8		20 e5 52 20 fb 20 a7 00 f0 0d c9 3a f0 09 c9 2c
>1a3ed8		d0 07 20 da 20 80 cf 28 60 08 c2 20 48 a9 00 08
>1a3ee8		5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00
>1a3ef8		20 1b 1e e2 20 dc d4 08 08 a5 02 85 42 a5 00 85
>1a3f08		40 a5 1c 85 46 a5 1a 85 44 c2 20 a5 3a d0 04 a5
>1a3f18		38 f0 4e a5 38 85 00 a5 3a 85 02 a5 3c 85 1a a5
>1a3f28		3e 85 1c e2 20 a7 00 f0 53 c9 3a f0 4f c9 2c d0
>1a3f38		03 20 da 20 20 fb 20 a7 00 c9 22 f0 4e 20 c0 04
>1a3f48		b0 4e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a3f58		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a3f68		08 c2 20 a9 00 00 85 1a a9 16 00 85 1c 18 a5 1a
>1a3f78		69 04 00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 80
>1a3f88		85 35 a9 ab 85 37 20 31 21 80 a9 20 d5 1b 80 03
>1a3f98		20 c7 1a c2 20 a5 00 85 38 a5 02 85 3a a5 1a 85
>1a3fa8		3c a5 1c 85 3e a5 44 85 1a a5 46 85 1c a5 40 85
>1a3fb8		00 a5 42 85 02 28 60 20 1f 21 60 64 38 64 3a 64
>1a3fc8		3c 64 3e 60 20 24 00 60 20 c9 1c c2 20 a5 25 48
>1a3fd8		a5 23 48 e2 20 a7 00 c9 2c d0 22 20 da 20 20 c9
>1a3fe8		1c c2 20 a5 26 d0 35 68 85 08 68 85 0a c2 20 a5
>1a3ff8		23 87 08 e2 20 a0 02 00 a5 25 97 08 60 08 c2 20
>1a4008		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>1a4018		20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 48
>1a4028		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a4038		29 ff 00 20 1b 1e e2 20 dc d4 08 20 c9 1c c2 20
>1a4048		a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 19 20 da
>1a4058		20 20 c9 1c c2 20 a5 25 d0 2c 68 85 08 68 85 0a
>1a4068		c2 20 a5 23 87 08 60 08 c2 20 48 a9 00 08 5b 68
>1a4078		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 1b
>1a4088		1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a4098		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a40a8		e2 20 dc d4 08 20 c9 1c c2 20 a5 25 48 a5 23 48
>1a40b8		e2 20 a7 00 c9 2c d0 1f 20 da 20 20 c9 1c e2 20
>1a40c8		a5 24 d0 32 c2 20 a5 25 d0 2c 68 85 08 68 85 0a
>1a40d8		e2 20 a5 23 87 08 60 08 c2 20 48 a9 00 08 5b 68
>1a40e8		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 1b
>1a40f8		1e e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a4108		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a4118		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4128		20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2
>1a4138		20 dc d4 08 08 e2 20 a7 00 f0 05 20 da 20 80 f7
>1a4148		28 60 08 28 60 08 28 60 08 28 60 08 c2 20 a5 1c
>1a4158		20 e2 1d a5 1a 20 e2 1d a5 02 48 a5 00 48 20 1f
>1a4168		21 a5 02 20 e2 1d a5 00 20 e2 1d 68 85 00 68 85
>1a4178		02 20 fb 20 20 82 53 b0 1f 08 c2 20 48 a9 00 08
>1a4188		5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20 29 ff 00
>1a4198		20 1b 1e e2 20 dc d4 08 e2 20 a5 ea 20 f9 1d a5
>1a41a8		e9 20 f9 1d c2 20 a5 e7 20 e2 1d 20 fb 20 e2 20
>1a41b8		a7 00 c9 8a d0 6a a5 ea c9 00 f0 04 c9 01 f0 00
>1a41c8		20 da 20 20 c9 1c 20 e5 52 e2 20 a9 9c 20 e7 21
>1a41d8		20 c9 1c c2 20 a5 27 20 e2 1d a5 25 20 e2 1d a5
>1a41e8		23 20 e2 1d e2 20 a9 9d 85 37 20 1c 22 90 1b 20
>1a41f8		da 20 20 c9 1c e2 20 a5 27 20 e2 1d c2 20 a5 25
>1a4208		20 e2 1d a5 23 20 e2 1d 80 14 c2 20 a9 00 00 20
>1a4218		e2 1d a9 00 00 20 e2 1d a9 01 00 20 e2 1d 28 60
>1a4228		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4238		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08
>1a4248		8b 08 e2 20 48 a9 00 48 ab 68 28 08 c2 20 48 a9
>1a4258		00 08 5b 68 28 c2 30 a4 33 c8 c8 c2 20 b9 0c 00
>1a4268		85 e7 b9 0e 00 e2 20 85 e9 b9 10 00 85 ea c2 20
>1a4278		5a 20 83 51 7a c2 20 b9 00 00 85 29 b9 02 00 85
>1a4288		2b e2 20 b9 04 00 85 2d c2 20 5a 20 a0 27 20 e5
>1a4298		52 7a c2 20 b9 06 00 85 29 b9 08 00 85 2b e2 20
>1a42a8		b9 0a 00 85 2d c2 20 b9 02 00 30 0a 20 29 2a 20
>1a42b8		df 05 f0 28 80 08 20 e9 29 20 df 05 f0 1e c2 20
>1a42c8		b9 12 00 85 00 b9 14 00 85 02 b9 16 00 85 1a b9
>1a42d8		18 00 85 1c e2 20 a9 03 85 dc 80 17 a2 23 08 20
>1a42e8		a6 19 c2 20 18 a5 33 69 1a 00 85 33 a5 35 69 00
>1a42f8		00 85 35 ab 28 60 08 a5 1a 48 a5 1c 48 20 fb 20
>1a4308		20 9d 08 a5 23 f0 26 20 da 23 90 42 e2 20 a9 02
>1a4318		85 dc 20 1f 21 c2 20 68 20 e2 1d 68 20 e2 1d a5
>1a4328		02 20 e2 1d a5 00 20 e2 1d e6 31 28 60 68 68 08
>1a4338		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a4348		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 68 68
>1a4358		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3
>1a4368		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 08
>1a4378		c2 30 a5 31 f0 1e 20 04 1e 85 00 20 04 1e 85 02
>1a4388		20 04 1e 85 1a 20 04 1e 85 1c c6 31 e2 20 a9 03
>1a4398		85 dc 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a43a8		a9 07 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20
>1a43b8		dc d4 08 08 20 c9 1c 20 df 05 f0 1c e2 20 a9 97
>1a43c8		20 e7 21 20 9d 08 20 df 05 f0 12 20 da 23 90 2c
>1a43d8		e2 20 a9 02 85 dc 80 03 20 1f 21 28 60 08 c2 20
>1a43e8		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>1a43f8		20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 48
>1a4408		a9 00 08 5b 68 28 e2 20 a9 06 8f d3 08 00 c2 20
>1a4418		29 ff 00 20 1b 1e e2 20 dc d4 08 08 e2 20 a9 01
>1a4428		85 dc 28 60 08 20 fb 20 20 9d 08 a5 23 f0 0d 20
>1a4438		da 23 90 27 e2 20 a9 02 85 dc 28 60 08 c2 20 48
>1a4448		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a4458		29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 48 a9
>1a4468		00 08 5b 68 28 e2 20 a9 06 8f d3 08 00 c2 20 29
>1a4478		ff 00 20 1b 1e e2 20 dc d4 08 20 48 19 20 68 10
>1a4488		20 82 50 60 08 a7 00 10 03 20 da 20 20 82 53 b0
>1a4498		03 4c 03 45 e2 20 a5 ea 48 a5 e9 48 a5 e8 48 a5
>1a44a8		e7 48 20 3b 22 c9 8f d0 0e a9 8f 20 e7 21 a9 00
>1a44b8		8f 00 4d 00 20 ca 1a 20 fb 20 e2 20 a7 00 c9 8a
>1a44c8		f0 03 4c 03 45 20 da 20 20 c9 1c 68 85 e7 68 85
>1a44d8		e8 68 85 e9 68 85 ea 29 80 f0 1b 20 f5 50 90 3a
>1a44e8		c2 20 a0 09 00 b7 08 85 c0 e2 20 c8 c8 b7 08 85
>1a44f8		c2 20 ec 67 80 03 20 e5 52 28 60 08 c2 20 48 a9
>1a4508		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a4518		ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 48 a9 00
>1a4528		08 5b 68 28 e2 20 a9 05 8f d3 08 00 c2 20 29 ff
>1a4538		00 20 1b 1e e2 20 dc d4 08 08 e2 20 20 3b 22 c9
>1a4548		00 f0 6d 20 c9 1c e2 20 a5 27 c9 ff f0 1b c9 02
>1a4558		d0 05 20 bd 45 80 12 c9 00 d0 05 20 db 45 80 09
>1a4568		c9 01 d0 4f 20 ee 45 80 00 20 fb 20 a7 00 f0 40
>1a4578		c9 3a f0 3c c9 2c f0 23 c9 3b f0 24 08 c2 20 48
>1a4588		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a4598		29 ff 00 20 1b 1e e2 20 dc d4 08 a9 09 20 18 00
>1a45a8		20 da 20 20 fb 20 a7 00 f0 09 c9 3a f0 05 80 93
>1a45b8		20 9c 03 28 60 08 8b 08 c2 20 48 a9 00 08 5b 68
>1a45c8		28 e2 20 a0 00 00 b7 23 f0 06 20 18 00 c8 80 f6
>1a45d8		ab 28 60 08 c2 20 20 1d 15 a5 16 85 23 a5 18 85
>1a45e8		25 20 bd 45 28 60 08 20 4b 5d c2 20 a5 16 85 23
>1a45f8		a5 18 85 25 20 bd 45 28 60 08 e2 20 85 b5 4a 4a
>1a4608		4a 4a 29 0f 18 69 30 97 16 c8 a5 b5 29 0f 18 69
>1a4618		30 97 16 c8 28 60 e2 20 a9 8f 20 e7 21 08 20 c9
>1a4628		1c e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20
>1a4638		be 14 a0 00 00 af 06 08 af 20 01 46 a9 2f 97 16
>1a4648		c8 af 09 08 af 20 01 46 a9 2f 97 16 c8 af 0f 08
>1a4658		af 20 01 46 af 0a 08 af 20 01 46 a9 00 97 16 af
>1a4668		0e 08 af 29 f7 8f 0e 08 af c2 20 a5 16 85 23 a5
>1a4678		18 85 25 e2 20 a9 02 85 27 28 e2 20 20 da 20 60
>1a4688		e2 20 a9 8f 20 e7 21 08 20 c9 1c e2 20 c2 10 af
>1a4698		0e 08 af 09 08 8f 0e 08 af 20 be 14 a0 00 00 af
>1a46a8		04 08 af 29 7f 20 01 46 a9 3a 97 16 c8 af 02 08
>1a46b8		af 20 01 46 a9 3a 97 16 c8 af 00 08 af 20 01 46
>1a46c8		a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08 af c2 20
>1a46d8		a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2
>1a46e8		20 20 da 20 60 e2 20 a9 8f 20 e7 21 08 20 c9 1c
>1a46f8		e2 20 a9 01 85 27 a9 03 8f 00 e2 af a9 01 8f 01
>1a4708		e2 af c2 30 af 84 e8 af 8f 08 e2 af af 84 e8 af
>1a4718		29 ff 7f 8f 0a e2 af a9 ff ff 8f 0c e2 af a9 ff
>1a4728		7f 8f 0e e2 af ea ea ea af 08 e2 af 85 23 af 0a
>1a4738		e2 af 85 25 28 e2 20 20 da 20 60 e2 20 a9 8f 20
>1a4748		e7 21 08 c2 30 20 c9 1c 20 a8 06 c2 20 a5 25 48
>1a4758		a5 23 48 20 fb 20 e2 20 a7 00 c9 2c f0 03 4c ba
>1a4768		47 20 da 20 20 c9 1c 20 d2 06 c2 20 a5 23 48 20
>1a4778		fb 20 e2 20 a7 00 c9 2c f0 03 4c ba 47 20 da 20
>1a4788		20 c9 1c 20 d2 06 c2 20 a5 23 85 8f e2 20 a5 25
>1a4798		85 91 c2 20 68 85 29 a9 00 00 85 2b 68 85 23 68
>1a47a8		85 25 e2 20 a9 02 85 27 20 16 17 e2 20 20 da 20
>1a47b8		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a47c8		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a47d8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a47e8		d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08
>1a47f8		e2 20 a9 8f 20 e7 21 08 c2 30 20 c9 1c e2 20 a5
>1a4808		27 c9 02 f0 03 4c 7c 48 c2 20 a5 25 48 a5 23 48
>1a4818		20 fb 20 e2 20 a7 00 c9 2c f0 03 4c 9b 48 20 da
>1a4828		20 20 c9 1c e2 20 a5 27 c9 00 d0 48 c2 20 a5 23
>1a4838		85 8f c2 20 68 85 23 68 85 25 e2 20 a9 02 85 27
>1a4848		e2 20 a0 00 00 b7 23 f0 03 c8 80 f9 c2 20 98 38
>1a4858		e5 8f 30 09 85 29 a9 00 00 85 2b 80 07 a9 00 00
>1a4868		85 29 85 2b e2 20 a9 00 85 2d 20 16 17 e2 20 20
>1a4878		da 20 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4888		a9 04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20
>1a4898		dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a48a8		02 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a48b8		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a48c8		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a48d8		08 e2 20 a9 8f 20 e7 21 08 c2 30 20 c9 1c e2 20
>1a48e8		a5 27 c9 02 f0 03 4c 45 49 c2 20 a5 25 48 a5 23
>1a48f8		48 20 fb 20 e2 20 a7 00 c9 2c f0 03 4c 64 49 20
>1a4908		da 20 20 c9 1c e2 20 a5 27 c9 00 d0 30 c2 20 a5
>1a4918		23 85 8f c2 20 a9 00 00 85 29 a9 00 00 85 2b e2
>1a4928		20 a9 00 85 2d c2 20 68 85 23 68 85 25 e2 20 a9
>1a4938		02 85 27 20 16 17 e2 20 20 da 20 28 60 08 c2 20
>1a4948		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a4958		20 29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 48
>1a4968		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a4978		29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 48 a9
>1a4988		00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29
>1a4998		ff 00 20 1b 1e e2 20 dc d4 08 e2 20 a9 8f 20 e7
>1a49a8		21 20 c9 1c c2 10 e2 20 a5 27 c9 02 d0 23 c2 20
>1a49b8		a5 00 85 40 a5 02 85 42 a5 23 85 00 a5 25 85 02
>1a49c8		20 9d 08 a5 40 85 00 a5 42 85 02 e2 20 20 da 20
>1a49d8		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a49e8		d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08
>1a49f8		e2 20 a9 8f 20 e7 21 08 20 c9 1c c2 10 e2 20 a5
>1a4a08		27 c9 00 d0 1a 20 1d 15 c2 20 a5 16 85 23 a5 18
>1a4a18		85 25 e2 20 a9 02 85 27 28 e2 20 20 da 20 60 08
>1a4a28		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a4a38		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 e2 20
>1a4a48		a9 8f 20 e7 21 08 20 c9 1c 20 a8 06 c2 20 64 0c
>1a4a58		64 0e e2 30 a0 00 b7 23 c9 20 f0 04 c9 24 d0 03
>1a4a68		c8 80 f3 b7 23 20 d1 04 90 1e c2 20 06 0c 26 0e
>1a4a78		06 0c 26 0e 06 0c 26 0e 06 0c 26 0e e2 20 20 f2
>1a4a88		04 05 0c 85 0c c8 80 db c2 20 a5 0c 85 23 a5 0e
>1a4a98		85 25 e2 20 a9 00 85 27 28 e2 20 20 da 20 60 e2
>1a4aa8		20 a9 8f 20 e7 21 08 20 c9 1c 20 16 06 20 be 14
>1a4ab8		e2 30 a0 ff a9 00 97 16 88 a5 23 29 0f aa bf 00
>1a4ac8		d0 1a 97 16 88 a5 23 29 f0 4a 4a 4a 4a aa bf 00
>1a4ad8		d0 1a 97 16 88 a5 24 85 23 a5 25 85 24 a5 26 85
>1a4ae8		25 a9 00 85 26 a5 23 d0 d0 a5 24 d0 cc a5 25 d0
>1a4af8		c8 98 38 65 16 85 23 a5 17 85 24 a5 18 85 25 a5
>1a4b08		19 85 26 a9 02 85 27 28 e2 20 20 da 20 60 08 c2
>1a4b18		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4b28		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 e2 20 a9
>1a4b38		8f 20 e7 21 20 c9 1c e2 20 a5 27 c9 02 d0 1f 8b
>1a4b48		a5 25 48 ab c2 10 a6 23 20 aa 15 ab 84 23 c2 20
>1a4b58		64 25 e2 20 a9 00 85 27 e2 20 20 da 20 60 08 c2
>1a4b68		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4b78		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 e2 20 a9
>1a4b88		8f 20 e7 21 20 c9 1c e2 20 a5 27 c9 00 d0 33 a5
>1a4b98		25 c9 b0 90 1b c9 f0 b0 17 e2 20 a7 23 c2 20 af
>1a4ba8		02 09 af 89 00 80 d0 f7 e2 20 af 01 09 af 80 04
>1a4bb8		e2 20 a7 23 85 23 64 24 64 25 64 30 e2 20 20 da
>1a4bc8		20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a4bd8		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a4be8		08 e2 20 a9 8f 20 e7 21 20 c9 1c e2 20 a5 27 c9
>1a4bf8		00 d0 1d c2 20 a7 23 85 0c e2 20 a0 02 00 b7 23
>1a4c08		85 25 64 26 c2 20 a5 0c 85 23 e2 20 20 da 20 60
>1a4c18		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a4c28		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 e2
>1a4c38		20 a9 8f 20 e7 21 20 c9 1c e2 20 a5 27 c9 00 d0
>1a4c48		0e c2 20 a7 23 85 23 64 25 e2 20 20 da 20 60 08
>1a4c58		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a4c68		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 e2 20
>1a4c78		a9 8f 20 e7 21 20 c9 1c e2 20 a5 27 c9 00 d0 24
>1a4c88		20 be 14 a5 23 87 16 a9 00 a0 01 00 97 16 c2 20
>1a4c98		a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 e2 20
>1a4ca8		20 da 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4cb8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20
>1a4cc8		dc d4 08 e2 20 a9 8f 20 e7 21 20 c9 1c e2 20 a5
>1a4cd8		27 c9 02 d0 14 a7 23 85 23 64 24 64 25 64 26 a9
>1a4ce8		00 85 27 e2 20 20 da 20 60 08 c2 20 48 a9 00 08
>1a4cf8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a4d08		20 1b 1e e2 20 dc d4 08 e2 20 a9 8f 20 e7 21 20
>1a4d18		c9 1c e2 20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 52
>1a4d28		a5 25 d0 4e a5 24 d0 4a c2 10 20 be 14 a4 23 e2
>1a4d38		20 a9 00 97 16 88 30 07 a9 20 97 16 88 10 fb a9
>1a4d48		02 85 27 c2 20 a5 16 85 23 a5 18 85 25 e2 20 20
>1a4d58		da 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4d68		04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a4d78		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a4d88		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a4d98		08 e2 20 a9 8f 20 e7 21 20 c9 1c e2 20 a5 27 c9
>1a4da8		00 d0 39 e2 20 a5 26 d0 52 a5 25 d0 4e a5 24 d0
>1a4db8		4a c2 10 20 be 14 a4 23 e2 20 a9 00 97 16 88 30
>1a4dc8		07 a9 09 97 16 88 10 fb a9 02 85 27 c2 20 a5 16
>1a4dd8		85 23 a5 18 85 25 e2 20 20 da 20 60 08 c2 20 48
>1a4de8		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a4df8		29 ff 00 20 1b 1e e2 20 dc d4 08 08 c2 20 48 a9
>1a4e08		00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29
>1a4e18		ff 00 20 1b 1e e2 20 dc d4 08 e2 20 a9 8f 20 e7
>1a4e28		21 20 c9 1c e2 20 a5 27 c9 00 f0 23 c9 01 f0 3e
>1a4e38		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a4e48		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 c2
>1a4e58		20 a5 25 10 21 49 ff ff 85 25 a5 23 49 ff ff 18
>1a4e68		69 01 00 85 23 a5 25 69 00 00 85 25 80 08 e2 20
>1a4e78		a5 26 29 7f 85 26 e2 20 20 da 20 60 e2 20 a9 8f
>1a4e88		20 e7 21 20 c9 1c e2 20 a5 27 c9 00 d0 25 c2 20
>1a4e98		a5 25 30 12 d0 04 a5 23 f0 13 a9 00 00 85 25 a9
>1a4ea8		01 00 85 23 80 07 a9 ff ff 85 25 85 23 e2 20 20
>1a4eb8		da 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4ec8		04 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a4ed8		d4 08 e2 20 a9 8f 20 e7 21 20 c9 1c 20 16 06 e2
>1a4ee8		20 20 da 20 60 e2 20 a9 8f 20 e7 21 20 c9 1c 20
>1a4ef8		84 07 20 ab 61 e2 20 20 da 20 60 e2 20 a9 8f 20
>1a4f08		e7 21 20 c9 1c 20 84 07 20 da 61 e2 20 20 da 20
>1a4f18		60 e2 20 a9 8f 20 e7 21 20 c9 1c 20 84 07 20 09
>1a4f28		62 e2 20 20 da 20 60 e2 20 a9 8f 20 e7 21 20 c9
>1a4f38		1c 20 84 07 20 37 62 e2 20 20 da 20 60 e2 20 a9
>1a4f48		8f 20 e7 21 20 c9 1c 20 84 07 20 60 63 e2 20 20
>1a4f58		da 20 60 e2 20 a9 8f 20 e7 21 20 c9 1c 20 84 07
>1a4f68		20 36 63 e2 20 20 da 20 60 e2 20 a9 8f 20 e7 21
>1a4f78		20 c9 1c 20 84 07 20 82 63 e2 20 20 da 20 60 e2
>1a4f88		20 a9 8f 20 e7 21 20 c9 1c 20 84 07 20 16 64 e2
>1a4f98		20 20 da 20 60 e2 20 a9 8f 20 e7 21 20 c9 1c 20
>1a4fa8		84 07 20 98 64 e2 20 20 da 20 60 00 ea 60 08 0b
>1a4fb8		08 c2 20 48 a9 00 08 5b 68 28 c2 30 c2 20 a9 00
>1a4fc8		00 85 d9 e2 20 a9 16 85 db c2 30 a9 00 00 a0 00
>1a4fd8		00 97 d9 a0 02 00 97 d9 a0 04 00 97 d9 20 b0 20
>1a4fe8		2b 28 60 8b 08 c2 20 a9 00 00 85 1a a9 16 00 85
>1a4ff8		1c 20 b0 20 20 90 23 28 ab 60 08 c2 20 64 55 a9
>1a5008		ff 7f 85 59 20 9c 03 20 3b 22 29 ff 00 c9 00 00
>1a5018		f0 2c c9 81 00 f0 1a 20 fb 20 20 9d 08 a5 23 85
>1a5028		55 20 3b 22 29 ff 00 c9 00 00 f0 12 c9 81 00 d0
>1a5038		2a 20 e7 21 20 fb 20 20 9d 08 a5 23 85 59 a5 1c
>1a5048		48 a5 1a 48 a5 02 48 a5 00 48 20 48 18 68 85 00
>1a5058		68 85 02 68 85 1a 68 85 1c 28 60 08 c2 20 48 a9
>1a5068		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a5078		ff 00 20 1b 1e e2 20 dc d4 08 08 08 c2 20 48 a9
>1a5088		00 08 5b 68 28 c2 20 64 e4 64 e7 e2 20 64 e6 64
>1a5098		e9 64 ea c2 20 38 a5 d9 69 04 00 85 e1 e2 20 a5
>1a50a8		db 69 00 85 e3 28 60 c9 5f f0 1a c9 3a b0 04 c9
>1a50b8		30 b0 12 c9 5b b0 04 c9 41 b0 0a c9 7b b0 04 c9
>1a50c8		61 b0 02 18 60 38 60 08 e2 20 c2 10 a0 00 00 b7
>1a50d8		0c f0 0a d7 e7 d0 13 c8 c0 08 00 d0 f2 b7 e7 20
>1a50e8		1b 05 20 af 50 b0 03 28 38 60 28 18 60 08 e2 20
>1a50f8		c2 10 a0 00 00 a2 00 00 b7 e7 f0 0b 20 1b 05 9f
>1a5108		00 4e 00 c8 e8 80 f1 a9 00 9f 00 4e 00 c2 20 a9
>1a5118		00 4e 85 e7 e2 20 a9 00 85 e9 c2 20 a5 e4 85 08
>1a5128		d0 06 e2 20 a5 e6 f0 4d e2 20 a5 e6 85 0a a5 ea
>1a5138		a0 00 00 d7 08 d0 17 c2 20 18 a5 08 69 01 00 85
>1a5148		0c e2 20 a5 0a 69 00 85 0e 20 cf 50 b0 2a a0 0d
>1a5158		00 c2 20 b7 08 85 0c c8 c8 e2 20 b7 08 85 0e d0
>1a5168		06 c2 20 a5 0c f0 0e c2 20 a5 0c 85 08 e2 20 a5
>1a5178		0e 85 0a 80 b9 28 18 60 28 38 60 08 20 f5 50 b0
>1a5188		1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f
>1a5198		d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08
>1a51a8		c2 30 a0 09 00 b7 08 85 23 c8 c8 b7 08 85 25 e2
>1a51b8		20 a0 00 00 b7 08 85 27 28 60 08 c2 20 18 a5 e1
>1a51c8		69 10 00 85 08 e2 20 a5 e3 69 00 85 0a c5 bc 90
>1a51d8		27 c2 20 a5 08 c5 ba 90 1f 08 c2 20 48 a9 00 08
>1a51e8		5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00
>1a51f8		20 1b 1e e2 20 dc d4 08 c2 20 a5 e1 85 c0 e2 20
>1a5208		a5 e3 85 c2 c2 20 a5 08 85 e1 e2 20 a5 0a 85 e3
>1a5218		28 60 08 e2 20 a5 27 c5 ea f0 33 a5 ea c9 00 d0
>1a5228		05 20 16 06 80 2f c9 01 d0 05 20 84 07 80 26 08
>1a5238		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a5248		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 c9 02
>1a5258		d0 03 20 b0 16 c2 10 20 c2 51 c2 30 18 a5 c0 69
>1a5268		01 00 85 08 e2 20 a5 c2 69 00 85 0a a0 00 00 a9
>1a5278		00 97 08 c8 c0 08 00 d0 f8 a0 00 00 b7 e7 f0 10
>1a5288		20 1b 05 20 af 50 90 08 97 08 c8 c0 08 00 d0 ec
>1a5298		c2 20 a0 09 00 a5 23 97 c0 a5 25 c8 c8 97 c0 a5
>1a52a8		e4 a0 0d 00 97 c0 c8 c8 e2 20 a5 e6 97 c0 c2 20
>1a52b8		a5 c0 85 e4 e2 20 a5 c2 85 e6 e2 20 a0 00 00 a5
>1a52c8		27 97 c0 c9 02 f0 02 28 60 c2 20 a5 23 85 c0 e2
>1a52d8		20 a5 25 85 c2 20 cc 12 20 e1 12 80 ea 08 c2 30
>1a52e8		a5 e4 d0 06 e2 20 a5 e6 f0 05 20 f5 50 b0 05 20
>1a52f8		1a 52 80 4e e2 20 a5 27 c5 ea f0 33 a5 ea c9 00
>1a5308		d0 05 20 16 06 80 2c c9 01 d0 05 20 84 07 80 23
>1a5318		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a5328		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 c9
>1a5338		02 f0 11 c2 30 a0 09 00 a5 23 97 08 c8 c8 a5 25
>1a5348		97 08 28 60 20 b0 16 a0 09 00 b7 08 85 c0 c8 c8
>1a5358		e2 20 b7 08 85 c2 20 cc 12 20 00 13 e2 20 a5 27
>1a5368		c9 02 f0 02 80 cd c2 20 a5 23 85 c0 e2 20 a5 25
>1a5378		85 c2 20 cc 12 20 e1 12 80 b9 08 20 fb 20 e2 20
>1a5388		a7 00 20 a7 04 90 42 c2 20 a5 00 85 e7 e2 20 a5
>1a5398		02 85 e9 20 da 20 a7 00 f0 0d c9 24 f0 14 c9 25
>1a53a8		f0 09 20 af 50 b0 ec a9 01 80 0c 20 da 20 a9 00
>1a53b8		80 05 20 da 20 a9 02 85 ea 20 3b 22 c9 8f d0 06
>1a53c8		a5 ea 09 80 85 ea 28 38 60 28 18 60 08 c2 20 18
>1a53d8		a5 23 65 29 85 23 a5 25 65 2b 85 25 28 60 08 c2
>1a53e8		20 38 a5 23 e5 29 85 23 a5 25 e5 2b 85 25 28 60
>1a53f8		08 c2 20 3b 38 e9 0a 00 1b c2 30 a9 00 00 83 01
>1a5408		83 03 83 05 83 07 83 09 a5 25 10 18 a9 00 80 83
>1a5418		01 a5 25 49 ff ff 85 25 a5 23 49 ff ff 1a 85 23
>1a5428		d0 02 e6 25 a5 2b 10 1a a3 01 49 00 80 83 01 a5
>1a5438		2b 49 ff ff 85 2b a5 29 49 ff ff 1a 85 29 d0 02
>1a5448		e6 2b a5 25 f0 04 a5 2b d0 5a a5 23 8f 00 01 00
>1a5458		a5 29 8f 02 01 00 af 04 01 00 83 03 af 06 01 00
>1a5468		83 05 a5 25 8f 00 01 00 a5 29 8f 02 01 00 18 af
>1a5478		04 01 00 63 05 83 05 af 06 01 00 63 07 83 07 a5
>1a5488		23 8f 00 01 00 a5 2b 8f 02 01 00 18 af 04 01 00
>1a5498		63 05 83 05 af 06 01 00 63 07 83 07 a3 07 f0 23
>1a54a8		a3 09 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a54b8		a9 0d 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20
>1a54c8		dc d4 08 c2 30 a3 01 10 16 a3 05 49 ff ff 83 05
>1a54d8		a3 03 49 ff ff 1a 83 03 d0 05 a3 05 1a 83 05 a3
>1a54e8		03 85 23 a3 05 85 25 c2 20 3b 18 69 0a 00 1b 28
>1a54f8		60 08 c2 20 a5 23 c5 29 a5 25 e5 2b 50 03 49 00
>1a5508		80 30 06 64 23 64 25 80 07 a9 ff ff 85 23 85 25
>1a5518		28 60 08 c2 20 a5 23 c5 29 d0 0c a5 25 c5 2b d0
>1a5528		06 64 23 64 25 80 16 a5 29 c5 23 a5 2b e5 25 50
>1a5538		03 49 00 80 10 eb a9 ff ff 85 23 85 25 28 60 08
>1a5548		c2 20 a5 2b c5 25 d0 0f a5 29 c5 23 d0 09 a9 ff
>1a5558		ff 85 23 85 25 80 04 64 23 64 25 28 60 08 c2 20
>1a5568		a5 2b c5 25 d0 0c a5 29 c5 23 d0 06 64 23 64 25
>1a5578		80 07 a9 ff ff 85 23 85 25 28 60 08 c2 20 a5 23
>1a5588		c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85
>1a5598		25 80 13 a5 29 c5 23 a5 2b e5 25 50 03 49 00 80
>1a55a8		30 e8 64 23 64 25 28 60 08 c2 20 a5 23 c5 29 d0
>1a55b8		0f a5 25 c5 2b d0 09 a9 ff ff 85 23 85 25 80 13
>1a55c8		a5 23 c5 29 a5 25 e5 2b 50 03 49 00 80 30 e8 64
>1a55d8		23 64 25 28 60 08 c2 20 8f 12 01 00 8a 8f 10 01
>1a55e8		00 af 16 01 00 aa af 14 01 00 28 60 08 e2 20 a9
>1a55f8		03 8f 00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f
>1a5608		08 e2 af a5 25 8f 0a e2 af a9 00 00 8f 0c e2 af
>1a5618		a9 00 01 8f 0e e2 af ea ea ea ea ea ea af 08 e2
>1a5628		af 85 23 af 0a e2 af 85 25 a9 01 00 85 27 28 60
>1a5638		08 e2 20 a9 40 8f 00 e2 af 80 09 08 e2 20 a9 48
>1a5648		8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23 8f 08
>1a5658		e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b
>1a5668		8f 0e e2 af ea ea ea e2 20 af 06 e2 af 29 07 d0
>1a5678		10 c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28
>1a5688		60 20 24 57 80 f9 08 e2 20 a9 01 8f 01 e2 af a9
>1a5698		00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f
>1a56a8		0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea
>1a56b8		ea ea e2 20 af 05 e2 af 29 17 d0 10 c2 20 af 08
>1a56c8		e2 af 85 23 af 0a e2 af 85 25 28 60 20 24 57 80
>1a56d8		f9 08 e2 20 a9 00 8f 01 e2 af a9 00 8f 00 e2 af
>1a56e8		c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29
>1a56f8		8f 0c e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af
>1a5708		04 e2 af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af
>1a5718		0a e2 af 85 25 28 60 20 24 57 80 f9 e2 20 89 01
>1a5728		f0 20 00 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a5738		0c 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a5748		d4 08 89 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a5758		e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a5768		e2 20 dc d4 08 89 04 f0 1f 08 c2 20 48 a9 00 08
>1a5778		5b 68 28 e2 20 a9 0e 8f d3 08 00 c2 20 29 ff 00
>1a5788		20 1b 1e e2 20 dc d4 08 60 08 e2 20 a9 00 8f 01
>1a5798		e2 af a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2
>1a57a8		af a9 00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25
>1a57b8		8f 0a e2 af ea ea ea e2 20 af 04 e2 af 89 07 f0
>1a57c8		01 00 c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25
>1a57d8		28 60 08 e2 20 a9 01 8f 01 e2 af a9 02 8f 00 e2
>1a57e8		af c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e e2
>1a57f8		af a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea ea ea
>1a5808		af 08 e2 af 85 23 af 0a e2 af 85 25 28 60 08 c2
>1a5818		20 a5 23 d0 0a a5 25 29 ff 7f d0 03 28 38 60 28
>1a5828		18 60 08 e2 20 38 e9 30 20 3f 05 c2 20 29 ff 00
>1a5838		18 65 23 85 23 a5 25 69 00 00 85 25 28 60 08 e2
>1a5848		20 c9 30 90 04 c9 3a 90 1c c9 61 90 04 c9 67 90
>1a5858		0a c9 41 90 04 c9 47 90 07 80 31 38 e9 57 80 08
>1a5868		38 e9 37 80 03 38 e9 30 06 23 26 24 26 25 26 26
>1a5878		06 23 26 24 26 25 26 26 06 23 26 24 26 25 26 26
>1a5888		06 23 26 24 26 25 26 26 05 23 85 23 28 60 08 e2
>1a5898		20 c9 30 f0 06 c9 31 f0 0a 80 0f c2 20 06 23 26
>1a58a8		25 80 07 c2 20 38 26 23 26 25 28 60 08 e2 30 a5
>1a58b8		61 f0 0d aa a5 69 d0 15 a9 00 8f 01 e2 af 80 15
>1a58c8		e2 20 a9 03 8f 01 e2 af ea ea ea 80 62 e2 20 a9
>1a58d8		01 8f 01 e2 af e2 20 a9 43 8f 00 e2 af c2 20 a9
>1a58e8		00 10 8f 08 e2 af a9 00 00 8f 0a e2 af c2 20 a9
>1a58f8		00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af ea ea ea
>1a5908		ca f0 2c af 08 e2 af 8f 0c 08 00 af 0a e2 af 8f
>1a5918		0e 08 00 e2 20 a9 42 8f 00 e2 af c2 20 af 0c 08
>1a5928		00 8f 08 e2 af af 0e 08 00 8f 0a e2 af 80 be c2
>1a5938		20 af 08 e2 af 85 23 af 0a e2 af 85 25 e2 20 a9
>1a5948		01 85 27 28 60 08 c2 20 a5 5d 85 23 a5 5f 85 25
>1a5958		20 66 5b c2 20 a5 23 85 29 a5 25 85 2b c2 20 a5
>1a5968		59 85 23 a5 5b 85 25 20 8e 56 c2 20 a5 55 85 29
>1a5978		a5 57 85 2b 20 43 56 c2 20 a5 23 85 29 a5 25 85
>1a5988		2b 20 b4 58 20 d9 56 c2 20 a5 65 f0 07 a5 25 09
>1a5998		00 80 85 25 e2 20 a9 01 85 27 28 60 5a 08 c2 30
>1a59a8		64 23 64 25 64 55 64 57 64 65 64 59 64 5b a9 01
>1a59b8		00 85 5d 64 5f 64 61 64 63 64 69 e2 20 a0 00 00
>1a59c8		b7 00 c9 2b f0 33 c9 2d f0 2b c9 26 f0 3a 20 c0
>1a59d8		04 90 03 82 ac 00 08 c2 20 48 a9 00 08 5b 68 28
>1a59e8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a59f8		e2 20 dc d4 08 a9 01 85 65 c8 b7 00 c9 26 f0 08
>1a5a08		20 c0 04 90 d1 82 7a 00 c8 b7 00 c9 68 f0 0e c9
>1a5a18		48 f0 0a c9 62 f0 4c c9 42 f0 48 80 b9 c8 b7 00
>1a5a28		20 d1 04 b0 02 80 af 20 46 58 c8 b7 00 20 d1 04
>1a5a38		b0 f5 e2 20 a5 65 f0 11 c2 20 38 a9 00 00 e5 23
>1a5a48		85 23 a9 00 00 e5 25 85 25 e2 20 a9 00 85 27 c2
>1a5a58		20 18 98 65 00 85 00 a5 02 69 00 00 85 02 e2 20
>1a5a68		28 7a 60 c8 b7 00 c9 30 f0 07 c9 31 f0 03 82 65
>1a5a78		ff 20 96 58 c8 b7 00 c9 30 f0 f6 c9 31 f0 f2 82
>1a5a88		b0 ff 20 2a 58 c8 b7 00 c9 2e f0 08 20 c0 04 b0
>1a5a98		f1 82 9e ff c2 20 20 66 5b c2 20 a5 23 85 55 a5
>1a5aa8		25 85 57 64 23 64 25 e2 20 80 36 20 2a 58 c2 20
>1a5ab8		a5 5f 8f 00 01 00 a9 0a 00 8f 02 01 00 af 04 01
>1a5ac8		00 85 5f a5 5d 8f 00 01 00 a9 0a 00 8f 02 01 00
>1a5ad8		af 04 01 00 85 5d af 06 01 00 18 65 5f 85 5f e2
>1a5ae8		20 c8 b7 00 c9 65 f0 24 c9 45 f0 20 20 c0 04 b0
>1a5af8		ba c2 20 20 66 5b c2 20 a5 23 85 59 a5 25 85 5b
>1a5b08		64 23 64 25 20 4d 59 e2 20 82 43 ff c2 20 20 66
>1a5b18		5b c2 20 a5 23 85 59 a5 25 85 5b 64 23 64 25 e2
>1a5b28		20 c8 b7 00 c9 2b f0 10 c9 2d f0 08 20 c0 04 b0
>1a5b38		12 82 a2 fe a9 01 85 69 c8 b7 00 20 c0 04 b0 03
>1a5b48		82 93 fe 20 2a 58 c8 b7 00 20 c0 04 b0 f5 c2 20
>1a5b58		a5 23 85 61 a5 25 85 63 20 4d 59 82 f1 fe 08 20
>1a5b68		f4 55 28 60 08 c2 20 a9 63 5e 85 29 a9 1a 00 85
>1a5b78		2b e2 20 a9 01 85 2d c2 20 20 3f 5c c9 ff ff d0
>1a5b88		0c a9 00 00 8d 23 08 8d 25 08 82 a1 00 f4 00 00
>1a5b98		f4 00 00 f4 00 00 e2 20 ad 26 08 29 80 83 01 ad
>1a5ba8		25 08 2a ad 26 08 2a 83 02 a9 00 83 06 ad 25 08
>1a5bb8		09 80 83 05 ad 24 08 83 04 ad 23 08 83 03 a3 02
>1a5bc8		c9 96 f0 3a 90 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a5bd8		e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00 20 1b 1e
>1a5be8		e2 20 dc d4 08 c2 20 a3 05 4a 83 05 a3 03 6a 83
>1a5bf8		03 e2 20 a3 02 1a 83 02 c9 96 f0 02 80 e7 a3 01
>1a5c08		f0 1b c2 20 a3 03 49 ff ff 18 69 01 00 8d 23 08
>1a5c18		a3 05 49 ff ff 69 00 00 8d 25 08 80 0c c2 20 a3
>1a5c28		03 8d 23 08 a3 05 8d 25 08 c2 20 68 68 68 e2 20
>1a5c38		a9 00 8d 27 08 28 60 da 08 c2 20 a5 25 48 a5 23
>1a5c48		48 20 38 56 20 16 58 b0 11 a5 25 89 00 80 d0 05
>1a5c58		a9 01 00 80 08 a9 ff ff 80 03 a9 00 00 fa 86 23
>1a5c68		fa 86 25 28 fa 60 08 c2 30 20 3f 5c c9 ff ff d0
>1a5c78		05 20 f2 05 80 03 20 04 06 28 60 08 c2 30 20 3f
>1a5c88		5c c9 01 00 d0 05 20 f2 05 80 03 20 04 06 28 60
>1a5c98		08 c2 30 20 3f 5c c9 00 00 d0 05 20 f2 05 80 03
>1a5ca8		20 04 06 28 60 08 c2 30 20 3f 5c c9 01 00 f0 05
>1a5cb8		20 f2 05 80 03 20 04 06 28 60 08 c2 30 20 3f 5c
>1a5cc8		c9 ff ff f0 05 20 f2 05 80 03 20 04 06 28 60 08
>1a5cd8		c2 30 20 3f 5c c9 00 00 f0 05 20 f2 05 80 03 20
>1a5ce8		04 06 28 60 08 e2 20 97 23 c8 a9 00 97 23 28 60
>1a5cf8		da 08 e2 20 c9 80 90 0a 48 a9 2d 20 ec 5c 68 49
>1a5d08		ff 1a c2 30 29 ff 00 c9 64 00 90 0e a2 64 00 20
>1a5d18		dd 55 18 69 30 00 20 ec 5c 8a a2 0a 00 20 dd 55
>1a5d28		18 69 30 00 20 ec 5c 8a 18 69 30 00 20 ec 5c 28
>1a5d38		fa 60 08 e2 20 c2 10 a0 00 00 b7 23 f0 03 c8 80
>1a5d48		f9 28 60 08 e2 20 c2 10 f4 00 00 f4 00 00 f4 00
>1a5d58		00 20 16 58 90 19 20 be 14 e2 20 a0 00 00 a9 20
>1a5d68		97 16 c8 a9 30 97 16 c8 a9 00 97 16 82 ce 00 e2
>1a5d78		20 a5 26 10 08 29 7f 85 26 a9 01 83 01 c2 20 a9
>1a5d88		00 00 83 03 c2 20 af 5f 5e 1a 85 29 af 61 5e 1a
>1a5d98		85 2b 20 3f 5c 89 00 80 d0 12 20 da 57 a3 03 1a
>1a5da8		83 03 20 3f 5c c9 ff ff f0 12 80 ee 20 91 57 a3
>1a5db8		03 3a 83 03 20 3f 5c c9 ff ff f0 f0 e2 30 a5 25
>1a5dc8		0a a5 26 2a 83 05 38 a9 96 e3 05 aa f0 0f a5 25
>1a5dd8		09 80 85 25 46 25 66 24 66 23 ca d0 f7 c2 10 e2
>1a5de8		20 64 26 a9 00 85 27 a3 01 f0 11 c2 20 38 a9 00
>1a5df8		00 e5 23 85 23 a9 00 00 e5 25 85 25 20 1d 15 c2
>1a5e08		20 a5 16 85 23 a5 18 85 25 20 3a 5d e2 20 c8 a9
>1a5e18		00 97 23 88 88 b7 23 c8 97 23 c0 02 00 d0 f4 a9
>1a5e28		2e 97 23 e2 20 18 a3 03 69 05 83 06 f0 19 20 3a
>1a5e38		5d a9 45 20 ec 5c a3 06 20 f8 5c 80 0a c2 20 a5
>1a5e48		16 85 23 a5 18 85 25 e2 20 a9 02 85 27 c2 20 3b
>1a5e58		18 69 06 00 1b 28 60 00 50 c3 47 00 00 80 3f f3
>1a5e68		04 b5 3f f3 04 35 3f e2 20 a9 48 8f 00 e2 af c2
>1a5e78		20 bd 00 00 8f 08 e2 af bd 02 00 8f 0a e2 af 88
>1a5e88		e8 e8 e8 e8 e2 20 a9 00 8f 01 e2 af c2 20 af 23
>1a5e98		08 00 8f 0c e2 af af 25 08 00 8f 0e e2 af ea ea
>1a5ea8		ea af 08 e2 af 48 af 0a e2 af 8f 0a e2 af 68 8f
>1a5eb8		08 e2 af e2 20 a9 02 8f 01 e2 af c2 20 bd 00 00
>1a5ec8		8f 0c e2 af bd 02 00 8f 0e e2 af ea ea ea 88 f0
>1a5ed8		14 af 08 e2 af 48 af 0a e2 af 8f 0a e2 af 68 8f
>1a5ee8		08 e2 af 80 9b af 08 e2 af 8f 23 08 00 af 0a e2
>1a5ef8		af 8f 25 08 00 60 e2 20 a9 00 8f 00 e2 af a9 00
>1a5f08		8f 01 e2 af c2 20 a5 23 8f 08 e2 af 8f 0c e2 af
>1a5f18		af 25 08 00 8f 0a e2 af 8f 0e e2 af ea ea ea af
>1a5f28		08 e2 af 85 23 af 0a e2 af 85 25 60 e2 20 a9 00
>1a5f38		8f 00 e2 af a9 01 8f 01 e2 af c2 20 a5 23 8f 0c
>1a5f48		e2 af af 25 08 00 8f 0e e2 af af 88 65 1a 8f 08
>1a5f58		e2 af af 8a 65 1a 8f 0a e2 af ea ea ea af 08 e2
>1a5f68		af 85 23 af 0a e2 af 85 25 60 a2 00 00 a5 23 c5
>1a5f78		29 a5 25 e5 2b 90 1e a5 23 8f 08 e2 af a5 25 8f
>1a5f88		0a e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af
>1a5f98		85 25 e8 80 d8 60 e2 20 a5 26 10 09 29 7f 85 26
>1a5fa8		a9 01 48 80 03 a9 00 48 a9 40 8f 00 e2 af a9 02
>1a5fb8		8f 01 e2 af c2 30 af f0 65 1a 85 29 8f 0c e2 af
>1a5fc8		af f2 65 1a 85 2b 8f 0e e2 af 20 72 5f e2 20 68
>1a5fd8		c2 20 f0 1e a5 23 8f 08 e2 af a5 25 8f 0a e2 af
>1a5fe8		ea ea ea af 08 e2 af 85 23 af 0a e2 af 29 ff 7f
>1a5ff8		85 25 60 5a a2 00 00 a0 00 00 a5 23 df f4 65 1a
>1a6008		a5 25 ff f6 65 1a 90 2c bf f0 65 1a 8f 08 e2 af
>1a6018		bf f2 65 1a 8f 0a e2 af a5 23 8f 0c e2 af a5 25
>1a6028		8f 0e e2 af ea ea ea af 08 e2 af 85 23 af 0a e2
>1a6038		af 85 25 38 98 2a a8 e8 e8 e8 e8 e0 0c 00 d0 ba
>1a6048		98 aa 7a 60 08 c2 30 48 da 20 fe 5e 8b e2 20 a9
>1a6058		1a 48 ab c2 20 a2 30 65 5a a0 05 00 20 6f 5e 7a
>1a6068		a9 01 00 8f 27 08 00 ab fa 68 28 60 08 c2 30 48
>1a6078		da a5 23 85 29 a5 25 85 2b 20 fe 5e 8b e2 20 a9
>1a6088		1a 48 ab c2 20 a2 44 65 5a a0 05 00 20 6f 5e 7a
>1a6098		ab 20 d9 56 fa 68 28 60 08 c2 30 48 da a5 23 85
>1a60a8		29 a5 25 85 2b 20 fe 5e 8b e2 20 a9 1a 48 ab c2
>1a60b8		20 a2 58 65 5a a0 05 00 20 6f 5e 7a ab 20 d9 56
>1a60c8		fa 68 28 60 08 c2 30 48 da e2 20 a9 40 8f 00 e2
>1a60d8		af a9 02 8f 01 e2 af c2 20 a5 23 8f 08 e2 af a5
>1a60e8		25 8f 0a e2 af af 88 65 1a 8f 0c e2 af af 8a 65
>1a60f8		1a 8f 0e e2 af ea ea ea af 08 e2 af 85 0c af 0a
>1a6108		e2 af 85 0e e2 20 a9 48 8f 00 e2 af c2 20 ea ea
>1a6118		ea af 08 e2 af 85 10 af 0a e2 af 85 12 e2 20 a9
>1a6128		01 8f 01 e2 af c2 20 a5 0c 8f 08 e2 af a5 0e 8f
>1a6138		0a e2 af a5 10 8f 0c e2 af a5 12 8f 0e e2 af ea
>1a6148		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 e2 20
>1a6158		a9 08 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23
>1a6168		8f 08 e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2
>1a6178		af 85 29 af 0a e2 af 85 2b 20 fe 5e 8b e2 20 a9
>1a6188		1a 48 ab c2 20 a2 6c 65 5a a0 08 00 20 6f 5e 7a
>1a6198		a9 01 00 8f 27 08 00 8f 2d 08 00 20 d9 56 ab fa
>1a61a8		68 28 60 08 c2 30 48 da 20 9e 5f 20 fb 5f da 8a
>1a61b8		29 01 00 d0 05 20 74 60 80 03 20 4c 60 fa 8a 29
>1a61c8		04 00 f0 0a e2 20 a5 26 09 80 85 26 c2 20 fa 68
>1a61d8		28 60 08 c2 30 48 da 20 9e 5f 20 fb 5f da 8a 29
>1a61e8		01 00 d0 05 20 4c 60 80 03 20 74 60 fa 8a 29 02
>1a61f8		00 f0 0a e2 20 a5 26 09 80 85 26 c2 20 fa 68 28
>1a6208		60 08 c2 30 48 da 20 9e 5f 20 fb 5f 20 a0 60 8a
>1a6218		29 01 00 f0 03 20 34 5f 8a e2 20 4a 4a 69 00 29
>1a6228		01 f0 06 a5 26 09 80 85 26 c2 20 fa 68 28 60 08
>1a6238		c2 30 48 da 5a a5 25 10 1f 08 c2 20 48 a9 00 08
>1a6248		5b 68 28 e2 20 a9 17 8f d3 08 00 c2 20 29 ff 00
>1a6258		20 1b 1e e2 20 dc d4 08 c2 30 a5 23 cf 88 65 1a
>1a6268		a5 25 cf 8a 65 1a b0 04 20 34 5f 18 a9 00 00 a8
>1a6278		2a 48 e2 20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af
>1a6288		c2 20 af e0 65 1a 85 29 8f 0c e2 af af e2 65 1a
>1a6298		85 2b 8f 0e e2 af 20 72 5f 8a f0 07 0a 0a 0a 0a
>1a62a8		0a 0a a8 af e4 65 1a 85 29 8f 0c e2 af af e6 65
>1a62b8		1a 85 2b 8f 0e e2 af 20 72 5f 8a f0 0b 0a 0a 0a
>1a62c8		0a 85 29 18 98 65 29 a8 af e8 65 1a 85 29 8f 0c
>1a62d8		e2 af af ea 65 1a 85 2b 8f 0e e2 af 20 72 5f 8a
>1a62e8		f0 09 0a 0a 85 29 18 98 65 29 a8 af ec 65 1a 85
>1a62f8		29 8f 0c e2 af af ee 65 1a 85 2b 8f 0e e2 af 20
>1a6308		72 5f 86 29 18 98 65 29 a8 20 cc 60 a5 23 85 29
>1a6318		a5 25 85 2b 98 85 23 64 25 20 66 5b 20 43 56 68
>1a6328		d0 07 a5 25 09 00 80 85 25 7a fa 68 28 60 08 c2
>1a6338		30 48 da a5 23 85 29 a5 25 85 2b 20 fe 5e 8b e2
>1a6348		20 a9 1a 48 ab c2 20 a2 90 65 a0 05 00 20 6f 5e
>1a6358		ab 20 d9 56 fa 68 28 60 08 c2 30 48 da 20 36 63
>1a6368		af f8 65 1a 85 29 af fa 65 1a 85 2b 20 38 56 a5
>1a6378		25 49 00 80 85 25 fa 68 28 60 08 c2 30 48 da a5
>1a6388		23 85 29 a5 25 85 2b 20 fe 5e 8b e2 20 a9 1a 48
>1a6398		ab c2 20 a2 a4 65 a0 05 00 20 6f 5e ab 20 d9 56
>1a63a8		fa 68 28 60 c2 20 a5 23 85 29 a5 25 85 2b c2 20
>1a63b8		af 88 65 1a 85 23 af 8a 65 1a 85 25 8a f0 30 4a
>1a63c8		aa 90 03 20 d9 56 c2 20 a5 25 48 a5 23 48 c2 20
>1a63d8		a5 29 85 23 a5 2b 85 25 20 fe 5e c2 20 a5 23 85
>1a63e8		29 a5 25 85 2b c2 20 68 85 23 68 85 25 80 cd 60
>1a63f8		08 c2 30 48 da 8b e2 20 a9 1a 48 ab c2 20 a2 b8
>1a6408		65 5a a0 0a 00 20 6f 5e 7a ab fa 68 28 60 08 c2
>1a6418		30 48 da 5a a5 23 05 25 d0 10 c2 20 af 88 65 1a
>1a6428		85 23 af 8a 65 1a 85 25 80 61 a5 25 29 00 80 a8
>1a6438		f0 07 a5 25 29 ff 7f 85 25 c2 20 a5 25 48 a5 23
>1a6448		48 20 16 06 a6 23 20 84 07 c2 20 a5 23 85 29 a5
>1a6458		25 85 2b c2 20 68 85 23 68 85 25 20 38 56 20 f8
>1a6468		63 c2 20 a5 25 48 a5 23 48 c2 20 af ec 65 1a 85
>1a6478		23 af ee 65 1a 85 25 20 ac 63 c2 20 68 85 29 68
>1a6488		85 2b 20 d9 56 98 f0 03 20 34 5f 7a fa 68 28 60
>1a6498		08 c2 30 48 a5 25 10 1f 08 c2 20 48 a9 00 08 5b
>1a64a8		68 28 e2 20 a9 17 8f d3 08 00 c2 20 29 ff 00 20
>1a64b8		1b 1e e2 20 dc d4 08 c2 30 05 23 f0 68 c2 20 af
>1a64c8		8c 65 1a 85 29 af 8e 65 1a 85 2b e2 20 a9 01 85
>1a64d8		2d c2 20 c2 20 a5 25 48 a5 23 48 20 8e 56 a5 25
>1a64e8		c5 2b d0 09 a5 23 45 29 29 f8 ff f0 30 20 43 56
>1a64f8		c2 20 af 8c 65 1a 85 29 af 8e 65 1a 85 2b 20 8e
>1a6508		56 c2 20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23
>1a6518		68 85 25 c2 20 a5 25 48 a5 23 48 80 be c2 20 68
>1a6528		85 29 68 85 2b 68 28 60 01 0d d0 37 61 0b b6 ba
>1a6538		ab aa 2a 3d 00 00 00 bf 00 00 80 3f 1d ef 38 36
>1a6548		01 0d 50 b9 89 88 08 3c ab aa 2a be 00 00 80 3f
>1a6558		a4 27 b3 3c d1 0d 5d 3d 89 88 08 3e ab aa aa 3e
>1a6568		00 00 80 3f 89 88 88 3d d9 89 9d 3d 8c 2e ba 3d
>1a6578		39 8e e3 3d 25 49 12 3e cd cc 4c 3e ab aa aa 3e
>1a6588		00 00 80 3f 00 00 00 40 8e e3 f8 3c 6e db 36 3d
>1a6598		9a 99 99 3d ab aa 2a 3e 00 00 80 3f 39 8e e3 3d
>1a65a8		25 49 12 be cd cc 4c 3e ab aa aa be 00 00 80 3f
>1a65b8		1d ef 38 36 01 0d d0 37 01 0d 50 39 61 0b b6 3a
>1a65c8		89 88 08 3c ab aa 2a 3d ab aa 2a 3e 00 00 00 3f
>1a65d8		00 00 80 3f 00 00 80 3f c1 2c a1 6d 5f 97 07 4b
>1a65e8		81 64 5a 42 54 f8 2d 40 db 0f c9 40 db 0f 49 40
>1a65f8		db 0f c9 3f db 0f 49 3f 08 20 cc 12 c2 20 a9 01
>1a6608		00 85 23 a9 00 00 85 25 e2 20 af 00 4d 00 c2 20
>1a6618		29 ff 00 85 8f a8 a2 01 00 c2 20 bf 00 4d 00 85
>1a6628		29 a9 00 00 85 2b e2 20 a9 00 85 2d c2 20 20 17
>1a6638		28 e8 e8 88 d0 e3 c2 20 a9 04 00 85 29 a9 00 00
>1a6648		85 2b 20 17 28 e2 20 af 00 4d 00 85 0c a9 00 85
>1a6658		0d c2 20 06 0c 38 a5 23 65 0c 85 23 a5 25 69 00
>1a6668		00 85 25 d0 29 e2 20 a5 ea 09 80 a6 23 20 90 10
>1a6678		e2 20 af 00 4d 00 87 c0 a0 01 00 a2 00 00 e2 20
>1a6688		bf 01 4d 00 97 c0 e4 8f f0 23 e8 c8 80 f0 08 c2
>1a6698		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a66a8		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 e2 20 38
>1a66b8		a5 c0 67 c0 85 08 a5 c1 69 00 85 09 a5 c2 69 00
>1a66c8		85 0a 64 0b c2 20 a0 05 00 b7 c3 85 0c e2 20 c8
>1a66d8		c8 b7 c3 85 0e 64 0f e2 20 a9 00 87 08 c2 20 18
>1a66e8		a5 08 69 01 00 85 08 a5 0a 69 00 00 85 0a c5 0e
>1a66f8		d0 e5 a5 08 c5 0c d0 df 28 60 08 c2 20 64 08 64
>1a6708		0a e2 20 af 00 4d 00 85 8f 64 90 a2 01 00 e2 20
>1a6718		a7 c0 c5 8f f0 22 a6 8f 00 08 c2 20 48 a9 00 08
>1a6728		5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00
>1a6738		20 1b 1e e2 20 dc d4 08 c9 01 f0 3a a0 01 00 e2
>1a6748		20 bf 00 4d 00 85 23 64 24 64 25 64 26 b7 c0 85
>1a6758		29 64 2a 64 2b 64 2c a5 23 c5 29 b0 68 20 17 28
>1a6768		c2 20 18 a5 08 65 23 85 08 a5 0a 65 25 85 0a e8
>1a6778		e8 c8 c4 8f d0 c9 e2 20 18 bf 00 4d 00 85 90 65
>1a6788		08 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69 00 00
>1a6798		85 0a c2 20 06 08 26 0a 06 08 26 0a e2 20 38 a5
>1a67a8		08 65 8f 85 08 a5 09 69 00 85 09 c2 20 a5 0a 69
>1a67b8		00 00 85 0a 18 a5 08 65 c0 85 08 e2 20 a5 0a 65
>1a67c8		c2 85 0a 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a67d8		20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2
>1a67e8		20 dc d4 08 08 20 cc 12 e2 20 a0 00 00 b7 c3 29
>1a67f8		7f c9 02 d0 05 20 a8 06 80 10 c9 00 d0 05 20 16
>1a6808		06 80 07 c9 01 d0 2b 20 84 07 a5 27 48 c2 20 a5
>1a6818		25 48 a5 23 48 20 02 67 68 85 23 68 85 25 e2 20
>1a6828		68 85 27 c2 20 a5 23 87 08 a0 02 00 a5 25 97 08
>1a6838		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a6848		8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4
>1a6858		08 08 20 cc 12 f4 00 00 f4 00 00 e2 20 48 20 02
>1a6868		67 e2 20 68 c2 20 68 68 c2 20 a7 08 85 23 a0 02
>1a6878		00 b7 08 85 25 e2 20 a0 00 00 b7 c3 29 7f 85 27
>1a6888		20 20 18 28 60 da 0b 08 08 c2 20 48 a9 00 08 5b
>1a6898		68 28 c2 30 a5 25 89 f0 ff d0 29 89 0f 00 d0 0c
>1a68a8		a5 23 89 00 fc d0 05 20 db 45 80 2e a2 0a 00 46
>1a68b8		25 66 23 ca d0 f9 20 db 45 e2 20 a9 4b 20 18 00
>1a68c8		c2 20 80 16 a2 14 00 46 25 66 23 ca d0 f9 20 db
>1a68d8		45 e2 20 a9 4d 20 18 00 c2 20 28 2b fa 60 0b 08
>1a68e8		c2 30 a9 00 00 8f b6 08 00 8f b8 08 00 e2 20 20
>1a68f8		3b 22 c9 00 f0 08 20 c9 1c 20 a8 06 80 11 c2 20
>1a6908		a9 00 00 85 23 85 25 e2 20 a9 02 85 27 c2 20 20
>1a6918		47 6a 22 08 11 00 b0 22 20 f8 6a 08 c2 20 48 a9
>1a6928		00 08 5b 68 28 e2 20 a9 10 8f d3 08 00 c2 20 29
>1a6938		ff 00 20 1b 1e e2 20 dc d4 08 20 9c 03 08 c2 20
>1a6948		48 a9 20 03 5b 68 28 e2 20 a0 00 00 b7 18 d0 03
>1a6958		82 a9 00 c9 e5 d0 03 82 96 00 a0 0b 00 b7 18 89
>1a6968		08 f0 03 82 a9 00 89 02 f0 03 82 83 00 29 0f c9
>1a6978		0f d0 03 82 7a 00 a0 00 00 b7 18 20 18 00 c8 c0
>1a6988		08 00 d0 f5 a9 20 20 18 00 a0 08 00 b7 18 20 18
>1a6998		00 c8 c0 0b 00 d0 f5 a9 09 20 18 00 a0 0b 00 b7
>1a69a8		18 89 10 d0 1e c2 20 a0 1c 00 b7 18 8f 23 08 00
>1a69b8		c8 c8 b7 18 8f 25 08 00 e2 20 a9 00 8f 27 08 00
>1a69c8		20 8d 68 a9 09 20 18 00 a0 0b 00 b7 18 89 08 d0
>1a69d8		1c 89 01 f0 05 a9 52 20 18 00 89 04 f0 05 a9 53
>1a69e8		20 18 00 89 10 f0 05 a9 44 20 18 00 ea 20 9c 03
>1a69f8		20 b3 03 22 0c 11 00 90 03 82 41 ff 20 f8 6a 08
>1a6a08		c2 20 48 a9 00 08 5b 68 28 20 1f 21 28 2b 60 08
>1a6a18		c2 20 48 a9 20 03 5b 68 28 e2 20 29 0f c9 0f f0
>1a6a28		cf a9 5b 20 18 00 a0 00 00 b7 18 c9 20 f0 09 20
>1a6a38		18 00 c8 c0 08 00 d0 f1 a9 5d 20 18 00 80 ae 0b
>1a6a48		08 08 c2 20 48 a9 20 03 5b 68 28 c2 30 a9 73 f2
>1a6a58		85 20 a9 1a 00 85 22 a0 00 00 e2 20 a9 00 97 20
>1a6a68		c8 c0 1e 00 d0 f8 c2 20 a9 73 f0 8f 81 f2 1a a9
>1a6a78		1a 00 8f 83 f2 1a af 23 08 00 8f 75 f2 1a af 25
>1a6a88		08 00 8f 77 f2 1a 28 2b 60 08 c2 30 20 fb 20 20
>1a6a98		c9 1c 20 a8 06 20 47 6a e2 20 a9 2c 85 37 20 1c
>1a6aa8		22 b0 0f c2 20 a9 ff ff 8f 54 03 00 8f 56 03 00
>1a6ab8		80 17 20 da 20 20 c9 1c 20 16 06 c2 20 a5 23 8f
>1a6ac8		54 03 00 a5 25 8f 56 03 00 22 18 11 00 b0 1f 08
>1a6ad8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3 08
>1a6ae8		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 28 60
>1a6af8		8b 0b 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a6b08		48 a9 00 48 ab 68 28 e2 20 af 2e 03 00 85 23 a9
>1a6b18		00 85 24 85 25 85 26 a9 00 85 27 85 ea a9 1a 85
>1a6b28		e9 c2 20 a9 5b 6b 85 e7 20 e5 52 e2 20 af 20 03
>1a6b38		00 85 23 a9 00 85 24 85 25 85 26 a9 00 85 27 85
>1a6b48		ea a9 1a 85 e9 c2 20 a9 63 6b 85 e7 20 e5 52 28
>1a6b58		2b ab 60 44 4f 53 53 54 41 54 00 42 49 4f 53 53
>1a6b68		54 41 54 00 08 c2 30 20 fb 20 20 c9 1c 20 a8 06
>1a6b78		a5 23 8f 60 03 00 a5 25 8f 62 03 00 a9 ff ff 8f
>1a6b88		54 03 00 8f 56 03 00 22 24 11 00 b0 25 20 1b 1e
>1a6b98		20 f8 6a 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6ba8		11 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a6bb8		d4 08 20 1b 1e 28 60 08 c2 30 20 fb 20 20 c9 1c
>1a6bc8		20 a8 06 20 47 6a a9 00 00 8f 54 03 00 a9 01 00
>1a6bd8		8f 56 03 00 20 b6 4f 22 18 11 00 b0 22 20 f8 6a
>1a6be8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 11 8f d3
>1a6bf8		08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 20
>1a6c08		f8 6a c2 20 a2 12 00 18 bf 73 f2 1a 69 00 00 85
>1a6c18		92 bf 75 f2 1a 69 01 00 85 94 e2 20 a9 00 87 92
>1a6c28		c2 20 a9 00 00 85 7a a9 01 00 85 7c a2 00 00 e2
>1a6c38		20 a7 7a f0 2a c9 0d f0 12 c9 0a f0 04 9d 00 4f
>1a6c48		e8 c2 20 e6 7a d0 e8 e6 7c 80 e4 e2 20 a9 00 9d
>1a6c58		00 4f 20 4a 27 c2 20 e6 7a d0 d1 e6 7c 80 cd e0
>1a6c68		00 00 f0 0a e2 20 a9 00 9d 00 4f 20 4a 27 28 60
>1a6c78		08 c2 30 20 fb 20 20 c9 1c 20 a8 06 20 47 6a e2
>1a6c88		20 a9 2c 20 e7 21 c2 20 20 c9 1c 20 16 06 a5 23
>1a6c98		8f 50 03 00 a5 25 8f 52 03 00 e2 20 a9 2c c2 20
>1a6ca8		20 e7 21 20 c9 1c 20 16 06 a5 23 8f 58 03 00 a5
>1a6cb8		25 8f 5a 03 00 22 1c 11 00 b0 22 20 f8 6a 08 c2
>1a6cc8		20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3 08 00
>1a6cd8		c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 20 f8 6a
>1a6ce8		28 60 da 5a 08 a2 00 00 a0 00 00 e2 20 b7 23 9d
>1a6cf8		00 04 f0 04 e8 c8 80 f5 28 7a fa 60 08 c2 30 20
>1a6d08		fb 20 20 c9 1c 20 a8 06 20 47 6a a9 00 00 85 a6
>1a6d18		e2 20 a9 01 85 a8 a9 20 85 b4 c2 20 a9 00 00 85
>1a6d28		ab a9 ff ff 85 a9 c2 20 a9 00 00 85 55 85 57 a9
>1a6d38		ff ff 85 59 a9 ff 7f 85 5b 20 48 18 e2 20 a9 80
>1a6d48		85 b4 c2 20 c6 ab 18 a9 00 00 8f 50 03 00 65 ab
>1a6d58		8f 58 03 00 a9 01 00 8f 52 03 00 69 00 00 8f 5a
>1a6d68		03 00 22 1c 11 00 b0 22 20 f8 6a 08 c2 20 48 a9
>1a6d78		00 08 5b 68 28 e2 20 a9 12 8f d3 08 00 c2 20 29
>1a6d88		ff 00 20 1b 1e e2 20 dc d4 08 20 f8 6a 28 60 08
>1a6d98		c2 30 20 fb 20 20 c9 1c 20 a8 06 20 ea 6c 22 04
>1a6da8		11 00 b0 22 20 f8 6a 08 c2 20 48 a9 00 08 5b 68
>1a6db8		28 e2 20 a9 13 8f d3 08 00 c2 20 29 ff 00 20 1b
>1a6dc8		1e e2 20 dc d4 08 20 f8 6a 28 60 da 08 e2 20 c9
>1a6dd8		61 90 08 c9 7b b0 04 29 df 80 13 c9 20 90 13 a2
>1a6de8		00 00 df fe 6d 1a f0 0a e8 e0 0f 00 d0 f4 28 38
>1a6df8		fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a 3b 3c 3d 3e 3f
>1a6e08		5c 5b 5d 7c 22 08 08 c2 20 48 a9 00 08 5b 68 28
>1a6e18		c2 30 20 c9 1c 20 a8 06 20 ea 6c 22 10 11 00 b0
>1a6e28		22 20 f8 6a 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a6e38		a9 14 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20
>1a6e48		dc d4 08 e2 20 a9 2c 20 e7 21 c2 20 20 c9 1c 20
>1a6e58		a8 06 ad 38 03 85 08 ad 3a 03 85 0a e2 20 a2 00
>1a6e68		00 a9 20 95 7e e8 e0 0b 00 d0 f8 a2 00 00 a0 00
>1a6e78		00 b7 23 f0 76 c9 2e f0 39 22 d3 6d 1a b0 1f 08
>1a6e88		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08
>1a6e98		00 c2 20 29 ff 00 20 1b 1e e2 20 dc d4 08 95 7e
>1a6ea8		c8 e8 c0 08 00 d0 ca b7 23 f0 40 c9 2e f0 03 c8
>1a6eb8		80 f5 c8 a2 08 00 b7 23 f0 31 22 d3 6d 1a b0 22
>1a6ec8		20 f8 6a 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6ed8		0a 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2 20 dc
>1a6ee8		d4 08 95 7e c8 e8 c0 0c 00 d0 cb a2 00 00 a0 00
>1a6ef8		00 b5 7e 97 08 e8 c8 c0 0b 00 d0 f5 22 14 11 00
>1a6f08		b0 22 20 f8 6a 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a6f18		20 a9 15 8f d3 08 00 c2 20 29 ff 00 20 1b 1e e2
>1a6f28		20 dc d4 08 20 f8 6a 28 60 08 08 c2 20 48 a9 00
>1a6f38		08 5b 68 28 c2 30 20 c9 1c 20 a8 06 a5 23 8f 64
>1a6f48		03 00 a5 25 8f 66 03 00 e2 20 a9 2c 20 e7 21 c2
>1a6f58		20 20 c9 1c 20 a8 06 a5 23 8f 68 03 00 a5 25 8f
>1a6f68		6a 03 00 22 30 11 00 b0 1f 08 c2 20 48 a9 00 08
>1a6f78		5b 68 28 e2 20 a9 16 8f d3 08 00 c2 20 29 ff 00
>1a6f88		20 1b 1e e2 20 dc d4 08 28 60 5c 4f 89 1a 5c a0
>1a6f98		87 1a 5c 50 89 1a 5c cc 78 1a 5c 29 79 1a 5c 5c
>1a6fa8		78 1a 5c e2 77 1a 5c 5f 7d 1a 5c 4d 74 1a 5c 7a
>1a6fb8		77 1a 5c 35 77 1a 5c bf 76 1a 5c 5e 88 1a 5c 5b
>1a6fc8		75 1a 5c ab 73 1a 5c d9 88 1a 5c 89 74 1a 5c 52
>1a6fd8		89 1a 5c 4b 89 1a 5c 78 76 1a 5c 53 89 1a 18 fb
>1a6fe8		58 5c ed 6f 1a c2 30 22 ab 73 1a 20 08 00 20 0c
>1a6ff8		00 8b e2 20 a9 00 48 ab a2 00 4f 20 2a 05 ab 22
>1a7008		96 6f 1a 22 9e 6f 1a 80 e2 08 8b e2 20 a9 1a 48
>1a7018		ab c2 10 a2 24 70 20 29 04 ab 28 6b 41 20 3c 73
>1a7028		74 61 72 74 3e 20 3c 61 73 73 65 6d 62 6c 79 3e
>1a7038		0d 20 20 41 73 73 65 6d 62 6c 65 20 61 20 70 72
>1a7048		6f 67 72 61 6d 0d 0d 43 20 3c 73 74 61 72 74 31
>1a7058		3e 20 3c 73 74 61 72 74 32 3e 20 5b 6c 65 6e 20
>1a7068		28 31 20 69 66 20 62 6c 61 6e 6b 29 5d 0d 20 20
>1a7078		43 6f 6d 70 61 72 65 20 74 6f 20 73 65 63 74 69
>1a7088		6f 6e 73 20 6f 66 20 6d 65 6d 6f 72 79 0d 0d 44
>1a7098		20 3c 73 74 61 72 74 3e 20 5b 65 6e 64 5d 0d 20
>1a70a8		20 44 69 73 61 73 73 65 6d 62 6c 65 20 61 20 70
>1a70b8		72 6f 67 72 61 6d 0d 0d 46 20 3c 73 74 61 72 74
>1a70c8		3e 20 3c 65 6e 64 3e 20 3c 62 79 74 65 3e 0d 20
>1a70d8		20 46 69 6c 6c 20 61 20 62 6c 6f 63 6b 20 6f 66
>1a70e8		20 6d 65 6d 6f 72 79 20 77 69 74 68 20 61 20 62
>1a70f8		79 74 65 0d 0d 47 20 5b 61 64 64 72 65 73 73 5d
>1a7108		0d 20 20 53 74 61 72 74 20 65 78 65 63 75 74 69
>1a7118		6f 6e 20 61 74 20 61 20 6c 6f 63 61 74 69 6f 6e
>1a7128		0d 0d 4a 20 5b 61 64 64 72 65 73 73 5d 20 2d 20
>1a7138		4a 75 6d 70 20 74 6f 20 61 20 6c 6f 63 61 74 69
>1a7148		6f 6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 20 20 4a
>1a7158		75 6d 70 20 74 6f 20 61 20 6c 6f 63 61 74 69 6f
>1a7168		6e 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 48 20 3c
>1a7178		73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79
>1a7188		74 65 3e 20 5b 62 79 74 65 5d 2e 2e 0d 20 20 48
>1a7198		75 6e 74 20 66 6f 72 20 76 61 6c 75 65 73 20 69
>1a71a8		6e 20 6d 65 6d 6f 72 79 0d 0d 4c 20 20 20 20 20
>1a71b8		4c 4f 41 44 20 20 20 20 20 20 20 20 20 22 46 69
>1a71c8		6c 65 22 20 5b 64 65 73 74 69 6e 61 74 69 6f 6e
>1a71d8		5d 0d 4d 20 3c 73 74 61 72 74 3e 20 5b 65 6e 64
>1a71e8		5d 0d 20 20 44 75 6d 70 20 74 68 65 20 76 61 6c
>1a71f8		75 65 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 52 20
>1a7208		2d 20 44 69 73 70 6c 61 79 20 74 68 65 20 76 61
>1a7218		6c 75 65 73 20 6f 66 20 74 68 65 20 72 65 67 69
>1a7228		73 74 65 72 73 0d 0d 3b 20 3c 50 43 3e 20 3c 41
>1a7238		3e 20 3c 58 3e 20 3c 59 3e 20 3c 53 50 3e 20 3c
>1a7248		44 42 52 3e 20 3c 44 50 3e 20 3c 4e 56 4d 58 44
>1a7258		49 5a 43 3e 0d 20 20 43 68 61 6e 67 65 20 74 68
>1a7268		65 20 63 6f 6e 74 65 6e 74 73 20 6f 66 20 74 68
>1a7278		65 20 72 65 67 69 73 74 65 72 73 0d 0d 53 20 20
>1a7288		20 20 20 53 41 56 45 20 20 20 20 20 20 20 20 20
>1a7298		22 46 69 6c 65 22 20 3c 73 74 61 72 74 3e 20 3c
>1a72a8		65 6e 64 3e 0d 54 20 3c 73 74 61 72 74 3e 20 3c
>1a72b8		65 6e 64 3e 20 3c 64 65 73 74 69 6e 61 74 69 6f
>1a72c8		6e 3e 0d 20 20 54 72 61 6e 73 66 65 72 20 28 63
>1a72d8		6f 70 79 29 20 64 61 74 61 20 77 69 74 68 69 6e
>1a72e8		20 6d 65 6d 6f 72 79 0d 0d 57 20 3c 62 79 74 65
>1a72f8		3e 0d 20 20 53 65 74 20 74 68 65 20 72 65 67 69
>1a7308		73 74 65 72 20 77 69 64 74 68 20 66 6c 61 67 73
>1a7318		20 66 6f 72 20 74 68 65 20 64 69 73 61 73 73 65
>1a7328		6d 62 6c 65 72 0d 0d 58 20 2d 20 52 65 74 75 72
>1a7338		6e 20 74 6f 20 42 41 53 49 43 0d 0d 3e 20 3c 73
>1a7348		74 61 72 74 3e 20 3c 62 79 74 65 3e 20 5b 62 79
>1a7358		74 65 5d 2e 2e 2e 0d 20 20 45 64 69 74 20 64 61
>1a7368		74 61 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 3f 20
>1a7378		2d 20 44 69 73 70 6c 61 79 20 61 20 73 68 6f 72
>1a7388		74 20 68 65 6c 70 20 73 63 72 65 65 6e 0d 0d 00
>1a7398		08 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 0d 85
>1a73a8		4e 28 6b 20 3d 02 08 e2 20 48 a9 1a 48 ab 68 28
>1a73b8		a2 90 89 20 29 04 e2 20 a9 3b 20 18 00 a9 20 20
>1a73c8		18 00 c2 30 08 e2 20 48 a9 00 48 ab 68 28 a0 03
>1a73d8		00 a2 42 02 20 ac 03 c2 20 a9 20 00 20 18 00 af
>1a73e8		44 02 00 20 39 04 a9 20 00 20 18 00 af 46 02 00
>1a73f8		20 39 04 a9 20 00 20 18 00 af 48 02 00 20 39 04
>1a7408		a9 20 00 20 18 00 af 4a 02 00 20 39 04 a9 20 00
>1a7418		20 18 00 af 4e 02 00 20 53 04 a9 20 00 20 18 00
>1a7428		a9 20 00 20 18 00 af 4c 02 00 20 39 04 a9 20 00
>1a7438		20 18 00 08 e2 20 ad 4f 02 22 a9 86 1a 28 20 9c
>1a7448		03 20 9c 03 6b 08 0b 08 c2 20 48 a9 48 08 5b 68
>1a7458		28 e2 20 a5 15 87 0d e2 20 a5 0f c5 13 d0 0e c2
>1a7468		20 a5 0d c5 11 d0 06 20 9c 03 2b 28 6b c2 20 18
>1a7478		a5 0d 69 01 00 85 0d e2 20 a5 0e 69 00 85 0e 80
>1a7488		d0 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5
>1a7498		0f c5 17 90 45 c2 20 a5 0d c5 15 90 3d e2 20 a7
>1a74a8		0d 87 15 a5 0f c5 13 d0 0b c2 20 a5 0d c5 11 d0
>1a74b8		03 4c 40 75 c2 20 18 a5 0d 69 01 00 85 0d e2 20
>1a74c8		a5 0e 69 00 85 0e c2 20 18 a5 15 69 01 00 85 15
>1a74d8		e2 20 a5 16 69 00 85 16 80 c3 c2 20 38 a5 11 e5
>1a74e8		0d 85 19 e2 20 a5 13 e5 0f 85 1b c2 20 18 a5 19
>1a74f8		65 15 85 15 e2 20 a5 1b 65 17 85 17 e2 20 a7 11
>1a7508		87 15 a5 13 c5 0f d0 0a c2 20 a5 11 c5 0d d0 02
>1a7518		80 26 c2 20 38 a5 11 e9 01 00 85 11 e2 20 a5 12
>1a7528		e9 00 85 12 c2 20 38 a5 15 e9 01 00 85 15 e2 20
>1a7538		a5 16 e9 00 85 16 80 c4 20 9c 03 2b 28 6b 08 e2
>1a7548		20 c9 21 90 0b c9 7f 90 04 c9 a0 90 03 28 38 6b
>1a7558		28 18 6b 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28
>1a7568		e2 20 a9 00 8f b6 08 00 a5 31 c9 02 b0 16 c9 01
>1a7578		90 20 c2 20 18 a5 0d 69 00 01 85 11 e2 20 a5 0f
>1a7588		69 00 85 13 c2 20 a5 0d 85 32 e2 20 a5 0f 85 34
>1a7598		80 12 c2 20 18 a5 32 69 00 01 85 11 e2 20 a5 34
>1a75a8		69 00 85 13 e2 20 a0 00 00 c2 20 a5 32 85 19 e2
>1a75b8		20 a5 34 85 1b e2 20 a7 19 22 46 75 1a b0 02 a9
>1a75c8		3f 99 7e 08 c2 20 18 a5 19 69 01 00 85 19 e2 20
>1a75d8		a5 1b 69 00 85 1b c8 c0 08 00 90 db a9 00 99 7e
>1a75e8		08 a9 3e 20 18 00 a9 20 20 18 00 e2 20 a5 34 20
>1a75f8		53 04 a9 3a 20 18 00 c2 20 a5 32 20 39 04 c2 20
>1a7608		a9 08 00 85 47 e2 20 a9 20 20 18 00 a7 32 20 53
>1a7618		04 22 88 86 1a e2 20 c6 47 d0 ea a9 20 20 18 00
>1a7628		a9 20 20 18 00 08 e2 20 48 a9 00 48 ab 68 28 a2
>1a7638		7e 08 20 29 04 20 9c 03 20 b3 03 a5 34 c5 13 90
>1a7648		0f c2 20 a5 32 c5 11 90 07 20 9c 03 2b ab 28 6b
>1a7658		4c ac 75 08 8d 92 08 e2 20 bd 00 00 99 00 00 ad
>1a7668		92 08 f0 0a c8 e8 e8 e8 e8 ce 92 08 80 eb 28 6b
>1a7678		08 0b 8b 08 c2 20 48 a9 48 08 5b 68 28 08 e2 20
>1a7688		48 a9 00 48 ab 68 28 c2 30 a5 0d 85 32 a5 0f 85
>1a7698		34 e2 20 a5 31 3a 85 47 a2 59 08 a0 7e 08 22 5b
>1a76a8		76 1a a0 00 00 b9 7e 08 87 32 22 88 86 1a c8 c4
>1a76b8		47 d0 f2 ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48
>1a76c8		08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20
>1a76d8		c2 10 a5 31 3a 3a 85 47 a2 5d 08 a0 7e 08 22 5b
>1a76e8		76 1a c2 20 a5 0d 85 32 a5 0f 85 34 c2 20 a5 34
>1a76f8		c5 13 d0 06 a5 32 c5 11 f0 2c e2 20 a0 00 00 b7
>1a7708		32 d9 7e 08 d0 1a c8 c4 47 d0 f4 c2 20 a5 32 85
>1a7718		4a a5 34 85 4c 22 32 81 1a e2 20 a9 20 20 18 00
>1a7728		22 88 86 1a 80 c6 20 9c 03 ab 2b 28 6b 08 c2 20
>1a7738		48 a9 48 08 5b 68 28 e2 20 a5 31 f0 0e c2 30 a5
>1a7748		0d 8f 40 02 00 a5 0f 8f 42 02 00 af 46 02 00 aa
>1a7758		af 48 02 00 a8 af 4a 02 00 1b af 4c 02 00 5b e2
>1a7768		20 a9 1a 48 a9 77 48 a9 75 48 4c ac 77 ea 5c 04
>1a7778		00 1a 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>1a7788		f0 c9 c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00
>1a7798		af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af
>1a77a8		4c 02 00 5b e2 20 af 4e 02 00 48 ab a9 5c 8f a2
>1a77b8		08 00 af 42 02 00 8f a5 08 00 af 41 02 00 8f a4
>1a77c8		08 00 af 40 02 00 8f a3 08 00 af 4f 02 00 48 c2
>1a77d8		20 af 44 02 00 28 5c a2 08 00 08 0b 8b 08 e2 20
>1a77e8		48 a9 1a 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68
>1a77f8		28 c2 10 e2 20 a5 31 c9 02 f0 0c c9 03 d0 11 c2
>1a7808		20 a5 15 85 47 80 11 c2 20 a9 01 00 85 47 80 08
>1a7818		a2 54 89 20 29 04 80 35 a5 0d 85 4a a5 0f 85 4c
>1a7828		a0 00 00 e2 20 a7 4a d7 11 f0 09 22 32 81 1a a9
>1a7838		20 20 18 00 c2 20 18 a5 4a 69 01 00 85 4a a5 4c
>1a7848		69 00 00 85 4c c8 c4 47 d0 d9 20 9c 03 20 9c 03
>1a7858		ab 2b 28 6b 08 0b 8b 08 e2 20 48 a9 00 48 ab 68
>1a7868		28 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31 f0
>1a7878		4f a6 0d 8e 40 02 a6 0f 8e 42 02 c9 01 f0 41 a6
>1a7888		11 8e 44 02 c9 02 f0 38 a6 15 8e 46 02 c9 03 f0
>1a7898		2f a6 19 8e 48 02 c9 04 f0 26 a6 1d 8e 4a 02 c9
>1a78a8		05 f0 1d e2 10 a6 21 8e 4e 02 c9 06 f0 12 c2 10
>1a78b8		a6 25 8e 4c 02 c9 07 f0 07 e2 10 a6 29 8e 4f 02
>1a78c8		ab 2b 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b 68
>1a78d8		28 e2 20 c2 10 a2 00 00 bf c1 89 1a f0 18 c7 08
>1a78e8		f0 03 e8 80 f3 c2 20 8a 0a aa bf 02 79 1a 8f 2f
>1a78f8		08 00 22 26 79 1a ab 2b 28 6b a2 6f aa 6f ae 6f
>1a7908		b2 6f b6 6f ba 6f be 6f c2 6f c6 6f ca 6f a6 6f
>1a7918		ce 6f d2 6f d6 6f 98 73 da 6f de 6f 11 70 6c 2f
>1a7928		08 08 8b 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a7938		a5 31 c9 02 b0 03 4c cf 7a c2 20 a5 0d 85 32 a5
>1a7948		0f 85 34 c2 20 22 d1 7c 1a c9 ff ff f0 10 85 54
>1a7958		e2 20 a5 31 c9 03 f0 36 a9 13 85 4f 80 4c 20 9c
>1a7968		03 08 e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 06 7b
>1a7978		20 29 04 4c cf 7a 20 9c 03 08 e2 20 48 a9 1a 48
>1a7988		ab 68 28 c2 10 a2 15 7b 20 29 04 4c cf 7a e2 20
>1a7998		22 07 7d 1a c9 ff f0 de 85 4f c9 03 f0 62 c9 0b
>1a79a8		f0 5e c9 13 f0 04 c9 08 f0 00 22 ff 7b 1a b0 03
>1a79b8		4c 98 7a 87 32 22 88 86 1a 08 e2 20 48 a9 00 48
>1a79c8		ab 68 28 c2 20 a5 32 85 56 a5 34 85 58 e2 20 a5
>1a79d8		4f c9 12 f0 6c c9 16 f0 68 c9 14 f0 7c 29 3f c9
>1a79e8		02 d0 03 4c c6 7a c2 20 29 ff 00 aa e2 20 bf ce
>1a79f8		85 1a c9 03 f0 57 c9 02 f0 5f c9 01 f0 67 80 71
>1a7a08		c2 20 a5 54 c9 46 82 f0 26 c9 aa 82 f0 2a c9 2a
>1a7a18		82 f0 1c c9 2e 82 f0 17 c9 36 82 f0 12 c9 1e 82
>1a7a28		f0 0d c9 32 82 f0 08 c9 1a 82 f0 03 4c b2 79 e2
>1a7a38		20 a9 12 85 4f 4c b2 79 e2 20 a9 16 85 4f 4c b2
>1a7a48		79 22 42 7b 1a 90 60 c9 02 f0 0e 80 18 a0 02 00
>1a7a58		b9 98 08 97 56 22 88 86 1a a0 01 00 b9 98 08 97
>1a7a68		56 22 88 86 1a a0 00 00 b9 98 08 97 56 22 88 86
>1a7a78		1a e2 20 a9 41 20 18 00 a9 20 20 18 00 a6 32 86
>1a7a88		4a a6 34 86 4c 22 32 81 1a a9 20 20 18 00 80 37
>1a7a98		20 9c 03 08 e2 20 48 a9 1a 48 ab 68 28 c2 10 a2
>1a7aa8		d3 7a 20 29 04 80 20 20 9c 03 08 e2 20 48 a9 1a
>1a7ab8		48 ab 68 28 c2 10 a2 23 7b 20 29 04 80 09 a5 4f
>1a7ac8		29 c0 d0 95 4c 6d 7a 2b ab 28 6b 41 64 64 72 65
>1a7ad8		73 73 69 6e 67 20 6d 6f 64 65 20 6e 6f 74 20 64
>1a7ae8		65 66 69 6e 65 64 20 66 6f 72 20 74 68 61 74 20
>1a7af8		69 6e 73 74 72 75 63 74 69 6f 6e 2e 0d 00 42 61
>1a7b08		64 20 6d 6e 65 6d 6f 6e 69 63 2e 0d 00 42 61 64
>1a7b18		20 6f 70 65 72 61 6e 64 2e 0d 00 52 65 6c 61 74
>1a7b28		69 76 65 20 6f 66 66 73 65 74 20 69 73 20 74 6f
>1a7b38		6f 20 6c 61 72 67 65 2e 0d 00 08 0b 08 c2 20 48
>1a7b48		a9 48 08 5b 68 28 e2 20 a5 4f c9 12 f0 0a c2 20
>1a7b58		18 a5 32 69 02 00 80 08 c2 20 18 a5 32 69 01 00
>1a7b68		85 4a a5 34 69 00 00 85 4c 38 a5 50 e5 4a 85 50
>1a7b78		a5 52 e5 4c 85 52 e2 20 a5 4f c9 16 f0 1e a5 50
>1a7b88		30 0c a5 51 d0 2a a5 52 d0 26 a9 01 80 26 a5 51
>1a7b98		c9 ff d0 1c a5 52 c9 ff d0 16 80 18 a5 51 30 06
>1a7ba8		a5 52 d0 0c 80 0e a5 52 c9 ff d0 04 a9 02 80 04
>1a7bb8		2b 28 18 6b 2b 28 38 6b 08 0b c2 10 da 08 c2 20
>1a7bc8		48 a9 48 08 5b 68 28 e2 20 a2 00 00 df 00 d0 1a
>1a7bd8		f0 08 e8 e0 10 00 f0 1b 80 f2 c2 20 06 50 26 52
>1a7be8		06 50 26 52 06 50 26 52 06 50 26 52 e2 20 8a 05
>1a7bf8		50 85 50 fa 2b 28 6b 0b 8b 08 c2 20 48 a9 48 08
>1a7c08		5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 a5
>1a7c18		4f 29 3f 85 4a c2 30 a2 00 00 a0 00 00 bd cc 82
>1a7c28		f0 1b c5 54 d0 0d e2 20 b9 ce 84 29 3f c5 4a f0
>1a7c38		07 c2 20 e8 e8 c8 80 e5 98 38 ab 2b 6b 18 ab 2b
>1a7c48		6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 c2
>1a7c58		10 a0 00 00 64 50 64 52 b7 03 f0 11 c9 64 f0 19
>1a7c68		48 b7 36 85 4a 68 c5 4a d0 0b c8 80 eb b7 36 d0
>1a7c78		04 2b 28 38 6b 2b 28 18 6b e2 20 b7 36 c9 3a b0
>1a7c88		04 c9 30 b0 14 c9 47 b0 04 c9 41 b0 0c c9 67 b0
>1a7c98		e4 c9 61 b0 02 80 de 29 df 22 c0 7b 1a 80 cb 0b
>1a7ca8		08 c2 20 48 a9 48 08 5b 68 28 a0 00 00 e2 20 b7
>1a7cb8		03 f0 03 c8 80 f9 c2 20 c8 5a 68 18 65 03 85 03
>1a7cc8		a5 05 69 00 00 85 05 2b 6b 0b 08 c2 20 48 a9 48
>1a7cd8		08 5b 68 28 c2 20 a5 11 85 36 a5 13 85 38 a9 5a
>1a7ce8		81 85 03 a9 1a 00 85 05 22 49 7c 1a b0 0d 22 a7
>1a7cf8		7c 1a a7 03 d0 f2 a9 ff ff 80 02 a5 03 2b 6b 08
>1a7d08		0b 08 c2 20 48 a9 48 08 5b 68 28 c2 30 a5 15 85
>1a7d18		36 a5 17 85 38 a9 e6 85 85 03 a9 1a 00 85 05 22
>1a7d28		49 7c 1a b0 22 22 a7 7c 1a c2 20 18 a5 03 69 01
>1a7d38		00 85 03 a5 05 69 00 00 85 05 e2 20 a7 03 d0 df
>1a7d48		c2 20 a9 ff ff 80 0d 22 a7 7c 1a e2 20 a7 03 c2
>1a7d58		20 29 ff 00 2b 28 6b 08 8b 0b 08 c2 20 48 a9 48
>1a7d68		08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9 02
>1a7d78		b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85 11
>1a7d88		e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2 20
>1a7d98		a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85 11
>1a7da8		e2 20 a5 34 69 00 85 13 22 cb 7d 1a e2 20 a5 34
>1a7db8		c5 13 90 f4 c2 20 a5 32 c5 11 90 ec 20 9c 03 2b
>1a7dc8		ab 28 6b 08 0b e2 20 a9 41 20 18 00 a9 20 20 18
>1a7dd8		00 08 c2 20 48 a9 7a 08 5b 68 28 c2 20 a5 00 85
>1a7de8		18 e2 20 a5 02 85 1a 22 32 81 1a a9 20 20 18 00
>1a7df8		c2 20 18 a5 00 69 01 00 85 18 e2 20 a5 02 69 00
>1a7e08		85 1a e2 20 c2 10 a7 00 c9 c2 d0 0b 48 a7 18 49
>1a7e18		ff 2f 96 08 00 80 0b c9 e2 d0 0c 48 a7 18 0f 96
>1a7e28		08 00 8f 96 08 00 68 c2 20 29 ff 00 0a aa bf cc
>1a7e38		82 1a aa 22 ac 80 1a e2 20 a7 00 aa bf ce 84 1a
>1a7e48		22 88 86 1a 22 59 7e 1a 20 9c 03 20 b3 03 2b 28
>1a7e58		6b 08 e2 20 48 29 3f 0a c2 10 aa 68 7c 67 7e 97
>1a7e68		7e b2 7e b9 7e de 7e e5 7e 00 7f 22 7f 33 7f 70
>1a7e78		7f 78 7f 89 7f 9a 7f a1 7f c6 7f f3 7f 5f 7f 44
>1a7e88		7f 11 7f e6 7f f0 7f 04 80 33 80 e1 7f 44 80 a9
>1a7e98		28 20 18 00 22 5b 80 1a a9 2c 20 18 00 a9 58 20
>1a7ea8		18 00 a9 29 20 18 00 4c 55 80 22 5b 80 1a 4c 55
>1a7eb8		80 e2 20 48 a9 23 20 18 00 68 29 c0 c9 00 f0 0f
>1a7ec8		4a 4a 2f 96 08 00 d0 07 22 65 80 1a 4c 55 80 22
>1a7ed8		5b 80 1a 4c 55 80 22 65 80 1a 4c 55 80 a9 28 20
>1a7ee8		18 00 22 5b 80 1a a9 29 20 18 00 a9 2c 20 18 00
>1a7ef8		a9 59 20 18 00 4c 55 80 22 5b 80 1a a9 2c 20 18
>1a7f08		00 a9 58 20 18 00 4c 55 80 22 5b 80 1a a9 2c 20
>1a7f18		18 00 a9 59 20 18 00 4c 55 80 22 65 80 1a a9 2c
>1a7f28		20 18 00 a9 59 20 18 00 4c 55 80 22 65 80 1a a9
>1a7f38		2c 20 18 00 a9 58 20 18 00 4c 55 80 a9 28 20 18
>1a7f48		00 22 65 80 1a a9 2c 20 18 00 a9 58 20 18 00 a9
>1a7f58		29 20 18 00 4c 55 80 a9 28 20 18 00 22 5b 80 1a
>1a7f68		a9 29 20 18 00 4c 55 80 a9 41 20 18 00 4c 59 80
>1a7f78		22 5b 80 1a a9 2c 20 18 00 a9 53 20 18 00 4c 55
>1a7f88		80 a9 5b 20 18 00 22 5b 80 1a a9 5d 20 18 00 4c
>1a7f98		55 80 22 73 80 1a 4c 59 80 a9 28 20 18 00 22 5b
>1a7fa8		80 1a a9 2c 20 18 00 a9 53 20 18 00 a9 29 20 18
>1a7fb8		00 a9 2c 20 18 00 a9 59 20 18 00 4c 55 80 a9 5b
>1a7fc8		20 18 00 22 5b 80 1a a9 5d 20 18 00 a9 2c 20 18
>1a7fd8		00 a9 59 20 18 00 4c 55 80 a0 02 00 80 03 a0 01
>1a7fe8		00 22 d9 80 1a 4c 59 80 4c 59 80 22 73 80 1a a9
>1a7ff8		2c 20 18 00 a9 58 20 18 00 4c 59 80 a9 23 20 18
>1a8008		00 8b a5 02 48 ab a6 00 e8 a0 01 00 22 ac 03 1a
>1a8018		a9 2c 20 18 00 a9 23 20 18 00 a6 00 a0 01 00 22
>1a8028		ac 03 1a ab 22 88 86 1a 4c 55 80 a9 28 20 18 00
>1a8038		22 65 80 1a a9 29 20 18 00 4c 55 80 a9 5b 20 18
>1a8048		00 22 65 80 1a a9 5d 20 18 00 4c 55 80 22 88 86
>1a8058		1a 28 6b 08 e2 20 a7 00 20 53 04 28 6b 08 c2 30
>1a8068		a7 00 20 39 04 22 88 86 1a 28 6b 08 8b 0b c2 30
>1a8078		5a 08 c2 20 48 a9 7a 08 5b 68 28 08 e2 20 48 a9
>1a8088		00 48 ab 68 28 e2 20 a0 00 00 a7 00 99 92 08 22
>1a8098		88 86 1a c8 c0 03 00 d0 f1 22 32 81 1a c2 30 7a
>1a80a8		2b ab 28 6b 08 8b e2 20 c2 10 08 e2 20 48 a9 1a
>1a80b8		48 ab 68 28 bd 00 00 20 18 00 e8 bd 00 00 20 18
>1a80c8		00 e8 bd 00 00 20 18 00 e8 a9 20 20 18 00 ab 28
>1a80d8		6b 08 0b 08 c2 20 48 a9 7a 08 5b 68 28 e2 20 c0
>1a80e8		02 00 f0 14 a7 00 85 18 30 06 64 19 64 1a 80 1e
>1a80f8		a9 ff 85 19 85 1a 80 16 a7 00 85 18 22 88 86 1a
>1a8108		a7 00 85 19 30 04 64 1a 80 04 a9 ff 85 1a c2 20
>1a8118		38 a5 00 65 18 85 18 e2 20 a5 02 65 1a 85 1a 22
>1a8128		32 81 1a 22 88 86 1a 2b 28 6b 08 0b c2 20 48 08
>1a8138		c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4c 20 53 04
>1a8148		e2 20 a9 3a 20 18 00 c2 20 a5 4a 20 39 04 68 2b
>1a8158		28 6b 4f 52 41 00 41 4e 44 00 45 4f 52 00 41 44
>1a8168		43 00 53 54 41 00 4c 44 41 00 43 4d 50 00 53 42
>1a8178		43 00 41 53 4c 00 52 4f 4c 00 4c 53 52 00 52 4f
>1a8188		52 00 53 54 58 00 4c 44 58 00 44 45 43 00 49 4e
>1a8198		43 00 42 49 54 00 4a 4d 50 00 53 54 59 00 4c 44
>1a81a8		59 00 43 50 59 00 43 50 58 00 42 52 4b 00 4a 53
>1a81b8		52 00 52 54 49 00 52 54 53 00 50 48 50 00 50 4c
>1a81c8		50 00 50 48 41 00 50 4c 41 00 44 45 59 00 54 41
>1a81d8		59 00 49 4e 59 00 49 4e 58 00 43 4c 43 00 53 45
>1a81e8		43 00 43 4c 49 00 53 45 49 00 54 59 41 00 43 4c
>1a81f8		56 00 43 4c 44 00 53 45 44 00 54 58 41 00 54 58
>1a8208		53 00 54 41 58 00 54 53 58 00 44 45 58 00 4e 4f
>1a8218		50 00 42 50 4c 00 42 4d 49 00 42 56 43 00 42 56
>1a8228		53 00 42 43 43 00 42 43 53 00 42 4e 45 00 42 45
>1a8238		51 00 54 53 42 00 54 52 42 00 53 54 5a 00 42 52
>1a8248		41 00 50 48 59 00 50 4c 59 00 50 48 58 00 50 4c
>1a8258		58 00 50 48 44 00 50 4c 44 00 50 48 4b 00 52 54
>1a8268		4c 00 50 48 42 00 50 4c 42 00 57 41 49 00 58 42
>1a8278		41 00 54 43 53 00 54 53 43 00 54 43 44 00 54 44
>1a8288		43 00 54 58 59 00 54 59 58 00 53 54 50 00 58 43
>1a8298		45 00 43 4f 50 00 4a 53 4c 00 57 44 4d 00 50 45
>1a82a8		52 00 42 52 4c 00 52 45 50 00 53 45 50 00 4d 56
>1a82b8		50 00 4d 56 4e 00 50 45 49 00 50 45 41 00 4a 4d
>1a82c8		4c 00 00 00 b2 81 5a 81 9a 82 5a 81 3a 82 5a 81
>1a82d8		7a 81 5a 81 c2 81 5a 81 7a 81 5a 82 3a 82 5a 81
>1a82e8		7a 81 5a 81 1a 82 5a 81 5a 81 5a 81 3e 82 5a 81
>1a82f8		7a 81 5a 81 e2 81 5a 81 96 81 7a 82 3e 82 5a 81
>1a8308		7a 81 5a 81 b6 81 5e 81 9e 82 5e 81 9a 81 5e 81
>1a8318		7e 81 5e 81 c6 81 5e 81 7e 81 5e 82 9a 81 5e 81
>1a8328		7e 81 5e 81 1e 82 5e 81 5e 81 5e 81 9a 81 5e 81
>1a8338		7e 81 5e 81 e6 81 5e 81 92 81 7e 82 9a 81 5e 81
>1a8348		7e 81 5e 81 ba 81 62 81 a2 82 62 81 b6 82 62 81
>1a8358		82 81 62 81 ca 81 62 81 82 81 62 82 9e 81 62 81
>1a8368		82 81 62 81 22 82 62 81 62 81 62 81 ba 82 62 81
>1a8378		82 81 62 81 ea 81 62 81 4a 82 82 82 c6 82 62 81
>1a8388		82 81 62 81 be 81 66 81 a6 82 66 81 42 82 66 81
>1a8398		86 81 66 81 ce 81 66 81 86 81 66 82 9e 81 66 81
>1a83a8		86 81 66 81 26 82 66 81 66 81 66 81 42 82 66 81
>1a83b8		86 81 66 81 ee 81 66 81 4e 82 86 82 9e 81 66 81
>1a83c8		86 81 66 81 46 82 6a 81 aa 82 6a 81 a2 81 6a 81
>1a83d8		8a 81 6a 81 d2 81 9a 81 02 82 6a 82 a2 81 6a 81
>1a83e8		8a 81 6a 81 2a 82 6a 81 6a 81 6a 81 a2 81 6a 81
>1a83f8		8a 81 6a 81 f2 81 6a 81 06 82 8a 82 42 82 6a 81
>1a8408		42 82 6a 81 a6 81 6e 81 8e 81 6e 81 a6 81 6e 81
>1a8418		8e 81 6e 81 d6 81 6e 81 0a 82 6e 82 a6 81 6e 81
>1a8428		8e 81 6e 81 2e 82 6e 81 6e 81 6e 81 a6 81 6e 81
>1a8438		8e 81 6e 81 f6 81 6e 81 0e 82 8e 82 a6 81 6e 81
>1a8448		8e 81 6e 81 aa 81 72 81 ae 82 72 81 aa 81 72 81
>1a8458		92 81 72 81 da 81 72 81 12 82 72 82 aa 81 72 81
>1a8468		92 81 72 81 32 82 72 81 72 81 72 81 be 82 72 81
>1a8478		92 81 72 81 fa 81 72 81 52 82 92 82 c6 82 72 81
>1a8488		92 81 72 81 ae 81 76 81 b2 82 76 81 ae 81 76 81
>1a8498		96 81 76 81 de 81 76 81 16 82 76 82 ae 81 76 81
>1a84a8		96 81 76 81 36 82 76 81 76 81 76 81 c2 82 76 81
>1a84b8		96 81 76 81 fe 81 76 81 56 82 96 82 b6 81 76 81
>1a84c8		96 81 76 81 00 00 13 00 02 09 01 01 01 0a 13 82
>1a84d8		08 13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06
>1a84e8		08 13 03 07 07 0e 03 00 0b 09 01 01 01 0a 13 82
>1a84f8		08 13 03 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06
>1a8508		08 13 07 07 07 0e 13 00 13 09 14 01 01 0a 13 82
>1a8518		08 13 03 03 03 0b 12 04 0f 0c 14 05 05 0d 13 06
>1a8528		13 13 0b 07 07 0b 13 00 16 09 01 01 01 0a 13 82
>1a8538		08 13 15 03 03 0b 12 04 0f 0c 05 05 05 0d 13 06
>1a8548		13 13 10 07 07 0e 12 00 16 09 01 01 01 0a 13 82
>1a8558		13 13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06
>1a8568		13 13 03 07 07 0e 82 00 42 09 01 01 01 0a 13 82
>1a8578		13 13 03 03 03 0b 12 04 0f 0c 05 05 11 0d 13 06
>1a8588		13 13 07 07 06 0e 42 00 02 09 01 01 01 0a 13 82
>1a8598		13 13 03 03 03 0b 12 04 0f 0c 01 05 05 0d 13 06
>1a85a8		13 13 17 07 07 0e 42 00 02 09 01 01 01 0f 13 82
>1a85b8		13 13 03 03 03 0b 12 04 0f 0c 03 05 05 0d 13 06
>1a85c8		13 13 10 07 07 0e 01 01 01 02 01 01 02 02 00 01
>1a85d8		01 03 01 01 03 01 02 01 01 00 02 02 02 02 41 00
>1a85e8		08 64 64 3a 64 64 64 64 2c 58 00 0e 64 64 3a 64
>1a85f8		64 64 64 00 0b 64 64 64 64 2c 58 00 07 64 64 64
>1a8608		64 2c 59 00 06 64 64 64 64 00 03 64 64 2c 58 00
>1a8618		05 64 64 2c 59 00 11 64 64 2c 53 00 09 64 64 00
>1a8628		01 23 64 64 64 64 00 c2 23 64 64 2c 23 64 64 00
>1a8638		14 23 64 64 00 02 28 64 64 2c 53 29 2c 59 00 0c
>1a8648		28 64 64 64 64 2c 58 29 00 10 28 64 64 64 64 29
>1a8658		00 10 28 64 64 2c 58 29 00 00 28 64 64 29 2c 59
>1a8668		00 04 28 64 64 29 00 0f 5b 64 64 64 64 5d 00 17
>1a8678		5b 64 64 5d 2c 59 00 0d 5b 64 64 5d 00 0a 00 00
>1a8688		08 c2 20 48 18 af 7a 08 00 69 01 00 8f 7a 08 00
>1a8698		e2 20 af 7c 08 00 69 00 8f 7c 08 00 c2 20 68 28
>1a86a8		6b 08 c2 10 e2 20 da a2 08 00 0a b0 08 48 a9 30
>1a86b8		20 18 00 80 06 48 a9 31 20 18 00 68 ca d0 eb fa
>1a86c8		28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a7 32
>1a86d8		f0 0a c9 20 d0 06 22 88 86 1a 80 f2 6b 08 08 c2
>1a86e8		20 48 a9 48 08 5b 68 28 22 88 86 1a 22 ca 86 1a
>1a86f8		c2 30 a5 31 c2 20 29 ff 00 0a 0a aa a5 32 95 0d
>1a8708		a5 34 95 0f e2 20 a7 32 f0 14 c9 22 f0 06 22 88
>1a8718		86 1a 80 f2 a9 00 87 32 22 88 86 1a e6 31 28 6b
>1a8728		08 c2 20 48 a9 48 08 5b 68 28 e2 20 64 4a c2 20
>1a8738		64 50 64 52 e2 20 a7 32 c9 3a f0 0d 20 d1 04 90
>1a8748		0e 22 c0 7b 1a a9 01 85 4a 22 88 86 1a 80 e5 a5
>1a8758		4a f0 16 a5 31 c2 20 29 ff 00 0a 0a aa a5 50 95
>1a8768		0d a5 52 95 0f e2 20 e6 31 6b e2 20 64 31 22 ca
>1a8778		86 1a a7 32 f0 21 c9 22 d0 06 22 e5 86 1a 80 0a
>1a8788		22 28 87 1a a5 31 c9 09 b0 0d a7 32 f0 09 c9 20
>1a8798		f0 dc 20 d1 04 b0 d7 6b 08 0b 08 c2 20 48 a9 48
>1a87a8		08 5b 68 28 c2 10 e2 20 a2 31 00 74 00 ca d0 fb
>1a87b8		a9 00 85 02 85 34 c2 20 a9 00 4f 85 00 85 32 e2
>1a87c8		20 22 ca 86 1a c9 00 f0 38 c2 20 a5 32 85 08 e2
>1a87d8		20 a5 34 85 0a a2 01 00 22 88 86 1a a7 32 d0 06
>1a87e8		86 0b 64 31 80 1b c9 20 f0 03 e8 80 eb 86 0b a9
>1a87f8		00 87 32 22 88 86 1a a7 08 c9 41 f0 07 22 72 87
>1a8808		1a 2b 28 6b 22 ca 86 1a a7 32 f0 f5 22 28 87 1a
>1a8818		22 ca 86 1a a7 32 f0 e9 c2 20 a5 32 85 11 e2 20
>1a8828		a5 34 85 13 22 88 86 1a a7 32 f0 26 c9 20 d0 f4
>1a8838		a9 00 87 32 e6 31 22 88 86 1a 22 ca 86 1a a7 32
>1a8848		f0 bf c2 20 a5 32 85 15 e2 20 a5 34 85 17 e6 31
>1a8858		80 af e6 31 80 ab 08 c2 10 e2 20 a5 31 d0 0f a2
>1a8868		54 89 a9 1a 48 ab 20 29 04 20 9c 03 80 61 c2 20
>1a8878		a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20 47 6a e2
>1a8888		20 a5 31 c9 01 d0 0f c2 20 a9 ff ff 8f 54 03 00
>1a8898		8f 56 03 00 80 0e c2 20 a5 11 8f 54 03 00 a5 13
>1a88a8		8f 56 03 00 22 18 11 00 b0 25 e2 20 a2 7a 89 a9
>1a88b8		1a 48 ab 20 29 04 af 2e 03 00 20 53 04 a9 20 20
>1a88c8		18 00 af 20 03 00 20 53 04 20 9c 03 20 9c 03 28
>1a88d8		6b 8b 08 c2 10 e2 20 a5 31 c9 03 f0 0f a2 54 89
>1a88e8		a9 1a 48 ab 20 29 04 20 9c 03 80 54 c2 20 a5 0d
>1a88f8		8f 23 08 00 a5 0f 8f 25 08 00 20 47 6a a5 11 8f
>1a8908		50 03 00 a5 13 8f 52 03 00 a5 15 8f 58 03 00 a5
>1a8918		17 8f 5a 03 00 22 1c 11 00 b0 25 e2 20 a2 64 89
>1a8928		a9 1a 48 ab 20 29 04 af 2e 03 00 20 53 04 a9 20
>1a8938		20 18 00 af 20 03 00 20 53 04 20 9c 03 20 9c 03
>1a8948		28 ab 6b 5c 7d 27 1a 6b 00 00 00 00 42 61 64 20
>1a8958		61 72 67 75 6d 65 6e 74 73 0d 0d 00 55 6e 61 62
>1a8968		6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65 3a
>1a8978		20 00 55 6e 61 62 6c 65 20 74 6f 20 6c 6f 61 64
>1a8988		20 66 69 6c 65 3a 20 00 0d 20 20 50 43 20 20 20
>1a8998		20 20 41 20 20 20 20 58 20 20 20 20 59 20 20 20
>1a89a8		20 53 50 20 20 20 44 42 52 20 44 50 20 20 20 4e
>1a89b8		56 4d 58 44 49 5a 43 0d 00 41 43 44 46 47 4a 48
>1a89c8		4c 4d 52 3b 53 54 56 57 58 3e 3f 00 18 fb 08 c2
>1a89d8		20 48 a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab
>1a89e8		68 28 c2 30 20 13 8a a9 ff fe 1b 08 e2 20 48 a9
>1a89f8		1a 48 ab 68 28 a2 71 d2 20 29 04 08 e2 20 48 a9
>1a8a08		00 48 ab 68 28 4c 7d 27 4c 10 8a 08 20 34 03 20
>1a8a18		b6 4f 28 60 00 00 00 00 00 00 00 00 00 00 00 00
>1a8a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1116 times (17856 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>1ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>1ad268		00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46 6f
>1ad278		65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76 30
>1ad288		2e 32 2e 30 2d 61 6c 70 68 61 2b 33 39 38 0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f4 f4 f4 f4 f4 f4 f4 f4		CREDITS_COLOR   .fill 80 * 60, $F4
>1b1808		f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4 f4
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f4 f4 f4 f4 f4 f4 f4 f4
.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		48		pha		                PHA             ; begin setdp macro
.1e0001		08		php		                PHP
.1e0002		c2 20		rep #$20	                REP #$20        ; set A long
.1e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1e0007		5b		tcd		                TCD
.1e0008		28		plp		                PLP
.1e0009		68		pla		                PLA             ; end setdp macro
.1e000a		c2 10		rep #$10	                REP #$10        ; set X long
.1e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e0012		a9 00		lda #$00	                LDA #$00
.1e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e0024		20 ee 00	jsr $1e00ee	                JSR Splash_Get_Machine_ID
.1e0027		20 21 01	jsr $1e0121	                JSR Splash_Clear_Screen
.1e002a		20 0b 01	jsr $1e010b	                JSR Splash_Load_FontSet
.1e002d		22 08 03 1e	jsl $1e0308	                JSL Splashscreen_BitMapSetup
.1e0031		20 1b 06	jsr $1e061b	                JSR Model_Update_Info_Field
.1e0034		20 fc 05	jsr $1e05fc	                JSR Set_Text_Color
.1e0037		a9 00		lda #$00	                LDA #$00
.1e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e003d		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0040						HAVE_FUN:
.1e0040		22 f0 80 19	jsl $1980f0	                JSL BOOT_SOUND_OFF
.1e0044		22 3b 01 1e	jsl $1e013b	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0048		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e004a		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e004d		f0 08		beq $1e0057	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e004f		20 e0 08	jsr $1e08e0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e0052		90 21		bcc $1e0075	                BCC Still_Displaying_Char
.1e0054		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0057						ByPassCharDisplay:
.1e0057		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0059		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.1e005d		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e005f		f0 14		beq $1e0075	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e0061		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.1e0063		f0 1f		beq $1e0084	                BEQ return              ; Yes: return it
.1e0065		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.1e0067		f0 1b		beq $1e0084	                BEQ return              ; Yes: return it
.1e0069		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.1e006b		f0 17		beq $1e0084	                BEQ return              ; Yes: return it
.1e006d		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.1e006f		f0 13		beq $1e0084	                BEQ return              ; Yes: return it
.1e0071		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.1e0073		f0 0d		beq $1e0082	                BEQ exitshere
.1e0075						Still_Displaying_Char:
.1e0075						WaitForNextSOF:
.1e0075		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0079		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e007b		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e007d		d0 f6		bne $1e0075	                BNE WaitForNextSOF;
.1e007f		4c 40 00	jmp $1e0040	                JMP HAVE_FUN
.1e0082						exitshere:
.1e0082						timeout
.1e0082		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e0084						return
.1e0084		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0088		a9 00		lda #$00	                LDA #$00
.1e008a		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e008e		22 3c 05 1e	jsl $1e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e0092		20 a7 00	jsr $1e00a7	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e0095		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0099		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e009d		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e00a1		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e00a5		ea		nop		                NOP
.1e00a6		6b		rtl		                RTL
.1e00a7						VickyII_Registers_Clear:
.1e00a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a9		c2 10		rep #$10	                REP #$10        ; set X long
.1e00ab		a2 00 00	ldx #$0000	                LDX #$0000
.1e00ae		a9 00		lda #$00	                LDA #$00
.1e00b0						ClearSpriteRegisters:
.1e00b0		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00b4		e8		inx		                INX
.1e00b5		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b8		d0 f6		bne $1e00b0	                BNE ClearSpriteRegisters
.1e00ba		a2 00 00	ldx #$0000	                LDX #$0000
.1e00bd		a9 00		lda #$00	                LDA #$00
.1e00bf						ClearTiles0Registers:
.1e00bf		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00c3		e8		inx		                INX
.1e00c4		e0 30 00	cpx #$0030	                CPX #$0030
.1e00c7		d0 f6		bne $1e00bf	                BNE ClearTiles0Registers
.1e00c9		ea		nop		                NOP
.1e00ca		a2 00 00	ldx #$0000	                LDX #$0000
.1e00cd		a9 00		lda #$00	                LDA #$00
.1e00cf						ClearTiles1Registers:
.1e00cf		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00d3		e8		inx		                INX
.1e00d4		e0 20 00	cpx #$0020	                CPX #$0020
.1e00d7		d0 f6		bne $1e00cf	                BNE ClearTiles1Registers
.1e00d9		ea		nop		                NOP
.1e00da		a2 00 00	ldx #$0000	                LDX #$0000
.1e00dd		a9 00		lda #$00	                LDA #$00
.1e00df						ClearBitmapRegisters:
.1e00df		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00e3		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00e7		e8		inx		                INX
.1e00e8		e0 10 00	cpx #$0010	                CPX #$0010
.1e00eb		d0 f2		bne $1e00df	                BNE ClearBitmapRegisters
.1e00ed		60		rts		                RTS
.1e00ee						Splash_Get_Machine_ID
.1e00ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00f0		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00f4		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00f6		85 b0		sta $b0		                STA MODEL
.1e00f8		c9 00		cmp #$00	                CMP #$00
.1e00fa		f0 0e		beq $1e010a	                BEQ DONE
.1e00fc		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e0100		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e0102		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e0104		f0 04		beq $1e010a	                BEQ DONE
.1e0106		a9 02		lda #$02	                LDA #$02
.1e0108		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e010a						DONE:
.1e010a		60		rts		                RTS
.1e010b						Splash_Load_FontSet
.1e010b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e010d		c2 10		rep #$10	                REP #$10        ; set X long
.1e010f		a2 00 00	ldx #$0000	                LDX #$0000
.1e0112						DONE_LOADING_FONT:
.1e0112		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e0116		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e011a		e8		inx		                INX
.1e011b		e0 00 08	cpx #$0800	                CPX #2048
.1e011e		d0 f2		bne $1e0112	                BNE DONE_LOADING_FONT
.1e0120		60		rts		                RTS
.1e0121						Splash_Clear_Screen
.1e0121		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0123		c2 10		rep #$10	                REP #$10        ; set X long
.1e0125		a2 00 00	ldx #$0000	                LDX #$0000
.1e0128						Branch_Clear:
.1e0128		a9 20		lda #$20	                LDA #$20
.1e012a		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e012e		a9 f0		lda #$f0	                LDA #$F0
.1e0130		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e0134		e8		inx		                INX
.1e0135		e0 00 20	cpx #$2000	                CPX #$2000
.1e0138		d0 ee		bne $1e0128	                BNE Branch_Clear
.1e013a		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e013b						Splash_Moniker_Color_Rolling
.1e013b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e013d		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e0141		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0143		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e0147		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.1e0149		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e014b		f0 0c		beq $1e0159	                BEQ SERVE_STATE0
.1e014d		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e014f		f0 1a		beq $1e016b	                BEQ SERVE_STATE1
.1e0151		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e0153		d0 03		bne $1e0158	                BNE NOT_SERVE_STATE2
.1e0155		82 39 01	brl $1e0291	                BRL SERVE_STATE2
.1e0158						NOT_SERVE_STATE2
.1e0158		6b		rtl		                RTL
.1e0159						SERVE_STATE0
.1e0159		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.1e015b		c9 04		cmp #$04	                CMP #$04
.1e015d		f0 03		beq $1e0162	                BEQ SERVE_NEXT_STATE
.1e015f		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.1e0161		6b		rtl		                RTL
.1e0162						SERVE_NEXT_STATE
.1e0162		a9 00		lda #$00	                LDA #$00
.1e0164		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0166		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0168		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e016a		6b		rtl		                RTL
.1e016b						SERVE_STATE1
.1e016b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e016d		a9 00 00	lda #$0000	                LDA #$0000
.1e0170		a2 00 00	ldx #$0000	                LDX #$0000
.1e0173		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e0175		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0177		bf c0 02 1e	lda $1e02c0,x	                LDA @lCOLOR_POINTER+0, X
.1e017b		aa		tax		                TAX
.1e017c		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0180		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e0184		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0188		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e018c		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0190		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e0194		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0196		bf c1 02 1e	lda $1e02c1,x	                LDA @lCOLOR_POINTER+1, X
.1e019a		aa		tax		                TAX
.1e019b		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e019f		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e01a3		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01a7		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01ab		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01af		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01b3		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01b5		bf c2 02 1e	lda $1e02c2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b9		aa		tax		                TAX
.1e01ba		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01be		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01c2		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01c6		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01ca		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ce		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01d2		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01d4		bf c3 02 1e	lda $1e02c3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d8		aa		tax		                TAX
.1e01d9		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01dd		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01e1		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01e5		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e9		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ed		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01f1		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01f3		bf c4 02 1e	lda $1e02c4,x	                LDA @lCOLOR_POINTER+4, X
.1e01f7		aa		tax		                TAX
.1e01f8		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01fc		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e0200		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0204		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0208		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e020c		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e0210		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0212		bf c5 02 1e	lda $1e02c5,x	                LDA @lCOLOR_POINTER+5, X
.1e0216		aa		tax		                TAX
.1e0217		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e021b		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e021f		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0223		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e0227		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e022b		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e022f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0231		bf c6 02 1e	lda $1e02c6,x	                LDA @lCOLOR_POINTER+6, X
.1e0235		aa		tax		                TAX
.1e0236		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e023a		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e023e		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0242		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e0246		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e024a		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e024e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0250		bf c7 02 1e	lda $1e02c7,x	                LDA @lCOLOR_POINTER+7, X
.1e0254		aa		tax		                TAX
.1e0255		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0259		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e025d		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e0261		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0265		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0269		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e026d		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0271		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e0275		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0279						HERE
.1e0279		18		clc		                CLC
.1e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e027c		69 09		adc #$09	                ADC #$09
.1e027e		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0280		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e0282		c9 48		cmp #$48	                CMP #$48
.1e0284		d0 04		bne $1e028a	                BNE EXIT_COLOR_CHANGE
.1e0286		a9 00		lda #$00	                LDA #$00
.1e0288		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e028a						EXIT_COLOR_CHANGE
.1e028a		c2 10		rep #$10	                REP #$10        ; set X long
.1e028c		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028e		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0290		6b		rtl		                RTL
.1e0291						SERVE_STATE2
.1e0291		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e0293		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0295		6b		rtl		                RTL
>1e0296						.align 16
>1e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02c8		00
>1e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02d1		00
>1e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02da		00
>1e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02e3		00
>1e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02ec		00
>1e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02f5		00
>1e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02fe		00
>1e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e0307		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e0308						Splashscreen_BitMapSetup
.1e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.1e030a		c2 10		rep #$10	                REP #$10        ; set X long
.1e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0312		a9 00		lda #$00	        LDA #$00
.1e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0318		a9 00		lda #$00	        LDA #$00
.1e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0324		a9 00		lda #$00	        LDA #$00
.1e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e032a		a9 00		lda #$00	        LDA #$00
.1e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0334		a9 01		lda #$01	        LDA #$01
.1e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e033a		a9 08		lda #$08	        LDA #$08
.1e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0344		a9 80		lda #$80	        LDA #$80
.1e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e034a		a9 00		lda #$00	        LDA #$00
.1e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0354		a9 a0		lda #$a0	        LDA #$A0
.1e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e035a		a9 10		lda #$10	        LDA #$10
.1e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0360		a9 10		lda #$10	        LDA #$10
.1e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e036c		c2 10		rep #$10	                REP #$10        ; set X long
.1e036e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0371						SS_LUT_BRANCH:
.1e0371		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0375		ea		nop		        NOP
.1e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e037a		e8		inx		        INX
.1e037b		e0 00 04	cpx #$0400	        CPX #1024
.1e037e		d0 f1		bne $1e0371	        BNE SS_LUT_BRANCH
.1e0380		a9 00		lda #$00	        LDA #$00
.1e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e038e		22 3c 05 1e	jsl $1e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0392		c2 20		rep #$20	                REP #$20        ; set A long
.1e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03a2		a9 00 00	lda #$0000	        LDA #$0000
.1e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03c7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03d3		a9 00		lda #$00	        LDA #$00
.1e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03df		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03e9		29 03		and #$03	        AND #$03
.1e03eb		c9 00		cmp #$00	        CMP #$00
.1e03ed		f0 0b		beq $1e03fa	        BEQ DMA_FMX_Moniker
.1e03ef		c9 01		cmp #$01	        CMP #$01
.1e03f1		f0 5b		beq $1e044e	        BEQ DMA_UPlus_Moniker
.1e03f3		c9 02		cmp #$02	        CMP #$02
.1e03f5		d0 03		bne $1e03fa	        BNE BAD_MODEL_NUMBER
.1e03f7		82 a8 00	brl $1e04a2	        BRL DMA_U_Moniker
.1e03fa						 BAD_MODEL_NUMBER:
.1e03fa						DMA_FMX_Moniker:
.1e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.1e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e040a		a9 00 00	lda #$0000	        LDA #$0000
.1e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e042f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e043b		a9 00		lda #$00	        LDA #$00
.1e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0447		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e044b		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e044e						DMA_UPlus_Moniker:
.1e044e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e045e		a9 00 00	lda #$0000	        LDA #$0000
.1e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0483		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e048f		a9 00		lda #$00	        LDA #$00
.1e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e049b		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e049f		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04a2						DMA_U_Moniker:
.1e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.1e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04b2		a9 00 00	lda #$0000	        LDA #$0000
.1e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04d7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04e3		a9 00		lda #$00	        LDA #$00
.1e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04ef		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04f3		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04f6						Done_DMA_Model_Moniker
.1e04f6		6b		rtl		        RTL
.1e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e051e		ea		nop		        NOP
.1e051f		ea		nop		        NOP
.1e0520		ea		nop		        NOP
.1e0521		ea		nop		        NOP
.1e0522		ea		nop		        NOP
.1e0523		ea		nop		        NOP
.1e0524		ea		nop		        NOP
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e052b						NOTFINISHED:
.1e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e052f		29 80		and #$80	        AND #$80
.1e0531		c9 80		cmp #$80	        CMP #$80
.1e0533		f0 f6		beq $1e052b	        BEQ NOTFINISHED
.1e0535		a9 00		lda #$00	        LDA #$00
.1e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e053b		6b		rtl		        RTL
.1e053c						SS_VDMA_CLEAR_MEMORY_640_480
.1e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0544		a9 00		lda #$00	        LDA #$00
.1e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e054a		c2 20		rep #$20	                REP #$20        ; set A long
.1e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0555		a9 00		lda #$00	        LDA #$00
.1e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e055b		c2 20		rep #$20	                REP #$20        ; set A long
.1e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0566		a9 04		lda #$04	        LDA #`(640*480)
.1e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e056c		a9 00		lda #$00	        LDA #$00
.1e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e057f		ea		nop		        NOP
.1e0580		ea		nop		        NOP
.1e0581		ea		nop		        NOP
.1e0582		ea		nop		        NOP
.1e0583		ea		nop		        NOP
.1e0584						SS_VDMA_CLR_LOOPA:
.1e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0588		29 80		and #$80	        AND #$80
.1e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e058c		f0 f6		beq $1e0584	        BEQ SS_VDMA_CLR_LOOPA
.1e058e		ea		nop		        NOP
.1e058f		a9 00		lda #$00	        LDA #$00
.1e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0595		6b		rtl		        RTL
.1e0596						SS_VDMA_TRANSFER_VRAM_2_VRAM
.1e0596		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0598		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.1e059a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e059e		a9 00		lda #$00	        LDA #$00
.1e05a0		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e05a4		c2 20		rep #$20	                REP #$20        ; set A long
.1e05a6		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.1e05a9		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.1e05ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05af		a9 00		lda #$00	        LDA #$00
.1e05b1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.1e05b5		c2 20		rep #$20	                REP #$20        ; set A long
.1e05b7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e05ba		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e05be		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05c0		a9 00		lda #$00	        LDA #$00
.1e05c2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e05c6		c2 20		rep #$20	                REP #$20        ; set A long
.1e05c8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.1e05cb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e05cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05d1		a9 00		lda #$00	        LDA #`(320*16)
.1e05d3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e05d7		a9 00		lda #$00	        LDA #$00
.1e05d9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e05dd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e05e1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e05e3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05e7		ea		nop		        NOP
.1e05e8		ea		nop		        NOP
.1e05e9		ea		nop		        NOP
.1e05ea						SS_VDMA_CLR_LOOPB:
.1e05ea		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e05ee		29 80		and #$80	        AND #$80
.1e05f0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e05f2		f0 f6		beq $1e05ea	        BEQ SS_VDMA_CLR_LOOPB
.1e05f4		ea		nop		        NOP
.1e05f5		a9 00		lda #$00	        LDA #$00
.1e05f7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05fb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e05fc						Set_Text_Color:
.1e05fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05fe		a9 00 00	lda #$0000	            LDA #00
.1e0601		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e0603		a9 30 00	lda #$0030	            LDA #48
.1e0606		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e0608		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e060b		a0 00 00	ldy #$0000	            LDY #$0000
.1e060e		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0610		a9 40		lda #$40	            LDA #$40
.1e0612						SetColorBranch:
.1e0612		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e0614		c8		iny		            INY
.1e0615		c0 50 00	cpy #$0050	            CPY #80
.1e0618		d0 f8		bne $1e0612	            BNE SetColorBranch
.1e061a		60		rts		            RTS
.1e061b						Model_Update_Info_Field:
.1e061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e061d		a9 00 00	lda #$0000	            LDA #$0000
.1e0620		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0622		a5 b0		lda $b0		            LDA MODEL
.1e0624		0a		asl a		            ASL
.1e0625		0a		asl a		            ASL
.1e0626		aa		tax		            TAX
.1e0627		c2 20		rep #$20	                REP #$20        ; set A long
.1e0629		bf af 0c 1e	lda $1e0caf,x	            LDA MODEL_TABLE, X
.1e062d		85 a0		sta $a0		            STA MOD_SELECT_L
.1e062f		bf b1 0c 1e	lda $1e0cb1,x	            LDA MODEL_TABLE + 2, X
.1e0633		85 a2		sta $a2		            STA MOD_SELECT_H
.1e0635		a0 00 00	ldy #$0000	            LDY #$0000
.1e0638		84 a6		sty $a6		            STY LINE_INDEX
.1e063a						Next_Change_Here:
.1e063a		c2 20		rep #$20	                REP #$20        ; set A long
.1e063c		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e063e		bb		tyx		            TYX
.1e063f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e0641		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0643		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0647		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0649		c8		iny		            INY
.1e064a		c8		iny		            INY
.1e064b		bb		tyx		            TYX
.1e064c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e064e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0650		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0654		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0656		c8		iny		            INY
.1e0657		c8		iny		            INY
.1e0658		84 a6		sty $a6		            STY LINE_INDEX
.1e065a		c0 10 00	cpy #$0010	            CPY #16
.1e065d		f0 10		beq $1e066f	            BEQ LetsMoveOn
.1e065f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0661		a0 00 00	ldy #$0000	            LDY #$0000
.1e0664						nextchar:
.1e0664		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0666		c9 00		cmp #$00	            CMP #$00
.1e0668		f0 d0		beq $1e063a	            BEQ Next_Change_Here
.1e066a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e066c		c8		iny		            INY
.1e066d		80 f5		bra $1e0664	            BRA nextchar
.1e066f						LetsMoveOn:
.1e066f		af 0b 0d 1e	lda $1e0d0b	            LDA LINE_MOD + 12
.1e0673		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0675		a0 00 00	ldy #$0000	            LDY #$0000
.1e0678		e2 20		sep #$20	                SEP #$20        ; set A short
.1e067a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e067e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0680		c8		iny		            INY
.1e0681		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e0685		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0687		c8		iny		            INY
.1e0688		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e068c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e068e		18		clc		            CLC
.1e068f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.1e0693		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0696		8f da 0a 1e	sta $1e0ada	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e069a		8f 13 0b 1e	sta $1e0b13	            STA @lLINE9 + 47    ; GABE in FMX
.1e069e		8f 59 0b 1e	sta $1e0b59	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e06a2		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e06a6		29 0f		and #$0f	            AND #$0F
.1e06a8		69 30		adc #$30	            ADC #$30
.1e06aa		8f db 0a 1e	sta $1e0adb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e06ae		8f 14 0b 1e	sta $1e0b14	            STA @lLINE9 + 48    ; GABE in FMX
.1e06b2		8f 5a 0b 1e	sta $1e0b5a	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e06b6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e06ba		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06bd		8f dd 0a 1e	sta $1e0add	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e06c1		8f 16 0b 1e	sta $1e0b16	            STA @lLINE9 + 50    ; GABE in FMX
.1e06c5		8f 5c 0b 1e	sta $1e0b5c	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e06c9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e06cd		29 0f		and #$0f	            AND #$0F
.1e06cf		69 30		adc #$30	            ADC #$30
.1e06d1		8f de 0a 1e	sta $1e0ade	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e06d5		8f 17 0b 1e	sta $1e0b17	            STA @lLINE9 + 51    ; GABE in FMX
.1e06d9		8f 5d 0b 1e	sta $1e0b5d	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e06dd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e06e1		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06e4		8f e0 0a 1e	sta $1e0ae0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e06e8		8f 19 0b 1e	sta $1e0b19	            STA @lLINE9 + 53    ; GABE in FMX
.1e06ec		8f 5f 0b 1e	sta $1e0b5f	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e06f0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e06f4		29 0f		and #$0f	            AND #$0F
.1e06f6		69 30		adc #$30	            ADC #$30
.1e06f8		8f e1 0a 1e	sta $1e0ae1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e06fc		8f 1a 0b 1e	sta $1e0b1a	            STA @lLINE9 + 54    ; GABE in FMX
.1e0700		8f 60 0b 1e	sta $1e0b60	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e0704		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0708		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e070b		8f d0 0a 1e	sta $1e0ad0	            STA @lLINE8 + 46    ; U/U+
.1e070f		8f 09 0b 1e	sta $1e0b09	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e0713		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0717		29 0f		and #$0f	            AND #$0F
.1e0719		69 30		adc #$30	            ADC #$30
.1e071b		8f d1 0a 1e	sta $1e0ad1	            STA @lLINE8 + 47
.1e071f		8f 0a 0b 1e	sta $1e0b0a	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e0723		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0727		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e072a		8f 4f 0b 1e	sta $1e0b4f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e072e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0732		29 0f		and #$0f	            AND #$0F
.1e0734		69 30		adc #$30	            ADC #$30
.1e0736		8f 50 0b 1e	sta $1e0b50	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e073a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e073e		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0741		8f d2 0a 1e	sta $1e0ad2	            STA @lLINE8 + 48
.1e0745		8f 0b 0b 1e	sta $1e0b0b	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e0749		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e074d		29 0f		and #$0f	            AND #$0F
.1e074f		69 30		adc #$30	            ADC #$30
.1e0751		8f d3 0a 1e	sta $1e0ad3	            STA @lLINE8 + 49
.1e0755		8f 0c 0b 1e	sta $1e0b0c	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e0759		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e075d		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0760		8f 51 0b 1e	sta $1e0b51	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e0764		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0768		29 0f		and #$0f	            AND #$0F
.1e076a		69 30		adc #$30	            ADC #$30
.1e076c		8f 52 0b 1e	sta $1e0b52	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e0770		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0774		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0777		8f c4 0a 1e	sta $1e0ac4	            STA @lLINE8 + 34
.1e077b		8f fd 0a 1e	sta $1e0afd	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e077f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0783		29 0f		and #$0f	            AND #$0F
.1e0785		69 30		adc #$30	            ADC #$30
.1e0787		8f c5 0a 1e	sta $1e0ac5	            STA @lLINE8 + 35
.1e078b		8f fe 0a 1e	sta $1e0afe	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e078f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0793		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0796		8f 44 0b 1e	sta $1e0b44	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e079a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e079e		29 0f		and #$0f	            AND #$0F
.1e07a0		69 30		adc #$30	            ADC #$30
.1e07a2		8f 45 0b 1e	sta $1e0b45	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e07a6		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07aa		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07ad		8f c6 0a 1e	sta $1e0ac6	            STA @lLINE8 + 36
.1e07b1		8f ff 0a 1e	sta $1e0aff	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e07b5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07b9		29 0f		and #$0f	            AND #$0F
.1e07bb		69 30		adc #$30	            ADC #$30
.1e07bd		8f c7 0a 1e	sta $1e0ac7	            STA @lLINE8 + 37
.1e07c1		8f 00 0b 1e	sta $1e0b00	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e07c5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07c9		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07cc		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07d0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07d4		29 0f		and #$0f	            AND #$0F
.1e07d6		69 30		adc #$30	            ADC #$30
.1e07d8		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07dc		20 4f 08	jsr $1e084f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e07df		20 70 08	jsr $1e0870	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e07e2		20 71 08	jsr $1e0871	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e07e5		a5 b0		lda $b0		            LDA MODEL
.1e07e7		29 03		and #$03	            AND #$03
.1e07e9		c9 00		cmp #$00	            CMP #$00
.1e07eb		f0 12		beq $1e07ff	            BEQ Erase_FATVicky_Line;
.1e07ed		c9 01		cmp #$01	            CMP #$01
.1e07ef		f0 29		beq $1e081a	            BEQ Erase_2Lines;
.1e07f1		c9 02		cmp #$02	            CMP #$02
.1e07f3		f0 25		beq $1e081a	            BEQ Erase_2Lines;
.1e07f5		60		rts		            RTS
.1e07f6						HighNibblerBCD:
.1e07f6		29 f0		and #$f0	            AND #$F0
.1e07f8		4a		lsr a		            LSR A
.1e07f9		4a		lsr a		            LSR A
.1e07fa		4a		lsr a		            LSR A
.1e07fb		4a		lsr a		            LSR A
.1e07fc		69 30		adc #$30	            ADC #$30
.1e07fe		60		rts		            RTS
.1e07ff						Erase_FATVicky_Line:
.1e07ff		c2 20		rep #$20	                REP #$20        ; set A long
.1e0801		a9 a2 0a	lda #$0aa2	            LDA #<>LINE8
.1e0804		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0806		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e0809		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e080d		a0 00 00	ldy #$0000	            LDY #$0000
.1e0810		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0812		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0814		c8		iny		            INY
.1e0815		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0817		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0819		60		rts		            RTS
.1e081a						Erase_2Lines
.1e081a		c2 20		rep #$20	                REP #$20        ; set A long
.1e081c		a9 e4 0a	lda #$0ae4	            LDA #<>LINE9
.1e081f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0821		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e0824		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0826		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0828		a0 00 00	ldy #$0000	            LDY #$0000
.1e082b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e082d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e082f		c8		iny		            INY
.1e0830		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0832		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0834		c2 20		rep #$20	                REP #$20        ; set A long
.1e0836		a9 26 0b	lda #$0b26	            LDA #<>LINE10
.1e0839		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e083b		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e083e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0840		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0842		a0 00 00	ldy #$0000	            LDY #$0000
.1e0845		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0847		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0849		c8		iny		            INY
.1e084a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e084c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e084e		60		rts		            RTS
.1e084f						GODETECTHIRES
.1e084f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0851		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e0855		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e0857		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e0859		f0 14		beq $1e086f	            BEQ WeAreDone
.1e085b		c2 10		rep #$10	                REP #$10        ; set X long
.1e085d		a2 00 00	ldx #$0000	            LDX #$0000
.1e0860						ChangeNextChar
.1e0860		bf 5f 0d 1e	lda $1e0d5f,x	            LDA @l ON_TEXT, X
.1e0864		c9 00		cmp #$00	            CMP #$00
.1e0866		f0 07		beq $1e086f	            BEQ WeAreDone
.1e0868		9f 53 0c 1e	sta $1e0c53,x	            STA @l LINE17 +13, X
.1e086c		e8		inx		            INX
.1e086d		d0 f1		bne $1e0860	            BNE ChangeNextChar
.1e086f						WeAreDone
.1e086f						NoExpansionCardPresent
.1e086f		60		rts		            RTS
.1e0870						GODETECTHDD
.1e0870		60		rts		            RTS
.1e0871						GODETECTEXP
.1e0871		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0873		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0877		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0879		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e087b		d0 25		bne $1e08a2	            BNE NoExpansionCardPresent
.1e087d		c2 10		rep #$10	                REP #$10        ; set X long
.1e087f		a2 00 00	ldx #$0000	            LDX #$0000
.1e0882						ChangeNextChar
.1e0882		bf 63 0d 1e	lda $1e0d63,x	            LDA @l YES_TEXT, X
.1e0886		c9 00		cmp #$00	            CMP #$00
.1e0888		f0 07		beq $1e0891	            BEQ WeAreDone
.1e088a		9f 85 0c 1e	sta $1e0c85,x	            STA @l LINE19 +26, X
.1e088e		e8		inx		            INX
.1e088f		d0 f1		bne $1e0882	            BNE ChangeNextChar
.1e0891						WeAreDone
.1e0891		a2 00 00	ldx #$0000	            LDX #$0000
.1e0894						AddCardName
.1e0894		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0898		9f 89 0c 1e	sta $1e0c89,x	            STA @l LINE20, X
.1e089c		e8		inx		            INX
.1e089d		e0 10 00	cpx #$0010	            CPX #$10
.1e08a0		d0 f2		bne $1e0894	            BNE AddCardName
.1e08a2						NoExpansionCardPresent
.1e08a2		60		rts		            RTS
.1e08a3						Line_Setup_Before_Display
.1e08a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08a5		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08a7		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e08aa		f0 33		beq $1e08df	            BEQ DONE
.1e08ac		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08ae		0a		asl a		            ASL A
.1e08af		0a		asl a		            ASL A
.1e08b0		aa		tax		            TAX
.1e08b1		bf 24 09 1e	lda $1e0924,x	            LDA TEXT_TABLE, X
.1e08b5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e08b7		bf 26 09 1e	lda $1e0926,x	            LDA TEXT_TABLE + 2, X
.1e08bb		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e08bd		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08bf		0a		asl a		            ASL A
.1e08c0		aa		tax		            TAX
.1e08c1		bf 80 09 1e	lda $1e0980,x	            LDA TEXT_POSX, X
.1e08c5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e08c7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08cb		bf ae 09 1e	lda $1e09ae,x	            LDA TEXT_POSY, X
.1e08cf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e08d1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e08d5		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e08d8		a9 00 00	lda #$0000	            LDA #$0000
.1e08db		85 a0		sta $a0		            STA TEXT_INDEX
.1e08dd		e6 a6		inc $a6		            INC LINE_INDEX
.1e08df						DONE:
.1e08df		60		rts		            RTS
.1e08e0						Line_Display_1_Character
.1e08e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08e2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e08e4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e08e6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1e08ec		38		sec		            SEC
.1e08ed		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e08ef		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e08f1		c9 00		cmp #$00	            CMP #$00
.1e08f3		f0 06		beq $1e08fb	            BEQ WE_ARE_DONE;
.1e08f5		18		clc		            CLC
.1e08f6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e08f8		c8		iny		            INY
.1e08f9		84 a0		sty $a0		            STY TEXT_INDEX
.1e08fb						WE_ARE_DONE:
.1e08fb		60		rts		            RTS
.1e08fc						Line_Display_Compute_Pointer
.1e08fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08fe		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e0900		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e0904		a9 50 00	lda #$0050	            LDA #80
.1e0907		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e090b		18		clc		            CLC
.1e090c		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e0910		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e0912		69 00 a0	adc #$a000	            ADC #$A000
.1e0915		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0917		69 00 20	adc #$2000	            ADC #$2000
.1e091a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e091c		a9 af 00	lda #$00af	            LDA #$00AF
.1e091f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0921		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e0923		60		rts		            RTS
>1e0924		dc 09 1e 00 fd 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e092c		13 0a 1e 00 21 0a 1e 00 39 0a 1e 00 5c 0a 1e 00
>1e093c		80 0a 1e 00 95 0a 1e 00
>1e0944		a2 0a 1e 00 e4 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e094c		26 0b 1e 00 68 0b 1e 00 72 0b 1e 00 9b 0b 1e 00
>1e095c		d2 0b 1e 00 f5 0b 1e 00
>1e0964		07 0c 1e 00 46 0c 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e096c		58 0c 1e 00 6b 0c 1e 00 89 0c 1e 00 9a 0c 1e 00
>1e097c		ad 0c 1e 00
>1e0980		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0988		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0998		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e09a8		2d 00 1e 00 48 00
>1e09ae		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e09b6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e09c6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e09d6		35 00 39 00 39 00
=6						leftAlign = 6
>1e09dc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e09e4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e09f4		20 20 20 20 20 20 20 20 00
>1e09fd		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e0a05		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e0a13		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e0a1b		4e 46 4f 3a 20 00
>1e0a21		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e0a29		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e0a39		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e0a41		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e0a51		20 20 20 20 20 20 20 20 20 20 00
>1e0a5c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e0a64		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a74		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a80		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a88		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a95		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a9d		53 29 3a 20 00
>1e0aa2		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0aaa		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0aba		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0aca		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0ada		30 30 2f 30 30 2f 30 30 20 00
>1e0ae4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>1e0aec		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>1e0afc		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>1e0b0c		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>1e0b1c		20 20 20 20 20 20 20 20 20 00
>1e0b26		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>1e0b2e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>1e0b3e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>1e0b4e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>1e0b5e		2f 30 30 20 20 20 20 20 20 00
>1e0b68		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b70		20 00
>1e0b72		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b7a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b8a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b9a		00
>1e0b9b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0ba3		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0bb3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0bc3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0bd2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0bda		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0bea		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0bf5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0bfd		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0c07		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0c0f		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0c1f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0c2f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0c3f		46 41 55 4c 54 20 00
>1e0c46		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0c4e		4f 44 45 3a 20 4f 46 46 20 00
>1e0c58		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0c60		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c6b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c73		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c83		3a 20 4e 4f 20 00
>1e0c89		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c91		00 00 00 00 00 00 00 00 00
>1e0c9a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0ca2		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0cad		20 00				LINE22 .text " ", $00
>1e0caf		bf 0c 1e 00 cf 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0cb7		df 0c 1e 00 ef 0c 1e 00
>1e0cbf		0f 0d 1e 00 4f 0d 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0cc7		4f 0d 1e 00 00 00 00 00
>1e0ccf		1f 0d 1e 00 4f 0d 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0cd7		3f 0d 1e 00 00 00 00 00
>1e0cdf		2f 0d 1e 00 3f 0d 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0ce7		3f 0d 1e 00 00 00 00 00
>1e0cef		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0cf7		00 00 00 00 00 00 00 00
>1e0cff		ec 09 1e 00 4b 0a 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0d07		6f 0a 1e 00 8e 0a 1e 00
>1e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0d17		4e 49 58 20 46 4d 58 00
>1e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0d27		4e 49 58 20 55 2b 20 00
>1e0d2f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0d37		4e 49 58 20 55 20 20 00
>1e0d3f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0d47		32 20 42 59 54 45 53 00
>1e0d4f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0d57		34 20 42 59 54 45 53 00
>1e0d5f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0d63		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>1e0d67						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00
.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
