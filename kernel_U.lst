
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass --m65816 -D TARGET=1 -D TARGET_SYS=2 --long-address --flat -b -o kernel_U.bin --list kernel_U.lst --labels=kernel_U.lbl src\kernel.asm
; Thu May 13 13:37:46 2021

;Offset	;PC	;Hex		;Monitor	;Source

;******  Command line definitions

=1						TARGET=1
=2						TARGET_SYS=2

;******  Processing input file: src\kernel.asm

=0						TEST_KEYBOARD = 0 ; This is to enable the ScreenOutput
=1						SYS_C256_FMX = 1                            ; The target system is the C256 Foenix FMX
=2						SYS_C256_U = 2                              ; The target system is the C256 Foenix U With 2Megs of Code Memory
=3						SYS_C256_U_PLUS = 3                         ; The target system is the C256 Foenix U With 4Megs of Code Memory
=1						TARGET_FLASH = 1                            ; The code is being assembled for Flash
=2						TARGET_RAM = 2                              ; The code is being assembled for RAM
=0						START_OF_FLASH := 0
=0						START_OF_KERNEL := 0
=0						START_OF_BASIC := 0
=0						START_OF_CREDITS := 0
=0						START_OF_SPLASH := 0
=0						START_OF_FONT := 0
=$180000					  START_OF_FLASH := $180000                   ; The Foenix U Flash starts at $180000
=$190400					  START_OF_KERNEL := $190400                  ; The kernel itself starts at $190400
=$1a0000					  START_OF_BASIC := $1A0000                   ; The BASIC flash code starts at $1A0000
=$1b0000					  START_OF_CREDITS := $1B0000                 ; The credits screen starts at $1B0000
=$1e0000					  START_OF_SPLASH := $1E0000                  ; SplashScreen Code and Data $3E0000
=$1f0000					  START_OF_FONT := $1F0000                    ; The font starts at $3F0000

;******  Processing file: src\Includes/macros_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/characters.asm

=$01						CHAR_CTRL_A = $01   ; CTRL-A (move to start of line)
=$03						CHAR_CTRL_C = $03   ; CTRL-C
=$05						CHAR_CTRL_E = $05   ; CTRL-E (move to end of line)
=$08						CHAR_BS = $08       ; Backspace (delete character to the left of the cursor)
=$09						CHAR_TAB = $09      ; TAB (moves cursor to next tabulated column)
=$0a						CHAR_LF = $0A       ; Line feed
=$0d						CHAR_CR = $0D       ; Carriage return
=$0f						CHAR_INS = $0F      ; Insert a space at the cursor
=$11						CHAR_UP = $11       ; Up arrow
=$1b						CHAR_ESC = $1B      ; ESC
=$1d						CHAR_RIGHT = $1D    ; Right arrow
=$20						CHAR_SP = $20       ; Space
=$91						CHAR_DOWN = $91     ; Down arrow
=$9d						CHAR_LEFT = $9D     ; Left arrow
=$7f						CHAR_DEL = $7F      ; Delete key (delete the character at the cursor)
=$81						CHAR_F1 = $81       ; Function keys
=$82						CHAR_F2 = $82
=$83						CHAR_F3 = $83
=$84						CHAR_F4 = $84
=$85						CHAR_F5 = $85
=$86						CHAR_F6 = $86
=$87						CHAR_F7 = $87
=$88						CHAR_F8 = $88
=$89						CHAR_F9 = $89
=$8a						CHAR_F10 = $8A
=$8b						CHAR_F11 = $8B
=$8c						CHAR_F12 = $8C

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/simulator_inc.asm


;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_inc.asm

=$000000					BANK0_BEGIN      = $000000 ;Start of bank 0 and Direct page
=$000000					TMPPTR1          = $000000 ; 4 byte temporary pointer
=$000004					TMPPTR2          = $000004 ; 4 byte temporary pointer
=$000008					KRNL_BOOT_MENU_K = $000008 ; Keyboard Tap in Boot Menu
=$000008					OPL2_ADDY_PTR_LO = $000008 ; THis Points towards the Instruments Database
=$000009					OPL2_ADDY_PTR_MD = $000009
=$00000a					OPL2_ADDY_PTR_HI = $00000A ;
=$00000c					SCREENBEGIN      = $00000C ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$00000f					COLS_VISIBLE     = $00000F ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000011					COLS_PER_LINE    = $000011 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000013					LINES_VISIBLE    = $000013 ;2 Bytes The number of rows visible on the screen. Default=25
=$000015					LINES_MAX        = $000015 ;2 Bytes The number of rows in memory for the screen. Default=64
=$000017					CURSORPOS        = $000017 ;3 Bytes The next character written to the screen will be written in this location.
=$00001a					CURSORX          = $00001A ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001c					CURSORY          = $00001C ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$00001e					CURCOLOR         = $00001E ;1 Byte Color of next character to be printed to the screen.
=$00001f					COLORPOS         = $00001F ;3 Byte address of cursor's position in the color matrix
=$000022					COLORBEGIN       = $000022 ;3 Byte, address of the color screen
=$000022					STACKBOT         = $000022 ;2 Bytes Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
=$000024					STACKTOP         = $000024 ;2 Bytes Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.
=$000026					OPL2_OPERATOR    = $000026 ;
=$000027					OPL2_CHANNEL     = $000027 ;
=$000028					OPL2_REG_REGION  = $000028 ; Offset to the Group of Registers
=$00002a					OPL2_REG_OFFSET  = $00002A ; 2 Bytes (16Bits)
=$00002c					OPL2_IND_ADDY_LL = $00002C ; 2 Bytes Reserved (Only need 3)
=$00002e					OPL2_IND_ADDY_HL = $00002E ; 2 Bytes Reserved (Only need 3)
=$000030					OPL2_NOTE        = $000030 ; 1 Byte
=$000031					OPL2_OCTAVE      = $000031 ; 1 Byte
=$000032					OPL2_PARAMETER0  = $000032 ; 1 Byte - Key On/Feedback
=$000033					OPL2_PARAMETER1  = $000033 ; 1 Byte
=$000034					OPL2_PARAMETER2  = $000034 ; 1 Byte
=$000035					OPL2_PARAMETER3  = $000035 ; 1 Byte
=$000036					OPL2_LOOP        = $000036 ;
=$000036					OPL2_BLOCK       = $000036
=$000038					SDCARD_FILE_PTR  = $000038 ; 3 Bytes Pointer to Filename to open
=$00003c					SDCARD_BYTE_NUM  = $00003C ; 2Bytes
=$00003f					SDCARD_PRSNT_MNT = $00003F ; 1 Byte, Indicate that the SDCard is Present and that it is Mounted
=$000040					BM_CLEAR_SCRN_X  = $000040
=$000042					BM_CLEAR_SCRN_Y  = $000042
=$000040					RAD_STARTLINE    = $000040 ; 1 Byte
=$000041					RAD_PATTERN_IDX  = $000041 ; 1 Byte
=$000042					RAD_LINE         = $000042 ; 1 Byte
=$000043					RAD_LINENUMBER   = $000043 ; 1 Byte
=$000044					RAD_CHANNEL_NUM  = $000044 ; 1 Byte
=$000045					RAD_ISLASTCHAN   = $000045 ; 1 Byte
=$000046					RAD_Y_POINTER    = $000046 ; 2 Bytes
=$000048					RAD_TICK         = $000048
=$00004a					RAD_CHANNEL_DATA = $00004A ; 2 Bytes
=$00004c					RAD_CHANNE_EFFCT = $00004C
=$00004d					RAD_TEMP         = $00004D
=$000050					RAD_ADDR         = $000050 ; 3 bytes to avoid OPL2 errors.
=$000053					RAD_PATTRN       = $000053 ; 1 bytes - offset to patter
=$000054					RAD_PTN_DEST     = $000054 ; 3 bytes - where to write the pattern data
=$000057					RAD_CHANNEL      = $000057 ; 2 bytes - 0 to 8
=$000059					RAD_LAST_NOTE    = $000059 ; 1 if this is the last note
=$00005a					RAD_LINE_PTR     = $00005A ; 2 bytes - offset to memory location
=$000040					BMP_X_SIZE       = $000040 ; 2 Bytes
=$000042					BMP_Y_SIZE       = $000042 ; 2 Bytes
=$000044					BMP_PRSE_SRC_PTR = $000044 ; 3 Bytes
=$000048					BMP_PRSE_DST_PTR = $000048 ; 3 Bytes
=$00004c					BMP_COLOR_PALET  = $00004C ; 2 Bytes
=$00004e					SCRN_X_STRIDE    = $00004E ; 2 Bytes, Basically How many Pixel Accross in Bitmap Mode
=$000050					BMP_FILE_SIZE    = $000050 ; 4 Bytes
=$000054					BMP_POSITION_X   = $000054 ; 2 Bytes Where, the BMP will be position on the X Axis
=$000056					BMP_POSITION_Y   = $000056 ; 2 Bytes Where, the BMP will be position on the Y Axis
=$000058					BMP_PALET_CHOICE = $000058 ;
=$000060					EVID_SCREENBEGIN      = $000060 ;3 Bytes Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
=$000063					EVID_COLS_VISIBLE     = $000063 ;2 Bytes Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
=$000065					EVID_COLS_PER_LINE    = $000065 ;2 Bytes Columns in memory per screen line. A virtual line can be this long. Default=128
=$000067					EVID_LINES_VISIBLE    = $000067 ;2 Bytes The number of rows visible on the screen. Default=25
=$000069					EVID_LINES_MAX        = $000069 ;2 Bytes The number of rows in memory for the screen. Default=64
=$00006b					EVID_CURSORPOS        = $00006B ;3 Bytes The next character written to the screen will be written in this location.
=$00006e					EVID_CURSORX          = $00006E ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000070					EVID_CURSORY          = $000070 ;2 Bytes This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
=$000072					EVID_CURCOLOR         = $000072 ;1 Byte Color of next character to be printed to the screen.
=$000073					EVID_COLORBEGIN       = $000073 ;
=$000076					EVID_COLORPOS         = $000076 ;3 Byte address of cursor's position in the color matrix
=$000079					EVID_TMPPTR1          = $000079 ; 4 byte temporary pointer
=$00007d					EVID_PRESENT          = $00007D ;1 Byte: is the EVID present?
=$000098					TEXT_SRC_PTR_L   = $000098
=$00009a					TEXT_SRC_PTR_H   = $00009A
=$00009c					TEXT_DST_PTR_L   = $00009C
=$00009e					TEXT_DST_PTR_H   = $00009E
=$0000a0					TEXT_INDEX       = $0000A0
=$0000a0					MOD_SELECT_L     = $0000A0
=$0000a2					MOD_SELECT_H     = $0000A2
=$0000a2					TEXT_CURSOR_X    = $0000A2
=$0000a4					TEXT_CURSOR_Y    = $0000A4
=$0000a6					LINE_INDEX       = $0000A6
=$0000a8					COLOR_DST_PTR_L  = $0000A8
=$0000aa					COLOR_DST_PTR_H  = $0000AA
=$0000b0					MODEL            = $0000B0
=$0000e0					MOUSE_PTR        = $0000E0
=$0000e1					MOUSE_POS_X_LO   = $0000E1
=$0000e2					MOUSE_POS_X_HI   = $0000E2
=$0000e3					MOUSE_POS_Y_LO   = $0000E3
=$0000e4					MOUSE_POS_Y_HI   = $0000E4
=$0000f0					USER_TEMP        = $0000F0 ;32 Bytes Temp space for user programs
=$0000f0					INTERRUPT_STATE  = $0000F0      ; 1 byte: current state of the boot menu color cycler
=$0000f1					INTERRUPT_COUNT  = $0000F1      ; 1 byte: counter for the boot menu color cycler
=$0000f2					IRQ_COLOR_CHOICE = $0000F2      ; 1 byte: index of the color to cycle in the boot menu
=$000100					GAVIN_BLOCK      = $000100 ;256 Bytes Gavin reserved, overlaps debugging registers at $1F0
=$000140					INT_CONTROLLER   = $000140 ; $000140...$00015F Interrupt Controller
=$000160					TIMER_CONTROLLER = $000160 ; $000160...$00017F Timer0/Timer1/Timer2 Block
=$000160					TIMER_CTRL_REGLL = $000160 ;
=$000161					TIMER_CTRL_REGLH = $000161 ;
=$000162					TIMER_CTRL_REGHL = $000162 ;
=$000163					TIMER_CTRL_REGHH = $000163 ;
=$000240					CPU_REGISTERS    = $000240 ; Byte
=$000240					CPUPC            = $000240 ;2 Bytes Program Counter (PC)
=$000242					CPUPBR           = $000242 ;2 Bytes Program Bank Register (K)
=$000244					CPUA             = $000244 ;2 Bytes Accumulator (A)
=$000246					CPUX             = $000246 ;2 Bytes X Register (X)
=$000248					CPUY             = $000248 ;2 Bytes Y Register (Y)
=$00024a					CPUSTACK         = $00024A ;2 Bytes Stack Pointer (S)
=$00024c					CPUDP            = $00024C ;2 Bytes Direct Page Register (D)
=$00024e					CPUDBR           = $00024E ;1 Byte  Data Bank Register (B)
=$00024f					CPUFLAGS         = $00024F ;1 Byte  Flags (P)
=$000250					MONITOR_VARS     = $000250 ; Byte  MONITOR Variables. BASIC variables may overlap this space
=$000250					MCMDADDR         = $000250 ;3 Bytes Address of the current line of text being processed by the command parser. Can be in display memory or a variable in memory. MONITOR will parse up to MTEXTLEN characters or to a null character.
=$000253					MCMP_TEXT        = $000253 ;3 Bytes Address of symbol being evaluated for COMPARE routine
=$000256					MCMP_LEN         = $000256 ;2 Bytes Length of symbol being evaluated for COMPARE routine
=$000258					MCMD             = $000258 ;3 Bytes Address of the current command/function string
=$00025b					MCMD_LEN         = $00025B ;2 Bytes Length of the current command/function string
=$00025d					MARG1            = $00025D ;4 Bytes First command argument. May be data or address, depending on command
=$000261					MARG2            = $000261 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000265					MARG3            = $000265 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000269					MARG4            = $000269 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$00026d					MARG5            = $00026D ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000271					MARG6            = $000271 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000275					MARG7            = $000275 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000279					MARG8            = $000279 ;4 Bytes First command argument. May be data or address, depending on command. Data is 32-bit number. Address is 24-bit address and 8-bit length.
=$000300					LOADFILE_VARS    = $000300 ; Byte
=$000300					LOADFILE_NAME    = $000300 ;3 Bytes (addr) Name of file to load. Address in Data Page
=$000303					LOADFILE_LEN     = $000303 ;1 Byte  Length of filename. 0=Null Terminated
=$000304					LOADPBR          = $000304 ;1 Byte  First Program Bank of loaded file ($05 segment)
=$000305					LOADPC           = $000305 ;2 Bytes Start address of loaded file ($05 segment)
=$000307					LOADDBR          = $000307 ;1 Byte  First data bank of loaded file ($06 segment)
=$000308					LOADADDR         = $000308 ;2 Bytes FIrst data address of loaded file ($06 segment)
=$00030a					LOADFILE_TYPE    = $00030A ;3 Bytes (addr) File type string in loaded data file. Actual string data will be in Bank 1. Valid values are BIN, PRG, P16
=$00030d					BLOCK_LEN        = $00030D ;2 Bytes Length of block being loaded
=$00030f					BLOCK_ADDR       = $00030F ;2 Bytes (temp) Address of block being loaded
=$000311					BLOCK_BANK       = $000311 ;1 Byte  (temp) Bank of block being loaded
=$000312					BLOCK_COUNT      = $000312 ;2 Bytes (temp) Counter of bytes read as file is loaded
=$000300					FDC_DRIVE        = $000300 ;1 byte - The number of the selected drive
=$000301					FDC_HEAD         = $000301 ;1 byte - The head number (0 or 1)
=$000302					FDC_CYLINDER     = $000302 ;1 byte - The cylinder number
=$000303					FDC_SECTOR       = $000303 ;1 byte - The sector number
=$000304					FDC_SECTOR_SIZE  = $000304 ;1 byte - The sector size code (2 = 512)
=$000305					FDC_SECPERTRK    = $000305 ;1 byte - The number of sectors per track (18 for 1.44 MB floppy)
=$000306					FDC_ST0          = $000306 ;1 byte - Status Register 0
=$000307					FDC_ST1          = $000307 ;1 byte - Status Register 1
=$000308					FDC_ST2          = $000308 ;1 byte - Status Register 2
=$000309					FDC_ST3          = $000309 ;1 byte - Status Register 3
=$00030a					FDC_PCN          = $00030A ;1 byte - Present Cylinder Number
=$00030b					FDC_STATUS       = $00030B ;1 byte - Status of what we think is going on with the FDC:
=$00030c					DIVIDEND         = $00030C ;4 bytes - Dividend for 32-bit division
=$000310					DIVISOR          = $000310 ;4 bytes - Divisor for 32-bit division
=$000314					REMAINDER        = $000314 ;4 bytes - Remainder for 32-bit division
=$000320					SDOS_VARIABLES   = $000320
=$000320					BIOS_STATUS      = $000320      ; 1 byte - Status of any BIOS operation
=$000321					BIOS_DEV         = $000321      ; 1 byte - Block device number for block operations
=$000322					BIOS_LBA         = $000322      ; 4 bytes - Address of block to read/write (this is the physical block, w/o reference to partition)
=$000326					BIOS_BUFF_PTR    = $000326      ; 4 bytes - 24-bit pointer to memory for read/write operations
=$00032a					BIOS_FIFO_COUNT  = $00032A      ; 2 bytes - The number of bytes read on the last block read
=$00032c					BIOS_FLAGS       = $00032C      ; 1 byte - Flags for various BIOSy things:
=$00032d					BIOS_TIMER       = $00032D      ; 1 byte - the number of 1/60 ticks for a time out
=$00032e					DOS_STATUS       = $00032E      ; 1 byte - The error code describing any error with file access
=$000330					DOS_CLUS_ID      = $000330      ; 4 bytes - The cluster desired for a DOS operation
=$000338					DOS_DIR_PTR      = $000338      ; 4 bytes - Pointer to a directory entry (assumed to be within DOS_SECTOR)
=$00033c					DOS_BUFF_PTR     = $00033C      ; 4 bytes - A pointer for DOS cluster read/write operations
=$000340					DOS_FD_PTR       = $000340      ; 4 bytes - A pointer to a file descriptor
=$000344					DOS_FAT_LBA      = $000344      ; 4 bytes - The LBA for a sector of the FAT we need to read/write
=$000348					DOS_TEMP         = $000348      ; 4 bytes - Temporary storage for DOS operations
=$00034c					DOS_FILE_SIZE    = $00034C      ; 4 bytes - The size of a file
=$000350					DOS_SRC_PTR      = $000350      ; 4 bytes - Pointer for transferring data
=$000354					DOS_DST_PTR      = $000354      ; 4 bytes - Pointer for transferring data
=$000358					DOS_END_PTR      = $000358      ; 4 bytes - Pointer to the last byte to save
=$00035c					DOS_RUN_PTR      = $00035C      ; 4 bytes - Pointer for starting a loaded program
=$000360					DOS_RUN_PARAM    = $000360      ; 4 bytes - Pointer to the ASCIIZ string for arguments in loading a program
=$000364					DOS_STR1_PTR     = $000364      ; 4 bytes - pointer to a string
=$000368					DOS_STR2_PTR     = $000368      ; 4 bytes - pointer to a string
=$00036b					DOS_SCRATCH      = $00036B      ; 4 bytes - general purpose short term storage
=$000370					DOS_BLOCK_SIZE   = $000370      ; 4 bytes - the size of a block to load (in bytes)
=$000400					DOS_PATH_BUFF    = $000400      ; 256 bytes - A buffer for path names
=$000500					FDC_PARAMETERS   = $000500      ; 16 bytes - a buffer of parameter data for the FDC
=$000510					FDC_RESULTS      = $000510      ; 16 bytes - Buffer for results of FDC commands
=$000530					FDC_PARAM_NUM    = $000530      ; 1 byte - The number of parameters to send to the FDC (including command)
=$000532					FDC_RESULT_NUM   = $000532      ; 1 byte - The number of results expected
=$000533					FDC_EXPECT_DAT   = $000533      ; 1 byte - 0 = the command expects no data, otherwise expects data
=$000534					FDC_CMD_RETRY    = $000534      ; 1 byte - a retry counter for commands
=$000700					CURRUART         = $000700 ; 3-bytes: the base address of the current UART
=$000703					CHAN_OUT         = $000703 ; 1-byte: the number of the current output channel (for PUTC, etc.)
=$000704					CHAN_IN          = $000704 ; 1-byte: the number of the current input channel (for GETCH, etc.)
=$000705					TIMERFLAGS       = $000705 ; 1-byte: flags to indicate that one of the timer interupts has triggered
=$80						TIMER0TRIGGER    = $80
=$40						TIMER1TRIGGER    = $40
=$20						TIMER2TRIGGER    = $20
=$000f00					KBD_VARS = $000F00
=$000f00					KBD_STATE           = $000F00   ; 1 byte - The state of the keyboard controller state machine
=$000f01					KBD_SC_BUF          = $000F01   ; 16 bytes - Buffer for keyboard scancodes read
=$000f11					KBD_SC_HEAD         = $000F11   ; 1 byte - Index of the first scancode cell to write to
=$000f12					KBD_CHAR_BUF        = $000F12   ; 16 bytes - Character buffer
=$000f22					KBD_CHAR_HEAD       = $000F22   ; 1 byte - Number of characters in the character buffer
=$000f23					KBD_MODIFIERS       = $000F23   ; 1 byte - State of the modifier keys
=$000f24					KBD_LOCKS           = $000F24   ; 1 byte - State of the lock keys: Caps, Num, Scroll
=$000f25					KBD_TBL_UNMOD       = $000F25   ; 4 bytes - Pointer to the scan code translation table for unmodified keys
=$000f29					KBD_TBL_SHIFT       = $000F29   ; 4 bytes - Pointer to the scan code translation table for shifted keys
=$000f2d					KBD_TBL_CTRL        = $000F2D   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL
=$000f31					KBD_TBL_LOCK        = $000F31   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
=$000f35					KBD_TBL_LOCK_SHIFT  = $000F35   ; 4 bytes - Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
=$000f39					KBD_TBL_CTRL_SHIFT  = $000F39   ; 4 bytes - Pointer to the scan code translation table for keys modified by CTRL and SHIFT
=$000f00					KEY_BUFFER       = $000F00 ; 64 Bytes keyboard buffer
=$0080						KEY_BUFFER_SIZE  = $0080   ;128 Bytes (constant) keyboard buffer length
=$000f7f					KEY_BUFFER_END   = $000F7F ;  1 Byte  Last byte of keyboard buffer
=$000f83					KEY_BUFFER_CMD   = $000F83 ;  1 Byte  Indicates the Command Process Status
=$000f84					COMMAND_SIZE_STR = $000F84 ;  1 Byte
=$000f86					COMMAND_COMP_TMP = $000F86 ;  2 Bytes
=$000f87					KEYBOARD_SC_FLG  = $000F87 ;  1 Bytes that indicate the Status of Left Shift, Left CTRL, Left ALT, Right Shift
=$000f88					KEYBOARD_SC_TMP  = $000F88 ;  1 Byte, Interrupt Save Scan Code while Processing
=$000f89					KEYBOARD_LOCKS   = $000F89 ;  1 Byte, the status of the various lock keys
=$000f8a					KEYFLAG          = $000F8A ;  1 Byte, flag to indicate if CTRL-C has been pressed
=$000f8b					KEY_BUFFER_RPOS  = $000F8B ;  2 Byte, position of the character to read from the KEY_BUFFER
=$000f8d					KEY_BUFFER_WPOS  = $000F8D ;  2 Byte, position of the character to write to the KEY_BUFFER
=$001000					KERNEL_JMP_BEGIN = $001000 ; Reserved for the Kernel jump table
=$001fff					KERNEL_JMP_END   = $001FFF
=$002000					TEST_BEGIN       = $002000 ;28672 Bytes Test/diagnostic code for prototype.
=$007fff					TEST_END         = $007FFF ;0 Byte
=$008000					STACK_BEGIN      = $008000 ;32512 Bytes The default beginning of stack space
=$00feff					STACK_END        = $00FEFF ;0 Byte  End of stack space. Everything below this is I/O space
=$18ff00					        ISR_BEGIN        = $18FF00 ; Byte  Beginning of CPU vectors in Direct page
=$18ff00					        HRESET           = $18FF00 ;16 Bytes Handle RESET asserted. Reboot computer and re-initialize the kernel.
=$18ff10					        HCOP             = $18FF10 ;16 Bytes Handle the COP instruction. Program use; not used by OS
=$18ff20					        HBRK             = $18FF20 ;16 Bytes Handle the BRK instruction. Returns to BASIC Ready prompt.
=$18ff30					        HABORT           = $18FF30 ;16 Bytes Handle ABORT asserted. Return to Ready prompt with an error message.
=$18ff40					        HNMI             = $18FF40 ;32 Bytes Handle NMI
=$18ff60					        HIRQ             = $18FF60 ;32 Bytes Handle IRQ
=$18ff80					        Unused_FF80      = $18FF80 ;End of direct page Interrrupt handlers
=$18ffe0					        VECTORS_BEGIN    = $18FFE0 ;0 Byte  Interrupt vectors
=$18ffe0					        JMP_READY        = $18FFE0 ;4 Bytes Jumps to ROM READY routine. Modified whenever alternate command interpreter is loaded.
=$18ffe4					        VECTOR_COP       = $18FFE4 ;2 Bytes Native COP Interrupt vector
=$18ffe6					        VECTOR_BRK       = $18FFE6 ;2 Bytes Native BRK Interrupt vector
=$18ffe8					        VECTOR_ABORT     = $18FFE8 ;2 Bytes Native ABORT Interrupt vector
=$18ffea					        VECTOR_NMI       = $18FFEA ;2 Bytes Native NMI Interrupt vector
=$18ffec					        VECTOR_RESET     = $18FFEC ;2 Bytes Unused (Native RESET vector)
=$18ffee					        VECTOR_IRQ       = $18FFEE ;2 Bytes Native IRQ Vector
=$18fff0					        RETURN           = $18FFF0 ;4 Bytes RETURN key handler. Points to BASIC or MONITOR subroutine to execute when RETURN is pressed.
=$18fff4					        VECTOR_ECOP      = $18FFF4 ;2 Bytes Emulation mode interrupt handler
=$18fff6					        VECTOR_EBRK      = $18FFF6 ;2 Bytes Emulation mode interrupt handler
=$18fff8					        VECTOR_EABORT    = $18FFF8 ;2 Bytes Emulation mode interrupt handler
=$18fffa					        VECTOR_ENMI      = $18FFFA ;2 Bytes Emulation mode interrupt handler
=$18fffc					        VECTOR_ERESET    = $18FFFC ;2 Bytes Emulation mode interrupt handler
=$18fffe					        VECTOR_EIRQ      = $18FFFE ;2 Bytes Emulation mode interrupt handler
=$200000					        VECTORS_END      = $200000 ;*End of vector space
=$00ffff					BANK0_END        = $00FFFF ;End of Bank 00 and Direct page

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_data.asm

>180000		00 a0 af			                .long $AFA000       ; SCREENBEGIN, 3 bytes, Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>180003		4c 00				                .word 76            ; COLS_VISIBLE, 2 bytes, Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>180005		64 00				                .word 100           ; COLS_PER_LINE, 2 bytes, Columns in memory per screen line. A virtual line can be this long. Default=128
>180007		38 00				                .word 56            ; LINES_VISIBLE, 2 bytes, The number of rows visible on the screen. Default=25
>180009		40 00				                .word 64            ; LINES_MAX, 2 bytes, The number of rows in memory for the screen. Default=64
>18000b		00 a0 af			                .long $AFA000       ; CURSORPOS, 3 bytes, The next character written to the screen will be written in this location.
>18000e		00 00				                .word 0             ; CURSORX, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180010		00 00				                .word 0             ; CURSORY, 2 bytes, This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>180012		0f				                .byte $0F           ; CURCOLOR, 2 bytes, Color of next character to be printed to the screen.
>180013		00				                .byte $00           ; CURATTR, 2 bytes, Attribute of next character to be printed to the screen.
>180014		00 80				                .word STACK_BEGIN   ; STACKBOT, 2 bytes, Lowest location the stack should be allowed to write to. If SP falls below this value, the runtime should generate STACK OVERFLOW error and abort.
>180016		ff fe				                .word STACK_END     ; STACKTOP, 2 bytes, Highest location the stack can occupy. If SP goes above this value, the runtime should generate STACK OVERFLOW error and abort.

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/page_00_code.asm

.18ff00		18		clc		RHRESET         CLC
.18ff01		fb		xce		                XCE
.18ff02		5c 00 10 00	jmp $001000	                JML BOOT
.18ff10						RHCOP
.18ff10		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff12		8b		phb		                PHB
.18ff13		0b		phd		                PHD
.18ff14		48		pha		                PHA
.18ff15		da		phx		                PHX
.18ff16		5a		phy		                PHY
.18ff17		5c 08 10 00	jmp $001008	                JML BREAK
.18ff20						RHBRK
.18ff20		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff22		8b		phb		                PHB
.18ff23		0b		phd		                PHD
.18ff24		48		pha		                PHA
.18ff25		da		phx		                PHX
.18ff26		5a		phy		                PHY
.18ff27		5c 08 10 00	jmp $001008	                JML BREAK
.18ff30						RHABORT
.18ff30		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff32		8b		phb		                PHB
.18ff33		0b		phd		                PHD
.18ff34		48		pha		                PHA
.18ff35		da		phx		                PHX
.18ff36		5a		phy		                PHY
.18ff37		5c 08 10 00	jmp $001008	                JML BREAK
.18ff40						 RHNMI
.18ff40		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff42		8b		phb		                PHB
.18ff43		0b		phd		                PHD
.18ff44		48		pha		                PHA
.18ff45		da		phx		                PHX
.18ff46		5a		phy		                PHY
.18ff47		22 96 19 18	jsl $181996	                JSL NMI_HANDLER
.18ff4b		7a		ply		                PLY
.18ff4c		fa		plx		                PLX
.18ff4d		68		pla		                PLA
.18ff4e		2b		pld		                PLD
.18ff4f		ab		plb		                PLB
.18ff50		40		rti		                RTI
.18ff60						RHIRQ
.18ff60		c2 30		rep #$30	                REP #$30        ; set A&X long
.18ff62		8b		phb		                PHB
.18ff63		0b		phd		                PHD
.18ff64		48		pha		                PHA
.18ff65		da		phx		                PHX
.18ff66		5a		phy		                PHY
.18ff67		22 c0 17 18	jsl $1817c0	                JSL IRQ_HANDLER
.18ff6b		7a		ply		                PLY
.18ff6c		fa		plx		                PLX
.18ff6d		68		pla		                PLA
.18ff6e		2b		pld		                PLD
.18ff6f		ab		plb		                PLB
.18ff70		40		rti		                RTI
.18ffe0		5c 04 00 1a	jmp $1a0004	JUMP_READY      JML MONITOR    ; Kernel READY routine. Rewrite this address to jump to a custom kernel.
>18ffe4		10 ff				RVECTOR_COP     .addr HCOP     ; FFE4
>18ffe6		20 ff				RVECTOR_BRK     .addr HBRK     ; FFE6
>18ffe8		30 ff				RVECTOR_ABORT   .addr HABORT   ; FFE8
>18ffea		40 ff				RVECTOR_NMI     .addr HNMI     ; FFEA
>18ffec		00 00				                .word $0000    ; FFEC
>18ffee		60 ff				RVECTOR_IRQ     .addr HIRQ    ; FFEE
.18fff0		5c 79 06 19	jmp $190679	RRETURN         JML IRETURN
>18fff4		10 ff				RVECTOR_ECOP    .addr HCOP     ; FFF4
>18fff6		20 ff				RVECTOR_EBRK    .addr HBRK     ; FFF6
>18fff8		30 ff				RVECTOR_EABORT  .addr HABORT   ; FFF8
>18fffa		40 ff				RVECTOR_ENMI    .addr HNMI     ; FFFA
>18fffc		00 ff				RVECTOR_ERESET  .addr HRESET   ; FFFC
>18fffe		60 ff				RVECTOR_EIRQ    .addr HIRQ     ; FFFE

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/dram_inc.asm

=$afa000					SCREEN_PAGE0     = $AFA000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
=$afc000					SCREEN_PAGE1     = $AFC000 ;8192 Bytes Additional page of display RAM. This can be used for page flipping or to handle multiple edit buffers.
=$b00000					SCREEN_END       = $B00000 ;End of display memory

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/fdc_inc.asm

=$af13f0					SIO_FDC  = $AF13F0
=$af13f0					SIO_FDC_SRA = $AF13F0 ; Read Only - Status Register A (not used in AT mode)
=$af13f1					SIO_FDC_SRB = $AF13F1 ; Read Only - Status Register B (not used in AT mode)
=$af13f2					SIO_FDC_DOR = $AF13F2 ; Read/Write - Digital Output Register
=$01						FDC_DOR_DSEL0 = $01     ; Drive 0 Select
=$02						FDC_DOR_DSEL1 = $02     ; Drive 1 Select
=$04						FDC_DOR_NRESET = $04    ; Reset the FDC
=$08						FDC_DOR_DMAEN = $08     ; Enable DMA
=$10						FDC_DOR_MOT0  = $10     ; Turn on motor 0
=$20						FDC_DOR_MOT1  = $20     ; Turn on motor 1
=$40						FDC_DOR_MOT2  = $40     ; Turn on motor 2
=$80						FDC_DOR_MOT3  = $80     ; Turn on motor 3
=$af13f3					SIO_FDC_TSR = $AF13F3   ; Read/Write - Tape Drive Status (not used on the C256)
=$af13f4					SIO_FDC_MSR = $AF13F4   ; Read - Main Status Register
=$01						FDC_MSR_DRV0BSY = $01   ; Indicates if drive 0 is busy
=$02						FDC_MSR_DRV1BSY = $02   ; Indicates if drive 1 is busy
=$10						FDC_MSR_CMDBSY = $10    ; Indicates if a command is in progress
=$20						FDC_MSR_NONDMA = $20    ;
=$40						FDC_MSR_DIO = $40       ; Data direction: 1 = read, 0 = write
=$80						FDC_MSR_RQM = $80       ; 1 = host can transfer data, 0 = host must wait
=$af13f4					SIO_FDC_DSR = $AF13F4   ; Write - Data Select Register
=$40						FDC_DSR_LOPWR = $40     ; Turn on low power mode
=$80						FDC_DSR_RESET = $80     ; Software reset of the FDC
=$af13f5					SIO_FDC_DTA = $AF13F5   ; Read/Write - Data - FIFO
=$af13f6					SIO_FDC_RSV = $AF13F6   ; Reserved
=$af13f7					SIO_FDC_DIR = $AF13F7   ; Read - Digital Input Register
=$80						FDC_DIR_DSKCHG = $80    ; Indicates if the disk has changed
=$af13f7					SIO_FDC_CCR = $AF13F7   ; Write - Configuration Control Register
=$03						FDC_ST0_DRVSEL = $03    ; Mask for the current selected drive
=$04						FDC_ST0_HEAD = $04      ; Bit for the current selected head
=$08						FDC_ST0_EC = $08        ; Bit for EQUIPMENT CHECK, error in recalibrate or relative seek
=$10						FDC_ST0_SEEKEND = $10   ; The FDC completed a seek, relative seek, or recalibrate
=$c0						FDC_ST0_INTCODE = $C0   ; Mask for interrupt code:
=$01						FDC_ST1_MA = $01        ; Missing address mark
=$02						FDC_ST1_NW = $02        ; Not writable (disk is write protected)
=$04						FDC_ST1_ND = $04        ; No data
=$10						FDC_ST1_OR = $10        ; Overrun/underrun of the data
=$20						FDC_ST1_DE = $20        ; Data error... a CRC check failed
=$80						FDC_ST1_EN = $80        ; End of cylinder: tried to acess a sector not on the track
=$01						FDC_ST2_MD = $01        ; Missing address mark: FDC cannot detect a data address mark
=$02						FDC_ST2_BC = $02        ; Bad cylinder
=$10						FDC_ST2_WC = $10        ; Wrong cylinder: track is not the same as expected
=$20						FDC_ST2_DD = $20        ; Data error in field: CRC error
=$40						FDC_ST2_CM = $40        ; Control mark
=$03						FDC_ST3_DRVSEL = $03    ; Drive select mask
=$04						FDC_ST3_HEAD = $04      ; Head address bit
=$10						FDC_ST3_TRACK0 = $10    ; Track 0: Status of the TRK0 pin
=$40						FDC_ST3_WP = $40        ; Write Protect: status of the WP pin
=2						FDC_CMD_READ_TRACK          = 2
=3						FDC_CMD_SPECIFY             = 3
=4						FDC_CMD_SENSE_DRIVE_STATUS  = 4
=5						FDC_CMD_WRITE_DATA          = 5
=6						FDC_CMD_READ_DATA           = 6
=7						FDC_CMD_RECALIBRATE         = 7
=8						FDC_CMD_SENSE_INTERRUPT     = 8
=9						FDC_CMD_WRITE_DELETED_DATA  = 9
=10						FDC_CMD_READ_ID             = 10
=12						FDC_CMD_READ_DELETED_DATA   = 12
=13						FDC_CMD_FORMAT_TRACK        = 13
=14						FDC_CMD_DUMPREG             = 14
=15						FDC_CMD_SEEK                = 15
=16						FDC_CMD_VERSION             = 16
=17						FDC_CMD_SCAN_EQUAL          = 17
=18						FDC_CMD_PERPENDICULAR_MODE  = 18
=19						FDC_CMD_CONFIGURE           = 19
=20						FDC_CMD_LOCK                = 20
=22						FDC_CMD_VERIFY              = 22
=25						FDC_CMD_SCAN_LOW_OR_EQUAL   = 25
=29						FDC_CMD_SCAN_HIGH_OR_EQUAL  = 29
=$80						FDC_CMD_MT = $80                    ; Command bit to turn on multi-track
=$40						FDC_CMD_MFM = $40                   ; Command bit to operate in MFM format
=$20						FDC_CMD_SK = $20                    ; Command bit to skip deleted sectors
=$40						FDC_CMD_EIS = $40                   ; Command bit to turn on implied seek
=1						FDC_DEVCMD_MOTOR_ON         = 1     ; Device code to turn the motor on
=2						FDC_DEVCMD_MOTOR_OFF        = 2     ; Device code to turn the motor off
=3						FDC_DEVCMD_RECAL            = 3     ; Device code to recalibrate the drive

;******  Return to file: src\kernel.asm


;******  Processing file: src\Includes/basic_inc.asm

=$1a0000					    BASIC = $1A0000
=1703940					    MONITOR = BASIC + 4

;******  Return to file: src\kernel.asm


;******  Processing file: src\kernel_jumptable.asm

.181000	1000	5c 00 04 19	jmp $190400	BOOT            JML IBOOT
.181004	1004	5c 84 05 19	jmp $190584	RESTORE         JML IRESTORE
.181008	1008	5c 18 06 19	jmp $190618	BREAK           JML IBREAK
.18100c	100c	5c 5f 06 19	jmp $19065f	READY           JML IREADY
.181010	1010	5c 95 10 19	jmp $191095	SCINIT          JML ISCINIT
.181014	1014	5c 96 10 19	jmp $191096	IOINIT          JML IIOINIT
.181018	1018	5c 1b 07 19	jmp $19071b	PUTC            JML IPUTC
.18101c	101c	5c 04 07 19	jmp $190704	PUTS            JML IPUTS
.181020	1020	5c bf 07 19	jmp $1907bf	PUTB            JML IPUTB
.181024	1024	5c 7a 3b 19	jmp $193b7a	PUTBLOCK        JML IPUTBLOCK
.181028	1028	5c df 76 19	jmp $1976df	GETSCANCODE     JML KBD_GET_SCANCODE    ; Get the next 8-bit scan code from the keyboard: A = 0 if no scancode present, contains the scancode otherwise
.18102c	102c	5c 95 77 19	jmp $197795	GETLOCKS        JML KBD_GETLOCKS        ; Get the state of the lock keys on the keyboard
.181030	1030	5c 99 10 19	jmp $191099	OPEN            JML IOPEN
.181034	1034	5c 9a 10 19	jmp $19109a	CLOSE           JML ICLOSE
.181038	1038	5c 7a 06 19	jmp $19067a	SETIN           JML ISETIN
.18103c	103c	5c 83 06 19	jmp $190683	SETOUT          JML ISETOUT
.181040	1040	5c 9b 10 19	jmp $19109b	GETB            JML IGETB
.181044	1044	5c 17 3b 19	jmp $193b17	GETBLOCK        JML IGETBLOCK
.181048	1048	5c c8 06 19	jmp $1906c8	GETCH           JML IGETCH
.18104c	104c	5c 95 06 19	jmp $190695	GETCHW          JML IGETCHW
.181050	1050	5c 8c 06 19	jmp $19068c	GETCHE          JML IGETCHE
.181054	1054	5c 9c 10 19	jmp $19109c	GETS            JML IGETS
.181058	1058	5c 9d 10 19	jmp $19109d	GETLINE         JML IGETLINE
.18105c	105c	5c 9e 10 19	jmp $19109e	GETFIELD        JML IGETFIELD
.181060	1060	5c 9f 10 19	jmp $19109f	TRIM            JML ITRIM
.181064	1064	5c a0 10 19	jmp $1910a0	PRINTC          JML IPRINTC
.181068	1068	5c a1 10 19	jmp $1910a1	PRINTS          JML IPRINTS
.18106c	106c	5c c0 07 19	jmp $1907c0	PRINTCR         JML IPRINTCR
.181070	1070	5c a2 10 19	jmp $1910a2	PRINTF          JML IPRINTF
.181074	1074	5c a3 10 19	jmp $1910a3	PRINTI          JML IPRINTI
.181078	1078	5c 74 08 19	jmp $190874	PRINTH          JML IPRINTH
.18107c	107c	5c a4 10 19	jmp $1910a4	PRINTAI         JML IPRINTAI
.181080	1080	5c 91 08 19	jmp $190891	PRINTAH         JML IPRINTAH
.181084	1084	5c 58 08 19	jmp $190858	LOCATE          JML ILOCATE
.181088	1088	5c a5 10 19	jmp $1910a5	PUSHKEY         JML IPUSHKEY
.18108c	108c	5c a6 10 19	jmp $1910a6	PUSHKEYS        JML IPUSHKEYS
.181090	1090	5c 20 08 19	jmp $190820	CSRRIGHT        JML ICSRRIGHT
.181094	1094	5c 2f 08 19	jmp $19082f	CSRLEFT         JML ICSRLEFT
.181098	1098	5c 3e 08 19	jmp $19083e	CSRUP           JML ICSRUP
.18109c	109c	5c 4d 08 19	jmp $19084d	CSRDOWN         JML ICSRDOWN
.1810a0	10a0	5c 0f 08 19	jmp $19080f	CSRHOME         JML ICSRHOME
.1810a4	10a4	5c 63 08 19	jmp $190863	SCROLLUP        JML ISCROLLUP
.1810a8	10a8	5c df 08 19	jmp $1908df	CLRSCREEN       JML ICLRSCREEN
.1810ac	10ac	5c 8a 09 19	jmp $19098a	INITCHLUT	    JML IINITCHLUT
.1810b0	10b0	5c b3 0b 19	jmp $190bb3	INITSUPERIO	    JML IINITSUPERIO
.1810b4	10b4	5c 2b 74 19	jmp $19742b	INITKEYBOARD    JML IINITKEYBOARD
.1810b8	10b8	5c 00 7f 19	jmp $197f00	INITMOUSE       JML IINITMOUSE
.1810bc	10bc	5c 94 0b 19	jmp $190b94	INITCURSOR      JML IINITCURSOR
.1810c0	10c0	5c 5c 0b 19	jmp $190b5c	INITFONTSET     JML IINITFONTSET
.1810c4	10c4	5c 97 09 19	jmp $190997	INITGAMMATABLE  JML IINITGAMMATABLE
.1810c8	10c8	5c b7 09 19	jmp $1909b7	INITALLLUT      JML IINITALLLUT
.1810cc	10cc	5c 7d 0a 19	jmp $190a7d	INITVKYTXTMODE  JML IINITVKYTXTMODE
.1810d0	10d0	5c 00 0b 19	jmp $190b00	INITVKYGRPMODE  JML IINITVKYGRPMODE
.1810d4	10d4	5c 5b 0b 19	jmp $190b5b	ISETDAC32KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810d8	10d8	5c 5b 0b 19	jmp $190b5b	ISETDAC48KHZ    JML INOP            ; Depracated Routine Replaced by New Ones - To be Implemented
.1810dc	10dc	5c e3 0c 19	jmp $190ce3	INITCODEC       JML IINITCODEC
.1810e0	10e0	5c 72 0d 19	jmp $190d72	RESETCODEC      JML IRESETCODEC
.1810e4	10e4	5c e0 0d 19	jmp $190de0	BMP_PARSER      JML IBMP_PARSER
.1810e8	10e8	5c 95 0d 19	jmp $190d95	BM_FILL_SCREEN  JML IBM_FILL_SCREEN
.1810ec	10ec	5c 23 31 19	jmp $193123	OPL2_TONE_TEST  JML IOPL2_TONE_TEST
.1810f0	10f0	5c fd 4d 19	jmp $194dfd	F_OPEN          JML IF_OPEN         ; open a file for reading/writing/creating
.1810f4	10f4	5c 90 4e 19	jmp $194e90	F_CREATE        JML IF_CREATE       ; create a new file
.1810f8	10f8	5c ca 4e 19	jmp $194eca	F_CLOSE         JML IF_CLOSE        ; close a file (make sure last cluster is written)
.1810fc	10fc	5c 63 4f 19	jmp $194f63	F_WRITE         JML IF_WRITE        ; write the current cluster to the file
.181100	1100	5c fe 4e 19	jmp $194efe	F_READ          JML IF_READ         ; read the next cluster from the file
.181104	1104	5c 0d 50 19	jmp $19500d	F_DELETE        JML IF_DELETE       ; delete a file / directory
.181108	1108	5c cf 4f 19	jmp $194fcf	F_DIROPEN       JML IF_DIROPEN      ; open a directory and seek the first directory entry
.18110c	110c	5c 09 50 19	jmp $195009	F_DIRNEXT       JML IF_DIRNEXT      ; seek to the next directory of an open directory
.181110	1110	5c a6 50 19	jmp $1950a6	F_DIRREAD       JML IF_DIRREAD      ; Read the directory entry for the specified file
.181114	1114	5c cd 50 19	jmp $1950cd	F_DIRWRITE      JML IF_DIRWRITE     ; Write any changes in the current directory cluster back to the drive
.181118	1118	5c d1 50 19	jmp $1950d1	F_LOAD          JML IF_LOAD         ; load a binary file into memory, supports multiple file formats
.18111c	111c	5c 2c 54 19	jmp $19542c	F_SAVE          JML IF_SAVE         ; Save memory to a binary file
.181120	1120	5c ed 3a 19	jmp $193aed	CMDBLOCK        JML ICMDBLOCK       ; Send a command to a block device
.181124	1124	5c c5 54 19	jmp $1954c5	F_RUN           JML IF_RUN          ; Load an run a binary file
.181128	1128	5c 18 3f 19	jmp $193f18	F_MOUNT         JML DOS_MOUNT       ; Mount the designated block device
.18112c	112c	5c fb 0a 19	jmp $190afb	SETSIZES        JML ISETSIZES
.181130	1130	5c 14 56 19	jmp $195614	F_COPY          JML IF_COPY         ; Copy a file
.181134	1134	5c 5e 55 19	jmp $19555e	F_ALLOCFD       JML IF_ALLOCFD      ; Allocate a file descriptor
.181138	1138	5c b2 55 19	jmp $1955b2	F_FREEFD        JML IF_FREEFD       ; Free a file descriptor
.18113c	113c	5c 40 77 19	jmp $197740	TESTBREAK       JML KBD_TEST_BREAK  ; Check if BREAK was pressed recently by the user (C is set if true, clear if false)
.181140	1140	5c 79 79 19	jmp $197979	SETTABLE        JML KBD_SETTABLE    ; Set the keyboard scan code -> character translation tables (B:X points to the new tables)
.181144	1144	5c 38 0b 19	jmp $190b38	READVRAM        JML IREADVRAM       ; Read a byte from video RAM at B:X
=$001700					VEC_INT_START = *                           ; Label for the start of the IRQ vectors
.181700	1700	5c 8f 65 19	jmp $19658f	VEC_INT00_SOF   JML FDC_TIME_HANDLE         ; IRQ 0, 0 --- Start Of Frame interrupt
.181704	1704	5c a9 10 19	jmp $1910a9	VEC_INT01_SOL   JML IRQHANDLESTUB           ; IRQ 0, 1 --- Start Of Line interrupt
.181708	1708	5c a9 10 19	jmp $1910a9	VEC_INT02_TMR0  JML IRQHANDLESTUB           ; IRQ 0, 2 --- Timer 0 interrupt
.18170c	170c	5c a9 10 19	jmp $1910a9	VEC_INT03_TMR1  JML IRQHANDLESTUB           ; IRQ 0, 3 --- Timer 1 interrupt
.181710	1710	5c a9 10 19	jmp $1910a9	VEC_INT04_TMR2  JML IRQHANDLESTUB           ; IRQ 0, 4 --- Timer 2 interrupt
.181714	1714	5c a9 10 19	jmp $1910a9	VEC_INT05_RTC   JML IRQHANDLESTUB           ; IRQ 0, 5 --- Real Time Clock interrupt
.181718	1718	5c a9 10 19	jmp $1910a9	VEC_INT06_FDC   JML IRQHANDLESTUB           ; IRQ 0, 6 --- Floppy Drive Controller interrupt
.18171c	171c	5c ac 7f 19	jmp $197fac	VEC_INT07_MOUSE JML MOUSE_INTERRUPT         ; IRQ 0, 7 --- Mouse interrupt
.181720	1720	5c 93 75 19	jmp $197593	VEC_INT10_KBD   JML KBD_PROCESS_BYTE        ; IRQ 1, 0 --- Keyboard interrupt
.181724	1724	5c a9 10 19	jmp $1910a9	VEC_INT11_COL0  JML IRQHANDLESTUB           ; IRQ 1, 1 --- VICKY_II (INT2) Sprite Collision
.181728	1728	5c a9 10 19	jmp $1910a9	VEC_INT12_COL1  JML IRQHANDLESTUB           ; IRQ 1, 2 --- VICKY_II (INT3) Bitmap Collision
.18172c	172c	5c a9 10 19	jmp $1910a9	VEC_INT13_COM2  JML IRQHANDLESTUB           ; IRQ 1, 3 --- Serial port #2 interrupt
.181730	1730	5c a9 10 19	jmp $1910a9	VEC_INT14_COM1  JML IRQHANDLESTUB           ; IRQ 1, 4 --- Serial port #1 interrupt
.181734	1734	5c a9 10 19	jmp $1910a9	VEC_INT15_MIDI  JML IRQHANDLESTUB           ; IRQ 1, 5 --- MIDI controller interrupt
.181738	1738	5c a9 10 19	jmp $1910a9	VEC_INT16_LPT   JML IRQHANDLESTUB           ; IRQ 1, 6 --- Parallel port interrupt
.18173c	173c	5c a9 10 19	jmp $1910a9	VEC_INT17_SDC   JML IRQHANDLESTUB           ; IRQ 1, 7 --- SD Card Controller interrupt (CH376S???)
.181740	1740	5c a9 10 19	jmp $1910a9	VEC_INT20_OPL   JML IRQHANDLESTUB           ; IRQ 2, 0 --- OPL3
.181744	1744	5c a9 10 19	jmp $1910a9	VEC_INT21_GABE0 JML IRQHANDLESTUB           ; IRQ 2, 1 --- GABE (INT0) - TBD
.181748	1748	5c a9 10 19	jmp $1910a9	VEC_INT22_GABE1 JML IRQHANDLESTUB           ; IRQ 2, 2 --- GABE (INT1) - TBD
.18174c	174c	5c a9 10 19	jmp $1910a9	VEC_INT23_VDMA  JML IRQHANDLESTUB           ; IRQ 2, 3 --- VICKY_II (INT4) - VDMA Interrupt
.181750	1750	5c a9 10 19	jmp $1910a9	VEC_INT24_COL2  JML IRQHANDLESTUB           ; IRQ 2, 4 --- VICKY_II (INT5) Tile Collision
.181754	1754	5c a9 10 19	jmp $1910a9	VEC_INT25_GABE2 JML IRQHANDLESTUB           ; IRQ 2, 5 --- GABE (INT2) - TBD
.181758	1758	5c a9 10 19	jmp $1910a9	VEC_INT26_EXT   JML IRQHANDLESTUB           ; IRQ 2, 6 --- External Expansion
.18175c	175c	5c a9 10 19	jmp $1910a9	VEC_INT17_SDINS JML IRQHANDLESTUB           ; IRQ 2, 7 --- SDCARD Insertion
.181760	1760	5c a9 10 19	jmp $1910a9	VEC_INT30_OPN2  JML IRQHANDLESTUB           ; IRQ 3, 0 --- OPN2
.181764	1764	5c a9 10 19	jmp $1910a9	VEC_INT31_OPM   JML IRQHANDLESTUB           ; IRQ 3, 1 --- OPM
.181768	1768	5c a9 10 19	jmp $1910a9	VEC_INT32_IDE   JML IRQHANDLESTUB           ; IRQ 3, 2 --- HDD IDE Interrupt

;******  Return to file: src\kernel.asm


;******  Processing file: src\Interrupt_Handler.asm

.18176c						ISETHANDLER
.18176c		8b		phb		                PHB
.18176d		08		php		                PHP
.18176e		48		pha		                PHA             ; begin setdbr macro
.18176f		08		php		                PHP
.181770		e2 20		sep #$20	                SEP #$20        ; set A short
.181772		a9 00		lda #$00	                LDA #0
.181774		48		pha		                PHA
.181775		ab		plb		                PLB
.181776		28		plp		                PLP
.181777		68		pla		                PLA             ; end setdbr macro
.181778		e2 20		sep #$20	                SEP #$20        ; set A short
.18177a		c2 10		rep #$10	                REP #$10        ; set X long
.18177c		48		pha		                PHA                     ; Save the interrupt number
.18177d		5a		phy		                PHY                     ; Save the handler's bank
.18177e		da		phx		                PHX                     ; Save the handler's address
.18177f		f4 00 00	pea #$0000	                PEA #0                  ; Make room for the offset to the vector
.181782						LOCALS
>0001						l_vector        .word ?                 ; Address of vector in bank 0
>0003						l_handler       .dword ?                ; The address of the handler (only 24 bits, really)
>0007						l_number        .byte ?                 ; The interrupt number
.181782		29 30		and #$30	                AND #$30                ; Isolate the block #
.181784		0a		asl a		                ASL A                   ; Multiply by 2 to get the offset to the first vector of the block
.181785		83 01		sta $01,s	                STA l_vector
.181787		a3 07		lda $07,s	                LDA l_number            ; Get the number bank
.181789		29 07		and #$07	                AND #$07                ; Isolate the interrupt number
.18178b		0a		asl a		                ASL A                   ; Multiply by four to get the first byte of that interrupt's vector
.18178c		0a		asl a		                ASL A
.18178d		03 01		ora $01,s	                ORA l_vector            ; Add it to the offset to the block
.18178f		83 01		sta $01,s	                STA l_vector            ; Store back to the vector address
.181791		18		clc		                CLC                     ; Add the address of the start of the interrupt vector table
.181792		a9 00		lda #$00	                LDA #<VEC_INT_START
.181794		63 01		adc $01,s	                ADC l_vector
.181796		83 01		sta $01,s	                STA l_vector
.181798		a9 17		lda #$17	                LDA #>VEC_INT_START
.18179a		63 02		adc $02,s	                ADC l_vector+1
.18179c		83 02		sta $02,s	                STA l_vector+1
.18179e		78		sei		                SEI                     ; Disable the interrupts while we update the vector
.18179f		a0 00 00	ldy #$0000	                LDY #0
.1817a2		a9 5c		lda #$5c	                LDA #$5C                ; Opcode for JML
.1817a4		93 01		sta ($01,s),y	                STA (l_vector),Y        ; Make sure the first byte is a JML instruction
.1817a6		c8		iny		                INY                     ; Move to the low byte of the vector address
.1817a7		a3 03		lda $03,s	                LDA l_handler
.1817a9		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817ab		c8		iny		                INY                     ; Move to the high byte of the vector address
.1817ac		a3 04		lda $04,s	                LDA l_handler+1
.1817ae		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b0		c8		iny		                INY                     ; Move to the bank of the vector address
.1817b1		a3 05		lda $05,s	                LDA l_handler+2
.1817b3		93 01		sta ($01,s),y	                STA (l_vector),Y        ; And save it to the vector
.1817b5		c2 20		rep #$20	                REP #$20        ; set A long
.1817b7		18		clc		                CLC                     ; Clean up the locals off the stack
.1817b8		3b		tsc		                TSC
.1817b9		69 07 00	adc #$0007	                ADC #SIZE(LOCALS)
.1817bc		1b		tcs		                TCS
.1817bd		28		plp		                PLP
.1817be		ab		plb		                PLB
.1817bf		6b		rtl		                RTL
.1817c0						IRQ_HANDLER
.1817c0		08		php		                PHP
.1817c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1817c3		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0     ; Get the block 0 pending interrupts
.1817c7		d0 03		bne $1817cc	                BNE process_reg0
.1817c9		82 80 00	brl $18184c	                BRL CHECK_PENDING_REG1      ; If nothing: skip to block 1
.1817cc						process_reg0
.1817cc		89 01		bit #$01	                BIT #FNX0_INT00_SOF           ; Check to see if the bit is set
.1817ce		f0 0c		beq $1817dc	                BEQ continue            ; If not: skip the rest of this macro
.1817d0		29 01		and #$01	                AND #FNX0_INT00_SOF           ; Mask out all other pending interrupts
.1817d2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817d6		22 00 17 00	jsl $001700	                JSL VEC_INT00_SOF            ; And call its handler
.1817da		e2 20		sep #$20	                SEP #$20        ; set A short
.1817dc						continue
.1817dc		89 02		bit #$02	                BIT #FNX0_INT01_SOL           ; Check to see if the bit is set
.1817de		f0 0c		beq $1817ec	                BEQ continue            ; If not: skip the rest of this macro
.1817e0		29 02		and #$02	                AND #FNX0_INT01_SOL           ; Mask out all other pending interrupts
.1817e2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817e6		22 04 17 00	jsl $001704	                JSL VEC_INT01_SOL            ; And call its handler
.1817ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1817ec						continue
.1817ec		89 04		bit #$04	                BIT #FNX0_INT02_TMR0           ; Check to see if the bit is set
.1817ee		f0 0c		beq $1817fc	                BEQ continue            ; If not: skip the rest of this macro
.1817f0		29 04		and #$04	                AND #FNX0_INT02_TMR0           ; Mask out all other pending interrupts
.1817f2		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.1817f6		22 08 17 00	jsl $001708	                JSL VEC_INT02_TMR0            ; And call its handler
.1817fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1817fc						continue
.1817fc		89 08		bit #$08	                BIT #FNX0_INT03_TMR1           ; Check to see if the bit is set
.1817fe		f0 0c		beq $18180c	                BEQ continue            ; If not: skip the rest of this macro
.181800		29 08		and #$08	                AND #FNX0_INT03_TMR1           ; Mask out all other pending interrupts
.181802		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181806		22 0c 17 00	jsl $00170c	                JSL VEC_INT03_TMR1            ; And call its handler
.18180a		e2 20		sep #$20	                SEP #$20        ; set A short
.18180c						continue
.18180c		89 10		bit #$10	                BIT #FNX0_INT04_TMR2           ; Check to see if the bit is set
.18180e		f0 0c		beq $18181c	                BEQ continue            ; If not: skip the rest of this macro
.181810		29 10		and #$10	                AND #FNX0_INT04_TMR2           ; Mask out all other pending interrupts
.181812		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181816		22 10 17 00	jsl $001710	                JSL VEC_INT04_TMR2            ; And call its handler
.18181a		e2 20		sep #$20	                SEP #$20        ; set A short
.18181c						continue
.18181c		89 20		bit #$20	                BIT #FNX0_INT05_RTC           ; Check to see if the bit is set
.18181e		f0 0c		beq $18182c	                BEQ continue            ; If not: skip the rest of this macro
.181820		29 20		and #$20	                AND #FNX0_INT05_RTC           ; Mask out all other pending interrupts
.181822		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181826		22 14 17 00	jsl $001714	                JSL VEC_INT05_RTC            ; And call its handler
.18182a		e2 20		sep #$20	                SEP #$20        ; set A short
.18182c						continue
.18182c		89 40		bit #$40	                BIT #FNX0_INT06_FDC           ; Check to see if the bit is set
.18182e		f0 0c		beq $18183c	                BEQ continue            ; If not: skip the rest of this macro
.181830		29 40		and #$40	                AND #FNX0_INT06_FDC           ; Mask out all other pending interrupts
.181832		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181836		22 18 17 00	jsl $001718	                JSL VEC_INT06_FDC            ; And call its handler
.18183a		e2 20		sep #$20	                SEP #$20        ; set A short
.18183c						continue
.18183c		89 80		bit #$80	                BIT #FNX0_INT07_MOUSE           ; Check to see if the bit is set
.18183e		f0 0c		beq $18184c	                BEQ continue            ; If not: skip the rest of this macro
.181840		29 80		and #$80	                AND #FNX0_INT07_MOUSE           ; Mask out all other pending interrupts
.181842		8f 40 01 00	sta $000140	                STA @l INT_PENDING_REG0     ; Drop the pending bit for this interrupt
.181846		22 1c 17 00	jsl $00171c	                JSL VEC_INT07_MOUSE            ; And call its handler
.18184a		e2 20		sep #$20	                SEP #$20        ; set A short
.18184c						continue
.18184c						CHECK_PENDING_REG1
.18184c		af 41 01 00	lda $000141	                LDA @l INT_PENDING_REG1
.181850		d0 03		bne $181855	                BNE process_reg1
.181852		82 80 00	brl $1818d5	                BRL CHECK_PENDING_REG2
.181855						process_reg1
.181855		89 01		bit #$01	                BIT #FNX1_INT00_KBD           ; Check to see if the bit is set
.181857		f0 0c		beq $181865	                BEQ continue            ; If not: skip the rest of this macro
.181859		29 01		and #$01	                AND #FNX1_INT00_KBD           ; Mask out all other pending interrupts
.18185b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18185f		22 20 17 00	jsl $001720	                JSL VEC_INT10_KBD            ; And call its handler
.181863		e2 20		sep #$20	                SEP #$20        ; set A short
.181865						continue
.181865		89 02		bit #$02	                BIT #FNX1_INT01_COL0           ; Check to see if the bit is set
.181867		f0 0c		beq $181875	                BEQ continue            ; If not: skip the rest of this macro
.181869		29 02		and #$02	                AND #FNX1_INT01_COL0           ; Mask out all other pending interrupts
.18186b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18186f		22 24 17 00	jsl $001724	                JSL VEC_INT11_COL0            ; And call its handler
.181873		e2 20		sep #$20	                SEP #$20        ; set A short
.181875						continue
.181875		89 04		bit #$04	                BIT #FNX1_INT02_COL1           ; Check to see if the bit is set
.181877		f0 0c		beq $181885	                BEQ continue            ; If not: skip the rest of this macro
.181879		29 04		and #$04	                AND #FNX1_INT02_COL1           ; Mask out all other pending interrupts
.18187b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18187f		22 28 17 00	jsl $001728	                JSL VEC_INT12_COL1            ; And call its handler
.181883		e2 20		sep #$20	                SEP #$20        ; set A short
.181885						continue
.181885		89 08		bit #$08	                BIT #FNX1_INT03_COM2           ; Check to see if the bit is set
.181887		f0 0c		beq $181895	                BEQ continue            ; If not: skip the rest of this macro
.181889		29 08		and #$08	                AND #FNX1_INT03_COM2           ; Mask out all other pending interrupts
.18188b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18188f		22 2c 17 00	jsl $00172c	                JSL VEC_INT13_COM2            ; And call its handler
.181893		e2 20		sep #$20	                SEP #$20        ; set A short
.181895						continue
.181895		89 10		bit #$10	                BIT #FNX1_INT04_COM1           ; Check to see if the bit is set
.181897		f0 0c		beq $1818a5	                BEQ continue            ; If not: skip the rest of this macro
.181899		29 10		and #$10	                AND #FNX1_INT04_COM1           ; Mask out all other pending interrupts
.18189b		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18189f		22 30 17 00	jsl $001730	                JSL VEC_INT14_COM1            ; And call its handler
.1818a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818a5						continue
.1818a5		89 20		bit #$20	                BIT #FNX1_INT05_MPU401           ; Check to see if the bit is set
.1818a7		f0 0c		beq $1818b5	                BEQ continue            ; If not: skip the rest of this macro
.1818a9		29 20		and #$20	                AND #FNX1_INT05_MPU401           ; Mask out all other pending interrupts
.1818ab		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818af		22 34 17 00	jsl $001734	                JSL VEC_INT15_MIDI            ; And call its handler
.1818b3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818b5						continue
.1818b5		89 40		bit #$40	                BIT #FNX1_INT06_LPT           ; Check to see if the bit is set
.1818b7		f0 0c		beq $1818c5	                BEQ continue            ; If not: skip the rest of this macro
.1818b9		29 40		and #$40	                AND #FNX1_INT06_LPT           ; Mask out all other pending interrupts
.1818bb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818bf		22 38 17 00	jsl $001738	                JSL VEC_INT16_LPT            ; And call its handler
.1818c3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818c5						continue
.1818c5		89 80		bit #$80	                BIT #FNX1_INT07_SDCARD           ; Check to see if the bit is set
.1818c7		f0 0c		beq $1818d5	                BEQ continue            ; If not: skip the rest of this macro
.1818c9		29 80		and #$80	                AND #FNX1_INT07_SDCARD           ; Mask out all other pending interrupts
.1818cb		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818cf		22 3c 17 00	jsl $00173c	                JSL VEC_INT17_SDC            ; And call its handler
.1818d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1818d5						continue
.1818d5						CHECK_PENDING_REG2
.1818d5		af 42 01 00	lda $000142	                LDA @l INT_PENDING_REG2
.1818d9		d0 03		bne $1818de	                BNE process_reg2
.1818db		82 80 00	brl $18195e	                BRL CHECK_PENDING_REG3
.1818de						process_reg2
.1818de		89 01		bit #$01	                BIT #FNX2_INT00_OPL3           ; Check to see if the bit is set
.1818e0		f0 0c		beq $1818ee	                BEQ continue            ; If not: skip the rest of this macro
.1818e2		29 01		and #$01	                AND #FNX2_INT00_OPL3           ; Mask out all other pending interrupts
.1818e4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818e8		22 40 17 00	jsl $001740	                JSL VEC_INT20_OPL            ; And call its handler
.1818ec		e2 20		sep #$20	                SEP #$20        ; set A short
.1818ee						continue
.1818ee		89 02		bit #$02	                BIT #FNX2_INT01_GABE_INT0           ; Check to see if the bit is set
.1818f0		f0 0c		beq $1818fe	                BEQ continue            ; If not: skip the rest of this macro
.1818f2		29 02		and #$02	                AND #FNX2_INT01_GABE_INT0           ; Mask out all other pending interrupts
.1818f4		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.1818f8		22 44 17 00	jsl $001744	                JSL VEC_INT21_GABE0            ; And call its handler
.1818fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1818fe						continue
.1818fe		89 04		bit #$04	                BIT #FNX2_INT02_GABE_INT1           ; Check to see if the bit is set
.181900		f0 0c		beq $18190e	                BEQ continue            ; If not: skip the rest of this macro
.181902		29 04		and #$04	                AND #FNX2_INT02_GABE_INT1           ; Mask out all other pending interrupts
.181904		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181908		22 48 17 00	jsl $001748	                JSL VEC_INT22_GABE1            ; And call its handler
.18190c		e2 20		sep #$20	                SEP #$20        ; set A short
.18190e						continue
.18190e		89 08		bit #$08	                BIT #FNX2_INT03_VDMA           ; Check to see if the bit is set
.181910		f0 0c		beq $18191e	                BEQ continue            ; If not: skip the rest of this macro
.181912		29 08		and #$08	                AND #FNX2_INT03_VDMA           ; Mask out all other pending interrupts
.181914		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181918		22 4c 17 00	jsl $00174c	                JSL VEC_INT23_VDMA            ; And call its handler
.18191c		e2 20		sep #$20	                SEP #$20        ; set A short
.18191e						continue
.18191e		89 10		bit #$10	                BIT #FNX2_INT04_COL2           ; Check to see if the bit is set
.181920		f0 0c		beq $18192e	                BEQ continue            ; If not: skip the rest of this macro
.181922		29 10		and #$10	                AND #FNX2_INT04_COL2           ; Mask out all other pending interrupts
.181924		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181928		22 50 17 00	jsl $001750	                JSL VEC_INT24_COL2            ; And call its handler
.18192c		e2 20		sep #$20	                SEP #$20        ; set A short
.18192e						continue
.18192e		89 20		bit #$20	                BIT #FNX2_INT05_GABE_INT2           ; Check to see if the bit is set
.181930		f0 0c		beq $18193e	                BEQ continue            ; If not: skip the rest of this macro
.181932		29 20		and #$20	                AND #FNX2_INT05_GABE_INT2           ; Mask out all other pending interrupts
.181934		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181938		22 54 17 00	jsl $001754	                JSL VEC_INT25_GABE2            ; And call its handler
.18193c		e2 20		sep #$20	                SEP #$20        ; set A short
.18193e						continue
.18193e		89 40		bit #$40	                BIT #FNX2_INT06_EXT           ; Check to see if the bit is set
.181940		f0 0c		beq $18194e	                BEQ continue            ; If not: skip the rest of this macro
.181942		29 40		and #$40	                AND #FNX2_INT06_EXT           ; Mask out all other pending interrupts
.181944		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181948		22 58 17 00	jsl $001758	                JSL VEC_INT26_EXT            ; And call its handler
.18194c		e2 20		sep #$20	                SEP #$20        ; set A short
.18194e						continue
.18194e		89 80		bit #$80	                BIT #FNX2_INT07_SDCARD_INS           ; Check to see if the bit is set
.181950		f0 0c		beq $18195e	                BEQ continue            ; If not: skip the rest of this macro
.181952		29 80		and #$80	                AND #FNX2_INT07_SDCARD_INS           ; Mask out all other pending interrupts
.181954		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.181958		22 5c 17 00	jsl $00175c	                JSL VEC_INT17_SDINS            ; And call its handler
.18195c		e2 20		sep #$20	                SEP #$20        ; set A short
.18195e						continue
.18195e						CHECK_PENDING_REG3
.18195e		af 43 01 00	lda $000143	                LDA @l INT_PENDING_REG3
.181962		f0 30		beq $181994	                BEQ EXIT_IRQ_HANDLE
.181964		89 01		bit #$01	                BIT #FNX3_INT00_OPN2           ; Check to see if the bit is set
.181966		f0 0c		beq $181974	                BEQ continue            ; If not: skip the rest of this macro
.181968		29 01		and #$01	                AND #FNX3_INT00_OPN2           ; Mask out all other pending interrupts
.18196a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18196e		22 60 17 00	jsl $001760	                JSL VEC_INT30_OPN2            ; And call its handler
.181972		e2 20		sep #$20	                SEP #$20        ; set A short
.181974						continue
.181974		89 02		bit #$02	                BIT #FNX3_INT01_OPM           ; Check to see if the bit is set
.181976		f0 0c		beq $181984	                BEQ continue            ; If not: skip the rest of this macro
.181978		29 02		and #$02	                AND #FNX3_INT01_OPM           ; Mask out all other pending interrupts
.18197a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18197e		22 64 17 00	jsl $001764	                JSL VEC_INT31_OPM            ; And call its handler
.181982		e2 20		sep #$20	                SEP #$20        ; set A short
.181984						continue
.181984		89 04		bit #$04	                BIT #FNX3_INT02_IDE           ; Check to see if the bit is set
.181986		f0 0c		beq $181994	                BEQ continue            ; If not: skip the rest of this macro
.181988		29 04		and #$04	                AND #FNX3_INT02_IDE           ; Mask out all other pending interrupts
.18198a		8f 41 01 00	sta $000141	                STA @l INT_PENDING_REG1     ; Drop the pending bit for this interrupt
.18198e		22 68 17 00	jsl $001768	                JSL VEC_INT32_IDE            ; And call its handler
.181992		e2 20		sep #$20	                SEP #$20        ; set A short
.181994						continue
.181994						EXIT_IRQ_HANDLE
.181994		28		plp		                PLP
.181995		6b		rtl		                RTL
.181996		6b		rtl		NMI_HANDLER     RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Math_def.asm

=$000100					UNSIGNED_MULT_A_LO  = $000100
=$000101					UNSIGNED_MULT_A_HI  = $000101
=$000102					UNSIGNED_MULT_B_LO  = $000102
=$000103					UNSIGNED_MULT_B_HI  = $000103
=$000104					UNSIGNED_MULT_AL_LO = $000104
=$000105					UNSIGNED_MULT_AL_HI = $000105
=$000106					UNSIGNED_MULT_AH_LO = $000106
=$000107					UNSIGNED_MULT_AH_HI = $000107
=$000108					SIGNED_MULT_A_LO    = $000108
=$000109					SIGNED_MULT_A_HI    = $000109
=$00010a					SIGNED_MULT_B_LO    = $00010A
=$00010b					SIGNED_MULT_B_HI    = $00010B
=$00010c					SIGNED_MULT_AL_LO   = $00010C
=$00010d					SIGNED_MULT_AL_HI   = $00010D
=$00010e					SIGNED_MULT_AH_LO   = $00010E
=$00010f					SIGNED_MULT_AH_HI   = $00010F
=$000110					UNSIGNED_DIV_DEM_LO = $000110
=$000111					UNSIGNED_DIV_DEM_HI = $000111
=$000112					UNSIGNED_DIV_NUM_LO = $000112
=$000113					UNSIGNED_DIV_NUM_HI = $000113
=$000114					UNSIGNED_DIV_QUO_LO = $000114
=$000115					UNSIGNED_DIV_QUO_HI = $000115
=$000116					UNSIGNED_DIV_REM_LO = $000116
=$000117					UNSIGNED_DIV_REM_HI = $000117
=$000118					SIGNED_DIV_DEM_LO   = $000118
=$000119					SIGNED_DIV_DEM_HI   = $000119
=$00011a					SIGNED_DIV_NUM_LO   = $00011A
=$00011b					SIGNED_DIV_NUM_HI   = $00011B
=$00011c					SIGNED_DIV_QUO_LO   = $00011C
=$00011d					SIGNED_DIV_QUO_HI   = $00011D
=$00011e					SIGNED_DIV_REM_LO   = $00011E
=$00011f					SIGNED_DIV_REM_HI   = $00011F
=$000120					ADDER32_A_LL        = $000120
=$000121					ADDER32_A_LH        = $000121
=$000122					ADDER32_A_HL        = $000122
=$000123					ADDER32_A_HH        = $000123
=$000124					ADDER32_B_LL        = $000124
=$000125					ADDER32_B_LH        = $000125
=$000126					ADDER32_B_HL        = $000126
=$000127					ADDER32_B_HH        = $000127
=$000128					ADDER32_R_LL        = $000128
=$000129					ADDER32_R_LH        = $000129
=$00012a					ADDER32_R_HL        = $00012A
=$00012b					ADDER32_R_HH        = $00012B

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/timer_def.asm

=$000160					TIMER0_CTRL_REG   = $000160 ; (Write - Control, Read Status)
=$01						TMR0_EN     = $01
=$02						TMR0_SCLR   = $02
=$04						TMR0_SLOAD  = $04 ; Use SLOAD is
=$08						TMR0_UPDWN  = $08
=$000161					TIMER0_CHARGE_L   = $000161 ; Use if you want to Precharge and countdown
=$000162					TIMER0_CHARGE_M   = $000162 ;
=$000163					TIMER0_CHARGE_H   = $000163 ;
=$000164					TIMER0_CMP_REG    = $000164 ;
=$01						TMR0_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR0_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$000165					TIMER0_CMP_L      = $000165 ; Load this Value for Countup
=$000166					TIMER0_CMP_M      = $000166 ;
=$000167					TIMER0_CMP_H      = $000167 ;
=$000168					TIMER1_CTRL_REG   = $000168 ;
=$01						TMR1_EN     = $01
=$02						TMR1_SCLR   = $02
=$04						TMR1_SLOAD  = $04
=$08						TMR1_UPDWN  = $08 ; 1 = Up, 0 = Down
=$000169					TIMER1_CHARGE_L   = $000169 ; Use if you want to Precharge and countdown
=$00016a					TIMER1_CHARGE_M   = $00016A ;
=$00016b					TIMER1_CHARGE_H   = $00016B ;
=$00016c					TIMER1_CMP_REG    = $00016C ;
=$01						TMR1_CMP_RECLR     = $01 ; set to one for it to cycle when Counting up
=$02						TMR1_CMP_RELOAD    = $02 ; Set to one for it to reload when Counting Down
=$00016d					TIMER1_CMP_L      = $00016D ;
=$00016e					TIMER1_CMP_M      = $00016E ;
=$00016f					TIMER1_CMP_H      = $00016F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/interrupt_def.asm

=$000140					INT_PENDING_REG0 = $000140 ;
=$000141					INT_PENDING_REG1 = $000141 ;
=$000142					INT_PENDING_REG2 = $000142 ;
=$000143					INT_PENDING_REG3 = $000143 ; FMX Model
=$000144					INT_POL_REG0     = $000144 ;
=$000145					INT_POL_REG1     = $000145 ;
=$000146					INT_POL_REG2     = $000146 ;
=$000147					INT_POL_REG7     = $000147 ; FMX Model
=$000148					INT_EDGE_REG0    = $000148 ;
=$000149					INT_EDGE_REG1    = $000149 ;
=$00014a					INT_EDGE_REG2    = $00014A ;
=$00014b					INT_EDGE_REG3    = $00014B ; FMX Model
=$00014c					INT_MASK_REG0    = $00014C ;
=$00014d					INT_MASK_REG1    = $00014D ;
=$00014e					INT_MASK_REG2    = $00014E ;
=$00014f					INT_MASK_REG3    = $00014F ; FMX Model
=$01						FNX0_INT00_SOF        = $01  ;Start of Frame @ 60FPS
=$02						FNX0_INT01_SOL        = $02  ;Start of Line (Programmable)
=$04						FNX0_INT02_TMR0       = $04  ;Timer 0 Interrupt
=$08						FNX0_INT03_TMR1       = $08  ;Timer 1 Interrupt
=$10						FNX0_INT04_TMR2       = $10  ;Timer 2 Interrupt
=$20						FNX0_INT05_RTC        = $20  ;Real-Time Clock Interrupt
=$40						FNX0_INT06_FDC        = $40  ;Floppy Disk Controller
=$80						FNX0_INT07_MOUSE      = $80  ; Mouse Interrupt (INT12 in SuperIO IOspace)
=$01						FNX1_INT00_KBD        = $01  ;Keyboard Interrupt
=$02						FNX1_INT01_COL0       = $02  ;VICKY_II (INT2) Sprite Collision
=$04						FNX1_INT02_COL1       = $04  ;VICKY_II (INT3) Bitmap Collision
=$08						FNX1_INT03_COM2       = $08  ;Serial Port 2
=$10						FNX1_INT04_COM1       = $10  ;Serial Port 1
=$20						FNX1_INT05_MPU401     = $20  ;Midi Controller Interrupt
=$40						FNX1_INT06_LPT        = $40  ;Parallel Port
=$80						FNX1_INT07_SDCARD     = $80  ;SD Card Controller Interrupt (CH376S)
=$01						FNX2_INT00_OPL3       = $01  ;OPl3
=$02						FNX2_INT01_GABE_INT0  = $02  ;GABE (INT0) - TBD
=$04						FNX2_INT02_GABE_INT1  = $04  ;GABE (INT1) - TBD
=$08						FNX2_INT03_VDMA       = $08  ;VICKY_II (INT4) - VDMA Interrupt
=$10						FNX2_INT04_COL2       = $10  ;VICKY_II (INT5) Tile Collision
=$20						FNX2_INT05_GABE_INT2  = $20  ;GABE (INT2) - TBD
=$40						FNX2_INT06_EXT        = $40  ;External Expansion
=$80						FNX2_INT07_SDCARD_INS = $80  ; SDCARD Insertion
=$01						FNX3_INT00_OPN2       = $01  ;OPN2
=$02						FNX3_INT01_OPM        = $02  ;OPM
=$04						FNX3_INT02_IDE        = $04  ;HDD IDE INTERRUPT
=$08						FNX3_INT03_TBD        = $08  ;TBD
=$10						FNX3_INT04_TBD        = $10  ;TBD
=$20						FNX3_INT05_TBD        = $20  ;GABE (INT2) - TBD
=$40						FNX3_INT06_TBD        = $40  ;External Expansion
=$80						FNX3_INT07_TBD        = $80  ; SDCARD Insertion

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/super_io_def.asm

=$af1100					PME_STS_REG     = $AF1100
=$af1102					PME_EN_REG		  = $AF1102
=$af1104					PME_STS1_REG		= $AF1104
=$af1105					PME_STS2_REG		= $AF1105
=$af1106					PME_STS3_REG		= $AF1106
=$af1107					PME_STS4_REG		= $AF1107
=$af1108					PME_STS5_REG		= $AF1108
=$af110a					PME_EN1_REG     = $AF110A
=$af110b					PME_EN2_REG     = $AF110B
=$af110c					PME_EN3_REG     = $AF110C
=$af110d					PME_EN4_REG     = $AF110D
=$af110e					PME_EN5_REG     = $AF110E
=$af1110					SMI_STS1_REG		= $AF1110
=$af1111					SMI_STS2_REG		= $AF1111
=$af1112					SMI_STS3_REG		= $AF1112
=$af1113					SMI_STS4_REG		= $AF1113
=$af1114					SMI_STS5_REG		= $AF1114
=$af1116					SMI_EN1_REG     = $AF1116
=$af1117					SMI_EN2_REG     = $AF1117
=$af1118					SMI_EN3_REG     = $AF1118
=$af1119					SMI_EN4_REG     = $AF1119
=$af111a					SMI_EN5_REG     = $AF111A
=$af111c					MSC_ST_REG      = $AF111C
=$af111e					FORCE_DISK_CHANGE       = $AF111E
=$af111f					FLOPPY_DATA_RATE        = $AF111F
=$af1120					UART1_FIFO_CTRL_SHDW    = $AF1120
=$af1121					UART2_FIFO_CTRL_SHDW    = $AF1121
=$af1122					DEV_DISABLE_REG         = $AF1122
=$af1123					GP10_REG    		= $AF1123
=$af1124					GP11_REG    		= $AF1124
=$af1125					GP12_REG    		= $AF1125
=$af1126					GP13_REG    		= $AF1126
=$af1127					GP14_REG    		= $AF1127
=$af1128					GP15_REG    		= $AF1128
=$af1129					GP16_REG    		= $AF1129
=$af112a					GP17_REG    		= $AF112A
=$af112b					GP20_REG    		= $AF112B
=$af112c					GP21_REG    		= $AF112C
=$af112d					GP22_REG		= $AF112D
=$af112f					GP24_REG		= $AF112F
=$af1130					GP25_REG		= $AF1130
=$af1131					GP26_REG		= $AF1131
=$af1132					GP27_REG		= $AF1132
=$af1133					GP30_REG		= $AF1133
=$af1134					GP31_REG		= $AF1134
=$af1135					GP32_REG		= $AF1135
=$af1136					GP33_REG		= $AF1136
=$af1137					GP34_REG		= $AF1137
=$af1138					GP35_REG		= $AF1138
=$af1139					GP36_REG		= $AF1139
=$af113a					GP37_REG		= $AF113A
=$af113b					GP40_REG		= $AF113B
=$af113c					GP41_REG		= $AF113C
=$af113d					GP42_REG		= $AF113D
=$af113e					GP43_REG		= $AF113E
=$af113f					GP50_REG		= $AF113F
=$af1140					GP51_REG		= $AF1140
=$af1141					GP52_REG		= $AF1141
=$af1142					GP53_REG		= $AF1142
=$af1143					GP54_REG		= $AF1143
=$af1144					GP55_REG		= $AF1144
=$af1145					GP56_REG		= $AF1145
=$af1146					GP57_REG		= $AF1146
=$af1147					GP60_REG		= $AF1147
=$af1148					GP61_REG		= $AF1148
=$af114b					GP1_REG			= $AF114B
=$af114c					GP2_REG			= $AF114C
=$af114d					GP3_REG			= $AF114D
=$af114e					GP4_REG			= $AF114E
=$af114f					GP5_REG			= $AF114F
=$af1150					GP6_REG			= $AF1150
=$af1156					FAN1_REG		        = $AF1156
=$af1157					FAN2_REG            = $AF1157
=$af1158					FAN_CTRL_REG  	    = $AF1158
=$af1159					FAN1_TACH_REG       = $AF1159
=$af115a					FAN2_TACH_REG       = $AF115A
=$af115b					FAN1_PRELOAD_REG    = $AF115B
=$af115c					FAN2_PRELOAD_REG    = $AF115C
=$af115d					LED1_REG    		    = $AF115D
=$af115e					LED2_REG    		    = $AF115E
=$af115f					KEYBOARD_SCAN_CODE	= $AF115F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/keyboard_def.asm

=$af1807					    STATUS_PORT 	= $AF1807
=$af1807					    KBD_STATUS      = $AF1807
=$af1807					    KBD_CMD_BUF		= $AF1807
=$af1803					    KBD_OUT_BUF 	= $AF1803
=$af1803					    KBD_INPT_BUF	= $AF1803
=$af1803					    KBD_DATA_BUF	= $AF1803
=$af180a					    PORT_A		    = $AF180A   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$af180b					    PORT_B			= $AF180B   ;This is a Timing Register, the value is hard coded, so there is no need to use those
=$01						OUT_BUF_FULL    = $01
=$02						INPT_BUF_FULL	= $02
=$04						SYS_FLAG		= $04
=$08						CMD_DATA		= $08
=$10						KEYBD_INH       = $10
=$20						TRANS_TMOUT	    = $20
=$40						RCV_TMOUT		= $40
=$80						PARITY_EVEN		= $80
=$10						INH_KEYBOARD	= $10
=$ae						KBD_ENA			= $AE
=$ad						KBD_DIS			= $AD
=$f1						KB_MENU			= $F1
=$f4						KB_ENABLE		= $F4
=$f7						KB_MAKEBREAK    = $F7
=$fe						KB_ECHO			= $FE
=$ff						KB_RESET		= $FF
=$ed						KB_LED_CMD		= $ED
=$aa						KB_OK			= $AA
=$fa						KB_ACK			= $FA
=$ff						KB_OVERRUN		= $FF
=$fe						KB_RESEND		= $FE
=$f0						KB_BREAK		= $F0
=$10						KB_FA			= $10
=$20						KB_FE			= $20
=$40						KB_PR_LED		= $40
=$01						KB_SCROLL_LOCK  = $01
=$02						KB_NUM_LOCK     = $02
=$04						KB_CAPS_LOCK    = $04
=$80						KB_CTRL_C = $80             ; CTRL-C was pressed
=$60						KB_CREDITS = $60            ; Credits key was pressed

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/RTC_def.asm

=$af0800					RTC_SEC       = $AF0800 ;Seconds Register
=$af0801					RTC_SEC_ALARM = $AF0801 ;Seconds Alarm Register
=$af0802					RTC_MIN       = $AF0802 ;Minutes Register
=$af0803					RTC_MIN_ALARM = $AF0803 ;Minutes Alarm Register
=$af0804					RTC_HRS       = $AF0804 ;Hours Register
=$af0805					RTC_HRS_ALARM = $AF0805 ;Hours Alarm Register
=$af0806					RTC_DAY       = $AF0806 ;Day Register
=$af0807					RTC_DAY_ALARM = $AF0807 ;Day Alarm Register
=$af0808					RTC_DOW       = $AF0808 ;Day of Week Register
=$af0809					RTC_MONTH     = $AF0809 ;Month Register
=$af080a					RTC_YEAR      = $AF080A ;Year Register
=$af080b					RTC_RATES     = $AF080B ;Rates Register
=$af080c					RTC_ENABLE    = $AF080C ;Enables Register
=$af080d					RTC_FLAGS     = $AF080D ;Flags Register
=$af080e					RTC_CTRL      = $AF080E ;Control Register
=$af080f					RTC_CENTURY   = $AF080F ;Century Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/io_def.asm

=0						CHAN_CONSOLE  = 0           ; ID for screen and keyboard access
=1						CHAN_COM1     = 1           ; ID for serial access on COM1 (external port)
=2						CHAN_COM2     = 2           ; ID for serial access on COM2 (internal port)
=3						CHAN_LPT      = 3           ; ID for parallel port
=4						CHAN_EVID     = 4           ; ID for the second video port
=$afe810					SDCARD_DATA   = $AFE810     ;(R/W) SDCARD (CH376S) Data PORT_A (A0 = 0)
=$afe811					SDCARD_CMD    = $AFE811     ;(R/W) SDCARD (CH376S) CMD/STATUS Port (A0 = 1)
=$afe812					SDCARD_STAT   = $AFE812     ;(R) SDCARD (Bit[0] = CD, Bit[1] = WP)
=$01						SDC_DETECTED = $01          ; SD card has been detected (0 = card present, 1 = no card present)
=$02						SDC_WRITEPROT = $02         ; SD card is write protected (0 = card is writeable, 1 = card is write protected or missing)
=$afe900					CODEC_DATA_LO = $AFE900     ;(W) LSB of Add/Data Reg to Control CODEC See WM8776 Spec
=$afe901					CODEC_DATA_HI = $AFE901     ;(W) MSB od Add/Data Reg to Control CODEC See WM8776 Spec
=$afe902					CODEC_WR_CTRL = $AFE902     ;(W) Bit[0] = 1 -> Start Writing the CODEC Control Register

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Trinity_CFP9301_def.asm

=$afe800					JOYSTICK0           = $AFE800   ;(R) Joystick 0 - J7 (next to SD Card)
=$afe801					JOYSTICK1           = $AFE801   ;(R) Joystick 1 - J8
=$afe802					JOYSTICK2           = $AFE802   ;(R) Joystick 2 - J9
=$afe803					JOYSTICK3           = $AFE803   ;(R) Joystick 3 - J10 (Next to Buzzer)
=$afe804					JOYSTICK_MODE       = $AFE804
=$01						NES_SNES_EN0        = $01       ; Enable the NES/SNES Mode on Port 0
=$02						NES_SNES_EN1        = $02       ; Enable the NES/SNES Mode on Port 1
=$04						NES_SNES_JOY        = $04       ; 0 = NES, 1 = SNES
=$40						NES_SNES_DONE       = $40       ; Poll to see if the Deserializer is done
=$80						NES_SNES_TRIG       = $80       ; Set to start the Serializer
=$afe805					REVOFPCB_C          = $AFE805   ; You should read the ASCCII for "C"
=$afe806					REVOFPCB_4          = $AFE806   ; You should read the ASCCII for "4"
=$afe807					REVOFPCB_A          = $AFE807   ; You should read the ASCCII for "A"
=$afe808					NES_SNES0_DAT_LO    = $AFE808   ; Contains the 8bits From NES and SNES
=$afe809					SNES0_DAT_HI0       = $AFE809   ; Contains the extra 4 bit from the SNES Controller
=$afe80a					NES_SNES1_DAT_LO    = $AFE80A
=$afe80b					SNES1_DAT_HI0       = $AFE80B
=$afe80c					CFP9301_REV         = $AFE80C   ; Hardware Revision of the CPLD Code
=$afe80d					DIP_USER            = $AFE80D   ; Dip Switch 3/4/5 can be user Defined
=$afe80e					DIP_BOOTMODE        = $AFE80E
=$01						BOOT_MODE0          = $01
=$02						BOOT_MODE1          = $02
=$80						HD_INSTALLED        = $80
=$00						DIP_BOOT_IDE        = $00
=$01						DIP_BOOT_SDCARD     = $01
=$02						DIP_BOOT_FLOPPY     = $02
=$03						DIP_BOOT_BASIC      = $03

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/Unity_CFP9307_def.asm

=$afe830					IDE_DATA      = $AFE830 ; 8-Bit Access here Only
=$afe831					IDE_ERROR     = $AFE831 ; Error Information register (only read when there is an error ) - Probably clears Error Bits
=$afe832					IDE_SECT_CNT  = $AFE832 ; Sector Count Register (also used to pass parameter for timeout for IDLE modus Command)
=$afe833					IDE_SECT_SRT  = $AFE833 ; Start Sector Register (0 = 256), so start @ 1
=$afe834					IDE_CLDR_LO   = $AFE834 ; Low Byte of Cylinder Numnber {7:0}
=$afe835					IDE_CLDR_HI   = $AFE835 ;  Hi Byte of Cylinder Number {9:8} (1023-0).
=$afe836					IDE_HEAD      = $AFE836 ; Head, device select, {3:0} HEad Number, 4 -> 0:Master, 1:Slave, {7:5} = 101 (legacy);
=$afe837					IDE_CMD_STAT  = $AFE837 ; Command/Status Register - Reading this will clear the Interrupt Registers
=$afe838					IDE_DATA_LO   = $AFE838 ; 16-bit access here
=$afe839					IDE_DATA_HI   = $AFE839 ;
=$01						IDE_ERR_AMNF = $01      ; Error: Address mark not found
=$02						IDE_ERR_TKZNF = $02     ; Error: Track 0 not found
=$04						IDE_ERR_ABRT = $04      ; Error: Aborted command
=$08						IDE_ERR_MCR = $08       ; Error: Media change request
=$10						IDE_ERR_IDNF = $10      ; Error: ID not found
=$20						IDE_ERR_MC = $20        ; Error: Media change
=$40						IDE_ERR_UNC = $40       ; Error: Uncorrectable data error
=$80						IDE_ERR_BBK = $80       ; Error: Bad block detected
=$80						IDE_STAT_BSY = $80      ; BSY (Busy) is set whenever the device has control of the command Block Registers.
=$40						IDE_STAT_DRDY = $40     ; DRDY (Device Ready) is set to indicate that the device is capable of accepting all command codes.
=$20						IDE_STAT_DF = $20       ; DF (Device Fault) indicates a device fault error has been detected.
=$10						IDE_STAT_DSC = $10      ; DSC (Device Seek Complete) indicates that the device heads are settled over a track.
=$08						IDE_STAT_DRQ = $08      ; DRQ (Data Request) indicates that the device is ready to transfer a word or byte of data between
=$04						IDE_STAT_CORR = $04     ; CORR (Corrected Data) is used to indicate a correctable data error.
=$02						IDE_STAT_IDX = $02      ; Vendor specific bit
=$01						IDE_STAT_ERR = $01      ; ERR (Error) indicates that an error occurred during execution of the previous command.
=$ec						IDE_CMD_IDENTIFY = $EC      ; Get device identification data
=$21						IDE_CMD_READ_SECTOR = $21   ; Read 1 or more sectors
=$30						IDE_CMD_WRITE_SECTOR = $30  ; Write 1 or more sectors

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/GABE_Control_Registers_def.asm

=$afe880					GABE_MSTR_CTRL      = $AFE880
=$01						GABE_CTRL_PWR_LED   = $01     ; Controls the LED in the Front of the case (Next to the reset button)
=$02						GABE_CTRL_SDC_LED   = $02     ; Controls the LED in the Front of the Case (Next to SDCard)
=$04						GABE_CTRL_STS_LED0  = $04     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$08						GABE_CTRL_STS_LED1  = $08     ; Control Status LED0 (General Use) - C256 Foenix U Only
=$10						GABE_CTRL_BUZZER    = $10     ; Controls the Buzzer
=$80						GABE_CTRL_WRM_RST   = $80     ; Warm Reset (needs to Setup other registers)
=$afe881					GABE_LED_FLASH_CTRL = $AFE881  ; Flashing LED Control
=$01						GABE_LED0_FLASH_CTRL = $01     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$02						GABE_LED1_FLASH_CTRL = $02     ; 0- Automatic Flash 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED1 to manually control)
=$10						GABE_LD0_FLASH_FRQ0   = $10     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$20						GABE_LD0_FLASH_FRQ1   = $20     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$40						GABE_LD1_FLASH_FRQ0   = $40     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$80						GABE_LD1_FLASH_FRQ1   = $80     ; 1 - Bypass Flash Timer (Use GABE_CTRL_STS_LED0 to manually control)
=$afe882					GABE_RST_AUTH0      = $AFE882 ; Must Contain the BYTE $AD for Reset to Activate
=$afe883					GABE_RST_AUTH1      = $AFE883 ; Must Contain the BYTE $DE for Reset to Activate
=$afe884					GABE_RNG_DAT_LO     = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_DAT_HI     = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe884					GABE_RNG_SEED_LO    = $AFE884 ; Low Part of 16Bit RNG Generator
=$afe885					GABE_RNG_SEED_HI    = $AFE885 ; Hi Part of 16Bit RNG Generator
=$afe886					GABE_RNG_STAT       = $AFE886 ;
=$80						GABE_RNG_LFSR_DONE  = $80     ; indicates that Output = SEED Database
=$afe886					GABE_RNG_CTRL       = $AFE886 ;
=$01						GABE_RNG_CTRL_EN    = $01     ; Enable the LFSR BLOCK_LEN
=$02						GABE_RNG_CTRL_DV    = $02     ; After Setting the Seed Value, Toggle that Bit for it be registered
=$afe887					GABE_SYS_STAT       = $AFE887 ;
=$01						GABE_SYS_STAT_MID0  = $01     ; Machine ID -- LSB
=$02						GABE_SYS_STAT_MID1  = $02     ; Machine ID --
=$04						GABE_SYS_STAT_MID2  = $04     ; Machine ID -- MSB
=$10						GABE_SYS_STAT_EXP   = $10     ; if Zero, there is an Expansion Card Preset
=$40						GABE_SYS_STAT_CPUA  = $40     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$80						GABE_SYS_STAT_CPUX  = $80     ; Indicates the (8bit/16bit) Size of the Accumulator - Not Implemented
=$afe88a					GABE_SUBVERSION_LO  = $AFE88A
=$afe88b					GABE_SUBVERSION_HI  = $AFE88B
=$afe88c					GABE_VERSION_LO     = $AFE88C
=$afe88d					GABE_VERSION_HI     = $AFE88D
=$afe88e					GABE_MODEL_LO       = $AFE88E
=$afe88f					GABE_MODEL_HI       = $AFE88F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/SID_def.asm

=$afe400					SID0_V1_FREQ_LO    = $AFE400 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$afe401					SID0_V1_FREQ_HI    = $AFE401 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$afe402					SID0_V1_PW_LO      = $AFE402 ;SID - L - Voice 1 (Write Only) - PW LOW
=$afe403					SID0_V1_PW_HI      = $AFE403 ;SID - L - Voice 1 (Write Only) - PW HI
=$afe404					SID0_V1_CTRL       = $AFE404 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$afe405					SID0_V1_ATCK_DECY  = $AFE405 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$afe406					SID0_V1_SSTN_RLSE  = $AFE406 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$afe407					SID0_V2_FREQ_LO    = $AFE407 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$afe408					SID0_V2_FREQ_HI    = $AFE408 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$afe409					SID0_V2_PW_LO      = $AFE409 ;SID - L - Voice 2 (Write Only) - PW LOW
=$afe40a					SID0_V2_PW_HI      = $AFE40A ;SID - L - Voice 2 (Write Only) - PW HI
=$afe40b					SID0_V2_CTRL       = $AFE40B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$afe40c					SID0_V2_ATCK_DECY  = $AFE40C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$afe40d					SID0_V2_SSTN_RLSE  = $AFE40D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$afe40e					SID0_V3_FREQ_LO    = $AFE40E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$afe40f					SID0_V3_FREQ_HI    = $AFE40F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$afe410					SID0_V3_PW_LO      = $AFE410 ;SID - L - Voice 3 (Write Only) - PW LOW
=$afe411					SID0_V3_PW_HI      = $AFE411 ;SID - L - Voice 3 (Write Only) - PW HI
=$afe412					SID0_V3_CTRL       = $AFE412 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$afe413					SID0_V3_ATCK_DECY  = $AFE413 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$afe414					SID0_V3_SSTN_RLSE  = $AFE414 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$afe415					SID0_FC_LO         = $AFE415 ;SID - L - Filter (Write Only) - FC LOW
=$afe416					SID0_FC_HI         = $AFE416 ;SID - L - Filter (Write Only) - FC HI
=$afe417					SID0_RES_FILT      = $AFE417 ;SID - L - Filter (Write Only) - RES / FILT
=$afe418					SID0_MODE_VOL      = $AFE418 ;SID - L - Filter (Write Only) - MODE / VOL
=$afe419					SID0_POT_X         = $AFE419 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$afe41a					SID0_POT_Y         = $AFE41A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$afe41b					SID0_OSC3_RND      = $AFE41B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$afe41c					SID0_ENV3          = $AFE41C ;SID - L - Misc (Read Only)  - ENV3
=$afe41d					SID0_NOT_USED0     = $AFE41D ;SID - L - NOT USED
=$afe41e					SID0_NOT_USED1     = $AFE41E ;SID - L - NOT USED
=$afe41f					SID0_NOT_USED2     = $AFE41F ;SID - L - NOT USED

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_GENERAL_def.asm

=$af0000					MASTER_CTRL_REG_L	      = $AF0000
=$01						Mstr_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$02						Mstr_Ctrl_Text_Overlay  = $02       ; Enable the Overlay of the text mode on top of Graphic Mode (the Background Color is ignored)
=$04						Mstr_Ctrl_Graph_Mode_En = $04       ; Enable the Graphic Mode
=$08						Mstr_Ctrl_Bitmap_En     = $08       ; Enable the Bitmap Module In Vicky
=$10						Mstr_Ctrl_TileMap_En    = $10       ; Enable the Tile Module in Vicky
=$20						Mstr_Ctrl_Sprite_En     = $20       ; Enable the Sprite Module in Vicky
=$40						Mstr_Ctrl_GAMMA_En      = $40       ; this Enable the GAMMA correction - The Analog and DVI have different color value, the GAMMA is great to correct the difference
=$80						Mstr_Ctrl_Disable_Vid   = $80       ; This will disable the Scanning of the Video hence giving 100% bandwith to the CPU
=$af0001					MASTER_CTRL_REG_H       = $AF0001
=$01						Mstr_Ctrl_Video_Mode0   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$02						Mstr_Ctrl_Video_Mode1   = $02       ; 0 - No Pixel Doubling, 1- Pixel Doubling (Reduce the Pixel Resolution by 2)
=$af0002					GAMMA_CTRL_REG          = $AF0002
=$01						GAMMA_Ctrl_Input        = $01 ; 0 = DipSwitch Chooses GAMMA on/off , 1- Software Control
=$02						GAMMA_Ctrl_Soft         = $02 ; 0 = GAMMA Table is not Applied, 1 = GAMMA Table is Applied
=$08						GAMMA_DP_SW_VAL         = $08 ; READ ONLY - Actual DIP Switch Value
=$10						HIRES_DP_SW_VAL         = $10 ; READ ONLY - 0 = Hi-Res on BOOT ON, 1 = Hi-Res on BOOT OFF
=$af0003					VKY_RESERVED_01         = $AF0003
=$01						Border_Ctrl_Enable      = $01
=$af0004					BORDER_CTRL_REG         = $AF0004 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$af0005					BORDER_COLOR_B          = $AF0005
=$af0006					BORDER_COLOR_G          = $AF0006
=$af0007					BORDER_COLOR_R          = $AF0007
=$af0008					BORDER_X_SIZE           = $AF0008; X-  Values: 0 - 32 (Default: 32)
=$af0009					BORDER_Y_SIZE           = $AF0009; Y- Values 0 -32 (Default: 32)
=$af000d					BACKGROUND_COLOR_B      = $AF000D ; When in Graphic Mode, if a pixel is "0" then the Background pixel is chosen
=$af000e					BACKGROUND_COLOR_G      = $AF000E
=$af000f					BACKGROUND_COLOR_R      = $AF000F ;
=$af0010					VKY_TXT_CURSOR_CTRL_REG = $AF0010   ;[0]  Enable Text Mode
=$01						Vky_Cursor_Enable       = $01
=$02						Vky_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						Vky_Cursor_Flash_Rate1  = $04
=$08						Vky_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						Vky_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$af0011					VKY_TXT_START_ADD_PTR   = $AF0011   ; This is an offset to change the Starting address of the Text Mode Buffer (in x)
=$af0012					VKY_TXT_CURSOR_CHAR_REG = $AF0012
=$af0013					VKY_TXT_CURSOR_COLR_REG = $AF0013
=$af0014					VKY_TXT_CURSOR_X_REG_L  = $AF0014
=$af0015					VKY_TXT_CURSOR_X_REG_H  = $AF0015
=$af0016					VKY_TXT_CURSOR_Y_REG_L  = $AF0016
=$af0017					VKY_TXT_CURSOR_Y_REG_H  = $AF0017
=$af001b					VKY_LINE_IRQ_CTRL_REG   = $AF001B ;[0] - Enable Line 0, [1] -Enable Line 1
=$af001c					VKY_LINE0_CMP_VALUE_LO  = $AF001C ;Write Only [7:0]
=$af001d					VKY_LINE0_CMP_VALUE_HI  = $AF001D ;Write Only [3:0]
=$af001e					VKY_LINE1_CMP_VALUE_LO  = $AF001E ;Write Only [7:0]
=$af001f					VKY_LINE1_CMP_VALUE_HI  = $AF001F ;Write Only [3:0]
=$af001c					VKY_INFO_CHIP_NUM_L     = $AF001C   ; VErsion
=$af001d					VKY_INFO_CHIP_NUM_H     = $AF001D   ; Version
=$af001e					VKY_INFO_CHIP_VER_L     = $AF001E   ; Sub-Version
=$af001f					VKY_INFO_CHIP_VER_H     = $AF001F   ; Sub-Version
=$af0500					MOUSE_PTR_GRAP0_START    = $AF0500 ; 16 x 16 = 256 Pixels (Grey Scale) 0 = Transparent, 1 = Black , 255 = White
=$af05ff					MOUSE_PTR_GRAP0_END      = $AF05FF ; Pointer 0
=$af0600					MOUSE_PTR_GRAP1_START    = $AF0600 ;
=$af06ff					MOUSE_PTR_GRAP1_END      = $AF06FF ; Pointer 1
=$af0700					MOUSE_PTR_CTRL_REG_L    = $AF0700 ; Bit[0] Enable, Bit[1] = 0  ( 0 = Pointer0, 1 = Pointer1)
=$af0701					MOUSE_PTR_CTRL_REG_H    = $AF0701 ;
=$af0702					MOUSE_PTR_X_POS_L       = $AF0702 ; X Position (0 - 639) (Can only read now) Writing will have no effect
=$af0703					MOUSE_PTR_X_POS_H       = $AF0703 ;
=$af0704					MOUSE_PTR_Y_POS_L       = $AF0704 ; Y Position (0 - 479) (Can only read now) Writing will have no effect
=$af0705					MOUSE_PTR_Y_POS_H       = $AF0705 ;
=$af0706					MOUSE_PTR_BYTE0         = $AF0706 ; Byte 0 of Mouse Packet (you must write 3 Bytes)
=$af0707					MOUSE_PTR_BYTE1         = $AF0707 ; Byte 1 of Mouse Packet (if you don't, then )
=$af0708					MOUSE_PTR_BYTE2         = $AF0708 ; Byte 2 of Mouse Packet (state Machine will be jammed in 1 state)
=$af070b					C256F_MODEL_MAJOR       = $AF070B ;
=$af070c					C256F_MODEL_MINOR       = $AF070C ;
=$af070d					FPGA_DOR                = $AF070D ;
=$af070e					FPGA_MOR                = $AF070E ;
=$af070f					FPGA_YOR                = $AF070F ;
=$af0900					VMEM2CPU_CTRL_REG      = $AF0900  ;
=$01						VMEM2CPU_Clear_FIFO    = $01        ; Setting this to 1 will flush (Reset) the FIFO, clear it after to return to normal function
=$02						VMEM2CPU_Intterupt     = $02        ; This is not implemented because there is not enough Interrupt line on the FMX
=$af0901					VMEM2CPU_Data_Port     = $AF0901    ; This is a Byte Port of the data that you have requested. (Output of the FIFO)
=$af0902					VMEM2CPU_Fifo_Count_LO = $AF0902    ; FIFO Count Lo (number of byte in the FIFO) FIFO Count is 10bits, Count_Bit0 to Count_Bit7 of Count
=$af0903					VMEM2CPU_Fifo_Count_HI = $AF0903    ; FIFO Count Hi, Bit 0 = Count_Bit8, Bit 1 = Count_Bit9
=$80						VMEM2CPU_Fifo_Empty    = $80        ; Bit 7 of VMEM2CPU_Fifo_Count_HI, when 1, the FIFO is empty.
=$af1f40					FG_CHAR_LUT_PTR         = $AF1F40
=$af1f80					BG_CHAR_LUT_PTR		    = $AF1F80
=$af2000					GRPH_LUT0_PTR		    = $AF2000
=$af2400					GRPH_LUT1_PTR		    = $AF2400
=$af2800					GRPH_LUT2_PTR		    = $AF2800
=$af2c00					GRPH_LUT3_PTR		    = $AF2C00
=$af3000					GRPH_LUT4_PTR		    = $AF3000
=$af3400					GRPH_LUT5_PTR		    = $AF3400
=$af3800					GRPH_LUT6_PTR		    = $AF3800
=$af3c00					GRPH_LUT7_PTR		    = $AF3C00
=$af4000					GAMMA_B_LUT_PTR		    = $AF4000
=$af4100					GAMMA_G_LUT_PTR		    = $AF4100
=$af4200					GAMMA_R_LUT_PTR		    = $AF4200
=$af8000					FONT_MEMORY_BANK0       = $AF8000     ;$AF8000 - $AF87FF
=$afa000					CS_TEXT_MEM_PTR         = $AFA000
=$afc000					CS_COLOR_MEM_PTR        = $AFC000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SDMA_def.asm

=$af0420					SDMA_CTRL_REG0           = $AF0420
=$01						SDMA_CTRL0_Enable        = $01
=$02						SDMA_CTRL0_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						SDMA_CTRL0_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						SDMA_CTRL0_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						SDMA_CTRL0_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						SDMA_CTRL0_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$40						SDMA_CTLR0_RSVD          = $40     ;
=$80						SDMA_CTRL0_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0421					SDMA_CTRL_REG1           = $AF0421 ; Write Only - Byte to Write in the Fill Function
=$01						SDMA_CTRL1_IO_Src			   = $01		 ; 1 = Source is an IO Address (ADC, SuperIO, IDE)
=$02						SDMA_CTRL1_IO_Src16		   = $02		 ; 0 = Src 8Bits Transfer / 1= 16Bits Transfer
=$04						SDMA_CTRL1_IO_Dst			   = $04		 ; 1 = Destination is an IO Address (DAC, SuperIO, IDE)
=$08						SDMA_CTRL1_IO_Dst16      = $08     ; 0 = Dst 8bits Transfer / 1= 16bits
=$af0422					SDMA_SRC_ADDY_L         = $AF0422 ; Pointer to the Source of the Data to be stransfered
=$af0423					SDMA_SRC_ADDY_M         = $AF0423 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0424					SDMA_SRC_ADDY_H         = $AF0424
=$af0425					SDMA_DST_ADDY_L         = $AF0425 ; Destination Pointer within Vicky's video memory Range
=$af0426					SDMA_DST_ADDY_M         = $AF0426 ; ($00_0000 - $3F_0000)
=$af0427					SDMA_DST_ADDY_H         = $AF0427
=$af0428					SDMA_SIZE_L             = $AF0428 ; Maximum Value: $40:0000 (4Megs)
=$af0429					SDMA_SIZE_M             = $AF0429
=$af042a					SDMA_SIZE_H             = $AF042A
=$af042b					SDMA_IGNORED            = $AF042B
=$af0428					SDMA_X_SIZE_L           = $AF0428 ; Maximum Value: 65535
=$af0429					SDMA_X_SIZE_H           = $AF0429
=$af042a					SDMA_Y_SIZE_L           = $AF042A ; Maximum Value: 65535
=$af042b					SDMA_Y_SIZE_H           = $AF042B
=$af042c					SDMA_SRC_STRIDE_L       = $AF042C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042d					SDMA_SRC_STRIDE_H       = $AF042D ;
=$af042e					SDMA_DST_STRIDE_L       = $AF042E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af042f					SDMA_DST_STRIDE_H       = $AF042F ;
=$af0430					SDMA_BYTE_2_WRITE       = $AF0430 ; Write Only - Byte to Write in the Fill Function
=$af0430					SDMA_STATUS_REG         = $AF0430 ; Read only
=$01						SDMA_STAT_Size_Err       = $01     ; If Set to 1, Overall Size is Invalid
=$02						SDMA_STAT_Dst_Add_Err    = $02     ; If Set to 1, Destination Address Invalid
=$04						SDMA_STAT_Src_Add_Err    = $04     ; If Set to 1, Source Address Invalid
=$08						SDMA_STAT_TimeOut_Err    = $08     ; will be set to 1 if a Timeout occur when transfering between data from and to VRAM

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_VDMA_def.asm

=$af0400					VDMA_CONTROL_REG        = $AF0400
=$01						VDMA_CTRL_Enable        = $01
=$02						VDMA_CTRL_1D_2D         = $02     ; 0 - 1D (Linear) Transfer , 1 - 2D (Block) Transfer
=$04						VDMA_CTRL_TRF_Fill      = $04     ; 0 - Transfer Src -> Dst, 1 - Fill Destination with "Byte2Write"
=$08						VDMA_CTRL_Int_Enable    = $08     ; Set to 1 to Enable the Generation of Interrupt when the Transfer is over.
=$10						VDMA_CTRL_SysRAM_Src    = $10     ; Set to 1 to Indicate that the Source is the System Ram Memory
=$20						VDMA_CTRL_SysRAM_Dst    = $20     ; Set to 1 to Indicate that the Destination is the System Ram Memory
=$80						VDMA_CTRL_Start_TRF     = $80     ; Set to 1 To Begin Process, Need to Cleared before, you can start another
=$af0401					VDMA_BYTE_2_WRITE       = $AF0401 ; Write Only - Byte to Write in the Fill Function
=$af0401					VDMA_STATUS_REG         = $AF0401 ; Read only
=$01						VDMA_STAT_Size_Err      = $01     ; If Set to 1, Overall Size is Invalid
=$02						VDMA_STAT_Dst_Add_Err   = $02     ; If Set to 1, Destination Address Invalid
=$04						VDMA_STAT_Src_Add_Err   = $04     ; If Set to 1, Source Address Invalid
=$80						VDMA_STAT_VDMA_IPS      = $80     ; If Set to 1, VDMA Transfer in Progress (this Inhibit CPU Access to Mem)
=$af0402					VDMA_SRC_ADDY_L         = $AF0402 ; Pointer to the Source of the Data to be stransfered
=$af0403					VDMA_SRC_ADDY_M         = $AF0403 ; This needs to be within Vicky's Range ($00_0000 - $3F_0000)
=$af0404					VDMA_SRC_ADDY_H         = $AF0404
=$af0405					VDMA_DST_ADDY_L         = $AF0405 ; Destination Pointer within Vicky's video memory Range
=$af0406					VDMA_DST_ADDY_M         = $AF0406 ; ($00_0000 - $3F_0000)
=$af0407					VDMA_DST_ADDY_H         = $AF0407
=$af0408					VDMA_SIZE_L             = $AF0408 ; Maximum Value: $40:0000 (4Megs)
=$af0409					VDMA_SIZE_M             = $AF0409
=$af040a					VDMA_SIZE_H             = $AF040A
=$af040b					VDMA_IGNORED            = $AF040B
=$af0408					VDMA_X_SIZE_L           = $AF0408 ; Maximum Value: 65535
=$af0409					VDMA_X_SIZE_H           = $AF0409
=$af040a					VDMA_Y_SIZE_L           = $AF040A ; Maximum Value: 65535
=$af040b					VDMA_Y_SIZE_H           = $AF040B
=$af040c					VDMA_SRC_STRIDE_L       = $AF040C ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040d					VDMA_SRC_STRIDE_H       = $AF040D ;
=$af040e					VDMA_DST_STRIDE_L       = $AF040E ; Always use an Even Number ( The Engine uses Even Ver of that value)
=$af040f					VDMA_DST_STRIDE_H       = $AF040F ;

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_BITMAP_def.asm

=$01						BM_Enable             = $01
=$00						BM_LUT0               = $00 ;
=$02						BM_LUT1               = $02 ;
=$04						BM_LUT2               = $04 ;
=$06						BM_LUT3               = $06 ;
=$08						BM_LUT4               = $08 ;
=$0a						BM_LUT5               = $0A ;
=$0c						BM_LUT6               = $0C ;
=$0e						BM_LUT7               = $0E ;
=$40						BM_Collision_On       = $40 ;
=$af0100					BM0_CONTROL_REG     = $AF0100
=$af0101					BM0_START_ADDY_L    = $AF0101
=$af0102					BM0_START_ADDY_M    = $AF0102
=$af0103					BM0_START_ADDY_H    = $AF0103
=$af0104					BM0_X_OFFSET        = $AF0104   ; Not Implemented
=$af0105					BM0_Y_OFFSET        = $AF0105   ; Not Implemented
=$af0106					BM0_RESERVED_6      = $AF0106
=$af0107					BM0_RESERVED_7      = $AF0107
=$af0108					BM1_CONTROL_REG     = $AF0108
=$af0109					BM1_START_ADDY_L    = $AF0109
=$af010a					BM1_START_ADDY_M    = $AF010A
=$af010b					BM1_START_ADDY_H    = $AF010B
=$af010c					BM1_X_OFFSET        = $AF010C   ; Not Implemented
=$af010d					BM1_Y_OFFSET        = $AF010D   ; Not Implemented
=$af010e					BM1_RESERVED_6      = $AF010E
=$af010f					BM1_RESERVED_7      = $AF010F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_TILEMAP_def.asm

=$01						TILE_Enable             = $01
=$40						TILE_Collision_On       = $40           ; Enable
=$af0200					TL0_CONTROL_REG         = $AF0200       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0201					TL0_START_ADDY_L        = $AF0201       ; Not USed right now - Starting Address to where is the MAP
=$af0202					TL0_START_ADDY_M        = $AF0202
=$af0203					TL0_START_ADDY_H        = $AF0203
=$af0204					TL0_TOTAL_X_SIZE_L      = $AF0204       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0205					TL0_TOTAL_X_SIZE_H      = $AF0205
=$af0206					TL0_TOTAL_Y_SIZE_L      = $AF0206       ; Size of the Map in Y Tile Count [9:0]
=$af0207					TL0_TOTAL_Y_SIZE_H      = $AF0207
=$af0208					TL0_WINDOW_X_POS_L      = $AF0208       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0209					TL0_WINDOW_X_POS_H      = $AF0209       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af020a					TL0_WINDOW_Y_POS_L      = $AF020A       ; Top Left Corner Position of the TileMAp Window in Y
=$af020b					TL0_WINDOW_Y_POS_H      = $AF020B       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af020c					TL1_CONTROL_REG         = $AF020C       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af020d					TL1_START_ADDY_L        = $AF020D       ; Not USed right now - Starting Address to where is the MAP
=$af020e					TL1_START_ADDY_M        = $AF020E
=$af020f					TL1_START_ADDY_H        = $AF020F
=$af0210					TL1_TOTAL_X_SIZE_L      = $AF0210       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0211					TL1_TOTAL_X_SIZE_H      = $AF0211
=$af0212					TL1_TOTAL_Y_SIZE_L      = $AF0212       ; Size of the Map in Y Tile Count [9:0]
=$af0213					TL1_TOTAL_Y_SIZE_H      = $AF0213
=$af0214					TL1_WINDOW_X_POS_L      = $AF0214       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0215					TL1_WINDOW_X_POS_H      = $AF0215       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0216					TL1_WINDOW_Y_POS_L      = $AF0216       ; Top Left Corner Position of the TileMAp Window in Y
=$af0217					TL1_WINDOW_Y_POS_H      = $AF0217       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0218					TL2_CONTROL_REG         = $AF0218       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0219					TL2_START_ADDY_L        = $AF0219       ; Not USed right now - Starting Address to where is the MAP
=$af021a					TL2_START_ADDY_M        = $AF021A
=$af021b					TL2_START_ADDY_H        = $AF021B
=$af021c					TL2_TOTAL_X_SIZE_L      = $AF021C       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af021d					TL2_TOTAL_X_SIZE_H      = $AF021D
=$af021e					TL2_TOTAL_Y_SIZE_L      = $AF021E       ; Size of the Map in Y Tile Count [9:0]
=$af021f					TL2_TOTAL_Y_SIZE_H      = $AF021F
=$af0220					TL2_WINDOW_X_POS_L      = $AF0220       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af0221					TL2_WINDOW_X_POS_H      = $AF0221       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af0222					TL2_WINDOW_Y_POS_L      = $AF0222       ; Top Left Corner Position of the TileMAp Window in Y
=$af0223					TL2_WINDOW_Y_POS_H      = $AF0223       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0224					TL3_CONTROL_REG         = $AF0224       ; Bit[0] - Enable, Bit[3:1] - LUT Select,
=$af0225					TL3_START_ADDY_L        = $AF0225       ; Not USed right now - Starting Address to where is the MAP
=$af0226					TL3_START_ADDY_M        = $AF0226
=$af0227					TL3_START_ADDY_H        = $AF0227
=$af0228					TL3_TOTAL_X_SIZE_L      = $AF0228       ; Size of the Map in X Tile Count [9:0] (1024 Max)
=$af0229					TL3_TOTAL_X_SIZE_H      = $AF0229
=$af022a					TL3_TOTAL_Y_SIZE_L      = $AF022A       ; Size of the Map in Y Tile Count [9:0]
=$af022b					TL3_TOTAL_Y_SIZE_H      = $AF022B
=$af022c					TL3_WINDOW_X_POS_L      = $AF022C       ; Top Left Corner Position of the TileMAp Window in X + Scroll
=$af022d					TL3_WINDOW_X_POS_H      = $AF022D       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in X
=$af022e					TL3_WINDOW_Y_POS_L      = $AF022E       ; Top Left Corner Position of the TileMAp Window in Y
=$af022f					TL3_WINDOW_Y_POS_H      = $AF022F       ; Direction: [14] Scroll: [13:10] Pos: [9:0] in Y
=$af0280					TILESET0_ADDY_L         = $AF0280   ; Pointer to Tileset 0 [21:0]
=$af0281					TILESET0_ADDY_M         = $AF0281
=$af0282					TILESET0_ADDY_H         = $AF0282
=$af0283					TILESET0_ADDY_CFG       = $AF0283   ; [3] - TileStride256x256
=$af0284					TILESET1_ADDY_L         = $AF0284
=$af0285					TILESET1_ADDY_M         = $AF0285
=$af0286					TILESET1_ADDY_H         = $AF0286
=$af0287					TILESET1_ADDY_CFG       = $AF0287
=$af0288					TILESET2_ADDY_L         = $AF0288
=$af0289					TILESET2_ADDY_M         = $AF0289
=$af028a					TILESET2_ADDY_H         = $AF028A
=$af028b					TILESET2_ADDY_CFG       = $AF028B
=$af028c					TILESET3_ADDY_L         = $AF028C
=$af028d					TILESET3_ADDY_M         = $AF028D
=$af028e					TILESET3_ADDY_H         = $AF028E
=$af028f					TILESET3_ADDY_CFG       = $AF028F
=$af0290					TILESET4_ADDY_L         = $AF0290
=$af0291					TILESET4_ADDY_M         = $AF0291
=$af0292					TILESET4_ADDY_H         = $AF0292
=$af0293					TILESET4_ADDY_CFG       = $AF0293
=$af0294					TILESET5_ADDY_L         = $AF0294
=$af0295					TILESET5_ADDY_M         = $AF0295
=$af0296					TILESET5_ADDY_H         = $AF0296
=$af0297					TILESET5_ADDY_CFG       = $AF0297
=$af0298					TILESET6_ADDY_L         = $AF0298
=$af0299					TILESET6_ADDY_M         = $AF0299
=$af029a					TILESET6_ADDY_H         = $AF029A
=$af029b					TILESET6_ADDY_CFG       = $AF029B
=$af029c					TILESET7_ADDY_L         = $AF029C
=$af029d					TILESET7_ADDY_M         = $AF029D
=$af029e					TILESET7_ADDY_H         = $AF029E
=$af029f					TILESET7_ADDY_CFG       = $AF029F

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_SPRITE_def.asm

=$01						SPRITE_Enable             = $01
=$00						SPRITE_LUT0               = $00 ; This is the LUT that the Sprite will use
=$02						SPRITE_LUT1               = $02
=$04						SPRITE_LUT2               = $04
=$06						SPRITE_LUT3               = $06
=$08						SPRITE_LUT4               = $08
=$0a						SPRITE_LUT5               = $0A
=$0c						SPRITE_LUT6               = $0C
=$0e						SPRITE_LUT7               = $0E
=$00						SPRITE_DEPTH0             = $00
=$10						SPRITE_DEPTH1             = $10
=$20						SPRITE_DEPTH2             = $20
=$30						SPRITE_DEPTH3             = $30
=$40						SPRITE_DEPTH4             = $40
=$50						SPRITE_DEPTH5             = $50
=$60						SPRITE_DEPTH6             = $60
=$80						SPRITE_Collision_On       = $80 ; Enable the Collision Detection
=$af0c00					SP00_CONTROL_REG        = $AF0C00
=$af0c01					SP00_ADDY_PTR_L         = $AF0C01
=$af0c02					SP00_ADDY_PTR_M         = $AF0C02
=$af0c03					SP00_ADDY_PTR_H         = $AF0C03
=$af0c04					SP00_X_POS_L            = $AF0C04
=$af0c05					SP00_X_POS_H            = $AF0C05
=$af0c06					SP00_Y_POS_L            = $AF0C06
=$af0c07					SP00_Y_POS_H            = $AF0C07
=$af0c08					SP01_CONTROL_REG        = $AF0C08
=$af0c09					SP01_ADDY_PTR_L         = $AF0C09
=$af0c0a					SP01_ADDY_PTR_M         = $AF0C0A
=$af0c0b					SP01_ADDY_PTR_H         = $AF0C0B
=$af0c0c					SP01_X_POS_L            = $AF0C0C
=$af0c0d					SP01_X_POS_H            = $AF0C0D
=$af0c0e					SP01_Y_POS_L            = $AF0C0E
=$af0c0f					SP01_Y_POS_H            = $AF0C0F
=$af0c10					SP02_CONTROL_REG        = $AF0C10
=$af0c11					SP02_ADDY_PTR_L         = $AF0C11
=$af0c12					SP02_ADDY_PTR_M         = $AF0C12
=$af0c13					SP02_ADDY_PTR_H         = $AF0C13
=$af0c14					SP02_X_POS_L            = $AF0C14
=$af0c15					SP02_X_POS_H            = $AF0C15
=$af0c16					SP02_Y_POS_L            = $AF0C16
=$af0c17					SP02_Y_POS_H            = $AF0C17
=$af0c18					SP03_CONTROL_REG        = $AF0C18
=$af0c19					SP03_ADDY_PTR_L         = $AF0C19
=$af0c1a					SP03_ADDY_PTR_M         = $AF0C1A
=$af0c1b					SP03_ADDY_PTR_H         = $AF0C1B
=$af0c1c					SP03_X_POS_L            = $AF0C1C
=$af0c1d					SP03_X_POS_H            = $AF0C1D
=$af0c1e					SP03_Y_POS_L            = $AF0C1E
=$af0c1f					SP03_Y_POS_H            = $AF0C1F
=$af0c20					SP04_CONTROL_REG        = $AF0C20
=$af0c21					SP04_ADDY_PTR_L         = $AF0C21
=$af0c22					SP04_ADDY_PTR_M         = $AF0C22
=$af0c23					SP04_ADDY_PTR_H         = $AF0C23
=$af0c24					SP04_X_POS_L            = $AF0C24
=$af0c25					SP04_X_POS_H            = $AF0C25
=$af0c26					SP04_Y_POS_L            = $AF0C26
=$af0c27					SP04_Y_POS_H            = $AF0C27
=$af0c28					SP05_CONTROL_REG        = $AF0C28
=$af0c29					SP05_ADDY_PTR_L         = $AF0C29
=$af0c2a					SP05_ADDY_PTR_M         = $AF0C2A
=$af0c2b					SP05_ADDY_PTR_H         = $AF0C2B
=$af0c2c					SP05_X_POS_L            = $AF0C2C
=$af0c2d					SP05_X_POS_H            = $AF0C2D
=$af0c2e					SP05_Y_POS_L            = $AF0C2E
=$af0c2f					SP05_Y_POS_H            = $AF0C2F
=$af0c30					SP06_CONTROL_REG        = $AF0C30
=$af0c31					SP06_ADDY_PTR_L         = $AF0C31
=$af0c32					SP06_ADDY_PTR_M         = $AF0C32
=$af0c33					SP06_ADDY_PTR_H         = $AF0C33
=$af0c34					SP06_X_POS_L            = $AF0C34
=$af0c35					SP06_X_POS_H            = $AF0C35
=$af0c36					SP06_Y_POS_L            = $AF0C36
=$af0c37					SP06_Y_POS_H            = $AF0C37
=$af0c38					SP07_CONTROL_REG        = $AF0C38
=$af0c39					SP07_ADDY_PTR_L         = $AF0C39
=$af0c3a					SP07_ADDY_PTR_M         = $AF0C3A
=$af0c3b					SP07_ADDY_PTR_H         = $AF0C3B
=$af0c3c					SP07_X_POS_L            = $AF0C3C
=$af0c3d					SP07_X_POS_H            = $AF0C3D
=$af0c3e					SP07_Y_POS_L            = $AF0C3E
=$af0c3f					SP07_Y_POS_H            = $AF0C3F
=$af0c40					SP08_CONTROL_REG        = $AF0C40
=$af0c41					SP08_ADDY_PTR_L         = $AF0C41
=$af0c42					SP08_ADDY_PTR_M         = $AF0C42
=$af0c43					SP08_ADDY_PTR_H         = $AF0C43
=$af0c44					SP08_X_POS_L            = $AF0C44
=$af0c45					SP08_X_POS_H            = $AF0C45
=$af0c46					SP08_Y_POS_L            = $AF0C46
=$af0c47					SP08_Y_POS_H            = $AF0C47
=$af0c48					SP09_CONTROL_REG        = $AF0C48
=$af0c49					SP09_ADDY_PTR_L         = $AF0C49
=$af0c4a					SP09_ADDY_PTR_M         = $AF0C4A
=$af0c4b					SP09_ADDY_PTR_H         = $AF0C4B
=$af0c4c					SP09_X_POS_L            = $AF0C4C
=$af0c4d					SP09_X_POS_H            = $AF0C4D
=$af0c4e					SP09_Y_POS_L            = $AF0C4E
=$af0c4f					SP09_Y_POS_H            = $AF0C4F
=$af0c50					SP10_CONTROL_REG        = $AF0C50
=$af0c51					SP10_ADDY_PTR_L         = $AF0C51
=$af0c52					SP10_ADDY_PTR_M         = $AF0C52
=$af0c53					SP10_ADDY_PTR_H         = $AF0C53
=$af0c54					SP10_X_POS_L            = $AF0C54
=$af0c55					SP10_X_POS_H            = $AF0C55
=$af0c56					SP10_Y_POS_L            = $AF0C56
=$af0c57					SP10_Y_POS_H            = $AF0C57
=$af0c58					SP11_CONTROL_REG        = $AF0C58
=$af0c59					SP11_ADDY_PTR_L         = $AF0C59
=$af0c5a					SP11_ADDY_PTR_M         = $AF0C5A
=$af0c5b					SP11_ADDY_PTR_H         = $AF0C5B
=$af0c5c					SP11_X_POS_L            = $AF0C5C
=$af0c5d					SP11_X_POS_H            = $AF0C5D
=$af0c5e					SP11_Y_POS_L            = $AF0C5E
=$af0c5f					SP11_Y_POS_H            = $AF0C5F
=$af0c60					SP12_CONTROL_REG        = $AF0C60
=$af0c61					SP12_ADDY_PTR_L         = $AF0C61
=$af0c62					SP12_ADDY_PTR_M         = $AF0C62
=$af0c63					SP12_ADDY_PTR_H         = $AF0C63
=$af0c64					SP12_X_POS_L            = $AF0C64
=$af0c65					SP12_X_POS_H            = $AF0C65
=$af0c66					SP12_Y_POS_L            = $AF0C66
=$af0c67					SP12_Y_POS_H            = $AF0C67
=$af0c68					SP13_CONTROL_REG        = $AF0C68
=$af0c69					SP13_ADDY_PTR_L         = $AF0C69
=$af0c6a					SP13_ADDY_PTR_M         = $AF0C6A
=$af0c6b					SP13_ADDY_PTR_H         = $AF0C6B
=$af0c6c					SP13_X_POS_L            = $AF0C6C
=$af0c6d					SP13_X_POS_H            = $AF0C6D
=$af0c6e					SP13_Y_POS_L            = $AF0C6E
=$af0c6f					SP13_Y_POS_H            = $AF0C6F
=$af0c70					SP14_CONTROL_REG        = $AF0C70
=$af0c71					SP14_ADDY_PTR_L         = $AF0C71
=$af0c72					SP14_ADDY_PTR_M         = $AF0C72
=$af0c73					SP14_ADDY_PTR_H         = $AF0C73
=$af0c74					SP14_X_POS_L            = $AF0C74
=$af0c75					SP14_X_POS_H            = $AF0C75
=$af0c76					SP14_Y_POS_L            = $AF0C76
=$af0c77					SP14_Y_POS_H            = $AF0C77
=$af0c78					SP15_CONTROL_REG        = $AF0C78
=$af0c79					SP15_ADDY_PTR_L         = $AF0C79
=$af0c7a					SP15_ADDY_PTR_M         = $AF0C7A
=$af0c7b					SP15_ADDY_PTR_H         = $AF0C7B
=$af0c7c					SP15_X_POS_L            = $AF0C7C
=$af0c7d					SP15_X_POS_H            = $AF0C7D
=$af0c7e					SP15_Y_POS_L            = $AF0C7E
=$af0c7f					SP15_Y_POS_H            = $AF0C7F
=$af0c80					SP16_CONTROL_REG        = $AF0C80
=$af0c81					SP16_ADDY_PTR_L         = $AF0C81
=$af0c82					SP16_ADDY_PTR_M         = $AF0C82
=$af0c83					SP16_ADDY_PTR_H         = $AF0C83
=$af0c84					SP16_X_POS_L            = $AF0C84
=$af0c85					SP16_X_POS_H            = $AF0C85
=$af0c86					SP16_Y_POS_L            = $AF0C86
=$af0c87					SP16_Y_POS_H            = $AF0C87
=$af0c88					SP17_CONTROL_REG        = $AF0C88
=$af0c89					SP17_ADDY_PTR_L         = $AF0C89
=$af0c8a					SP17_ADDY_PTR_M         = $AF0C8A
=$af0c8b					SP17_ADDY_PTR_H         = $AF0C8B
=$af0c8c					SP17_X_POS_L            = $AF0C8C
=$af0c8d					SP17_X_POS_H            = $AF0C8D
=$af0c8e					SP17_Y_POS_L            = $AF0C8E
=$af0c8f					SP17_Y_POS_H            = $AF0C8F
=$af0c90					SP18_CONTROL_REG        = $AF0C90
=$af0c91					SP18_ADDY_PTR_L         = $AF0C91
=$af0c92					SP18_ADDY_PTR_M         = $AF0C92
=$af0c93					SP18_ADDY_PTR_H         = $AF0C93
=$af0c94					SP18_X_POS_L            = $AF0C94
=$af0c95					SP18_X_POS_H            = $AF0C95
=$af0c96					SP18_Y_POS_L            = $AF0C96
=$af0c97					SP18_Y_POS_H            = $AF0C97
=$af0c98					SP19_CONTROL_REG        = $AF0C98
=$af0c99					SP19_ADDY_PTR_L         = $AF0C99
=$af0c9a					SP19_ADDY_PTR_M         = $AF0C9A
=$af0c9b					SP19_ADDY_PTR_H         = $AF0C9B
=$af0c9c					SP19_X_POS_L            = $AF0C9C
=$af0c9d					SP19_X_POS_H            = $AF0C9D
=$af0c9e					SP19_Y_POS_L            = $AF0C9E
=$af0c9f					SP19_Y_POS_H            = $AF0C9F
=$af0ca0					SP20_CONTROL_REG        = $AF0CA0
=$af0ca1					SP20_ADDY_PTR_L         = $AF0CA1
=$af0ca2					SP20_ADDY_PTR_M         = $AF0CA2
=$af0ca3					SP20_ADDY_PTR_H         = $AF0CA3
=$af0ca4					SP20_X_POS_L            = $AF0CA4
=$af0ca5					SP20_X_POS_H            = $AF0CA5
=$af0ca6					SP20_Y_POS_L            = $AF0CA6
=$af0ca7					SP20_Y_POS_H            = $AF0CA7
=$af0ca8					SP21_CONTROL_REG        = $AF0CA8
=$af0ca9					SP21_ADDY_PTR_L         = $AF0CA9
=$af0caa					SP21_ADDY_PTR_M         = $AF0CAA
=$af0cab					SP21_ADDY_PTR_H         = $AF0CAB
=$af0cac					SP21_X_POS_L            = $AF0CAC
=$af0cad					SP21_X_POS_H            = $AF0CAD
=$af0cae					SP21_Y_POS_L            = $AF0CAE
=$af0caf					SP21_Y_POS_H            = $AF0CAF
=$af0cb0					SP22_CONTROL_REG        = $AF0CB0
=$af0cb1					SP22_ADDY_PTR_L         = $AF0CB1
=$af0cb2					SP22_ADDY_PTR_M         = $AF0CB2
=$af0cb3					SP22_ADDY_PTR_H         = $AF0CB3
=$af0cb4					SP22_X_POS_L            = $AF0CB4
=$af0cb5					SP22_X_POS_H            = $AF0CB5
=$af0cb6					SP22_Y_POS_L            = $AF0CB6
=$af0cb7					SP22_Y_POS_H            = $AF0CB7
=$af0cb8					SP23_CONTROL_REG        = $AF0CB8
=$af0cb9					SP23_ADDY_PTR_L         = $AF0CB9
=$af0cba					SP23_ADDY_PTR_M         = $AF0CBA
=$af0cbb					SP23_ADDY_PTR_H         = $AF0CBB
=$af0cbc					SP23_X_POS_L            = $AF0CBC
=$af0cbd					SP23_X_POS_H            = $AF0CBD
=$af0cbe					SP23_Y_POS_L            = $AF0CBE
=$af0cbf					SP23_Y_POS_H            = $AF0CBF
=$af0cc0					SP24_CONTROL_REG        = $AF0CC0
=$af0cc1					SP24_ADDY_PTR_L         = $AF0CC1
=$af0cc2					SP24_ADDY_PTR_M         = $AF0CC2
=$af0cc3					SP24_ADDY_PTR_H         = $AF0CC3
=$af0cc4					SP24_X_POS_L            = $AF0CC4
=$af0cc5					SP24_X_POS_H            = $AF0CC5
=$af0cc6					SP24_Y_POS_L            = $AF0CC6
=$af0cc7					SP24_Y_POS_H            = $AF0CC7
=$af0cc8					SP25_CONTROL_REG        = $AF0CC8
=$af0cc9					SP25_ADDY_PTR_L         = $AF0CC9
=$af0cca					SP25_ADDY_PTR_M         = $AF0CCA
=$af0ccb					SP25_ADDY_PTR_H         = $AF0CCB
=$af0ccc					SP25_X_POS_L            = $AF0CCC
=$af0ccd					SP25_X_POS_H            = $AF0CCD
=$af0cce					SP25_Y_POS_L            = $AF0CCE
=$af0ccf					SP25_Y_POS_H            = $AF0CCF
=$af0cd0					SP26_CONTROL_REG        = $AF0CD0
=$af0cd1					SP26_ADDY_PTR_L         = $AF0CD1
=$af0cd2					SP26_ADDY_PTR_M         = $AF0CD2
=$af0cd3					SP26_ADDY_PTR_H         = $AF0CD3
=$af0cd4					SP26_X_POS_L            = $AF0CD4
=$af0cd5					SP26_X_POS_H            = $AF0CD5
=$af0cd6					SP26_Y_POS_L            = $AF0CD6
=$af0cd7					SP26_Y_POS_H            = $AF0CD7
=$af0cd8					SP27_CONTROL_REG        = $AF0CD8
=$af0cd9					SP27_ADDY_PTR_L         = $AF0CD9
=$af0cda					SP27_ADDY_PTR_M         = $AF0CDA
=$af0cdb					SP27_ADDY_PTR_H         = $AF0CDB
=$af0cdc					SP27_X_POS_L            = $AF0CDC
=$af0cdd					SP27_X_POS_H            = $AF0CDD
=$af0cde					SP27_Y_POS_L            = $AF0CDE
=$af0cdf					SP27_Y_POS_H            = $AF0CDF
=$af0ce0					SP28_CONTROL_REG        = $AF0CE0
=$af0ce1					SP28_ADDY_PTR_L         = $AF0CE1
=$af0ce2					SP28_ADDY_PTR_M         = $AF0CE2
=$af0ce3					SP28_ADDY_PTR_H         = $AF0CE3
=$af0ce4					SP28_X_POS_L            = $AF0CE4
=$af0ce5					SP28_X_POS_H            = $AF0CE5
=$af0ce6					SP28_Y_POS_L            = $AF0CE6
=$af0ce7					SP28_Y_POS_H            = $AF0CE7
=$af0ce8					SP29_CONTROL_REG        = $AF0CE8
=$af0ce9					SP29_ADDY_PTR_L         = $AF0CE9
=$af0cea					SP29_ADDY_PTR_M         = $AF0CEA
=$af0ceb					SP29_ADDY_PTR_H         = $AF0CEB
=$af0cec					SP29_X_POS_L            = $AF0CEC
=$af0ced					SP29_X_POS_H            = $AF0CED
=$af0cee					SP29_Y_POS_L            = $AF0CEE
=$af0cef					SP29_Y_POS_H            = $AF0CEF
=$af0cf0					SP30_CONTROL_REG        = $AF0CF0
=$af0cf1					SP30_ADDY_PTR_L         = $AF0CF1
=$af0cf2					SP30_ADDY_PTR_M         = $AF0CF2
=$af0cf3					SP30_ADDY_PTR_H         = $AF0CF3
=$af0cf4					SP30_X_POS_L            = $AF0CF4
=$af0cf5					SP30_X_POS_H            = $AF0CF5
=$af0cf6					SP30_Y_POS_L            = $AF0CF6
=$af0cf7					SP30_Y_POS_H            = $AF0CF7
=$af0cf8					SP31_CONTROL_REG        = $AF0CF8
=$af0cf9					SP31_ADDY_PTR_L         = $AF0CF9
=$af0cfa					SP31_ADDY_PTR_M         = $AF0CFA
=$af0cfb					SP31_ADDY_PTR_H         = $AF0CFB
=$af0cfc					SP31_X_POS_L            = $AF0CFC
=$af0cfd					SP31_X_POS_H            = $AF0CFD
=$af0cfe					SP31_Y_POS_L            = $AF0CFE
=$af0cff					SP31_Y_POS_H            = $AF0CFF
=$af0d00					SP32_CONTROL_REG        = $AF0D00
=$af0d01					SP32_ADDY_PTR_L         = $AF0D01
=$af0d02					SP32_ADDY_PTR_M         = $AF0D02
=$af0d03					SP32_ADDY_PTR_H         = $AF0D03
=$af0d04					SP32_X_POS_L            = $AF0D04
=$af0d05					SP32_X_POS_H            = $AF0D05
=$af0d06					SP32_Y_POS_L            = $AF0D06
=$af0d07					SP32_Y_POS_H            = $AF0D07
=$af0d08					SP33_CONTROL_REG        = $AF0D08
=$af0d09					SP33_ADDY_PTR_L         = $AF0D09
=$af0d0a					SP33_ADDY_PTR_M         = $AF0D0A
=$af0d0b					SP33_ADDY_PTR_H         = $AF0D0B
=$af0d0c					SP33_X_POS_L            = $AF0D0C
=$af0d0d					SP33_X_POS_H            = $AF0D0D
=$af0d0e					SP33_Y_POS_L            = $AF0D0E
=$af0d0f					SP33_Y_POS_H            = $AF0D0F
=$af0d10					SP34_CONTROL_REG        = $AF0D10
=$af0d11					SP34_ADDY_PTR_L         = $AF0D11
=$af0d12					SP34_ADDY_PTR_M         = $AF0D12
=$af0d13					SP34_ADDY_PTR_H         = $AF0D13
=$af0d14					SP34_X_POS_L            = $AF0D14
=$af0d15					SP34_X_POS_H            = $AF0D15
=$af0d16					SP34_Y_POS_L            = $AF0D16
=$af0d17					SP34_Y_POS_H            = $AF0D17
=$af0d18					SP35_CONTROL_REG        = $AF0D18
=$af0d19					SP35_ADDY_PTR_L         = $AF0D19
=$af0d1a					SP35_ADDY_PTR_M         = $AF0D1A
=$af0d1b					SP35_ADDY_PTR_H         = $AF0D1B
=$af0d1c					SP35_X_POS_L            = $AF0D1C
=$af0d1d					SP35_X_POS_H            = $AF0D1D
=$af0d1e					SP35_Y_POS_L            = $AF0D1E
=$af0d1f					SP35_Y_POS_H            = $AF0D1F
=$af0d20					SP36_CONTROL_REG        = $AF0D20
=$af0d21					SP36_ADDY_PTR_L         = $AF0D21
=$af0d22					SP36_ADDY_PTR_M         = $AF0D22
=$af0d23					SP36_ADDY_PTR_H         = $AF0D23
=$af0d24					SP36_X_POS_L            = $AF0D24
=$af0d25					SP36_X_POS_H            = $AF0D25
=$af0d26					SP36_Y_POS_L            = $AF0D26
=$af0d27					SP36_Y_POS_H            = $AF0D27
=$af0d28					SP37_CONTROL_REG        = $AF0D28
=$af0d29					SP37_ADDY_PTR_L         = $AF0D29
=$af0d2a					SP37_ADDY_PTR_M         = $AF0D2A
=$af0d2b					SP37_ADDY_PTR_H         = $AF0D2B
=$af0d2c					SP37_X_POS_L            = $AF0D2C
=$af0d2d					SP37_X_POS_H            = $AF0D2D
=$af0d2e					SP37_Y_POS_L            = $AF0D2E
=$af0d2f					SP37_Y_POS_H            = $AF0D2F
=$af0d30					SP38_CONTROL_REG        = $AF0D30
=$af0d31					SP38_ADDY_PTR_L         = $AF0D31
=$af0d32					SP38_ADDY_PTR_M         = $AF0D32
=$af0d33					SP38_ADDY_PTR_H         = $AF0D33
=$af0d34					SP38_X_POS_L            = $AF0D34
=$af0d35					SP38_X_POS_H            = $AF0D35
=$af0d36					SP38_Y_POS_L            = $AF0D36
=$af0d37					SP38_Y_POS_H            = $AF0D37
=$af0d38					SP39_CONTROL_REG        = $AF0D38
=$af0d39					SP39_ADDY_PTR_L         = $AF0D39
=$af0d3a					SP39_ADDY_PTR_M         = $AF0D3A
=$af0d3b					SP39_ADDY_PTR_H         = $AF0D3B
=$af0d3c					SP39_X_POS_L            = $AF0D3C
=$af0d3d					SP39_X_POS_H            = $AF0D3D
=$af0d3e					SP39_Y_POS_L            = $AF0D3E
=$af0d3f					SP39_Y_POS_H            = $AF0D3F
=$af0d40					SP40_CONTROL_REG        = $AF0D40
=$af0d41					SP40_ADDY_PTR_L         = $AF0D41
=$af0d42					SP40_ADDY_PTR_M         = $AF0D42
=$af0d43					SP40_ADDY_PTR_H         = $AF0D43
=$af0d44					SP40_X_POS_L            = $AF0D44
=$af0d45					SP40_X_POS_H            = $AF0D45
=$af0d46					SP40_Y_POS_L            = $AF0D46
=$af0d47					SP40_Y_POS_H            = $AF0D47
=$af0d48					SP41_CONTROL_REG        = $AF0D48
=$af0d49					SP41_ADDY_PTR_L         = $AF0D49
=$af0d4a					SP41_ADDY_PTR_M         = $AF0D4A
=$af0d4b					SP41_ADDY_PTR_H         = $AF0D4B
=$af0d4c					SP41_X_POS_L            = $AF0D4C
=$af0d4d					SP41_X_POS_H            = $AF0D4D
=$af0d4e					SP41_Y_POS_L            = $AF0D4E
=$af0d4f					SP41_Y_POS_H            = $AF0D4F
=$af0d50					SP42_CONTROL_REG        = $AF0D50
=$af0d51					SP42_ADDY_PTR_L         = $AF0D51
=$af0d52					SP42_ADDY_PTR_M         = $AF0D52
=$af0d53					SP42_ADDY_PTR_H         = $AF0D53
=$af0d54					SP42_X_POS_L            = $AF0D54
=$af0d55					SP42_X_POS_H            = $AF0D55
=$af0d56					SP42_Y_POS_L            = $AF0D56
=$af0d57					SP42_Y_POS_H            = $AF0D57
=$af0d58					SP43_CONTROL_REG        = $AF0D58
=$af0d59					SP43_ADDY_PTR_L         = $AF0D59
=$af0d5a					SP43_ADDY_PTR_M         = $AF0D5A
=$af0d5b					SP43_ADDY_PTR_H         = $AF0D5B
=$af0d5c					SP43_X_POS_L            = $AF0D5C
=$af0d5d					SP43_X_POS_H            = $AF0D5D
=$af0d5e					SP43_Y_POS_L            = $AF0D5E
=$af0d5f					SP43_Y_POS_H            = $AF0D5F
=$af0d60					SP44_CONTROL_REG        = $AF0D60
=$af0d61					SP44_ADDY_PTR_L         = $AF0D61
=$af0d62					SP44_ADDY_PTR_M         = $AF0D62
=$af0d63					SP44_ADDY_PTR_H         = $AF0D63
=$af0d64					SP44_X_POS_L            = $AF0D64
=$af0d65					SP44_X_POS_H            = $AF0D65
=$af0d66					SP44_Y_POS_L            = $AF0D66
=$af0d67					SP44_Y_POS_H            = $AF0D67
=$af0d68					SP45_CONTROL_REG        = $AF0D68
=$af0d69					SP45_ADDY_PTR_L         = $AF0D69
=$af0d6a					SP45_ADDY_PTR_M         = $AF0D6A
=$af0d6b					SP45_ADDY_PTR_H         = $AF0D6B
=$af0d6c					SP45_X_POS_L            = $AF0D6C
=$af0d6d					SP45_X_POS_H            = $AF0D6D
=$af0d6e					SP45_Y_POS_L            = $AF0D6E
=$af0d6f					SP45_Y_POS_H            = $AF0D6F
=$af0d70					SP46_CONTROL_REG        = $AF0D70
=$af0d71					SP46_ADDY_PTR_L         = $AF0D71
=$af0d72					SP46_ADDY_PTR_M         = $AF0D72
=$af0d73					SP46_ADDY_PTR_H         = $AF0D73
=$af0d74					SP46_X_POS_L            = $AF0D74
=$af0d75					SP46_X_POS_H            = $AF0D75
=$af0d76					SP46_Y_POS_L            = $AF0D76
=$af0d77					SP46_Y_POS_H            = $AF0D77
=$af0d78					SP47_CONTROL_REG        = $AF0D78
=$af0d79					SP47_ADDY_PTR_L         = $AF0D79
=$af0d7a					SP47_ADDY_PTR_M         = $AF0D7A
=$af0d7b					SP47_ADDY_PTR_H         = $AF0D7B
=$af0d7c					SP47_X_POS_L            = $AF0D7C
=$af0d7d					SP47_X_POS_H            = $AF0D7D
=$af0d7e					SP47_Y_POS_L            = $AF0D7E
=$af0d7f					SP47_Y_POS_H            = $AF0D7F
=$af0d80					SP48_CONTROL_REG        = $AF0D80
=$af0d81					SP48_ADDY_PTR_L         = $AF0D81
=$af0d82					SP48_ADDY_PTR_M         = $AF0D82
=$af0d83					SP48_ADDY_PTR_H         = $AF0D83
=$af0d84					SP48_X_POS_L            = $AF0D84
=$af0d85					SP48_X_POS_H            = $AF0D85
=$af0d86					SP48_Y_POS_L            = $AF0D86
=$af0d87					SP48_Y_POS_H            = $AF0D87
=$af0d88					SP49_CONTROL_REG        = $AF0D88
=$af0d89					SP49_ADDY_PTR_L         = $AF0D89
=$af0d8a					SP49_ADDY_PTR_M         = $AF0D8A
=$af0d8b					SP49_ADDY_PTR_H         = $AF0D8B
=$af0d8c					SP49_X_POS_L            = $AF0D8C
=$af0d8d					SP49_X_POS_H            = $AF0D8D
=$af0d8e					SP49_Y_POS_L            = $AF0D8E
=$af0d8f					SP49_Y_POS_H            = $AF0D8F
=$af0d90					SP50_CONTROL_REG        = $AF0D90
=$af0d91					SP50_ADDY_PTR_L         = $AF0D91
=$af0d92					SP50_ADDY_PTR_M         = $AF0D92
=$af0d93					SP50_ADDY_PTR_H         = $AF0D93
=$af0d94					SP50_X_POS_L            = $AF0D94
=$af0d95					SP50_X_POS_H            = $AF0D95
=$af0d96					SP50_Y_POS_L            = $AF0D96
=$af0d97					SP50_Y_POS_H            = $AF0D97
=$af0d98					SP51_CONTROL_REG        = $AF0D98
=$af0d99					SP51_ADDY_PTR_L         = $AF0D99
=$af0d9a					SP51_ADDY_PTR_M         = $AF0D9A
=$af0d9b					SP51_ADDY_PTR_H         = $AF0D9B
=$af0d9c					SP51_X_POS_L            = $AF0D9C
=$af0d9d					SP51_X_POS_H            = $AF0D9D
=$af0d9e					SP51_Y_POS_L            = $AF0D9E
=$af0d9f					SP51_Y_POS_H            = $AF0D9F
=$af0da0					SP52_CONTROL_REG        = $AF0DA0
=$af0da1					SP52_ADDY_PTR_L         = $AF0DA1
=$af0da2					SP52_ADDY_PTR_M         = $AF0DA2
=$af0da3					SP52_ADDY_PTR_H         = $AF0DA3
=$af0da4					SP52_X_POS_L            = $AF0DA4
=$af0da5					SP52_X_POS_H            = $AF0DA5
=$af0da6					SP52_Y_POS_L            = $AF0DA6
=$af0da7					SP52_Y_POS_H            = $AF0DA7
=$af0da8					SP53_CONTROL_REG        = $AF0DA8
=$af0da9					SP53_ADDY_PTR_L         = $AF0DA9
=$af0daa					SP53_ADDY_PTR_M         = $AF0DAA
=$af0dab					SP53_ADDY_PTR_H         = $AF0DAB
=$af0dac					SP53_X_POS_L            = $AF0DAC
=$af0dad					SP53_X_POS_H            = $AF0DAD
=$af0dae					SP53_Y_POS_L            = $AF0DAE
=$af0daf					SP53_Y_POS_H            = $AF0DAF
=$af0db0					SP54_CONTROL_REG        = $AF0DB0
=$af0db1					SP54_ADDY_PTR_L         = $AF0DB1
=$af0db2					SP54_ADDY_PTR_M         = $AF0DB2
=$af0db3					SP54_ADDY_PTR_H         = $AF0DB3
=$af0db4					SP54_X_POS_L            = $AF0DB4
=$af0db5					SP54_X_POS_H            = $AF0DB5
=$af0db6					SP54_Y_POS_L            = $AF0DB6
=$af0db7					SP54_Y_POS_H            = $AF0DB7
=$af0db8					SP55_CONTROL_REG        = $AF0DB8
=$af0db9					SP55_ADDY_PTR_L         = $AF0DB9
=$af0dba					SP55_ADDY_PTR_M         = $AF0DBA
=$af0dbb					SP55_ADDY_PTR_H         = $AF0DBB
=$af0dbc					SP55_X_POS_L            = $AF0DBC
=$af0dbd					SP55_X_POS_H            = $AF0DBD
=$af0dbe					SP55_Y_POS_L            = $AF0DBE
=$af0dbf					SP55_Y_POS_H            = $AF0DBF
=$af0dc0					SP56_CONTROL_REG        = $AF0DC0
=$af0dc1					SP56_ADDY_PTR_L         = $AF0DC1
=$af0dc2					SP56_ADDY_PTR_M         = $AF0DC2
=$af0dc3					SP56_ADDY_PTR_H         = $AF0DC3
=$af0dc4					SP56_X_POS_L            = $AF0DC4
=$af0dc5					SP56_X_POS_H            = $AF0DC5
=$af0dc6					SP56_Y_POS_L            = $AF0DC6
=$af0dc7					SP56_Y_POS_H            = $AF0DC7
=$af0dc8					SP57_CONTROL_REG        = $AF0DC8
=$af0dc9					SP57_ADDY_PTR_L         = $AF0DC9
=$af0dca					SP57_ADDY_PTR_M         = $AF0DCA
=$af0dcb					SP57_ADDY_PTR_H         = $AF0DCB
=$af0dcc					SP57_X_POS_L            = $AF0DCC
=$af0dcd					SP57_X_POS_H            = $AF0DCD
=$af0dce					SP57_Y_POS_L            = $AF0DCE
=$af0dcf					SP57_Y_POS_H            = $AF0DCF
=$af0dd0					SP58_CONTROL_REG        = $AF0DD0
=$af0dd1					SP58_ADDY_PTR_L         = $AF0DD1
=$af0dd2					SP58_ADDY_PTR_M         = $AF0DD2
=$af0dd3					SP58_ADDY_PTR_H         = $AF0DD3
=$af0dd4					SP58_X_POS_L            = $AF0DD4
=$af0dd5					SP58_X_POS_H            = $AF0DD5
=$af0dd6					SP58_Y_POS_L            = $AF0DD6
=$af0dd7					SP58_Y_POS_H            = $AF0DD7
=$af0dd8					SP59_CONTROL_REG        = $AF0DD8
=$af0dd9					SP59_ADDY_PTR_L         = $AF0DD9
=$af0dda					SP59_ADDY_PTR_M         = $AF0DDA
=$af0ddb					SP59_ADDY_PTR_H         = $AF0DDB
=$af0ddc					SP59_X_POS_L            = $AF0DDC
=$af0ddd					SP59_X_POS_H            = $AF0DDD
=$af0dde					SP59_Y_POS_L            = $AF0DDE
=$af0ddf					SP59_Y_POS_H            = $AF0DDF
=$af0de0					SP60_CONTROL_REG        = $AF0DE0
=$af0de1					SP60_ADDY_PTR_L         = $AF0DE1
=$af0de2					SP60_ADDY_PTR_M         = $AF0DE2
=$af0de3					SP60_ADDY_PTR_H         = $AF0DE3
=$af0de4					SP60_X_POS_L            = $AF0DE4
=$af0de5					SP60_X_POS_H            = $AF0DE5
=$af0de6					SP60_Y_POS_L            = $AF0DE6
=$af0de7					SP60_Y_POS_H            = $AF0DE7
=$af0de8					SP61_CONTROL_REG        = $AF0DE8
=$af0de9					SP61_ADDY_PTR_L         = $AF0DE9
=$af0dea					SP61_ADDY_PTR_M         = $AF0DEA
=$af0deb					SP61_ADDY_PTR_H         = $AF0DEB
=$af0dec					SP61_X_POS_L            = $AF0DEC
=$af0ded					SP61_X_POS_H            = $AF0DED
=$af0dee					SP61_Y_POS_L            = $AF0DEE
=$af0def					SP61_Y_POS_H            = $AF0DEF
=$af0df0					SP62_CONTROL_REG        = $AF0DF0
=$af0df1					SP62_ADDY_PTR_L         = $AF0DF1
=$af0df2					SP62_ADDY_PTR_M         = $AF0DF2
=$af0df3					SP62_ADDY_PTR_H         = $AF0DF3
=$af0df4					SP62_X_POS_L            = $AF0DF4
=$af0df5					SP62_X_POS_H            = $AF0DF5
=$af0df6					SP62_Y_POS_L            = $AF0DF6
=$af0df7					SP62_Y_POS_H            = $AF0DF7
=$af0df8					SP63_CONTROL_REG        = $AF0DF8
=$af0df9					SP63_ADDY_PTR_L         = $AF0DF9
=$af0dfa					SP63_ADDY_PTR_M         = $AF0DFA
=$af0dfb					SP63_ADDY_PTR_H         = $AF0DFB
=$af0dfc					SP63_X_POS_L            = $AF0DFC
=$af0dfd					SP63_X_POS_H            = $AF0DFD
=$af0dfe					SP63_Y_POS_L            = $AF0DFE
=$af0dff					SP63_Y_POS_H            = $AF0DFF

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/VKYII_CFP9553_COLLISION_def.asm

=$0001						COL_STAT_SP0 = $0001
=$0002						COL_STAT_SP1 = $0002
=$0004						COL_STAT_SP2 = $0004
=$0008						COL_STAT_SP3 = $0008
=$0010						COL_STAT_SP4 = $0010
=$0020						COL_STAT_SP5 = $0020
=$0040						COL_STAT_SP6 = $0040
=$0080						COL_STAT_BM0 = $0080
=$0100						COL_STAT_BM1 = $0100
=$0200						COL_STAT_COL = $0200
=$0400						COL_STAT_TL0 = $0400
=$0800						COL_STAT_TL1 = $0800
=$1000						COL_STAT_TL2 = $1000
=$2000						COL_STAT_TL3 = $2000
=$4000						COL_RESERVE0 = $4000    ; Reserved
=$8000						COL_RESERVE1 = $8000    ; Reserved
=$af0300					COLLISION_SPRITE_L0_L   = $AF0300
=$af0301					COLLISION_SPRITE_L0_H   = $AF0301
=$af0302					COLLISION_SPRITE_L1_L   = $AF0302
=$af0303					COLLISION_SPRITE_L1_H   = $AF0303
=$af0304					COLLISION_SPRITE_L2_L   = $AF0304
=$af0305					COLLISION_SPRITE_L2_H   = $AF0305
=$af0306					COLLISION_SPRITE_L3_L   = $AF0306
=$af0307					COLLISION_SPRITE_L3_H   = $AF0307
=$af0308					COLLISION_SPRITE_L4_L   = $AF0308
=$af0309					COLLISION_SPRITE_L4_H   = $AF0309
=$af030a					COLLISION_SPRITE_L5_L   = $AF030A
=$af030b					COLLISION_SPRITE_L5_H   = $AF030B
=$af030c					COLLISION_SPRITE_L6_L   = $AF030C
=$af030d					COLLISION_SPRITE_L6_H   = $AF030D
=$af030e					COLLISION_BITMAP_L0_L   = $AF030E
=$af030f					COLLISION_BITMAP_L0_H   = $AF030F
=$af0310					COLLISION_BITMAP_L1_L   = $AF0310
=$af0311					COLLISION_BITMAP_L1_H   = $AF0311
=$af0312					COLLISION_COLMAP_L0_L   = $AF0312 ; Collision Bitmap - Not Implemented yet
=$af0313					COLLISION_COLMAP_L0_H   = $AF0313
=$af0314					COLLISION_TILEMAP_L0_L  = $AF0314
=$af0315					COLLISION_TILEMAP_L0_H  = $AF0315
=$af0316					COLLISION_TILEMAP_L1_L  = $AF0316
=$af0317					COLLISION_TILEMAP_L1_H  = $AF0317
=$af0318					COLLISION_TILEMAP_L2_L  = $AF0318
=$af0319					COLLISION_TILEMAP_L2_H  = $AF0319
=$af031a					COLLISION_TILEMAP_L3_L  = $AF031A
=$af031b					COLLISION_TILEMAP_L3_H  = $AF031B
=$af031c					COLLISION_PXL_VALUE_SP  = $AF031C
=$af031d					COLLISION_SPRITE_NUMBER = $AF031D
=$af031e					COLLISION_PXL_VALUE_BM0 = $AF031E
=$af031f					COLLISION_PXL_VALUE_BM1 = $AF031F
=$af0320					COLLISION_PXL_VALUE_COL = $AF0320
=$af0321					COLLISION_PXL_VALUE_TL0 = $AF0321
=$af0322					COLLISION_PXL_VALUE_TL1 = $AF0322
=$af0323					COLLISION_PXL_VALUE_TL2 = $AF0323
=$af0324					COLLISION_PXL_VALUE_TL3 = $AF0324
=$af0326					COLLISION_SPRITE_COORD_X_LO = $AF0326
=$af0327					COLLISION_SPRITE_COORD_X_HI = $AF0327
=$af0328					COLLISION_BITMAP_COORD_X_LO = $AF0328
=$af0329					COLLISION_BITMAP_COORD_X_HI = $AF0329
=$af032a					COLLISION_TILES_COORD_X_LO  = $AF032A
=$af032b					COLLISION_TILES_COORD_X_HI  = $AF032B
=$af032c					COLLISION_COORD_Y_LO        = $AF032C
=$af032d					COLLISION_COORD_Y_HI        = $AF032D

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C100_ESID_def.asm

=$ae0000					ESID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					ESID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					ESID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					ESID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					ESID_ID_CARD_ID_Lo      = $AE0012    ; $9172 - C100-ESID
=$ae0013					ESID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					ESID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					ESID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					ESID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					ESID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					ESID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					ESID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					ESID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					ESID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					ESID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					ESID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					ESID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					ESID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$aed000					ESID_SIDL_V1_FREQ_LO    = $AED000 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed001					ESID_SIDL_V1_FREQ_HI    = $AED001 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed002					ESID_SIDL_V1_PW_LO      = $AED002 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed003					ESID_SIDL_V1_PW_HI      = $AED003 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed004					ESID_SIDL_V1_CTRL       = $AED004 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed005					ESID_SIDL_V1_ATCK_DECY  = $AED005 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed006					ESID_SIDL_V1_SSTN_RLSE  = $AED006 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed007					ESID_SIDL_V2_FREQ_LO    = $AED007 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed008					ESID_SIDL_V2_FREQ_HI    = $AED008 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed009					ESID_SIDL_V2_PW_LO      = $AED009 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed00a					ESID_SIDL_V2_PW_HI      = $AED00A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed00b					ESID_SIDL_V2_CTRL       = $AED00B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed00c					ESID_SIDL_V2_ATCK_DECY  = $AED00C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed00d					ESID_SIDL_V2_SSTN_RLSE  = $AED00D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed00e					ESID_SIDL_V3_FREQ_LO    = $AED00E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed00f					ESID_SIDL_V3_FREQ_HI    = $AED00F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed010					ESID_SIDL_V3_PW_LO      = $AED010 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed011					ESID_SIDL_V3_PW_HI      = $AED011 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed012					ESID_SIDL_V3_CTRL       = $AED012 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed013					ESID_SIDL_V3_ATCK_DECY  = $AED013 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed014					ESID_SIDL_V3_SSTN_RLSE  = $AED014 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed015					ESID_SIDL_FC_LO         = $AED015 ;SID - L - Filter (Write Only) - FC LOW
=$aed016					ESID_SIDL_FC_HI         = $AED016 ;SID - L - Filter (Write Only) - FC HI
=$aed017					ESID_SIDL_RES_FILT      = $AED017 ;SID - L - Filter (Write Only) - RES / FILT
=$aed018					ESID_SIDL_MODE_VOL      = $AED018 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed019					ESID_SIDL_POT_X         = $AED019 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed01a					ESID_SIDL_POT_Y         = $AED01A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed01b					ESID_SIDL_OSC3_RND      = $AED01B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed01c					ESID_SIDL_ENV3          = $AED01C ;SID - L - Misc (Read Only)  - ENV3
=$aed01d					ESID_SIDL_NOT_USED0     = $AED01D ;SID - L - NOT USED
=$aed01e					ESID_SIDL_NOT_USED1     = $AED01E ;SID - L - NOT USED
=$aed01f					ESID_SIDL_NOT_USED2     = $AED01F ;SID - L - NOT USED
=$aed100					ESID_SIDR_V1_FREQ_LO    = $AED100 ;SID - L - Voice 1 (Write Only) - FREQ LOW
=$aed101					ESID_SIDR_V1_FREQ_HI    = $AED101 ;SID - L - Voice 1 (Write Only) - FREQ HI
=$aed102					ESID_SIDR_V1_PW_LO      = $AED102 ;SID - L - Voice 1 (Write Only) - PW LOW
=$aed103					ESID_SIDR_V1_PW_HI      = $AED103 ;SID - L - Voice 1 (Write Only) - PW HI
=$aed104					ESID_SIDR_V1_CTRL       = $AED104 ;SID - L - Voice 1 (Write Only) - CTRL REG
=$aed105					ESID_SIDR_V1_ATCK_DECY  = $AED105 ;SID - L - Voice 1 (Write Only) - ATTACK / DECAY
=$aed106					ESID_SIDR_V1_SSTN_RLSE  = $AED106 ;SID - L - Voice 1 (Write Only) - SUSTAIN / RELEASE
=$aed107					ESID_SIDR_V2_FREQ_LO    = $AED107 ;SID - L - Voice 2 (Write Only) - FREQ LOW
=$aed108					ESID_SIDR_V2_FREQ_HI    = $AED108 ;SID - L - Voice 2 (Write Only) - FREQ HI
=$aed109					ESID_SIDR_V2_PW_LO      = $AED109 ;SID - L - Voice 2 (Write Only) - PW LOW
=$aed10a					ESID_SIDR_V2_PW_HI      = $AED10A ;SID - L - Voice 2 (Write Only) - PW HI
=$aed10b					ESID_SIDR_V2_CTRL       = $AED10B ;SID - L - Voice 2 (Write Only) - CTRL REG
=$aed10c					ESID_SIDR_V2_ATCK_DECY  = $AED10C ;SID - L - Voice 2 (Write Only) - ATTACK / DECAY
=$aed10d					ESID_SIDR_V2_SSTN_RLSE  = $AED10D ;SID - L - Voice 2 (Write Only) - SUSTAIN / RELEASE
=$aed10e					ESID_SIDR_V3_FREQ_LO    = $AED10E ;SID - L - Voice 3 (Write Only) - FREQ LOW
=$aed10f					ESID_SIDR_V3_FREQ_HI    = $AED10F ;SID - L - Voice 3 (Write Only) - FREQ HI
=$aed110					ESID_SIDR_V3_PW_LO      = $AED110 ;SID - L - Voice 3 (Write Only) - PW LOW
=$aed111					ESID_SIDR_V3_PW_HI      = $AED111 ;SID - L - Voice 3 (Write Only) - PW HI
=$aed112					ESID_SIDR_V3_CTRL       = $AED112 ;SID - L - Voice 3 (Write Only) - CTRL REG
=$aed113					ESID_SIDR_V3_ATCK_DECY  = $AED113 ;SID - L - Voice 3 (Write Only) - ATTACK / DECAY
=$aed114					ESID_SIDR_V3_SSTN_RLSE  = $AED114 ;SID - L - Voice 3 (Write Only) - SUSTAIN / RELEASE
=$aed115					ESID_SIDR_FC_LO         = $AED115 ;SID - L - Filter (Write Only) - FC LOW
=$aed116					ESID_SIDR_FC_HI         = $AED116 ;SID - L - Filter (Write Only) - FC HI
=$aed117					ESID_SIDR_RES_FILT      = $AED117 ;SID - L - Filter (Write Only) - RES / FILT
=$aed118					ESID_SIDR_MODE_VOL      = $AED118 ;SID - L - Filter (Write Only) - MODE / VOL
=$aed119					ESID_SIDR_POT_X         = $AED119 ;SID - L - Misc (Read Only) - POT X (C256 - NOT USED)
=$aed11a					ESID_SIDR_POT_Y         = $AED11A ;SID - L - Misc (Read Only) - POT Y (C256 - NOT USED)
=$aed11b					ESID_SIDR_OSC3_RND      = $AED11B ;SID - L - Misc (Read Only) - OSC3 / RANDOM
=$aed11c					ESID_SIDR_ENV3          = $AED11C ;SID - L - Misc (Read Only)  - ENV3
=$aed11d					ESID_SIDR_NOT_USED0     = $AED11D ;SID - L - NOT USED
=$aed11e					ESID_SIDR_NOT_USED1     = $AED11E ;SID - L - NOT USED
=$aed11f					ESID_SIDR_NOT_USED2     = $AED11F ;SID - L - NOT USED
=$aee000					ESID_ETHERNET_REG       = $AEE000

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/EXP_C200_EVID_def.asm

=$ae0000					EVID_EXP_CARD_INFO      = $AE0000    ; Read Only (32 Bytes Card ID - READ ONLY)
=$ae0000					EVID_ID_NAME_ASCII      = $AE0000    ; 15 Characters + $00
=$ae0010					EVID_ID_VENDOR_ID_Lo    = $AE0010    ; Foenix Project Reserved ID: $F0E1
=$ae0011					EVID_ID_VENDOR_ID_Hi    = $AE0011
=$ae0012					EVID_ID_CARD_ID_Lo      = $AE0012      ; $9236 - C200-EVID
=$ae0013					EVID_ID_CARD_ID_Hi      = $AE0013
=$ae0014					EVID_ID_CARD_CLASS_Lo   = $AE0014    ; TBD
=$ae0015					EVID_ID_CARD_CLASS_Hi   = $AE0015    ; TBD
=$ae0016					EVID_ID_CARD_SUBCLSS_Lo = $AE0016    ; TBD
=$ae0017					EVID_ID_CARD_SUBCLSS_Hi = $AE0017    ; TBD
=$ae0018					EVID_ID_CARD_UNDEFINED0 = $AE0018    ; TBD
=$ae0019					EVID_ID_CARD_UNDEFINED1 = $AE0019    ; TBD
=$ae001a					EVID_ID_CARD_HW_Rev     = $AE001A    ; 00 - in Hex
=$ae001b					EVID_ID_CARD_FPGA_Rev   = $AE001B    ; 00 - in Hex
=$ae001c					EVID_ID_CARD_UNDEFINED2 = $AE001C    ; TBD
=$ae001d					EVID_ID_CARD_UNDEFINED3 = $AE001D    ; TBD
=$ae001e					EVID_ID_CARD_CHKSUM0    = $AE001E    ; Not Supported Yet
=$ae001f					EVID_ID_CARD_CHKSUM1    = $AE001F    ; Not Supported Yet
=$ae1000					EVID_FONT_MEM      = $AE1000
=$ae1b00					EVID_FG_LUT        = $AE1B00
=$ae1b40					EVID_BG_LUT        = $AE1B40
=$ae1e00					EVID_MSTR_CTRL_REG_L	= $AE1E00
=$01						EVID_Ctrl_Text_Mode_En  = $01       ; Enable the Text Mode
=$ae1e01					EVID_MSTR_CTRL_REG_H    = $AE1E01
=$01						EVID_800x600ModeEnable   = $01       ; 0 - 640x480 (Clock @ 25.175Mhz), 1 - 800x600 (Clock @ 40Mhz)
=$01						EVID_Border_Ctrl_Enable = $01
=$ae1e04					EVID_BORDER_CTRL_REG    = $AE1E04 ; Bit[0] - Enable (1 by default)  Bit[4..6]: X Scroll Offset ( Will scroll Left) (Acceptable Value: 0..7)
=$ae1e05					EVID_BORDER_COLOR_B     = $AE1E05
=$ae1e06					EVID_BORDER_COLOR_G     = $AE1E06
=$ae1e07					EVID_BORDER_COLOR_R     = $AE1E07
=$ae1e08					EVID_BORDER_X_SIZE      = $AE1E08; X-  Values: 0 - 32 (Default: 32)
=$ae1e09					EVID_BORDER_Y_SIZE      = $AE1E09; Y- Values 0 -32 (Default: 32)
=$ae1e10					EVID_TXT_CURSOR_CTRL_REG = $AE1E10   ;[0]  Enable Text Mode
=$01						EVID_Cursor_Enable       = $01
=$02						EVID_Cursor_Flash_Rate0  = $02       ; 00 - 1/Sec, 01 - 2/Sec, 10 - 4/Sec, 11 - 5/Sec
=$04						EVID_Cursor_Flash_Rate1  = $04
=$08						EVID_Cursor_FONT_Page0   = $08       ; Pick Font Page 0 or Font Page 1
=$10						EVID_Cursor_FONT_Page1   = $10       ; Pick Font Page 0 or Font Page 1
=$ae1e12					EVID_TXT_CURSOR_CHAR_REG = $AE1E12
=$ae1e13					EVID_TXT_CURSOR_COLR_REG = $AE1E13
=$ae1e14					EVID_TXT_CURSOR_X_REG_L  = $AE1E14
=$ae1e15					EVID_TXT_CURSOR_X_REG_H  = $AE1E15
=$ae1e16					EVID_TXT_CURSOR_Y_REG_L  = $AE1E16
=$ae1e17					EVID_TXT_CURSOR_Y_REG_H  = $AE1E17
=$ae1e1c					EVID_INFO_CHIP_NUM_L     = $AE1E1C
=$ae1e1d					EVID_INFO_CHIP_NUM_H     = $AE1E1D
=$ae1e1e					EVID_INFO_CHIP_VER_L     = $AE1E1E
=$ae1e1f					EVID_INFO_CHIP_VER_H     = $AE1E1F
=$ae2000					EVID_TEXT_MEM            = $AE2000
=$ae4000					EVID_COLOR_MEM           = $AE4000
=$aee000					EVID_ETHERNET_REG        = $AEE000

;******  Return to file: src\kernel.asm

.190400						IBOOT
.190400		18		clc		                CLC               ; clear the carry flag
.190401		fb		xce		                XCE               ; move carry to emulation flag.
.190402		78		sei		                SEI               ; Disable interrupts
.190403		c2 30		rep #$30	                REP #$30        ; set A&X long
.190405		a9 ff fe	lda #$feff	                LDA #STACK_END    ; initialize stack pointer
.190408		1b		tcs		                TAS
.190409		a2 00 10	ldx #$1000	                LDX #<>BOOT       ; Copy the kernel jump table to bank 0
.19040c		a0 00 10	ldy #$1000	                LDY #<>BOOT       ; Ordinarily, this is done by GAVIN, but
.19040f		a9 00 20	lda #$2000	                LDA #$2000        ; this is ensures it can be reloaded in case of errors
.190412		54 00 18	mvn $18,$00	                MVN $18,$00       ; Or during soft loading of the kernel from the debug port
.190415		48		pha		                PHA             ; begin setdp macro
.190416		08		php		                PHP
.190417		c2 20		rep #$20	                REP #$20        ; set A long
.190419		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19041c		5b		tcd		                TCD
.19041d		28		plp		                PLP
.19041e		68		pla		                PLA             ; end setdp macro
.19041f		e2 20		sep #$20	                SEP #$20        ; set A short
.190421		a2 00 00	ldx #$0000	                LDX #$0000
.190424		a9 00		lda #$00	                LDA #$00
.190426						CLEAR_MEM_LOOP
.190426		95 00		sta $00,x	                STA $0000, X
.190428		e8		inx		                INX
.190429		e0 00 01	cpx #$0100	                CPX #$0100
.19042c		d0 f8		bne $190426	                BNE CLEAR_MEM_LOOP
.19042e		ea		nop		                NOP
.19042f		a9 ff		lda #$ff	                LDA #$FF
.190431		8f 48 01 00	sta $000148	                STA @lINT_EDGE_REG0
.190435		8f 49 01 00	sta $000149	                STA @lINT_EDGE_REG1
.190439		8f 4a 01 00	sta $00014a	                STA @lINT_EDGE_REG2
.19043d		8f 4b 01 00	sta $00014b	                STA @lINT_EDGE_REG3
.190441		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.190445		8f 4d 01 00	sta $00014d	                STA @lINT_MASK_REG1
.190449		8f 4e 01 00	sta $00014e	                STA @lINT_MASK_REG2
.19044d		8f 4f 01 00	sta $00014f	                STA @lINT_MASK_REG3
.190451		22 c8 0c 19	jsl $190cc8	                JSL INITRTC               ; Initialize the RTC
.190455		e2 20		sep #$20	                SEP #$20        ; set A short
.190457		af 87 e8 af	lda $afe887	                LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.19045b		29 10		and #$10	                AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.19045d		c9 10		cmp #$10	                CMP #GABE_SYS_STAT_EXP
.19045f		d0 1e		bne $19047f	                BNE SkipInitExpC100C200
.190461		c2 20		rep #$20	                REP #$20        ; set A long
.190463		af 12 00 ae	lda $ae0012	                LDA @L ESID_ID_CARD_ID_Lo    ; Load the Card ID and check for C100 or C200
.190467		c9 64 00	cmp #$0064	                CMP #$0064
.19046a		f0 0f		beq $19047b	                BEQ InitC100ESID
.19046c		c9 c8 00	cmp #$00c8	                CMP #$00C8
.19046f		d0 0e		bne $19047f	                BNE SkipInitExpC100C200
.190471		22 a1 69 19	jsl $1969a1	                JSL SIMPLE_INIT_ETHERNET_CTRL
.190475		22 28 6a 19	jsl $196a28	                JSL INIT_EVID_VID_MODE
.190479		80 04		bra $19047f	                BRA SkipInitExpC100C200
.19047b						InitC100ESID:
.19047b		22 a1 69 19	jsl $1969a1	                JSL SIMPLE_INIT_ETHERNET_CTRL
.19047f						SkipInitExpC100C200:
.19047f		e2 20		sep #$20	                SEP #$20        ; set A short
.190481		c2 10		rep #$10	                REP #$10        ; set X long
.190483		a9 9f		lda #$9f	                LDA #$9F              ; Channel 1 - Full Atteniation
.190485		8f 00 f1 af	sta $aff100	                STA $AFF100
.190489		a9 bf		lda #$bf	                LDA #$BF              ; Channel 2 - Full Atteniation
.19048b		8f 00 f1 af	sta $aff100	                STA $AFF100
.19048f		a9 df		lda #$df	                LDA #$DF              ; Channel 3 - No Atteniation
.190491		8f 00 f1 af	sta $aff100	                STA $AFF100
.190495		a9 ff		lda #$ff	                LDA #$FF              ; Channel 4 - No Atteniation
.190497		8f 00 f1 af	sta $aff100	                STA $AFF100
.19049b		a9 70		lda #$70	                LDA #$70                  ; Set the default text color to dim white on black
.19049d		85 1e		sta $1e		                STA CURCOLOR
.19049f		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.1904a3		29 01		and #$01	                AND #$01
.1904a5		c9 01		cmp #$01	                CMP #$01
.1904a7		d0 14		bne $1904bd	                BNE Alreadyin640480Mode
.1904a9		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904ad		29 fc		and #$fc	                AND #$FC
.1904af		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904b3		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904b7		09 01		ora #$01	                ORA #$01
.1904b9		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.1904bd						Alreadyin640480Mode
.1904bd		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.1904c1		29 fc		and #$fc	                AND #$FC
.1904c3		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.1904c7		a9 00		lda #$00	                LDA #0
.1904c9		22 38 10 00	jsl $001038	                JSL SETIN
.1904cd		22 3c 10 00	jsl $00103c	                JSL SETOUT
.1904d1		22 bb 6b 19	jsl $196bbb	                JSL ANSI_INIT
.1904d5		22 2c 11 00	jsl $00112c	                JSL SETSIZES
.1904d9		22 dc 10 00	jsl $0010dc	                JSL INITCODEC
.1904dd		22 c4 10 00	jsl $0010c4	                JSL INITGAMMATABLE
.1904e1		22 c8 10 00	jsl $0010c8	                JSL INITALLLUT
.1904e5		22 75 0b 19	jsl $190b75	                JSL INITMOUSEPOINTER
.1904e9		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR
.1904ed		c2 20		rep #$20	                REP #$20        ; set A long
.1904ef		48		pha		                PHA             ; begin setdp macro
.1904f0		08		php		                PHP
.1904f1		c2 20		rep #$20	                REP #$20        ; set A long
.1904f3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1904f6		5b		tcd		                TCD
.1904f7		28		plp		                PLP
.1904f8		68		pla		                PLA             ; end setdp macro
.1904f9		22 b4 10 00	jsl $0010b4	                JSL INITKEYBOARD
.1904fd		22 b8 10 00	jsl $0010b8	                JSL INITMOUSE
.190501		58		cli		                CLI                   ; Make sure no Interrupt will come and fuck up Init before this point.
.190502		e2 20		sep #$20	                SEP #$20        ; set A short
.190504		c2 10		rep #$10	                REP #$10        ; set X long
.190506		48		pha		                PHA             ; begin setdbr macro
.190507		08		php		                PHP
.190508		e2 20		sep #$20	                SEP #$20        ; set A short
.19050a		a9 19		lda #$19	                LDA #`greet_msg
.19050c		48		pha		                PHA
.19050d		ab		plb		                PLB
.19050e		28		plp		                PLP
.19050f		68		pla		                PLA             ; end setdbr macro
.190510		a2 00 00	ldx #$0000	                LDX #0
.190513		bf 00 10 00	lda $001000,x	jmpcopy         LDA @l BOOT,X
.190517		9f 00 10 00	sta $001000,x	                STA @l $001000,X
.19051b		e8		inx		                INX
.19051c		e0 00 10	cpx #$1000	                CPX #$1000
.19051f		d0 f2		bne $190513	                BNE jmpcopy
.190521						retry_boot
.190521		22 46 3e 19	jsl $193e46	                JSL DOS_INIT            ; Initialize the "disc operating system"
.190525		22 e9 7f 19	jsl $197fe9	                JSL BOOT_SOUND          ; Play the boot sound
.190529		22 00 00 1e	jsl $1e0000	                JSL BOOT_MENU           ; Show the splash screen / boot menu and wait for key presses
.19052d		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN           ; Clear Screen and Set a standard color in Color Memory
.190531		22 a0 10 00	jsl $0010a0	                JSL CSRHOME             ; Move to the home position
.190535						greet
.190535		c2 30		rep #$30	                REP #$30        ; set A&X long
.190537		48		pha		                PHA             ; begin setdbr macro
.190538		08		php		                PHP
.190539		e2 20		sep #$20	                SEP #$20        ; set A short
.19053b		a9 19		lda #$19	                LDA #`greet_msg
.19053d		48		pha		                PHA
.19053e		ab		plb		                PLB
.19053f		28		plp		                PLP
.190540		68		pla		                PLA             ; end setdbr macro
.190541		a2 a0 80	ldx #$80a0	                LDX #<>greet_msg
.190544		22 fb 06 19	jsl $1906fb	                JSL IPRINT              ; print the first line
.190548		22 0a 09 19	jsl $19090a	                JSL ICOLORFLAG          ; This is to set the color memory for the text logo
.19054c		22 08 6b 19	jsl $196b08	                JSL EVID_GREET          ; Print the EVID greeting, if the EVID card is installed
.190550		c2 30		rep #$30	                REP #$30        ; set A&X long
.190552		a9 ff fe	lda #$feff	                LDA #STACK_END          ; We are the root, let's make sure from now on, that we start clean
.190555		1b		tcs		                TAS
.190556		e2 20		sep #$20	                SEP #$20        ; set A short
.190558		c2 10		rep #$10	                REP #$10        ; set X long
.19055a		af 08 00 00	lda $000008	                LDA @l KRNL_BOOT_MENU_K ; Get the Value of the Keyboard Boot Choice
.19055e		c9 20		cmp #$20	                CMP #CHAR_SP          ; Did the user press SPACE?
.190560		f0 10		beq $190572	                BEQ BOOT_DIP          ; Yes: boot via the DIP switches
.190562		c9 0d		cmp #$0d	                CMP #CHAR_CR          ; Did the user press RETURN?
.190564		f0 1e		beq $190584	                BEQ BOOTBASIC         ; Yes: go straight to BASIC
.190566		c9 81		cmp #$81	                CMP #CHAR_F1          ; Did the user press F1?
.190568		f0 62		beq $1905cc	                BEQ BOOTFLOPPY        ; Yes: boot via the floppy
.19056a		c9 82		cmp #$82	                CMP #CHAR_F2          ; Did the user press F2?
.19056c		f0 1d		beq $19058b	                BEQ BOOTSDC           ; Yes: boot via the SDC
.19056e		c9 83		cmp #$83	                CMP #CHAR_F3          ; Did the user press F3?
.190570		f0 39		beq $1905ab	                BEQ BOOTIDE           ; Yes: boot via the IDE
.190572		af 0e e8 af	lda $afe80e	BOOT_DIP        LDA @lDIP_BOOTMODE    ; {HD_INSTALLED, 5'b0_0000, BOOT_MODE[1], BOOT_MODE[0]}
.190576		29 03		and #$03	                AND #%00000011        ; Look at the mode bits
.190578		c9 00		cmp #$00	                CMP #DIP_BOOT_IDE     ; DIP set for IDE?
.19057a		f0 2f		beq $1905ab	                BEQ BOOTIDE           ; Yes: Boot from the IDE
.19057c		c9 01		cmp #$01	                CMP #DIP_BOOT_SDCARD  ; DIP set for SD card?
.19057e		f0 0b		beq $19058b	                BEQ BOOTSDC           ; Yes: try to boot from the SD card
.190580		c9 02		cmp #$02	                CMP #DIP_BOOT_FLOPPY  ; DIP set for floppy?
.190582		f0 48		beq $1905cc	                BEQ BOOTFLOPPY        ; Yes: try to boot from the floppy
.190584						IRESTORE
.190584		5c 00 00 1a	jmp $1a0000	BOOTBASIC       JML BASIC             ; Cold start of the BASIC interpreter (or its replacement)
.190588		ea		nop		CREDIT_LOCK     NOP
.190589		80 fd		bra $190588	                BRA CREDIT_LOCK
.19058b		a2 cf 84	ldx #$84cf	BOOTSDC         LDX #<>sdc_boot
.19058e		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.190592		e2 20		sep #$20	                SEP #$20        ; set A short
.190594		a9 02		lda #$02	                LDA #BIOS_DEV_SD
.190596		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.19059a		22 18 3f 19	jsl $193f18	                JSL DOS_MOUNT         ; Mount the SDC
.19059e		90 06		bcc $1905a6	                BCC sdc_error         ; Print an error message if couldn't get anything
.1905a0		22 d3 40 19	jsl $1940d3	                JSL DOS_TESTBOOT      ; Try to boot from the SDC's MBR
.1905a4		80 de		bra $190584	                BRA BOOTBASIC         ; If we couldn't fall, into BASIC
.1905a6		a2 53 84	ldx #$8453	sdc_error       LDX #<>sdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905a9		80 40		bra $1905eb	                BRA PR_BOOT_ERROR
.1905ab		a2 e6 84	ldx #$84e6	BOOTIDE         LDX #<>ide_boot
.1905ae		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.1905b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1905b4		a9 06		lda #$06	                LDA #BIOS_DEV_HD0
.1905b6		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905ba		22 18 3f 19	jsl $193f18	                JSL DOS_MOUNT         ; Mount the IDE drive
.1905be		90 07		bcc $1905c7	                BCC hdc_error         ; Print an error message if couldn't get anything
.1905c0		22 d3 40 19	jsl $1940d3	                JSL DOS_TESTBOOT      ; Try to boot from the IDE's MBR
.1905c4		82 bd ff	brl $190584	                BRL BOOTBASIC         ; If we couldn't fall, into BASIC
.1905c7		a2 6f 84	ldx #$846f	hdc_error       LDX #<>ide_err_boot   ; Print a message saying SD card booting is not implemented
.1905ca		80 1f		bra $1905eb	                BRA PR_BOOT_ERROR
.1905cc		a2 b8 84	ldx #$84b8	BOOTFLOPPY      LDX #<>fdc_boot
.1905cf		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.1905d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1905d5		a9 00		lda #$00	                LDA #BIOS_DEV_FDC
.1905d7		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1905db		22 28 63 19	jsl $196328	                JSL FDC_MOUNT         ; Mount the floppy drive
.1905df		90 07		bcc $1905e8	                BCC fdc_error         ; Print an error message if couldn't get anything
.1905e1		22 d3 40 19	jsl $1940d3	                JSL DOS_TESTBOOT      ; Try to boot from the FDC's MBR
.1905e5		82 9c ff	brl $190584	                BRL BOOTBASIC         ; If we couldn't, fall into BASIC
.1905e8		a2 92 84	ldx #$8492	fdc_error       LDX #<>fdc_err_boot   ; Print a message saying SD card booting is not implemented
.1905eb		22 fb 06 19	jsl $1906fb	PR_BOOT_ERROR   JSL IPRINT            ; Print the error message in X
.1905ef		a2 2e 84	ldx #$842e	                LDX #<>boot_retry     ; Print the boot retry prompt
.1905f2		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.1905f6		22 95 06 19	jsl $190695	boot_wait_key   JSL IGETCHW           ; Wait for a keypress
.1905fa		c9 52		cmp #$52	                CMP #'R'              ; Was "R" pressed?
.1905fc		d0 03		bne $190601	                BNE chk_r_lc
.1905fe		82 20 ff	brl $190521	                BRL retry_boot        ; Yes: retry the boot sequence
.190601		c9 72		cmp #$72	chk_r_lc        CMP #'r'
.190603		d0 03		bne $190608	                BNE chk_b_lc
.190605		82 19 ff	brl $190521	                BRL retry_boot
.190608		c9 62		cmp #$62	chk_b_lc        CMP #'b'              ; Was "B" pressed?
.19060a		d0 03		bne $19060f	                BNE chk_b_lc_not         ; Yes: try going to BASIC
.19060c		82 75 ff	brl $190584	                BRL BOOTBASIC
.19060f						chk_b_lc_not:
.19060f		c9 42		cmp #$42	                CMP #'B'
.190611		d0 03		bne $190616	                BNE chk_b_lc_not0
.190613		82 6e ff	brl $190584	                BRL BOOTBASIC
.190616						chk_b_lc_not0:
.190616		80 de		bra $1905f6	                BRA boot_wait_key     ; No: keep waiting
.190618						IBREAK
.190618		48		pha		                PHA             ; begin setdp macro
.190619		08		php		                PHP
.19061a		c2 20		rep #$20	                REP #$20        ; set A long
.19061c		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.19061f		5b		tcd		                TCD
.190620		28		plp		                PLP
.190621		68		pla		                PLA             ; end setdp macro
.190622		68		pla		                PLA             ; Pull .Y and stuff it in the CPUY variable
.190623		8f 48 02 00	sta $000248	                STA CPUY
.190627		68		pla		                PLA             ; Pull .X and stuff it in the CPUY variable
.190628		8f 46 02 00	sta $000246	                STA CPUX
.19062c		68		pla		                PLA             ; Pull .A and stuff it in the CPUY variable
.19062d		8f 44 02 00	sta $000244	                STA CPUA
.190631		68		pla		                PLA
.190632		8f 4c 02 00	sta $00024c	                STA CPUDP       ; Pull Direct page
.190636		e2 20		sep #$20	                SEP #$20        ; set A short
.190638		68		pla		                PLA             ; Pull Data Bank (8 bits)
.190639		8f 4e 02 00	sta $00024e	                STA CPUDBR
.19063d		68		pla		                PLA             ; Pull Flags (8 bits)
.19063e		8f 4f 02 00	sta $00024f	                STA CPUFLAGS
.190642		c2 20		rep #$20	                REP #$20        ; set A long
.190644		68		pla		                PLA             ; Pull Program Counter (16 bits)
.190645		8f 40 02 00	sta $000240	                STA CPUPC
.190649		e2 20		sep #$20	                SEP #$20        ; set A short
.19064b		68		pla		                PLA             ; Pull Program Bank (8 bits)
.19064c		8f 42 02 00	sta $000242	                STA CPUPBR
.190650		c2 20		rep #$20	                REP #$20        ; set A long
.190652		3b		tsc		                TSA             ; Get the stack
.190653		8f 4a 02 00	sta $00024a	                STA CPUSTACK    ; Store the stack at immediately before the interrupt was asserted
.190657		a9 ff fe	lda #$feff	                LDA #<>STACK_END   ; initialize stack pointer back to the bootup value
.19065a		1b		tcs		                TAS
.19065b		5c 04 00 1a	jmp $1a0004	                JML MONITOR
.19065f						IREADY
.19065f		48		pha		                PHA             ; begin setdbr macro
.190660		08		php		                PHP
.190661		e2 20		sep #$20	                SEP #$20        ; set A short
.190663		a9 19		lda #$19	                LDA #`ready_msg
.190665		48		pha		                PHA
.190666		ab		plb		                PLB
.190667		28		plp		                PLP
.190668		68		pla		                PLA             ; end setdbr macro
.190669		e2 20		sep #$20	                SEP #$20        ; set A short
.19066b		a2 01 85	ldx #$8501	                LDX #<>ready_msg
.19066e		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.190672						IREADYWAIT
.190672		22 8c 06 19	jsl $19068c	                JSL IGETCHE
.190676		80 fa		bra $190672	                BRA IREADYWAIT
.190678		db		stp		IKEYDOWN        STP             ; Keyboard key pressed
.190679		db		stp		IRETURN         STP
.19067a		08		php		ISETIN          PHP
.19067b		e2 20		sep #$20	                SEP #$20        ; set A short
.19067d		8f 04 07 00	sta $000704	                STA @lCHAN_IN   ; Save the channel number
.190681		28		plp		                PLP
.190682		6b		rtl		                RTL
.190683		08		php		ISETOUT         PHP
.190684		e2 20		sep #$20	                SEP #$20        ; set A short
.190686		8f 03 07 00	sta $000703	                STA @lCHAN_OUT  ; Save the channel number
.19068a		28		plp		                PLP
.19068b		6b		rtl		                RTL
.19068c		22 4c 10 00	jsl $00104c	IGETCHE         JSL GETCHW
.190690		22 18 10 00	jsl $001018	                JSL PUTC
.190694		6b		rtl		                RTL
.190695						IGETCHW
.190695		da		phx		                PHX
.190696		5a		phy		                PHY
.190697		8b		phb		                PHB
.190698		0b		phd		                PHD
.190699		08		php		                PHP
.19069a		e2 20		sep #$20	                SEP #$20        ; set A short
.19069c		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906a0		f0 1b		beq $1906bd	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906a2		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906a4		f0 0d		beq $1906b3	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906a6		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906a8		f0 09		beq $1906b3	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906aa		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906ac		28		plp		                PLP
.1906ad		38		sec		                SEC                 ; And return carry set
.1906ae		2b		pld		                PLD
.1906af		ab		plb		                PLB
.1906b0		7a		ply		                PLY
.1906b1		fa		plx		                PLX
.1906b2		6b		rtl		                RTL
.1906b3		22 2c 57 19	jsl $19572c	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906b7		22 e0 57 19	jsl $1957e0	                JSL UART_GETC       ; Get the charater from the COM port
.1906bb		80 04		bra $1906c1	                BRA done
.1906bd		22 e1 77 19	jsl $1977e1	getc_keyboard   JSL KBD_GETCW       ; Get the character from the keyboard
.1906c1		28		plp		done            PLP
.1906c2		18		clc		                CLC                 ; Return carry clear for valid data
.1906c3		2b		pld		                PLD
.1906c4		ab		plb		                PLB
.1906c5		7a		ply		                PLY
.1906c6		fa		plx		                PLX
.1906c7		6b		rtl		                RTL
.1906c8						IGETCH
.1906c8		da		phx		                PHX
.1906c9		5a		phy		                PHY
.1906ca		8b		phb		                PHB
.1906cb		0b		phd		                PHD
.1906cc		08		php		                PHP
.1906cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1906cf		af 04 07 00	lda $000704	                LDA @lCHAN_IN       ; Get the current input channel
.1906d3		f0 1b		beq $1906f0	                BEQ getc_keyboard   ; If it's keyboard, read from the key buffer
.1906d5		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1906d7		f0 0d		beq $1906e6	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906d9		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1906db		f0 09		beq $1906e6	                BEQ getc_uart       ; Yes: handle reading from the UART
.1906dd		a9 00		lda #$00	                LDA #0              ; Return 0 if no valid device
.1906df		28		plp		                PLP
.1906e0		38		sec		                SEC                 ; And return carry set
.1906e1		2b		pld		                PLD
.1906e2		ab		plb		                PLB
.1906e3		7a		ply		                PLY
.1906e4		fa		plx		                PLX
.1906e5		6b		rtl		                RTL
.1906e6		22 2c 57 19	jsl $19572c	getc_uart       JSL UART_SELECT     ; Select the correct COM port
.1906ea		22 e0 57 19	jsl $1957e0	                JSL UART_GETC       ; Get the charater from the COM port
.1906ee		80 04		bra $1906f4	                BRA done
.1906f0		22 ed 77 19	jsl $1977ed	getc_keyboard   JSL KBD_GETC        ; Get the character from the keyboard
.1906f4		28		plp		done            PLP
.1906f5		18		clc		                CLC                 ; Return carry clear for valid data
.1906f6		2b		pld		                PLD
.1906f7		ab		plb		                PLB
.1906f8		7a		ply		                PLY
.1906f9		fa		plx		                PLX
.1906fa		6b		rtl		                RTL
.1906fb		22 1c 10 00	jsl $00101c	IPRINT          JSL PUTS
.1906ff		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.190703		6b		rtl		                RTL
.190704		48		pha		IPUTS           PHA
.190705		08		php		                PHP
.190706		e2 20		sep #$20	                SEP #$20        ; set A short
.190708		c2 10		rep #$10	                REP #$10        ; set X long
.19070a		bd 00 00	lda $190000,x	iputs1          LDA $0,b,x      ; read from the string
.19070d		f0 08		beq $190717	                BEQ iputs_done
.19070f		22 18 10 00	jsl $001018	iputs2          JSL PUTC
.190713		e8		inx		iputs3          INX
.190714		4c 0a 07	jmp $19070a	                JMP iputs1
.190717		e8		inx		iputs_done      INX
.190718		28		plp		                PLP
.190719		68		pla		                PLA
.19071a		6b		rtl		                RTL
.19071b						IPUTC
.19071b		da		phx		                PHX
.19071c		5a		phy		                PHY
.19071d		0b		phd		                PHD
.19071e		8b		phb		                PHB
.19071f		08		php		                PHP                 ; stash the flags (we'll be changing M)
.190720		48		pha		                PHA             ; begin setdp macro
.190721		08		php		                PHP
.190722		c2 20		rep #$20	                REP #$20        ; set A long
.190724		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190727		5b		tcd		                TCD
.190728		28		plp		                PLP
.190729		68		pla		                PLA             ; end setdp macro
.19072a		48		pha		                PHA             ; begin setdbr macro
.19072b		08		php		                PHP
.19072c		e2 20		sep #$20	                SEP #$20        ; set A short
.19072e		a9 00		lda #$00	                LDA #0
.190730		48		pha		                PHA
.190731		ab		plb		                PLB
.190732		28		plp		                PLP
.190733		68		pla		                PLA             ; end setdbr macro
.190734		e2 20		sep #$20	                SEP #$20        ; set A short
.190736		c2 10		rep #$10	                REP #$10        ; set X long
.190738		48		pha		                PHA                 ; Save the character to print
.190739		af 03 07 00	lda $000703	                LDA @lCHAN_OUT      ; Check the output channel #
.19073d		f0 1a		beq $190759	                BEQ putc_ansi       ; If it's 0: print to the screen
.19073f		c9 04		cmp #$04	                CMP #CHAN_EVID      ; Check to see if it's the second video port
.190741		f0 16		beq $190759	                BEQ putc_ansi       ; Yes: handle printing to the second video port
.190743		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.190745		f0 07		beq $19074e	                BEQ putc_uart       ; Yes: handle printing to the UART
.190747		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.190749		f0 03		beq $19074e	                BEQ putc_uart       ; Yes: handle printing to the UART
.19074b		68		pla		                PLA                 ; Otherwise, just exit
.19074c		80 10		bra $19075e	                BRA done
.19074e		22 2c 57 19	jsl $19572c	putc_uart       JSL UART_SELECT     ; Point to the correct UART
.190752		68		pla		                PLA                 ; Recover the character to send
.190753		22 01 58 19	jsl $195801	                JSL UART_PUTC       ; Send the character
.190757		80 05		bra $19075e	                BRA done
.190759		68		pla		putc_ansi       PLA                 ; Recover the character to send
.19075a		22 fa 6d 19	jsl $196dfa	                JSL ANSI_PUTC       ; Print to the current selected ANSI screen
.19075e		28		plp		done            PLP
.19075f		ab		plb		                PLB
.190760		2b		pld		                PLD
.190761		7a		ply		                PLY
.190762		fa		plx		                PLX
.190763		6b		rtl		                RTL
.190764		da		phx		SCRSHIFTLL      PHX
.190765		5a		phy		                PHY
.190766		48		pha		                PHA
.190767		0b		phd		                PHD
.190768		08		php		                PHP
.190769		48		pha		                PHA             ; begin setdp macro
.19076a		08		php		                PHP
.19076b		c2 20		rep #$20	                REP #$20        ; set A long
.19076d		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190770		5b		tcd		                TCD
.190771		28		plp		                PLP
.190772		68		pla		                PLA             ; end setdp macro
.190773		c2 30		rep #$30	                REP #$30        ; set A&X long
.190775		a5 17		lda $17		                LDA CURSORPOS       ; Get the current cursor position
.190777		a8		tay		                TAY                 ; Set it as the destination
.190778		aa		tax		                TAX
.190779		e8		inx		                INX                 ; And set the next cell as the source
.19077a		18		clc		                CLC                 ; Calculate the length of the block to move
.19077b		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.19077d		e5 1a		sbc $1a		                SBC CURSORX
.19077f		54 af af	mvn $af,$af	                MVN $AF, $AF        ; And move the block
.190782		28		plp		                PLP
.190783		2b		pld		                PLD
.190784		68		pla		                PLA
.190785		7a		ply		                PLY
.190786		fa		plx		                PLX
.190787		6b		rtl		                RTL
.190788		da		phx		SCRSHIFTLR      PHX
.190789		48		pha		                PHA
.19078a		0b		phd		                PHD
.19078b		08		php		                PHP
.19078c		48		pha		                PHA             ; begin setdp macro
.19078d		08		php		                PHP
.19078e		c2 20		rep #$20	                REP #$20        ; set A long
.190790		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190793		5b		tcd		                TCD
.190794		28		plp		                PLP
.190795		68		pla		                PLA             ; end setdp macro
.190796		c2 30		rep #$30	                REP #$30        ; set A&X long
.190798		a5 1a		lda $1a		                LDA CURSORX         ; What column are we on
.19079a		1a		inc a		                INC A
.19079b		c5 0f		cmp $0f		                CMP COLS_VISIBLE    ; >= the # visible?
.19079d		b0 1b		bcs $1907ba	                BGE done            ; Yes: just skip the whole thing
.19079f		38		sec		                SEC                 ; Calculate the length of the block to move
.1907a0		a5 0f		lda $0f		                LDA COLS_VISIBLE
.1907a2		e5 1a		sbc $1a		                SBC CURSORX
.1907a4		1a		inc a		                INC A
.1907a5		18		clc		                CLC
.1907a6		65 17		adc $17		                ADC CURSORPOS       ; Add the current cursor position
.1907a8		3a		dec a		                DEC A
.1907a9		a8		tay		                TAY                 ; Make it the destination
.1907aa		3a		dec a		                DEC A               ; Move to the previous column
.1907ab		aa		tax		                TAX                 ; Make it the source
.1907ac		38		sec		                SEC                 ; Calculate the length of the block to move
.1907ad		a5 0f		lda $0f		                LDA COLS_VISIBLE    ; as columns visible - X
.1907af		e5 1a		sbc $1a		                SBC CURSORX
.1907b1		44 af af	mvp $af,$af	                MVP $AF, $AF        ; And move the block
.1907b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1907b6		a9 20		lda #$20	                LDA #CHAR_SP        ; Put a blank space at the cursor position
.1907b8		87 17		sta [$17]	                STA [CURSORPOS]
.1907ba		28		plp		done            PLP
.1907bb		2b		pld		                PLD
.1907bc		68		pla		                PLA
.1907bd		fa		plx		                PLX
.1907be		6b		rtl		                RTL
.1907bf						IPUTB
.1907bf		6b		rtl		                RTL
.1907c0						IPRINTCR
.1907c0		da		phx		                PHX
.1907c1		5a		phy		                PHY
.1907c2		8b		phb		                PHB
.1907c3		0b		phd		                PHD
.1907c4		08		php		                PHP
.1907c5		48		pha		                PHA             ; begin setdbr macro
.1907c6		08		php		                PHP
.1907c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1907c9		a9 00		lda #$00	                LDA #0
.1907cb		48		pha		                PHA
.1907cc		ab		plb		                PLB
.1907cd		28		plp		                PLP
.1907ce		68		pla		                PLA             ; end setdbr macro
.1907cf		48		pha		                PHA             ; begin setdp macro
.1907d0		08		php		                PHP
.1907d1		c2 20		rep #$20	                REP #$20        ; set A long
.1907d3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1907d6		5b		tcd		                TCD
.1907d7		28		plp		                PLP
.1907d8		68		pla		                PLA             ; end setdp macro
.1907d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1907db		c2 10		rep #$10	                REP #$10        ; set X long
.1907dd		af 03 07 00	lda $000703	                LDA @lCHAN_OUT
.1907e1		f0 1c		beq $1907ff	                BEQ scr_printcr
.1907e3		c9 01		cmp #$01	                CMP #CHAN_COM1      ; Check to see if it's the COM1 port
.1907e5		f0 06		beq $1907ed	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907e7		c9 02		cmp #$02	                CMP #CHAN_COM2      ; Check to see if it's the COM2 port
.1907e9		f0 02		beq $1907ed	                BEQ uart_printcr    ; Yes: handle printing to the UART
.1907eb		80 1c		bra $190809	                BRA done
.1907ed		22 2c 57 19	jsl $19572c	uart_printcr    JSL UART_SELECT
.1907f1		a9 0d		lda #$0d	                LDA #CHAR_CR
.1907f3		22 18 10 00	jsl $001018	                JSL PUTC
.1907f7		a9 0a		lda #$0a	                LDA #CHAR_LF
.1907f9		22 18 10 00	jsl $001018	                JSL PUTC
.1907fd		80 0a		bra $190809	                BRA done
.1907ff		a2 00 00	ldx #$0000	scr_printcr     LDX #0
.190802		a4 1c		ldy $1c		                LDY CURSORY
.190804		c8		iny		                INY
.190805		22 84 10 00	jsl $001084	                JSL LOCATE
.190809		28		plp		done            PLP
.19080a		2b		pld		                PLD
.19080b		ab		plb		                PLB
.19080c		7a		ply		                PLY
.19080d		fa		plx		                PLX
.19080e		6b		rtl		                RTL
.19080f		da		phx		ICSRHOME        PHX
.190810		5a		phy		                PHY
.190811		08		php		                PHP
.190812		a2 00 00	ldx #$0000	                LDX #0
.190815		a0 00 00	ldy #$0000	                LDY #0
.190818		22 84 10 00	jsl $001084	                JSL LOCATE
.19081c		28		plp		                PLP
.19081d		7a		ply		                PLY
.19081e		fa		plx		                PLX
.19081f		6b		rtl		                RTL
.190820		da		phx		ICSRRIGHT       PHX
.190821		5a		phy		                PHY
.190822		48		pha		                PHA
.190823		0b		phd		                PHD
.190824		08		php		                PHP
.190825		22 7b 72 19	jsl $19727b	                JSL ANSI_CSRRIGHT
.190829		28		plp		                PLP
.19082a		2b		pld		                PLD
.19082b		68		pla		                PLA
.19082c		7a		ply		                PLY
.19082d		fa		plx		                PLX
.19082e		6b		rtl		                RTL
.19082f						ICSRLEFT
.19082f		da		phx		                PHX
.190830		5a		phy		                PHY
.190831		48		pha		                PHA
.190832		0b		phd		                PHD
.190833		08		php		                PHP
.190834		22 a6 72 19	jsl $1972a6	                JSL ANSI_CSRLEFT
.190838		28		plp		                PLP
.190839		2b		pld		                PLD
.19083a		68		pla		                PLA
.19083b		7a		ply		                PLY
.19083c		fa		plx		                PLX
.19083d		6b		rtl		                RTL
.19083e						ICSRUP
.19083e		da		phx		                PHX
.19083f		5a		phy		                PHY
.190840		48		pha		                PHA
.190841		0b		phd		                PHD
.190842		08		php		                PHP
.190843		22 c4 72 19	jsl $1972c4	                JSL ANSI_CSRUP
.190847		28		plp		                PLP
.190848		2b		pld		                PLD
.190849		68		pla		                PLA
.19084a		7a		ply		                PLY
.19084b		fa		plx		                PLX
.19084c		6b		rtl		                RTL
.19084d		da		phx		ICSRDOWN        PHX
.19084e		5a		phy		                PHY
.19084f		0b		phd		                PHD
.190850		22 e2 72 19	jsl $1972e2	                JSL ANSI_CSRDOWN
.190854		2b		pld		                PLD
.190855		7a		ply		                PLY
.190856		fa		plx		                PLX
.190857		6b		rtl		                RTL
.190858		48		pha		ILOCATE         PHA
.190859		0b		phd		                PHD
.19085a		08		php		                PHP
.19085b		22 05 73 19	jsl $197305	                JSL ANSI_LOCATE
.19085f		28		plp		ilocate_done    PLP
.190860		2b		pld		                PLD
.190861		68		pla		                PLA
.190862		6b		rtl		                RTL
.190863						ISCROLLUP
.190863		48		pha		                PHA
.190864		da		phx		                PHX
.190865		5a		phy		                PHY
.190866		8b		phb		                PHB
.190867		0b		phd		                PHD
.190868		08		php		                PHP
.190869		22 69 73 19	jsl $197369	                JSL ANSI_SCROLLUP
.19086d		28		plp		                PLP
.19086e		2b		pld		                PLD
.19086f		ab		plb		                PLB
.190870		7a		ply		                PLY
.190871		fa		plx		                PLX
.190872		68		pla		                PLA
.190873		6b		rtl		                RTL
.190874		08		php		IPRINTH         PHP
.190875		48		pha		                PHA
.190876						iprinth1
.190876		e2 20		sep #$20	                SEP #$20        ; set A short
.190878		bd 00 00	lda $0000,x	                LDA #0,b,x      ; Read the value to be printed
.19087b		4a		lsr a		                LSR
.19087c		4a		lsr a		                LSR
.19087d		4a		lsr a		                LSR
.19087e		4a		lsr a		                LSR
.19087f		22 ce 08 19	jsl $1908ce	                JSL iprint_digit
.190883		bd 00 00	lda $0000,x	                LDA #0,b,x
.190886		22 ce 08 19	jsl $1908ce	                JSL iprint_digit
.19088a		ca		dex		                DEX
.19088b		88		dey		                DEY
.19088c		d0 e8		bne $190876	                BNE iprinth1
.19088e		68		pla		                PLA
.19088f		28		plp		                PLP
.190890		6b		rtl		                RTL
.190891						IPRINTAH
.190891		48		pha		                PHA
.190892		08		php		                PHP
.190893		8f 44 02 00	sta $000244	                STA @lCPUA            ; Save A where we can use it multiple times
.190897		08		php		                PHP                   ; Get the processor status into A
.190898		e2 20		sep #$20	                SEP #$20        ; set A short
.19089a		c2 10		rep #$10	                REP #$10        ; set X long
.19089c		68		pla		                PLA
.19089d		29 20		and #$20	                AND #%00100000        ; Is M = 1?
.19089f		c9 20		cmp #$20	                CMP #%00100000
.1908a1		f0 14		beq $1908b7	                BEQ eight_bit
.1908a3		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [15..12]
.1908a7		4a		lsr a		                LSR A
.1908a8		4a		lsr a		                LSR A
.1908a9		4a		lsr a		                LSR A
.1908aa		4a		lsr a		                LSR A
.1908ab		22 ce 08 19	jsl $1908ce	                JSL iprint_digit      ; And print it
.1908af		af 45 02 00	lda $000245	                LDA @lCPUA+1          ; Get nibble [11..8]
.1908b3		22 ce 08 19	jsl $1908ce	                JSL iprint_digit      ; And print it
.1908b7		af 44 02 00	lda $000244	eight_bit       LDA @lCPUA            ; Get nibble [7..4]
.1908bb		4a		lsr a		                LSR A
.1908bc		4a		lsr a		                LSR A
.1908bd		4a		lsr a		                LSR A
.1908be		4a		lsr a		                LSR A
.1908bf		22 ce 08 19	jsl $1908ce	                JSL iprint_digit      ; And print it
.1908c3		af 44 02 00	lda $000244	                LDA @lCPUA            ; Get nibble [3..0]
.1908c7		22 ce 08 19	jsl $1908ce	                JSL iprint_digit      ; And print it
.1908cb		28		plp		                PLP
.1908cc		68		pla		                PLA
.1908cd		6b		rtl		                RTL
.1908ce		da		phx		iprint_digit    PHX
.1908cf		c2 20		rep #$20	                REP #$20        ; set A long
.1908d1		29 0f 00	and #$000f	                AND #$0F
.1908d4		aa		tax		                TAX
.1908d5		bf 15 85 19	lda $198515,x	                LDA hex_digits,X
.1908d9		22 1b 07 19	jsl $19071b	                JSL IPUTC       ; Print the digit
.1908dd		fa		plx		                PLX
.1908de		6b		rtl		                RTL
.1908df		48		pha		ICLRSCREEN	    PHA
.1908e0		da		phx		                PHX
.1908e1		08		php		                PHP
.1908e2		22 fe 73 19	jsl $1973fe	                JSL ANSI_CLRSCREEN
.1908e6		28		plp		                PLP
.1908e7		fa		plx		                PLX
.1908e8		68		pla		                PLA
.1908e9		6b		rtl		                RTL
.1908ea						COPYBYTES42
.1908ea		08		php		                PHP
.1908eb		0b		phd		                PHD
.1908ec		48		pha		                PHA             ; begin setdp macro
.1908ed		08		php		                PHP
.1908ee		c2 20		rep #$20	                REP #$20        ; set A long
.1908f0		a9 00 00	lda #$0000	                LDA #TMPPTR1         ; set DP to page 0
.1908f3		5b		tcd		                TCD
.1908f4		28		plp		                PLP
.1908f5		68		pla		                PLA             ; end setdp macro
.1908f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1908f8		c2 10		rep #$10	                REP #$10        ; set X long
.1908fa		a0 00 00	ldy #$0000	                LDY #0
.1908fd		b7 00		lda [$00],y	copy_loop       LDA [TMPPTR1],Y
.1908ff		97 04		sta [$04],y	                STA [TMPPTR2],Y
.190901		c8		iny		                INY
.190902		c0 2a 00	cpy #$002a	                CPY #42
.190905		d0 f6		bne $1908fd	                BNE copy_loop
.190907		2b		pld		                PLD
.190908		28		plp		                PLP
.190909		60		rts		                RTS
.19090a						ICOLORFLAG
.19090a		48		pha		                PHA
.19090b		da		phx		                PHX
.19090c		5a		phy		                PHY
.19090d		08		php		                PHP
.19090e		8b		phb		                PHB
.19090f		0b		phd		                PHD
.190910		48		pha		                PHA             ; begin setdp macro
.190911		08		php		                PHP
.190912		c2 20		rep #$20	                REP #$20        ; set A long
.190914		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.190917		5b		tcd		                TCD
.190918		28		plp		                PLP
.190919		68		pla		                PLA             ; end setdp macro
.19091a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19091c		a9 00 c0	lda #$c000	                LDA #<>CS_COLOR_MEM_PTR
.19091f		85 04		sta $04		                STA TMPPTR2
.190921		a9 af 00	lda #$00af	                LDA #`CS_COLOR_MEM_PTR
.190924		85 06		sta $06		                STA TMPPTR2+2
.190926		a9 72 81	lda #$8172	                LDA #<>greet_clr_line1
.190929		85 00		sta $00		                STA TMPPTR1
.19092b		a9 19 00	lda #$0019	                LDA #`greet_clr_line1
.19092e		85 02		sta $02		                STA TMPPTR1+2
.190930		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.190933		18		clc		                CLC
.190934		a5 04		lda $04		                LDA TMPPTR2
.190936		65 11		adc $11		                ADC COLS_PER_LINE
.190938		85 04		sta $04		                STA TMPPTR2
.19093a		a9 9c 81	lda #$819c	                LDA #<>greet_clr_line2
.19093d		85 00		sta $00		                STA TMPPTR1
.19093f		a9 19 00	lda #$0019	                LDA #`greet_clr_line2
.190942		85 02		sta $02		                STA TMPPTR1+2
.190944		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.190947		18		clc		                CLC
.190948		a5 04		lda $04		                LDA TMPPTR2
.19094a		65 11		adc $11		                ADC COLS_PER_LINE
.19094c		85 04		sta $04		                STA TMPPTR2
.19094e		a9 c6 81	lda #$81c6	                LDA #<>greet_clr_line3
.190951		85 00		sta $00		                STA TMPPTR1
.190953		a9 19 00	lda #$0019	                LDA #`greet_clr_line3
.190956		85 02		sta $02		                STA TMPPTR1+2
.190958		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.19095b		18		clc		                CLC
.19095c		a5 04		lda $04		                LDA TMPPTR2
.19095e		65 11		adc $11		                ADC COLS_PER_LINE
.190960		85 04		sta $04		                STA TMPPTR2
.190962		a9 f0 81	lda #$81f0	                LDA #<>greet_clr_line4
.190965		85 00		sta $00		                STA TMPPTR1
.190967		a9 19 00	lda #$0019	                LDA #`greet_clr_line4
.19096a		85 02		sta $02		                STA TMPPTR1+2
.19096c		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.19096f		18		clc		                CLC
.190970		a5 04		lda $04		                LDA TMPPTR2
.190972		65 11		adc $11		                ADC COLS_PER_LINE
.190974		85 04		sta $04		                STA TMPPTR2
.190976		a9 1a 82	lda #$821a	                LDA #<>greet_clr_line5
.190979		85 00		sta $00		                STA TMPPTR1
.19097b		a9 19 00	lda #$0019	                LDA #`greet_clr_line5
.19097e		85 02		sta $02		                STA TMPPTR1+2
.190980		20 ea 08	jsr $1908ea	                JSR COPYBYTES42
.190983		2b		pld		                PLD
.190984		ab		plb		                PLB
.190985		28		plp		                PLP
.190986		7a		ply		                PLY
.190987		fa		plx		                PLX
.190988		68		pla		                PLA
.190989		6b		rtl		                RTL
.19098a		0b		phd		IINITCHLUT		  PHD
.19098b		08		php		                PHP
.19098c		48		pha		                PHA
.19098d		da		phx		                PHX
.19098e		22 00 6c 19	jsl $196c00	                JSL ANSI_INIT_LUTS
.190992		fa		plx		                PLX
.190993		68		pla		                PLA
.190994		28		plp		                PLP
.190995		2b		pld		                PLD
.190996		6b		rtl		                RTL
.190997						IINITGAMMATABLE
.190997		e2 20		sep #$20	                SEP #$20        ; set A short
.190999		c2 10		rep #$10	                REP #$10        ; set X long
.19099b		a2 00 00	ldx #$0000	                ldx #$0000
.19099e		bf 00 8a 19	lda $198a00,x	initgammaloop   LDA GAMMA_1_8_Tbl, x
.1909a2		9f 00 40 af	sta $af4000,x	                STA GAMMA_B_LUT_PTR, x
.1909a6		9f 00 41 af	sta $af4100,x	                STA GAMMA_G_LUT_PTR, x
.1909aa		9f 00 42 af	sta $af4200,x	                STA GAMMA_R_LUT_PTR, x
.1909ae		e8		inx		                inx
.1909af		e0 00 01	cpx #$0100	                cpx #$0100
.1909b2		d0 ea		bne $19099e	                bne initgammaloop
.1909b4		c2 30		rep #$30	                REP #$30        ; set A&X long
.1909b6		6b		rtl		                RTL
.1909b7		48		pha		IINITALLLUT     PHA
.1909b8		da		phx		                PHX
.1909b9		a2 00 00	ldx #$0000	                LDX #$0000
.1909bc		e2 20		sep #$20	                SEP #$20        ; set A short
.1909be		a9 00		lda #$00	                LDA #$00
.1909c0		85 0a		sta $0a		                STA $0A     ; Temp Location
.1909c2						iinit_lut_loop
.1909c2		86 02		stx $02		                STX $02
.1909c4		a6 0a		ldx $0a		                LDX $0A
.1909c6		bf 00 89 19	lda $198900,x	                LDA GAMMA_2_2_Tbl, x
.1909ca		49 55		eor #$55	                EOR  #$55
.1909cc		a6 02		ldx $02		                LDX $02
.1909ce		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909d2		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.1909d6		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.1909da		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.1909de		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.1909e2		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.1909e6		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.1909ea		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.1909ee		e8		inx		                inx
.1909ef		86 02		stx $02		                STX $02
.1909f1		a6 0a		ldx $0a		                LDX $0A
.1909f3		bf 00 8b 19	lda $198b00,x	                LDA RANDOM_LUT_Tbl, x
.1909f7		a6 02		ldx $02		                LDX $02
.1909f9		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.1909fd		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a01		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a05		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a09		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a0d		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a11		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a15		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a19		e8		inx		                inx
.190a1a		86 02		stx $02		                STX $02
.190a1c		a6 0a		ldx $0a		                LDX $0A
.190a1e		bf 00 8a 19	lda $198a00,x	                LDA GAMMA_1_8_Tbl, x
.190a22		49 aa		eor #$aa	                EOR  #$AA
.190a24		a6 02		ldx $02		                LDX $02
.190a26		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a2a		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a2e		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a32		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a36		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a3a		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a3e		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a42		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a46		e8		inx		                inx
.190a47		a9 ff		lda #$ff	                LDA #$FF
.190a49		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR, x
.190a4d		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR, x
.190a51		9f 00 28 af	sta $af2800,x	                STA @lGRPH_LUT2_PTR, x
.190a55		9f 00 2c af	sta $af2c00,x	                STA @lGRPH_LUT3_PTR, x
.190a59		9f 00 30 af	sta $af3000,x	                STA @lGRPH_LUT4_PTR, x
.190a5d		9f 00 34 af	sta $af3400,x	                STA @lGRPH_LUT5_PTR, x
.190a61		9f 00 38 af	sta $af3800,x	                STA @lGRPH_LUT6_PTR, x
.190a65		9f 00 3c af	sta $af3c00,x	                STA @lGRPH_LUT7_PTR, x
.190a69		e6 0a		inc $0a		                inc $0A
.190a6b		e8		inx		                inx
.190a6c		e0 00 04	cpx #$0400	                cpx #$0400
.190a6f		f0 03		beq $190a74	                beq iinit_lut_exit
.190a71		82 4e ff	brl $1909c2	                brl iinit_lut_loop
.190a74						iinit_lut_exit
.190a74		c2 30		rep #$30	                REP #$30        ; set A&X long
.190a76		fa		plx		                PLX
.190a77		68		pla		                PLA
.190a78		6b		rtl		                RTL
.190a79						INITVKYTXTMODE_BYPASS_DPSW
.190a79		48		pha		                PHA
.190a7a		08		php		                PHP
.190a7b		80 24		bra $190aa1	                BRA WeNeed640480Here
.190a7d						IINITVKYTXTMODE
.190a7d		48		pha		                PHA
.190a7e		08		php		                PHP
.190a7f		e2 20		sep #$20	                SEP #$20        ; set A short
.190a81		af 02 00 af	lda $af0002	                LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.190a85		29 10		and #$10	                AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.190a87		c9 10		cmp #$10	                CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.190a89		f0 16		beq $190aa1	                BEQ WeNeed640480Here
.190a8b		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190a8f		29 01		and #$01	                AND #Mstr_Ctrl_Video_Mode0
.190a91		c9 01		cmp #$01	                CMP #Mstr_Ctrl_Video_Mode0
.190a93		f0 33		beq $190ac8	                BEQ INITVICKYMODEHIRES       ; if we are already in 800x600 Skip to the rest of the Init
.190a95		af 01 00 af	lda $af0001	                LDA @L MASTER_CTRL_REG_H
.190a99		09 01		ora #$01	                ORA #Mstr_Ctrl_Video_Mode0
.190a9b		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190a9f		80 27		bra $190ac8	                BRA INITVICKYMODEHIRES
.190aa1						WeNeed640480Here:
.190aa1		e2 20		sep #$20	                SEP #$20        ; set A short
.190aa3		af 01 00 af	lda $af0001	                LDA @l MASTER_CTRL_REG_H
.190aa7		29 01		and #$01	                AND #$01
.190aa9		c9 01		cmp #$01	                CMP #$01
.190aab		d0 15		bne $190ac2	                BNE INITVICKYMODE
.190aad		a9 00		lda #$00	                LDA #$00
.190aaf		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190ab3		ea		nop		                NOP
.190ab4		ea		nop		                NOP
.190ab5		ea		nop		                NOP
.190ab6		ea		nop		                NOP
.190ab7		ea		nop		                NOP
.190ab8		a9 01		lda #$01	                LDA #$01
.190aba		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H
.190abe		ea		nop		                NOP
.190abf		ea		nop		                NOP
.190ac0		ea		nop		                NOP
.190ac1		ea		nop		                NOP
.190ac2						INITVICKYMODE
.190ac2		a9 00		lda #$00	                LDA #$00
.190ac4		8f 01 00 af	sta $af0001	                STA @L MASTER_CTRL_REG_H ; Set it to 640x480 for real
.190ac8						INITVICKYMODEHIRES
.190ac8		a9 01		lda #$01	                LDA #Mstr_Ctrl_Text_Mode_En
.190aca		8f 00 00 af	sta $af0000	                STA @L MASTER_CTRL_REG_L
.190ace		e2 20		sep #$20	                SEP #$20        ; set A short
.190ad0		a9 00		lda #$00	                LDA #$00
.190ad2		8f 07 00 af	sta $af0007	                STA BORDER_COLOR_R
.190ad6		a9 54		lda #$54	                LDA #$54
.190ad8		8f 06 00 af	sta $af0006	                STA BORDER_COLOR_G
.190adc		a9 54		lda #$54	                LDA #$54
.190ade		8f 05 00 af	sta $af0005	                STA BORDER_COLOR_B
.190ae2		a9 01		lda #$01	                LDA #Border_Ctrl_Enable           ; Enable the Border
.190ae4		8f 04 00 af	sta $af0004	                STA BORDER_CTRL_REG
.190ae8		a9 20		lda #$20	                LDA #32                           ; Set the border to the standard 32 pixels
.190aea		8f 08 00 af	sta $af0008	                STA BORDER_X_SIZE
.190aee		8f 09 00 af	sta $af0009	                STA BORDER_Y_SIZE
.190af2		c2 30		rep #$30	                REP #$30        ; set A&X long
.190af4		22 2c 11 00	jsl $00112c	                JSL SETSIZES                      ; Calculate the size of the text screen
.190af8		28		plp		                PLP
.190af9		68		pla		                PLA
.190afa		6b		rtl		                RTL
.190afb						ISETSIZES
.190afb		22 d1 6c 19	jsl $196cd1	                JSL ANSI_SETSIZES
.190aff		6b		rtl		                RTL
.190b00						IINITVKYGRPMODE
.190b00		48		pha		                PHA
.190b01		e2 20		sep #$20	                SEP #$20        ; set A short
.190b03		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b05		8f 00 01 af	sta $af0100	                STA @lBM0_CONTROL_REG
.190b09		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b0b		8f 01 01 af	sta $af0101	                STA @lBM0_START_ADDY_L
.190b0f		a9 c0		lda #$c0	                LDA #$C0
.190b11		8f 02 01 af	sta $af0102	                STA @lBM0_START_ADDY_M
.190b15		a9 00		lda #$00	                LDA #$00
.190b17		8f 03 01 af	sta $af0103	                STA @lBM0_START_ADDY_H ; This address is always base from
.190b1b		a9 00		lda #$00	                LDA #$00          ; Enable Bit-Map and uses LUT0
.190b1d		8f 08 01 af	sta $af0108	                STA @lBM1_CONTROL_REG
.190b21		a9 00		lda #$00	                LDA #$00          ;; (L)Load Base Address of where Bitmap begins
.190b23		8f 09 01 af	sta $af0109	                STA @lBM1_START_ADDY_L
.190b27		a9 c0		lda #$c0	                LDA #$C0
.190b29		8f 0a 01 af	sta $af010a	                STA @lBM1_START_ADDY_M
.190b2d		a9 00		lda #$00	                LDA #$00
.190b2f		8f 0b 01 af	sta $af010b	                STA @lBM1_START_ADDY_H ; This address is always base from
.190b33		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b35		68		pla		                PLA
.190b36		6b		rtl		                RTL
.190b37						IINITTILEMODE
.190b37		6b		rtl		                RTL
.190b38						IREADVRAM
.190b38		08		php		                PHP
.190b39		e2 20		sep #$20	                SEP #$20        ; set A short
.190b3b		bd 00 00	lda $000000,x	                LDA #0,B,X                      ; Request the byte
.190b3e		c2 20		rep #$20	                REP #$20        ; set A long
.190b40		a2 64 00	ldx #$0064	                LDX #100
.190b43		af 02 09 af	lda $af0902	wait_loop       LDA @l VMEM2CPU_Fifo_Count_LO   ; Wait for the FIFO to have data
.190b47		89 00 80	bit #$8000	                BIT #$8000
.190b4a		f0 06		beq $190b52	                BEQ read_byte                   ; If it has data, go read the byte
.190b4c		ca		dex		                DEX                             ; Otherwise, decrement timeout counter
.190b4d		d0 f4		bne $190b43	                BNE wait_loop                   ; Keep waiting so long as it's not 0
.190b4f		28		plp		ret_failure     PLP                             ; Return failure
.190b50		18		clc		                CLC
.190b51		6b		rtl		                RTL
.190b52						read_byte
.190b52		e2 20		sep #$20	                SEP #$20        ; set A short
.190b54		af 01 09 af	lda $af0901	                LDA @l VMEM2CPU_Data_Port       ; Get the byte from Vicky
.190b58		28		plp		ret_success     PLP                             ; Return success
.190b59		18		clc		                CLC
.190b5a		6b		rtl		                RTL
.190b5b		6b		rtl		INOP            RTL
.190b5c						IINITFONTSET
.190b5c		48		pha		                PHA
.190b5d		da		phx		                PHX
.190b5e		5a		phy		                PHY
.190b5f		8b		phb		                PHB
.190b60		08		php		                PHP
.190b61		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b63		a2 00 00	ldx #$0000	                LDX #<>FONT_4_BANK0         ; Font data to load
.190b66		a0 00 80	ldy #$8000	                LDY #<>FONT_MEMORY_BANK0    ; Location to load the font data
.190b69		a9 00 08	lda #$0800	                LDA #8 * 256                ; Size of a FONT in bytes
.190b6c		54 af 1f	mvn $1f,$af	                MVN #`FONT_4_BANK0, #`FONT_MEMORY_BANK0
.190b6f		28		plp		                PLP
.190b70		ab		plb		                PLB
.190b71		7a		ply		                PLY
.190b72		fa		plx		                PLX
.190b73		68		pla		                PLA
.190b74		6b		rtl		                RTL
.190b75						INITMOUSEPOINTER
.190b75		e2 20		sep #$20	                SEP #$20        ; set A short
.190b77		c2 10		rep #$10	                REP #$10        ; set X long
.190b79		a2 00 00	ldx #$0000	                LDX #$0000
.190b7c						FILL_MOUSE_MARKER
.190b7c		bf 00 8c 19	lda $198c00,x	                LDA @lMOUSE_POINTER_PTR,X
.190b80		9f 00 05 af	sta $af0500,x	                STA @lMOUSE_PTR_GRAP0_START, X
.190b84		e8		inx		                INX
.190b85		e0 00 01	cpx #$0100	                CPX #$0100
.190b88		d0 f2		bne $190b7c	                BNE FILL_MOUSE_MARKER
.190b8a		ea		nop		                nop
.190b8b		a9 01		lda #$01	                LDA #$01
.190b8d		8f 00 07 af	sta $af0700	                STA @lMOUSE_PTR_CTRL_REG_L  ; Enable Mouse, Mouse Pointer Graphic Bank 0
.190b91		c2 30		rep #$30	                REP #$30        ; set A&X long
.190b93		6b		rtl		                RTL
.190b94						IINITCURSOR
.190b94		e2 20		sep #$20	                SEP #$20        ; set A short
.190b96		a9 b1		lda #$b1	                LDA #$B1      ;The Cursor Character will be a Fully Filled Block
.190b98		8f 12 00 af	sta $af0012	                STA VKY_TXT_CURSOR_CHAR_REG
.190b9c		a9 03		lda #$03	                LDA #$03      ;Set Cursor Enable And Flash Rate @1Hz
.190b9e		8f 10 00 af	sta $af0010	                STA VKY_TXT_CURSOR_CTRL_REG ;
.190ba2		c2 30		rep #$30	                REP #$30        ; set A&X long
.190ba4		a9 00 00	lda #$0000	                LDA #$0000;
.190ba7		8f 14 00 af	sta $af0014	                STA VKY_TXT_CURSOR_X_REG_L; // Set the X to Position 1
.190bab		a9 06 00	lda #$0006	                LDA #$0006;
.190bae		8f 16 00 af	sta $af0016	                STA VKY_TXT_CURSOR_Y_REG_L; // Set the Y to Position 6 (Below)
.190bb2		6b		rtl		                RTL
.190bb3		0b		phd		IINITSUPERIO	  PHD
.190bb4		08		php		                PHP
.190bb5		48		pha		                PHA
.190bb6		e2 20		sep #$20	                SEP #$20        ; set A short
.190bb8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bba		8f 23 11 af	sta $af1123	                STA GP10_REG
.190bbe		af 23 11 af	lda $af1123	                LDA GP10_REG
.190bc2		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bc4		8f 24 11 af	sta $af1124	                STA GP11_REG
.190bc8		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bca		8f 25 11 af	sta $af1125	                STA GP12_REG
.190bce		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bd0		8f 26 11 af	sta $af1126	                STA GP13_REG
.190bd4		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BX) Bit[0] = 1, Bit[2] = 1
.190bd6		8f 27 11 af	sta $af1127	                STA GP14_REG
.190bda		a9 05		lda #$05	                LDA #$05		;(C256 - POT A Analog BY) Bit[0] = 1, Bit[2] = 1
.190bdc		8f 28 11 af	sta $af1128	                STA GP15_REG
.190be0		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BX) Bit[0] = 1, Bit[2] = 1
.190be2		8f 29 11 af	sta $af1129	                STA GP16_REG
.190be6		a9 05		lda #$05	                LDA #$05		;(C256 - POT B Analog BY) Bit[0] = 1, Bit[2] = 1
.190be8		8f 2a 11 af	sta $af112a	                STA GP17_REG
.190bec		a9 00		lda #$00	                LDA #$00		;(C256 - HEADPHONE MUTE) - Output GPIO - Push-Pull (1 - Headphone On, 0 - HeadPhone Off)
.190bee		8f 2b 11 af	sta $af112b	                STA GP20_REG
.190bf2		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190bf4		8f 2f 11 af	sta $af112f	                STA GP24_REG
.190bf8		a9 05		lda #$05	                LDA #$05		;(C256 - MIDI IN) Bit[0] = 1, Bit[2] = 1 (Page 132 Manual)
.190bfa		8f 30 11 af	sta $af1130	                STA GP25_REG
.190bfe		a9 84		lda #$84	                LDA #$84		;(C256 - MIDI OUT) Bit[2] = 1, Bit[7] = 1 (Open Drain - To be Checked)
.190c00		8f 31 11 af	sta $af1131	                STA GP26_REG
.190c04		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 1) Setup as GPIO Input for now
.190c06		8f 33 11 af	sta $af1133	                STA GP30_REG
.190c0a		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 4) Setup as GPIO Input for now
.190c0c		8f 34 11 af	sta $af1134	                STA GP31_REG
.190c10		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 3) Setup as GPIO Input for now
.190c12		8f 35 11 af	sta $af1135	                STA GP32_REG
.190c16		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 6) Setup as GPIO Input for now
.190c18		8f 36 11 af	sta $af1136	                STA GP33_REG
.190c1c		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 5) Setup as GPIO Input for now
.190c1e		8f 37 11 af	sta $af1137	                STA GP34_REG
.190c22		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 8) Setup as GPIO Input for now
.190c24		8f 38 11 af	sta $af1138	                STA GP35_REG
.190c28		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 7) Setup as GPIO Input for now
.190c2a		8f 39 11 af	sta $af1139	                STA GP36_REG
.190c2e		a9 01		lda #$01	                LDA #$01		;Default Value - (C256 - JP1 Fanout Pin 10) Setup as GPIO Input for now
.190c30		8f 3a 11 af	sta $af113a	                STA GP37_REG
.190c34		a9 01		lda #$01	                LDA #$01		;Default Value - C256 Doesn't use this IO Pin
.190c36		8f 3d 11 af	sta $af113d	                STA GP42_REG
.190c3a		a9 01		lda #$01	                LDA #$01		;(C256 - INPUT PLL CLK INTERRUPT) Default Value - Will keep it as an input for now, no real usage for now
.190c3c		8f 3e 11 af	sta $af113e	                STA GP43_REG
.190c40		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RI2) - Input - Set Secondary Function
.190c42		8f 3f 11 af	sta $af113f	                STA GP50_REG
.190c46		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DCD2) - Input - Set Secondary Function
.190c48		8f 40 11 af	sta $af1140	                STA GP51_REG
.190c4c		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - RXD2) - Input - Set Secondary Function
.190c4e		8f 41 11 af	sta $af1141	                STA GP52_REG
.190c52		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - TXD2) - Output - Set Secondary Function
.190c54		8f 42 11 af	sta $af1142	                STA GP53_REG
.190c58		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - DSR2) - Input - Set Secondary Function
.190c5a		8f 43 11 af	sta $af1143	                STA GP54_REG
.190c5e		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - RTS2) - Output - Set Secondary Function
.190c60		8f 44 11 af	sta $af1144	                STA GP55_REG
.190c64		a9 05		lda #$05	                LDA #$05		;(C256 - UART2 - CTS2) - Input - Set Secondary Function
.190c66		8f 45 11 af	sta $af1145	                STA GP56_REG
.190c6a		a9 04		lda #$04	                LDA #$04		;(C256 - UART2 - DTR2) - Output - Set Secondary Function
.190c6c		8f 46 11 af	sta $af1146	                STA GP57_REG
.190c70		a9 84		lda #$84	                LDA #$84		;(C256 - LED1) - Open Drain - Output
.190c72		8f 47 11 af	sta $af1147	                STA GP60_REG
.190c76		a9 84		lda #$84	                LDA #$84		;(C256 - LED2) - Open Drain - Output
.190c78		8f 48 11 af	sta $af1148	                STA GP61_REG
.190c7c		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP10..GP17) - Not Used
.190c7e		8f 4b 11 af	sta $af114b	                STA GP1_REG
.190c82		a9 01		lda #$01	                LDA #$01		;GPIO Data Register (GP20..GP27) - Bit[0] - Headphone Mute (Enabling it)
.190c84		8f 4c 11 af	sta $af114c	                STA GP2_REG
.190c88		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP30..GP37) - Since it is in Output mode, nothing to write here.
.190c8a		8f 4d 11 af	sta $af114d	                STA GP3_REG
.190c8e		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP40..GP47)  - Not Used
.190c90		8f 4e 11 af	sta $af114e	                STA GP4_REG
.190c94		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP50..GP57)  - Not Used
.190c96		8f 4f 11 af	sta $af114f	                STA GP5_REG
.190c9a		a9 00		lda #$00	                LDA #$00		;GPIO Data Register (GP60..GP61)  - Not Used
.190c9c		8f 50 11 af	sta $af1150	                STA GP6_REG
.190ca0		a9 01		lda #$01	                LDA #$01		;LED1 Output - Already setup by Vicky Init Phase, for now, I will leave it alone
.190ca2		8f 5d 11 af	sta $af115d	                STA LED1_REG
.190ca6		a9 02		lda #$02	                LDA #$02		;LED2 Output - However, I will setup this one, to make sure the Code works (Full On, when Code was ran)
.190ca8		8f 5e 11 af	sta $af115e	                STA LED2_REG
.190cac		c2 20		rep #$20	                REP #$20        ; set A long
.190cae		68		pla		                PLA
.190caf		28		plp			              PLP
.190cb0		2b		pld				            PLD
.190cb1		6b		rtl		                RTL
.190cb2						Poll_Inbuf
.190cb2		af 07 18 af	lda $af1807	                LDA STATUS_PORT		; Load Status Byte
.190cb6		29 02		and #$02					        AND	#<INPT_BUF_FULL	; Test bit $02 (if 0, Empty)
.190cb8		c9 02		cmp #$02					        CMP #<INPT_BUF_FULL
.190cba		f0 f6		beq $190cb2					        BEQ Poll_Inbuf
.190cbc		60		rts		                RTS
.190cbd						Poll_Outbuf
.190cbd		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.190cc1		29 01		and #$01	                AND #OUT_BUF_FULL ; Test bit $01 (if 1, Full)
.190cc3		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.190cc5		d0 f6		bne $190cbd	                BNE Poll_Outbuf
.190cc7		60		rts		                RTS
.190cc8		48		pha		INITRTC         PHA
.190cc9		08		php		                PHP
.190cca		e2 20		sep #$20	                SEP #$20        ; set A short
.190ccc		a9 00		lda #$00	                LDA #0
.190cce		8f 0b 08 af	sta $af080b	                STA @l RTC_RATES    ; Set watch dog timer and periodic interrupt rates to 0
.190cd2		8f 0c 08 af	sta $af080c	                STA @l RTC_ENABLE   ; Disable all the alarms and interrupts
.190cd6		af 0e 08 af	lda $af080e	                LDA @lRTC_CTRL      ; Make sure the RTC will continue to tick in battery mode
.190cda		09 04		ora #$04	                ORA #%00000100
.190cdc		8f 0e 08 af	sta $af080e	                STA @lRTC_CTRL
.190ce0		28		plp		                PLP
.190ce1		68		pla		                PLA
.190ce2		6b		rtl		                RTL
.190ce3		48		pha		IINITCODEC      PHA
.190ce4		08		php		                PHP
.190ce5		c2 20		rep #$20	                REP #$20        ; set A long
.190ce7		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R10 - Programming the DAC
.190cea		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cee		a9 01 00	lda #$0001	                LDA #$0001
.190cf1		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190cf5		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190cf8		a9 00 1a	lda #$1a00	                LDA #%0001101000000000     ;R13 - Turn On Headphones
.190cfb		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190cff		a9 01 00	lda #$0001	                LDA #$0001
.190d02		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d06		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190d09		a9 1e 2a	lda #$2a1e	                LDA #%0010101000011110       ;R21 - Enable All the Analog In
.190d0c		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d10		a9 01 00	lda #$0001	                LDA #$0001
.190d13		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d17		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190d1a		a9 01 23	lda #$2301	                LDA #%0010001100000001      ;R17 - Enable All the Analog In
.190d1d		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d21		a9 01 00	lda #$0001	                LDA #$0001
.190d24		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d28		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190d2b		a9 07 2c	lda #$2c07	                LDA #%0010110000000111      ;R22 - Enable all Analog Out
.190d2e		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d32		a9 01 00	lda #$0001	                LDA #$0001
.190d35		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d39		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190d3c		a9 02 14	lda #$1402	                LDA #%0001010000000010      ;R10 - DAC Interface Control
.190d3f		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d43		a9 01 00	lda #$0001	                LDA #$0001
.190d46		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d4a		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190d4d		a9 02 16	lda #$1602	                LDA #%0001011000000010      ;R11 - ADC Interface Control
.190d50		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d54		a9 01 00	lda #$0001	                LDA #$0001
.190d57		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d5b		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190d5e		a9 45 18	lda #$1845	                LDA #%0001100_001000101      ;R12 - Master Mode Control
.190d61		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d65		a9 01 00	lda #$0001	                LDA #$0001
.190d68		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d6c		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190d6f		28		plp		                PLP
.190d70		68		pla		                PLA
.190d71		6b		rtl		                RTL
.190d72						IRESETCODEC
.190d72		c2 20		rep #$20	                REP #$20        ; set A long
.190d74		a9 00 2e	lda #$2e00	                LDA #$2E00      ;R22 - Enable all Analog Out
.190d77		8f 00 e9 af	sta $afe900	                STA CODEC_DATA_LO
.190d7b		a9 01 00	lda #$0001	                LDA #$0001
.190d7e		8f 02 e9 af	sta $afe902	                STA CODEC_WR_CTRL             ; Execute the Write
.190d82		20 86 0d	jsr $190d86	                JSR CODEC_TRF_FINISHED
.190d85		6b		rtl		                RTL
.190d86						CODEC_TRF_FINISHED
.190d86		e2 20		sep #$20	                SEP #$20        ; set A short
.190d88		af 02 e9 af	lda $afe902	CODEC_LOOP      LDA CODEC_WR_CTRL
.190d8c		29 01		and #$01	                AND #$01
.190d8e		c9 01		cmp #$01	                CMP #$01
.190d90		f0 f6		beq $190d88	                BEQ CODEC_LOOP
.190d92		c2 20		rep #$20	                REP #$20        ; set A long
.190d94		60		rts		                RTS
.190d95						IBM_FILL_SCREEN
.190d95		c2 30		rep #$30	                REP #$30        ; set A&X long
.190d97		a9 00 00	lda #$0000	                LDA #$0000
.190d9a		a2 00 00	ldx #$0000	                LDX #$0000
.190d9d						BM_FILL_SCREEN_LOOPY
.190d9d		a0 00 00	ldy #$0000	                LDY #$0000
.190da0		e2 20		sep #$20	                SEP #$20        ; set A short
.190da2						BM_FILL_SCREEN_LOOPX
.190da2		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190da4		c8		iny		                INY
.190da5		c4 40		cpy $40		                CPY BM_CLEAR_SCRN_X              ; Transfer the First line
.190da7		d0 f9		bne $190da2	                BNE BM_FILL_SCREEN_LOOPX
.190da9		20 b4 0d	jsr $190db4	                JSR BM_FILL_COMPUTE_Y_DST
.190dac		e8		inx		                INX
.190dad		e4 42		cpx $42		                CPX BM_CLEAR_SCRN_Y
.190daf		d0 ec		bne $190d9d	                BNE BM_FILL_SCREEN_LOOPY
.190db1		c2 30		rep #$30	                REP #$30        ; set A&X long
.190db3		6b		rtl		                RTL
.190db4						BM_FILL_COMPUTE_Y_DST
.190db4		c2 20		rep #$20	                REP #$20        ; set A long
.190db6		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190db8		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190dbc		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2      ; Right now it is set @ $020000 (128K)
.190dbe		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190dc2		a9 80 02	lda #$0280	                LDA #$280        ; Right now it is set @ $020000 (128K) + File Size
.190dc5		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190dc9		a9 00 00	lda #$0000	                LDA #$0000
.190dcc		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190dd0		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190dd4		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190dd6		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190dda		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190ddc		a9 00 00	lda #$0000	                LDA #$0000
.190ddf		60		rts		                RTS
.190de0						IBMP_PARSER
.190de0		c2 30		rep #$30	                REP #$30        ; set A&X long
.190de2		a0 00 00	ldy #$0000	                LDY #$0000
.190de5		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y
.190de7		c9 42 4d	cmp #$4d42	                CMP #$4D42
.190dea		f0 03		beq $190def	                BEQ IBMP_PARSER_CONT
.190dec		82 04 01	brl $190ef3	                BRL BMP_PARSER_END_WITH_ERROR
.190def						IBMP_PARSER_CONT
.190def		a0 02 00	ldy #$0002	                LDY #$0002
.190df2		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size Low Short
.190df4		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190df8		a0 04 00	ldy #$0004	                LDY #$0004
.190dfb		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; File Size High Short
.190dfd		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e01		a9 ff ff	lda #$ffff	                LDA #$FFFF                  ; Store -1 in Adder (B)
.190e04		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190e08		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e0c		18		clc		                CLC
.190e0d		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190e11		85 50		sta $50		                STA BMP_FILE_SIZE
.190e13		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190e17		85 52		sta $52		                STA BMP_FILE_SIZE+2
.190e19		a0 12 00	ldy #$0012	                LDY #$0012
.190e1c		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e1e		85 40		sta $40		                STA BMP_X_SIZE
.190e20		a0 16 00	ldy #$0016	                LDY #$0016
.190e23		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e25		85 42		sta $42		                STA BMP_Y_SIZE
.190e27		a0 2e 00	ldy #$002e	                LDY #$002E
.190e2a		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; The X SIze is 32bits in BMP, but 16bits will suffice
.190e2c		0a		asl a		                ASL A; Multiply by 2
.190e2d		0a		asl a		                ASL A; Multiply by 2
.190e2e		85 4c		sta $4c		                STA BMP_COLOR_PALET         ;
.190e30		e0 00 00	cpx #$0000	                CPX #$0000
.190e33		d0 05		bne $190e3a	                BNE BMP_LUT1_PICK
.190e35		20 fb 0e	jsr $190efb	                JSR BMP_PARSER_UPDATE_LUT0   ; Go Upload the LUT0
.190e38		80 08		bra $190e42	                BRA DONE_TRANSFER_LUT;
.190e3a						  BMP_LUT1_PICK
.190e3a		e0 01 00	cpx #$0001	                CPX #$0001
.190e3d		d0 03		bne $190e42	                BNE BMP_LUT2_PICK
.190e3f		20 2b 0f	jsr $190f2b	                JSR BMP_PARSER_UPDATE_LUT1   ; Go Upload the LUT1
.190e42						  BMP_LUT2_PICK
.190e42						  DONE_TRANSFER_LUT
.190e42		a5 56		lda $56		                LDA BMP_POSITION_Y
.190e44		8f 00 01 00	sta $000100	                STA @lUNSIGNED_MULT_A_LO
.190e48		a5 4e		lda $4e		                LDA SCRN_X_STRIDE
.190e4a		8f 02 01 00	sta $000102	                STA @lUNSIGNED_MULT_B_LO
.190e4e		af 04 01 00	lda $000104	                LDA @lUNSIGNED_MULT_AL_LO
.190e52		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e56		af 06 01 00	lda $000106	                LDA @lUNSIGNED_MULT_AL_LO+2
.190e5a		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e5e		a5 54		lda $54		                LDA BMP_POSITION_X
.190e60		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Put the X Position Adder (B)
.190e64		a9 00 00	lda #$0000	                LDA #$0000
.190e67		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190e6b		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in TEMP
.190e6f		85 f0		sta $f0		                STA USER_TEMP
.190e71		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in TEMP
.190e75		85 f2		sta $f2		                STA USER_TEMP+2
.190e77		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190e79		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL          ; Store in 32Bit Adder (A)
.190e7d		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190e7f		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL          ; Store in 32Bit Adder (A)
.190e83		a5 f0		lda $f0		                LDA USER_TEMP
.190e85		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store in 32Bit Adder (B)
.190e89		a5 f2		lda $f2		                LDA USER_TEMP+2
.190e8b		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in 32Bit Adder (B)
.190e8f		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL          ; Put the Results in BMP_PRSE_DST_PTR
.190e93		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190e95		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL          ; Put the Results in BMP_PRSE_DST_PTR
.190e99		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190e9b		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K)
.190e9d		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190ea1		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2        ; Right now it is set @ $020000 (128K)
.190ea3		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ea7		a5 50		lda $50		                LDA BMP_FILE_SIZE
.190ea9		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL
.190ead		a5 52		lda $52		                LDA BMP_FILE_SIZE+2
.190eaf		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL
.190eb3		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190eb7		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190eb9		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ebd		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190ebf		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190ec1		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190ec5		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190ec7		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190ecb		18		clc		                CLC
.190ecc		a5 40		lda $40		                LDA BMP_X_SIZE              ; Load The Size in X of the image and Make it negative
.190ece		49 ff ff	eor #$ffff	                EOR #$FFFF                  ; Inverse all bit
.190ed1		69 01 00	adc #$0001	                ADC #$0001                  ; Add 0 ()
.190ed4		8f 24 01 00	sta $000124	                STA @lADDER32_B_LL          ; Store the Results in reg B of ADDER32
.190ed8		a9 ff ff	lda #$ffff	                LDA #$FFFF
.190edb		8f 26 01 00	sta $000126	                STA @lADDER32_B_HL          ; Store in the Reminder of the 32Bits B Register
.190edf		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190ee3		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190ee5		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190ee9		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190eeb		20 5b 0f	jsr $190f5b	                JSR BMP_PARSER_DMA_SHIT_OUT  ; We are going to start with the slow method
.190eee		a2 d6 83	ldx #$83d6	                LDX #<>bmp_parser_msg0
.190ef1		80 03		bra $190ef6	                BRA BMP_PARSER_END_NO_ERROR
.190ef3						BMP_PARSER_END_WITH_ERROR
.190ef3		a2 c2 83	ldx #$83c2	                LDX #<>bmp_parser_err0
.190ef6						BMP_PARSER_END_NO_ERROR
.190ef6		22 fb 06 19	jsl $1906fb	                JSL IPRINT       ; print the first line
.190efa		6b		rtl		                RTL
.190efb						BMP_PARSER_UPDATE_LUT0
.190efb		38		sec		                SEC
.190efc		a0 7a 00	ldy #$007a	                LDY #$007A
.190eff		a2 00 00	ldx #$0000	                LDX #$0000
.190f02		e2 20		sep #$20	                SEP #$20        ; set A short
.190f04						BMP_PARSER_UPDATE_LOOP
.190f04		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190f06		9f 00 20 af	sta $af2000,x	                STA @lGRPH_LUT0_PTR+0, X      ; The look-up Table point to a pixel Blue
.190f0a		c8		iny		                INY
.190f0b		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190f0d		9f 01 20 af	sta $af2001,x	                STA @lGRPH_LUT0_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f11		c8		iny		                INY
.190f12		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f14		9f 02 20 af	sta $af2002,x	                STA @lGRPH_LUT0_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f18		c8		iny		                INY
.190f19		a9 80		lda #$80	                LDA #$80
.190f1b		9f 03 20 af	sta $af2003,x	                STA @lGRPH_LUT0_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f1f		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f20		e8		inx		                INX
.190f21		e8		inx		                INX
.190f22		e8		inx		                INX
.190f23		e8		inx		                INX
.190f24		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f26		d0 dc		bne $190f04	                BNE BMP_PARSER_UPDATE_LOOP
.190f28		c2 20		rep #$20	                REP #$20        ; set A long
.190f2a		60		rts		                RTS
.190f2b						BMP_PARSER_UPDATE_LUT1
.190f2b		38		sec		                SEC
.190f2c		a0 36 00	ldy #$0036	                LDY #$0036
.190f2f		a2 00 00	ldx #$0000	                LDX #$0000
.190f32		e2 20		sep #$20	                SEP #$20        ; set A short
.190f34						PALETTE_LUT1_LOOP
.190f34		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; First Pixel is Red
.190f36		9f 00 24 af	sta $af2400,x	                STA @lGRPH_LUT1_PTR+0, X      ; The look-up Table point to a pixel Blue
.190f3a		c8		iny		                INY
.190f3b		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Second Pixel is Green
.190f3d		9f 01 24 af	sta $af2401,x	                STA @lGRPH_LUT1_PTR+1, X      ; The look-up Table point to a pixel Blue
.190f41		c8		iny		                INY
.190f42		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Third Pixel is Blue
.190f44		9f 02 24 af	sta $af2402,x	                STA @lGRPH_LUT1_PTR+2, X      ; The look-up Table point to a pixel Blue
.190f48		c8		iny		                INY
.190f49		a9 80		lda #$80	                LDA #$80
.190f4b		9f 03 24 af	sta $af2403,x	                STA @lGRPH_LUT1_PTR+3, X      ; The look-up Table point to a pixel Blue
.190f4f		c8		iny		                INY ; For the Alpha Value, nobody cares
.190f50		e8		inx		                INX
.190f51		e8		inx		                INX
.190f52		e8		inx		                INX
.190f53		e8		inx		                INX
.190f54		e4 4c		cpx $4c		                CPX BMP_COLOR_PALET         ; Apparently sometime there is less than 256 Values in the lookup
.190f56		d0 dc		bne $190f34	                BNE PALETTE_LUT1_LOOP
.190f58		c2 20		rep #$20	                REP #$20        ; set A long
.190f5a		60		rts		                RTS
.190f5b						BMP_PARSER_DMA_SHIT_OUT
.190f5b		a2 00 00	ldx #$0000	                LDX #$0000
.190f5e						BMP_PARSER_LOOPY
.190f5e		a0 00 00	ldy #$0000	                LDY #$0000
.190f61		e2 20		sep #$20	                SEP #$20        ; set A short
.190f63						BMP_PARSER_LOOPX
.190f63		b7 44		lda [$44],y	                LDA [BMP_PRSE_SRC_PTR],Y    ; Load First Pixel Y (will be linear)
.190f65		97 48		sta [$48],y	                STA [BMP_PRSE_DST_PTR],Y    ; This is where the Pixel Go, Video Memory
.190f67		c8		iny		                INY
.190f68		c4 40		cpy $40		                CPY BMP_X_SIZE              ; Transfer the First line
.190f6a		d0 f7		bne $190f63	                BNE BMP_PARSER_LOOPX
.190f6c		20 78 0f	jsr $190f78	                JSR BMP_PARSER_COMPUTE_Y_SRC
.190f6f		20 93 0f	jsr $190f93	                JSR BMP_PARSER_COMPUTE_Y_DST
.190f72		e8		inx		                INX
.190f73		e4 42		cpx $42		                CPX BMP_Y_SIZE
.190f75		d0 e7		bne $190f5e	                BNE BMP_PARSER_LOOPY
.190f77		60		rts		                RTS
.190f78						BMP_PARSER_COMPUTE_Y_SRC
.190f78		c2 20		rep #$20	                REP #$20        ; set A long
.190f7a		a5 44		lda $44		                LDA BMP_PRSE_SRC_PTR        ; Right now it is set @ $020000 (128K) + File Size
.190f7c		8f 20 01 00	sta $000120	                STA @lADDER32_A_LL
.190f80		a5 46		lda $46		                LDA BMP_PRSE_SRC_PTR+2      ; Right now it is set @ $020000 (128K)
.190f82		8f 22 01 00	sta $000122	                STA @lADDER32_A_HL
.190f86		af 28 01 00	lda $000128	                LDA @lADDER32_R_LL
.190f8a		85 44		sta $44		                STA BMP_PRSE_SRC_PTR
.190f8c		af 2a 01 00	lda $00012a	                LDA @lADDER32_R_HL
.190f90		85 46		sta $46		                STA BMP_PRSE_SRC_PTR+2
.190f92		60		rts		                RTS
.190f93						BMP_PARSER_COMPUTE_Y_DST
.190f93		c2 20		rep #$20	                REP #$20        ; set A long
.190f95		18		clc		                CLC
.190f96		a5 48		lda $48		                LDA BMP_PRSE_DST_PTR
.190f98		65 4e		adc $4e		                ADC SCRN_X_STRIDE        ; In Normal Circumstances, it is 640
.190f9a		85 48		sta $48		                STA BMP_PRSE_DST_PTR
.190f9c		a5 4a		lda $4a		                LDA BMP_PRSE_DST_PTR+2
.190f9e		69 00 00	adc #$0000	                ADC #$0000
.190fa1		85 4a		sta $4a		                STA BMP_PRSE_DST_PTR+2
.190fa3		60		rts		                RTS
.190fa4		ea		nop		ILOOP           NOP
.190fa5		ea		nop		                NOP
.190fa6		ea		nop		                NOP
.190fa7		ea		nop		                NOP
.190fa8		ea		nop		                NOP
.190fa9		ea		nop		                NOP
.190faa		ea		nop		                NOP
.190fab		ea		nop		                NOP
.190fac		ea		nop		                NOP
.190fad		ea		nop		                NOP
.190fae		6b		rtl		                RTL
.190faf		22 a4 0f 19	jsl $190fa4	ILOOP_1         JSL ILOOP
.190fb3		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fb7		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fbb		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fbf		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fc3		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fc7		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fcb		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fcf		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fd3		22 a4 0f 19	jsl $190fa4	                JSL ILOOP
.190fd7		6b		rtl		                RTL
.190fd8		22 af 0f 19	jsl $190faf	ILOOP_1MS       JSL ILOOP_1
.190fdc		6b		rtl		                RTL
.190fdd		e0 00 00	cpx #$0000	ILOOP_MS        CPX #0
.190fe0		f0 07		beq $190fe9	                BEQ LOOP_MS_END
.190fe2		22 d8 0f 19	jsl $190fd8	                JSL ILOOP_1MS
.190fe6		ca		dex		                DEX
.190fe7		80 f4		bra $190fdd	                BRA ILOOP_MS
.190fe9		6b		rtl		LOOP_MS_END     RTL
.190fea						IDELAY
.190fea		8b		phb		                PHB
.190feb		08		php		                PHP
.190fec		48		pha		                PHA             ; begin setdbr macro
.190fed		08		php		                PHP
.190fee		e2 20		sep #$20	                SEP #$20        ; set A short
.190ff0		a9 00		lda #$00	                LDA #0
.190ff2		48		pha		                PHA
.190ff3		ab		plb		                PLB
.190ff4		28		plp		                PLP
.190ff5		68		pla		                PLA             ; end setdbr macro
.190ff6		e2 20		sep #$20	                SEP #$20        ; set A short
.190ff8		a9 00		lda #$00	                LDA #0                      ; Stop the timer if it's running
.190ffa		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.190ffe		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Enable Timer 0 Interrupts
.191002		29 fb		and #$fb	                AND #~FNX0_INT02_TMR0
.191004		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.191008		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.19100a		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.19100d		a9 00		lda #$00	                LDA #0
.19100f		8f 61 01 00	sta $000161	                STA @l TIMER0_CHARGE_L      ; Clear the comparator for count-down
.191013		8f 62 01 00	sta $000162	                STA @l TIMER0_CHARGE_M
.191017		8f 63 01 00	sta $000163	                STA @l TIMER0_CHARGE_H
.19101b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19101d		8a		txa		                TXA
.19101e		8f 65 01 00	sta $000165	                STA @l TIMER0_CMP_L         ; Set the number of ticks
.191022		98		tya		                TYA
.191023		e2 20		sep #$20	                SEP #$20        ; set A short
.191025		8f 67 01 00	sta $000167	                STA @l TIMER0_CMP_H
.191029		a9 09		lda #$09	                LDA #TMR0_EN | TMR0_UPDWN   ; Enable the timer to count up
.19102b		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.19102f		a9 80		lda #$80	                LDA #TIMER0TRIGGER          ; Timer zero's trigger flag
.191031		cb		wai		loop            WAI                         ; Wait for an interrupt
.191032		1c 05 07	trb $0705	                TRB @w TIMERFLAGS           ; Check for the flag
.191035		f0 fa		beq $191031	                BEQ loop                    ; Keep checking until it's set
.191037		a9 00		lda #$00	                LDA #0                      ; Stop the timer
.191039		8f 60 01 00	sta $000160	                STA @l TIMER0_CTRL_REG
.19103d		a9 7f		lda #$7f	                LDA #~TIMER0TRIGGER         ; Clear the timer 0 trigger flag
.19103f		8d 05 07	sta $0705	                STA @w TIMERFLAGS
.191042		af 4c 01 00	lda $00014c	                LDA @l INT_MASK_REG0        ; Disable Timer 0 Interrupts
.191046		09 04		ora #$04	                ORA #FNX0_INT02_TMR0
.191048		8f 4c 01 00	sta $00014c	                STA @l INT_MASK_REG0
.19104c		28		plp		                PLP
.19104d		ab		plb		                PLB
.19104e		6b		rtl		                RTL
.19104f						SHOW_CREDITS
.19104f		48		pha		                PHA
.191050		da		phx		                PHX
.191051		5a		phy		                PHY
.191052		08		php		                PHP
.191053		e2 20		sep #$20	                SEP #$20        ; set A short
.191055		c2 10		rep #$10	                REP #$10        ; set X long
.191057		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Disable the cursor
.19105b		29 fe		and #$fe	                AND #~Vky_Cursor_Enable
.19105d		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191061		a2 00 00	ldx #$0000	                LDX #0
.191064		bf 00 00 1b	lda $1b0000,x	credit_loop     LDA @lCREDITS_TEXT,X            ; Copy a byte of text
.191068		9f 00 a0 af	sta $afa000,x	                STA @lCS_TEXT_MEM_PTR,X
.19106c		bf 00 18 1b	lda $1b1800,x	                LDA @lCREDITS_COLOR,X           ; Copy a byte of color
.191070		9f 00 c0 af	sta $afc000,x	                STA @lCS_COLOR_MEM_PTR,X
.191074		e8		inx		                INX
.191075		e0 00 20	cpx #$2000	                CPX #128 * 64
.191078		d0 ea		bne $191064	                BNE credit_loop
.19107a		22 95 06 19	jsl $190695	                JSL IGETCHW                     ; Wait for a keypress
.19107e		22 df 08 19	jsl $1908df	                JSL ICLRSCREEN                  ; Then clear the screen and return
.191082		22 0f 08 19	jsl $19080f	                JSL ICSRHOME                    ; Move cursor to the home position
.191086		af 10 00 af	lda $af0010	                LDA @lVKY_TXT_CURSOR_CTRL_REG   ; Enable the cursor
.19108a		09 01		ora #$01	                ORA #Vky_Cursor_Enable
.19108c		8f 10 00 af	sta $af0010	                STA @lVKY_TXT_CURSOR_CTRL_REG
.191090		28		plp		                PLP
.191091		7a		ply		                PLY
.191092		fa		plx		                PLX
.191093		68		pla		                PLA
.191094		6b		rtl		                RTL
.191095		00		brk #		ISCINIT         BRK ;
.191096		00		brk #		IIOINIT         BRK ;
.191097		00		brk #		ISETLFS         BRK ; Obsolete (done in OPEN)
.191098		00		brk #		ISETNAM         BRK ; Obsolete (done in OPEN)
.191099		00		brk #		IOPEN           BRK ; Open a channel for reading and/or writing. Use SETLFS and SETNAM to set the channels and filename first.
.19109a		00		brk #		ICLOSE          BRK ; Close a channel
.19109b		00		brk #		IGETB           BRK ; Get a byte from input channel. Return 0 if no input. Carry is set if no input.
.19109c		00		brk #		IGETS           BRK ; Get a string from the input channel. NULL terminates
.19109d		00		brk #		IGETLINE        BRK ; Get a line of text from input channel. CR or NULL terminates.
.19109e		00		brk #		IGETFIELD       BRK ; Get a field from the input channel. Value in A, CR, or NULL terminates
.19109f		00		brk #		ITRIM           BRK ; Removes spaces at beginning and end of string.
.1910a0		00		brk #		IPRINTC         BRK ; Print character to screen. Handles terminal commands
.1910a1		00		brk #		IPRINTS         BRK ; Print string to screen. Handles terminal commands
.1910a2		00		brk #		IPRINTF         BRK ; Print a float value
.1910a3		00		brk #		IPRINTI         BRK ; Prints integer value in TEMP
.1910a4		00		brk #		IPRINTAI        BRK ; Prints integer value in A
.1910a5		00		brk #		IPUSHKEY        BRK ;
.1910a6		00		brk #		IPUSHKEYS       BRK ;
.1910a7		00		brk #		ISCRREADLINE    BRK ; Loads the MCMDADDR/BCMDADDR variable with the address of the current line on the screen. This is called when the RETURN key is pressed and is the first step in processing an immediate mode command.
.1910a8		00		brk #		ISCRGETWORD     BRK ; Read a current word on the screen. A word ends with a space, punctuation (except _), or any control character (value < 32). Loads the address into CMPTEXT_VAL and length into CMPTEXT_LEN variables.
.1910a9		6b		rtl		IRQHANDLESTUB   RTL

;******  Processing file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/../Defines/OPL3_def.asm

=$afe600					OPL3_R_BASE               = $AFE600
=$e600						OPL3_R_BASE_LL            = $E600
=$00af						OPL3_R_BASE_HL            = $00AF
=$afe601					OPL3_R_TEST               = $AFE601 ; TEST
=$afe602					OPL3_R_TIMER1             = $AFE602 ; TIMER-1
=$afe603					OPL3_R_TIMER2             = $AFE603 ; TIMER-2
=$afe604					OPL3_R_IRQ                = $AFE604 ;
=$afe605					OPL3_R_OPL3_MODE          = $AFE605 ; Set bit 0 to 1 if you want to use in OPL3 Mode
=$afe608					OPL3_R_CSM                = $AFE608 ;
=$afe620					OPL3_R_AM_VID_EG_KSR_MULT = $AFE620 ; $40..$35 (21 Registers)
=$afe640					OPL3_R_KSL_TL             = $AFE640;  $40..$55 (21 Registers)
=$afe660					OPL3_R_AR_DR              = $AFE660;  $60..$75 (21 Registers)
=$afe680					OPL3_R_SL_RR              = $AFE680;  $80..$95 (21 Registers)
=$afe6a0					OPL3_R_FNumber            = $AFE6A0;  $A0..$A8
=$afe6b0					OPL3_R_KON_BLOCK_FNumber  = $AFE6B0;  $B0..$B9
=$afe6bd					OPL3_R_DPTH_RHYTM         = $AFE6BD;  $BD
=$afe6c0					OPL3_R_FEEDBACK           = $AFE6C0;  $C0..$C9
=$afe6e0					OPL3_R_WAVE_SELECT        = $AFE6E0;  $E0..$F5
=$afe700					OPL3_L_BASE               = $AFE700
=$e700						OPL3_L_BASE_LL            = $E700
=$00af						OPL3_L_BASE_HL            = $00AF
=$afe701					OPL3_L_TEST               = $AFE701 ; TEST
=$afe702					OPL3_L_TIMER1             = $AFE702 ; TIMER-1
=$afe703					OPL3_L_TIMER2             = $AFE703 ; TIMER-2
=$afe704					OPL3_L_IRQ                = $AFE704 ;
=$afe708					OPL3_L_CSM                = $AFE708 ;
=$afe720					OPL3_L_AM_VID_EG_KSR_MULT = $AFE720 ; $40..$35 (21 Registers)
=$afe740					OPL3_L_KSL_TL             = $AFE740;  $40..$55 (21 Registers)
=$afe760					OPL3_L_AR_DR              = $AFE760;  $60..$75 (21 Registers)
=$afe780					OPL3_L_SL_RR              = $AFE780;  $80..$95 (21 Registers)
=$afe7a0					OPL3_L_FNumber            = $AFE7A0;  $A0..$A8
=$afe7b0					OPL3_L_KON_BLOCK_FNumber  = $AFE7B0;  $B0..$B9
=$afe7bd					OPL3_L_DPTH_RHYTM         = $AFE7BD;  $BD
=$afe7c0					OPL3_L_FEEDBACK           = $AFE7C0;  $C0..$C9
=$afe7e0					OPL3_L_WAVE_SELECT        = $AFE7E0;  $E0..$F5
=$80						TREMOLO    = $80
=$40						VIBRATO    = $40
=$20						SUSTAINING = $20
=$10						KSR        = $10
=$0f						MULTIPLIER = $0F
=$c0						KEY_SCALE  = $C0
=$3f						OP_LEVEL   = $3F
=$f0						ATTACK_RT  = $F0
=$0f						DECAY_RT   = $0F
=$f0						SUSTAIN_RT = $F0
=$0f						RELEASE_RT = $0F
=$0e						FEEDBACK   = $0E
=$01						ALGORITHM  = $01
=9						OPL2_NUM_CHANNELS = 9
=0						OPERATOR1 = 0
=1						OPERATOR2 = 1
=0						MODULATOR = 0
=1						CARRIER = 1
=0						FREQ_MODULATION = 0
=1						ADDITIVE_SYNTH  = 1
=$10						DRUM_BASS   = $10
=$08						DRUM_SNARE  = $08
=$04						DRUM_TOM    = $04
=$02						DRUM_CYMBAL = $02
=$01						DRUM_HI_HAT = $01
=1						NOTE_CS =   1
=2						NOTE_D =    2
=3						NOTE_DS =   3
=4						NOTE_E =    4
=5						NOTE_F =    5
=6						NOTE_FS =   6
=7						NOTE_G =    7
=8						NOTE_GS =   8
=9						NOTE_A =    9
=10						NOTE_AS =  10
=11						NOTE_B =   11
=12						NOTE_C =   12
>1910aa		6b 01 81 01 98 01 b0 01		noteFNumbers    .word  $016B, $0181, $0198, $01B0, $01CA, $01E5, $0202, $0220, $0241, $0263, $0287, $02AE
>1910b2		ca 01 e5 01 02 02 20 02 41 02 63 02 87 02 ae 02
>1910c2		00 01 02 08 09 0a 10 11		registerOffsets_operator0 .byte $00, $01, $02, $08, $09, $0A, $10, $11, $12 ;initializers for operator 1 */
>1910ca		12
>1910cb		03 04 05 0b 0c 0d 13 14		registerOffsets_operator1 .byte $03, $04, $05, $0B, $0C, $0D, $13, $14, $15 ;initializers for operator 2 */
>1910d3		15
>1910d4		10 13 14 12 15 11		drumOffsets               .byte $10, $13, $14, $12, $15, $11
>1910da		10 08 04 02 01			drumBits                  .byte $10, $08, $04, $02, $01
>1910df		20 40 60 80 e0 c0		instrumentBaseRegs        .byte $20, $40, $60, $80, $E0, $C0

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Instruments.asm

>1910e5		00 24 4f f2 0b 00 0e 31		INSTRUMENT_ACCORDN    .text $00, $24, $4F, $F2, $0B, $00, $0E, $31, $00, $52, $0B, $00, 'ACCORDN   '
>1910ed		00 52 0b 00 41 43 43 4f 52 44 4e 20 20 20
>1910fb		00 31 43 6e 17 01 02 22		INSTRUMENT_BAGPIPE1   .text $00, $31, $43, $6E, $17, $01, $02, $22, $05, $8B, $0C, $02, 'BAGPIPE1  '
>191103		05 8b 0c 02 42 41 47 50 49 50 45 31 20 20
>191111		00 30 00 ff a0 03 00 a3		INSTRUMENT_BAGPIPE2   .text $00, $30, $00, $FF, $A0, $03, $00, $A3, $00, $65, $0B, $02, 'BAGPIPE2  '
>191119		00 65 0b 02 42 41 47 50 49 50 45 32 20 20
>191127		00 31 87 a1 11 00 08 16		INSTRUMENT_BANJO1     .text $00, $31, $87, $A1, $11, $00, $08, $16, $80, $7D, $43, $00, 'BANJO1    '
>19112f		80 7d 43 00 42 41 4e 4a 4f 31 20 20 20 20
>19113d		00 01 15 25 2f 00 0a 21		INSTRUMENT_BASS1      .text $00, $01, $15, $25, $2F, $00, $0A, $21, $80, $65, $6C, $00, 'BASS1     '
>191145		80 65 6c 00 42 41 53 53 31 20 20 20 20 20
>191153		00 01 1d f2 ef 00 0a 01		INSTRUMENT_BASS2      .text $00, $01, $1D, $F2, $EF, $00, $0A, $01, $00, $F5, $78, $00, 'BASS2     '
>19115b		00 f5 78 00 42 41 53 53 32 20 20 20 20 20
>191169		00 c0 6d f9 01 01 0e 41		INSTRUMENT_BASSHARP   .text $00, $C0, $6D, $F9, $01, $01, $0E, $41, $00, $F2, $73, $00, 'BASSHARP  '
>191171		00 f2 73 00 42 41 53 53 48 41 52 50 20 20
>19117f		00 30 c8 d5 19 00 0c 71		INSTRUMENT_BASSOON1   .text $00, $30, $C8, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'BASSOON1  '
>191187		80 61 1b 00 42 41 53 53 4f 4f 4e 31 20 20
>191195		00 c1 4f b1 53 03 06 e0		INSTRUMENT_BASSTRLG   .text $00, $C1, $4F, $B1, $53, $03, $06, $E0, $00, $12, $74, $03, 'BASSTRLG  '
>19119d		00 12 74 03 42 41 53 53 54 52 4c 47 20 20
>1911ab		06 00 0b a8 4c 00 00 00		INSTRUMENT_BDRUM1     .text $06, $00, $0B, $A8, $4C, $00, $00, $00, $00, $00, $00, $00, 'BDRUM1    '
>1911b3		00 00 00 00 42 44 52 55 4d 31 20 20 20 20
>1911c1		00 64 db ff 01 00 04 3e		INSTRUMENT_BELLONG    .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F3, $62, $00, 'BELLONG   '
>1911c9		c0 f3 62 00 42 45 4c 4c 4f 4e 47 20 20 20
>1911d7		00 07 4f f2 60 00 08 12		INSTRUMENT_BELLS      .text $00, $07, $4F, $F2, $60, $00, $08, $12, $00, $F2, $72, $00, 'BELLS     '
>1911df		00 f2 72 00 42 45 4c 4c 53 20 20 20 20 20
>1911ed		00 64 db ff 01 00 04 3e		INSTRUMENT_BELSHORT   .text $00, $64, $DB, $FF, $01, $00, $04, $3E, $C0, $F5, $F3, $00, 'BELSHORT  '
>1911f5		c0 f5 f3 00 42 45 4c 53 48 4f 52 54 20 20
>191203		00 20 4b 7b 04 01 0e 21		INSTRUMENT_BNCEBASS   .text $00, $20, $4B, $7B, $04, $01, $0E, $21, $00, $F5, $72, $00, 'BNCEBASS  '
>19120b		00 f5 72 00 42 4e 43 45 42 41 53 53 20 20
>191219		00 21 16 71 ae 00 0e 21		INSTRUMENT_BRASS1     .text $00, $21, $16, $71, $AE, $00, $0E, $21, $00, $81, $9E, $00, 'BRASS1    '
>191221		00 81 9e 00 42 52 41 53 53 31 20 20 20 20
>19122f		00 30 c5 52 11 00 00 31		INSTRUMENT_CBASSOON   .text $00, $30, $C5, $52, $11, $00, $00, $31, $80, $31, $2E, $00, 'CBASSOON  '
>191237		80 31 2e 00 43 42 41 53 53 4f 4f 4e 20 20
>191245		00 33 87 01 10 00 08 14		INSTRUMENT_CELESTA    .text $00, $33, $87, $01, $10, $00, $08, $14, $80, $7D, $33, $00, 'CELESTA   '
>19124d		80 7d 33 00 43 45 4c 45 53 54 41 20 20 20
>19125b		00 32 16 73 24 00 0e 21		INSTRUMENT_CLAR1      .text $00, $32, $16, $73, $24, $00, $0E, $21, $80, $75, $57, $00, 'CLAR1     '
>191263		80 75 57 00 43 4c 41 52 31 20 20 20 20 20
>191271		00 31 1c 41 1b 00 0c 60		INSTRUMENT_CLAR2      .text $00, $31, $1C, $41, $1B, $00, $0C, $60, $80, $42, $3B, $00, 'CLAR2     '
>191279		80 42 3b 00 43 4c 41 52 32 20 20 20 20 20
>191287		00 32 9a 51 1b 00 0c 61		INSTRUMENT_CLARINET   .text $00, $32, $9A, $51, $1B, $00, $0C, $61, $82, $A2, $3B, $00, 'CLARINET  '
>19128f		82 a2 3b 00 43 4c 41 52 49 4e 45 54 20 20
>19129d		00 11 0d f2 01 00 0a 15		INSTRUMENT_CLAVECIN   .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'CLAVECIN  '
>1912a5		0d f2 b1 00 43 4c 41 56 45 43 49 4e 20 20
>1912b3		00 00 02 f0 ff 00 06 11		INSTRUMENT_CROMORNE   .text $00, $00, $02, $F0, $FF, $00, $06, $11, $80, $F0, $FF, $00, 'CROMORNE  '
>1912bb		80 f0 ff 00 43 52 4f 4d 4f 52 4e 45 20 20
>1912c9		09 01 00 f5 b5 00 00 00		INSTRUMENT_CYMBAL1    .text $09, $01, $00, $F5, $B5, $00, $00, $00, $00, $00, $00, $00, 'CYMBAL1   '
>1912d1		00 00 00 00 43 59 4d 42 41 4c 31 20 20 20
>1912df		00 05 8a f0 7b 00 08 01		INSTRUMENT_ELCLAV1    .text $00, $05, $8A, $F0, $7B, $00, $08, $01, $80, $F4, $7B, $00, 'ELCLAV1   '
>1912e7		80 f4 7b 00 45 4c 43 4c 41 56 31 20 20 20
>1912f5		00 01 49 f1 53 01 06 11		INSTRUMENT_ELCLAV2    .text $00, $01, $49, $F1, $53, $01, $06, $11, $00, $F1, $74, $02, 'ELCLAV2   '
>1912fd		00 f1 74 02 45 4c 43 4c 41 56 32 20 20 20
>19130b		00 e0 6d 57 04 01 0e 61		INSTRUMENT_ELECFL     .text $00, $E0, $6D, $57, $04, $01, $0E, $61, $00, $67, $7D, $00, 'ELECFL    '
>191313		00 67 7d 00 45 4c 45 43 46 4c 20 20 20 20
>191321		00 13 97 9a 12 02 0e 91		INSTRUMENT_ELECVIBE   .text $00, $13, $97, $9A, $12, $02, $0E, $91, $80, $9B, $11, $00, 'ELECVIBE  '
>191329		80 9b 11 00 45 4c 45 43 56 49 42 45 20 20
>191337		00 f1 01 97 17 00 08 21		INSTRUMENT_ELGUIT1    .text $00, $F1, $01, $97, $17, $00, $08, $21, $0D, $F1, $18, $00, 'ELGUIT1   '
>19133f		0d f1 18 00 45 4c 47 55 49 54 31 20 20 20
>19134d		00 13 96 ff 21 00 0a 11		INSTRUMENT_ELGUIT2    .text $00, $13, $96, $FF, $21, $00, $0A, $11, $80, $FF, $03, $00, 'ELGUIT2   '
>191355		80 ff 03 00 45 4c 47 55 49 54 32 20 20 20
>191363		00 07 8f 82 7d 00 0c 14		INSTRUMENT_ELGUIT3    .text $00, $07, $8F, $82, $7D, $00, $0C, $14, $80, $82, $7D, $00, 'ELGUIT3   '
>19136b		80 82 7d 00 45 4c 47 55 49 54 33 20 20 20
>191379		00 05 8f da 15 00 0a 01		INSTRUMENT_ELGUIT4    .text $00, $05, $8F, $DA, $15, $00, $0A, $01, $80, $F9, $14, $02, 'ELGUIT4   '
>191381		80 f9 14 02 45 4c 47 55 49 54 34 20 20 20
>19138f		00 b2 cd 91 2a 02 09 b1		INSTRUMENT_ELORGAN1   .text $00, $B2, $CD, $91, $2A, $02, $09, $B1, $80, $91, $2A, $01, 'ELORGAN1  '
>191397		80 91 2a 01 45 4c 4f 52 47 41 4e 31 20 20
>1913a5		00 01 4f f1 50 00 06 01		INSTRUMENT_ELPIANO1   .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'ELPIANO1  '
>1913ad		04 d2 7c 00 45 4c 50 49 41 4e 4f 31 20 20
>1913bb		00 02 22 f2 13 00 0e 02		INSTRUMENT_ELPIANO2   .text $00, $02, $22, $F2, $13, $00, $0E, $02, $00, $F5, $43, $00, 'ELPIANO2  '
>1913c3		00 f5 43 00 45 4c 50 49 41 4e 4f 32 20 20
>1913d1		00 81 63 f3 58 00 00 01		INSTRUMENT_EPIANO1A   .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'EPIANO1A  '
>1913d9		80 f2 58 00 45 50 49 41 4e 4f 31 41 20 20
>1913e7		00 07 1f f5 fa 00 0e 01		INSTRUMENT_EPIANO1B   .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'EPIANO1B  '
>1913ef		57 f5 fa 00 45 50 49 41 4e 4f 31 42 20 20
>1913fd		00 21 83 74 17 00 07 a2		INSTRUMENT_FLUTE      .text $00, $21, $83, $74, $17, $00, $07, $A2, $8D, $65, $17, $00, 'FLUTE     '
>191405		8d 65 17 00 46 4c 55 54 45 20 20 20 20 20
>191413		00 a1 27 74 8f 00 02 a1		INSTRUMENT_FLUTE1     .text $00, $A1, $27, $74, $8F, $00, $02, $A1, $80, $65, $2A, $00, 'FLUTE1    '
>19141b		80 65 2a 00 46 4c 55 54 45 31 20 20 20 20
>191429		00 e0 ec 6e 8f 00 0e 61		INSTRUMENT_FLUTE2     .text $00, $E0, $EC, $6E, $8F, $00, $0E, $61, $00, $65, $2A, $00, 'FLUTE2    '
>191431		00 65 2a 00 46 4c 55 54 45 32 20 20 20 20
>19143f		00 21 9f 53 5a 00 0c 21		INSTRUMENT_FRHORN1    .text $00, $21, $9F, $53, $5A, $00, $0C, $21, $80, $AA, $1A, $00, 'FRHORN1   '
>191447		80 aa 1a 00 46 52 48 4f 52 4e 31 20 20 20
>191455		00 20 8e a5 8f 02 06 21		INSTRUMENT_FRHORN2    .text $00, $20, $8E, $A5, $8F, $02, $06, $21, $00, $36, $3D, $00, 'FRHORN2   '
>19145d		00 36 3d 00 46 52 48 4f 52 4e 32 20 20 20
>19146b		00 f0 18 55 ef 02 00 e0		INSTRUMENT_FSTRP1     .text $00, $F0, $18, $55, $EF, $02, $00, $E0, $80, $87, $1E, $03, 'FSTRP1    '
>191473		80 87 1e 03 46 53 54 52 50 31 20 20 20 20
>191481		00 70 16 55 2f 02 0c e0		INSTRUMENT_FSTRP2     .text $00, $70, $16, $55, $2F, $02, $0C, $E0, $80, $87, $1E, $03, 'FSTRP2    '
>191489		80 87 1e 03 46 53 54 52 50 32 20 20 20 20
>191497		00 f1 00 97 13 00 0a 25		INSTRUMENT_FUZGUIT1   .text $00, $F1, $00, $97, $13, $00, $0A, $25, $0D, $F1, $18, $01, 'FUZGUIT1  '
>19149f		0d f1 18 01 46 55 5a 47 55 49 54 31 20 20
>1914ad		00 31 48 f1 53 00 06 32		INSTRUMENT_FUZGUIT2   .text $00, $31, $48, $F1, $53, $00, $06, $32, $00, $F2, $27, $02, 'FUZGUIT2  '
>1914b5		00 f2 27 02 46 55 5a 47 55 49 54 32 20 20
>1914c3		00 01 11 f2 1f 00 0a 01		INSTRUMENT_GUITAR1    .text $00, $01, $11, $F2, $1F, $00, $0A, $01, $00, $F5, $88, $00, 'GUITAR1   '
>1914cb		00 f5 88 00 47 55 49 54 41 52 31 20 20 20
>1914d9		00 02 29 f5 75 00 00 01		INSTRUMENT_HARP1      .text $00, $02, $29, $F5, $75, $00, $00, $01, $83, $F2, $F3, $00, 'HARP1     '
>1914e1		83 f2 f3 00 48 41 52 50 31 20 20 20 20 20
>1914ef		00 02 99 f5 55 00 00 01		INSTRUMENT_HARP2      .text $00, $02, $99, $F5, $55, $00, $00, $01, $80, $F6, $53, $00, 'HARP2     '
>1914f7		80 f6 53 00 48 41 52 50 32 20 20 20 20 20
>191505		00 02 57 f5 56 00 00 01		INSTRUMENT_HARP3      .text $00, $02, $57, $F5, $56, $00, $00, $01, $80, $F6, $54, $00, 'HARP3     '
>19150d		80 f6 54 00 48 41 52 50 33 20 20 20 20 20
>19151b		00 02 29 f5 75 00 00 01		INSTRUMENT_HARPE1     .text $00, $02, $29, $F5, $75, $00, $00, $01, $03, $F2, $F3, $00, 'HARPE1    '
>191523		03 f2 f3 00 48 41 52 50 45 31 20 20 20 20
>191531		00 32 87 a1 10 00 08 16		INSTRUMENT_HARPSI1    .text $00, $32, $87, $A1, $10, $00, $08, $16, $80, $7D, $33, $00, 'HARPSI1   '
>191539		80 7d 33 00 48 41 52 50 53 49 31 20 20 20
>191547		00 33 87 a1 10 00 06 15		INSTRUMENT_HARPSI2    .text $00, $33, $87, $A1, $10, $00, $06, $15, $80, $7D, $43, $00, 'HARPSI2   '
>19154f		80 7d 43 00 48 41 52 50 53 49 32 20 20 20
>19155d		00 35 84 a8 10 00 08 18		INSTRUMENT_HARPSI3    .text $00, $35, $84, $A8, $10, $00, $08, $18, $80, $7D, $33, $00, 'HARPSI3   '
>191565		80 7d 33 00 48 41 52 50 53 49 33 20 20 20
>191573		00 11 0d f2 01 00 0a 15		INSTRUMENT_HARPSI4    .text $00, $11, $0D, $F2, $01, $00, $0A, $15, $0D, $F2, $B1, $00, 'HARPSI4   '
>19157b		0d f2 b1 00 48 41 52 50 53 49 34 20 20 20
>191589		00 36 87 8a 00 00 08 1a		INSTRUMENT_HARPSI5    .text $00, $36, $87, $8A, $00, $00, $08, $1A, $80, $7F, $33, $00, 'HARPSI5   '
>191591		80 7f 33 00 48 41 52 50 53 49 35 20 20 20
>19159f		00 f0 00 1e 11 01 08 e2		INSTRUMENT_HELICPTR   .text $00, $F0, $00, $1E, $11, $01, $08, $E2, $C0, $11, $11, $01, 'HELICPTR  '
>1915a7		c0 11 11 01 48 45 4c 49 43 50 54 52 20 20
>1915b5		0a 01 00 f7 b5 00 00 00		INSTRUMENT_HIHAT1     .text $0A, $01, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'HIHAT1    '
>1915bd		00 00 00 00 48 49 48 41 54 31 20 20 20 20
>1915cb		0a 01 03 da 18 00 00 00		INSTRUMENT_HIHAT2     .text $0A, $01, $03, $DA, $18, $00, $00, $00, $00, $00, $00, $00, 'HIHAT2    '
>1915d3		00 00 00 00 48 49 48 41 54 32 20 20 20 20
>1915e1		00 87 4d 78 42 00 0a 94		INSTRUMENT_JAVAICAN   .text $00, $87, $4D, $78, $42, $00, $0A, $94, $00, $85, $54, $00, 'JAVAICAN  '
>1915e9		00 85 54 00 4a 41 56 41 49 43 41 4e 20 20
>1915f7		00 03 5e 85 51 01 0e 11		INSTRUMENT_JAZZGUIT   .text $00, $03, $5E, $85, $51, $01, $0E, $11, $00, $D2, $71, $00, 'JAZZGUIT  '
>1915ff		00 d2 71 00 4a 41 5a 5a 47 55 49 54 20 20
>19160d		00 00 50 f2 70 00 0e 13		INSTRUMENT_JEWSHARP   .text $00, $00, $50, $F2, $70, $00, $0E, $13, $00, $F2, $72, $00, 'JEWSHARP  '
>191615		00 f2 72 00 4a 45 57 53 48 41 52 50 20 20
>191623		00 00 02 f0 fa 01 06 11		INSTRUMENT_KEYBRD1    .text $00, $00, $02, $F0, $FA, $01, $06, $11, $80, $F2, $FA, $01, 'KEYBRD1   '
>19162b		80 f2 fa 01 4b 45 59 42 52 44 31 20 20 20
>191639		00 01 8f f2 bd 00 08 14		INSTRUMENT_KEYBRD2    .text $00, $01, $8F, $F2, $BD, $00, $08, $14, $80, $82, $BD, $00, 'KEYBRD2   '
>191641		80 82 bd 00 4b 45 59 42 52 44 32 20 20 20
>19164f		00 01 00 f0 f0 00 00 e4		INSTRUMENT_KEYBRD3    .text $00, $01, $00, $F0, $F0, $00, $00, $E4, $03, $F3, $36, $00, 'KEYBRD3   '
>191657		03 f3 36 00 4b 45 59 42 52 44 33 20 20 20
>191665		09 e6 00 25 b5 00 00 00		INSTRUMENT_LASER      .text $09, $E6, $00, $25, $B5, $00, $00, $00, $00, $00, $00, $00, 'LASER     '
>19166d		00 00 00 00 4c 41 53 45 52 20 20 20 20 20
>19167b		00 32 44 f8 ff 00 0e 11		INSTRUMENT_LOGDRUM1   .text $00, $32, $44, $F8, $FF, $00, $0E, $11, $00, $F5, $7F, $00, 'LOGDRUM1  '
>191683		00 f5 7f 00 4c 4f 47 44 52 55 4d 31 20 20
>191691		00 05 4e da 25 00 0a 01		INSTRUMENT_MARIMBA1   .text $00, $05, $4E, $DA, $25, $00, $0A, $01, $00, $F9, $15, $00, 'MARIMBA1  '
>191699		00 f9 15 00 4d 41 52 49 4d 42 41 31 20 20
>1916a7		00 85 4e da 15 00 0a 81		INSTRUMENT_MARIMBA2   .text $00, $85, $4E, $DA, $15, $00, $0A, $81, $80, $F9, $13, $00, 'MARIMBA2  '
>1916af		80 f9 13 00 4d 41 52 49 4d 42 41 32 20 20
>1916bd		00 30 00 fe 11 01 08 ae		INSTRUMENT_MDRNPHON   .text $00, $30, $00, $FE, $11, $01, $08, $AE, $C0, $F1, $19, $01, 'MDRNPHON  '
>1916c5		c0 f1 19 01 4d 44 52 4e 50 48 4f 4e 20 20
>1916d3		07 0c 00 c8 b6 01 00 00		INSTRUMENT_MLTRDRUM   .text $07, $0C, $00, $C8, $B6, $01, $00, $00, $00, $00, $00, $00, 'MLTRDRUM  '
>1916db		00 00 00 00 4d 4c 54 52 44 52 55 4d 20 20
>1916e9		00 20 90 f5 9e 02 0c 11		INSTRUMENT_MOOGSYNT   .text $00, $20, $90, $F5, $9E, $02, $0C, $11, $00, $F4, $5B, $03, 'MOOGSYNT  '
>1916f1		00 f4 5b 03 4d 4f 4f 47 53 59 4e 54 20 20
>1916ff		00 0e 40 d1 53 00 0e 0e		INSTRUMENT_NOISE1     .text $00, $0E, $40, $D1, $53, $00, $0E, $0E, $00, $F2, $7F, $03, 'NOISE1    '
>191707		00 f2 7f 03 4e 4f 49 53 45 31 20 20 20 20
>191715		00 b1 c5 6e 17 00 02 22		INSTRUMENT_OBOE1      .text $00, $B1, $C5, $6E, $17, $00, $02, $22, $05, $8B, $0E, $00, 'OBOE1     '
>19171d		05 8b 0e 00 4f 42 4f 45 31 20 20 20 20 20
>19172b		00 65 d2 81 03 00 02 71		INSTRUMENT_ORGAN1     .text $00, $65, $D2, $81, $03, $00, $02, $71, $80, $F1, $05, $00, 'ORGAN1    '
>191733		80 f1 05 00 4f 52 47 41 4e 31 20 20 20 20
>191741		00 24 80 ff 0f 00 01 21		INSTRUMENT_ORGAN2     .text $00, $24, $80, $FF, $0F, $00, $01, $21, $80, $FF, $0F, $00, 'ORGAN2    '
>191749		80 ff 0f 00 4f 52 47 41 4e 32 20 20 20 20
>191757		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3     .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $80, $F0, $1F, $00, 'ORGAN3    '
>19175f		80 f0 1f 00 4f 52 47 41 4e 33 20 20 20 20
>19176d		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3A    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $8D, $F0, $13, $00, 'ORGAN3A   '
>191775		8d f0 13 00 4f 52 47 41 4e 33 41 20 20 20
>191783		00 03 5b f0 1f 00 0a 01		INSTRUMENT_ORGAN3B    .text $00, $03, $5B, $F0, $1F, $00, $0A, $01, $92, $F0, $12, $00, 'ORGAN3B   '
>19178b		92 f0 12 00 4f 52 47 41 4e 33 42 20 20 20
>191799		00 0c 00 f8 b5 00 01 00		INSTRUMENT_ORGNPERC   .text $00, $0C, $00, $F8, $B5, $00, $01, $00, $00, $D6, $4F, $00, 'ORGNPERC  '
>1917a1		00 d6 4f 00 4f 52 47 4e 50 45 52 43 20 20
>1917af		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE1     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F1, $B2, $00, 'PHONE1    '
>1917b7		08 f1 b2 00 50 48 4f 4e 45 31 20 20 20 20
>1917c5		00 17 4f f2 61 00 08 12		INSTRUMENT_PHONE2     .text $00, $17, $4F, $F2, $61, $00, $08, $12, $0A, $F1, $B4, $00, 'PHONE2    '
>1917cd		0a f1 b4 00 50 48 4f 4e 45 32 20 20 20 20
>1917db		00 81 63 f3 58 00 00 01		INSTRUMENT_PIAN1A     .text $00, $81, $63, $F3, $58, $00, $00, $01, $80, $F2, $58, $00, 'PIAN1A    '
>1917e3		80 f2 58 00 50 49 41 4e 31 41 20 20 20 20
>1917f1		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1B     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $26, $F5, $FA, $00, 'PIAN1B    '
>1917f9		26 f5 fa 00 50 49 41 4e 31 42 20 20 20 20
>191807		00 07 1f f5 fa 00 0e 01		INSTRUMENT_PIAN1C     .text $00, $07, $1F, $F5, $FA, $00, $0E, $01, $57, $F5, $FA, $00, 'PIAN1C    '
>19180f		57 f5 fa 00 50 49 41 4e 31 43 20 20 20 20
>19181d		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANO      .text $00, $03, $4F, $F1, $53, $00, $06, $17, $00, $F2, $74, $00, 'PIANO     '
>191825		00 f2 74 00 50 49 41 4e 4f 20 20 20 20 20
>191833		00 01 4f f1 53 00 06 11		INSTRUMENT_PIANO1     .text $00, $01, $4F, $F1, $53, $00, $06, $11, $00, $D2, $74, $00, 'PIANO1    '
>19183b		00 d2 74 00 50 49 41 4e 4f 31 20 20 20 20
>191849		00 41 9d f2 51 00 06 13		INSTRUMENT_PIANO2     .text $00, $41, $9D, $F2, $51, $00, $06, $13, $00, $F2, $F1, $00, 'PIANO2    '
>191851		00 f2 f1 00 50 49 41 4e 4f 32 20 20 20 20
>19185f		00 01 4f f1 50 00 06 01		INSTRUMENT_PIANO3     .text $00, $01, $4F, $F1, $50, $00, $06, $01, $04, $D2, $7C, $00, 'PIANO3    '
>191867		04 d2 7c 00 50 49 41 4e 4f 33 20 20 20 20
>191875		00 01 4d f1 60 00 08 11		INSTRUMENT_PIANO4     .text $00, $01, $4D, $F1, $60, $00, $08, $11, $00, $D2, $7B, $00, 'PIANO4    '
>19187d		00 d2 7b 00 50 49 41 4e 4f 34 20 20 20 20
>19188b		00 03 4f f1 53 00 06 17		INSTRUMENT_PIANOBEL   .text $00, $03, $4F, $F1, $53, $00, $06, $17, $03, $F2, $74, $00, 'PIANOBEL  '
>191893		03 f2 74 00 50 49 41 4e 4f 42 45 4c 20 20
>1918a1		00 01 cf f1 53 00 02 12		INSTRUMENT_PIANOF     .text $00, $01, $CF, $F1, $53, $00, $02, $12, $00, $F2, $83, $00, 'PIANOF    '
>1918a9		00 f2 83 00 50 49 41 4e 4f 46 20 20 20 20
>1918b7		00 10 00 75 93 01 00 01		INSTRUMENT_POPBASS1   .text $00, $10, $00, $75, $93, $01, $00, $01, $00, $F5, $82, $01, 'POPBASS1  '
>1918bf		00 f5 82 01 50 4f 50 42 41 53 53 31 20 20
>1918cd		07 0c 00 c7 b4 00 00 00		INSTRUMENT_RKSNARE1   .text $07, $0C, $00, $C7, $B4, $00, $00, $00, $00, $00, $00, $00, 'RKSNARE1  '
>1918d5		00 00 00 00 52 4b 53 4e 41 52 45 31 20 20
>1918e3		00 01 4f 71 53 00 0a 12		INSTRUMENT_SAX1       .text $00, $01, $4F, $71, $53, $00, $0A, $12, $00, $52, $7C, $00, 'SAX1      '
>1918eb		00 52 7c 00 53 41 58 31 20 20 20 20 20 20
>1918f9		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH    .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH   '
>191901		00 5c dc 00 53 43 52 41 54 43 48 20 20 20
>19190f		00 07 00 f0 f0 00 0e 00		INSTRUMENT_SCRATCH4   .text $00, $07, $00, $F0, $F0, $00, $0E, $00, $00, $5C, $DC, $00, 'SCRATCH4  '
>191917		00 5c dc 00 53 43 52 41 54 43 48 34 20 20
>191925		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SDRUM2     .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SDRUM2    '
>19192d		00 f6 b4 00 53 44 52 55 4d 32 20 20 20 20
>19193b		00 e4 0e ff 3f 01 00 c0		INSTRUMENT_SHRTVIBE   .text $00, $E4, $0E, $FF, $3F, $01, $00, $C0, $00, $F3, $07, $00, 'SHRTVIBE  '
>191943		00 f3 07 00 53 48 52 54 56 49 42 45 20 20
>191951		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR1     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $00, 'SITAR1    '
>191959		40 f1 53 00 53 49 54 41 52 31 20 20 20 20
>191967		00 01 40 f1 53 00 00 08		INSTRUMENT_SITAR2     .text $00, $01, $40, $F1, $53, $00, $00, $08, $40, $F1, $53, $01, 'SITAR2    '
>19196f		40 f1 53 01 53 49 54 41 52 32 20 20 20 20
>19197d		00 61 0c 81 03 00 08 71		INSTRUMENT_SNAKEFL    .text $00, $61, $0C, $81, $03, $00, $08, $71, $80, $61, $0C, $00, 'SNAKEFL   '
>191985		80 61 0c 00 53 4e 41 4b 45 46 4c 20 20 20
>191993		07 0c 00 f8 b5 00 00 00		INSTRUMENT_SNARE1     .text $07, $0C, $00, $F8, $B5, $00, $00, $00, $00, $00, $00, $00, 'SNARE1    '
>19199b		00 00 00 00 53 4e 41 52 45 31 20 20 20 20
>1919a9		00 06 00 f0 f0 00 0e c4		INSTRUMENT_SNRSUST    .text $00, $06, $00, $F0, $F0, $00, $0E, $C4, $03, $C4, $34, $00, 'SNRSUST   '
>1919b1		03 c4 34 00 53 4e 52 53 55 53 54 20 20 20
>1919bf		00 70 1c 51 03 02 0e 20		INSTRUMENT_SOLOVLN    .text $00, $70, $1C, $51, $03, $02, $0E, $20, $00, $54, $67, $02, 'SOLOVLN   '
>1919c7		00 54 67 02 53 4f 4c 4f 56 4c 4e 20 20 20
>1919d5		00 01 46 f1 83 00 06 61		INSTRUMENT_STEELGT1   .text $00, $01, $46, $F1, $83, $00, $06, $61, $03, $31, $86, $00, 'STEELGT1  '
>1919dd		03 31 86 00 53 54 45 45 4c 47 54 31 20 20
>1919eb		00 01 47 f1 83 00 06 61		INSTRUMENT_STEELGT2   .text $00, $01, $47, $F1, $83, $00, $06, $61, $03, $91, $86, $00, 'STEELGT2  '
>1919f3		03 91 86 00 53 54 45 45 4c 47 54 32 20 20
>191a01		00 b1 8b 71 11 00 06 61		INSTRUMENT_STRINGS1   .text $00, $B1, $8B, $71, $11, $00, $06, $61, $40, $42, $15, $01, 'STRINGS1  '
>191a09		40 42 15 01 53 54 52 49 4e 47 53 31 20 20
>191a17		00 e1 4f b1 d3 03 06 21		INSTRUMENT_STRNLONG   .text $00, $E1, $4F, $B1, $D3, $03, $06, $21, $00, $12, $74, $01, 'STRNLONG  '
>191a1f		00 12 74 01 53 54 52 4e 4c 4f 4e 47 20 20
>191a2d		00 55 97 2a 02 00 00 12		INSTRUMENT_SYN1       .text $00, $55, $97, $2A, $02, $00, $00, $12, $80, $42, $F3, $00, 'SYN1      '
>191a35		80 42 f3 00 53 59 4e 31 20 20 20 20 20 20
>191a43		00 13 97 9a 12 00 0e 11		INSTRUMENT_SYN2       .text $00, $13, $97, $9A, $12, $00, $0E, $11, $80, $9B, $14, $00, 'SYN2      '
>191a4b		80 9b 14 00 53 59 4e 32 20 20 20 20 20 20
>191a59		00 11 8a f1 11 00 06 01		INSTRUMENT_SYN3       .text $00, $11, $8A, $F1, $11, $00, $06, $01, $40, $F1, $B3, $00, 'SYN3      '
>191a61		40 f1 b3 00 53 59 4e 33 20 20 20 20 20 20
>191a6f		00 21 0d e9 3a 00 0a 22		INSTRUMENT_SYN4       .text $00, $21, $0D, $E9, $3A, $00, $0A, $22, $80, $65, $6C, $00, 'SYN4      '
>191a77		80 65 6c 00 53 59 4e 34 20 20 20 20 20 20
>191a85		00 01 4f 71 53 00 06 19		INSTRUMENT_SYN5       .text $00, $01, $4F, $71, $53, $00, $06, $19, $00, $52, $7C, $00, 'SYN5      '
>191a8d		00 52 7c 00 53 59 4e 35 20 20 20 20 20 20
>191a9b		00 24 0f 41 7e 00 0a 21		INSTRUMENT_SYN6       .text $00, $24, $0F, $41, $7E, $00, $0A, $21, $00, $F1, $5E, $00, 'SYN6      '
>191aa3		00 f1 5e 00 53 59 4e 36 20 20 20 20 20 20
>191ab1		00 07 87 f0 05 00 04 01		INSTRUMENT_SYN9       .text $00, $07, $87, $F0, $05, $00, $04, $01, $80, $F0, $05, $00, 'SYN9      '
>191ab9		80 f0 05 00 53 59 4e 39 20 20 20 20 20 20
>191ac7		00 26 03 e0 f0 00 08 1e		INSTRUMENT_SYNBAL1    .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'SYNBAL1   '
>191acf		00 ff 31 00 53 59 4e 42 41 4c 31 20 20 20
>191add		00 28 03 e0 f0 00 04 13		INSTRUMENT_SYNBAL2    .text $00, $28, $03, $E0, $F0, $00, $04, $13, $00, $E8, $11, $00, 'SYNBAL2   '
>191ae5		00 e8 11 00 53 59 4e 42 41 4c 32 20 20 20
>191af3		00 30 88 d5 19 00 0c 71		INSTRUMENT_SYNBASS1   .text $00, $30, $88, $D5, $19, $00, $0C, $71, $80, $61, $1B, $00, 'SYNBASS1  '
>191afb		80 61 1b 00 53 59 4e 42 41 53 53 31 20 20
>191b09		00 81 86 65 01 00 0c 11		INSTRUMENT_SYNBASS2   .text $00, $81, $86, $65, $01, $00, $0C, $11, $00, $32, $74, $00, 'SYNBASS2  '
>191b11		00 32 74 00 53 59 4e 42 41 53 53 32 20 20
>191b1f		00 81 83 65 05 00 0a 51		INSTRUMENT_SYNBASS4   .text $00, $81, $83, $65, $05, $00, $0A, $51, $00, $32, $74, $00, 'SYNBASS4  '
>191b27		00 32 74 00 53 59 4e 42 41 53 53 34 20 20
>191b35		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR1    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F8, $B6, $00, 'SYNSNR1   '
>191b3d		00 f8 b6 00 53 59 4e 53 4e 52 31 20 20 20
>191b4b		00 06 00 f0 f0 00 0e 00		INSTRUMENT_SYNSNR2    .text $00, $06, $00, $F0, $F0, $00, $0E, $00, $00, $F6, $B4, $00, 'SYNSNR2   '
>191b53		00 f6 b4 00 53 59 4e 53 4e 52 32 20 20 20
>191b61		00 8f 81 ef 01 00 04 01		INSTRUMENT_TINCAN1    .text $00, $8F, $81, $EF, $01, $00, $04, $01, $00, $98, $F1, $00, 'TINCAN1   '
>191b69		00 98 f1 00 54 49 4e 43 41 4e 31 20 20 20
>191b77		08 04 00 f7 b5 00 00 00		INSTRUMENT_TOM1       .text $08, $04, $00, $F7, $B5, $00, $00, $00, $00, $00, $00, $00, 'TOM1      '
>191b7f		00 00 00 00 54 4f 4d 31 20 20 20 20 20 20
>191b8d		08 02 00 c8 97 00 00 00		INSTRUMENT_TOM2       .text $08, $02, $00, $C8, $97, $00, $00, $00, $00, $00, $00, $00, 'TOM2      '
>191b95		00 00 00 00 54 4f 4d 32 20 20 20 20 20 20
>191ba3		00 17 4f f2 61 00 08 12		INSTRUMENT_TRAINBEL   .text $00, $17, $4F, $F2, $61, $00, $08, $12, $08, $F2, $74, $00, 'TRAINBEL  '
>191bab		08 f2 74 00 54 52 41 49 4e 42 45 4c 20 20
>191bb9		00 26 03 e0 f0 00 08 1e		INSTRUMENT_TRIANGLE   .text $00, $26, $03, $E0, $F0, $00, $08, $1E, $00, $FF, $31, $00, 'TRIANGLE  '
>191bc1		00 ff 31 00 54 52 49 41 4e 47 4c 45 20 20
>191bcf		00 b1 1c 41 1f 00 0e 61		INSTRUMENT_TROMB1     .text $00, $B1, $1C, $41, $1F, $00, $0E, $61, $80, $92, $3B, $00, 'TROMB1    '
>191bd7		80 92 3b 00 54 52 4f 4d 42 31 20 20 20 20
>191be5		00 21 1c 53 1d 00 0c 61		INSTRUMENT_TROMB2     .text $00, $21, $1C, $53, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TROMB2    '
>191bed		80 52 3b 00 54 52 4f 4d 42 32 20 20 20 20
>191bfb		00 31 1c 41 0b 00 0e 61		INSTRUMENT_TRUMPET1   .text $00, $31, $1C, $41, $0B, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET1  '
>191c03		80 92 3b 00 54 52 55 4d 50 45 54 31 20 20
>191c11		00 31 1c 23 1d 00 0c 61		INSTRUMENT_TRUMPET2   .text $00, $31, $1C, $23, $1D, $00, $0C, $61, $80, $52, $3B, $00, 'TRUMPET2  '
>191c19		80 52 3b 00 54 52 55 4d 50 45 54 32 20 20
>191c27		00 31 1c 41 01 00 0e 61		INSTRUMENT_TRUMPET3   .text $00, $31, $1C, $41, $01, $00, $0E, $61, $80, $92, $3B, $00, 'TRUMPET3  '
>191c2f		80 92 3b 00 54 52 55 4d 50 45 54 33 20 20
>191c3d		00 31 1c 41 0b 00 0c 61		INSTRUMENT_TRUMPET4   .text $00, $31, $1C, $41, $0B, $00, $0C, $61, $80, $92, $3B, $00, 'TRUMPET4  '
>191c45		80 92 3b 00 54 52 55 4d 50 45 54 34 20 20
>191c53		00 21 19 43 8c 00 0c 21		INSTRUMENT_TUBA1      .text $00, $21, $19, $43, $8C, $00, $0C, $21, $80, $85, $2F, $00, 'TUBA1     '
>191c5b		80 85 2f 00 54 55 42 41 31 20 20 20 20 20
>191c69		00 84 53 f5 33 00 06 a0		INSTRUMENT_VIBRA1     .text $00, $84, $53, $F5, $33, $00, $06, $A0, $80, $FD, $25, $00, 'VIBRA1    '
>191c71		80 fd 25 00 56 49 42 52 41 31 20 20 20 20
>191c7f		00 06 73 f6 54 00 00 81		INSTRUMENT_VIBRA2     .text $00, $06, $73, $F6, $54, $00, $00, $81, $03, $F2, $B3, $00, 'VIBRA2    '
>191c87		03 f2 b3 00 56 49 42 52 41 32 20 20 20 20
>191c95		00 93 97 aa 12 02 0e 91		INSTRUMENT_VIBRA3     .text $00, $93, $97, $AA, $12, $02, $0E, $91, $80, $AC, $21, $00, 'VIBRA3    '
>191c9d		80 ac 21 00 56 49 42 52 41 33 20 20 20 20
>191cab		00 31 1c 51 03 00 0e 61		INSTRUMENT_VIOLIN1    .text $00, $31, $1C, $51, $03, $00, $0E, $61, $80, $54, $67, $00, 'VIOLIN1   '
>191cb3		80 54 67 00 56 49 4f 4c 49 4e 31 20 20 20
>191cc1		00 e1 88 62 29 00 0c 22		INSTRUMENT_VIOLIN2    .text $00, $E1, $88, $62, $29, $00, $0C, $22, $80, $53, $2C, $00, 'VIOLIN2   '
>191cc9		80 53 2c 00 56 49 4f 4c 49 4e 32 20 20 20
>191cd7		00 e1 88 64 29 00 06 22		INSTRUMENT_VIOLIN3    .text $00, $E1, $88, $64, $29, $00, $06, $22, $83, $53, $2C, $00, 'VIOLIN3   '
>191cdf		83 53 2c 00 56 49 4f 4c 49 4e 33 20 20 20
>191ced		00 31 9c f1 f9 00 0e 31		INSTRUMENT_VLNPIZZ1   .text $00, $31, $9C, $F1, $F9, $00, $0E, $31, $80, $F7, $E6, $00, 'VLNPIZZ1  '
>191cf5		80 f7 e6 00 56 4c 4e 50 49 5a 5a 31 20 20
>191d03		00 00 02 00 f0 00 0e 14		INSTRUMENT_WAVE       .text $00, $00, $02, $00, $F0, $00, $0E, $14, $80, $1B, $A2, $00, 'WAVE      '
>191d0b		80 1b a2 00 57 41 56 45 20 20 20 20 20 20
>191d19		00 11 2d c8 2f 00 0c 31		INSTRUMENT_XYLO1      .text $00, $11, $2D, $C8, $2F, $00, $0C, $31, $00, $F5, $F5, $00, 'XYLO1     '
>191d21		00 f5 f5 00 58 59 4c 4f 31 20 20 20 20 20
>191d2f		06 2e 00 ff 0f 00 00 00		INSTRUMENT_XYLO2      .text $06, $2E, $00, $FF, $0F, $00, $00, $00, $00, $00, $00, $00, 'XYLO2     '
>191d37		00 00 00 00 58 59 4c 4f 32 20 20 20 20 20
>191d45		00 06 00 ff f0 00 0e c4		INSTRUMENT_XYLO3      .text $00, $06, $00, $FF, $F0, $00, $0E, $C4, $00, $F8, $B5, $00, 'XYLO3     '
>191d4d		00 f8 b5 00 58 59 4c 4f 33 20 20 20 20 20

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Drums.asm

>191d5b		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP2         .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191d63		00 87 fa 00
>191d67		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH1      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d6f		00 88 98 03
>191d73		00 01 00 78 97 09 00 02		DRUMINS_SCRATCH2      .text $00, $01, $00, $78, $97, $09, $00, $02, $00, $88, $98, $03
>191d7b		00 88 98 03
>191d7f		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT2      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191d87		00 f9 69 00
>191d8b		00 00 00 f8 6c 01 00 0e		DRUMINS_HIQ           .text $00, $00, $00, $F8, $6C, $01, $00, $0E, $80, $E8, $4A, $00
>191d93		80 e8 4a 00
>191d97		00 25 1b fa f2 01 00 12		DRUMINS_WOODBLOK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191d9f		00 f6 9a 00
>191da3		00 06 03 f4 44 00 01 01		DRUMINS_GLOCK         .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>191dab		1b f2 34 00
>191daf		00 00 00 f9 f3 05 00 01		DRUMINS_BASS_DR2      .text $00, $00, $00, $F9, $F3, $05, $00, $01, $00, $F7, $8A, $00
>191db7		00 f7 8a 00
>191dbb		00 01 07 fa fd 05 00 01		DRUMINS_BASS_DR1      .text $00, $01, $07, $FA, $FD, $05, $00, $01, $00, $F6, $47, $00
>191dc3		00 f6 47 00
>191dc7		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT       .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>191dcf		00 f9 69 00
>191dd3		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_AC      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191ddb		00 f7 a9 00
>191ddf		00 3e 00 9f 0f 0f 00 30		DRUMINS_CLAP          .text $00, $3E, $00, $9F, $0F, $0F, $00, $30, $00, $87, $FA, $00
>191de7		00 87 fa 00
>191deb		00 24 00 ff 00 0f 00 02		DRUMINS_SNARE_EL      .text $00, $24, $00, $FF, $00, $0F, $00, $02, $00, $F7, $A9, $00
>191df3		00 f7 a9 00
>191df7		00 06 0a fa 1f 0c 00 11		DRUMINS_LO_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191dff		00 f5 f5 00
>191e03		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_CL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191e0b		06 b8 d8 03
>191e0f		00 06 0a fa 1f 0c 00 11		DRUMINS_HI_TOMS       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e17		00 f5 f5 00
>191e1b		00 2c 00 f2 fe 07 00 02		DRUMINS_HIHAT_PL      .text $00, $2C, $00, $F2, $FE, $07, $00, $02, $06, $B8, $D8, $03
>191e23		06 b8 d8 03
>191e27		00 06 0a fa 1f 0c 00 11		DRUMINS_LOW_TOM       .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e2f		00 f5 f5 00
>191e33		00 2e 00 82 f6 05 00 04		DRUMINS_HIHAT_OP      .text $00, $2E, $00, $82, $F6, $05, $00, $04, $10, $74, $F8, $03
>191e3b		10 74 f8 03
>191e3f		00 06 0a fa 1f 0c 00 11		DRUMINS_LTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e47		00 f5 f5 00
>191e4b		00 06 0a fa 1f 0c 00 11		DRUMINS_HTOM_MID      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e53		00 f5 f5 00
>191e57		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH         .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e5f		05 c5 d4 03
>191e63		00 06 0a fa 1f 0c 00 11		DRUMINS_TOM_HIGH      .text $00, $06, $0A, $FA, $1F, $0C, $00, $11, $00, $F5, $F5, $00
>191e6b		00 f5 f5 00
>191e6f		00 29 10 94 00 0f 00 04		DRUMINS_RIDE_CY       .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e77		04 f9 44 03
>191e7b		00 2c 00 9f 00 0f 02 0e		DRUMINS_TAMBOUR       .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191e83		05 c5 d4 03
>191e87		00 29 10 94 00 0f 00 04		DRUMINS_CYMBAL        .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191e8f		04 f9 44 03
>191e93		00 2e 09 f5 f1 01 00 06		DRUMINS_TAMBOU2       .text $00, $2E, $09, $F5, $F1, $01, $00, $06, $03, $87, $F7, $03
>191e9b		03 87 f7 03
>191e9f		00 2c 00 9f 00 0f 02 0e		DRUMINS_SPLASH        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191ea7		05 c5 d4 03
>191eab		00 37 14 f7 a1 09 01 03		DRUMINS_COWBELL       .text $00, $37, $14, $F7, $A1, $09, $01, $03, $00, $F6, $28, $00
>191eb3		00 f6 28 00
>191eb7		00 2c 00 9f 00 0f 02 0e		DRUMINS_CRASH2        .text $00, $2C, $00, $9F, $00, $0F, $02, $0E, $05, $C5, $D4, $03
>191ebf		05 c5 d4 03
>191ec3		00 80 00 ff 00 0d 01 00		DRUMINS_VIBRASLA      .text $00, $80, $00, $FF, $00, $0D, $01, $00, $00, $F5, $F7, $01
>191ecb		00 f5 f7 01
>191ecf		00 29 10 94 00 0f 00 04		DRUMINS_RIDE2         .text $00, $29, $10, $94, $00, $0F, $00, $04, $04, $F9, $44, $03
>191ed7		04 f9 44 03
>191edb		00 25 c4 fa fa 01 00 03		DRUMINS_HI_BONGO      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191ee3		00 99 f9 00
>191ee7		00 21 03 fb fa 01 01 02		DRUMINS_LO_BONGO      .text $00, $21, $03, $FB, $FA, $01, $01, $02, $00, $A8, $F7, $00
>191eef		00 a8 f7 00
>191ef3		00 25 c4 fa fa 01 00 03		DRUMINS_MUTECONG      .text $00, $25, $C4, $FA, $FA, $01, $00, $03, $00, $99, $F9, $00
>191efb		00 99 f9 00
>191eff		00 24 18 f9 fa 0f 02 03		DRUMINS_OPENCONG      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191f07		00 a6 f6 00
>191f0b		00 24 18 f9 fa 0f 02 03		DRUMINS_LOWCONGA      .text $00, $24, $18, $F9, $FA, $0F, $02, $03, $00, $A6, $F6, $00
>191f13		00 a6 f6 00
>191f17		00 05 14 f5 f5 07 02 03		DRUMINS_HI_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f1f		00 f6 36 02
>191f23		00 05 14 f5 f5 07 02 03		DRUMINS_LO_TIMBA      .text $00, $05, $14, $F5, $F5, $07, $02, $03, $00, $F6, $36, $02
>191f2b		00 f6 36 02
>191f2f		00 1c 0c f9 31 0f 01 15		DRUMINS_HI_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f37		00 96 e8 01
>191f3b		00 1c 0c f9 31 0f 01 15		DRUMINS_LO_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>191f43		00 96 e8 01
>191f47		00 0e 00 ff 01 0f 00 0e		DRUMINS_CABASA        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f4f		02 79 77 03
>191f53		00 0e 00 ff 01 0f 00 0e		DRUMINS_MARACAS       .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191f5b		02 79 77 03
>191f5f		00 20 15 af 07 05 01 0e		DRUMINS_S_WHISTL      .text $00, $20, $15, $AF, $07, $05, $01, $0E, $00, $A5, $2B, $02
>191f67		00 a5 2b 02
>191f6b		00 20 18 bf 07 01 01 0e		DRUMINS_L_WHISTL      .text $00, $20, $18, $BF, $07, $01, $01, $0E, $00, $93, $3B, $02
>191f73		00 93 3b 02
>191f77		00 20 00 f0 f7 0b 00 08		DRUMINS_S_GUIRO       .text $00, $20, $00, $F0, $F7, $0B, $00, $08, $01, $89, $3B, $03
>191f7f		01 89 3b 03
>191f83		00 20 00 f3 fa 09 00 08		DRUMINS_L_GUIRO       .text $00, $20, $00, $F3, $FA, $09, $00, $08, $0A, $53, $2B, $02
>191f8b		0a 53 2b 02
>191f8f		00 15 21 f8 9a 09 01 13		DRUMINS_CLAVES        .text $00, $15, $21, $F8, $9A, $09, $01, $13, $00, $F6, $89, $00
>191f97		00 f6 89 00
>191f9b		00 25 1b fa f2 01 00 12		DRUMINS_HI_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191fa3		00 f6 9a 00
>191fa7		00 25 1b fa f2 01 00 12		DRUMINS_LO_WDBLK      .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>191faf		00 f6 9a 00
>191fb3		00 20 01 5f 07 01 00 08		DRUMINS_MU_CUICA      .text $00, $20, $01, $5F, $07, $01, $00, $08, $00, $87, $4B, $01
>191fbb		00 87 4b 01
>191fbf		00 25 12 57 f7 01 01 03		DRUMINS_OP_CUICA      .text $00, $25, $12, $57, $F7, $01, $01, $03, $00, $78, $67, $01
>191fc7		00 78 67 01
>191fcb		00 22 2f f1 f0 07 00 27		DRUMINS_MU_TRNGL      .text $00, $22, $2F, $F1, $F0, $07, $00, $27, $02, $F8, $FC, $00
>191fd3		02 f8 fc 00
>191fd7		00 26 44 f1 f0 07 00 27		DRUMINS_OP_TRNGL      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191fdf		40 f5 f5 00
>191fe3		00 0e 00 ff 01 0f 00 0e		DRUMINS_SHAKER        .text $00, $0E, $00, $FF, $01, $0F, $00, $0E, $02, $79, $77, $03
>191feb		02 79 77 03
>191fef		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL1      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>191ff7		40 f5 f5 00
>191ffb		00 26 44 f1 f0 07 00 27		DRUMINS_TRIANGL2      .text $00, $26, $44, $F1, $F0, $07, $00, $27, $40, $F5, $F5, $00
>192003		40 f5 f5 00
>192007		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT3      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>19200f		00 f9 69 00
>192013		00 16 08 f1 fb 01 00 11		DRUMINS_RIMSHOT4      .text $00, $16, $08, $F1, $FB, $01, $00, $11, $00, $F9, $69, $00
>19201b		00 f9 69 00
>19201f		00 02 1d f5 93 01 00 00		DRUMINS_TAIKO         .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192027		00 c6 45 00
=27						DRUM_NOTE_BASE = 27;
=60						NUM_MIDI_DRUMS = 60;
>19202b		5b 1d 19 00 67 1d 19 00		midiDrums     .dword DRUMINS_CLAP2, DRUMINS_SCRATCH1, DRUMINS_SCRATCH2, DRUMINS_RIMSHOT2
>192033		73 1d 19 00 7f 1d 19 00
>19203b		8b 1d 19 00 97 1d 19 00		              .dword DRUMINS_HIQ, DRUMINS_WOODBLOK, DRUMINS_GLOCK, DRUMINS_BASS_DR2
>192043		a3 1d 19 00 af 1d 19 00
>19204b		bb 1d 19 00 c7 1d 19 00		              .dword DRUMINS_BASS_DR1, DRUMINS_RIMSHOT,  DRUMINS_SNARE_AC, DRUMINS_CLAP
>192053		d3 1d 19 00 df 1d 19 00
>19205b		eb 1d 19 00 f7 1d 19 00		              .dword DRUMINS_SNARE_EL, DRUMINS_LO_TOMS,  DRUMINS_HIHAT_CL, DRUMINS_HI_TOMS
>192063		03 1e 19 00 0f 1e 19 00
>19206b		1b 1e 19 00 27 1e 19 00		              .dword DRUMINS_HIHAT_PL, DRUMINS_LOW_TOM,	DRUMINS_HIHAT_OP, DRUMINS_LTOM_MID
>192073		33 1e 19 00 3f 1e 19 00
>19207b		4b 1e 19 00 57 1e 19 00		              .dword DRUMINS_HTOM_MID, DRUMINS_CRASH,    DRUMINS_TOM_HIGH, DRUMINS_RIDE_CY
>192083		63 1e 19 00 6f 1e 19 00
>19208b		7b 1e 19 00 87 1e 19 00		              .dword DRUMINS_TAMBOUR,  DRUMINS_CYMBAL,   DRUMINS_TAMBOU2,  DRUMINS_SPLASH
>192093		93 1e 19 00 9f 1e 19 00
>19209b		ab 1e 19 00 b7 1e 19 00		              .dword DRUMINS_COWBELL,  DRUMINS_CRASH2, 	DRUMINS_VIBRASLA, DRUMINS_RIDE2
>1920a3		c3 1e 19 00 cf 1e 19 00
>1920ab		db 1e 19 00 e7 1e 19 00		              .dword DRUMINS_HI_BONGO, DRUMINS_LO_BONGO, DRUMINS_MUTECONG, DRUMINS_OPENCONG
>1920b3		f3 1e 19 00 ff 1e 19 00
>1920bb		0b 1f 19 00 17 1f 19 00		              .dword DRUMINS_LOWCONGA, DRUMINS_HI_TIMBA, DRUMINS_LO_TIMBA, DRUMINS_HI_AGOGO
>1920c3		23 1f 19 00 2f 1f 19 00
>1920cb		3b 1f 19 00 47 1f 19 00		              .dword DRUMINS_LO_AGOGO, DRUMINS_CABASA, DRUMINS_MARACAS,  DRUMINS_S_WHISTL
>1920d3		53 1f 19 00 5f 1f 19 00
>1920db		6b 1f 19 00 77 1f 19 00		              .dword DRUMINS_L_WHISTL, DRUMINS_S_GUIRO,  DRUMINS_L_GUIRO,  DRUMINS_CLAVES
>1920e3		83 1f 19 00 8f 1f 19 00
>1920eb		9b 1f 19 00 a7 1f 19 00		              .dword DRUMINS_HI_WDBLK, DRUMINS_LO_WDBLK, DRUMINS_MU_CUICA, DRUMINS_OP_CUICA
>1920f3		b3 1f 19 00 bf 1f 19 00
>1920fb		cb 1f 19 00 d7 1f 19 00		              .dword DRUMINS_MU_TRNGL, DRUMINS_OP_TRNGL, DRUMINS_SHAKER, DRUMINS_TRIANGL1
>192103		e3 1f 19 00 ef 1f 19 00
>19210b		fb 1f 19 00 07 20 19 00		              .dword DRUMINS_TRIANGL2, DRUMINS_RIMSHOT3, DRUMINS_RIMSHOT4, DRUMINS_TAIKO
>192113		13 20 19 00 1f 20 19 00

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments.asm

>19211b		00 33 5a b2 50 01 00 31		MIDI_INSTRUMENT_PIANO1     .text $00, $33, $5A, $B2, $50, $01, $00, $31, $00, $B1, $F5, $01
>192123		00 b1 f5 01
>192127		00 31 49 f2 53 07 01 11		MIDI_INSTRUMENT_PIANO2     .text $00, $31, $49, $F2, $53, $07, $01, $11, $03, $F1, $F5, $00
>19212f		03 f1 f5 00
>192133		00 31 95 d1 83 0d 01 32		MIDI_INSTRUMENT_PIANO3     .text $00, $31, $95, $D1, $83, $0D, $01, $32, $03, $C1, $F5, $00
>19213b		03 c1 f5 00
>19213f		00 34 9b f3 63 01 01 11		MIDI_INSTRUMENT_HONKTONK   .text $00, $34, $9B, $F3, $63, $01, $01, $11, $00, $92, $F5, $01
>192147		00 92 f5 01
>19214b		00 27 28 f8 b7 01 02 91		MIDI_INSTRUMENT_EP1        .text $00, $27, $28, $F8, $B7, $01, $02, $91, $00, $F1, $F9, $00
>192153		00 f1 f9 00
>192157		00 1a 2d f3 ee 01 01 11		MIDI_INSTRUMENT_EP2        .text $00, $1A, $2D, $F3, $EE, $01, $01, $11, $00, $F1, $F5, $00
>19215f		00 f1 f5 00
>192163		00 35 95 f2 58 0f 01 32		MIDI_INSTRUMENT_HARPSIC    .text $00, $35, $95, $F2, $58, $0F, $01, $32, $02, $81, $F6, $01
>19216b		02 81 f6 01
>19216f		00 31 85 c9 40 01 00 35		MIDI_INSTRUMENT_CLAVIC     .text $00, $31, $85, $C9, $40, $01, $00, $35, $00, $C2, $B9, $01
>192177		00 c2 b9 01
>19217b		00 09 15 c7 64 08 00 01		MIDI_INSTRUMENT_CELESTA    .text $00, $09, $15, $C7, $64, $08, $00, $01, $05, $B2, $35, $00
>192183		05 b2 35 00
>192187		00 06 03 f4 44 00 01 01		MIDI_INSTRUMENT_GLOCK      .text $00, $06, $03, $F4, $44, $00, $01, $01, $1B, $F2, $34, $00
>19218f		1b f2 34 00
>192193		00 04 06 a9 24 0a 01 01		MIDI_INSTRUMENT_MUSICBOX   .text $00, $04, $06, $A9, $24, $0A, $01, $01, $01, $F5, $74, $00
>19219b		01 f5 74 00
>19219f		00 d4 00 f6 33 00 00 f1		MIDI_INSTRUMENT_VIBES      .text $00, $D4, $00, $F6, $33, $00, $00, $F1, $00, $61, $E3, $00
>1921a7		00 61 e3 00
>1921ab		00 d4 00 f7 e8 04 00 d1		MIDI_INSTRUMENT_MARIMBA    .text $00, $D4, $00, $F7, $E8, $04, $00, $D1, $00, $A4, $64, $00
>1921b3		00 a4 64 00
>1921b7		00 36 16 f7 f7 01 00 31		MIDI_INSTRUMENT_XYLO       .text $00, $36, $16, $F7, $F7, $01, $00, $31, $07, $B5, $F5, $00
>1921bf		07 b5 f5 00
>1921c3		00 03 1b a2 43 0b 00 00		MIDI_INSTRUMENT_TUBEBELL   .text $00, $03, $1B, $A2, $43, $0B, $00, $00, $00, $F3, $74, $00
>1921cb		00 f3 74 00
>1921cf		00 c3 8e f8 35 01 01 11		MIDI_INSTRUMENT_SANTUR     .text $00, $C3, $8E, $F8, $35, $01, $01, $11, $00, $C3, $94, $01
>1921d7		00 c3 94 01
>1921db		00 e2 07 f4 1b 06 01 e0		MIDI_INSTRUMENT_ORGAN1     .text $00, $E2, $07, $F4, $1B, $06, $01, $E0, $00, $F4, $0D, $01
>1921e3		00 f4 0d 01
>1921e7		00 f2 00 f6 2c 04 00 f0		MIDI_INSTRUMENT_ORGAN2     .text $00, $F2, $00, $F6, $2C, $04, $00, $F0, $00, $F5, $0B, $01
>1921ef		00 f5 0b 01
>1921f3		00 f1 06 b6 15 0a 00 f0		MIDI_INSTRUMENT_ORGAN3     .text $00, $F1, $06, $B6, $15, $0A, $00, $F0, $00, $BF, $07, $00
>1921fb		00 bf 07 00
>1921ff		00 22 03 79 16 08 01 e0		MIDI_INSTRUMENT_PIPEORG    .text $00, $22, $03, $79, $16, $08, $01, $E0, $00, $6D, $08, $01
>192207		00 6d 08 01
>19220b		00 31 27 63 06 01 00 72		MIDI_INSTRUMENT_REEDORG    .text $00, $31, $27, $63, $06, $01, $00, $72, $00, $51, $17, $01
>192213		00 51 17 01
>192217		00 b4 1d 53 16 0f 01 71		MIDI_INSTRUMENT_ACORDIAN   .text $00, $B4, $1D, $53, $16, $0F, $01, $71, $00, $51, $17, $01
>19221f		00 51 17 01
>192223		00 25 29 97 15 01 00 32		MIDI_INSTRUMENT_HARMONIC   .text $00, $25, $29, $97, $15, $01, $00, $32, $00, $53, $08, $01
>19222b		00 53 08 01
>19222f		00 24 9e 67 15 0f 00 31		MIDI_INSTRUMENT_BANDNEON   .text $00, $24, $9E, $67, $15, $0F, $00, $31, $00, $53, $06, $01
>192237		00 53 06 01
>19223b		00 13 27 a3 b4 05 01 31		MIDI_INSTRUMENT_NYLONGT    .text $00, $13, $27, $A3, $B4, $05, $01, $31, $00, $D2, $F8, $00
>192243		00 d2 f8 00
>192247		00 17 a3 f3 32 01 00 11		MIDI_INSTRUMENT_STEELGT    .text $00, $17, $A3, $F3, $32, $01, $00, $11, $00, $E2, $C7, $01
>19224f		00 e2 c7 01
>192253		00 33 24 d2 c1 0f 01 31		MIDI_INSTRUMENT_JAZZGT     .text $00, $33, $24, $D2, $C1, $0F, $01, $31, $00, $F1, $9C, $00
>19225b		00 f1 9c 00
>19225f		00 31 05 f8 44 01 00 32		MIDI_INSTRUMENT_CLEANGT    .text $00, $31, $05, $F8, $44, $01, $00, $32, $02, $F2, $C9, $01
>192267		02 f2 c9 01
>19226b		00 21 09 9c 7b 07 00 02		MIDI_INSTRUMENT_MUTEGT     .text $00, $21, $09, $9C, $7B, $07, $00, $02, $03, $95, $FB, $00
>192273		03 95 fb 00
>192277		00 21 84 81 98 07 01 21		MIDI_INSTRUMENT_OVERDGT    .text $00, $21, $84, $81, $98, $07, $01, $21, $04, $A1, $59, $00
>19227f		04 a1 59 00
>192283		00 b1 0c 78 43 01 00 22		MIDI_INSTRUMENT_DISTGT     .text $00, $B1, $0C, $78, $43, $01, $00, $22, $03, $91, $FC, $03
>19228b		03 91 fc 03
>19228f		00 00 0a 82 8c 09 00 08		MIDI_INSTRUMENT_GTHARMS    .text $00, $00, $0A, $82, $8C, $09, $00, $08, $02, $B4, $EC, $00
>192297		02 b4 ec 00
>19229b		00 21 13 ab 46 01 00 21		MIDI_INSTRUMENT_ACOUBASS   .text $00, $21, $13, $AB, $46, $01, $00, $21, $00, $93, $F7, $00
>1922a3		00 93 f7 00
>1922a7		00 01 0a f9 32 01 00 22		MIDI_INSTRUMENT_FINGBASS   .text $00, $01, $0A, $F9, $32, $01, $00, $22, $04, $C1, $58, $00
>1922af		04 c1 58 00
>1922b3		00 21 07 fa 77 0b 00 22		MIDI_INSTRUMENT_PICKBASS   .text $00, $21, $07, $FA, $77, $0B, $00, $22, $02, $C3, $6A, $00
>1922bb		02 c3 6a 00
>1922bf		00 21 17 71 57 0b 00 21		MIDI_INSTRUMENT_FRETLESS   .text $00, $21, $17, $71, $57, $0B, $00, $21, $00, $62, $87, $00
>1922c7		00 62 87 00
>1922cb		00 25 01 fa 78 07 01 12		MIDI_INSTRUMENT_SLAPBAS1   .text $00, $25, $01, $FA, $78, $07, $01, $12, $00, $F3, $97, $00
>1922d3		00 f3 97 00
>1922d7		00 21 03 fa 88 0d 00 13		MIDI_INSTRUMENT_SLAPBAS2   .text $00, $21, $03, $FA, $88, $0D, $00, $13, $00, $B3, $97, $00
>1922df		00 b3 97 00
>1922e3		00 21 09 f5 7f 09 01 23		MIDI_INSTRUMENT_SYNBASS1   .text $00, $21, $09, $F5, $7F, $09, $01, $23, $04, $F3, $CC, $00
>1922eb		04 f3 cc 00
>1922ef		00 01 10 a3 9b 09 00 01		MIDI_INSTRUMENT_SYNBASS2   .text $00, $01, $10, $A3, $9B, $09, $00, $01, $00, $93, $AA, $00
>1922f7		00 93 aa 00
>1922fb		00 e2 19 f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLIN     .text $00, $E2, $19, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>192303		00 78 08 01
>192307		00 e2 1c f6 29 0d 01 e1		MIDI_INSTRUMENT_VIOLA      .text $00, $E2, $1C, $F6, $29, $0D, $01, $E1, $00, $78, $08, $01
>19230f		00 78 08 01
>192313		00 61 19 69 16 0b 01 61		MIDI_INSTRUMENT_CELLO      .text $00, $61, $19, $69, $16, $0B, $01, $61, $00, $54, $27, $01
>19231b		00 54 27 01
>19231f		00 71 18 82 31 0d 01 32		MIDI_INSTRUMENT_CONTRAB    .text $00, $71, $18, $82, $31, $0D, $01, $32, $00, $61, $56, $00
>192327		00 61 56 00
>19232b		00 e2 23 70 06 0d 01 e1		MIDI_INSTRUMENT_TREMSTR    .text $00, $E2, $23, $70, $06, $0D, $01, $E1, $00, $75, $16, $01
>192333		00 75 16 01
>192337		00 02 00 88 e6 08 00 61		MIDI_INSTRUMENT_PIZZ       .text $00, $02, $00, $88, $E6, $08, $00, $61, $00, $F5, $F6, $01
>19233f		00 f5 f6 01
>192343		00 12 20 f6 d5 0f 01 11		MIDI_INSTRUMENT_HARP       .text $00, $12, $20, $F6, $D5, $0F, $01, $11, $80, $F3, $E3, $00
>19234b		80 f3 e3 00
>19234f		00 61 0e f4 f4 01 01 00		MIDI_INSTRUMENT_TIMPANI    .text $00, $61, $0E, $F4, $F4, $01, $01, $00, $00, $B5, $F5, $00
>192357		00 b5 f5 00
>19235b		00 61 1e 9c 04 0f 01 21		MIDI_INSTRUMENT_STRINGS    .text $00, $61, $1E, $9C, $04, $0F, $01, $21, $80, $71, $16, $00
>192363		80 71 16 00
>192367		00 a2 2a c0 d6 0f 02 21		MIDI_INSTRUMENT_SLOWSTR    .text $00, $A2, $2A, $C0, $D6, $0F, $02, $21, $00, $30, $55, $01
>19236f		00 30 55 01
>192373		00 61 21 72 35 0f 01 61		MIDI_INSTRUMENT_SYNSTR1    .text $00, $61, $21, $72, $35, $0F, $01, $61, $00, $62, $36, $01
>19237b		00 62 36 01
>19237f		00 21 1a 72 23 0f 01 21		MIDI_INSTRUMENT_SYNSTR2    .text $00, $21, $1A, $72, $23, $0F, $01, $21, $02, $51, $07, $00
>192387		02 51 07 00
>19238b		00 e1 16 97 31 09 00 61		MIDI_INSTRUMENT_CHOIR      .text $00, $E1, $16, $97, $31, $09, $00, $61, $00, $62, $39, $00
>192393		00 62 39 00
>192397		00 22 c3 79 45 01 00 21		MIDI_INSTRUMENT_OOHS       .text $00, $22, $C3, $79, $45, $01, $00, $21, $00, $66, $27, $00
>19239f		00 66 27 00
>1923a3		00 21 de 63 55 01 01 21		MIDI_INSTRUMENT_SYNVOX     .text $00, $21, $DE, $63, $55, $01, $01, $21, $00, $73, $46, $00
>1923ab		00 73 46 00
>1923af		00 42 05 86 f7 0a 00 50		MIDI_INSTRUMENT_ORCHIT     .text $00, $42, $05, $86, $F7, $0A, $00, $50, $00, $74, $76, $01
>1923b7		00 74 76 01
>1923bb		00 31 1c 61 02 0f 00 61		MIDI_INSTRUMENT_TRUMPET    .text $00, $31, $1C, $61, $02, $0F, $00, $61, $81, $92, $38, $00
>1923c3		81 92 38 00
>1923c7		00 71 1e 52 23 0f 00 61		MIDI_INSTRUMENT_TROMBONE   .text $00, $71, $1E, $52, $23, $0F, $00, $61, $02, $71, $19, $00
>1923cf		02 71 19 00
>1923d3		00 21 1a 76 16 0f 00 21		MIDI_INSTRUMENT_TUBA       .text $00, $21, $1A, $76, $16, $0F, $00, $21, $01, $81, $09, $00
>1923db		01 81 09 00
>1923df		00 25 28 89 2c 07 02 20		MIDI_INSTRUMENT_MUTETRP    .text $00, $25, $28, $89, $2C, $07, $02, $20, $00, $83, $4B, $02
>1923e7		00 83 4b 02
>1923eb		00 21 1f 79 16 09 00 a2		MIDI_INSTRUMENT_FRHORN     .text $00, $21, $1F, $79, $16, $09, $00, $A2, $05, $71, $59, $00
>1923f3		05 71 59 00
>1923f7		00 21 19 87 16 0f 00 21		MIDI_INSTRUMENT_BRASS1     .text $00, $21, $19, $87, $16, $0F, $00, $21, $03, $82, $39, $00
>1923ff		03 82 39 00
>192403		00 21 17 75 35 0f 00 22		MIDI_INSTRUMENT_SYNBRAS1   .text $00, $21, $17, $75, $35, $0F, $00, $22, $82, $84, $17, $00
>19240b		82 84 17 00
>19240f		00 21 22 62 58 0f 00 21		MIDI_INSTRUMENT_SYNBRAS2   .text $00, $21, $22, $62, $58, $0F, $00, $21, $02, $72, $16, $00
>192417		02 72 16 00
>19241b		00 b1 1b 59 07 01 01 a1		MIDI_INSTRUMENT_SOPSAX     .text $00, $B1, $1B, $59, $07, $01, $01, $A1, $00, $7B, $0A, $00
>192423		00 7b 0a 00
>192427		00 21 16 9f 04 0b 00 21		MIDI_INSTRUMENT_ALTOSAX    .text $00, $21, $16, $9F, $04, $0B, $00, $21, $00, $85, $0C, $01
>19242f		00 85 0c 01
>192433		00 21 0f a8 20 0d 00 23		MIDI_INSTRUMENT_TENSAX     .text $00, $21, $0F, $A8, $20, $0D, $00, $23, $00, $7B, $0A, $01
>19243b		00 7b 0a 01
>19243f		00 21 0f 88 04 09 00 26		MIDI_INSTRUMENT_BARISAX    .text $00, $21, $0F, $88, $04, $09, $00, $26, $00, $79, $18, $01
>192447		00 79 18 01
>19244b		00 31 18 8f 05 01 00 32		MIDI_INSTRUMENT_OBOE       .text $00, $31, $18, $8F, $05, $01, $00, $32, $01, $73, $08, $00
>192453		01 73 08 00
>192457		00 a1 0a 8c 37 01 01 24		MIDI_INSTRUMENT_ENGLHORN   .text $00, $A1, $0A, $8C, $37, $01, $01, $24, $04, $77, $0A, $00
>19245f		04 77 0a 00
>192463		00 31 04 a8 67 0b 00 75		MIDI_INSTRUMENT_BASSOON    .text $00, $31, $04, $A8, $67, $0B, $00, $75, $00, $51, $19, $00
>19246b		00 51 19 00
>19246f		00 a2 1f 77 26 01 01 21		MIDI_INSTRUMENT_CLARINET   .text $00, $A2, $1F, $77, $26, $01, $01, $21, $01, $74, $09, $00
>192477		01 74 09 00
>19247b		00 e1 07 b8 94 01 01 21		MIDI_INSTRUMENT_PICCOLO    .text $00, $E1, $07, $B8, $94, $01, $01, $21, $01, $63, $28, $00
>192483		01 63 28 00
>192487		00 a1 93 87 59 01 00 e1		MIDI_INSTRUMENT_FLUTE1     .text $00, $A1, $93, $87, $59, $01, $00, $E1, $00, $65, $0A, $00
>19248f		00 65 0a 00
>192493		00 22 10 9f 38 01 00 61		MIDI_INSTRUMENT_RECORDER   .text $00, $22, $10, $9F, $38, $01, $00, $61, $00, $67, $29, $00
>19249b		00 67 29 00
>19249f		00 e2 0d 88 9a 01 01 21		MIDI_INSTRUMENT_PANFLUTE   .text $00, $E2, $0D, $88, $9A, $01, $01, $21, $00, $67, $09, $00
>1924a7		00 67 09 00
>1924ab		00 a2 10 98 94 0f 00 21		MIDI_INSTRUMENT_BOTTLEB    .text $00, $A2, $10, $98, $94, $0F, $00, $21, $01, $6A, $28, $00
>1924b3		01 6a 28 00
>1924b7		00 f1 1c 86 26 0f 00 f1		MIDI_INSTRUMENT_SHAKU      .text $00, $F1, $1C, $86, $26, $0F, $00, $F1, $00, $55, $27, $00
>1924bf		00 55 27 00
>1924c3		00 e1 3f 9f 09 00 00 e1		MIDI_INSTRUMENT_WHISTLE    .text $00, $E1, $3F, $9F, $09, $00, $00, $E1, $00, $6F, $08, $00
>1924cb		00 6f 08 00
>1924cf		00 e2 3b f7 19 01 00 21		MIDI_INSTRUMENT_OCARINA    .text $00, $E2, $3B, $F7, $19, $01, $00, $21, $00, $7A, $07, $00
>1924d7		00 7a 07 00
>1924db		00 22 1e 92 0c 0f 00 61		MIDI_INSTRUMENT_SQUARWAV   .text $00, $22, $1E, $92, $0C, $0F, $00, $61, $06, $A2, $0D, $00
>1924e3		06 a2 0d 00
>1924e7		00 21 15 f4 22 0f 01 21		MIDI_INSTRUMENT_SAWWAV     .text $00, $21, $15, $F4, $22, $0F, $01, $21, $00, $A3, $5F, $00
>1924ef		00 a3 5f 00
>1924f3		00 f2 20 47 66 03 01 f1		MIDI_INSTRUMENT_SYNCALLI   .text $00, $F2, $20, $47, $66, $03, $01, $F1, $00, $42, $27, $00
>1924fb		00 42 27 00
>1924ff		00 61 19 88 28 0f 00 61		MIDI_INSTRUMENT_CHIFLEAD   .text $00, $61, $19, $88, $28, $0F, $00, $61, $05, $B2, $49, $00
>192507		05 b2 49 00
>19250b		00 21 16 82 1b 01 00 23		MIDI_INSTRUMENT_CHARANG    .text $00, $21, $16, $82, $1B, $01, $00, $23, $00, $B2, $79, $01
>192513		00 b2 79 01
>192517		00 21 00 ca 93 01 00 22		MIDI_INSTRUMENT_SOLOVOX    .text $00, $21, $00, $CA, $93, $01, $00, $22, $00, $7A, $1A, $00
>19251f		00 7a 1a 00
>192523		00 23 00 92 c9 08 01 22		MIDI_INSTRUMENT_FIFTHSAW   .text $00, $23, $00, $92, $C9, $08, $01, $22, $00, $82, $28, $01
>19252b		00 82 28 01
>19252f		00 21 1d f3 7b 0f 00 22		MIDI_INSTRUMENT_BASSLEAD   .text $00, $21, $1D, $F3, $7B, $0F, $00, $22, $02, $C3, $5F, $00
>192537		02 c3 5f 00
>19253b		00 e1 00 81 25 00 01 a6		MIDI_INSTRUMENT_FANTASIA   .text $00, $E1, $00, $81, $25, $00, $01, $A6, $86, $C4, $95, $01
>192543		86 c4 95 01
>192547		00 21 27 31 01 0f 00 21		MIDI_INSTRUMENT_WARMPAD    .text $00, $21, $27, $31, $01, $0F, $00, $21, $00, $44, $15, $00
>19254f		00 44 15 00
>192553		00 60 14 83 35 0d 02 61		MIDI_INSTRUMENT_POLYSYN    .text $00, $60, $14, $83, $35, $0D, $02, $61, $00, $D1, $06, $00
>19255b		00 d1 06 00
>19255f		00 e1 5c d3 01 01 01 62		MIDI_INSTRUMENT_SPACEVOX   .text $00, $E1, $5C, $D3, $01, $01, $01, $62, $00, $82, $37, $00
>192567		00 82 37 00
>19256b		00 28 38 34 86 01 02 21		MIDI_INSTRUMENT_BOWEDGLS   .text $00, $28, $38, $34, $86, $01, $02, $21, $00, $41, $35, $00
>192573		00 41 35 00
>192577		00 24 12 52 f3 05 01 23		MIDI_INSTRUMENT_METALPAD   .text $00, $24, $12, $52, $F3, $05, $01, $23, $02, $32, $F5, $01
>19257f		02 32 f5 01
>192583		00 61 1d 62 a6 0b 00 a1		MIDI_INSTRUMENT_HALOPAD    .text $00, $61, $1D, $62, $A6, $0B, $00, $A1, $00, $61, $26, $00
>19258b		00 61 26 00
>19258f		00 22 0f 22 d5 0b 01 21		MIDI_INSTRUMENT_SWEEPPAD   .text $00, $22, $0F, $22, $D5, $0B, $01, $21, $84, $3F, $05, $01
>192597		84 3f 05 01
>19259b		00 e3 1f f9 24 01 00 31		MIDI_INSTRUMENT_ICERAIN    .text $00, $E3, $1F, $F9, $24, $01, $00, $31, $01, $D1, $F6, $00
>1925a3		01 d1 f6 00
>1925a7		00 63 00 41 55 06 01 a2		MIDI_INSTRUMENT_SOUNDTRK   .text $00, $63, $00, $41, $55, $06, $01, $A2, $00, $41, $05, $01
>1925af		00 41 05 01
>1925b3		00 c7 25 a7 65 01 01 c1		MIDI_INSTRUMENT_CRYSTAL    .text $00, $C7, $25, $A7, $65, $01, $01, $C1, $05, $F3, $E4, $00
>1925bb		05 f3 e4 00
>1925bf		00 e3 19 f7 b7 01 01 61		MIDI_INSTRUMENT_ATMOSPH    .text $00, $E3, $19, $F7, $B7, $01, $01, $61, $00, $92, $F5, $01
>1925c7		00 92 f5 01
>1925cb		00 66 9b a8 44 0f 00 41		MIDI_INSTRUMENT_BRIGHT     .text $00, $66, $9B, $A8, $44, $0F, $00, $41, $04, $F2, $E4, $01
>1925d3		04 f2 e4 01
>1925d7		00 61 20 22 75 0d 00 61		MIDI_INSTRUMENT_GOBLIN     .text $00, $61, $20, $22, $75, $0D, $00, $61, $00, $45, $25, $00
>1925df		00 45 25 00
>1925e3		00 e1 21 f6 84 0f 00 e1		MIDI_INSTRUMENT_ECHODROP   .text $00, $E1, $21, $F6, $84, $0F, $00, $E1, $01, $A3, $36, $00
>1925eb		01 a3 36 00
>1925ef		00 e2 14 73 64 0b 01 e1		MIDI_INSTRUMENT_STARTHEM   .text $00, $E2, $14, $73, $64, $0B, $01, $E1, $01, $98, $05, $01
>1925f7		01 98 05 01
>1925fb		00 21 0b 72 34 09 00 24		MIDI_INSTRUMENT_SITAR      .text $00, $21, $0B, $72, $34, $09, $00, $24, $02, $A3, $F6, $01
>192603		02 a3 f6 01
>192607		00 21 16 f4 53 0d 00 04		MIDI_INSTRUMENT_BANJO      .text $00, $21, $16, $F4, $53, $0D, $00, $04, $00, $F6, $F8, $00
>19260f		00 f6 f8 00
>192613		00 21 18 da 02 0d 00 35		MIDI_INSTRUMENT_SHAMISEN   .text $00, $21, $18, $DA, $02, $0D, $00, $35, $00, $F3, $F5, $00
>19261b		00 f3 f5 00
>19261f		00 25 0f fa 63 09 00 02		MIDI_INSTRUMENT_KOTO       .text $00, $25, $0F, $FA, $63, $09, $00, $02, $00, $94, $E5, $01
>192627		00 94 e5 01
>19262b		00 32 07 f9 96 01 00 11		MIDI_INSTRUMENT_KALIMBA    .text $00, $32, $07, $F9, $96, $01, $00, $11, $00, $84, $44, $00
>192633		00 84 44 00
>192637		00 20 0e 97 18 09 02 25		MIDI_INSTRUMENT_BAGPIPE    .text $00, $20, $0E, $97, $18, $09, $02, $25, $03, $83, $18, $01
>19263f		03 83 18 01
>192643		00 61 18 f6 29 01 00 62		MIDI_INSTRUMENT_FIDDLE     .text $00, $61, $18, $F6, $29, $01, $00, $62, $01, $78, $08, $01
>19264b		01 78 08 01
>19264f		00 e6 21 76 19 0b 00 61		MIDI_INSTRUMENT_SHANNAI    .text $00, $E6, $21, $76, $19, $0B, $00, $61, $03, $8E, $08, $01
>192657		03 8e 08 01
>19265b		00 27 23 f0 d4 01 00 05		MIDI_INSTRUMENT_TINKLBEL   .text $00, $27, $23, $F0, $D4, $01, $00, $05, $09, $F2, $46, $00
>192663		09 f2 46 00
>192667		00 1c 0c f9 31 0f 01 15		MIDI_INSTRUMENT_AGOGO      .text $00, $1C, $0C, $F9, $31, $0F, $01, $15, $00, $96, $E8, $01
>19266f		00 96 e8 01
>192673		00 02 00 75 16 06 02 01		MIDI_INSTRUMENT_STEELDRM   .text $00, $02, $00, $75, $16, $06, $02, $01, $00, $F6, $F6, $01
>19267b		00 f6 f6 01
>19267f		00 25 1b fa f2 01 00 12		MIDI_INSTRUMENT_WOODBLOK   .text $00, $25, $1B, $FA, $F2, $01, $00, $12, $00, $F6, $9A, $00
>192687		00 f6 9a 00
>19268b		00 02 1d f5 93 01 00 00		MIDI_INSTRUMENT_TAIKO      .text $00, $02, $1D, $F5, $93, $01, $00, $00, $00, $C6, $45, $00
>192693		00 c6 45 00
>192697		00 11 15 f5 32 05 00 10		MIDI_INSTRUMENT_MELOTOM    .text $00, $11, $15, $F5, $32, $05, $00, $10, $00, $F4, $B4, $00
>19269f		00 f4 b4 00
>1926a3		00 22 06 fa 99 09 00 01		MIDI_INSTRUMENT_SYNDRUM    .text $00, $22, $06, $FA, $99, $09, $00, $01, $00, $D5, $25, $00
>1926ab		00 d5 25 00
>1926af		00 2e 00 ff 00 0f 02 0e		MIDI_INSTRUMENT_REVRSCYM   .text $00, $2E, $00, $FF, $00, $0F, $02, $0E, $0E, $21, $2D, $00
>1926b7		0e 21 2d 00
>1926bb		00 30 0b 56 e4 01 01 17		MIDI_INSTRUMENT_FRETNOIS   .text $00, $30, $0B, $56, $E4, $01, $01, $17, $00, $55, $87, $02
>1926c3		00 55 87 02
>1926c7		00 24 00 ff 03 0d 00 05		MIDI_INSTRUMENT_BRTHNOIS   .text $00, $24, $00, $FF, $03, $0D, $00, $05, $08, $98, $87, $01
>1926cf		08 98 87 01
>1926d3		00 0e 00 f0 00 0f 02 0a		MIDI_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F0, $00, $0F, $02, $0A, $04, $17, $04, $03
>1926db		04 17 04 03
>1926df		00 20 08 f6 f7 01 00 0e		MIDI_INSTRUMENT_BIRDS      .text $00, $20, $08, $F6, $F7, $01, $00, $0E, $05, $77, $F9, $02
>1926e7		05 77 f9 02
>1926eb		00 20 14 f1 08 01 00 2e		MIDI_INSTRUMENT_TELEPHON   .text $00, $20, $14, $F1, $08, $01, $00, $2E, $02, $F4, $08, $00
>1926f3		02 f4 08 00
>1926f7		00 20 04 f2 00 03 01 23		MIDI_INSTRUMENT_HELICOPT   .text $00, $20, $04, $F2, $00, $03, $01, $23, $00, $36, $05, $01
>1926ff		00 36 05 01
>192703		00 2e 00 ff 02 0f 00 2a		MIDI_INSTRUMENT_APPLAUSE   .text $00, $2E, $00, $FF, $02, $0F, $00, $2A, $05, $32, $55, $03
>19270b		05 32 55 03
>19270f		00 20 00 a1 ef 0f 00 10		MIDI_INSTRUMENT_GUNSHOT    .text $00, $20, $00, $A1, $EF, $0F, $00, $10, $00, $F3, $DF, $00
>192717		00 f3 df 00
>19271b		1b 21 19 00 27 21 19 00		midiInstruments .dword MIDI_INSTRUMENT_PIANO1,   MIDI_INSTRUMENT_PIANO2,   MIDI_INSTRUMENT_PIANO3,   MIDI_INSTRUMENT_HONKTONK, MIDI_INSTRUMENT_EP1,      MIDI_INSTRUMENT_EP2
>192723		33 21 19 00 3f 21 19 00 4b 21 19 00 57 21 19 00
>192733		63 21 19 00 6f 21 19 00		              	.dword MIDI_INSTRUMENT_HARPSIC,  MIDI_INSTRUMENT_CLAVIC,   MIDI_INSTRUMENT_CELESTA,  MIDI_INSTRUMENT_GLOCK,    MIDI_INSTRUMENT_MUSICBOX, MIDI_INSTRUMENT_VIBES
>19273b		7b 21 19 00 87 21 19 00 93 21 19 00 9f 21 19 00
>19274b		ab 21 19 00 b7 21 19 00		              	.dword MIDI_INSTRUMENT_MARIMBA,  MIDI_INSTRUMENT_XYLO,     MIDI_INSTRUMENT_TUBEBELL, MIDI_INSTRUMENT_SANTUR,   MIDI_INSTRUMENT_ORGAN1,   MIDI_INSTRUMENT_ORGAN2
>192753		c3 21 19 00 cf 21 19 00 db 21 19 00 e7 21 19 00
>192763		f3 21 19 00 ff 21 19 00		              	.dword MIDI_INSTRUMENT_ORGAN3,   MIDI_INSTRUMENT_PIPEORG,  MIDI_INSTRUMENT_REEDORG,  MIDI_INSTRUMENT_ACORDIAN, MIDI_INSTRUMENT_HARMONIC, MIDI_INSTRUMENT_BANDNEON
>19276b		0b 22 19 00 17 22 19 00 23 22 19 00 2f 22 19 00
>19277b		3b 22 19 00 47 22 19 00		              	.dword MIDI_INSTRUMENT_NYLONGT,  MIDI_INSTRUMENT_STEELGT,  MIDI_INSTRUMENT_JAZZGT,   MIDI_INSTRUMENT_CLEANGT,  MIDI_INSTRUMENT_MUTEGT,   MIDI_INSTRUMENT_OVERDGT
>192783		53 22 19 00 5f 22 19 00 6b 22 19 00 77 22 19 00
>192793		83 22 19 00 8f 22 19 00		              	.dword MIDI_INSTRUMENT_DISTGT,   MIDI_INSTRUMENT_GTHARMS,  MIDI_INSTRUMENT_ACOUBASS, MIDI_INSTRUMENT_FINGBASS, MIDI_INSTRUMENT_PICKBASS, MIDI_INSTRUMENT_FRETLESS
>19279b		9b 22 19 00 a7 22 19 00 b3 22 19 00 bf 22 19 00
>1927ab		cb 22 19 00 d7 22 19 00		              	.dword MIDI_INSTRUMENT_SLAPBAS1, MIDI_INSTRUMENT_SLAPBAS2, MIDI_INSTRUMENT_SYNBASS1, MIDI_INSTRUMENT_SYNBASS2, MIDI_INSTRUMENT_VIOLIN,   MIDI_INSTRUMENT_VIOLA
>1927b3		e3 22 19 00 ef 22 19 00 fb 22 19 00 07 23 19 00
>1927c3		13 23 19 00 1f 23 19 00		              	.dword MIDI_INSTRUMENT_CELLO,    MIDI_INSTRUMENT_CONTRAB,  MIDI_INSTRUMENT_TREMSTR,  MIDI_INSTRUMENT_PIZZ,     MIDI_INSTRUMENT_HARP,     MIDI_INSTRUMENT_TIMPANI
>1927cb		2b 23 19 00 37 23 19 00 43 23 19 00 4f 23 19 00
>1927db		5b 23 19 00 67 23 19 00		              	.dword MIDI_INSTRUMENT_STRINGS,  MIDI_INSTRUMENT_SLOWSTR,  MIDI_INSTRUMENT_SYNSTR1,  MIDI_INSTRUMENT_SYNSTR2,  MIDI_INSTRUMENT_CHOIR,    MIDI_INSTRUMENT_OOHS
>1927e3		73 23 19 00 7f 23 19 00 8b 23 19 00 97 23 19 00
>1927f3		a3 23 19 00 af 23 19 00		              	.dword MIDI_INSTRUMENT_SYNVOX,   MIDI_INSTRUMENT_ORCHIT,   MIDI_INSTRUMENT_TRUMPET,  MIDI_INSTRUMENT_TROMBONE, MIDI_INSTRUMENT_TUBA,     MIDI_INSTRUMENT_MUTETRP
>1927fb		bb 23 19 00 c7 23 19 00 d3 23 19 00 df 23 19 00
>19280b		eb 23 19 00 f7 23 19 00		              	.dword MIDI_INSTRUMENT_FRHORN,   MIDI_INSTRUMENT_BRASS1,   MIDI_INSTRUMENT_SYNBRAS1, MIDI_INSTRUMENT_SYNBRAS2, MIDI_INSTRUMENT_SOPSAX,   MIDI_INSTRUMENT_ALTOSAX
>192813		03 24 19 00 0f 24 19 00 1b 24 19 00 27 24 19 00
>192823		33 24 19 00 3f 24 19 00		              	.dword MIDI_INSTRUMENT_TENSAX,   MIDI_INSTRUMENT_BARISAX,  MIDI_INSTRUMENT_OBOE,     MIDI_INSTRUMENT_ENGLHORN, MIDI_INSTRUMENT_BASSOON,  MIDI_INSTRUMENT_CLARINET
>19282b		4b 24 19 00 57 24 19 00 63 24 19 00 6f 24 19 00
>19283b		7b 24 19 00 87 24 19 00		              	.dword MIDI_INSTRUMENT_PICCOLO,  MIDI_INSTRUMENT_FLUTE1,   MIDI_INSTRUMENT_RECORDER, MIDI_INSTRUMENT_PANFLUTE, MIDI_INSTRUMENT_BOTTLEB,  MIDI_INSTRUMENT_SHAKU
>192843		93 24 19 00 9f 24 19 00 ab 24 19 00 b7 24 19 00
>192853		c3 24 19 00 cf 24 19 00		              	.dword MIDI_INSTRUMENT_WHISTLE,  MIDI_INSTRUMENT_OCARINA,  MIDI_INSTRUMENT_SQUARWAV, MIDI_INSTRUMENT_SAWWAV,   MIDI_INSTRUMENT_SYNCALLI, MIDI_INSTRUMENT_CHIFLEAD
>19285b		db 24 19 00 e7 24 19 00 f3 24 19 00 ff 24 19 00
>19286b		0b 25 19 00 17 25 19 00		              	.dword MIDI_INSTRUMENT_CHARANG,  MIDI_INSTRUMENT_SOLOVOX,  MIDI_INSTRUMENT_FIFTHSAW, MIDI_INSTRUMENT_BASSLEAD, MIDI_INSTRUMENT_FANTASIA, MIDI_INSTRUMENT_WARMPAD
>192873		23 25 19 00 2f 25 19 00 3b 25 19 00 47 25 19 00
>192883		53 25 19 00 5f 25 19 00		              	.dword MIDI_INSTRUMENT_POLYSYN,  MIDI_INSTRUMENT_SPACEVOX, MIDI_INSTRUMENT_BOWEDGLS, MIDI_INSTRUMENT_METALPAD, MIDI_INSTRUMENT_HALOPAD,  MIDI_INSTRUMENT_SWEEPPAD
>19288b		6b 25 19 00 77 25 19 00 83 25 19 00 8f 25 19 00
>19289b		9b 25 19 00 a7 25 19 00		              	.dword MIDI_INSTRUMENT_ICERAIN,  MIDI_INSTRUMENT_SOUNDTRK, MIDI_INSTRUMENT_CRYSTAL,  MIDI_INSTRUMENT_ATMOSPH,  MIDI_INSTRUMENT_BRIGHT,   MIDI_INSTRUMENT_GOBLIN
>1928a3		b3 25 19 00 bf 25 19 00 cb 25 19 00 d7 25 19 00
>1928b3		e3 25 19 00 ef 25 19 00		              	.dword MIDI_INSTRUMENT_ECHODROP, MIDI_INSTRUMENT_STARTHEM, MIDI_INSTRUMENT_SITAR,    MIDI_INSTRUMENT_BANJO,    MIDI_INSTRUMENT_SHAMISEN, MIDI_INSTRUMENT_KOTO
>1928bb		fb 25 19 00 07 26 19 00 13 26 19 00 1f 26 19 00
>1928cb		2b 26 19 00 37 26 19 00		              	.dword MIDI_INSTRUMENT_KALIMBA,  MIDI_INSTRUMENT_BAGPIPE,  MIDI_INSTRUMENT_FIDDLE,   MIDI_INSTRUMENT_SHANNAI,  MIDI_INSTRUMENT_TINKLBEL, MIDI_INSTRUMENT_AGOGO
>1928d3		43 26 19 00 4f 26 19 00 5b 26 19 00 67 26 19 00
>1928e3		73 26 19 00 7f 26 19 00		              	.dword MIDI_INSTRUMENT_STEELDRM, MIDI_INSTRUMENT_WOODBLOK, MIDI_INSTRUMENT_TAIKO,    MIDI_INSTRUMENT_MELOTOM,  MIDI_INSTRUMENT_SYNDRUM,  MIDI_INSTRUMENT_REVRSCYM
>1928eb		8b 26 19 00 97 26 19 00 a3 26 19 00 af 26 19 00
>1928fb		bb 26 19 00 c7 26 19 00		              	.dword MIDI_INSTRUMENT_FRETNOIS, MIDI_INSTRUMENT_BRTHNOIS, MIDI_INSTRUMENT_SEASHORE, MIDI_INSTRUMENT_BIRDS,    MIDI_INSTRUMENT_TELEPHON, MIDI_INSTRUMENT_HELICOPT
>192903		d3 26 19 00 df 26 19 00 eb 26 19 00 f7 26 19 00
>192913		03 27 19 00 0f 27 19 00		              	.dword MIDI_INSTRUMENT_APPLAUSE, MIDI_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm


;******  Processing file: src\Libraries/OPL2_Midi_Instruments_Win31.asm

>19291b		00 01 8f f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO1     .text $00, $01, $8F, $F2, $F4, $38, $00, $01, $0D, $F2, $F7, $00
>192923		0d f2 f7 00
>192927		00 01 4b f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO2     .text $00, $01, $4B, $F2, $F4, $38, $00, $01, $07, $F2, $F7, $00
>19292f		07 f2 f7 00
>192933		00 01 49 f2 f4 38 00 01		MIDIW31_INSTRUMENT_PIANO3     .text $00, $01, $49, $F2, $F4, $38, $00, $01, $07, $F2, $F6, $00
>19293b		07 f2 f6 00
>19293f		00 81 12 f2 f7 00 00 41		MIDIW31_INSTRUMENT_HONKTONK   .text $00, $81, $12, $F2, $F7, $00, $00, $41, $07, $F2, $F7, $00
>192947		07 f2 f7 00
>19294b		00 01 57 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP1        .text $00, $01, $57, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>192953		07 f2 f7 00
>192957		00 01 93 f1 f7 00 00 01		MIDIW31_INSTRUMENT_EP2        .text $00, $01, $93, $F1, $F7, $00, $00, $01, $07, $F2, $F7, $00
>19295f		07 f2 f7 00
>192963		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HARPSIC    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>19296b		00 00 00 00
>19296f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLAVIC     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192977		00 00 00 00
>19297b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELESTA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192983		00 00 00 00
>192987		00 07 97 f3 f2 32 00 11		MIDIW31_INSTRUMENT_GLOCK      .text $00, $07, $97, $F3, $F2, $32, $00, $11, $87, $F2, $F1, $00
>19298f		87 f2 f1 00
>192993		00 17 21 54 f4 32 00 01		MIDIW31_INSTRUMENT_MUSICBOX   .text $00, $17, $21, $54, $F4, $32, $00, $01, $07, $F4, $F4, $00
>19299b		07 f4 f4 00
>19299f		00 98 62 f3 f6 30 00 81		MIDIW31_INSTRUMENT_VIBES      .text $00, $98, $62, $F3, $F6, $30, $00, $81, $07, $F2, $F6, $00
>1929a7		07 f2 f6 00
>1929ab		00 18 23 f6 f6 00 00 01		MIDIW31_INSTRUMENT_MARIMBA    .text $00, $18, $23, $F6, $F6, $00, $00, $01, $07, $E7, $F7, $00
>1929b3		07 e7 f7 00
>1929b7		00 15 91 f6 f6 00 00 01		MIDIW31_INSTRUMENT_XYLO       .text $00, $15, $91, $F6, $F6, $00, $00, $01, $07, $F6, $F6, $00
>1929bf		07 f6 f6 00
>1929c3		00 45 59 d3 f3 00 00 81		MIDIW31_INSTRUMENT_TUBEBELL   .text $00, $45, $59, $D3, $F3, $00, $00, $81, $87, $A3, $F3, $00
>1929cb		87 a3 f3 00
>1929cf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SANTUR     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929d7		00 00 00 00
>1929db		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929e3		00 00 00 00
>1929e7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ORGAN2     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1929ef		00 00 00 00
>1929f3		00 70 44 aa 18 34 00 b1		MIDIW31_INSTRUMENT_ORGAN3     .text $00, $70, $44, $AA, $18, $34, $00, $B1, $07, $8A, $08, $00
>1929fb		07 8a 08 00
>1929ff		00 23 93 97 23 34 01 b1		MIDIW31_INSTRUMENT_PIPEORG    .text $00, $23, $93, $97, $23, $34, $01, $B1, $07, $55, $14, $00
>192a07		07 55 14 00
>192a0b		00 61 13 97 04 30 01 b1		MIDIW31_INSTRUMENT_REEDORG    .text $00, $61, $13, $97, $04, $30, $01, $B1, $87, $55, $04, $00
>192a13		87 55 04 00
>192a17		00 24 48 98 2a 30 01 b1		MIDIW31_INSTRUMENT_ACORDIAN   .text $00, $24, $48, $98, $2A, $30, $01, $B1, $07, $46, $1A, $00
>192a1f		07 46 1a 00
>192a23		00 61 13 91 06 00 01 21		MIDIW31_INSTRUMENT_HARMONIC   .text $00, $61, $13, $91, $06, $00, $01, $21, $07, $61, $07, $00
>192a2b		07 61 07 00
>192a2f		00 21 13 71 06 00 00 a1		MIDIW31_INSTRUMENT_BANDNEON   .text $00, $21, $13, $71, $06, $00, $00, $A1, $90, $61, $07, $00
>192a37		90 61 07 00
>192a3b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_NYLONGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a43		00 00 00 00
>192a47		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELGT    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a4f		00 00 00 00
>192a53		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_JAZZGT     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192a5b		00 00 00 00
>192a5f		00 03 87 f6 22 36 01 21		MIDIW31_INSTRUMENT_CLEANGT    .text $00, $03, $87, $F6, $22, $36, $01, $21, $87, $F3, $F8, $00
>192a67		87 f3 f8 00
>192a6b		00 03 47 f9 54 30 00 21		MIDIW31_INSTRUMENT_MUTEGT     .text $00, $03, $47, $F9, $54, $30, $00, $21, $07, $F6, $3A, $00
>192a73		07 f6 3a 00
>192a77		00 23 4a 91 41 38 01 21		MIDIW31_INSTRUMENT_OVERDGT    .text $00, $23, $4A, $91, $41, $38, $01, $21, $0C, $84, $19, $00
>192a7f		0c 84 19 00
>192a83		00 23 4a 95 19 32 01 21		MIDIW31_INSTRUMENT_DISTGT     .text $00, $23, $4A, $95, $19, $32, $01, $21, $07, $94, $19, $00
>192a8b		07 94 19 00
>192a8f		00 09 a1 20 4f 00 00 84		MIDIW31_INSTRUMENT_GTHARMS    .text $00, $09, $A1, $20, $4F, $00, $00, $84, $87, $D1, $F8, $00
>192a97		87 d1 f8 00
>192a9b		00 21 1e 94 06 00 00 a2		MIDIW31_INSTRUMENT_ACOUBASS   .text $00, $21, $1E, $94, $06, $00, $00, $A2, $07, $C3, $A6, $00
>192aa3		07 c3 a6 00
>192aa7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FINGBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192aaf		00 00 00 00
>192ab3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_PICKBASS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192abb		00 00 00 00
>192abf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRETLESS   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ac7		00 00 00 00
>192acb		00 01 8b a1 9a 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS1   .text $00, $01, $8B, $A1, $9A, $38, $00, $21, $47, $F2, $DF, $00
>192ad3		47 f2 df 00
>192ad7		00 21 8b a2 16 38 00 21		MIDIW31_INSTRUMENT_SLAPBAS2   .text $00, $21, $8B, $A2, $16, $38, $00, $21, $0F, $A1, $DF, $00
>192adf		0f a1 df 00
>192ae3		00 31 8b f4 e8 3a 00 31		MIDIW31_INSTRUMENT_SYNBASS1   .text $00, $31, $8B, $F4, $E8, $3A, $00, $31, $07, $F1, $78, $00
>192aeb		07 f1 78 00
>192aef		00 31 12 f1 28 30 00 31		MIDIW31_INSTRUMENT_SYNBASS2   .text $00, $31, $12, $F1, $28, $30, $00, $31, $07, $F1, $18, $00
>192af7		07 f1 18 00
>192afb		00 31 15 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLIN     .text $00, $31, $15, $DD, $13, $00, $01, $21, $07, $56, $26, $00
>192b03		07 56 26 00
>192b07		00 31 16 dd 13 00 01 21		MIDIW31_INSTRUMENT_VIOLA      .text $00, $31, $16, $DD, $13, $00, $01, $21, $07, $66, $06, $00
>192b0f		07 66 06 00
>192b13		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CELLO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b1b		00 00 00 00
>192b1f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CONTRAB    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b27		00 00 00 00
>192b2b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TREMSTR    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b33		00 00 00 00
>192b37		00 02 1a f5 75 30 01 01		MIDIW31_INSTRUMENT_PIZZ       .text $00, $02, $1A, $F5, $75, $30, $01, $01, $87, $85, $35, $00
>192b3f		87 85 35 00
>192b43		00 02 1d f5 75 30 01 01		MIDIW31_INSTRUMENT_HARP       .text $00, $02, $1D, $F5, $75, $30, $01, $01, $87, $F3, $F4, $00
>192b4b		87 f3 f4 00
>192b4f		00 10 41 f5 05 32 01 11		MIDIW31_INSTRUMENT_TIMPANI    .text $00, $10, $41, $F5, $05, $32, $01, $11, $07, $F2, $C3, $00
>192b57		07 f2 c3 00
>192b5b		00 21 9b b1 25 3c 01 a2		MIDIW31_INSTRUMENT_STRINGS    .text $00, $21, $9B, $B1, $25, $3C, $01, $A2, $08, $72, $08, $00
>192b63		08 72 08 00
>192b67		00 a1 98 7f 03 00 01 21		MIDIW31_INSTRUMENT_SLOWSTR    .text $00, $A1, $98, $7F, $03, $00, $01, $21, $07, $3F, $07, $01
>192b6f		07 3f 07 01
>192b73		00 a1 93 c1 12 00 00 61		MIDIW31_INSTRUMENT_SYNSTR1    .text $00, $A1, $93, $C1, $12, $00, $00, $61, $07, $4F, $05, $00
>192b7b		07 4f 05 00
>192b7f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNSTR2    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b87		00 00 00 00
>192b8b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CHOIR      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b93		00 00 00 00
>192b97		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OOHS       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192b9f		00 00 00 00
>192ba3		00 71 57 54 05 3c 00 72		MIDIW31_INSTRUMENT_SYNVOX     .text $00, $71, $57, $54, $05, $3C, $00, $72, $07, $7A, $05, $00
>192bab		07 7a 05 00
>192baf		00 90 00 54 63 38 00 41		MIDIW31_INSTRUMENT_ORCHIT     .text $00, $90, $00, $54, $63, $38, $00, $41, $07, $A5, $45, $00
>192bb7		07 a5 45 00
>192bbb		00 21 92 85 17 3c 00 21		MIDIW31_INSTRUMENT_TRUMPET    .text $00, $21, $92, $85, $17, $3C, $00, $21, $08, $8F, $09, $00
>192bc3		08 8f 09 00
>192bc7		00 21 94 75 17 32 00 21		MIDIW31_INSTRUMENT_TROMBONE   .text $00, $21, $94, $75, $17, $32, $00, $21, $0C, $8F, $09, $00
>192bcf		0c 8f 09 00
>192bd3		00 21 94 76 15 00 00 61		MIDIW31_INSTRUMENT_TUBA       .text $00, $21, $94, $76, $15, $00, $00, $61, $07, $82, $37, $00
>192bdb		07 82 37 00
>192bdf		00 31 43 9e 17 00 01 21		MIDIW31_INSTRUMENT_MUTETRP    .text $00, $31, $43, $9E, $17, $00, $01, $21, $07, $62, $2C, $01
>192be7		07 62 2c 01
>192beb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FRHORN     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bf3		00 00 00 00
>192bf7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BRASS1     .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192bff		00 00 00 00
>192c03		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SYNBRAS1   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c0b		00 00 00 00
>192c0f		00 21 4d 54 3c 38 00 21		MIDIW31_INSTRUMENT_SYNBRAS2   .text $00, $21, $4D, $54, $3C, $38, $00, $21, $07, $A6, $1C, $00
>192c17		07 a6 1c 00
>192c1b		00 31 8f 93 02 38 01 61		MIDIW31_INSTRUMENT_SOPSAX     .text $00, $31, $8F, $93, $02, $38, $01, $61, $07, $72, $0B, $00
>192c23		07 72 0b 00
>192c27		00 31 8e 93 03 38 01 61		MIDIW31_INSTRUMENT_ALTOSAX    .text $00, $31, $8E, $93, $03, $38, $01, $61, $07, $72, $09, $00
>192c2f		07 72 09 00
>192c33		00 31 91 93 03 30 01 61		MIDIW31_INSTRUMENT_TENSAX     .text $00, $31, $91, $93, $03, $30, $01, $61, $07, $82, $09, $00
>192c3b		07 82 09 00
>192c3f		00 31 8e 93 0f 00 01 61		MIDIW31_INSTRUMENT_BARISAX    .text $00, $31, $8E, $93, $0F, $00, $01, $61, $07, $72, $0F, $00
>192c47		07 72 0f 00
>192c4b		00 21 4b aa 16 00 01 21		MIDIW31_INSTRUMENT_OBOE       .text $00, $21, $4B, $AA, $16, $00, $01, $21, $07, $8F, $0A, $00
>192c53		07 8f 0a 00
>192c57		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ENGLHORN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c5f		00 00 00 00
>192c63		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSOON    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c6b		00 00 00 00
>192c6f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CLARINET   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192c77		00 00 00 00
>192c7b		00 e1 1f 85 5f 30 00 e1		MIDIW31_INSTRUMENT_PICCOLO    .text $00, $E1, $1F, $85, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c83		07 65 1a 00
>192c87		00 e1 46 88 5f 30 00 e1		MIDIW31_INSTRUMENT_FLUTE1     .text $00, $E1, $46, $88, $5F, $30, $00, $E1, $07, $65, $1A, $00
>192c8f		07 65 1a 00
>192c93		00 a1 9c 75 1f 32 00 21		MIDIW31_INSTRUMENT_RECORDER   .text $00, $A1, $9C, $75, $1F, $32, $00, $21, $07, $75, $0A, $00
>192c9b		07 75 0a 00
>192c9f		00 31 8b 84 58 30 00 21		MIDIW31_INSTRUMENT_PANFLUTE   .text $00, $31, $8B, $84, $58, $30, $00, $21, $07, $65, $1A, $00
>192ca7		07 65 1a 00
>192cab		00 e1 4c 66 56 00 00 a1		MIDIW31_INSTRUMENT_BOTTLEB    .text $00, $E1, $4C, $66, $56, $00, $00, $A1, $07, $65, $26, $00
>192cb3		07 65 26 00
>192cb7		00 62 cb 76 46 00 00 a1		MIDIW31_INSTRUMENT_SHAKU      .text $00, $62, $CB, $76, $46, $00, $00, $A1, $07, $55, $36, $00
>192cbf		07 55 36 00
>192cc3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WHISTLE    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ccb		00 00 00 00
>192ccf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_OCARINA    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192cd7		00 00 00 00
>192cdb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SQUARWAV   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ce3		00 00 00 00
>192ce7		00 21 0e ff 0f 30 01 21		MIDIW31_INSTRUMENT_SAWWAV     .text $00, $21, $0E, $FF, $0F, $30, $01, $21, $07, $FF, $0F, $01
>192cef		07 ff 0f 01
>192cf3		00 22 46 86 55 30 00 21		MIDIW31_INSTRUMENT_SYNCALLI   .text $00, $22, $46, $86, $55, $30, $00, $21, $87, $64, $18, $00
>192cfb		87 64 18 00
>192cff		00 21 45 66 12 30 00 a1		MIDIW31_INSTRUMENT_CHIFLEAD   .text $00, $21, $45, $66, $12, $30, $00, $A1, $07, $96, $0A, $00
>192d07		07 96 0a 00
>192d0b		00 21 8b 92 2a 34 01 22		MIDIW31_INSTRUMENT_CHARANG    .text $00, $21, $8B, $92, $2A, $34, $01, $22, $07, $91, $2A, $00
>192d13		07 91 2a 00
>192d17		00 a2 9e df 05 00 00 61		MIDIW31_INSTRUMENT_SOLOVOX    .text $00, $A2, $9E, $DF, $05, $00, $00, $61, $47, $6F, $07, $00
>192d1f		47 6f 07 00
>192d23		00 20 1a ef 01 00 00 60		MIDIW31_INSTRUMENT_FIFTHSAW   .text $00, $20, $1A, $EF, $01, $00, $00, $60, $07, $8F, $06, $02
>192d2b		07 8f 06 02
>192d2f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BASSLEAD   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d37		00 00 00 00
>192d3b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_FANTASIA   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d43		00 00 00 00
>192d47		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WARMPAD    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192d4f		00 00 00 00
>192d53		00 61 17 91 34 3c 00 61		MIDIW31_INSTRUMENT_POLYSYN    .text $00, $61, $17, $91, $34, $3C, $00, $61, $07, $55, $16, $00
>192d5b		07 55 16 00
>192d5f		00 71 5d 54 01 30 00 72		MIDIW31_INSTRUMENT_SPACEVOX   .text $00, $71, $5D, $54, $01, $30, $00, $72, $07, $6A, $03, $00
>192d67		07 6a 03 00
>192d6b		00 21 97 21 43 38 00 a2		MIDIW31_INSTRUMENT_BOWEDGLS   .text $00, $21, $97, $21, $43, $38, $00, $A2, $07, $42, $35, $00
>192d73		07 42 35 00
>192d77		00 a1 1c a1 77 30 01 21		MIDIW31_INSTRUMENT_METALPAD   .text $00, $A1, $1C, $A1, $77, $30, $01, $21, $07, $31, $47, $01
>192d7f		07 31 47 01
>192d83		00 21 89 11 33 00 00 61		MIDIW31_INSTRUMENT_HALOPAD    .text $00, $21, $89, $11, $33, $00, $00, $61, $0A, $42, $25, $00
>192d8b		0a 42 25 00
>192d8f		00 a1 15 11 47 00 01 21		MIDIW31_INSTRUMENT_SWEEPPAD   .text $00, $A1, $15, $11, $47, $00, $01, $21, $07, $CF, $07, $00
>192d97		07 cf 07 00
>192d9b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_ICERAIN    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192da3		00 00 00 00
>192da7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SOUNDTRK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192daf		00 00 00 00
>192db3		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_CRYSTAL    .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192dbb		00 00 00 00
>192dbf		00 22 92 b1 81 3c 00 61		MIDIW31_INSTRUMENT_ATMOSPH    .text $00, $22, $92, $B1, $81, $3C, $00, $61, $8A, $F2, $26, $00
>192dc7		8a f2 26 00
>192dcb		00 41 4d f1 51 30 01 42		MIDIW31_INSTRUMENT_BRIGHT     .text $00, $41, $4D, $F1, $51, $30, $01, $42, $07, $F2, $F5, $00
>192dd3		07 f2 f5 00
>192dd7		00 61 94 11 51 36 01 a3		MIDIW31_INSTRUMENT_GOBLIN     .text $00, $61, $94, $11, $51, $36, $01, $A3, $87, $11, $13, $00
>192ddf		87 11 13 00
>192de3		00 61 8c 11 31 3a 00 a1		MIDIW31_INSTRUMENT_ECHODROP   .text $00, $61, $8C, $11, $31, $3A, $00, $A1, $87, $1D, $03, $00
>192deb		87 1d 03 00
>192def		00 a4 4c f3 73 00 01 61		MIDIW31_INSTRUMENT_STARTHEM   .text $00, $A4, $4C, $F3, $73, $00, $01, $61, $07, $81, $23, $00
>192df7		07 81 23 00
>192dfb		00 02 85 d2 53 00 00 07		MIDIW31_INSTRUMENT_SITAR      .text $00, $02, $85, $D2, $53, $00, $00, $07, $0A, $F2, $F6, $01
>192e03		0a f2 f6 01
>192e07		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BANJO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e0f		00 00 00 00
>192e13		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_SHAMISEN   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e1b		00 00 00 00
>192e1f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_KOTO       .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e27		00 00 00 00
>192e2b		00 04 4f fa 56 3c 00 01		MIDIW31_INSTRUMENT_KALIMBA    .text $00, $04, $4F, $FA, $56, $3C, $00, $01, $07, $C2, $05, $00
>192e33		07 c2 05 00
>192e37		00 21 49 7c 20 36 00 22		MIDIW31_INSTRUMENT_BAGPIPE    .text $00, $21, $49, $7C, $20, $36, $00, $22, $07, $6F, $0C, $01
>192e3f		07 6f 0c 01
>192e43		00 31 85 dd 33 3a 01 21		MIDIW31_INSTRUMENT_FIDDLE     .text $00, $31, $85, $DD, $33, $3A, $01, $21, $07, $56, $16, $00
>192e4b		07 56 16 00
>192e4f		00 20 04 da 05 30 02 21		MIDIW31_INSTRUMENT_SHANNAI    .text $00, $20, $04, $DA, $05, $30, $02, $21, $88, $8F, $0B, $00
>192e57		88 8f 0b 00
>192e5b		00 05 6a f1 e5 00 00 03		MIDIW31_INSTRUMENT_TINKLBEL   .text $00, $05, $6A, $F1, $E5, $00, $00, $03, $87, $C3, $E5, $00
>192e63		87 c3 e5 00
>192e67		00 07 15 ec 26 00 00 02		MIDIW31_INSTRUMENT_AGOGO      .text $00, $07, $15, $EC, $26, $00, $00, $02, $07, $F8, $16, $00
>192e6f		07 f8 16 00
>192e73		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_STEELDRM   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e7b		00 00 00 00
>192e7f		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_WOODBLOK   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e87		00 00 00 00
>192e8b		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TAIKO      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192e93		00 00 00 00
>192e97		00 11 41 f8 47 34 02 10		MIDIW31_INSTRUMENT_MELOTOM    .text $00, $11, $41, $F8, $47, $34, $02, $10, $0A, $F3, $03, $00
>192e9f		0a f3 03 00
>192ea3		00 01 8e f1 06 3e 02 10		MIDIW31_INSTRUMENT_SYNDRUM    .text $00, $01, $8E, $F1, $06, $3E, $02, $10, $07, $F3, $02, $00
>192eab		07 f3 02 00
>192eaf		00 0e 00 1f 00 3e 00 c0		MIDIW31_INSTRUMENT_REVRSCYM   .text $00, $0E, $00, $1F, $00, $3E, $00, $C0, $07, $1F, $FF, $03
>192eb7		07 1f ff 03
>192ebb		00 06 80 f8 24 38 00 03		MIDIW31_INSTRUMENT_FRETNOIS   .text $00, $06, $80, $F8, $24, $38, $00, $03, $8F, $56, $84, $02
>192ec3		8f 56 84 02
>192ec7		00 0e 00 f8 00 00 00 d0		MIDIW31_INSTRUMENT_BRTHNOIS   .text $00, $0E, $00, $F8, $00, $00, $00, $D0, $0C, $34, $04, $03
>192ecf		0c 34 04 03
>192ed3		00 0e 00 f6 00 00 00 c0		MIDIW31_INSTRUMENT_SEASHORE   .text $00, $0E, $00, $F6, $00, $00, $00, $C0, $07, $1F, $02, $03
>192edb		07 1f 02 03
>192edf		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_BIRDS      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ee7		00 00 00 00
>192eeb		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_TELEPHON   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192ef3		00 00 00 00
>192ef7		00 00 00 00 00 00 00 00		MIDIW31_INSTRUMENT_HELICOPT   .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>192eff		00 00 00 00
>192f03		00 26 00 ff 01 3e 00 e4		MIDIW31_INSTRUMENT_APPLAUSE   .text $00, $26, $00, $FF, $01, $3E, $00, $E4, $07, $12, $16, $01
>192f0b		07 12 16 01
>192f0f		00 00 00 f3 f0 3e 00 00		MIDIW31_INSTRUMENT_GUNSHOT    .text $00, $00, $00, $F3, $F0, $3E, $00, $00, $07, $F6, $C9, $02
>192f17		07 f6 c9 02
>192f1b		1b 29 19 00 27 29 19 00		midiInstrumentsw31 .dword MIDIW31_INSTRUMENT_PIANO1,   MIDIW31_INSTRUMENT_PIANO2,   MIDIW31_INSTRUMENT_PIANO3,   MIDIW31_INSTRUMENT_HONKTONK, MIDIW31_INSTRUMENT_EP1, MIDIW31_INSTRUMENT_EP2
>192f23		33 29 19 00 3f 29 19 00 4b 29 19 00 57 29 19 00
>192f33		63 29 19 00 6f 29 19 00		                   .dword MIDIW31_INSTRUMENT_HARPSIC,  MIDIW31_INSTRUMENT_CLAVIC,   MIDIW31_INSTRUMENT_CELESTA,  MIDIW31_INSTRUMENT_GLOCK,    MIDIW31_INSTRUMENT_MUSICBOX, MIDIW31_INSTRUMENT_VIBES
>192f3b		7b 29 19 00 87 29 19 00 93 29 19 00 9f 29 19 00
>192f4b		ab 29 19 00 b7 29 19 00			                 .dword MIDIW31_INSTRUMENT_MARIMBA,  MIDIW31_INSTRUMENT_XYLO,     MIDIW31_INSTRUMENT_TUBEBELL, MIDIW31_INSTRUMENT_SANTUR,   MIDIW31_INSTRUMENT_ORGAN1,   MIDIW31_INSTRUMENT_ORGAN2
>192f53		c3 29 19 00 cf 29 19 00 db 29 19 00 e7 29 19 00
>192f63		f3 29 19 00 ff 29 19 00			                 .dword MIDIW31_INSTRUMENT_ORGAN3,   MIDIW31_INSTRUMENT_PIPEORG,  MIDIW31_INSTRUMENT_REEDORG,  MIDIW31_INSTRUMENT_ACORDIAN, MIDIW31_INSTRUMENT_HARMONIC, MIDIW31_INSTRUMENT_BANDNEON
>192f6b		0b 2a 19 00 17 2a 19 00 23 2a 19 00 2f 2a 19 00
>192f7b		3b 2a 19 00 47 2a 19 00		                     .dword MIDIW31_INSTRUMENT_NYLONGT,  MIDIW31_INSTRUMENT_STEELGT,  MIDIW31_INSTRUMENT_JAZZGT,   MIDIW31_INSTRUMENT_CLEANGT,  MIDIW31_INSTRUMENT_MUTEGT,   MIDIW31_INSTRUMENT_OVERDGT
>192f83		53 2a 19 00 5f 2a 19 00 6b 2a 19 00 77 2a 19 00
>192f93		83 2a 19 00 8f 2a 19 00			                 .dword MIDIW31_INSTRUMENT_DISTGT,   MIDIW31_INSTRUMENT_GTHARMS,  MIDIW31_INSTRUMENT_ACOUBASS, MIDIW31_INSTRUMENT_FINGBASS, MIDIW31_INSTRUMENT_PICKBASS, MIDIW31_INSTRUMENT_FRETLESS
>192f9b		9b 2a 19 00 a7 2a 19 00 b3 2a 19 00 bf 2a 19 00
>192fab		cb 2a 19 00 d7 2a 19 00			                 .dword MIDIW31_INSTRUMENT_SLAPBAS1, MIDIW31_INSTRUMENT_SLAPBAS2, MIDIW31_INSTRUMENT_SYNBASS1, MIDIW31_INSTRUMENT_SYNBASS2, MIDIW31_INSTRUMENT_VIOLIN,   MIDIW31_INSTRUMENT_VIOLA
>192fb3		e3 2a 19 00 ef 2a 19 00 fb 2a 19 00 07 2b 19 00
>192fc3		13 2b 19 00 1f 2b 19 00			                 .dword MIDIW31_INSTRUMENT_CELLO,    MIDIW31_INSTRUMENT_CONTRAB,  MIDIW31_INSTRUMENT_TREMSTR,  MIDIW31_INSTRUMENT_PIZZ,     MIDIW31_INSTRUMENT_HARP,     MIDIW31_INSTRUMENT_TIMPANI
>192fcb		2b 2b 19 00 37 2b 19 00 43 2b 19 00 4f 2b 19 00
>192fdb		5b 2b 19 00 67 2b 19 00			                 .dword MIDIW31_INSTRUMENT_STRINGS,  MIDIW31_INSTRUMENT_SLOWSTR,  MIDIW31_INSTRUMENT_SYNSTR1,  MIDIW31_INSTRUMENT_SYNSTR2,  MIDIW31_INSTRUMENT_CHOIR,    MIDIW31_INSTRUMENT_OOHS
>192fe3		73 2b 19 00 7f 2b 19 00 8b 2b 19 00 97 2b 19 00
>192ff3		a3 2b 19 00 af 2b 19 00			                 .dword MIDIW31_INSTRUMENT_SYNVOX,   MIDIW31_INSTRUMENT_ORCHIT,   MIDIW31_INSTRUMENT_TRUMPET,  MIDIW31_INSTRUMENT_TROMBONE, MIDIW31_INSTRUMENT_TUBA,     MIDIW31_INSTRUMENT_MUTETRP
>192ffb		bb 2b 19 00 c7 2b 19 00 d3 2b 19 00 df 2b 19 00
>19300b		eb 2b 19 00 f7 2b 19 00			                 .dword MIDIW31_INSTRUMENT_FRHORN,   MIDIW31_INSTRUMENT_BRASS1,   MIDIW31_INSTRUMENT_SYNBRAS1, MIDIW31_INSTRUMENT_SYNBRAS2, MIDIW31_INSTRUMENT_SOPSAX,   MIDIW31_INSTRUMENT_ALTOSAX
>193013		03 2c 19 00 0f 2c 19 00 1b 2c 19 00 27 2c 19 00
>193023		33 2c 19 00 3f 2c 19 00			                 .dword MIDIW31_INSTRUMENT_TENSAX,   MIDIW31_INSTRUMENT_BARISAX,  MIDIW31_INSTRUMENT_OBOE,     MIDIW31_INSTRUMENT_ENGLHORN, MIDIW31_INSTRUMENT_BASSOON,  MIDIW31_INSTRUMENT_CLARINET
>19302b		4b 2c 19 00 57 2c 19 00 63 2c 19 00 6f 2c 19 00
>19303b		7b 2c 19 00 87 2c 19 00			                 .dword MIDIW31_INSTRUMENT_PICCOLO,  MIDIW31_INSTRUMENT_FLUTE1,   MIDIW31_INSTRUMENT_RECORDER, MIDIW31_INSTRUMENT_PANFLUTE, MIDIW31_INSTRUMENT_BOTTLEB,  MIDIW31_INSTRUMENT_SHAKU
>193043		93 2c 19 00 9f 2c 19 00 ab 2c 19 00 b7 2c 19 00
>193053		c3 2c 19 00 cf 2c 19 00			                 .dword MIDIW31_INSTRUMENT_WHISTLE,  MIDIW31_INSTRUMENT_OCARINA,  MIDIW31_INSTRUMENT_SQUARWAV, MIDIW31_INSTRUMENT_SAWWAV,   MIDIW31_INSTRUMENT_SYNCALLI, MIDIW31_INSTRUMENT_CHIFLEAD
>19305b		db 2c 19 00 e7 2c 19 00 f3 2c 19 00 ff 2c 19 00
>19306b		0b 2d 19 00 17 2d 19 00			                 .dword MIDIW31_INSTRUMENT_CHARANG,  MIDIW31_INSTRUMENT_SOLOVOX,  MIDIW31_INSTRUMENT_FIFTHSAW, MIDIW31_INSTRUMENT_BASSLEAD, MIDIW31_INSTRUMENT_FANTASIA, MIDIW31_INSTRUMENT_WARMPAD
>193073		23 2d 19 00 2f 2d 19 00 3b 2d 19 00 47 2d 19 00
>193083		53 2d 19 00 5f 2d 19 00			                 .dword MIDIW31_INSTRUMENT_POLYSYN,  MIDIW31_INSTRUMENT_SPACEVOX, MIDIW31_INSTRUMENT_BOWEDGLS, MIDIW31_INSTRUMENT_METALPAD, MIDIW31_INSTRUMENT_HALOPAD,  MIDIW31_INSTRUMENT_SWEEPPAD
>19308b		6b 2d 19 00 77 2d 19 00 83 2d 19 00 8f 2d 19 00
>19309b		9b 2d 19 00 a7 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ICERAIN,  MIDIW31_INSTRUMENT_SOUNDTRK, MIDIW31_INSTRUMENT_CRYSTAL,  MIDIW31_INSTRUMENT_ATMOSPH,  MIDIW31_INSTRUMENT_BRIGHT,   MIDIW31_INSTRUMENT_GOBLIN
>1930a3		b3 2d 19 00 bf 2d 19 00 cb 2d 19 00 d7 2d 19 00
>1930b3		e3 2d 19 00 ef 2d 19 00			                 .dword MIDIW31_INSTRUMENT_ECHODROP, MIDIW31_INSTRUMENT_STARTHEM, MIDIW31_INSTRUMENT_SITAR,    MIDIW31_INSTRUMENT_BANJO,    MIDIW31_INSTRUMENT_SHAMISEN, MIDIW31_INSTRUMENT_KOTO
>1930bb		fb 2d 19 00 07 2e 19 00 13 2e 19 00 1f 2e 19 00
>1930cb		2b 2e 19 00 37 2e 19 00			                 .dword MIDIW31_INSTRUMENT_KALIMBA,  MIDIW31_INSTRUMENT_BAGPIPE,  MIDIW31_INSTRUMENT_FIDDLE,   MIDIW31_INSTRUMENT_SHANNAI,  MIDIW31_INSTRUMENT_TINKLBEL, MIDIW31_INSTRUMENT_AGOGO
>1930d3		43 2e 19 00 4f 2e 19 00 5b 2e 19 00 67 2e 19 00
>1930e3		73 2e 19 00 7f 2e 19 00			                 .dword MIDIW31_INSTRUMENT_STEELDRM, MIDIW31_INSTRUMENT_WOODBLOK, MIDIW31_INSTRUMENT_TAIKO,    MIDIW31_INSTRUMENT_MELOTOM,  MIDIW31_INSTRUMENT_SYNDRUM,  MIDIW31_INSTRUMENT_REVRSCYM
>1930eb		8b 2e 19 00 97 2e 19 00 a3 2e 19 00 af 2e 19 00
>1930fb		bb 2e 19 00 c7 2e 19 00			                 .dword MIDIW31_INSTRUMENT_FRETNOIS, MIDIW31_INSTRUMENT_BRTHNOIS, MIDIW31_INSTRUMENT_SEASHORE, MIDIW31_INSTRUMENT_BIRDS,    MIDIW31_INSTRUMENT_TELEPHON, MIDIW31_INSTRUMENT_HELICOPT
>193103		d3 2e 19 00 df 2e 19 00 eb 2e 19 00 f7 2e 19 00
>193113		03 2f 19 00 0f 2f 19 00			                 .dword MIDIW31_INSTRUMENT_APPLAUSE, MIDIW31_INSTRUMENT_GUNSHOT

;******  Return to file: src\Libraries/OPL2_Library.asm

>19311b		3c 42 44 45 47 49 4b 4c		NOTE_INTRO  .byte  $3C, $42, $44, $45, $47, $49, $4B, $4C
.193123						IOPL2_TONE_TEST
.193123		e2 20		sep #$20	                SEP #$20        ; set A short
.193125		c2 10		rep #$10	                REP #$10        ; set X long
.193127		a2 00 00	ldx #$0000	                LDX #0
.19312a						OPL2_TONE_TESTING_L1
.19312a		bf 1b 31 19	lda $19311b,x	                LDA NOTE_INTRO, X
.19312e		29 0f		and #$0f	                AND #$F
.193130		85 30		sta $30		                STA OPL2_NOTE ; start at C
.193132		bf 1b 31 19	lda $19311b,x	                LDA NOTE_INTRO, X
.193136		29 70		and #$70	                AND #$70
.193138		4a		lsr a		                LSR A
.193139		4a		lsr a		                LSR A
.19313a		4a		lsr a		                LSR A
.19313b		4a		lsr a		                LSR A
.19313c		85 31		sta $31		                STA OPL2_OCTAVE
.19313e		8a		txa		                TXA
.19313f		29 03		and #$03	                AND #$03        ; replace modulo 3 -  play each note on a different channel
.193141		85 27		sta $27		                STA OPL2_CHANNEL
.193143		22 13 33 19	jsl $193313	                JSL OPL2_PLAYNOTE
.193147		a0 00 00	ldy #$0000	                LDY #$0000
.19314a						OPL2_TONE_TESTING_L2
.19314a		ea		nop		                NOP
.19314b		ea		nop		                NOP
.19314c		ea		nop		                NOP
.19314d		ea		nop		                NOP
.19314e		c8		iny		                INY
.19314f		c0 ff ff	cpy #$ffff	                CPY #$FFFF
.193152		d0 f6		bne $19314a	                BNE OPL2_TONE_TESTING_L2
.193154		e8		inx		                INX
.193155		e0 08 00	cpx #$0008	                CPX #8
.193158		d0 d0		bne $19312a	                BNE OPL2_TONE_TESTING_L1
.19315a		6b		rtl		                RTL
.19315b						OPL2_INIT
.19315b		c2 20		rep #$20	                REP #$20        ; set A long
.19315d		a9 00 00	lda #$0000	                LDA #$0000
.193160		85 28		sta $28		                STA OPL2_REG_REGION
.193162		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193164		85 30		sta $30		                STA OPL2_NOTE
.193166		85 32		sta $32		                STA OPL2_PARAMETER0
.193168		85 34		sta $34		                STA OPL2_PARAMETER2
.19316a		a9 e5 10	lda #$10e5	                LDA #<>INSTRUMENT_ACCORDN
.19316d		85 50		sta $50		                STA RAD_ADDR
.19316f		a9 19 00	lda #$0019	                LDA #<`INSTRUMENT_ACCORDN
.193172		85 52		sta $52		                STA RAD_ADDR + 2
.193174		e2 20		sep #$20	                SEP #$20        ; set A short
.193176		6b		rtl		                RTL
.193177						OPL2_Reset
.193177		6b		rtl		                RTL
.193178						OPL2_Get_FrequencyBlock
.193178		6b		rtl		                RTL
.193179						OPL2_GET_REGISTER
.193179		48		pha		                PHA             ; begin setdp macro
.19317a		08		php		                PHP
.19317b		c2 20		rep #$20	                REP #$20        ; set A long
.19317d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193180		5b		tcd		                TCD
.193181		28		plp		                PLP
.193182		68		pla		                PLA             ; end setdp macro
.193183		c2 20		rep #$20	                REP #$20        ; set A long
.193185		18		clc		              CLC
.193186		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193189		65 32		adc $32		              ADC OPL2_PARAMETER0
.19318b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19318d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193190		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193192		e2 20		sep #$20	                SEP #$20        ; set A short
.193194		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193196		6b		rtl		              RTL
.193197						OPL2_GET_WAVEFORM_SELECT
.193197		48		pha		                PHA             ; begin setdp macro
.193198		08		php		                PHP
.193199		c2 20		rep #$20	                REP #$20        ; set A long
.19319b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19319e		5b		tcd		                TCD
.19319f		28		plp		                PLP
.1931a0		68		pla		                PLA             ; end setdp macro
.1931a1		c2 20		rep #$20	                REP #$20        ; set A long
.1931a3		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931a6		69 01 00	adc #$0001	              ADC #$0001
.1931a9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1931ab		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1931ae		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1931b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1931b2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931b4		29 20		and #$20	              AND #$20
.1931b6		6b		rtl		              RTL
.1931b7						OPL2_GET_SCALINGLEVEL
.1931b7		48		pha		                PHA             ; begin setdp macro
.1931b8		08		php		                PHP
.1931b9		c2 20		rep #$20	                REP #$20        ; set A long
.1931bb		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931be		5b		tcd		                TCD
.1931bf		28		plp		                PLP
.1931c0		68		pla		                PLA             ; end setdp macro
.1931c1		c2 20		rep #$20	                REP #$20        ; set A long
.1931c3		a9 40 00	lda #$0040	              LDA #$0040  ;
.1931c6		85 28		sta $28		              STA OPL2_REG_REGION
.1931c8		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.1931cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1931cd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1931cf		29 c0		and #$c0	              AND #$C0
.1931d1		4a		lsr a		              LSR A
.1931d2		4a		lsr a		              LSR A
.1931d3		4a		lsr a		              LSR A
.1931d4		4a		lsr a		              LSR A
.1931d5		4a		lsr a		              LSR A
.1931d6		4a		lsr a		              LSR A
.1931d7		6b		rtl		              RTL
.1931d8						OPL2_GET_BLOCK
.1931d8		48		pha		                PHA             ; begin setdp macro
.1931d9		08		php		                PHP
.1931da		c2 20		rep #$20	                REP #$20        ; set A long
.1931dc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1931df		5b		tcd		                TCD
.1931e0		28		plp		                PLP
.1931e1		68		pla		                PLA             ; end setdp macro
.1931e2		e2 20		sep #$20	                SEP #$20        ; set A short
.1931e4		18		clc		              CLC
.1931e5		a5 27		lda $27		              LDA OPL2_CHANNEL
.1931e7		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.1931e9		69 b0		adc #$b0	              ADC #$B0
.1931eb		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.1931ed		a9 00		lda #$00	              LDA #$00
.1931ef		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.1931f1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1931f3		18		clc		              CLC
.1931f4		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1931f7		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.1931f9		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1931fb		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1931fe		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193200		e2 20		sep #$20	                SEP #$20        ; set A short
.193202		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193204		29 1c		and #$1c	              AND #$1C
.193206		4a		lsr a		              LSR A
.193207		4a		lsr a		              LSR A
.193208		6b		rtl		              RTL
.193209						OPL2_GET_KEYON
.193209		48		pha		                PHA             ; begin setdp macro
.19320a		08		php		                PHP
.19320b		c2 20		rep #$20	                REP #$20        ; set A long
.19320d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193210		5b		tcd		                TCD
.193211		28		plp		                PLP
.193212		68		pla		                PLA             ; end setdp macro
.193213		e2 20		sep #$20	                SEP #$20        ; set A short
.193215		18		clc		              CLC
.193216		a5 27		lda $27		              LDA OPL2_CHANNEL
.193218		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.19321a		69 b0		adc #$b0	              ADC #$B0
.19321c		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19321e		a9 00		lda #$00	              LDA #$00
.193220		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193222		c2 30		rep #$30	                REP #$30        ; set A&X long
.193224		18		clc		              CLC
.193225		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193228		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.19322a		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19322c		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19322f		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193231		e2 20		sep #$20	                SEP #$20        ; set A short
.193233		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193235		29 20		and #$20	              AND #$20
.193237		6b		rtl		              RTL
.193238						OPL2_GET_FEEDBACK
.193238		48		pha		                PHA             ; begin setdp macro
.193239		08		php		                PHP
.19323a		c2 20		rep #$20	                REP #$20        ; set A long
.19323c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19323f		5b		tcd		                TCD
.193240		28		plp		                PLP
.193241		68		pla		                PLA             ; end setdp macro
.193242		e2 20		sep #$20	                SEP #$20        ; set A short
.193244		18		clc		              CLC
.193245		a5 27		lda $27		              LDA OPL2_CHANNEL
.193247		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193249		69 c0		adc #$c0	              ADC #$C0
.19324b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19324d		a9 00		lda #$00	              LDA #$00
.19324f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193251		c2 30		rep #$30	                REP #$30        ; set A&X long
.193253		18		clc		              CLC
.193254		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193257		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193259		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19325b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19325e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193260		e2 20		sep #$20	                SEP #$20        ; set A short
.193262		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193264		29 e0		and #$e0	              AND #$E0
.193266		4a		lsr a		              LSR
.193267		6b		rtl		              RTL
.193268						OPL2_GET_SYNTHMODE
.193268		48		pha		                PHA             ; begin setdp macro
.193269		08		php		                PHP
.19326a		c2 20		rep #$20	                REP #$20        ; set A long
.19326c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19326f		5b		tcd		                TCD
.193270		28		plp		                PLP
.193271		68		pla		                PLA             ; end setdp macro
.193272		e2 20		sep #$20	                SEP #$20        ; set A short
.193274		18		clc		              CLC
.193275		a5 27		lda $27		              LDA OPL2_CHANNEL
.193277		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193279		69 c0		adc #$c0	              ADC #$C0
.19327b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19327d		a9 00		lda #$00	              LDA #$00
.19327f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193281		c2 30		rep #$30	                REP #$30        ; set A&X long
.193283		18		clc		              CLC
.193284		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193287		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193289		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19328b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19328e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193290		e2 20		sep #$20	                SEP #$20        ; set A short
.193292		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193294		29 01		and #$01	              AND #$01
.193296		6b		rtl		              RTL
.193297						OPL2_GET_DEEPTREMOLO
.193297		48		pha		                PHA             ; begin setdp macro
.193298		08		php		                PHP
.193299		c2 20		rep #$20	                REP #$20        ; set A long
.19329b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19329e		5b		tcd		                TCD
.19329f		28		plp		                PLP
.1932a0		68		pla		                PLA             ; end setdp macro
.1932a1		c2 20		rep #$20	                REP #$20        ; set A long
.1932a3		a9 bd 00	lda #$00bd	              LDA #$00BD;
.1932a6		85 28		sta $28		              STA OPL2_REG_REGION
.1932a8		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.1932ab		e2 20		sep #$20	                SEP #$20        ; set A short
.1932ad		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932af		29 80		and #$80	              AND #$80
.1932b1		6b		rtl		              RTL
.1932b2						OPL2_GET_DEEPVIBRATO
.1932b2		48		pha		                PHA             ; begin setdp macro
.1932b3		08		php		                PHP
.1932b4		c2 20		rep #$20	                REP #$20        ; set A long
.1932b6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932b9		5b		tcd		                TCD
.1932ba		28		plp		                PLP
.1932bb		68		pla		                PLA             ; end setdp macro
.1932bc		c2 20		rep #$20	                REP #$20        ; set A long
.1932be		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932c1		69 bd 00	adc #$00bd	              ADC #$00BD
.1932c4		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932c6		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932c9		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1932cd		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932cf		29 40		and #$40	              AND #$40
.1932d1		6b		rtl		              RTL
.1932d2						OPL2_GET_PERCUSSION
.1932d2		48		pha		                PHA             ; begin setdp macro
.1932d3		08		php		                PHP
.1932d4		c2 20		rep #$20	                REP #$20        ; set A long
.1932d6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932d9		5b		tcd		                TCD
.1932da		28		plp		                PLP
.1932db		68		pla		                PLA             ; end setdp macro
.1932dc		c2 20		rep #$20	                REP #$20        ; set A long
.1932de		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.1932e1		69 bd 00	adc #$00bd	              ADC #$00BD
.1932e4		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1932e6		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1932e9		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1932eb		e2 20		sep #$20	                SEP #$20        ; set A short
.1932ed		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1932ef		29 20		and #$20	              AND #$20
.1932f1		6b		rtl		              RTL
.1932f2						OPL2_GET_DRUMS
.1932f2		48		pha		                PHA             ; begin setdp macro
.1932f3		08		php		                PHP
.1932f4		c2 20		rep #$20	                REP #$20        ; set A long
.1932f6		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1932f9		5b		tcd		                TCD
.1932fa		28		plp		                PLP
.1932fb		68		pla		                PLA             ; end setdp macro
.1932fc		c2 20		rep #$20	                REP #$20        ; set A long
.1932fe		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193301		69 bd 00	adc #$00bd	              ADC #$00BD
.193304		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193306		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193309		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19330b		e2 20		sep #$20	                SEP #$20        ; set A short
.19330d		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19330f		29 1f		and #$1f	              AND #$1F
.193311		6b		rtl		              RTL
.193312						OPL2_Get_WaveForm
.193312		6b		rtl		                RTL
.193313						OPL2_PLAYNOTE
.193313		48		pha		                PHA             ; begin setdp macro
.193314		08		php		                PHP
.193315		c2 20		rep #$20	                REP #$20        ; set A long
.193317		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19331a		5b		tcd		                TCD
.19331b		28		plp		                PLP
.19331c		68		pla		                PLA             ; end setdp macro
.19331d		e2 20		sep #$20	                SEP #$20        ; set A short
.19331f		da		phx		                PHX
.193320		a9 00		lda #$00	                LDA #$00
.193322		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193324		20 fb 38	jsr $1938fb	                JSR OPL2_SET_KEYON
.193327		20 c0 38	jsr $1938c0	                JSR OPL2_SET_BLOCK  ; OPL2_SET_BLOCK Already to OPL2_OCTAVE
.19332a		e2 10		sep #$10	                SEP #$10        ; set X short
.19332c		a5 30		lda $30		                LDA OPL2_NOTE
.19332e		3a		dec a		                DEC A
.19332f		0a		asl a		                ASL A
.193330		aa		tax		                TAX
.193331		bf aa 10 19	lda $1910aa,x	                LDA @lnoteFNumbers,X
.193335		85 32		sta $32		                STA OPL2_PARAMETER0 ; Store the 8it in Param OPL2_PARAMETER0
.193337		e8		inx		                INX
.193338		bf aa 10 19	lda $1910aa,x	                LDA @lnoteFNumbers,X
.19333c		85 33		sta $33		                STA OPL2_PARAMETER1 ; Store the 8bit in Param OPL2_PARAMETER1
.19333e		22 3e 38 19	jsl $19383e	                JSL OPL2_SET_FNUMBER
.193342		a9 01		lda #$01	                LDA #$01
.193344		85 32		sta $32		                STA OPL2_PARAMETER0 ; Set Keyon False
.193346		20 fb 38	jsr $1938fb	                JSR OPL2_SET_KEYON
.193349		c2 10		rep #$10	                REP #$10        ; set X long
.19334b		fa		plx		                PLX
.19334c		6b		rtl		                RTL
.19334d						OPL2_PLAYDRUM
.19334d		6b		rtl		                RTL
.19334e						OPL2_SET_INSTRUMENT
.19334e		48		pha		                PHA             ; begin setdp macro
.19334f		08		php		                PHP
.193350		c2 20		rep #$20	                REP #$20        ; set A long
.193352		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193355		5b		tcd		                TCD
.193356		28		plp		                PLP
.193357		68		pla		                PLA             ; end setdp macro
.193358		38		sec		              SEC ; Set the WaveFormSelect to True
.193359		22 3c 35 19	jsl $19353c	              JSL OPL2_SET_WAVEFORMSELECT;
.19335d		e2 20		sep #$20	                SEP #$20        ; set A short
.19335f		c2 10		rep #$10	                REP #$10        ; set X long
.193361		a0 00 00	ldy #$0000	              LDY #$0000
.193364		a2 00 00	ldx #$0000	              LDX #$0000
.193367		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO],Y ; Pointer Location 0 in Instrument Profile
.193369		85 35		sta $35		              STA OPL2_PARAMETER3
.19336b		c8		iny		              INY
.19336c		c9 06		cmp #$06	              CMP #$06
.19336e		d0 03		bne $193373	              BNE PERCUSSION_NEXT07
.193370		82 70 01	brl $1934e3	              BRL Percussion_6
.193373						PERCUSSION_NEXT07
.193373		c9 07		cmp #$07	              CMP #$07
.193375		d0 03		bne $19337a	              BNE PERCUSSION_NEXT08
.193377		82 44 01	brl $1934be	              BRL Percussion_7
.19337a						PERCUSSION_NEXT08
.19337a		c9 08		cmp #$08	              CMP #$08
.19337c		d0 03		bne $193381	              BNE PERCUSSION_NEXT09
.19337e		82 18 01	brl $193499	              BRL Percussion_8
.193381						PERCUSSION_NEXT09
.193381		c9 09		cmp #$09	              CMP #$09
.193383		d0 03		bne $193388	              BNE PERCUSSION_NEXT0A
.193385		82 ec 00	brl $193474	              BRL Percussion_9
.193388						PERCUSSION_NEXT0A
.193388		c9 0a		cmp #$0a	              CMP #$0A
.19338a		d0 03		bne $19338f	              BNE Percussion_Default
.19338c		82 c0 00	brl $19344f	              BRL Percussion_A
.19338f						Percussion_Default
.19338f		a9 00		lda #$00	              LDA #$00
.193391		85 26		sta $26		              STA OPL2_OPERATOR
.193393		c2 20		rep #$20	                REP #$20        ; set A long
.193395		a9 20 00	lda #$0020	              LDA #$0020;
.193398		85 28		sta $28		              STA OPL2_REG_REGION
.19339a		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.19339d		e2 20		sep #$20	                SEP #$20        ; set A short
.19339f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1933a1		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933a3		c8		iny		              INY
.1933a4		c2 20		rep #$20	                REP #$20        ; set A long
.1933a6		a9 40 00	lda #$0040	              LDA #$0040;
.1933a9		85 28		sta $28		              STA OPL2_REG_REGION
.1933ab		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.1933ae		e2 20		sep #$20	                SEP #$20        ; set A short
.1933b0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1933b2		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933b4		c8		iny		              INY
.1933b5		c2 20		rep #$20	                REP #$20        ; set A long
.1933b7		a9 60 00	lda #$0060	              LDA #$0060;
.1933ba		85 28		sta $28		              STA OPL2_REG_REGION
.1933bc		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.1933bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1933c1		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1933c3		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933c5		c8		iny		              INY
.1933c6		c2 20		rep #$20	                REP #$20        ; set A long
.1933c8		a9 80 00	lda #$0080	              LDA #$0080;
.1933cb		85 28		sta $28		              STA OPL2_REG_REGION
.1933cd		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.1933d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1933d2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1933d4		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933d6		c8		iny		              INY
.1933d7		c2 20		rep #$20	                REP #$20        ; set A long
.1933d9		a9 e0 00	lda #$00e0	              LDA #$00E0;
.1933dc		85 28		sta $28		              STA OPL2_REG_REGION
.1933de		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.1933e1		e2 20		sep #$20	                SEP #$20        ; set A short
.1933e3		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1933e5		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1933e7		c8		iny		              INY
.1933e8		e2 10		sep #$10	                SEP #$10        ; set X short
.1933ea		a5 27		lda $27		              LDA OPL2_CHANNEL
.1933ec		29 0f		and #$0f	              AND #$0F
.1933ee		aa		tax		              TAX
.1933ef		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 6 in Instrument Profile
.1933f1		9f c0 e6 af	sta $afe6c0,x	              STA @lOPL3_R_FEEDBACK,X
.1933f5		c8		iny		              INY
.1933f6		a9 01		lda #$01	              LDA #$01
.1933f8		85 26		sta $26		              STA OPL2_OPERATOR
.1933fa		c2 20		rep #$20	                REP #$20        ; set A long
.1933fc		a9 20 00	lda #$0020	              LDA #$0020;
.1933ff		85 28		sta $28		              STA OPL2_REG_REGION
.193401		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.193404		e2 20		sep #$20	                SEP #$20        ; set A short
.193406		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 7 in Instrument Profile
.193408		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19340a		c8		iny		              INY
.19340b		c2 20		rep #$20	                REP #$20        ; set A long
.19340d		a9 40 00	lda #$0040	              LDA #$0040;
.193410		85 28		sta $28		              STA OPL2_REG_REGION
.193412		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.193415		e2 20		sep #$20	                SEP #$20        ; set A short
.193417		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 8 in Instrument Profile
.193419		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19341b		c8		iny		              INY
.19341c		c2 20		rep #$20	                REP #$20        ; set A long
.19341e		a9 60 00	lda #$0060	              LDA #$0060;
.193421		85 28		sta $28		              STA OPL2_REG_REGION
.193423		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.193426		e2 20		sep #$20	                SEP #$20        ; set A short
.193428		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 9 in Instrument Profile
.19342a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19342c		c8		iny		              INY
.19342d		c2 20		rep #$20	                REP #$20        ; set A long
.19342f		a9 80 00	lda #$0080	              LDA #$0080;
.193432		85 28		sta $28		              STA OPL2_REG_REGION
.193434		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.193437		e2 20		sep #$20	                SEP #$20        ; set A short
.193439		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location A in Instrument Profile
.19343b		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19343d		c8		iny		              INY
.19343e		c2 20		rep #$20	                REP #$20        ; set A long
.193440		a9 e0 00	lda #$00e0	              LDA #$00E0;
.193443		85 28		sta $28		              STA OPL2_REG_REGION
.193445		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.193448		e2 20		sep #$20	                SEP #$20        ; set A short
.19344a		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location B in Instrument Profile
.19344c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19344e		6b		rtl		                RTL
.19344f						Percussion_A
.19344f		e2 20		sep #$20	                SEP #$20        ; set A short
.193451		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193453		8f 31 e6 af	sta $afe631	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $11
.193457		c8		iny		              INY
.193458		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19345a		8f 51 e6 af	sta $afe651	              STA @lOPL3_R_KSL_TL + $11
.19345e		c8		iny		              INY
.19345f		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193461		8f 71 e6 af	sta $afe671	              STA @lOPL3_R_AR_DR + $11
.193465		c8		iny		              INY
.193466		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193468		8f 91 e6 af	sta $afe691	              STA @lOPL3_R_SL_RR + $11
.19346c		c8		iny		              INY
.19346d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.19346f		8f f1 e6 af	sta $afe6f1	              STA @lOPL3_R_WAVE_SELECT + $11
.193473		6b		rtl		                RTL
.193474						Percussion_9
.193474		e2 20		sep #$20	                SEP #$20        ; set A short
.193476		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.193478		8f 35 e6 af	sta $afe635	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $15
.19347c		c8		iny		              INY
.19347d		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.19347f		8f 55 e6 af	sta $afe655	              STA @lOPL3_R_KSL_TL + $15
.193483		c8		iny		              INY
.193484		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.193486		8f 75 e6 af	sta $afe675	              STA @lOPL3_R_AR_DR + $15
.19348a		c8		iny		              INY
.19348b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.19348d		8f 95 e6 af	sta $afe695	              STA @lOPL3_R_SL_RR + $15
.193491		c8		iny		              INY
.193492		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193494		8f f5 e6 af	sta $afe6f5	              STA @lOPL3_R_WAVE_SELECT + $15
.193498		6b		rtl		              RTL
.193499						Percussion_8
.193499		e2 20		sep #$20	                SEP #$20        ; set A short
.19349b		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.19349d		8f 32 e6 af	sta $afe632	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $12
.1934a1		c8		iny		              INY
.1934a2		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934a4		8f 52 e6 af	sta $afe652	              STA @lOPL3_R_KSL_TL + $12
.1934a8		c8		iny		              INY
.1934a9		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934ab		8f 72 e6 af	sta $afe672	              STA @lOPL3_R_AR_DR + $12
.1934af		c8		iny		              INY
.1934b0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934b2		8f 92 e6 af	sta $afe692	              STA @lOPL3_R_SL_RR + $12
.1934b6		c8		iny		              INY
.1934b7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934b9		8f f2 e6 af	sta $afe6f2	              STA @lOPL3_R_WAVE_SELECT + $12
.1934bd		6b		rtl		              RTL
.1934be						Percussion_7
.1934be		e2 20		sep #$20	                SEP #$20        ; set A short
.1934c0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934c2		8f 34 e6 af	sta $afe634	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $14
.1934c6		c8		iny		              INY
.1934c7		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934c9		8f 54 e6 af	sta $afe654	              STA @lOPL3_R_KSL_TL + $14
.1934cd		c8		iny		              INY
.1934ce		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934d0		8f 74 e6 af	sta $afe674	              STA @lOPL3_R_AR_DR + $14
.1934d4		c8		iny		              INY
.1934d5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.1934d7		8f 94 e6 af	sta $afe694	              STA @lOPL3_R_SL_RR + $14
.1934db		c8		iny		              INY
.1934dc		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.1934de		8f f4 e6 af	sta $afe6f4	              STA @lOPL3_R_WAVE_SELECT + $14
.1934e2		6b		rtl		              RTL
.1934e3						Percussion_6
.1934e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1934e5		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 1 in Instrument Profile
.1934e7		8f 30 e6 af	sta $afe630	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $10
.1934eb		8f 33 e6 af	sta $afe633	              STA @lOPL3_R_AM_VID_EG_KSR_MULT + $13
.1934ef		c8		iny		              INY
.1934f0		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 2 in Instrument Profile
.1934f2		8f 50 e6 af	sta $afe650	              STA @lOPL3_R_KSL_TL + $10
.1934f6		8f 53 e6 af	sta $afe653	              STA @lOPL3_R_KSL_TL + $13
.1934fa		c8		iny		              INY
.1934fb		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 3 in Instrument Profile
.1934fd		8f 70 e6 af	sta $afe670	              STA @lOPL3_R_AR_DR + $10
.193501		8f 73 e6 af	sta $afe673	              STA @lOPL3_R_AR_DR + $13
.193505		c8		iny		              INY
.193506		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 4 in Instrument Profile
.193508		8f 90 e6 af	sta $afe690	              STA @lOPL3_R_SL_RR + $10
.19350c		8f 93 e6 af	sta $afe693	              STA @lOPL3_R_SL_RR + $13
.193510		c8		iny		              INY
.193511		b7 08		lda [$08],y	              LDA [OPL2_ADDY_PTR_LO], Y ; Pointer Location 5 in Instrument Profile
.193513		8f f0 e6 af	sta $afe6f0	              STA @lOPL3_R_WAVE_SELECT + $10
.193517		8f f3 e6 af	sta $afe6f3	              STA @lOPL3_R_WAVE_SELECT + $13
.19351b		6b		rtl		              RTL
.19351c						OPL2_SET_REGISTER
.19351c		48		pha		                PHA             ; begin setdp macro
.19351d		08		php		                PHP
.19351e		c2 20		rep #$20	                REP #$20        ; set A long
.193520		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193523		5b		tcd		                TCD
.193524		28		plp		                PLP
.193525		68		pla		                PLA             ; end setdp macro
.193526		c2 20		rep #$20	                REP #$20        ; set A long
.193528		18		clc		              CLC
.193529		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.19352c		65 32		adc $32		              ADC OPL2_PARAMETER0
.19352e		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193530		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193533		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193535		e2 20		sep #$20	                SEP #$20        ; set A short
.193537		a5 33		lda $33		              LDA OPL2_PARAMETER1
.193539		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19353b		6b		rtl		              RTL
.19353c						OPL2_SET_WAVEFORMSELECT
.19353c		48		pha		                PHA             ; begin setdp macro
.19353d		08		php		                PHP
.19353e		c2 20		rep #$20	                REP #$20        ; set A long
.193540		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193543		5b		tcd		                TCD
.193544		28		plp		                PLP
.193545		68		pla		                PLA             ; end setdp macro
.193546		c2 20		rep #$20	                REP #$20        ; set A long
.193548		a9 01 e6	lda #$e601	              LDA #<>OPL3_R_BASE + $0001
.19354b		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19354d		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193550		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193552		e2 20		sep #$20	                SEP #$20        ; set A short
.193554		b0 07		bcs $19355d	              BCS OPL2_Set_WaveFormSelect_set
.193556		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193558		29 df		and #$df	              AND #$DF
.19355a		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19355c		6b		rtl		              RTL
.19355d						OPL2_Set_WaveFormSelect_set
.19355d		48		pha		                PHA             ; begin setdp macro
.19355e		08		php		                PHP
.19355f		c2 20		rep #$20	                REP #$20        ; set A long
.193561		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193564		5b		tcd		                TCD
.193565		28		plp		                PLP
.193566		68		pla		                PLA             ; end setdp macro
.193567		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193569		09 20 00	ora #$0020	              ORA #$20
.19356c		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19356e		6b		rtl		                RTL
.19356f						OPL2_SET_TREMOLO
.19356f		48		pha		                PHA             ; begin setdp macro
.193570		08		php		                PHP
.193571		c2 20		rep #$20	                REP #$20        ; set A long
.193573		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193576		5b		tcd		                TCD
.193577		28		plp		                PLP
.193578		68		pla		                PLA             ; end setdp macro
.193579		08		php		                PHP ; Push the Carry
.19357a		c2 20		rep #$20	                REP #$20        ; set A long
.19357c		18		clc		                CLC
.19357d		a9 20 00	lda #$0020	                LDA #$0020 ;
.193580		85 28		sta $28		                STA OPL2_REG_REGION
.193582		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.193585		28		plp		                PLP ; Pull the Carry out
.193586		e2 20		sep #$20	                SEP #$20        ; set A short
.193588		b0 08		bcs $193592	                BCS OPL2_Set_Tremolo_Set;
.19358a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19358c		29 7f		and #$7f	                AND #$7F
.19358e		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193590		80 06		bra $193598	                BRA OPL2_Set_Tremolo_Exit
.193592						OPL2_Set_Tremolo_Set
.193592		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193594		09 80		ora #$80	                ORA #$80
.193596		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193598						OPL2_Set_Tremolo_Exit
.193598		6b		rtl		                RTL
.193599						OPL2_GET_TREMOLO
.193599		48		pha		                PHA             ; begin setdp macro
.19359a		08		php		                PHP
.19359b		c2 20		rep #$20	                REP #$20        ; set A long
.19359d		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935a0		5b		tcd		                TCD
.1935a1		28		plp		                PLP
.1935a2		68		pla		                PLA             ; end setdp macro
.1935a3		c2 20		rep #$20	                REP #$20        ; set A long
.1935a5		a9 20 00	lda #$0020	                LDA #$0020;
.1935a8		85 28		sta $28		                STA OPL2_REG_REGION
.1935aa		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.1935ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1935af		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935b1		29 80		and #$80	                AND #$80
.1935b3		6b		rtl		                RTL
.1935b4						OPL2_SET_VIBRATO
.1935b4		48		pha		                PHA             ; begin setdp macro
.1935b5		08		php		                PHP
.1935b6		c2 20		rep #$20	                REP #$20        ; set A long
.1935b8		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935bb		5b		tcd		                TCD
.1935bc		28		plp		                PLP
.1935bd		68		pla		                PLA             ; end setdp macro
.1935be		08		php		                PHP ; Push the Carry
.1935bf		c2 20		rep #$20	                REP #$20        ; set A long
.1935c1		18		clc		                CLC
.1935c2		a9 20 00	lda #$0020	                LDA #$0020;
.1935c5		85 28		sta $28		                STA OPL2_REG_REGION
.1935c7		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.1935ca		28		plp		                PLP ; Pull the Carry out
.1935cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1935cd		b0 08		bcs $1935d7	                BCS OPL2_Set_Vibrato_Set;
.1935cf		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935d1		29 bf		and #$bf	                AND #$BF
.1935d3		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935d5		80 06		bra $1935dd	                BRA OPL2_Set_Vibrato_Exit
.1935d7						OPL2_Set_Vibrato_Set
.1935d7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935d9		09 40		ora #$40	                ORA #$40
.1935db		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1935dd						OPL2_Set_Vibrato_Exit
.1935dd		6b		rtl		                RTL
.1935de						OPL2_GET_VIBRATO
.1935de		48		pha		                PHA             ; begin setdp macro
.1935df		08		php		                PHP
.1935e0		c2 20		rep #$20	                REP #$20        ; set A long
.1935e2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1935e5		5b		tcd		                TCD
.1935e6		28		plp		                PLP
.1935e7		68		pla		                PLA             ; end setdp macro
.1935e8		c2 20		rep #$20	                REP #$20        ; set A long
.1935ea		a9 20 00	lda #$0020	                LDA #$0020;
.1935ed		85 28		sta $28		                STA OPL2_REG_REGION
.1935ef		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.1935f2		e2 20		sep #$20	                SEP #$20        ; set A short
.1935f4		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1935f6		29 40		and #$40	                AND #$40
.1935f8		6b		rtl		                RTL
.1935f9						OPL2_SET_MAINTAINSUSTAIN
.1935f9		48		pha		                PHA             ; begin setdp macro
.1935fa		08		php		                PHP
.1935fb		c2 20		rep #$20	                REP #$20        ; set A long
.1935fd		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193600		5b		tcd		                TCD
.193601		28		plp		                PLP
.193602		68		pla		                PLA             ; end setdp macro
.193603		08		php		              PHP ; Push the Carry
.193604		c2 20		rep #$20	                REP #$20        ; set A long
.193606		18		clc		              CLC
.193607		a9 20 00	lda #$0020	              LDA #$0020;
.19360a		85 28		sta $28		              STA OPL2_REG_REGION
.19360c		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.19360f		28		plp		              PLP ; Pull the Carry out
.193610		e2 20		sep #$20	                SEP #$20        ; set A short
.193612		b0 08		bcs $19361c	              BCS OPL2_Set_MaintainSustain_Set;
.193614		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193616		29 df		and #$df	              AND #$DF
.193618		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19361a		80 06		bra $193622	              BRA OPL2_Set_MaintainSustain_Exit
.19361c						OPL2_Set_MaintainSustain_Set
.19361c		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19361e		09 20		ora #$20	              ORA #$20
.193620		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193622						OPL2_Set_MaintainSustain_Exit
.193622		6b		rtl		                RTL
.193623						OPL2_GET_MAINTAINSUSTAIN
.193623		48		pha		                PHA             ; begin setdp macro
.193624		08		php		                PHP
.193625		c2 20		rep #$20	                REP #$20        ; set A long
.193627		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19362a		5b		tcd		                TCD
.19362b		28		plp		                PLP
.19362c		68		pla		                PLA             ; end setdp macro
.19362d		c2 20		rep #$20	                REP #$20        ; set A long
.19362f		a9 20 00	lda #$0020	              LDA #$0020;
.193632		85 28		sta $28		              STA OPL2_REG_REGION
.193634		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.193637		e2 20		sep #$20	                SEP #$20        ; set A short
.193639		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19363b		29 20		and #$20	              AND #$20
.19363d		6b		rtl		                RTL
.19363e						OPL2_SET_ENVELOPESCALING
.19363e		48		pha		                PHA             ; begin setdp macro
.19363f		08		php		                PHP
.193640		c2 20		rep #$20	                REP #$20        ; set A long
.193642		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193645		5b		tcd		                TCD
.193646		28		plp		                PLP
.193647		68		pla		                PLA             ; end setdp macro
.193648		08		php		              PHP ; Push the Carry
.193649		c2 20		rep #$20	                REP #$20        ; set A long
.19364b		18		clc		              CLC
.19364c		a9 20 00	lda #$0020	              LDA #$0020;
.19364f		85 28		sta $28		              STA OPL2_REG_REGION
.193651		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.193654		28		plp		              PLP ; Pull the Carry out
.193655		e2 20		sep #$20	                SEP #$20        ; set A short
.193657		b0 08		bcs $193661	              BCS OPL2_Set_EnvelopeScaling_Set;
.193659		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19365b		29 ef		and #$ef	              AND #$EF
.19365d		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.19365f		80 06		bra $193667	              BRA OPL2_Set_EnvelopeScaling_Exit
.193661						OPL2_Set_EnvelopeScaling_Set
.193661		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193663		09 10		ora #$10	              ORA #$10
.193665		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193667						OPL2_Set_EnvelopeScaling_Exit
.193667		6b		rtl		                RTL
.193668						OPL2_GET_ENVELOPESCALING
.193668		48		pha		                PHA             ; begin setdp macro
.193669		08		php		                PHP
.19366a		c2 20		rep #$20	                REP #$20        ; set A long
.19366c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19366f		5b		tcd		                TCD
.193670		28		plp		                PLP
.193671		68		pla		                PLA             ; end setdp macro
.193672		c2 20		rep #$20	                REP #$20        ; set A long
.193674		a9 20 00	lda #$0020	              LDA #$0020;
.193677		85 28		sta $28		              STA OPL2_REG_REGION
.193679		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.19367c		e2 20		sep #$20	                SEP #$20        ; set A short
.19367e		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.193680		29 10		and #$10	              AND #$10
.193682		6b		rtl		                RTL
.193683						OPL2_GET_MODFREQMULTIPLE
.193683		48		pha		                PHA             ; begin setdp macro
.193684		08		php		                PHP
.193685		c2 20		rep #$20	                REP #$20        ; set A long
.193687		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19368a		5b		tcd		                TCD
.19368b		28		plp		                PLP
.19368c		68		pla		                PLA             ; end setdp macro
.19368d		c2 20		rep #$20	                REP #$20        ; set A long
.19368f		a9 20 00	lda #$0020	              LDA #$0020;
.193692		85 28		sta $28		              STA OPL2_REG_REGION
.193694		20 7a 3a	jsr $193a7a	              JSR OPL2_GET_REG_OFFSET
.193697		e2 20		sep #$20	                SEP #$20        ; set A short
.193699		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19369b		29 0f		and #$0f	              AND #$0F
.19369d		6b		rtl		              RTL
.19369e						OPL2_SET_MODFREQMULTIPLE
.19369e		48		pha		                PHA             ; begin setdp macro
.19369f		08		php		                PHP
.1936a0		c2 20		rep #$20	                REP #$20        ; set A long
.1936a2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936a5		5b		tcd		                TCD
.1936a6		28		plp		                PLP
.1936a7		68		pla		                PLA             ; end setdp macro
.1936a8		c2 20		rep #$20	                REP #$20        ; set A long
.1936aa		a9 20 00	lda #$0020	                LDA #$0020;
.1936ad		85 28		sta $28		                STA OPL2_REG_REGION
.1936af		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.1936b2		e2 20		sep #$20	                SEP #$20        ; set A short
.1936b4		a5 32		lda $32		                LDA OPL2_PARAMETER0
.1936b6		29 0f		and #$0f	                AND #$0F
.1936b8		85 32		sta $32		                STA OPL2_PARAMETER0
.1936ba		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936bc		29 f0		and #$f0	                AND #$F0
.1936be		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936c0		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936c2		6b		rtl		                RTL
.1936c3						OPL2_SET_SCALINGLEVEL
.1936c3		48		pha		                PHA             ; begin setdp macro
.1936c4		08		php		                PHP
.1936c5		c2 20		rep #$20	                REP #$20        ; set A long
.1936c7		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936ca		5b		tcd		                TCD
.1936cb		28		plp		                PLP
.1936cc		68		pla		                PLA             ; end setdp macro
.1936cd		c2 20		rep #$20	                REP #$20        ; set A long
.1936cf		a9 40 00	lda #$0040	                LDA #$0040;
.1936d2		85 28		sta $28		                STA OPL2_REG_REGION
.1936d4		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.1936d7		e2 20		sep #$20	                SEP #$20        ; set A short
.1936d9		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1936db		29 03		and #$03	                AND #$03
.1936dd		0a		asl a		                ASL
.1936de		0a		asl a		                ASL
.1936df		0a		asl a		                ASL
.1936e0		0a		asl a		                ASL
.1936e1		0a		asl a		                ASL
.1936e2		0a		asl a		                ASL
.1936e3		85 32		sta $32		                STA OPL2_PARAMETER0
.1936e5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1936e7		29 3f		and #$3f	                AND #$3F
.1936e9		05 32		ora $32		                ORA OPL2_PARAMETER0
.1936eb		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1936ed		6b		rtl		                RTL
.1936ee						OPL2_SET_VOLUME
.1936ee		48		pha		                PHA             ; begin setdp macro
.1936ef		08		php		                PHP
.1936f0		c2 20		rep #$20	                REP #$20        ; set A long
.1936f2		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1936f5		5b		tcd		                TCD
.1936f6		28		plp		                PLP
.1936f7		68		pla		                PLA             ; end setdp macro
.1936f8		c2 20		rep #$20	                REP #$20        ; set A long
.1936fa		a9 40 00	lda #$0040	                LDA #$0040  ;
.1936fd		85 28		sta $28		                STA OPL2_REG_REGION
.1936ff		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.193702		e2 20		sep #$20	                SEP #$20        ; set A short
.193704		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Volume
.193706		29 3f		and #$3f	                AND #$3F
.193708		85 32		sta $32		                STA OPL2_PARAMETER0
.19370a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19370c		29 c0		and #$c0	                AND #$C0
.19370e		05 32		ora $32		                ORA OPL2_PARAMETER0
.193710		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193712		6b		rtl		                RTL
.193713						OPL2_GET_VOLUME
.193713		48		pha		                PHA             ; begin setdp macro
.193714		08		php		                PHP
.193715		c2 20		rep #$20	                REP #$20        ; set A long
.193717		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19371a		5b		tcd		                TCD
.19371b		28		plp		                PLP
.19371c		68		pla		                PLA             ; end setdp macro
.19371d		c2 20		rep #$20	                REP #$20        ; set A long
.19371f		a9 40 00	lda #$0040	                LDA #$0040  ;
.193722		85 28		sta $28		                STA OPL2_REG_REGION
.193724		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.193727		e2 20		sep #$20	                SEP #$20        ; set A short
.193729		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19372b		29 3f		and #$3f	                AND #$3F
.19372d		6b		rtl		                RTL
.19372e						OPL2_SET_ATTACK
.19372e		48		pha		                PHA             ; begin setdp macro
.19372f		08		php		                PHP
.193730		c2 20		rep #$20	                REP #$20        ; set A long
.193732		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193735		5b		tcd		                TCD
.193736		28		plp		                PLP
.193737		68		pla		                PLA             ; end setdp macro
.193738		c2 20		rep #$20	                REP #$20        ; set A long
.19373a		a9 60 00	lda #$0060	                LDA #$0060  ;
.19373d		85 28		sta $28		                STA OPL2_REG_REGION
.19373f		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.193742		e2 20		sep #$20	                SEP #$20        ; set A short
.193744		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193746		29 0f		and #$0f	                AND #$0F
.193748		0a		asl a		                ASL
.193749		0a		asl a		                ASL
.19374a		0a		asl a		                ASL
.19374b		0a		asl a		                ASL
.19374c		85 32		sta $32		                STA OPL2_PARAMETER0
.19374e		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193750		29 0f		and #$0f	                AND #$0F
.193752		05 32		ora $32		                ORA OPL2_PARAMETER0
.193754		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193756		6b		rtl		                RTL
.193757						OPL2_GET_ATTACK
.193757		48		pha		                PHA             ; begin setdp macro
.193758		08		php		                PHP
.193759		c2 20		rep #$20	                REP #$20        ; set A long
.19375b		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19375e		5b		tcd		                TCD
.19375f		28		plp		                PLP
.193760		68		pla		                PLA             ; end setdp macro
.193761		c2 20		rep #$20	                REP #$20        ; set A long
.193763		a9 60 00	lda #$0060	                LDA #$0060
.193766		85 28		sta $28		                STA OPL2_REG_REGION
.193768		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.19376b		e2 20		sep #$20	                SEP #$20        ; set A short
.19376d		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19376f		29 f0		and #$f0	                AND #$F0
.193771		4a		lsr a		                LSR
.193772		4a		lsr a		                LSR
.193773		4a		lsr a		                LSR
.193774		4a		lsr a		                LSR
.193775		6b		rtl		                RTL
.193776						OPL2_SET_DECAY
.193776		48		pha		                PHA             ; begin setdp macro
.193777		08		php		                PHP
.193778		c2 20		rep #$20	                REP #$20        ; set A long
.19377a		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19377d		5b		tcd		                TCD
.19377e		28		plp		                PLP
.19377f		68		pla		                PLA             ; end setdp macro
.193780		c2 20		rep #$20	                REP #$20        ; set A long
.193782		a9 60 00	lda #$0060	                LDA #$0060;
.193785		85 28		sta $28		                STA OPL2_REG_REGION
.193787		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.19378a		e2 20		sep #$20	                SEP #$20        ; set A short
.19378c		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.19378e		29 0f		and #$0f	                AND #$0F
.193790		85 32		sta $32		                STA OPL2_PARAMETER0
.193792		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193794		29 f0		and #$f0	                AND #$F0
.193796		05 32		ora $32		                ORA OPL2_PARAMETER0
.193798		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.19379a		6b		rtl		                RTL
.19379b						OPL2_GET_DECAY
.19379b		48		pha		                PHA             ; begin setdp macro
.19379c		08		php		                PHP
.19379d		c2 20		rep #$20	                REP #$20        ; set A long
.19379f		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937a2		5b		tcd		                TCD
.1937a3		28		plp		                PLP
.1937a4		68		pla		                PLA             ; end setdp macro
.1937a5		c2 20		rep #$20	                REP #$20        ; set A long
.1937a7		a9 60 00	lda #$0060	                LDA #$0060
.1937aa		85 28		sta $28		                STA OPL2_REG_REGION
.1937ac		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.1937af		e2 20		sep #$20	                SEP #$20        ; set A short
.1937b1		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937b3		29 0f		and #$0f	                AND #$0F
.1937b5		6b		rtl		                RTL
.1937b6						OPL2_SET_SUSTAIN
.1937b6		48		pha		                PHA             ; begin setdp macro
.1937b7		08		php		                PHP
.1937b8		c2 20		rep #$20	                REP #$20        ; set A long
.1937ba		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937bd		5b		tcd		                TCD
.1937be		28		plp		                PLP
.1937bf		68		pla		                PLA             ; end setdp macro
.1937c0		c2 20		rep #$20	                REP #$20        ; set A long
.1937c2		a9 80 00	lda #$0080	                LDA #$0080;
.1937c5		85 28		sta $28		                STA OPL2_REG_REGION
.1937c7		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.1937ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1937cc		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.1937ce		29 0f		and #$0f	                AND #$0F
.1937d0		0a		asl a		                ASL
.1937d1		0a		asl a		                ASL
.1937d2		0a		asl a		                ASL
.1937d3		0a		asl a		                ASL
.1937d4		85 32		sta $32		                STA OPL2_PARAMETER0
.1937d6		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937d8		29 0f		and #$0f	                AND #$0F
.1937da		05 32		ora $32		                ORA OPL2_PARAMETER0
.1937dc		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1937de		6b		rtl		                RTL
.1937df						OPL2_GET_SUSTAIN
.1937df		48		pha		                PHA             ; begin setdp macro
.1937e0		08		php		                PHP
.1937e1		c2 20		rep #$20	                REP #$20        ; set A long
.1937e3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1937e6		5b		tcd		                TCD
.1937e7		28		plp		                PLP
.1937e8		68		pla		                PLA             ; end setdp macro
.1937e9		c2 20		rep #$20	                REP #$20        ; set A long
.1937eb		a9 80 00	lda #$0080	                LDA #$0080
.1937ee		85 28		sta $28		                STA OPL2_REG_REGION
.1937f0		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.1937f3		e2 20		sep #$20	                SEP #$20        ; set A short
.1937f5		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1937f7		29 f0		and #$f0	                AND #$F0
.1937f9		4a		lsr a		                LSR
.1937fa		4a		lsr a		                LSR
.1937fb		4a		lsr a		                LSR
.1937fc		4a		lsr a		                LSR
.1937fd		6b		rtl		                RTL
.1937fe						OPL2_SET_RELEASE
.1937fe		48		pha		                PHA             ; begin setdp macro
.1937ff		08		php		                PHP
.193800		c2 20		rep #$20	                REP #$20        ; set A long
.193802		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193805		5b		tcd		                TCD
.193806		28		plp		                PLP
.193807		68		pla		                PLA             ; end setdp macro
.193808		c2 20		rep #$20	                REP #$20        ; set A long
.19380a		a9 80 00	lda #$0080	                LDA #$0080;
.19380d		85 28		sta $28		                STA OPL2_REG_REGION
.19380f		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.193812		e2 20		sep #$20	                SEP #$20        ; set A short
.193814		a5 32		lda $32		                LDA OPL2_PARAMETER0 ; Attack
.193816		29 0f		and #$0f	                AND #$0F
.193818		85 32		sta $32		                STA OPL2_PARAMETER0
.19381a		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19381c		29 f0		and #$f0	                AND #$F0
.19381e		05 32		ora $32		                ORA OPL2_PARAMETER0
.193820		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193822		6b		rtl		                RTL
.193823						OPL2_GET_RELEASE
.193823		48		pha		                PHA             ; begin setdp macro
.193824		08		php		                PHP
.193825		c2 20		rep #$20	                REP #$20        ; set A long
.193827		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19382a		5b		tcd		                TCD
.19382b		28		plp		                PLP
.19382c		68		pla		                PLA             ; end setdp macro
.19382d		c2 20		rep #$20	                REP #$20        ; set A long
.19382f		a9 80 00	lda #$0080	                LDA #$0080
.193832		85 28		sta $28		                STA OPL2_REG_REGION
.193834		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.193837		e2 20		sep #$20	                SEP #$20        ; set A short
.193839		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19383b		29 0f		and #$0f	                AND #$0F
.19383d		6b		rtl		                RTL
.19383e						OPL2_SET_FNUMBER
.19383e		48		pha		                PHA             ; begin setdp macro
.19383f		08		php		                PHP
.193840		c2 20		rep #$20	                REP #$20        ; set A long
.193842		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193845		5b		tcd		                TCD
.193846		28		plp		                PLP
.193847		68		pla		                PLA             ; end setdp macro
.193848		e2 20		sep #$20	                SEP #$20        ; set A short
.19384a		18		clc		                CLC
.19384b		a5 27		lda $27		                LDA OPL2_CHANNEL
.19384d		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19384f		69 a0		adc #$a0	                ADC #$A0
.193851		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193853		a9 00		lda #$00	                LDA #$00
.193855		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193857		c2 30		rep #$30	                REP #$30        ; set A&X long
.193859		18		clc		                CLC
.19385a		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19385d		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19385f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193861		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193864		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193866		e2 20		sep #$20	                SEP #$20        ; set A short
.193868		a5 32		lda $32		                LDA OPL2_PARAMETER0     ; Load the first 8 Bits Value of FNumber
.19386a		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]  ; Load
.19386c		18		clc		                CLC
.19386d		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.19386f		69 10		adc #$10	                ADC #$10
.193871		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193873		a5 33		lda $33		                LDA OPL2_PARAMETER1
.193875		29 03		and #$03	                AND #$03
.193877		85 33		sta $33		                STA OPL2_PARAMETER1
.193879		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.19387b		29 fc		and #$fc	                AND #$FC
.19387d		05 33		ora $33		                ORA OPL2_PARAMETER1
.19387f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193881		6b		rtl		                RTL
.193882						OPL2_GET_FNUMBER
.193882		48		pha		                PHA             ; begin setdp macro
.193883		08		php		                PHP
.193884		c2 20		rep #$20	                REP #$20        ; set A long
.193886		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193889		5b		tcd		                TCD
.19388a		28		plp		                PLP
.19388b		68		pla		                PLA             ; end setdp macro
.19388c		e2 20		sep #$20	                SEP #$20        ; set A short
.19388e		18		clc		                CLC
.19388f		a5 27		lda $27		                LDA OPL2_CHANNEL
.193891		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.193893		69 a0		adc #$a0	                ADC #$A0
.193895		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193897		a9 00		lda #$00	                LDA #$00
.193899		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.19389b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19389d		18		clc		                CLC
.19389e		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1938a1		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1938a3		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938a5		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938a8		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938aa		e2 20		sep #$20	                SEP #$20        ; set A short
.1938ac		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938ae		85 32		sta $32		                STA OPL2_PARAMETER0
.1938b0		18		clc		                CLC
.1938b1		a5 2c		lda $2c		                LDA OPL2_IND_ADDY_LL
.1938b3		69 10		adc #$10	                ADC #$10
.1938b5		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938b7		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938b9		29 03		and #$03	                AND #$03
.1938bb		85 33		sta $33		                STA OPL2_PARAMETER1
.1938bd		6b		rtl		                RTL
.1938be						OPL2_Set_Frequency
.1938be		6b		rtl		                RTL
.1938bf						OPL2_Get_Frequency
.1938bf		6b		rtl		                RTL
.1938c0						OPL2_SET_BLOCK
.1938c0		48		pha		                PHA             ; begin setdp macro
.1938c1		08		php		                PHP
.1938c2		c2 20		rep #$20	                REP #$20        ; set A long
.1938c4		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1938c7		5b		tcd		                TCD
.1938c8		28		plp		                PLP
.1938c9		68		pla		                PLA             ; end setdp macro
.1938ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1938cc		18		clc		                CLC
.1938cd		a5 27		lda $27		                LDA OPL2_CHANNEL
.1938cf		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.1938d1		69 b0		adc #$b0	                ADC #$B0
.1938d3		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.1938d5		a9 00		lda #$00	                LDA #$00
.1938d7		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.1938d9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1938db		18		clc		                CLC
.1938dc		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.1938df		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.1938e1		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.1938e3		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.1938e6		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.1938e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1938ea		a5 31		lda $31		                LDA OPL2_OCTAVE
.1938ec		29 07		and #$07	                AND #$07
.1938ee		0a		asl a		                ASL
.1938ef		0a		asl a		                ASL
.1938f0		85 31		sta $31		                STA OPL2_OCTAVE
.1938f2		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.1938f4		29 e3		and #$e3	                AND #$E3
.1938f6		05 31		ora $31		                ORA OPL2_OCTAVE
.1938f8		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.1938fa		60		rts		                RTS
.1938fb						OPL2_SET_KEYON
.1938fb		48		pha		                PHA             ; begin setdp macro
.1938fc		08		php		                PHP
.1938fd		c2 20		rep #$20	                REP #$20        ; set A long
.1938ff		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193902		5b		tcd		                TCD
.193903		28		plp		                PLP
.193904		68		pla		                PLA             ; end setdp macro
.193905		e2 20		sep #$20	                SEP #$20        ; set A short
.193907		18		clc		                CLC
.193908		a5 27		lda $27		                LDA OPL2_CHANNEL
.19390a		29 0f		and #$0f	                AND #$0F  ; This is just precaution, it should be between 0 to 8
.19390c		69 b0		adc #$b0	                ADC #$B0
.19390e		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193910		a9 00		lda #$00	                LDA #$00
.193912		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193914		c2 30		rep #$30	                REP #$30        ; set A&X long
.193916		18		clc		                CLC
.193917		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.19391a		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.19391c		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.19391e		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193921		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193923		e2 20		sep #$20	                SEP #$20        ; set A short
.193925		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193927		29 01		and #$01	                AND #$01
.193929		f0 02		beq $19392d	                BEQ SET_KEYON_OFF
.19392b		a9 20		lda #$20	                LDA #$20
.19392d						    SET_KEYON_OFF
.19392d		85 32		sta $32		                STA OPL2_PARAMETER0
.19392f		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193931		29 df		and #$df	                AND #$DF
.193933		05 32		ora $32		                ORA OPL2_PARAMETER0
.193935		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193937		60		rts		                RTS
.193938						OPL2_SET_FEEDBACK
.193938		48		pha		                PHA             ; begin setdp macro
.193939		08		php		                PHP
.19393a		c2 20		rep #$20	                REP #$20        ; set A long
.19393c		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.19393f		5b		tcd		                TCD
.193940		28		plp		                PLP
.193941		68		pla		                PLA             ; end setdp macro
.193942		e2 20		sep #$20	                SEP #$20        ; set A short
.193944		18		clc		              CLC
.193945		a5 27		lda $27		              LDA OPL2_CHANNEL
.193947		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193949		69 c0		adc #$c0	              ADC #$C0
.19394b		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.19394d		a9 00		lda #$00	              LDA #$00
.19394f		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.193951		c2 30		rep #$30	                REP #$30        ; set A&X long
.193953		18		clc		              CLC
.193954		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193957		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193959		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.19395b		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.19395e		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.193960		e2 20		sep #$20	                SEP #$20        ; set A short
.193962		a5 32		lda $32		              LDA OPL2_PARAMETER0
.193964		29 07		and #$07	              AND #$07
.193966		0a		asl a		              ASL
.193967		85 32		sta $32		              STA OPL2_PARAMETER0
.193969		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.19396b		29 01		and #$01	              AND #$01
.19396d		05 32		ora $32		              ORA OPL2_PARAMETER0
.19396f		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193971		6b		rtl		                RTL
.193972						OPL2_SET_SYNTHMODE
.193972		48		pha		                PHA             ; begin setdp macro
.193973		08		php		                PHP
.193974		c2 20		rep #$20	                REP #$20        ; set A long
.193976		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193979		5b		tcd		                TCD
.19397a		28		plp		                PLP
.19397b		68		pla		                PLA             ; end setdp macro
.19397c		08		php		              PHP ; Push the Carry
.19397d		e2 20		sep #$20	                SEP #$20        ; set A short
.19397f		18		clc		              CLC
.193980		a5 27		lda $27		              LDA OPL2_CHANNEL
.193982		29 0f		and #$0f	              AND #$0F  ; This is just precaution, it should be between 0 to 8
.193984		69 c0		adc #$c0	              ADC #$C0
.193986		85 2a		sta $2a		              STA OPL2_REG_OFFSET
.193988		a9 00		lda #$00	              LDA #$00
.19398a		85 2b		sta $2b		              STA OPL2_REG_OFFSET+1;
.19398c		c2 30		rep #$30	                REP #$30        ; set A&X long
.19398e		18		clc		              CLC
.19398f		a9 00 e6	lda #$e600	              LDA #<>OPL3_R_BASE
.193992		65 2a		adc $2a		              ADC OPL2_REG_OFFSET
.193994		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.193996		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.193999		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.19399b		28		plp		              PLP ; Pull the Carry out
.19399c		e2 20		sep #$20	                SEP #$20        ; set A short
.19399e		b0 08		bcs $1939a8	              BCS OPL2_Set_Synthmode_Set;
.1939a0		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939a2		29 fe		and #$fe	              AND #$FE
.1939a4		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939a6		80 06		bra $1939ae	              BRA OPL2_Set_Synthmode_Exit
.1939a8						OPL2_Set_Synthmode_Set
.1939a8		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939aa		09 01		ora #$01	              ORA #$01
.1939ac		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939ae						OPL2_Set_Synthmode_Exit
.1939ae		6b		rtl		                RTL
.1939af						OPL2_SET_DEEPTREMOLO
.1939af		48		pha		                PHA             ; begin setdp macro
.1939b0		08		php		                PHP
.1939b1		c2 20		rep #$20	                REP #$20        ; set A long
.1939b3		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939b6		5b		tcd		                TCD
.1939b7		28		plp		                PLP
.1939b8		68		pla		                PLA             ; end setdp macro
.1939b9		c2 20		rep #$20	                REP #$20        ; set A long
.1939bb		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939be		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939c0		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939c3		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1939c7		b0 08		bcs $1939d1	              BCS OPL2_Set_DeepTremolo_Set;
.1939c9		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939cb		29 7f		and #$7f	              AND #$7F
.1939cd		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939cf		80 06		bra $1939d7	              BRA OPL2_Set_DeepTremolo_Exit
.1939d1						OPL2_Set_DeepTremolo_Set
.1939d1		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939d3		09 80		ora #$80	              ORA #$80
.1939d5		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939d7						OPL2_Set_DeepTremolo_Exit
.1939d7		6b		rtl		                RTL
.1939d8						OPL2_SET_DEEPVIBRATO
.1939d8		48		pha		                PHA             ; begin setdp macro
.1939d9		08		php		                PHP
.1939da		c2 20		rep #$20	                REP #$20        ; set A long
.1939dc		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.1939df		5b		tcd		                TCD
.1939e0		28		plp		                PLP
.1939e1		68		pla		                PLA             ; end setdp macro
.1939e2		c2 20		rep #$20	                REP #$20        ; set A long
.1939e4		a9 bd e6	lda #$e6bd	              LDA #<>OPL3_R_BASE + $00BD
.1939e7		85 2c		sta $2c		              STA OPL2_IND_ADDY_LL
.1939e9		a9 af 00	lda #$00af	              LDA #`OPL3_R_BASE
.1939ec		85 2e		sta $2e		              STA OPL2_IND_ADDY_HL
.1939ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1939f0		b0 08		bcs $1939fa	              BCS OPL2_Set_DeepVibrato_Set;
.1939f2		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939f4		29 bf		and #$bf	              AND #$BF
.1939f6		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.1939f8		80 06		bra $193a00	              BRA OPL2_Set_DeepVibrato_Exit
.1939fa						OPL2_Set_DeepVibrato_Set
.1939fa		a7 2c		lda [$2c]	              LDA [OPL2_IND_ADDY_LL]
.1939fc		09 40		ora #$40	              ORA #$40
.1939fe		87 2c		sta [$2c]	              STA [OPL2_IND_ADDY_LL]
.193a00						OPL2_Set_DeepVibrato_Exit
.193a00		6b		rtl		                RTL
.193a01						OPL2_SET_PERCUSSION
.193a01		48		pha		                PHA             ; begin setdp macro
.193a02		08		php		                PHP
.193a03		c2 20		rep #$20	                REP #$20        ; set A long
.193a05		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a08		5b		tcd		                TCD
.193a09		28		plp		                PLP
.193a0a		68		pla		                PLA             ; end setdp macro
.193a0b		c2 20		rep #$20	                REP #$20        ; set A long
.193a0d		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a10		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a12		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a15		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a17		e2 20		sep #$20	                SEP #$20        ; set A short
.193a19		b0 08		bcs $193a23	                BCS OPL2_Set_Percussion_Set;
.193a1b		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a1d		29 df		and #$df	                AND #$DF
.193a1f		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a21		80 06		bra $193a29	                BRA OPL2_Set_Percussion_Exit
.193a23						OPL2_Set_Percussion_Set
.193a23		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a25		09 20		ora #$20	                ORA #$20
.193a27		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a29						OPL2_Set_Percussion_Exit
.193a29		6b		rtl		                RTL
.193a2a						OPL2_SET_DRUMS
.193a2a		48		pha		                PHA             ; begin setdp macro
.193a2b		08		php		                PHP
.193a2c		c2 20		rep #$20	                REP #$20        ; set A long
.193a2e		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a31		5b		tcd		                TCD
.193a32		28		plp		                PLP
.193a33		68		pla		                PLA             ; end setdp macro
.193a34		c2 20		rep #$20	                REP #$20        ; set A long
.193a36		a9 bd e6	lda #$e6bd	                LDA #<>OPL3_R_BASE + $00BD
.193a39		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193a3b		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193a3e		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193a40		e2 20		sep #$20	                SEP #$20        ; set A short
.193a42		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a44		29 1f		and #$1f	                AND #$1F
.193a46		85 32		sta $32		                STA OPL2_PARAMETER0
.193a48		49 ff		eor #$ff	                EOR #$FF
.193a4a		85 33		sta $33		                STA OPL2_PARAMETER1
.193a4c		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a4e		25 33		and $33		                AND OPL2_PARAMETER1
.193a50		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a52		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a54		6b		rtl		                RTL
.193a55						OPL2_SET_WAVEFORM
.193a55		48		pha		                PHA             ; begin setdp macro
.193a56		08		php		                PHP
.193a57		c2 20		rep #$20	                REP #$20        ; set A long
.193a59		a9 00 00	lda #$0000	                LDA #BANK0_BEGIN         ; set DP to page 0
.193a5c		5b		tcd		                TCD
.193a5d		28		plp		                PLP
.193a5e		68		pla		                PLA             ; end setdp macro
.193a5f		c2 20		rep #$20	                REP #$20        ; set A long
.193a61		a9 e0 00	lda #$00e0	                LDA #$00E0;
.193a64		85 28		sta $28		                STA OPL2_REG_REGION
.193a66		20 7a 3a	jsr $193a7a	                JSR OPL2_GET_REG_OFFSET
.193a69		e2 20		sep #$20	                SEP #$20        ; set A short
.193a6b		a5 32		lda $32		                LDA OPL2_PARAMETER0
.193a6d		29 03		and #$03	                AND #$03
.193a6f		85 32		sta $32		                STA OPL2_PARAMETER0
.193a71		a7 2c		lda [$2c]	                LDA [OPL2_IND_ADDY_LL]
.193a73		29 fc		and #$fc	                AND #$FC
.193a75		05 32		ora $32		                ORA OPL2_PARAMETER0
.193a77		87 2c		sta [$2c]	                STA [OPL2_IND_ADDY_LL]
.193a79		6b		rtl		                RTL
.193a7a						OPL2_GET_REG_OFFSET
.193a7a		e2 30		sep #$30	                SEP #$30        ; set A&X short
.193a7c		a5 27		lda $27		                LDA OPL2_CHANNEL
.193a7e		29 0f		and #$0f	                AND #$0F
.193a80		aa		tax		                TAX
.193a81		a5 26		lda $26		                LDA OPL2_OPERATOR   ; 0 = operator 1, other = operator 2
.193a83		d0 06		bne $193a8b	                BNE OPL2_Get_Register_Offset_l0
.193a85		bf c2 10 19	lda $1910c2,x	                LDA @lregisterOffsets_operator0, X
.193a89		80 04		bra $193a8f	                BRA OPL2_Get_Register_Offset_exit
.193a8b						OPL2_Get_Register_Offset_l0
.193a8b		bf cb 10 19	lda $1910cb,x	                LDA @lregisterOffsets_operator1, X
.193a8f						OPL2_Get_Register_Offset_exit
.193a8f		85 2a		sta $2a		                STA OPL2_REG_OFFSET
.193a91		a9 00		lda #$00	                LDA #$00
.193a93		85 2b		sta $2b		                STA OPL2_REG_OFFSET+1;
.193a95		c2 30		rep #$30	                REP #$30        ; set A&X long
.193a97		18		clc		                CLC
.193a98		a9 00 e6	lda #$e600	                LDA #<>OPL3_R_BASE
.193a9b		65 2a		adc $2a		                ADC OPL2_REG_OFFSET
.193a9d		65 28		adc $28		                ADC OPL2_REG_REGION ; Ex: $20, or $40, $60, $80 (in 16bits)
.193a9f		85 2c		sta $2c		                STA OPL2_IND_ADDY_LL
.193aa1		a9 af 00	lda #$00af	                LDA #`OPL3_R_BASE
.193aa4		85 2e		sta $2e		                STA OPL2_IND_ADDY_HL
.193aa6		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Defines/sdcard_controller_def.asm

=$afea00					SDC_VERSION_REG         = $AFEA00    ; Ought to read 12
=$afea01					SDC_CONTROL_REG         = $AFEA01    ; Bit0 1 = Reset core logic, and registers. Self clearing
=$afea02					SDC_TRANS_TYPE_REG      = $AFEA02  ; Bit[1:0]
=$00						SDC_TRANS_DIRECT      = $00   ; 00 = Direct Access
=$01						SDC_TRANS_INIT_SD     = $01   ; 01 = Init SD
=$02						SDC_TRANS_READ_BLK    = $02   ; 10 = RW_READ_BLOCK (512 Bytes)
=$03						SDC_TRANS_WRITE_BLK   = $03   ; 11 = RW_WRITE_SD_BLOCK
=$afea03					SDC_TRANS_CONTROL_REG   = $AFEA03
=$01						SDC_TRANS_START         = $01
=$afea04					SDC_TRANS_STATUS_REG    = $AFEA04
=$01						SDC_TRANS_BUSY          = $01     ;  1= Transaction Busy
=$afea05					SDC_TRANS_ERROR_REG     = $AFEA05
=$00						SDC_TRANS_INIT_NO_ERR   = $00   ; Init Error Report [1:0]
=$01						SDC_TRANS_INIT_CMD0_ERR = $01
=$02						SDC_TRANS_INIT_CMD1_ERR = $02
=$00						SDC_TRANS_RD_NO_ERR     = $00   ; Read Error Report [3:2]
=$04						SDC_TRANS_RD_CMD_ERR    = $04
=$08						SDC_TRANS_RD_TOKEN_ERR  = $08
=$00						SDC_TRANS_WR_NO_ERR     = $00   ; Write Report Error  [5:4]
=$10						SDC_TRANS_WR_CMD_ERR    = $10   ;
=$20						SDC_TRANS_WR_DATA_ERR   = $20
=$30						SDC_TRANS_WR_BUSY_ERR   = $30
=$afea06					SDC_DIRECT_ACCESS_REG   = $AFEA06 ; SPI Direct Read and Write - Set DATA before initiating direct Access Transaction
=$afea07					SDC_SD_ADDR_7_0_REG     = $AFEA07 ; Set the ADDR before a block read or block write
=$afea08					SDC_SD_ADDR_15_8_REG    = $AFEA08 ; Addr0 [8:0] Always should be 0, since each block is 512Bytes
=$afea09					SDC_SD_ADDR_23_16_REG   = $AFEA09
=$afea0a					SDC_SD_ADDR_31_24_REG   = $AFEA0A
=$afea0b					SDC_SPI_CLK_DEL_REG     = $AFEA0B
=$afea10					SDC_RX_FIFO_DATA_REG    = $AFEA10 ; Data from the Block Read
=$afea12					SDC_RX_FIFO_DATA_CNT_HI = $AFEA12 ; How many Bytes in the FIFO HI
=$afea13					SDC_RX_FIFO_DATA_CNT_LO = $AFEA13 ; How many Bytes in the FIFO LO
=$afea14					SDC_RX_FIFO_CTRL_REG    = $AFEA14 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)
=$afea20					SDC_TX_FIFO_DATA_REG    = $AFEA20 ; Write Data Block here
=$afea24					SDC_TX_FIFO_CTRL_REG    = $AFEA24 ; Bit0  Force Empty - Set to 1 to clear FIFO, self clearing (the bit)

;******  Return to file: src\kernel.asm


;******  Processing file: src\sdos.asm


;******  Processing file: src\sdos_fat.asm


;******  Processing file: src\sdos_bios.asm

=$80						BIOS_TIMEOUT = $80              ; Flag to indicate if a time out has occurred (see ISETTIMEOUT)
=0						BIOS_DEV_FDC = 0                ; Floppy 0
=1						BIOS_DEV_FD1 = 1                ; Future support: Floppy 1 (not likely to be attached)
=2						BIOS_DEV_SD = 2                 ; SD card, partition 0
=3						BIOS_DEV_SD1 = 3                ; Future support: SD card, partition 1
=4						BIOS_DEV_SD2 = 4                ; Future support: SD card, partition 2
=5						BIOS_DEV_SD3 = 5                ; Future support: SD card, partition 3
=6						BIOS_DEV_HD0 = 6                ; Future support: IDE Drive 0, partition 0
=7						BIOS_DEV_HD1 = 7                ; Future support: IDE Drive 0, partition 1
=8						BIOS_DEV_HD2 = 8                ; Future support: IDE Drive 0, partition 2
=9						BIOS_DEV_HD3 = 9                ; Future support: IDE Drive 0, partition 3
=$80						BIOS_ERR_BADDEV = $80           ; BIOS bad device # error
=$81						BIOS_ERR_MOUNT = $81            ; BIOS failed to mount the device
=$82						BIOS_ERR_READ = $82             ; BIOS failed to read from a device
=$83						BIOS_ERR_WRITE = $83            ; BIOS failed to write to a device
=$84						BIOS_ERR_TRACK = $84            ; BIOS failed to seek to the correct track
=$85						BIOS_ERR_CMD = $85              ; A general block device command error
=$86						BIOS_ERR_WRITEPROT = $86        ; The media was write-protected
=$87						BIOS_ERR_NOMEDIA = $87          ; No media detected... unable to read/write in time
=$88						BIOS_ERR_RESULT = $88           ; Couldn't get the result bytes for some reason
=$89						BIOS_ERR_OOS = $89              ; FDC state is somehow out of sync with the driver.
=$8a						BIOS_ERR_NOTATA = $8A           ; IDE drive is not ATA
=$8b						BIOS_ERR_NOTINIT = $8B          ; Could not initilize the device
=$8c						BIOS_ERR_TIMEOUT = $8C          ; Timeout error
.193aa7						ITRACE
.193aa7		08		php		                PHP
.193aa8		c2 30		rep #$30	                REP #$30        ; set A&X long
.193aaa		8b		phb		                PHB                 ; Print the text
.193aab		a3 06		lda $06,s	                LDA #6,S            ; Get bits[15..0] of string pointer
.193aad		aa		tax		                TAX                 ; ... into X
.193aae		e2 20		sep #$20	                SEP #$20        ; set A short
.193ab0		a3 08		lda $08,s	                LDA #8,S            ; Get bits[23..16] of string pointer
.193ab2		48		pha		                PHA
.193ab3		ab		plb		                PLB                 ; ... into B
.193ab4		22 04 07 19	jsl $190704	                JSL IPUTS           ; Print the string
.193ab8		c2 20		rep #$20	                REP #$20        ; set A long
.193aba		a3 04		lda $04,s	                LDA #4,S            ; Move P and return address down over the string pointer
.193abc		83 08		sta $08,s	                STA #8,S
.193abe		a3 02		lda $02,s	                LDA #2,S
.193ac0		83 06		sta $06,s	                STA #6,S
.193ac2		ab		plb		                PLB
.193ac3		68		pla		                PLA                 ; Clean up the stack
.193ac4		68		pla		                PLA
.193ac5		28		plp		                PLP
.193ac6		6b		rtl		                RTL
.193ac7						ISETTIMEOUT
.193ac7		8b		phb		                PHB
.193ac8		0b		phd		                PHD
.193ac9		08		php		                PHP
.193aca		48		pha		                PHA             ; begin setdbr macro
.193acb		08		php		                PHP
.193acc		e2 20		sep #$20	                SEP #$20        ; set A short
.193ace		a9 00		lda #$00	                LDA #0
.193ad0		48		pha		                PHA
.193ad1		ab		plb		                PLB
.193ad2		28		plp		                PLP
.193ad3		68		pla		                PLA             ; end setdbr macro
.193ad4		48		pha		                PHA             ; begin setdp macro
.193ad5		08		php		                PHP
.193ad6		c2 20		rep #$20	                REP #$20        ; set A long
.193ad8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193adb		5b		tcd		                TCD
.193adc		28		plp		                PLP
.193add		68		pla		                PLA             ; end setdp macro
.193ade		78		sei		                SEI                             ; We don't want to be interrupted
.193adf		e2 20		sep #$20	                SEP #$20        ; set A short
.193ae1		85 0d		sta $032d	                STA @b BIOS_TIMER               ; Set the number of ticks to wait
.193ae3		a5 0c		lda $032c	                LDA @b BIOS_FLAGS               ; Clear the BIOS_TIMEOUT flag
.193ae5		29 7f		and #$7f	                AND #~BIOS_TIMEOUT
.193ae7		85 0c		sta $032c	                STA @b BIOS_FLAGS
.193ae9		28		plp		done            PLP
.193aea		2b		pld		                PLD
.193aeb		ab		plb		                PLB
.193aec		6b		rtl		                RTL
.193aed						ICMDBLOCK
.193aed		0b		phd		                PHD
.193aee		08		php		                PHP
.193aef		48		pha		                PHA             ; begin setdp macro
.193af0		08		php		                PHP
.193af1		c2 20		rep #$20	                REP #$20        ; set A long
.193af3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193af6		5b		tcd		                TCD
.193af7		28		plp		                PLP
.193af8		68		pla		                PLA             ; end setdp macro
.193af9		e2 20		sep #$20	                SEP #$20        ; set A short
.193afb		a5 01		lda $0321	                LDA BIOS_DEV                ; Get the device number
.193afd		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Check to see if we're sending to the floppy
.193aff		d0 06		bne $193b07	                BNE ret_success             ; No: just return
.193b01		22 52 64 19	jsl $196452	                JSL FDC_CMDBLOCK            ; Yes: call upon the floppy code
.193b05		90 0c		bcc $193b13	                BCC pass_failure
.193b07						ret_success
.193b07		e2 20		sep #$20	                SEP #$20        ; set A short
.193b09		64 00		stz $0320	                STZ BIOS_STATUS
.193b0b		28		plp		                PLP
.193b0c		2b		pld		                PLD
.193b0d		38		sec		                SEC
.193b0e		6b		rtl		                RTL
.193b0f						ret_failure
.193b0f		e2 20		sep #$20	                SEP #$20        ; set A short
.193b11		85 00		sta $0320	                STA BIOS_STATUS
.193b13		28		plp		pass_failure    PLP
.193b14		2b		pld		                PLD
.193b15		18		clc		                CLC
.193b16		6b		rtl		                RTL
.193b17						IGETBLOCK
.193b17		5a		phy		                PHY
.193b18		0b		phd		                PHD
.193b19		8b		phb		                PHB
.193b1a		08		php		                PHP
.193b1b		48		pha		                PHA             ; begin setdbr macro
.193b1c		08		php		                PHP
.193b1d		e2 20		sep #$20	                SEP #$20        ; set A short
.193b1f		a9 00		lda #$00	                LDA #0
.193b21		48		pha		                PHA
.193b22		ab		plb		                PLB
.193b23		28		plp		                PLP
.193b24		68		pla		                PLA             ; end setdbr macro
.193b25		48		pha		                PHA             ; begin setdp macro
.193b26		08		php		                PHP
.193b27		c2 20		rep #$20	                REP #$20        ; set A long
.193b29		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b2c		5b		tcd		                TCD
.193b2d		28		plp		                PLP
.193b2e		68		pla		                PLA             ; end setdp macro
.193b2f		e2 20		sep #$20	                SEP #$20        ; set A short
.193b31		a0 00 00	ldy #$0000	                LDY #0
.193b34		a9 5a		lda #$5a	                LDA #$5A                            ; Fill the buffer with a pattern we can recognize
.193b36		97 06		sta [$0326],y	clr_loop        STA [BIOS_BUFF_PTR],Y               ; To make errors loading obvious
.193b38		c8		iny		                INY
.193b39		c0 00 02	cpy #$0200	                CPY #512
.193b3c		d0 f8		bne $193b36	                BNE clr_loop
.193b3e		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b40		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b42		f0 14		beq $193b58	                BEQ sd_getblock                     ; Yes: go to the SDC GETBLOCK routine
.193b44		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the floppy drive?
.193b46		f0 18		beq $193b60	                BEQ fd_getblock                     ; Yes: go to the FDC GETBLOCK routine
.193b48		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b4a		f0 1c		beq $193b68	                BEQ hd_getblock
.193b4c		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193b4e						ret_failure
.193b4e		e2 20		sep #$20	                SEP #$20        ; set A short
.193b50		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193b52		28		plp		                PLP
.193b53		ab		plb		                PLB
.193b54		2b		pld		                PLD
.193b55		7a		ply		                PLY
.193b56		38		sec		                SEC                                 ; Return failure
.193b57		6b		rtl		                RTL
.193b58		22 5e 59 19	jsl $19595e	sd_getblock     JSL SDC_GETBLOCK                    ; Call the SDC GETBLOCK routine
.193b5c		b0 12		bcs $193b70	                BCS ret_success
.193b5e		80 ee		bra $193b4e	                BRA ret_failure
.193b60		22 57 62 19	jsl $196257	fd_getblock     JSL FDC_GETBLOCK                    ; Call the FDC GETBLOCK routine
.193b64		b0 0a		bcs $193b70	                BCS ret_success
.193b66		80 e6		bra $193b4e	                BRA ret_failure
.193b68		22 6b 68 19	jsl $19686b	hd_getblock     JSL IDE_GETBLOCK                    ; Call the IDE GETBLOCK routine
.193b6c		b0 02		bcs $193b70	                BCS ret_success
.193b6e		80 de		bra $193b4e	                BRA ret_failure
.193b70						ret_success
.193b70		e2 20		sep #$20	                SEP #$20        ; set A short
.193b72		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193b74		28		plp		                PLP
.193b75		ab		plb		                PLB
.193b76		2b		pld		                PLD
.193b77		7a		ply		                PLY
.193b78		38		sec		                SEC                                 ; Return success
.193b79		6b		rtl		                RTL
.193b7a						IPUTBLOCK
.193b7a		0b		phd		                PHD
.193b7b		8b		phb		                PHB
.193b7c		08		php		                PHP
.193b7d		48		pha		                PHA             ; begin setdbr macro
.193b7e		08		php		                PHP
.193b7f		e2 20		sep #$20	                SEP #$20        ; set A short
.193b81		a9 00		lda #$00	                LDA #0
.193b83		48		pha		                PHA
.193b84		ab		plb		                PLB
.193b85		28		plp		                PLP
.193b86		68		pla		                PLA             ; end setdbr macro
.193b87		48		pha		                PHA             ; begin setdp macro
.193b88		08		php		                PHP
.193b89		c2 20		rep #$20	                REP #$20        ; set A long
.193b8b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193b8e		5b		tcd		                TCD
.193b8f		28		plp		                PLP
.193b90		68		pla		                PLA             ; end setdp macro
.193b91		e2 20		sep #$20	                SEP #$20        ; set A short
.193b93		a5 01		lda $0321	                LDA BIOS_DEV                        ; Check the device number
.193b95		c9 02		cmp #$02	                CMP #BIOS_DEV_SD                    ; Is it for the SDC?
.193b97		f0 13		beq $193bac	                BEQ sd_putblock                     ; Yes: go to the SDC PUTBLOCK routine
.193b99		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC                   ; Is it for the FDC?
.193b9b		f0 17		beq $193bb4	                BEQ fd_putblock                     ; Yes: go to the FDC PUTBLOCK routine
.193b9d		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0                   ; Is it for the IDE drive?
.193b9f		f0 1b		beq $193bbc	                BEQ hd_putblock
.193ba1		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV                ; Otherwise: return a bad device error
.193ba3						ret_failure
.193ba3		e2 20		sep #$20	                SEP #$20        ; set A short
.193ba5		85 00		sta $0320	                STA BIOS_STATUS                     ; Set BIOS STATUS
.193ba7		28		plp		                PLP
.193ba8		ab		plb		                PLB
.193ba9		2b		pld		                PLD
.193baa		18		clc		                CLC                                 ; Return failure
.193bab		6b		rtl		                RTL
.193bac		22 05 5a 19	jsl $195a05	sd_putblock     JSL SDC_PUTBLOCK                    ; Call the SDC PUTBLOCK routine
.193bb0		90 f1		bcc $193ba3	                BCC ret_failure
.193bb2		80 10		bra $193bc4	                BRA ret_success
.193bb4		22 bc 62 19	jsl $1962bc	fd_putblock     JSL FDC_PUTBLOCK                    ; Call the FDC PUTBLOCK routine
.193bb8		90 e9		bcc $193ba3	                BCC ret_failure
.193bba		80 08		bra $193bc4	                BRA ret_success
.193bbc		22 f6 68 19	jsl $1968f6	hd_putblock     JSL IDE_PUTBLOCK                    ; Call the IDE PUTBLOCK routine
.193bc0		90 e1		bcc $193ba3	                BCC ret_failure
.193bc2		80 00		bra $193bc4	                BRA ret_success
.193bc4						ret_success
.193bc4		e2 20		sep #$20	                SEP #$20        ; set A short
.193bc6		64 00		stz $0320	                STZ BIOS_STATUS                     ; Set BIOS STATUS to OK
.193bc8		28		plp		                PLP
.193bc9		ab		plb		                PLB
.193bca		2b		pld		                PLD
.193bcb		38		sec		                SEC                                 ; Return success
.193bcc		6b		rtl		                RTL

;******  Return to file: src\sdos_fat.asm


;******  Processing file: src\sdos_dir.asm

.193bcd						DOS_DIROPEN
.193bcd		da		phx		                PHX
.193bce		5a		phy		                PHY
.193bcf		0b		phd		                PHD
.193bd0		8b		phb		                PHB
.193bd1		08		php		                PHP
.193bd2		48		pha		                PHA             ; begin setdbr macro
.193bd3		08		php		                PHP
.193bd4		e2 20		sep #$20	                SEP #$20        ; set A short
.193bd6		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193bd8		48		pha		                PHA
.193bd9		ab		plb		                PLB
.193bda		28		plp		                PLP
.193bdb		68		pla		                PLA             ; end setdbr macro
.193bdc		48		pha		                PHA             ; begin setdp macro
.193bdd		08		php		                PHP
.193bde		c2 20		rep #$20	                REP #$20        ; set A long
.193be0		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193be3		5b		tcd		                TCD
.193be4		28		plp		                PLP
.193be5		68		pla		                PLA             ; end setdp macro
.193be6		ad 20 a0	lda $18a020	                LDA ROOT_DIR_FIRST_CLUSTER  ; Set the cluster (or sector for FAT12)
.193be9		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; to that of the root directory's start
.193bec		ad 22 a0	lda $18a022	                LDA ROOT_DIR_FIRST_CLUSTER+2
.193bef		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193bf2		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Point to the directory cluster buffer for loading
.193bf5		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193bf7		85 18		sta $0338	                STA DOS_DIR_PTR
.193bf9		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193bfc		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193bfe		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c00		e2 20		sep #$20	                SEP #$20        ; set A short
.193c02		ad 01 a0	lda $18a001	                LDA FILE_SYSTEM             ; Check the file system
.193c05		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12        ; Is it FAT12?
.193c07		d0 24		bne $193c2d	                BNE fetch_fat32             ; No: handle processing the diretory as FAT32
.193c09						fetch_fat12
.193c09		e2 20		sep #$20	                SEP #$20        ; set A short
.193c0b		a9 00		lda #$00	                LDA #DOS_DIR_TYPE_FAT12ROOT ; Set the directory type to FAT12 root directory
.193c0d		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193c10		c2 20		rep #$20	                REP #$20        ; set A long
.193c12		a5 18		lda $0338	                LDA DOS_DIR_PTR             ; Set the BIOS buffer pointer
.193c14		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193c16		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c18		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193c1a		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA of the sector
.193c1d		85 02		sta $0322	                STA BIOS_LBA
.193c1f		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c22		85 04		sta $0324	                STA BIOS_LBA+2
.193c24		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Get the sector from the FAT12 device
.193c28		b0 1f		bcs $193c49	                BCS do_success              ; If sucessful, set the directory cursor
.193c2a		82 84 18	brl $1954b1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c2d						fetch_fat32
.193c2d		e2 20		sep #$20	                SEP #$20        ; set A short
.193c2f		a9 01		lda #$01	                LDA #DOS_DIR_TYPE_FILE      ; Set the directory type to file type (all FAT32, any FAT12 subdirectory)
.193c31		8d 45 a0	sta $18a045	                STA DOS_DIR_TYPE
.193c34		c2 20		rep #$20	                REP #$20        ; set A long
.193c36		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193c39		85 10		sta $0330	                STA DOS_CLUS_ID
.193c3b		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193c3e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193c40		22 b0 41 19	jsl $1941b0	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193c44		b0 03		bcs $193c49	                BCS do_success              ; If successful: set the directory cursor
.193c46		82 68 18	brl $1954b1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193c49		82 6c 18	brl $1954b8	do_success      BRL IF_SUCCESS
.193c4c						DOS_DIRFIRST
.193c4c		0b		phd		                PHD
.193c4d		08		php		                PHP
.193c4e		48		pha		                PHA             ; begin setdp macro
.193c4f		08		php		                PHP
.193c50		c2 20		rep #$20	                REP #$20        ; set A long
.193c52		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c55		5b		tcd		                TCD
.193c56		28		plp		                PLP
.193c57		68		pla		                PLA             ; end setdp macro
.193c58		c2 20		rep #$20	                REP #$20        ; set A long
.193c5a		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193c5d		85 18		sta $0338	                STA DOS_DIR_PTR
.193c5f		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193c62		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c64		28		plp		                PLP
.193c65		2b		pld		                PLD
.193c66		6b		rtl		                RTL
.193c67						DOS_DIRNEXT
.193c67		da		phx		                PHX
.193c68		5a		phy		                PHY
.193c69		0b		phd		                PHD
.193c6a		8b		phb		                PHB
.193c6b		08		php		                PHP
.193c6c		48		pha		                PHA             ; begin setdbr macro
.193c6d		08		php		                PHP
.193c6e		e2 20		sep #$20	                SEP #$20        ; set A short
.193c70		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193c72		48		pha		                PHA
.193c73		ab		plb		                PLB
.193c74		28		plp		                PLP
.193c75		68		pla		                PLA             ; end setdbr macro
.193c76		48		pha		                PHA             ; begin setdp macro
.193c77		08		php		                PHP
.193c78		c2 20		rep #$20	                REP #$20        ; set A long
.193c7a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193c7d		5b		tcd		                TCD
.193c7e		28		plp		                PLP
.193c7f		68		pla		                PLA             ; end setdp macro
.193c80		c2 20		rep #$20	                REP #$20        ; set A long
.193c82		18		clc		                CLC                         ; Advance the directory entry pointer to the next entry
.193c83		a5 18		lda $0338	                LDA DOS_DIR_PTR
.193c85		69 20 00	adc #$0020	                ADC #DOS_DIR_ENTRY_SIZE
.193c88		85 18		sta $0338	                STA DOS_DIR_PTR
.193c8a		a5 1a		lda $033a	                LDA DOS_DIR_PTR+2
.193c8c		69 00 00	adc #$0000	                ADC #0
.193c8f		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193c91		38		sec		                SEC                         ; Check to see if we've reached the end of the sector buffer
.193c92		a9 00 a3	lda #$a300	                LDA #<>DOS_DIR_CLUSTER_END
.193c95		e5 18		sbc $0338	                SBC DOS_DIR_PTR
.193c97		85 28		sta $0348	                STA DOS_TEMP
.193c99		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER_END
.193c9c		e5 1a		sbc $033a	                SBC DOS_DIR_PTR+2
.193c9e		85 2a		sta $034a	                STA DOS_TEMP+2
.193ca0		30 0c		bmi $193cae	                BMI get_next_block          ; Yes: try to fetch the next directory entry
.193ca2		f0 03		beq $193ca7	                BEQ check_lower
.193ca4		82 11 18	brl $1954b8	                BRL IF_SUCCESS
.193ca7		a5 28		lda $0348	check_lower     LDA DOS_TEMP
.193ca9		f0 03		beq $193cae	                BEQ get_next_block
.193cab		82 0a 18	brl $1954b8	                BRL IF_SUCCESS
.193cae						get_next_block
.193cae		e2 20		sep #$20	                SEP #$20        ; set A short
.193cb0		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193cb3		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE
.193cb5		f0 38		beq $193cef	                BEQ next_cluster            ; FILE TYPE: it's cluster based (FAT32, or FAT12 non-root)
.193cb7						next_sector
.193cb7		c2 20		rep #$20	                REP #$20        ; set A long
.193cb9		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID
.193cbc		1a		inc a		                INC A
.193cbd		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID        ; Increment the sector number (FAT12 root directory is sector based)
.193cc0		c9 0a 00	cmp #$000a	                CMP #10                     ; See if we're at the end (TODO: calculate this)
.193cc3		d0 07		bne $193ccc	                BNE read_sector
.193cc5		e2 20		sep #$20	                SEP #$20        ; set A short
.193cc7		a9 00		lda #$00	                LDA #0
.193cc9		82 e1 17	brl $1954ad	                BRL IF_FAILURE
.193ccc						read_sector
.193ccc		c2 20		rep #$20	                REP #$20        ; set A long
.193cce		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the LBA to the sector #
.193cd1		85 02		sta $0322	                STA BIOS_LBA
.193cd3		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193cd6		85 04		sta $0324	                STA BIOS_LBA+2
.193cd8		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointers to the buffer
.193cdb		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193cdd		85 18		sta $0338	                STA DOS_DIR_PTR
.193cdf		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193ce2		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193ce4		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193ce6		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Attempt to read the sector from the FAT12 device
.193cea		b0 39		bcs $193d25	                BCS do_success              ; If successful: set the directory cursor
.193cec		82 c2 17	brl $1954b1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193cef						next_cluster
.193cef		c2 20		rep #$20	                REP #$20        ; set A long
.193cf1		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Get the current block (cluster) ID
.193cf4		85 10		sta $0330	                STA DOS_CLUS_ID
.193cf6		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193cf9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193cfb		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER
.193cfe		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193d00		85 18		sta $0338	                STA DOS_DIR_PTR
.193d02		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193d05		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193d07		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d09		22 c4 45 19	jsl $1945c4	                JSL NEXTCLUSTER             ; Try to find the next cluster
.193d0d		b0 03		bcs $193d12	                BCS set_next
.193d0f		82 9f 17	brl $1954b1	                BRL IF_PASSFAILURE          ; If error: pass it up the chain
.193d12		a5 10		lda $0330	set_next        LDA DOS_CLUS_ID             ; Save the cluster as the current directory cluster
.193d14		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193d17		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.193d19		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193d1c		22 b0 41 19	jsl $1941b0	                JSL DOS_GETCLUSTER          ; Try to read the first cluster
.193d20		b0 03		bcs $193d25	                BCS do_success              ; If successful: set the directory cursor
.193d22		82 8c 17	brl $1954b1	                BRL IF_PASSFAILURE          ; Otherwise: pass up the failure
.193d25		82 90 17	brl $1954b8	do_success      BRL IF_SUCCESS
.193d28						DOS_DIRFINDFREE
.193d28		da		phx		                PHX
.193d29		5a		phy		                PHY
.193d2a		0b		phd		                PHD
.193d2b		8b		phb		                PHB
.193d2c		08		php		                PHP
.193d2d		48		pha		                PHA             ; begin setdbr macro
.193d2e		08		php		                PHP
.193d2f		e2 20		sep #$20	                SEP #$20        ; set A short
.193d31		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d33		48		pha		                PHA
.193d34		ab		plb		                PLB
.193d35		28		plp		                PLP
.193d36		68		pla		                PLA             ; end setdbr macro
.193d37		48		pha		                PHA             ; begin setdp macro
.193d38		08		php		                PHP
.193d39		c2 20		rep #$20	                REP #$20        ; set A long
.193d3b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d3e		5b		tcd		                TCD
.193d3f		28		plp		                PLP
.193d40		68		pla		                PLA             ; end setdp macro
.193d41		22 cf 4f 19	jsl $194fcf	                JSL IF_DIROPEN
.193d45		b0 06		bcs $193d4d	                BCS start_walk
.193d47		a9 08 00	lda #$0008	                LDA #DOS_ERR_NODIR          ; Return that we could not read the directory
.193d4a		82 28 00	brl $193d75	                BRL ret_failure
.193d4d		a0 00 00	ldy #$0000	start_walk      LDY #0                      ; We check the first character of the entry
.193d50						chk_entry
.193d50		e2 20		sep #$20	                SEP #$20        ; set A short
.193d52		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y         ; Get the first byte of the directory entry
.193d54		f0 1c		beq $193d72	                BEQ ret_success             ; If 0: we have a blank... return it
.193d56		c9 e5		cmp #$e5	                CMP #DOS_DIR_ENT_UNUSED     ; Is it an unused (deleted) entry?
.193d58		f0 18		beq $193d72	                BEQ ret_success             ; Yes: return it
.193d5a		22 09 50 19	jsl $195009	                JSL IF_DIRNEXT              ; Go to the next directory entry
.193d5e		b0 ed		bcs $193d4d	                BCS start_walk              ; If we got one, start walking it
.193d60		22 78 3d 19	jsl $193d78	                JSL DOS_DIRAPPEND           ; If there isn't one, create a blank cluster
.193d64		90 0f		bcc $193d75	                BCC ret_failure             ; If that didn't work, return the failure
.193d66		c2 20		rep #$20	                REP #$20        ; set A long
.193d68		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Return the first entry
.193d6b		85 18		sta $0338	                STA DOS_DIR_PTR
.193d6d		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193d70		85 1a		sta $033a	                STA DOS_DIR_PTR+2
.193d72		82 43 17	brl $1954b8	ret_success     BRL IF_SUCCESS
.193d75		82 35 17	brl $1954ad	ret_failure     BRL IF_FAILURE
.193d78						DOS_DIRAPPEND
.193d78		da		phx		                PHX
.193d79		8b		phb		                PHB
.193d7a		0b		phd		                PHD
.193d7b		08		php		                PHP
.193d7c		48		pha		                PHA             ; begin setdbr macro
.193d7d		08		php		                PHP
.193d7e		e2 20		sep #$20	                SEP #$20        ; set A short
.193d80		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193d82		48		pha		                PHA
.193d83		ab		plb		                PLB
.193d84		28		plp		                PLP
.193d85		68		pla		                PLA             ; end setdbr macro
.193d86		48		pha		                PHA             ; begin setdp macro
.193d87		08		php		                PHP
.193d88		c2 20		rep #$20	                REP #$20        ; set A long
.193d8a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193d8d		5b		tcd		                TCD
.193d8e		28		plp		                PLP
.193d8f		68		pla		                PLA             ; end setdp macro
.193d90		e2 20		sep #$20	                SEP #$20        ; set A short
.193d92		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE
.193d95		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE          ; Are we looking at a file type directory
.193d97		f0 09		beq $193da2	                BEQ clr_sector                  ; Yes: clear out the directory data
.193d99						ret_failure
.193d99		e2 20		sep #$20	                SEP #$20        ; set A short
.193d9b		a9 15		lda #$15	                LDA #DOS_ERR_DIRFULL            ; No: return a directory-full error
.193d9d		85 0e		sta $032e	                STA DOS_STATUS
.193d9f		82 3e 00	brl $193de0	                BRL pass_failure
.193da2						clr_sector
.193da2		c2 20		rep #$20	                REP #$20        ; set A long
.193da4		a9 00 00	lda #$0000	                LDA #0
.193da7		a2 00 00	ldx #$0000	                LDX #0
.193daa		9d 00 a1	sta $18a100,x	clr_loop        STA DOS_DIR_CLUSTER,X           ; Clear the directory cluster
.193dad		e8		inx		                INX
.193dae		e8		inx		                INX
.193daf		e0 00 02	cpx #$0200	                CPX #512
.193db2		d0 f6		bne $193daa	                BNE clr_loop
.193db4		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER          ; Point to the new, blank directory data
.193db7		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193db9		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193dbc		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193dbe		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID            ; We want to append it to the current directory
.193dc1		85 10		sta $0330	                STA DOS_CLUS_ID
.193dc3		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193dc6		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193dc8		22 e5 49 19	jsl $1949e5	                JSL DOS_APPENDCLUS              ; Attempt to append the blank data as a new cluster
.193dcc		90 12		bcc $193de0	                BCC pass_failure                ; If there was an error, pass it up the chain
.193dce		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Set the block ID of the new directory cluster
.193dd1		8d 32 a0	sta $18a032	                STA DOS_DIR_BLOCK_ID
.193dd4		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.193dd7		8d 34 a0	sta $18a034	                STA DOS_DIR_BLOCK_ID+2
.193dda		28		plp		ret_success     PLP
.193ddb		2b		pld		                PLD
.193ddc		ab		plb		                PLB
.193ddd		fa		plx		                PLX
.193dde		38		sec		                SEC
.193ddf		6b		rtl		                RTL
.193de0		28		plp		pass_failure    PLP
.193de1		2b		pld		                PLD
.193de2		ab		plb		                PLB
.193de3		fa		plx		                PLX
.193de4		18		clc		                CLC
.193de5		6b		rtl		                RTL
.193de6						DOS_DIRWRITE
.193de6		da		phx		                PHX
.193de7		5a		phy		                PHY
.193de8		0b		phd		                PHD
.193de9		8b		phb		                PHB
.193dea		08		php		                PHP
.193deb		48		pha		                PHA             ; begin setdbr macro
.193dec		08		php		                PHP
.193ded		e2 20		sep #$20	                SEP #$20        ; set A short
.193def		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193df1		48		pha		                PHA
.193df2		ab		plb		                PLB
.193df3		28		plp		                PLP
.193df4		68		pla		                PLA             ; end setdbr macro
.193df5		48		pha		                PHA             ; begin setdp macro
.193df6		08		php		                PHP
.193df7		c2 20		rep #$20	                REP #$20        ; set A long
.193df9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193dfc		5b		tcd		                TCD
.193dfd		28		plp		                PLP
.193dfe		68		pla		                PLA             ; end setdp macro
.193dff		e2 20		sep #$20	                SEP #$20        ; set A short
.193e01		ad 45 a0	lda $18a045	                LDA DOS_DIR_TYPE            ; Check the type of the directory
.193e04		c9 01		cmp #$01	                CMP #DOS_DIR_TYPE_FILE      ; Is it a file type directory (FAT32 or FAT12 non-root?)
.193e06		f0 1f		beq $193e27	                BEQ write_cluster           ; Yes: write it back using a cluster ID
.193e08						write_sector
.193e08		c2 20		rep #$20	                REP #$20        ; set A long
.193e0a		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the BIOS_LBA to the LBA of the sector
.193e0d		85 02		sta $0322	                STA BIOS_LBA
.193e0f		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193e12		85 04		sta $0324	                STA BIOS_LBA+2
.193e14		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e17		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193e19		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e1c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193e1e		22 24 10 00	jsl $001024	                JSL PUTBLOCK                ; Try to write the sector to disk
.193e22		b0 1f		bcs $193e43	                BCS ret_success
.193e24		82 86 16	brl $1954ad	ret_failure     BRL IF_FAILURE
.193e27						write_cluster
.193e27		c2 20		rep #$20	                REP #$20        ; set A long
.193e29		ad 32 a0	lda $18a032	                LDA DOS_DIR_BLOCK_ID        ; Set the DOS_CLUS_ID to the ID of the cluster
.193e2c		85 10		sta $0330	                STA DOS_CLUS_ID
.193e2e		ad 34 a0	lda $18a034	                LDA DOS_DIR_BLOCK_ID+2
.193e31		85 12		sta $0332	                STA DOS_CLUS_ID+2
.193e33		a9 00 a1	lda #$a100	                LDA #<>DOS_DIR_CLUSTER      ; Set the pointer to the directory buffer
.193e36		85 1c		sta $033c	                STA DOS_BUFF_PTR
.193e38		a9 18 00	lda #$0018	                LDA #`DOS_DIR_CLUSTER
.193e3b		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.193e3d		22 ed 41 19	jsl $1941ed	                JSL DOS_PUTCLUSTER          ; Try to write the cluster to disk
.193e41		90 e1		bcc $193e24	                BCC ret_failure
.193e43		82 72 16	brl $1954b8	ret_success     BRL IF_SUCCESS

;******  Return to file: src\sdos_fat.asm

.0000						DEVICE_DESC
>0000						DEVNAME         .dword ?            ; A pointer to the ASCIIZ name of the device
>0004						DEVNUMBER       .byte ?           ; The BIOS_DEV number for the device
>0005						NEXT            .dword ?            ; A pointer to the next device descriptor
.0000						DIRENTRY
>0000						SHORTNAME               .fill 11        ; $00 - The short name of the file (8 name, 3 extension)
>000b						ATTRIBUTE               .byte ?         ; $0B - The attribute bits
>000c						IGNORED1                .word ?         ; $0C - Unused (by us) bytes
>000e						CREATE_TIME             .word ?         ; $0E - Creation time
>0010						CREATE_DATE             .word ?         ; $10 - Creation date
>0012						ACCESS_DATE             .word ?         ; $12 - Last access date
>0014						CLUSTER_H               .word ?         ; $14 - High word of the first cluster #
>0016						MODIFIED_TIME           .word ?         ; $16 - Last modified time
>0018						MODIFIED_DATE           .word ?         ; $18 - Last modified date
>001a						CLUSTER_L               .word ?         ; $1A - Low word of the first cluster #
>001c						SIZE                    .dword ?        ; $1C - The size of the file (in bytes)
=$01						DOS_ATTR_RO = $01                       ; File is read-only
=$02						DOS_ATTR_HIDDEN = $02                   ; File is hidden
=$04						DOS_ATTR_SYSTEM = $04                   ; File is a system file
=$08						DOS_ATTR_VOLUME = $08                   ; Entry is the volume label
=$10						DOS_ATTR_DIR = $10                      ; Entry is a directory
=$20						DOS_ATTR_ARCH = $20                     ; Entry has changed since last backup
=$0f						DOS_ATTR_LONGNAME = $0F                 ; Entry is the long file name
.0000						FILEDESC
>0000						STATUS              .byte ?             ; The status flags of the file descriptor (open, closed, error, EOF, etc.)
>0001						DEV                 .byte ?             ; The ID of the device holding the file
>0002						PATH                .dword ?            ; Pointer to a NULL terminated path string
>0006						CLUSTER             .dword ?            ; The current cluster of the file.
>000a						FIRST_CLUSTER       .dword ?            ; The ID of the first cluster in the file
>000e						BUFFER              .dword ?            ; Pointer to a cluster-sized buffer
>0012						SIZE                .dword ?            ; The size of the file
>0016						CREATE_DATE         .word ?             ; The creation date of the file
>0018						CREATE_TIME         .word ?             ; The creation time of the file
>001a						MODIFIED_DATE       .word ?             ; The modification date of the file
>001c						MODIFIED_TIME       .word ?             ; The modification time of the file
>001e						RESERVED            .word ?             ; Two reserved bytes to bring the descriptor up to 32 bytes
=$01						FD_STAT_READ = $01                      ; The file is readable
=$02						FD_STAT_WRITE = $02                     ; The file is writable
=$10						FD_STAT_ALLOC = $10                     ; The file descriptor has been allocated
=$20						FD_STAT_OPEN = $20                      ; The file is open
=$40						FD_STAT_ERROR = $40                     ; The file is in an error condition
=$80						FD_STAT_EOF = $80                       ; The file cursor is at the end of the file
=$0fffffff					FAT_LAST_CLUSTER = $0FFFFFFF            ; Code to mark the last cluster of a file
=1						VOLUMEMAX = 1                           ; The maximum number of mounted volumes we support
=32						DOS_DIR_ENTRY_SIZE = 32                 ; The size of a directory entry
=512						DOS_SECTOR_SIZE = 512                   ; The size of a sector
=$e5						DOS_DIR_ENT_UNUSED = $E5                ; Marker for an unused directory entry
=$00						PART_TYPE_FAT12 = $00                   ; "Partition" type: FAT12, used for floppy disks
=$0c						PART_TYPE_FAT32_LBA = $0C               ; Patition type: FAT32 with LBA addressing
=$29						BPB_EXTENDED_RECORD = $29               ; If SIGNATUREB of the BPB has this byte, the volume label is valid
=0						DOS_DIR_TYPE_FAT12ROOT = 0              ; Directory is a FAT12 root directory
=1						DOS_DIR_TYPE_FILE = 1                   ; Directory is a file type directory
=8						DOS_FD_MAX = 8                          ; The maximum number of open file descriptors
=1						DOS_ERR_READ = 1                        ; We could not read a sector, check BIOS_STATUS for details
=2						DOS_ERR_NOTMBR = 2                      ; We could not find the MBR
=3						DOS_ERR_NOFAT32 = 3                     ; We could not find a FAT32 parition using LBA
=4						DOS_ERR_NOINIT = 4                      ; We could not INIT the block device
=5						DOS_ERR_VOLID = 5                       ; Volume ID sector could not be loaded
=6						DOS_ERR_FAT = 6                         ; Can't scan the FAT for some reason
=7						DOS_ERR_BADPATH = 7                     ; The path was badly formatted
=8						DOS_ERR_NODIR = 8                       ; Could not read the directory
=9						DOS_ERR_NOTFOUND = 9                    ; File/directory requested was not found
=10						DOS_ERR_NOCLUSTER = 10                  ; There are no more clusters
=11						DOS_ERR_FILEEXISTS = 11                 ; There is already a file of that name
=12						DOS_ERR_NOTOPEN = 12                    ; File has not been open
=13						DOS_ERR_NOTREAD = 13                    ; File is not open for reading
=14						DOS_ERR_NOTWRITE = 14                   ; File is not open for writing
=15						DOS_ERR_OPEN = 15                       ; File is already open
=16						DOS_ERR_PGXSIG = 16                     ; File does not have the PGX signature
=17						DOS_ERR_NOEXEC = 17                     ; File does is not an executable format
=18						DOS_ERR_MEDIAFULL = 18                  ; There are no more free clusters on the drive
=19						DOS_ERR_WRITEPROT = 19                  ; The medium is write-protected
=20						DOS_ERR_FATUPDATE = 20                  ; Can't update the FAT
=21						DOS_ERR_DIRFULL = 21                    ; The directory is full
=22						DOS_ERR_NOFD = 22                       ; No file descriptors are available for allocation
=23						DOS_ERR_NOMEDIA = 23                    ; No media was present
=24						DOS_ERR_EOF = 24                        ; At end of file
=25						DOS_ERR_PGZSIG = 25                     ; File does not have the PGZ signature
=446						PART0_OFF = 446                         ; Offset to the first partition in the MBR
=4						PART_TYPE_OFF = 4                       ; Offset to the partition's type
=8						PART_LBA_OFF = 8                        ; Offset to the LBA of the first sector of the partition
=13						PART_SECT_COUNT_OFF = 13                ; Offset to the sector count of the partition
=510						MBR_SIGNATURE = 510                     ; The offset to the MBR signature bytes
=11						BPB_BYTEPERSEC_OFF = 11                 ; Offset in the BPB sector to the Bytes Per Sector
=13						BPB_SECPERCLUS_OFF = 13                 ; Offset in the BPB sector to the Sectors Per Cluster
=14						BPB_RSRVCLUS_OFF = 14                   ; Offset in the BPB sector to the Number of Reserved Clusters
=16						BPB_NUMFAT_OFF = 16                     ; Offset in the BPB sector to the Number of FATs
=17						BPB_ROOT_MAX_ENTRY_OFF = 17             ; Offset in the BPB sector to the Maximum # of entries in the root directory (FAT12)
=19						BPB_TOTAL_SECTORS = 19                  ; Offset in the BPB sector to the number of sectors on the partition or disk (FAT12)
=$24						BPB_SECPERFAT_OFF = $24                 ; Offset in the BPB sector to the Sectors Per FAT
=38						BPB_SIGNATUREB = 38                     ; Offset in the BPB sector to the second signature byte
=39						BPB_VOLUMEID = 39                       ; Offset in the BPB sector to the volume ID
=$2c						BPB_ROOTCLUS_OFF = $2C                  ; Offset in the BPB sector to the Root Cluster Number
=510						BPB_SIGNATURE = 510                     ; The offset to the MBR signature bytes

;******  Processing file: src\Includes/sdos_fat_vars_user_inc.asm

=$18a000					    DOS_HIGH_VARIABLES      = $18A000
=$18a000					    DEVICE                  = $18A000       ; 1 byte - The number of the block device
=$18a001					    FILE_SYSTEM             = $18A001       ; 1 byte - The type of filesystem (FAT12, FAT32, etc.)
=$18a002					    PARTITION               = $18A002       ; 1 byte - The number of the partitions on the device
=$18a003					    SECTORS_PER_CLUSTER     = $18A003       ; 1 byte - The number of sectors in a cluster
=$18a004					    FIRSTSECTOR             = $18A004       ; 4 bytes - The LBA of the first sector on the volume
=$18a008					    SECTORCOUNT             = $18A008       ; 4 bytes - The number of sectors in the volume
=$18a00c					    NUM_RSRV_SEC            = $18A00C       ; 2 bytes - The number of hidden or reserved sectors
=$18a00e					    CLUSTER_SIZE            = $18A00E       ; 2 bytes - The size of a cluster in bytes
=$18a010					    SEC_PER_FAT             = $18A010       ; 4 bytes - The number of sectors per FAT
=$18a014					    FAT_BEGIN_LBA           = $18A014       ; 4 bytes - The LBA of the first sector of FAT #1
=$18a018					    FAT2_BEGIN_LBA          = $18A018       ; 4 bytes - The LBA of the first sector of FAT #2
=$18a01c					    CLUSTER_BEGIN_LBA       = $18A01C       ; 4 bytes - The LBA of the first cluster in the storage area
=$18a020					    ROOT_DIR_FIRST_CLUSTER  = $18A020       ; 4 bytes - The number of the first cluster in the root directory
=$18a024					    ROOT_DIR_MAX_ENTRY      = $18A024       ; 2 bytes - The maximum number of entries in the root directory (0 = no limit)
=$18a026					    VOLUME_ID               = $18A026       ; 4 bytes - The ID of the volume
=$18a02a					    DOS_CURR_CLUS           = $18A02A       ; 4 bytes - The current cluster (for delete)
=$18a02e					    DOS_NEXT_CLUS           = $18A02E       ; 4 bytes - The next cluster in a file (for delete)
=$18a032					    DOS_DIR_BLOCK_ID        = $18A032       ; 4 bytes - The ID of the current directory block
=$18a036					    DOS_NEW_CLUSTER         = $18A036       ; 4 bytes - Space to store a newly written cluster ID
=$18a03a					    DOS_SHORT_NAME          = $18A03A       ; 11 bytes - The short name for a desired file
=$18a045					    DOS_DIR_TYPE            = $18A045       ; 1 byte - a code indicating the type of the current directory (0 = cluster based, $80 = sector based)
=$18a046					    DOS_CURR_DIR_ID         = $18A046       ; 4 byte - the ID of the first sector or cluster of the current directory
=$18a04a					    DOS_DEV_NAMES           = $18A04A       ; 4 byte - pointer to the linked list of device names
=$18a04e					    FDC_MOTOR_TIMER         = $18A04E       ; 2 bytes - count-down timer to automatically turn off the FDC spindle motor
=$18a050					    DOS_MOUNT_DEV           = $18A050       ; 1 byte - the device code of the currently mounted device
=$18a100					    DOS_DIR_CLUSTER         = $18A100       ; 512 bytes - A buffer for directory entries
=$18a300					    DOS_DIR_CLUSTER_END     = $18A300       ; The byte just past the end of the directory cluster buffer
=$18a300					    DOS_SECTOR              = $18A300       ; 512 bytes - A buffer for block device read/write
=$18a500					    DOS_SECTOR_END          = $18A500       ; The byte just past the end of the cluster buffer
=$18a500					    DOS_FAT_SECTORS         = $18A500       ; 1024 bytes - two sectors worth of the FAT
=$18a900					    DOS_FAT_SECTORS_END     = $18A900       ; The byte just past the end of the FAT buffers
=$18a900					    DOS_BOOT_SECTOR         = $18A900       ; A sector for holding the boot sector
=$18ab00					    DOS_BOOT_SECTOR_END     = $18AB00
=$18ab00					    DOS_SPARE_SECTOR        = $18AB00       ; A spare 512 byte buffer for loading sectors
=$18ad00					    DOS_SPARE_SECTOR_END    = $18AD00
=$18ad00					    DOS_SPARE_FD            = $18AD00       ; A spare file descriptor buffer
=1617184					DOS_SPARE_FD_END        = DOS_SPARE_FD + SIZE(FILEDESC)
=1617184					DOS_FILE_DESCS          = DOS_SPARE_FD_END
=1617440					DOS_FILE_DESCS_END      = DOS_FILE_DESCS + SIZE(FILEDESC) * DOS_FD_MAX
=$18b000					    DOS_FILE_BUFFS          = $18B000
=1622016					    DOS_FILE_BUFFS_END      = DOS_FILE_BUFFS + DOS_SECTOR_SIZE * DOS_FD_MAX

;******  Return to file: src\sdos_fat.asm

.193e46						DOS_INIT
.193e46		8b		phb		                PHB
.193e47		0b		phd		                PHD
.193e48		08		php		                PHP
.193e49		48		pha		                PHA             ; begin setdbr macro
.193e4a		08		php		                PHP
.193e4b		e2 20		sep #$20	                SEP #$20        ; set A short
.193e4d		a9 00		lda #$00	                LDA #0
.193e4f		48		pha		                PHA
.193e50		ab		plb		                PLB
.193e51		28		plp		                PLP
.193e52		68		pla		                PLA             ; end setdbr macro
.193e53		48		pha		                PHA             ; begin setdp macro
.193e54		08		php		                PHP
.193e55		c2 20		rep #$20	                REP #$20        ; set A long
.193e57		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e5a		5b		tcd		                TCD
.193e5b		28		plp		                PLP
.193e5c		68		pla		                PLA             ; end setdp macro
.193e5d		e2 20		sep #$20	                SEP #$20        ; set A short
.193e5f		c2 10		rep #$10	                REP #$10        ; set X long
.193e61		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank 0 variables
.193e64		a9 00		lda #$00	                LDA #0
.193e66		9d 20 03	sta $0320,x	b0_clr_loop     STA @w SDOS_VARIABLES,X
.193e69		e8		inx		                INX
.193e6a		e0 15 02	cpx #$0215	                CPX #<>(FDC_CMD_RETRY - SDOS_VARIABLES + 1)
.193e6d		d0 f7		bne $193e66	                BNE b0_clr_loop
.193e6f		48		pha		                PHA             ; begin setdbr macro
.193e70		08		php		                PHP
.193e71		e2 20		sep #$20	                SEP #$20        ; set A short
.193e73		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193e75		48		pha		                PHA
.193e76		ab		plb		                PLB
.193e77		28		plp		                PLP
.193e78		68		pla		                PLA             ; end setdbr macro
.193e79		48		pha		                PHA             ; begin setdp macro
.193e7a		08		php		                PHP
.193e7b		c2 20		rep #$20	                REP #$20        ; set A long
.193e7d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193e80		5b		tcd		                TCD
.193e81		28		plp		                PLP
.193e82		68		pla		                PLA             ; end setdp macro
.193e83		e2 20		sep #$20	                SEP #$20        ; set A short
.193e85		c2 10		rep #$10	                REP #$10        ; set X long
.193e87		a2 00 00	ldx #$0000	                LDX #0                  ; Zero out all the bank $38 variables
.193e8a		a9 00		lda #$00	                LDA #0
.193e8c		9d 00 a0	sta $18a000,x	b38_clr_loop    STA @w DOS_HIGH_VARIABLES,X
.193e8f		e8		inx		                INX
.193e90		e0 01 20	cpx #$2001	                CPX #<>(DOS_FILE_BUFFS_END - DOS_HIGH_VARIABLES + 1)
.193e93		d0 f7		bne $193e8c	                BNE b38_clr_loop
.193e95		c2 20		rep #$20	                REP #$20        ; set A long
.193e97		a9 45 42	lda #$4245	                LDA #<>DOS_HD_DESC      ; Initialize the device names list
.193e9a		8f 4a a0 18	sta $18a04a	                STA @l DOS_DEV_NAMES
.193e9e		a9 19 00	lda #$0019	                LDA #`DOS_HD_DESC
.193ea1		8f 4c a0 18	sta $18a04c	                STA @l DOS_DEV_NAMES+2
.193ea5		e2 20		sep #$20	                SEP #$20        ; set A short
.193ea7		a9 02		lda #$02	                LDA #BIOS_DEV_SD        ; Default to the SD card
.193ea9		85 01		sta $0321	                STA BIOS_DEV
.193eab		a9 ff		lda #$ff	                LDA #$FF                ; Set the mounted device to a sentinel value
.193ead		8f 50 a0 18	sta $18a050	                STA @l DOS_MOUNT_DEV
.193eb1		a9 00		lda #$00	                LDA #0
.193eb3		a2 00 00	ldx #$0000	                LDX #0
.193eb6		9d 20 ad	sta $18ad20,x	fd_zero_loop    STA @w DOS_FILE_DESCS,X
.193eb9		e8		inx		                INX
.193eba		e0 00 01	cpx #$0100	                CPX #(DOS_FILE_DESCS_END - DOS_FILE_DESCS)
.193ebd		d0 f7		bne $193eb6	                BNE fd_zero_loop
.193ebf		a9 00		lda #$00	                LDA #0
.193ec1		a2 00 00	ldx #$0000	                LDX #0
.193ec4		9d 00 b0	sta $18b000,x	sect_zero_loop  STA @w DOS_FILE_BUFFS,X
.193ec7		e8		inx		                INX
.193ec8		e0 00 10	cpx #$1000	                CPX #(DOS_FILE_BUFFS_END - DOS_FILE_BUFFS)
.193ecb		d0 f7		bne $193ec4	                BNE sect_zero_loop
.193ecd		c2 20		rep #$20	                REP #$20        ; set A long
.193ecf		a9 20 ad	lda #$ad20	                LDA #<>DOS_FILE_DESCS   ; Initialize a pointer to the file descriptors
.193ed2		85 20		sta $0340	                STA @b DOS_FD_PTR
.193ed4		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.193ed7		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193ed9		a9 00 b0	lda #$b000	                LDA #<>DOS_FILE_BUFFS   ; Initialize a pointer to the sector buffers
.193edc		85 28		sta $0348	                STA @b DOS_TEMP
.193ede		a9 18 00	lda #$0018	                LDA #`DOS_FILE_BUFFS
.193ee1		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193ee3		a2 08 00	ldx #$0008	                LDX #DOS_FD_MAX         ; Set how many file descriptors to update
.193ee6		a0 0e 00	ldy #$000e	fd_buff_loop    LDY #FILEDESC.BUFFER    ; Set the file descriptor's buffer pointer
.193ee9		a5 28		lda $0348	                LDA @b DOS_TEMP
.193eeb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193eed		c8		iny		                INY
.193eee		c8		iny		                INY
.193eef		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193ef1		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.193ef3		18		clc		                CLC                     ; Advance the file descriptor pointer to the next file descriptor
.193ef4		a5 20		lda $0340	                LDA @b DOS_FD_PTR
.193ef6		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.193ef9		85 20		sta $0340	                STA @b DOS_FD_PTR
.193efb		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.193efd		69 00 00	adc #$0000	                ADC #0
.193f00		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.193f02		18		clc		                CLC                     ; Advance the sector buffer pointer to the next buffer
.193f03		a5 28		lda $0348	                LDA @b DOS_TEMP
.193f05		69 00 02	adc #$0200	                ADC #DOS_SECTOR_SIZE
.193f08		85 28		sta $0348	                STA @b DOS_TEMP
.193f0a		a5 2a		lda $034a	                LDA @b DOS_TEMP+2
.193f0c		69 00 00	adc #$0000	                ADC #0
.193f0f		85 2a		sta $034a	                STA @b DOS_TEMP+2
.193f11		ca		dex		                DEX                     ; Count down the descriptors...
.193f12		d0 d2		bne $193ee6	                BNE fd_buff_loop        ; If not zero, keep setting the buffer pointers
.193f14		28		plp		                PLP
.193f15		2b		pld		                PLD
.193f16		ab		plb		                PLB
.193f17		6b		rtl		                RTL
.193f18						DOS_MOUNT
.193f18		8b		phb		                PHB
.193f19		0b		phd		                PHD
.193f1a		08		php		                PHP
.193f1b		48		pha		                PHA             ; begin setdbr macro
.193f1c		08		php		                PHP
.193f1d		e2 20		sep #$20	                SEP #$20        ; set A short
.193f1f		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.193f21		48		pha		                PHA
.193f22		ab		plb		                PLB
.193f23		28		plp		                PLP
.193f24		68		pla		                PLA             ; end setdbr macro
.193f25		48		pha		                PHA             ; begin setdp macro
.193f26		08		php		                PHP
.193f27		c2 20		rep #$20	                REP #$20        ; set A long
.193f29		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.193f2c		5b		tcd		                TCD
.193f2d		28		plp		                PLP
.193f2e		68		pla		                PLA             ; end setdp macro
.193f2f		e2 20		sep #$20	                SEP #$20        ; set A short
.193f31		a5 01		lda $0321	                LDA BIOS_DEV            ; Get the device to moount
.193f33		8f 50 a0 18	sta $18a050	try_mount       STA @l DOS_MOUNT_DEV    ; Save the device we're going to try to mount
.193f37		c9 02		cmp #$02	                CMP #BIOS_DEV_SD        ; Is it the SDC?
.193f39		f0 1f		beq $193f5a	                BEQ do_sdc_mount        ; Yes: attempt to mount it
.193f3b		c9 06		cmp #$06	                CMP #BIOS_DEV_HD0       ; Is it HD0?
.193f3d		f0 26		beq $193f65	                BEQ do_ide_mount        ; Yes: attempt to mount the IDE drive
.193f3f		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC       ; Is it the FDC?
.193f41		f0 0b		beq $193f4e	                BEQ do_fdc_mount        ; Yes: attempt to mount it
.193f43		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return a bad device error
.193f45		85 0e		sta $032e	                STA DOS_STATUS
.193f47		a9 80		lda #$80	                LDA #BIOS_ERR_BADDEV
.193f49		85 00		sta $0320	                STA BIOS_STATUS
.193f4b		82 7c 01	brl $1940ca	                BRL ret_failure
.193f4e		22 28 63 19	jsl $196328	do_fdc_mount    JSL FDC_MOUNT           ; Attempt to mount the floppy disk
.193f52		b0 03		bcs $193f57	                BCS fdc_success
.193f54		82 73 01	brl $1940ca	                BRL ret_failure
.193f57		82 67 01	brl $1940c1	fdc_success     BRL ret_success
.193f5a		22 10 59 19	jsl $195910	do_sdc_mount    JSL SDC_INIT            ; Yes: Initialize access to the SDC
.193f5e		b0 10		bcs $193f70	                BCS get_mbr             ; Continue if success
.193f60		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f62		82 65 01	brl $1940ca	                BRL ret_failure
.193f65		22 70 67 19	jsl $196770	do_ide_mount    JSL IDE_INIT            ; Yes: Initialize access to the IDE drive
.193f69		b0 05		bcs $193f70	                BCS get_mbr             ; Continue if success
.193f6b		a9 04		lda #$04	                LDA #DOS_ERR_NOINIT     ; Otherwise: return an error
.193f6d		82 5a 01	brl $1940ca	                BRL ret_failure
.193f70						get_mbr
.193f70		c2 30		rep #$30	                REP #$30        ; set A&X long
.193f72		64 02		stz $0322	                STZ BIOS_LBA            ; Get the MBR
.193f74		64 04		stz $0324	                STZ BIOS_LBA+2
.193f76		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR       ; Into DOS_SECTOR
.193f79		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193f7b		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193f7e		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193f80		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Try to read the MBR
.193f84		b0 07		bcs $193f8d	                BCS chk_signature       ; If success, check the signature bytes
.193f86		e2 20		sep #$20	                SEP #$20        ; set A short
.193f88		a9 01		lda #$01	                LDA #DOS_ERR_READ       ; Otherwise: report we couldn't read the first sector
.193f8a		82 3d 01	brl $1940ca	                BRL ret_failure
.193f8d						chk_signature
.193f8d		e2 20		sep #$20	                SEP #$20        ; set A short
.193f8f		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+MBR_SIGNATURE
.193f92		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.193f94		d0 07		bne $193f9d	                BNE not_mbr             ; No: signal we could find the MBR
.193f96		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+MBR_SIGNATURE+1
.193f99		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.193f9b		f0 05		beq $193fa2	                BEQ chk_part_type       ; Yes: we have an MBR
.193f9d		a9 02		lda #$02	not_mbr         LDA #DOS_ERR_NOTMBR     ; Return that we didn't find the MBR
.193f9f		82 28 01	brl $1940ca	                BRL ret_failure
.193fa2		ad c2 a4	lda $18a4c2	chk_part_type   LDA DOS_SECTOR+PART0_OFF+PART_TYPE_OFF
.193fa5		c9 0c		cmp #$0c	                CMP #PART_TYPE_FAT32_LBA
.193fa7		f0 05		beq $193fae	                BEQ get_LBA             ; Is FAT32 with LBA?
.193fa9		a9 03		lda #$03	                LDA #DOS_ERR_NOFAT32    ; No: return No FAT32 found error
.193fab		82 1c 01	brl $1940ca	                BRL ret_failure
.193fae		8d 01 a0	sta $18a001	get_LBA         STA FILE_SYSTEM         ; Save the file system of the partition
.193fb1		c2 20		rep #$20	                REP #$20        ; set A long
.193fb3		ad c6 a4	lda $18a4c6	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF
.193fb6		8d 04 a0	sta $18a004	                STA FIRSTSECTOR
.193fb9		ad c8 a4	lda $18a4c8	                LDA DOS_SECTOR+PART0_OFF+PART_LBA_OFF+2
.193fbc		8d 06 a0	sta $18a006	                STA FIRSTSECTOR+2
.193fbf		ad cb a4	lda $18a4cb	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF
.193fc2		8d 08 a0	sta $18a008	                STA SECTORCOUNT
.193fc5		ad cd a4	lda $18a4cd	                LDA DOS_SECTOR+PART0_OFF+PART_SECT_COUNT_OFF+2
.193fc8		8d 0a a0	sta $18a00a	                STA SECTORCOUNT+2
.193fcb		e2 20		sep #$20	                SEP #$20        ; set A short
.193fcd		a5 01		lda $0321	                LDA BIOS_DEV            ; Save the device number
.193fcf		8d 00 a0	sta $18a000	                STA DEVICE
.193fd2		a9 00		lda #$00	                LDA #0
.193fd4		8d 02 a0	sta $18a002	                STA PARTITION           ; For the moment, we only support the first partition
.193fd7		c2 20		rep #$20	                REP #$20        ; set A long
.193fd9		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.193fdc		85 06		sta $0326	                STA BIOS_BUFF_PTR
.193fde		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.193fe1		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.193fe3		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.193fe6		85 02		sta $0322	                STA BIOS_LBA
.193fe8		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.193feb		85 04		sta $0324	                STA BIOS_LBA+2
.193fed		22 44 10 00	jsl $001044	                JSL GETBLOCK            ; Attempt to load the volume ID
.193ff1		b0 1c		bcs $19400f	                BCS get_first_sec       ; Got it? Start parsing it
.193ff3		e2 20		sep #$20	                SEP #$20        ; set A short
.193ff5		a9 05		lda #$05	                LDA #DOS_ERR_VOLID      ; Otherwise: return an error
.193ff7		82 d0 00	brl $1940ca	                BRL ret_failure
.193ffa						chk_bpb_sig
.193ffa		e2 20		sep #$20	                SEP #$20        ; set A short
.193ffc		ad fe a4	lda $18a4fe	                LDA DOS_SECTOR+BPB_SIGNATURE
.193fff		c9 55		cmp #$55	                CMP #$55                ; Is first byte of signature $55?
.194001		d0 07		bne $19400a	                BNE not_bpb             ; No: signal we could find the volume ID
.194003		ad ff a4	lda $18a4ff	                LDA DOS_SECTOR+BPB_SIGNATURE+1
.194006		c9 aa		cmp #$aa	                CMP #$AA                ; Is second byte of signature $AA?
.194008		f0 05		beq $19400f	                BEQ get_first_sec       ; Yes: we have an volume ID
.19400a		a9 05		lda #$05	not_bpb         LDA #DOS_ERR_VOLID      ; Return that we didn't find the Volume ID (BPB)
.19400c		82 bb 00	brl $1940ca	                BRL ret_failure
.19400f						get_first_sec
.19400f		c2 20		rep #$20	                REP #$20        ; set A long
.194011		ad 2c a3	lda $18a32c	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF
.194014		8d 20 a0	sta $18a020	                STA ROOT_DIR_FIRST_CLUSTER
.194017		ad 2e a3	lda $18a32e	                LDA DOS_SECTOR+BPB_ROOTCLUS_OFF+2
.19401a		8d 22 a0	sta $18a022	                STA ROOT_DIR_FIRST_CLUSTER+2
.19401d		ad 0e a3	lda $18a30e	                LDA DOS_SECTOR+BPB_RSRVCLUS_OFF
.194020		8d 0c a0	sta $18a00c	                STA NUM_RSRV_SEC
.194023		18		clc		                CLC                     ; fat_begin_lba := FirstSector + Number_of_Reserved_Sectors
.194024		ad 04 a0	lda $18a004	                LDA FIRSTSECTOR
.194027		6d 0c a0	adc $18a00c	                ADC NUM_RSRV_SEC
.19402a		8d 14 a0	sta $18a014	                STA FAT_BEGIN_LBA
.19402d		ad 06 a0	lda $18a006	                LDA FIRSTSECTOR+2
.194030		69 00 00	adc #$0000	                ADC #0
.194033		8d 16 a0	sta $18a016	                STA FAT_BEGIN_LBA+2
.194036		e2 20		sep #$20	                SEP #$20        ; set A short
.194038		a2 00 00	ldx #$0000	                LDX #0
.19403b		bf 24 a3 18	lda $18a324,x	cpy_secperfat   LDA @l DOS_SECTOR+BPB_SECPERFAT_OFF,X
.19403f		9f 10 a0 18	sta $18a010,x	                STA @l SEC_PER_FAT,X
.194043		e8		inx		                INX
.194044		e0 04 00	cpx #$0004	                CPX #4
.194047		d0 f2		bne $19403b	                BNE cpy_secperfat
.194049		ad 10 a0	lda $18a010	                LDA SEC_PER_FAT
.19404c		0a		asl a		                ASL A
.19404d		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.194050		ad 11 a0	lda $18a011	                LDA SEC_PER_FAT+1
.194053		2a		rol a		                ROL A
.194054		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.194057		ad 12 a0	lda $18a012	                LDA SEC_PER_FAT+2
.19405a		2a		rol a		                ROL A
.19405b		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.19405e		ad 13 a0	lda $18a013	                LDA SEC_PER_FAT+3
.194061		2a		rol a		                ROL A
.194062		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.194065		18		clc		                CLC
.194066		ad 1c a0	lda $18a01c	                LDA CLUSTER_BEGIN_LBA
.194069		6d 14 a0	adc $18a014	                ADC FAT_BEGIN_LBA
.19406c		8d 1c a0	sta $18a01c	                STA CLUSTER_BEGIN_LBA
.19406f		ad 1d a0	lda $18a01d	                LDA CLUSTER_BEGIN_LBA+1
.194072		6d 15 a0	adc $18a015	                ADC FAT_BEGIN_LBA+1
.194075		8d 1d a0	sta $18a01d	                STA CLUSTER_BEGIN_LBA+1
.194078		ad 1e a0	lda $18a01e	                LDA CLUSTER_BEGIN_LBA+2
.19407b		6d 16 a0	adc $18a016	                ADC FAT_BEGIN_LBA+2
.19407e		8d 1e a0	sta $18a01e	                STA CLUSTER_BEGIN_LBA+2
.194081		ad 1f a0	lda $18a01f	                LDA CLUSTER_BEGIN_LBA+3
.194084		6d 17 a0	adc $18a017	                ADC FAT_BEGIN_LBA+3
.194087		8d 1f a0	sta $18a01f	                STA CLUSTER_BEGIN_LBA+3
.19408a		e2 20		sep #$20	                SEP #$20        ; set A short
.19408c		ad 0d a3	lda $18a30d	                LDA DOS_SECTOR+BPB_SECPERCLUS_OFF
.19408f		8d 03 a0	sta $18a003	                STA SECTORS_PER_CLUSTER
.194092		18		clc		                CLC
.194093		ad 14 a0	lda $18a014	                LDA FAT_BEGIN_LBA                       ; Compute the address of the first sector of
.194096		6d 10 a0	adc $18a010	                ADC SEC_PER_FAT                         ; the second copy of the FAT
.194099		8d 18 a0	sta $18a018	                STA FAT2_BEGIN_LBA
.19409c		ad 15 a0	lda $18a015	                LDA FAT_BEGIN_LBA+1
.19409f		6d 11 a0	adc $18a011	                ADC SEC_PER_FAT+1
.1940a2		8d 19 a0	sta $18a019	                STA FAT2_BEGIN_LBA+1
.1940a5		ad 16 a0	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1940a8		6d 12 a0	adc $18a012	                ADC SEC_PER_FAT+2
.1940ab		8d 1a a0	sta $18a01a	                STA FAT2_BEGIN_LBA+2
.1940ae		ad 17 a0	lda $18a017	                LDA FAT_BEGIN_LBA+3
.1940b1		6d 13 a0	adc $18a013	                ADC SEC_PER_FAT+3
.1940b4		8d 1b a0	sta $18a01b	                STA FAT2_BEGIN_LBA+3
.1940b7		a9 00		lda #$00	                LDA #<DOS_SECTOR_SIZE                   ; Default to one sector's worth of bytes
.1940b9		8d 0e a0	sta $18a00e	                STA CLUSTER_SIZE
.1940bc		a9 02		lda #$02	                LDA #>DOS_SECTOR_SIZE
.1940be		8d 0f a0	sta $18a00f	                STA CLUSTER_SIZE+1
.1940c1						ret_success
.1940c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1940c3		64 0e		stz $032e	                STZ DOS_STATUS          ; Set status code to 0
.1940c5		28		plp		                PLP
.1940c6		2b		pld		                PLD
.1940c7		ab		plb		                PLB
.1940c8		38		sec		                SEC
.1940c9		6b		rtl		                RTL
.1940ca						ret_failure
.1940ca		e2 20		sep #$20	                SEP #$20        ; set A short
.1940cc		85 0e		sta $032e	                STA DOS_STATUS          ; Save the status code
.1940ce		28		plp		                PLP
.1940cf		2b		pld		                PLD
.1940d0		ab		plb		                PLB
.1940d1		18		clc		                CLC
.1940d2		6b		rtl		                RTL
.1940d3						DOS_TESTBOOT
.1940d3		8b		phb		                PHB
.1940d4		0b		phd		                PHD
.1940d5		da		phx		                PHX
.1940d6		08		php		                PHP
.1940d7		48		pha		                PHA             ; begin setdbr macro
.1940d8		08		php		                PHP
.1940d9		e2 20		sep #$20	                SEP #$20        ; set A short
.1940db		a9 00		lda #$00	                LDA #0
.1940dd		48		pha		                PHA
.1940de		ab		plb		                PLB
.1940df		28		plp		                PLP
.1940e0		68		pla		                PLA             ; end setdbr macro
.1940e1		48		pha		                PHA             ; begin setdp macro
.1940e2		08		php		                PHP
.1940e3		c2 20		rep #$20	                REP #$20        ; set A long
.1940e5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1940e8		5b		tcd		                TCD
.1940e9		28		plp		                PLP
.1940ea		68		pla		                PLA             ; end setdp macro
.1940eb		c2 10		rep #$10	                REP #$10        ; set X long
.1940ed						chk_dev
.1940ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1940ef		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Look at the device #
.1940f1		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the floppy drive?
.1940f3		f0 24		beq $194119	                BEQ chk_vbr_brl             ; Yes: check if BRL is in the right place in the VBR
.1940f5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1940f7		a9 00 00	lda #$0000	                LDA #0                      ; Point to the MBR
.1940fa		85 02		sta $0322	                STA @b BIOS_LBA
.1940fc		85 04		sta $0324	                STA @b BIOS_LBA+2
.1940fe		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR           ; And the buffer
.194101		85 06		sta $0326	                STA @b BIOS_BUFF_PTR
.194103		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194106		85 08		sta $0328	                STA @b BIOS_BUFF_PTR+2
.194108		22 44 10 00	jsl $001044	                JSL GETBLOCK                ; Try to load the MBR
.19410c		b0 03		bcs $194111	                BCS chk_mbr_brl
.19410e		82 47 00	brl $194158	                BRL done                    ; If failed... just return
.194111						chk_mbr_brl
.194111		e2 20		sep #$20	                SEP #$20        ; set A short
.194113		af 00 a3 18	lda $18a300	                LDA @l DOS_SECTOR           ; Check the first byte of the MBR
.194117		80 04		bra $19411d	                BRA chk_brl
.194119		af 3e a3 18	lda $18a33e	chk_vbr_brl     LDA @l DOS_SECTOR+FDC_BOOT_START
.19411d		c9 80		cmp #$80	chk_brl         CMP #$80                    ; Is the first byte a BRL/BRA instruction?
.19411f		f0 06		beq $194127	                BEQ chk_magic               ; Yes: check for the magic text
.194121		c9 82		cmp #$82	                CMP #$82
.194123		f0 02		beq $194127	                BEQ chk_magic
.194125		80 31		bra $194158	                BRA done                    ; No: just return
.194127		a2 00 00	ldx #$0000	chk_magic       LDX #0
.19412a		bf 03 a3 18	lda $18a303,x	magic_loop      LDA @l DOS_SECTOR+3,X       ; Check the "vendor" byte
.19412e		df 5d 41 19	cmp $19415d,x	                CMP DOS_BOOT_MAGIC,X        ; Compare it against our boot magic code
.194132		d0 24		bne $194158	                BNE done                    ; If it's not equal, just return
.194134		e8		inx		                INX                         ; Otherwise, check the next one
.194135		e0 08 00	cpx #$0008	                CPX #8
.194138		d0 f0		bne $19412a	                BNE magic_loop              ; Until we've checked all 8 bytes
.19413a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19413c		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE
.19413f		a2 00 a5	ldx #$a500	                LDX #<>(DOS_SECTOR+DOS_SECTOR_SIZE)
.194142		a0 00 ab	ldy #$ab00	                LDY #<>(DOS_BOOT_SECTOR+DOS_SECTOR_SIZE)
.194145		44 18 18	mvp $18,$18	                MVP #`DOS_SECTOR, #`DOS_BOOT_SECTOR
.194148		e2 20		sep #$20	                SEP #$20        ; set A short
.19414a		a5 01		lda $0321	                LDA @b BIOS_DEV             ; Check the device
.19414c		c9 00		cmp #$00	                CMP #BIOS_DEV_FDC           ; Is it the FDC?
.19414e		f0 04		beq $194154	                BEQ jmp_fdc_start           ; Yes: jump to the start of the VBR code
.194150		5c 00 a9 18	jmp $18a900	                JML DOS_BOOT_SECTOR         ; No: it's an MBR, start at the first byte
.194154		5c 3e a9 18	jmp $18a93e	jmp_fdc_start   JML DOS_BOOT_SECTOR+FDC_BOOT_START
.194158		28		plp		done            PLP
.194159		2b		pld		                PLD
.19415a		ab		plb		                PLB
.19415b		fa		plx		                PLX
.19415c		6b		rtl		                RTL
>19415d		43 32 35 36 44 4f 53 20		DOS_BOOT_MAGIC  .text "C256DOS "
.194165						DOS_CALC_LBA
.194165		8b		phb		                PHB
.194166		0b		phd		                PHD
.194167		08		php		                PHP
.194168		48		pha		                PHA             ; begin setdbr macro
.194169		08		php		                PHP
.19416a		e2 20		sep #$20	                SEP #$20        ; set A short
.19416c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.19416e		48		pha		                PHA
.19416f		ab		plb		                PLB
.194170		28		plp		                PLP
.194171		68		pla		                PLA             ; end setdbr macro
.194172		48		pha		                PHA             ; begin setdp macro
.194173		08		php		                PHP
.194174		c2 20		rep #$20	                REP #$20        ; set A long
.194176		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194179		5b		tcd		                TCD
.19417a		28		plp		                PLP
.19417b		68		pla		                PLA             ; end setdp macro
.19417c		c2 20		rep #$20	                REP #$20        ; set A long
.19417e		38		sec		                SEC
.19417f		a5 10		lda $0330	                LDA DOS_CLUS_ID                     ; cluster - 2
.194181		e9 02 00	sbc #$0002	                SBC #2
.194184		85 28		sta $0348	                STA DOS_TEMP
.194186		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194188		e9 00 00	sbc #$0000	                SBC #0
.19418b		85 2a		sta $034a	                STA DOS_TEMP+2
.19418d		e2 10		sep #$10	                SEP #$10        ; set X short
.19418f		ae 03 a0	ldx $18a003	                LDX SECTORS_PER_CLUSTER
.194192		e0 01		cpx #$01	mult_loop       CPX #1
.194194		f0 07		beq $19419d	                BEQ add_offset
.194196		06 28		asl $0348	                ASL DOS_TEMP
.194198		26 28		rol $0348	                ROL DOS_TEMP
.19419a		ca		dex		                DEX
.19419b		80 f5		bra $194192	                BRA mult_loop
.19419d		18		clc		add_offset      CLC
.19419e		a5 28		lda $0348	                LDA DOS_TEMP                        ; cluster_being_lba + (cluster - 2) * SECTORS_PER_CLUSTER
.1941a0		6d 1c a0	adc $18a01c	                ADC CLUSTER_BEGIN_LBA
.1941a3		85 02		sta $0322	                STA BIOS_LBA
.1941a5		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1941a7		6d 1e a0	adc $18a01e	                ADC CLUSTER_BEGIN_LBA+2
.1941aa		85 04		sta $0324	                STA BIOS_LBA+2
.1941ac		28		plp		                PLP
.1941ad		2b		pld		                PLD
.1941ae		ab		plb		                PLB
.1941af		6b		rtl		                RTL
.1941b0						DOS_GETCLUSTER
.1941b0		8b		phb		                PHB
.1941b1		0b		phd		                PHD
.1941b2		08		php		                PHP
.1941b3		48		pha		                PHA             ; begin setdbr macro
.1941b4		08		php		                PHP
.1941b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1941b7		a9 00		lda #$00	                LDA #0
.1941b9		48		pha		                PHA
.1941ba		ab		plb		                PLB
.1941bb		28		plp		                PLP
.1941bc		68		pla		                PLA             ; end setdbr macro
.1941bd		48		pha		                PHA             ; begin setdp macro
.1941be		08		php		                PHP
.1941bf		c2 20		rep #$20	                REP #$20        ; set A long
.1941c1		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1941c4		5b		tcd		                TCD
.1941c5		28		plp		                PLP
.1941c6		68		pla		                PLA             ; end setdp macro
.1941c7		c2 20		rep #$20	                REP #$20        ; set A long
.1941c9		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.1941cb		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1941cd		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.1941cf		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1941d1		22 65 41 19	jsl $194165	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.1941d5		22 44 10 00	jsl $001044	                JSL GETBLOCK                        ; Get the first block of the cluster
.1941d9		90 09		bcc $1941e4	                BCC ret_failure
.1941db						ret_success
.1941db		e2 20		sep #$20	                SEP #$20        ; set A short
.1941dd		64 0e		stz $032e	                STZ DOS_STATUS
.1941df		28		plp		                PLP
.1941e0		2b		pld		                PLD
.1941e1		ab		plb		                PLB
.1941e2		38		sec		                SEC
.1941e3		6b		rtl		                RTL
.1941e4						ret_failure
.1941e4		e2 20		sep #$20	                SEP #$20        ; set A short
.1941e6		85 0e		sta $032e	                STA DOS_STATUS
.1941e8		28		plp		                PLP
.1941e9		2b		pld		                PLD
.1941ea		ab		plb		                PLB
.1941eb		18		clc		                CLC
.1941ec		6b		rtl		                RTL
.1941ed						DOS_PUTCLUSTER
.1941ed		8b		phb		                PHB
.1941ee		0b		phd		                PHD
.1941ef		08		php		                PHP
.1941f0		48		pha		                PHA             ; begin setdbr macro
.1941f1		08		php		                PHP
.1941f2		e2 20		sep #$20	                SEP #$20        ; set A short
.1941f4		a9 00		lda #$00	                LDA #0
.1941f6		48		pha		                PHA
.1941f7		ab		plb		                PLB
.1941f8		28		plp		                PLP
.1941f9		68		pla		                PLA             ; end setdbr macro
.1941fa		48		pha		                PHA             ; begin setdp macro
.1941fb		08		php		                PHP
.1941fc		c2 20		rep #$20	                REP #$20        ; set A long
.1941fe		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194201		5b		tcd		                TCD
.194202		28		plp		                PLP
.194203		68		pla		                PLA             ; end setdp macro
.194204		c2 20		rep #$20	                REP #$20        ; set A long
.194206		a5 1c		lda $033c	                LDA DOS_BUFF_PTR                    ; Set the BIOS BUFFER
.194208		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19420a		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.19420c		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19420e		22 65 41 19	jsl $194165	                JSL DOS_CALC_LBA                    ; Convert the cluster # to the first sector's LBA
.194212		22 24 10 00	jsl $001024	                JSL PUTBLOCK                        ; PUT the first block of the cluster
.194216		90 09		bcc $194221	                BCC ret_failure
.194218						ret_success
.194218		e2 20		sep #$20	                SEP #$20        ; set A short
.19421a		64 0e		stz $032e	                STZ DOS_STATUS
.19421c		28		plp		                PLP
.19421d		2b		pld		                PLD
.19421e		ab		plb		                PLB
.19421f		38		sec		                SEC
.194220		6b		rtl		                RTL
.194221						ret_failure
.194221		e2 20		sep #$20	                SEP #$20        ; set A short
.194223		85 0e		sta $032e	                STA DOS_STATUS
.194225		28		plp		                PLP
.194226		2b		pld		                PLD
.194227		ab		plb		                PLB
.194228		18		clc		                CLC
.194229		6b		rtl		                RTL
>19422a		40 46 00			DOS_FDC_NAME    .null "@F"
.19422d						DOS_FDC_DESC
>19422d		2a 42 19 00			DEVNAME         .dword DOS_FDC_NAME            ; A pointer to the ASCIIZ name of the device
>194231		00				DEVNUMBER       .byte BIOS_DEV_FDC           ; The BIOS_DEV number for the device
>194232		00 00 00 00			NEXT            .dword 0            ; A pointer to the next device descriptor
>194236		40 53 00			DOS_SDC_NAME    .null "@S"
.194239						DOS_SDC_DESC
>194239		36 42 19 00			DEVNAME         .dword DOS_SDC_NAME            ; A pointer to the ASCIIZ name of the device
>19423d		02				DEVNUMBER       .byte BIOS_DEV_SD           ; The BIOS_DEV number for the device
>19423e		2d 42 19 00			NEXT            .dword DOS_FDC_DESC            ; A pointer to the next device descriptor
>194242		40 48 00			DOS_HDC_NAME    .null "@H"
.194245						DOS_HD_DESC
>194245		42 42 19 00			DEVNAME         .dword DOS_HDC_NAME            ; A pointer to the ASCIIZ name of the device
>194249		06				DEVNUMBER       .byte BIOS_DEV_HD0           ; The BIOS_DEV number for the device
>19424a		39 42 19 00			NEXT            .dword DOS_SDC_DESC            ; A pointer to the next device descriptor
.19424e						DOS_PARSE_DEV
.19424e		8b		phb		                PHB
.19424f		0b		phd		                PHD
.194250		08		php		                PHP
.194251		48		pha		                PHA             ; begin setdbr macro
.194252		08		php		                PHP
.194253		e2 20		sep #$20	                SEP #$20        ; set A short
.194255		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194257		48		pha		                PHA
.194258		ab		plb		                PLB
.194259		28		plp		                PLP
.19425a		68		pla		                PLA             ; end setdbr macro
.19425b		48		pha		                PHA             ; begin setdp macro
.19425c		08		php		                PHP
.19425d		c2 20		rep #$20	                REP #$20        ; set A long
.19425f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194262		5b		tcd		                TCD
.194263		28		plp		                PLP
.194264		68		pla		                PLA             ; end setdp macro
.194265		c2 30		rep #$30	                REP #$30        ; set A&X long
.194267		af 4a a0 18	lda $18a04a	                LDA @l DOS_DEV_NAMES        ; Point to the first device name to check
.19426b		85 28		sta $0348	                STA DOS_TEMP
.19426d		af 4c a0 18	lda $18a04c	                LDA @l DOS_DEV_NAMES+2
.194271		85 2a		sta $034a	                STA DOS_TEMP+2
.194273		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF        ; Make DOS_STR2_PTR point to the path to check
.194276		85 48		sta $0368	                STA DOS_STR2_PTR
.194278		a9 00 00	lda #$0000	                LDA #`DOS_PATH_BUFF
.19427b		85 4a		sta $036a	                STA DOS_STR2_PTR+2
.19427d		a0 00 00	ldy #$0000	dev_loop        LDY #DEVICE_DESC.DEVNAME    ; Get the name of the current device into DOS_STR1_PTR
.194280		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194282		85 44		sta $0364	                STA DOS_STR1_PTR
.194284		c8		iny		                INY
.194285		c8		iny		                INY
.194286		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.194288		85 46		sta $0366	                STA DOS_STR1_PTR+2
.19428a		e2 20		sep #$20	                SEP #$20        ; set A short
.19428c		a0 00 00	ldy #$0000	                LDY #0
.19428f		b7 44		lda [$0364],y	cmp_loop        LDA [DOS_STR1_PTR],Y        ; Get the Yth character of the device name
.194291		f0 24		beq $1942b7	                BEQ found                   ; If it's NULL, we found a match
.194293		d7 48		cmp [$0368],y	                CMP [DOS_STR2_PTR],Y        ; Compare it to the Yth character of the path
.194295		d0 03		bne $19429a	                BNE next_device             ; If no match, try to load the next device
.194297		c8		iny		                INY                         ; Go to the next character
.194298		80 f5		bra $19428f	                BRA cmp_loop
.19429a						next_device
.19429a		c2 20		rep #$20	                REP #$20        ; set A long
.19429c		a0 05 00	ldy #$0005	                LDY #DEVICE_DESC.NEXT       ; DOS_TEMP := DOS_TEMP->NEXT
.19429f		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1942a1		48		pha		                PHA
.1942a2		c8		iny		                INY
.1942a3		c8		iny		                INY
.1942a4		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1942a6		85 2a		sta $034a	                STA DOS_TEMP+2
.1942a8		68		pla		                PLA
.1942a9		85 28		sta $0348	                STA DOS_TEMP
.1942ab		a5 28		lda $0348	                LDA DOS_TEMP                ; Is DOS_TEMP = NULL?
.1942ad		d0 ce		bne $19427d	                BNE dev_loop                ; No: check this device
.1942af		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1942b1		d0 ca		bne $19427d	                BNE dev_loop
.1942b3		28		plp		done            PLP                         ; Otherwise, return having not found a match
.1942b4		2b		pld		                PLD
.1942b5		ab		plb		                PLB
.1942b6		6b		rtl		                RTL
.1942b7		22 c8 42 19	jsl $1942c8	found           JSL DOS_ADJUSTPATH          ; Remove the device name from the buffer
.1942bb		e2 20		sep #$20	                SEP #$20        ; set A short
.1942bd		a0 04 00	ldy #$0004	                LDY #DEVICE_DESC.DEVNUMBER  ; Set the BIOS device number from the found device
.1942c0		b7 28		lda [$0348],y	                LDA [DOS_TEMP],Y
.1942c2		8f 21 03 00	sta $000321	                STA @l BIOS_DEV
.1942c6		80 eb		bra $1942b3	                BRA done
.1942c8						DOS_ADJUSTPATH
.1942c8		da		phx		                PHX
.1942c9		5a		phy		                PHY
.1942ca		8b		phb		                PHB
.1942cb		0b		phd		                PHD
.1942cc		08		php		                PHP
.1942cd		48		pha		                PHA             ; begin setdbr macro
.1942ce		08		php		                PHP
.1942cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1942d1		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1942d3		48		pha		                PHA
.1942d4		ab		plb		                PLB
.1942d5		28		plp		                PLP
.1942d6		68		pla		                PLA             ; end setdbr macro
.1942d7		48		pha		                PHA             ; begin setdp macro
.1942d8		08		php		                PHP
.1942d9		c2 20		rep #$20	                REP #$20        ; set A long
.1942db		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1942de		5b		tcd		                TCD
.1942df		28		plp		                PLP
.1942e0		68		pla		                PLA             ; end setdp macro
.1942e1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1942e3		84 4b		sty $036b	                STY DOS_SCRATCH                 ; Save the index to later compute the size
.1942e5		98		tya		                TYA                             ; Compute the address of the first source byte
.1942e6		18		clc		                CLC
.1942e7		69 00 04	adc #$0400	                ADC #<>DOS_PATH_BUFF
.1942ea		aa		tax		                TAX
.1942eb		a9 00 04	lda #$0400	                LDA #<>DOS_PATH_BUFF            ; Compute the destination address for the source byte
.1942ee		a8		tay		                TAY
.1942ef		38		sec		                SEC                             ; Compute the number of bytes to copy
.1942f0		a9 00 01	lda #$0100	                LDA #256
.1942f3		e5 4b		sbc $036b	                SBC DOS_SCRATCH
.1942f5		54 00 00	mvn $00,$00	                MVN #`DOS_PATH_BUFF, #`DOS_PATH_BUFF
.1942f8		28		plp		                PLP
.1942f9		2b		pld		                PLD
.1942fa		ab		plb		                PLB
.1942fb		7a		ply		                PLY
.1942fc		fa		plx		                PLX
.1942fd		6b		rtl		                RTL
.1942fe						DOS_PARSE_PATH
.1942fe		8b		phb		                PHB
.1942ff		0b		phd		                PHD
.194300		08		php		                PHP
.194301		48		pha		                PHA             ; begin setdbr macro
.194302		08		php		                PHP
.194303		e2 20		sep #$20	                SEP #$20        ; set A short
.194305		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194307		48		pha		                PHA
.194308		ab		plb		                PLB
.194309		28		plp		                PLP
.19430a		68		pla		                PLA             ; end setdbr macro
.19430b		48		pha		                PHA             ; begin setdp macro
.19430c		08		php		                PHP
.19430d		c2 20		rep #$20	                REP #$20        ; set A long
.19430f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194312		5b		tcd		                TCD
.194313		28		plp		                PLP
.194314		68		pla		                PLA             ; end setdp macro
.194315		c2 10		rep #$10	                REP #$10        ; set X long
.194317		e2 20		sep #$20	                SEP #$20        ; set A short
.194319		a2 00 00	ldx #$0000	                LDX #0
.19431c		b5 e0		lda $0400,x	upcase_loop     LDA DOS_PATH_BUFF,X     ; Get the character
.19431e		f0 1b		beq $19433b	                BEQ parse_dev           ; If it's NULL, the path is upper case, attempt to parse the device
.194320		c9 20		cmp #$20	                CMP #' '                ; Is a control character?
.194322		b0 05		bcs $194329	                BGE check_case          ; No: check the case
.194324		a9 07		lda #$07	                LDA #DOS_ERR_BADPATH    ; Yes: return a bad path error
.194326		82 64 00	brl $19438d	                BRL ret_failure
.194329		c9 61		cmp #$61	check_case      CMP #'a'                ; Is the character lower case?
.19432b		90 08		bcc $194335	                BLT next_char
.19432d		c9 7b		cmp #$7b	                CMP #'z'+1
.19432f		b0 04		bcs $194335	                BGE next_char
.194331		29 5f		and #$5f	                AND #%01011111          ; Yes: Convert to uppercase
.194333		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194335		e8		inx		next_char       INX                     ; Move to the next character
.194336		e0 00 01	cpx #$0100	                CPX #$100
.194339		d0 e1		bne $19431c	                BNE upcase_loop
.19433b		22 4e 42 19	jsl $19424e	parse_dev       JSL DOS_PARSE_DEV       ; Parse and extract a device specifier ":xxx:"
.19433f		a5 e0		lda $0400	                LDA DOS_PATH_BUFF       ; Check the first character of the path
.194341		c9 3a		cmp #$3a	                CMP #':'
.194343		d0 07		bne $19434c	                BNE clr_name            ; If not colon, treat it as a file name
.194345		a0 01 00	ldy #$0001	                LDY #1                  ; Otherwise...
.194348		22 c8 42 19	jsl $1942c8	                JSL DOS_ADJUSTPATH      ; For now, just remove the leading ":"
.19434c		a0 00 00	ldy #$0000	clr_name        LDY #0                  ; Set the short name to blanks
.19434f		a9 20		lda #$20	                LDA #' '
.194351		99 3a a0	sta $18a03a,y	clr_loop        STA DOS_SHORT_NAME,Y
.194354		c8		iny		                INY
.194355		c0 0b 00	cpy #$000b	                CPY #11
.194358		d0 f7		bne $194351	                BNE clr_loop
.19435a		a2 00 00	ldx #$0000	                LDX #0
.19435d		a0 00 00	ldy #$0000	                LDY #0
.194360		b5 e0		lda $0400,x	cpy_name_loop   LDA DOS_PATH_BUFF,X     ; Get the character of the name
.194362		f0 20		beq $194384	                BEQ ret_success         ; If NULL: we've finished parsing the path
.194364		c9 2e		cmp #$2e	                CMP #'.'                ; If it's a dot, we've finished the name part
.194366		f0 0a		beq $194372	                BEQ cpy_ext             ; And move to the extension
.194368		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, store it to the name portion
.19436b		e8		inx		                INX
.19436c		c8		iny		                INY                     ; Move to the next character
.19436d		c0 08 00	cpy #$0008	                CPY #8                  ; Have we processed 8?
.194370		d0 ee		bne $194360	                BNE cpy_name_loop       ; No: process this one
.194372		e8		inx		cpy_ext         INX                     ; Skip the dot
.194373		a0 08 00	ldy #$0008	                LDY #8
.194376		b5 e0		lda $0400,x	cpy_ext_loop    LDA DOS_PATH_BUFF,X     ; Get the character of the extension
.194378		f0 0a		beq $194384	                BEQ ret_success         ; If it's NULL, we've finished
.19437a		99 3a a0	sta $18a03a,y	                STA DOS_SHORT_NAME,Y    ; Otherwise, copy it to the short name
.19437d		e8		inx		                INX
.19437e		c8		iny		                INY                     ; Move to the next character
.19437f		c0 0b 00	cpy #$000b	                CPY #11                 ; Have we processed the three ext characters?
.194382		d0 f2		bne $194376	                BNE cpy_ext_loop        ; No: process this one
.194384						ret_success
.194384		e2 20		sep #$20	                SEP #$20        ; set A short
.194386		64 0e		stz $032e	                STZ DOS_STATUS
.194388		28		plp		                PLP
.194389		2b		pld		                PLD
.19438a		ab		plb		                PLB
.19438b		38		sec		                SEC
.19438c		6b		rtl		                RTL
.19438d						ret_failure
.19438d		e2 20		sep #$20	                SEP #$20        ; set A short
.19438f		85 0e		sta $032e	                STA DOS_STATUS
.194391		28		plp		                PLP
.194392		2b		pld		                PLD
.194393		ab		plb		                PLB
.194394		18		clc		                CLC
.194395		6b		rtl		                RTL
.194396						DOS_FINDFILE
.194396		8b		phb		                PHB
.194397		0b		phd		                PHD
.194398		08		php		                PHP
.194399		48		pha		                PHA             ; begin setdbr macro
.19439a		08		php		                PHP
.19439b		e2 20		sep #$20	                SEP #$20        ; set A short
.19439d		a9 00		lda #$00	                LDA #0
.19439f		48		pha		                PHA
.1943a0		ab		plb		                PLB
.1943a1		28		plp		                PLP
.1943a2		68		pla		                PLA             ; end setdbr macro
.1943a3		48		pha		                PHA             ; begin setdp macro
.1943a4		08		php		                PHP
.1943a5		c2 20		rep #$20	                REP #$20        ; set A long
.1943a7		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1943aa		5b		tcd		                TCD
.1943ab		28		plp		                PLP
.1943ac		68		pla		                PLA             ; end setdp macro
.1943ad		c2 30		rep #$30	                REP #$30        ; set A&X long
.1943af		22 fe 42 19	jsl $1942fe	                JSL DOS_PARSE_PATH              ; Break out the path into its components
.1943b3		b0 05		bcs $1943ba	                BCS mount                       ; If success: try to open the directory
.1943b5		28		plp		pass_failure    PLP                             ; If failure, just pass the failure back up
.1943b6		2b		pld		                PLD
.1943b7		ab		plb		                PLB
.1943b8		18		clc		                CLC
.1943b9		6b		rtl		                RTL
.1943ba		22 18 3f 19	jsl $193f18	mount           JSL DOS_MOUNT                   ; Try to mount the drive
.1943be		b0 07		bcs $1943c7	                BCS get_directory
.1943c0		e2 20		sep #$20	                SEP #$20        ; set A short
.1943c2		a9 17		lda #$17	                LDA #DOS_ERR_NOMEDIA            ; If failure: Report that we couldn't access the media
.1943c4		82 56 00	brl $19441d	                BRL ret_failure
.1943c7						get_directory
.1943c7		c2 20		rep #$20	                REP #$20        ; set A long
.1943c9		22 cd 3b 19	jsl $193bcd	                JSL DOS_DIROPEN                 ; Get the directory
.1943cd		b0 07		bcs $1943d6	                BCS scan_entries                ; If success: start scanning the directory entries
.1943cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1943d1		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Otherwise: return a no directory error
.1943d3		82 47 00	brl $19441d	                BRL ret_failure
.1943d6		22 4c 3c 19	jsl $193c4c	scan_entries    JSL DOS_DIRFIRST                ; Move the DIR pointer to the beginning of the sector
.1943da						scan_loop
.1943da		e2 20		sep #$20	                SEP #$20        ; set A short
.1943dc		a0 00 00	ldy #$0000	                LDY #0
.1943df		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y             ; Check the directory entry
.1943e1		d0 05		bne $1943e8	                BNE chk_unused                  ; If there's an entry, check to see if it's unused
.1943e3		a9 09		lda #$09	                LDA #DOS_ERR_NOTFOUND           ; If end-of-directory, we couldn't find a match
.1943e5		82 35 00	brl $19441d	                BRL ret_failure
.1943e8		c9 e5		cmp #$e5	chk_unused      CMP #DOS_DIR_ENT_UNUSED         ; If it's unused...
.1943ea		f0 26		beq $194412	                BEQ next_entry                  ; Go to the next entry
.1943ec		a0 0b 00	ldy #$000b	                LDY #DIRENTRY.ATTRIBUTE         ; Check the entry's attributes
.1943ef		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.1943f1		89 08		bit #$08	                BIT #DOS_ATTR_VOLUME            ; Is it a volume name?
.1943f3		d0 1d		bne $194412	                BNE next_entry                  ; Yes: skip it!
.1943f5		29 0f		and #$0f	                AND #DOS_ATTR_LONGNAME
.1943f7		c9 0f		cmp #$0f	                CMP #DOS_ATTR_LONGNAME          ; Is it a long name field?
.1943f9		f0 17		beq $194412	                BEQ next_entry                  ; Yes: skip it!
.1943fb		a2 00 00	ldx #$0000	                LDX #0
.1943fe		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME
.194401		b7 18		lda [$0338],y	scan_cmp_loop   LDA [DOS_DIR_PTR],Y             ; Get the X'th character of the entry
.194403		df 3a a0 18	cmp $18a03a,x	                CMP DOS_SHORT_NAME,X            ; And compare to the X'th character of the name we want
.194407		d0 09		bne $194412	                BNE next_entry                  ; If not equal: try the next entry
.194409		c8		iny		                INY                             ; Advance to the next character
.19440a		e8		inx		                INX
.19440b		e0 0b 00	cpx #$000b	                CPX #11                         ; Did we reach the end of the names?
.19440e		f0 16		beq $194426	                BEQ match                       ; Yes: we have a match!
.194410		80 ef		bra $194401	                BRA scan_cmp_loop               ; No: keep checking
.194412		22 67 3c 19	jsl $193c67	next_entry      JSL DOS_DIRNEXT                 ; Try to get the next directory entry
.194416		90 05		bcc $19441d	                BCC ret_failure                 ; If we're at the end of the directory, return a failure.
.194418		82 bf ff	brl $1943da	                BRL scan_loop                   ; If found: keep scanning
.19441b		a9 08		lda #$08	bad_dir         LDA #DOS_ERR_NODIR              ; Otherwise: fail with a NODIR error (maybe something else is better)
.19441d						ret_failure
.19441d		e2 20		sep #$20	                SEP #$20        ; set A short
.19441f		85 0e		sta $032e	                STA DOS_STATUS
.194421		28		plp		                PLP
.194422		2b		pld		                PLD
.194423		ab		plb		                PLB
.194424		18		clc		                CLC
.194425		6b		rtl		                RTL
.194426						match
.194426		c2 20		rep #$20	                REP #$20        ; set A long
.194428		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L         ; Copy the cluster number from the directory entry
.19442b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19442d		85 10		sta $0330	                STA DOS_CLUS_ID                 ; To DOS_CLUS_ID
.19442f		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194432		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194434		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194436						ret_success
.194436		e2 20		sep #$20	                SEP #$20        ; set A short
.194438		64 0e		stz $032e	                STZ DOS_STATUS
.19443a		28		plp		                PLP
.19443b		2b		pld		                PLD
.19443c		ab		plb		                PLB
.19443d		38		sec		                SEC
.19443e		6b		rtl		                RTL
.19443f						DOS_READFILE
.19443f		8b		phb		                PHB
.194440		0b		phd		                PHD
.194441		08		php		                PHP
.194442		48		pha		                PHA             ; begin setdbr macro
.194443		08		php		                PHP
.194444		e2 20		sep #$20	                SEP #$20        ; set A short
.194446		a9 00		lda #$00	                LDA #0
.194448		48		pha		                PHA
.194449		ab		plb		                PLB
.19444a		28		plp		                PLP
.19444b		68		pla		                PLA             ; end setdbr macro
.19444c		48		pha		                PHA             ; begin setdp macro
.19444d		08		php		                PHP
.19444e		c2 20		rep #$20	                REP #$20        ; set A long
.194450		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194453		5b		tcd		                TCD
.194454		28		plp		                PLP
.194455		68		pla		                PLA             ; end setdp macro
.194456		c2 30		rep #$30	                REP #$30        ; set A&X long
.194458		a5 1e		lda $033e	                LDA DOS_BUFF_PTR+2
.19445a		48		pha		                PHA
.19445b		a5 1c		lda $033c	                LDA DOS_BUFF_PTR
.19445d		48		pha		                PHA
.19445e		22 96 43 19	jsl $194396	                JSL DOS_FINDFILE                    ; Attempt to find the file's directory entry
.194462		68		pla		                PLA
.194463		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194465		68		pla		                PLA
.194466		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194468		90 0f		bcc $194479	                BCC pass_failure                    ; If found: try to load the cluster
.19446a		22 b0 41 19	jsl $1941b0	load_cluster    JSL DOS_GETCLUSTER                  ; Get the first block of the cluster
.19446e		90 09		bcc $194479	                BCC pass_failure                    ; If there's an error... pass it up the chain
.194470						ret_success
.194470		e2 20		sep #$20	                SEP #$20        ; set A short
.194472		64 0e		stz $032e	                STZ DOS_STATUS
.194474		28		plp		                PLP
.194475		2b		pld		                PLD
.194476		ab		plb		                PLB
.194477		38		sec		                SEC
.194478		6b		rtl		                RTL
.194479		28		plp		pass_failure    PLP                                 ; Otherwise: pass any error up the chain
.19447a		2b		pld		                PLD
.19447b		ab		plb		                PLB
.19447c		18		clc		                CLC
.19447d		6b		rtl		                RTL
.19447e						ENTRYFORCLUS12
.19447e		8b		phb		                PHB
.19447f		0b		phd		                PHD
.194480		08		php		                PHP
.194481		48		pha		                PHA             ; begin setdbr macro
.194482		08		php		                PHP
.194483		e2 20		sep #$20	                SEP #$20        ; set A short
.194485		a9 00		lda #$00	                LDA #0
.194487		48		pha		                PHA
.194488		ab		plb		                PLB
.194489		28		plp		                PLP
.19448a		68		pla		                PLA             ; end setdbr macro
.19448b		48		pha		                PHA             ; begin setdp macro
.19448c		08		php		                PHP
.19448d		c2 20		rep #$20	                REP #$20        ; set A long
.19448f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194492		5b		tcd		                TCD
.194493		28		plp		                PLP
.194494		68		pla		                PLA             ; end setdp macro
.194495		c2 30		rep #$30	                REP #$30        ; set A&X long
.194497		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; DOS_TEMP := DOS_CLUS_ID * 3
.194499		0a		asl a		                ASL A
.19449a		85 28		sta $0348	                STA DOS_TEMP
.19449c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.19449e		2a		rol a		                ROL A
.19449f		85 2a		sta $034a	                STA DOS_TEMP+2
.1944a1		18		clc		                CLC
.1944a2		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1944a4		65 28		adc $0348	                ADC DOS_TEMP
.1944a6		85 28		sta $0348	                STA DOS_TEMP
.1944a8		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.1944aa		65 2a		adc $034a	                ADC DOS_TEMP+2
.1944ac		85 2a		sta $034a	                STA DOS_TEMP+2
.1944ae		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := (DOS_CLUS_ID * 3) / 2
.1944b0		66 28		ror $0348	                ROR DOS_TEMP                    ; DOS_TEMP is now the offset to the cluster's entry in the FAT
.1944b2		a5 28		lda $0348	                LDA DOS_TEMP                    ; X should be the offset within the FAT buffer
.1944b4		29 ff 03	and #$03ff	                AND #$003FF
.1944b7		aa		tax		                TAX
.1944b8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944ba		66 28		ror $0348	                ROR DOS_TEMP
.1944bc		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944be		66 28		ror $0348	                ROR DOS_TEMP
.1944c0		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944c2		66 28		ror $0348	                ROR DOS_TEMP
.1944c4		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944c6		66 28		ror $0348	                ROR DOS_TEMP
.1944c8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944ca		66 28		ror $0348	                ROR DOS_TEMP
.1944cc		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944ce		66 28		ror $0348	                ROR DOS_TEMP
.1944d0		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944d2		66 28		ror $0348	                ROR DOS_TEMP
.1944d4		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944d6		66 28		ror $0348	                ROR DOS_TEMP
.1944d8		46 2a		lsr $034a	                LSR DOS_TEMP+2                  ; DOS_TEMP := DOS_TEMP / 512
.1944da		66 28		ror $0348	                ROR DOS_TEMP
.1944dc		18		clc		                CLC                             ; DOS_FAT_LBA should be the LBA of the first FAT sector we need
.1944dd		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA
.1944e1		65 28		adc $0348	                ADC DOS_TEMP
.1944e3		85 24		sta $0344	                STA DOS_FAT_LBA
.1944e5		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.1944e9		65 2a		adc $034a	                ADC DOS_TEMP+2
.1944eb		85 26		sta $0346	                STA DOS_FAT_LBA+2
.1944ed		28		plp		                PLP
.1944ee		2b		pld		                PLD
.1944ef		ab		plb		                PLB
.1944f0		6b		rtl		                RTL
.1944f1						FATFORCLUSTER12
.1944f1		8b		phb		                PHB
.1944f2		0b		phd		                PHD
.1944f3		08		php		                PHP
.1944f4		48		pha		                PHA             ; begin setdbr macro
.1944f5		08		php		                PHP
.1944f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1944f8		a9 00		lda #$00	                LDA #0
.1944fa		48		pha		                PHA
.1944fb		ab		plb		                PLB
.1944fc		28		plp		                PLP
.1944fd		68		pla		                PLA             ; end setdbr macro
.1944fe		48		pha		                PHA             ; begin setdp macro
.1944ff		08		php		                PHP
.194500		c2 20		rep #$20	                REP #$20        ; set A long
.194502		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194505		5b		tcd		                TCD
.194506		28		plp		                PLP
.194507		68		pla		                PLA             ; end setdp macro
.194508		c2 30		rep #$30	                REP #$30        ; set A&X long
.19450a		a2 00 00	ldx #$0000	                LDX #0
.19450d		a9 5a 5a	lda #$5a5a	                LDA #$5A5A
.194510		8f 00 a5 18	sta $18a500	clr_loop        STA DOS_FAT_SECTORS
.194514		e8		inx		                INX
.194515		e8		inx		                INX
.194516		e0 00 04	cpx #$0400	                CPX #1024
.194519		d0 f5		bne $194510	                BNE clr_loop
.19451b		22 7e 44 19	jsl $19447e	                JSL ENTRYFORCLUS12              ; Calculate the LBA
.19451f		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Point to the desired sector in the FAT
.194521		85 02		sta $0322	                STA BIOS_LBA
.194523		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194525		85 04		sta $0324	                STA BIOS_LBA+2
.194527		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first 512 bytes of the FAT buffer
.19452a		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19452c		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19452f		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194531		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194535		90 17		bcc $19454e	                BCC error
.194537		e6 02		inc $0322	                INC BIOS_LBA                    ; Move to the next sector
.194539		a9 00 a7	lda #$a700	                LDA #<>DOS_FAT_SECTORS+512      ; And point to the second 512 bytes of teh FAT buffer
.19453c		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19453e		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194541		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194543		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Attempt to load the first FAT sector
.194547		90 05		bcc $19454e	                BCC error
.194549		28		plp		                PLP
.19454a		2b		pld		                PLD
.19454b		ab		plb		                PLB
.19454c		38		sec		                SEC
.19454d		6b		rtl		                RTL
.19454e						error
.19454e		e2 20		sep #$20	                SEP #$20        ; set A short
.194550		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194552		85 0e		sta $032e	                STA DOS_STATUS
.194554		28		plp		                PLP
.194555		2b		pld		                PLD
.194556		ab		plb		                PLB
.194557		18		clc		                CLC
.194558		6b		rtl		                RTL
.194559						FATFORCLUSTER32
.194559		8b		phb		                PHB
.19455a		0b		phd		                PHD
.19455b		48		pha		                PHA             ; begin setdbr macro
.19455c		08		php		                PHP
.19455d		e2 20		sep #$20	                SEP #$20        ; set A short
.19455f		a9 00		lda #$00	                LDA #0
.194561		48		pha		                PHA
.194562		ab		plb		                PLB
.194563		28		plp		                PLP
.194564		68		pla		                PLA             ; end setdbr macro
.194565		48		pha		                PHA             ; begin setdp macro
.194566		08		php		                PHP
.194567		c2 20		rep #$20	                REP #$20        ; set A long
.194569		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19456c		5b		tcd		                TCD
.19456d		28		plp		                PLP
.19456e		68		pla		                PLA             ; end setdp macro
.19456f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194571		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194573		85 24		sta $0344	                STA DOS_FAT_LBA
.194575		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194577		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194579		a2 07 00	ldx #$0007	                LDX #7
.19457c		46 26		lsr $0346	div_loop        LSR DOS_FAT_LBA+2
.19457e		66 24		ror $0344	                ROR DOS_FAT_LBA
.194580		ca		dex		                DEX
.194581		d0 f9		bne $19457c	                BNE div_loop
.194583		18		clc		                CLC
.194584		a5 24		lda $0344	                LDA DOS_FAT_LBA
.194586		6f 14 a0 18	adc $18a014	                ADC FAT_BEGIN_LBA
.19458a		85 24		sta $0344	                STA DOS_FAT_LBA
.19458c		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19458e		6f 16 a0 18	adc $18a016	                ADC FAT_BEGIN_LBA+2
.194592		85 26		sta $0346	                STA DOS_FAT_LBA+2
.194594		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; We want to load the FAT sector
.194596		85 02		sta $0322	                STA BIOS_LBA
.194598		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19459a		85 04		sta $0324	                STA BIOS_LBA+2
.19459c		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; We want to load the FAT sector in DOS_FAT_SECTORS
.19459f		85 06		sta $0326	                STA BIOS_BUFF_PTR
.1945a1		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.1945a4		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.1945a6		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the FAT entry
.1945aa		b0 06		bcs $1945b2	                BCS find_entry
.1945ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1945ae		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1945b0		80 0e		bra $1945c0	                BRA ret_failure
.1945b2						find_entry
.1945b2		c2 20		rep #$20	                REP #$20        ; set A long
.1945b4		a5 10		lda $0330	                LDA DOS_CLUS_ID
.1945b6		0a		asl a		                ASL A
.1945b7		0a		asl a		                ASL A                           ; * 4
.1945b8		29 ff 01	and #$01ff	                AND #$1FF                       ; DOS_CLUS_ID MOD 512
.1945bb		aa		tax		                TAX                             ; X should be the offset within the sector
.1945bc		2b		pld		ret_success     PLD
.1945bd		ab		plb		                PLB
.1945be		38		sec		                SEC                             ; return success
.1945bf		6b		rtl		                RTL
.1945c0		2b		pld		ret_failure     PLD
.1945c1		ab		plb		                PLB
.1945c2		18		clc		                CLC                             ; Return failure
.1945c3		6b		rtl		                RTL
.1945c4						NEXTCLUSTER
.1945c4		08		php		                PHP
.1945c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1945c7		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1945cb		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1945cd		d0 08		bne $1945d7	                BNE fat32                       ; No: assume it's FAT32
.1945cf		22 e5 45 19	jsl $1945e5	fat12           JSL NEXTCLUSTER12               ; Lookup the next cluster from FAT12
.1945d3		90 0d		bcc $1945e2	                BCC pass_failure                ; If there was an error, pass it up the chain
.1945d5		80 06		bra $1945dd	                BRA ret_success
.1945d7		22 4d 46 19	jsl $19464d	fat32           JSL NEXTCLUSTER32               ; Lookup the next cluster from FAT32
.1945db		90 05		bcc $1945e2	                BCC pass_failure                ; If there was an error, pass it up the chain
.1945dd		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.1945df		28		plp		                PLP
.1945e0		38		sec		                SEC
.1945e1		6b		rtl		                RTL
.1945e2		28		plp		pass_failure    PLP
.1945e3		18		clc		                CLC
.1945e4		6b		rtl		                RTL
.1945e5						NEXTCLUSTER12
.1945e5		8b		phb		                    PHB
.1945e6		0b		phd		                    PHD
.1945e7		08		php		                    PHP
.1945e8		48		pha		                PHA             ; begin setdbr macro
.1945e9		08		php		                PHP
.1945ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1945ec		a9 00		lda #$00	                LDA #0
.1945ee		48		pha		                PHA
.1945ef		ab		plb		                PLB
.1945f0		28		plp		                PLP
.1945f1		68		pla		                PLA             ; end setdbr macro
.1945f2		48		pha		                PHA             ; begin setdp macro
.1945f3		08		php		                PHP
.1945f4		c2 20		rep #$20	                REP #$20        ; set A long
.1945f6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1945f9		5b		tcd		                TCD
.1945fa		28		plp		                PLP
.1945fb		68		pla		                PLA             ; end setdp macro
.1945fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1945fe		22 f1 44 19	jsl $1944f1	                    JSL FATFORCLUSTER12             ; Attempt to load the FAT entries
.194602		b0 03		bcs $194607	                    BCS chk_clus_id
.194604		82 41 00	brl $194648	                    BRL pass_failure
.194607		a5 10		lda $0330	chk_clus_id         LDA DOS_CLUS_ID                 ; Check the cluster ID...
.194609		89 01 00	bit #$0001	                    BIT #1                          ; Is it odd?
.19460c		d0 0d		bne $19461b	                    BNE is_odd                      ; Yes: calculate the next cluster for odd
.19460e						is_even
.19460e		c2 20		rep #$20	                REP #$20        ; set A long
.194610		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] & $0FFF
.194614		29 ff 0f	and #$0fff	                    AND #$0FFF
.194617		85 28		sta $0348	                    STA DOS_TEMP
.194619		80 0c		bra $194627	                    BRA check_id
.19461b						is_odd
.19461b		c2 20		rep #$20	                REP #$20        ; set A long
.19461d		bf 00 a5 18	lda $18a500,x	                    LDA DOS_FAT_SECTORS,X           ; DOS_CLUS_ID := DOS_FAT_SECTORS[X] >> 4
.194621		4a		lsr a		                    LSR A
.194622		4a		lsr a		                    LSR A
.194623		4a		lsr a		                    LSR A
.194624		4a		lsr a		                    LSR A
.194625		85 28		sta $0348	                    STA DOS_TEMP
.194627						check_id
.194627		c2 20		rep #$20	                REP #$20        ; set A long
.194629		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Check the new cluster ID we got
.19462b		29 f0 0f	and #$0ff0	                    AND #$0FF0                      ; Is it in the range $0FF0 -- $0FFF?
.19462e		c9 f0 0f	cmp #$0ff0	                    CMP #$0FF0
.194631		f0 0f		beq $194642	                    BEQ no_more                     ; Yes: return that we've reached the end of the chain
.194633		a5 28		lda $0348	                    LDA DOS_TEMP                    ; Restore the "current" cluster ID
.194635		85 10		sta $0330	                    STA DOS_CLUS_ID
.194637		64 12		stz $0332	                    STZ DOS_CLUS_ID+2
.194639						ret_success
.194639		e2 20		sep #$20	                SEP #$20        ; set A short
.19463b		64 0e		stz $032e	                    STZ DOS_STATUS
.19463d		28		plp		                    PLP
.19463e		2b		pld		                    PLD
.19463f		ab		plb		                    PLB
.194640		38		sec		                    SEC
.194641		6b		rtl		                    RTL
.194642						no_more
.194642		e2 20		sep #$20	                SEP #$20        ; set A short
.194644		a9 0a		lda #$0a	                    LDA #DOS_ERR_NOCLUSTER
.194646		85 0e		sta $032e	                    STA DOS_STATUS
.194648		28		plp		pass_failure        PLP
.194649		2b		pld		                    PLD
.19464a		ab		plb		                    PLB
.19464b		18		clc		                    CLC
.19464c		6b		rtl		                    RTL
.19464d						NEXTCLUSTER32
.19464d		8b		phb		                PHB
.19464e		0b		phd		                PHD
.19464f		08		php		                PHP
.194650		48		pha		                PHA             ; begin setdbr macro
.194651		08		php		                PHP
.194652		e2 20		sep #$20	                SEP #$20        ; set A short
.194654		a9 00		lda #$00	                LDA #0
.194656		48		pha		                PHA
.194657		ab		plb		                PLB
.194658		28		plp		                PLP
.194659		68		pla		                PLA             ; end setdbr macro
.19465a		48		pha		                PHA             ; begin setdp macro
.19465b		08		php		                PHP
.19465c		c2 20		rep #$20	                REP #$20        ; set A long
.19465e		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194661		5b		tcd		                TCD
.194662		28		plp		                PLP
.194663		68		pla		                PLA             ; end setdp macro
.194664		c2 30		rep #$30	                REP #$30        ; set A&X long
.194666		22 59 45 19	jsl $194559	                JSL FATFORCLUSTER32             ; Get the FAT entry for this cluster
.19466a		90 53		bcc $1946bf	                BCC ret_failure                 ; If it did not work, return the error
.19466c		e2 20		sep #$20	                SEP #$20        ; set A short
.19466e		bf 00 a5 18	lda $18a500,x	                LDA @l DOS_FAT_SECTORS,X        ; Get the entry and copy it to DOS_TEMP
.194672		85 28		sta $0348	                STA DOS_TEMP
.194674		bf 01 a5 18	lda $18a501,x	                LDA @l DOS_FAT_SECTORS+1,X
.194678		85 29		sta $0349	                STA DOS_TEMP+1
.19467a		bf 02 a5 18	lda $18a502,x	                LDA @l DOS_FAT_SECTORS+2,X
.19467e		85 2a		sta $034a	                STA DOS_TEMP+2
.194680		bf 03 a5 18	lda $18a503,x	                LDA @l DOS_FAT_SECTORS+3,X
.194684		85 2b		sta $034b	                STA DOS_TEMP+3
.194686		a5 28		lda $0348	xxxx            LDA DOS_TEMP                    ; Is DOS_TEMP = $FFFFFFFF?
.194688		c9 ff		cmp #$ff	                CMP #$FF
.19468a		d0 18		bne $1946a4	                BNE found_next
.19468c		a5 29		lda $0349	                LDA DOS_TEMP+1
.19468e		c9 ff		cmp #$ff	                CMP #$FF
.194690		d0 12		bne $1946a4	                BNE found_next
.194692		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194694		c9 ff		cmp #$ff	                CMP #$FF
.194696		d0 0c		bne $1946a4	                BNE found_next
.194698		a5 2b		lda $034b	                LDA DOS_TEMP+3
.19469a		c9 0f		cmp #$0f	                CMP #$0F
.19469c		d0 06		bne $1946a4	                BNE found_next                  ; No: return this cluster as the next
.19469e		e2 20		sep #$20	                SEP #$20        ; set A short
.1946a0		a9 0a		lda #$0a	                LDA #DOS_ERR_NOCLUSTER          ; Yes: return that there are no more clusters
.1946a2		80 1b		bra $1946bf	                BRA ret_failure
.1946a4						found_next
.1946a4		e2 20		sep #$20	                SEP #$20        ; set A short
.1946a6		a5 28		lda $0348	                LDA DOS_TEMP                    ; No: return DOS_TEMP as the new DOS_CLUS_ID
.1946a8		85 10		sta $0330	                STA DOS_CLUS_ID
.1946aa		a5 29		lda $0349	                LDA DOS_TEMP+1
.1946ac		85 11		sta $0331	                STA DOS_CLUS_ID+1
.1946ae		a5 2a		lda $034a	                LDA DOS_TEMP+2
.1946b0		85 12		sta $0332	                STA DOS_CLUS_ID+2
.1946b2		a5 2b		lda $034b	                LDA DOS_TEMP+3
.1946b4		85 13		sta $0333	                STA DOS_CLUS_ID+3
.1946b6						ret_success
.1946b6		e2 20		sep #$20	                SEP #$20        ; set A short
.1946b8		64 0e		stz $032e	                STZ DOS_STATUS                  ; Record success
.1946ba		28		plp		                PLP
.1946bb		2b		pld		                PLD
.1946bc		ab		plb		                PLB
.1946bd		38		sec		                SEC
.1946be		6b		rtl		                RTL
.1946bf						ret_failure
.1946bf		e2 20		sep #$20	                SEP #$20        ; set A short
.1946c1		85 0e		sta $032e	                STA DOS_STATUS                  ; Record the error condition
.1946c3		28		plp		                PLP
.1946c4		2b		pld		                PLD
.1946c5		ab		plb		                PLB
.1946c6		18		clc		                CLC
.1946c7		6b		rtl		                RTL
.1946c8						DOS_READNEXT
.1946c8		08		php		                PHP
.1946c9		c2 30		rep #$30	                REP #$30        ; set A&X long
.1946cb		22 c4 45 19	jsl $1945c4	                JSL NEXTCLUSTER                 ; Attempt to find the next cluster in the FAT
.1946cf		90 09		bcc $1946da	                BCC pass_failure                ; If nothing found: pass the failure up the chain
.1946d1		22 b0 41 19	jsl $1941b0	                JSL DOS_GETCLUSTER              ; Otherwise: attempt to read the cluster
.1946d5		90 03		bcc $1946da	                BCC pass_failure                ; If nothing read: pass the failure up the chain
.1946d7		28		plp		ret_success     PLP
.1946d8		38		sec		                SEC
.1946d9		6b		rtl		                RTL
.1946da		28		plp		pass_failure    PLP
.1946db		18		clc		                CLC
.1946dc		6b		rtl		                RTL
.1946dd						DOS_FREECLUS
.1946dd		08		php		                PHP
.1946de		48		pha		                PHA             ; begin setdp macro
.1946df		08		php		                PHP
.1946e0		c2 20		rep #$20	                REP #$20        ; set A long
.1946e2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1946e5		5b		tcd		                TCD
.1946e6		28		plp		                PLP
.1946e7		68		pla		                PLA             ; end setdp macro
.1946e8		e2 20		sep #$20	                SEP #$20        ; set A short
.1946ea		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.1946ee		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.1946f0		d0 08		bne $1946fa	                BNE fat32                       ; No: assume it's FAT32
.1946f2		22 6e 47 19	jsl $19476e	fat12           JSL DOS_FREECLUS12              ; Find the next free cluster from FAT12
.1946f6		90 0d		bcc $194705	                BCC pass_failure                ; If there was an error, pass it up the chain
.1946f8		80 06		bra $194700	                BRA ret_success
.1946fa		22 46 48 19	jsl $194846	fat32           JSL DOS_FREECLUS32              ; Find the next free cluster from FAT32
.1946fe		90 05		bcc $194705	                BCC pass_failure                ; If there was an error, pass it up the chain
.194700		64 0e		stz $032e	ret_success     STZ DOS_STATUS
.194702		28		plp		                PLP
.194703		38		sec		                SEC
.194704		6b		rtl		                RTL
.194705		28		plp		pass_failure    PLP
.194706		18		clc		                CLC
.194707		6b		rtl		                RTL
.194708						FDC_READ2FAT12
.194708		8b		phb		                    PHB
.194709		0b		phd		                    PHD
.19470a		08		php		                    PHP
.19470b		48		pha		                PHA             ; begin setdbr macro
.19470c		08		php		                PHP
.19470d		e2 20		sep #$20	                SEP #$20        ; set A short
.19470f		a9 00		lda #$00	                LDA #0
.194711		48		pha		                PHA
.194712		ab		plb		                PLB
.194713		28		plp		                PLP
.194714		68		pla		                PLA             ; end setdbr macro
.194715		48		pha		                PHA             ; begin setdp macro
.194716		08		php		                PHP
.194717		c2 20		rep #$20	                REP #$20        ; set A long
.194719		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19471c		5b		tcd		                TCD
.19471d		28		plp		                PLP
.19471e		68		pla		                PLA             ; end setdp macro
.19471f		c2 30		rep #$30	                REP #$30        ; set A&X long
.194721		a9 00 a5	lda #$a500	                    LDA #<>DOS_FAT_SECTORS          ; Set the location to store the sector
.194724		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.194726		a9 18 00	lda #$0018	                    LDA #`DOS_FAT_SECTORS
.194729		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.19472b		a5 24		lda $0344	                    LDA DOS_FAT_LBA
.19472d		85 02		sta $0322	                    STA BIOS_LBA
.19472f		a5 26		lda $0346	                    LDA DOS_FAT_LBA+2
.194731		85 04		sta $0324	                    STA BIOS_LBA+2
.194733		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the first sector
.194737		b0 07		bcs $194740	                    BCS inc_sect2                   ; If success: start getting the second sector
.194739		e2 20		sep #$20	                SEP #$20        ; set A short
.19473b		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.19473d		82 1c 00	brl $19475c	                    BRL ret_failure
.194740						inc_sect2
.194740		c2 20		rep #$20	                REP #$20        ; set A long
.194742		e6 02		inc $0322	                    INC BIOS_LBA                    ; Move to the next sector
.194744		d0 02		bne $194748	                    BNE inc_buff_ptr
.194746		e6 04		inc $0324	                    INC BIOS_LBA+2
.194748		a9 00 a7	lda #$a700	inc_buff_ptr        LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.19474b		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.19474d		a9 18 00	lda #$0018	                    LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194750		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.194752		22 44 10 00	jsl $001044	                    JSL GETBLOCK                    ; Read the second sector
.194756		b0 0d		bcs $194765	                    BCS ret_success                 ; If success, return success
.194758		e2 20		sep #$20	                SEP #$20        ; set A short
.19475a		a9 06		lda #$06	                    LDA #DOS_ERR_FAT
.19475c						ret_failure
.19475c		e2 20		sep #$20	                SEP #$20        ; set A short
.19475e		85 00		sta $0320	                    STA BIOS_STATUS
.194760		28		plp		                    PLP
.194761		2b		pld		                    PLD
.194762		ab		plb		                    PLB
.194763		18		clc		                    CLC
.194764		6b		rtl		                    RTL
.194765						ret_success
.194765		e2 20		sep #$20	                SEP #$20        ; set A short
.194767		64 00		stz $0320	                    STZ BIOS_STATUS
.194769		28		plp		                    PLP
.19476a		2b		pld		                    PLD
.19476b		ab		plb		                    PLB
.19476c		38		sec		                    SEC
.19476d		6b		rtl		                    RTL
.19476e						DOS_FREECLUS12
.19476e		da		phx		                PHX
.19476f		8b		phb		                PHB
.194770		0b		phd		                PHD
.194771		08		php		                PHP
.194772		48		pha		                PHA             ; begin setdbr macro
.194773		08		php		                PHP
.194774		e2 20		sep #$20	                SEP #$20        ; set A short
.194776		a9 00		lda #$00	                LDA #0
.194778		48		pha		                PHA
.194779		ab		plb		                PLB
.19477a		28		plp		                PLP
.19477b		68		pla		                PLA             ; end setdbr macro
.19477c		48		pha		                PHA             ; begin setdp macro
.19477d		08		php		                PHP
.19477e		c2 20		rep #$20	                REP #$20        ; set A long
.194780		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194783		5b		tcd		                TCD
.194784		28		plp		                PLP
.194785		68		pla		                PLA             ; end setdp macro
.194786		c2 30		rep #$30	                REP #$30        ; set A&X long
.194788		a9 02 00	lda #$0002	                LDA #2                          ; Cluster ID is 2 to start with
.19478b		85 10		sta $0330	                STA DOS_CLUS_ID
.19478d		a9 00 00	lda #$0000	                LDA #0
.194790		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194792		22 7e 44 19	jsl $19447e	                JSL ENTRYFORCLUS12              ; Calculate the LBA and buffer offset for the cluster
.194796		22 08 47 19	jsl $194708	                JSL FDC_READ2FAT12              ; Read the first two sectors of the FAT
.19479a		b0 07		bcs $1947a3	                BCS start_of_fat                ; If success, move X to the start of the FAT
.19479c		e2 20		sep #$20	                SEP #$20        ; set A short
.19479e		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1947a0		82 99 00	brl $19483c	                BRL ret_failure
.1947a3						start_of_fat
.1947a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1947a5		a5 10		lda $0330	chk_cluster     LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.1947a7		89 01 00	bit #$0001	                BIT #1
.1947aa		d0 09		bne $1947b5	                BNE is_odd
.1947ac		bf 00 a5 18	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an even numbered cluster
.1947b0		29 ff 0f	and #$0fff	                AND #$0FFF
.1947b3		80 08		bra $1947bd	                BRA chk_available
.1947b5		bf 00 a5 18	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the cluster status for an odd numbered cluster
.1947b9		4a		lsr a		                LSR A
.1947ba		4a		lsr a		                LSR A
.1947bb		4a		lsr a		                LSR A
.1947bc		4a		lsr a		                LSR A
.1947bd						chk_available
.1947bd		85 28		sta $0348	                STA DOS_TEMP
.1947bf		c9 00 00	cmp #$0000	                CMP #0                          ; Is it available?
.1947c2		f0 03		beq $1947c7	                BEQ chk_found
.1947c4		82 39 00	brl $194800	                BRL next_cluster                ; No: advance to the next cluster
.1947c7		8a		txa		chk_found       TXA
.1947c8		85 2a		sta $034a	                STA DOS_TEMP+2
.1947ca		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if cluster number is even or odd
.1947cc		89 01 00	bit #$0001	                BIT #1
.1947cf		d0 0d		bne $1947de	                BNE is_odd2
.1947d1						is_even2
.1947d1		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, even offset case
.1947d5		09 ff 0f	ora #$0fff	                ORA #$0FFF
.1947d8		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1947dc		80 0b		bra $1947e9	                BRA write_fat
.1947de						is_odd2
.1947de		bf 00 a5 18	lda $18a500,x	                LDA DOS_FAT_SECTORS,X           ; Reserve the cluster in the FAT, odd offset case
.1947e2		09 f0 ff	ora #$fff0	                ORA #$FFF0
.1947e5		9f 00 a5 18	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.1947e9		22 10 49 19	jsl $194910	write_fat       JSL WRITEFAT12                  ; Write the two FAT sectors back to disk
.1947ed		b0 07		bcs $1947f6	                BCS ret_success                 ; If success: return success
.1947ef		e2 20		sep #$20	                SEP #$20        ; set A short
.1947f1		a9 14		lda #$14	                LDA #DOS_ERR_FATUPDATE          ; Flag an error trying to write the FAT back
.1947f3		82 46 00	brl $19483c	                BRL ret_failure
.1947f6						ret_success
.1947f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1947f8		64 0e		stz $032e	                STZ DOS_STATUS
.1947fa		28		plp		                PLP
.1947fb		2b		pld		                PLD
.1947fc		ab		plb		                PLB
.1947fd		fa		plx		                PLX
.1947fe		38		sec		                SEC
.1947ff		6b		rtl		                RTL
.194800						next_cluster
.194800		e6 10		inc $0330	                INC DOS_CLUS_ID                 ; And advance the cluster ID
.194802		d0 02		bne $194806	                BNE calc_entry
.194804		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.194806		22 7e 44 19	jsl $19447e	calc_entry      JSL ENTRYFORCLUS12              ; Calculate the LBA and offset into the buffer for the cluster
.19480a		e0 00 00	cpx #$0000	                CPX #0                          ; Did we wrap around?
.19480d		f0 03		beq $194812	                BEQ chk_end_of_fat
.19480f		82 93 ff	brl $1947a5	                BRL chk_cluster                 ; No: go back and check it too
.194812						chk_end_of_fat
.194812		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Are we at the end of the FAT?
.194814		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA              ; NOTE: we use the start sector of the second FAT as our sentinel
.194818		d0 0f		bne $194829	                BNE next_2
.19481a		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.19481c		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.194820		d0 07		bne $194829	                BNE next_2                      ; No: get the next to sectors
.194822		e2 20		sep #$20	                SEP #$20        ; set A short
.194824		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; Yes: return media full
.194826		82 13 00	brl $19483c	                BRL ret_failure
.194829						next_2
.194829		22 08 47 19	jsl $194708	                JSL FDC_READ2FAT12              ; Read the next two sectors of the FAT
.19482d		90 06		bcc $194835	                BCC fat_fail                    ; If failed: return error
.19482f		a2 00 00	ldx #$0000	                LDX #0                          ; If success: Start scanning at the beginning of the sectors
.194832		82 70 ff	brl $1947a5	                BRL chk_cluster                 ; And start checking from there
.194835						fat_fail
.194835		e2 20		sep #$20	                SEP #$20        ; set A short
.194837		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194839		82 00 00	brl $19483c	                BRL ret_failure
.19483c						ret_failure
.19483c		e2 20		sep #$20	                SEP #$20        ; set A short
.19483e		85 0e		sta $032e	                STA DOS_STATUS
.194840		28		plp		                PLP
.194841		2b		pld		                PLD
.194842		ab		plb		                PLB
.194843		fa		plx		                PLX
.194844		18		clc		                CLC
.194845		6b		rtl		                RTL
.194846						DOS_FREECLUS32
.194846		8b		phb		                PHB
.194847		0b		phd		                PHD
.194848		08		php		                PHP
.194849		48		pha		                PHA             ; begin setdbr macro
.19484a		08		php		                PHP
.19484b		e2 20		sep #$20	                SEP #$20        ; set A short
.19484d		a9 00		lda #$00	                LDA #0
.19484f		48		pha		                PHA
.194850		ab		plb		                PLB
.194851		28		plp		                PLP
.194852		68		pla		                PLA             ; end setdbr macro
.194853		48		pha		                PHA             ; begin setdp macro
.194854		08		php		                PHP
.194855		c2 20		rep #$20	                REP #$20        ; set A long
.194857		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19485a		5b		tcd		                TCD
.19485b		28		plp		                PLP
.19485c		68		pla		                PLA             ; end setdp macro
.19485d		c2 30		rep #$30	                REP #$30        ; set A&X long
.19485f		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR               ; Set the location to store the sector
.194862		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194864		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.194867		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194869		af 14 a0 18	lda $18a014	                LDA FAT_BEGIN_LBA               ; Set the LBA to that of the first FAT sector
.19486d		85 02		sta $0322	                STA BIOS_LBA
.19486f		af 16 a0 18	lda $18a016	                LDA FAT_BEGIN_LBA+2
.194873		85 04		sta $0324	                STA BIOS_LBA+2
.194875		22 44 10 00	jsl $001044	                JSL GETBLOCK                    ; Load the sector into memory
.194879		b0 07		bcs $194882	                BCS initial_entry               ; If OK: set the initial entry to check
.19487b		e2 20		sep #$20	                SEP #$20        ; set A short
.19487d		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Return a NOFAT error
.19487f		82 6b 00	brl $1948ed	                BRL ret_failure
.194882						initial_entry
.194882		c2 20		rep #$20	                REP #$20        ; set A long
.194884		a9 02 00	lda #$0002	                LDA #2                          ; Set DOS_CLUS_ID to 2
.194887		85 10		sta $0330	                STA DOS_CLUS_ID
.194889		a9 00 00	lda #$0000	                LDA #0
.19488c		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19488e		a2 08 00	ldx #$0008	                LDX #8                          ; Set the offset to DOS_CLUS_ID * 4
.194891		bf 00 a3 18	lda $18a300,x	chk_entry       LDA DOS_SECTOR,X                ; Is the cluster entry == $00000000?
.194895		d0 06		bne $19489d	                BNE next_entry                  ; No: move to the next entry
.194897		bf 02 a3 18	lda $18a302,x	                LDA DOS_SECTOR+2,X
.19489b		f0 36		beq $1948d3	                BEQ found_free                  ; Yes: go to allocate and return it
.19489d		e6 10		inc $0330	next_entry      INC DOS_CLUS_ID                 ; Move to the next cluster
.19489f		d0 02		bne $1948a3	                BNE inc_ptr
.1948a1		e6 12		inc $0332	                INC DOS_CLUS_ID+2
.1948a3		e8		inx		inc_ptr         INX                             ; Update the index to the entry
.1948a4		e8		inx		                INX
.1948a5		e8		inx		                INX
.1948a6		e8		inx		                INX
.1948a7		e0 00 02	cpx #$0200	                CPX #DOS_SECTOR_SIZE            ; Are we outside the sector?
.1948aa		90 e5		bcc $194891	                BLT chk_entry                   ; No: check this entry
.1948ac		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.1948ae		d0 18		bne $1948c8	                BNE get_block
.1948b0		e6 04		inc $0324	                INC BIOS_LBA+2
.1948b2		a5 04		lda $0324	                LDA BIOS_LBA+2
.1948b4		cf 1a a0 18	cmp $18a01a	                CMP FAT2_BEGIN_LBA+2
.1948b8		90 0e		bcc $1948c8	                BLT get_block
.1948ba		a5 02		lda $0322	                LDA BIOS_LBA
.1948bc		cf 18 a0 18	cmp $18a018	                CMP FAT2_BEGIN_LBA
.1948c0		90 06		bcc $1948c8	                BLT get_block
.1948c2		e2 20		sep #$20	                SEP #$20        ; set A short
.1948c4		a9 12		lda #$12	                LDA #DOS_ERR_MEDIAFULL          ; No: throw a media full error
.1948c6		80 25		bra $1948ed	                BRA ret_failure
.1948c8		22 44 10 00	jsl $001044	get_block       JSL GETBLOCK                    ; Attempt to read the block
.1948cc		90 1b		bcc $1948e9	                BCC ret_fat_error               ; If error: throw a FAT error
.1948ce		a2 00 00	ldx #$0000	set_ptr         LDX #0                          ; Set index pointer to the first entry
.1948d1		80 be		bra $194891	                BRA chk_entry                   ; Check this entry
.1948d3						found_free
.1948d3		c2 20		rep #$20	                REP #$20        ; set A long
.1948d5		a9 ff ff	lda #$ffff	                LDA #<>FAT_LAST_CLUSTER         ; Set the entry to $0FFFFFFF to make it the last entry in its chain
.1948d8		9f 00 a3 18	sta $18a300,x	                STA DOS_SECTOR,X
.1948dc		a9 ff 0f	lda #$0fff	                LDA #(FAT_LAST_CLUSTER >> 16)
.1948df		9f 02 a3 18	sta $18a302,x	                STA DOS_SECTOR+2,X
.1948e3		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1948e7		b0 0d		bcs $1948f6	                BCS ret_success                 ; If OK: return success
.1948e9						ret_fat_error
.1948e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1948eb		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Otherwise: return NOFAT error
.1948ed						ret_failure
.1948ed		e2 20		sep #$20	                SEP #$20        ; set A short
.1948ef		85 0e		sta $032e	                STA DOS_STATUS
.1948f1		28		plp		                PLP
.1948f2		2b		pld		                PLD
.1948f3		ab		plb		                PLB
.1948f4		18		clc		                CLC
.1948f5		6b		rtl		                RTL
.1948f6						ret_success
.1948f6		e2 20		sep #$20	                SEP #$20        ; set A short
.1948f8		64 0e		stz $032e	                STZ DOS_STATUS
.1948fa		28		plp		                PLP
.1948fb		2b		pld		                PLD
.1948fc		ab		plb		                PLB
.1948fd		38		sec		                SEC
.1948fe		6b		rtl		                RTL
.1948ff						DELCLUSTER
.1948ff		e2 20		sep #$20	                SEP #$20        ; set A short
.194901		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194905		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194907		d0 04		bne $19490d	                BNE fat32                       ; No: assume it's FAT32
.194909		5c 57 49 19	jmp $194957	fat12           JML DELCLUSTER12
.19490d		4c a5 49	jmp $1949a5	fat32           JMP DELCLUSTER32
.194910						WRITEFAT12
.194910		8b		phb		                PHB
.194911		0b		phd		                PHD
.194912		48		pha		                PHA             ; begin setdbr macro
.194913		08		php		                PHP
.194914		e2 20		sep #$20	                SEP #$20        ; set A short
.194916		a9 00		lda #$00	                LDA #0
.194918		48		pha		                PHA
.194919		ab		plb		                PLB
.19491a		28		plp		                PLP
.19491b		68		pla		                PLA             ; end setdbr macro
.19491c		48		pha		                PHA             ; begin setdp macro
.19491d		08		php		                PHP
.19491e		c2 20		rep #$20	                REP #$20        ; set A long
.194920		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194923		5b		tcd		                TCD
.194924		28		plp		                PLP
.194925		68		pla		                PLA             ; end setdp macro
.194926		c2 30		rep #$30	                REP #$30        ; set A&X long
.194928		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS          ; Point to the first FAT sector in memory
.19492b		85 06		sta $0326	                STA BIOS_BUFF_PTR
.19492d		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.194930		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.194932		a5 24		lda $0344	                LDA DOS_FAT_LBA                 ; Set the LBA to that of the first sector's
.194934		85 02		sta $0322	                STA BIOS_LBA
.194936		a5 26		lda $0346	                LDA DOS_FAT_LBA+2
.194938		85 04		sta $0324	                STA BIOS_LBA+2
.19493a		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the first sector back to the block device
.19493e		90 14		bcc $194954	                BCC done
.194940		a9 00 a7	lda #$a700	                LDA #<>(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194943		85 06		sta $0326	                STA BIOS_BUFF_PTR
.194945		a9 18 00	lda #$0018	                LDA #`(DOS_FAT_SECTORS+DOS_SECTOR_SIZE)
.194948		85 08		sta $0328	                STA BIOS_BUFF_PTR+2
.19494a		e6 02		inc $0322	                INC BIOS_LBA                    ; Point to the next sector in the FAT
.19494c		d0 02		bne $194950	                BNE put_second
.19494e		e6 04		inc $0324	                INC BIOS_LBA+2
.194950		22 24 10 00	jsl $001024	put_second      JSL PUTBLOCK                    ; Write the second sector back to the block device
.194954		2b		pld		done            PLD
.194955		ab		plb		                PLB
.194956		6b		rtl		                RTL
.194957						DELCLUSTER12
.194957		8b		phb		                PHB
.194958		0b		phd		                PHD
.194959		08		php		                PHP
.19495a		48		pha		                PHA             ; begin setdbr macro
.19495b		08		php		                PHP
.19495c		e2 20		sep #$20	                SEP #$20        ; set A short
.19495e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194960		48		pha		                PHA
.194961		ab		plb		                PLB
.194962		28		plp		                PLP
.194963		68		pla		                PLA             ; end setdbr macro
.194964		48		pha		                PHA             ; begin setdp macro
.194965		08		php		                PHP
.194966		c2 20		rep #$20	                REP #$20        ; set A long
.194968		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19496b		5b		tcd		                TCD
.19496c		28		plp		                PLP
.19496d		68		pla		                PLA             ; end setdp macro
.19496e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194970		22 f1 44 19	jsl $1944f1	                JSL FATFORCLUSTER12
.194974		8a		txa		                TXA                             ; Check to see if the index is odd or even
.194975		89 01 00	bit #$0001	                BIT #1
.194978		d0 08		bne $194982	                BNE is_odd
.19497a		bd 00 a5	lda $18a500,x	is_even         LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.19497d		29 00 f0	and #$f000	                AND #$F000                      ; Mask out the lower 12 bits
.194980		80 06		bra $194988	                BRA save_update
.194982		bd 00 a5	lda $18a500,x	is_odd          LDA DOS_FAT_SECTORS,X           ; Get the two bytes from the FAT
.194985		29 0f 00	and #$000f	                AND #$000F                      ; Mask out the upper 12 bits
.194988		9d 00 a5	sta $18a500,x	save_update     STA DOS_FAT_SECTORS,X           ; And write it back
.19498b		22 10 49 19	jsl $194910	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.19498f		b0 0b		bcs $19499c	                BCS ret_success
.194991						ret_failure
.194991		e2 20		sep #$20	                SEP #$20        ; set A short
.194993		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.194995		85 0e		sta $032e	                STA DOS_STATUS
.194997		28		plp		                PLP
.194998		2b		pld		                PLD
.194999		ab		plb		                PLB
.19499a		18		clc		                CLC
.19499b		6b		rtl		                RTL
.19499c						ret_success
.19499c		e2 20		sep #$20	                SEP #$20        ; set A short
.19499e		64 0e		stz $032e	                STZ DOS_STATUS
.1949a0		28		plp		                PLP
.1949a1		2b		pld		                PLD
.1949a2		ab		plb		                PLB
.1949a3		38		sec		                SEC
.1949a4		6b		rtl		                RTL
.1949a5						DELCLUSTER32
.1949a5		8b		phb		                PHB
.1949a6		0b		phd		                PHD
.1949a7		08		php		                PHP
.1949a8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949aa		48		pha		                PHA             ; begin setdbr macro
.1949ab		08		php		                PHP
.1949ac		e2 20		sep #$20	                SEP #$20        ; set A short
.1949ae		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1949b0		48		pha		                PHA
.1949b1		ab		plb		                PLB
.1949b2		28		plp		                PLP
.1949b3		68		pla		                PLA             ; end setdbr macro
.1949b4		48		pha		                PHA             ; begin setdp macro
.1949b5		08		php		                PHP
.1949b6		c2 20		rep #$20	                REP #$20        ; set A long
.1949b8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949bb		5b		tcd		                TCD
.1949bc		28		plp		                PLP
.1949bd		68		pla		                PLA             ; end setdp macro
.1949be		22 59 45 19	jsl $194559	                JSL FATFORCLUSTER32
.1949c2		a9 00 00	lda #$0000	                LDA #0
.1949c5		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X           ; Set the cluster entry to 0
.1949c8		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.1949cb		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the sector back to the block device
.1949cf		b0 0b		bcs $1949dc	                BCS ret_success
.1949d1						ret_failure
.1949d1		e2 20		sep #$20	                SEP #$20        ; set A short
.1949d3		a9 06		lda #$06	                LDA #DOS_ERR_FAT
.1949d5		85 0e		sta $032e	                STA DOS_STATUS
.1949d7		28		plp		                PLP
.1949d8		2b		pld		                PLD
.1949d9		ab		plb		                PLB
.1949da		18		clc		                CLC
.1949db		6b		rtl		                RTL
.1949dc						ret_success
.1949dc		e2 20		sep #$20	                SEP #$20        ; set A short
.1949de		64 0e		stz $032e	                STZ DOS_STATUS
.1949e0		28		plp		                PLP
.1949e1		2b		pld		                PLD
.1949e2		ab		plb		                PLB
.1949e3		38		sec		                SEC
.1949e4		6b		rtl		                RTL
.1949e5						DOS_APPENDCLUS
.1949e5		8b		phb		                PHB
.1949e6		0b		phd		                PHD
.1949e7		08		php		                PHP
.1949e8		48		pha		                PHA             ; begin setdbr macro
.1949e9		08		php		                PHP
.1949ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1949ec		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1949ee		48		pha		                PHA
.1949ef		ab		plb		                PLB
.1949f0		28		plp		                PLP
.1949f1		68		pla		                PLA             ; end setdbr macro
.1949f2		48		pha		                PHA             ; begin setdp macro
.1949f3		08		php		                PHP
.1949f4		c2 20		rep #$20	                REP #$20        ; set A long
.1949f6		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1949f9		5b		tcd		                TCD
.1949fa		28		plp		                PLP
.1949fb		68		pla		                PLA             ; end setdp macro
.1949fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1949fe		a5 12		lda $0332	                LDA DOS_CLUS_ID+2               ; Save the cluster number for later
.194a00		48		pha		                PHA
.194a01		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194a03		48		pha		                PHA
.194a04		22 dd 46 19	jsl $1946dd	                JSL DOS_FREECLUS                ; Find a free cluster on the block device
.194a08		b0 09		bcs $194a13	                BCS save_cluster                ; If we got a cluster, write the data to it
.194a0a		68		pla		fail_cleanup    PLA                             ; Restore the cluster of the file
.194a0b		85 10		sta $0330	                STA DOS_CLUS_ID
.194a0d		68		pla		                PLA
.194a0e		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194a10		82 7d 00	brl $194a90	                BRL pass_failure                ; Pass the failure back up the chain
.194a13		a5 10		lda $0330	save_cluster    LDA DOS_CLUS_ID
.194a15		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a18		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194a1a		8d 38 a0	sta $18a038	                STA DOS_NEW_CLUSTER+2
.194a1d		22 ed 41 19	jsl $1941ed	                JSL DOS_PUTCLUSTER              ; Write the data to the free cluster
.194a21		90 e7		bcc $194a0a	                BCC fail_cleanup                ; If failure: clean up stack and pass the failure up
.194a23		68		pla		                PLA                             ; Restore the cluster of the file
.194a24		85 10		sta $0330	                STA DOS_CLUS_ID
.194a26		68		pla		                PLA
.194a27		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194a29		22 c4 45 19	jsl $1945c4	walk_loop       JSL NEXTCLUSTER                 ; Try to get the next cluster in the chain
.194a2d		b0 fa		bcs $194a29	                BCS walk_loop                   ; If found a cluster, keep walking the chain
.194a2f		e2 20		sep #$20	                SEP #$20        ; set A short
.194a31		af 01 a0 18	lda $18a001	                LDA @l FILE_SYSTEM              ; Get the file system code
.194a35		c9 00		cmp #$00	                CMP #PART_TYPE_FAT12            ; Is it FAT12?
.194a37		d0 3d		bne $194a76	                BNE fat32                       ; No: assume it's FAT32
.194a39						fat12
.194a39		c2 20		rep #$20	                REP #$20        ; set A long
.194a3b		22 7e 44 19	jsl $19447e	                JSL ENTRYFORCLUS12              ; Make sure we have the right offset for the cluster
.194a3f		a5 10		lda $0330	                LDA DOS_CLUS_ID                 ; Check to see if the last cluster ID is even or odd
.194a41		89 01 00	bit #$0001	                BIT #1
.194a44		d0 11		bne $194a57	                BNE is_odd
.194a46		ad 36 a0	lda $18a036	is_even         LDA DOS_NEW_CLUSTER             ; Handle the even case (change the lower 12 bits)
.194a49		29 ff 0f	and #$0fff	                AND #$0FFF
.194a4c		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a4f		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a52		29 00 f0	and #$f000	                AND #$F000
.194a55		80 10		bra $194a67	                BRA update_fat12
.194a57		ad 36 a0	lda $18a036	is_odd          LDA DOS_NEW_CLUSTER             ; Handle the odd case (change the upper 12 bits)
.194a5a		0a		asl a		                ASL A
.194a5b		0a		asl a		                ASL A
.194a5c		0a		asl a		                ASL A
.194a5d		0a		asl a		                ASL A
.194a5e		8d 36 a0	sta $18a036	                STA DOS_NEW_CLUSTER
.194a61		bd 00 a5	lda $18a500,x	                LDA DOS_FAT_SECTORS,X
.194a64		29 0f 00	and #$000f	                AND #$000F
.194a67		0d 36 a0	ora $18a036	update_fat12    ORA DOS_NEW_CLUSTER
.194a6a		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a6d		22 10 49 19	jsl $194910	                JSL WRITEFAT12                  ; Write the two FAT12 sectors back to the drive
.194a71		b0 22		bcs $194a95	                BCS ret_success
.194a73		82 1a 00	brl $194a90	                BRL pass_failure
.194a76						fat32
.194a76		c2 20		rep #$20	                REP #$20        ; set A long
.194a78		ad 36 a0	lda $18a036	                LDA DOS_NEW_CLUSTER             ; Write the ID of the new cluster to the end of the chain
.194a7b		9d 00 a5	sta $18a500,x	                STA DOS_FAT_SECTORS,X
.194a7e		ad 38 a0	lda $18a038	                LDA DOS_NEW_CLUSTER+2
.194a81		9d 02 a5	sta $18a502,x	                STA DOS_FAT_SECTORS+2,X
.194a84		22 24 10 00	jsl $001024	                JSL PUTBLOCK                    ; Write the FAT sector back (assumes BIOS_LBA and BIOS_BUFF_PTR haven't changed)
.194a88		b0 0b		bcs $194a95	                BCS ret_success
.194a8a		e2 20		sep #$20	                SEP #$20        ; set A short
.194a8c		a9 06		lda #$06	                LDA #DOS_ERR_FAT                ; Problem working with the FAT
.194a8e		85 0e		sta $032e	                STA DOS_STATUS
.194a90		28		plp		pass_failure    PLP
.194a91		2b		pld		                PLD
.194a92		ab		plb		                PLB
.194a93		18		clc		                CLC
.194a94		6b		rtl		                RTL
.194a95						ret_success
.194a95		e2 20		sep #$20	                SEP #$20        ; set A short
.194a97		64 0e		stz $032e	                STZ DOS_STATUS
.194a99		28		plp		                PLP
.194a9a		2b		pld		                PLD
.194a9b		ab		plb		                PLB
.194a9c		38		sec		                SEC
.194a9d		6b		rtl		                RTL
.194a9e						BCD2BIN
.194a9e		8b		phb		                PHB
.194a9f		0b		phd		                PHD
.194aa0		08		php		                PHP
.194aa1		48		pha		                PHA             ; begin setdbr macro
.194aa2		08		php		                PHP
.194aa3		e2 20		sep #$20	                SEP #$20        ; set A short
.194aa5		a9 00		lda #$00	                LDA #0
.194aa7		48		pha		                PHA
.194aa8		ab		plb		                PLB
.194aa9		28		plp		                PLP
.194aaa		68		pla		                PLA             ; end setdbr macro
.194aab		48		pha		                PHA             ; begin setdp macro
.194aac		08		php		                PHP
.194aad		c2 20		rep #$20	                REP #$20        ; set A long
.194aaf		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ab2		5b		tcd		                TCD
.194ab3		28		plp		                PLP
.194ab4		68		pla		                PLA             ; end setdp macro
.194ab5		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ab7		85 28		sta $0348	                STA DOS_TEMP
.194ab9		29 0f 00	and #$000f	                AND #$000F
.194abc		85 2a		sta $034a	                STA DOS_TEMP+2
.194abe		a5 28		lda $0348	                LDA DOS_TEMP
.194ac0		4a		lsr a		                LSR A
.194ac1		4a		lsr a		                LSR A
.194ac2		4a		lsr a		                LSR A
.194ac3		4a		lsr a		                LSR A
.194ac4		85 28		sta $0348	                STA DOS_TEMP
.194ac6		29 0f 00	and #$000f	                AND #$000F
.194ac9		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194acd		a9 0a 00	lda #$000a	                LDA #10
.194ad0		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194ad4		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194ad8		18		clc		                CLC
.194ad9		65 2a		adc $034a	                ADC DOS_TEMP+2
.194adb		85 2a		sta $034a	                STA DOS_TEMP+2
.194add		a5 28		lda $0348	                LDA DOS_TEMP
.194adf		4a		lsr a		                LSR A
.194ae0		4a		lsr a		                LSR A
.194ae1		4a		lsr a		                LSR A
.194ae2		4a		lsr a		                LSR A
.194ae3		85 28		sta $0348	                STA DOS_TEMP
.194ae5		29 0f 00	and #$000f	                AND #$000F
.194ae8		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194aec		a9 64 00	lda #$0064	                LDA #100
.194aef		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194af3		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194af7		18		clc		                CLC
.194af8		65 2a		adc $034a	                ADC DOS_TEMP+2
.194afa		85 2a		sta $034a	                STA DOS_TEMP+2
.194afc		a5 28		lda $0348	                LDA DOS_TEMP
.194afe		4a		lsr a		                LSR A
.194aff		4a		lsr a		                LSR A
.194b00		4a		lsr a		                LSR A
.194b01		4a		lsr a		                LSR A
.194b02		29 0f 00	and #$000f	                AND #$000F
.194b05		8f 00 01 00	sta $000100	                STA @l UNSIGNED_MULT_A_LO
.194b09		a9 e8 03	lda #$03e8	                LDA #1000
.194b0c		8f 02 01 00	sta $000102	                STA @l UNSIGNED_MULT_B_LO
.194b10		af 04 01 00	lda $000104	                LDA @l UNSIGNED_MULT_AL_LO
.194b14		18		clc		                CLC
.194b15		65 2a		adc $034a	                ADC DOS_TEMP+2
.194b17		28		plp		                PLP
.194b18		2b		pld		                PLD
.194b19		ab		plb		                PLB
.194b1a		6b		rtl		                RTL
.194b1b						DOS_RTCCREATE
.194b1b		8b		phb		                PHB
.194b1c		0b		phd		                PHD
.194b1d		08		php		                PHP
.194b1e		48		pha		                PHA             ; begin setdbr macro
.194b1f		08		php		                PHP
.194b20		e2 20		sep #$20	                SEP #$20        ; set A short
.194b22		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194b24		48		pha		                PHA
.194b25		ab		plb		                PLB
.194b26		28		plp		                PLP
.194b27		68		pla		                PLA             ; end setdbr macro
.194b28		48		pha		                PHA             ; begin setdp macro
.194b29		08		php		                PHP
.194b2a		c2 20		rep #$20	                REP #$20        ; set A long
.194b2c		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194b2f		5b		tcd		                TCD
.194b30		28		plp		                PLP
.194b31		68		pla		                PLA             ; end setdp macro
.194b32		c2 10		rep #$10	                REP #$10        ; set X long
.194b34		e2 20		sep #$20	                SEP #$20        ; set A short
.194b36		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn off the updates to the clock
.194b3a		09 08		ora #$08	                ORA #%00001000
.194b3c		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194b40		af 0f 08 af	lda $af080f	                LDA @l RTC_CENTURY
.194b44		85 29		sta $0349	                STA DOS_TEMP+1
.194b46		af 0a 08 af	lda $af080a	                LDA @l RTC_YEAR             ; Get the year
.194b4a		85 28		sta $0348	                STA DOS_TEMP
.194b4c		c2 20		rep #$20	                REP #$20        ; set A long
.194b4e		a5 28		lda $0348	                LDA DOS_TEMP
.194b50		22 9e 4a 19	jsl $194a9e	                JSL BCD2BIN                 ; Convert it to binary
.194b54		85 28		sta $0348	                STA DOS_TEMP
.194b56		38		sec		                SEC                         ; Year is relative to 1980
.194b57		e9 bc 07	sbc #$07bc	                SBC #1980
.194b5a		c2 20		rep #$20	                REP #$20        ; set A long
.194b5c		0a		asl a		                ASL A
.194b5d		0a		asl a		                ASL A
.194b5e		0a		asl a		                ASL A
.194b5f		0a		asl a		                ASL A
.194b60		0a		asl a		                ASL A
.194b61		0a		asl a		                ASL A
.194b62		0a		asl a		                ASL A
.194b63		0a		asl a		                ASL A
.194b64		0a		asl a		                ASL A
.194b65		29 00 fe	and #$fe00	                AND #$FE00
.194b68		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b6b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b6d		e2 20		sep #$20	                SEP #$20        ; set A short
.194b6f		af 09 08 af	lda $af0809	                LDA @l RTC_MONTH            ; Get the month
.194b73		c2 20		rep #$20	                REP #$20        ; set A long
.194b75		29 ff 00	and #$00ff	                AND #$00FF
.194b78		22 9e 4a 19	jsl $194a9e	                JSL BCD2BIN                 ; Convert it to binary
.194b7c		29 ff 00	and #$00ff	                AND #$00FF                  ; Move the year to bits 15 - 9
.194b7f		0a		asl a		                ASL A
.194b80		0a		asl a		                ASL A
.194b81		0a		asl a		                ASL A
.194b82		0a		asl a		                ASL A
.194b83		0a		asl a		                ASL A
.194b84		29 e0 01	and #$01e0	                AND #$01E0                  ; Make sure only the month is covered
.194b87		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194b8a		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194b8c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194b8e		e2 20		sep #$20	                SEP #$20        ; set A short
.194b90		af 06 08 af	lda $af0806	                LDA @l RTC_DAY              ; Get the day
.194b94		c2 20		rep #$20	                REP #$20        ; set A long
.194b96		29 ff 00	and #$00ff	                AND #$00FF
.194b99		22 9e 4a 19	jsl $194a9e	                JSL BCD2BIN                 ; Convert it to binary
.194b9d		29 1f 00	and #$001f	                AND #$001F                  ; Make sure only the day is covered
.194ba0		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE   ; And save it to the creation date field
.194ba3		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194ba5		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194ba7		e2 20		sep #$20	                SEP #$20        ; set A short
.194ba9		af 04 08 af	lda $af0804	                LDA @l RTC_HRS              ; Get the hour
.194bad		29 1f		and #$1f	                AND #$1F                    ; Trim AM/PM bit
.194baf		c2 20		rep #$20	                REP #$20        ; set A long
.194bb1		29 ff 00	and #$00ff	                AND #$00FF
.194bb4		22 9e 4a 19	jsl $194a9e	                JSL BCD2BIN                 ; Convert it to binary
.194bb8		c2 20		rep #$20	                REP #$20        ; set A long
.194bba		0a		asl a		                ASL A
.194bbb		0a		asl a		                ASL A
.194bbc		0a		asl a		                ASL A
.194bbd		0a		asl a		                ASL A
.194bbe		0a		asl a		                ASL A
.194bbf		0a		asl a		                ASL A
.194bc0		0a		asl a		                ASL A
.194bc1		0a		asl a		                ASL A
.194bc2		0a		asl a		                ASL A
.194bc3		0a		asl a		                ASL A
.194bc4		0a		asl a		                ASL A
.194bc5		29 00 f8	and #$f800	                AND #$F800
.194bc8		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194bcb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bcd		e2 20		sep #$20	                SEP #$20        ; set A short
.194bcf		af 02 08 af	lda $af0802	                LDA @l RTC_MIN              ; Get the minute
.194bd3		c2 20		rep #$20	                REP #$20        ; set A long
.194bd5		29 ff 00	and #$00ff	                AND #$00FF
.194bd8		22 9e 4a 19	jsl $194a9e	                JSL BCD2BIN                 ; Convert it to binary
.194bdc		c2 20		rep #$20	                REP #$20        ; set A long
.194bde		0a		asl a		                ASL A
.194bdf		0a		asl a		                ASL A
.194be0		0a		asl a		                ASL A
.194be1		0a		asl a		                ASL A
.194be2		0a		asl a		                ASL A
.194be3		29 e0 07	and #$07e0	                AND #$07E0
.194be6		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194be9		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194beb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194bed		e2 20		sep #$20	                SEP #$20        ; set A short
.194bef		af 00 08 af	lda $af0800	                LDA @l RTC_SEC              ; Get the second
.194bf3		c2 20		rep #$20	                REP #$20        ; set A long
.194bf5		29 ff 00	and #$00ff	                AND #$00FF
.194bf8		22 9e 4a 19	jsl $194a9e	                JSL BCD2BIN                 ; Convert it to binary
.194bfc		c2 20		rep #$20	                REP #$20        ; set A long
.194bfe		29 1f 00	and #$001f	                AND #$001F
.194c01		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME   ; And save it to the creation time field
.194c04		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194c06		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c08		af 0e 08 af	lda $af080e	                LDA @l RTC_CTRL             ; Turn on the updates again
.194c0c		29 f7 00	and #$00f7	                AND #%11110111
.194c0f		8f 0e 08 af	sta $af080e	                STA @l RTC_CTRL
.194c13		28		plp		                PLP
.194c14		2b		pld		                PLD
.194c15		ab		plb		                PLB
.194c16		6b		rtl		                RTL
.194c17						DOS_CREATE
.194c17		8b		phb		                PHB
.194c18		0b		phd		                PHD
.194c19		08		php		                PHP
.194c1a		48		pha		                PHA             ; begin setdbr macro
.194c1b		08		php		                PHP
.194c1c		e2 20		sep #$20	                SEP #$20        ; set A short
.194c1e		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194c20		48		pha		                PHA
.194c21		ab		plb		                PLB
.194c22		28		plp		                PLP
.194c23		68		pla		                PLA             ; end setdbr macro
.194c24		48		pha		                PHA             ; begin setdp macro
.194c25		08		php		                PHP
.194c26		c2 20		rep #$20	                REP #$20        ; set A long
.194c28		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194c2b		5b		tcd		                TCD
.194c2c		28		plp		                PLP
.194c2d		68		pla		                PLA             ; end setdp macro
.194c2e		c2 30		rep #$30	                REP #$30        ; set A&X long
.194c30		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; DOS_TEMP := DOS_FD_PTR->PATH
.194c33		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c35		85 28		sta $0348	                STA DOS_TEMP
.194c37		c8		iny		                INY
.194c38		c8		iny		                INY
.194c39		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c3b		85 2a		sta $034a	                STA DOS_TEMP+2
.194c3d		e2 20		sep #$20	                SEP #$20        ; set A short
.194c3f		a0 00 00	ldy #$0000	                LDY #0
.194c42		a2 00 00	ldx #$0000	                LDX #0
.194c45		b7 28		lda [$0348],y	path_loop       LDA [DOS_TEMP],Y                ; Get a byte of the path
.194c47		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X             ; ... save it to the path buffer
.194c49		f0 04		beq $194c4f	                BEQ find_file                   ; If it's NULL, we're done
.194c4b		e8		inx		                INX
.194c4c		c8		iny		                INY
.194c4d		80 f6		bra $194c45	                BRA path_loop
.194c4f		22 fe 42 19	jsl $1942fe	find_file       JSL DOS_PARSE_PATH
.194c53		22 96 43 19	jsl $194396	                JSL DOS_FINDFILE
.194c57		90 07		bcc $194c60	                BCC set_device
.194c59		e2 20		sep #$20	                SEP #$20        ; set A short
.194c5b		a9 0b		lda #$0b	                LDA #DOS_ERR_FILEEXISTS
.194c5d		82 d2 00	brl $194d32	                BRL ret_failure
.194c60						set_device
.194c60		e2 20		sep #$20	                SEP #$20        ; set A short
.194c62		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194c65		a5 01		lda $0321	                LDA BIOS_DEV
.194c67		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c69						validate_name
.194c69		22 dd 46 19	jsl $1946dd	                JSL DOS_FREECLUS
.194c6d		b0 03		bcs $194c72	                BCS save_data
.194c6f		82 c4 00	brl $194d36	                BRL pass_failure
.194c72						save_data
.194c72		c2 20		rep #$20	                REP #$20        ; set A long
.194c74		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER
.194c77		a5 10		lda $0330	                LDA DOS_CLUS_ID             ; DOS_FD_PTR->FIRST_CLUSTER := DOS_CLUS_ID
.194c79		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c7b		c8		iny		                INY
.194c7c		c8		iny		                INY
.194c7d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194c7f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194c81		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; DOS_BUFF_PTR := DOS_FD_PTR->BUFFER
.194c84		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c86		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194c88		c8		iny		                INY
.194c89		c8		iny		                INY
.194c8a		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194c8c		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194c8e		22 ed 41 19	jsl $1941ed	                JSL DOS_PUTCLUSTER
.194c92		b0 00		bcs $194c94	                BCS find_dir
.194c94						find_dir
.194c94		c2 20		rep #$20	                REP #$20        ; set A long
.194c96		22 28 3d 19	jsl $193d28	                JSL DOS_DIRFINDFREE
.194c9a		b0 1a		bcs $194cb6	                BCS set_entry
.194c9c		c2 20		rep #$20	                REP #$20        ; set A long
.194c9e		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Failed to get the directory entry...
.194ca1		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y              ; DOS_CLUS_ID := DOS_FD_PTR->FIRST_CLUSTER
.194ca3		85 10		sta $0330	                STA DOS_CLUS_ID
.194ca5		c8		iny		                INY
.194ca6		c8		iny		                INY
.194ca7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ca9		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194cab		22 a5 49 19	jsl $1949a5	                JSL DELCLUSTER32                ; Delete the cluster
.194caf		e2 20		sep #$20	                SEP #$20        ; set A short
.194cb1		a9 08		lda #$08	                LDA #DOS_ERR_NODIR              ; Return that we couldn't read the directory
.194cb3		82 7c 00	brl $194d32	                BRL ret_failure
.194cb6						set_entry
.194cb6		e2 20		sep #$20	                SEP #$20        ; set A short
.194cb8		a0 00 00	ldy #$0000	                LDY #0
.194cbb		a9 00		lda #$00	                LDA #0                          ; NULL
.194cbd		97 18		sta [$0338],y	copy_dir_loop   STA [DOS_DIR_PTR],Y             ; Save it to the directory cluster
.194cbf		c8		iny		                INY
.194cc0		c0 20 00	cpy #$0020	                CPY #SIZE(DIRENTRY)
.194cc3		d0 f8		bne $194cbd	                BNE copy_dir_loop
.194cc5		a0 00 00	ldy #$0000	                LDY #0
.194cc8		b9 3a a0	lda $18a03a,y	name_loop       LDA DOS_SHORT_NAME,Y            ; Copy the name over
.194ccb		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194ccd		c8		iny		                INY
.194cce		c0 0b 00	cpy #$000b	                CPY #11
.194cd1		d0 f5		bne $194cc8	                BNE name_loop
.194cd3		c2 20		rep #$20	                REP #$20        ; set A long
.194cd5		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; DOS_DIR_PTR->CLUSTER_L := DOS_FD_PTR->FIRST_CLUSTER[15..0]
.194cd8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cda		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.194cdd		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cdf		a0 0c 00	ldy #$000c	                LDY #FILEDESC.FIRST_CLUSTER+2   ; DOS_DIR_PTR->CLUSTER_H := DOS_FD_PTR->FIRST_CLUSTER[31..16]
.194ce2		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194ce4		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.194ce7		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194ce9		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE              ; DOS_DIR_PTR->SIZE := DOS_FD_PTR->SIZE
.194cec		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cee		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE
.194cf1		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cf3		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194cf6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194cf8		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194cfb		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194cfd		a9 00 00	lda #$0000	                LDA #0                          ; Force create date-time to 0
.194d00		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; TODO: restore the RTC integration when that is working better.
.194d03		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d05		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME
.194d08		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194d0a		a0 16 00	ldy #$0016	                LDY #FILEDESC.CREATE_DATE       ; DOS_DIR_PTR->CREATE_DATE := DOS_FD_PTR->CREATE_DATE
.194d0d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d0f		a0 10 00	ldy #$0010	                LDY #DIRENTRY.CREATE_DATE
.194d12		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d14		a0 18 00	ldy #$0018	                LDY #DIRENTRY.MODIFIED_DATE     ; And DOS_DIR_PTR->MODIFIED_DATE
.194d17		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d19		a0 18 00	ldy #$0018	                LDY #FILEDESC.CREATE_TIME       ; DOS_DIR_PTR->CREATE_TIME := DOS_FD_PTR->CREATE_TIME
.194d1c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d1e		a0 0e 00	ldy #$000e	                LDY #DIRENTRY.CREATE_TIME
.194d21		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d23		a0 16 00	ldy #$0016	                LDY #DIRENTRY.MODIFIED_TIME     ; And DOS_DIR_PTR->MODIFIED_TIME
.194d26		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.194d28		c2 20		rep #$20	                REP #$20        ; set A long
.194d2a		22 e6 3d 19	jsl $193de6	                JSL DOS_DIRWRITE
.194d2e		b0 0b		bcs $194d3b	                BCS ret_success
.194d30		80 04		bra $194d36	                BRA pass_failure
.194d32						ret_failure
.194d32		e2 20		sep #$20	                SEP #$20        ; set A short
.194d34		85 0e		sta $032e	                STA DOS_STATUS
.194d36		28		plp		pass_failure    PLP
.194d37		2b		pld		                PLD
.194d38		ab		plb		                PLB
.194d39		18		clc		                CLC
.194d3a		6b		rtl		                RTL
.194d3b						ret_success
.194d3b		e2 20		sep #$20	                SEP #$20        ; set A short
.194d3d		64 0e		stz $032e	                STZ DOS_STATUS
.194d3f		28		plp		                PLP
.194d40		2b		pld		                PLD
.194d41		ab		plb		                PLB
.194d42		38		sec		                SEC
.194d43		6b		rtl		                RTL
.194d44						DOS_COPYPATH
.194d44		da		phx		                PHX
.194d45		5a		phy		                PHY
.194d46		8b		phb		                PHB
.194d47		0b		phd		                PHD
.194d48		08		php		                PHP
.194d49		48		pha		                PHA             ; begin setdbr macro
.194d4a		08		php		                PHP
.194d4b		e2 20		sep #$20	                SEP #$20        ; set A short
.194d4d		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194d4f		48		pha		                PHA
.194d50		ab		plb		                PLB
.194d51		28		plp		                PLP
.194d52		68		pla		                PLA             ; end setdbr macro
.194d53		48		pha		                PHA             ; begin setdp macro
.194d54		08		php		                PHP
.194d55		c2 20		rep #$20	                REP #$20        ; set A long
.194d57		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194d5a		5b		tcd		                TCD
.194d5b		28		plp		                PLP
.194d5c		68		pla		                PLA             ; end setdp macro
.194d5d		c2 30		rep #$30	                REP #$30        ; set A&X long
.194d5f		a9 00 00	lda #$0000	                LDA #0                  ; Set the DOS_PATH_BUFF to all zeros
.194d62		a2 00 00	ldx #$0000	                LDX #0
.194d65		95 e0		sta $0400,x	clr_loop        STA DOS_PATH_BUFF,X
.194d67		e8		inx		                INX
.194d68		e8		inx		                INX
.194d69		e0 00 01	cpx #$0100	                CPX #256
.194d6c		d0 f7		bne $194d65	                BNE clr_loop
.194d6e		a5 20		lda $0340	                LDA DOS_FD_PTR          ; Is the DOS_FD_PTR null?
.194d70		d0 04		bne $194d76	                BNE get_path            ; No: attempt to fetch the path
.194d72		a5 22		lda $0342	                LDA DOS_FD_PTR+2
.194d74		f0 27		beq $194d9d	                BEQ done                ; Yes: return an empty buffer
.194d76		a0 02 00	ldy #$0002	get_path        LDY #FILEDESC.PATH      ; Get the path buffer
.194d79		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d7b		85 28		sta $0348	                STA DOS_TEMP
.194d7d		c8		iny		                INY
.194d7e		c8		iny		                INY
.194d7f		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194d81		85 2a		sta $034a	                STA DOS_TEMP+2
.194d83		a5 28		lda $0348	                LDA DOS_TEMP            ; Is the path pointer NULL?
.194d85		d0 04		bne $194d8b	                BNE start_copy          ; No: start copying it
.194d87		a5 2a		lda $034a	                LDA DOS_TEMP+2
.194d89		f0 12		beq $194d9d	                BEQ done                ; Yes: return an empty buffer
.194d8b						start_copy
.194d8b		e2 20		sep #$20	                SEP #$20        ; set A short
.194d8d		a2 00 00	ldx #$0000	                LDX #0
.194d90		a0 00 00	ldy #$0000	                LDY #0
.194d93		b7 28		lda [$0348],y	loop            LDA [DOS_TEMP],Y
.194d95		95 e0		sta $0400,x	                STA DOS_PATH_BUFF,X
.194d97		f0 04		beq $194d9d	                BEQ done
.194d99		e8		inx		                INX
.194d9a		c8		iny		                INY
.194d9b		d0 f6		bne $194d93	                BNE loop
.194d9d		28		plp		done            PLP
.194d9e		2b		pld		                PLD
.194d9f		ab		plb		                PLB
.194da0		7a		ply		                PLY
.194da1		fa		plx		                PLX
.194da2		6b		rtl		                RTL

;******  Return to file: src\sdos.asm

.194da3						DOS_TEST
.194da3		8b		phb		                PHB
.194da4		0b		phd		                PHD
.194da5		08		php		                PHP
.194da6		48		pha		                PHA             ; begin setdbr macro
.194da7		08		php		                PHP
.194da8		e2 20		sep #$20	                SEP #$20        ; set A short
.194daa		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194dac		48		pha		                PHA
.194dad		ab		plb		                PLB
.194dae		28		plp		                PLP
.194daf		68		pla		                PLA             ; end setdbr macro
.194db0		48		pha		                PHA             ; begin setdp macro
.194db1		08		php		                PHP
.194db2		c2 20		rep #$20	                REP #$20        ; set A long
.194db4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194db7		5b		tcd		                TCD
.194db8		28		plp		                PLP
.194db9		68		pla		                PLA             ; end setdp macro
.194dba		c2 30		rep #$30	                REP #$30        ; set A&X long
.194dbc		a9 e2 4d	lda #$4de2	                LDA #<>src_file
.194dbf		8f 64 03 00	sta $000364	                STA @l DOS_STR1_PTR
.194dc3		a9 19 00	lda #$0019	                LDA #`src_file
.194dc6		8f 66 03 00	sta $000366	                STA @l DOS_STR1_PTR+2
.194dca		a9 ef 4d	lda #$4def	                LDA #<>dst_file
.194dcd		8f 68 03 00	sta $000368	                STA @l DOS_STR2_PTR
.194dd1		a9 19 00	lda #$0019	                LDA #`dst_file
.194dd4		8f 6a 03 00	sta $00036a	                STA @l DOS_STR2_PTR+2
.194dd8		22 14 56 19	jsl $195614	                JSL IF_COPY
.194ddc		b0 00		bcs $194dde	                BCS done
.194dde		28		plp		done            PLP
.194ddf		2b		pld		                PLD
.194de0		ab		plb		                PLB
.194de1		6b		rtl		                RTL
>194de2		40 73 3a 68 65 6c 6c 6f		src_file        .null "@s:hello.bas"
>194dea		2e 62 61 73 00
>194def		40 73 3a 68 65 6c 6c 6f		dst_file        .null "@s:hello2.bas"
>194df7		32 2e 62 61 73 00
.194dfd						IF_OPEN
.194dfd		da		phx		                PHX
.194dfe		5a		phy		                PHY
.194dff		0b		phd		                PHD
.194e00		8b		phb		                PHB
.194e01		08		php		                PHP
.194e02		48		pha		                PHA             ; begin setdbr macro
.194e03		08		php		                PHP
.194e04		e2 20		sep #$20	                SEP #$20        ; set A short
.194e06		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e08		48		pha		                PHA
.194e09		ab		plb		                PLB
.194e0a		28		plp		                PLP
.194e0b		68		pla		                PLA             ; end setdbr macro
.194e0c		48		pha		                PHA             ; begin setdp macro
.194e0d		08		php		                PHP
.194e0e		c2 20		rep #$20	                REP #$20        ; set A long
.194e10		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194e13		5b		tcd		                TCD
.194e14		28		plp		                PLP
.194e15		68		pla		                PLA             ; end setdp macro
.194e16		e2 20		sep #$20	                SEP #$20        ; set A short
.194e18		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Get the status to make sure a open is ok
.194e1b		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e1d		89 20		bit #$20	                BIT #FD_STAT_OPEN
.194e1f		f0 05		beq $194e26	                BEQ ok_to_open
.194e21		a9 0f		lda #$0f	                LDA #DOS_ERR_OPEN               ; If already open: throw an error
.194e23		82 87 06	brl $1954ad	                BRL IF_FAILURE
.194e26		22 44 4d 19	jsl $194d44	ok_to_open      JSL DOS_COPYPATH                ; Copy the path to the path buffer
.194e2a		22 96 43 19	jsl $194396	                JSL DOS_FINDFILE                ; Attempt to find the file
.194e2e		b0 03		bcs $194e33	                BCS is_found                    ; If OK: we found the file
.194e30		82 7e 06	brl $1954b1	                BRL IF_PASSFAILURE              ; Otherwise: pass the failure up the chain
.194e33						is_found
.194e33		e2 20		sep #$20	                SEP #$20        ; set A short
.194e35		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Set the device in the file descriptor
.194e38		a5 01		lda $0321	                LDA BIOS_DEV
.194e3a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e3c		c2 20		rep #$20	                REP #$20        ; set A long
.194e3e		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Set the buffer point to the one provided in the file
.194e41		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e43		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194e45		c8		iny		                INY
.194e46		c8		iny		                INY
.194e47		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194e49		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194e4b		22 b0 41 19	jsl $1941b0	                JSL DOS_GETCLUSTER              ; Attempt to load the cluster
.194e4f		b0 03		bcs $194e54	                BCS read_cluster
.194e51		82 5d 06	brl $1954b1	                BRL IF_PASSFAILURE
.194e54		a0 0a 00	ldy #$000a	read_cluster    LDY #FILEDESC.FIRST_CLUSTER     ; Set the first cluster in the file descriptor
.194e57		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e59		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e5b		c8		iny		                INY
.194e5c		c8		iny		                INY
.194e5d		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e5f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e61		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Set the current cluster in the file descriptor
.194e64		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194e66		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e68		c8		iny		                INY
.194e69		c8		iny		                INY
.194e6a		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194e6c		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e6e		a0 1c 00	ldy #$001c	                LDY #DIRENTRY.SIZE              ; Copy the filesize from the directory entry to the file descriptor
.194e71		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e73		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE
.194e76		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e78		a0 1e 00	ldy #$001e	                LDY #DIRENTRY.SIZE+2
.194e7b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.194e7d		a0 14 00	ldy #$0014	                LDY #FILEDESC.SIZE+2
.194e80		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e82		e2 20		sep #$20	                SEP #$20        ; set A short
.194e84		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Mark file as open and readable
.194e87		a9 21		lda #$21	                LDA #FD_STAT_OPEN | FD_STAT_READ
.194e89		17 20		ora [$0340],y	                ORA [DOS_FD_PTR],Y
.194e8b		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194e8d		82 28 06	brl $1954b8	                BRL IF_SUCCESS
.194e90						IF_CREATE
.194e90		da		phx		                PHX
.194e91		5a		phy		                PHY
.194e92		0b		phd		                PHD
.194e93		8b		phb		                PHB
.194e94		08		php		                PHP
.194e95		48		pha		                PHA             ; begin setdbr macro
.194e96		08		php		                PHP
.194e97		e2 20		sep #$20	                SEP #$20        ; set A short
.194e99		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194e9b		48		pha		                PHA
.194e9c		ab		plb		                PLB
.194e9d		28		plp		                PLP
.194e9e		68		pla		                PLA             ; end setdbr macro
.194e9f		48		pha		                PHA             ; begin setdp macro
.194ea0		08		php		                PHP
.194ea1		c2 20		rep #$20	                REP #$20        ; set A long
.194ea3		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ea6		5b		tcd		                TCD
.194ea7		28		plp		                PLP
.194ea8		68		pla		                PLA             ; end setdp macro
.194ea9		22 17 4c 19	jsl $194c17	                JSL DOS_CREATE                  ; Attempt to create the file
.194ead		90 18		bcc $194ec7	                BCC pass_failure                ; If it fails: pass the failure up the chain
.194eaf		c2 30		rep #$30	                REP #$30        ; set A&X long
.194eb1		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Sets the current cluster to 0 to make sure the next write appends
.194eb4		a9 00 00	lda #$0000	                LDA #0
.194eb7		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194eb9		c8		iny		                INY
.194eba		c8		iny		                INY
.194ebb		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194ebd		e2 20		sep #$20	                SEP #$20        ; set A short
.194ebf		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS
.194ec2		a9 22		lda #$22	                LDA #FD_STAT_OPEN | FD_STAT_WRITE   ; Set the file to open and APPEND only
.194ec4		82 f1 05	brl $1954b8	                BRL IF_SUCCESS
.194ec7		82 e3 05	brl $1954ad	pass_failure    BRL IF_FAILURE
.194eca						IF_CLOSE
.194eca		da		phx		                PHX
.194ecb		5a		phy		                PHY
.194ecc		0b		phd		                PHD
.194ecd		8b		phb		                PHB
.194ece		08		php		                PHP
.194ecf		48		pha		                PHA             ; begin setdbr macro
.194ed0		08		php		                PHP
.194ed1		e2 20		sep #$20	                SEP #$20        ; set A short
.194ed3		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194ed5		48		pha		                PHA
.194ed6		ab		plb		                PLB
.194ed7		28		plp		                PLP
.194ed8		68		pla		                PLA             ; end setdbr macro
.194ed9		48		pha		                PHA             ; begin setdp macro
.194eda		08		php		                PHP
.194edb		c2 20		rep #$20	                REP #$20        ; set A long
.194edd		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194ee0		5b		tcd		                TCD
.194ee1		28		plp		                PLP
.194ee2		68		pla		                PLA             ; end setdp macro
.194ee3		e2 20		sep #$20	                SEP #$20        ; set A short
.194ee5		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS            ; Check to see if we were writing the file
.194ee8		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194eea		89 02		bit #$02	                BIT #FD_STAT_WRITE
.194eec		f0 09		beq $194ef7	                BEQ set_flag                    ; No, just mark it closed
.194eee		22 63 4f 19	jsl $194f63	                JSL IF_WRITE                    ; Attempt to write the cluster
.194ef2		b0 03		bcs $194ef7	                BCS set_flag
.194ef4		82 ba 05	brl $1954b1	                BRL IF_PASSFAILURE              ; If there was a problem, pass it up the chain
.194ef7		22 b2 55 19	jsl $1955b2	set_flag        JSL IF_FREEFD                   ; Free the file descriptor as well
.194efb		82 ba 05	brl $1954b8	                BRL IF_SUCCESS
.194efe						IF_READ
.194efe		da		phx		                PHX
.194eff		5a		phy		                PHY
.194f00		0b		phd		                PHD
.194f01		8b		phb		                PHB
.194f02		08		php		                PHP
.194f03		48		pha		                PHA             ; begin setdbr macro
.194f04		08		php		                PHP
.194f05		e2 20		sep #$20	                SEP #$20        ; set A short
.194f07		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f09		48		pha		                PHA
.194f0a		ab		plb		                PLB
.194f0b		28		plp		                PLP
.194f0c		68		pla		                PLA             ; end setdbr macro
.194f0d		48		pha		                PHA             ; begin setdp macro
.194f0e		08		php		                PHP
.194f0f		c2 20		rep #$20	                REP #$20        ; set A long
.194f11		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f14		5b		tcd		                TCD
.194f15		28		plp		                PLP
.194f16		68		pla		                PLA             ; end setdp macro
.194f17		c2 10		rep #$10	                REP #$10        ; set X long
.194f19		e2 20		sep #$20	                SEP #$20        ; set A short
.194f1b						get_dev
.194f1b		e2 20		sep #$20	                SEP #$20        ; set A short
.194f1d		a0 01 00	ldy #$0001	                LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194f20		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f22		85 01		sta $0321	                STA BIOS_DEV
.194f24		22 18 3f 19	jsl $193f18	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194f28		c2 20		rep #$20	                REP #$20        ; set A long
.194f2a		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194f2d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f2f		85 10		sta $0330	                STA DOS_CLUS_ID
.194f31		c8		iny		                INY
.194f32		c8		iny		                INY
.194f33		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f35		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194f37		22 c4 45 19	jsl $1945c4	                JSL NEXTCLUSTER                 ; Find the next cluster of the file
.194f3b		90 13		bcc $194f50	                BCC pass_failure                ; If not OK: pass the failure up the chain
.194f3d		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194f40		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f42		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f44		c8		iny		                INY
.194f45		c8		iny		                INY
.194f46		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f48		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f4a		22 b0 41 19	jsl $1941b0	                JSL DOS_GETCLUSTER              ; Get the cluster
.194f4e		b0 03		bcs $194f53	                BCS ret_success                 ; If ok: return success
.194f50						pass_failure
.194f50		82 5e 05	brl $1954b1	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194f53		a0 06 00	ldy #$0006	ret_success     LDY #FILEDESC.CLUSTER           ; Save the new cluster as the file's current cluster
.194f56		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194f58		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f5a		c8		iny		                INY
.194f5b		c8		iny		                INY
.194f5c		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.194f5e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.194f60		82 55 05	brl $1954b8	                BRL IF_SUCCESS
.194f63						IF_WRITE
.194f63		da		phx		                PHX
.194f64		5a		phy		                PHY
.194f65		0b		phd		                PHD
.194f66		8b		phb		                PHB
.194f67		08		php		                PHP
.194f68		48		pha		                PHA             ; begin setdbr macro
.194f69		08		php		                PHP
.194f6a		e2 20		sep #$20	                SEP #$20        ; set A short
.194f6c		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194f6e		48		pha		                PHA
.194f6f		ab		plb		                PLB
.194f70		28		plp		                PLP
.194f71		68		pla		                PLA             ; end setdbr macro
.194f72		48		pha		                PHA             ; begin setdp macro
.194f73		08		php		                PHP
.194f74		c2 20		rep #$20	                REP #$20        ; set A long
.194f76		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194f79		5b		tcd		                TCD
.194f7a		28		plp		                PLP
.194f7b		68		pla		                PLA             ; end setdp macro
.194f7c		c2 10		rep #$10	                REP #$10        ; set X long
.194f7e		e2 20		sep #$20	                SEP #$20        ; set A short
.194f80		a0 01 00	ldy #$0001	get_dev         LDY #FILEDESC.DEV               ; Get the device number from the file descriptor
.194f83		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f85		85 01		sta $0321	                STA BIOS_DEV
.194f87		22 18 3f 19	jsl $193f18	                JSL DOS_MOUNT                   ; Make sure the device is mounted (if needed)
.194f8b		c2 20		rep #$20	                REP #$20        ; set A long
.194f8d		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER            ; Get the pointer to the file's cluster buffer
.194f90		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f92		85 1c		sta $033c	                STA DOS_BUFF_PTR
.194f94		c8		iny		                INY
.194f95		c8		iny		                INY
.194f96		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f98		85 1e		sta $033e	                STA DOS_BUFF_PTR+2
.194f9a		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; Get the file's current cluster
.194f9d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194f9f		85 10		sta $0330	                STA DOS_CLUS_ID
.194fa1		c8		iny		                INY
.194fa2		c8		iny		                INY
.194fa3		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fa5		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194fa7		d0 1a		bne $194fc3	                BNE rewrite_cluster             ; If the cluster ID <> 0, overwrite it
.194fa9		a5 10		lda $0330	                LDA DOS_CLUS_ID
.194fab		d0 16		bne $194fc3	                BNE rewrite_cluster
.194fad		a0 0a 00	ldy #$000a	                LDY #FILEDESC.FIRST_CLUSTER     ; Get the file's first cluster
.194fb0		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fb2		85 10		sta $0330	                STA DOS_CLUS_ID
.194fb4		c8		iny		                INY
.194fb5		c8		iny		                INY
.194fb6		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.194fb8		85 12		sta $0332	                STA DOS_CLUS_ID+2
.194fba		22 e5 49 19	jsl $1949e5	                JSL DOS_APPENDCLUS              ; Append the cluster
.194fbe		b0 0c		bcs $194fcc	                BCS ret_success                 ; If OK: return success
.194fc0		82 ee 04	brl $1954b1	                BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194fc3		22 ed 41 19	jsl $1941ed	rewrite_cluster JSL DOS_PUTCLUSTER              ; Over-write the cluster
.194fc7		b0 03		bcs $194fcc	                BCS ret_success                 ; If ok: return success
.194fc9		82 e5 04	brl $1954b1	pass_failure    BRL IF_PASSFAILURE              ; Otherwise: bubble up the failure
.194fcc		82 e9 04	brl $1954b8	ret_success     BRL IF_SUCCESS
.194fcf						IF_DIROPEN
.194fcf		da		phx		                PHX
.194fd0		5a		phy		                PHY
.194fd1		0b		phd		                PHD
.194fd2		8b		phb		                PHB
.194fd3		08		php		                PHP
.194fd4		48		pha		                PHA             ; begin setdbr macro
.194fd5		08		php		                PHP
.194fd6		e2 20		sep #$20	                SEP #$20        ; set A short
.194fd8		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.194fda		48		pha		                PHA
.194fdb		ab		plb		                PLB
.194fdc		28		plp		                PLP
.194fdd		68		pla		                PLA             ; end setdbr macro
.194fde		48		pha		                PHA             ; begin setdp macro
.194fdf		08		php		                PHP
.194fe0		c2 20		rep #$20	                REP #$20        ; set A long
.194fe2		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.194fe5		5b		tcd		                TCD
.194fe6		28		plp		                PLP
.194fe7		68		pla		                PLA             ; end setdp macro
.194fe8		c2 30		rep #$30	                REP #$30        ; set A&X long
.194fea		22 44 4d 19	jsl $194d44	                JSL DOS_COPYPATH            ; Copy the path from the file descriptor to the path buffer
.194fee		22 fe 42 19	jsl $1942fe	                JSL DOS_PARSE_PATH          ; Parse the path
.194ff2		22 18 3f 19	jsl $193f18	                JSL DOS_MOUNT               ; Make sure we've mounted the SDC.
.194ff6		b0 03		bcs $194ffb	                BCS get_root_dir            ; If successful: get the root directory
.194ff8		82 b6 04	brl $1954b1	                BRL IF_PASSFAILURE          ; Otherwise: pass the error up the chain
.194ffb						get_root_dir
.194ffb		c2 30		rep #$30	                REP #$30        ; set A&X long
.194ffd		22 cd 3b 19	jsl $193bcd	                JSL DOS_DIROPEN
.195001		b0 03		bcs $195006	                BCS success
.195003		82 ab 04	brl $1954b1	                BRL IF_PASSFAILURE
.195006		82 af 04	brl $1954b8	success         BRL IF_SUCCESS
.195009						IF_DIRNEXT
.195009		5c 67 3c 19	jmp $193c67	                JML DOS_DIRNEXT
.19500d						IF_DELETE
.19500d		da		phx		                PHX
.19500e		5a		phy		                PHY
.19500f		0b		phd		                PHD
.195010		8b		phb		                PHB
.195011		08		php		                PHP
.195012		48		pha		                PHA             ; begin setdbr macro
.195013		08		php		                PHP
.195014		e2 20		sep #$20	                SEP #$20        ; set A short
.195016		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195018		48		pha		                PHA
.195019		ab		plb		                PLB
.19501a		28		plp		                PLP
.19501b		68		pla		                PLA             ; end setdbr macro
.19501c		48		pha		                PHA             ; begin setdp macro
.19501d		08		php		                PHP
.19501e		c2 20		rep #$20	                REP #$20        ; set A long
.195020		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195023		5b		tcd		                TCD
.195024		28		plp		                PLP
.195025		68		pla		                PLA             ; end setdp macro
.195026		c2 30		rep #$30	                REP #$30        ; set A&X long
.195028		22 96 43 19	jsl $194396	                JSL DOS_FINDFILE
.19502c		b0 03		bcs $195031	                BCS get_first_clus
.19502e		82 80 04	brl $1954b1	                BRL IF_PASSFAILURE
.195031						get_first_clus
.195031		a0 1a 00	ldy #$001a	                LDY #DIRENTRY.CLUSTER_L
.195034		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.195036		85 10		sta $0330	                STA DOS_CLUS_ID
.195038		a0 14 00	ldy #$0014	                LDY #DIRENTRY.CLUSTER_H
.19503b		b7 18		lda [$0338],y	                LDA [DOS_DIR_PTR],Y
.19503d		85 12		sta $0332	                STA DOS_CLUS_ID+2
.19503f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195041		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.195044		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195046		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.195049		22 c4 45 19	jsl $1945c4	del_loop        JSL NEXTCLUSTER
.19504d		90 2f		bcc $19507e	                BCC del_one
.19504f		a5 10		lda $0330	                LDA DOS_CLUS_ID
.195051		8d 2e a0	sta $18a02e	                STA DOS_NEXT_CLUS
.195054		a5 12		lda $0332	                LDA DOS_CLUS_ID+2
.195056		8d 30 a0	sta $18a030	                STA DOS_NEXT_CLUS+2
.195059		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.19505c		85 10		sta $0330	                STA DOS_CLUS_ID
.19505e		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.195061		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195063		22 a5 49 19	jsl $1949a5	                JSL DELCLUSTER32
.195067		b0 03		bcs $19506c	                BCS go_next
.195069		82 45 04	brl $1954b1	                BRL IF_PASSFAILURE
.19506c						go_next
.19506c		ad 2e a0	lda $18a02e	                LDA DOS_NEXT_CLUS
.19506f		85 10		sta $0330	                STA DOS_CLUS_ID
.195071		8d 2a a0	sta $18a02a	                STA DOS_CURR_CLUS
.195074		ad 30 a0	lda $18a030	                LDA DOS_NEXT_CLUS+2
.195077		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195079		8d 2c a0	sta $18a02c	                STA DOS_CURR_CLUS+2
.19507c		80 cb		bra $195049	                BRA del_loop
.19507e						del_one
.19507e		ad 2a a0	lda $18a02a	                LDA DOS_CURR_CLUS
.195081		85 10		sta $0330	                STA DOS_CLUS_ID
.195083		ad 2c a0	lda $18a02c	                LDA DOS_CURR_CLUS+2
.195086		85 12		sta $0332	                STA DOS_CLUS_ID+2
.195088		22 ff 48 19	jsl $1948ff	                JSL DELCLUSTER
.19508c		b0 03		bcs $195091	                BCS free_dir_entry
.19508e		82 20 04	brl $1954b1	                BRL IF_PASSFAILURE
.195091						free_dir_entry
.195091		e2 20		sep #$20	                SEP #$20        ; set A short
.195093		a0 00 00	ldy #$0000	                LDY #DIRENTRY.SHORTNAME         ; Flag the directory entry as deleted
.195096		a9 e5		lda #$e5	                LDA #DOS_DIR_ENT_UNUSED
.195098		97 18		sta [$0338],y	                STA [DOS_DIR_PTR],Y
.19509a		22 e6 3d 19	jsl $193de6	                JSL DOS_DIRWRITE                ; Write the directory entry back
.19509e		b0 03		bcs $1950a3	                BCS ret_success
.1950a0		82 0e 04	brl $1954b1	                BRL IF_PASSFAILURE
.1950a3		82 12 04	brl $1954b8	ret_success     BRL IF_SUCCESS
.1950a6						IF_DIRREAD
.1950a6		da		phx		                PHX
.1950a7		5a		phy		                PHY
.1950a8		0b		phd		                PHD
.1950a9		8b		phb		                PHB
.1950aa		08		php		                PHP
.1950ab		48		pha		                PHA             ; begin setdbr macro
.1950ac		08		php		                PHP
.1950ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1950af		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950b1		48		pha		                PHA
.1950b2		ab		plb		                PLB
.1950b3		28		plp		                PLP
.1950b4		68		pla		                PLA             ; end setdbr macro
.1950b5		48		pha		                PHA             ; begin setdp macro
.1950b6		08		php		                PHP
.1950b7		c2 20		rep #$20	                REP #$20        ; set A long
.1950b9		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950bc		5b		tcd		                TCD
.1950bd		28		plp		                PLP
.1950be		68		pla		                PLA             ; end setdp macro
.1950bf		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950c1		22 96 43 19	jsl $194396	                JSL DOS_FINDFILE
.1950c5		b0 03		bcs $1950ca	                BCS success
.1950c7		82 e3 03	brl $1954ad	                BRL IF_FAILURE
.1950ca		82 eb 03	brl $1954b8	success         BRL IF_SUCCESS
.1950cd						IF_DIRWRITE
.1950cd		5c e6 3d 19	jmp $193de6	                JML DOS_DIRWRITE
.1950d1						IF_LOAD
.1950d1		da		phx		                PHX
.1950d2		5a		phy		                PHY
.1950d3		0b		phd		                PHD
.1950d4		8b		phb		                PHB
.1950d5		08		php		                PHP
.1950d6		48		pha		                PHA             ; begin setdbr macro
.1950d7		08		php		                PHP
.1950d8		e2 20		sep #$20	                SEP #$20        ; set A short
.1950da		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1950dc		48		pha		                PHA
.1950dd		ab		plb		                PLB
.1950de		28		plp		                PLP
.1950df		68		pla		                PLA             ; end setdbr macro
.1950e0		48		pha		                PHA             ; begin setdp macro
.1950e1		08		php		                PHP
.1950e2		c2 20		rep #$20	                REP #$20        ; set A long
.1950e4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1950e7		5b		tcd		                TCD
.1950e8		28		plp		                PLP
.1950e9		68		pla		                PLA             ; end setdp macro
.1950ea		c2 30		rep #$30	                REP #$30        ; set A&X long
.1950ec		22 fd 4d 19	jsl $194dfd	                JSL IF_OPEN
.1950f0		b0 03		bcs $1950f5	                BCS setup                   ; If success: start setting things up
.1950f2		82 bc 03	brl $1954b1	                BRL IF_PASSFAILURE          ; Otherwise: pass the failure up the chain
.1950f5						setup
.1950f5		c2 20		rep #$20	                REP #$20        ; set A long
.1950f7		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE          ; Record the size of the file in DOS_FILE_SIZE
.1950fa		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1950fc		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1950fe		c8		iny		                INY
.1950ff		c8		iny		                INY
.195100		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195102		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195104		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER        ; Set up the source pointer
.195107		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195109		85 30		sta $0350	                STA DOS_SRC_PTR
.19510b		c8		iny		                INY
.19510c		c8		iny		                INY
.19510d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19510f		85 32		sta $0352	                STA DOS_SRC_PTR+2
.195111		a5 36		lda $0356	                LDA DOS_DST_PTR+2           ; Is there a destination address in RAM?
.195113		c9 40 00	cmp #$0040	                CMP #$0040
.195116		b0 04		bcs $19511c	                BGE load_by_type            ; No: try to load it by type
.195118		5c 62 53 19	jmp $195362	                JML IF_LOADRAW              ; Otherwise, load it to the supplied destination
.19511c		a0 08 00	ldy #$0008	load_by_type    LDY #8                      ; Point to the first extension byte
.19511f		a2 00 00	ldx #$0000	                LDX #0                      ; and the first byte of the table
.195122						type_loop
.195122		e2 20		sep #$20	                SEP #$20        ; set A short
.195124		bf 68 51 19	lda $195168,x	                LDA LOAD_TYPE_TABLE,X       ; Get 1st extension character of the entry
.195128		f0 37		beq $195161	                BEQ no_match                ; If NULL... we didn't get a match
.19512a		d9 3a a0	cmp $18a03a,y	                CMP DOS_SHORT_NAME,Y        ; Get the character of the extension
.19512d		d0 28		bne $195157	                BNE next_entry              ; If they don't match, try the next entry
.19512f		bf 69 51 19	lda $195169,x	                LDA LOAD_TYPE_TABLE+1,X     ; Get 2nd extension character of the entry
.195133		d9 3b a0	cmp $18a03b,y	                CMP DOS_SHORT_NAME+1,Y      ; Get the 2nd character of the extension
.195136		d0 1f		bne $195157	                BNE next_entry              ; If they don't match, try the next entry
.195138		bf 6a 51 19	lda $19516a,x	                LDA LOAD_TYPE_TABLE+2,X     ; Get 3rd extension character of the entry
.19513c		d9 3c a0	cmp $18a03c,y	                CMP DOS_SHORT_NAME+2,Y      ; Get the 3rd character of the extension
.19513f		d0 16		bne $195157	                BNE next_entry              ; If they don't match, try the next entry
.195141		c2 20		rep #$20	                REP #$20        ; set A long
.195143		bf 6b 51 19	lda $19516b,x	                LDA LOAD_TYPE_TABLE+3,X     ; Get the low word of the address
.195147		85 28		sta $0348	                STA DOS_TEMP                ; Save it to the jump vector
.195149		e2 20		sep #$20	                SEP #$20        ; set A short
.19514b		bf 6d 51 19	lda $19516d,x	                LDA LOAD_TYPE_TABLE+5,X     ; Get the high byte of the address
.19514f		85 2a		sta $034a	                STA DOS_TEMP+2              ; Save it to the jump vector
.195151		a2 00 00	ldx #$0000	                LDX #0
.195154		dc 48 03	jmp [$0348]	                JML [DOS_TEMP]              ; Jump to the loading routine
.195157						next_entry
.195157		c2 30		rep #$30	                REP #$30        ; set A&X long
.195159		8a		txa		                TXA
.19515a		18		clc		                CLC
.19515b		69 06 00	adc #$0006	                ADC #6
.19515e		aa		tax		                TAX
.19515f		80 c1		bra $195122	                BRA type_loop               ; And check it against the file
.195161						no_match
.195161		e2 20		sep #$20	                SEP #$20        ; set A short
.195163		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC         ; Return an not-executable error
.195165		82 45 03	brl $1954ad	                BRL IF_FAILURE
>195168		50 47 58			LOAD_TYPE_TABLE .text "PGX"                 ; "PGX" --> IF_LOADPGX
>19516b		75 51				                .word <>IF_LOADPGX
>19516d		19				                .byte `IF_LOADPGX
>19516e		50 47 5a			                .text "PGZ"                 ; "PGZ" --> IF_LOADPGZ
>195171		fd 51				                .word <>IF_LOADPGZ
>195173		19				                .byte `IF_LOADPGZ
>195174		00				                .byte 0
.195175						IF_LOADPGX
.195175		c2 10		rep #$10	                REP #$10        ; set X long
.195177		e2 20		sep #$20	                SEP #$20        ; set A short
.195179		a0 00 00	ldy #$0000	                LDY #0
.19517c		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "PGX" signature
.19517e		c9 50		cmp #$50	                CMP #'P'
.195180		d0 15		bne $195197	                BNE fail_sig                        ; If not found, fail
.195182		c8		iny		                INY
.195183		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195185		c9 47		cmp #$47	                CMP #'G'
.195187		d0 0e		bne $195197	                BNE fail_sig
.195189		c8		iny		                INY
.19518a		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19518c		c9 58		cmp #$58	                CMP #'X'
.19518e		d0 07		bne $195197	                BNE fail_sig
.195190		c8		iny		                INY                                 ; Check for CPU and version code ($01 for 65816)
.195191		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.195193		c9 01		cmp #$01	                CMP #$01
.195195		f0 17		beq $1951ae	                BEQ get_dest                        ; All passes: go to get the destination address
.195197		a9 10		lda #$10	fail_sig        LDA #DOS_ERR_PGXSIG                 ; Fail with a PGXSIG error code
.195199		22 ad 54 19	jsl $1954ad	                JSL IF_FAILURE
.19519d						adjust_size
.19519d		c2 20		rep #$20	                REP #$20        ; set A long
.19519f		38		sec		                SEC                                 ; Subtract the 8 bytes of the header from the file size
.1951a0		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1951a2		e9 08 00	sbc #$0008	                SBC #8
.1951a5		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1951a7		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951a9		e9 00 00	sbc #$0000	                SBC #0
.1951ac		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1951ae						get_dest
.1951ae		c2 20		rep #$20	                REP #$20        ; set A long
.1951b0		c8		iny		                INY
.1951b1		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get low word of destination address
.1951b3		85 34		sta $0354	                STA DOS_DST_PTR                     ; And save it to the destination pointer
.1951b5		85 3c		sta $035c	                STA DOS_RUN_PTR                     ; And save it to the RUN pointer
.1951b7		c8		iny		                INY
.1951b8		c8		iny		                INY
.1951b9		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Get high word of destination address
.1951bb		85 36		sta $0356	                STA DOS_DST_PTR+2
.1951bd		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.1951bf		c8		iny		                INY                                 ; Point to the first data byte
.1951c0		c8		iny		                INY
.1951c1						copy_loop
.1951c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1951c3		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Read a byte from the file
.1951c5		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Write it to the destination
.1951c7		c2 20		rep #$20	                REP #$20        ; set A long
.1951c9		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Move to the next destination location
.1951cb		d0 02		bne $1951cf	                BNE dec_file_size
.1951cd		e6 36		inc $0356	                INC DOS_DST_PTR+2
.1951cf		38		sec		dec_file_size   SEC                                 ; Count down the number of bytes to read
.1951d0		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.1951d2		e9 01 00	sbc #$0001	                SBC #1
.1951d5		85 2c		sta $034c	                STA DOS_FILE_SIZE
.1951d7		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951d9		e9 00 00	sbc #$0000	                SBC #0
.1951dc		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.1951de		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.1951e0		d0 04		bne $1951e6	                BNE next_byte
.1951e2		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1951e4		f0 14		beq $1951fa	                BEQ done                            ; Yes: we're done
.1951e6		c8		iny		next_byte       INY                                 ; Otherwise, move to the next source location
.1951e7		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE                    ; Are we at the end of the cluster?
.1951ea		d0 d5		bne $1951c1	                BNE copy_loop                       ; No: keep copying
.1951ec		22 c8 46 19	jsl $1946c8	                JSL DOS_READNEXT                    ; Yes: Load the next cluster
.1951f0		b0 03		bcs $1951f5	                BCS next_cluster
.1951f2		82 bc 02	brl $1954b1	                BRL IF_PASSFAILURE                  ; If failed: pass that up the chain
.1951f5		a0 00 00	ldy #$0000	next_cluster    LDY #0
.1951f8		80 c7		bra $1951c1	                BRA copy_loop                       ; Go back to copying
.1951fa		82 bb 02	brl $1954b8	done            BRL IF_SUCCESS
.1951fd						IF_LOADPGZ
.1951fd		48		pha		                PHA             ; begin setdbr macro
.1951fe		08		php		                PHP
.1951ff		e2 20		sep #$20	                SEP #$20        ; set A short
.195201		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195203		48		pha		                PHA
.195204		ab		plb		                PLB
.195205		28		plp		                PLP
.195206		68		pla		                PLA             ; end setdbr macro
.195207		48		pha		                PHA             ; begin setdp macro
.195208		08		php		                PHP
.195209		c2 20		rep #$20	                REP #$20        ; set A long
.19520b		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19520e		5b		tcd		                TCD
.19520f		28		plp		                PLP
.195210		68		pla		                PLA             ; end setdp macro
.195211		c2 30		rep #$30	                REP #$30        ; set A&X long
.195213		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE                  ; Get the file size
.195216		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195218		85 2c		sta $034c	                STA DOS_FILE_SIZE                   ; And save it to DOS_FILE_SIZE
.19521a		c8		iny		                INY
.19521b		c8		iny		                INY
.19521c		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19521e		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.195220		e2 20		sep #$20	                SEP #$20        ; set A short
.195222		a0 00 00	ldy #$0000	                LDY #0                              ; Starting at the beginning of the file
.195225		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y                 ; Check for "Z" signature
.195227		c9 5a		cmp #$5a	                CMP #'Z'
.195229		f0 06		beq $195231	                BEQ start_block                     ; If found, get the starting address
.19522b		a9 19		lda #$19	fail_sig        LDA #DOS_ERR_PGZSIG                 ; Fail with a PGZSIG error code
.19522d		22 ad 54 19	jsl $1954ad	                JSL IF_FAILURE
.195231		c8		iny		start_block     INY
.195232						get_addr
.195232		e2 20		sep #$20	                SEP #$20        ; set A short
.195234		22 b7 52 19	jsl $1952b7	                JSL IF_FILE_EOF                     ; Check if EOF
.195238		90 03		bcc $19523d	                BCC get_addr_lo
.19523a		82 7b 02	brl $1954b8	done            BRL IF_SUCCESS                      ; If so: we're done
.19523d		22 f5 52 19	jsl $1952f5	get_addr_lo     JSL IF_READ_NEXT                    ; Get the next byte
.195241		90 47		bcc $19528a	                BCC ret_failure                     ; Got an error: pass it on
.195243		85 34		sta $0354	                STA DOS_DST_PTR                     ; Save it as the low byte of the destination address
.195245		22 f5 52 19	jsl $1952f5	                JSL IF_READ_NEXT                    ; Get the next byte
.195249		90 3f		bcc $19528a	                BCC ret_failure                     ; Got an error: pass it on
.19524b		85 35		sta $0355	                STA DOS_DST_PTR+1                   ; Save it as the middle byte of the destination address
.19524d		22 f5 52 19	jsl $1952f5	                JSL IF_READ_NEXT                    ; Get the next byte
.195251		90 37		bcc $19528a	                BCC ret_failure                     ; Got an error: pass it on
.195253		85 36		sta $0356	                STA DOS_DST_PTR+2                   ; Save it as the high byte of the destination address
.195255		22 f5 52 19	jsl $1952f5	                JSL IF_READ_NEXT                    ; Get the next byte
.195259		90 2f		bcc $19528a	                BCC ret_failure                     ; Got an error: pass it on
.19525b		85 50		sta $0370	                STA DOS_BLOCK_SIZE                  ; Save it as the low byte of the block size
.19525d		22 f5 52 19	jsl $1952f5	                JSL IF_READ_NEXT                    ; Get the next byte
.195261		90 27		bcc $19528a	                BCC ret_failure                     ; Got an error: pass it on
.195263		85 51		sta $0371	                STA DOS_BLOCK_SIZE+1                ; Save it as the middle byte of the block size
.195265		22 f5 52 19	jsl $1952f5	                JSL IF_READ_NEXT                    ; Get the next byte
.195269		90 1f		bcc $19528a	                BCC ret_failure                     ; Got an error: pass it on
.19526b		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2                ; Save it as the high byte of the block size
.19526d		64 53		stz $0373	                STZ DOS_BLOCK_SIZE+3                ; And MSB is 0
.19526f		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; If DOS_BLOCK_SIZE <> 0, we have data to load
.195271		d0 1a		bne $19528d	                BNE read_data
.195273		a5 51		lda $0371	                LDA DOS_BLOCK_SIZE+1
.195275		d0 16		bne $19528d	                BNE read_data
.195277		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.195279		d0 12		bne $19528d	                BNE read_data
.19527b		a5 34		lda $0354	                LDA DOS_DST_PTR                     ; If DOS_BLOCK_SIZE = 0, we have the run address
.19527d		85 3c		sta $035c	                STA DOS_RUN_PTR
.19527f		a5 35		lda $0355	                LDA DOS_DST_PTR+1
.195281		85 3d		sta $035d	                STA DOS_RUN_PTR+1
.195283		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.195285		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195287		82 2e 02	brl $1954b8	                BRL IF_SUCCESS                      ; And finish
.19528a		82 20 02	brl $1954ad	ret_failure     BRL IF_FAILURE                      ; If there was an error, pass it up to the caller
.19528d						read_data
.19528d		e2 20		sep #$20	                SEP #$20        ; set A short
.19528f		22 f5 52 19	jsl $1952f5	                JSL IF_READ_NEXT                    ; Get the next byte
.195293		90 f5		bcc $19528a	                BCC ret_failure
.195295		87 34		sta [$0354]	                STA [DOS_DST_PTR]                   ; Save it to the destination address
.195297		c2 20		rep #$20	                REP #$20        ; set A long
.195299		e6 34		inc $0354	                INC DOS_DST_PTR                     ; Increment the destination pointer
.19529b		d0 02		bne $19529f	                BNE dec_block_size
.19529d		e6 36		inc $0356	                INC DOS_DST_PTR+2
.19529f		38		sec		dec_block_size  SEC
.1952a0		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE
.1952a2		e9 01 00	sbc #$0001	                SBC #1
.1952a5		85 50		sta $0370	                STA DOS_BLOCK_SIZE
.1952a7		a5 52		lda $0372	                LDA DOS_BLOCK_SIZE+2
.1952a9		e9 00 00	sbc #$0000	                SBC #0
.1952ac		85 52		sta $0372	                STA DOS_BLOCK_SIZE+2
.1952ae		d0 dd		bne $19528d	                BNE read_data
.1952b0		a5 50		lda $0370	                LDA DOS_BLOCK_SIZE                  ; Is block size = 0?
.1952b2		d0 d9		bne $19528d	                BNE read_data                       ; No: keep reading data
.1952b4		82 7b ff	brl $195232	                BRL get_addr                        ; Yes: check for another block
.1952b7						IF_FILE_EOF
.1952b7		48		pha		                PHA
.1952b8		5a		phy		                PHY
.1952b9		8b		phb		                PHB
.1952ba		0b		phd		                PHD
.1952bb		08		php		                PHP
.1952bc		48		pha		                PHA             ; begin setdbr macro
.1952bd		08		php		                PHP
.1952be		e2 20		sep #$20	                SEP #$20        ; set A short
.1952c0		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952c2		48		pha		                PHA
.1952c3		ab		plb		                PLB
.1952c4		28		plp		                PLP
.1952c5		68		pla		                PLA             ; end setdbr macro
.1952c6		48		pha		                PHA             ; begin setdp macro
.1952c7		08		php		                PHP
.1952c8		c2 20		rep #$20	                REP #$20        ; set A long
.1952ca		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1952cd		5b		tcd		                TCD
.1952ce		28		plp		                PLP
.1952cf		68		pla		                PLA             ; end setdp macro
.1952d0		e2 20		sep #$20	                SEP #$20        ; set A short
.1952d2		c2 10		rep #$10	                REP #$10        ; set X long
.1952d4		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.1952d7		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y                  ; Restore the index
.1952d9		89 80		bit #$80	                BIT #FD_STAT_EOF                    ; Check if the file is EOF
.1952db		f0 07		beq $1952e4	                BEQ chk_file_size                   ; If not: check the file size
.1952dd		28		plp		ret_true        PLP                                 ; Return true
.1952de		2b		pld		                PLD
.1952df		ab		plb		                PLB
.1952e0		7a		ply		                PLY
.1952e1		68		pla		                PLA
.1952e2		38		sec		                SEC
.1952e3		6b		rtl		                RTL
.1952e4						chk_file_size
.1952e4		c2 20		rep #$20	                REP #$20        ; set A long
.1952e6		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; if DOS_FILE_SIZE = 0
.1952e8		d0 04		bne $1952ee	                BNE ret_false
.1952ea		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.1952ec		f0 ef		beq $1952dd	                BEQ ret_true
.1952ee		28		plp		ret_false       PLP                                 ; Return false
.1952ef		2b		pld		                PLD
.1952f0		ab		plb		                PLB
.1952f1		7a		ply		                PLY
.1952f2		68		pla		                PLA
.1952f3		18		clc		                CLC
.1952f4		6b		rtl		                RTL
.1952f5						IF_READ_NEXT
.1952f5		8b		phb		                PHB
.1952f6		0b		phd		                PHD
.1952f7		08		php		                PHP
.1952f8		48		pha		                PHA             ; begin setdbr macro
.1952f9		08		php		                PHP
.1952fa		e2 20		sep #$20	                SEP #$20        ; set A short
.1952fc		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1952fe		48		pha		                PHA
.1952ff		ab		plb		                PLB
.195300		28		plp		                PLP
.195301		68		pla		                PLA             ; end setdbr macro
.195302		48		pha		                PHA             ; begin setdp macro
.195303		08		php		                PHP
.195304		c2 20		rep #$20	                REP #$20        ; set A long
.195306		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195309		5b		tcd		                TCD
.19530a		28		plp		                PLP
.19530b		68		pla		                PLA             ; end setdp macro
.19530c		e2 20		sep #$20	                SEP #$20        ; set A short
.19530e		c2 10		rep #$10	                REP #$10        ; set X long
.195310		22 b7 52 19	jsl $1952b7	                JSL IF_FILE_EOF                     ; Check if the file is EOF
.195314		90 06		bcc $19531c	                BCC get_byte                        ; If not: get the next byte
.195316		a9 18		lda #$18	                LDA #DOS_ERR_EOF                    ; If so: return an EOF error
.195318		85 0e		sta $032e	                STA DOS_STATUS
.19531a		80 3f		bra $19535b	                BRA ret_failure
.19531c		b7 30		lda [$0350],y	get_byte        LDA [DOS_SRC_PTR],Y                 ; Read the byte...
.19531e		48		pha		                PHA                                 ; And save it for the moment
.19531f		c2 20		rep #$20	                REP #$20        ; set A long
.195321		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Decrement the file size...
.195323		d0 02		bne $195327	                BNE dec_low
.195325		c6 2e		dec $034e	                DEC DOS_FILE_SIZE+2
.195327		c6 2c		dec $034c	dec_low         DEC DOS_FILE_SIZE
.195329		a5 2c		lda $034c	                LDA DOS_FILE_SIZE                   ; Are we at the end of the file?
.19532b		d0 04		bne $195331	                BNE next_byte
.19532d		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.19532f		f0 1b		beq $19534c	                BEQ ret_eof                         ; Yes: mark the file as EOF
.195331						next_byte
.195331		e2 20		sep #$20	                SEP #$20        ; set A short
.195333		c8		iny		                INY                                 ; Move to the next byte
.195334		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE                ; Have we reached the end of the sector?
.195337		90 0b		bcc $195344	                BLT ret_success                     ; No: just return the byte
.195339		22 c8 46 19	jsl $1946c8	                JSL DOS_READNEXT                    ; Yes: read the next sector
.19533d		b0 02		bcs $195341	                BCS reset_index
.19533f		80 1a		bra $19535b	                BRA ret_failure                     ; If failure: pass the error up the chain
.195341		a0 00 00	ldy #$0000	reset_index     LDY #0                              ; Reset the index
.195344						ret_success
.195344		e2 20		sep #$20	                SEP #$20        ; set A short
.195346		68		pla		                PLA                                 ; Return the byte retrieved
.195347		28		plp		                PLP
.195348		2b		pld		                PLD
.195349		ab		plb		                PLB
.19534a		38		sec		                SEC
.19534b		6b		rtl		                RTL
.19534c						ret_eof
.19534c		e2 20		sep #$20	                SEP #$20        ; set A short
.19534e		5a		phy		                PHY                                 ; Save the index
.19534f		a0 00 00	ldy #$0000	                LDY #FILEDESC.STATUS                ; Get the file's status
.195352		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195354		09 80		ora #$80	                ORA #FD_STAT_EOF                    ; Mark it EOF
.195356		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y                  ; And update the status
.195358		7a		ply		                PLY                                 ; Restore the index
.195359		80 e9		bra $195344	                BRA ret_success
.19535b						ret_failure
.19535b		e2 20		sep #$20	                SEP #$20        ; set A short
.19535d		28		plp		                PLP
.19535e		2b		pld		                PLD
.19535f		ab		plb		                PLB
.195360		18		clc		                CLC
.195361		6b		rtl		                RTL
.195362						IF_LOADRAW
.195362		c2 30		rep #$30	                REP #$30        ; set A&X long
.195364		a0 00 00	ldy #$0000	copy_cluster    LDY #0
.195367						copy_loop
.195367		e2 20		sep #$20	                SEP #$20        ; set A short
.195369		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y         ; Copy byte from cluster to destination
.19536b		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19536d		c2 20		rep #$20	                REP #$20        ; set A long
.19536f		38		sec		                SEC                         ; Count down the number of bytes left
.195370		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195372		e9 01 00	sbc #$0001	                SBC #1
.195375		85 2c		sta $034c	                STA DOS_FILE_SIZE
.195377		a5 2e		lda $034e	                LDA DOS_FILE_SIZE+2
.195379		e9 00 00	sbc #$0000	                SBC #0
.19537c		85 2e		sta $034e	                STA DOS_FILE_SIZE+2
.19537e		d0 04		bne $195384	                BNE continue
.195380		a5 2c		lda $034c	                LDA DOS_FILE_SIZE
.195382		f0 1b		beq $19539f	                BEQ close_file              ; If not: we're done
.195384		c8		iny		continue        INY
.195385		cc 0e a0	cpy $18a00e	                CPY CLUSTER_SIZE            ; Are we done with the cluster?
.195388		d0 dd		bne $195367	                BNE copy_loop               ; No: keep processing the bytes
.19538a		18		clc		                CLC                         ; Advance the destination pointer to the next chunk of memory
.19538b		a5 34		lda $0354	                LDA DOS_DST_PTR
.19538d		6d 0e a0	adc $18a00e	                ADC CLUSTER_SIZE
.195390		85 34		sta $0354	                STA DOS_DST_PTR
.195392		a5 36		lda $0356	                LDA DOS_DST_PTR+2
.195394		69 00 00	adc #$0000	                ADC #0
.195397		85 36		sta $0356	                STA DOS_DST_PTR+2
.195399		22 fe 4e 19	jsl $194efe	                JSL IF_READ                 ; Yes: load the next cluster
.19539d		b0 c5		bcs $195364	                BCS copy_cluster            ; And start copying it
.19539f						close_file
.19539f		82 16 01	brl $1954b8	ret_success     BRL IF_SUCCESS
.1953a2						IF_NULLBUFFER
.1953a2		5a		phy		                PHY
.1953a3		8b		phb		                PHB
.1953a4		0b		phd		                PHD
.1953a5		08		php		                PHP
.1953a6		48		pha		                PHA             ; begin setdbr macro
.1953a7		08		php		                PHP
.1953a8		e2 20		sep #$20	                SEP #$20        ; set A short
.1953aa		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953ac		48		pha		                PHA
.1953ad		ab		plb		                PLB
.1953ae		28		plp		                PLP
.1953af		68		pla		                PLA             ; end setdbr macro
.1953b0		48		pha		                PHA             ; begin setdp macro
.1953b1		08		php		                PHP
.1953b2		c2 20		rep #$20	                REP #$20        ; set A long
.1953b4		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953b7		5b		tcd		                TCD
.1953b8		28		plp		                PLP
.1953b9		68		pla		                PLA             ; end setdp macro
.1953ba		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953bc		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953bf		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953c1		85 28		sta $0348	                STA DOS_TEMP
.1953c3		c8		iny		                INY
.1953c4		c8		iny		                INY
.1953c5		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953c7		85 2a		sta $034a	                STA DOS_TEMP+2
.1953c9		a0 00 00	ldy #$0000	                LDY #0
.1953cc		a9 00 00	lda #$0000	                LDA #0
.1953cf		97 28		sta [$0348],y	loop            STA [DOS_TEMP],Y
.1953d1		c8		iny		                INY
.1953d2		c8		iny		                INY
.1953d3		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE
.1953d6		d0 f7		bne $1953cf	                BNE loop
.1953d8		28		plp		                PLP
.1953d9		2b		pld		                PLD
.1953da		ab		plb		                PLB
.1953db		7a		ply		                PLY
.1953dc		6b		rtl		                RTL
.1953dd						IF_COPY2BUFF
.1953dd		5a		phy		                PHY
.1953de		8b		phb		                PHB
.1953df		0b		phd		                PHD
.1953e0		08		php		                PHP
.1953e1		48		pha		                PHA             ; begin setdbr macro
.1953e2		08		php		                PHP
.1953e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1953e5		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1953e7		48		pha		                PHA
.1953e8		ab		plb		                PLB
.1953e9		28		plp		                PLP
.1953ea		68		pla		                PLA             ; end setdbr macro
.1953eb		48		pha		                PHA             ; begin setdp macro
.1953ec		08		php		                PHP
.1953ed		c2 20		rep #$20	                REP #$20        ; set A long
.1953ef		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1953f2		5b		tcd		                TCD
.1953f3		28		plp		                PLP
.1953f4		68		pla		                PLA             ; end setdp macro
.1953f5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1953f7		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1953fa		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.1953fc		85 28		sta $0348	                STA DOS_TEMP
.1953fe		c8		iny		                INY
.1953ff		c8		iny		                INY
.195400		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.195402		85 2a		sta $034a	                STA DOS_TEMP+2
.195404		a0 00 00	ldy #$0000	                LDY #0
.195407						copy_loop
.195407		e2 20		sep #$20	                SEP #$20        ; set A short
.195409		a7 30		lda [$0350]	                LDA [DOS_SRC_PTR]           ; Copy a byte
.19540b		97 28		sta [$0348],y	                STA [DOS_TEMP],Y
.19540d		c2 20		rep #$20	                REP #$20        ; set A long
.19540f		e6 30		inc $0350	                INC DOS_SRC_PTR             ; Advance the source pointer
.195411		d0 02		bne $195415	                BNE adv_dest
.195413		e6 32		inc $0352	                INC DOS_SRC_PTR+2
.195415		c8		iny		adv_dest        INY                         ; Count it
.195416		c0 00 02	cpy #$0200	                CPY #DOS_SECTOR_SIZE        ; Have we reached the limit?
.195419		f0 0c		beq $195427	                BEQ done                    ; Yes: we're done
.19541b		a5 30		lda $0350	                LDA DOS_SRC_PTR             ; Check if we copied the last byte
.19541d		c5 38		cmp $0358	                CMP DOS_END_PTR
.19541f		d0 e6		bne $195407	                BNE copy_loop               ; No: keep copying
.195421		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195423		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.195425		d0 e0		bne $195407	                BNE copy_loop
.195427		28		plp		done            PLP
.195428		2b		pld		                PLD
.195429		ab		plb		                PLB
.19542a		7a		ply		                PLY
.19542b		6b		rtl		                RTL
.19542c						IF_SAVE
.19542c		da		phx		                PHX
.19542d		5a		phy		                PHY
.19542e		0b		phd		                PHD
.19542f		8b		phb		                PHB
.195430		08		php		                PHP
.195431		48		pha		                PHA             ; begin setdbr macro
.195432		08		php		                PHP
.195433		e2 20		sep #$20	                SEP #$20        ; set A short
.195435		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195437		48		pha		                PHA
.195438		ab		plb		                PLB
.195439		28		plp		                PLP
.19543a		68		pla		                PLA             ; end setdbr macro
.19543b		48		pha		                PHA             ; begin setdp macro
.19543c		08		php		                PHP
.19543d		c2 20		rep #$20	                REP #$20        ; set A long
.19543f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195442		5b		tcd		                TCD
.195443		28		plp		                PLP
.195444		68		pla		                PLA             ; end setdp macro
.195445		c2 30		rep #$30	                REP #$30        ; set A&X long
.195447		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE := DOS_END_PTR - DOS_SRC_PTR
.19544a		38		sec		                SEC
.19544b		a5 38		lda $0358	                LDA DOS_END_PTR
.19544d		e5 30		sbc $0350	                SBC DOS_SRC_PTR
.19544f		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195451		c8		iny		                INY
.195452		c8		iny		                INY
.195453		a5 3a		lda $035a	                LDA DOS_END_PTR+2
.195455		e5 32		sbc $0352	                SBC DOS_SRC_PTR+2
.195457		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195459		a0 12 00	ldy #$0012	                LDY #FILEDESC.SIZE      ; DOS_FD_PTR->SIZE++
.19545c		18		clc		                CLC
.19545d		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19545f		69 01 00	adc #$0001	                ADC #1
.195462		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195464		90 09		bcc $19546f	                BCC first_block
.195466		c8		iny		                INY
.195467		c8		iny		                INY
.195468		b7 20		lda [$0340],y	                LDA [DOS_FD_PTR],Y
.19546a		69 00 00	adc #$0000	                ADC #0
.19546d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19546f		22 a2 53 19	jsl $1953a2	first_block     JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195473		22 dd 53 19	jsl $1953dd	                JSL IF_COPY2BUFF        ; Copy first (at most) 512 bytes of data to FD buffer
.195477		22 90 4e 19	jsl $194e90	                JSL IF_CREATE           ; Create file.
.19547b		b0 03		bcs $195480	                BCS check_for_end
.19547d		82 31 00	brl $1954b1	                BRL IF_PASSFAILURE      ; If we couldn't create the file, pass the failure up
.195480		a5 30		lda $0350	check_for_end   LDA DOS_SRC_PTR         ; Check if we copied the last byte
.195482		c5 38		cmp $0358	                CMP DOS_END_PTR
.195484		d0 06		bne $19548c	                BNE next_block
.195486		a5 32		lda $0352	                LDA DOS_SRC_PTR+2
.195488		c5 3a		cmp $035a	                CMP DOS_END_PTR+2
.19548a		f0 1d		beq $1954a9	                BEQ done                ; Yes: we're done
.19548c		22 a2 53 19	jsl $1953a2	next_block      JSL IF_NULLBUFFER       ; Fill FD buffer with NULL
.195490		22 dd 53 19	jsl $1953dd	                JSL IF_COPY2BUFF        ; Copy next (at most) 512 bytes of data to FD buffer
.195494		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER   ; Make sure the CLUSTER is 0 to force an append
.195497		a9 00 00	lda #$0000	                LDA #0
.19549a		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19549c		c8		iny		                INY
.19549d		c8		iny		                INY
.19549e		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.1954a0		22 63 4f 19	jsl $194f63	                JSL IF_WRITE            ; Append to the file
.1954a4		b0 da		bcs $195480	                BCS check_for_end       ; And try again
.1954a6		82 08 00	brl $1954b1	                BRL IF_PASSFAILURE      ; If we couldn't update the file, pass the failure up
.1954a9		5c b8 54 19	jmp $1954b8	done            JML IF_SUCCESS
.1954ad						IF_FAILURE
.1954ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1954af		85 0e		sta $032e	                STA DOS_STATUS
.1954b1		28		plp		IF_PASSFAILURE  PLP
.1954b2		18		clc		                CLC
.1954b3		ab		plb		                PLB
.1954b4		2b		pld		                PLD
.1954b5		7a		ply		                PLY
.1954b6		fa		plx		                PLX
.1954b7		6b		rtl		                RTL
.1954b8						IF_SUCCESS
.1954b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1954ba		64 00		stz $0320	                STZ BIOS_STATUS
.1954bc		64 0e		stz $032e	                STZ DOS_STATUS
.1954be		28		plp		                PLP
.1954bf		38		sec		                SEC
.1954c0		ab		plb		                PLB
.1954c1		2b		pld		                PLD
.1954c2		7a		ply		                PLY
.1954c3		fa		plx		                PLX
.1954c4		6b		rtl		                RTL
.1954c5						IF_RUN
.1954c5		da		phx		                PHX
.1954c6		5a		phy		                PHY
.1954c7		0b		phd		                PHD
.1954c8		8b		phb		                PHB
.1954c9		08		php		                PHP
.1954ca		48		pha		                PHA             ; begin setdbr macro
.1954cb		08		php		                PHP
.1954cc		e2 20		sep #$20	                SEP #$20        ; set A short
.1954ce		a9 00		lda #$00	                LDA #0
.1954d0		48		pha		                PHA
.1954d1		ab		plb		                PLB
.1954d2		28		plp		                PLP
.1954d3		68		pla		                PLA             ; end setdbr macro
.1954d4		48		pha		                PHA             ; begin setdp macro
.1954d5		08		php		                PHP
.1954d6		c2 20		rep #$20	                REP #$20        ; set A long
.1954d8		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1954db		5b		tcd		                TCD
.1954dc		28		plp		                PLP
.1954dd		68		pla		                PLA             ; end setdp macro
.1954de		e2 20		sep #$20	                SEP #$20        ; set A short
.1954e0		c2 10		rep #$10	                REP #$10        ; set X long
.1954e2		a9 00		lda #$00	                LDA #0                                  ; Zero out the file descriptor
.1954e4		a2 00 00	ldx #$0000	                LDX #0
.1954e7		9f 00 ad 18	sta $18ad00,x	clr_fd_loop     STA @l DOS_SPARE_FD,X
.1954eb		e8		inx		                INX
.1954ec		e0 20 00	cpx #$0020	                CPX #SIZE(FILEDESC)
.1954ef		d0 f6		bne $1954e7	                BNE clr_fd_loop
.1954f1		c2 20		rep #$20	                REP #$20        ; set A long
.1954f3		a9 00 ab	lda #$ab00	                LDA #<>DOS_SPARE_SECTOR                 ; Set the buffer for the file descriptor
.1954f6		8f 0e ad 18	sta $18ad0e	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER
.1954fa		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_SECTOR
.1954fd		8f 10 ad 18	sta $18ad10	                STA @l DOS_SPARE_FD+FILEDESC.BUFFER+2
.195501		a5 40		lda $0360	                LDA DOS_RUN_PARAM                        ; Set the path for the file descriptor
.195503		8f 02 ad 18	sta $18ad02	                STA @l DOS_SPARE_FD+FILEDESC.PATH
.195507		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.195509		8f 04 ad 18	sta $18ad04	                STA @l DOS_SPARE_FD+FILEDESC.PATH+2
.19550d		a9 00 00	lda #$0000	                LDA #0                                  ; Clear the run pointer
.195510		85 3c		sta $035c	                STA DOS_RUN_PTR                         ; This is used to check that we loaded an executable binary
.195512		85 3e		sta $035e	                STA DOS_RUN_PTR+2
.195514		a9 00 ad	lda #$ad00	                LDA #<>DOS_SPARE_FD
.195517		85 20		sta $0340	                STA DOS_FD_PTR
.195519		a9 18 00	lda #$0018	                LDA #`DOS_SPARE_FD
.19551c		85 22		sta $0342	                STA DOS_FD_PTR+2
.19551e		a9 ff ff	lda #$ffff	                LDA #$FFFF                              ; We want to load to the address provided by the file
.195521		8f 54 03 00	sta $000354	                STA @l DOS_DST_PTR
.195525		8f 56 03 00	sta $000356	                STA @l DOS_DST_PTR+2
.195529		22 18 11 00	jsl $001118	                JSL F_LOAD                              ; Try to load the file
.19552d		b0 03		bcs $195532	                BCS chk_execute
.19552f		82 7f ff	brl $1954b1	                BRL IF_PASSFAILURE                      ; On error: pass failure up the chain
.195532						chk_execute
.195532		c2 20		rep #$20	                REP #$20        ; set A long
.195534		a5 3c		lda $035c	                LDA DOS_RUN_PTR                         ; Check to see if we got a startup address back
.195536		d0 0b		bne $195543	                BNE try_execute                         ; If so: call it
.195538		a5 3e		lda $035e	                LDA DOS_RUN_PTR+2
.19553a		d0 07		bne $195543	                BNE try_execute
.19553c		e2 20		sep #$20	                SEP #$20        ; set A short
.19553e		a9 11		lda #$11	                LDA #DOS_ERR_NOEXEC                     ; If not: return an error that it's not executable
.195540		82 6a ff	brl $1954ad	                BRL IF_FAILURE
.195543						try_execute
.195543		e2 20		sep #$20	                SEP #$20        ; set A short
.195545		a5 42		lda $0362	                LDA DOS_RUN_PARAM+2
.195547		48		pha		                PHA
.195548		a5 41		lda $0361	                LDA DOS_RUN_PARAM+1
.19554a		48		pha		                PHA
.19554b		a5 40		lda $0360	                LDA DOS_RUN_PARAM
.19554d		48		pha		                PHA
.19554e		a9 5c		lda #$5c	                LDA #$5C                                ; Write a JML opcode
.195550		85 3b		sta $035b	                STA DOS_RUN_PTR-1
.195552		22 5b 03 00	jsl $00035b	                JSL DOS_RUN_PTR-1                       ; And call to it
.195556		e2 20		sep #$20	                SEP #$20        ; set A short
.195558		68		pla		                PLA                                     ; Remove the path and parameters string from the stack
.195559		68		pla		                PLA
.19555a		68		pla		                PLA
.19555b		82 5a ff	brl $1954b8	                BRL IF_SUCCESS                          ; Return success
.19555e						IF_ALLOCFD
.19555e		da		phx		                PHX
.19555f		5a		phy		                PHY
.195560		0b		phd		                PHD
.195561		8b		phb		                PHB
.195562		08		php		                PHP
.195563		48		pha		                PHA             ; begin setdbr macro
.195564		08		php		                PHP
.195565		e2 20		sep #$20	                SEP #$20        ; set A short
.195567		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.195569		48		pha		                PHA
.19556a		ab		plb		                PLB
.19556b		28		plp		                PLP
.19556c		68		pla		                PLA             ; end setdbr macro
.19556d		48		pha		                PHA             ; begin setdp macro
.19556e		08		php		                PHP
.19556f		c2 20		rep #$20	                REP #$20        ; set A long
.195571		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195574		5b		tcd		                TCD
.195575		28		plp		                PLP
.195576		68		pla		                PLA             ; end setdp macro
.195577		c2 10		rep #$10	                REP #$10        ; set X long
.195579		a2 00 00	ldx #$0000	                LDX #0                              ; Point to the first file descriptor
.19557c						chk_fd
.19557c		e2 20		sep #$20	                SEP #$20        ; set A short
.19557e		bd 20 ad	lda $18ad20,x	                LDA @w DOS_FILE_DESCS,X             ; Check the file descriptor's status
.195581		89 10		bit #$10	                BIT #FD_STAT_ALLOC                  ; Is the file descriptor allocated?
.195583		f0 14		beq $195599	                BEQ found                           ; No: flag and return the found descriptor
.195585						next_fd
.195585		c2 20		rep #$20	                REP #$20        ; set A long
.195587		8a		txa		                TXA                                 ; Yes: Move to the next file descriptor
.195588		18		clc		                CLC
.195589		69 20 00	adc #$0020	                ADC #SIZE(FILEDESC)
.19558c		aa		tax		                TAX
.19558d		e0 00 01	cpx #$0100	                CPX #SIZE(FILEDESC) * DOS_FD_MAX    ; Are we out of file descriptors?
.195590		90 ea		bcc $19557c	                BLT chk_fd                          ; No: check this new file descriptor
.195592		e2 20		sep #$20	                SEP #$20        ; set A short
.195594		a9 16		lda #$16	                LDA #DOS_ERR_NOFD                   ; Yes: Return failure (no file descriptors available)
.195596		82 14 ff	brl $1954ad	                BRL IF_FAILURE
.195599		a9 10		lda #$10	found           LDA #FD_STAT_ALLOC                  ; No: Set the ALLOC bit
.19559b		9d 20 ad	sta $18ad20,x	                STA @w DOS_FILE_DESCS,X             ; And store it in the file descriptor's status
.19559e		c2 20		rep #$20	                REP #$20        ; set A long
.1955a0		8a		txa		                TXA
.1955a1		18		clc		                CLC
.1955a2		69 20 ad	adc #$ad20	                ADC #<>DOS_FILE_DESCS
.1955a5		85 20		sta $0340	                STA @b DOS_FD_PTR
.1955a7		a9 18 00	lda #$0018	                LDA #`DOS_FILE_DESCS
.1955aa		69 00 00	adc #$0000	                ADC #0
.1955ad		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1955af		82 06 ff	brl $1954b8	                BRL IF_SUCCESS                      ; Return this file descriptor
.1955b2						IF_FREEFD
.1955b2		da		phx		                PHX
.1955b3		5a		phy		                PHY
.1955b4		0b		phd		                PHD
.1955b5		8b		phb		                PHB
.1955b6		08		php		                PHP
.1955b7		48		pha		                PHA             ; begin setdbr macro
.1955b8		08		php		                PHP
.1955b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1955bb		a9 18		lda #$18	                LDA #`DOS_HIGH_VARIABLES
.1955bd		48		pha		                PHA
.1955be		ab		plb		                PLB
.1955bf		28		plp		                PLP
.1955c0		68		pla		                PLA             ; end setdbr macro
.1955c1		48		pha		                PHA             ; begin setdp macro
.1955c2		08		php		                PHP
.1955c3		c2 20		rep #$20	                REP #$20        ; set A long
.1955c5		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955c8		5b		tcd		                TCD
.1955c9		28		plp		                PLP
.1955ca		68		pla		                PLA             ; end setdp macro
.1955cb		e2 20		sep #$20	                SEP #$20        ; set A short
.1955cd		c2 10		rep #$10	                REP #$10        ; set X long
.1955cf		a9 00		lda #$00	                LDA #0
.1955d1		87 20		sta [$0340]	                STA [DOS_FD_PTR]
.1955d3		82 e2 fe	brl $1954b8	                BRL IF_SUCCESS
.1955d6						DOS_SRC2DST
.1955d6		da		phx		                PHX
.1955d7		5a		phy		                PHY
.1955d8		0b		phd		                PHD
.1955d9		8b		phb		                PHB
.1955da		08		php		                PHP
.1955db		48		pha		                PHA             ; begin setdp macro
.1955dc		08		php		                PHP
.1955dd		c2 20		rep #$20	                REP #$20        ; set A long
.1955df		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1955e2		5b		tcd		                TCD
.1955e3		28		plp		                PLP
.1955e4		68		pla		                PLA             ; end setdp macro
.1955e5		c2 30		rep #$30	                REP #$30        ; set A&X long
.1955e7		a0 0e 00	ldy #$000e	                LDY #FILEDESC.BUFFER
.1955ea		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1955ec		aa		tax		                TAX                                     ; X := source buffer address
.1955ed		b7 34		lda [$0354],y	                LDA [DOS_DST_PTR],Y
.1955ef		a8		tay		                TAY                                     ; Y := destination buffer address
.1955f0		e2 20		sep #$20	                SEP #$20        ; set A short
.1955f2		a9 18		lda #$18	                LDA #`DOS_FILE_BUFFS
.1955f4		48		pha		                PHA
.1955f5		ab		plb		                PLB
.1955f6		c2 20		rep #$20	                REP #$20        ; set A long
.1955f8		a9 00 02	lda #$0200	                LDA #DOS_SECTOR_SIZE                    ; A := the size of the buffers
.1955fb		f0 11		beq $19560e	loop            BEQ done
.1955fd		48		pha		                PHA
.1955fe		e2 20		sep #$20	                SEP #$20        ; set A short
.195600		bd 00 00	lda $180000,x	                LDA #0,B,X
.195603		99 00 00	sta $180000,y	                STA #0,B,Y
.195606		c2 20		rep #$20	                REP #$20        ; set A long
.195608		68		pla		                PLA
.195609		3a		dec a		                DEC A
.19560a		e8		inx		                INX
.19560b		c8		iny		                INY
.19560c		80 ed		bra $1955fb	                BRA loop
.19560e		28		plp		done            PLP
.19560f		ab		plb		                PLB
.195610		2b		pld		                PLD
.195611		7a		ply		                PLY
.195612		fa		plx		                PLX
.195613		6b		rtl		                RTL
.195614						IF_COPY
.195614		da		phx		                PHX
.195615		5a		phy		                PHY
.195616		0b		phd		                PHD
.195617		8b		phb		                PHB
.195618		08		php		                PHP
.195619		48		pha		                PHA             ; begin setdbr macro
.19561a		08		php		                PHP
.19561b		e2 20		sep #$20	                SEP #$20        ; set A short
.19561d		a9 00		lda #$00	                LDA #0
.19561f		48		pha		                PHA
.195620		ab		plb		                PLB
.195621		28		plp		                PLP
.195622		68		pla		                PLA             ; end setdbr macro
.195623		48		pha		                PHA             ; begin setdp macro
.195624		08		php		                PHP
.195625		c2 20		rep #$20	                REP #$20        ; set A long
.195627		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19562a		5b		tcd		                TCD
.19562b		28		plp		                PLP
.19562c		68		pla		                PLA             ; end setdp macro
.19562d		22 5e 55 19	jsl $19555e	                JSL IF_ALLOCFD                  ; Allocate an FD for the source
.195631		b0 03		bcs $195636	                BCS set_src_path
.195633		82 7b fe	brl $1954b1	                BRL IF_PASSFAILURE              ; If failed: pass the failure up the chain
.195636						set_src_path
.195636		c2 30		rep #$30	                REP #$30        ; set A&X long
.195638		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the source path
.19563b		a5 44		lda $0364	                LDA @b DOS_STR1_PTR
.19563d		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.19563f		c8		iny		                INY
.195640		c8		iny		                INY
.195641		a5 46		lda $0366	                LDA @b DOS_STR1_PTR+2
.195643		97 20		sta [$0340],y	                STA [DOS_FD_PTR],Y
.195645						alloc_dest
.195645		c2 30		rep #$30	                REP #$30        ; set A&X long
.195647		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; set DOS_SRC_PTR to the file descriptor pointer
.195649		85 30		sta $0350	                STA @b DOS_SRC_PTR
.19564b		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.19564d		85 32		sta $0352	                STA @b DOS_SRC_PTR+2
.19564f		22 5e 55 19	jsl $19555e	                JSL IF_ALLOCFD                  ; Allocate an FD for the destination
.195653		b0 0f		bcs $195664	                BCS set_paths                   ; If everything is ok... start setting the paths
.195655		a5 30		lda $0350	err_free_src_fd LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.195657		85 20		sta $0340	                STA @b DOS_FD_PTR
.195659		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.19565b		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.19565d		22 b2 55 19	jsl $1955b2	                JSL IF_FREEFD                   ; And free it
.195661		82 4d fe	brl $1954b1	                BRL IF_PASSFAILURE              ; Pass the failure up the chain
.195664						set_paths
.195664		c2 30		rep #$30	                REP #$30        ; set A&X long
.195666		a5 20		lda $0340	                LDA @b DOS_FD_PTR               ; Set DOS_DST_PTR to the file descriptor pointer for the destination
.195668		85 34		sta $0354	                STA @b DOS_DST_PTR
.19566a		a5 22		lda $0342	                LDA @b DOS_FD_PTR+2
.19566c		85 36		sta $0356	                STA @b DOS_DST_PTR+2
.19566e		a0 02 00	ldy #$0002	                LDY #FILEDESC.PATH              ; Set the destination path
.195671		a5 48		lda $0368	                LDA @b DOS_STR2_PTR
.195673		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.195675		c8		iny		                INY
.195676		c8		iny		                INY
.195677		a5 4a		lda $036a	                LDA @b DOS_STR2_PTR+2
.195679		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.19567b		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19567d		85 20		sta $0340	                STA @b DOS_FD_PTR
.19567f		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195681		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195683		22 f0 10 00	jsl $0010f0	                JSL F_OPEN                      ; Try to open the file
.195687		b0 10		bcs $195699	                BCS src_open                    ; If success, work with the openned file
.195689		00		brk #		                BRK
.19568a		a5 34		lda $0354	err_free_dst_fd LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.19568c		85 20		sta $0340	                STA @b DOS_FD_PTR
.19568e		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195690		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195692		22 b2 55 19	jsl $1955b2	                JSL IF_FREEFD                   ; And free it
.195696		82 bc ff	brl $195655	                BRL err_free_src_fd             ; Free the source file descriptor
.195699		a0 12 00	ldy #$0012	src_open        LDY #FILEDESC.SIZE              ; destination file size := source file size
.19569c		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.19569e		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956a0		c8		iny		                INY
.1956a1		c8		iny		                INY
.1956a2		b7 30		lda [$0350],y	                LDA [DOS_SRC_PTR],Y
.1956a4		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956a6		22 d6 55 19	jsl $1955d6	                JSL DOS_SRC2DST                 ; Copy the first sector's worth of data
.1956aa		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956ac		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956ae		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956b0		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956b2		22 f4 10 00	jsl $0010f4	                JSL F_CREATE                    ; Attempt to create the file
.1956b6		b0 0f		bcs $1956c7	                BCS read_next                   ; If sucessful, try to get the next cluster
.1956b8		a5 30		lda $0350	err_src_close   LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1956ba		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956bc		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1956be		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956c0		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source file (maybe not really necessary)
.1956c4		82 c3 ff	brl $19568a	                BRL err_free_dst_fd             ; Free the file descriptors and return an error
.1956c7						read_next
.1956c7		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.1956c9		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956cb		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.1956cd		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956cf		22 00 11 00	jsl $001100	                JSL F_READ                      ; Attempt to read the next sector of the source
.1956d3		b0 19		bcs $1956ee	                BCS copy2dest                   ; If successful, copy the sector
.1956d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1956d7		a5 0e		lda $032e	                LDA @b DOS_STATUS
.1956d9		c9 0a		cmp #$0a	                CMP #DOS_ERR_NOCLUSTER          ; Are there no more clusters in the source file?
.1956db		f0 32		beq $19570f	                BEQ file_copied                 ; Yes: we're done copying
.1956dd						err_dest_close
.1956dd		c2 20		rep #$20	                REP #$20        ; set A long
.1956df		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.1956e1		85 20		sta $0340	                STA @b DOS_FD_PTR
.1956e3		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.1956e5		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.1956e7		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Attempt to close the destination
.1956eb		82 ca ff	brl $1956b8	                BRL err_src_close               ; Close the source and throw an error
.1956ee						copy2dest
.1956ee		22 d6 55 19	jsl $1955d6	                JSL DOS_SRC2DST                 ; Copy the source sector to the destination sector
.1956f2		a0 06 00	ldy #$0006	                LDY #FILEDESC.CLUSTER           ; destination sector cluster ID := 0 to append
.1956f5		a9 00 00	lda #$0000	                LDA #0
.1956f8		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956fa		c8		iny		                INY
.1956fb		c8		iny		                INY
.1956fc		97 34		sta [$0354],y	                STA [DOS_DST_PTR],Y
.1956fe		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195700		85 20		sta $0340	                STA @b DOS_FD_PTR
.195702		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195704		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195706		22 fc 10 00	jsl $0010fc	                JSL F_WRITE                     ; Attempt to write the destionation sector to the disk
.19570a		90 d1		bcc $1956dd	                BCC err_dest_close              ; If error: close all files and throw the error
.19570c		82 b8 ff	brl $1956c7	                BRL read_next                   ; Otherwise: repeat the loop
.19570f						file_copied
.19570f		c2 20		rep #$20	                REP #$20        ; set A long
.195711		a5 34		lda $0354	                LDA @b DOS_DST_PTR              ; Get the destination file descriptor pointer
.195713		85 20		sta $0340	                STA @b DOS_FD_PTR
.195715		a5 36		lda $0356	                LDA @b DOS_DST_PTR+2
.195717		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195719		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the destination
.19571d		a5 30		lda $0350	                LDA @b DOS_SRC_PTR              ; Get the source file descriptor pointer
.19571f		85 20		sta $0340	                STA @b DOS_FD_PTR
.195721		a5 32		lda $0352	                LDA @b DOS_SRC_PTR+2
.195723		85 22		sta $0342	                STA @b DOS_FD_PTR+2
.195725		22 f8 10 00	jsl $0010f8	                JSL F_CLOSE                     ; Close the source
.195729		82 8c fd	brl $1954b8	                BRL IF_SUCCESS

;******  Return to file: src\kernel.asm


;******  Processing file: src\uart.asm

=$af18f8					    UART1_BASE = $AF18F8        ; Base address for UART 1 (COM1) in the C256 Foenix U (only 1 Serial port)
=$af18f8					    UART2_BASE = $AF18F8
=$00						UART_TRHB = $00             ; Transmit/Receive Hold Buffer
=$00						UART_DLL = UART_TRHB        ; Divisor Latch Low Byte
=$01						UART_DLH = $01              ; Divisor Latch High Byte
=$01						UART_IER = UART_DLH         ; Interupt Enable Register
=$02						UART_FCR = $02              ; FIFO Control Register
=$02						UART_IIR = UART_FCR         ; Interupt Indentification Register
=$03						UART_LCR = $03              ; Line Control Register
=$04						UART_MCR = $04              ; Modem Control REgister
=$05						UART_LSR = $05              ; Line Status Register
=$06						UART_MSR = $06              ; Modem Status Register
=$07						UART_SR = $07               ; Scratch Register
=$20						UINT_LOW_POWER = $20        ; Enable Low Power Mode (16750)
=$10						UINT_SLEEP_MODE = $10       ; Enable Sleep Mode (16750)
=$08						UINT_MODEM_STATUS = $08     ; Enable Modem Status Interrupt
=$04						UINT_LINE_STATUS = $04      ; Enable Receiver Line Status Interupt
=$02						UINT_THR_EMPTY = $02        ; Enable Transmit Holding Register Empty interrupt
=$01						UINT_DATA_AVAIL = $01       ; Enable Recieve Data Available interupt
=$80						IIR_FIFO_ENABLED = $80      ; FIFO is enabled
=$40						IIR_FIFO_NONFUNC = $40      ; FIFO is not functioning
=$20						IIR_FIFO_64BYTE = $20       ; 64 byte FIFO enabled (16750)
=$00						IIR_MODEM_STATUS = $00      ; Modem Status Interrupt
=$02						IIR_THR_EMPTY = $02         ; Transmit Holding Register Empty Interrupt
=$04						IIR_DATA_AVAIL = $04        ; Data Available Interrupt
=$06						IIR_LINE_STATUS = $06       ; Line Status Interrupt
=$0c						IIR_TIMEOUT = $0C           ; Time-out Interrupt (16550 and later)
=$01						IIR_INTERRUPT_PENDING = $01 ; Interrupt Pending Flag
=$80						LCR_DLB = $80               ; Divisor Latch Access Bit
=$60						LCR_SBE = $60               ; Set Break Enable
=$00						LCR_PARITY_NONE = $00       ; Parity: None
=$08						LCR_PARITY_ODD = $08        ; Parity: Odd
=$18						LCR_PARITY_EVEN = $18       ; Parity: Even
=$28						LCR_PARITY_MARK = $28       ; Parity: Mark
=$38						LCR_PARITY_SPACE = $38      ; Parity: Space
=$00						LCR_STOPBIT_1 = $00         ; One Stop Bit
=$04						LCR_STOPBIT_2 = $04         ; 1.5 or 2 Stop Bits
=$00						LCR_DATABITS_5 = $00        ; Data Bits: 5
=$01						LCR_DATABITS_6 = $01        ; Data Bits: 6
=$02						LCR_DATABITS_7 = $02        ; Data Bits: 7
=$03						LCR_DATABITS_8 = $03        ; Data Bits: 8
=$80						LSR_ERR_RECIEVE = $80       ; Error in Received FIFO
=$40						LSR_XMIT_DONE = $40         ; All data has been transmitted
=$20						LSR_XMIT_EMPTY = $20        ; Empty transmit holding register
=$10						LSR_BREAK_INT = $10         ; Break interrupt
=$08						LSR_ERR_FRAME = $08         ; Framing error
=$04						LSR_ERR_PARITY = $04        ; Parity error
=$02						LSR_ERR_OVERRUN = $02       ; Overrun error
=$01						LSR_DATA_AVAIL = $01        ; Data is ready in the receive buffer
=384						UART_300 = 384              ; Code for 300 bps
=96						UART_1200 = 96              ; Code for 1200 bps
=48						UART_2400 = 48              ; Code for 2400 bps
=24						UART_4800 = 24              ; Code for 4800 bps
=12						UART_9600 = 12              ; Code for 9600 bps
=6						UART_19200 = 6              ; Code for 19200 bps
=3						UART_38400 = 3              ; Code for 28400 bps
=2						UART_57600 = 2              ; Code for 57600 bps
=1						UART_115200 = 1             ; Code for 115200 bps
.19572c						UART_SELECT
.19572c		08		php		            PHP
.19572d		c2 20		rep #$20	                REP #$20        ; set A long
.19572f		c9 02 00	cmp #$0002	            CMP #2
.195732		f0 07		beq $19573b	            BEQ is_COM2
.195734		c2 20		rep #$20	                REP #$20        ; set A long
.195736		a9 f8 18	lda #$18f8	            LDA #<>UART1_BASE
.195739		80 05		bra $195740	            BRA setaddr
.19573b						is_COM2
.19573b		c2 20		rep #$20	                REP #$20        ; set A long
.19573d		a9 f8 18	lda #$18f8	            LDA #<>UART2_BASE
.195740		8f 00 07 00	sta $000700	setaddr     STA @lCURRUART
.195744		e2 20		sep #$20	                SEP #$20        ; set A short
.195746		a9 af		lda #$af	            LDA #`UART1_BASE
.195748		8f 02 07 00	sta $000702	            STA @lCURRUART+2
.19574c		28		plp		            PLP
.19574d		6b		rtl		            RTL
.19574e						UART_SETBPS
.19574e		08		php		            PHP
.19574f		0b		phd		            PHD
.195750		48		pha		                PHA             ; begin setdp macro
.195751		08		php		                PHP
.195752		c2 20		rep #$20	                REP #$20        ; set A long
.195754		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195757		5b		tcd		                TCD
.195758		28		plp		                PLP
.195759		68		pla		                PLA             ; end setdp macro
.19575a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19575c		48		pha		            PHA
.19575d		e2 20		sep #$20	                SEP #$20        ; set A short
.19575f		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Enable divisor latch
.195762		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195764		09 80		ora #$80	            ORA #LCR_DLB
.195766		97 00		sta [$0700],y	            STA [CURRUART],Y
.195768		c2 20		rep #$20	                REP #$20        ; set A long
.19576a		68		pla		            PLA
.19576b		a0 00 00	ldy #$0000	            LDY #UART_DLL
.19576e		97 00		sta [$0700],y	            STA [CURRUART],Y    ; Save the divisor to the UART
.195770		e2 20		sep #$20	                SEP #$20        ; set A short
.195772		a0 03 00	ldy #$0003	            LDY #UART_LCR       ; Disable divisor latch
.195775		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.195777		49 80		eor #$80	            EOR #LCR_DLB
.195779		97 00		sta [$0700],y	            STA [CURRUART],Y
.19577b		2b		pld		            PLD
.19577c		28		plp		            PLP
.19577d		6b		rtl		            RTL
.19577e						UART_SETLCR
.19577e		08		php		            PHP
.19577f		0b		phd		            PHD
.195780		48		pha		                PHA             ; begin setdp macro
.195781		08		php		                PHP
.195782		c2 20		rep #$20	                REP #$20        ; set A long
.195784		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.195787		5b		tcd		                TCD
.195788		28		plp		                PLP
.195789		68		pla		                PLA             ; end setdp macro
.19578a		e2 20		sep #$20	                SEP #$20        ; set A short
.19578c		c2 10		rep #$10	                REP #$10        ; set X long
.19578e		29 7f		and #$7f	            AND #$7F            ; We don't want to alter divisor latch
.195790		a0 03 00	ldy #$0003	            LDY #UART_LCR
.195793		97 00		sta [$0700],y	            STA [CURRUART],Y
.195795		2b		pld		            PLD
.195796		28		plp		            PLP
.195797		6b		rtl		            RTL
.195798						UART_INIT
.195798		08		php		            PHP
.195799		0b		phd		            PHD
.19579a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19579c		48		pha		                PHA             ; begin setdp macro
.19579d		08		php		                PHP
.19579e		c2 20		rep #$20	                REP #$20        ; set A long
.1957a0		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957a3		5b		tcd		                TCD
.1957a4		28		plp		                PLP
.1957a5		68		pla		                PLA             ; end setdp macro
.1957a6		a9 01 00	lda #$0001	            LDA #UART_115200
.1957a9		22 4e 57 19	jsl $19574e	            JSL UART_SETBPS
.1957ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1957af		a9 03		lda #$03	            LDA #LCR_PARITY_NONE | LCR_STOPBIT_1 | LCR_DATABITS_8
.1957b1		22 7e 57 19	jsl $19577e	            JSL UART_SETLCR
.1957b5		a9 e1		lda #$e1	            LDA #%11100001
.1957b7		a0 02 00	ldy #$0002	            LDY #UART_FCR
.1957ba		97 00		sta [$0700],y	            STA [CURRUART],Y
.1957bc		2b		pld		            PLD
.1957bd		28		plp		            PLP
.1957be		6b		rtl		            RTL
.1957bf						UART_HASBYT
.1957bf		08		php		            PHP
.1957c0		0b		phd		            PHD
.1957c1		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957c3		48		pha		                PHA             ; begin setdp macro
.1957c4		08		php		                PHP
.1957c5		c2 20		rep #$20	                REP #$20        ; set A long
.1957c7		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957ca		5b		tcd		                TCD
.1957cb		28		plp		                PLP
.1957cc		68		pla		                PLA             ; end setdp macro
.1957cd		e2 20		sep #$20	                SEP #$20        ; set A short
.1957cf		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1957d2		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.1957d4		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1957d6		d0 04		bne $1957dc	            BNE ret_true            ; If flag is set, return true
.1957d8		2b		pld		ret_false   PLD                     ; Return false
.1957d9		28		plp		            PLP
.1957da		18		clc		            CLC
.1957db		6b		rtl		            RTL
.1957dc		2b		pld		ret_true    PLD                     ; Return true
.1957dd		28		plp		            PLP
.1957de		38		sec		            SEC
.1957df		6b		rtl		            RTL
.1957e0						UART_GETC
.1957e0		08		php		            PHP
.1957e1		0b		phd		            PHD
.1957e2		c2 30		rep #$30	                REP #$30        ; set A&X long
.1957e4		48		pha		                PHA             ; begin setdp macro
.1957e5		08		php		                PHP
.1957e6		c2 20		rep #$20	                REP #$20        ; set A long
.1957e8		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.1957eb		5b		tcd		                TCD
.1957ec		28		plp		                PLP
.1957ed		68		pla		                PLA             ; end setdp macro
.1957ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1957f0		a0 05 00	ldy #$0005	            LDY #UART_LSR           ; Check the receive FIFO
.1957f3		b7 00		lda [$0700],y	wait_getc   LDA [CURRUART],Y
.1957f5		29 01		and #$01	            AND #LSR_DATA_AVAIL
.1957f7		f0 fa		beq $1957f3	            BEQ wait_getc           ; If the flag is clear, wait
.1957f9		a0 00 00	ldy #$0000	            LDY #UART_TRHB          ; Get the byte from the receive FIFO
.1957fc		b7 00		lda [$0700],y	            LDA [CURRUART],Y
.1957fe		2b		pld		            PLD
.1957ff		28		plp		            PLP
.195800		6b		rtl		            RTL
.195801						UART_PUTC
.195801		08		php		            PHP
.195802		0b		phd		            PHD
.195803		c2 30		rep #$30	                REP #$30        ; set A&X long
.195805		48		pha		                PHA             ; begin setdp macro
.195806		08		php		                PHP
.195807		c2 20		rep #$20	                REP #$20        ; set A long
.195809		a9 00 07	lda #$0700	                LDA #CURRUART         ; set DP to page 0
.19580c		5b		tcd		                TCD
.19580d		28		plp		                PLP
.19580e		68		pla		                PLA             ; end setdp macro
.19580f		e2 20		sep #$20	                SEP #$20        ; set A short
.195811		48		pha		            PHA                     ; Wait for the transmit FIFO to free up
.195812		a0 05 00	ldy #$0005	            LDY #UART_LSR
.195815		b7 00		lda [$0700],y	wait_putc   LDA [CURRUART],Y
.195817		29 20		and #$20	            AND #LSR_XMIT_EMPTY
.195819		f0 fa		beq $195815	            BEQ wait_putc
.19581b		68		pla		            PLA
.19581c		a0 00 00	ldy #$0000	            LDY #UART_TRHB
.19581f		97 00		sta [$0700],y	            STA [CURRUART],Y
.195821		2b		pld		            PLD
.195822		28		plp		            PLP
.195823		6b		rtl		            RTL
.195824						UART_PUTS
.195824		08		php		            PHP
.195825		e2 20		sep #$20	                SEP #$20        ; set A short
.195827		bd 00 00	lda $0000,x	put_loop    LDA #0,B,X
.19582a		f0 07		beq $195833	            BEQ done
.19582c		22 01 58 19	jsl $195801	            JSL UART_PUTC
.195830		e8		inx		            INX
.195831		80 f4		bra $195827	            BRA put_loop
.195833		28		plp		done        PLP
.195834		6b		rtl		            RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\joystick.asm

.195835						JOYSTICK_SET_NES_MODE
.195835		e2 20		sep #$20	                SEP #$20        ; set A short
.195837		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19583b		29 fb		and #$fb	          AND #~NES_SNES_JOY  ; 0 = NES (8 bit shift)
.19583d		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195841		6b		rtl		          RTL
.195842						JOYSTICK_SET_SNES_MODE
.195842		e2 20		sep #$20	                SEP #$20        ; set A short
.195844		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195848		29 fb		and #$fb	          AND #~NES_SNES_JOY
.19584a		09 04		ora #$04	          ORA #NES_SNES_JOY   ; 1 = SNES (12 Bit Shift)
.19584c		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195850		6b		rtl		          RTL
.195851						JOYSTICK_ENABLE_NES_SNES_PORT0
.195851		e2 20		sep #$20	                SEP #$20        ; set A short
.195853		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195857		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195859		09 01		ora #$01	          ORA #NES_SNES_EN0
.19585b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19585f		6b		rtl		          RTL
.195860						JOYSTICK_ENABLE_NES_SNES_PORT1
.195860		e2 20		sep #$20	                SEP #$20        ; set A short
.195862		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195866		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195868		09 02		ora #$02	          ORA #NES_SNES_EN1
.19586a		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19586e		6b		rtl		          RTL
.19586f						JOYSTICK_DISABLE_NES_SNES_PORT0
.19586f		e2 20		sep #$20	                SEP #$20        ; set A short
.195871		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195875		29 fe		and #$fe	          AND #~NES_SNES_EN0
.195877		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19587b		6b		rtl		          RTL
.19587c						JOYSTICK_DISABLE_NES_SNES_PORT1
.19587c		e2 20		sep #$20	                SEP #$20        ; set A short
.19587e		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195882		29 fd		and #$fd	          AND #~NES_SNES_EN1
.195884		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.195888		6b		rtl		          RTL
.195889						JOYSTICK_NES_SNES_TRIG_WITH_POLL
.195889		e2 20		sep #$20	                SEP #$20        ; set A short
.19588b		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.19588f		29 03		and #$03	          AND #(NES_SNES_EN0 | NES_SNES_EN1)
.195891		c9 00		cmp #$00	          CMP #$00
.195893		f0 14		beq $1958a9	          BEQ END_OF_JOYSTICK_POLL
.195895		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE
.195899		09 80		ora #$80	          ORA #NES_SNES_TRIG   ; Set to 1 (Will auto Clear)
.19589b		8f 04 e8 af	sta $afe804	          STA JOYSTICK_MODE
.19589f						JOYSTICK_POLLING_ISNOTOVER
.19589f		af 04 e8 af	lda $afe804	          LDA JOYSTICK_MODE ;
.1958a3		29 40		and #$40	          AND #NES_SNES_DONE
.1958a5		c9 40		cmp #$40	          CMP #NES_SNES_DONE
.1958a7		d0 f6		bne $19589f	          BNE JOYSTICK_POLLING_ISNOTOVER
.1958a9						END_OF_JOYSTICK_POLL
.1958a9		6b		rtl		          RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/sdc_library.asm

.1958aa						SDC_TEST
.1958aa		8b		phb		                PHB
.1958ab		0b		phd		                PHD
.1958ac		08		php		                PHP
.1958ad		48		pha		                PHA             ; begin setdbr macro
.1958ae		08		php		                PHP
.1958af		e2 20		sep #$20	                SEP #$20        ; set A short
.1958b1		a9 00		lda #$00	                LDA #0
.1958b3		48		pha		                PHA
.1958b4		ab		plb		                PLB
.1958b5		28		plp		                PLP
.1958b6		68		pla		                PLA             ; end setdbr macro
.1958b7		48		pha		                PHA             ; begin setdp macro
.1958b8		08		php		                PHP
.1958b9		c2 20		rep #$20	                REP #$20        ; set A long
.1958bb		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1958be		5b		tcd		                TCD
.1958bf		28		plp		                PLP
.1958c0		68		pla		                PLA             ; end setdp macro
.1958c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1958c3		a9 f0		lda #$f0	                LDA #$F0                            ; Set white on black background
.1958c5		8d 1e 00	sta $001e	                STA @w CURCOLOR
.1958c8		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN
.1958cc		22 a0 10 00	jsl $0010a0	                JSL CSRHOME
.1958d0		22 10 59 19	jsl $195910	                JSL SDC_INIT                        ; Attempt to initilize the SDC interface
.1958d4		b0 03		bcs $1958d9	                BCS init_ok
.1958d6		82 15 00	brl $1958ee	                BRL done
.1958d9		a9 02		lda #$02	init_ok         LDA #BIOS_DEV_SD
.1958db		85 01		sta $0321	                STA BIOS_DEV
.1958dd		22 18 3f 19	jsl $193f18	                JSL DOS_MOUNT                       ; Attempt to mount the SDC
.1958e1		b0 03		bcs $1958e6	                BCS mount_ok
.1958e3		82 08 00	brl $1958ee	                BRL done
.1958e6		22 cf 4f 19	jsl $194fcf	mount_ok        JSL IF_DIROPEN
.1958ea		b0 02		bcs $1958ee	                BCS all_ok
.1958ec		80 00		bra $1958ee	                BRA done
.1958ee						all_ok
.1958ee		22 6c 10 00	jsl $00106c	done            JSL PRINTCR
.1958f2		28		plp		                PLP
.1958f3		2b		pld		                PLD
.1958f4		ab		plb		                PLB
.1958f5		6b		rtl		                RTL
.1958f6						SDC_WAITBUSY
.1958f6		08		php		                PHP
.1958f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1958f9		af 04 ea af	lda $afea04	wait_xact       LDA @l SDC_TRANS_STATUS_REG         ; Wait for the transaction to complete
.1958fd		29 01		and #$01	                AND #SDC_TRANS_BUSY
.1958ff		c9 01		cmp #$01	                CMP #SDC_TRANS_BUSY
.195901		f0 f6		beq $1958f9	                BEQ wait_xact
.195903		28		plp		                PLP
.195904		6b		rtl		                RTL
.195905						SDC_RESET
.195905		08		php		                PHP
.195906		e2 20		sep #$20	                SEP #$20        ; set A short
.195908		a9 01		lda #$01	                LDA #1
.19590a		8f 01 ea af	sta $afea01	                STA @l SDC_CONTROL_REG
.19590e		28		plp		                PLP
.19590f		6b		rtl		                RTL
.195910						SDC_INIT
.195910		0b		phd		                PHD
.195911		8b		phb		                PHB
.195912		08		php		                PHP
.195913		48		pha		                PHA             ; begin setdbr macro
.195914		08		php		                PHP
.195915		e2 20		sep #$20	                SEP #$20        ; set A short
.195917		a9 00		lda #$00	                LDA #0
.195919		48		pha		                PHA
.19591a		ab		plb		                PLB
.19591b		28		plp		                PLP
.19591c		68		pla		                PLA             ; end setdbr macro
.19591d		48		pha		                PHA             ; begin setdp macro
.19591e		08		php		                PHP
.19591f		c2 20		rep #$20	                REP #$20        ; set A long
.195921		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195924		5b		tcd		                TCD
.195925		28		plp		                PLP
.195926		68		pla		                PLA             ; end setdp macro
.195927		e2 20		sep #$20	                SEP #$20        ; set A short
.195929		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.19592d		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.19592f		f0 04		beq $195935	                BEQ start_trans                     ; Yes: start the transaction
.195931		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195933		80 22		bra $195957	                BRA set_error
.195935		a9 01		lda #$01	start_trans     LDA #SDC_TRANS_INIT_SD
.195937		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG           ; Set Init SD
.19593b		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.19593d		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195941		22 f6 58 19	jsl $1958f6	                JSL SDC_WAITBUSY                    ; Wait for initialization to complete
.195945		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195949		d0 07		bne $195952	                BNE ret_error                       ; Is there one? Process the error
.19594b		64 00		stz $0320	ret_success     STZ BIOS_STATUS
.19594d		28		plp		                PLP
.19594e		ab		plb		                PLB
.19594f		2b		pld		                PLD
.195950		38		sec		                SEC
.195951		6b		rtl		                RTL
.195952		8d 06 03	sta $0306	ret_error       STA @w FDC_ST0
.195955		a9 8b		lda #$8b	                LDA #BIOS_ERR_NOTINIT
.195957		85 00		sta $0320	set_error       STA BIOS_STATUS
.195959		28		plp		                PLP
.19595a		ab		plb		                PLB
.19595b		2b		pld		                PLD
.19595c		18		clc		                CLC
.19595d		6b		rtl		                RTL
.19595e						SDC_GETBLOCK
.19595e		0b		phd		                PHD
.19595f		8b		phb		                PHB
.195960		08		php		                PHP
.195961		48		pha		                PHA             ; begin setdbr macro
.195962		08		php		                PHP
.195963		e2 20		sep #$20	                SEP #$20        ; set A short
.195965		a9 00		lda #$00	                LDA #0
.195967		48		pha		                PHA
.195968		ab		plb		                PLB
.195969		28		plp		                PLP
.19596a		68		pla		                PLA             ; end setdbr macro
.19596b		48		pha		                PHA             ; begin setdp macro
.19596c		08		php		                PHP
.19596d		c2 20		rep #$20	                REP #$20        ; set A long
.19596f		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195972		5b		tcd		                TCD
.195973		28		plp		                PLP
.195974		68		pla		                PLA             ; end setdp macro
.195975		e2 20		sep #$20	                SEP #$20        ; set A short
.195977		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.19597b		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.19597d		f0 04		beq $195983	                BEQ led_on                          ; Yes: turn on the LED
.19597f		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195981		80 71		bra $1959f4	                BRA ret_error
.195983		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195987		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195989		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.19598d		a9 00		lda #$00	                LDA #0
.19598f		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195993		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to read
.195995		0a		asl a		                ASL A
.195996		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.19599a		a5 03		lda $0323	                LDA BIOS_LBA+1
.19599c		2a		rol a		                ROL A
.19599d		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.1959a1		a5 04		lda $0324	                LDA BIOS_LBA+2
.1959a3		2a		rol a		                ROL A
.1959a4		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.1959a8		a9 02		lda #$02	                LDA #SDC_TRANS_READ_BLK             ; Set the transaction to READ
.1959aa		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.1959ae		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.1959b0		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.1959b4		22 f6 58 19	jsl $1958f6	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.1959b8		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1959bc		d0 36		bne $1959f4	                BNE ret_error                       ; Is there one? Process the error
.1959be		e2 20		sep #$20	                SEP #$20        ; set A short
.1959c0		af 13 ea af	lda $afea13	                LDA @l SDC_RX_FIFO_DATA_CNT_LO      ; Record the number of bytes read
.1959c4		85 0a		sta $032a	                STA BIOS_FIFO_COUNT
.1959c6		af 12 ea af	lda $afea12	                LDA @l SDC_RX_FIFO_DATA_CNT_HI
.1959ca		85 0b		sta $032b	                STA BIOS_FIFO_COUNT+1
.1959cc		c2 10		rep #$10	                REP #$10        ; set X long
.1959ce		a0 00 00	ldy #$0000	                LDY #0
.1959d1		af 10 ea af	lda $afea10	loop_rd         LDA @l SDC_RX_FIFO_DATA_REG         ; Get the byte...
.1959d5		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y               ; Save it to the buffer
.1959d7		c8		iny		                INY                                 ; Advance to the next byte
.1959d8		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.1959db		d0 f4		bne $1959d1	                BNE loop_rd                         ; No: keep reading
.1959dd		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.1959e1		d0 11		bne $1959f4	                BNE ret_error                       ; Is there one? Process the error
.1959e3		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.1959e5		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1959e9		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1959eb		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.1959ef		28		plp		                PLP
.1959f0		ab		plb		                PLB
.1959f1		2b		pld		                PLD
.1959f2		38		sec		                SEC
.1959f3		6b		rtl		                RTL
.1959f4		85 00		sta $0320	ret_error       STA BIOS_STATUS
.1959f6		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.1959fa		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.1959fc		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a00		28		plp		                PLP
.195a01		ab		plb		                PLB
.195a02		2b		pld		                PLD
.195a03		18		clc		                CLC
.195a04		6b		rtl		                RTL
.195a05						SDC_PUTBLOCK
.195a05		0b		phd		                PHD
.195a06		8b		phb		                PHB
.195a07		08		php		                PHP
.195a08		48		pha		                PHA             ; begin setdbr macro
.195a09		08		php		                PHP
.195a0a		e2 20		sep #$20	                SEP #$20        ; set A short
.195a0c		a9 00		lda #$00	                LDA #0
.195a0e		48		pha		                PHA
.195a0f		ab		plb		                PLB
.195a10		28		plp		                PLP
.195a11		68		pla		                PLA             ; end setdbr macro
.195a12		48		pha		                PHA             ; begin setdp macro
.195a13		08		php		                PHP
.195a14		c2 20		rep #$20	                REP #$20        ; set A long
.195a16		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.195a19		5b		tcd		                TCD
.195a1a		28		plp		                PLP
.195a1b		68		pla		                PLA             ; end setdp macro
.195a1c		e2 20		sep #$20	                SEP #$20        ; set A short
.195a1e		af 12 e8 af	lda $afe812	                LDA @l SDCARD_STAT                  ; Check the SDC status
.195a22		89 01		bit #$01	                BIT #SDC_DETECTED                   ; Is a card present
.195a24		f0 04		beq $195a2a	                BEQ check_wp                        ; Yes: check for write protect
.195a26		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA               ; No: return a NO MEDIA error
.195a28		80 65		bra $195a8f	                BRA ret_error
.195a2a		89 02		bit #$02	check_wp        BIT #SDC_WRITEPROT                  ; Is card writable?
.195a2c		f0 04		beq $195a32	                BEQ led_on                          ; Yes: start the transaction
.195a2e		a9 86		lda #$86	                LDA #BIOS_ERR_WRITEPROT             ; No: return a WRITE PROTECT error
.195a30		80 5d		bra $195a8f	                BRA ret_error
.195a32		af 80 e8 af	lda $afe880	led_on          LDA @l GABE_MSTR_CTRL               ; Turn on the SDC activity light
.195a36		09 02		ora #$02	                ORA #GABE_CTRL_SDC_LED
.195a38		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a3c		c2 10		rep #$10	                REP #$10        ; set X long
.195a3e		a0 00 00	ldy #$0000	                LDY #0
.195a41		b7 06		lda [$0326],y	loop_wr         LDA [BIOS_BUFF_PTR],Y               ; Get the byte...
.195a43		8f 20 ea af	sta $afea20	                STA @l SDC_TX_FIFO_DATA_REG         ; Save it to the SDC
.195a47		c8		iny		                INY                                 ; Advance to the next byte
.195a48		c0 00 02	cpy #$0200	                CPY #512                            ; Have we read all the bytes?
.195a4b		d0 f4		bne $195a41	                BNE loop_wr                         ; No: keep writing
.195a4d		a9 00		lda #$00	                LDA #0
.195a4f		8f 07 ea af	sta $afea07	                STA @l SDC_SD_ADDR_7_0_REG
.195a53		a5 02		lda $0322	                LDA BIOS_LBA                        ; Set the LBA to write
.195a55		0a		asl a		                ASL A
.195a56		8f 08 ea af	sta $afea08	                STA @l SDC_SD_ADDR_15_8_REG
.195a5a		a5 03		lda $0323	                LDA BIOS_LBA+1
.195a5c		2a		rol a		                ROL A
.195a5d		8f 09 ea af	sta $afea09	                STA @l SDC_SD_ADDR_23_16_REG
.195a61		a5 04		lda $0324	                LDA BIOS_LBA+2
.195a63		2a		rol a		                ROL A
.195a64		8f 0a ea af	sta $afea0a	                STA @l SDC_SD_ADDR_31_24_REG
.195a68		a9 03		lda #$03	                LDA #SDC_TRANS_WRITE_BLK            ; Set the transaction to WRITE
.195a6a		8f 02 ea af	sta $afea02	                STA @l SDC_TRANS_TYPE_REG
.195a6e		a9 01		lda #$01	                LDA #SDC_TRANS_START                ; Set the transaction to start
.195a70		8f 03 ea af	sta $afea03	                STA @l SDC_TRANS_CONTROL_REG
.195a74		22 f6 58 19	jsl $1958f6	                JSL SDC_WAITBUSY                    ; Wait for transaction to complete
.195a78		af 05 ea af	lda $afea05	                LDA @l SDC_TRANS_ERROR_REG          ; Check for errors
.195a7c		d0 11		bne $195a8f	                BNE ret_error                       ; Is there one? Process the error
.195a7e		64 00		stz $0320	ret_success     STZ BIOS_STATUS                     ; Return success
.195a80		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195a84		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195a86		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a8a		28		plp		                PLP
.195a8b		ab		plb		                PLB
.195a8c		2b		pld		                PLD
.195a8d		38		sec		                SEC
.195a8e		6b		rtl		                RTL
.195a8f		85 00		sta $0320	ret_error       STA BIOS_STATUS
.195a91		af 80 e8 af	lda $afe880	                LDA @l GABE_MSTR_CTRL               ; Turn off the SDC activity light
.195a95		29 fd		and #$fd	                AND #~GABE_CTRL_SDC_LED
.195a97		8f 80 e8 af	sta $afe880	                STA @l GABE_MSTR_CTRL
.195a9b		28		plp		                PLP
.195a9c		ab		plb		                PLB
.195a9d		2b		pld		                PLD
.195a9e		18		clc		                CLC
.195a9f		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/fdc_library.asm

=4295454					FDC_MOTOR_TIME = 4295454        ; Time to wait for the motor to come on: 300ms
=2147727					FDC_SEEK_TIME = 2147727         ; Time to wait for a seek to happen: 150ms
=900						FDC_MOTOR_ON_TIME = 60*15       ; Time (in SOF interrupt counts) for the motor to stay on: ~15s?
=30						FDC_WAIT_TIME = 30              ; Time (in SOF interrupt counts) to allow for a waiting loop to continue
=13						BPB_SECPERCLUS12_OFF = 13       ; Offset to sectors per cluster in a FAT12 boot sector
=17						BPB_ROOT_MAX_ENTRY12_OFF = 17   ; Offset to the maximum number of entries in the root directory in FAT12 boot sector
=22						BPB_SECPERFAT12_OFF = 22        ; Offset to sectors per FAT on a FAT12 boot sector
.195aa0						FDC_TEST
.195aa0		8b		phb		                    PHB
.195aa1		0b		phd		                    PHD
.195aa2		08		php		                    PHP
.195aa3		48		pha		                PHA             ; begin setdbr macro
.195aa4		08		php		                PHP
.195aa5		e2 20		sep #$20	                SEP #$20        ; set A short
.195aa7		a9 00		lda #$00	                LDA #0
.195aa9		48		pha		                PHA
.195aaa		ab		plb		                PLB
.195aab		28		plp		                PLP
.195aac		68		pla		                PLA             ; end setdbr macro
.195aad		48		pha		                PHA             ; begin setdp macro
.195aae		08		php		                PHP
.195aaf		c2 20		rep #$20	                REP #$20        ; set A long
.195ab1		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195ab4		5b		tcd		                TCD
.195ab5		28		plp		                PLP
.195ab6		68		pla		                PLA             ; end setdp macro
.195ab7		e2 20		sep #$20	                SEP #$20        ; set A short
.195ab9		a9 f0		lda #$f0	                    LDA #$F0
.195abb		8d 1e 00	sta $001e	                    STA @w CURCOLOR
.195abe		22 a8 10 00	jsl $0010a8	                    JSL CLRSCREEN
.195ac2		22 a0 10 00	jsl $0010a0	                    JSL CSRHOME
.195ac6		c2 30		rep #$30	                REP #$30        ; set A&X long
.195ac8		22 96 5d 19	jsl $195d96	                    JSL FDC_Init
.195acc		b0 03		bcs $195ad1	                    BCS init_ok
.195ace		82 20 00	brl $195af1	                    BRL motor_off
.195ad1		22 95 64 19	jsl $196495	init_ok             JSL FDC_CHK_MEDIA
.195ad5		90 03		bcc $195ada	                    BCC no_media
.195ad7		82 03 00	brl $195add	                    BRL is_ok1
.195ada						no_media
.195ada		82 14 00	brl $195af1	                    BRL motor_off
.195add		22 28 63 19	jsl $196328	is_ok1              JSL FDC_MOUNT
.195ae1		90 03		bcc $195ae6	                    BCC mount_err
.195ae3		82 03 00	brl $195ae9	                    BRL is_ok2
.195ae6						mount_err
.195ae6		82 08 00	brl $195af1	                    BRL motor_off
.195ae9		22 fd 5a 19	jsl $195afd	is_ok2              JSL FDC_TEST_PUTBLOCK
.195aed		b0 02		bcs $195af1	                    BCS all_ok
.195aef		80 00		bra $195af1	                    BRA motor_off
.195af1						all_ok
.195af1		22 6c 10 00	jsl $00106c	motor_off           JSL PRINTCR
.195af5		22 46 5e 19	jsl $195e46	                    JSL FDC_Motor_Off
.195af9		28		plp		                    PLP
.195afa		2b		pld		                    PLD
.195afb		ab		plb		                    PLB
.195afc		6b		rtl		                    RTL
.195afd						FDC_TEST_PUTBLOCK
.195afd		e2 20		sep #$20	                SEP #$20        ; set A short
.195aff		a9 00		lda #$00	                    LDA #0                          ; Initialize the data to write to the drive
.195b01		a2 00 00	ldx #$0000	                    LDX #0
.195b04		9f 00 00 03	sta $030000,x	init_loop           STA @l TEST_BUFFER,X
.195b08		1a		inc a		                    INC A
.195b09		e8		inx		                    INX
.195b0a		e0 00 02	cpx #$0200	                    CPX #512
.195b0d		d0 f5		bne $195b04	                    BNE init_loop
.195b0f		c2 20		rep #$20	                REP #$20        ; set A long
.195b11		a9 00 00	lda #$0000	                    LDA #<>TEST_BUFFER              ; Set BIOS_BUFF_PTR
.195b14		8f 26 03 00	sta $000326	                    STA @l BIOS_BUFF_PTR
.195b18		a9 03 00	lda #$0003	                    LDA #`TEST_BUFFER
.195b1b		8f 28 03 00	sta $000328	                    STA @l BIOS_BUFF_PTR+2
.195b1f		a9 64 00	lda #$0064	                    LDA #100                        ; Set LBA = 100
.195b22		8f 22 03 00	sta $000322	                    STA @l BIOS_LBA
.195b26		a9 00 00	lda #$0000	                    LDA #0
.195b29		8f 24 03 00	sta $000324	                    STA @l BIOS_LBA+2
.195b2d		22 bc 62 19	jsl $1962bc	                    JSL FDC_PUTBLOCK                ; Try to write the data
.195b31		6b		rtl		                    RTL
>195b32		40 46 3a 53 41 4d 50 4c		BOOT_FILE           .null "@F:SAMPLE.PGX Hello, world!"
>195b3a		45 2e 50 47 58 20 48 65 6c 6c 6f 2c 20 77 6f 72
>195b4a		6c 64 21 00
=$020000					TEST_LOCATION = $020000                     ; Location to try to load it
=$030000					TEST_BUFFER = $030000                       ; Temporary location for a cluster buffer
.195b4e						FDC_Check_RQM
.195b4e		0b		phd		                    PHD
.195b4f		08		php		                    PHP
.195b50		48		pha		                PHA             ; begin setdp macro
.195b51		08		php		                PHP
.195b52		c2 20		rep #$20	                REP #$20        ; set A long
.195b54		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b57		5b		tcd		                TCD
.195b58		28		plp		                PLP
.195b59		68		pla		                PLA             ; end setdp macro
.195b5a		e2 20		sep #$20	                SEP #$20        ; set A short
.195b5c		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b5e		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195b62		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b64		30 12		bmi $195b78	                    BMI time_out            ; If so: signal a time out
.195b66		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b6a		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195b6c		f0 f4		beq $195b62	                    BEQ loop
.195b6e		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b70		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195b74		28		plp		                    PLP
.195b75		2b		pld		                    PLD
.195b76		38		sec		                    SEC
.195b77		60		rts		                    RTS
.195b78		28		plp		time_out            PLP
.195b79		2b		pld		                    PLD
.195b7a		18		clc		                    CLC
.195b7b		60		rts		                    RTS
.195b7c						FDC_Check_DRV0_BSY
.195b7c		0b		phd		                    PHD
.195b7d		08		php		                    PHP
.195b7e		48		pha		                PHA             ; begin setdp macro
.195b7f		08		php		                PHP
.195b80		c2 20		rep #$20	                REP #$20        ; set A long
.195b82		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195b85		5b		tcd		                TCD
.195b86		28		plp		                PLP
.195b87		68		pla		                PLA             ; end setdp macro
.195b88		e2 20		sep #$20	                SEP #$20        ; set A short
.195b8a		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195b8c		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195b90		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195b92		30 12		bmi $195ba6	                    BMI time_out            ; If so: signal a time out
.195b94		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195b98		89 01		bit #$01	                    BIT #FDC_MSR_DRV0BSY
.195b9a		d0 f4		bne $195b90	                    BNE loop
.195b9c		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195b9e		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195ba2		28		plp		                    PLP
.195ba3		2b		pld		                    PLD
.195ba4		38		sec		                    SEC
.195ba5		60		rts		                    RTS
.195ba6		28		plp		time_out            PLP
.195ba7		2b		pld		                    PLD
.195ba8		18		clc		                    CLC
.195ba9		60		rts		                    RTS
.195baa						FDC_Check_CMD_BSY
.195baa		0b		phd		                    PHD
.195bab		08		php		                    PHP
.195bac		48		pha		                PHA             ; begin setdp macro
.195bad		08		php		                PHP
.195bae		c2 20		rep #$20	                REP #$20        ; set A long
.195bb0		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195bb3		5b		tcd		                TCD
.195bb4		28		plp		                PLP
.195bb5		68		pla		                PLA             ; end setdp macro
.195bb6		e2 20		sep #$20	                SEP #$20        ; set A short
.195bb8		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195bba		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195bbe		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195bc0		30 12		bmi $195bd4	                    BMI time_out            ; If so: signal a time out
.195bc2		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195bc6		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195bc8		d0 f4		bne $195bbe	                    BNE loop
.195bca		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195bcc		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195bd0		28		plp		                    PLP
.195bd1		2b		pld		                    PLD
.195bd2		38		sec		                    SEC
.195bd3		60		rts		                    RTS
.195bd4		28		plp		time_out            PLP
.195bd5		2b		pld		                    PLD
.195bd6		18		clc		                    CLC
.195bd7		60		rts		                    RTS
.195bd8						FDC_Can_Read_Data
.195bd8		0b		phd		                    PHD
.195bd9		08		php		                    PHP
.195bda		48		pha		                PHA             ; begin setdp macro
.195bdb		08		php		                PHP
.195bdc		c2 20		rep #$20	                REP #$20        ; set A long
.195bde		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195be1		5b		tcd		                TCD
.195be2		28		plp		                PLP
.195be3		68		pla		                PLA             ; end setdp macro
.195be4		e2 20		sep #$20	                SEP #$20        ; set A short
.195be6		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195be8		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195bec		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195bee		30 14		bmi $195c04	                    BMI time_out            ; If so: signal a time out
.195bf0		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195bf4		29 40		and #$40	                    AND #FDC_MSR_DIO
.195bf6		c9 40		cmp #$40	                    CMP #FDC_MSR_DIO
.195bf8		d0 f2		bne $195bec	                    BNE loop
.195bfa		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195bfc		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195c00		28		plp		                    PLP
.195c01		2b		pld		                    PLD
.195c02		38		sec		                    SEC
.195c03		60		rts		                    RTS
.195c04		28		plp		time_out            PLP
.195c05		2b		pld		                    PLD
.195c06		18		clc		                    CLC
.195c07		60		rts		                    RTS
.195c08						FDC_CAN_WRITE
.195c08		0b		phd		                    PHD
.195c09		08		php		                    PHP
.195c0a		48		pha		                PHA             ; begin setdp macro
.195c0b		08		php		                PHP
.195c0c		c2 20		rep #$20	                REP #$20        ; set A long
.195c0e		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c11		5b		tcd		                TCD
.195c12		28		plp		                PLP
.195c13		68		pla		                PLA             ; end setdp macro
.195c14		e2 20		sep #$20	                SEP #$20        ; set A short
.195c16		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME      ; Set a time out for the loop
.195c18		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195c1c		a5 2c		lda $032c	loop                LDA @b BIOS_FLAGS       ; Check if there was a time out
.195c1e		30 14		bmi $195c34	                    BMI time_out            ; If so: signal a time out
.195c20		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR
.195c24		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195c26		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195c28		d0 f2		bne $195c1c	                    BNE loop
.195c2a		a9 00		lda #$00	                    LDA #0                  ; Clear the time out
.195c2c		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195c30		28		plp		                    PLP
.195c31		2b		pld		                    PLD
.195c32		38		sec		                    SEC
.195c33		60		rts		                    RTS
.195c34		28		plp		time_out            PLP
.195c35		2b		pld		                    PLD
.195c36		18		clc		                    CLC
.195c37		60		rts		                    RTS
.195c38						FDC_DELAY_10MS
.195c38		da		phx		                    PHX
.195c39		08		php		                    PHP
.195c3a		c2 10		rep #$10	                REP #$10        ; set X long
.195c3c		a2 80 3e	ldx #$3e80	                    LDX #16000          ; Wait for around 10ms
.195c3f		ea		nop		loop                NOP                 ; Each iteration should take 9 cycles
.195c40		ca		dex		                    DEX
.195c41		e0 00 00	cpx #$0000	                    CPX #0
.195c44		d0 f9		bne $195c3f	                    BNE loop
.195c46		28		plp		                    PLP
.195c47		fa		plx		                    PLX
.195c48		6b		rtl		                    RTL
.195c49						FDC_COMMAND
.195c49		da		phx		                    PHX
.195c4a		8b		phb		                    PHB
.195c4b		0b		phd		                    PHD
.195c4c		08		php		                    PHP
.195c4d		48		pha		                PHA             ; begin setdbr macro
.195c4e		08		php		                PHP
.195c4f		e2 20		sep #$20	                SEP #$20        ; set A short
.195c51		a9 00		lda #$00	                LDA #0
.195c53		48		pha		                PHA
.195c54		ab		plb		                PLB
.195c55		28		plp		                PLP
.195c56		68		pla		                PLA             ; end setdbr macro
.195c57		48		pha		                PHA             ; begin setdp macro
.195c58		08		php		                PHP
.195c59		c2 20		rep #$20	                REP #$20        ; set A long
.195c5b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195c5e		5b		tcd		                TCD
.195c5f		28		plp		                PLP
.195c60		68		pla		                PLA             ; end setdp macro
.195c61		22 38 5c 19	jsl $195c38	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms
.195c65		e2 30		sep #$30	                SEP #$30        ; set A&X short
.195c67		a2 00		ldx #$00	                    LDX #0
.195c69		a9 00		lda #$00	                    LDA #0
.195c6b		9d 10 05	sta $0510,x	clr_results         STA FDC_RESULTS,X                       ; Clear the result buffer
.195c6e		e8		inx		                    INX
.195c6f		e0 10		cpx #$10	                    CPX #16
.195c71		d0 f8		bne $195c6b	                    BNE clr_results
.195c73		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Validate we can send a command
.195c77		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195c79		c9 80		cmp #$80	                    CMP #FDC_MSR_RQM
.195c7b		f0 04		beq $195c81	                    BEQ start_send                          ; If so, start sending
.195c7d		22 96 5d 19	jsl $195d96	fdc_reset           JSL FDC_INIT                            ; Reset the FDC
.195c81						start_send
.195c81		e2 10		sep #$10	                SEP #$10        ; set X short
.195c83		a2 00		ldx #$00	                    LDX #0
.195c85		20 4e 5b	jsr $195b4e	send_loop           JSR FDC_Check_RQM                       ; Wait until we can write
.195c88		b0 03		bcs $195c8d	                    BCS send_param
.195c8a		82 5e 00	brl $195ceb	                    BRL time_out                            ; If there was a timeout, flag the time out
.195c8d		bd 00 05	lda $0500,x	send_param          LDA FDC_PARAMETERS,X                    ; Get the parameter/command byte to write
.195c90		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; Send it
.195c94		22 38 5c 19	jsl $195c38	                    JSL FDC_DELAY_10MS                      ; Wait around 10ms for things to settle
.195c98		e8		inx		                    INX                                     ; Advance to the next byte
.195c99		ec 30 05	cpx $0530	                    CPX FDC_PARAM_NUM
.195c9c		d0 e7		bne $195c85	                    BNE send_loop                           ; Keep sending until we've sent them all
.195c9e		ad 33 05	lda $0533	                    LDA FDC_EXPECT_DAT                      ; Check the data expectation byte
.195ca1		d0 03		bne $195ca6	                    BNE chk_data_dir
.195ca3		82 80 00	brl $195d26	                    BRL result_phase                        ; If 0: we just want a result
.195ca6		10 3c		bpl $195ce4	chk_data_dir        BPL rd_data                             ; If >0: we want to read data
.195ca8						wr_data
.195ca8		a5 0b		lda $030b	wr_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195caa		30 03		bmi $195caf	                    BMI wr_chk_rqm
.195cac		82 3c 00	brl $195ceb	                    BRL time_out                            ; If not, raise an error
.195caf		af f4 13 af	lda $af13f4	wr_chk_rqm          LDA @l SIO_FDC_MSR                      ; Wait for ready to write
.195cb3		89 80		bit #$80	                    BIT #FDC_MSR_RQM
.195cb5		f0 f1		beq $195ca8	                    BEQ wr_data_rdy
.195cb7		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA                     ; Check if in execution mode
.195cb9		d0 03		bne $195cbe	                    BNE wr_data_phase                       ; If so: transfer the data
.195cbb		82 68 00	brl $195d26	                    BRL result_phase                          ; If not: it's an error
.195cbe						wr_data_phase
.195cbe		c2 10		rep #$10	                REP #$10        ; set X long
.195cc0		a0 00 00	ldy #$0000	                    LDY #0
.195cc3		a5 0b		lda $030b	wr_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195cc5		30 03		bmi $195cca	                    BMI wr_chk_nondma
.195cc7		82 21 00	brl $195ceb	                    BRL time_out                            ; If not, raise an error
.195cca		af f4 13 af	lda $af13f4	wr_chk_nondma       LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195cce		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195cd0		f0 54		beq $195d26	                    BEQ result_phase                        ; If not: break out to result phase
.195cd2		89 80		bit #$80	                    BIT #FDC_MSR_RQM                        ; Check if we can read data
.195cd4		f0 ed		beq $195cc3	                    BEQ wr_data_loop                        ; No: keep waiting
.195cd6		b7 26		lda [$0326],y	                    LDA [BIOS_BUFF_PTR],Y                   ; Get the data byte
.195cd8		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA                      ; And save it to the buffer
.195cdc		c8		iny		                    INY                                     ; Move to the next position
.195cdd		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195ce0		d0 e1		bne $195cc3	                    BNE wr_data_loop                        ; If not at the end, keep fetching
.195ce2		80 42		bra $195d26	                    BRA result_phase                        ; ready for the result phase
.195ce4		20 d8 5b	jsr $195bd8	rd_data             JSR FDC_Can_Read_Data
.195ce7		a5 0b		lda $030b	rd_data_rdy         LDA FDC_STATUS                          ; Check that the motor is still spinning
.195ce9		30 07		bmi $195cf2	                    BMI chk_rd_rdy                          ; If so, check to see if the data is ready
.195ceb						time_out
.195ceb		e2 20		sep #$20	                SEP #$20        ; set A short
.195ced		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT                   ; Otherwise: throw a BIOS_ERR_TIMEOUT error
.195cef		82 9c 00	brl $195d8e	                    BRL pass_error
.195cf2		af f4 13 af	lda $af13f4	chk_rd_rdy          LDA @l SIO_FDC_MSR                      ; Wait for data to be ready
.195cf6		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195cf8		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195cfa		d0 eb		bne $195ce7	                    BNE rd_data_rdy
.195cfc		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check to see if the FDC is in execution phase
.195d00		89 20		bit #$20	                    BIT #FDC_MSR_NONDMA
.195d02		d0 03		bne $195d07	                    BNE rd_data_phase                       ; If so: transfer the data
.195d04		82 83 00	brl $195d8a	                    BRL error                               ; If not: it's an error
.195d07						rd_data_phase
.195d07		c2 10		rep #$10	                REP #$10        ; set X long
.195d09		a0 00 00	ldy #$0000	                    LDY #0
.195d0c		a5 0b		lda $030b	rd_data_loop        LDA FDC_STATUS                          ; Check that the motor is still spinning
.195d0e		10 db		bpl $195ceb	                    BPL time_out                            ; If not: throw a timeout error
.195d10		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Wait for the next byte to be ready
.195d14		29 c0		and #$c0	                    AND #FDC_MSR_RQM | FDC_MSR_DIO
.195d16		c9 c0		cmp #$c0	                    CMP #FDC_MSR_RQM | FDC_MSR_DIO
.195d18		d0 f2		bne $195d0c	                    BNE rd_data_loop
.195d1a		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Get the data byte
.195d1e		97 26		sta [$0326],y	                    STA [BIOS_BUFF_PTR],Y                   ; And save it to the buffer
.195d20		c8		iny		                    INY                                     ; Move to the next position
.195d21		c0 00 02	cpy #$0200	                    CPY #512                                ; TODO: set this from the parameters?
.195d24		d0 e6		bne $195d0c	                    BNE rd_data_loop                        ; If not at the end, keep fetching
.195d26		ad 32 05	lda $0532	result_phase        LDA FDC_RESULT_NUM                      ; If no results are expected...
.195d29		f0 34		beq $195d5f	                    BEQ chk_busy                            ; Then we're done
.195d2b		e2 10		sep #$10	                SEP #$10        ; set X short
.195d2d		a2 00		ldx #$00	                    LDX #0
.195d2f		a9 1e		lda #$1e	                    LDA #FDC_WAIT_TIME                      ; Set the watchdog timer
.195d31		22 c7 3a 19	jsl $193ac7	                    JSL ISETTIMEOUT
.195d35		20 d8 5b	jsr $195bd8	result_loop         JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d38		90 b1		bcc $195ceb	                    BCC time_out                            ; If there was a time out, raise an error
.195d3a		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195d3e		20 d8 5b	jsr $195bd8	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d41		90 a8		bcc $195ceb	                    BCC time_out                            ; If there was a time out, raise an error
.195d43		af f5 13 af	lda $af13f5	read_result         LDA @l SIO_FDC_DTA                      ; Yes: get the data
.195d47		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X                       ; Save it to the result buffer
.195d4a		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM
.195d4d		90 9c		bcc $195ceb	                    BCC time_out                            ; If there was a time out, flag the error
.195d4f		af f4 13 af	lda $af13f4	rd_chk_1            LDA @l SIO_FDC_MSR
.195d53		29 50		and #$50	                    AND #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195d55		c9 50		cmp #$50	                    CMP #FDC_MSR_DIO | FDC_MSR_CMDBSY
.195d57		d0 06		bne $195d5f	                    BNE chk_busy
.195d59		e8		inx		                    INX                                     ; Move to the next result positions
.195d5a		ec 32 05	cpx $0532	                    CPX FDC_RESULT_NUM
.195d5d		d0 e4		bne $195d43	                    BNE read_result                         ; And keep looping until we've read all
.195d5f						chk_busy
.195d5f		c2 10		rep #$10	                REP #$10        ; set X long
.195d61		a2 0a 00	ldx #$000a	                    LDX #10                                 ; Wait 10ms (I guess?)
.195d64		22 dd 0f 19	jsl $190fdd	                    JSL ILOOP_MS
.195d68		af f4 13 af	lda $af13f4	                    LDA @l SIO_FDC_MSR                      ; Check the command busy bit
.195d6c		89 10		bit #$10	                    BIT #FDC_MSR_CMDBSY
.195d6e		f0 12		beq $195d82	                    BEQ done                                ; If not set: we're done
.195d70		20 d8 5b	jsr $195bd8	                    JSR FDC_Can_Read_Data                   ; Wait until we can read
.195d73		b0 03		bcs $195d78	                    BCS get_result_byte
.195d75		82 73 ff	brl $195ceb	                    BRL time_out                            ; If there was a time out, flag the error
.195d78		af f5 13 af	lda $af13f5	get_result_byte     LDA @l SIO_FDC_DTA                      ; Read the data
.195d7c		9d 10 05	sta $0510,x	                    STA FDC_RESULTS,X
.195d7f		e8		inx		                    INX
.195d80		80 dd		bra $195d5f	                    BRA chk_busy                            ; And keep checking
.195d82						done
.195d82		64 20		stz $0320	                    STZ BIOS_STATUS
.195d84		28		plp		                    PLP
.195d85		2b		pld		                    PLD
.195d86		ab		plb		                    PLB
.195d87		fa		plx		                    PLX
.195d88		38		sec		                    SEC
.195d89		6b		rtl		                    RTL
.195d8a						error
.195d8a		e2 20		sep #$20	                SEP #$20        ; set A short
.195d8c		a9 85		lda #$85	                    LDA #BIOS_ERR_CMD
.195d8e		85 20		sta $0320	pass_error          STA BIOS_STATUS
.195d90		28		plp		                    PLP
.195d91		2b		pld		                    PLD
.195d92		ab		plb		                    PLB
.195d93		fa		plx		                    PLX
.195d94		18		clc		                    CLC
.195d95		6b		rtl		                    RTL
.195d96						FDC_Init
.195d96		08		php		                    PHP
.195d97		c2 10		rep #$10	                REP #$10        ; set X long
.195d99		e2 20		sep #$20	                SEP #$20        ; set A short
.195d9b		a9 00		lda #$00	                    LDA #0
.195d9d		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195da1		a2 e8 03	ldx #$03e8	                    LDX #1000                   ; Wait
.195da4		a0 00 00	ldy #$0000	                    LDY #0
.195da7		22 ea 0f 19	jsl $190fea	                    JSL IDELAY
.195dab		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET         ; Reset the FDC
.195dad		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195db1		ea		nop		                    NOP
.195db2		ea		nop		                    NOP
.195db3		ea		nop		                    NOP
.195db4		ea		nop		                    NOP
.195db5		a9 00		lda #$00	                    LDA #$00                    ; Make sure the Speed and Compensation has been set
.195db7		8f f4 13 af	sta $af13f4	                    STA @l SIO_FDC_DSR
.195dbb		a9 00		lda #$00	                    LDA #$00                    ; Precompensation set to 0
.195dbd		8f f7 13 af	sta $af13f7	                    STA @l SIO_FDC_CCR
.195dc1		a2 8f c5	ldx #$c58f	                    LDX #<>FDC_SEEK_TIME
.195dc4		a0 20 00	ldy #$0020	                    LDY #`FDC_SEEK_TIME
.195dc7		22 ea 0f 19	jsl $190fea	                    JSL IDELAY
.195dcb		22 a6 5e 19	jsl $195ea6	                    JSL FDC_Sense_Int_Status
.195dcf		90 25		bcc $195df6	                    BCC pass_failure
.195dd1		22 a6 5e 19	jsl $195ea6	                    JSL FDC_Sense_Int_Status
.195dd5		90 1f		bcc $195df6	                    BCC pass_failure
.195dd7		22 a6 5e 19	jsl $195ea6	                    JSL FDC_Sense_Int_Status
.195ddb		90 19		bcc $195df6	                    BCC pass_failure
.195ddd		22 a6 5e 19	jsl $195ea6	                    JSL FDC_Sense_Int_Status
.195de1		90 13		bcc $195df6	                    BCC pass_failure
.195de3		22 68 5f 19	jsl $195f68	                    JSL FDC_Configure_Command
.195de7		90 0d		bcc $195df6	                    BCC pass_failure
.195de9		22 0f 5f 19	jsl $195f0f	                    JSL FDC_Specify_Command
.195ded		90 07		bcc $195df6	                    BCC pass_failure
.195def		22 12 5e 19	jsl $195e12	                    JSL FDC_Motor_On
.195df3		28		plp		                    PLP
.195df4		38		sec		                    SEC
.195df5		6b		rtl		                    RTL
.195df6		28		plp		pass_failure        PLP
.195df7		18		clc		                    CLC
.195df8		6b		rtl		                    RTL
.195df9						FDC_MOTOR_NEEDED
.195df9		08		php		                    PHP
.195dfa		c2 20		rep #$20	                REP #$20        ; set A long
.195dfc		78		sei		                    SEI                         ; Turn off interrupts
.195dfd		a9 84 03	lda #$0384	                    LDA #FDC_MOTOR_ON_TIME      ; Reset the FDC timeout clock
.195e00		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195e04		e2 20		sep #$20	                SEP #$20        ; set A short
.195e06		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195e0a		29 fe		and #$fe	                    AND #~FNX0_INT00_SOF        ; Enable the SOF interrupt
.195e0c		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195e10		28		plp		                    PLP
.195e11		6b		rtl		                    RTL
.195e12						FDC_Motor_On
.195e12		08		php		                    PHP
.195e13		22 f9 5d 19	jsl $195df9	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195e17		e2 20		sep #$20	                SEP #$20        ; set A short
.195e19		af f2 13 af	lda $af13f2	                    LDA @l SIO_FDC_DOR          ; Check to see if the motor is already on
.195e1d		89 10		bit #$10	                    BIT #FDC_DOR_MOT0
.195e1f		d0 1f		bne $195e40	                    BNE done                    ; If so: skip
.195e21		a9 14		lda #$14	                    LDA #FDC_DOR_MOT0 | FDC_DOR_NRESET
.195e23		8f f2 13 af	sta $af13f2	                    STA @l SIO_FDC_DOR
.195e27		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM           ; Make sure we can leave knowing that everything set properly
.195e2a		90 17		bcc $195e43	                    BCC time_out
.195e2c		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.195e2f		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.195e32		22 ea 0f 19	jsl $190fea	                    JSL IDELAY
.195e36		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195e3a		09 80		ora #$80	                    ORA #$80                    ; Flag that the motor should be on
.195e3c		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195e40		28		plp		done                PLP
.195e41		38		sec		                    SEC
.195e42		6b		rtl		                    RTL
.195e43		28		plp		time_out            PLP                         ; Return a timeout error
.195e44		18		clc		                    CLC
.195e45		6b		rtl		                    RTL
.195e46						FDC_Motor_Off
.195e46		08		php		                    PHP
.195e47		e2 20		sep #$20	                SEP #$20        ; set A short
.195e49		a9 04		lda #$04	                    LDA #FDC_DOR_NRESET
.195e4b		8f f2 13 af	sta $af13f2	                    STA @L SIO_FDC_DOR
.195e4f		c2 20		rep #$20	                REP #$20        ; set A long
.195e51		78		sei		                    SEI                         ; Turn off interrupts
.195e52		a9 00 00	lda #$0000	                    LDA #0                      ; Set FDC motor timeout counter to 0 to disable it
.195e55		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.195e59		e2 20		sep #$20	                SEP #$20        ; set A short
.195e5b		af 4c 01 00	lda $00014c	                    LDA @l INT_MASK_REG0
.195e5f		09 01		ora #$01	                    ORA #FNX0_INT00_SOF         ; Disable the SOF interrupt
.195e61		8f 4c 01 00	sta $00014c	                    STA @l INT_MASK_REG0
.195e65		af 0b 03 00	lda $00030b	                    LDA @l FDC_STATUS
.195e69		29 7f		and #$7f	                    AND #$7F                    ; Flag that the motor should be off
.195e6b		8f 0b 03 00	sta $00030b	                    STA @l FDC_STATUS
.195e6f		28		plp		                    PLP
.195e70		6b		rtl		                    RTL
.195e71						FDC_Recalibrate_Command
.195e71		0b		phd		                    PHD
.195e72		08		php		                    PHP
.195e73		48		pha		                PHA             ; begin setdp macro
.195e74		08		php		                PHP
.195e75		c2 20		rep #$20	                REP #$20        ; set A long
.195e77		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195e7a		5b		tcd		                TCD
.195e7b		28		plp		                PLP
.195e7c		68		pla		                PLA             ; end setdp macro
.195e7d		22 f9 5d 19	jsl $195df9	                    JSL FDC_MOTOR_NEEDED        ; Reset the spindle motor timeout clock
.195e81		e2 20		sep #$20	                SEP #$20        ; set A short
.195e83		a9 07		lda #$07	                    LDA #FDC_CMD_RECALIBRATE    ; RECALIBRATE Command
.195e85		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195e88		a5 00		lda $0300	                    LDA FDC_DRIVE
.195e8a		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.195e8d		a9 02		lda #$02	                    LDA #2
.195e8f		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM           ; 2 parameters
.195e92		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT          ; 0 data
.195e95		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM          ; 0 results
.195e98		22 49 5c 19	jsl $195c49	                    JSL FDC_COMMAND             ; Issue the command
.195e9c		90 04		bcc $195ea2	                    BCC pass_failure            ; If failure, pass the failure up
.195e9e		28		plp		                    PLP
.195e9f		2b		pld		                    PLD
.195ea0		38		sec		                    SEC
.195ea1		6b		rtl		                    RTL
.195ea2		28		plp		pass_failure        PLP
.195ea3		2b		pld		                    PLD
.195ea4		18		clc		                    CLC
.195ea5		6b		rtl		                    RTL
.195ea6						FDC_Sense_Int_Status
.195ea6		8b		phb		                    PHB
.195ea7		0b		phd		                    PHD
.195ea8		08		php		                    PHP
.195ea9		48		pha		                PHA             ; begin setdbr macro
.195eaa		08		php		                PHP
.195eab		e2 20		sep #$20	                SEP #$20        ; set A short
.195ead		a9 00		lda #$00	                LDA #0
.195eaf		48		pha		                PHA
.195eb0		ab		plb		                PLB
.195eb1		28		plp		                PLP
.195eb2		68		pla		                PLA             ; end setdbr macro
.195eb3		48		pha		                PHA             ; begin setdp macro
.195eb4		08		php		                PHP
.195eb5		c2 20		rep #$20	                REP #$20        ; set A long
.195eb7		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195eba		5b		tcd		                TCD
.195ebb		28		plp		                PLP
.195ebc		68		pla		                PLA             ; end setdp macro
.195ebd		c2 30		rep #$30	                REP #$30        ; set A&X long
.195ebf		a2 0a 00	ldx #$000a	                    LDX #10                            ; Wait for 10ms
.195ec2		22 dd 0f 19	jsl $190fdd	                    JSL ILOOP_MS
.195ec6		e2 20		sep #$20	                SEP #$20        ; set A short
.195ec8		64 06		stz $0306	                    STZ FDC_ST0                         ; Clear ST0
.195eca		a9 ff		lda #$ff	                    LDA #$FF
.195ecc		85 0a		sta $030a	                    STA FDC_PCN                         ; Set PCN to some obviously bad value
.195ece		20 aa 5b	jsr $195baa	                    JSR FDC_Check_CMD_BSY               ; Check I can send a command
.195ed1		90 30		bcc $195f03	                    BCC time_out                        ; If there was a time out, raise an error
.195ed3		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195ed6		90 2b		bcc $195f03	                    BCC time_out                        ; If there was a time out, raise an error
.195ed8		a9 08		lda #$08	                    LDA #FDC_CMD_SENSE_INTERRUPT
.195eda		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195ede		20 d8 5b	jsr $195bd8	                    JSR FDC_Can_Read_Data
.195ee1		90 20		bcc $195f03	                    BCC time_out                        ; If there was a time out, raise an error
.195ee3		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195ee6		90 1b		bcc $195f03	                    BCC time_out                        ; If there was a time out, raise an error
.195ee8		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195eec		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.195eee		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM                   ; Check if I can transfer data
.195ef1		90 10		bcc $195f03	                    BCC time_out                        ; If there was a time out, raise an error
.195ef3		af f5 13 af	lda $af13f5	                    LDA @l SIO_FDC_DTA
.195ef7		85 0a		sta $030a	                    STA FDC_PCN                         ; --- Cylinder ---
.195ef9		e2 20		sep #$20	                SEP #$20        ; set A short
.195efb		9c 20 03	stz $0320	                    STZ @w BIOS_STATUS
.195efe		28		plp		                    PLP
.195eff		2b		pld		                    PLD
.195f00		ab		plb		                    PLB
.195f01		38		sec		                    SEC
.195f02		6b		rtl		                    RTL
.195f03						time_out
.195f03		e2 20		sep #$20	                SEP #$20        ; set A short
.195f05		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT               ; Return a time out error
.195f07		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195f0a		28		plp		                    PLP
.195f0b		2b		pld		                    PLD
.195f0c		ab		plb		                    PLB
.195f0d		18		clc		                    CLC
.195f0e		6b		rtl		                    RTL
.195f0f						FDC_Specify_Command
.195f0f		8b		phb		                    PHB
.195f10		0b		phd		                    PHD
.195f11		08		php		                    PHP
.195f12		48		pha		                PHA             ; begin setdbr macro
.195f13		08		php		                PHP
.195f14		e2 20		sep #$20	                SEP #$20        ; set A short
.195f16		a9 00		lda #$00	                LDA #0
.195f18		48		pha		                PHA
.195f19		ab		plb		                PLB
.195f1a		28		plp		                PLP
.195f1b		68		pla		                PLA             ; end setdbr macro
.195f1c		48		pha		                PHA             ; begin setdp macro
.195f1d		08		php		                PHP
.195f1e		c2 20		rep #$20	                REP #$20        ; set A long
.195f20		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f23		5b		tcd		                TCD
.195f24		28		plp		                PLP
.195f25		68		pla		                PLA             ; end setdp macro
.195f26		c2 30		rep #$30	                REP #$30        ; set A&X long
.195f28		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195f2b		22 dd 0f 19	jsl $190fdd	                    JSL ILOOP_MS
.195f2f		e2 20		sep #$20	                SEP #$20        ; set A short
.195f31		20 aa 5b	jsr $195baa	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195f34		90 26		bcc $195f5c	                    BCC time_out            ; If there was a time out, raise an error
.195f36		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f39		90 21		bcc $195f5c	                    BCC time_out            ; If there was a time out, raise an error
.195f3b		a9 03		lda #$03	                    LDA #FDC_CMD_SPECIFY    ; Specify Command
.195f3d		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f41		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f44		90 16		bcc $195f5c	                    BCC time_out            ; If there was a time out, raise an error
.195f46		a9 cf		lda #$cf	                    LDA #$CF
.195f48		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f4c		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f4f		90 0b		bcc $195f5c	                    BCC time_out            ; If there was a time out, raise an error
.195f51		a9 01		lda #$01	                    LDA #$01                ; 1 = Non-DMA
.195f53		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f57		28		plp		                    PLP
.195f58		2b		pld		                    PLD
.195f59		ab		plb		                    PLB
.195f5a		38		sec		                    SEC
.195f5b		6b		rtl		                    RTL
.195f5c						time_out
.195f5c		e2 20		sep #$20	                SEP #$20        ; set A short
.195f5e		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195f60		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195f63		28		plp		                    PLP
.195f64		2b		pld		                    PLD
.195f65		ab		plb		                    PLB
.195f66		18		clc		                    CLC
.195f67		6b		rtl		                    RTL
.195f68						FDC_Configure_Command
.195f68		8b		phb		                    PHB
.195f69		0b		phd		                    PHD
.195f6a		08		php		                    PHP
.195f6b		48		pha		                PHA             ; begin setdbr macro
.195f6c		08		php		                PHP
.195f6d		e2 20		sep #$20	                SEP #$20        ; set A short
.195f6f		a9 00		lda #$00	                LDA #0
.195f71		48		pha		                PHA
.195f72		ab		plb		                PLB
.195f73		28		plp		                PLP
.195f74		68		pla		                PLA             ; end setdbr macro
.195f75		48		pha		                PHA             ; begin setdp macro
.195f76		08		php		                PHP
.195f77		c2 20		rep #$20	                REP #$20        ; set A long
.195f79		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195f7c		5b		tcd		                TCD
.195f7d		28		plp		                PLP
.195f7e		68		pla		                PLA             ; end setdp macro
.195f7f		c2 30		rep #$30	                REP #$30        ; set A&X long
.195f81		a2 0a 00	ldx #$000a	                    LDX #10                 ; Wait for 10ms
.195f84		22 dd 0f 19	jsl $190fdd	                    JSL ILOOP_MS
.195f88		e2 20		sep #$20	                SEP #$20        ; set A short
.195f8a		20 aa 5b	jsr $195baa	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195f8d		90 36		bcc $195fc5	                    BCC time_out            ; If there was a time out, raise an error
.195f8f		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f92		90 31		bcc $195fc5	                    BCC time_out            ; If there was a time out, raise an error
.195f94		a9 13		lda #$13	                    LDA #FDC_CMD_CONFIGURE  ; Specify Command
.195f96		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195f9a		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195f9d		90 26		bcc $195fc5	                    BCC time_out            ; If there was a time out, raise an error
.195f9f		a9 00		lda #$00	                    LDA #$00
.195fa1		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195fa5		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195fa8		90 1b		bcc $195fc5	                    BCC time_out            ; If there was a time out, raise an error
.195faa		a9 44		lda #$44	                    LDA #$44                ; Implied Seek, FIFOTHR = 4 byte
.195fac		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195fb0		20 4e 5b	jsr $195b4e	                    JSR FDC_Check_RQM       ; Check if I can transfer data
.195fb3		90 10		bcc $195fc5	                    BCC time_out            ; If there was a time out, raise an error
.195fb5		a9 00		lda #$00	                    LDA #$00
.195fb7		8f f5 13 af	sta $af13f5	                    STA @l SIO_FDC_DTA
.195fbb		20 aa 5b	jsr $195baa	                    JSR FDC_Check_CMD_BSY   ; Check I can send a command
.195fbe		90 05		bcc $195fc5	                    BCC time_out            ; If there was a time out, raise an error
.195fc0		28		plp		                    PLP
.195fc1		2b		pld		                    PLD
.195fc2		ab		plb		                    PLB
.195fc3		38		sec		                    SEC
.195fc4		6b		rtl		                    RTL
.195fc5						time_out
.195fc5		e2 20		sep #$20	                SEP #$20        ; set A short
.195fc7		a9 8c		lda #$8c	                    LDA #BIOS_ERR_TIMEOUT   ; Return a time out error
.195fc9		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.195fcc		28		plp		                    PLP
.195fcd		2b		pld		                    PLD
.195fce		ab		plb		                    PLB
.195fcf		18		clc		                    CLC
.195fd0		6b		rtl		                    RTL
.195fd1						FDC_Read_ID_Command
.195fd1		8b		phb		                    PHB
.195fd2		0b		phd		                    PHD
.195fd3		08		php		                    PHP
.195fd4		48		pha		                PHA             ; begin setdbr macro
.195fd5		08		php		                PHP
.195fd6		e2 20		sep #$20	                SEP #$20        ; set A short
.195fd8		a9 00		lda #$00	                LDA #0
.195fda		48		pha		                PHA
.195fdb		ab		plb		                PLB
.195fdc		28		plp		                PLP
.195fdd		68		pla		                PLA             ; end setdbr macro
.195fde		48		pha		                PHA             ; begin setdp macro
.195fdf		08		php		                PHP
.195fe0		c2 20		rep #$20	                REP #$20        ; set A long
.195fe2		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.195fe5		5b		tcd		                TCD
.195fe6		28		plp		                PLP
.195fe7		68		pla		                PLA             ; end setdp macro
.195fe8		e2 20		sep #$20	                SEP #$20        ; set A short
.195fea		a9 0a		lda #$0a	                    LDA #FDC_CMD_READ_ID                ; READID Command
.195fec		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.195fef		a9 01		lda #$01	                    LDA #1
.195ff1		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.195ff4		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.195ff7		a9 07		lda #$07	                    LDA #7
.195ff9		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.195ffc		22 49 5c 19	jsl $195c49	                    JSL FDC_COMMAND                     ; Issue the command
.196000		90 27		bcc $196029	                    BCC pass_failure
.196002		ad 10 05	lda $0510	                    LDA FDC_RESULTS
.196005		85 06		sta $0306	                    STA FDC_ST0                         ; Get ST0
.196007		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.19600a		85 07		sta $0307	                    STA FDC_ST1                         ; Get ST1
.19600c		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.19600f		85 08		sta $0308	                    STA FDC_ST2                         ; Get ST2
.196011		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196014		85 02		sta $0302	                    STA FDC_CYLINDER                    ; Get the cylinder
.196016		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.196019		85 01		sta $0301	                    STA FDC_HEAD                        ; Get the head
.19601b		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.19601e		85 0a		sta $030a	                    STA FDC_PCN                         ; Get the sector
.196020		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196023		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; Get the sector size code
.196025		28		plp		                    PLP
.196026		2b		pld		                    PLD
.196027		ab		plb		                    PLB
.196028		6b		rtl		                    RTL
.196029		28		plp		pass_failure        PLP
.19602a		2b		pld		                    PLD
.19602b		ab		plb		                    PLB
.19602c		18		clc		                    CLC
.19602d		6b		rtl		                    RTL
.19602e						FDC_DumpReg_Command
.19602e		0b		phd		                    PHD
.19602f		08		php		                    PHP
.196030		e2 20		sep #$20	                SEP #$20        ; set A short
.196032		a9 0e		lda #$0e	                    LDA #FDC_CMD_DUMPREG                ; DUMPREG Command
.196034		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196037		a9 01		lda #$01	                    LDA #1
.196039		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 4 parameter (the command)
.19603c		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.19603f		a9 0a		lda #$0a	                    LDA #10
.196041		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 10 results
.196044		22 49 5c 19	jsl $195c49	                    JSL FDC_COMMAND                     ; Issue the command
.196048		90 03		bcc $19604d	                    BCC pass_failure
.19604a		28		plp		                    PLP
.19604b		2b		pld		                    PLD
.19604c		6b		rtl		                    RTL
.19604d		28		plp		pass_failure        PLP
.19604e		2b		pld		                    PLD
.19604f		18		clc		                    CLC
.196050		6b		rtl		                    RTL
.196051						FDC_Seek_Track
.196051		8b		phb		                    PHB
.196052		0b		phd		                    PHD
.196053		08		php		                    PHP
.196054		48		pha		                PHA             ; begin setdbr macro
.196055		08		php		                PHP
.196056		e2 20		sep #$20	                SEP #$20        ; set A short
.196058		a9 00		lda #$00	                LDA #0
.19605a		48		pha		                PHA
.19605b		ab		plb		                PLB
.19605c		28		plp		                PLP
.19605d		68		pla		                PLA             ; end setdbr macro
.19605e		48		pha		                PHA             ; begin setdp macro
.19605f		08		php		                PHP
.196060		c2 20		rep #$20	                REP #$20        ; set A long
.196062		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196065		5b		tcd		                TCD
.196066		28		plp		                PLP
.196067		68		pla		                PLA             ; end setdp macro
.196068		22 f9 5d 19	jsl $195df9	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.19606c		e2 20		sep #$20	                SEP #$20        ; set A short
.19606e		a9 0f		lda #$0f	                    LDA #FDC_CMD_SEEK                   ; Seek Command
.196070		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196073		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.196075		29 01		and #$01	                    AND #$01
.196077		0a		asl a		                    ASL A
.196078		0a		asl a		                    ASL A
.196079		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.19607b		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.19607e		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; And the track
.196080		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.196083		a9 03		lda #$03	                    LDA #3
.196085		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 3 parameter (the command)
.196088		9c 33 05	stz $0533	                    STZ FDC_EXPECT_DAT                  ; 0 data
.19608b		9c 32 05	stz $0532	                    STZ FDC_RESULT_NUM                  ; 0 results
.19608e		22 49 5c 19	jsl $195c49	                    JSL FDC_COMMAND                     ; Issue the command
.196092		90 05		bcc $196099	                    BCC pass_failure
.196094		28		plp		                    PLP
.196095		2b		pld		                    PLD
.196096		ab		plb		                    PLB
.196097		38		sec		                    SEC
.196098		6b		rtl		                    RTL
.196099		28		plp		pass_failure        PLP
.19609a		2b		pld		                    PLD
.19609b		ab		plb		                    PLB
.19609c		18		clc		                    CLC
.19609d		6b		rtl		                    RTL
.19609e						FDC_Read_Sector
.19609e		8b		phb		                    PHB
.19609f		0b		phd		                    PHD
.1960a0		08		php		                    PHP
.1960a1		48		pha		                PHA             ; begin setdbr macro
.1960a2		08		php		                PHP
.1960a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1960a5		a9 00		lda #$00	                LDA #0
.1960a7		48		pha		                PHA
.1960a8		ab		plb		                PLB
.1960a9		28		plp		                PLP
.1960aa		68		pla		                PLA             ; end setdbr macro
.1960ab		48		pha		                PHA             ; begin setdp macro
.1960ac		08		php		                PHP
.1960ad		c2 20		rep #$20	                REP #$20        ; set A long
.1960af		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1960b2		5b		tcd		                TCD
.1960b3		28		plp		                PLP
.1960b4		68		pla		                PLA             ; end setdp macro
.1960b5		22 f9 5d 19	jsl $195df9	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.1960b9		e2 20		sep #$20	                SEP #$20        ; set A short
.1960bb		a9 06		lda #$06	                    LDA #FDC_CMD_READ_DATA              ; The READ_DATA command
.1960bd		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.1960bf		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.1960c2		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.1960c4		29 01		and #$01	                    AND #$01
.1960c6		0a		asl a		                    ASL A
.1960c7		0a		asl a		                    ASL A
.1960c8		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.1960ca		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.1960cd		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.1960cf		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.1960d2		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.1960d4		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.1960d7		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.1960d9		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.1960dc		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.1960de		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.1960e1		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.1960e3		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.1960e6		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.1960e8		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.1960eb		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.1960ed		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.1960f0		a9 09		lda #$09	                    LDA #9
.1960f2		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.1960f5		a9 01		lda #$01	                    LDA #1
.1960f7		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect data
.1960fa		a9 07		lda #$07	                    LDA #7
.1960fc		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.1960ff		22 49 5c 19	jsl $195c49	command             JSL FDC_COMMAND                     ; Issue the command
.196103		08		php		                    PHP
.196104		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.196107		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ----
.196109		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.19610c		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ----
.19610e		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.196111		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ----
.196113		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.196116		85 02		sta $0302	                    STA FDC_CYLINDER                    ; -- C ---
.196118		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.19611b		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.19611d		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.196120		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.196122		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.196125		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.196127		28		plp		                    PLP
.196128		90 04		bcc $19612e	                    BCC pass_failure
.19612a		28		plp		done                PLP
.19612b		2b		pld		                    PLD
.19612c		ab		plb		                    PLB
.19612d		6b		rtl		                    RTL
.19612e		28		plp		pass_failure        PLP
.19612f		2b		pld		                    PLD
.196130		ab		plb		                    PLB
.196131		18		clc		                    CLC
.196132		6b		rtl		                    RTL
.196133						FDC_Write_Sector
.196133		8b		phb		                    PHB
.196134		0b		phd		                    PHD
.196135		08		php		                    PHP
.196136		48		pha		                PHA             ; begin setdbr macro
.196137		08		php		                PHP
.196138		e2 20		sep #$20	                SEP #$20        ; set A short
.19613a		a9 00		lda #$00	                LDA #0
.19613c		48		pha		                PHA
.19613d		ab		plb		                PLB
.19613e		28		plp		                PLP
.19613f		68		pla		                PLA             ; end setdbr macro
.196140		48		pha		                PHA             ; begin setdp macro
.196141		08		php		                PHP
.196142		c2 20		rep #$20	                REP #$20        ; set A long
.196144		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196147		5b		tcd		                TCD
.196148		28		plp		                PLP
.196149		68		pla		                PLA             ; end setdp macro
.19614a		e2 20		sep #$20	                SEP #$20        ; set A short
.19614c		22 f9 5d 19	jsl $195df9	                    JSL FDC_MOTOR_NEEDED                ; Reset the spindle motor timeout clock
.196150		a9 05		lda #$05	                    LDA #FDC_CMD_WRITE_DATA             ; The WRITE_DATA command
.196152		09 40		ora #$40	                    ORA #FDC_CMD_MFM                    ; Turn on MFM mode
.196154		8d 00 05	sta $0500	                    STA FDC_PARAMETERS
.196157		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Get the head
.196159		29 01		and #$01	                    AND #$01
.19615b		0a		asl a		                    ASL A
.19615c		0a		asl a		                    ASL A
.19615d		05 00		ora $0300	                    ORA FDC_DRIVE                       ; And the drive number
.19615f		8d 01 05	sta $0501	                    STA FDC_PARAMETERS+1
.196162		a5 02		lda $0302	                    LDA FDC_CYLINDER                    ; Send the cylinder number
.196164		8d 02 05	sta $0502	                    STA FDC_PARAMETERS+2
.196167		a5 01		lda $0301	                    LDA FDC_HEAD                        ; Send the head number
.196169		8d 03 05	sta $0503	                    STA FDC_PARAMETERS+3
.19616c		a5 03		lda $0303	                    LDA FDC_SECTOR                      ; Send the sector number
.19616e		8d 04 05	sta $0504	                    STA FDC_PARAMETERS+4
.196171		a9 02		lda #$02	                    LDA #$02                            ; --- N ---- Sector Size (2 = 512Bytes)
.196173		8d 05 05	sta $0505	                    STA FDC_PARAMETERS+5
.196176		a9 12		lda #$12	                    LDA #18                             ; --- EOT ---- End of Track
.196178		8d 06 05	sta $0506	                    STA FDC_PARAMETERS+6
.19617b		a9 1b		lda #$1b	                    LDA #$1B                            ; --- GPL ---- End of Track
.19617d		8d 07 05	sta $0507	                    STA FDC_PARAMETERS+7
.196180		a9 ff		lda #$ff	                    LDA #$FF                            ; --- DTL ---- Special sector size
.196182		8d 08 05	sta $0508	                    STA FDC_PARAMETERS+8
.196185		a9 09		lda #$09	                    LDA #9
.196187		8d 30 05	sta $0530	                    STA FDC_PARAM_NUM                   ; 9 parameter (the command)
.19618a		a9 ff		lda #$ff	                    LDA #$FF
.19618c		8d 33 05	sta $0533	                    STA FDC_EXPECT_DAT                  ; Expect to write data
.19618f		a9 07		lda #$07	                    LDA #7
.196191		8d 32 05	sta $0532	                    STA FDC_RESULT_NUM                  ; 7 results
.196194		22 49 5c 19	jsl $195c49	command             JSL FDC_COMMAND                     ; Issue the command
.196198		08		php		                    PHP
.196199		ad 10 05	lda $0510	get_results         LDA FDC_RESULTS
.19619c		85 06		sta $0306	                    STA FDC_ST0                         ; --- ST0 ---
.19619e		ad 11 05	lda $0511	                    LDA FDC_RESULTS+1
.1961a1		85 07		sta $0307	                    STA FDC_ST1                         ; --- ST1 ---
.1961a3		ad 12 05	lda $0512	                    LDA FDC_RESULTS+2
.1961a6		85 08		sta $0308	                    STA FDC_ST2                         ; --- ST2 ---
.1961a8		ad 13 05	lda $0513	                    LDA FDC_RESULTS+3
.1961ab		85 02		sta $0302	                    STA FDC_CYLINDER                    ; --- C ---
.1961ad		ad 14 05	lda $0514	                    LDA FDC_RESULTS+4
.1961b0		85 01		sta $0301	                    STA FDC_HEAD                        ; --- H ---
.1961b2		ad 15 05	lda $0515	                    LDA FDC_RESULTS+5
.1961b5		85 0a		sta $030a	                    STA FDC_PCN                      ; --- R ---
.1961b7		ad 16 05	lda $0516	                    LDA FDC_RESULTS+6
.1961ba		85 04		sta $0304	                    STA FDC_SECTOR_SIZE                 ; --- N ---
.1961bc		28		plp		check_status        PLP
.1961bd		90 04		bcc $1961c3	                    BCC pass_failure
.1961bf		28		plp		done                PLP
.1961c0		2b		pld		                    PLD
.1961c1		ab		plb		                    PLB
.1961c2		6b		rtl		                    RTL
.1961c3		28		plp		pass_failure        PLP
.1961c4		2b		pld		                    PLD
.1961c5		ab		plb		                    PLB
.1961c6		18		clc		                    CLC
.1961c7		6b		rtl		                    RTL
.1961c8						DIVIDE32
.1961c8		da		phx		                    PHX
.1961c9		5a		phy		                    PHY
.1961ca		0b		phd		                    PHD
.1961cb		08		php		                    PHP
.1961cc		48		pha		                PHA             ; begin setdp macro
.1961cd		08		php		                PHP
.1961ce		c2 20		rep #$20	                REP #$20        ; set A long
.1961d0		a9 0c 03	lda #$030c	                LDA #DIVIDEND         ; set DP to page 0
.1961d3		5b		tcd		                TCD
.1961d4		28		plp		                PLP
.1961d5		68		pla		                PLA             ; end setdp macro
.1961d6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1961d8		64 08		stz $0314	                    STZ REMAINDER           ; Initialize the remainder
.1961da		64 0a		stz $0316	                    STZ REMAINDER+2
.1961dc		a2 20 00	ldx #$0020	                    LDX #32                 ; Set the number of bits to process
.1961df		06 00		asl $030c	loop                ASL DIVIDEND
.1961e1		26 02		rol $030e	                    ROL DIVIDEND+2
.1961e3		26 08		rol $0314	                    ROL REMAINDER
.1961e5		26 0a		rol $0316	                    ROL REMAINDER+2
.1961e7		a5 08		lda $0314	                    LDA REMAINDER
.1961e9		38		sec		                    SEC
.1961ea		e5 04		sbc $0310	                    SBC DIVISOR
.1961ec		a8		tay		                    TAY
.1961ed		a5 0a		lda $0316	                    LDA REMAINDER+2
.1961ef		e5 06		sbc $0312	                    SBC DIVISOR+2
.1961f1		90 06		bcc $1961f9	                    BCC skip
.1961f3		85 0a		sta $0316	                    STA REMAINDER+2
.1961f5		84 08		sty $0314	                    STY REMAINDER
.1961f7		e6 00		inc $030c	                    INC DIVIDEND
.1961f9		ca		dex		skip                DEX
.1961fa		d0 e3		bne $1961df	                    BNE loop
.1961fc		28		plp		                    PLP
.1961fd		2b		pld		                    PLD
.1961fe		7a		ply		                    PLY
.1961ff		fa		plx		                    PLX
.196200		60		rts		                    RTS
.196201						LBA2CHS
.196201		8b		phb		                    PHB
.196202		0b		phd		                    PHD
.196203		08		php		                    PHP
.196204		48		pha		                PHA             ; begin setdbr macro
.196205		08		php		                PHP
.196206		e2 20		sep #$20	                SEP #$20        ; set A short
.196208		a9 00		lda #$00	                LDA #0
.19620a		48		pha		                PHA
.19620b		ab		plb		                PLB
.19620c		28		plp		                PLP
.19620d		68		pla		                PLA             ; end setdbr macro
.19620e		48		pha		                PHA             ; begin setdp macro
.19620f		08		php		                PHP
.196210		c2 20		rep #$20	                REP #$20        ; set A long
.196212		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196215		5b		tcd		                TCD
.196216		28		plp		                PLP
.196217		68		pla		                PLA             ; end setdp macro
.196218		c2 30		rep #$30	                REP #$30        ; set A&X long
.19621a		a5 22		lda $0322	                    LDA BIOS_LBA
.19621c		85 0c		sta $030c	                    STA DIVIDEND
.19621e		a5 24		lda $0324	                    LDA BIOS_LBA+2
.196220		85 0e		sta $030e	                    STA DIVIDEND+2
.196222		a9 24 00	lda #$0024	                    LDA #36
.196225		85 10		sta $0310	                    STA DIVISOR
.196227		64 12		stz $0312	                    STZ DIVISOR+2
.196229		20 c8 61	jsr $1961c8	                    JSR DIVIDE32
.19622c		e2 20		sep #$20	                SEP #$20        ; set A short
.19622e		a5 0c		lda $030c	                    LDA DIVIDEND
.196230		85 02		sta $0302	                    STA FDC_CYLINDER
.196232		c2 20		rep #$20	                REP #$20        ; set A long
.196234		a5 14		lda $0314	                    LDA REMAINDER
.196236		85 0c		sta $030c	                    STA DIVIDEND
.196238		a5 16		lda $0316	                    LDA REMAINDER+2
.19623a		85 0e		sta $030e	                    STA DIVIDEND+2
.19623c		a9 12 00	lda #$0012	                    LDA #18
.19623f		85 10		sta $0310	                    STA DIVISOR
.196241		64 12		stz $0312	                    STZ DIVISOR+2
.196243		20 c8 61	jsr $1961c8	                    JSR DIVIDE32
.196246		e2 20		sep #$20	                SEP #$20        ; set A short
.196248		a5 0c		lda $030c	                    LDA DIVIDEND
.19624a		29 01		and #$01	                    AND #$01
.19624c		85 01		sta $0301	                    STA FDC_HEAD
.19624e		a5 14		lda $0314	                    LDA REMAINDER
.196250		1a		inc a		                    INC A
.196251		85 03		sta $0303	                    STA FDC_SECTOR
.196253		28		plp		                    PLP
.196254		2b		pld		                    PLD
.196255		ab		plb		                    PLB
.196256		6b		rtl		                    RTL
.196257						FDC_GETBLOCK
.196257		8b		phb		                    PHB
.196258		0b		phd		                    PHD
.196259		08		php		                    PHP
.19625a		48		pha		                PHA             ; begin setdbr macro
.19625b		08		php		                PHP
.19625c		e2 20		sep #$20	                SEP #$20        ; set A short
.19625e		a9 00		lda #$00	                LDA #0
.196260		48		pha		                PHA
.196261		ab		plb		                PLB
.196262		28		plp		                PLP
.196263		68		pla		                PLA             ; end setdbr macro
.196264		48		pha		                PHA             ; begin setdp macro
.196265		08		php		                PHP
.196266		c2 20		rep #$20	                REP #$20        ; set A long
.196268		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19626b		5b		tcd		                TCD
.19626c		28		plp		                PLP
.19626d		68		pla		                PLA             ; end setdp macro
.19626e		e2 20		sep #$20	                SEP #$20        ; set A short
.196270		a9 03		lda #$03	                    LDA #3                      ; We can retry 3 times
.196272		8d 34 05	sta $0534	                    STA FDC_CMD_RETRY
.196275		c2 30		rep #$30	                REP #$30        ; set A&X long
.196277		22 01 62 19	jsl $196201	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.19627b		e2 20		sep #$20	                SEP #$20        ; set A short
.19627d		a5 03		lda $0303	                    LDA FDC_SECTOR              ; Just make sure the sector is ok
.19627f		f0 29		beq $1962aa	                    BEQ read_failure
.196281						try_read
.196281		c2 20		rep #$20	                REP #$20        ; set A long
.196283		22 9e 60 19	jsl $19609e	                    JSL FDC_Read_Sector         ; Read the sector
.196287		90 14		bcc $19629d	                    BCC retry
.196289		e2 20		sep #$20	                SEP #$20        ; set A short
.19628b		a5 06		lda $0306	                    LDA FDC_ST0
.19628d		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.19628f		d0 19		bne $1962aa	                    BNE read_failure
.196291						ret_success
.196291		e2 20		sep #$20	                SEP #$20        ; set A short
.196293		a9 00		lda #$00	                    LDA #0
.196295		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196298		28		plp		                    PLP
.196299		2b		pld		                    PLD
.19629a		ab		plb		                    PLB
.19629b		38		sec		                    SEC
.19629c		6b		rtl		                    RTL
.19629d						retry
.19629d		e2 20		sep #$20	                SEP #$20        ; set A short
.19629f		ce 34 05	dec $0534	                    DEC FDC_CMD_RETRY           ; Decrement the retry counter
.1962a2		30 13		bmi $1962b7	                    BMI pass_failure            ; If it's gone negative, we should quit with an error
.1962a4		22 96 5d 19	jsl $195d96	                    JSL FDC_INIT                ; Otherwise, reinitialize the FDC
.1962a8		80 d7		bra $196281	                    BRA try_read                ; And try the read again
.1962aa						read_failure
.1962aa		e2 20		sep #$20	                SEP #$20        ; set A short
.1962ac		a9 82		lda #$82	                    LDA #BIOS_ERR_READ
.1962ae		80 04		bra $1962b4	                    BRA ret_failure
.1962b0						seek_failure
.1962b0		e2 20		sep #$20	                SEP #$20        ; set A short
.1962b2		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.1962b4		8d 20 03	sta $0320	ret_failure         STA @w BIOS_STATUS
.1962b7		28		plp		pass_failure        PLP
.1962b8		2b		pld		                    PLD
.1962b9		ab		plb		                    PLB
.1962ba		18		clc		                    CLC
.1962bb		6b		rtl		                    RTL
.1962bc						FDC_PUTBLOCK
.1962bc		8b		phb		                    PHB
.1962bd		0b		phd		                    PHD
.1962be		08		php		                    PHP
.1962bf		48		pha		                PHA             ; begin setdbr macro
.1962c0		08		php		                PHP
.1962c1		e2 20		sep #$20	                SEP #$20        ; set A short
.1962c3		a9 00		lda #$00	                LDA #0
.1962c5		48		pha		                PHA
.1962c6		ab		plb		                PLB
.1962c7		28		plp		                PLP
.1962c8		68		pla		                PLA             ; end setdbr macro
.1962c9		48		pha		                PHA             ; begin setdp macro
.1962ca		08		php		                PHP
.1962cb		c2 20		rep #$20	                REP #$20        ; set A long
.1962cd		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.1962d0		5b		tcd		                TCD
.1962d1		28		plp		                PLP
.1962d2		68		pla		                PLA             ; end setdp macro
.1962d3		e2 20		sep #$20	                SEP #$20        ; set A short
.1962d5		a9 03		lda #$03	                    LDA #3                      ; Set the number of retries we're willing to do
.1962d7		8d 34 05	sta $0534	                    STA @w FDC_CMD_RETRY
.1962da		c2 30		rep #$30	                REP #$30        ; set A&X long
.1962dc		22 01 62 19	jsl $196201	                    JSL LBA2CHS                 ; Convert the LBA to CHS
.1962e0		22 33 61 19	jsl $196133	retry               JSL FDC_Write_Sector        ; Write the sector
.1962e4		b0 03		bcs $1962e9	                    BCS chk_st0
.1962e6		82 28 00	brl $196311	                    BRL attempt_retry
.1962e9						chk_st0
.1962e9		e2 20		sep #$20	                SEP #$20        ; set A short
.1962eb		a5 06		lda $0306	                    LDA FDC_ST0
.1962ed		29 d0		and #$d0	                    AND #%11010000              ; Check the error bits
.1962ef		d0 0c		bne $1962fd	                    BNE write_failure
.1962f1						ret_success
.1962f1		e2 20		sep #$20	                SEP #$20        ; set A short
.1962f3		a9 00		lda #$00	                    LDA #0
.1962f5		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.1962f8		28		plp		                    PLP
.1962f9		2b		pld		                    PLD
.1962fa		ab		plb		                    PLB
.1962fb		38		sec		                    SEC
.1962fc		6b		rtl		                    RTL
.1962fd						write_failure
.1962fd		e2 20		sep #$20	                SEP #$20        ; set A short
.1962ff		a5 07		lda $0307	                    LDA FDC_ST1                         ; Check ST1 for write protect
.196301		89 02		bit #$02	                    BIT #FDC_ST1_NW
.196303		f0 04		beq $196309	                    BEQ generic_err
.196305		a9 86		lda #$86	                    LDA #BIOS_ERR_WRITEPROT             ; Yes: return a write-protect error
.196307		80 17		bra $196320	                    BRA ret_failure
.196309		89 10		bit #$10	generic_err         BIT #FDC_ST1_OR                     ; TODO: properly handle over/under run errors
.19630b		d0 e4		bne $1962f1	                    BNE ret_success
.19630d		89 80		bit #$80	                    BIT #FDC_ST1_EN                     ; TODO: properly handle end-of-track
.19630f		d0 e0		bne $1962f1	                    BNE ret_success
.196311						attempt_retry
.196311		e2 20		sep #$20	                SEP #$20        ; set A short
.196313		ce 34 05	dec $0534	                    DEC @w FDC_CMD_RETRY                ; Count down the retries
.196316		d0 c8		bne $1962e0	                    BNE retry                           ; And retry unless we have none left
.196318		a9 83		lda #$83	                    LDA #BIOS_ERR_WRITE                 ; Otherwise: return a generic write error
.19631a		80 04		bra $196320	                    BRA ret_failure
.19631c						seek_failure
.19631c		e2 20		sep #$20	                SEP #$20        ; set A short
.19631e		a9 84		lda #$84	                    LDA #BIOS_ERR_TRACK
.196320						ret_failure
.196320		8d 20 03	sta $0320	                    STA @w BIOS_STATUS
.196323		28		plp		pass_failure        PLP
.196324		2b		pld		                    PLD
.196325		ab		plb		                    PLB
.196326		18		clc		                    CLC
.196327		6b		rtl		                    RTL
.196328						FDC_MOUNT
.196328		8b		phb		                    PHB
.196329		0b		phd		                    PHD
.19632a		08		php		                    PHP
.19632b		48		pha		                PHA             ; begin setdbr macro
.19632c		08		php		                PHP
.19632d		e2 20		sep #$20	                SEP #$20        ; set A short
.19632f		a9 00		lda #$00	                LDA #0
.196331		48		pha		                PHA
.196332		ab		plb		                PLB
.196333		28		plp		                PLP
.196334		68		pla		                PLA             ; end setdbr macro
.196335		48		pha		                PHA             ; begin setdp macro
.196336		08		php		                PHP
.196337		c2 20		rep #$20	                REP #$20        ; set A long
.196339		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19633c		5b		tcd		                TCD
.19633d		28		plp		                PLP
.19633e		68		pla		                PLA             ; end setdp macro
.19633f		22 96 5d 19	jsl $195d96	                    JSL FDC_INIT
.196343		e2 20		sep #$20	                SEP #$20        ; set A short
.196345		c2 10		rep #$10	                REP #$10        ; set X long
.196347		a9 00		lda #$00	                    LDA #0
.196349		a2 00 00	ldx #$0000	                    LDX #0
.19634c		9f 00 a3 18	sta $18a300,x	zero_loop           STA DOS_SECTOR,X
.196350		e8		inx		                    INX
.196351		e0 00 02	cpx #$0200	                    CPX #512
.196354		d0 f6		bne $19634c	                    BNE zero_loop
.196356		a9 00		lda #$00	                    LDA #0                                  ; We only support drive 0
.196358		85 00		sta $0300	                    STA FDC_DRIVE
.19635a		22 12 5e 19	jsl $195e12	                    JSL FDC_Motor_On                        ; Turn the motor on
.19635e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196360		a9 00 00	lda #$0000	                    LDA #0                                  ; We want sector 0
.196363		85 22		sta $0322	                    STA BIOS_LBA
.196365		85 24		sta $0324	                    STA BIOS_LBA+2
.196367		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR                       ; And load it into DOS_SECTOR
.19636a		85 26		sta $0326	                    STA BIOS_BUFF_PTR
.19636c		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.19636f		85 28		sta $0328	                    STA BIOS_BUFF_PTR+2
.196371		22 57 62 19	jsl $196257	                    JSL FDC_GETBLOCK                        ; Attempt to read the data
.196375		b0 03		bcs $19637a	                    BCS parse_boot                          ; If ok: start parsing the boot record
.196377		82 d3 00	brl $19644d	                    BRL pass_failure                        ; Pass the error up the chain
.19637a						parse_boot
.19637a		e2 20		sep #$20	                SEP #$20        ; set A short
.19637c		a9 00		lda #$00	                    LDA #PART_TYPE_FAT12                    ; Set the file system to FAT12
.19637e		8f 01 a0 18	sta $18a001	                    STA @l FILE_SYSTEM
.196382		a9 00		lda #$00	                    LDA #0                                  ; There are no partitions on the disk
.196384		8f 02 a0 18	sta $18a002	                    STA @l PARTITION
.196388		e2 20		sep #$20	                SEP #$20        ; set A short
.19638a		af 0d a3 18	lda $18a30d	                    LDA DOS_SECTOR+BPB_SECPERCLUS12_OFF     ; Get the # of sectors per cluster (usually 1)
.19638e		8f 03 a0 18	sta $18a003	                    STA @l SECTORS_PER_CLUSTER
.196392		c2 20		rep #$20	                REP #$20        ; set A long
.196394		a9 00 00	lda #$0000	                    LDA #0                                  ; First sector of the "partition" is 0
.196397		8f 04 a0 18	sta $18a004	                    STA @l FIRSTSECTOR
.19639b		8f 06 a0 18	sta $18a006	                    STA @l FIRSTSECTOR+2
.19639f		af 16 a3 18	lda $18a316	                    LDA DOS_SECTOR+BPB_SECPERFAT12_OFF      ; Get the number of sectors per FAT
.1963a3		8f 10 a0 18	sta $18a010	                    STA @l SEC_PER_FAT
.1963a7		a9 00 00	lda #$0000	                    LDA #0
.1963aa		8f 12 a0 18	sta $18a012	                    STA @l SEC_PER_FAT+2
.1963ae		a9 01 00	lda #$0001	                    LDA #1                                  ; FAT#1 begins at sector 1
.1963b1		8f 14 a0 18	sta $18a014	                    STA @l FAT_BEGIN_LBA
.1963b5		18		clc		                    CLC
.1963b6		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1963ba		8f 18 a0 18	sta $18a018	                    STA @l FAT2_BEGIN_LBA                   ; FAT#2 begins SEC_PER_FAT sectors later
.1963be		a9 00 00	lda #$0000	                    LDA #0
.1963c1		8f 16 a0 18	sta $18a016	                    STA @l FAT_BEGIN_LBA+2
.1963c5		8f 1a a0 18	sta $18a01a	                    STA @L FAT2_BEGIN_LBA+2
.1963c9		18		clc		                    CLC                                     ; Calculate the root directory's starting sector
.1963ca		af 18 a0 18	lda $18a018	                    LDA @l FAT2_BEGIN_LBA
.1963ce		6f 10 a0 18	adc $18a010	                    ADC @l SEC_PER_FAT
.1963d2		8f 20 a0 18	sta $18a020	                    STA @l ROOT_DIR_FIRST_CLUSTER           ; ROOT_DIR_FIRST_CLUSTER will be a sector LBA for FAT12!
.1963d6		a9 00 00	lda #$0000	                    LDA #0
.1963d9		8f 22 a0 18	sta $18a022	                    STA @l ROOT_DIR_FIRST_CLUSTER+2
.1963dd		af 11 a3 18	lda $18a311	                    LDA DOS_SECTOR+BPB_ROOT_MAX_ENTRY12_OFF ; Get the maximum number of directory entries for the root dir
.1963e1		8f 24 a0 18	sta $18a024	                    STA @l ROOT_DIR_MAX_ENTRY
.1963e5		4a		lsr a		                    LSR A                                   ; 16 entries per sector
.1963e6		4a		lsr a		                    LSR A
.1963e7		4a		lsr a		                    LSR A
.1963e8		4a		lsr a		                    LSR A                                   ; So now A is the number of sectors in the root directory
.1963e9		18		clc		                    CLC
.1963ea		6f 20 a0 18	adc $18a020	                    ADC @L ROOT_DIR_FIRST_CLUSTER           ; Add that to the first sector LBA for the root directory
.1963ee		8f 1c a0 18	sta $18a01c	                    STA @l CLUSTER_BEGIN_LBA                ; And that is the LBA for the first cluster
.1963f2		a9 00 00	lda #$0000	                    LDA #0
.1963f5		8f 1e a0 18	sta $18a01e	                    STA @l CLUSTER_BEGIN_LBA+2
.1963f9		af 13 a3 18	lda $18a313	                    LDA DOS_SECTOR+BPB_TOTAL_SECTORS        ; Set the sector limit
.1963fd		8f 08 a0 18	sta $18a008	                    STA @l SECTORCOUNT
.196401		a9 00 00	lda #$0000	                    LDA #0
.196404		8f 0a a0 18	sta $18a00a	                    STA @l SECTORCOUNT+2
.196408		af 0e a3 18	lda $18a30e	                    LDA DOS_SECTOR+BPB_RSRVCLUS_OFF         ; Get the number of reserved clusters
.19640c		8f 0c a0 18	sta $18a00c	                    STA @l NUM_RSRV_SEC
.196410		a9 00 02	lda #$0200	                    LDA #DOS_SECTOR_SIZE                    ; Set the size of a FAT12 cluster
.196413		8f 0e a0 18	sta $18a00e	                    STA @l CLUSTER_SIZE
.196417		e2 20		sep #$20	                SEP #$20        ; set A short
.196419		af 26 a3 18	lda $18a326	                    LDA DOS_SECTOR+BPB_SIGNATUREB           ; Is signature B $29?
.19641d		c9 29		cmp #$29	                    CMP #BPB_EXTENDED_RECORD
.19641f		80 14		bra $196435	                    BRA no_volume_id                        ; No: there is no volume ID
.196421						is_extended
.196421		c2 20		rep #$20	                REP #$20        ; set A long
.196423		af 27 a3 18	lda $18a327	                    LDA DOS_SECTOR+BPB_VOLUMEID             ; Yes: set the volume ID
.196427		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.19642b		af 29 a3 18	lda $18a329	                    LDA DOS_SECTOR+BPB_VOLUMEID+2
.19642f		8f 28 a0 18	sta $18a028	                    STA @l VOLUME_ID+2
.196433		80 0d		bra $196442	                    BRA ret_success
.196435						no_volume_id
.196435		c2 20		rep #$20	                REP #$20        ; set A long
.196437		a9 00 00	lda #$0000	                    LDA #0                                  ; No: blank the Volume ID
.19643a		8f 26 a0 18	sta $18a026	                    STA @l VOLUME_ID
.19643e		8f 28 a0 18	sta $18a028	                    STA @L VOLUME_ID+2
.196442						ret_success
.196442		e2 20		sep #$20	                SEP #$20        ; set A short
.196444		a9 00		lda #$00	                    LDA #0
.196446		85 20		sta $0320	                    STA BIOS_STATUS
.196448		28		plp		                    PLP
.196449		2b		pld		                    PLD
.19644a		ab		plb		                    PLB
.19644b		38		sec		                    SEC
.19644c		6b		rtl		                    RTL
.19644d		28		plp		pass_failure        PLP
.19644e		2b		pld		                    PLD
.19644f		ab		plb		                    PLB
.196450		18		clc		                    CLC
.196451		6b		rtl		                    RTL
.196452						FDC_CMDBLOCK
.196452		8b		phb		                    PHB
.196453		0b		phd		                    PHD
.196454		08		php		                    PHP
.196455		48		pha		                PHA             ; begin setdbr macro
.196456		08		php		                PHP
.196457		e2 20		sep #$20	                SEP #$20        ; set A short
.196459		a9 00		lda #$00	                LDA #0
.19645b		48		pha		                PHA
.19645c		ab		plb		                PLB
.19645d		28		plp		                PLP
.19645e		68		pla		                PLA             ; end setdbr macro
.19645f		48		pha		                PHA             ; begin setdp macro
.196460		08		php		                PHP
.196461		c2 20		rep #$20	                REP #$20        ; set A long
.196463		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.196466		5b		tcd		                TCD
.196467		28		plp		                PLP
.196468		68		pla		                PLA             ; end setdp macro
.196469		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19646b		e0 01		cpx #$01	                    CPX #FDC_DEVCMD_MOTOR_ON
.19646d		f0 0f		beq $19647e	                    BEQ motor_on
.19646f		e0 02		cpx #$02	                    CPX #FDC_DEVCMD_MOTOR_OFF
.196471		f0 11		beq $196484	                    BEQ motor_off
.196473		e0 03		cpx #$03	                    CPX #FDC_DEVCMD_RECAL
.196475		f0 13		beq $19648a	                    BEQ recalibrate
.196477		64 20		stz $0320	ret_success         STZ BIOS_STATUS
.196479		28		plp		                    PLP
.19647a		2b		pld		                    PLD
.19647b		ab		plb		                    PLB
.19647c		38		sec		                    SEC
.19647d		6b		rtl		                    RTL
.19647e		22 12 5e 19	jsl $195e12	motor_on            JSL FDC_Motor_On
.196482		80 f3		bra $196477	                    BRA ret_success
.196484		22 46 5e 19	jsl $195e46	motor_off           JSL FDC_Motor_Off
.196488		80 ed		bra $196477	                    BRA ret_success
.19648a		22 71 5e 19	jsl $195e71	recalibrate         JSL FDC_Recalibrate_Command
.19648e		b0 e7		bcs $196477	                    BCS ret_success
.196490		28		plp		pass_failure        PLP
.196491		2b		pld		                    PLD
.196492		ab		plb		                    PLB
.196493		18		clc		                    CLC
.196494		6b		rtl		                    RTL
.196495						FDC_CHK_MEDIA
.196495		0b		phd		                    PHD
.196496		08		php		                    PHP
.196497		48		pha		                PHA             ; begin setdp macro
.196498		08		php		                PHP
.196499		c2 20		rep #$20	                REP #$20        ; set A long
.19649b		a9 00 03	lda #$0300	                LDA #FDC_DRIVE         ; set DP to page 0
.19649e		5b		tcd		                TCD
.19649f		28		plp		                PLP
.1964a0		68		pla		                PLA             ; end setdp macro
.1964a1		22 12 5e 19	jsl $195e12	                    JSL FDC_Motor_On                ; Turn on the motor
.1964a5		e2 20		sep #$20	                SEP #$20        ; set A short
.1964a7		af f7 13 af	lda $af13f7	                    LDA @l SIO_FDC_DIR              ; Check if the DSKCHG bit is set
.1964ab		89 80		bit #$80	                    BIT #FDC_DIR_DSKCHG
.1964ad		f0 42		beq $1964f1	                    BEQ ret_true                    ; If not: assume the disk is present
.1964af		a9 00		lda #$00	                    LDA #0
.1964b1		85 00		sta $0300	                    STA FDC_DRIVE
.1964b3		a9 00		lda #$00	                    LDA #0
.1964b5		85 01		sta $0301	                    STA FDC_HEAD
.1964b7		a9 50		lda #$50	                    LDA #80
.1964b9		85 02		sta $0302	                    STA FDC_CYLINDER
.1964bb		22 51 60 19	jsl $196051	                    JSL FDC_Seek_Track              ; Attempt to seek to track 80
.1964bf		90 34		bcc $1964f5	                    BCC ret_false                   ; If fail: return false
.1964c1		c2 10		rep #$10	                REP #$10        ; set X long
.1964c3		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1964c6		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1964c9		22 ea 0f 19	jsl $190fea	                    JSL IDELAY
.1964cd		22 a6 5e 19	jsl $195ea6	                    JSL FDC_Sense_Int_Status
.1964d1		a5 06		lda $0306	                    LDA FDC_ST0
.1964d3		29 d0		and #$d0	                    AND #%11010000
.1964d5		d0 1e		bne $1964f5	                    BNE ret_false
.1964d7		22 71 5e 19	jsl $195e71	                    JSL FDC_Recalibrate_Command     ; Attempt to recalibrate
.1964db		90 18		bcc $1964f5	                    BCC ret_false                   ; If fail: return false
.1964dd		a2 1e 8b	ldx #$8b1e	                    LDX #<>FDC_MOTOR_TIME       ; Wait a suitable time for the motor to spin up
.1964e0		a0 41 00	ldy #$0041	                    LDY #`FDC_MOTOR_TIME
.1964e3		22 ea 0f 19	jsl $190fea	                    JSL IDELAY
.1964e7		22 a6 5e 19	jsl $195ea6	                    JSL FDC_Sense_Int_Status
.1964eb		a5 06		lda $0306	                    LDA FDC_ST0
.1964ed		29 d0		and #$d0	                    AND #%11010000
.1964ef		d0 04		bne $1964f5	                    BNE ret_false
.1964f1						ret_true
.1964f1		28		plp		                    PLP
.1964f2		2b		pld		                    PLD
.1964f3		38		sec		                    SEC
.1964f4		6b		rtl		                    RTL
.1964f5						ret_false
.1964f5		28		plp		                    PLP
.1964f6		2b		pld		                    PLD
.1964f7		18		clc		                    CLC
.1964f8		6b		rtl		                    RTL
.1964f9						FDC_WRITEVBR
.1964f9		8b		phb		                    PHB
.1964fa		0b		phd		                    PHD
.1964fb		08		php		                    PHP
.1964fc		48		pha		                PHA             ; begin setdbr macro
.1964fd		08		php		                PHP
.1964fe		e2 20		sep #$20	                SEP #$20        ; set A short
.196500		a9 00		lda #$00	                LDA #0
.196502		48		pha		                PHA
.196503		ab		plb		                PLB
.196504		28		plp		                PLP
.196505		68		pla		                PLA             ; end setdbr macro
.196506		48		pha		                PHA             ; begin setdp macro
.196507		08		php		                PHP
.196508		c2 20		rep #$20	                REP #$20        ; set A long
.19650a		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19650d		5b		tcd		                TCD
.19650e		28		plp		                PLP
.19650f		68		pla		                PLA             ; end setdp macro
.196510		22 28 63 19	jsl $196328	                    JSL FDC_MOUNT               ; Mount the floppy disk
.196514		c2 30		rep #$30	                REP #$30        ; set A&X long
.196516		a9 00 00	lda #$0000	                    LDA #0                      ; Clear the sector buffer
.196519		a2 00 00	ldx #$0000	                    LDX #0
.19651c		9f 00 a3 18	sta $18a300,x	clr_loop            STA DOS_SECTOR,X
.196520		e8		inx		                    INX
.196521		e8		inx		                    INX
.196522		e0 00 02	cpx #$0200	                    CPX #512
.196525		d0 f5		bne $19651c	                    BNE clr_loop
.196527		e2 20		sep #$20	                SEP #$20        ; set A short
.196529		a2 00 00	ldx #$0000	                    LDX #0                      ; Copy the prototype VBR to the sector buffer
.19652c		bf e1 65 19	lda $1965e1,x	copy_loop           LDA FDC_VBR_BEGIN,X
.196530		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.196534		e8		inx		                    INX
.196535		e0 c9 00	cpx #$00c9	                    CPX #<>(FDC_VBR_END - FDC_VBR_BEGIN + 1)
.196538		d0 f2		bne $19652c	                    BNE copy_loop
.19653a		a0 00 00	ldy #$0000	                    LDY #0                      ; Copy the boot binary path to the VBR
.19653d		a2 40 00	ldx #$0040	                    LDX #FDC_VBR_PATH
.196540		b7 3c		lda [$035c],y	path_copy_loop      LDA [DOS_RUN_PTR],Y
.196542		9f 00 a3 18	sta $18a300,x	                    STA DOS_SECTOR,X
.196546		f0 07		beq $19654f	                    BEQ path_copy_done
.196548		e8		inx		                    INX
.196549		c8		iny		                    INY
.19654a		c0 80 00	cpy #$0080	                    CPY #128
.19654d		d0 f1		bne $196540	                    BNE path_copy_loop
.19654f						path_copy_done
.19654f		c2 20		rep #$20	                REP #$20        ; set A long
.196551		a9 55 aa	lda #$aa55	                    LDA #$AA55                  ; Set the VBR signature bytes at the end
.196554		8f fe a4 18	sta $18a4fe	                    STA DOS_SECTOR+BPB_SIGNATURE
.196558		c2 20		rep #$20	                REP #$20        ; set A long
.19655a		a9 00 a3	lda #$a300	                    LDA #<>DOS_SECTOR           ; Point to the BIOS buffer
.19655d		85 06		sta $0326	                    STA BIOS_BUFF_PTR
.19655f		a9 18 00	lda #$0018	                    LDA #`DOS_SECTOR
.196562		85 08		sta $0328	                    STA BIOS_BUFF_PTR+2
.196564		a9 00 00	lda #$0000	                    LDA #0                      ; Set the sector to #0 (boot record)
.196567		85 02		sta $0322	                    STA BIOS_LBA
.196569		85 04		sta $0324	                    STA BIOS_LBA+2
.19656b		e2 20		sep #$20	                SEP #$20        ; set A short
.19656d		a9 00		lda #$00	                    LDA #BIOS_DEV_FDC
.19656f		85 01		sta $0321	                    STA BIOS_DEV
.196571		22 24 10 00	jsl $001024	                    JSL PUTBLOCK                ; Attempt to write the boot record
.196575		b0 09		bcs $196580	                    BCS ret_success
.196577		22 46 5e 19	jsl $195e46	                    JSL FDC_Motor_Off
.19657b		28		plp		                    PLP                         ; Return the failure
.19657c		2b		pld		                    PLD
.19657d		ab		plb		                    PLB
.19657e		18		clc		                    CLC
.19657f		6b		rtl		                    RTL
.196580		22 46 5e 19	jsl $195e46	ret_success         JSL FDC_Motor_Off
.196584		e2 20		sep #$20	                SEP #$20        ; set A short
.196586		a9 00		lda #$00	                    LDA #0
.196588		85 00		sta $0320	                    STA BIOS_STATUS
.19658a		28		plp		                    PLP
.19658b		2b		pld		                    PLD
.19658c		ab		plb		                    PLB
.19658d		38		sec		                    SEC
.19658e		6b		rtl		                    RTL
.19658f						FDC_TIME_HANDLE
.19658f		08		php		                    PHP
.196590		e2 20		sep #$20	                SEP #$20        ; set A short
.196592		af 4e a0 18	lda $18a04e	                    LDA @l FDC_MOTOR_TIMER          ; Check the FDC motor count-down timer
.196596		d0 06		bne $19659e	                    BNE dec_motor                   ; If not zero: decrement the timer
.196598		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Check the high byte
.19659c		f0 28		beq $1965c6	                    BEQ sof_timeout                 ; If zero: move on to the next timer
.19659e		af 4e a0 18	lda $18a04e	dec_motor           LDA @l FDC_MOTOR_TIMER          ; Decrement the low byte
.1965a2		3a		dec a		                    DEC A
.1965a3		8f 4e a0 18	sta $18a04e	                    STA @l FDC_MOTOR_TIMER
.1965a7		c9 ff		cmp #$ff	                    CMP #$FF                        ; Did it roll over?
.1965a9		d0 0b		bne $1965b6	                    BNE chk_motor_end               ; No: check to see if we're a the end
.1965ab		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1        ; Decrement the high byte
.1965af		3a		dec a		                    DEC A
.1965b0		8f 4f a0 18	sta $18a04f	                    STA @l FDC_MOTOR_TIMER+1
.1965b4		80 10		bra $1965c6	                    BRA sof_timeout                 ; And move on to the next timer
.1965b6		af 4e a0 18	lda $18a04e	chk_motor_end       LDA @l FDC_MOTOR_TIMER          ; Check timer
.1965ba		d0 0a		bne $1965c6	                    BNE sof_timeout                 ; if it's <>0, move on to the next timer
.1965bc		af 4f a0 18	lda $18a04f	                    LDA @l FDC_MOTOR_TIMER+1
.1965c0		d0 04		bne $1965c6	                    BNE sof_timeout
.1965c2		22 46 5e 19	jsl $195e46	                    JSL FDC_Motor_Off               ; Otherwise, turn off the motor
.1965c6						sof_timeout
.1965c6		e2 20		sep #$20	                SEP #$20        ; set A short
.1965c8		af 2d 03 00	lda $00032d	                    LDA @l BIOS_TIMER               ; Check the BIOS_TIMER
.1965cc		f0 11		beq $1965df	                    BEQ sof_int_done                ; If it's 0, we don't do anything
.1965ce		3a		dec a		                    DEC A                           ; Count down one tick
.1965cf		8f 2d 03 00	sta $00032d	                    STA @l BIOS_TIMER
.1965d3		d0 0a		bne $1965df	                    BNE sof_int_done                ; If not 0, we're done
.1965d5		af 2c 03 00	lda $00032c	                    LDA @l BIOS_FLAGS               ; Otherwise: flag a time out event
.1965d9		09 80		ora #$80	                    ORA #BIOS_TIMEOUT
.1965db		8f 2c 03 00	sta $00032c	                    STA @l BIOS_FLAGS
.1965df		28		plp		sof_int_done        PLP
.1965e0		6b		rtl		                    RTL
=62						FDC_BOOT_START = 62                         ; Entry point to the boot code
=64						FDC_VBR_PATH = 64                           ; Offset to the path in the VBR
.1965e1						FDC_VBR_BEGIN
>1965e1		eb 00 90			start               .byte $EB, $00, $90     ; Entry point
>1965e4		43 32 35 36 44 4f 53 20		magic               .text "C256DOS "        ; OEM name / magic text for booting
>1965ec		00 02				bytes_per_sec       .word 512               ; How many bytes per sector
>1965ee		01				sec_per_cluster     .byte 1                 ; How many sectors per cluster
>1965ef		01 00				rsrv_sectors        .word 1                 ; Number of reserved sectors
>1965f1		02				num_fat             .byte 2                 ; Number of FATs
>1965f2		e0 00				max_dir_entry       .word (32-18)*16        ; Total number of root dir entries
>1965f4		40 0b				total_sectors       .word 2880              ; Total sectors
>1965f6		f0				media_descriptor    .byte $F0               ; 3.5" 1.44 MB floppy 80 tracks, 18 tracks per sector
>1965f7		09 00				sec_per_fat         .word 9                 ; Sectors per FAT
>1965f9		12 00				sec_per_track       .word 18                ; Sectors per track
>1965fb		02 00				num_head            .word 2                 ; Number of heads
>1965fd		00 00 00 00			ignore2             .dword 0
>196601		00 00 00 00			fat32_sector        .dword 0                ; # of sectors in FAT32
>196605		00 00				ignore3             .word 0
>196607		29				boot_signature      .byte $29
>196608		78 56 34 12			volume_id           .dword $12345678        ; Replaced by code
>19660c		55 4e 54 49 54 4c 45 44		volume_name         .text "UNTITLED   "     ; Replace by code
>196614		20 20 20
>196617		46 41 54 31 32 20 20 20		fs_type             .text "FAT12   "
.19661f		80 40		bra $196661	                    BRA vbr_start
>196621						file_path           .fill 64                ; Reserve 64 bytes for a path and any options
.196661						vbr_start
.196661		c2 20		rep #$20	                REP #$20        ; set A long
.196663		a9 40 a3	lda #$a340	                    LDA #<>(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.196666		8f 60 03 00	sta $000360	                    STA @l DOS_RUN_PARAM
.19666a		a9 18 00	lda #$0018	                    LDA #`(DOS_SECTOR + (file_path - FDC_VBR_BEGIN))
.19666d		8f 62 03 00	sta $000362	                    STA @l DOS_RUN_PARAM+2
.196671		22 24 11 00	jsl $001124	                    JSL F_RUN               ; And try to execute the binary file
.196675		b0 0c		bcs $196683	                    BCS lock                ; If it returned success... lock up... I guess?
.196677						error
.196677		e2 20		sep #$20	                SEP #$20        ; set A short
.196679		4b		phk		                    PHK                     ; Otherwise, print an error message
.19667a		ab		plb		                    PLB
.19667b		62 08 00	per $196686	                    PER message
.19667e		fa		plx		                    PLX
.19667f		22 1c 10 00	jsl $00101c	                    JSL PUTS
.196683		ea		nop		lock                NOP                     ; And lock up
.196684		80 fd		bra $196683	                    BRA lock
>196686		43 6f 75 6c 64 20 6e 6f		message             .null "Could not find a bootable binary.",13
>19668e		74 20 66 69 6e 64 20 61 20 62 6f 6f 74 61 62 6c
>19669e		65 20 62 69 6e 61 72 79 2e 0d 00
.1966a9						FDC_VBR_END

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/ide_library.asm

.0000						IDE_ID
>0000		00 00				General_Config        .word $0000
>0002		00 00				Obsolete0             .word $0000
>0004		00 00				Specific_Config       .word $0000
>0006		00 00				Obsolete1             .word $0000
>0008		00 00				Retired0              .word $0000
>000a		00 00				Retired1              .word $0000
>000c		00 00				Obsolete2             .word $0000
>000e		00 00				Reserved_CFlash0      .word $0000
>0010		00 00				Reserved_CFlash1      .word $0000
>0012		00 00				Retired2              .word $0000
>0014		00 00 00 00 00 00 00 00		Serial_Number_String  .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>001c		00 00 00 00 00 00 00 00 00 00 00 00
>0028		00 00 00 00			Retired3              .word $0000, $0000
>002c		00 00				Obsolete3             .word $0000
>002e		00 00 00 00 00 00 00 00		Firmware_Rev_String   .byte $00, $00, $00, $00, $00, $00, $00, $00
>0036		00 00 00 00 00 00 00 00		Model_Number_String   .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>003e		00 00 00 00 00 00 00 00
>0046		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>004e		00 00 00 00 00 00 00 00
>0056		00 00 00 00 00 00 00 00		                      .byte $00, $00, $00, $00, $00, $00, $00, $00
>005e		00 00				Max_Number_Logic_Sec  .word $0000
>0060		00 00				Trusted_Comp_Feature  .word $0000
>0062		00 00 00 00			Capabilities          .word $0000, $0000
>0066		00 00 00 00			Obsolete4             .word $0000, $0000
>006a		00 00				Free_Fall_Control     .word $0000
>006c		00 00 00 00 00 00 00 00		Obsolete5             .word $0000, $0000, $0000, $0000, $0000
>0074		00 00
>0076		00 00				Reserved0             .word $0000
>0078		00 00 00 00			Total_Addy_Logic_Sec  .word $0000, $0000
>007c		00 00				Obsolete6             .word $0000
>007e		00 00 00 00			Reserved1             .word $0000, $0000
>0082		00 00				Min_Multiword_DMA_Trf .word $0000
>0084		00 00				Manu_Recommended_Mult .word $0000
>0086		00 00				Min_PIO_Trf           .word $0000      ; Word 67
>0088		00 00				Min_PIO_Trf_with_IORD .word $0000      ; Word 68
>008a		00 00 00 00			Reserved2             .word $0000, $0000
>008e		00 00 00 00 00 00 00 00		Reserved3             .word $0000, $0000, $0000, $0000
>0096		00 00				Queue_Dept            .word $0000
>0098		00 00				SATA_Capabilities     .word $0000
>009a		00 00				Reserved_SATA         .word $0000
>009c		00 00				Sup_Feat_SATA         .word $0000
>009e		00 00				Sup_Feat_SATA_Enabled .word $0000    ; Word 79
>00a0		00 00				Major_Version_Number  .word $0000    ; Word 80
>00a2		00 00				Minor_Version_Number  .word $0000    ; Word 81
>00a4		00 00 00 00 00 00 00 00		Cmd_And_Features_Sup  .word $0000, $0000, $0000, $0000, $0000, $0000
>00ac		00 00 00 00
>00b0		00 00				UDMA_Modes            .word $0000
>00b2		00 00 00 00			Reserved4             .word $0000, $0000 ; Word 89
>00b6		00 00				Current_APM_Level     .word $0000
>00b8		00 00				Master_Password_Ident .word $0000
>00ba		00 00				Hardware_Reset_Result .word $0000
>00bc		00 00				Current_AAM_Value     .word $0000  ; Word 94
>00be		00 00				Stream_Min_Req_Size   .word $0000  ; Word 95
>00c0		00 00				Stream_Trf_Time_DMA   .word $0000  ; Word 96
>00c2		00 00				Stream_Access_Lat     .word $0000
>00c4		00 00 00 00			Streaming_Perf_Gran   .word $0000, $0000
>00c8		00 00 00 00 00 00 00 00		Tot_Num_Add_Logic_Sec .word $0000, $0000, $0000, $0000
>00d0		00 00				Streaming_Trf_Time    .word $0000 ; Word 104
>00d2		00 00				Reserved5             .word $0000 ; Word 105
.1966a9						IDE_TEST
.1966a9		08		php		                PHP
.1966aa		c2 20		rep #$20	                REP #$20        ; set A long
.1966ac		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.1966af		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.1966b3		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.1966b6		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.1966ba		22 dd 67 19	jsl $1967dd	                JSL IDE_IDENTIFY
.1966be		b0 03		bcs $1966c3	                BCS id_ok
.1966c0		82 ab 00	brl $19676e	                BRL done
.1966c3						id_ok
.1966c3		c2 10		rep #$10	                REP #$10        ; set X long
.1966c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1966c7		a0 28 00	ldy #$0028	                LDY #40
.1966ca		a2 36 00	ldx #$0036	                LDX #27*2
.1966cd		bf 01 a3 18	lda $18a301,x	pr_model        LDA DOS_SECTOR+1,X
.1966d1		22 18 10 00	jsl $001018	                JSL PUTC
.1966d5		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1966d9		22 18 10 00	jsl $001018	                JSL PUTC
.1966dd		e8		inx		                INX
.1966de		e8		inx		                INX
.1966df		88		dey		                DEY
.1966e0		88		dey		                DEY
.1966e1		d0 ea		bne $1966cd	                BNE pr_model
.1966e3		c2 10		rep #$10	                REP #$10        ; set X long
.1966e5		e2 20		sep #$20	                SEP #$20        ; set A short
.1966e7		a0 14 00	ldy #$0014	                LDY #20
.1966ea		a2 14 00	ldx #$0014	                LDX #10*2
.1966ed		bf 01 a3 18	lda $18a301,x	pr_serial       LDA DOS_SECTOR+1,X
.1966f1		22 18 10 00	jsl $001018	                JSL PUTC
.1966f5		bf 00 a3 18	lda $18a300,x	                LDA DOS_SECTOR,X
.1966f9		22 18 10 00	jsl $001018	                JSL PUTC
.1966fd		e8		inx		                INX
.1966fe		e8		inx		                INX
.1966ff		88		dey		                DEY
.196700		88		dey		                DEY
.196701		d0 ea		bne $1966ed	                BNE pr_serial
.196703		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196707		c2 30		rep #$30	                REP #$30        ; set A&X long
.196709		a9 01 00	lda #$0001	                LDA #1                 ; Set LBA = 1
.19670c		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.196710		a9 00 00	lda #$0000	                LDA #0
.196713		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196717		a9 00 a3	lda #$a300	                LDA #<>DOS_SECTOR
.19671a		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.19671e		a9 18 00	lda #$0018	                LDA #`DOS_SECTOR
.196721		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.196725		a2 00 00	ldx #$0000	                LDX #0                  ; Initialize the block to some recognizable data
.196728		a9 a5 5a	lda #$5aa5	                LDA #$5AA5
.19672b		9f 00 a3 18	sta $18a300,x	init_loop       STA DOS_SECTOR,X
.19672f		e8		inx		                INX
.196730		e8		inx		                INX
.196731		e0 00 02	cpx #$0200	                CPX #512
.196734		d0 f5		bne $19672b	                BNE init_loop
.196736		22 f6 68 19	jsl $1968f6	                JSL IDE_PUTBLOCK        ; Attempt to write the block
.19673a		b0 06		bcs $196742	                BCS read_sect1
.19673c		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196740		80 2c		bra $19676e	                BRA done
.196742		a9 01 00	lda #$0001	read_sect1      LDA #1                 ; Set LBA = 1
.196745		8f 22 03 00	sta $000322	                STA @l BIOS_LBA
.196749		a9 00 00	lda #$0000	                LDA #0
.19674c		8f 24 03 00	sta $000324	                STA @l BIOS_LBA+2
.196750		a9 00 a5	lda #$a500	                LDA #<>DOS_FAT_SECTORS
.196753		8f 26 03 00	sta $000326	                STA @l BIOS_BUFF_PTR
.196757		a9 18 00	lda #$0018	                LDA #`DOS_FAT_SECTORS
.19675a		8f 28 03 00	sta $000328	                STA @l BIOS_BUFF_PTR+2
.19675e		22 6b 68 19	jsl $19686b	                JSL IDE_GETBLOCK        ; Attempt to read the block
.196762		b0 06		bcs $19676a	                BCS all_ok
.196764		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.196768		80 04		bra $19676e	                BRA done
.19676a						all_ok
.19676a		22 6c 10 00	jsl $00106c	                JSL PRINTCR
.19676e		28		plp		done            PLP
.19676f		6b		rtl		                RTL
.196770						IDE_INIT
.196770		e2 20		sep #$20	                SEP #$20        ; set A short
.196772		a9 00		lda #$00	              LDA #$00
.196774		8f 37 e8 af	sta $afe837	              STA IDE_CMD_STAT
.196778		20 99 67	jsr $196799	              JSR IDE_DRIVE_BSY ; Check to see if drive is busy
.19677b		a9 e0		lda #$e0	              LDA #$E0 ; HEAD 0 - Select Master Drive
.19677d		8f 36 e8 af	sta $afe836	              STA IDE_HEAD
.196781		a9 01		lda #$01	              LDA #$01
.196783		8f 32 e8 af	sta $afe832	              STA IDE_SECT_CNT
.196787		a9 00		lda #$00	              LDA #$00
.196789		8f 33 e8 af	sta $afe833	              STA IDE_SECT_SRT
.19678d		8f 34 e8 af	sta $afe834	              STA IDE_CLDR_LO
.196791		8f 35 e8 af	sta $afe835	              STA IDE_CLDR_HI
.196795		20 b7 67	jsr $1967b7	              JSR IDE_DRV_READY_NOTBUSY
.196798		6b		rtl		              RTL
.196799						IDE_DRIVE_BSY
.196799		08		php		                PHP
.19679a		e2 20		sep #$20	                SEP #$20        ; set A short
.19679c		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.1967a0		29 80		and #$80	                AND #IDE_STAT_BSY         ; Check for RDY Bit, this needs to be 1'b1
.1967a2		c9 80		cmp #$80	                CMP #IDE_STAT_BSY         ; If not go read again
.1967a4		f0 f6		beq $19679c	                BEQ loop
.1967a6		28		plp		                PLP
.1967a7		60		rts		                RTS
.1967a8						IDE_DRIVE_READY
.1967a8		08		php		                PHP
.1967a9		e2 20		sep #$20	                SEP #$20        ; set A short
.1967ab		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT
.1967af		29 40		and #$40	                AND #IDE_STAT_DRDY          ; Check to see if the Busy Signal is Cleared
.1967b1		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY          ; if it is still one, then go back to read again.
.1967b3		d0 f6		bne $1967ab	                BNE loop
.1967b5		28		plp		                PLP
.1967b6		60		rts		                RTS
.1967b7						IDE_DRV_READY_NOTBUSY
.1967b7		08		php		                PHP
.1967b8		e2 20		sep #$20	                SEP #$20        ; set A short
.1967ba		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT                 ; Check the status
.1967be		29 c0		and #$c0	                AND #IDE_STAT_BSY | IDE_STAT_DRDY
.1967c0		c9 40		cmp #$40	                CMP #IDE_STAT_DRDY                  ; Is it READY but not BUSY?
.1967c2		d0 f6		bne $1967ba	                BNE loop                            ; No: keep waiting
.1967c4		28		plp		ret_success     PLP                                 ; Return success
.1967c5		38		sec		                SEC
.1967c6		60		rts		                RTS
.1967c7		8f 07 03 00	sta $000307	ret_failure     STA @l FDC_ST1                      ; Save the status code to FDC_ST1
.1967cb		28		plp		                PLP                                 ; Return failure
.1967cc		18		clc		                CLC
.1967cd		60		rts		                RTS
.1967ce						IDE_NOT_DRQ
.1967ce		08		php		                PHP
.1967cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1967d1		af 37 e8 af	lda $afe837	loop            LDA @l IDE_CMD_STAT     ; Get the status
.1967d5		29 08		and #$08	                AND #IDE_STAT_DRQ
.1967d7		c9 08		cmp #$08	                CMP #IDE_STAT_DRQ       ; Is the DRQ bit set?
.1967d9		d0 f6		bne $1967d1	                BNE loop                ; No: keep waiting
.1967db		28		plp		                PLP
.1967dc		60		rts		                RTS
.1967dd						IDE_IDENTIFY
.1967dd		5a		phy		                PHY
.1967de		8b		phb		                PHB
.1967df		0b		phd		                PHD
.1967e0		08		php		                PHP
.1967e1		48		pha		                PHA             ; begin setdbr macro
.1967e2		08		php		                PHP
.1967e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1967e5		a9 00		lda #$00	                LDA #0
.1967e7		48		pha		                PHA
.1967e8		ab		plb		                PLB
.1967e9		28		plp		                PLP
.1967ea		68		pla		                PLA             ; end setdbr macro
.1967eb		48		pha		                PHA             ; begin setdp macro
.1967ec		08		php		                PHP
.1967ed		c2 20		rep #$20	                REP #$20        ; set A long
.1967ef		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.1967f2		5b		tcd		                TCD
.1967f3		28		plp		                PLP
.1967f4		68		pla		                PLA             ; end setdp macro
.1967f5		e2 20		sep #$20	                SEP #$20        ; set A short
.1967f7		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.1967fa		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.1967fc		29 07		and #$07	                AND #$07
.1967fe		09 a0		ora #$a0	                ORA #%10100000                  ; Select DEV=0 and LBA mode = 1
.196800		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196804		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196807		e2 20		sep #$20	                SEP #$20        ; set A short
.196809		a9 00		lda #$00	                LDA #0                          ; Clear sector count and LBA
.19680b		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.19680f		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.196813		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196817		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19681b		a9 ec		lda #$ec	                LDA #IDE_CMD_IDENTIFY           ; The IDENTIFY command
.19681d		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT             ; Check the status
.196821		f0 29		beq $19684c	                BEQ no_media                    ; If 0: there is no drive
.196823		20 99 67	jsr $196799	                JSR IDE_DRIVE_BSY               ; Othewise: wait for drive to not be busy
.196826		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196829		90 2d		bcc $196858	                BCC ret_failure                 ; If an error occurred, return it
.19682b		c2 30		rep #$30	                REP #$30        ; set A&X long
.19682d		a0 00 00	ldy #$0000	                LDY #0
.196830		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.196834		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.196836		c8		iny		                INY                             ; Move to the next position
.196837		c8		iny		                INY
.196838		c0 00 02	cpy #$0200	                CPY #512
.19683b		d0 f3		bne $196830	                BNE read_loop
.19683d						ret_success
.19683d		e2 20		sep #$20	                SEP #$20        ; set A short
.19683f		a9 00		lda #$00	                LDA #0
.196841		85 00		sta $0320	                STA BIOS_STATUS
.196843		8d 06 03	sta $0306	                STA @w FDC_ST0
.196846		28		plp		                PLP                             ; Return success
.196847		2b		pld		                PLD
.196848		ab		plb		                PLB
.196849		7a		ply		                PLY
.19684a		38		sec		                SEC
.19684b		6b		rtl		                RTL
.19684c						no_media
.19684c		e2 20		sep #$20	                SEP #$20        ; set A short
.19684e		a9 87		lda #$87	                LDA #BIOS_ERR_NOMEDIA
.196850		80 0a		bra $19685c	                BRA pass_failure
.196852						not_ata
.196852		e2 20		sep #$20	                SEP #$20        ; set A short
.196854		a9 8a		lda #$8a	                LDA #BIOS_ERR_NOTATA
.196856		80 04		bra $19685c	                BRA pass_failure
.196858						ret_failure
.196858		e2 20		sep #$20	                SEP #$20        ; set A short
.19685a		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.19685c		85 00		sta $0320	pass_failure    STA BIOS_STATUS
.19685e		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196862		8d 06 03	sta $0306	                STA @w FDC_ST0
.196865		28		plp		                PLP
.196866		2b		pld		                PLD
.196867		ab		plb		                PLB
.196868		7a		ply		                PLY
.196869		18		clc		                CLC
.19686a		6b		rtl		                RTL
.19686b						IDE_GETBLOCK
.19686b		5a		phy		                PHY
.19686c		8b		phb		                PHB
.19686d		0b		phd		                PHD
.19686e		08		php		                PHP
.19686f		48		pha		                PHA             ; begin setdbr macro
.196870		08		php		                PHP
.196871		e2 20		sep #$20	                SEP #$20        ; set A short
.196873		a9 00		lda #$00	                LDA #0
.196875		48		pha		                PHA
.196876		ab		plb		                PLB
.196877		28		plp		                PLP
.196878		68		pla		                PLA             ; end setdbr macro
.196879		48		pha		                PHA             ; begin setdp macro
.19687a		08		php		                PHP
.19687b		c2 20		rep #$20	                REP #$20        ; set A long
.19687d		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.196880		5b		tcd		                TCD
.196881		28		plp		                PLP
.196882		68		pla		                PLA             ; end setdp macro
.196883		e2 20		sep #$20	                SEP #$20        ; set A short
.196885		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196888		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.19688a		29 07		and #$07	                AND #$07
.19688c		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.19688e		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.196892		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196895		e2 20		sep #$20	                SEP #$20        ; set A short
.196897		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196899		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.19689d		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.19689f		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.1968a3		a5 03		lda $0323	                LDA BIOS_LBA+1
.1968a5		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.1968a9		a5 04		lda $0324	                LDA BIOS_LBA+2
.1968ab		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.1968af		a9 21		lda #$21	                LDA #IDE_CMD_READ_SECTOR        ; The READ SECTOR command
.1968b1		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.1968b5		ea		nop		                NOP                             ; Wait about 500ns
.1968b6		ea		nop		                NOP
.1968b7		ea		nop		                NOP
.1968b8		ea		nop		                NOP
.1968b9		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.1968bc		90 25		bcc $1968e3	                BCC ret_failure                 ; If an error occurred, return it
.1968be		a0 00 00	ldy #$0000	                LDY #0
.1968c1		c2 20		rep #$20	                REP #$20        ; set A long
.1968c3		af 38 e8 af	lda $afe838	read_loop       LDA @l IDE_DATA_LO              ; Get the word of data from the device
.1968c7		97 06		sta [$0326],y	                STA [BIOS_BUFF_PTR],Y           ; Save it to the buffer
.1968c9		c8		iny		                INY                             ; Move to the next position
.1968ca		c8		iny		                INY
.1968cb		c0 00 02	cpy #$0200	                CPY #512
.1968ce		d0 f3		bne $1968c3	                BNE read_loop
.1968d0		ea		nop		                NOP                             ; Wait about 500ns
.1968d1		ea		nop		                NOP
.1968d2		ea		nop		                NOP
.1968d3		ea		nop		                NOP
.1968d4						ret_success
.1968d4		e2 20		sep #$20	                SEP #$20        ; set A short
.1968d6		a9 00		lda #$00	                LDA #0
.1968d8		85 00		sta $0320	                STA BIOS_STATUS
.1968da		8d 06 03	sta $0306	                STA @w FDC_ST0
.1968dd		28		plp		                PLP                             ; Return success
.1968de		2b		pld		                PLD
.1968df		ab		plb		                PLB
.1968e0		7a		ply		                PLY
.1968e1		38		sec		                SEC
.1968e2		6b		rtl		                RTL
.1968e3						ret_failure
.1968e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1968e5		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.1968e9		8d 06 03	sta $0306	                STA @w FDC_ST0
.1968ec		a9 82		lda #$82	                LDA #BIOS_ERR_READ
.1968ee		85 00		sta $0320	                STA BIOS_STATUS
.1968f0		28		plp		                PLP
.1968f1		2b		pld		                PLD
.1968f2		ab		plb		                PLB
.1968f3		7a		ply		                PLY
.1968f4		18		clc		                CLC
.1968f5		6b		rtl		                RTL
.1968f6						IDE_PUTBLOCK
.1968f6		5a		phy		                PHY
.1968f7		8b		phb		                PHB
.1968f8		0b		phd		                PHD
.1968f9		08		php		                PHP
.1968fa		48		pha		                PHA             ; begin setdbr macro
.1968fb		08		php		                PHP
.1968fc		e2 20		sep #$20	                SEP #$20        ; set A short
.1968fe		a9 00		lda #$00	                LDA #0
.196900		48		pha		                PHA
.196901		ab		plb		                PLB
.196902		28		plp		                PLP
.196903		68		pla		                PLA             ; end setdbr macro
.196904		48		pha		                PHA             ; begin setdp macro
.196905		08		php		                PHP
.196906		c2 20		rep #$20	                REP #$20        ; set A long
.196908		a9 20 03	lda #$0320	                LDA #SDOS_VARIABLES         ; set DP to page 0
.19690b		5b		tcd		                TCD
.19690c		28		plp		                PLP
.19690d		68		pla		                PLA             ; end setdp macro
.19690e		e2 20		sep #$20	                SEP #$20        ; set A short
.196910		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait until the IDE is clear to accept commands
.196913		a5 05		lda $0325	                LDA BIOS_LBA+3                  ; Get the high bits of the LBA
.196915		29 07		and #$07	                AND #$07
.196917		09 e0		ora #$e0	                ORA #%11100000                  ; Select DEV=0 and LBA mode = 1
.196919		8f 36 e8 af	sta $afe836	                STA @l IDE_HEAD                 ; Ensure master is selected
.19691d		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; And wait for it to take effect
.196920		e2 20		sep #$20	                SEP #$20        ; set A short
.196922		a9 01		lda #$01	                LDA #1                          ; Set that we want one sector
.196924		8f 32 e8 af	sta $afe832	                STA @l IDE_SECT_CNT
.196928		a5 02		lda $0322	                LDA BIOS_LBA                    ; Set the lower bits of the LBA
.19692a		8f 33 e8 af	sta $afe833	                STA @l IDE_SECT_SRT
.19692e		a5 03		lda $0323	                LDA BIOS_LBA+1
.196930		8f 34 e8 af	sta $afe834	                STA @l IDE_CLDR_LO
.196934		a5 04		lda $0324	                LDA BIOS_LBA+2
.196936		8f 35 e8 af	sta $afe835	                STA @l IDE_CLDR_HI
.19693a		a9 30		lda #$30	                LDA #IDE_CMD_WRITE_SECTOR       ; The READ SECTOR command
.19693c		8f 37 e8 af	sta $afe837	                STA @l IDE_CMD_STAT
.196940		ea		nop		                NOP                             ; Wait about 500ns
.196941		ea		nop		                NOP
.196942		ea		nop		                NOP
.196943		ea		nop		                NOP
.196944		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196947		90 37		bcc $196980	                BCC ret_failure                 ; If an error occurred, return it
.196949		c2 30		rep #$30	                REP #$30        ; set A&X long
.19694b		a0 00 00	ldy #$0000	                LDY #0
.19694e		b7 06		lda [$0326],y	read_loop       LDA [BIOS_BUFF_PTR],Y           ; Get the word from the buffer
.196950		8f 38 e8 af	sta $afe838	                STA @l IDE_DATA_LO              ; Save the word to the device
.196954		c8		iny		                INY                             ; Move to the next position
.196955		c8		iny		                INY
.196956		c0 00 02	cpy #$0200	                CPY #512
.196959		d0 f3		bne $19694e	                BNE read_loop
.19695b		ea		nop		                NOP                             ; Wait about 500ns
.19695c		ea		nop		                NOP
.19695d		ea		nop		                NOP
.19695e		ea		nop		                NOP
.19695f		20 b7 67	jsr $1967b7	                JSR IDE_DRV_READY_NOTBUSY       ; Wait for the device to be ready
.196962		90 1c		bcc $196980	                BCC ret_failure                 ; If an error occurred, return it
.196964		ea		nop		                NOP                             ; Wait about 500ns
.196965		ea		nop		                NOP
.196966		ea		nop		                NOP
.196967		ea		nop		                NOP
.196968		af 37 e8 af	lda $afe837	                LDA @l IDE_CMD_STAT             ; Check the status
.19696c		89 21 00	bit #$0021	                BIT #IDE_STAT_ERR | IDE_STAT_DF
.19696f		d0 0f		bne $196980	                BNE ret_failure                 ; If error: return failure
.196971						ret_success
.196971		e2 20		sep #$20	                SEP #$20        ; set A short
.196973		a9 00		lda #$00	                LDA #0
.196975		85 00		sta $0320	                STA BIOS_STATUS
.196977		8d 06 03	sta $0306	                STA @w FDC_ST0
.19697a		28		plp		                PLP                             ; Return success
.19697b		2b		pld		                PLD
.19697c		ab		plb		                PLB
.19697d		7a		ply		                PLY
.19697e		38		sec		                SEC
.19697f		6b		rtl		                RTL
.196980		ea		nop		ret_failure     NOP                             ; Wait about 500ns
.196981		ea		nop		                NOP
.196982		ea		nop		                NOP
.196983		ea		nop		                NOP
.196984		e2 20		sep #$20	                SEP #$20        ; set A short
.196986		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.19698a		80 08		bra $196994	                BRA save_error
.19698c		ea		nop		                NOP
.19698d		ea		nop		                NOP
.19698e		ea		nop		                NOP
.19698f		ea		nop		                NOP
.196990		af 31 e8 af	lda $afe831	                LDA @l IDE_ERROR
.196994		8d 06 03	sta $0306	save_error      STA @w FDC_ST0
.196997		a9 83		lda #$83	                LDA #BIOS_ERR_WRITE
.196999		85 00		sta $0320	                STA BIOS_STATUS
.19699b		28		plp		                PLP
.19699c		2b		pld		                PLD
.19699d		ab		plb		                PLB
.19699e		7a		ply		                PLY
.19699f		18		clc		                CLC
.1969a0		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/Ethernet_Init_library.asm

.1969a1						SIMPLE_INIT_ETHERNET_CTRL
.1969a1						WaitforittobeReady:
.1969a1		af 84 e0 ae	lda $aee084	                LDA @l ESID_ETHERNET_REG + $84
.1969a5		29 01 00	and #$0001	                AND #$0001
.1969a8		c9 01 00	cmp #$0001	                CMP #$0001 ; This is to check that the Controller is ready to roll
.1969ab		d0 f4		bne $1969a1	                BNE WaitforittobeReady
.1969ad		af 52 e0 ae	lda $aee052	                LDA @l ESID_ETHERNET_REG + $52 ;Chip ID (0x9221)
.1969b1		af 50 e0 ae	lda $aee050	                LDA @l ESID_ETHERNET_REG + $50 ;Chip Revision
.1969b5		af 64 e0 ae	lda $aee064	                LDA @l ESID_ETHERNET_REG + $64
.1969b9		af 66 e0 ae	lda $aee066	                LDA @l ESID_ETHERNET_REG + $66
.1969bd		a9 00 00	lda #$0000	                LDA #$0000
.1969c0		8f 88 e0 ae	sta $aee088	                STA @l ESID_ETHERNET_REG + $88
.1969c4		a9 00 70	lda #$7000	                LDA #$7000
.1969c7		8f 8a e0 ae	sta $aee08a	                STA @l ESID_ETHERNET_REG + $8A
.1969cb		a9 02 00	lda #$0002	                LDA #$0002 ; Accessing CSR INDEX 2 MAC Address (High)
.1969ce		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1969d2		a9 0b 00	lda #$000b	                LDA #$000B
.1969d5		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1969d9		a9 00 00	lda #$0000	                LDA #$0000
.1969dc		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1969e0		20 14 6a	jsr $196a14	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1969e3		a9 03 00	lda #$0003	                LDA #$0003 ; Accessing CSR INDEX 3 MAC Address (low)
.1969e6		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.1969ea		a9 7f dc	lda #$dc7f	                LDA #$DC7F
.1969ed		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.1969f1		a9 d7 ab	lda #$abd7	                LDA #$ABD7
.1969f4		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.1969f8		20 14 6a	jsr $196a14	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.1969fb		a9 01 00	lda #$0001	                LDA #$0001 ; Accessing CSR INDEX 2 MAC Address (High)
.1969fe		8f a4 e0 ae	sta $aee0a4	                STA @l ESID_ETHERNET_REG + $A4
.196a02		a9 0c 00	lda #$000c	                LDA #$000C
.196a05		8f a8 e0 ae	sta $aee0a8	                STA @l ESID_ETHERNET_REG + $A8
.196a09		a9 04 00	lda #$0004	                LDA #$0004
.196a0c		8f aa e0 ae	sta $aee0aa	                STA @l ESID_ETHERNET_REG + $AA
.196a10		20 14 6a	jsr $196a14	                JSR MAC_ACCESS_WAIT_FOR_COMPLETION
.196a13		6b		rtl		                RTL
.196a14						MAC_ACCESS_WAIT_FOR_COMPLETION
.196a14		a9 00 80	lda #$8000	                LDA #$8000 ; CsR busy bit is a status but also the Command Execution bit
.196a17		8f a6 e0 ae	sta $aee0a6	                STA @l ESID_ETHERNET_REG + $A6
.196a1b						WaitForCompletion:
.196a1b		af a6 e0 ae	lda $aee0a6	                LDA @l ESID_ETHERNET_REG + $A6
.196a1f		29 00 80	and #$8000	                AND #$8000
.196a22		c9 00 80	cmp #$8000	                CMP #$8000
.196a25		f0 f4		beq $196a1b	                BEQ WaitForCompletion
.196a27		60		rts		                RTS

;******  Return to file: src\kernel.asm


;******  Processing file: src\Libraries/EXP-C200_EVID_Library.asm

=$ae2000					EVID_SCREEN_PAGE      = $AE2000 ;8192 Bytes First page of display RAM. This is used at boot time to display the welcome screen and the BASIC or MONITOR command screens.
.196a28						INIT_EVID_VID_MODE
.196a28		e2 20		sep #$20	                SEP #$20        ; set A short
.196a2a		a9 01		lda #$01	                LDA #EVID_800x600ModeEnable     ; 0 - 80x60, 1- 100x75
.196a2c		8f 01 1e ae	sta $ae1e01	                STA @l EVID_MSTR_CTRL_REG_H
.196a30		a9 01		lda #$01	                LDA #EVID_Border_Ctrl_Enable    ; Enable the Border
.196a32		8f 04 1e ae	sta $ae1e04	                STA @l EVID_BORDER_CTRL_REG
.196a36		a9 08		lda #$08	                LDA #8                          ; Set the border to the standard 8 pixels
.196a38		8f 08 1e ae	sta $ae1e08	                STA @l EVID_BORDER_X_SIZE       ; Let's use maximum space
.196a3c		8f 09 1e ae	sta $ae1e09	                STA @l EVID_BORDER_Y_SIZE
.196a40		a9 20		lda #$20	                LDA #$20
.196a42		8f 07 1e ae	sta $ae1e07	                STA @l EVID_BORDER_COLOR_R      ; R
.196a46		a9 00		lda #$00	                LDA #$00
.196a48		8f 06 1e ae	sta $ae1e06	                STA @l EVID_BORDER_COLOR_G      ; G
.196a4c		a9 20		lda #$20	                LDA #$20
.196a4e		8f 05 1e ae	sta $ae1e05	                STA @l EVID_BORDER_COLOR_B      ; B
.196a52		22 54 6b 19	jsl $196b54	                JSL INIT_EVID_LUT
.196a56		22 3d 6b 19	jsl $196b3d	                JSL INIT_EVID_FONTSET
.196a5a		22 78 6b 19	jsl $196b78	                JSL INIT_EVID_CURSOR
.196a5e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a60		a9 62 00	lda #$0062	                LDA #(100-2)
.196a63		8f 63 00 00	sta $000063	                STA @l EVID_COLS_VISIBLE
.196a67		a9 49 00	lda #$0049	                LDA #(75-2)
.196a6a		8f 67 00 00	sta $000067	                STA @l EVID_LINES_VISIBLE
.196a6e		a9 64 00	lda #$0064	                LDA #100
.196a71		8f 65 00 00	sta $000065	                STA @l EVID_COLS_PER_LINE
.196a75		a9 4b 00	lda #$004b	                LDA #75
.196a78		8f 69 00 00	sta $000069	                STA @l EVID_LINES_MAX
.196a7c		a9 70 00	lda #$0070	                LDA #$70                        ; Set the default text color to light gray on dark gray
.196a7f		8f 72 00 00	sta $000072	                STA @l EVID_CURCOLOR
.196a83		c2 30		rep #$30	                REP #$30        ; set A&X long
.196a85		a9 00 20	lda #$2000	                LDA #<>EVID_TEXT_MEM            ; store the initial screen buffer location
.196a88		8f 60 00 00	sta $000060	                STA @l EVID_SCREENBEGIN
.196a8c		8f 6b 00 00	sta $00006b	                STA @l EVID_CURSORPOS
.196a90		a9 00 40	lda #$4000	                LDA #<>EVID_COLOR_MEM           ; Set the initial COLOR cursor position
.196a93		8d 76 00	sta $0076	                STA EVID_COLORPOS
.196a96		e2 20		sep #$20	                SEP #$20        ; set A short
.196a98		a9 ae		lda #$ae	                LDA #`EVID_TEXT_MEM
.196a9a		8f 62 00 00	sta $000062	                STA @l EVID_SCREENBEGIN + 2
.196a9e		8f 6d 00 00	sta $00006d	                STA @l EVID_CURSORPOS+2
.196aa2		a9 ae		lda #$ae	                LDA #`EVID_COLOR_MEM            ; Set the initial COLOR cursor position
.196aa4		8f 78 00 00	sta $000078	                STA @l EVID_COLORPOS + 2
.196aa8		6b		rtl		                RTL
>196aa9		1b 5b 31 6d 1b 5b 33 31		EVID_DEV_RDY0   .text $1B, "[1m", $1B, "[31m", $0B, $0C, $1B, "[35m", $0B, $0C, $1B, "[33m", $0B, $0C, $1B
>196ab1		6d 0b 0c 1b 5b 33 35 6d 0b 0c 1b 5b 33 33 6d 0b
>196ac1		0c 1b
>196ac3		5b 33 32 6d 0b 0c 1b 5b		                .null "[32m", $0B, $0C, $1B, "[34m", $0B, $0C, $1B, "[0m", $20, "C256 Foenix EXP-C200-EVID", $0D
>196acb		33 34 6d 0b 0c 1b 5b 30 6d 20 43 32 35 36 20 46
>196adb		6f 65 6e 69 78 20 45 58 50 2d 43 32 30 30 2d 45
>196aeb		56 49 44 0d 00
>196af0		59 6f 75 72 20 44 65 76		EVID_DEV_RDY1   .null "Your Device is Ready..."
>196af8		69 63 65 20 69 73 20 52 65 61 64 79 2e 2e 2e 00
.196b08						EVID_GREET
.196b08		48		pha		                PHA
.196b09		da		phx		                PHX
.196b0a		08		php		                PHP
.196b0b		e2 20		sep #$20	                SEP #$20        ; set A short
.196b0d		af 7d 00 00	lda $00007d	                LDA @l EVID_PRESENT             ; Check if the EVID screen is present
.196b11		f0 26		beq $196b39	                BEQ done                        ; If not, skip this routine
.196b13		a9 04		lda #$04	                LDA #CHAN_EVID                  ; Switch to the EVID screen
.196b15		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196b19		22 a8 10 00	jsl $0010a8	                JSL CLRSCREEN                   ; Clear the screen
.196b1d		c2 10		rep #$10	                REP #$10        ; set X long
.196b1f		8b		phb		                PHB                             ; Print the messages
.196b20		a9 19		lda #$19	                LDA #`EVID_DEV_RDY0
.196b22		48		pha		                PHA
.196b23		ab		plb		                PLB
.196b24		a2 a9 6a	ldx #$6aa9	                LDX #<>EVID_DEV_RDY0
.196b27		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.196b2b		a2 f0 6a	ldx #$6af0	                LDX #<>EVID_DEV_RDY1
.196b2e		22 fb 06 19	jsl $1906fb	                JSL IPRINT
.196b32		ab		plb		                PLB
.196b33		a9 00		lda #$00	                LDA #CHAN_CONSOLE               ; Go back to the main console
.196b35		22 3c 10 00	jsl $00103c	                JSL SETOUT
.196b39		28		plp		done            PLP
.196b3a		fa		plx		                PLX
.196b3b		68		pla		                PLA
.196b3c		6b		rtl		                RTL
.196b3d						INIT_EVID_FONTSET
.196b3d		e2 20		sep #$20	                SEP #$20        ; set A short
.196b3f		c2 10		rep #$10	                REP #$10        ; set X long
.196b41		a2 00 00	ldx #$0000	                LDX #$0000
.196b44						initFontsetbranch0
.196b44		bf 00 00 1f	lda $1f0000,x	                LDA @lFONT_4_BANK0,X    ; RAM Content
.196b48		9f 00 10 ae	sta $ae1000,x	                STA @lEVID_FONT_MEM,X   ; Vicky FONT RAM Bank
.196b4c		e8		inx		                INX
.196b4d		e0 00 08	cpx #$0800	                CPX #$0800
.196b50		d0 f2		bne $196b44	                BNE initFontsetbranch0
.196b52		ea		nop		                NOP
.196b53		6b		rtl		                RTL
.196b54						INIT_EVID_LUT
.196b54		e2 20		sep #$20	                SEP #$20        ; set A short
.196b56		e2 10		sep #$10	                SEP #$10        ; set X short
.196b58		a2 00		ldx #$00	                LDX	#$00
.196b5a		bf 44 82 19	lda $198244,x	lutinitloop0	LDA @lfg_color_lut,x    ; get Local Data c64_character_Color_LUT_4_Txt
.196b5e		9f 00 1b ae	sta $ae1b00,x	                STA @lEVID_FG_LUT,x	    ; Write in LUT Memory
.196b62		e8		inx		                inx
.196b63		e0 40		cpx #$40	                cpx #$40
.196b65		d0 f3		bne $196b5a	                bne lutinitloop0
.196b67		a2 00		ldx #$00	                LDX	#$00
.196b69		bf 84 82 19	lda $198284,x	lutinitloop1	LDA @lbg_color_lut,x    ; get Local Data
.196b6d		9f 40 1b ae	sta $ae1b40,x	                STA @lEVID_BG_LUT,x	    ; Write in LUT Memory
.196b71		e8		inx		                INX
.196b72		e0 40		cpx #$40	                CPX #$40
.196b74		d0 f3		bne $196b69	                bne lutinitloop1
.196b76		ea		nop		                NOP
.196b77		6b		rtl		                RTL
.196b78						INIT_EVID_CURSOR
.196b78		08		php		                PHP
.196b79		e2 20		sep #$20	                SEP #$20        ; set A short
.196b7b		a9 b1		lda #$b1	                LDA #$B1                                            ; The Cursor Character will be a Fully Filled Block
.196b7d		8f 12 1e ae	sta $ae1e12	                STA @lEVID_TXT_CURSOR_CHAR_REG
.196b81		a9 03		lda #$03	                LDA #(EVID_Cursor_Enable | EVID_Cursor_Flash_Rate0) ; Set Cursor Enable And Flash Rate @1Hz
.196b83		8f 10 1e ae	sta $ae1e10	                STA @lEVID_TXT_CURSOR_CTRL_REG
.196b87		c2 30		rep #$30	                REP #$30        ; set A&X long
.196b89		a9 00 00	lda #$0000	                LDA #$0000;
.196b8c		8f 14 1e ae	sta $ae1e14	                STA @lEVID_TXT_CURSOR_X_REG_L   ; Set the X to Position 1
.196b90		8f 16 1e ae	sta $ae1e16	                STA @lEVID_TXT_CURSOR_Y_REG_L   ; Set the Y to Position 6 (Below)
.196b94		28		plp		                PLP
.196b95		6b		rtl		                RTL
.196b96						INIT_EVID_CLRSCREEN
.196b96		08		php		                PHP
.196b97		e2 20		sep #$20	                SEP #$20        ; set A short
.196b99		c2 10		rep #$10	                REP #$10        ; set X long
.196b9b		a2 00 00	ldx #$0000	                LDX #$0000		        ; Only Use One Pointer
.196b9e		a9 20		lda #$20	                LDA #$20		        ; Fill the Entire Screen with Space
.196ba0		9f 00 20 ae	sta $ae2000,x	iclearloop0	    STA @l EVID_TEXT_MEM,X
.196ba4		e8		inx		                inx
.196ba5		e0 00 20	cpx #$2000	                cpx #$2000
.196ba8		d0 f6		bne $196ba0	                bne iclearloop0
.196baa		a2 00 00	ldx #$0000	                LDX	#$0000		        ; Only Use One Pointer
.196bad		a9 f0		lda #$f0	                LDA #$F0		        ; Fill the Color Memory with Foreground: 75% Purple, Background 12.5% White
.196baf		9f 00 40 ae	sta $ae4000,x	iclearloop1	    STA @l EVID_COLOR_MEM,X
.196bb3		e8		inx		                inx
.196bb4		e0 00 20	cpx #$2000	                cpx #$2000
.196bb7		d0 f6		bne $196baf	                bne iclearloop1
.196bb9		28		plp		                PLP
.196bba		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/ansi_screens.asm

.0000						S_ANSI_VARS
>0000						SCREENBEGIN         .long ?     ; Start of screen in video RAM. This is the upper-left corrner of the current video page being written to. This may not be what's being displayed by VICKY. Update this if you change VICKY's display page.
>0003						COLS_VISIBLE        .word ?     ; Columns visible per screen line. A virtual line can be longer than displayed, up to COLS_PER_LINE long. Default = 80
>0005						COLS_PER_LINE       .word ?     ; Columns in memory per screen line. A virtual line can be this long. Default=128
>0007						LINES_VISIBLE       .word ?     ; The number of rows visible on the screen. Default=25
>0009						LINES_MAX           .word ?     ; The number of rows in memory for the screen. Default=64
>000b						CURSORPOS           .long ?     ; The next character written to the screen will be written in this location.
>000e						CURSORX             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0010						CURSORY             .word ?     ; This is where the blinking cursor sits. Do not edit this direectly. Call LOCATE to update the location and handle moving the cursor correctly.
>0012						CURCOLOR            .byte ?     ; Color of next character to be printed to the screen.
>0013						COLORPOS            .long ?     ; Address of cursor's position in the color matrix
>0016						COLORBEGIN          .long ?     ; Address of the first byte of the color matrix for this screen
>0019						TMPPTR1             .dword ?    ; Temporary pointer
>001d						PRESENT             .byte ?     ; Screen is present on the machine (EVID only)
>001e						STATE               .byte ?     ; State of the escape code parser
>001f						CONTROL             .byte ?     ; Control bit
>0020						ARGC                .byte ?     ; The number of arguments provided by the escape sequence (max 2)
>0021						ARG0                .byte ?     ; First ANSI code argument
>0022						ARG1                .byte ?     ; Second ANSI code argument
=0						ST_INIT = 0             ; Starting state for the ANSI code parser. Most characters just print
=1						ST_ESCAPE = 1           ; ESC has been seen
=2						ST_CSI = 2              ; Full CSI has been seen "ESC ["
=2						ANSI_MAX_ARG = 2        ; We'll limit ourselves to two arguments
=$70						ANSI_DEF_COLOR = $70    ; Default color (dim white on dim black)
=$80						CONTROL_INVERT = $80    ; Control bit: Colors are inverted
=$40						CONTROL_BOLD = $40      ; Control bit: Colors should be intense
.196bbb						ANSI_INIT
.196bbb		da		phx		                    PHX
.196bbc		5a		phy		                    PHY
.196bbd		8b		phb		                    PHB
.196bbe		0b		phd		                    PHD
.196bbf		08		php		                    PHP
.196bc0		c2 30		rep #$30	                REP #$30        ; set A&X long
.196bc2		a0 00 00	ldy #$0000	                    LDY #0
.196bc5		22 71 6c 19	jsl $196c71	                    JSL INIT_SCREEN_Y               ; Set up the main screen
.196bc9		e2 20		sep #$20	                SEP #$20        ; set A short
.196bcb		af 87 e8 af	lda $afe887	                    LDA @l GABE_SYS_STAT            ; Let's check the Presence of an Expansion Card here
.196bcf		29 10		and #$10	                    AND #GABE_SYS_STAT_EXP          ; When there is a Card the Value is 1
.196bd1		c9 10		cmp #$10	                    CMP #GABE_SYS_STAT_EXP
.196bd3		d0 1d		bne $196bf2	                    BNE no_evid
.196bd5		c2 20		rep #$20	                REP #$20        ; set A long
.196bd7		af 12 00 ae	lda $ae0012	                    LDA @l ESID_ID_CARD_ID_Lo       ; Load the Card ID and check for C100 or C200
.196bdb		c9 c8 00	cmp #$00c8	                    CMP #$00C8                      ; Is it the EVID card?
.196bde		d0 12		bne $196bf2	                    BNE no_evid                     ; No: mark the EVID screen as not present
.196be0		e2 20		sep #$20	                SEP #$20        ; set A short
.196be2		a9 01		lda #$01	                    LDA #1                          ; Otherwise: Mark that there is an EVID present
.196be4		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196be8		a0 01 00	ldy #$0001	                    LDY #1
.196beb		22 71 6c 19	jsl $196c71	                    JSL INIT_SCREEN_Y               ; Initialize the EVID screen variables
.196bef		80 09		bra $196bfa	                    BRA done
.196bf1		00		brk #		                    BRK
.196bf2						no_evid
.196bf2		e2 20		sep #$20	                SEP #$20        ; set A short
.196bf4		a9 00		lda #$00	                    LDA #0                          ; Mark that there is no EVID present
.196bf6		8f 7d 00 00	sta $00007d	                    STA @l EVID_PRESENT
.196bfa		28		plp		done                PLP
.196bfb		2b		pld		                    PLD
.196bfc		ab		plb		                    PLB
.196bfd		7a		ply		                    PLY
.196bfe		fa		plx		                    PLX
.196bff		6b		rtl		                    RTL
.196c00						ANSI_INIT_LUTS
.196c00		08		php		                    PHP
.196c01		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196c03		a2 00		ldx #$00	                    LDX #0
.196c05		bf 31 6c 19	lda $196c31,x	vicky_loop          LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196c09		9f 40 1f af	sta $af1f40,x	                    STA @l FG_CHAR_LUT_PTR,X        ; Set the corresponding foreground color component on Vicky
.196c0d		9f 80 1f af	sta $af1f80,x	                    STA @l BG_CHAR_LUT_PTR,X        ; Set the corresponding background color component on Vicky
.196c11		e8		inx		                    INX
.196c12		e0 40		cpx #$40	                    CPX #4*16
.196c14		d0 ef		bne $196c05	                    BNE vicky_loop
.196c16		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Check to see if EVID is present
.196c1a		f0 13		beq $196c2f	                    BEQ done                        ; If not, we're done
.196c1c		a2 00		ldx #$00	                    LDX #0
.196c1e		bf 31 6c 19	lda $196c31,x	evid_loop           LDA ANSI_TEXT_LUT,X             ; Get the Xth LUT byte
.196c22		9f 00 1b ae	sta $ae1b00,x	                    STA @l EVID_FG_LUT,X            ; Set the corresponding foreground color component on the EVID card
.196c26		9f 40 1b ae	sta $ae1b40,x	                    STA @l EVID_BG_LUT,X            ; Set the corresponding background color component on the EVID card
.196c2a		e8		inx		                    INX
.196c2b		e0 40		cpx #$40	                    CPX #4*16
.196c2d		d0 ef		bne $196c1e	                    BNE evid_loop
.196c2f		28		plp		done                PLP
.196c30		6b		rtl		                    RTL
.196c31						ANSI_TEXT_LUT
>196c31		00 00 00 00			                    .byte 0, 0, 0, 0
>196c35		00 00 80 00			                    .byte 0, 0, 128, 0
>196c39		00 80 00 00			                    .byte 0, 128, 0, 0
>196c3d		00 80 80 00			                    .byte 0, 128, 128, 0
>196c41		80 00 00 00			                    .byte 128, 0, 0, 0
>196c45		80 00 80 00			                    .byte 128, 0, 128, 0
>196c49		80 80 00 00			                    .byte 128, 128, 0, 0
>196c4d		c0 c0 c0 00			                    .byte 192, 192, 192, 0
>196c51		80 80 80 00			                    .byte 128, 128, 128, 0
>196c55		00 00 ff 00			                    .byte 0, 0, 255, 0
>196c59		00 ff 00 00			                    .byte 0, 255, 0, 0
>196c5d		00 ff ff 00			                    .byte 0, 255, 255, 0
>196c61		ff 00 00 00			                    .byte 255, 0, 0, 0
>196c65		00 7f fc 00			                    .byte 0, 127, 252, 0
>196c69		ff ff 00 00			                    .byte 255, 255, 0, 0
>196c6d		ff ff ff 00			                    .byte 255, 255, 255, 0
.196c71						INIT_SCREEN_Y
.196c71		c2 30		rep #$30	                REP #$30        ; set A&X long
.196c73		c0 00 00	cpy #$0000	                    CPY #0
.196c76		f0 06		beq $196c7e	                    BEQ setdp_0
.196c78		a9 60 00	lda #$0060	setdp_1             LDA #<>EVID_SCREENBEGIN         ; Set DP to the EVID variable block
.196c7b		5b		tcd		                    TCD
.196c7c		80 04		bra $196c82	                    BRA set_addresses
.196c7e		a9 0c 00	lda #$000c	setdp_0             LDA #<>SCREENBEGIN              ; Set DP to the main screen variable block
.196c81		5b		tcd		                    TCD
.196c82		98		tya		set_addresses       TYA                             ; Compute offset to screen Y's addresses
.196c83		0a		asl a		                    ASL A
.196c84		0a		asl a		                    ASL A
.196c85		aa		tax		                    TAX
.196c86		bf c1 6c 19	lda $196cc1,x	                    LDA @l text_address,X
.196c8a		85 00		sta $0320	                    STA #S_ANSI_VARS.SCREENBEGIN,D  ; Set the address of the text matrix
.196c8c		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D    ; And the cursor pointer
.196c8e		e2 20		sep #$20	                SEP #$20        ; set A short
.196c90		bf c3 6c 19	lda $196cc3,x	                    LDA @l text_address+2,X
.196c94		85 02		sta $0322	                    STA #S_ANSI_VARS.SCREENBEGIN+2,D
.196c96		85 0d		sta $032d	                    STA #S_ANSI_VARS.CURSORPOS+2,D
.196c98		c2 20		rep #$20	                REP #$20        ; set A long
.196c9a		bf c9 6c 19	lda $196cc9,x	                    LDA @l color_address,X
.196c9e		85 16		sta $0336	                    STA #S_ANSI_VARS.COLORBEGIN,D   ; Set the address of the color matrix
.196ca0		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D     ; And the color cursor pointer
.196ca2		e2 20		sep #$20	                SEP #$20        ; set A short
.196ca4		bf cb 6c 19	lda $196ccb,x	                    LDA @l color_address+2,X
.196ca8		85 18		sta $0338	                    STA #S_ANSI_VARS.COLORBEGIN+2,D
.196caa		85 15		sta $0335	                    STA #S_ANSI_VARS.COLORPOS+2,D
.196cac		c2 20		rep #$20	                REP #$20        ; set A long
.196cae		64 0e		stz $032e	                    STZ #S_ANSI_VARS.CURSORX,D      ; Set the cursor position to 0, 0
.196cb0		64 10		stz $0330	                    STZ #S_ANSI_VARS.CURSORY,D
.196cb2		e2 20		sep #$20	                SEP #$20        ; set A short
.196cb4		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D        ; Set the state of the ANSI parser to S0
.196cb6		64 1f		stz $033f	                    STZ #S_ANSI_VARS.CONTROL,D      ; Set the control bits to 0 (default)
.196cb8		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.196cba		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D     ; Set the current color to the default
.196cbc		22 0a 6d 19	jsl $196d0a	                    JSL ANSI_SETSIZE_Y              ; Set the size variables for the main screen
.196cc0		6b		rtl		                    RTL
>196cc1		00 a0 af 00 00 20 ae 00		text_address        .dword CS_TEXT_MEM_PTR, EVID_TEXT_MEM
>196cc9		00 c0 af 00 00 40 ae 00		color_address       .dword CS_COLOR_MEM_PTR, EVID_COLOR_MEM
.196cd1						ANSI_SETSIZES
.196cd1		48		pha		                    PHA
.196cd2		da		phx		                    PHX
.196cd3		5a		phy		                    PHY
.196cd4		0b		phd		                    PHD
.196cd5		08		php		                    PHP
.196cd6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196cd8		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Save the current output channel
.196cdc		48		pha		                    PHA
.196cdd		a9 00		lda #$00	                    LDA #CHAN_CONSOLE               ; Set the sizes for the main screen
.196cdf		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.196ce3		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196ce7		a0 00		ldy #$00	                    LDY #0
.196ce9		22 0a 6d 19	jsl $196d0a	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196ced		a9 04		lda #$04	                    LDA #CHAN_EVID                  ; Set the sizes for the EVID screen
.196cef		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT
.196cf3		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE              ; Set the DP to the device's record
.196cf7		b0 06		bcs $196cff	                    BCS done                        ; Not present, just return
.196cf9		a0 01		ldy #$01	                    LDY #1
.196cfb		22 0a 6d 19	jsl $196d0a	                    JSL ANSI_SETSIZE_Y              ; Set the sizes for that device
.196cff		68		pla		done                PLA
.196d00		8f 03 07 00	sta $000703	                    STA @l CHAN_OUT                 ; Restore the output channel
.196d04		28		plp		                    PLP
.196d05		2b		pld		                    PLD
.196d06		7a		ply		                    PLY
.196d07		fa		plx		                    PLX
.196d08		68		pla		                    PLA
.196d09		6b		rtl		                    RTL
.196d0a						ANSI_SETSIZE_Y
.196d0a		08		php		                    PHP
.196d0b		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196d0d		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d0f		f0 06		beq $196d17	                    BEQ vky_master                      ; Yes: get the resolution from Vicky
.196d11		af 01 1e ae	lda $ae1e01	                    LDA @l EVID_MSTR_CTRL_REG_H         ; No: get the resolution from EVID
.196d15		80 04		bra $196d1b	                    BRA resolution
.196d17		af 01 00 af	lda $af0001	vky_master          LDA @l MASTER_CTRL_REG_H
.196d1b		29 03		and #$03	resolution          AND #$03                            ; Mask off the resolution bits
.196d1d		0a		asl a		                    ASL A
.196d1e		aa		tax		                    TAX                                 ; Index to the col/line count in X
.196d1f		c2 20		rep #$20	                REP #$20        ; set A long
.196d21		bf bd 6d 19	lda $196dbd,x	                    LDA @l cols_by_res,X                ; Get the number of columns
.196d25		85 05		sta $0325	                    STA #S_ANSI_VARS.COLS_PER_LINE,D    ; This is how many columns there are per line in the memory
.196d27		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D     ; This is how many would be visible with no border
.196d29		bf c5 6d 19	lda $196dc5,x	                    LDA @l lines_by_res,X               ; Get the number of lines
.196d2d		85 09		sta $0329	                    STA #S_ANSI_VARS.LINES_MAX,D        ; This is the total number of lines in memory
.196d2f		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D    ; This is how many lines would be visible with no border
.196d31		e2 20		sep #$20	                SEP #$20        ; set A short
.196d33		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d35		f0 06		beq $196d3d	                    BEQ vky_border                      ; Yes: get the border from Vicky
.196d37		af 04 1e ae	lda $ae1e04	                    LDA @l EVID_BORDER_CTRL_REG         ; No: Check EVID to see if we have a border
.196d3b		80 04		bra $196d41	                    BRA border
.196d3d		af 04 00 af	lda $af0004	vky_border          LDA @l BORDER_CTRL_REG              ; Check Vicky to see if we have a border
.196d41		89 01		bit #$01	border              BIT #Border_Ctrl_Enable
.196d43		f0 76		beq $196dbb	                    BEQ done                            ; No border... the sizes are correct now
.196d45		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d47		f0 06		beq $196d4f	                    BEQ vky_border_size                 ; Yes: get the border size from Vicky
.196d49		af 08 1e ae	lda $ae1e08	                    LDA @l EVID_BORDER_X_SIZE           ; No: Get the horizontal border width from EVID
.196d4d		80 04		bra $196d53	                    BRA get_border_x_size
.196d4f		af 08 00 af	lda $af0008	vky_border_size     LDA @l BORDER_X_SIZE                ; Get the horizontal border width from Vicky
.196d53		29 3f		and #$3f	get_border_x_size   AND #$3F
.196d55		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196d57		d0 04		bne $196d5d	                    BNE frac_width
.196d59		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196d5a		4a		lsr a		                    LSR A
.196d5b		80 03		bra $196d60	                    BRA store_width
.196d5d		4a		lsr a		frac_width          LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196d5e		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196d5f		1a		inc a		                    INC A
.196d60		85 19		sta $0339	store_width         STA #S_ANSI_VARS.TMPPTR1,D
.196d62		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196d64		e2 20		sep #$20	                SEP #$20        ; set A short
.196d66		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196d68		f0 0c		beq $196d76	                    BEQ adjust_width                    ; Yes: skip the pixel doubling check
.196d6a		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check Vucky if we're pixel doubling
.196d6e		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196d70		f0 04		beq $196d76	                    BEQ adjust_width                    ; No... just adjust the width of the screen
.196d72		c2 20		rep #$20	                REP #$20        ; set A long
.196d74		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196d76						adjust_width
.196d76		c2 20		rep #$20	                REP #$20        ; set A long
.196d78		38		sec		                    SEC
.196d79		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.196d7b		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196d7d		85 03		sta $0323	                    STA #S_ANSI_VARS.COLS_VISIBLE,D
.196d7f		e2 20		sep #$20	                SEP #$20        ; set A short
.196d81		c0 00		cpy #$00	                    CPY #0                              ; Is our target screen 0?
.196d83		f0 06		beq $196d8b	                    BEQ vky_border_y_size               ; Yes: get the border Y size from Vicky
.196d85		af 09 1e ae	lda $ae1e09	                    LDA @l EVID_BORDER_Y_SIZE           ; No: Get the vertical border width from EVID
.196d89		80 04		bra $196d8f	                    BRA get_border_y_size
.196d8b		af 09 00 af	lda $af0009	vky_border_y_size   LDA @l BORDER_Y_SIZE                ; Get the vertical border width from Vicky
.196d8f		29 3f		and #$3f	get_border_y_size   AND #$3F
.196d91		89 03		bit #$03	                    BIT #$03                            ; Check the lower two bits... indicates a partial column is eaten
.196d93		d0 04		bne $196d99	                    BNE frac_height
.196d95		4a		lsr a		                    LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4
.196d96		4a		lsr a		                    LSR A
.196d97		80 03		bra $196d9c	                    BRA store_height
.196d99		4a		lsr a		frac_height         LSR A                               ; COLUMNS_HIDDEN := BORDER_X_SIZE / 4 + 1
.196d9a		4a		lsr a		                    LSR A                               ; because a column is partially hidden
.196d9b		1a		inc a		                    INC A
.196d9c		85 19		sta $0339	store_height        STA #S_ANSI_VARS.TMPPTR1,D
.196d9e		64 1a		stz $033a	                    STZ #S_ANSI_VARS.TMPPTR1+1,D
.196da0		e2 20		sep #$20	                SEP #$20        ; set A short
.196da2		c0 01		cpy #$01	                    CPY #1                              ; Are we setting the EVID?
.196da4		f0 0c		beq $196db2	                    BEQ adjust_height                   ; Yes: skip the pixel doubling check
.196da6		af 01 00 af	lda $af0001	                    LDA @l MASTER_CTRL_REG_H            ; Check if we're pixel doubling
.196daa		89 02		bit #$02	                    BIT #Mstr_Ctrl_Video_Mode1
.196dac		f0 04		beq $196db2	                    BEQ adjust_height                   ; No... just adjust the height of the screen
.196dae		c2 20		rep #$20	                REP #$20        ; set A long
.196db0		46 19		lsr $0339	                    LSR #S_ANSI_VARS.TMPPTR1,D          ; Yes... cut the adjustment in half
.196db2						adjust_height
.196db2		c2 20		rep #$20	                REP #$20        ; set A long
.196db4		38		sec		                    SEC
.196db5		a5 09		lda $0329	                    LDA #S_ANSI_VARS.LINES_MAX,D
.196db7		e5 19		sbc $0339	                    SBC #S_ANSI_VARS.TMPPTR1,D
.196db9		85 07		sta $0327	                    STA #S_ANSI_VARS.LINES_VISIBLE,D
.196dbb		28		plp		done                PLP
.196dbc		6b		rtl		                    RTL
>196dbd		50 00 64 00 28 00 32 00		cols_by_res         .word 80,100,40,50
>196dc5		3c 00 4b 00 1e 00 25 00		lines_by_res        .word 60,75,30,37
.196dcd						ANSI_SETDEVICE
.196dcd		48		pha		                    PHA
.196dce		08		php		                    PHP
.196dcf		e2 20		sep #$20	                SEP #$20        ; set A short
.196dd1		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check the current output channel
.196dd5		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE               ; Is it the console?
.196dd7		f0 08		beq $196de1	                    BEQ console                     ; Yes: point to the console
.196dd9		c9 04		cmp #$04	                    CMP #CHAN_EVID                  ; Is it the EVID?
.196ddb		f0 0b		beq $196de8	                    BEQ evid                        ; Check to see if the EVID is present
.196ddd		28		plp		bad_device          PLP
.196dde		68		pla		                    PLA
.196ddf		38		sec		                    SEC
.196de0		6b		rtl		                    RTL
.196de1						console
.196de1		c2 20		rep #$20	                REP #$20        ; set A long
.196de3		a9 0c 00	lda #$000c	                    LDA #<>SCREENBEGIN              ; Point to the the main screen's variables
.196de6		80 0d		bra $196df5	                    BRA set_dp
.196de8						evid
.196de8		e2 20		sep #$20	                SEP #$20        ; set A short
.196dea		af 7d 00 00	lda $00007d	                    LDA @l EVID_PRESENT             ; Is the EVID present?
.196dee		f0 ed		beq $196ddd	                    BEQ bad_device                  ; No: return that the device is bad
.196df0		c2 20		rep #$20	                REP #$20        ; set A long
.196df2		a9 60 00	lda #$0060	                    LDA #<>EVID_SCREENBEGIN         ; Yes: point to the EVID's variables
.196df5		5b		tcd		set_dp              TCD
.196df6		28		plp		                    PLP
.196df7		68		pla		                    PLA
.196df8		18		clc		                    CLC
.196df9		6b		rtl		                    RTL
.196dfa						ANSI_PUTC
.196dfa		da		phx		                    PHX
.196dfb		5a		phy		                    PHY
.196dfc		0b		phd		                    PHD
.196dfd		08		php		                    PHP
.196dfe		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196e00		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.196e04		90 03		bcc $196e09	                    BCC get_state               ; If valid, check the current state
.196e06		82 8a 00	brl $196e93	                    BRL done                    ; If invalid, just return
.196e09		a6 1e		ldx $033e	get_state           LDX #S_ANSI_VARS.STATE,D    ; Get the current state
.196e0b		f0 0c		beq $196e19	                    BEQ do_st_init              ; Dispatch to the correct code for the state
.196e0d		e0 01		cpx #$01	                    CPX #ST_ESCAPE
.196e0f		f0 20		beq $196e31	                    BEQ do_st_escape
.196e11		e0 02		cpx #$02	                    CPX #ST_CSI
.196e13		f0 2c		beq $196e41	                    BEQ do_st_csi
.196e15		64 1e		stz $033e	pr_and_reset        STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196e17		80 06		bra $196e1f	                    BRA print_raw
.196e19		c9 1b		cmp #$1b	do_st_init          CMP #CHAR_ESC               ; Is it ESC?
.196e1b		f0 08		beq $196e25	                    BEQ go_escape               ; Yes, handle the ESC
.196e1d		90 0c		bcc $196e2b	                    BLT do_control              ; If less than, handle as a control code
.196e1f		22 74 6f 19	jsl $196f74	print_raw           JSL ANSI_PUTRAWC            ; Otherwise: Just print the raw character
.196e23		80 6e		bra $196e93	                    BRA done
.196e25		a9 01		lda #$01	go_escape           LDA #ST_ESCAPE
.196e27		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the ESCAPE state
.196e29		80 68		bra $196e93	                    BRA done
.196e2b		22 2b 6f 19	jsl $196f2b	do_control          JSL ANSI_PR_CONTROL         ; Hand a single byte control code
.196e2f		80 62		bra $196e93	                    BRA done
.196e31		c9 5b		cmp #$5b	do_st_escape        CMP #'['                    ; Have we gotten 'ESC['?
.196e33		d0 e0		bne $196e15	                    BNE pr_and_reset            ; No: print this and return to ST_INIT
.196e35		64 21		stz $0341	                    STZ #S_ANSI_VARS.ARG0,D     ; Clear the arguments
.196e37		64 22		stz $0342	                    STZ #S_ANSI_VARS.ARG1,D
.196e39		64 20		stz $0340	                    STZ #S_ANSI_VARS.ARGC,D
.196e3b		a9 02		lda #$02	                    LDA #ST_CSI
.196e3d		85 1e		sta $033e	                    STA #S_ANSI_VARS.STATE,D    ; Move to the CSI state
.196e3f		80 52		bra $196e93	                    BRA done
.196e41		c9 30		cmp #$30	do_st_csi           CMP #'0'                    ; Do we have a digit?
.196e43		90 1d		bcc $196e62	                    BLT csi_not_digit
.196e45		c9 3a		cmp #$3a	                    CMP #'9'+1
.196e47		b0 19		bcs $196e62	                    BGE csi_not_digit
.196e49		38		sec		                    SEC                         ; Have digit... convert to a number
.196e4a		e9 30		sbc #$30	                    SBC #'0'
.196e4c		48		pha		                    PHA                         ; Save it
.196e4d		a6 20		ldx $0340	                    LDX #S_ANSI_VARS.ARGC,D
.196e4f		16 21		asl $0341,x	                    ASL #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 2
.196e51		b5 21		lda $0341,x	                    LDA #S_ANSI_VARS.ARG0,D,X
.196e53		0a		asl a		                    ASL A                       ; A := arg * 4
.196e54		0a		asl a		                    ASL A                       ; A := arg * 8
.196e55		18		clc		                    CLC
.196e56		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10
.196e58		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := A
.196e5a		18		clc		                    CLC
.196e5b		68		pla		                    PLA                         ; Get the digit back
.196e5c		75 21		adc $0341,x	                    ADC #S_ANSI_VARS.ARG0,D,X   ; A := arg * 10 + digit
.196e5e		95 21		sta $0341,x	                    STA #S_ANSI_VARS.ARG0,D,X   ; arg := arg * 10 + digit
.196e60		80 31		bra $196e93	                    BRA done                    ; And we're done with this particular character
.196e62		c9 3b		cmp #$3b	csi_not_digit       CMP #';'                    ; Is it an argument separator?
.196e64		d0 0e		bne $196e74	                    BNE csi_not_sep
.196e66		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D     ; Get the argument count
.196e68		c9 02		cmp #$02	                    CMP #ANSI_MAX_ARG           ; Are we at the maximum argument count?
.196e6a		d0 03		bne $196e6f	                    BNE csi_next_arg            ; No: move to the next argument
.196e6c		82 a6 ff	brl $196e15	                    BRL pr_and_reset            ; Yes: print and reset state
.196e6f		1a		inc a		csi_next_arg        INC A
.196e70		85 20		sta $0340	                    STA #S_ANSI_VARS.ARGC,D     ; Set the new argument count
.196e72		80 1f		bra $196e93	                    BRA done                    ; And we're done with this character
.196e74		c9 40		cmp #$40	csi_not_sep         CMP #'@'
.196e76		90 0a		bcc $196e82	                    BLT csi_not_upper
.196e78		c9 5b		cmp #$5b	                    CMP #'Z'+1
.196e7a		b0 06		bcs $196e82	                    BGE csi_not_upper
.196e7c		22 a3 6e 19	jsl $196ea3	                    JSL ANSI_ANSI_UPPER         ; Process an ANSI upper case code
.196e80		80 11		bra $196e93	                    BRA done
.196e82		c9 61		cmp #$61	csi_not_upper       CMP #'a'
.196e84		90 0a		bcc $196e90	                    BLT csi_not_lower
.196e86		c9 7b		cmp #$7b	                    CMP #'z'+1
.196e88		b0 06		bcs $196e90	                    BGE csi_not_lower
.196e8a		22 e8 6e 19	jsl $196ee8	                    JSL ANSI_ANSI_LOWER         ; Process an ANSI lower case code
.196e8e		80 03		bra $196e93	                    BRA done
.196e90		82 82 ff	brl $196e15	csi_not_lower       BRL pr_and_reset            ; Invalid sequence: print it and reset
.196e93		28		plp		done                PLP
.196e94		2b		pld		                    PLD
.196e95		7a		ply		                    PLY
.196e96		fa		plx		                    PLX
.196e97		6b		rtl		                    RTL
.196e98						ANSI_INVALID
.196e98		08		php		                    PHP
.196e99		e2 20		sep #$20	                SEP #$20        ; set A short
.196e9b		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; If invalid, reset to 0 and print the character
.196e9d		22 74 6f 19	jsl $196f74	                    JSL ANSI_PUTRAWC            ; Print the character
.196ea1		28		plp		                    PLP
.196ea2		6b		rtl		                    RTL
.196ea3						ANSI_ANSI_UPPER
.196ea3		08		php		                    PHP
.196ea4		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196ea6		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196ea8		38		sec		                    SEC
.196ea9		e9 40		sbc #$40	                    SBC #'@'
.196eab		0a		asl a		                    ASL A
.196eac		aa		tax		                    TAX
.196ead		fc b2 6e	jsr ($196eb2,x)	                    JSR (ansi_table,X)
.196eb0		28		plp		                    PLP
.196eb1		6b		rtl		                    RTL
>196eb2		e8 71				ansi_table          .word <>ANSI_ICH        ; '@' -- ICH -- Insert Character
>196eb4		8f 6f				                    .word <>ANSI_CUU        ; 'A' -- CUU -- Cursor Up
>196eb6		a2 6f				                    .word <>ANSI_CUD        ; 'B' -- CUD -- Cursor Down
>196eb8		b3 6f				                    .word <>ANSI_CUF        ; 'C' -- CUF -- Cursor Forward
>196eba		c4 6f				                    .word <>ANSI_CUB        ; 'D' -- CUB -- Cursor Back
>196ebc		98 6e				                    .word <>ANSI_INVALID    ; 'E' -- CNL -- Cursor Next Line
>196ebe		98 6e				                    .word <>ANSI_INVALID    ; 'F' -- CPL -- Cursor Previous Line
>196ec0		98 6e				                    .word <>ANSI_INVALID    ; 'G' -- CHA -- Cursor Horizontal Absolute
>196ec2		d5 6f				                    .word <>ANSI_CUP        ; 'H' -- CUP -- Cursor Position
>196ec4		98 6e				                    .word <>ANSI_INVALID    ; 'I'
>196ec6		54 71				                    .word <>ANSI_ED         ; 'J' -- ED -- Erase In Display
>196ec8		97 71				                    .word <>ANSI_EL         ; 'K' -- EL -- Erase In Line
>196eca		98 6e				                    .word <>ANSI_INVALID    ; 'L'
>196ecc		98 6e				                    .word <>ANSI_INVALID    ; 'M'
>196ece		98 6e				                    .word <>ANSI_INVALID    ; 'N'
>196ed0		98 6e				                    .word <>ANSI_INVALID    ; 'O'
>196ed2		2c 72				                    .word <>ANSI_DCH        ; 'P' -- DCH -- Delete Character
>196ed4		98 6e				                    .word <>ANSI_INVALID    ; 'Q'
>196ed6		98 6e				                    .word <>ANSI_INVALID    ; 'R'
>196ed8		98 6e				                    .word <>ANSI_INVALID    ; 'S' -- SU -- Scroll Up
>196eda		98 6e				                    .word <>ANSI_INVALID    ; 'T' -- SD -- Scroll Down
>196edc		98 6e				                    .word <>ANSI_INVALID    ; 'U'
>196ede		98 6e				                    .word <>ANSI_INVALID    ; 'V'
>196ee0		98 6e				                    .word <>ANSI_INVALID    ; 'W'
>196ee2		98 6e				                    .word <>ANSI_INVALID    ; 'X'
>196ee4		98 6e				                    .word <>ANSI_INVALID    ; 'Y'
>196ee6		98 6e				                    .word <>ANSI_INVALID    ; 'Z'
.196ee8						ANSI_ANSI_LOWER
.196ee8		08		php		                    PHP
.196ee9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196eeb		64 1e		stz $033e	                    STZ #S_ANSI_VARS.STATE,D    ; We'll always reset to the initial state
.196eed		38		sec		                    SEC
.196eee		e9 61		sbc #$61	                    SBC #'a'
.196ef0		0a		asl a		                    ASL A
.196ef1		aa		tax		                    TAX
.196ef2		fc f7 6e	jsr ($196ef7,x)	                    JSR (ansi_table,X)
.196ef5		28		plp		                    PLP
.196ef6		6b		rtl		                    RTL
>196ef7		98 6e				ansi_table          .word <>ANSI_INVALID    ; 'a'
>196ef9		98 6e				                    .word <>ANSI_INVALID    ; 'b'
>196efb		98 6e				                    .word <>ANSI_INVALID    ; 'c'
>196efd		98 6e				                    .word <>ANSI_INVALID    ; 'd'
>196eff		98 6e				                    .word <>ANSI_INVALID    ; 'e'
>196f01		98 6e				                    .word <>ANSI_INVALID    ; 'f' -- HVP -- Horizontal Vertical Position
>196f03		98 6e				                    .word <>ANSI_INVALID    ; 'g'
>196f05		ee 6f				                    .word <>ANSI_SET_MODE   ; 'h'
>196f07		98 6e				                    .word <>ANSI_INVALID    ; 'i'
>196f09		98 6e				                    .word <>ANSI_INVALID    ; 'j'
>196f0b		98 6e				                    .word <>ANSI_INVALID    ; 'k'
>196f0d		2b 70				                    .word <>ANSI_RESET_MODE ; 'l'
>196f0f		68 70				                    .word <>ANSI_SGR        ; 'm' -- SGR -- Select Graphics Rendition
>196f11		98 6e				                    .word <>ANSI_INVALID    ; 'n'
>196f13		98 6e				                    .word <>ANSI_INVALID    ; 'o'
>196f15		98 6e				                    .word <>ANSI_INVALID    ; 'p'
>196f17		98 6e				                    .word <>ANSI_INVALID    ; 'q'
>196f19		98 6e				                    .word <>ANSI_INVALID    ; 'r'
>196f1b		98 6e				                    .word <>ANSI_INVALID    ; 's'
>196f1d		98 6e				                    .word <>ANSI_INVALID    ; 't'
>196f1f		98 6e				                    .word <>ANSI_INVALID    ; 'u'
>196f21		98 6e				                    .word <>ANSI_INVALID    ; 'v'
>196f23		98 6e				                    .word <>ANSI_INVALID    ; 'w'
>196f25		98 6e				                    .word <>ANSI_INVALID    ; 'x'
>196f27		98 6e				                    .word <>ANSI_INVALID    ; 'y'
>196f29		98 6e				                    .word <>ANSI_INVALID    ; 'z'
.196f2b						ANSI_PR_CONTROL
.196f2b		08		php		                    PHP
.196f2c		e2 20		sep #$20	                SEP #$20        ; set A short
.196f2e		c2 10		rep #$10	                REP #$10        ; set X long
.196f30		c9 0d		cmp #$0d	                    CMP #CHAR_CR                ; Handle carriage return
.196f32		f0 12		beq $196f46	                    BEQ do_cr
.196f34		c9 0a		cmp #$0a	                    CMP #CHAR_LF                ; Handle line feed
.196f36		f0 1a		beq $196f52	                    BEQ do_lf
.196f38		c9 08		cmp #$08	                    CMP #CHAR_BS                ; Handle back space
.196f3a		f0 1c		beq $196f58	                    BEQ do_bs
.196f3c		c9 09		cmp #$09	                    CMP #CHAR_TAB               ; Handle TAB
.196f3e		f0 1e		beq $196f5e	                    BEQ do_tab
.196f40		22 74 6f 19	jsl $196f74	                    JSL ANSI_PUTRAWC            ; Otherwise, just print it raw and wriggling!
.196f44		80 2c		bra $196f72	                    BRA done
.196f46		a2 00 00	ldx #$0000	do_cr               LDX #0                      ; Move to the beginning of the next line
.196f49		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196f4b		c8		iny		                    INY
.196f4c		22 05 73 19	jsl $197305	                    JSL ANSI_LOCATE
.196f50		80 20		bra $196f72	                    BRA done
.196f52		22 e2 72 19	jsl $1972e2	do_lf               JSL ANSI_CSRDOWN            ; Move the cursor down a line
.196f56		80 1a		bra $196f72	                    BRA done
.196f58		22 a6 72 19	jsl $1972a6	do_bs               JSL ANSI_CSRLEFT            ; Move the cursor to the left (TODO: delete to the left?)
.196f5c		80 14		bra $196f72	                    BRA done
.196f5e						do_tab
.196f5e		c2 30		rep #$30	                REP #$30        ; set A&X long
.196f60		a5 0e		lda $032e	                    LDA #S_ANSI_VARS.CURSORX,D  ; Move to the next power 8th column
.196f62		29 f8 ff	and #$fff8	                    AND #$FFF8
.196f65		18		clc		                    CLC
.196f66		69 08 00	adc #$0008	                    ADC #$0008
.196f69		aa		tax		                    TAX
.196f6a		e2 20		sep #$20	                SEP #$20        ; set A short
.196f6c		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.196f6e		22 05 73 19	jsl $197305	                    JSL ANSI_LOCATE
.196f72		28		plp		done                PLP
.196f73		6b		rtl		                    RTL
.196f74						ANSI_PUTRAWC
.196f74		da		phx		                    PHX
.196f75		5a		phy		                    PHY
.196f76		0b		phd		                    PHD
.196f77		08		php		                    PHP
.196f78		e2 20		sep #$20	                SEP #$20        ; set A short
.196f7a		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE              ; Look at the current output channel and point
.196f7e		b0 0a		bcs $196f8a	                    BCS done                        ; If invalid, just return
.196f80		87 0b		sta [$032b]	                    STA [#S_ANSI_VARS.CURSORPOS,D]  ; Save the character on the screen
.196f82		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Set the color based on CURCOLOR
.196f84		87 13		sta [$0333]	                    STA [#S_ANSI_VARS.COLORPOS,D]
.196f86		22 7b 72 19	jsl $19727b	                    JSL ANSI_CSRRIGHT              ; And advance the cursor
.196f8a		28		plp		done                PLP
.196f8b		2b		pld		                    PLD
.196f8c		7a		ply		                    PLY
.196f8d		fa		plx		                    PLX
.196f8e		6b		rtl		                    RTL
.196f8f						ANSI_CUU
.196f8f		08		php		                    PHP
.196f90		e2 20		sep #$20	                SEP #$20        ; set A short
.196f92		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196f94		1a		inc a		                    INC A
.196f95		a9 01		lda #$01	default             LDA #1                          ; Otherwise: treat it as 1
.196f97		48		pha		loop                PHA                             ; Save the count
.196f98		22 c4 72 19	jsl $1972c4	                    JSL ANSI_CSRUP                  ; Cursor Up
.196f9c		68		pla		                    PLA                             ; Restore the count
.196f9d		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196f9e		d0 f7		bne $196f97	                    BNE loop
.196fa0		28		plp		                    PLP
.196fa1		60		rts		                    RTS
.196fa2						ANSI_CUD
.196fa2		08		php		                    PHP
.196fa3		e2 20		sep #$20	                SEP #$20        ; set A short
.196fa5		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fa7		1a		inc a		                    INC A
.196fa8		48		pha		loop                PHA                             ; Save the count
.196fa9		22 e2 72 19	jsl $1972e2	                    JSL ANSI_CSRDOWN                ; Cursor Down
.196fad		68		pla		                    PLA                             ; Restore the count
.196fae		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196faf		d0 f7		bne $196fa8	                    BNE loop
.196fb1		28		plp		                    PLP
.196fb2		60		rts		                    RTS
.196fb3						ANSI_CUF
.196fb3		08		php		                    PHP
.196fb4		e2 20		sep #$20	                SEP #$20        ; set A short
.196fb6		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fb8		1a		inc a		                    INC A
.196fb9		48		pha		loop                PHA                             ; Save the count
.196fba		22 7b 72 19	jsl $19727b	                    JSL ANSI_CSRRIGHT               ; Cursor right
.196fbe		68		pla		                    PLA                             ; Restore the count
.196fbf		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fc0		d0 f7		bne $196fb9	                    BNE loop
.196fc2		28		plp		                    PLP
.196fc3		60		rts		                    RTS
.196fc4						ANSI_CUB
.196fc4		08		php		                    PHP
.196fc5		e2 20		sep #$20	                SEP #$20        ; set A short
.196fc7		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fc9		1a		inc a		                    INC A
.196fca		48		pha		loop                PHA                             ; Save the count
.196fcb		22 a6 72 19	jsl $1972a6	                    JSL ANSI_CSRLEFT                ; Cursor left
.196fcf		68		pla		                    PLA                             ; Restore the count
.196fd0		3a		dec a		                    DEC A                           ; Count down and repeat if not done
.196fd1		d0 f7		bne $196fca	                    BNE loop
.196fd3		28		plp		                    PLP
.196fd4		60		rts		                    RTS
.196fd5						ANSI_CUP
.196fd5		08		php		                    PHP
.196fd6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196fd8		a6 21		ldx $0341	                    LDX #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196fda		d0 02		bne $196fde	                    BNE get_row
.196fdc		a2 01		ldx #$01	                    LDX #1                          ; Default to 1
.196fde		a4 22		ldy $0342	get_row             LDY #S_ANSI_VARS.ARG1,D         ; Get the second argument
.196fe0		d0 02		bne $196fe4	                    BNE adjust_coords
.196fe2		a0 01		ldy #$01	                    LDY #1                          ; Default to 1
.196fe4		ca		dex		adjust_coords       DEX                             ; Translate from base 1 to base 0 coordinates
.196fe5		88		dey		                    DEY
.196fe6		c2 30		rep #$30	                REP #$30        ; set A&X long
.196fe8		22 05 73 19	jsl $197305	                    JSL ANSI_LOCATE                 ; Set the cursor position
.196fec		28		plp		                    PLP
.196fed		60		rts		                    RTS
.196fee						ANSI_SET_MODE
.196fee		08		php		                    PHP
.196fef		e2 30		sep #$30	                SEP #$30        ; set A&X short
.196ff1		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.196ff3		c9 19		cmp #$19	                    CMP #25
.196ff5		d0 24		bne $19701b	                    BNE chk_break
.196ff7		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.196ffb		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.196ffd		d0 0c		bne $19700b	                    BNE check_evid
.196fff		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.197003		09 01		ora #$01	                    ORA #Vky_Cursor_Enable
.197005		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.197009		80 1e		bra $197029	                    BRA done
.19700b		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.19700d		d0 1a		bne $197029	                    BNE done
.19700f		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.197013		09 01		ora #$01	                    ORA #EVID_Cursor_Enable
.197015		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.197019		80 0e		bra $197029	                    BRA done
.19701b		c9 1c		cmp #$1c	chk_break           CMP #28
.19701d		d0 0a		bne $197029	                    BNE done
.19701f		22 bb 77 19	jsl $1977bb	                    JSL KBD_GET_CONTROL
.197023		09 80		ora #$80	                    ORA #KBD_CTRL_BREAK
.197025		22 ce 77 19	jsl $1977ce	                    JSL KBD_SET_CONTROL
.197029		28		plp		done                PLP
.19702a		60		rts		                    RTS
.19702b						ANSI_RESET_MODE
.19702b		08		php		                    PHP
.19702c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19702e		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.197030		c9 19		cmp #$19	                    CMP #25
.197032		d0 24		bne $197058	                    BNE chk_break
.197034		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                 ; Check to see if we're going to screen 0
.197038		c9 00		cmp #$00	                    CMP #CHAN_CONSOLE
.19703a		d0 0c		bne $197048	                    BNE check_evid
.19703c		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG  ; Yes: enable screen 0's cursor
.197040		29 fe		and #$fe	                    AND #~Vky_Cursor_Enable
.197042		af 10 00 af	lda $af0010	                    LDA @l VKY_TXT_CURSOR_CTRL_REG
.197046		80 1e		bra $197066	                    BRA done
.197048		c9 04		cmp #$04	check_evid          CMP #CHAN_EVID                  ; Check to see if we're going to screen 1
.19704a		d0 1a		bne $197066	                    BNE done
.19704c		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG ; Yes: enable screen 1's cursor
.197050		29 fe		and #$fe	                    AND #~EVID_Cursor_Enable
.197052		af 10 1e ae	lda $ae1e10	                    LDA @l EVID_TXT_CURSOR_CTRL_REG
.197056		80 0e		bra $197066	                    BRA done
.197058		c9 1c		cmp #$1c	chk_break           CMP #28
.19705a		d0 0a		bne $197066	                    BNE done
.19705c		22 bb 77 19	jsl $1977bb	                    JSL KBD_GET_CONTROL
.197060		29 7f		and #$7f	                    AND #~KBD_CTRL_BREAK
.197062		22 ce 77 19	jsl $1977ce	                    JSL KBD_SET_CONTROL
.197066		28		plp		done                PLP
.197067		60		rts		                    RTS
.197068						ANSI_SGR
.197068		08		php		                    PHP
.197069		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19706b		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19706d		d0 0d		bne $19707c	                    BNE chk_1
.19706f		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR             ; 0 ==> Return to the default colors
.197071		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197073		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Switch off inversion
.197075		29 3f		and #$3f	                    AND #~(CONTROL_INVERT | CONTROL_BOLD)
.197077		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.197079		82 d6 00	brl $197152	                    BRL done
.19707c		c9 01		cmp #$01	chk_1               CMP #1
.19707e		d0 0f		bne $19708f	                    BNE chk_2
.197080		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D     ; Make the current color bold
.197082		09 80		ora #$80	                    ORA #$80
.197084		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197086		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be bold
.197088		09 40		ora #$40	                    ORA #CONTROL_BOLD
.19708a		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.19708c		82 c3 00	brl $197152	                    BRL done
.19708f		c9 02		cmp #$02	chk_2               CMP #2
.197091		f0 04		beq $197097	                    BEQ normal_intensity
.197093		c9 16		cmp #$16	chk_22              CMP #22
.197095		d0 0f		bne $1970a6	                    BNE chk_7
.197097		a5 12		lda $0332	normal_intensity    LDA #S_ANSI_VARS.CURCOLOR,D     ; 2 ==> Set the foreground to normal intensity
.197099		29 7f		and #$7f	                    AND #~$80
.19709b		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19709d		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Flag that text should be normal
.19709f		29 bf		and #$bf	                    AND #~CONTROL_BOLD
.1970a1		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970a3		82 ac 00	brl $197152	                    BRL done
.1970a6		c9 07		cmp #$07	chk_7               CMP #7
.1970a8		d0 2c		bne $1970d6	                    BNE chk_27
.1970aa		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors already inverted?
.1970ac		89 80		bit #$80	                    BIT #CONTROL_INVERT
.1970ae		f0 03		beq $1970b3	                    BEQ invert_on
.1970b0		82 9f 00	brl $197152	                    BRL done                        ; Yes: just finish
.1970b3		09 80		ora #$80	invert_on           ORA #CONTROL_INVERT             ; No: Mark that the colors are inverted
.1970b5		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970b7		a5 12		lda $0332	swap_colors         LDA #S_ANSI_VARS.CURCOLOR,D     ; Exchange the upper and lower nibbles
.1970b9		0a		asl a		                    ASL  A
.1970ba		69 80		adc #$80	                    ADC  #$80
.1970bc		2a		rol a		                    ROL  A
.1970bd		0a		asl a		                    ASL  A
.1970be		69 80		adc #$80	                    ADC  #$80
.1970c0		2a		rol a		                    ROL  A
.1970c1		29 f7		and #$f7	                    AND #%11110111                  ; Make sure the background is not bolded
.1970c3		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970c5		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.1970c7		89 40		bit #$40	                    BIT #CONTROL_BOLD
.1970c9		d0 03		bne $1970ce	                    BNE bold_on
.1970cb		82 84 00	brl $197152	                    BRL done                        ; No: we're done
.1970ce		a5 12		lda $0332	bold_on             LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.1970d0		09 80		ora #$80	                    ORA #$80
.1970d2		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970d4		80 7c		bra $197152	                    BRA done
.1970d6		c9 1b		cmp #$1b	chk_27              CMP #27
.1970d8		d0 0c		bne $1970e6	                    BNE chk_39
.1970da		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Are the colors inverted?
.1970dc		89 80		bit #$80	                    BIT #CONTROL_INVERT
.1970de		f0 72		beq $197152	                    BEQ done                        ; No: just finish
.1970e0		29 7f		and #$7f	                    AND #~CONTROL_INVERT            ; Yes: Mark that the colors are back to normal
.1970e2		85 1f		sta $033f	                    STA #S_ANSI_VARS.CONTROL,D
.1970e4		80 d1		bra $1970b7	                    BRA swap_colors                 ; And go swap the colors
.1970e6		c9 27		cmp #$27	chk_39              CMP #39
.1970e8		d0 10		bne $1970fa	                    BNE chk_49
.1970ea		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1970ec		29 0f		and #$0f	                    AND #$0F
.1970ee		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970f0		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.1970f2		29 f0		and #$f0	                    AND #$F0
.1970f4		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.1970f6		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.1970f8		80 58		bra $197152	                    BRA done
.1970fa		c9 31		cmp #$31	chk_49              CMP #49
.1970fc		d0 10		bne $19710e	                    BNE chk_foreground
.1970fe		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197100		29 f0		and #$f0	                    AND #$F0
.197102		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197104		a9 70		lda #$70	                    LDA #ANSI_DEF_COLOR
.197106		29 0f		and #$0f	                    AND #$0F
.197108		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.19710a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19710c		80 44		bra $197152	                    BRA done
.19710e		c9 1e		cmp #$1e	chk_foreground      CMP #30                         ; If [30..37], set the foreground color
.197110		90 29		bcc $19713b	                    BLT chk_background
.197112		c9 26		cmp #$26	                    CMP #38
.197114		b0 25		bcs $19713b	                    BGE chk_background
.197116		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197118		29 0f		and #$0f	                    AND #$0F
.19711a		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.19711c		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.19711e		38		sec		                    SEC
.19711f		e9 1e		sbc #$1e	                    SBC #30
.197121		0a		asl a		                    ASL A
.197122		0a		asl a		                    ASL A
.197123		0a		asl a		                    ASL A
.197124		0a		asl a		                    ASL A
.197125		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.197127		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197129		a5 1f		lda $033f	                    LDA #S_ANSI_VARS.CONTROL,D      ; Should the color be bold?
.19712b		89 40		bit #$40	                    BIT #CONTROL_BOLD
.19712d		d0 03		bne $197132	                    BNE bold_fore                   ; No: we're done
.19712f		82 20 00	brl $197152	                    BRL done
.197132		a5 12		lda $0332	bold_fore           LDA #S_ANSI_VARS.CURCOLOR,D     ; Yes: make the foreground bold
.197134		09 80		ora #$80	                    ORA #$80
.197136		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197138		82 17 00	brl $197152	                    BRL done
.19713b		c9 28		cmp #$28	chk_background      CMP #40                         ; If [40..47], set the background color
.19713d		90 13		bcc $197152	                    BLT done
.19713f		c9 30		cmp #$30	                    CMP #48
.197141		b0 0f		bcs $197152	                    BGE done
.197143		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197145		29 f0		and #$f0	                    AND #$F0
.197147		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197149		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.19714b		38		sec		                    SEC
.19714c		e9 28		sbc #$28	                    SBC #40
.19714e		05 12		ora $0332	                    ORA #S_ANSI_VARS.CURCOLOR,D
.197150		85 12		sta $0332	                    STA #S_ANSI_VARS.CURCOLOR,D
.197152		28		plp		done                PLP
.197153		60		rts		                    RTS
.197154						ANSI_ED
.197154		5a		phy		                    PHY
.197155		08		php		                    PHP
.197156		e2 20		sep #$20	                SEP #$20        ; set A short
.197158		c2 10		rep #$10	                REP #$10        ; set X long
.19715a		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D         ; Get the first argument
.19715c		d0 0f		bne $19716d	                    BNE not_0                       ; Is the code 0?
.19715e						code_0
.19715e		a9 20		lda #$20	                    LDA #' '
.197160		a4 17		ldy $0337	                    LDY #CURSORPOS,D                ; Start with the cursor's position
.197162		97 0c		sta [$032c],y	code_0_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.197164		c8		iny		                    INY                             ; Go to the next position
.197165		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.197168		d0 f8		bne $197162	                    BNE code_0_loop                 ; No: keep going
.19716a		82 27 00	brl $197194	                    BRL done
.19716d		c9 01		cmp #$01	not_0               CMP #1                          ; Is the code 1?
.19716f		d0 0e		bne $19717f	                    BNE not_1
.197171						code_1
.197171		a9 20		lda #$20	                    LDA #' '
.197173		a4 17		ldy $0337	                    LDY #CURSORPOS,D                ; Start with the cursor's position
.197175		97 0c		sta [$032c],y	code_1_loop         STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.197177		88		dey		                    DEY                             ; Go to the previous position
.197178		d0 fb		bne $197175	                    BNE code_1_loop
.19717a		97 0c		sta [$032c],y	                    STA [#SCREENBEGIN,D],Y          ; Clear the first cell
.19717c		82 15 00	brl $197194	                    BRL done
.19717f		c9 02		cmp #$02	not_1               CMP #2                          ; Is the code 2 or 3?
.197181		f0 04		beq $197187	                    BEQ code_2_3
.197183		c9 03		cmp #$03	                    CMP #3
.197185		d0 0d		bne $197194	                    BNE done                        ; No: just ignore the sequence
.197187						code_2_3
.197187		a9 20		lda #$20	                    LDA #' '
.197189		a0 00 00	ldy #$0000	                    LDY #0                          ; Start with the cursor's position
.19718c		97 0c		sta [$032c],y	code_2_3_loop       STA [#SCREENBEGIN,D],Y          ; Clear the text cell
.19718e		c8		iny		                    INY                             ; Go to the next position
.19718f		c0 00 20	cpy #$2000	                    CPY #$2000                      ; Have we reached the end?
.197192		d0 ce		bne $197162	                    BNE code_0_loop                 ; No: keep going
.197194		28		plp		done                PLP
.197195		7a		ply		                    PLY
.197196		60		rts		                    RTS
.197197						ANSI_EL
.197197		da		phx		                    PHX
.197198		5a		phy		                    PHY
.197199		08		php		                    PHP
.19719a		c2 30		rep #$30	                REP #$30        ; set A&X long
.19719c		38		sec		                    SEC
.19719d		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D        ; Compute the address of the first character of the line
.19719f		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.1971a1		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1971a3		e2 20		sep #$20	                SEP #$20        ; set A short
.1971a5		a5 02		lda $0322	                    LDA #S_ANSI_VARS.SCREENBEGIN+2,D    ; Get the bank of the screen
.1971a7		85 1b		sta $033b	                    STA #S_ANSI_VARS.TMPPTR1+2,D        ; And put it in the TMPPTR1
.1971a9		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Get the first argument
.1971ab		d0 0e		bne $1971bb	                    BNE not_0                           ; Is the code 0?
.1971ad						code_0
.1971ad		a9 20		lda #$20	                    LDA #' '
.1971af		a4 0e		ldy $032e	                    LDY #S_ANSI_VARS.CURSORX,D          ; Start at the cursor position
.1971b1		97 19		sta [$0339],y	code_0_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1971b3		c8		iny		                    INY
.1971b4		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.1971b6		d0 f9		bne $1971b1	                    BNE code_0_loop                     ; No: keep looping
.1971b8		82 29 00	brl $1971e4	                    BRL done
.1971bb		c9 01		cmp #$01	not_0               CMP #1                              ; Is the code 1?
.1971bd		d0 11		bne $1971d0	                    BNE not_1
.1971bf						code_1
.1971bf		a9 20		lda #$20	                    LDA #' '
.1971c1		a0 00 00	ldy #$0000	                    LDY #0
.1971c4		97 19		sta [$0339],y	code_1_loop         STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1971c6		c8		iny		                    INY
.1971c7		c4 0e		cpy $032e	                    CPY #S_ANSI_VARS.CURSORX,D          ; Have we reached the cursor?
.1971c9		d0 f9		bne $1971c4	                    BNE code_1_loop                     ; No: keep looping
.1971cb		97 19		sta [$0339],y	                    STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; And clear under the cursor
.1971cd		82 14 00	brl $1971e4	                    BRL done
.1971d0		c9 02		cmp #$02	not_1               CMP #2                              ; Is the code 2 or 3?
.1971d2		f0 04		beq $1971d8	                    BEQ code_2_3
.1971d4		c9 03		cmp #$03	                    CMP #3
.1971d6		d0 0c		bne $1971e4	                    BNE done                            ; No: just ignore the sequence
.1971d8						code_2_3
.1971d8		a9 20		lda #$20	                    LDA #' '
.1971da		a0 00 00	ldy #$0000	                    LDY #0
.1971dd		97 19		sta [$0339],y	code_2_3_loop       STA [#S_ANSI_VARS.TMPPTR1,D],Y      ; Clear the text cell
.1971df		c8		iny		                    INY
.1971e0		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D    ; Have we reached the end of the line?
.1971e2		d0 f9		bne $1971dd	                    BNE code_2_3_loop                   ; No: keep looping
.1971e4		28		plp		done                PLP
.1971e5		7a		ply		                    PLY
.1971e6		fa		plx		                    PLX
.1971e7		60		rts		                    RTS
.1971e8						ANSI_ICH
.1971e8		5a		phy		                    PHY
.1971e9		08		php		                    PHP
.1971ea		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1971ec		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.1971ee		f0 04		beq $1971f4	                    BEQ default_1                       ; If 0, default to 1
.1971f0		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.1971f2		d0 04		bne $1971f8	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.1971f4		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.1971f6		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.1971f8		38		sec		calc_src_dest       SEC
.1971f9		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D     ; TMPPTR1 := COLS_VISIBLE - CURSORX (destination index)
.1971fb		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.1971fd		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1971ff		38		sec		                    SEC
.197200		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D             ; TMPPTR1+1 := TMPPTR1 - n (source index)
.197202		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D
.197204		a4 1a		ldy $033a	insert_loop         LDY #S_ANSI_VARS.TMPPTR1+1,D        ; text[dest] := text[source]
.197206		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.197208		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.19720a		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.19720c		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D        ; color[dest] := color[source]
.19720e		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.197210		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D
.197212		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.197214		c6 19		dec $0339	                    DEC #S_ANSI_VARS.TMPPTR1,D          ; Move to the previous position
.197216		c6 1a		dec $033a	                    DEC #S_ANSI_VARS.TMPPTR1+1,D
.197218		10 ea		bpl $197204	                    BPL insert_loop                     ; Keep looping until we reach the end
.19721a		a0 00		ldy #$00	                    LDY #0
.19721c		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.19721e		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197220		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197222		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.197224		c8		iny		                    INY                                 ; Move to the next byte
.197225		c4 21		cpy $0341	                    CPY #S_ANSI_VARS.ARG0,D             ; Until we reach the end
.197227		d0 f3		bne $19721c	                    BNE fill_loop
.197229		28		plp		                    PLP
.19722a		7a		ply		                    PLY
.19722b		60		rts		                    RTS
.19722c						ANSI_DCH
.19722c		5a		phy		                    PHY
.19722d		08		php		                    PHP
.19722e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197230		a5 20		lda $0340	                    LDA #S_ANSI_VARS.ARGC,D             ; Check how many arguments were passed
.197232		f0 04		beq $197238	                    BEQ default_1                       ; If 0, default to 1
.197234		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D             ; Check the argument
.197236		d0 04		bne $19723c	                    BNE calc_src_dest                   ; If not 0, start calculating the indexes
.197238		a9 01		lda #$01	default_1           LDA #1                              ; Default the insert count to 1
.19723a		85 21		sta $0341	                    STA #S_ANSI_VARS.ARG0,D
.19723c		a9 00		lda #$00	calc_src_dest       LDA #0
.19723e		85 1a		sta $033a	                    STA #S_ANSI_VARS.TMPPTR1+1,D        ; TMPPTR+1 := 0 (destination)
.197240		a5 21		lda $0341	                    LDA #S_ANSI_VARS.ARG0,D
.197242		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D          ; TMPPTR+1 := n (source)
.197244		38		sec		                    SEC                                 ; Calculate end offset
.197245		a5 03		lda $0323	                    LDA #S_ANSI_VARS.COLS_VISIBLE,D
.197247		e5 0e		sbc $032e	                    SBC #S_ANSI_VARS.CURSORX,D
.197249		85 22		sta $0342	                    STA #S_ANSI_VARS.ARG1,D
.19724b		a4 19		ldy $0339	del_loop            LDY #S_ANSI_VARS.TMPPTR1,D          ; text[dest] := text[source]
.19724d		b7 0b		lda [$032b],y	                    LDA [#S_ANSI_VARS.CURSORPOS,D],Y
.19724f		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.197251		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.197253		a4 19		ldy $0339	                    LDY #S_ANSI_VARS.TMPPTR1,D          ; color[dest] := color[source]
.197255		b7 13		lda [$0333],y	                    LDA [#S_ANSI_VARS.COLORPOS,D],Y
.197257		a4 1a		ldy $033a	                    LDY #S_ANSI_VARS.TMPPTR1+1,D
.197259		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y
.19725b		e6 19		inc $0339	                    INC #S_ANSI_VARS.TMPPTR1,D          ; Move to the next position
.19725d		e6 1a		inc $033a	                    INC #S_ANSI_VARS.TMPPTR1+1,D
.19725f		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.197261		c5 22		cmp $0342	                    CMP #S_ANSI_VARS.ARG1,D
.197263		90 e6		bcc $19724b	                    BLT del_loop                        ; Keep looping until we reach the end
.197265		38		sec		                    SEC                                 ; Calculate the starting point to fill with blanks
.197266		a5 1a		lda $033a	                    LDA #S_ANSI_VARS.TMPPTR1+1,D
.197268		e5 21		sbc $0341	                    SBC #S_ANSI_VARS.ARG0,D
.19726a		a8		tay		                    TAY
.19726b		a9 20		lda #$20	fill_loop           LDA #CHAR_SP                        ; Replace the character with a space
.19726d		97 0b		sta [$032b],y	                    STA [#S_ANSI_VARS.CURSORPOS,D],Y
.19726f		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.197271		97 13		sta [$0333],y	                    STA [#S_ANSI_VARS.COLORPOS,D],Y     ; In the default color
.197273		c8		iny		                    INY                                 ; Move to the next byte
.197274		c4 22		cpy $0342	                    CPY #S_ANSI_VARS.ARG1,D             ; Until we reach the end
.197276		90 f3		bcc $19726b	                    BLT fill_loop
.197278		28		plp		                    PLP
.197279		7a		ply		                    PLY
.19727a		60		rts		                    RTS
.19727b						ANSI_CSRRIGHT
.19727b		da		phx		                    PHX
.19727c		5a		phy		                    PHY
.19727d		0b		phd		                    PHD
.19727e		08		php		                    PHP
.19727f		c2 30		rep #$30	                REP #$30        ; set A&X long
.197281		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.197285		b0 1a		bcs $1972a1	                    BCS done                            ; If invalid, just return
.197287		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the new column
.197289		e8		inx		                    INX
.19728a		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the current row
.19728c		e4 03		cpx $0323	                    CPX #S_ANSI_VARS.COLS_VISIBLE,D     ; Are we off screen?
.19728e		90 0d		bcc $19729d	                    BCC nowrap                          ; No: just set the position
.197290		a2 00 00	ldx #$0000	                    LDX #0                              ; Yes: move to the first column
.197293		c8		iny		                    INY                                 ; And move to the next row
.197294		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Are we still off screen?
.197296		90 05		bcc $19729d	                    BCC nowrap                          ; No: just set the position
.197298		88		dey		                    DEY                                 ; Yes: lock to the last row
.197299		22 69 73 19	jsl $197369	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.19729d		22 05 73 19	jsl $197305	nowrap              JSL ANSI_LOCATE                     ; Set the cursor position
.1972a1		28		plp		done                PLP
.1972a2		2b		pld		                    PLD
.1972a3		7a		ply		                    PLY
.1972a4		fa		plx		                    PLX
.1972a5		6b		rtl		                    RTL
.1972a6						ANSI_CSRLEFT
.1972a6		da		phx		                    PHX
.1972a7		5a		phy		                    PHY
.1972a8		0b		phd		                    PHD
.1972a9		08		php		                    PHP
.1972aa		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972ac		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1972b0		b0 0d		bcs $1972bf	                    BCS done                    ; If invalid, just return
.1972b2		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D  ; Check that we are not already @ Zero
.1972b4		f0 09		beq $1972bf	                    BEQ done                    ; If so, just ignore this call
.1972b6		ca		dex		                    DEX
.1972b7		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.1972b9		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.1972bb		22 05 73 19	jsl $197305	                    JSL ANSI_LOCATE
.1972bf		28		plp		done                PLP
.1972c0		2b		pld		                    PLD
.1972c1		7a		ply		                    PLY
.1972c2		fa		plx		                    PLX
.1972c3		6b		rtl		                    RTL
.1972c4						ANSI_CSRUP
.1972c4		da		phx		                    PHX
.1972c5		5a		phy		                    PHY
.1972c6		0b		phd		                    PHD
.1972c7		08		php		                    PHP
.1972c8		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972ca		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.1972ce		b0 0d		bcs $1972dd	                    BCS done                    ; If invalid, just return
.1972d0		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D  ; Check if we are not already @ Zero
.1972d2		f0 09		beq $1972dd	                    BEQ done                    ; If we are, just ignore the call
.1972d4		88		dey		                    DEY
.1972d5		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.1972d7		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D
.1972d9		22 05 73 19	jsl $197305	                    JSL ANSI_LOCATE
.1972dd		28		plp		done                PLP
.1972de		2b		pld		                    PLD
.1972df		7a		ply		                    PLY
.1972e0		fa		plx		                    PLX
.1972e1		6b		rtl		                    RTL
.1972e2						ANSI_CSRDOWN
.1972e2		da		phx		                    PHX
.1972e3		5a		phy		                    PHY
.1972e4		0b		phd		                    PHD
.1972e5		08		php		                    PHP
.1972e6		c2 30		rep #$30	                REP #$30        ; set A&X long
.1972e8		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.1972ec		b0 12		bcs $197300	                    BCS done                            ; If invalid, just return
.1972ee		a6 0e		ldx $032e	                    LDX #S_ANSI_VARS.CURSORX,D          ; Get the current column
.1972f0		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D          ; Get the new row
.1972f2		c8		iny		                    INY
.1972f3		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D    ; Check to see if we're off screen
.1972f5		90 05		bcc $1972fc	                    BCC noscroll                        ; No: go ahead and set the position
.1972f7		88		dey		                    DEY                                 ; Yes: go back to the last row
.1972f8		22 69 73 19	jsl $197369	                    JSL ANSI_SCROLLUP                   ; But scroll the screen up
.1972fc		22 05 73 19	jsl $197305	noscroll            JSL ANSI_LOCATE                     ; And set the cursor position
.197300		28		plp		done                PLP
.197301		2b		pld		                    PLD
.197302		7a		ply		                    PLY
.197303		fa		plx		                    PLX
.197304		6b		rtl		                    RTL
.197305						ANSI_LOCATE
.197305		da		phx		                    PHX
.197306		5a		phy		                    PHY
.197307		0b		phd		                    PHD
.197308		08		php		                    PHP
.197309		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.19730d		b0 55		bcs $197364	                    BCS done                    ; If invalid, just return
.19730f		c2 30		rep #$30	                REP #$30        ; set A&X long
.197311						locate_scroll
.197311		c4 07		cpy $0327	                    CPY #S_ANSI_VARS.LINES_VISIBLE,D
.197313		90 07		bcc $19731c	                    BCC locate_scrolldone
.197315		22 69 73 19	jsl $197369	                    JSL ANSI_SCROLLUP
.197319		88		dey		                    DEY
.19731a		80 f5		bra $197311	                    BRA locate_scroll
.19731c						locate_scrolldone
.19731c		86 0e		stx $032e	                    STX #S_ANSI_VARS.CURSORX,D
.19731e		84 10		sty $0330	                    STY #S_ANSI_VARS.CURSORY,D
.197320		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.197322						locate_row
.197322		c0 00 00	cpy #$0000	                    CPY #$0
.197325		f0 08		beq $19732f	                    BEQ locate_right
.197327		18		clc		locate_down         CLC
.197328		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.19732a		88		dey		                    DEY
.19732b		f0 02		beq $19732f	                    BEQ locate_right
.19732d		80 f8		bra $197327	                    BRA locate_down
.19732f		18		clc		locate_right        CLC
.197330		65 0e		adc $032e	                    ADC #S_ANSI_VARS.CURSORX,D      ; move the cursor right X columns
.197332		85 0b		sta $032b	                    STA #S_ANSI_VARS.CURSORPOS,D
.197334		a4 10		ldy $0330	                    LDY #S_ANSI_VARS.CURSORY,D
.197336		e2 20		sep #$20	                SEP #$20        ; set A short
.197338		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT
.19733c		c9 04		cmp #$04	                    CMP #CHAN_EVID
.19733e		f0 0e		beq $19734e	                    beq locate_evid
.197340		c2 20		rep #$20	                REP #$20        ; set A long
.197342		98		tya		                    TYA
.197343		8f 16 00 af	sta $af0016	                    STA @l VKY_TXT_CURSOR_Y_REG_L
.197347		8a		txa		                    TXA
.197348		8f 14 00 af	sta $af0014	                    STA @l VKY_TXT_CURSOR_X_REG_L
.19734c		80 0c		bra $19735a	                    BRA update_colorpos
.19734e						locate_evid
.19734e		c2 20		rep #$20	                REP #$20        ; set A long
.197350		98		tya		                    TYA
.197351		8f 16 1e ae	sta $ae1e16	                    STA @l EVID_TXT_CURSOR_Y_REG_L
.197355		8a		txa		                    TXA
.197356		8f 14 1e ae	sta $ae1e14	                    STA @l EVID_TXT_CURSOR_X_REG_L
.19735a						update_colorpos
.19735a		c2 20		rep #$20	                REP #$20        ; set A long
.19735c		18		clc		                    CLC
.19735d		a5 0b		lda $032b	                    LDA #S_ANSI_VARS.CURSORPOS,D
.19735f		69 00 20	adc #$2000	                    ADC #<>(CS_COLOR_MEM_PTR - CS_TEXT_MEM_PTR)
.197362		85 13		sta $0333	                    STA #S_ANSI_VARS.COLORPOS,D
.197364		28		plp		done                PLP
.197365		2b		pld		                    PLD
.197366		7a		ply		                    PLY
.197367		fa		plx		                    PLX
.197368		6b		rtl		                    RTL
.197369						ANSI_SCROLLUP
.197369		da		phx		                    PHX
.19736a		5a		phy		                    PHY
.19736b		8b		phb		                    PHB
.19736c		0b		phd		                    PHD
.19736d		08		php		                    PHP
.19736e		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE          ; Look at the current output channel and point
.197372		90 03		bcc $197377	                    BCC calc_size
.197374		82 81 00	brl $1973f8	                    BRL done                    ; If invalid, just return
.197377						calc_size
.197377		c2 30		rep #$30	                REP #$30        ; set A&X long
.197379		a5 05		lda $0325	                    LDA #S_ANSI_VARS.COLS_PER_LINE,D
.19737b		8f 00 01 00	sta $000100	                    STA @l UNSIGNED_MULT_A_LO
.19737f		a5 07		lda $0327	                    LDA #S_ANSI_VARS.LINES_VISIBLE,D
.197381		8f 02 01 00	sta $000102	                    STA @l UNSIGNED_MULT_B_LO
.197385		af 04 01 00	lda $000104	                    LDA @l UNSIGNED_MULT_AL_LO
.197389		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.19738b		18		clc		                    CLC
.19738c		a5 00		lda $0320	                    LDA #S_ANSI_VARS.SCREENBEGIN,D
.19738e		a8		tay		                    TAY
.19738f		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.197391		aa		tax		                    TAX
.197392		e2 20		sep #$20	                SEP #$20        ; set A short
.197394		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID
.197398		c9 04		cmp #$04	                    CMP #CHAN_EVID
.19739a		f0 09		beq $1973a5	                    BEQ move_text_1                             ; Yes: do the move on the EVID memory
.19739c						move_text_0
.19739c		c2 20		rep #$20	                REP #$20        ; set A long
.19739e		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973a0		54 af af	mvn $af,$af	                    MVN `CS_TEXT_MEM_PTR,`CS_TEXT_MEM_PTR       ; Move the data on the main screen
.1973a3		80 07		bra $1973ac	                    BRA scroll_color
.1973a5						move_text_1
.1973a5		c2 20		rep #$20	                REP #$20        ; set A long
.1973a7		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973a9		54 ae ae	mvn $ae,$ae	                    MVN `EVID_TEXT_MEM,`EVID_TEXT_MEM           ; Move the data on the EVID screen
.1973ac						scroll_color
.1973ac		c2 30		rep #$30	                REP #$30        ; set A&X long
.1973ae		18		clc		                    CLC
.1973af		a5 16		lda $0336	                    LDA #S_ANSI_VARS.COLORBEGIN,D
.1973b1		a8		tay		                    TAY
.1973b2		65 05		adc $0325	                    ADC #S_ANSI_VARS.COLS_PER_LINE,D
.1973b4		aa		tax		                    TAX
.1973b5		e2 20		sep #$20	                SEP #$20        ; set A short
.1973b7		af 03 07 00	lda $000703	                    LDA @l CHAN_OUT                             ; Are we scrolling the EVID?
.1973bb		c9 04		cmp #$04	                    CMP #CHAN_EVID
.1973bd		f0 09		beq $1973c8	                    BEQ move_color_1                            ; Yes: scroll the EVID color matrix
.1973bf						move_color_0
.1973bf		c2 20		rep #$20	                REP #$20        ; set A long
.1973c1		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973c3		54 af af	mvn $af,$af	                    MVN `CS_COLOR_MEM_PTR,`CS_COLOR_MEM_PTR     ; Move the data on the main screen
.1973c6		80 07		bra $1973cf	                    BRA vicky_lastline
.1973c8						move_color_1
.1973c8		c2 20		rep #$20	                REP #$20        ; set A long
.1973ca		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973cc		54 ae ae	mvn $ae,$ae	                    MVN `EVID_COLOR_MEM,`EVID_COLOR_MEM         ; Move the data on the EVID screen
.1973cf						vicky_lastline
.1973cf		c2 20		rep #$20	                REP #$20        ; set A long
.1973d1		a5 19		lda $0339	                    LDA #S_ANSI_VARS.TMPPTR1,D
.1973d3		48		pha		                    PHA
.1973d4		18		clc		                    CLC
.1973d5		65 00		adc $0320	                    ADC #S_ANSI_VARS.SCREENBEGIN,D
.1973d7		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1973d9		a0 00 00	ldy #$0000	start_clear         LDY #0
.1973dc		a9 20 00	lda #$0020	                    LDA #' '
.1973df		97 19		sta [$0339],y	clr_text            STA [#S_ANSI_VARS.TMPPTR1,D],Y
.1973e1		c8		iny		                    INY
.1973e2		c4 0f		cpy $032f	                    CPY #COLS_VISIBLE,D
.1973e4		d0 f9		bne $1973df	                    BNE clr_text
.1973e6		68		pla		vicky_lastcolor     PLA
.1973e7		18		clc		                    CLC
.1973e8		65 16		adc $0336	                    ADC #S_ANSI_VARS.COLORBEGIN,D
.1973ea		85 19		sta $0339	                    STA #S_ANSI_VARS.TMPPTR1,D
.1973ec		a0 00 00	ldy #$0000	start_color         LDY #0
.1973ef		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D
.1973f1		97 19		sta [$0339],y	clr_color           STA [#S_ANSI_VARS.TMPPTR1,D],Y
.1973f3		c8		iny		                    INY
.1973f4		c4 05		cpy $0325	                    CPY #S_ANSI_VARS.COLS_PER_LINE,D
.1973f6		d0 f9		bne $1973f1	                    BNE clr_color
.1973f8		28		plp		done                PLP
.1973f9		2b		pld		                    PLD
.1973fa		ab		plb		                    PLB
.1973fb		7a		ply		                    PLY
.1973fc		fa		plx		                    PLX
.1973fd		6b		rtl		                    RTL
.1973fe						ANSI_CLRSCREEN
.1973fe		da		phx		                    PHX
.1973ff		5a		phy		                    PHY
.197400		0b		phd		                    PHD
.197401		08		php		                    PHP
.197402		22 cd 6d 19	jsl $196dcd	                    JSL ANSI_SETDEVICE                  ; Look at the current output channel and point
.197406		b0 1e		bcs $197426	                    BCS done                            ; If invalid, just return
.197408		e2 20		sep #$20	                SEP #$20        ; set A short
.19740a		c2 10		rep #$10	                REP #$10        ; set X long
.19740c		a0 00 00	ldy #$0000	                    LDY #0
.19740f		a9 20		lda #$20	                    LDA #$20		                    ; Fill the Entire Screen with Space
.197411		97 00		sta [$0320],y	iclearloop0	        STA [#S_ANSI_VARS.SCREENBEGIN,D],Y
.197413		c8		iny		                    INY
.197414		c0 00 20	cpy #$2000	                    CPY #$2000
.197417		d0 f8		bne $197411	                    BNE iclearloop0
.197419		a0 00 00	ldy #$0000	                    LDY	#0
.19741c		a5 12		lda $0332	                    LDA #S_ANSI_VARS.CURCOLOR,D         ; Fill the current color
.19741e		97 16		sta [$0336],y	evid_clearloop1     STA [#S_ANSI_VARS.COLORBEGIN,D],Y
.197420		c8		iny		                    INY
.197421		c0 00 20	cpy #$2000	                    CPY #$2000
.197424		d0 f8		bne $19741e	                    BNE evid_clearloop1
.197426		28		plp		done                PLP
.197427		2b		pld		                    PLD
.197428		7a		ply		                    PLY
.197429		fa		plx		                    PLX
.19742a		6b		rtl		                    RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/kbd_driver.asm

=16						KBD_INBUF_SIZE = 16         ; Number of scan codes that can be buffered
=0						KBD_STATE_IDLE = 0          ; Keyboard is IDLE
=1						KBD_STATE_E0 = 1            ; Keyboard has sent E0
=2						KBD_STATE_E02A = 2          ; Keybaord has sent E0 2A (leading to Print Screen E02AE037)
=3						KBD_STATE_E02AE0 = 3
=4						KBD_STATE_E1 = 4            ; Keyboard has sent E1 (leading to Pause/Break)
=5						KBD_STATE_E11D = 5
=6						KBD_STATE_E11D45 = 6
=7						KBD_STATE_E11D45E1 = 7
=8						KBD_STATE_E11D45E19D = 8
=9						KBD_STATE_E0B7 = 9          ; Keyboard has sent E0 B7 (leading to break of Print Screen E0 B7 E0 AA)
=10						KBD_STATE_E0B7E0 = 10
=0						KBD_ACTION_IGNORE = 0       ; State machine action: do nothing with the current byte
=1						KBD_ACTION_EMIT_BASE = 1    ; State machine action: translate scancode from base table and emit it
=2						KBD_ACTION_EMIT_E0 = 2      ; State machine action: translate scancode from E0 prefix table and emit it
=$01						KBD_STAT_OBF = $01          ; Keyboard status: Output Buffer is Full
=$02						KBD_STAT_IBF = $02          ; Keyboard status: Input Buffer is Full
=$a7						KBD_CTRL_CMD_DISABLE2 = $A7 ; Keybaord controller command: disable output device #2
=$a9						KBD_CTRL_CMD_ENABLE2 = $A9  ; Keybaord controller command: enable output device #2
=$aa						KBD_CTRL_CMD_SELFTEST = $AA ; Keyboard controller command: start self test
=$ab						KBD_CTRL_CMD_KBDTEST = $AB  ; Keyboard controller command: start keyboard test
=$ad						KBD_CTRL_CMD_DISABLE1 = $AD ; Keybaord controller command: disable output device #1
=$ae						KBD_CTRL_CMD_ENABLE1 = $AE  ; Keybaord controller command: enable output device #1
=$60						KBD_CTRL_CMD_WRITECMD = $60 ; Keyboard controller command: write to the command register
=$ff						KBD_CMD_RESET = $FF         ; Keyboard command: reset the keyboard
=$f4						KBD_CMD_ENABLE = $F4        ; Keyboard command: enable to keyboard
=$ed						KBD_CMD_SET_LED = $ED       ; Keyboard command: set the LEDs
=$55						KBD_RESP_OK = $55           ; Keyboard response: Command was OK
=$fa						KBD_RESP_ACK = $FA          ; Keyboard response: command acknowledged
=$01						KBD_LOCK_SCROLL = $01       ; LED/lock mask for Scroll Lock key
=$02						KBD_LOCK_NUMBER = $02       ; LED/lock mask for Num Lock key
=$04						KBD_LOCK_CAPS = $04         ; LED/lock mask for Caps Lock key
=$01						KBD_MOD_LSHIFT  = %00000001     ; Left shift is pressed
=$02						KBD_MOD_RSHIFT  = %00000010     ; Right shift is pressed
=$04						KBD_MOD_LCTRL   = %00000100     ; Left CTRL is pressed
=$08						KBD_MOD_RCTRL   = %00001000     ; Right CTRL is pressed
=$10						KBD_MOD_LALT    = %00010000     ; Left ALT is pressed
=$20						KBD_MOD_RALT    = %00100000     ; Right ALT is pressed
=$40						KBD_MOD_OS      = %01000000     ; OS key (e.g. Windows Key) is pressed
=$80						KBD_MOD_MENU    = %10000000     ; Menu key is pressed
=$80						KBD_CTRL_BREAK      = %10000000 ; CONTROL Flag to indicate if keyboard should capture BREAK
=$40						KBD_CTRL_MONITOR    = %01000000 ; CONTROL Flag to indicate if keyboard should trap ALT-BREAK to go to the monitor
=$80						KBD_STAT_BREAK  = %10000000     ; STATUS flag, BREAK has been pressed recently
=$01						KBD_STAT_SCAN   = %00000001     ; STATUS flag to indicate if there are scan codes in the queue
=$02						KBD_STAT_CHAR   = %00000010     ; STATUS flag to indicate if there are characters in the queue
=$61						KBD_SC_BREAK = $61              ; Scan code for the PAUSE/BREAK key
=$3a						KBD_SC_CAPSLOCK = $3A           ; Scan code for the CAPS lock key
=$45						KBD_SC_NUMLOCK = $45            ; Scan code for the NUM lock key
=$46						KBD_SC_SCROLL = $46             ; Scan code for the SCROLL lock key
=$2a						KBD_SC_LSHIFT = $2A             ; Scan code for the left SHIFT key
=$1d						KBD_SC_LCTRL = $1D              ; Scan code for the left CTLR key
=$38						KBD_SC_LALT = $38               ; Scan code for the left ALT key
=$36						KBD_SC_RSHIFT = $36             ; Scan code for the right SHIFT key
=$5e						KBD_SC_RCTRL = $5E              ; Scan code for the right CTRL key
=$5c						KBD_SC_RALT = $5C               ; Scan code for the right ALT key
=$38						KBD_SC_PIVOT = $38              ; Scan code we will use as a pivot for checking NUM lock
.0000						S_KBD_CONTROL
>0000						STATE               .byte ?                     ; The state of the keyboard controller state machine
>0001						CONTROL             .byte ?                     ; Control register
>0002						STATUS              .byte ?                     ; Status register
>0003						SC_BUF              .fill KBD_INBUF_SIZE        ; Buffer for keyboard scancodes read
>0013						SC_HEAD             .byte ?                     ; Index of the first scancode cell to write to
>0014						CHAR_BUF            .fill KBD_INBUF_SIZE        ; Character buffer
>0024						CHAR_HEAD           .byte ?                     ; Number of characters in the character buffer
>0025						MODIFIERS           .byte ?                     ; State of the modifier keys
>0026						LOCKS               .byte ?                     ; State of the lock keys: Caps, Num, Scroll
>0027						TBL_UNMOD           .dword ?                    ; Pointer to the scan code translation table for unmodified keys
>002b						TBL_SHIFT           .dword ?                    ; Pointer to the scan code translation table for shifted keys
>002f						TBL_CTRL            .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL
>0033						TBL_LOCK            .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK or NUMLOCK
>0037						TBL_LOCK_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CAPSLOCK and SHIFT
>003b						TBL_CTRL_SHIFT      .dword ?                    ; Pointer to the scan code translation table for keys modified by CTRL and SHIFT
.19742b						IINITKEYBOARD
.19742b		da		phx		                    PHX
.19742c		5a		phy		                    PHY
.19742d		0b		phd		                    PHD
.19742e		08		php		                    PHP
.19742f		48		pha		                PHA             ; begin setdp macro
.197430		08		php		                PHP
.197431		c2 20		rep #$20	                REP #$20        ; set A long
.197433		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197436		5b		tcd		                TCD
.197437		28		plp		                PLP
.197438		68		pla		                PLA             ; end setdp macro
.197439		e2 20		sep #$20	                SEP #$20        ; set A short
.19743b		c2 10		rep #$10	                REP #$10        ; set X long
.19743d		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1                        ; Disable the keyboard interrupts while we get things started
.197441		09 01		ora #$01	                    ORA #FNX1_INT00_KBD
.197443		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.197447		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                         ; Set the state machine to the starting IDLE state
.197449		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.19744b		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D                ; Mark the scancode buffer as empty
.19744d		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D              ; Mark the character buffer as empty
.19744f		64 25		stz $0f25	                    STZ #S_KBD_CONTROL.MODIFIERS,D              ; Default to modifiers being off
.197451		64 02		stz $0f02	                    STZ #S_KBD_CONTROL.STATUS,D                 ; Clear the status register
.197453		a9 80		lda #$80	                    LDA #KBD_CTRL_BREAK                         ; Enable BREAK processing
.197455		85 01		sta $0f01	                    STA #S_KBD_CONTROL.CONTROL,D
.197457		c2 20		rep #$20	                REP #$20        ; set A long
.197459		a9 00 7c	lda #$7c00	                    LDA #<>SC_US_UNMOD
.19745c		85 27		sta $0f27	                    STA #S_KBD_CONTROL.TBL_UNMOD,D
.19745e		a9 80 7c	lda #$7c80	                    LDA #<>SC_US_SHFT
.197461		85 2b		sta $0f2b	                    STA #S_KBD_CONTROL.TBL_SHIFT,D
.197463		a9 00 7d	lda #$7d00	                    LDA #<>SC_US_CTRL
.197466		85 2f		sta $0f2f	                    STA #S_KBD_CONTROL.TBL_CTRL,D
.197468		a9 80 7d	lda #$7d80	                    LDA #<>SC_US_LOCK
.19746b		85 33		sta $0f33	                    STA #S_KBD_CONTROL.TBL_LOCK,D
.19746d		a9 00 7e	lda #$7e00	                    LDA #<>SC_US_LOCK_SHFT
.197470		85 37		sta $0f37	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.197472		a9 80 7e	lda #$7e80	                    LDA #<>SC_US_CTRL_SHFT
.197475		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.197477		e2 20		sep #$20	                SEP #$20        ; set A short
.197479		a9 19		lda #$19	                    LDA #`SC_US_UNMOD
.19747b		85 29		sta $0f29	                    STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.19747d		a9 19		lda #$19	                    LDA #`SC_US_SHFT
.19747f		85 2d		sta $0f2d	                    STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.197481		a9 19		lda #$19	                    LDA #`SC_US_CTRL
.197483		85 31		sta $0f31	                    STA #S_KBD_CONTROL.TBL_CTRL+2,D
.197485		a9 19		lda #$19	                    LDA #`SC_US_LOCK
.197487		85 35		sta $0f35	                    STA #S_KBD_CONTROL.TBL_LOCK+2,D
.197489		a9 19		lda #$19	                    LDA #`SC_US_LOCK_SHFT
.19748b		85 39		sta $0f39	                    STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.19748d		a9 19		lda #$19	                    LDA #`SC_US_CTRL_SHFT
.19748f		85 3b		sta $0f3b	                    STA #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.197491		a9 ad		lda #$ad	                    LDA #KBD_CTRL_CMD_DISABLE1  ; Disable the keyboard sending data
.197493		22 1c 75 19	jsl $19751c	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.197497		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.19749b		af 03 18 af	lda $af1803	flush_output        LDA @l KBD_DATA_BUF         ; We just throw that away
.19749f		a9 aa		lda #$aa	                    LDA #KBD_CTRL_CMD_SELFTEST  ; Send the self test command
.1974a1		22 27 75 19	jsl $197527	                    JSL KBD_CTRL_SND_CMD
.1974a5		c9 55		cmp #$55	                    CMP #KBD_RESP_OK            ; Did we get an OK?
.1974a7		f0 05		beq $1974ae	                    BEQ test_AB
.1974a9		a9 02		lda #$02	                    LDA #2                      ; Return error #2
.1974ab		82 5e 00	brl $19750c	                    BRL done
.1974ae		a9 ab		lda #$ab	test_AB             LDA #KBD_CTRL_CMD_KBDTEST   ; Send the keyboard test command
.1974b0		22 27 75 19	jsl $197527	                    JSL KBD_CTRL_SND_CMD
.1974b4		c9 00		cmp #$00	                    CMP #0                      ; Did we get a good response?
.1974b6		f0 05		beq $1974bd	                    BEQ write_command
.1974b8		a9 03		lda #$03	                    LDA #3                      ; Return error #3
.1974ba		82 4f 00	brl $19750c	                    BRL done
.1974bd		a9 60		lda #$60	write_command       LDA #KBD_CTRL_CMD_WRITECMD
.1974bf		a2 43 00	ldx #$0043	                    LDX #%01000011              ; Translate to set 1, no interrupts
.1974c2		22 81 75 19	jsl $197581	                    JSL KBD_CTRL_SND_CMD_P
.1974c6		a9 ae		lda #$ae	enable_dev1         LDA #KBD_CTRL_CMD_ENABLE1   ; Re-enable the keyboard sending data
.1974c8		22 1c 75 19	jsl $19751c	                    JSL KBD_WAIT_IN             ; Send the command to the controller
.1974cc		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.1974d0		a9 ff		lda #$ff	reset_kbd           LDA #KBD_CMD_RESET          ; Send a reset command to the keyboard
.1974d2		a2 ff ff	ldx #$ffff	                    LDX #$FFFF                  ; And wait a while for it to complete the reset
.1974d5		22 38 75 19	jsl $197538	                    JSL KBD_SND_CMD
.1974d9		a0 80 00	ldy #$0080	                    LDY #128                    ; Attemp enabling the keyboard 128 times
.1974dc		a9 f4		lda #$f4	enable_loop         LDA #KBD_CMD_ENABLE         ; Try to enable the keyboard
.1974de		a2 00 00	ldx #$0000	                    LDX #0
.1974e1		22 38 75 19	jsl $197538	                    JSL KBD_SND_CMD
.1974e5		c9 fa		cmp #$fa	                    CMP #KBD_RESP_ACK           ; Did the keyboard acknowledge the command?
.1974e7		f0 07		beq $1974f0	                    BEQ set_led                 ; Yes: try to set the LEDs
.1974e9		88		dey		                    DEY                         ; No: try again... counting down
.1974ea		d0 f0		bne $1974dc	                    BNE enable_loop             ; If we are out of attempts...
.1974ec		a9 05		lda #$05	                    LDA #5                      ; Return error #5
.1974ee		80 1c		bra $19750c	                    BRA done
.1974f0		a9 00		lda #$00	set_led             LDA #0                      ; Set the state of the locks
.1974f2		22 a8 77 19	jsl $1977a8	                    JSL KBD_SETLOCKS
.1974f6		af 41 01 00	lda $000141	                    LDA @l INT_PENDING_REG1     ; Read the Pending Register &
.1974fa		29 01		and #$01	                    AND #FNX1_INT00_KBD
.1974fc		8f 41 01 00	sta $000141	                    STA @l INT_PENDING_REG1     ; Writing it back will clear the Active Bit
.197500		af 4d 01 00	lda $00014d	                    LDA @l INT_MASK_REG1
.197504		29 fe		and #$fe	                    AND #~FNX1_INT00_KBD
.197506		8f 4d 01 00	sta $00014d	                    STA @l INT_MASK_REG1
.19750a		a9 00		lda #$00	return_0            LDA #0                      ; Return status code for success
.19750c		28		plp		done                PLP
.19750d		2b		pld		                    PLD
.19750e		7a		ply		                    PLY
.19750f		fa		plx		                    PLX
.197510		6b		rtl		                    RTL
.197511						KBD_WAIT_OUT
.197511		48		pha		                    PHA
.197512		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.197516		89 01		bit #$01	                    BIT #KBD_STAT_OBF       ; Check to see if the output buffer is full
.197518		f0 f8		beq $197512	                    BEQ wait                ; If it isn't, keep waiting
.19751a		68		pla		                    PLA
.19751b		6b		rtl		                    RTL
.19751c						KBD_WAIT_IN
.19751c		48		pha		                    PHA
.19751d		af 07 18 af	lda $af1807	wait                LDA @l KBD_STATUS       ; Get the keyboard status
.197521		89 02		bit #$02	                    BIT #KBD_STAT_IBF       ; Check to see if the input buffer has data
.197523		d0 f8		bne $19751d	                    BNE wait                ; If not, wait for it to have something
.197525		68		pla		                    PLA
.197526		6b		rtl		                    RTL
.197527						KBD_CTRL_SND_CMD
.197527		22 1c 75 19	jsl $19751c	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.19752b		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.19752f		22 11 75 19	jsl $197511	                    JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.197533		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.197537		6b		rtl		                    RTL
.197538						KBD_SND_CMD
.197538		22 1c 75 19	jsl $19751c	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.19753c		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197540		c2 10		rep #$10	                REP #$10        ; set X long
.197542		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.197545		f0 0b		beq $197552	                    BEQ get_response        ; If 0, check for a response
.197547		ca		dex		                    DEX                     ; Count down
.197548		ea		nop		                    NOP                     ; And do a delay
.197549		ea		nop		                    NOP
.19754a		ea		nop		                    NOP
.19754b		ea		nop		                    NOP
.19754c		ea		nop		                    NOP
.19754d		ea		nop		                    NOP
.19754e		ea		nop		                    NOP
.19754f		ea		nop		                    NOP
.197550		80 f0		bra $197542	                    BRA delay
.197552		22 11 75 19	jsl $197511	get_response        JSL KBD_WAIT_OUT        ; Wait for and read the response byte
.197556		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF
.19755a		6b		rtl		                    RTL
.19755b						KBD_SND_CMD_P
.19755b		22 1c 75 19	jsl $19751c	                    JSL KBD_WAIT_IN         ; Send the command to the keyboard
.19755f		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197563		8a		txa		                    TXA                     ; Send the parameter to the keyboard
.197564		c2 10		rep #$10	                REP #$10        ; set X long
.197566		a2 e8 03	ldx #$03e8	                    LDX #1000
.197569		e0 00 00	cpx #$0000	delay               CPX #0                  ; Check how many delay loops are left to do
.19756c		f0 0a		beq $197578	                    BEQ send_data           ; If 0, check for a response
.19756e		ca		dex		                    DEX                     ; Count down
.19756f		ea		nop		                    NOP                     ; And do a delay
.197570		ea		nop		                    NOP
.197571		ea		nop		                    NOP
.197572		ea		nop		                    NOP
.197573		ea		nop		                    NOP
.197574		ea		nop		                    NOP
.197575		ea		nop		                    NOP
.197576		80 f1		bra $197569	                    BRA delay
.197578		22 1c 75 19	jsl $19751c	send_data           JSL KBD_WAIT_IN
.19757c		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197580						get_response
.197580		6b		rtl		                    RTL
.197581						KBD_CTRL_SND_CMD_P
.197581		22 1c 75 19	jsl $19751c	                    JSL KBD_WAIT_IN         ; Send the command to the controller
.197585		8f 07 18 af	sta $af1807	                    STA @l KBD_CMD_BUF
.197589		8a		txa		                    TXA
.19758a		22 1c 75 19	jsl $19751c	                    JSL KBD_WAIT_IN         ; Send the parameter to the controller
.19758e		8f 03 18 af	sta $af1803	                    STA @l KBD_DATA_BUF
.197592		6b		rtl		                    RTL
.197593						KBD_PROCESS_BYTE
.197593		8b		phb		                    PHB
.197594		0b		phd		                    PHD
.197595		08		php		                    PHP
.197596		48		pha		                PHA             ; begin setdbr macro
.197597		08		php		                PHP
.197598		e2 20		sep #$20	                SEP #$20        ; set A short
.19759a		a9 19		lda #$19	                LDA #`KBD_STATE_MACH
.19759c		48		pha		                PHA
.19759d		ab		plb		                PLB
.19759e		28		plp		                PLP
.19759f		68		pla		                PLA             ; end setdbr macro
.1975a0		48		pha		                PHA             ; begin setdp macro
.1975a1		08		php		                PHP
.1975a2		c2 20		rep #$20	                REP #$20        ; set A long
.1975a4		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1975a7		5b		tcd		                TCD
.1975a8		28		plp		                PLP
.1975a9		68		pla		                PLA             ; end setdp macro
.1975aa		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1975ac		af 03 18 af	lda $af1803	                    LDA @l KBD_DATA_BUF                 ; Get the current scancode byte
.1975b0		d0 03		bne $1975b5	                    BNE save_scancode
.1975b2		82 67 00	brl $19761c	                    BRL done                            ; If it's 0, just ignore it
.1975b5						LOCALS
>0001						l_break             .byte ?                             ; The make/break bit of the scancode
>0002						l_code              .byte ?                             ; The scancode
.1975b5		48		pha		save_scancode       PHA
.1975b6		48		pha		                    PHA
.1975b7		29 80		and #$80	                    AND #$80
.1975b9		83 01		sta $01,s	                    STA l_break                         ; Save the make/break bit
.1975bb		a2 00		ldx #$00	                    LDX #0                              ; Start from the beginning
.1975bd		bf 00 7b 19	lda $197b00,x	chk_transition      LDA @l KBD_STATE_MACH,X             ; Get the tranition's start state
.1975c1		c9 ff		cmp #$ff	                    CMP #$FF
.1975c3		d0 03		bne $1975c8	                    BNE compare_state
.1975c5		82 54 00	brl $19761c	                    BRL done                            ; If $FF: we've reached the end... this is an error... just ignore it?
.1975c8		c5 00		cmp $0f00	compare_state       CMP #S_KBD_CONTROL.STATE,D          ; Compare it to the current state
.1975ca		d0 0e		bne $1975da	                    BNE next_transition                 ; If they don't match, go to the next transition
.1975cc		bf 01 7b 19	lda $197b01,x	                    LDA @l KBD_STATE_MACH+1,X           ; Get the tranition's test byte
.1975d0		f0 0e		beq $1975e0	                    BEQ apply                           ; Is it 0? Yes: the default applies
.1975d2		a3 02		lda $02,s	                    LDA l_code                          ; Otherwise: get the scan code back
.1975d4		df 01 7b 19	cmp $197b01,x	                    CMP @l KBD_STATE_MACH+1,X           ; Compare it to the transition's test byte
.1975d8		f0 06		beq $1975e0	                    BEQ apply                           ; If equal: this matches, apply the transition
.1975da		e8		inx		next_transition     INX                                 ; Move to the next transition
.1975db		e8		inx		                    INX
.1975dc		e8		inx		                    INX
.1975dd		e8		inx		                    INX
.1975de		80 dd		bra $1975bd	                    BRA chk_transition                  ; Check to see if the next transition applies
.1975e0		bf 02 7b 19	lda $197b02,x	apply               LDA @l KBD_STATE_MACH+2,X           ; Get the tranition's destination state
.1975e4		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D          ; And save it as our new state
.1975e6		bf 03 7b 19	lda $197b03,x	                    LDA @l KBD_STATE_MACH+3,X           ; Get the tranition's action
.1975ea		c9 00		cmp #$00	                    CMP #KBD_ACTION_IGNORE              ; Is it IGNORE?
.1975ec		f0 2e		beq $19761c	                    BEQ done                            ; Yes: we're done for now
.1975ee		c9 01		cmp #$01	                    CMP #KBD_ACTION_EMIT_BASE           ; Is it EMIT_BASE?
.1975f0		f0 06		beq $1975f8	                    BEQ emit_base                       ; Yes: emit the translation of the base byte
.1975f2		c9 02		cmp #$02	                    CMP #KBD_ACTION_EMIT_E0             ; Is it EMIT_E0?
.1975f4		f0 0f		beq $197605	                    BEQ emit_e0                         ; Yes: emit the translation of the E0 prefixed byte
.1975f6		80 18		bra $197610	                    BRA emit_A                          ; Otherwise: just emit the action byte as the new scan code
.1975f8		a3 02		lda $02,s	emit_base           LDA l_code
.1975fa		29 7f		and #$7f	                    AND #$7F                            ; Strip off the make/break bit
.1975fc		aa		tax		                    TAX
.1975fd		bf 00 7a 19	lda $197a00,x	                    LDA @l TBL_SET1,X                   ; Get the translation of the base scan code
.197601		03 01		ora $01,s	                    ORA l_break                         ; Add the make/break bit back
.197603		80 0b		bra $197610	                    BRA emit_A                          ; Emit the translation
.197605		a3 02		lda $02,s	emit_e0             LDA l_code
.197607		29 7f		and #$7f	                    AND #$7F                            ; Strip off any make/break bit
.197609		aa		tax		                    TAX
.19760a		bf 80 7a 19	lda $197a80,x	                    LDA @l TBL_SET1_E0,X                ; Get the translation of the E0 prefixed scan code
.19760e		03 01		ora $01,s	                    ORA l_break                         ; Add in the make/break flag
.197610		c9 00		cmp #$00	emit_A              CMP #0                              ; Is the code NUL?
.197612		f0 08		beq $19761c	                    BEQ done                            ; If so, skip enqueuing it
.197614		22 24 76 19	jsl $197624	enqueue             JSL KBD_SC_ENQUEUE                  ; Enqueue the scancode
.197618		a9 00		lda #$00	                    LDA #KBD_STATE_IDLE                 ; Set the state machine to the initial state
.19761a		85 00		sta $0f00	                    STA #S_KBD_CONTROL.STATE,D
.19761c						done
.19761c		e2 20		sep #$20	                SEP #$20        ; set A short
.19761e		68		pla		                    PLA                                 ; Clean the scan code byte from the stack
.19761f		68		pla		                    PLA
.197620		28		plp		                    PLP
.197621		2b		pld		                    PLD
.197622		ab		plb		                    PLB
.197623		6b		rtl		                    RTL
.197624						KBD_SC_ENQUEUE
.197624		0b		phd		                    PHD
.197625		08		php		                    PHP
.197626		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.197627		48		pha		                PHA             ; begin setdp macro
.197628		08		php		                PHP
.197629		c2 20		rep #$20	                REP #$20        ; set A long
.19762b		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19762e		5b		tcd		                TCD
.19762f		28		plp		                PLP
.197630		68		pla		                PLA             ; end setdp macro
.197631		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197633		c9 00		cmp #$00	                    CMP #0                          ; Is the scan code a NUL?
.197635		f0 2f		beq $197666	                    BEQ done                        ; Yes: just ignore
.197637		c9 61		cmp #$61	                    CMP #KBD_SC_BREAK               ; Is it the BREAK key?
.197639		d0 10		bne $19764b	                    BNE chk_locks                   ; No: check the various lock keys
.19763b		a5 01		lda $0f01	                    LDA #S_KBD_CONTROL.CONTROL,D
.19763d		89 80		bit #$80	                    BIT #KBD_CTRL_BREAK                 ; Are we processing BREAK?
.19763f		f0 08		beq $197649	                    BEQ enqueue_break                   ; No: enqueue it as normal
.197641		a9 80		lda #$80	                    LDA #KBD_STAT_BREAK                 ; Yes: turn on the BREAK bit
.197643		05 02		ora $0f02	                    ORA #S_KBD_CONTROL.STATUS,D
.197645		85 02		sta $0f02	                    STA #S_KBD_CONTROL.STATUS,D
.197647		80 1d		bra $197666	                    BRA done                            ; And we're done
.197649		a9 61		lda #$61	enqueue_break       LDA #KBD_SC_BREAK
.19764b		c9 3a		cmp #$3a	chk_locks           CMP #KBD_SC_CAPSLOCK            ; Is it the CAPS lock?
.19764d		f0 1a		beq $197669	                    BEQ toggle_caps                 ; Yes: toggle the CAPS lock bits
.19764f		c9 45		cmp #$45	                    CMP #KBD_SC_NUMLOCK             ; Is it the NUM lock?
.197651		f0 20		beq $197673	                    BEQ toggle_num                  ; Yes: toggle the NUM lock bits
.197653		c9 46		cmp #$46	                    CMP #KBD_SC_SCROLL              ; Is it the SCROLL lock?
.197655		f0 22		beq $197679	                    BEQ toggle_scroll               ; Yes: toggle the SCROLL lock bits
.197657		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.197659		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.19765b		f0 09		beq $197666	                    BEQ done                        ; Yes: we're full... ignore the scancode
.19765d		95 03		sta $0f03,x	                    STA #S_KBD_CONTROL.SC_BUF,D,X   ; No: we have room, write the scan code to the buffer
.19765f		e8		inx		                    INX                             ; Advance to the next location
.197660		86 13		stx $0f13	                    STX #S_KBD_CONTROL.SC_HEAD,D
.197662		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Set the KBD_STAT_SCAN bit
.197664		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.197666		28		plp		done                PLP
.197667		2b		pld		                    PLD
.197668		6b		rtl		                    RTL
.197669		a5 26		lda $0f26	toggle_caps         LDA #S_KBD_CONTROL.LOCKS,D
.19766b		49 04		eor #$04	                    EOR #KBD_LOCK_CAPS              ; Toggle the CAPS lock
.19766d		22 a8 77 19	jsl $1977a8	save_locks          JSL KBD_SETLOCKS                ; Set the locks
.197671		80 f3		bra $197666	                    BRA done
.197673		a5 26		lda $0f26	toggle_num          LDA #S_KBD_CONTROL.LOCKS,D
.197675		49 02		eor #$02	                    EOR #KBD_LOCK_NUMBER            ; Toggle the NUM lock
.197677		80 f4		bra $19766d	                    BRA save_locks
.197679		a5 26		lda $0f26	toggle_scroll       LDA #S_KBD_CONTROL.LOCKS,D
.19767b		49 01		eor #$01	                    EOR #KBD_LOCK_SCROLL            ; Toggle the SCROLL lock
.19767d		80 ee		bra $19766d	                    BRA save_locks
.19767f						KBD_CHAR_ENQUEUE
.19767f		0b		phd		                    PHD
.197680		08		php		                    PHP
.197681		78		sei		                    SEI                             ; Disable IRQs for the duration of this routine to avoid race conditions
.197682		48		pha		                PHA             ; begin setdp macro
.197683		08		php		                PHP
.197684		c2 20		rep #$20	                REP #$20        ; set A long
.197686		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197689		5b		tcd		                TCD
.19768a		28		plp		                PLP
.19768b		68		pla		                PLA             ; end setdp macro
.19768c		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19768e		c9 00		cmp #$00	                    CMP #0                          ; Is the character a NUL?
.197690		f0 0f		beq $1976a1	                    BEQ done                        ; Yes: just ignore
.197692		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D  ; Get the index of the next free spot
.197694		e0 10		cpx #$10	                    CPX #KBD_INBUF_SIZE             ; Is it at the end?
.197696		f0 09		beq $1976a1	                    BEQ done                        ; Yes: we're full... ignore the scancode
.197698		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X ; No: we have room, write the scan code to the buffer
.19769a		e8		inx		                    INX                             ; Advance to the next location
.19769b		86 24		stx $0f24	                    STX #S_KBD_CONTROL.CHAR_HEAD,D
.19769d		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR              ; Set the KBD_STAT_CHAR bit
.19769f		04 02		tsb $0f02	                    TSB #S_KBD_CONTROL.STATUS,D
.1976a1		28		plp		done                PLP
.1976a2		2b		pld		                    PLD
.1976a3		6b		rtl		                    RTL
.1976a4						KBD_CHAR_DEQUEUE
.1976a4		da		phx		                    PHX
.1976a5		0b		phd		                    PHD
.1976a6		08		php		                    PHP
.1976a7		48		pha		                PHA             ; begin setdp macro
.1976a8		08		php		                PHP
.1976a9		c2 20		rep #$20	                REP #$20        ; set A long
.1976ab		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976ae		5b		tcd		                TCD
.1976af		28		plp		                PLP
.1976b0		68		pla		                PLA             ; end setdp macro
.1976b1		78		sei		                    SEI                                 ; Disable IRQ for the duration of this routine to avoid race conditions
.1976b2		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1976b4		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; Get the index of the next free spot
.1976b6		f0 21		beq $1976d9	                    BEQ return_empty                    ; If it's 0, we have no data
.1976b8		a5 14		lda $0f14	                    LDA #S_KBD_CONTROL.CHAR_BUF,D       ; Get the character at the head of the queue
.1976ba		48		pha		                    PHA                                 ; Save it
.1976bb		a6 24		ldx $0f24	                    LDX #S_KBD_CONTROL.CHAR_HEAD,D      ; How many bytes were there?
.1976bd		e0 01		cpx #$01	                    CPX #1                              ; Is it one?
.1976bf		d0 08		bne $1976c9	                    BNE copy_down                       ; No: we need to copy down the remaining bytes
.1976c1		64 24		stz $0f24	                    STZ #S_KBD_CONTROL.CHAR_HEAD,D      ; Yes: mark that we have no data in the queue now
.1976c3		a9 02		lda #$02	                    LDA #KBD_STAT_CHAR                  ; Clear the KBD_STAT_CHAR bit
.1976c5		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.1976c7		80 0d		bra $1976d6	                    BRA return_head                     ; And return the character we found
.1976c9		a2 00		ldx #$00	copy_down           LDX #0                              ; Starting at the beginning of the buffer...
.1976cb		b5 15		lda $0f15,x	loop                LDA #S_KBD_CONTROL.CHAR_BUF+1,D,X   ; Get the next byte
.1976cd		95 14		sta $0f14,x	                    STA #S_KBD_CONTROL.CHAR_BUF,D,X     ; Move it down
.1976cf		e8		inx		                    INX                                 ; And move to the next byte
.1976d0		e4 24		cpx $0f24	                    CPX #S_KBD_CONTROL.CHAR_HEAD,D      ; Have we reached the end?
.1976d2		d0 f7		bne $1976cb	                    BNE loop                            ; No: keep copying bytes
.1976d4		c6 24		dec $0f24	                    DEC #S_KBD_CONTROL.CHAR_HEAD,D      ; Decrement the index
.1976d6		68		pla		return_head         PLA                                 ; Get the character back
.1976d7		80 02		bra $1976db	                    BRA done                            ; And return it
.1976d9		a9 00		lda #$00	return_empty        LDA #0                              ; Return: 0 for no character
.1976db		28		plp		done                PLP
.1976dc		2b		pld		                    PLD
.1976dd		fa		plx		                    PLX
.1976de		6b		rtl		                    RTL
.1976df						KBD_GET_SCANCODE
.1976df		da		phx		                    PHX
.1976e0		0b		phd		                    PHD
.1976e1		08		php		                    PHP
.1976e2		48		pha		                PHA             ; begin setdp macro
.1976e3		08		php		                PHP
.1976e4		c2 20		rep #$20	                REP #$20        ; set A long
.1976e6		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1976e9		5b		tcd		                TCD
.1976ea		28		plp		                PLP
.1976eb		68		pla		                PLA             ; end setdp macro
.1976ec		78		sei		                    SEI                             ; Disable IRQ for the duration of this routine to avoid race conditions
.1976ed		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1976ef		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; Get the index of the next free spot
.1976f1		f0 21		beq $197714	                    BEQ return_empty                ; If it's 0, we have no data
.1976f3		a5 03		lda $0f03	                    LDA #S_KBD_CONTROL.SC_BUF,D     ; Get the scan code at the head of the queue
.1976f5		48		pha		                    PHA                             ; Save it
.1976f6		a6 13		ldx $0f13	                    LDX #S_KBD_CONTROL.SC_HEAD,D    ; How many bytes were there?
.1976f8		e0 01		cpx #$01	                    CPX #1                          ; Is it one?
.1976fa		d0 08		bne $197704	                    BNE copy_down                   ; No: we need to copy down the remaining bytes
.1976fc		64 13		stz $0f13	                    STZ #S_KBD_CONTROL.SC_HEAD,D    ; Yes: mark that we have no data in the queue now
.1976fe		a9 01		lda #$01	                    LDA #KBD_STAT_SCAN              ; Clear the KBD_STAT_SCAN bit
.197700		14 02		trb $0f02	                    TRB #S_KBD_CONTROL.STATUS,D
.197702		80 0d		bra $197711	                    BRA return_head                 ; And return the scan code we found
.197704		a2 00		ldx #$00	copy_down           LDX #0                          ; Starting at the beginning of the buffer...
.197706		b5 04		lda $0f04,x	loop                LDA #S_KBD_CONTROL.SC_BUF+1,D,X ; Get the next byte
.197708		85 03		sta $0f03	                    STA #S_KBD_CONTROL.SC_BUF,D     ; Move it down
.19770a		e8		inx		                    INX                             ; And move to the next byte
.19770b		e4 13		cpx $0f13	                    CPX #S_KBD_CONTROL.SC_HEAD,D    ; Have we reached the end?
.19770d		d0 f7		bne $197706	                    BNE loop                        ; No: keep copying bytes
.19770f		c6 13		dec $0f13	                    DEC #S_KBD_CONTROL.SC_HEAD,D    ; Reduce the index to the next free byte
.197711		68		pla		return_head         PLA                             ; Get the scan code back
.197712		80 02		bra $197716	                    BRA done                        ; And return it
.197714		a9 00		lda #$00	return_empty        LDA #0                          ; Return: 0 for no scan code
.197716		28		plp		done                PLP
.197717		2b		pld		                    PLD
.197718		fa		plx		                    PLX
.197719		6b		rtl		                    RTL
.19771a						KBD_GETMODS
.19771a		0b		phd		                PHD
.19771b		08		php		                PHP
.19771c		48		pha		                PHA             ; begin setdp macro
.19771d		08		php		                PHP
.19771e		c2 20		rep #$20	                REP #$20        ; set A long
.197720		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197723		5b		tcd		                TCD
.197724		28		plp		                PLP
.197725		68		pla		                PLA             ; end setdp macro
.197726		e2 20		sep #$20	                SEP #$20        ; set A short
.197728		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.19772a		28		plp		                PLP
.19772b		2b		pld		                PLD
.19772c		6b		rtl		                RTL
.19772d						KBD_GET_STAT
.19772d		0b		phd		                PHD
.19772e		08		php		                PHP
.19772f		48		pha		                PHA             ; begin setdp macro
.197730		08		php		                PHP
.197731		c2 20		rep #$20	                REP #$20        ; set A long
.197733		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197736		5b		tcd		                TCD
.197737		28		plp		                PLP
.197738		68		pla		                PLA             ; end setdp macro
.197739		e2 20		sep #$20	                SEP #$20        ; set A short
.19773b		a5 02		lda $0f02	                LDA #S_KBD_CONTROL.STATUS,D
.19773d		28		plp		                PLP
.19773e		2b		pld		                PLD
.19773f		6b		rtl		                RTL
.197740						KBD_TEST_BREAK
.197740		0b		phd		                PHD
.197741		08		php		                PHP
.197742		48		pha		                PHA             ; begin setdp macro
.197743		08		php		                PHP
.197744		c2 20		rep #$20	                REP #$20        ; set A long
.197746		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197749		5b		tcd		                TCD
.19774a		28		plp		                PLP
.19774b		68		pla		                PLA             ; end setdp macro
.19774c		e2 20		sep #$20	                SEP #$20        ; set A short
.19774e		a9 80		lda #$80	                LDA #KBD_STAT_BREAK             ; Check the BREAK bit in STATUS
.197750		14 02		trb $0f02	                TRB #S_KBD_CONTROL.STATUS,D     ; ... and clear it
.197752		d0 04		bne $197758	                BNE ret_true                    ; If it was set, return TRUE
.197754		28		plp		ret_false       PLP                             ; Otherwise, return false
.197755		2b		pld		                PLD
.197756		18		clc		                CLC
.197757		6b		rtl		                RTL
.197758		28		plp		ret_true        PLP
.197759		2b		pld		                PLD
.19775a		38		sec		                SEC
.19775b		6b		rtl		                RTL
.19775c						KBD_GETMODS_ANSI
.19775c		0b		phd		                    PHD
.19775d		08		php		                    PHP
.19775e		48		pha		                PHA             ; begin setdp macro
.19775f		08		php		                PHP
.197760		c2 20		rep #$20	                REP #$20        ; set A long
.197762		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197765		5b		tcd		                TCD
.197766		28		plp		                PLP
.197767		68		pla		                PLA             ; end setdp macro
.197768		e2 30		sep #$30	                SEP #$30        ; set A&X short
.19776a		a9 00		lda #$00	                    LDA #0                      ; Make space for the result code
.19776c		48		pha		                    PHA
>0001						l_result            .byte ?
.19776d		a5 25		lda $0f25	                    LDA #S_KBD_CONTROL.MODIFIERS,D
.19776f		89 03		bit #$03	                    BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT
.197771		f0 06		beq $197779	                    BEQ check_alt
.197773		a3 01		lda $01,s	                    LDA l_result
.197775		09 02		ora #$02	                    ORA #%00000010
.197777		83 01		sta $01,s	                    STA l_result
.197779		a5 25		lda $0f25	check_alt           LDA #S_KBD_CONTROL.MODIFIERS,D
.19777b		89 30		bit #$30	                    BIT #KBD_MOD_LALT | KBD_MOD_RALT
.19777d		f0 06		beq $197785	                    BEQ check_ctrl
.19777f		a3 01		lda $01,s	                    LDA l_result
.197781		09 04		ora #$04	                    ORA #%00000100
.197783		83 01		sta $01,s	                    STA l_result
.197785		a5 25		lda $0f25	check_ctrl          LDA #S_KBD_CONTROL.MODIFIERS,D
.197787		89 0c		bit #$0c	                    BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL
.197789		f0 06		beq $197791	                    BEQ return_result
.19778b		a3 01		lda $01,s	                    LDA l_result
.19778d		09 08		ora #$08	                    ORA #%00001000
.19778f		83 01		sta $01,s	                    STA l_result
.197791		68		pla		return_result       PLA
.197792		28		plp		                    PLP
.197793		2b		pld		                    PLD
.197794		6b		rtl		                    RTL
.197795						KBD_GETLOCKS
.197795		0b		phd		                PHD
.197796		08		php		                PHP
.197797		48		pha		                PHA             ; begin setdp macro
.197798		08		php		                PHP
.197799		c2 20		rep #$20	                REP #$20        ; set A long
.19779b		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.19779e		5b		tcd		                TCD
.19779f		28		plp		                PLP
.1977a0		68		pla		                PLA             ; end setdp macro
.1977a1		e2 20		sep #$20	                SEP #$20        ; set A short
.1977a3		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D
.1977a5		28		plp		                PLP
.1977a6		2b		pld		                PLD
.1977a7		6b		rtl		                RTL
.1977a8						KBD_SETLOCKS
.1977a8		0b		phd		                PHD
.1977a9		08		php		                PHP
.1977aa		48		pha		                PHA             ; begin setdp macro
.1977ab		08		php		                PHP
.1977ac		c2 20		rep #$20	                REP #$20        ; set A long
.1977ae		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977b1		5b		tcd		                TCD
.1977b2		28		plp		                PLP
.1977b3		68		pla		                PLA             ; end setdp macro
.1977b4		e2 20		sep #$20	                SEP #$20        ; set A short
.1977b6		85 26		sta $0f26	                STA #S_KBD_CONTROL.LOCKS,D
.1977b8		28		plp		                PLP
.1977b9		2b		pld		                PLD
.1977ba		6b		rtl		                RTL
.1977bb						KBD_GET_CONTROL
.1977bb		0b		phd		                PHD
.1977bc		08		php		                PHP
.1977bd		48		pha		                PHA             ; begin setdp macro
.1977be		08		php		                PHP
.1977bf		c2 20		rep #$20	                REP #$20        ; set A long
.1977c1		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977c4		5b		tcd		                TCD
.1977c5		28		plp		                PLP
.1977c6		68		pla		                PLA             ; end setdp macro
.1977c7		e2 20		sep #$20	                SEP #$20        ; set A short
.1977c9		a5 01		lda $0f01	                LDA #S_KBD_CONTROL.CONTROL,D
.1977cb		28		plp		                PLP
.1977cc		2b		pld		                PLD
.1977cd		6b		rtl		                RTL
.1977ce						KBD_SET_CONTROL
.1977ce		0b		phd		                PHD
.1977cf		08		php		                PHP
.1977d0		48		pha		                PHA             ; begin setdp macro
.1977d1		08		php		                PHP
.1977d2		c2 20		rep #$20	                REP #$20        ; set A long
.1977d4		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977d7		5b		tcd		                TCD
.1977d8		28		plp		                PLP
.1977d9		68		pla		                PLA             ; end setdp macro
.1977da		e2 20		sep #$20	                SEP #$20        ; set A short
.1977dc		85 01		sta $0f01	                STA #S_KBD_CONTROL.CONTROL,D
.1977de		28		plp		                PLP
.1977df		2b		pld		                PLD
.1977e0		6b		rtl		                RTL
.1977e1						KBD_GETCW
.1977e1		22 ed 77 19	jsl $1977ed	                JSL KBD_GETC
.1977e5		c9 00		cmp #$00	                CMP #0
.1977e7		f0 01		beq $1977ea	                BEQ wait
.1977e9		6b		rtl		                RTL
.1977ea		cb		wai		wait            WAI
.1977eb		80 f4		bra $1977e1	                BRA KBD_GETCW
.1977ed						KBD_GETC
.1977ed		0b		phd		                PHD
.1977ee		08		php		                PHP
.1977ef		48		pha		                PHA             ; begin setdp macro
.1977f0		08		php		                PHP
.1977f1		c2 20		rep #$20	                REP #$20        ; set A long
.1977f3		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.1977f6		5b		tcd		                TCD
.1977f7		28		plp		                PLP
.1977f8		68		pla		                PLA             ; end setdp macro
.1977f9		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1977fb		22 a4 76 19	jsl $1976a4	                JSL KBD_CHAR_DEQUEUE        ; Try to fetch a character from the character queue
.1977ff		c9 00		cmp #$00	                CMP #0                      ; Did we get anything back?
.197801		f0 03		beq $197806	                BEQ get_scancode            ; No: try to get a scan code
.197803		82 cb 00	brl $1978d1	                BRL done                    ; Yes: return the character we had queued
.197806		22 df 76 19	jsl $1976df	get_scancode    JSL KBD_GET_SCANCODE        ; Fetch the next scancode
.19780a		c9 00		cmp #$00	                CMP #0                      ; Is it NUL?
.19780c		d0 04		bne $197812	                BNE chk_make_break
.19780e		28		plp		                PLP                         ; Yes: return 0... we got nothin
.19780f		38		sec		                SEC
.197810		2b		pld		                PLD
.197811		6b		rtl		                RTL
.197812		89 80		bit #$80	chk_make_break  BIT #$80                    ; Is it a break scan code?
.197814		d0 08		bne $19781e	                BNE handle_break            ; Yes: process the break
.197816		c9 2a		cmp #$2a	handle_make     CMP #KBD_SC_LSHIFT          ; Is it a make LSHIFT?
.197818		d0 0c		bne $197826	                BNE not_make_ls
.19781a		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.19781c		80 4e		bra $19786c	                BRA set_modifier
.19781e		c9 aa		cmp #$aa	handle_break    CMP #KBD_SC_LSHIFT | $80    ; Is it a break LSHIFT?
.197820		d0 0c		bne $19782e	                BNE not_break_ls
.197822		a9 01		lda #$01	                LDA #KBD_MOD_LSHIFT
.197824		80 50		bra $197876	                BRA clr_modifier
.197826		c9 1d		cmp #$1d	not_make_ls     CMP #KBD_SC_LCTRL           ; Is it a make LCTRL?
.197828		d0 0c		bne $197836	                BNE not_make_lc
.19782a		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.19782c		80 3e		bra $19786c	                BRA set_modifier
.19782e		c9 9d		cmp #$9d	not_break_ls    CMP #KBD_SC_LCTRL | $80     ; Is it a break LCTRL?
.197830		d0 0c		bne $19783e	                BNE not_break_lc
.197832		a9 04		lda #$04	                LDA #KBD_MOD_LCTRL
.197834		80 40		bra $197876	                BRA clr_modifier
.197836		c9 38		cmp #$38	not_make_lc     CMP #KBD_SC_LALT            ; Is it a make LALT?
.197838		d0 0c		bne $197846	                BNE not_make_la
.19783a		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.19783c		80 2e		bra $19786c	                BRA set_modifier
.19783e		c9 b8		cmp #$b8	not_break_lc    CMP #KBD_SC_LALT | $80      ; Is it a break LALT?
.197840		d0 0c		bne $19784e	                BNE not_break_la
.197842		a9 10		lda #$10	                LDA #KBD_MOD_LALT
.197844		80 30		bra $197876	                BRA clr_modifier
.197846		c9 36		cmp #$36	not_make_la     CMP #KBD_SC_RSHIFT          ; Is it a make RSHIFT?
.197848		d0 0c		bne $197856	                BNE not_make_rs
.19784a		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.19784c		80 1e		bra $19786c	                BRA set_modifier
.19784e		c9 b6		cmp #$b6	not_break_la    CMP #KBD_SC_RSHIFT | $80    ; Is it a break RSHIFT?
.197850		d0 0c		bne $19785e	                BNE not_break_rs
.197852		a9 02		lda #$02	                LDA #KBD_MOD_RSHIFT
.197854		80 20		bra $197876	                BRA clr_modifier
.197856		c9 5e		cmp #$5e	not_make_rs     CMP #KBD_SC_RCTRL           ; Is it a make RCTRL?
.197858		d0 0c		bne $197866	                BNE not_make_rc
.19785a		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.19785c		80 0e		bra $19786c	                BRA set_modifier
.19785e		c9 de		cmp #$de	not_break_rs    CMP #KBD_SC_RCTRL | $80     ; Is it a break RCTRL?
.197860		d0 0e		bne $197870	                BNE not_break_rc
.197862		a9 08		lda #$08	                LDA #KBD_MOD_RCTRL
.197864		80 10		bra $197876	                BRA clr_modifier
.197866		c9 5c		cmp #$5c	not_make_rc     CMP #KBD_SC_RALT            ; Is it a make RALT?
.197868		d0 12		bne $19787c	                BNE not_make_ra
.19786a		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.19786c		04 25		tsb $0f25	set_modifier    TSB #S_KBD_CONTROL.MODIFIERS,D  ; Set the indicated modifier bit
.19786e		80 08		bra $197878	                BRA return_null
.197870		c9 dc		cmp #$dc	not_break_rc    CMP #KBD_SC_RALT | $80          ; Is it a break RALT?
.197872		d0 04		bne $197878	                BNE return_null                 ; No: we don't use any other break scan codes
.197874		a9 20		lda #$20	                LDA #KBD_MOD_RALT
.197876		14 25		trb $0f25	clr_modifier    TRB #S_KBD_CONTROL.MODIFIERS,D  ; Clear the indicated modifier bit
.197878		a9 00		lda #$00	return_null     LDA #0
.19787a		80 55		bra $1978d1	                BRA done
.19787c		a8		tay		not_make_ra     TAY                                     ; Use the scan code as an index...
.19787d		c9 38		cmp #$38	                CMP #KBD_SC_PIVOT
.19787f		90 0e		bcc $19788f	                BLT below_38
.197881		a5 26		lda $0f26	                LDA #S_KBD_CONTROL.LOCKS,D              ; Check the NUM lock
.197883		89 02		bit #$02	                BIT #KBD_LOCK_NUMBER
.197885		f0 2a		beq $1978b1	                BEQ fetch_unmod                         ; No: translate the keys as unmodified
.197887		a5 25		lda $0f25	chk_num_shift   LDA #S_KBD_CONTROL.MODIFIERS,D
.197889		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Check for a shift key being pressed
.19788b		d0 24		bne $1978b1	                BNE fetch_unmod                         ; If so: translate the keys as modified
.19788d		80 30		bra $1978bf	                BRA fetch_caps                          ; No: translate the key using the lock table
.19788f		a5 25		lda $0f25	below_38        LDA #S_KBD_CONTROL.MODIFIERS,D
.197891		89 0c		bit #$0c	                BIT #KBD_MOD_LCTRL | KBD_MOD_RCTRL      ; Is either control key pressed?
.197893		f0 0c		beq $1978a1	                BEQ chk_capslock                        ; No: check for capslock
.197895		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.197897		f0 04		beq $19789d	                BEQ fetch_control                       ; No: translate just based off of control
.197899		b7 3b		lda [$0f3b],y	                LDA [#S_KBD_CONTROL.TBL_CTRL_SHIFT,D],Y ; Look up the key modfified by CTRL and SHIFT
.19789b		80 26		bra $1978c3	                BRA chk_ansi
.19789d		b7 2f		lda [$0f2f],y	fetch_control   LDA [#S_KBD_CONTROL.TBL_CTRL,D],Y       ; Look up the key modified by CONTROL
.19789f		80 22		bra $1978c3	                BRA chk_ansi
.1978a1		a5 26		lda $0f26	chk_capslock    LDA #S_KBD_CONTROL.LOCKS,D              ; Check the CAPS lock
.1978a3		89 04		bit #$04	                BIT #KBD_LOCK_CAPS
.1978a5		d0 0e		bne $1978b5	                BNE chk_caps_shift                      ; Yes: check the state of the SHIFT key
.1978a7		a5 25		lda $0f25	                LDA #S_KBD_CONTROL.MODIFIERS,D
.1978a9		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.1978ab		f0 04		beq $1978b1	                BEQ fetch_unmod                         ; No: translate just based off of control
.1978ad		b7 2b		lda [$0f2b],y	fetch_shifted   LDA [#S_KBD_CONTROL.TBL_SHIFT,D],Y      ; Look up the key modified by SHIFT
.1978af		80 12		bra $1978c3	                BRA chk_ansi
.1978b1		b7 27		lda [$0f27],y	fetch_unmod     LDA [#S_KBD_CONTROL.TBL_UNMOD,D],Y      ; Look up the unmodified key
.1978b3		80 0e		bra $1978c3	                BRA chk_ansi
.1978b5		a5 25		lda $0f25	chk_caps_shift  LDA #S_KBD_CONTROL.MODIFIERS,D
.1978b7		89 03		bit #$03	                BIT #KBD_MOD_LSHIFT | KBD_MOD_RSHIFT    ; Is either shift key pressed?
.1978b9		f0 04		beq $1978bf	                BEQ fetch_caps                          ; No: translate just based off of control
.1978bb		b7 37		lda [$0f37],y	                LDA [#S_KBD_CONTROL.TBL_LOCK_SHIFT,D],Y ; Look up the key modified by CAPS and SHIFT
.1978bd		80 04		bra $1978c3	                BRA chk_ansi
.1978bf		b7 33		lda [$0f33],y	fetch_caps      LDA [#S_KBD_CONTROL.TBL_LOCK,D],Y       ; Look up the key modified by CAPSLOCK
.1978c1		80 00		bra $1978c3	                BRA chk_ansi
.1978c3		c9 80		cmp #$80	chk_ansi        CMP #$80                                ; Check to see if we have an ANSI escape sequence to send
.1978c5		90 0a		bcc $1978d1	                BLT done                                ; If not, just return the character
.1978c7		c9 96		cmp #$96	                CMP #$96
.1978c9		b0 06		bcs $1978d1	                BGE done
.1978cb		22 0d 79 19	jsl $19790d	                JSL KBD_ENQ_ANSI                        ; Expand and enqueue the ANSI sequence
.1978cf		a9 1b		lda #$1b	                LDA #CHAR_ESC                           ; And return the ESC key to start the sequence
.1978d1		28		plp		done            PLP
.1978d2		2b		pld		                PLD
.1978d3		18		clc		                CLC
.1978d4		6b		rtl		                RTL
.1978d5						KBD_ENQUEUE_BCD
.1978d5		08		php		                PHP
.1978d6		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1978d8		48		pha		                PHA                     ; Save the value
.1978d9		4a		lsr a		                LSR A                   ; Get the 10s digit
.1978da		4a		lsr a		                LSR A
.1978db		4a		lsr a		                LSR A
.1978dc		4a		lsr a		                LSR A
.1978dd		c9 00		cmp #$00	                CMP #0                  ; If it's 0, move to the 1s digit
.1978df		f0 0b		beq $1978ec	                BEQ enqueue_1
.1978e1		c9 0a		cmp #$0a	                CMP #$0A                ; If it's out of range, ignore this whole call
.1978e3		b0 13		bcs $1978f8	                BGE done_A
.1978e5		18		clc		                CLC                     ; Enqueue the tens digit
.1978e6		69 30		adc #$30	                ADC #'0'
.1978e8		22 7f 76 19	jsl $19767f	                JSL KBD_CHAR_ENQUEUE
.1978ec		68		pla		enqueue_1       PLA                     ; Enqueue the ones digit
.1978ed		29 0f		and #$0f	                AND #$0F
.1978ef		18		clc		                CLC
.1978f0		69 30		adc #$30	                ADC #'0'
.1978f2		22 7f 76 19	jsl $19767f	                JSL KBD_CHAR_ENQUEUE
.1978f6		28		plp		done            PLP
.1978f7		6b		rtl		                RTL
.1978f8		68		pla		done_A          PLA
.1978f9		80 fb		bra $1978f6	                BRA done
.1978fb						KBD_BIN_TO_BCD
.1978fb		da		phx		                PHX
.1978fc		08		php		                PHP
.1978fd		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1978ff		aa		tax		                TAX
.197900		a9 99		lda #$99	                LDA #$99                ; Start with -1 in BCD form
.197902		f8		sed		                SED                     ; Switch to Decimal arithmetic
.197903		18		clc		loop            CLC
.197904		69 01		adc #$01	                ADC #1                  ; Add 1 with BCD arithmetic
.197906		ca		dex		                DEX                     ; Decrement input value in X
.197907		10 fa		bpl $197903	                BPL loop                ; loop until input value < 0
.197909		d8		cld		                CLD                     ; Switch back to Binary arithmetic
.19790a		28		plp		                PLP
.19790b		fa		plx		                PLX
.19790c		6b		rtl		                RTL
.19790d						KBD_ENQ_ANSI
.19790d		08		php		                PHP
.19790e		e2 30		sep #$30	                SEP #$30        ; set A&X short
.197910		c9 80		cmp #$80	                CMP #$80                        ; check to make sure the code is within range
.197912		b0 03		bcs $197917	                BGE chk_high_end
.197914		82 4a 00	brl $197961	                BRL done                        ; Out of range, just ignore it
.197917		c9 96		cmp #$96	chk_high_end    CMP #$96
.197919		90 03		bcc $19791e	                BLT save_value
.19791b		82 43 00	brl $197961	                BRL done                        ; Out of range, just ignore it
.19791e		48		pha		save_value      PHA
.19791f		a9 5b		lda #$5b	                LDA #'['
.197921		22 7f 76 19	jsl $19767f	                JSL KBD_CHAR_ENQUEUE
.197925		68		pla		                PLA
.197926		38		sec		                SEC
.197927		e9 80		sbc #$80	                SBC #$80                ; Convert to an offset
.197929		aa		tax		                TAX                     ; And use it as an index to...
.19792a		bf 63 79 19	lda $197963,x	                LDA @l ENCODE_CODE,X    ; Get the number
.19792e		10 0b		bpl $19793b	                BPL send_number         ; If MSB is not set, send the number as-is
.197930		29 7f		and #$7f	                AND #$7F                ; Remove the MSB
.197932		18		clc		                CLC
.197933		69 41		adc #$41	                ADC #'A'                ; Convert to 'A' .. 'D'
.197935		22 7f 76 19	jsl $19767f	                JSL KBD_CHAR_ENQUEUE    ; Enqueue the code
.197939		80 26		bra $197961	                BRA done
.19793b		22 fb 78 19	jsl $1978fb	send_number     JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.19793f		22 d5 78 19	jsl $1978d5	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.197943		22 5c 77 19	jsl $19775c	chk_modifier    JSL KBD_GETMODS_ANSI    ; Get the modifiers
.197947		c9 00		cmp #$00	                CMP #0                  ; Are there any?
.197949		f0 10		beq $19795b	                BEQ close               ; No: close the sequence
.19794b		48		pha		                PHA
.19794c		a9 3b		lda #$3b	                LDA #';'                ; Enqueue the separator
.19794e		22 7f 76 19	jsl $19767f	                JSL KBD_CHAR_ENQUEUE
.197952		68		pla		                PLA
.197953		22 fb 78 19	jsl $1978fb	                JSL KBD_BIN_TO_BCD      ; Convert A to BCD
.197957		22 d5 78 19	jsl $1978d5	                JSL KBD_ENQUEUE_BCD     ; Enqueue the BCD value
.19795b		a9 7e		lda #$7e	close           LDA #'~'                ; Enqueue closing code
.19795d		22 7f 76 19	jsl $19767f	                JSL KBD_CHAR_ENQUEUE
.197961		28		plp		done            PLP
.197962		6b		rtl		                RTL
>197963		01 02 03 04 05 06		ENCODE_CODE     .byte 1, 2, 3, 4, 5, 6      ; Insert, etc...
>197969		80 81 82 83			                .byte $80, $81, $82, $83    ; Cursor keys
>19796d		0b 0c 0d 0e 0f			                .byte 11, 12, 13, 14, 15    ; F1 - F5
>197972		11 12 13 14 15			                .byte 17, 18, 19, 20, 21    ; F6 - F10
>197977		17 18				                .byte 23, 24                ; F11 - F12
.197979						KBD_SETTABLE
.197979		48		pha		                PHA
.19797a		8b		phb		                PHB
.19797b		0b		phd		                PHD
.19797c		08		php		                PHP
.19797d		48		pha		                PHA             ; begin setdp macro
.19797e		08		php		                PHP
.19797f		c2 20		rep #$20	                REP #$20        ; set A long
.197981		a9 00 0f	lda #$0f00	                LDA #<>KBD_VARS         ; set DP to page 0
.197984		5b		tcd		                TCD
.197985		28		plp		                PLP
.197986		68		pla		                PLA             ; end setdp macro
.197987		e2 20		sep #$20	                SEP #$20        ; set A short
.197989		8b		phb		                PHB                 ; Get the data bank into A
.19798a		68		pla		                PLA
.19798b		c2 20		rep #$20	                REP #$20        ; set A long
.19798d		29 ff 00	and #$00ff	                AND #$00FF
.197990		85 29		sta $0f29	                STA #S_KBD_CONTROL.TBL_UNMOD+2,D
.197992		85 2d		sta $0f2d	                STA #S_KBD_CONTROL.TBL_SHIFT+2,D
.197994		85 31		sta $0f31	                STA #S_KBD_CONTROL.TBL_CTRL+2,D
.197996		85 35		sta $0f35	                STA #S_KBD_CONTROL.TBL_LOCK+2,D
.197998		85 39		sta $0f39	                STA #S_KBD_CONTROL.TBL_LOCK_SHIFT+2,D
.19799a		85 3d		sta $0f3d	                STA #S_KBD_CONTROL.TBL_CTRL_SHIFT+2,D
.19799c		86 27		stx $0f27	                STX #S_KBD_CONTROL.TBL_UNMOD,D
.19799e		86 2b		stx $0f2b	                STX #S_KBD_CONTROL.TBL_SHIFT,D
.1979a0		86 2f		stx $0f2f	                STX #S_KBD_CONTROL.TBL_CTRL,D
.1979a2		86 33		stx $0f33	                STX #S_KBD_CONTROL.TBL_LOCK,D
.1979a4		86 37		stx $0f37	                STX #S_KBD_CONTROL.TBL_LOCK_SHIFT,D
.1979a6		86 3b		stx $0f3b	                STX #S_KBD_CONTROL.TBL_CTRL_SHIFT,D
.1979a8		28		plp		                PLP
.1979a9		2b		pld		                PLD
.1979aa		ab		plb		                PLB
.1979ab		68		pla		                PLA
.1979ac		6b		rtl		                RTL
>1979ad						.align 256
>197a00		00 01 02 03 04 05 06 07		TBL_SET1        .byte $00, $01, $02, $03, $04, $05, $06, $07    ; $00 - $07
>197a08		08 09 0a 0b 0c 0d 0e 0f		                .byte $08, $09, $0A, $0B, $0C, $0D, $0E, $0F    ; $08 - $0F
>197a10		10 11 12 13 14 15 16 17		                .byte $10, $11, $12, $13, $14, $15, $16, $17    ; $10 - $17
>197a18		18 19 1a 1b 1c 1d 1e 1f		                .byte $18, $19, $1A, $1B, $1C, $1D, $1E, $1F    ; $18 - $1F
>197a20		20 21 22 23 24 25 26 27		                .byte $20, $21, $22, $23, $24, $25, $26, $27    ; $20 - $27
>197a28		28 29 2a 2b 2c 2d 2e 2f		                .byte $28, $29, $2A, $2B, $2C, $2D, $2E, $2F    ; $28 - $2F
>197a30		30 31 32 33 34 35 36 37		                .byte $30, $31, $32, $33, $34, $35, $36, $37    ; $30 - $37
>197a38		38 39 3a 3b 3c 3d 3e 3f		                .byte $38, $39, $3A, $3B, $3C, $3D, $3E, $3F    ; $38 - $3F
>197a40		40 41 42 43 44 45 46 47		                .byte $40, $41, $42, $43, $44, $45, $46, $47    ; $40 - $47
>197a48		48 49 4a 4b 4c 4d 4e 4f		                .byte $48, $49, $4A, $4B, $4C, $4D, $4E, $4F    ; $48 - $4F
>197a50		50 51 52 53 54 55 56 57		                .byte $50, $51, $52, $53, $54, $55, $56, $57    ; $50 - $57
>197a58		58 00 00 00 00 00 00 00		                .byte $58, $00, $00, $00, $00, $00, $00, $00    ; $58 - $5F
>197a60		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197a68		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197a70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197a78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
>197a80		00 00 00 00 00 00 00 00		TBL_SET1_E0     .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $00 - $07
>197a88		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $08 - $0F
>197a90		70 00 00 00 00 00 00 00		                .byte $70, $00, $00, $00, $00, $00, $00, $00    ; $10 - $17
>197a98		00 71 00 00 6d 5e 00 00		                .byte $00, $71, $00, $00, $6D, $5E, $00, $00    ; $18 - $1F
>197aa0		72 00 6e 00 6f 00 00 00		                .byte $72, $00, $6E, $00, $6F, $00, $00, $00    ; $20 - $27
>197aa8		00 00 00 00 00 00 73 00		                .byte $00, $00, $00, $00, $00, $00, $73, $00    ; $28 - $2F
>197ab0		74 00 00 00 00 6c 00 00		                .byte $74, $00, $00, $00, $00, $6C, $00, $00    ; $30 - $37
>197ab8		5c 00 00 00 00 00 00 00		                .byte $5C, $00, $00, $00, $00, $00, $00, $00    ; $38 - $3F
>197ac0		00 00 00 00 00 00 61 63		                .byte $00, $00, $00, $00, $00, $00, $61, $63    ; $40 - $47
>197ac8		68 64 00 69 00 6b 00 66		                .byte $68, $64, $00, $69, $00, $6B, $00, $66    ; $48 - $4F
>197ad0		6a 67 62 65 00 00 00 00		                .byte $6A, $67, $62, $65, $00, $00, $00, $00    ; $50 - $57
>197ad8		00 00 00 00 00 5d 00 00		                .byte $00, $00, $00, $00, $00, $5D, $00, $00    ; $58 - $5F
>197ae0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $60 - $67
>197ae8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $68 - $6F
>197af0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $70 - $77
>197af8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00    ; $78 - $7F
.197b00						KBD_STATE_MACH
>197b00		00 e0 01 00			                .byte KBD_STATE_IDLE, $E0, KBD_STATE_E0, 0                          ; IDLE =[E0]=> STATE_E0
>197b04		00 e1 04 00			                .byte KBD_STATE_IDLE, $E1, KBD_STATE_E1, 0                          ; IDLE =[E1]=> STATE_E1
>197b08		00 00 00 01			                .byte KBD_STATE_IDLE, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_BASE       ; IDLE =[default]=> IDLE / emit(TBL_SET1[x])
>197b0c		01 2a 02 00			                .byte KBD_STATE_E0, $2A, KBD_STATE_E02A, 0                          ; STATE_E0 =[2A]=> STATE_E02A
>197b10		01 b7 09 00			                .byte KBD_STATE_E0, $B7, KBD_STATE_E0B7, 0                          ; STATE_E0 =[B7]=> STATE_E0B7
>197b14		01 00 00 02			                .byte KBD_STATE_E0, 0, KBD_STATE_IDLE, KBD_ACTION_EMIT_E0           ; STATE_E0 =[default]=> IDLE, emit(TBL_SET1_E0[x])
>197b18		02 e0 03 00			                .byte KBD_STATE_E02A, $E0, KBD_STATE_E02AE0, 0                      ; STATE_E02A =[E0]=> STATE_E02AE0
>197b1c		02 00 00 00			                .byte KBD_STATE_E02A, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E02A =[default]=> IDLE, ignore(x)
>197b20		03 37 00 60			                .byte KBD_STATE_E02AE0, $37, KBD_STATE_IDLE, $60                    ; STATE_E02AE0 =[37]=> IDLE, emit(make{PrintScreen})
>197b24		03 00 00 00			                .byte KBD_STATE_E02AE0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E02AE0 =[default]=> IDLE, ignore(x)
>197b28		09 e0 0a 00			                .byte KBD_STATE_E0B7, $E0, KBD_STATE_E0B7E0, 0                      ; STATE_E0B7 =[E0]=> STATE_E0B7E0
>197b2c		09 00 00 00			                .byte KBD_STATE_E0B7, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E0B7 =[default]=> IDLE, ignore(x)
>197b30		0a aa 00 e0			                .byte KBD_STATE_E0B7E0, $AA, KBD_STATE_IDLE, $E0                    ; STATE_E0B7E0 =[AA]=> IDLE, emit(break{PrintScreen})
>197b34		0a 00 00 00			                .byte KBD_STATE_E0B7E0, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E0B7E0 =[default]=> IDLE, ignore(x)
>197b38		04 1d 05 00			                .byte KBD_STATE_E1, $1D, KBD_STATE_E11D, 0                          ; STATE_E1 =[1D]=> STATE_E11D
>197b3c		04 00 00 00			                .byte KBD_STATE_E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE            ; STATE_E1 =[default]=> IDLE, ignore(x)
>197b40		05 45 06 00			                .byte KBD_STATE_E11D, $45, KBD_STATE_E11D45, 0                      ; STATE_E11D =[45]=> STATE_E11D45
>197b44		05 00 00 00			                .byte KBD_STATE_E11D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE          ; STATE_E11D =[default]=> IDLE, ignore(x)
>197b48		06 e1 07 00			                .byte KBD_STATE_E11D45, $E1, KBD_STATE_E11D45E1, 0                  ; STATE_E11D45 =[E1]=> STATE_E11D45E1
>197b4c		06 00 00 00			                .byte KBD_STATE_E11D45, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE        ; STATE_E11D45 =[default]=> IDLE, ignore(x)
>197b50		07 9d 08 00			                .byte KBD_STATE_E11D45E1, $9D, KBD_STATE_E11D45E19D, 0              ; STATE_E11D45E1 =[9D]=> STATE_E11D45E19D
>197b54		07 00 00 00			                .byte KBD_STATE_E11D45E1, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE      ; STATE_E11D45E1 =[default]=> IDLE, ignore(x)
>197b58		08 c5 00 61			                .byte KBD_STATE_E11D45E19D, $C5, KBD_STATE_IDLE, $61                ; STATE_E11D45E19D =[C5]=> IDLE, emit(make{Pause})
>197b5c		08 00 00 00			                .byte KBD_STATE_E11D45E19D, 0, KBD_STATE_IDLE, KBD_ACTION_IGNORE    ; STATE_E11D45E19D =[default]=> IDLE, ignore(x)
>197b60		ff ff ff ff			                .byte $FF, $FF, $FF, $FF                                            ; End of state machine
>197b64						.align 256
>197c00		00 1b 31 32 33 34 35 36		SC_US_UNMOD     .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197c08		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197c10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197c18		6f 70 5b 5d 0d 00 61 73		                .byte 'o', 'p', '[', ']', $0D, $00, 'a', 's'                        ; $18 - $1F
>197c20		64 66 67 68 6a 6b 6c 3b		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ';'                        ; $20 - $27
>197c28		27 60 00 5c 7a 78 63 76		                .byte $27, '`', $00, '\', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197c30		62 6e 6d 2c 2e 2f 00 2a		                .byte 'b', 'n', 'm', ',', '.', '/', $00, '*'                        ; $30 - $37
>197c38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197c40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197c48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197c50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197c58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197c60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197c68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197c70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197c78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197c80		00 1b 21 40 23 24 25 5e		SC_US_SHFT      .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197c88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197c90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197c98		4f 50 7b 7d 0a 00 41 53		                .byte 'O', 'P', '{', '}', $0A, $00, 'A', 'S'                        ; $18 - $1F
>197ca0		44 46 47 48 4a 4b 4c 3a		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':'                        ; $20 - $27
>197ca8		22 7e 00 7c 5a 58 43 56		                .byte $22, '~', $00, '|', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>197cb0		42 4e 4d 3c 3e 3f 00 00		                .byte 'B', 'N', 'M', '<', '>', '?', $00, $00                        ; $30 - $37
>197cb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197cc0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197cc8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197cd0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197cd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197ce0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197ce8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197cf0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197cf8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197d00		00 1b 31 32 33 34 35 1e		SC_US_CTRL      .byte $00, $1B, '1', '2', '3', '4', '5', $1E                        ; $00 - $07
>197d08		37 38 39 30 1f 3d 08 09		                .byte '7', '8', '9', '0', $1F, '=', $08, $09                        ; $08 - $0F
>197d10		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197d18		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197d20		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197d28		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197d30		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197d38		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197d40		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197d48		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197d50		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197d58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197d60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197d68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197d70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197d78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197d80		00 1b 31 32 33 34 35 36		SC_US_LOCK      .byte $00, $1B, '1', '2', '3', '4', '5', '6'                        ; $00 - $07
>197d88		37 38 39 30 2d 3d 08 09		                .byte '7', '8', '9', '0', '-', '=', $08, $09                        ; $08 - $0F
>197d90		51 57 45 52 54 59 55 49		                .byte 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I'                        ; $10 - $17
>197d98		4f 50 5b 5d 0d 00 41 53		                .byte 'O', 'P', '[', ']', $0D, $00, 'A', 'S'                        ; $18 - $1F
>197da0		44 46 47 48 4a 4b 4c 3b		                .byte 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'                        ; $20 - $27
>197da8		27 60 00 5c 5a 58 43 56		                .byte $27, '`', $00, '\', 'Z', 'X', 'C', 'V'                        ; $28 - $2F
>197db0		42 4e 4d 2c 2e 2f 00 00		                .byte 'B', 'N', 'M', ',', '.', '/', $00, $00                        ; $30 - $37
>197db8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197dc0		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197dc8		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197dd0		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197dd8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197de0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197de8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197df0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197df8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197e00		00 1b 21 40 23 24 25 5e		SC_US_LOCK_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197e08		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197e10		71 77 65 72 74 79 75 69		                .byte 'q', 'w', 'e', 'r', 't', 'y', 'u', 'i'                        ; $10 - $17
>197e18		6f 70 7b 7d 0a 00 61 73		                .byte 'o', 'p', '{', '}', $0A, $00, 'a', 's'                        ; $18 - $1F
>197e20		64 66 67 68 6a 6b 6c 3a		                .byte 'd', 'f', 'g', 'h', 'j', 'k', 'l', ':'                        ; $20 - $27
>197e28		22 7e 00 7c 7a 78 63 76		                .byte $22, '~', $00, '|', 'z', 'x', 'c', 'v'                        ; $28 - $2F
>197e30		62 6e 6d 3c 3e 3f 00 00		                .byte 'b', 'n', 'm', '<', '>', '?', $00, $00                        ; $30 - $37
>197e38		00 20 00 00 00 00 00 00		                .byte $00, ' ', $00, $00, $00, $00, $00, $00                        ; $38 - $3F
>197e40		8f 90 91 92 93 00 00 37		                .byte $8F, $90, $91, $92, $93, $00, $00, '7'                        ; $40 - $47
>197e48		38 39 2d 34 35 36 2b 31		                .byte '8', '9', '-', '4', '5', '6', '+', '1'                        ; $48 - $4F
>197e50		32 33 30 2e 00 00 00 94		                .byte '2', '3', '0', '.', $00, $00, $00, $94                        ; $50 - $57
>197e58		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197e60		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197e68		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197e70		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197e78		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F
>197e80		00 1b 21 40 23 24 25 5e		SC_US_CTRL_SHFT .byte $00, $1B, '!', '@', '#', '$', '%', '^'                        ; $00 - $07
>197e88		26 2a 28 29 5f 2b 08 09		                .byte '&', '*', '(', ')', '_', '+', $08, $09                        ; $08 - $0F
>197e90		11 17 05 12 14 19 15 09		                .byte $11, $17, $05, $12, $14, $19, $15, $09                        ; $10 - $17
>197e98		0f 10 1b 1d 0a 00 01 13		                .byte $0F, $10, $1B, $1D, $0A, $00, $01, $13                        ; $18 - $1F
>197ea0		04 06 07 08 0a 0b 0c 3b		                .byte $04, $06, $07, $08, $0A, $0B, $0C, ';'                        ; $20 - $27
>197ea8		22 60 00 5c 1a 18 03 16		                .byte $22, '`', $00, '\', $1A, $18, $03, $16                        ; $28 - $2F
>197eb0		02 0e 0d 2c 2e 1c 00 00		                .byte $02, $0E, $0D, ',', '.', $1C, $00, $00                        ; $30 - $37
>197eb8		00 20 00 8a 8b 8c 8d 8e		                .byte $00, ' ', $00, $8A, $8B, $8C, $8D, $8E                        ; $38 - $3F
>197ec0		8f 90 91 92 93 00 00 80		                .byte $8F, $90, $91, $92, $93, $00, $00, $80                        ; $40 - $47
>197ec8		86 84 2d 89 35 88 2b 83		                .byte $86, $84, '-', $89, '5', $88, '+', $83                        ; $48 - $4F
>197ed0		87 85 81 82 00 00 00 94		                .byte $87, $85, $81, $82, $00, $00, $00, $94                        ; $50 - $57
>197ed8		95 00 00 00 00 00 00 00		                .byte $95, $00, $00, $00, $00, $00, $00, $00                        ; $58 - $5F
>197ee0		00 00 81 80 84 82 83 85		                .byte $00, $00, $81, $80, $84, $82, $83, $85                        ; $60 - $67
>197ee8		86 89 87 88 2f 0d 00 00		                .byte $86, $89, $87, $88, '/', $0D, $00, $00                        ; $68 - $6F
>197ef0		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $70 - $77
>197ef8		00 00 00 00 00 00 00 00		                .byte $00, $00, $00, $00, $00, $00, $00, $00                        ; $78 - $7F

;******  Return to file: src\kernel.asm


;******  Processing file: src\drivers/mouse_driver.asm

.197f00		48		pha		IINITMOUSE      PHA
.197f01		da		phx		                PHX
.197f02		0b		phd		                PHD
.197f03		08		php		                PHP
.197f04		e2 20		sep #$20	                SEP #$20        ; set A short
.197f06		c2 10		rep #$10	                REP #$10        ; set X long
.197f08		18		clc		                CLC
.197f09		a2 ff ff	ldx #$ffff	                LDX #$FFFF
.197f0c						DO_CMD_A9_AGAIN
.197f0c		20 b2 0c	jsr $190cb2	                JSR Poll_Inbuf
.197f0f		a9 a9		lda #$a9	                LDA #$A9                ; Tests second PS2 Channel
.197f11		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF
.197f15		20 97 7f	jsr $197f97	                JSR Poll_Outbuf_Mouse_TimeOut ;
.197f18		af 03 18 af	lda $af1803					LDA KBD_OUT_BUF		    ; Clear the Output buffer
.197f1c		c9 00		cmp #$00	                CMP #$00
.197f1e		d0 ec		bne $197f0c	                BNE DO_CMD_A9_AGAIN
.197f20		a9 f6		lda #$f6	                LDA #$F6                ;Tell the mouse to use default settings
.197f22		20 6b 7f	jsr $197f6b	                JSR MOUSE_WRITE
.197f25		20 80 7f	jsr $197f80	                JSR MOUSE_READ
.197f28		a9 e8		lda #$e8	                LDA #$E8
.197f2a		20 6b 7f	jsr $197f6b	                JSR MOUSE_WRITE
.197f2d		20 80 7f	jsr $197f80	                JSR MOUSE_READ
.197f30		a9 00		lda #$00	                LDA #$00
.197f32		20 6b 7f	jsr $197f6b	                JSR MOUSE_WRITE
.197f35		20 80 7f	jsr $197f80	                JSR MOUSE_READ
.197f38		a9 f4		lda #$f4	                LDA #$F4                ; Enable the Mouse
.197f3a		20 6b 7f	jsr $197f6b	                JSR MOUSE_WRITE
.197f3d		20 80 7f	jsr $197f80	                JSR MOUSE_READ
.197f40		a9 00		lda #$00	                LDA #$00
.197f42		8f e0 00 00	sta $0000e0	                STA MOUSE_PTR
.197f46		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.197f4a		29 80		and #$80	                AND #FNX0_INT07_MOUSE
.197f4c		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.197f50		af 4c 01 00	lda $00014c	                LDA @lINT_MASK_REG0
.197f54		29 7f		and #$7f	                AND #~FNX0_INT07_MOUSE
.197f56		8f 4c 01 00	sta $00014c	                STA @lINT_MASK_REG0
.197f5a		c2 10		rep #$10	                REP #$10        ; set X long
.197f5c		a2 52 83	ldx #$8352	                LDX #<>Success_ms_init
.197f5f		80 03		bra $197f64	                BRA InitMsSuccess
.197f61		a2 89 83	ldx #$8389	initms_loop_out LDX #<>Failed_ms_init
.197f64						InitMsSuccess
.197f64		c2 20		rep #$20	                REP #$20        ; set A long
.197f66		28		plp		                PLP
.197f67		2b		pld		                PLD
.197f68		fa		plx		                PLX
.197f69		68		pla		                PLA
.197f6a		6b		rtl		                RTL
.197f6b						MOUSE_WRITE
.197f6b		e2 20		sep #$20	                SEP #$20        ; set A short
.197f6d		48		pha		                PHA
.197f6e		20 b2 0c	jsr $190cb2	                JSR Poll_Inbuf          ; Test bit $01 (if 2, Full)
.197f71		a9 d4		lda #$d4	                LDA #$D4
.197f73		8f 07 18 af	sta $af1807	                STA KBD_CMD_BUF         ; KBD_CMD_BUF		= $AF1064
.197f77		20 b2 0c	jsr $190cb2	                JSR Poll_Inbuf
.197f7a		68		pla		                PLA
.197f7b		8f 03 18 af	sta $af1803	                STA KBD_DATA_BUF        ; KBD_DATA_BUF	= $AF1060
.197f7f		60		rts		                RTS
.197f80						MOUSE_READ
.197f80		e2 20		sep #$20	                SEP #$20        ; set A short
.197f82		20 8a 7f	jsr $197f8a	                JSR Poll_Outbuf_Mouse   ; Test bit $01 (if 1, Full)
.197f85		af 03 18 af	lda $af1803	                LDA KBD_INPT_BUF        ; KBD_INPT_BUF	= $AF1060
.197f89		60		rts		                RTS
.197f8a						Poll_Outbuf_Mouse
.197f8a		e2 20		sep #$20	                SEP #$20        ; set A short
.197f8c		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.197f90		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197f92		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197f94		d0 f4		bne $197f8a	                BNE Poll_Outbuf_Mouse
.197f96		60		rts		                RTS
.197f97						Poll_Outbuf_Mouse_TimeOut
.197f97		e2 20		sep #$20	                SEP #$20        ; set A short
.197f99		af 07 18 af	lda $af1807	                LDA STATUS_PORT
.197f9d		29 01		and #$01	                AND #OUT_BUF_FULL       ; Test bit $01 (if 1, Full)
.197f9f		c9 01		cmp #$01	                CMP #OUT_BUF_FULL
.197fa1		f0 08		beq $197fab	                BEQ Poll_OutbufWeAreDone
.197fa3		ca		dex		                DEX
.197fa4		e0 00 00	cpx #$0000	                CPX #$0000
.197fa7		d0 ee		bne $197f97	                BNE Poll_Outbuf_Mouse_TimeOut
.197fa9		80 b6		bra $197f61	                BRA initms_loop_out
.197fab						Poll_OutbufWeAreDone:
.197fab		60		rts		                RTS
.197fac						MOUSE_INTERRUPT
.197fac		0b		phd		                PHD
.197fad		08		php		                PHP
.197fae						                setasx
.197fae		78		sei		                SEI
.197faf		48		pha		                PHA             ; begin setdp macro
.197fb0		08		php		                PHP
.197fb1		c2 20		rep #$20	                REP #$20        ; set A long
.197fb3		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.197fb6		5b		tcd		                TCD
.197fb7		28		plp		                PLP
.197fb8		68		pla		                PLA             ; end setdp macro
.197fb9		a6 e0		ldx $e0		                LDX @b MOUSE_PTR                ; Get the # of the mouse byte to write
.197fbb		af 03 18 af	lda $af1803	                LDA @l KBD_INPT_BUF             ; Get the byte from the PS/2 interface
.197fbf		9f 06 07 af	sta $af0706,x	                STA @l MOUSE_PTR_BYTE0,X        ; Store it into the correct Vicky register
.197fc3		e8		inx		                INX                             ; Move to the next byte
.197fc4		e0 03 00	cpx #$0003	                CPX #$03                        ; Have we written 3 bytes?
.197fc7		d0 1b		bne $197fe4	                BNE save_ptr                    ; No: return and wait for the next mouse interrupt
.197fc9		af 02 07 af	lda $af0702	                LDA @l MOUSE_PTR_X_POS_L
.197fcd		85 e1		sta $e1		                STA @b MOUSE_POS_X_LO
.197fcf		af 03 07 af	lda $af0703	                LDA @l MOUSE_PTR_X_POS_H
.197fd3		85 e2		sta $e2		                STA @b MOUSE_POS_X_HI
.197fd5		af 04 07 af	lda $af0704	                LDA @l MOUSE_PTR_Y_POS_L
.197fd9		85 e3		sta $e3		                STA @b MOUSE_POS_Y_LO
.197fdb		af 05 07 af	lda $af0705	                LDA @l MOUSE_PTR_Y_POS_H
.197fdf		85 e4		sta $e4		                STA @b MOUSE_POS_Y_HI
.197fe1		a2 00 00	ldx #$0000	                LDX #0                          ; Reset our state machine to the beginning
.197fe4		86 e0		stx $e0		save_ptr        STX @b MOUSE_PTR                ; Save our next byte position (state)
.197fe6		28		plp		                PLP
.197fe7		2b		pld		                PLD
.197fe8		6b		rtl		                RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/boot_sound.asm

.197fe9						BOOT_SOUND
.197fe9		48		pha		                PHA
.197fea		da		phx		                PHX
.197feb		08		php		                PHP
.197fec		e2 20		sep #$20	                SEP #$20        ; set A short
.197fee		a9 00		lda #$00	                LDA #0
.197ff0		a2 00 00	ldx #$0000	                LDX #0
.197ff3		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.197ff7		e8		inx		                INX                             ; Move to the next SID register
.197ff8		e0 18 00	cpx #$0018	                CPX #24
.197ffb		d0 f6		bne $197ff3	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.197ffd		a9 29		lda #$29	                LDA #$29                        ; Attack = 2, Decay = 9
.197fff		8f 05 e4 af	sta $afe405	                STA @l SID0_V1_ATCK_DECY
.198003		8f 0c e4 af	sta $afe40c	                STA @l SID0_V2_ATCK_DECY
.198007		8f 13 e4 af	sta $afe413	                STA @l SID0_V3_ATCK_DECY
.19800b		a9 1f		lda #$1f	                LDA #$1F                        ; Sustain = 1, Release = 5
.19800d		8f 06 e4 af	sta $afe406	                STA @l SID0_V1_SSTN_RLSE
.198011		8f 0d e4 af	sta $afe40d	                STA @l SID0_V2_SSTN_RLSE
.198015		8f 14 e4 af	sta $afe414	                STA @l SID0_V3_SSTN_RLSE
.198019		a9 0f		lda #$0f	                LDA #15                         ; Set the volume to max
.19801b		8f 18 e4 af	sta $afe418	                STA @l SID0_MODE_VOL
.19801f		a9 60		lda #$60	                LDA #96                         ; Set voice 1 to F-3
.198021		8f 00 e4 af	sta $afe400	                STA @l SID0_V1_FREQ_LO
.198025		a9 16		lda #$16	                LDA #22
.198027		8f 01 e4 af	sta $afe401	                STA @l SID0_V1_FREQ_HI
.19802b		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.19802d		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.198031		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.198034		22 dd 0f 19	jsl $190fdd	                JSL ILOOP_MS
.198038		a9 31		lda #$31	                LDA #49                         ; Set voice 2 to A-3
.19803a		8f 07 e4 af	sta $afe407	                STA @l SID0_V2_FREQ_LO
.19803e		a9 08		lda #$08	                LDA #8
.198040		8f 08 e4 af	sta $afe408	                STA @l SID0_V2_FREQ_HI
.198044		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.198046		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.19804a		a2 20 03	ldx #$0320	                LDX #800                        ; Wait to press the next key
.19804d		22 dd 0f 19	jsl $190fdd	                JSL ILOOP_MS
.198051		a9 87		lda #$87	                LDA #135                        ; Set voice 3 to C-3
.198053		8f 0e e4 af	sta $afe40e	                STA @l SID0_V3_FREQ_LO
.198057		a9 21		lda #$21	                LDA #33
.198059		8f 0f e4 af	sta $afe40f	                STA @l SID0_V3_FREQ_HI
.19805d		a9 11		lda #$11	                LDA #$11                        ; Turn on triangle wave
.19805f		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.198063		a2 20 4e	ldx #$4e20	                LDX #20000                      ; Hold down the keys, so to speak... for a while
.198066		22 dd 0f 19	jsl $190fdd	                JSL ILOOP_MS
.19806a		a9 10		lda #$10	                LDA #$10                        ; Release the keys...
.19806c		8f 04 e4 af	sta $afe404	                STA @l SID0_V1_CTRL
.198070		8f 0b e4 af	sta $afe40b	                STA @l SID0_V2_CTRL
.198074		8f 12 e4 af	sta $afe412	                STA @l SID0_V3_CTRL
.198078		a9 0e		lda #$0e	                LDA #14
.19807a		8f 18 e4 af	sta $afe418	dampen          STA @l SID0_MODE_VOL
.19807e		a2 64 00	ldx #$0064	                LDX #100
.198081		22 dd 0f 19	jsl $190fdd	                JSL ILOOP_MS
.198085		3a		dec a		                DEC A
.198086		d0 f2		bne $19807a	                BNE dampen
.198088		28		plp		                PLP
.198089		fa		plx		                PLX
.19808a		68		pla		                PLA
.19808b		6b		rtl		                RTL
.19808c						BOOT_SOUND_OFF
.19808c		48		pha		                PHA
.19808d		da		phx		                PHX
.19808e		08		php		                PHP
.19808f		a2 00 00	ldx #$0000	                LDX #0
.198092		9f 00 e4 af	sta $afe400,x	clr_loop        STA @l SID0_V1_FREQ_LO,X        ; Clear the SID register
.198096		e8		inx		                INX                             ; Move to the next SID register
.198097		e0 18 00	cpx #$0018	                CPX #24
.19809a		d0 f6		bne $198092	                BNE clr_loop                    ; Loop until we've cleared all the main ones
.19809c		28		plp		                PLP
.19809d		fa		plx		                PLX
.19809e		68		pla		                PLA
.19809f		6b		rtl		                RTL

;******  Return to file: src\kernel.asm

.1980a0						    KERNEL_DATA
>1980a0		20 20 20 20 0b 0c 0b 0c		    greet_msg   .text $20, $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, " UU    UU" ,$0D
>1980a8		0b 0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>1980b8		20 20 20 0b 0c 0b 0c 0b		                .text $20, $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>1980c0		0c 0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>1980cf		20 20 0b 0c 0b 0c 0b 0c		                .text $20, $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>1980d7		0b 0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>1980e5		20 0b 0c 0b 0c 0b 0c 0b		                .text $20, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UU    UU",$0D
>1980ed		0c 0b 0c 20 55 55 20 20 20 20 55 55 0d
>1980fa		0b 0c 0b 0c 0b 0c 0b 0c		                .text $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $0B, $0C, $20, "UUUUUUUU",$0D
>198102		0b 0c 20 55 55 55 55 55 55 55 55 0d
>19810e		0d 43 32 35 36 20 46 4f		                .text $0D, "C256 FOENIX U -- 1,572,864 Bytes Free", $0D
>198116		45 4e 49 58 20 55 20 2d 2d 20 31 2c 35 37 32 2c
>198126		38 36 34 20 42 79 74 65 73 20 46 72 65 65 0d
>198135		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com -- Kernel: "
>19813d		66 6f 65 6e 69 78 2e 63 6f 6d 20 2d 2d 20 4b 65
>19814d		72 6e 65 6c 3a 20

;******  Processing file: src\version.asm

>198153		76 30 2e 34 2e 30 2d 61		.text "v0.4.0-alpha+213 (2021-05-13)"
>19815b		6c 70 68 61 2b 32 31 33 20 28 32 30 32 31 2d 30
>19816b		35 2d 31 33 29

;******  Return to file: src\kernel.asm

>198170		0d 00				                .text $0D,$00
>198172		90 90 90 90 90 90 d0 d0		  greet_clr_line1 .text $90, $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>19817a		b0 b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19818a		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>19819a		f0 f0
>19819c		90 90 90 90 90 d0 d0 b0		  greet_clr_line2 .text $90, $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>1981a4		b0 a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1981b4		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1981c4		f0 f0
>1981c6		90 90 90 90 d0 d0 b0 b0		  greet_clr_line3 .text $90, $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>1981ce		a0 a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1981de		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>1981ee		f0 f0
>1981f0		90 90 90 d0 d0 b0 b0 a0		  greet_clr_line4 .text $90, $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>1981f8		a0 e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198208		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198218		f0 f0
>19821a		90 90 d0 d0 b0 b0 a0 a0		  greet_clr_line5 .text $90, $90, $D0, $D0, $B0, $B0, $A0, $A0, $E0, $E0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0, $F0
>198222		e0 e0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198232		f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0
>198242		f0 f0
>198244		00 00 00 ff			fg_color_lut	  .text $00, $00, $00, $FF
>198248		00 00 80 ff			                .text $00, $00, $80, $FF
>19824c		00 80 00 ff			                .text $00, $80, $00, $FF
>198250		80 00 00 ff			                .text $80, $00, $00, $FF
>198254		00 80 80 ff			                .text $00, $80, $80, $FF
>198258		80 80 00 ff			                .text $80, $80, $00, $FF
>19825c		80 00 80 ff			                .text $80, $00, $80, $FF
>198260		80 80 80 ff			                .text $80, $80, $80, $FF
>198264		00 45 ff ff			                .text $00, $45, $FF, $FF
>198268		13 45 8b ff			                .text $13, $45, $8B, $FF
>19826c		00 00 20 ff			                .text $00, $00, $20, $FF
>198270		00 20 00 ff			                .text $00, $20, $00, $FF
>198274		20 00 00 ff			                .text $20, $00, $00, $FF
>198278		20 20 20 ff			                .text $20, $20, $20, $FF
>19827c		40 40 40 ff			                .text $40, $40, $40, $FF
>198280		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>198284		00 00 00 ff			bg_color_lut	  .text $00, $00, $00, $FF
>198288		00 00 80 ff			                .text $00, $00, $80, $FF
>19828c		00 80 00 ff			                .text $00, $80, $00, $FF
>198290		80 00 00 ff			                .text $80, $00, $00, $FF
>198294		00 20 20 ff			                .text $00, $20, $20, $FF
>198298		20 20 00 ff			                .text $20, $20, $00, $FF
>19829c		20 00 20 ff			                .text $20, $00, $20, $FF
>1982a0		20 20 20 ff			                .text $20, $20, $20, $FF
>1982a4		1e 69 d2 ff			                .text $1E, $69, $D2, $FF
>1982a8		13 45 8b ff			                .text $13, $45, $8B, $FF
>1982ac		00 00 20 ff			                .text $00, $00, $20, $FF
>1982b0		00 20 00 ff			                .text $00, $20, $00, $FF
>1982b4		40 00 00 ff			                .text $40, $00, $00, $FF
>1982b8		10 10 10 ff			                .text $10, $10, $10, $FF
>1982bc		40 40 40 ff			                .text $40, $40, $40, $FF
>1982c0		ff ff ff ff			                .text $FF, $FF, $FF, $FF
>1982c4		43 6d 64 20 30 78 41 41		pass_tst0xAAmsg .text "Cmd 0xAA Test passed...", $0D, $00
>1982cc		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>1982dc		00
>1982dd		43 6d 64 20 30 78 41 42		pass_tst0xABmsg .text "Cmd 0xAB Test passed...", $0D, $00
>1982e5		20 54 65 73 74 20 70 61 73 73 65 64 2e 2e 2e 0d
>1982f5		00
>1982f6		43 6d 64 20 30 78 36 30		pass_cmd0x60msg .text "Cmd 0x60 Executed.", $0D, $00
>1982fe		20 45 78 65 63 75 74 65 64 2e 0d 00
>19830a		43 6d 64 20 30 78 46 46		pass_cmd0xFFmsg .text "Cmd 0xFF (Reset) Done.", $0D, $00
>198312		20 28 52 65 73 65 74 29 20 44 6f 6e 65 2e 0d 00
>198322		43 6d 64 20 30 78 45 45		pass_cmd0xEEmsg .text "Cmd 0xEE Echo Test passed...", $0D, $00
>19832a		20 45 63 68 6f 20 54 65 73 74 20 70 61 73 73 65
>19833a		64 2e 2e 2e 0d 00
>198340		4b 65 79 62 6f 61 72 64		Success_kb_init .text "Keyboard Present", $0D, $00
>198348		20 50 72 65 73 65 6e 74 0d 00
>198352		4d 6f 75 73 65 20 50 72		Success_ms_init .text "Mouse Present", $0D, $00
>19835a		65 73 65 6e 74 0d 00
>198361		4e 6f 20 4b 65 79 62 6f		Failed_kb_init  .text "No Keyboard Attached or Failed Init...", $0D, $00
>198369		61 72 64 20 41 74 74 61 63 68 65 64 20 6f 72 20
>198379		46 61 69 6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>198389		4e 6f 20 4d 6f 75 73 65		Failed_ms_init  .text "No Mouse Attached or Failed Init...", $0D, $00
>198391		20 41 74 74 61 63 68 65 64 20 6f 72 20 46 61 69
>1983a1		6c 65 64 20 49 6e 69 74 2e 2e 2e 0d 00
>1983ae		49 20 61 6d 20 73 74 75		IamStuckHeremsg .text "I am stuck here...", $0D, $00
>1983b6		63 6b 20 68 65 72 65 2e 2e 2e 0d 00
>1983c2		4e 4f 20 53 49 47 4e 41		bmp_parser_err0 .text "NO SIGNATURE FOUND.", $00
>1983ca		54 55 52 45 20 46 4f 55 4e 44 2e 00
>1983d6		42 4d 50 20 4c 4f 41 44		bmp_parser_msg0 .text "BMP LOADED.", $00
>1983de		45 44 2e 00
>1983e2		45 58 45 43 55 54 49 4e		bmp_parser_msg1 .text "EXECUTING BMP PARSER", $00
>1983ea		47 20 42 4d 50 20 50 41 52 53 45 52 00
>1983f7		49 44 45 20 48 44 44 20		IDE_HDD_Present_msg0 .text "IDE HDD Present:", $00
>1983ff		50 72 65 73 65 6e 74 3a 00
>198408		42 6f 6f 74 20 44 49 50		boot_invalid    .null "Boot DIP switch settings are invalid."
>198410		20 73 77 69 74 63 68 20 73 65 74 74 69 6e 67 73
>198420		20 61 72 65 20 69 6e 76 61 6c 69 64 2e 00
>19842e		50 72 65 73 73 20 52 20		boot_retry      .null "Press R to retry, B to go to BASIC.", 13
>198436		74 6f 20 72 65 74 72 79 2c 20 42 20 74 6f 20 67
>198446		6f 20 74 6f 20 42 41 53 49 43 2e 0d 00
>198453		55 6e 61 62 6c 65 20 74		sdc_err_boot    .null "Unable to read the SD card."
>19845b		6f 20 72 65 61 64 20 74 68 65 20 53 44 20 63 61
>19846b		72 64 2e 00
>19846f		55 6e 61 62 6c 65 20 74		ide_err_boot    .null "Unable to read from the IDE drive."
>198477		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>198487		49 44 45 20 64 72 69 76 65 2e 00
>198492		55 6e 61 62 6c 65 20 74		fdc_err_boot    .null "Unable to read from the floppy drive."
>19849a		6f 20 72 65 61 64 20 66 72 6f 6d 20 74 68 65 20
>1984aa		66 6c 6f 70 70 79 20 64 72 69 76 65 2e 00
>1984b8		42 6f 6f 74 69 6e 67 20		fdc_boot        .null "Booting from floppy..."
>1984c0		66 72 6f 6d 20 66 6c 6f 70 70 79 2e 2e 2e 00
>1984cf		42 6f 6f 74 69 6e 67 20		sdc_boot        .null "Booting from SDCard..."
>1984d7		66 72 6f 6d 20 53 44 43 61 72 64 2e 2e 2e 00
>1984e6		42 6f 6f 74 69 6e 67 20		ide_boot        .null "Booting from Hard Drive..."
>1984ee		66 72 6f 6d 20 48 61 72 64 20 44 72 69 76 65 2e
>1984fe		2e 2e 00
>198501		0d 52 45 41 44 59 2e 00		ready_msg       .null $0D,"READY."
>198509		41 42 4f 52 54 20 45 52		error_01        .null "ABORT ERROR"
>198511		52 4f 52 00
>198515		30 31 32 33 34 35 36 37		hex_digits      .text "0123456789ABCDEF",0
>19851d		38 39 41 42 43 44 45 46 00
>198526						.align 256
>198600		00 1b 31 32 33 34 35 36		ScanCode_Press_Set1   .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198608		37 38 39 30 2d 3d 08 09
>198610		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198618		6f 70 5b 5d 0d 00 61 73
>198620		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198628		27 60 00 5c 7a 78 63 76
>198630		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $81, $82, $83, $84, $85    ; $30
>198638		00 20 00 81 82 83 84 85
>198640		86 87 88 89 8a 00 00 00		                      .text $86, $87, $88, $89, $8A, $00, $00, $00, $11, $00, $00, $9D, $00, $1D, $00, $00    ; $40
>198648		11 00 00 9d 00 1d 00 00
>198650		91 00 00 00 00 00 00 8b		                      .text $91, $00, $00, $00, $00, $00, $00, $8B, $8C, $00, $00, $00, $00, $00, $00, $00    ; $50
>198658		8c 00 00 00 00 00 00 00
>198660		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198668		00 00 00 00 00 00 00 00
>198670		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198678		00 00 00 00 00 00 00 00
>198680		00 00 21 40 23 24 25 5e		ScanCode_Shift_Set1   .text $00, $00, $21, $40, $23, $24, $25, $5E, $26, $2A, $28, $29, $5F, $2B, $08, $09    ; $00
>198688		26 2a 28 29 5f 2b 08 09
>198690		51 57 45 52 54 59 55 49		                      .text $51, $57, $45, $52, $54, $59, $55, $49, $4F, $50, $7B, $7D, $0D, $00, $41, $53    ; $10
>198698		4f 50 7b 7d 0d 00 41 53
>1986a0		44 46 47 48 4a 4b 4c 3a		                      .text $44, $46, $47, $48, $4A, $4B, $4C, $3A, $22, $7E, $00, $7C, $5A, $58, $43, $56    ; $20
>1986a8		22 7e 00 7c 5a 58 43 56
>1986b0		42 4e 4d 3c 3e 3f 00 00		                      .text $42, $4E, $4D, $3C, $3E, $3F, $00, $00, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1986b8		00 20 00 00 00 00 00 00
>1986c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1986c8		00 00 00 00 00 00 00 00
>1986d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1986d8		00 00 00 00 00 00 00 00
>1986e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1986e8		00 00 00 00 00 00 00 00
>1986f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1986f8		00 00 00 00 00 00 00 00
>198700		00 1b 31 32 33 34 35 36		ScanCode_Ctrl_Set1    .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198708		37 38 39 30 2d 3d 08 09
>198710		11 17 05 12 14 19 15 09		                      .text $11, $17, $05, $12, $14, $19, $15, $09, $0F, $10, $5B, $5D, $0D, $00, $01, $13    ; $10
>198718		0f 10 5b 5d 0d 00 01 13
>198720		04 06 07 08 0a 0b 0c 3b		                      .text $04, $06, $07, $08, $0A, $0B, $0C, $3B, $27, $00, $00, $5C, $1A, $18, $03, $16    ; $20
>198728		27 00 00 5c 1a 18 03 16
>198730		02 0e 0d 2c 2e 2f 00 2a		                      .text $02, $0E, $0D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198738		00 20 00 00 00 00 00 00
>198740		00 00 00 00 00 18 00 00		                      .text $00, $00, $00, $00, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198748		00 00 00 00 00 00 00 00
>198750		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198758		00 00 00 00 00 00 00 00
>198760		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198768		00 00 00 00 00 00 00 00
>198770		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198778		00 00 00 00 00 00 00 00
>198780		00 1b 31 32 33 34 35 36		ScanCode_Alt_Set1     .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198788		37 38 39 30 2d 3d 08 09
>198790		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198798		6f 70 5b 5d 0d 00 61 73
>1987a0		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>1987a8		27 60 00 5c 7a 78 63 76
>1987b0		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>1987b8		00 20 00 00 00 00 00 00
>1987c0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>1987c8		00 00 00 00 00 00 00 00
>1987d0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1987d8		00 00 00 00 00 00 00 00
>1987e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1987e8		00 00 00 00 00 00 00 00
>1987f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1987f8		00 00 00 00 00 00 00 00
>198800		00 1b 31 32 33 34 35 36		ScanCode_NumLock_Set1 .text $00, $1B, $31, $32, $33, $34, $35, $36, $37, $38, $39, $30, $2D, $3D, $08, $09    ; $00
>198808		37 38 39 30 2d 3d 08 09
>198810		71 77 65 72 74 79 75 69		                      .text $71, $77, $65, $72, $74, $79, $75, $69, $6F, $70, $5B, $5D, $0D, $00, $61, $73    ; $10
>198818		6f 70 5b 5d 0d 00 61 73
>198820		64 66 67 68 6a 6b 6c 3b		                      .text $64, $66, $67, $68, $6A, $6B, $6C, $3B, $27, $60, $00, $5C, $7A, $78, $63, $76    ; $20
>198828		27 60 00 5c 7a 78 63 76
>198830		62 6e 6d 2c 2e 2f 00 2a		                      .text $62, $6E, $6D, $2C, $2E, $2F, $00, $2A, $00, $20, $00, $00, $00, $00, $00, $00    ; $30
>198838		00 20 00 00 00 00 00 00
>198840		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $40
>198848		00 00 00 00 00 00 00 00
>198850		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>198858		00 00 00 00 00 00 00 00
>198860		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>198868		00 00 00 00 00 00 00 00
>198870		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>198878		00 00 00 00 00 00 00 00
>198880		00 00 00 00 00 00 00 00		ScanCode_Prefix_Set1  .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $00
>198888		00 00 00 00 00 00 00 00
>198890		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $10
>198898		00 00 00 00 00 00 00 00
>1988a0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $20
>1988a8		00 00 00 00 00 00 00 00
>1988b0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $30
>1988b8		00 00 00 00 00 00 00 00
>1988c0		00 00 00 00 00 00 00 01		                      .text $00, $00, $00, $00, $00, $00, $00, $01, $11, $00, $00, $9D, $00, $1D, $00, $05    ; $40
>1988c8		11 00 00 9d 00 1d 00 05
>1988d0		91 00 0f 7f 00 00 00 00		                      .text $91, $00, $0F, $7F, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $50
>1988d8		00 00 00 00 00 00 00 00
>1988e0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $60
>1988e8		00 00 00 00 00 00 00 00
>1988f0		00 00 00 00 00 00 00 00		                      .text $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00    ; $70
>1988f8		00 00 00 00 00 00 00 00
>198900						.align 256
>198900		00 14 1c 21 26 2a 2e 31		GAMMA_2_2_Tbl         .text  $00, $14, $1c, $21, $26, $2a, $2e, $31, $34, $37, $3a, $3d, $3f, $41, $44, $46
>198908		34 37 3a 3d 3f 41 44 46
>198910		48 4a 4c 4e 50 51 53 55		                      .text  $48, $4a, $4c, $4e, $50, $51, $53, $55, $57, $58, $5a, $5b, $5d, $5e, $60, $61
>198918		57 58 5a 5b 5d 5e 60 61
>198920		63 64 66 67 68 6a 6b 6c		                      .text  $63, $64, $66, $67, $68, $6a, $6b, $6c, $6d, $6f, $70, $71, $72, $73, $75, $76
>198928		6d 6f 70 71 72 73 75 76
>198930		77 78 79 7a 7b 7c 7d 7e		                      .text  $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $80, $81, $82, $83, $84, $85, $86, $87
>198938		80 81 82 83 84 85 86 87
>198940		88 88 89 8a 8b 8c 8d 8e		                      .text  $88, $88, $89, $8a, $8b, $8c, $8d, $8e, $8f, $90, $91, $92, $93, $93, $94, $95
>198948		8f 90 91 92 93 93 94 95
>198950		96 97 98 99 99 9a 9b 9c		                      .text  $96, $97, $98, $99, $99, $9a, $9b, $9c, $9d, $9e, $9e, $9f, $a0, $a1, $a2, $a2
>198958		9d 9e 9e 9f a0 a1 a2 a2
>198960		a3 a4 a5 a5 a6 a7 a8 a8		                      .text  $a3, $a4, $a5, $a5, $a6, $a7, $a8, $a8, $a9, $aa, $ab, $ab, $ac, $ad, $ae, $ae
>198968		a9 aa ab ab ac ad ae ae
>198970		af b0 b0 b1 b2 b2 b3 b4		                      .text  $AF, $b0, $b0, $b1, $b2, $b2, $b3, $b4, $b5, $b5, $b6, $b7, $b7, $b8, $b9, $b9
>198978		b5 b5 b6 b7 b7 b8 b9 b9
>198980		ba bb bb bc bd bd be be		                      .text  $ba, $bb, $bb, $bc, $bd, $bd, $be, $be, $bf, $c0, $c0, $c1, $c2, $c2, $c3, $c4
>198988		bf c0 c0 c1 c2 c2 c3 c4
>198990		c4 c5 c5 c6 c7 c7 c8 c8		                      .text  $c4, $c5, $c5, $c6, $c7, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cb, $cc, $cd, $cd
>198998		c9 ca ca cb cb cc cd cd
>1989a0		ce ce cf d0 d0 d1 d1 d2		                      .text  $ce, $ce, $cf, $d0, $d0, $d1, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d5, $d6, $d6
>1989a8		d2 d3 d4 d4 d5 d5 d6 d6
>1989b0		d7 d8 d8 d9 d9 da da db		                      .text  $d7, $d8, $d8, $d9, $d9, $da, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $df
>1989b8		db dc dc dd de de df df
>1989c0		e0 e0 e1 e1 e2 e2 e3 e3		                      .text  $e0, $e0, $e1, $e1, $e2, $e2, $e3, $e3, $e4, $e4, $e5, $e5, $e6, $e6, $e7, $e7
>1989c8		e4 e4 e5 e5 e6 e6 e7 e7
>1989d0		e8 e8 e9 e9 ea ea eb eb		                      .text  $e8, $e8, $e9, $e9, $ea, $ea, $eb, $eb, $ec, $ec, $ed, $ed, $ee, $ee, $ef, $ef
>1989d8		ec ec ed ed ee ee ef ef
>1989e0		f0 f0 f1 f1 f2 f2 f3 f3		                      .text  $f0, $f0, $f1, $f1, $f2, $f2, $f3, $f3, $f4, $f4, $f5, $f5, $f6, $f6, $f7, $f7
>1989e8		f4 f4 f5 f5 f6 f6 f7 f7
>1989f0		f8 f8 f9 f9 f9 fa fa fb		                      .text  $f8, $f8, $f9, $f9, $f9, $fa, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $fe, $ff
>1989f8		fb fc fc fd fd fe fe ff
>198a00						.align 256
>198a00		00 0b 11 15 19 1c 1f 22		GAMMA_1_8_Tbl         .text  $00, $0b, $11, $15, $19, $1c, $1f, $22, $25, $27, $2a, $2c, $2e, $30, $32, $34
>198a08		25 27 2a 2c 2e 30 32 34
>198a10		36 38 3a 3c 3d 3f 41 43		                      .text  $36, $38, $3a, $3c, $3d, $3f, $41, $43, $44, $46, $47, $49, $4a, $4c, $4d, $4f
>198a18		44 46 47 49 4a 4c 4d 4f
>198a20		50 51 53 54 55 57 58 59		                      .text  $50, $51, $53, $54, $55, $57, $58, $59, $5b, $5c, $5d, $5e, $60, $61, $62, $63
>198a28		5b 5c 5d 5e 60 61 62 63
>198a30		64 65 67 68 69 6a 6b 6c		                      .text  $64, $65, $67, $68, $69, $6a, $6b, $6c, $6d, $6e, $70, $71, $72, $73, $74, $75
>198a38		6d 6e 70 71 72 73 74 75
>198a40		76 77 78 79 7a 7b 7c 7d		                      .text  $76, $77, $78, $79, $7a, $7b, $7c, $7d, $7e, $7f, $80, $81, $82, $83, $84, $84
>198a48		7e 7f 80 81 82 83 84 84
>198a50		85 86 87 88 89 8a 8b 8c		                      .text  $85, $86, $87, $88, $89, $8a, $8b, $8c, $8d, $8e, $8e, $8f, $90, $91, $92, $93
>198a58		8d 8e 8e 8f 90 91 92 93
>198a60		94 95 95 96 97 98 99 9a		                      .text  $94, $95, $95, $96, $97, $98, $99, $9a, $9a, $9b, $9c, $9d, $9e, $9f, $9f, $a0
>198a68		9a 9b 9c 9d 9e 9f 9f a0
>198a70		a1 a2 a3 a3 a4 a5 a6 a6		                      .text  $a1, $a2, $a3, $a3, $a4, $a5, $a6, $a6, $a7, $a8, $a9, $aa, $aa, $ab, $ac, $ad
>198a78		a7 a8 a9 aa aa ab ac ad
>198a80		ad ae af b0 b0 b1 b2 b3		                      .text  $ad, $ae, $af, $b0, $b0, $b1, $b2, $b3, $b3, $b4, $b5, $b6, $b6, $b7, $b8, $b8
>198a88		b3 b4 b5 b6 b6 b7 b8 b8
>198a90		b9 ba bb bb bc bd bd be		                      .text  $b9, $ba, $bb, $bb, $bc, $bd, $bd, $be, $bf, $bf, $c0, $c1, $c2, $c2, $c3, $c4
>198a98		bf bf c0 c1 c2 c2 c3 c4
>198aa0		c4 c5 c6 c6 c7 c8 c8 c9		                      .text  $c4, $c5, $c6, $c6, $c7, $c8, $c8, $c9, $ca, $ca, $cb, $cc, $cc, $cd, $ce, $ce
>198aa8		ca ca cb cc cc cd ce ce
>198ab0		cf d0 d0 d1 d2 d2 d3 d4		                      .text  $cf, $d0, $d0, $d1, $d2, $d2, $d3, $d4, $d4, $d5, $d6, $d6, $d7, $d7, $d8, $d9
>198ab8		d4 d5 d6 d6 d7 d7 d8 d9
>198ac0		d9 da db db dc dc dd de		                      .text  $d9, $da, $db, $db, $dc, $dc, $dd, $de, $de, $df, $e0, $e0, $e1, $e1, $e2, $e3
>198ac8		de df e0 e0 e1 e1 e2 e3
>198ad0		e3 e4 e4 e5 e6 e6 e7 e7		                      .text  $e3, $e4, $e4, $e5, $e6, $e6, $e7, $e7, $e8, $e9, $e9, $ea, $ea, $eb, $ec, $ec
>198ad8		e8 e9 e9 ea ea eb ec ec
>198ae0		ed ed ee ef ef f0 f0 f1		                      .text  $ed, $ed, $ee, $ef, $ef, $f0, $f0, $f1, $f1, $f2, $f3, $f3, $f4, $f4, $f5, $f5
>198ae8		f1 f2 f3 f3 f4 f4 f5 f5
>198af0		f6 f7 f7 f8 f8 f9 f9 fa		                      .text  $f6, $f7, $f7, $f8, $f8, $f9, $f9, $fa, $fb, $fb, $fc, $fc, $fd, $fd, $fe, $ff
>198af8		fb fb fc fc fd fd fe ff
>198b00						.align 256
>198b00		1d c8 a7 ac 10 d6 52 7c		RANDOM_LUT_Tbl		    .text  $1d, $c8, $a7, $ac, $10, $d6, $52, $7c, $83, $dd, $ce, $39, $cd, $c5, $3b, $15
>198b08		83 dd ce 39 cd c5 3b 15
>198b10		22 55 3b 94 e0 33 1f 38						              .text  $22, $55, $3b, $94, $e0, $33, $1f, $38, $87, $12, $31, $65, $89, $27, $88, $42
>198b18		87 12 31 65 89 27 88 42
>198b20		b2 32 72 84 b2 b2 31 52						              .text  $b2, $32, $72, $84, $b2, $b2, $31, $52, $94, $ce, $56, $ec, $fe, $da, $58, $c9
>198b28		94 ce 56 ec fe da 58 c9
>198b30		c8 5b 53 2a 08 3b 19 c1						              .text  $c8, $5b, $53, $2a, $08, $3b, $19, $c1, $d0, $10, $2c, $b2, $4b, $ea, $32, $61
>198b38		d0 10 2c b2 4b ea 32 61
>198b40		da 34 33 8f 2b da 49 89						              .text  $da, $34, $33, $8f, $2b, $da, $49, $89, $a1, $e6, $ca, $2d, $b3, $ce, $b0, $79
>198b48		a1 e6 ca 2d b3 ce b0 79
>198b50		44 aa 32 82 91 e9 29 16						              .text  $44, $aa, $32, $82, $91, $e9, $29, $16, $5f, $e3, $fb, $bd, $15, $2e, $be, $f5
>198b58		5f e3 fb bd 15 2e be f5
>198b60		e9 4a e4 2e 60 24 94 35						              .text  $e9, $4a, $e4, $2e, $60, $24, $94, $35, $8d, $8f, $2c, $80, $0a, $5e, $99, $36
>198b68		8d 8f 2c 80 0a 5e 99 36
>198b70		ac ab 21 26 42 7c 5e bc						              .text  $ac, $ab, $21, $26, $42, $7c, $5e, $bc, $13, $52, $44, $2f, $e3, $ef, $44, $a2
>198b78		13 52 44 2f e3 ef 44 a2
>198b80		86 c1 9c 47 5f 36 6d 02						              .text  $86, $c1, $9c, $47, $5f, $36, $6d, $02, $be, $23, $02, $58, $0a, $52, $5e, $b4
>198b88		be 23 02 58 0a 52 5e b4
>198b90		9f 06 08 c9 97 cb 9e dd						              .text  $9f, $06, $08, $c9, $97, $cb, $9e, $dd, $d5, $cf, $3e, $df, $c4, $9e, $da, $bb
>198b98		d5 cf 3e df c4 9e da bb
>198ba0		9b 5d c9 f5 d9 c3 7e 87						              .text  $9b, $5d, $c9, $f5, $d9, $c3, $7e, $87, $77, $7d, $b1, $3b, $4a, $68, $35, $6e
>198ba8		77 7d b1 3b 4a 68 35 6e
>198bb0		ee 47 ad 8f fd 73 2e 46						              .text  $ee, $47, $ad, $8f, $fd, $73, $2e, $46, $b5, $8f, $44, $63, $55, $6f, $e1, $50
>198bb8		b5 8f 44 63 55 6f e1 50
>198bc0		f4 b6 a3 4f 68 c4 a5 a4						              .text  $f4, $b6, $a3, $4f, $68, $c4, $a5, $a4, $57, $74, $b9, $bd, $05, $14, $50, $eb
>198bc8		57 74 b9 bd 05 14 50 eb
>198bd0		a5 5c 57 2f 99 dc 2e 8a						              .text  $a5, $5c, $57, $2f, $99, $dc, $2e, $8a, $44, $bc, $ec, $db, $22, $58, $fc, $be
>198bd8		44 bc ec db 22 58 fc be
>198be0		5f 3f 50 bd 2a 36 ab ae						              .text  $5f, $3f, $50, $bd, $2a, $36, $ab, $ae, $24, $aa, $82, $11, $5c, $9f, $43, $4d
>198be8		24 aa 82 11 5c 9f 43 4d
>198bf0		8f 0c 20 00 91 b6 45 9e						              .text  $8f, $0c, $20, $00, $91, $b6, $45, $9e, $3e, $3d, $66, $7e, $0a, $1c, $6b, $74
>198bf8		3e 3d 66 7e 0a 1c 6b 74
>198c00						.align 16
>198c00		00 01 01 00 00 00 00 00		MOUSE_POINTER_PTR     .text $00,$01,$01,$00,$00,$00,$00,$00,$01,$01,$01,$00,$00,$00,$00,$00
>198c08		01 01 01 00 00 00 00 00
>198c10		01 ff ff 01 00 00 01 01		                      .text $01,$FF,$FF,$01,$00,$00,$01,$01,$FF,$FF,$FF,$01,$00,$00,$00,$00
>198c18		ff ff ff 01 00 00 00 00
>198c20		01 ff ff ff 01 01 55 ff		                      .text $01,$FF,$FF,$FF,$01,$01,$55,$FF,$01,$55,$FF,$FF,$01,$00,$00,$00
>198c28		01 55 ff ff 01 00 00 00
>198c30		01 55 ff ff ff ff 01 55		                      .text $01,$55,$FF,$FF,$FF,$FF,$01,$55,$FF,$FF,$FF,$FF,$01,$00,$00,$00
>198c38		ff ff ff ff 01 00 00 00
>198c40		00 01 55 ff ff ff ff ff		                      .text $00,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$00,$00
>198c48		ff ff 01 ff ff 01 00 00
>198c50		00 00 01 55 ff ff ff ff		                      .text $00,$00,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01,$FF,$01,$00,$00
>198c58		01 ff ff 01 ff 01 00 00
>198c60		00 00 01 01 55 ff ff ff		                      .text $00,$00,$01,$01,$55,$FF,$FF,$FF,$FF,$01,$FF,$FF,$FF,$01,$00,$00
>198c68		ff 01 ff ff ff 01 00 00
>198c70		00 00 01 55 01 55 ff ff		                      .text $00,$00,$01,$55,$01,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01,$01,$00
>198c78		ff ff ff ff ff 01 01 00
>198c80		00 00 01 55 55 55 ff ff		                      .text $00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$01,$FF,$FF,$01
>198c88		ff ff ff ff 01 ff ff 01
>198c90		00 00 00 01 55 55 55 ff		                      .text $00,$00,$00,$01,$55,$55,$55,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$01
>198c98		ff ff ff ff ff ff ff 01
>198ca0		00 00 00 00 01 55 55 55		                      .text $00,$00,$00,$00,$01,$55,$55,$55,$55,$55,$01,$FF,$FF,$55,$01,$00
>198ca8		55 55 01 ff ff 55 01 00
>198cb0		00 00 00 00 00 01 01 01		                      .text $00,$00,$00,$00,$00,$01,$01,$01,$01,$01,$55,$FF,$55,$01,$00,$00
>198cb8		01 01 55 ff 55 01 00 00
>198cc0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$55,$01,$00,$00,$00
>198cc8		01 55 55 55 01 00 00 00
>198cd0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$01,$55,$55,$01,$00,$00,$00,$00
>198cd8		01 55 55 01 00 00 00 00
>198ce0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$01,$00,$00,$00,$00,$00
>198ce8		00 01 01 00 00 00 00 00
>198cf0		00 00 00 00 00 00 00 00		                      .text $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
>198cf8		00 00 00 00 00 00 00 00
>1a0000		5c 19 89 1a 5c 2b 6f 1a		        .binary "binaries/basic816_1A0000.bin"
>1a0008		5c c5 26 1a 5c 49 02 1a 5c 58 00 1a 5c b8 00 1a
>1a0018		5c 63 03 1a 5c ed 01 1a 5c 08 02 1a 5c 0f 02 1a
>1a0028		0b 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 85 b5
>1a0038		c2 20 a5 a6 d0 06 e2 20 a5 a8 f0 11 c2 10 a4 ab
>1a0048		c4 a9 f0 09 e2 20 a5 b5 97 a6 c8 84 ab 28 2b 60
>1a0058		08 c2 10 e2 20 a9 01 20 1c 00 a2 00 00 a9 00 9f
>1a0068		00 4c 00 e8 e0 00 01 d0 f6 a2 00 00 20 14 00 c9
>1a0078		0d d0 03 4c b1 00 c9 08 d0 1a e0 00 00 f0 ed da
>1a0088		bf 01 4c 00 9f 00 4c 00 f0 06 e8 e0 ff 00 d0 f0
>1a0098		fa ca 80 0e c9 20 90 d4 9f 00 4c 00 e8 20 18 00
>1a00a8		80 ca a9 08 20 18 00 80 c3 a9 00 20 1c 00 28 60
>1a00b8		da 5a 8b 0b 08 22 4c 10 00 28 2b ab 7a fa 60 08
>1a00c8		e2 30 48 a9 1b 20 18 00 a9 5b 20 18 00 68 20 18
>1a00d8		00 28 60 0b 8b 08 08 e2 20 48 a9 00 48 ab 68 28
>1a00e8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 3b 38 e9 04
>1a00f8		00 1b e2 20 a9 00 83 02 83 03 83 04 20 14 00 c9
>1a0108		00 f0 f9 83 01 a3 02 d0 35 a3 01 c9 08 d0 0a 20
>1a0118		18 00 a9 50 20 c7 00 80 e3 c9 0d f0 0a c9 1b d0
>1a0128		06 a9 01 83 02 80 d5 20 18 00 a3 01 85 0c c2 20
>1a0138		3b 18 69 04 00 1b e2 20 a5 0c 28 2b ab 60 c9 01
>1a0148		d0 10 a3 01 c9 5b f0 03 82 a9 ff a9 02 83 02 82
>1a0158		aa ff c9 02 d0 29 a3 01 c9 41 90 0c c9 45 b0 08
>1a0168		a3 01 20 c7 00 82 8c ff c9 30 90 10 c9 3a b0 0c
>1a0178		38 e9 30 83 03 a9 03 83 02 82 80 ff 82 75 ff c9
>1a0188		03 d0 a7 a3 01 c9 30 90 1b c9 3a b0 17 a3 03 0a
>1a0198		85 0c 0a 0a 18 65 0c a3 01 38 e9 30 18 65 0c 83
>1a01a8		03 82 58 ff c9 7e f0 03 82 49 ff a3 03 c9 02 f0
>1a01b8		07 c9 03 f0 07 82 3c ff a9 40 80 02 a9 50 20 c7
>1a01c8		00 82 30 ff 08 e2 20 af 00 00 af 89 3c f0 08 09
>1a01d8		03 8f 00 00 af 80 0c 09 01 8f 00 00 af a9 00 22
>1a01e8		3c 10 00 28 60 08 e2 20 c9 00 f0 08 af 10 00 af
>1a01f8		09 01 80 06 af 10 00 af 29 fe 8f 10 00 af 28 60
>1a0208		08 22 84 10 00 28 60 48 da 5a 0b 08 e2 20 c2 10
>1a0218		a2 00 00 a9 20 9f 00 a0 af af 1e 00 00 9f 00 c0
>1a0228		af e8 e0 00 20 d0 ec 08 c2 20 48 a9 00 00 5b 68
>1a0238		28 a2 00 00 a0 00 00 22 84 10 00 28 2b 7a fa 68
>1a0248		60 da 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a0258		30 af 0c 00 00 85 08 e2 20 af 0e 00 00 c2 20 29
>1a0268		ff 00 85 0a af 11 00 00 8f 08 01 00 af 1c 00 00
>1a0278		3a 8f 0a 01 00 18 a5 08 6f 0c 01 00 85 08 a5 0a
>1a0288		69 00 00 85 0a e2 20 af 0f 00 00 85 8f a0 00 00
>1a0298		a2 00 00 b7 08 9f 00 4f 00 e8 c8 c4 8f d0 f4 af
>1a02a8		0f 00 00 3a aa bf 00 4f 00 c9 20 d0 09 a9 00 9f
>1a02b8		00 4f 00 ca 10 ef 28 2b 7a fa 60 e2 20 a2 00 00
>1a02c8		a9 00 9f 18 f0 1a e8 e0 40 00 d0 f6 a9 80 8f b4
>1a02d8		08 00 e2 20 a9 00 8f 89 0f 00 a9 00 8f 00 02 af
>1a02e8		8f 0c 02 af 8f 18 02 af 8f 24 02 af 60 08 e2 20
>1a02f8		48 48 a9 00 22 3c 10 00 68 22 18 10 00 af 89 0f
>1a0308		00 29 01 d0 f8 68 28 60 08 e2 20 48 48 a9 01 22
>1a0318		3c 10 00 68 22 18 10 00 af 89 0f 00 29 01 d0 f8
>1a0328		68 28 60 08 c2 20 48 e2 20 a9 0d 20 18 00 c2 20
>1a0338		68 28 60 08 22 78 10 00 28 60 08 0b 08 c2 20 48
>1a0348		a9 00 08 5b 68 28 e2 20 a5 b6 1a 85 b6 cf 13 00
>1a0358		00 90 05 20 14 00 64 b6 2b 28 60 da 5a 0b 08 08
>1a0368		c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 8f b5 08
>1a0378		00 af b4 08 00 29 20 f0 07 af b5 08 00 20 28 00
>1a0388		af b4 08 00 29 80 f0 07 af b5 08 00 20 f5 02 af
>1a0398		b4 08 00 29 40 f0 14 af b5 08 00 20 10 03 af b5
>1a03a8		08 00 c9 0d d0 05 a9 0a 20 10 03 28 2b 7a fa 60
>1a03b8		08 e2 20 bd 00 00 f0 06 20 18 00 e8 80 f5 28 60
>1a03c8		08 c2 20 48 48 4a 4a 4a 4a 4a 4a 4a 4a 20 e2 03
>1a03d8		68 29 ff 00 20 e2 03 68 28 60 08 c2 20 48 e2 20
>1a03e8		48 4a 4a 4a 4a 20 f9 03 68 20 f9 03 c2 20 68 28
>1a03f8		60 08 c2 30 da 29 0f 00 aa bf 00 d0 1a 20 18 00
>1a0408		fa 28 60 08 c2 30 48 da 5a 8b 0b c2 30 a3 0b 18
>1a0418		69 03 00 aa e2 20 a9 1a 48 ab bd 00 00 f0 06 20
>1a0428		f5 02 e8 80 f5 c2 30 2b ab 7a fa 68 28 60 08 e2
>1a0438		20 c9 5b b0 04 c9 41 b0 0b c9 7b b0 04 c9 61 b0
>1a0448		03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9 30
>1a0458		b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04 c9
>1a0468		30 b0 13 c9 67 b0 04 c9 61 b0 0b c9 47 b0 04 c9
>1a0478		41 b0 03 28 18 60 28 38 60 08 e2 20 c9 3a b0 04
>1a0488		c9 30 b0 12 c9 67 b0 04 c9 61 b0 0f c9 47 b0 04
>1a0498		c9 41 b0 09 28 60 38 e9 30 80 f9 29 df 38 e9 37
>1a04a8		80 f2 08 e2 20 c9 7b b0 06 c9 61 90 02 29 df 28
>1a04b8		60 08 e2 20 c2 10 bd 00 00 f0 09 20 aa 04 9d 00
>1a04c8		00 e8 80 f2 28 60 08 0b 08 c2 20 48 a9 00 08 5b
>1a04d8		68 28 c2 20 48 06 23 26 25 a5 23 85 0c a5 25 85
>1a04e8		0e 06 0c 26 0e 06 0c 26 0e 18 a5 23 65 0c 85 23
>1a04f8		a5 25 65 0e 85 25 68 2b 28 60 08 0b 08 c2 20 48
>1a0508		a9 00 08 5b 68 28 c2 20 a5 23 8f 1a 01 00 a9 0a
>1a0518		00 8f 18 01 00 af 1c 01 00 85 23 64 25 af 1e 01
>1a0528		00 85 29 64 2b e2 20 a9 00 85 27 85 2d 2b 28 60
>1a0538		08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 23
>1a0548		8f 1a 01 00 a9 64 00 8f 18 01 00 af 1c 01 00 85
>1a0558		23 64 25 af 1e 01 00 85 29 64 2b e2 20 a9 00 85
>1a0568		27 85 2d 2b 28 60 08 c2 20 a5 23 d0 08 a5 25 d0
>1a0578		04 28 e2 02 60 28 c2 02 60 08 c2 30 a9 ff ff 85
>1a0588		23 85 25 e2 20 a9 00 85 27 28 60 08 c2 30 a9 00
>1a0598		00 85 23 85 25 e2 20 a9 00 85 27 28 60 08 e2 20
>1a05a8		a5 27 c9 00 f0 07 c9 01 d0 05 20 b1 5a 28 60 08
>1a05b8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a05c8		00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08 e2
>1a05d8		20 a5 2d c9 00 f0 37 c9 01 d0 35 c2 20 a5 25 48
>1a05e8		a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 e2 20 a9
>1a05f8		01 85 27 20 b1 5a c2 20 a5 23 85 29 a5 25 85 2b
>1a0608		e2 20 a9 00 85 2d c2 20 68 85 23 68 85 25 28 60
>1a0618		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a0628		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08
>1a0638		e2 20 a5 27 c9 02 d0 02 28 60 08 c2 20 48 a9 00
>1a0648		08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff
>1a0658		00 20 ad 1d e2 20 dc d4 08 08 e2 20 a5 27 c9 00
>1a0668		f0 07 c9 01 d0 0b 20 b1 5a c2 20 a5 25 d0 21 28
>1a0678		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a0688		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a0698		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a06a8		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08
>1a06b8		e2 20 a5 27 c9 00 f0 07 c9 01 d0 11 20 b1 5a a5
>1a06c8		26 d0 29 a5 25 d0 25 a5 24 d0 21 28 60 08 c2 20
>1a06d8		48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2
>1a06e8		20 29 ff 00 20 ad 1d e2 20 dc d4 08 08 c2 20 48
>1a06f8		a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20
>1a0708		29 ff 00 20 ad 1d e2 20 dc d4 08 08 e2 20 a5 27
>1a0718		c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08 5b
>1a0728		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a0738		ad 1d e2 20 dc d4 08 20 ab 5a 28 60 08 e2 20 a5
>1a0748		2d c9 01 f0 26 c9 00 f0 1f 08 c2 20 48 a9 00 08
>1a0758		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a0768		20 ad 1d e2 20 dc d4 08 20 75 07 28 60 c2 20 a5
>1a0778		25 48 a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 e2
>1a0788		20 a9 00 85 27 20 ab 5a c2 20 a5 23 85 29 a5 25
>1a0798		85 2b e2 20 a9 01 85 2d c2 20 68 85 23 68 85 25
>1a07a8		60 08 e2 20 a5 27 c9 00 f0 23 c9 01 f0 2e 08 c2
>1a07b8		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a07c8		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 a5 2d c9
>1a07d8		00 f0 16 c9 01 d0 d7 20 ab 5a 80 0d a5 2d c9 01
>1a07e8		f0 07 c9 00 d0 c8 20 75 07 e2 20 a5 27 28 60 08
>1a07f8		e2 20 a5 27 c9 02 d0 25 a5 2d c9 02 f0 24 08 c2
>1a0808		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a0818		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 20 a9 07
>1a0828		a5 27 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a0838		c2 30 64 23 64 25 e2 20 64 27 a7 00 c9 26 f0 44
>1a0848		e2 20 a7 00 20 4f 04 90 76 20 ce 04 38 e9 30 c2
>1a0858		20 29 ff 00 18 65 23 85 23 a5 25 69 00 00 85 25
>1a0868		20 6c 20 80 db 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a0878		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a0888		20 dc d4 08 20 6c 20 a7 00 c9 48 f0 04 c9 68 d0
>1a0898		d4 20 6c 20 e2 20 a7 00 20 60 04 90 22 20 81 04
>1a08a8		c2 20 06 23 26 25 06 23 26 25 06 23 26 25 06 23
>1a08b8		26 25 29 ff 00 18 65 23 85 23 20 6c 20 80 d5 2b
>1a08c8		28 60 08 c2 30 a5 04 f0 1c 38 a5 04 e5 1a a8 e2
>1a08d8		20 b7 1a f0 10 c9 20 f0 06 c9 09 f0 02 28 60 88
>1a08e8		c0 ff ff d0 ec a9 00 60 08 0b 08 c2 20 48 a9 00
>1a08f8		08 5b 68 28 c2 30 a5 1a 85 00 e2 20 a5 1c 85 02
>1a0908		20 8d 20 a7 00 20 4f 04 90 0c 20 2c 08 c2 20 a5
>1a0918		23 85 d7 20 8d 20 c2 20 a5 00 85 1a e2 20 a5 02
>1a0928		85 1c 20 3e 09 e2 20 20 af 09 c9 00 f0 05 20 5d
>1a0938		0b 80 f4 2b 28 60 08 c2 20 a5 1a 85 00 a5 1c 85
>1a0948		02 a2 00 00 e2 20 a0 00 00 e0 00 00 f0 0d b7 00
>1a0958		f0 53 c9 3a f0 04 c9 20 d0 33 c8 b7 00 f0 46 c9
>1a0968		52 f0 10 c9 72 d0 26 b7 00 f0 3a c9 52 f0 04 c9
>1a0978		72 d0 1a c8 b7 00 f0 2d c9 45 f0 04 c9 65 d0 0d
>1a0988		c8 b7 00 f0 20 c9 4d f0 0a c9 6d f0 06 e8 20 6c
>1a0998		20 80 b3 a7 00 c9 3a d0 03 20 6c 20 a9 03 85 1e
>1a09a8		a9 91 20 5d 0b 28 60 08 0b 08 c2 20 48 a9 00 08
>1a09b8		5b 68 28 e2 20 a9 7f 85 1e c2 10 20 12 0b a5 1e
>1a09c8		d0 03 4c 52 0a c2 20 a5 1a 85 00 e2 20 a5 1c 85
>1a09d8		02 c2 20 64 04 64 06 e2 30 a0 00 b7 00 f0 da c9
>1a09e8		91 f0 d6 c8 c4 1e 90 f3 c2 10 a7 00 c9 22 d0 05
>1a09f8		20 74 0a 80 28 a5 1e c9 03 90 19 c2 20 a5 00 c5
>1a0a08		1a d0 08 e2 20 a5 02 c5 1c f0 09 e2 20 a7 04 20
>1a0a18		f4 4f b0 09 e2 20 20 84 0a c9 00 d0 11 c2 20 a5
>1a0a28		00 85 04 e2 20 a5 02 85 06 20 6c 20 80 a9 c9 81
>1a0a38		d0 18 20 ca 08 c9 00 f0 14 89 80 10 0b 20 fe 0b
>1a0a48		c9 30 f0 04 a9 af 80 02 a9 81 2b 28 60 08 c2 20
>1a0a58		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>1a0a68		20 29 ff 00 20 ad 1d e2 20 dc d4 08 08 e2 20 20
>1a0a78		6c 20 a7 00 f0 04 c9 22 d0 f5 28 60 da 5a 08 0b
>1a0a88		08 c2 20 48 a9 00 08 5b 68 28 c2 20 a5 04 d0 0a
>1a0a98		e2 20 a5 04 d0 04 a9 00 80 0a e2 20 a7 04 20 f4
>1a0aa8		4f a9 00 2a 85 28 c2 30 a9 52 0c 85 08 e2 20 a9
>1a0ab8		1a 85 0a a2 80 00 e2 20 a0 01 00 b7 08 f0 31 c5
>1a0ac8		1e d0 32 c2 30 a0 02 00 b7 08 85 0c e2 20 a9 1a
>1a0ad8		85 0e a5 28 f0 07 a7 0c 20 f4 4f b0 18 e2 10 a0
>1a0ae8		00 b7 00 20 aa 04 d7 0c d0 0b c8 c4 1e 90 f2 8a
>1a0af8		2b 28 7a fa 60 c2 30 18 a5 08 69 08 00 85 08 e2
>1a0b08		20 a5 0a 69 00 85 0a e8 80 ac 08 0b 8b 08 c2 20
>1a0b18		48 a9 00 08 5b 68 28 c2 30 a9 52 0c 85 08 a9 1a
>1a0b28		00 85 0a 64 0c e2 20 a0 01 00 b7 08 f0 1d c5 1e
>1a0b38		b0 06 c5 0c 90 02 85 0c c2 20 18 a5 08 69 08 00
>1a0b48		85 08 a5 0a 69 00 00 85 0a 80 da e2 20 a5 0c 85
>1a0b58		1e ab 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a0b68		28 e2 20 87 00 c2 20 18 a5 00 69 01 00 85 08 a5
>1a0b78		02 69 00 00 85 0a e2 10 a4 1e 88 e2 20 b7 08 87
>1a0b88		08 f0 13 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69
>1a0b98		00 00 85 0a 80 e5 2b 28 60 08 c2 30 29 7f 00 0a
>1a0ba8		0a 0a 18 69 52 0c aa 28 60 08 8b 0b 08 c2 20 48
>1a0bb8		a9 00 08 5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28
>1a0bc8		e2 20 c2 10 20 a1 0b bd 00 00 c2 20 29 0f 00 2b
>1a0bd8		ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a0be8		08 e2 20 48 a9 1a 48 ab 68 28 c2 30 20 a1 0b bd
>1a0bf8		04 00 2b ab 28 60 08 8b 0b 08 c2 20 48 a9 00 08
>1a0c08		5b 68 28 08 e2 20 48 a9 1a 48 ab 68 28 e2 20 c2
>1a0c18		10 20 a1 0b bd 00 00 c2 20 29 f0 00 2b ab 28 60
>1a0c28		08 8b 0b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a0c38		48 a9 1a 48 ab 68 28 e2 20 c2 10 20 a1 0b bd 06
>1a0c48		00 c2 20 29 ff 00 2b ab 28 60 03 01 10 d0 32 27
>1a0c58		02 00 03 01 12 d0 72 27 02 00 02 01 14 d0 a9 27
>1a0c68		02 00 02 01 16 d0 e0 27 02 00 02 03 18 d0 ea 27
>1a0c78		02 00 00 01 1c d0 fd 27 02 00 04 02 1e d0 bb 29
>1a0c88		02 00 04 02 21 d0 7b 29 02 00 04 02 24 d0 3b 29
>1a0c98		02 00 04 01 27 d0 7b 28 02 00 04 01 29 d0 fb 28
>1a0ca8		02 00 04 01 2b d0 bb 28 02 00 05 03 2d d0 65 28
>1a0cb8		01 00 06 03 31 d0 37 28 02 00 07 02 35 d0 4e 28
>1a0cc8		02 00 ff 01 38 d0 00 00 00 00 40 01 3a d0 00 00
>1a0cd8		00 00 20 03 3c d0 81 40 00 00 20 05 40 d0 86 44
>1a0ce8		00 00 20 03 46 d0 d1 43 00 00 20 04 4a d0 71 43
>1a0cf8		00 00 20 03 4f d0 68 43 00 00 20 02 53 d0 00 43
>1a0d08		00 00 50 04 56 d0 00 00 00 00 50 04 5b d0 00 00
>1a0d18		00 00 20 05 60 d0 43 42 00 00 20 06 66 d0 bc 42
>1a0d28		00 00 20 03 6d d0 98 40 00 00 50 02 71 d0 00 00
>1a0d38		00 00 50 04 74 d0 00 00 00 00 20 04 79 d0 8c 41
>1a0d48		00 00 20 02 7e d0 92 40 00 00 20 04 81 d0 95 40
>1a0d58		00 00 50 05 86 d0 00 00 00 00 50 05 8c d0 00 00
>1a0d68		00 00 20 04 92 d0 8f 40 00 00 20 03 97 d0 c7 43
>1a0d78		00 00 20 04 9b d0 62 40 00 00 20 04 a0 d0 f2 3f
>1a0d88		00 00 20 05 a5 d0 88 3f 00 00 20 05 ab d0 15 3f
>1a0d98		00 00 20 03 b1 d0 11 3f 00 00 20 04 b5 d0 f2 3d
>1a0da8		00 00 20 04 ba d0 04 3f 00 00 20 07 bf d0 08 3f
>1a0db8		00 00 20 03 c7 d0 45 3d 00 00 20 04 cb d0 ae 3c
>1a0dc8		00 00 00 01 d0 d0 fb 29 01 00 30 03 d2 d0 7a 4a
>1a0dd8		00 00 30 04 d6 d0 ca 4a 00 00 30 05 db d0 7c 4b
>1a0de8		00 00 30 05 e1 d0 2e 4b 00 00 30 04 e7 d0 bb 4b
>1a0df8		00 00 30 03 ec d0 10 4c 00 00 30 03 f0 d0 55 4c
>1a0e08		00 00 30 03 f4 d0 de 4c 00 00 30 03 f8 d0 67 4d
>1a0e18		00 00 30 03 fc d0 c9 4d 00 00 30 04 00 d1 ec 49
>1a0e28		00 00 30 03 05 d1 8b 49 00 00 30 04 09 d1 3d 49
>1a0e38		00 00 30 03 0e d1 e7 48 00 00 30 05 12 d1 1e 48
>1a0e48		00 00 30 06 18 d1 3d 47 00 00 30 04 1f d1 88 46
>1a0e58		00 00 10 03 24 d1 30 4f 00 00 10 03 28 d1 fb 4e
>1a0e68		00 00 10 04 2c d1 04 6b 00 00 10 04 31 d1 47 4f
>1a0e78		00 00 10 03 36 d1 2b 68 00 00 20 05 3a d1 d6 69
>1a0e88		00 00 10 04 40 d1 b1 6a 00 00 20 05 45 d1 bd 6b
>1a0e98		00 00 20 03 4b d1 dc 6c 00 00 10 04 4f d1 49 6c
>1a0ea8		00 00 20 06 54 d1 52 6d 00 00 20 04 5b d1 76 6e
>1a0eb8		00 00 10 07 60 d1 f8 4e 00 00 20 03 68 d1 3c 3c
>1a0ec8		00 00 20 05 6c d1 4c 3b 00 00 20 09 72 d1 ba 2b
>1a0ed8		00 00 20 09 7c d1 47 2b 00 00 20 0a 86 d1 77 2b
>1a0ee8		00 00 20 07 91 d1 b4 2a 00 00 30 08 99 d1 63 45
>1a0ef8		00 00 20 07 a2 d1 49 2a 00 00 30 08 aa d1 cd 45
>1a0f08		00 00 20 08 b3 d1 ff 2c 00 00 20 08 bc d1 33 2c
>1a0f18		00 00 20 06 c5 d1 39 2e 00 00 20 09 cc d1 41 2f
>1a0f28		00 00 20 04 d6 d1 51 30 00 00 20 04 db d1 c2 30
>1a0f38		00 00 20 04 e0 d1 5b 31 00 00 20 06 e5 d1 97 32
>1a0f48		00 00 20 08 ec d1 35 33 00 00 20 0a f5 d1 83 33
>1a0f58		00 00 20 07 00 d2 ba 34 00 00 20 07 08 d2 38 35
>1a0f68		00 00 20 08 10 d2 aa 35 00 00 20 06 19 d2 e7 35
>1a0f78		00 00 20 07 20 d2 17 39 00 00 50 06 28 d2 00 00
>1a0f88		00 00 50 04 2f d2 00 00 00 00 20 06 34 d2 2c 3b
>1a0f98		00 00 30 03 3b d2 1f 4e 00 00 30 03 3f d2 32 46
>1a0fa8		00 00 30 03 43 d2 32 4e 00 00 30 03 47 d2 48 4e
>1a0fb8		00 00 30 03 4b d2 5e 4e 00 00 30 02 4f d2 74 4e
>1a0fc8		00 00 30 04 52 d2 8a 4e 00 00 30 04 57 d2 a0 4e
>1a0fd8		00 00 30 04 5c d2 b6 4e 00 00 30 03 61 d2 cc 4e
>1a0fe8		00 00 30 03 65 d2 e2 4e 00 00 00 00 00 00 00 00
>1a0ff8		00 00 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2 30
>1a1008		a9 ff ff 85 ba e2 20 a9 17 85 bc c2 20 64 b7 64
>1a1018		bd e2 20 64 b9 64 bf 2b 28 60 5a 08 e2 20 85 ea
>1a1028		c2 10 86 8f c2 20 a5 0e 48 a5 0c 48 a5 12 48 a5
>1a1038		10 48 20 d2 10 b0 03 20 56 10 20 5e 12 c2 20 68
>1a1048		85 10 68 85 12 68 85 0c 68 85 0e 28 7a 60 08 0b
>1a1058		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a6 8f ca 86
>1a1068		0c e8 c2 30 38 a5 ba e5 0c 85 c0 e2 20 a5 bc e9
>1a1078		00 85 c2 20 5e 12 e2 20 a5 ea a0 00 00 97 c3 a9
>1a1088		00 a0 01 00 97 c3 a0 02 00 97 c3 c2 20 a9 00 00
>1a1098		97 c3 c2 20 18 a5 ba 69 01 00 a0 05 00 97 c3 e2
>1a10a8		20 c8 c8 a5 bc 69 00 97 c3 c2 20 a5 c0 85 b7 e2
>1a10b8		20 a5 c2 85 b9 c2 20 38 a5 c3 e9 01 00 85 ba e2
>1a10c8		20 a5 c5 e9 00 85 bc 2b 28 60 08 0b 08 c2 20 48
>1a10d8		a9 00 08 5b 68 28 c2 30 c2 20 a5 bd 85 c9 e2 20
>1a10e8		a5 bf 85 cb a5 c9 d0 17 e2 20 a5 cb d0 11 c2 20
>1a10f8		a9 00 00 85 cf e2 20 a9 00 85 d1 2b 28 18 60 c2
>1a1108		20 a0 05 00 b7 c9 85 cc e2 20 c8 c8 b7 c9 85 ce
>1a1118		c2 20 18 a5 c9 65 8f 85 0c e2 20 a5 cb 69 00 85
>1a1128		0e c2 20 18 a5 0c 69 08 00 85 0c e2 20 a5 0e 69
>1a1138		00 85 0e c2 20 a5 0c c5 cc d0 28 e2 20 a5 0e c5
>1a1148		ce d0 20 c2 20 a5 cf d0 5d e2 20 a5 d1 d0 57 c2
>1a1158		20 a0 02 00 b7 c9 85 bd e2 20 c8 c8 b7 c9 85 bf
>1a1168		4c 0f 12 c2 20 a5 0c 69 08 00 85 10 e2 20 a5 0e
>1a1178		69 00 85 12 e2 20 a5 c6 c5 10 b0 3e 90 08 c2 20
>1a1188		a5 c6 c5 10 b0 34 c2 20 a5 c9 85 cf e2 20 a5 cb
>1a1198		85 d1 c2 20 a0 02 00 b7 cf 85 c9 e2 20 c8 c8 b7
>1a11a8		cf 85 cb 4c ec 10 c2 20 a0 02 00 b7 c9 97 cf e2
>1a11b8		20 c8 c8 b7 c9 97 cf 4c 0f 12 c2 20 a0 05 00 b7
>1a11c8		c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a0 02 00
>1a11d8		b7 c9 97 0c e2 20 c8 c8 b7 c9 97 0c c2 20 a5 cf
>1a11e8		d0 14 e2 20 a5 cf d0 0e c2 20 a5 0c 85 bd e2 20
>1a11f8		a5 0e 85 bf 80 11 c2 20 a0 02 00 a5 0c 97 cf e2
>1a1208		20 c8 c8 a5 0e 97 cf c2 20 a5 c9 85 c3 e2 20 a5
>1a1218		cb 85 c5 c2 20 a5 c3 85 b7 e2 20 a5 c5 85 b9 c2
>1a1228		20 a0 05 00 a5 0c 97 c3 e2 20 c8 c8 a5 0e 97 c3
>1a1238		c2 20 a0 02 00 a9 00 00 97 c3 e2 20 c8 c8 97 c3
>1a1248		e2 20 a5 ea e2 20 a0 00 00 97 c3 a0 01 00 a9 00
>1a1258		97 c3 2b 28 38 60 08 c2 20 38 a5 c0 e9 08 00 85
>1a1268		c3 e2 20 a5 c2 e9 00 85 c5 28 60 08 e2 20 a5 c5
>1a1278		f0 04 c9 18 b0 12 c2 20 a5 c3 f0 0c e2 20 a0 01
>1a1288		00 b7 c3 1a 97 c3 28 60 00 ea 08 e2 20 a5 c5 f0
>1a1298		04 c9 18 b0 17 c2 20 a5 c3 f0 11 e2 20 a0 01 00
>1a12a8		b7 c3 3a 97 c3 d0 03 20 b6 12 28 60 00 ea 08 c2
>1a12b8		20 a5 bd d0 21 e2 20 a5 bf d0 1b a5 c5 85 bf c2
>1a12c8		20 a5 c3 85 bd a9 00 00 a0 02 00 97 c3 c8 c8 e2
>1a12d8		20 97 c3 4c 9d 13 e2 20 a5 bf c5 c5 90 28 c2 20
>1a12e8		a5 bd c5 c3 90 20 c2 20 a5 bd a0 02 00 97 c3 e2
>1a12f8		20 c8 c8 a5 bf 97 c3 c2 20 a5 c3 85 bd e2 20 a5
>1a1308		c5 85 bf 4c 9d 13 c2 20 a5 bd 85 08 e2 20 a5 bf
>1a1318		85 0a e2 20 a0 04 00 b7 08 c5 c8 90 32 d0 0b c2
>1a1328		20 a0 02 00 b7 08 c5 c6 90 25 c2 20 a0 02 00 b7
>1a1338		08 97 c3 e2 20 c8 c8 b7 08 97 c3 c2 20 a5 c3 a0
>1a1348		02 00 97 08 e2 20 a5 c5 c8 c8 97 08 4c 9d 13 c2
>1a1358		20 a0 02 00 b7 08 d0 08 e2 20 c8 c8 b7 08 f0 19
>1a1368		c2 20 a0 02 00 b7 08 85 0c e2 20 c8 c8 b7 08 85
>1a1378		0a c2 20 a5 0c 85 08 80 99 c2 20 a5 c3 a0 02 00
>1a1388		97 08 e2 20 c8 c8 a5 c5 97 08 a9 00 97 c3 c2 20
>1a1398		a0 02 00 97 c3 20 a2 13 28 60 08 c2 20 a5 bd 85
>1a13a8		c3 e2 20 a5 bf 85 c5 c2 20 a5 c3 d0 09 e2 20 a5
>1a13b8		c5 d0 03 4c 45 14 c2 20 a0 02 00 b7 c3 85 0c e2
>1a13c8		20 c8 c8 b7 c3 85 0e c2 20 a0 05 00 b7 c3 85 10
>1a13d8		e2 20 c8 c8 b7 c3 85 12 c2 20 a5 0c c5 10 d0 08
>1a13e8		e2 20 a5 0e c5 12 f0 1f c2 20 a0 02 00 b7 c3 85
>1a13f8		0c e2 20 c8 c8 b7 c3 85 0e c2 20 a5 0c 85 c3 e2
>1a1408		20 a5 0e 85 c5 80 a0 c2 20 a0 02 00 b7 c3 85 0c
>1a1418		e2 20 c8 c8 b7 c3 85 0e c2 20 a0 02 00 b7 0c 97
>1a1428		c3 e2 20 c8 c8 b7 0c 97 c3 c2 20 a0 05 00 b7 0c
>1a1438		97 c3 e2 20 c8 c8 b7 0c 97 c3 4c be 13 28 60 08
>1a1448		c2 20 64 16 64 18 28 60 08 c2 30 a5 16 d0 16 a5
>1a1458		18 d0 12 e2 20 64 16 a5 e2 1a 1a 85 17 a5 e3 85
>1a1468		18 64 19 80 07 c2 20 a5 17 1a 85 17 c2 20 a5 bb
>1a1478		3a c5 17 f0 02 b0 1f 08 c2 20 48 a9 00 08 5b 68
>1a1488		28 e2 20 a9 03 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a1498		1d e2 20 dc d4 08 28 60 c9 00 d0 05 c0 01 00 f0
>1a14a8		05 09 30 97 16 c8 60 08 c2 30 64 0c a5 25 10 1a
>1a14b8		18 a5 23 49 ff ff 69 01 00 85 23 a5 25 49 ff ff
>1a14c8		69 00 00 85 25 a9 ff ff 85 0c 64 10 64 12 64 14
>1a14d8		a2 1f 00 f8 06 23 26 25 a5 10 65 10 85 10 a5 12
>1a14e8		65 12 85 12 a5 14 65 14 85 14 ca 10 e7 d8 e2 20
>1a14f8		20 50 14 a0 00 00 a5 0c f0 04 a9 2d 80 02 a9 20
>1a1508		97 16 c8 a2 05 00 b5 10 29 f0 4a 4a 4a 4a 20 a0
>1a1518		14 b5 10 29 0f 20 a0 14 ca 10 eb c0 01 00 d0 0c
>1a1528		a9 20 87 16 a0 01 00 a9 30 97 16 c8 a9 00 97 16
>1a1538		28 60 00 ea 08 e2 20 c2 10 a0 00 00 bd 00 00 f0
>1a1548		04 e8 c8 80 f7 28 60 08 0b 08 c2 20 48 a9 00 08
>1a1558		5b 68 28 e2 20 c2 10 a0 00 00 b7 23 d0 04 b7 29
>1a1568		f0 25 b7 23 d7 29 90 12 d0 03 c8 80 ed c2 20 a9
>1a1578		01 00 85 23 e2 20 64 25 80 15 c2 20 a9 ff ff 85
>1a1588		23 e2 20 85 25 80 08 c2 20 64 23 e2 20 64 25 e2
>1a1598		20 a9 00 85 27 2b 28 60 08 0b 8b 08 c2 20 48 a9
>1a15a8		00 08 5b 68 28 e2 20 c2 10 08 c2 20 48 e2 20 a5
>1a15b8		25 48 ab c2 20 68 28 a6 23 20 3c 15 84 0c 08 c2
>1a15c8		20 48 e2 20 a5 2b 48 ab c2 20 68 28 a6 29 20 3c
>1a15d8		15 c2 20 98 38 65 0c aa e2 20 a9 02 20 22 10 c2
>1a15e8		20 a5 b7 85 08 e2 20 a5 b9 85 0a a0 00 00 08 c2
>1a15f8		20 48 e2 20 a5 25 48 ab c2 20 68 28 a6 23 bd 00
>1a1608		00 f0 06 97 08 e8 c8 80 f5 e2 20 08 c2 20 48 e2
>1a1618		20 a5 2b 48 ab c2 20 68 28 a6 29 bd 00 00 97 08
>1a1628		f0 04 e8 c8 80 f5 c2 20 a5 08 85 23 e2 20 a5 0a
>1a1638		85 25 a9 02 85 27 ab 2b 28 60 da 5a 08 0b 8b 08
>1a1648		c2 20 48 a9 00 08 5b 68 28 c2 20 a5 0a 48 a5 08
>1a1658		48 c2 30 08 c2 20 48 e2 20 a5 25 48 ab c2 20 68
>1a1668		28 a6 23 20 3c 15 98 aa e8 e2 20 a9 02 20 22 10
>1a1678		c2 20 a5 c0 85 08 a5 c2 85 0a a0 00 00 e2 20 b7
>1a1688		23 97 08 f0 03 c8 80 f7 c2 20 a5 08 85 23 a5 0a
>1a1698		85 25 c2 20 68 85 08 68 85 0a ab 2b 28 7a fa 60
>1a16a8		08 e2 20 c2 10 a0 00 00 b7 23 f0 05 c8 80 f9 84
>1a16b8		92 c2 30 c4 29 90 13 f0 11 a5 8f 30 0d f0 0b c4
>1a16c8		8f b0 12 a5 29 d0 0e 4c 26 17 20 50 14 e2 20 a9
>1a16d8		00 87 16 80 39 20 50 14 c2 30 18 a5 23 65 29 85
>1a16e8		23 a5 25 69 00 00 85 25 a0 00 00 e2 20 a7 23 97
>1a16f8		16 f0 1b c2 20 18 a5 23 69 01 00 85 23 a5 25 69
>1a1708		00 00 85 25 c8 c4 8f d0 e2 a9 00 00 97 16 c2 20
>1a1718		a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28 60
>1a1728		08 c2 30 20 4f 15 a5 23 c9 ff ff d0 05 20 81 05
>1a1738		80 03 20 93 05 28 60 08 c2 30 20 4f 15 a5 23 c9
>1a1748		01 00 d0 05 20 81 05 80 03 20 93 05 28 60 08 c2
>1a1758		30 20 4f 15 a5 23 c9 00 00 d0 05 20 81 05 80 03
>1a1768		20 93 05 28 60 08 c2 30 20 4f 15 a5 23 c9 00 00
>1a1778		f0 05 20 81 05 80 03 20 93 05 28 60 08 c2 30 20
>1a1788		4f 15 a5 23 c9 ff ff f0 05 20 81 05 80 03 20 93
>1a1798		05 28 60 08 c2 30 20 4f 15 a5 23 c9 01 00 f0 05
>1a17a8		20 81 05 80 03 20 93 05 28 60 08 e2 20 a5 27 c9
>1a17b8		02 d0 1d a5 23 d0 19 a5 24 d0 15 a5 25 d0 11 20
>1a17c8		50 14 a9 00 87 16 c2 20 a5 16 85 23 a5 18 85 25
>1a17d8		28 60 48 5a 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a17e8		c2 30 a9 00 00 85 00 85 1a a9 16 00 85 02 85 1c
>1a17f8		22 3c 11 00 b0 20 a0 02 00 b7 1a f0 0f c5 55 90
>1a1808		10 c5 59 f0 02 b0 05 20 3d 18 80 e4 28 2b 7a 68
>1a1818		60 20 49 21 80 da 08 c2 20 48 a9 00 08 5b 68 28
>1a1828		e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 ad 1d
>1a1838		e2 20 dc d4 08 08 c2 30 85 23 64 25 20 af 14 a5
>1a1848		16 1a 85 23 a5 18 85 25 20 02 45 18 a5 1a 69 04
>1a1858		00 85 00 a5 1c 69 00 00 85 02 e2 20 a9 20 20 18
>1a1868		00 c2 20 20 7c 18 90 fb e2 20 a9 0d 20 18 00 20
>1a1878		49 21 28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68
>1a1888		28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 c2 10 a7
>1a1898		00 f0 3a 30 05 20 18 00 80 29 c2 20 29 7f 00 0a
>1a18a8		0a 0a 18 69 52 0c 85 08 a9 1a 00 69 00 00 85 0a
>1a18b8		08 e2 20 48 a9 1a 48 ab 68 28 a0 02 00 b7 08 aa
>1a18c8		20 b8 03 c2 20 20 6c 20 ab 2b 28 18 60 ab 2b 28
>1a18d8		38 60 08 c2 20 a9 ff 6f 85 1f a9 ff 7f 85 21 a9
>1a18e8		ff ff 85 23 85 25 85 29 85 2b e2 20 85 27 85 2d
>1a18f8		28 60 08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08
>1a1908		e2 20 48 a9 00 48 ab 68 28 c2 30 5a a4 1f bd 00
>1a1918		00 99 00 00 bd 02 00 99 02 00 e2 20 bd 04 00 99
>1a1928		04 00 c2 20 38 98 e9 05 00 85 1f 7a ab 2b 28 60
>1a1938		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a1948		48 a9 00 48 ab 68 28 c2 30 5a 18 a5 1f 69 05 00
>1a1958		85 1f a8 b9 00 00 9d 00 00 b9 02 00 9d 02 00 e2
>1a1968		20 b9 04 00 9d 04 00 bd 00 00 7a ab 2b 28 60 08
>1a1978		0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a1988		a9 00 48 ab 68 28 e2 20 c2 10 5a a4 21 99 00 00
>1a1998		88 84 21 7a ab 2b 28 60 08 0b 8b 08 c2 20 48 a9
>1a19a8		00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28 e2
>1a19b8		20 c2 10 5a a4 21 c8 84 21 b9 00 00 c2 20 29 ff
>1a19c8		00 7a ab 2b 28 60 08 e2 20 a9 01 20 77 19 28 60
>1a19d8		5a 08 8b 08 e2 20 48 a9 00 48 ab 68 28 e2 20 a4
>1a19e8		21 b9 01 00 c9 01 d0 08 c2 20 e6 21 ab 28 7a 60
>1a19f8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a1a08		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 48
>1a1a18		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a1a28		48 a9 00 48 ab 68 28 e2 20 a4 21 c0 ff 7f f0 11
>1a1a38		20 b1 0b 85 0c b9 01 00 20 b1 0b c5 0c f0 02 90
>1a1a48		08 c2 20 ab 2b 28 68 18 60 c2 20 ab 2b 28 68 38
>1a1a58		60 4c 2c 08 08 e2 20 a9 00 8f 00 4d 00 a2 01 00
>1a1a68		20 5b 1c 20 a5 05 c2 20 a5 23 9f 00 4d 00 e2 20
>1a1a78		af 00 4d 00 1a 30 3e 8f 00 4d 00 e8 e8 20 8d 20
>1a1a88		e2 20 a7 00 c9 90 f0 09 c9 2c d0 0a 20 6c 20 80
>1a1a98		cf 20 6c 20 28 60 08 c2 20 48 a9 00 08 5b 68 28
>1a1aa8		e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad 1d
>1a1ab8		e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a1ac8		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a1ad8		20 dc d4 08 08 20 c7 52 90 47 e2 20 a5 ea 29 80
>1a1ae8		d0 06 20 c8 50 4c 27 1b 20 3a 50 90 53 c2 20 a5
>1a1af8		c2 48 a5 c0 48 a0 09 00 b7 08 85 c0 e2 20 c8 c8
>1a1b08		b7 08 85 c2 e2 20 a9 8f 20 79 21 20 ce 19 20 5c
>1a1b18		1a 20 9e 67 20 d8 19 c2 20 68 85 c2 68 85 c0 28
>1a1b28		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a1b38		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a1b48		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3
>1a1b58		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08
>1a1b68		0b 08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 20
>1a1b78		6c 20 a0 00 00 b7 00 f0 24 c9 22 f0 03 c8 80 f5
>1a1b88		84 0c e2 20 a9 02 a6 0c e8 20 50 14 a0 00 00 c4
>1a1b98		0c f0 29 a7 00 97 16 c8 20 6c 20 80 f2 08 c2 20
>1a1ba8		48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2
>1a1bb8		20 29 ff 00 20 ad 1d e2 20 dc d4 08 a9 00 97 16
>1a1bc8		c2 20 a5 16 85 23 a5 18 85 25 a9 02 00 85 27 20
>1a1bd8		6c 20 2b 28 60 08 e2 20 a7 00 c2 20 29 ff 00 20
>1a1be8		db 0b 85 2f 20 ce 19 08 e2 20 48 a9 00 48 ab 68
>1a1bf8		28 20 01 1c 20 d8 19 28 60 20 6c 20 6c 2f 08 48
>1a1c08		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 c2 30 20
>1a1c18		a0 19 89 80 00 f0 37 48 20 db 0b 85 2f 68 20 28
>1a1c28		0c c9 01 00 f0 08 c2 30 a2 29 08 20 38 19 c2 30
>1a1c38		a2 23 08 20 38 19 08 e2 20 48 a9 00 48 ab 68 28
>1a1c48		20 58 1c a2 23 08 20 fa 18 ab 2b 28 68 60 00 ea
>1a1c58		6c 2f 08 08 08 c2 20 48 a9 00 08 5b 68 28 08 e2
>1a1c68		20 48 a9 00 48 ab 68 28 c2 10 da e2 20 a7 00 d0
>1a1c78		03 4c 1e 1d 30 33 c9 20 d0 03 4c 18 1d c9 3a b0
>1a1c88		04 c9 30 b0 56 c9 26 f0 52 c9 22 d0 03 4c 31 1d
>1a1c98		c9 5b b0 07 c9 41 90 03 4c 3d 1d c9 7b b0 07 c9
>1a1ca8		61 90 03 4c 3d 1d 4c 1e 1d c9 8f f0 40 c9 90 f0
>1a1cb8		41 20 fe 0b c9 30 d0 0c 20 dd 1b a2 23 08 20 fa
>1a1cc8		18 4c 73 1c c9 00 d0 4e a7 00 a6 21 e0 ff 7f f0
>1a1cd8		05 20 17 1a b0 12 20 77 19 80 35 c2 20 20 e9 58
>1a1ce8		a2 23 08 20 fa 18 80 83 20 07 1c 80 dd 20 77 19
>1a1cf8		80 1e e2 20 a4 21 c0 ff 7f f0 46 a4 21 b9 01 00
>1a1d08		c9 01 f0 3d c9 8f f0 05 20 07 1c 80 ee 20 a0 19
>1a1d18		20 6c 20 4c 73 1c a6 21 e0 ff 7f b0 24 bd 01 00
>1a1d28		c9 01 f0 1d 20 07 1c 80 ed 20 67 1b a2 23 08 20
>1a1d38		fa 18 4c 73 1c 20 dc 1a a2 23 08 20 fa 18 4c 73
>1a1d48		1c a2 23 08 20 38 19 fa 28 60 08 0b 8b 08 e2 20
>1a1d58		48 a9 00 48 ab 68 28 08 c2 20 48 a9 00 08 5b 68
>1a1d68		28 c2 30 a9 fd 5f 85 33 ab 2b 28 60 08 0b 08 c2
>1a1d78		20 48 a9 00 08 5b 68 28 c2 30 92 33 c6 33 c6 33
>1a1d88		2b 28 60 08 c2 30 29 ff 00 20 74 1d 28 60 08 0b
>1a1d98		08 c2 20 48 a9 00 08 5b 68 28 c2 30 e6 33 e6 33
>1a1da8		b2 33 2b 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b
>1a1db8		68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 20 85 23
>1a1dc8		a9 00 00 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85
>1a1dd8		e9 c2 20 a9 07 1e 85 e7 20 2a 52 c2 20 a5 d7 85
>1a1de8		23 a5 d9 85 25 e2 20 a9 00 85 27 85 ea a9 1a 85
>1a1df8		e9 c2 20 a9 0b 1e 85 e7 20 2a 52 28 2b ab 60 45
>1a1e08		52 52 00 45 52 4c 00 e2 20 c2 10 20 2b 03 af d3
>1a1e18		08 00 0a c2 20 29 ff 00 a8 08 e2 20 48 a9 1a 48
>1a1e28		ab 68 28 be 61 1e 20 b8 03 c2 20 a5 d7 f0 27 a2
>1a1e38		91 1e 20 b8 03 08 e2 20 48 a9 00 48 ab 68 28 c2
>1a1e48		20 af d7 08 00 8f 23 08 00 a9 00 00 8f 25 08 00
>1a1e58		20 20 45 20 2b 03 4c 0f 27 95 1e 98 1e 9e 1e ab
>1a1e68		1e b9 1e c7 1e da 1e f0 1e 00 1f 0f 1f 1c 1f 2d
>1a1e78		1f 3c 1f 49 1f 57 1f 66 1f 77 1f 90 1f a4 1f b8
>1a1e88		1f ce 1f e2 1f fd 1f 15 20 20 61 74 00 4f 4b 00
>1a1e98		42 72 65 61 6b 00 53 79 6e 74 61 78 20 65 72 72
>1a1ea8		6f 72 00 4f 75 74 20 6f 66 20 6d 65 6d 6f 72 79
>1a1eb8		00 54 79 70 65 20 6d 69 73 6d 61 74 63 68 00 56
>1a1ec8		61 72 69 61 62 6c 65 20 6e 6f 74 20 66 6f 75 6e
>1a1ed8		64 00 4c 69 6e 65 20 6e 75 6d 62 65 72 20 6e 6f
>1a1ee8		74 20 66 6f 75 6e 64 00 53 74 61 63 6b 20 75 6e
>1a1ef8		64 65 72 66 6c 6f 77 00 53 74 61 63 6b 20 6f 76
>1a1f08		65 72 66 6c 6f 77 00 4f 75 74 20 6f 66 20 72 61
>1a1f18		6e 67 65 00 49 6c 6c 65 67 61 6c 20 61 72 67 75
>1a1f28		6d 65 6e 74 00 46 69 6c 65 20 6e 6f 74 20 66 6f
>1a1f38		75 6e 64 00 4e 6f 74 20 61 20 6e 75 6d 62 65 72
>1a1f48		00 4d 61 74 68 20 6f 76 65 72 66 6c 6f 77 00 4d
>1a1f58		61 74 68 20 75 6e 64 65 72 66 6c 6f 77 00 44 69
>1a1f68		76 69 73 69 6f 6e 20 62 79 20 7a 65 72 6f 00 55
>1a1f78		6e 61 62 6c 65 20 74 6f 20 72 65 61 64 20 64 69
>1a1f88		72 65 63 74 6f 72 79 00 55 6e 61 62 6c 65 20 74
>1a1f98		6f 20 6c 6f 61 64 20 66 69 6c 65 00 55 6e 61 62
>1a1fa8		6c 65 20 74 6f 20 73 61 76 65 20 66 69 6c 65 00
>1a1fb8		55 6e 61 62 6c 65 20 74 6f 20 64 65 6c 65 74 65
>1a1fc8		20 66 69 6c 65 00 43 6f 75 6c 64 20 6e 6f 74 20
>1a1fd8		66 69 6e 64 20 66 69 6c 65 00 43 6f 75 6c 64 20
>1a1fe8		6e 6f 74 20 75 70 64 61 74 65 20 64 69 72 65 63
>1a1ff8		74 6f 72 79 00 43 6f 75 6c 64 20 6e 6f 74 20 63
>1a2008		6f 70 79 20 74 68 65 20 66 69 6c 65 00 41 72 67
>1a2018		75 6d 65 6e 74 20 6f 75 74 73 69 64 65 20 64 6f
>1a2028		6d 61 69 6e 00 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a2038		28 e2 20 a9 00 85 d2 2b 28 60 0b 08 08 c2 20 48
>1a2048		a9 00 08 5b 68 28 08 c2 20 a9 0f 1e 8f d4 08 00
>1a2058		e2 20 a9 1a 8f d6 08 00 28 20 c7 43 20 08 3f 64
>1a2068		31 28 2b 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28
>1a2078		c2 20 18 a5 00 69 01 00 85 00 e2 20 a5 02 69 00
>1a2088		85 02 2b 28 60 08 0b 08 c2 20 48 a9 00 08 5b 68
>1a2098		28 e2 20 a7 00 f0 0f c9 20 f0 06 c9 09 f0 02 80
>1a20a8		05 20 6c 20 80 ed 2b 28 60 08 e2 20 a7 00 f0 09
>1a20b8		c9 3a f0 05 20 6c 20 80 f3 28 60 08 e2 20 64 36
>1a20c8		a7 00 f0 19 c5 37 f0 2c c9 9b f0 1e c9 9f f0 1a
>1a20d8		c9 9e f0 1a c9 a0 f0 16 20 6c 20 80 e3 20 49 21
>1a20e8		c2 20 a5 d7 f0 1d e2 20 80 d6 e6 36 80 ea c6 36
>1a20f8		30 30 80 e4 a5 35 30 06 a5 36 f0 02 80 da 20 6c
>1a2108		20 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2118		02 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a2128		d4 08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a2138		8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4
>1a2148		08 08 c2 30 a0 00 00 b7 1a 85 0c 18 a5 1a 65 0c
>1a2158		85 1a a5 1c 69 00 00 85 1c a0 02 00 b7 1a 85 d7
>1a2168		18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85 02 28
>1a2178		60 08 e2 20 48 20 8d 20 68 e2 20 c7 00 d0 08 20
>1a2188		6c 20 20 8d 20 28 60 08 c2 20 48 a9 00 08 5b 68
>1a2198		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a21a8		1d e2 20 dc d4 08 08 e2 20 20 8d 20 e2 20 a7 00
>1a21b8		f0 10 c9 3a f0 0c c5 37 f0 05 20 6c 20 80 ef 28
>1a21c8		38 60 28 18 60 5a 08 e2 20 a0 00 00 b7 00 f0 0d
>1a21d8		c9 3a f0 07 c9 20 d0 05 c8 80 f1 a9 00 28 7a 60
>1a21e8		08 0b 8b 08 c2 20 48 a9 00 08 5b 68 28 20 da 18
>1a21f8		e2 20 a9 00 85 dc 22 3c 11 00 b0 4b a7 00 c9 3a
>1a2208		d0 03 20 6c 20 20 8d 20 a7 00 d0 03 4c 99 22 20
>1a2218		36 04 b0 52 a7 00 10 10 20 fe 0b 85 0c c9 20 d0
>1a2228		03 4c 87 22 a5 d2 f0 51 08 c2 20 48 a9 00 08 5b
>1a2238		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a2248		ad 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a2258		28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a2268		1d e2 20 dc d4 08 20 d1 43 4c 99 22 08 e2 20 48
>1a2278		a9 00 48 ab 68 28 6c 2f 08 a5 0c c9 10 d0 a9 a7
>1a2288		00 20 db 0b c2 20 85 2f 20 da 18 20 6c 20 20 74
>1a2298		22 ab 2b 28 60 08 58 20 2d 20 20 52 1d e2 20 9c
>1a22a8		8a 0f c2 20 a5 1a 85 00 a5 1c 85 02 4c de 22 08
>1a22b8		c2 20 a0 02 00 b7 1a 85 d7 20 47 14 e2 20 a5 dc
>1a22c8		c9 03 f0 12 c2 20 18 a5 1a 69 04 00 85 00 e2 20
>1a22d8		a5 1c 69 00 85 02 c2 20 20 e8 21 e2 20 a5 dc c9
>1a22e8		03 f0 f3 c9 00 d0 31 e2 20 20 8d 20 a7 00 f0 28
>1a22f8		c9 3a f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a2308		a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20
>1a2318		dc d4 08 20 6c 20 80 be 28 60 08 58 e2 20 a9 80
>1a2328		85 d2 9c 8a 0f 20 52 1d c2 30 64 31 a0 02 00 b7
>1a2338		1a f0 29 20 b7 22 e2 20 a5 dc c9 01 f0 1e c9 02
>1a2348		f0 ea c9 03 f0 e6 c2 20 a0 00 00 18 a5 1a 77 1a
>1a2358		85 1a e2 20 a5 1c 69 00 85 1c 80 d0 e2 20 a9 00
>1a2368		85 d2 28 60 08 c2 30 c2 20 a9 00 00 85 08 a9 16
>1a2378		00 85 0a c2 20 a0 02 00 b7 08 f0 31 c5 23 f0 1e
>1a2388		b0 2b c2 20 a0 00 00 18 a5 08 77 08 85 0c e2 20
>1a2398		a5 0a 69 00 85 0a c2 20 a5 0c 85 08 80 d7 c2 20
>1a23a8		a5 08 85 1a e2 20 a5 0a 85 1c 28 38 60 28 18 60
>1a23b8		08 e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 08 e2
>1a23c8		20 a5 0e c5 02 f0 26 c2 20 18 a5 0c 69 01 00 85
>1a23d8		0c e2 20 a5 0e 69 00 85 0e c2 20 18 a5 08 69 01
>1a23e8		00 85 08 e2 20 a5 0a 69 00 85 0a 80 c4 28 60 08
>1a23f8		e2 20 a7 0c 87 08 c2 20 a5 0c c5 00 d0 06 a5 0e
>1a2408		c5 02 f0 26 c2 20 38 a5 0c e9 01 00 85 0c e2 20
>1a2418		a5 0e e9 00 85 0e c2 20 38 a5 08 e9 01 00 85 08
>1a2428		e2 20 a5 0a e9 00 85 0a 80 c6 28 60 08 a0 00 00
>1a2438		c2 20 18 a5 08 77 08 85 0c e2 20 a5 0a 69 00 85
>1a2448		0e c2 20 18 a5 d9 69 04 00 85 00 e2 20 a5 db 69
>1a2458		00 85 02 a0 00 00 c2 20 38 a5 d9 f7 08 85 d9 e2
>1a2468		20 a5 db e9 00 85 db 20 b8 23 20 c7 43 28 60 08
>1a2478		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a0 02 00 97
>1a2488		d9 18 a5 d9 69 04 00 85 08 e2 20 a5 db 69 00 85
>1a2498		0a e2 20 a0 00 00 b7 1a 97 08 f0 03 c8 80 f7 c2
>1a24a8		20 98 18 69 05 00 85 0c c2 20 a0 00 00 a5 0c 97
>1a24b8		d9 c2 20 18 a5 d9 65 0c 85 0c e2 20 a5 db 69 00
>1a24c8		85 db c2 20 a5 0c 85 d9 c2 20 a0 00 00 a9 00 00
>1a24d8		97 d9 c8 c0 05 00 d0 f8 20 c7 43 28 60 0b 08 08
>1a24e8		c2 20 48 a9 00 08 5b 68 28 c2 30 a9 00 00 85 08
>1a24f8		a9 16 00 85 0a a0 02 00 b7 08 f0 1d c5 d7 f0 25
>1a2508		b0 1d a0 00 00 18 a5 08 77 08 85 0c a5 0a 69 00
>1a2518		00 85 0a a5 0c 85 08 80 dc a9 00 00 28 2b 60 a9
>1a2528		01 00 28 2b 60 a9 02 00 28 2b 60 08 c2 30 a9 05
>1a2538		00 85 10 a0 00 00 e2 20 b7 1a f0 07 c2 20 e6 10
>1a2548		c8 80 f3 c2 20 a5 08 85 00 a5 0a 85 02 18 a5 d9
>1a2558		69 04 00 85 0c a5 db 69 00 00 85 0e 18 a5 d9 65
>1a2568		10 85 d9 a5 db 69 00 00 85 db 18 a5 d9 69 04 00
>1a2578		85 08 a5 db 69 00 00 85 0a 20 f7 23 c2 20 a5 10
>1a2588		a0 00 00 97 00 a5 d7 a0 02 00 97 00 18 a5 00 69
>1a2598		04 00 85 00 a5 02 69 00 00 85 02 a0 00 00 e2 20
>1a25a8		b7 1a 97 00 f0 03 c8 80 f7 20 c7 43 28 60 08 c2
>1a25b8		30 85 d7 20 e5 24 c9 00 00 f0 2c c9 01 00 f0 22
>1a25c8		c2 20 a5 08 48 a5 0a 48 20 34 24 68 85 0a 68 85
>1a25d8		08 a5 1a 85 00 a5 1c 85 02 20 8d 20 e2 20 a7 00
>1a25e8		f0 0a 20 33 25 80 05 a5 d7 20 77 24 28 60 0b 08
>1a25f8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 c2 10 a2 00
>1a2608		00 bd 00 4f f0 03 e8 80 f8 86 0c c2 30 8a c9 02
>1a2618		00 90 12 3a 18 69 00 4f aa 18 65 8f a8 a5 0c 3a
>1a2628		8b 44 00 00 ab c2 20 a6 55 a0 00 4f a5 8f 8b 54
>1a2638		00 1a ab e2 20 a5 0c c9 02 90 18 a6 8f a9 22 9d
>1a2648		00 4f e8 bd 00 4f d0 fa a9 22 9d 00 4f a9 00 e8
>1a2658		9d 00 4f 28 2b 60 da 5a 8b 0b 08 08 c2 20 48 a9
>1a2668		00 08 5b 68 28 e2 20 c2 10 ad 00 4f c9 23 f0 0a
>1a2678		c9 7c f0 17 28 2b ab 7a fa 60 c2 20 a9 03 00 85
>1a2688		8f a9 a4 26 85 55 20 f6 25 80 e9 c2 20 a9 04 00
>1a2698		85 8f a9 a8 26 85 55 20 f6 25 80 d8 44 49 52 00
>1a26a8		42 52 55 4e 00 8b 08 20 cc 01 08 e2 20 48 a9 1a
>1a26b8		48 ab 68 28 a2 69 d2 20 b8 03 28 ab 60 08 e2 30
>1a26c8		a9 01 20 1c 00 20 db 00 c9 00 f0 f9 c9 0d f0 02
>1a26d8		80 f3 28 60 0b 08 08 c2 20 48 a9 00 08 5b 68 28
>1a26e8		c2 30 64 d7 a9 00 4f 85 1a a9 00 00 85 1c 20 f0
>1a26f8		08 c2 20 a5 d7 d0 05 20 9d 22 80 07 20 b6 25 28
>1a2708		2b 38 60 28 2b 18 60 c2 30 a2 ff fe 9a 20 ad 26
>1a2718		20 08 00 20 0c 00 22 3c 11 00 a9 00 00 20 1c 00
>1a2728		20 5e 26 20 dc 26 b0 e8 80 e3 08 e2 20 20 f7 07
>1a2738		c9 00 f0 2c c9 01 f0 2d c9 02 f0 1f 08 c2 20 48
>1a2748		a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20
>1a2758		29 ff 00 20 ad 1d e2 20 dc d4 08 20 a0 15 80 08
>1a2768		20 19 53 80 03 20 88 55 28 60 08 e2 20 20 a9 07
>1a2778		c9 00 f0 23 c9 01 f0 24 08 c2 20 48 a9 00 08 5b
>1a2788		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a2798		ad 1d e2 20 dc d4 08 20 2b 53 80 03 20 7d 55 28
>1a27a8		60 08 e2 20 20 a9 07 c9 00 f0 23 c9 01 f0 24 08
>1a27b8		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08
>1a27c8		00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 20 3d
>1a27d8		53 80 03 20 1e 56 28 60 20 13 07 20 44 07 20 d3
>1a27e8		55 60 a5 23 8f 1a 01 00 a5 29 8f 18 01 00 af 1e
>1a27f8		01 00 85 23 60 08 c2 30 48 20 13 07 a5 2d c9 00
>1a2808		00 d0 0d a5 2b d0 09 da a6 29 20 f1 62 fa 80 1c
>1a2818		20 44 07 c2 20 a5 2b 48 a5 29 48 20 7c 61 c2 20
>1a2828		68 85 29 68 85 2b 20 1e 56 20 5b 63 68 28 60 08
>1a2838		20 a5 05 20 d6 05 c2 20 a5 23 25 29 85 23 a5 25
>1a2848		25 2b 85 25 28 60 08 20 a5 05 20 d6 05 c2 20 a5
>1a2858		23 05 29 85 23 a5 25 05 2b 85 25 28 60 08 20 a5
>1a2868		05 c2 20 a5 23 49 ff ff 85 23 a5 25 49 ff ff 85
>1a2878		25 28 60 08 e2 20 20 f7 07 c9 00 f0 2c c9 01 f0
>1a2888		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2898		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a28a8		20 dc d4 08 20 28 17 80 08 20 3e 54 80 03 20 b3
>1a28b8		5b 28 60 08 e2 20 20 f7 07 c9 00 f0 2c c9 01 f0
>1a28c8		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a28d8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a28e8		20 dc d4 08 20 3f 17 80 08 20 5f 54 80 03 20 c8
>1a28f8		5b 28 60 08 e2 20 20 f7 07 c9 00 f0 2c c9 01 f0
>1a2908		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2918		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a2928		20 dc d4 08 20 56 17 80 08 20 8c 54 80 03 20 dd
>1a2938		5b 28 60 08 e2 20 20 f7 07 c9 00 f0 2c c9 01 f0
>1a2948		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2958		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a2968		20 dc d4 08 20 6d 17 80 08 20 aa 54 80 03 20 1c
>1a2978		5c 28 60 08 e2 20 20 f7 07 c9 00 f0 2c c9 01 f0
>1a2988		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a2998		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a29a8		20 dc d4 08 20 84 17 80 08 20 c8 54 80 03 20 07
>1a29b8		5c 28 60 08 e2 20 20 f7 07 c9 00 f0 2c c9 01 f0
>1a29c8		2d c9 02 f0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a29d8		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a29e8		20 dc d4 08 20 9b 17 80 08 20 f5 54 80 03 20 f2
>1a29f8		5b 28 60 08 e2 20 a5 27 c9 00 f0 2d c9 01 f0 1f
>1a2a08		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3
>1a2a18		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 e2
>1a2a28		20 a5 26 49 80 85 26 80 16 c2 20 a5 23 49 ff ff
>1a2a38		85 23 a5 25 49 ff ff 85 25 e6 23 d0 02 e6 25 28
>1a2a48		60 08 e2 20 20 5b 1c 20 b7 06 20 02 05 a5 23 0a
>1a2a58		0a 0a 0a 05 29 48 a9 2c 20 79 21 20 5b 1c 20 b7
>1a2a68		06 20 02 05 a5 23 0a 0a 0a 0a 05 29 48 a9 2c 20
>1a2a78		79 21 20 5b 1c 20 b7 06 20 02 05 a5 23 0a 0a 0a
>1a2a88		0a 05 29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f
>1a2a98		00 08 af 68 8f 02 08 af 68 8f 04 08 af af 0e 08
>1a2aa8		af 29 f7 8f 0e 08 af 20 b1 20 28 60 08 e2 20 20
>1a2ab8		5b 1c 20 b7 06 20 02 05 a5 23 0a 0a 0a 0a 05 29
>1a2ac8		48 a9 2c 20 79 21 20 5b 1c 20 b7 06 20 02 05 a5
>1a2ad8		23 0a 0a 0a 0a 05 29 48 a9 2c 20 79 21 20 5b 1c
>1a2ae8		20 a5 05 20 38 05 c2 20 a5 23 85 92 a5 29 85 23
>1a2af8		20 02 05 e2 20 a5 23 0a 0a 0a 0a 05 29 48 c2 20
>1a2b08		a5 92 85 23 20 02 05 e2 20 a5 23 0a 0a 0a 0a 05
>1a2b18		29 48 af 0e 08 af 09 0c 8f 0e 08 af 68 8f 0f 08
>1a2b28		af 68 8f 0a 08 af 68 8f 09 08 af 68 8f 06 08 af
>1a2b38		af 0e 08 af 29 f7 8f 0e 08 af 20 b1 20 28 60 08
>1a2b48		e2 20 48 20 5b 1c 20 b7 06 e2 20 a5 23 29 0f 0a
>1a2b58		0a 0a 0a 83 01 a9 2c 20 79 21 20 5b 1c 20 b7 06
>1a2b68		a5 23 29 0f 03 01 8f 1e 00 00 e2 20 68 28 60 08
>1a2b78		c2 20 f4 00 00 e2 20 20 5b 1c 20 b7 06 a5 23 83
>1a2b88		01 a9 2c 20 79 21 20 5b 1c 20 b7 06 a5 23 83 02
>1a2b98		a9 2c 20 79 21 20 5b 1c 20 b7 06 a5 23 8f 0d 00
>1a2ba8		af a3 02 8f 0e 00 af a3 01 8f 0f 00 af c2 20 68
>1a2bb8		28 60 08 c2 20 f4 00 00 e2 20 20 5b 1c 20 a5 05
>1a2bc8		a5 23 f0 16 a9 01 8f 04 00 af a9 20 8f 08 00 af
>1a2bd8		8f 09 00 af 22 2c 11 00 80 0a a9 00 8f 04 00 af
>1a2be8		22 2c 11 00 a9 2c 85 37 20 ae 21 90 39 20 6c 20
>1a2bf8		20 5b 1c 20 b7 06 a5 23 83 01 a9 2c 20 79 21 20
>1a2c08		5b 1c 20 b7 06 a5 23 83 02 a9 2c 20 79 21 20 5b
>1a2c18		1c 20 b7 06 a5 23 8f 05 00 af a3 02 8f 06 00 af
>1a2c28		a3 01 8f 07 00 af c2 20 68 28 60 08 c2 20 3b 38
>1a2c38		e9 05 00 1b e2 20 20 5b 1c 20 b7 06 a5 23 c9 0a
>1a2c48		90 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>1a2c58		8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4
>1a2c68		08 83 01 a9 2c 20 79 21 20 5b 1c 20 b7 06 a5 23
>1a2c78		83 02 a9 2c 20 79 21 20 5b 1c 20 b7 06 a5 23 83
>1a2c88		03 a9 2c 20 79 21 20 5b 1c 20 b7 06 a5 23 83 04
>1a2c98		a9 2c 20 79 21 20 5b 1c 20 b7 06 a5 23 83 05 a9
>1a2ca8		af 85 a0 a3 01 0a c2 20 29 ff 00 aa bf eb 2c 1a
>1a2cb8		85 9e e2 20 a3 02 c2 20 29 ff 00 0a 0a 18 65 9e
>1a2cc8		85 9e e2 20 a0 02 00 a3 03 97 9e a0 01 00 a3 04
>1a2cd8		97 9e a0 00 00 a3 05 97 9e c2 20 3b 18 69 05 00
>1a2ce8		1b 28 60 00 20 00 24 00 28 00 2c 00 30 00 34 00
>1a2cf8		38 00 3c 40 1f 80 1f da 5a 08 20 5b 1c 20 a5 05
>1a2d08		c2 20 a5 23 89 00 01 d0 17 af 00 00 af 89 00 01
>1a2d18		f0 0e e2 20 a9 00 8f 01 00 af a9 01 8f 01 00 af
>1a2d28		c2 20 a5 23 8f 00 00 af e2 20 a5 24 c2 20 29 03
>1a2d38		00 0a aa c2 20 bf 86 2d 1a 8f 10 f0 1a bf 8e 2d
>1a2d48		1a 8f 12 f0 1a af 10 f0 1a 8f 08 01 00 af 12 f0
>1a2d58		1a 8f 0a 01 00 af 0c 01 00 8f 14 f0 1a e2 20 af
>1a2d68		0e 01 00 8f 16 f0 1a 22 2c 11 00 c2 20 af 1a 00
>1a2d78		00 aa af 1c 00 00 a8 20 20 00 28 7a fa 60 80 02
>1a2d88		20 03 40 01 90 01 e0 01 58 02 f0 00 2c 01 50 00
>1a2d98		64 00 28 00 32 00 3c 00 4b 00 1e 00 32 00 48 00
>1a2da8		5c 00 20 00 2a 00 34 00 43 00 16 00 34 00 da 08
>1a2db8		c2 30 c9 02 00 b0 1c 0a 0a aa bf 00 f0 1a 85 9e
>1a2dc8		bf 02 f0 1a 85 a0 c9 f0 00 b0 08 c9 b0 00 90 03
>1a2dd8		28 fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a2de8		09 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a2df8		d4 08 da 08 c2 30 c9 02 00 b0 17 0a 0a aa bf 08
>1a2e08		f0 1a 85 9e bf 0a f0 1a 85 a0 c9 40 00 b0 03 28
>1a2e18		fa 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a2e28		8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4
>1a2e38		08 08 c2 30 3b 38 e9 07 00 1b 20 5b 1c 20 b7 06
>1a2e48		c2 20 a5 23 c9 02 00 b0 59 83 01 e2 20 a9 2c 20
>1a2e58		79 21 20 5b 1c 20 b7 06 a5 23 83 03 a9 2c 20 79
>1a2e68		21 20 5b 1c 20 b7 06 a3 01 0a 0a 0a aa a3 03 d0
>1a2e78		05 a5 23 0a 80 04 a5 23 38 2a 9f 00 01 af c2 20
>1a2e88		a9 2c 00 85 37 20 ae 21 b0 37 c2 20 08 c2 20 a9
>1a2e98		00 00 85 23 a9 b0 00 85 25 e2 20 a9 00 85 27 28
>1a2ea8		80 27 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09
>1a2eb8		8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4
>1a2ec8		08 c2 20 20 6c 20 20 5b 1c c2 20 a3 01 0a 0a aa
>1a2ed8		a5 23 9f 00 f0 1a 9f 08 f0 1a 83 04 a5 25 9f 02
>1a2ee8		f0 1a 38 e9 b0 00 9f 0a f0 1a 83 06 a3 01 0a 0a
>1a2ef8		0a aa e2 20 a3 04 9f 01 01 af a3 05 9f 02 01 af
>1a2f08		a3 06 9f 03 01 af a9 00 9f 04 01 af 9f 05 01 af
>1a2f18		c2 30 3b 18 69 07 00 1b 28 60 08 c2 20 48 a9 00
>1a2f28		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>1a2f38		00 20 ad 1d e2 20 dc d4 08 08 c2 20 20 5b 1c 20
>1a2f48		b7 06 a5 23 20 fa 2d c2 20 a5 9e 8f 05 04 af af
>1a2f58		14 f0 1a 8f 08 04 af e2 20 a5 a0 8f 07 04 af af
>1a2f68		16 f0 1a 8f 0a 04 af a9 00 8f 01 04 af a9 85 8f
>1a2f78		00 04 af af 01 04 af 30 fa a9 00 8f 00 04 af 28
>1a2f88		60 08 c2 20 a5 5d 8f 08 01 00 af 10 f0 1a 8f 0a
>1a2f98		01 00 18 af 0c 01 00 65 59 85 0c af 0e 01 00 69
>1a2fa8		00 00 85 0e 18 a5 0c 65 9e 85 0c a5 0e 65 a0 85
>1a2fb8		0e e2 20 a5 55 87 0c 28 60 c2 20 a9 01 00 85 dd
>1a2fc8		38 a5 61 e5 59 85 69 10 0b 49 ff ff 1a 85 69 a9
>1a2fd8		ff ff 85 dd a9 01 00 85 df 38 a5 65 e5 5d 85 6d
>1a2fe8		10 0b 49 ff ff 1a 85 6d a9 ff ff 85 df a5 6d c5
>1a2ff8		69 b0 04 a5 69 80 06 a5 6d 49 ff ff 1a 48 0a 68
>1a3008		6a 85 71 20 89 2f a5 59 c5 61 d0 06 a5 5d c5 65
>1a3018		f0 36 a5 71 85 75 a5 69 49 ff ff 1a c5 75 10 10
>1a3028		f0 0e 38 a5 71 e5 6d 85 71 18 a5 59 65 dd 85 59
>1a3038		a5 75 c5 6d 10 cd f0 cb 18 a5 71 65 69 85 71 18
>1a3048		a5 5d 65 df 85 5d 80 bb 60 08 c2 20 3b 38 e9 06
>1a3058		00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20 48
>1a3068		a9 00 48 ab 68 28 c2 30 20 5b 1c 20 b7 06 83 01
>1a3078		a9 2c 00 20 79 21 20 5b 1c 20 a5 05 a5 23 83 03
>1a3088		a9 2c 00 20 79 21 20 5b 1c 20 a5 05 a5 23 83 05
>1a3098		a9 2c 00 20 79 21 20 5b 1c 20 b7 06 a5 23 85 55
>1a30a8		a3 03 85 59 a3 05 85 5d a3 01 20 b6 2d 20 89 2f
>1a30b8		c2 20 3b 18 69 06 00 1b 28 60 08 c2 20 3b 38 e9
>1a30c8		0a 00 1b 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a30d8		48 a9 00 48 ab 68 28 c2 30 20 5b 1c 20 b7 06 83
>1a30e8		01 a9 2c 00 20 79 21 20 5b 1c 20 a5 05 a5 23 83
>1a30f8		03 a9 2c 00 20 79 21 20 5b 1c 20 a5 05 a5 23 83
>1a3108		05 a9 2c 00 20 79 21 20 5b 1c 20 a5 05 a5 23 83
>1a3118		07 a9 2c 00 20 79 21 20 5b 1c 20 a5 05 a5 23 83
>1a3128		09 a9 2c 00 20 79 21 20 5b 1c 20 b7 06 a5 23 85
>1a3138		55 a3 03 85 59 a3 05 85 5d a3 07 85 61 a3 09 85
>1a3148		65 a3 01 20 b6 2d 20 c1 2f c2 20 3b 18 69 0a 00
>1a3158		1b 28 60 08 c2 20 3b 38 e9 0c 00 1b 08 c2 20 48
>1a3168		a9 00 08 5b 68 28 08 e2 20 48 a9 00 48 ab 68 28
>1a3178		c2 30 20 5b 1c 20 b7 06 83 01 a9 2c 00 20 79 21
>1a3188		20 5b 1c 20 a5 05 a5 23 83 03 a9 2c 00 20 79 21
>1a3198		20 5b 1c 20 a5 05 a5 23 83 05 a9 2c 00 20 79 21
>1a31a8		20 5b 1c 20 a5 05 a5 23 83 07 a9 2c 00 20 79 21
>1a31b8		20 5b 1c 20 a5 05 a5 23 83 09 a9 2c 00 20 79 21
>1a31c8		20 5b 1c 20 b7 06 a5 23 83 0b a3 01 20 fa 2d a9
>1a31d8		07 00 8f 00 04 af c2 20 a3 05 8f 00 01 00 af 10
>1a31e8		f0 1a 8f 02 01 00 18 af 04 01 00 63 03 85 0c e2
>1a31f8		20 af 06 01 00 69 00 85 0e c2 20 18 a5 9e 65 0c
>1a3208		8f 05 04 af e2 20 a5 a0 65 0e 8f 07 04 af c2 20
>1a3218		38 a3 07 e3 03 85 0c 8f 08 04 af 38 af 10 f0 1a
>1a3228		8f 0e 04 af 38 a3 09 e3 05 8f 0a 04 af e2 20 a3
>1a3238		0b 8f 01 04 af af 00 04 af 09 80 8f 00 04 af af
>1a3248		01 04 af 30 fa a9 00 8f 00 04 af c2 20 3b 18 69
>1a3258		0c 00 1b 28 60 08 c2 20 c9 40 00 b0 13 0a 0a 0a
>1a3268		18 69 00 0c 85 9e a9 af 00 69 00 00 85 a0 28 60
>1a3278		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a3288		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08
>1a3298		c2 20 3b 38 e9 03 00 1b c2 30 20 5b 1c 20 b7 06
>1a32a8		a5 23 83 01 a9 2c 00 20 79 21 e2 20 20 5b 1c 20
>1a32b8		b7 06 a5 23 c9 08 b0 56 83 03 a9 2c 20 79 21 20
>1a32c8		5b 1c 20 a5 05 c2 20 38 a5 23 e9 00 00 85 23 a5
>1a32d8		25 e9 b0 00 85 25 30 36 c2 20 a3 01 aa 20 5d 32
>1a32e8		a5 23 a0 01 00 97 9e e2 20 a5 25 c8 c8 97 9e bf
>1a32f8		18 f0 1a 29 f1 85 0c a3 03 0a 29 0e 05 0c 87 9e
>1a3308		9f 18 f0 1a c2 20 3b 18 69 03 00 1b 28 60 08 c2
>1a3318		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a3328		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08 c2 20
>1a3338		3b 38 e9 04 00 1b c2 30 20 5b 1c 20 b7 06 a5 23
>1a3348		83 01 a9 2c 00 20 79 21 20 5b 1c 20 a5 05 a5 23
>1a3358		83 03 a9 2c 00 20 79 21 20 5b 1c 20 a5 05 a3 01
>1a3368		20 5d 32 a3 03 a0 04 00 97 9e a5 23 a0 06 00 97
>1a3378		9e c2 20 3b 18 69 04 00 1b 28 60 08 c2 20 3b 38
>1a3388		e9 03 00 1b c2 30 20 5b 1c 20 b7 06 a5 23 83 01
>1a3398		a9 2c 00 20 79 21 e2 20 20 5b 1c 20 a5 05 a5 23
>1a33a8		d0 04 83 03 80 04 a9 01 83 03 a9 2c 85 37 20 ae
>1a33b8		21 b0 20 c2 30 a3 01 aa 20 5d 32 e2 20 bf 18 f0
>1a33c8		1a 29 fe 85 0c a3 03 29 01 05 0c 9f 18 f0 1a 87
>1a33d8		9e 80 36 c2 30 20 6c 20 20 5b 1c 20 b7 06 a5 23
>1a33e8		c9 08 00 b0 2e 0a 0a 0a 0a 85 0c a3 01 aa 20 5d
>1a33f8		32 e2 20 a3 03 29 01 05 0c 85 0c bf 18 f0 1a 29
>1a3408		8e 05 0c 87 9e 9f 18 f0 1a c2 20 3b 18 69 03 00
>1a3418		1b 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3428		09 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a3438		d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01 a9 04 00
>1a3448		8d 02 01 18 ad 04 01 69 80 02 85 9e a9 af 00 85
>1a3458		a0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3468		09 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a3478		d4 08 08 c2 20 c9 04 00 b0 19 8d 00 01 a9 0c 00
>1a3488		8d 02 01 18 ad 04 01 69 00 02 85 9e a9 af 00 85
>1a3498		a0 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a34a8		09 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a34b8		d4 08 08 c2 20 3b 38 e9 06 00 1b c2 20 20 5b 1c
>1a34c8		20 b7 06 a5 23 83 01 a9 2c 00 20 79 21 20 5b 1c
>1a34d8		20 b7 06 a5 23 83 03 a9 2c 00 20 79 21 20 5b 1c
>1a34e8		20 b7 06 a5 23 83 05 a9 2c 00 20 79 21 20 5b 1c
>1a34f8		20 a5 05 a3 01 20 3a 34 a5 23 87 9e e2 20 38 a5
>1a3508		25 e9 b0 a0 02 00 97 9e a3 05 d0 0d e2 20 a3 03
>1a3518		29 07 a0 03 00 97 9e 80 0d e2 20 a3 03 29 07 09
>1a3528		08 a0 03 00 97 9e c2 20 3b 18 69 06 00 1b 28 60
>1a3538		08 c2 20 3b 38 e9 06 00 1b c2 20 20 5b 1c 20 b7
>1a3548		06 a5 23 83 01 a9 2c 00 20 79 21 20 5b 1c 20 a5
>1a3558		05 a5 23 83 03 a9 2c 00 20 79 21 20 5b 1c 20 a5
>1a3568		05 a5 23 83 05 a9 2c 00 20 79 21 20 5b 1c 20 a5
>1a3578		05 a3 01 20 7a 34 a5 23 a0 01 00 97 9e e2 20 38
>1a3588		a5 25 e9 b0 c8 c8 97 9e c2 20 a3 03 a0 04 00 97
>1a3598		9e a3 05 a0 06 00 97 9e c2 20 3b 18 69 06 00 1b
>1a35a8		28 60 08 c2 20 f4 00 00 c2 20 20 5b 1c 20 b7 06
>1a35b8		a5 23 83 01 a9 2c 00 20 79 21 20 5b 1c 20 a5 05
>1a35c8		a3 01 20 7a 34 a5 23 d0 06 e2 20 a9 00 80 04 e2
>1a35d8		20 a9 01 e2 20 a0 00 00 97 9e c2 20 68 28 60 08
>1a35e8		c2 20 3b 38 e9 04 00 1b c2 20 20 5b 1c 20 b7 06
>1a35f8		a5 23 83 01 a9 2c 00 20 79 21 20 5b 1c 20 a5 05
>1a3608		a5 23 83 03 a9 2c 00 20 79 21 20 5b 1c 20 a5 05
>1a3618		a3 01 20 7a 34 a5 23 a0 0a 00 97 9e a3 03 a0 08
>1a3628		00 97 9e c2 20 3b 18 69 04 00 1b 28 60 0b 08 08
>1a3638		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 00 8f 58 f0
>1a3648		1a af 5c f0 1a c9 b0 b0 1c 8f 24 04 af af 5b f0
>1a3658		1a 8f 23 04 af af 5a f0 1a 8f 22 04 af a9 10 8f
>1a3668		58 f0 1a 80 17 38 e9 b0 8f 04 04 af af 5b f0 1a
>1a3678		8f 03 04 af af 5a f0 1a 8f 02 04 af af 59 f0 1a
>1a3688		d0 3c af 58 f0 1a f0 1b af 5d f0 1a 8f 28 04 af
>1a3698		af 5e f0 1a 8f 29 04 af af 5f f0 1a 8f 2a 04 af
>1a36a8		82 8b 00 af 5d f0 1a 8f 08 04 af af 5e f0 1a 8f
>1a36b8		09 04 af af 5f f0 1a 8f 0a 04 af 82 70 00 af 58
>1a36c8		f0 1a 09 01 8f 58 f0 1a 89 10 f0 32 af 60 f0 1a
>1a36d8		8f 28 04 af af 61 f0 1a 8f 29 04 af af 62 f0 1a
>1a36e8		8f 2a 04 af af 63 f0 1a 8f 2b 04 af af 64 f0 1a
>1a36f8		8f 2c 04 af af 65 f0 1a 8f 2d 04 af 80 30 af 60
>1a3708		f0 1a 8f 08 04 af af 61 f0 1a 8f 09 04 af af 62
>1a3718		f0 1a 8f 0a 04 af af 63 f0 1a 8f 0b 04 af af 64
>1a3728		f0 1a 8f 0c 04 af af 65 f0 1a 8f 0d 04 af e2 20
>1a3738		af 69 f0 1a c9 b0 b0 20 8f 27 04 af af 68 f0 1a
>1a3748		8f 26 04 af af 67 f0 1a 8f 25 04 af af 58 f0 1a
>1a3758		09 20 8f 58 f0 1a 80 17 38 e9 b0 8f 07 04 af af
>1a3768		68 f0 1a 8f 06 04 af af 67 f0 1a 8f 05 04 af af
>1a3778		66 f0 1a d0 3e af 58 f0 1a 89 20 f0 1b af 6a f0
>1a3788		1a 8f 28 04 af af 6b f0 1a 8f 29 04 af af 6c f0
>1a3798		1a 8f 2a 04 af 82 8b 00 af 6a f0 1a 8f 08 04 af
>1a37a8		af 6b f0 1a 8f 09 04 af af 6c f0 1a 8f 0a 04 af
>1a37b8		82 70 00 af 58 f0 1a 09 02 8f 58 f0 1a 89 20 f0
>1a37c8		32 af 6d f0 1a 8f 28 04 af af 6e f0 1a 8f 29 04
>1a37d8		af af 6f f0 1a 8f 2a 04 af af 70 f0 1a 8f 2b 04
>1a37e8		af af 71 f0 1a 8f 2e 04 af af 72 f0 1a 8f 2f 04
>1a37f8		af 80 30 af 6d f0 1a 8f 08 04 af af 6e f0 1a 8f
>1a3808		09 04 af af 6f f0 1a 8f 0a 04 af af 70 f0 1a 8f
>1a3818		0b 04 af af 71 f0 1a 8f 0e 04 af af 72 f0 1a 8f
>1a3828		0f 04 af af 58 f0 1a 29 30 f0 43 c9 10 f0 76 c9
>1a3838		20 d0 03 82 8a 00 af 58 f0 1a 29 03 f0 23 c9 03
>1a3848		f0 23 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 0a
>1a3858		8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4
>1a3868		08 a9 01 80 02 a9 03 8f 20 04 af 82 7d 00 af 58
>1a3878		f0 1a 29 03 f0 23 c9 03 f0 23 08 c2 20 48 a9 00
>1a3888		08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff
>1a3898		00 20 ad 1d e2 20 dc d4 08 a9 01 80 02 a9 03 8f
>1a38a8		00 04 af 80 34 af 58 f0 1a 29 01 0a 09 11 8f 20
>1a38b8		04 af af 58 f0 1a 29 02 09 11 8f 00 04 af 80 19
>1a38c8		af 58 f0 1a 29 02 09 21 8f 20 04 af af 58 f0 1a
>1a38d8		29 01 0a 09 21 8f 00 04 af af 00 04 af 09 80 8f
>1a38e8		00 04 af af 58 f0 1a 29 30 f0 0f af 20 04 af 09
>1a38f8		80 8f 20 04 af ea ea ea ea ea af 01 04 af 89 80
>1a3908		d0 f8 a9 00 8f 20 04 af 8f 00 04 af 28 2b 60 0b
>1a3918		08 e2 20 c2 10 a9 00 a2 00 00 8f 59 f0 1a e8 e0
>1a3928		1a 00 d0 f6 20 cd 21 c9 e6 f0 23 c9 e7 f0 5e 08
>1a3938		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08
>1a3948		00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 20 79
>1a3958		21 20 5b 1c 20 a5 05 c2 20 a5 23 8f 5a f0 1a e2
>1a3968		20 a5 25 8f 5c f0 1a a9 2c 20 79 21 20 5b 1c 20
>1a3978		a5 05 c2 20 a5 23 8f 5d f0 1a e2 20 a5 25 8f 5f
>1a3988		f0 1a e2 20 a9 00 8f 59 f0 1a 82 74 00 20 79 21
>1a3998		20 5b 1c 20 a5 05 c2 20 a5 23 8f 5a f0 1a e2 20
>1a39a8		a5 25 8f 5c f0 1a a9 2c 20 79 21 20 5b 1c 20 61
>1a39b8		06 c2 20 a5 23 8f 60 f0 1a 8d 00 01 a9 2c 00 20
>1a39c8		79 21 20 5b 1c 20 61 06 c2 20 a5 23 8f 62 f0 1a
>1a39d8		8d 02 01 a9 2c 00 20 79 21 20 5b 1c 20 61 06 c2
>1a39e8		20 a5 23 8f 64 f0 1a c2 20 ad 04 01 8f 5d f0 1a
>1a39f8		e2 20 ad 06 01 8f 5f f0 1a e2 20 a9 01 8f 59 f0
>1a3a08		1a e2 20 a9 9c 20 79 21 20 cd 21 c9 e6 f0 23 c9
>1a3a18		e7 f0 5e 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a3a28		02 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a3a38		d4 08 20 79 21 20 5b 1c 20 a5 05 c2 20 a5 23 8f
>1a3a48		67 f0 1a e2 20 a5 25 8f 69 f0 1a a9 2c 20 79 21
>1a3a58		20 5b 1c 20 a5 05 c2 20 a5 23 8f 6a f0 1a e2 20
>1a3a68		a5 25 8f 6c f0 1a e2 20 a9 00 8f 66 f0 1a 82 74
>1a3a78		00 20 79 21 20 5b 1c 20 a5 05 c2 20 a5 23 8f 67
>1a3a88		f0 1a e2 20 a5 25 8f 69 f0 1a a9 2c 20 79 21 20
>1a3a98		5b 1c 20 61 06 c2 20 a5 23 8f 6d f0 1a 8d 00 01
>1a3aa8		a9 2c 00 20 79 21 20 5b 1c 20 61 06 c2 20 a5 23
>1a3ab8		8f 6f f0 1a 8d 02 01 a9 2c 00 20 79 21 20 5b 1c
>1a3ac8		20 61 06 c2 20 a5 23 8f 71 f0 1a c2 20 ad 04 01
>1a3ad8		8f 6a f0 1a e2 20 ad 06 01 8f 6c f0 1a e2 20 a9
>1a3ae8		01 8f 66 f0 1a c2 20 af 5d f0 1a cf 6a f0 1a d0
>1a3af8		14 e2 20 af 5f f0 1a cf 6c f0 1a d0 08 c2 20 20
>1a3b08		35 36 28 2b 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a3b18		20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a3b28		20 dc d4 08 08 c2 30 20 5b 1c 20 b7 06 a5 23 48
>1a3b38		a9 2c 00 20 79 21 20 5b 1c 20 b7 06 a4 23 fa 20
>1a3b48		20 00 28 60 08 20 8d 20 e2 20 a7 00 d0 03 4c f4
>1a3b58		3b c9 3a d0 03 4c f4 3b c9 22 d0 0b 20 67 1b 20
>1a3b68		02 45 a9 3b 20 79 21 20 36 04 90 44 20 c7 52 90
>1a3b78		3f a9 3f 20 18 00 a9 20 20 18 00 20 10 00 e2 20
>1a3b88		a5 ea c9 02 f0 49 c9 00 d0 03 82 84 00 c9 01 f0
>1a3b98		5d 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a3ba8		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a3bb8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a3bc8		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 c2
>1a3bd8		20 a9 00 4c 85 23 a9 00 00 85 25 e2 20 a9 02 85
>1a3be8		27 c2 20 20 2a 52 a9 0d 00 20 18 00 28 60 c2 20
>1a3bf8		a5 00 85 40 a5 02 85 42 a9 00 4c 85 00 a9 00 00
>1a3c08		85 02 20 e9 58 c2 20 a5 40 85 00 a5 42 85 02 80
>1a3c18		d0 c2 20 a5 00 85 40 a5 02 85 42 a9 00 4c 85 00
>1a3c28		a9 00 00 85 02 20 2c 08 c2 20 a5 40 85 00 a5 42
>1a3c38		85 02 80 ad 08 20 8d 20 e2 20 a7 00 f0 47 c9 3a
>1a3c48		f0 43 20 36 04 90 40 20 c7 52 90 3b 20 50 14 20
>1a3c58		14 00 e2 20 a0 00 00 97 16 a9 00 c8 97 16 c2 20
>1a3c68		a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 20 2a
>1a3c78		52 20 8d 20 a7 00 f0 0d c9 3a f0 09 c9 2c d0 07
>1a3c88		20 6c 20 80 b0 28 60 08 c2 20 48 a9 00 08 5b 68
>1a3c98		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a3ca8		1d e2 20 dc d4 08 08 20 5b 1c 20 a5 05 e2 20 a9
>1a3cb8		5c 85 a2 c2 20 a5 23 85 a3 e2 20 a5 25 85 a5 e2
>1a3cc8		20 a9 2c 85 37 20 ae 21 90 41 20 6c 20 20 5b 1c
>1a3cd8		20 61 06 c2 20 a5 23 85 55 e2 20 a9 2c 85 37 20
>1a3ce8		ae 21 90 27 20 6c 20 20 5b 1c 20 61 06 c2 20 a5
>1a3cf8		23 85 59 e2 20 a9 2c 85 37 20 ae 21 90 0d 20 6c
>1a3d08		20 20 5b 1c 20 61 06 c2 20 a4 23 a6 59 a5 55 0b
>1a3d18		8b 08 22 a2 08 00 28 ab 2b 20 b1 20 28 60 08 c2
>1a3d28		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a3d38		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08 e2 20
>1a3d48		20 8d 20 20 c7 52 90 64 a9 8f 20 79 21 a9 01 20
>1a3d58		77 19 a2 01 00 a9 00 8f 00 4d 00 20 5b 1c 20 a5
>1a3d68		05 c2 20 a5 23 9f 00 4d 00 e2 20 af 00 4d 00 1a
>1a3d78		8f 00 4d 00 30 55 e8 e8 20 8d 20 a7 00 c9 2c f0
>1a3d88		25 c9 90 d0 27 20 6c 20 20 45 65 c2 20 a5 c0 85
>1a3d98		23 e2 20 a5 c2 85 25 64 26 a5 ea 09 80 85 ea 85
>1a3da8		27 20 2a 52 28 60 20 6c 20 4c 63 3d 08 c2 20 48
>1a3db8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a3dc8		29 ff 00 20 ad 1d e2 20 dc d4 08 08 c2 20 48 a9
>1a3dd8		00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29
>1a3de8		ff 00 20 ad 1d e2 20 dc d4 08 08 20 8d 20 e2 20
>1a3df8		a7 00 f0 28 c9 3a f0 24 20 36 04 90 21 20 c7 52
>1a3e08		90 1c 20 45 3e 20 2a 52 20 8d 20 a7 00 f0 0d c9
>1a3e18		3a f0 09 c9 2c d0 07 20 6c 20 80 cf 28 60 08 c2
>1a3e28		20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00
>1a3e38		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08 a5 02
>1a3e48		85 42 a5 00 85 40 a5 1c 85 46 a5 1a 85 44 c2 20
>1a3e58		a5 3a d0 04 a5 38 f0 4e a5 38 85 00 a5 3a 85 02
>1a3e68		a5 3c 85 1a a5 3e 85 1c e2 20 a7 00 f0 53 c9 3a
>1a3e78		f0 4f c9 2c d0 03 20 6c 20 20 8d 20 a7 00 c9 22
>1a3e88		f0 4e 20 4f 04 b0 4e 08 c2 20 48 a9 00 08 5b 68
>1a3e98		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a3ea8		1d e2 20 dc d4 08 c2 20 a9 00 00 85 1a a9 16 00
>1a3eb8		85 1c 18 a5 1a 69 04 00 85 00 a5 1c 69 00 00 85
>1a3ec8		02 e2 20 a9 80 85 35 a9 ab 85 37 20 c3 20 80 a9
>1a3ed8		20 67 1b 80 03 20 59 1a c2 20 a5 00 85 38 a5 02
>1a3ee8		85 3a a5 1a 85 3c a5 1c 85 3e a5 44 85 1a a5 46
>1a3ef8		85 1c a5 40 85 00 a5 42 85 02 28 60 20 b1 20 60
>1a3f08		64 38 64 3a 64 3c 64 3e 60 20 24 00 60 20 5b 1c
>1a3f18		c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9 2c d0 22
>1a3f28		20 6c 20 20 5b 1c c2 20 a5 26 d0 35 68 85 08 68
>1a3f38		85 0a c2 20 a5 23 87 08 e2 20 a0 02 00 a5 25 97
>1a3f48		08 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a3f58		8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4
>1a3f68		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f
>1a3f78		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a3f88		20 5b 1c c2 20 a5 25 48 a5 23 48 e2 20 a7 00 c9
>1a3f98		2c d0 19 20 6c 20 20 5b 1c c2 20 a5 25 d0 2c 68
>1a3fa8		85 08 68 85 0a c2 20 a5 23 87 08 60 08 c2 20 48
>1a3fb8		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a3fc8		29 ff 00 20 ad 1d e2 20 dc d4 08 08 c2 20 48 a9
>1a3fd8		00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29
>1a3fe8		ff 00 20 ad 1d e2 20 dc d4 08 20 5b 1c c2 20 a5
>1a3ff8		25 48 a5 23 48 e2 20 a7 00 c9 2c d0 1f 20 6c 20
>1a4008		20 5b 1c e2 20 a5 24 d0 32 c2 20 a5 25 d0 2c 68
>1a4018		85 08 68 85 0a e2 20 a5 23 87 08 60 08 c2 20 48
>1a4028		a9 00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20
>1a4038		29 ff 00 20 ad 1d e2 20 dc d4 08 08 c2 20 48 a9
>1a4048		00 08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29
>1a4058		ff 00 20 ad 1d e2 20 dc d4 08 08 c2 20 48 a9 00
>1a4068		08 5b 68 28 e2 20 a9 01 8f d3 08 00 c2 20 29 ff
>1a4078		00 20 ad 1d e2 20 dc d4 08 08 e2 20 a7 00 f0 05
>1a4088		20 6c 20 80 f7 28 60 08 28 60 08 28 60 08 28 60
>1a4098		08 c2 20 a5 1c 20 74 1d a5 1a 20 74 1d a5 02 48
>1a40a8		a5 00 48 20 b1 20 a5 02 20 74 1d a5 00 20 74 1d
>1a40b8		68 85 00 68 85 02 20 8d 20 20 c7 52 b0 1f 08 c2
>1a40c8		20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08 00
>1a40d8		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 e2 20 a5
>1a40e8		ea 20 8b 1d a5 e9 20 8b 1d c2 20 a5 e7 20 74 1d
>1a40f8		20 8d 20 e2 20 a7 00 c9 8a d0 6a a5 ea c9 00 f0
>1a4108		04 c9 01 f0 00 20 6c 20 20 5b 1c 20 2a 52 e2 20
>1a4118		a9 9c 20 79 21 20 5b 1c c2 20 a5 27 20 74 1d a5
>1a4128		25 20 74 1d a5 23 20 74 1d e2 20 a9 9d 85 37 20
>1a4138		ae 21 90 1b 20 6c 20 20 5b 1c e2 20 a5 27 20 74
>1a4148		1d c2 20 a5 25 20 74 1d a5 23 20 74 1d 80 14 c2
>1a4158		20 a9 00 00 20 74 1d a9 00 00 20 74 1d a9 01 00
>1a4168		20 74 1d 28 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4178		20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a4188		20 dc d4 08 08 8b 08 e2 20 48 a9 00 48 ab 68 28
>1a4198		08 c2 20 48 a9 00 08 5b 68 28 c2 30 a4 33 c8 c8
>1a41a8		c2 20 b9 0c 00 85 e7 b9 0e 00 e2 20 85 e9 b9 10
>1a41b8		00 85 ea c2 20 5a 20 c8 50 7a c2 20 b9 00 00 85
>1a41c8		29 b9 02 00 85 2b e2 20 b9 04 00 85 2d c2 20 5a
>1a41d8		20 32 27 20 2a 52 7a c2 20 b9 06 00 85 29 b9 08
>1a41e8		00 85 2b e2 20 b9 0a 00 85 2d c2 20 b9 02 00 30
>1a41f8		0a 20 bb 29 20 6e 05 f0 28 80 08 20 7b 29 20 6e
>1a4208		05 f0 1e c2 20 b9 12 00 85 00 b9 14 00 85 02 b9
>1a4218		16 00 85 1a b9 18 00 85 1c e2 20 a9 03 85 dc 80
>1a4228		17 a2 23 08 20 38 19 c2 20 18 a5 33 69 1a 00 85
>1a4238		33 a5 35 69 00 00 85 35 ab 28 60 08 a5 1a 48 a5
>1a4248		1c 48 20 8d 20 20 2c 08 a5 23 f0 26 20 6c 23 90
>1a4258		42 e2 20 a9 02 85 dc 20 b1 20 c2 20 68 20 74 1d
>1a4268		68 20 74 1d a5 02 20 74 1d a5 00 20 74 1d e6 31
>1a4278		28 60 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4288		a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20
>1a4298		dc d4 08 68 68 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a42a8		20 a9 06 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a42b8		20 dc d4 08 08 c2 30 a5 31 f0 1e 20 96 1d 85 00
>1a42c8		20 96 1d 85 02 20 96 1d 85 1a 20 96 1d 85 1c c6
>1a42d8		31 e2 20 a9 03 85 dc 28 60 08 c2 20 48 a9 00 08
>1a42e8		5b 68 28 e2 20 a9 07 8f d3 08 00 c2 20 29 ff 00
>1a42f8		20 ad 1d e2 20 dc d4 08 08 20 5b 1c 20 6e 05 f0
>1a4308		1c e2 20 a9 97 20 79 21 20 2c 08 20 6e 05 f0 12
>1a4318		20 6c 23 90 2c e2 20 a9 02 85 dc 80 03 20 b1 20
>1a4328		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02
>1a4338		8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4
>1a4348		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f
>1a4358		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a4368		08 e2 20 a9 01 85 dc 28 60 08 20 8d 20 20 2c 08
>1a4378		a5 23 f0 0d 20 6c 23 90 27 e2 20 a9 02 85 dc 28
>1a4388		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a4398		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a43a8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 06 8f d3
>1a43b8		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 20
>1a43c8		da 18 20 fa 0f 20 c7 4f 60 08 a7 00 10 03 20 6c
>1a43d8		20 20 c7 52 b0 03 4c 48 44 e2 20 a5 ea 48 a5 e9
>1a43e8		48 a5 e8 48 a5 e7 48 20 cd 21 c9 8f d0 0e a9 8f
>1a43f8		20 79 21 a9 00 8f 00 4d 00 20 5c 1a 20 8d 20 e2
>1a4408		20 a7 00 c9 8a f0 03 4c 48 44 20 6c 20 20 5b 1c
>1a4418		68 85 e7 68 85 e8 68 85 e9 68 85 ea 29 80 f0 1b
>1a4428		20 3a 50 90 3a c2 20 a0 09 00 b7 08 85 c0 e2 20
>1a4438		c8 c8 b7 08 85 c2 20 31 67 80 03 20 2a 52 28 60
>1a4448		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4458		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08
>1a4468		c2 20 48 a9 00 08 5b 68 28 e2 20 a9 05 8f d3 08
>1a4478		00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08 e2
>1a4488		20 20 cd 21 c9 00 f0 6d 20 5b 1c e2 20 a5 27 c9
>1a4498		ff f0 1b c9 02 d0 05 20 02 45 80 12 c9 00 d0 05
>1a44a8		20 20 45 80 09 c9 01 d0 4f 20 33 45 80 00 20 8d
>1a44b8		20 a7 00 f0 40 c9 3a f0 3c c9 2c f0 23 c9 3b f0
>1a44c8		24 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a44d8		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a44e8		a9 09 20 18 00 20 6c 20 20 8d 20 a7 00 f0 09 c9
>1a44f8		3a f0 05 80 93 20 2b 03 28 60 08 8b 08 c2 20 48
>1a4508		a9 00 08 5b 68 28 e2 20 a0 00 00 b7 23 f0 06 20
>1a4518		18 00 c8 80 f6 ab 28 60 08 c2 20 20 af 14 a5 16
>1a4528		85 23 a5 18 85 25 20 02 45 28 60 08 20 90 5c c2
>1a4538		20 a5 16 85 23 a5 18 85 25 20 02 45 28 60 08 e2
>1a4548		20 85 b5 4a 4a 4a 4a 29 0f 18 69 30 97 16 c8 a5
>1a4558		b5 29 0f 18 69 30 97 16 c8 28 60 e2 20 a9 8f 20
>1a4568		79 21 08 20 5b 1c e2 20 c2 10 af 0e 08 af 09 08
>1a4578		8f 0e 08 af 20 50 14 a0 00 00 af 06 08 af 20 46
>1a4588		45 a9 2f 97 16 c8 af 09 08 af 20 46 45 a9 2f 97
>1a4598		16 c8 af 0f 08 af 20 46 45 af 0a 08 af 20 46 45
>1a45a8		a9 00 97 16 af 0e 08 af 29 f7 8f 0e 08 af c2 20
>1a45b8		a5 16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2
>1a45c8		20 20 6c 20 60 e2 20 a9 8f 20 79 21 08 20 5b 1c
>1a45d8		e2 20 c2 10 af 0e 08 af 09 08 8f 0e 08 af 20 50
>1a45e8		14 a0 00 00 af 04 08 af 29 7f 20 46 45 a9 3a 97
>1a45f8		16 c8 af 02 08 af 20 46 45 a9 3a 97 16 c8 af 00
>1a4608		08 af 20 46 45 a9 00 97 16 af 0e 08 af 29 f7 8f
>1a4618		0e 08 af c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9
>1a4628		02 85 27 28 e2 20 20 6c 20 60 e2 20 a9 8f 20 79
>1a4638		21 08 20 5b 1c e2 20 a9 01 85 27 a9 03 8f 00 e2
>1a4648		af a9 01 8f 01 e2 af c2 30 af 84 e8 af 8f 08 e2
>1a4658		af af 84 e8 af 29 ff 7f 8f 0a e2 af a9 ff ff 8f
>1a4668		0c e2 af a9 ff 7f 8f 0e e2 af ea ea ea af 08 e2
>1a4678		af 85 23 af 0a e2 af 85 25 28 e2 20 20 6c 20 60
>1a4688		e2 20 a9 8f 20 79 21 08 c2 30 20 5b 1c 20 37 06
>1a4698		c2 20 a5 25 48 a5 23 48 20 8d 20 e2 20 a7 00 c9
>1a46a8		2c f0 03 4c ff 46 20 6c 20 20 5b 1c 20 61 06 c2
>1a46b8		20 a5 23 48 20 8d 20 e2 20 a7 00 c9 2c f0 03 4c
>1a46c8		ff 46 20 6c 20 20 5b 1c 20 61 06 c2 20 a5 23 85
>1a46d8		8f e2 20 a5 25 85 91 c2 20 68 85 29 a9 00 00 85
>1a46e8		2b 68 85 23 68 85 25 e2 20 a9 02 85 27 20 a8 16
>1a46f8		e2 20 20 6c 20 28 60 08 c2 20 48 a9 00 08 5b 68
>1a4708		28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a4718		1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68 28
>1a4728		e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 ad 1d
>1a4738		e2 20 dc d4 08 e2 20 a9 8f 20 79 21 08 c2 30 20
>1a4748		5b 1c e2 20 a5 27 c9 02 f0 03 4c c1 47 c2 20 a5
>1a4758		25 48 a5 23 48 20 8d 20 e2 20 a7 00 c9 2c f0 03
>1a4768		4c e0 47 20 6c 20 20 5b 1c e2 20 a5 27 c9 00 d0
>1a4778		48 c2 20 a5 23 85 8f c2 20 68 85 23 68 85 25 e2
>1a4788		20 a9 02 85 27 e2 20 a0 00 00 b7 23 f0 03 c8 80
>1a4798		f9 c2 20 98 38 e5 8f 30 09 85 29 a9 00 00 85 2b
>1a47a8		80 07 a9 00 00 85 29 85 2b e2 20 a9 00 85 2d 20
>1a47b8		a8 16 e2 20 20 6c 20 28 60 08 c2 20 48 a9 00 08
>1a47c8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a47d8		20 ad 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b
>1a47e8		68 28 e2 20 a9 02 8f d3 08 00 c2 20 29 ff 00 20
>1a47f8		ad 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a4808		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a4818		1d e2 20 dc d4 08 e2 20 a9 8f 20 79 21 08 c2 30
>1a4828		20 5b 1c e2 20 a5 27 c9 02 f0 03 4c 8a 48 c2 20
>1a4838		a5 25 48 a5 23 48 20 8d 20 e2 20 a7 00 c9 2c f0
>1a4848		03 4c a9 48 20 6c 20 20 5b 1c e2 20 a5 27 c9 00
>1a4858		d0 30 c2 20 a5 23 85 8f c2 20 a9 00 00 85 29 a9
>1a4868		00 00 85 2b e2 20 a9 00 85 2d c2 20 68 85 23 68
>1a4878		85 25 e2 20 a9 02 85 27 20 a8 16 e2 20 20 6c 20
>1a4888		28 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04
>1a4898		8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4
>1a48a8		08 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f
>1a48b8		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a48c8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a48d8		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 e2
>1a48e8		20 a9 8f 20 79 21 20 5b 1c c2 10 e2 20 a5 27 c9
>1a48f8		02 d0 23 c2 20 a5 00 85 40 a5 02 85 42 a5 23 85
>1a4908		00 a5 25 85 02 20 2c 08 a5 40 85 00 a5 42 85 02
>1a4918		e2 20 20 6c 20 60 08 c2 20 48 a9 00 08 5b 68 28
>1a4928		e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d
>1a4938		e2 20 dc d4 08 e2 20 a9 8f 20 79 21 08 20 5b 1c
>1a4948		c2 10 e2 20 a5 27 c9 00 d0 1a 20 af 14 c2 20 a5
>1a4958		16 85 23 a5 18 85 25 e2 20 a9 02 85 27 28 e2 20
>1a4968		20 6c 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4978		a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20
>1a4988		dc d4 08 e2 20 a9 8f 20 79 21 08 20 5b 1c 20 37
>1a4998		06 c2 20 64 0c 64 0e e2 30 a0 00 b7 23 c9 20 f0
>1a49a8		04 c9 24 d0 03 c8 80 f3 b7 23 20 60 04 90 1e c2
>1a49b8		20 06 0c 26 0e 06 0c 26 0e 06 0c 26 0e 06 0c 26
>1a49c8		0e e2 20 20 81 04 05 0c 85 0c c8 80 db c2 20 a5
>1a49d8		0c 85 23 a5 0e 85 25 e2 20 a9 00 85 27 28 e2 20
>1a49e8		20 6c 20 60 e2 20 a9 8f 20 79 21 08 20 5b 1c 20
>1a49f8		a5 05 20 50 14 e2 30 a0 ff a9 00 97 16 88 a5 23
>1a4a08		29 0f aa bf 00 d0 1a 97 16 88 a5 23 29 f0 4a 4a
>1a4a18		4a 4a aa bf 00 d0 1a 97 16 88 a5 24 85 23 a5 25
>1a4a28		85 24 a5 26 85 25 a9 00 85 26 a5 23 d0 d0 a5 24
>1a4a38		d0 cc a5 25 d0 c8 98 38 65 16 85 23 a5 17 85 24
>1a4a48		a5 18 85 25 a5 19 85 26 a9 02 85 27 28 e2 20 20
>1a4a58		6c 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4a68		04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a4a78		d4 08 e2 20 a9 8f 20 79 21 20 5b 1c e2 20 a5 27
>1a4a88		c9 02 d0 1f 8b a5 25 48 ab c2 10 a6 23 20 3c 15
>1a4a98		ab 84 23 c2 20 64 25 e2 20 a9 00 85 27 e2 20 20
>1a4aa8		6c 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a4ab8		04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a4ac8		d4 08 e2 20 a9 8f 20 79 21 20 5b 1c e2 20 a5 27
>1a4ad8		c9 00 d0 33 a5 25 c9 b0 90 1b c9 f0 b0 17 e2 20
>1a4ae8		a7 23 c2 20 af 02 09 af 89 00 80 d0 f7 e2 20 af
>1a4af8		01 09 af 80 04 e2 20 a7 23 85 23 64 24 64 25 64
>1a4b08		30 e2 20 20 6c 20 60 08 c2 20 48 a9 00 08 5b 68
>1a4b18		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a4b28		1d e2 20 dc d4 08 e2 20 a9 8f 20 79 21 20 5b 1c
>1a4b38		e2 20 a5 27 c9 00 d0 1d c2 20 a7 23 85 0c e2 20
>1a4b48		a0 02 00 b7 23 85 25 64 26 c2 20 a5 0c 85 23 e2
>1a4b58		20 20 6c 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4b68		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a4b78		20 dc d4 08 e2 20 a9 8f 20 79 21 20 5b 1c e2 20
>1a4b88		a5 27 c9 00 d0 0e c2 20 a7 23 85 23 64 25 e2 20
>1a4b98		20 6c 20 60 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a4ba8		a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20
>1a4bb8		dc d4 08 e2 20 a9 8f 20 79 21 20 5b 1c e2 20 a5
>1a4bc8		27 c9 00 d0 24 20 50 14 a5 23 87 16 a9 00 a0 01
>1a4bd8		00 97 16 c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9
>1a4be8		02 85 27 e2 20 20 6c 20 60 08 c2 20 48 a9 00 08
>1a4bf8		5b 68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00
>1a4c08		20 ad 1d e2 20 dc d4 08 e2 20 a9 8f 20 79 21 20
>1a4c18		5b 1c e2 20 a5 27 c9 02 d0 14 a7 23 85 23 64 24
>1a4c28		64 25 64 26 a9 00 85 27 e2 20 20 6c 20 60 08 c2
>1a4c38		20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f d3 08 00
>1a4c48		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 e2 20 a9
>1a4c58		8f 20 79 21 20 5b 1c e2 20 a5 27 c9 00 d0 39 e2
>1a4c68		20 a5 26 d0 52 a5 25 d0 4e a5 24 d0 4a c2 10 20
>1a4c78		50 14 a4 23 e2 20 a9 00 97 16 88 30 07 a9 20 97
>1a4c88		16 88 10 fb a9 02 85 27 c2 20 a5 16 85 23 a5 18
>1a4c98		85 25 e2 20 20 6c 20 60 08 c2 20 48 a9 00 08 5b
>1a4ca8		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a4cb8		ad 1d e2 20 dc d4 08 08 c2 20 48 a9 00 08 5b 68
>1a4cc8		28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a4cd8		1d e2 20 dc d4 08 e2 20 a9 8f 20 79 21 20 5b 1c
>1a4ce8		e2 20 a5 27 c9 00 d0 39 e2 20 a5 26 d0 52 a5 25
>1a4cf8		d0 4e a5 24 d0 4a c2 10 20 50 14 a4 23 e2 20 a9
>1a4d08		00 97 16 88 30 07 a9 09 97 16 88 10 fb a9 02 85
>1a4d18		27 c2 20 a5 16 85 23 a5 18 85 25 e2 20 20 6c 20
>1a4d28		60 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 04 8f
>1a4d38		d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08
>1a4d48		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3
>1a4d58		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 e2
>1a4d68		20 a9 8f 20 79 21 20 5b 1c e2 20 a5 27 c9 00 f0
>1a4d78		23 c9 01 f0 3e 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a4d88		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a4d98		20 dc d4 08 c2 20 a5 25 10 21 49 ff ff 85 25 a5
>1a4da8		23 49 ff ff 18 69 01 00 85 23 a5 25 69 00 00 85
>1a4db8		25 80 08 e2 20 a5 26 29 7f 85 26 e2 20 20 6c 20
>1a4dc8		60 e2 20 a9 8f 20 79 21 20 5b 1c e2 20 a5 27 c9
>1a4dd8		00 d0 25 c2 20 a5 25 30 12 d0 04 a5 23 f0 13 a9
>1a4de8		00 00 85 25 a9 01 00 85 23 80 07 a9 ff ff 85 25
>1a4df8		85 23 e2 20 20 6c 20 60 08 c2 20 48 a9 00 08 5b
>1a4e08		68 28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20
>1a4e18		ad 1d e2 20 dc d4 08 e2 20 a9 8f 20 79 21 20 5b
>1a4e28		1c 20 a5 05 e2 20 20 6c 20 60 e2 20 a9 8f 20 79
>1a4e38		21 20 5b 1c 20 13 07 20 f0 60 e2 20 20 6c 20 60
>1a4e48		e2 20 a9 8f 20 79 21 20 5b 1c 20 13 07 20 1f 61
>1a4e58		e2 20 20 6c 20 60 e2 20 a9 8f 20 79 21 20 5b 1c
>1a4e68		20 13 07 20 4e 61 e2 20 20 6c 20 60 e2 20 a9 8f
>1a4e78		20 79 21 20 5b 1c 20 13 07 20 7c 61 e2 20 20 6c
>1a4e88		20 60 e2 20 a9 8f 20 79 21 20 5b 1c 20 13 07 20
>1a4e98		a5 62 e2 20 20 6c 20 60 e2 20 a9 8f 20 79 21 20
>1a4ea8		5b 1c 20 13 07 20 7b 62 e2 20 20 6c 20 60 e2 20
>1a4eb8		a9 8f 20 79 21 20 5b 1c 20 13 07 20 c7 62 e2 20
>1a4ec8		20 6c 20 60 e2 20 a9 8f 20 79 21 20 5b 1c 20 13
>1a4ed8		07 20 5b 63 e2 20 20 6c 20 60 e2 20 a9 8f 20 79
>1a4ee8		21 20 5b 1c 20 13 07 20 dd 63 e2 20 20 6c 20 60
>1a4ef8		00 ea 60 08 0b 08 c2 20 48 a9 00 08 5b 68 28 c2
>1a4f08		30 c2 20 a9 00 00 85 d9 e2 20 a9 16 85 db c2 30
>1a4f18		a9 00 00 a0 00 00 97 d9 a0 02 00 97 d9 a0 04 00
>1a4f28		97 d9 20 42 20 2b 28 60 8b 08 c2 20 a9 00 00 85
>1a4f38		1a a9 16 00 85 1c 20 42 20 20 22 23 28 ab 60 08
>1a4f48		c2 20 64 55 a9 ff 7f 85 59 20 2b 03 20 cd 21 29
>1a4f58		ff 00 c9 00 00 f0 2c c9 81 00 f0 1a 20 8d 20 20
>1a4f68		2c 08 a5 23 85 55 20 cd 21 29 ff 00 c9 00 00 f0
>1a4f78		12 c9 81 00 d0 2a 20 79 21 20 8d 20 20 2c 08 a5
>1a4f88		23 85 59 a5 1c 48 a5 1a 48 a5 02 48 a5 00 48 20
>1a4f98		da 17 68 85 00 68 85 02 68 85 1a 68 85 1c 28 60
>1a4fa8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 02 8f d3
>1a4fb8		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 08
>1a4fc8		08 c2 20 48 a9 00 08 5b 68 28 c2 20 64 e4 64 e7
>1a4fd8		e2 20 64 e6 64 e9 64 ea c2 20 38 a5 d9 69 04 00
>1a4fe8		85 e1 e2 20 a5 db 69 00 85 e3 28 60 c9 5f f0 1a
>1a4ff8		c9 3a b0 04 c9 30 b0 12 c9 5b b0 04 c9 41 b0 0a
>1a5008		c9 7b b0 04 c9 61 b0 02 18 60 38 60 08 e2 20 c2
>1a5018		10 a0 00 00 b7 0c f0 0a d7 e7 d0 13 c8 c0 08 00
>1a5028		d0 f2 b7 e7 20 aa 04 20 f4 4f b0 03 28 38 60 28
>1a5038		18 60 08 e2 20 c2 10 a0 00 00 a2 00 00 b7 e7 f0
>1a5048		0b 20 aa 04 9f 00 4e 00 c8 e8 80 f1 a9 00 9f 00
>1a5058		4e 00 c2 20 a9 00 4e 85 e7 e2 20 a9 00 85 e9 c2
>1a5068		20 a5 e4 85 08 d0 06 e2 20 a5 e6 f0 4d e2 20 a5
>1a5078		e6 85 0a a5 ea a0 00 00 d7 08 d0 17 c2 20 18 a5
>1a5088		08 69 01 00 85 0c e2 20 a5 0a 69 00 85 0e 20 14
>1a5098		50 b0 2a a0 0d 00 c2 20 b7 08 85 0c c8 c8 e2 20
>1a50a8		b7 08 85 0e d0 06 c2 20 a5 0c f0 0e c2 20 a5 0c
>1a50b8		85 08 e2 20 a5 0e 85 0a 80 b9 28 18 60 28 38 60
>1a50c8		08 20 3a 50 b0 1f 08 c2 20 48 a9 00 08 5b 68 28
>1a50d8		e2 20 a9 05 8f d3 08 00 c2 20 29 ff 00 20 ad 1d
>1a50e8		e2 20 dc d4 08 c2 30 a0 09 00 b7 08 85 23 c8 c8
>1a50f8		b7 08 85 25 e2 20 a0 00 00 b7 08 85 27 28 60 08
>1a5108		c2 20 18 a5 e1 69 10 00 85 08 e2 20 a5 e3 69 00
>1a5118		85 0a c5 bc 90 27 c2 20 a5 08 c5 ba 90 1f 08 c2
>1a5128		20 48 a9 00 08 5b 68 28 e2 20 a9 09 8f d3 08 00
>1a5138		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 c2 20 a5
>1a5148		e1 85 c0 e2 20 a5 e3 85 c2 c2 20 a5 08 85 e1 e2
>1a5158		20 a5 0a 85 e3 28 60 08 e2 20 a5 27 c5 ea f0 33
>1a5168		a5 ea c9 00 d0 05 20 a5 05 80 2f c9 01 d0 05 20
>1a5178		13 07 80 26 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a5188		a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20
>1a5198		dc d4 08 c9 02 d0 03 20 42 16 c2 10 20 07 51 c2
>1a51a8		30 18 a5 c0 69 01 00 85 08 e2 20 a5 c2 69 00 85
>1a51b8		0a a0 00 00 a9 00 97 08 c8 c0 08 00 d0 f8 a0 00
>1a51c8		00 b7 e7 f0 10 20 aa 04 20 f4 4f 90 08 97 08 c8
>1a51d8		c0 08 00 d0 ec c2 20 a0 09 00 a5 23 97 c0 a5 25
>1a51e8		c8 c8 97 c0 a5 e4 a0 0d 00 97 c0 c8 c8 e2 20 a5
>1a51f8		e6 97 c0 c2 20 a5 c0 85 e4 e2 20 a5 c2 85 e6 e2
>1a5208		20 a0 00 00 a5 27 97 c0 c9 02 f0 02 28 60 c2 20
>1a5218		a5 23 85 c0 e2 20 a5 25 85 c2 20 5e 12 20 73 12
>1a5228		80 ea 08 c2 30 a5 e4 d0 06 e2 20 a5 e6 f0 05 20
>1a5238		3a 50 b0 05 20 5f 51 80 4e e2 20 a5 27 c5 ea f0
>1a5248		33 a5 ea c9 00 d0 05 20 a5 05 80 2c c9 01 d0 05
>1a5258		20 13 07 80 23 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a5268		20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a5278		20 dc d4 08 c9 02 f0 11 c2 30 a0 09 00 a5 23 97
>1a5288		08 c8 c8 a5 25 97 08 28 60 20 42 16 a0 09 00 b7
>1a5298		08 85 c0 c8 c8 e2 20 b7 08 85 c2 20 5e 12 20 92
>1a52a8		12 e2 20 a5 27 c9 02 f0 02 80 cd c2 20 a5 23 85
>1a52b8		c0 e2 20 a5 25 85 c2 20 5e 12 20 73 12 80 b9 08
>1a52c8		20 8d 20 e2 20 a7 00 20 36 04 90 42 c2 20 a5 00
>1a52d8		85 e7 e2 20 a5 02 85 e9 20 6c 20 a7 00 f0 0d c9
>1a52e8		24 f0 14 c9 25 f0 09 20 f4 4f b0 ec a9 01 80 0c
>1a52f8		20 6c 20 a9 00 80 05 20 6c 20 a9 02 85 ea 20 cd
>1a5308		21 c9 8f d0 06 a5 ea 09 80 85 ea 28 38 60 28 18
>1a5318		60 08 c2 20 18 a5 23 65 29 85 23 a5 25 65 2b 85
>1a5328		25 28 60 08 c2 20 38 a5 23 e5 29 85 23 a5 25 e5
>1a5338		2b 85 25 28 60 08 c2 20 3b 38 e9 0a 00 1b c2 30
>1a5348		a9 00 00 83 01 83 03 83 05 83 07 83 09 a5 25 10
>1a5358		18 a9 00 80 83 01 a5 25 49 ff ff 85 25 a5 23 49
>1a5368		ff ff 1a 85 23 d0 02 e6 25 a5 2b 10 1a a3 01 49
>1a5378		00 80 83 01 a5 2b 49 ff ff 85 2b a5 29 49 ff ff
>1a5388		1a 85 29 d0 02 e6 2b a5 25 f0 04 a5 2b d0 5a a5
>1a5398		23 8f 00 01 00 a5 29 8f 02 01 00 af 04 01 00 83
>1a53a8		03 af 06 01 00 83 05 a5 25 8f 00 01 00 a5 29 8f
>1a53b8		02 01 00 18 af 04 01 00 63 05 83 05 af 06 01 00
>1a53c8		63 07 83 07 a5 23 8f 00 01 00 a5 2b 8f 02 01 00
>1a53d8		18 af 04 01 00 63 05 83 05 af 06 01 00 63 07 83
>1a53e8		07 a3 07 f0 23 a3 09 f0 1f 08 c2 20 48 a9 00 08
>1a53f8		5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29 ff 00
>1a5408		20 ad 1d e2 20 dc d4 08 c2 30 a3 01 10 16 a3 05
>1a5418		49 ff ff 83 05 a3 03 49 ff ff 1a 83 03 d0 05 a3
>1a5428		05 1a 83 05 a3 03 85 23 a3 05 85 25 c2 20 3b 18
>1a5438		69 0a 00 1b 28 60 08 c2 20 a5 23 c5 29 a5 25 e5
>1a5448		2b 50 03 49 00 80 30 06 64 23 64 25 80 07 a9 ff
>1a5458		ff 85 23 85 25 28 60 08 c2 20 a5 23 c5 29 d0 0c
>1a5468		a5 25 c5 2b d0 06 64 23 64 25 80 16 a5 29 c5 23
>1a5478		a5 2b e5 25 50 03 49 00 80 10 eb a9 ff ff 85 23
>1a5488		85 25 28 60 08 c2 20 a5 2b c5 25 d0 0f a5 29 c5
>1a5498		23 d0 09 a9 ff ff 85 23 85 25 80 04 64 23 64 25
>1a54a8		28 60 08 c2 20 a5 2b c5 25 d0 0c a5 29 c5 23 d0
>1a54b8		06 64 23 64 25 80 07 a9 ff ff 85 23 85 25 28 60
>1a54c8		08 c2 20 a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9
>1a54d8		ff ff 85 23 85 25 80 13 a5 29 c5 23 a5 2b e5 25
>1a54e8		50 03 49 00 80 30 e8 64 23 64 25 28 60 08 c2 20
>1a54f8		a5 23 c5 29 d0 0f a5 25 c5 2b d0 09 a9 ff ff 85
>1a5508		23 85 25 80 13 a5 23 c5 29 a5 25 e5 2b 50 03 49
>1a5518		00 80 30 e8 64 23 64 25 28 60 08 c2 20 8f 12 01
>1a5528		00 8a 8f 10 01 00 af 16 01 00 aa af 14 01 00 28
>1a5538		60 08 e2 20 a9 03 8f 00 e2 af a9 00 8f 01 e2 af
>1a5548		c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a9 00
>1a5558		00 8f 0c e2 af a9 00 01 8f 0e e2 af ea ea ea ea
>1a5568		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 a9 01
>1a5578		00 85 27 28 60 08 e2 20 a9 40 8f 00 e2 af 80 09
>1a5588		08 e2 20 a9 48 8f 00 e2 af a9 02 8f 01 e2 af c2
>1a5598		20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af a5 29 8f
>1a55a8		0c e2 af a5 2b 8f 0e e2 af ea ea ea e2 20 af 06
>1a55b8		e2 af 29 07 d0 10 c2 20 af 08 e2 af 85 23 af 0a
>1a55c8		e2 af 85 25 28 60 20 69 56 80 f9 08 e2 20 a9 01
>1a55d8		8f 01 e2 af a9 00 8f 00 e2 af c2 20 a5 23 8f 08
>1a55e8		e2 af a5 25 8f 0a e2 af a5 29 8f 0c e2 af a5 2b
>1a55f8		8f 0e e2 af ea ea ea e2 20 af 05 e2 af 29 17 d0
>1a5608		10 c2 20 af 08 e2 af 85 23 af 0a e2 af 85 25 28
>1a5618		60 20 69 56 80 f9 08 e2 20 a9 00 8f 01 e2 af a9
>1a5628		00 8f 00 e2 af c2 20 a5 23 8f 08 e2 af a5 25 8f
>1a5638		0a e2 af a5 29 8f 0c e2 af a5 2b 8f 0e e2 af ea
>1a5648		ea ea e2 20 af 04 e2 af 29 07 d0 10 c2 20 af 08
>1a5658		e2 af 85 23 af 0a e2 af 85 25 28 60 20 69 56 80
>1a5668		f9 e2 20 89 01 f0 20 00 08 c2 20 48 a9 00 08 5b
>1a5678		68 28 e2 20 a9 0c 8f d3 08 00 c2 20 29 ff 00 20
>1a5688		ad 1d e2 20 dc d4 08 89 02 f0 1f 08 c2 20 48 a9
>1a5698		00 08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29
>1a56a8		ff 00 20 ad 1d e2 20 dc d4 08 89 04 f0 1f 08 c2
>1a56b8		20 48 a9 00 08 5b 68 28 e2 20 a9 0e 8f d3 08 00
>1a56c8		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 60 08 e2
>1a56d8		20 a9 00 8f 01 e2 af a9 02 8f 00 e2 af c2 20 a9
>1a56e8		00 a0 8f 0c e2 af a9 00 00 8f 0e e2 af a5 23 8f
>1a56f8		08 e2 af a5 25 8f 0a e2 af ea ea ea e2 20 af 04
>1a5708		e2 af 89 07 f0 01 00 c2 20 af 08 e2 af 85 23 af
>1a5718		0a e2 af 85 25 28 60 08 e2 20 a9 01 8f 01 e2 af
>1a5728		a9 02 8f 00 e2 af c2 20 a9 00 a0 8f 0c e2 af a9
>1a5738		00 00 8f 0e e2 af a5 23 8f 08 e2 af a5 25 8f 0a
>1a5748		e2 af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85
>1a5758		25 28 60 08 c2 20 a5 23 d0 0a a5 25 29 ff 7f d0
>1a5768		03 28 38 60 28 18 60 08 e2 20 38 e9 30 20 ce 04
>1a5778		c2 20 29 ff 00 18 65 23 85 23 a5 25 69 00 00 85
>1a5788		25 28 60 08 e2 20 c9 30 90 04 c9 3a 90 1c c9 61
>1a5798		90 04 c9 67 90 0a c9 41 90 04 c9 47 90 07 80 31
>1a57a8		38 e9 57 80 08 38 e9 37 80 03 38 e9 30 06 23 26
>1a57b8		24 26 25 26 26 06 23 26 24 26 25 26 26 06 23 26
>1a57c8		24 26 25 26 26 06 23 26 24 26 25 26 26 05 23 85
>1a57d8		23 28 60 08 e2 20 c9 30 f0 06 c9 31 f0 0a 80 0f
>1a57e8		c2 20 06 23 26 25 80 07 c2 20 38 26 23 26 25 28
>1a57f8		60 08 e2 30 a5 61 f0 0d aa a5 69 d0 15 a9 00 8f
>1a5808		01 e2 af 80 15 e2 20 a9 03 8f 01 e2 af ea ea ea
>1a5818		80 62 e2 20 a9 01 8f 01 e2 af e2 20 a9 43 8f 00
>1a5828		e2 af c2 20 a9 00 10 8f 08 e2 af a9 00 00 8f 0a
>1a5838		e2 af c2 20 a9 00 a0 8f 0c e2 af a9 00 00 8f 0e
>1a5848		e2 af ea ea ea ca f0 2c af 08 e2 af 8f 0c 08 00
>1a5858		af 0a e2 af 8f 0e 08 00 e2 20 a9 42 8f 00 e2 af
>1a5868		c2 20 af 0c 08 00 8f 08 e2 af af 0e 08 00 8f 0a
>1a5878		e2 af 80 be c2 20 af 08 e2 af 85 23 af 0a e2 af
>1a5888		85 25 e2 20 a9 01 85 27 28 60 08 c2 20 a5 5d 85
>1a5898		23 a5 5f 85 25 20 ab 5a c2 20 a5 23 85 29 a5 25
>1a58a8		85 2b c2 20 a5 59 85 23 a5 5b 85 25 20 d3 55 c2
>1a58b8		20 a5 55 85 29 a5 57 85 2b 20 88 55 c2 20 a5 23
>1a58c8		85 29 a5 25 85 2b 20 f9 57 20 1e 56 c2 20 a5 65
>1a58d8		f0 07 a5 25 09 00 80 85 25 e2 20 a9 01 85 27 28
>1a58e8		60 5a 08 c2 30 64 23 64 25 64 55 64 57 64 65 64
>1a58f8		59 64 5b a9 01 00 85 5d 64 5f 64 61 64 63 64 69
>1a5908		e2 20 a0 00 00 b7 00 c9 2b f0 33 c9 2d f0 2b c9
>1a5918		26 f0 3a 20 4f 04 90 03 82 ac 00 08 c2 20 48 a9
>1a5928		00 08 5b 68 28 e2 20 a9 02 8f d3 08 00 c2 20 29
>1a5938		ff 00 20 ad 1d e2 20 dc d4 08 a9 01 85 65 c8 b7
>1a5948		00 c9 26 f0 08 20 4f 04 90 d1 82 7a 00 c8 b7 00
>1a5958		c9 68 f0 0e c9 48 f0 0a c9 62 f0 4c c9 42 f0 48
>1a5968		80 b9 c8 b7 00 20 60 04 b0 02 80 af 20 8b 57 c8
>1a5978		b7 00 20 60 04 b0 f5 e2 20 a5 65 f0 11 c2 20 38
>1a5988		a9 00 00 e5 23 85 23 a9 00 00 e5 25 85 25 e2 20
>1a5998		a9 00 85 27 c2 20 18 98 65 00 85 00 a5 02 69 00
>1a59a8		00 85 02 e2 20 28 7a 60 c8 b7 00 c9 30 f0 07 c9
>1a59b8		31 f0 03 82 65 ff 20 db 57 c8 b7 00 c9 30 f0 f6
>1a59c8		c9 31 f0 f2 82 b0 ff 20 6f 57 c8 b7 00 c9 2e f0
>1a59d8		08 20 4f 04 b0 f1 82 9e ff c2 20 20 ab 5a c2 20
>1a59e8		a5 23 85 55 a5 25 85 57 64 23 64 25 e2 20 80 36
>1a59f8		20 6f 57 c2 20 a5 5f 8f 00 01 00 a9 0a 00 8f 02
>1a5a08		01 00 af 04 01 00 85 5f a5 5d 8f 00 01 00 a9 0a
>1a5a18		00 8f 02 01 00 af 04 01 00 85 5d af 06 01 00 18
>1a5a28		65 5f 85 5f e2 20 c8 b7 00 c9 65 f0 24 c9 45 f0
>1a5a38		20 20 4f 04 b0 ba c2 20 20 ab 5a c2 20 a5 23 85
>1a5a48		59 a5 25 85 5b 64 23 64 25 20 92 58 e2 20 82 43
>1a5a58		ff c2 20 20 ab 5a c2 20 a5 23 85 59 a5 25 85 5b
>1a5a68		64 23 64 25 e2 20 c8 b7 00 c9 2b f0 10 c9 2d f0
>1a5a78		08 20 4f 04 b0 12 82 a2 fe a9 01 85 69 c8 b7 00
>1a5a88		20 4f 04 b0 03 82 93 fe 20 6f 57 c8 b7 00 20 4f
>1a5a98		04 b0 f5 c2 20 a5 23 85 61 a5 25 85 63 20 92 58
>1a5aa8		82 f1 fe 08 20 39 55 28 60 08 c2 20 a9 a8 5d 85
>1a5ab8		29 a9 1a 00 85 2b e2 20 a9 01 85 2d c2 20 20 84
>1a5ac8		5b c9 ff ff d0 0c a9 00 00 8d 23 08 8d 25 08 82
>1a5ad8		a1 00 f4 00 00 f4 00 00 f4 00 00 e2 20 ad 26 08
>1a5ae8		29 80 83 01 ad 25 08 2a ad 26 08 2a 83 02 a9 00
>1a5af8		83 06 ad 25 08 09 80 83 05 ad 24 08 83 04 ad 23
>1a5b08		08 83 03 a3 02 c9 96 f0 3a 90 1f 08 c2 20 48 a9
>1a5b18		00 08 5b 68 28 e2 20 a9 0d 8f d3 08 00 c2 20 29
>1a5b28		ff 00 20 ad 1d e2 20 dc d4 08 c2 20 a3 05 4a 83
>1a5b38		05 a3 03 6a 83 03 e2 20 a3 02 1a 83 02 c9 96 f0
>1a5b48		02 80 e7 a3 01 f0 1b c2 20 a3 03 49 ff ff 18 69
>1a5b58		01 00 8d 23 08 a3 05 49 ff ff 69 00 00 8d 25 08
>1a5b68		80 0c c2 20 a3 03 8d 23 08 a3 05 8d 25 08 c2 20
>1a5b78		68 68 68 e2 20 a9 00 8d 27 08 28 60 da 08 c2 20
>1a5b88		a5 25 48 a5 23 48 20 7d 55 20 5b 57 b0 11 a5 25
>1a5b98		89 00 80 d0 05 a9 01 00 80 08 a9 ff ff 80 03 a9
>1a5ba8		00 00 fa 86 23 fa 86 25 28 fa 60 08 c2 30 20 84
>1a5bb8		5b c9 ff ff d0 05 20 81 05 80 03 20 93 05 28 60
>1a5bc8		08 c2 30 20 84 5b c9 01 00 d0 05 20 81 05 80 03
>1a5bd8		20 93 05 28 60 08 c2 30 20 84 5b c9 00 00 d0 05
>1a5be8		20 81 05 80 03 20 93 05 28 60 08 c2 30 20 84 5b
>1a5bf8		c9 01 00 f0 05 20 81 05 80 03 20 93 05 28 60 08
>1a5c08		c2 30 20 84 5b c9 ff ff f0 05 20 81 05 80 03 20
>1a5c18		93 05 28 60 08 c2 30 20 84 5b c9 00 00 f0 05 20
>1a5c28		81 05 80 03 20 93 05 28 60 08 e2 20 97 23 c8 a9
>1a5c38		00 97 23 28 60 da 08 e2 20 c9 80 90 0a 48 a9 2d
>1a5c48		20 31 5c 68 49 ff 1a c2 30 29 ff 00 c9 64 00 90
>1a5c58		0e a2 64 00 20 22 55 18 69 30 00 20 31 5c 8a a2
>1a5c68		0a 00 20 22 55 18 69 30 00 20 31 5c 8a 18 69 30
>1a5c78		00 20 31 5c 28 fa 60 08 e2 20 c2 10 a0 00 00 b7
>1a5c88		23 f0 03 c8 80 f9 28 60 08 e2 20 c2 10 f4 00 00
>1a5c98		f4 00 00 f4 00 00 20 5b 57 90 19 20 50 14 e2 20
>1a5ca8		a0 00 00 a9 20 97 16 c8 a9 30 97 16 c8 a9 00 97
>1a5cb8		16 82 ce 00 e2 20 a5 26 10 08 29 7f 85 26 a9 01
>1a5cc8		83 01 c2 20 a9 00 00 83 03 c2 20 af a4 5d 1a 85
>1a5cd8		29 af a6 5d 1a 85 2b 20 84 5b 89 00 80 d0 12 20
>1a5ce8		1f 57 a3 03 1a 83 03 20 84 5b c9 ff ff f0 12 80
>1a5cf8		ee 20 d6 56 a3 03 3a 83 03 20 84 5b c9 ff ff f0
>1a5d08		f0 e2 30 a5 25 0a a5 26 2a 83 05 38 a9 96 e3 05
>1a5d18		aa f0 0f a5 25 09 80 85 25 46 25 66 24 66 23 ca
>1a5d28		d0 f7 c2 10 e2 20 64 26 a9 00 85 27 a3 01 f0 11
>1a5d38		c2 20 38 a9 00 00 e5 23 85 23 a9 00 00 e5 25 85
>1a5d48		25 20 af 14 c2 20 a5 16 85 23 a5 18 85 25 20 7f
>1a5d58		5c e2 20 c8 a9 00 97 23 88 88 b7 23 c8 97 23 c0
>1a5d68		02 00 d0 f4 a9 2e 97 23 e2 20 18 a3 03 69 05 83
>1a5d78		06 f0 19 20 7f 5c a9 45 20 31 5c a3 06 20 3d 5c
>1a5d88		80 0a c2 20 a5 16 85 23 a5 18 85 25 e2 20 a9 02
>1a5d98		85 27 c2 20 3b 18 69 06 00 1b 28 60 00 50 c3 47
>1a5da8		00 00 80 3f f3 04 b5 3f f3 04 35 3f e2 20 a9 48
>1a5db8		8f 00 e2 af c2 20 bd 00 00 8f 08 e2 af bd 02 00
>1a5dc8		8f 0a e2 af 88 e8 e8 e8 e8 e2 20 a9 00 8f 01 e2
>1a5dd8		af c2 20 af 23 08 00 8f 0c e2 af af 25 08 00 8f
>1a5de8		0e e2 af ea ea ea af 08 e2 af 48 af 0a e2 af 8f
>1a5df8		0a e2 af 68 8f 08 e2 af e2 20 a9 02 8f 01 e2 af
>1a5e08		c2 20 bd 00 00 8f 0c e2 af bd 02 00 8f 0e e2 af
>1a5e18		ea ea ea 88 f0 14 af 08 e2 af 48 af 0a e2 af 8f
>1a5e28		0a e2 af 68 8f 08 e2 af 80 9b af 08 e2 af 8f 23
>1a5e38		08 00 af 0a e2 af 8f 25 08 00 60 e2 20 a9 00 8f
>1a5e48		00 e2 af a9 00 8f 01 e2 af c2 20 a5 23 8f 08 e2
>1a5e58		af 8f 0c e2 af af 25 08 00 8f 0a e2 af 8f 0e e2
>1a5e68		af ea ea ea af 08 e2 af 85 23 af 0a e2 af 85 25
>1a5e78		60 e2 20 a9 00 8f 00 e2 af a9 01 8f 01 e2 af c2
>1a5e88		20 a5 23 8f 0c e2 af af 25 08 00 8f 0e e2 af af
>1a5e98		cd 64 1a 8f 08 e2 af af cf 64 1a 8f 0a e2 af ea
>1a5ea8		ea ea af 08 e2 af 85 23 af 0a e2 af 85 25 60 a2
>1a5eb8		00 00 a5 23 c5 29 a5 25 e5 2b 90 1e a5 23 8f 08
>1a5ec8		e2 af a5 25 8f 0a e2 af ea ea ea af 08 e2 af 85
>1a5ed8		23 af 0a e2 af 85 25 e8 80 d8 60 e2 20 a5 26 10
>1a5ee8		09 29 7f 85 26 a9 01 48 80 03 a9 00 48 a9 40 8f
>1a5ef8		00 e2 af a9 02 8f 01 e2 af c2 30 af 35 65 1a 85
>1a5f08		29 8f 0c e2 af af 37 65 1a 85 2b 8f 0e e2 af 20
>1a5f18		b7 5e e2 20 68 c2 20 f0 1e a5 23 8f 08 e2 af a5
>1a5f28		25 8f 0a e2 af ea ea ea af 08 e2 af 85 23 af 0a
>1a5f38		e2 af 29 ff 7f 85 25 60 5a a2 00 00 a0 00 00 a5
>1a5f48		23 df 39 65 1a a5 25 ff 3b 65 1a 90 2c bf 35 65
>1a5f58		1a 8f 08 e2 af bf 37 65 1a 8f 0a e2 af a5 23 8f
>1a5f68		0c e2 af a5 25 8f 0e e2 af ea ea ea af 08 e2 af
>1a5f78		85 23 af 0a e2 af 85 25 38 98 2a a8 e8 e8 e8 e8
>1a5f88		e0 0c 00 d0 ba 98 aa 7a 60 08 c2 30 48 da 20 43
>1a5f98		5e 8b e2 20 a9 1a 48 ab c2 20 a2 75 64 5a a0 05
>1a5fa8		00 20 b4 5d 7a a9 01 00 8f 27 08 00 ab fa 68 28
>1a5fb8		60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b 20 43
>1a5fc8		5e 8b e2 20 a9 1a 48 ab c2 20 a2 89 64 5a a0 05
>1a5fd8		00 20 b4 5d 7a ab 20 1e 56 fa 68 28 60 08 c2 30
>1a5fe8		48 da a5 23 85 29 a5 25 85 2b 20 43 5e 8b e2 20
>1a5ff8		a9 1a 48 ab c2 20 a2 9d 64 5a a0 05 00 20 b4 5d
>1a6008		7a ab 20 1e 56 fa 68 28 60 08 c2 30 48 da e2 20
>1a6018		a9 40 8f 00 e2 af a9 02 8f 01 e2 af c2 20 a5 23
>1a6028		8f 08 e2 af a5 25 8f 0a e2 af af cd 64 1a 8f 0c
>1a6038		e2 af af cf 64 1a 8f 0e e2 af ea ea ea af 08 e2
>1a6048		af 85 0c af 0a e2 af 85 0e e2 20 a9 48 8f 00 e2
>1a6058		af c2 20 ea ea ea af 08 e2 af 85 10 af 0a e2 af
>1a6068		85 12 e2 20 a9 01 8f 01 e2 af c2 20 a5 0c 8f 08
>1a6078		e2 af a5 0e 8f 0a e2 af a5 10 8f 0c e2 af a5 12
>1a6088		8f 0e e2 af ea ea ea af 08 e2 af 85 23 af 0a e2
>1a6098		af 85 25 e2 20 a9 08 8f 00 e2 af a9 02 8f 01 e2
>1a60a8		af c2 20 a5 23 8f 08 e2 af a5 25 8f 0a e2 af ea
>1a60b8		ea ea af 08 e2 af 85 29 af 0a e2 af 85 2b 20 43
>1a60c8		5e 8b e2 20 a9 1a 48 ab c2 20 a2 b1 64 5a a0 08
>1a60d8		00 20 b4 5d 7a a9 01 00 8f 27 08 00 8f 2d 08 00
>1a60e8		20 1e 56 ab fa 68 28 60 08 c2 30 48 da 20 e3 5e
>1a60f8		20 40 5f da 8a 29 01 00 d0 05 20 b9 5f 80 03 20
>1a6108		91 5f fa 8a 29 04 00 f0 0a e2 20 a5 26 09 80 85
>1a6118		26 c2 20 fa 68 28 60 08 c2 30 48 da 20 e3 5e 20
>1a6128		40 5f da 8a 29 01 00 d0 05 20 91 5f 80 03 20 b9
>1a6138		5f fa 8a 29 02 00 f0 0a e2 20 a5 26 09 80 85 26
>1a6148		c2 20 fa 68 28 60 08 c2 30 48 da 20 e3 5e 20 40
>1a6158		5f 20 e5 5f 8a 29 01 00 f0 03 20 79 5e 8a e2 20
>1a6168		4a 4a 69 00 29 01 f0 06 a5 26 09 80 85 26 c2 20
>1a6178		fa 68 28 60 08 c2 30 48 da 5a a5 25 10 1f 08 c2
>1a6188		20 48 a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00
>1a6198		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 c2 30 a5
>1a61a8		23 cf cd 64 1a a5 25 cf cf 64 1a b0 04 20 79 5e
>1a61b8		18 a9 00 00 a8 2a 48 e2 20 a9 00 8f 00 e2 af a9
>1a61c8		01 8f 01 e2 af c2 20 af 25 65 1a 85 29 8f 0c e2
>1a61d8		af af 27 65 1a 85 2b 8f 0e e2 af 20 b7 5e 8a f0
>1a61e8		07 0a 0a 0a 0a 0a 0a a8 af 29 65 1a 85 29 8f 0c
>1a61f8		e2 af af 2b 65 1a 85 2b 8f 0e e2 af 20 b7 5e 8a
>1a6208		f0 0b 0a 0a 0a 0a 85 29 18 98 65 29 a8 af 2d 65
>1a6218		1a 85 29 8f 0c e2 af af 2f 65 1a 85 2b 8f 0e e2
>1a6228		af 20 b7 5e 8a f0 09 0a 0a 85 29 18 98 65 29 a8
>1a6238		af 31 65 1a 85 29 8f 0c e2 af af 33 65 1a 85 2b
>1a6248		8f 0e e2 af 20 b7 5e 86 29 18 98 65 29 a8 20 11
>1a6258		60 a5 23 85 29 a5 25 85 2b 98 85 23 64 25 20 ab
>1a6268		5a 20 88 55 68 d0 07 a5 25 09 00 80 85 25 7a fa
>1a6278		68 28 60 08 c2 30 48 da a5 23 85 29 a5 25 85 2b
>1a6288		20 43 5e 8b e2 20 a9 1a 48 ab c2 20 a2 d5 64 a0
>1a6298		05 00 20 b4 5d ab 20 1e 56 fa 68 28 60 08 c2 30
>1a62a8		48 da 20 7b 62 af 3d 65 1a 85 29 af 3f 65 1a 85
>1a62b8		2b 20 7d 55 a5 25 49 00 80 85 25 fa 68 28 60 08
>1a62c8		c2 30 48 da a5 23 85 29 a5 25 85 2b 20 43 5e 8b
>1a62d8		e2 20 a9 1a 48 ab c2 20 a2 e9 64 a0 05 00 20 b4
>1a62e8		5d ab 20 1e 56 fa 68 28 60 c2 20 a5 23 85 29 a5
>1a62f8		25 85 2b c2 20 af cd 64 1a 85 23 af cf 64 1a 85
>1a6308		25 8a f0 30 4a aa 90 03 20 1e 56 c2 20 a5 25 48
>1a6318		a5 23 48 c2 20 a5 29 85 23 a5 2b 85 25 20 43 5e
>1a6328		c2 20 a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68
>1a6338		85 25 80 cd 60 08 c2 30 48 da 8b e2 20 a9 1a 48
>1a6348		ab c2 20 a2 fd 64 5a a0 0a 00 20 b4 5d 7a ab fa
>1a6358		68 28 60 08 c2 30 48 da 5a a5 23 05 25 d0 10 c2
>1a6368		20 af cd 64 1a 85 23 af cf 64 1a 85 25 80 61 a5
>1a6378		25 29 00 80 a8 f0 07 a5 25 29 ff 7f 85 25 c2 20
>1a6388		a5 25 48 a5 23 48 20 a5 05 a6 23 20 13 07 c2 20
>1a6398		a5 23 85 29 a5 25 85 2b c2 20 68 85 23 68 85 25
>1a63a8		20 7d 55 20 3d 63 c2 20 a5 25 48 a5 23 48 c2 20
>1a63b8		af 31 65 1a 85 23 af 33 65 1a 85 25 20 f1 62 c2
>1a63c8		20 68 85 29 68 85 2b 20 1e 56 98 f0 03 20 79 5e
>1a63d8		7a fa 68 28 60 08 c2 30 48 a5 25 10 1f 08 c2 20
>1a63e8		48 a9 00 08 5b 68 28 e2 20 a9 17 8f d3 08 00 c2
>1a63f8		20 29 ff 00 20 ad 1d e2 20 dc d4 08 c2 30 05 23
>1a6408		f0 68 c2 20 af d1 64 1a 85 29 af d3 64 1a 85 2b
>1a6418		e2 20 a9 01 85 2d c2 20 c2 20 a5 25 48 a5 23 48
>1a6428		20 d3 55 a5 25 c5 2b d0 09 a5 23 45 29 29 f8 ff
>1a6438		f0 30 20 88 55 c2 20 af d1 64 1a 85 29 af d3 64
>1a6448		1a 85 2b 20 d3 55 c2 20 a5 23 85 29 a5 25 85 2b
>1a6458		c2 20 68 85 23 68 85 25 c2 20 a5 25 48 a5 23 48
>1a6468		80 be c2 20 68 85 29 68 85 2b 68 28 60 01 0d d0
>1a6478		37 61 0b b6 ba ab aa 2a 3d 00 00 00 bf 00 00 80
>1a6488		3f 1d ef 38 36 01 0d 50 b9 89 88 08 3c ab aa 2a
>1a6498		be 00 00 80 3f a4 27 b3 3c d1 0d 5d 3d 89 88 08
>1a64a8		3e ab aa aa 3e 00 00 80 3f 89 88 88 3d d9 89 9d
>1a64b8		3d 8c 2e ba 3d 39 8e e3 3d 25 49 12 3e cd cc 4c
>1a64c8		3e ab aa aa 3e 00 00 80 3f 00 00 00 40 8e e3 f8
>1a64d8		3c 6e db 36 3d 9a 99 99 3d ab aa 2a 3e 00 00 80
>1a64e8		3f 39 8e e3 3d 25 49 12 be cd cc 4c 3e ab aa aa
>1a64f8		be 00 00 80 3f 1d ef 38 36 01 0d d0 37 01 0d 50
>1a6508		39 61 0b b6 3a 89 88 08 3c ab aa 2a 3d ab aa 2a
>1a6518		3e 00 00 00 3f 00 00 80 3f 00 00 80 3f c1 2c a1
>1a6528		6d 5f 97 07 4b 81 64 5a 42 54 f8 2d 40 db 0f c9
>1a6538		40 db 0f 49 40 db 0f c9 3f db 0f 49 3f 08 20 5e
>1a6548		12 c2 20 a9 01 00 85 23 a9 00 00 85 25 e2 20 af
>1a6558		00 4d 00 c2 20 29 ff 00 85 8f a8 a2 01 00 c2 20
>1a6568		bf 00 4d 00 85 29 a9 00 00 85 2b e2 20 a9 00 85
>1a6578		2d c2 20 20 a9 27 e8 e8 88 d0 e3 c2 20 a9 04 00
>1a6588		85 29 a9 00 00 85 2b 20 a9 27 e2 20 af 00 4d 00
>1a6598		85 0c a9 00 85 0d c2 20 06 0c 38 a5 23 65 0c 85
>1a65a8		23 a5 25 69 00 00 85 25 d0 29 e2 20 a5 ea 09 80
>1a65b8		a6 23 20 22 10 e2 20 af 00 4d 00 87 c0 a0 01 00
>1a65c8		a2 00 00 e2 20 bf 01 4d 00 97 c0 e4 8f f0 23 e8
>1a65d8		c8 80 f0 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a65e8		09 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a65f8		d4 08 e2 20 38 a5 c0 67 c0 85 08 a5 c1 69 00 85
>1a6608		09 a5 c2 69 00 85 0a 64 0b c2 20 a0 05 00 b7 c3
>1a6618		85 0c e2 20 c8 c8 b7 c3 85 0e 64 0f e2 20 a9 00
>1a6628		87 08 c2 20 18 a5 08 69 01 00 85 08 a5 0a 69 00
>1a6638		00 85 0a c5 0e d0 e5 a5 08 c5 0c d0 df 28 60 08
>1a6648		c2 20 64 08 64 0a e2 20 af 00 4d 00 85 8f 64 90
>1a6658		a2 01 00 e2 20 a7 c0 c5 8f f0 22 a6 8f 00 08 c2
>1a6668		20 48 a9 00 08 5b 68 28 e2 20 a9 0a 8f d3 08 00
>1a6678		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 c9 01 f0
>1a6688		3a a0 01 00 e2 20 bf 00 4d 00 85 23 64 24 64 25
>1a6698		64 26 b7 c0 85 29 64 2a 64 2b 64 2c a5 23 c5 29
>1a66a8		b0 68 20 a9 27 c2 20 18 a5 08 65 23 85 08 a5 0a
>1a66b8		65 25 85 0a e8 e8 c8 c4 8f d0 c9 e2 20 18 bf 00
>1a66c8		4d 00 85 90 65 08 85 08 a5 09 69 00 85 09 c2 20
>1a66d8		a5 0a 69 00 00 85 0a c2 20 06 08 26 0a 06 08 26
>1a66e8		0a e2 20 38 a5 08 65 8f 85 08 a5 09 69 00 85 09
>1a66f8		c2 20 a5 0a 69 00 00 85 0a 18 a5 08 65 c0 85 08
>1a6708		e2 20 a5 0a 65 c2 85 0a 28 60 08 c2 20 48 a9 00
>1a6718		08 5b 68 28 e2 20 a9 09 8f d3 08 00 c2 20 29 ff
>1a6728		00 20 ad 1d e2 20 dc d4 08 08 20 5e 12 e2 20 a0
>1a6738		00 00 b7 c3 29 7f c9 02 d0 05 20 37 06 80 10 c9
>1a6748		00 d0 05 20 a5 05 80 07 c9 01 d0 2b 20 13 07 a5
>1a6758		27 48 c2 20 a5 25 48 a5 23 48 20 47 66 68 85 23
>1a6768		68 85 25 e2 20 68 85 27 c2 20 a5 23 87 08 a0 02
>1a6778		00 a5 25 97 08 28 60 08 c2 20 48 a9 00 08 5b 68
>1a6788		28 e2 20 a9 04 8f d3 08 00 c2 20 29 ff 00 20 ad
>1a6798		1d e2 20 dc d4 08 08 20 5e 12 f4 00 00 f4 00 00
>1a67a8		e2 20 48 20 47 66 e2 20 68 c2 20 68 68 c2 20 a7
>1a67b8		08 85 23 a0 02 00 b7 08 85 25 e2 20 a0 00 00 b7
>1a67c8		c3 29 7f 85 27 20 b2 17 28 60 da 0b 08 08 c2 20
>1a67d8		48 a9 00 08 5b 68 28 c2 30 a5 25 89 f0 ff d0 29
>1a67e8		89 0f 00 d0 0c a5 23 89 00 fc d0 05 20 20 45 80
>1a67f8		2e a2 0a 00 46 25 66 23 ca d0 f9 20 20 45 e2 20
>1a6808		a9 4b 20 18 00 c2 20 80 16 a2 14 00 46 25 66 23
>1a6818		ca d0 f9 20 20 45 e2 20 a9 4d 20 18 00 c2 20 28
>1a6828		2b fa 60 0b 08 c2 30 a9 00 00 8f b6 08 00 8f b8
>1a6838		08 00 e2 20 20 cd 21 c9 00 f0 08 20 5b 1c 20 37
>1a6848		06 80 11 c2 20 a9 00 00 85 23 85 25 e2 20 a9 02
>1a6858		85 27 c2 20 20 8c 69 22 08 11 00 b0 22 20 3d 6a
>1a6868		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 10 8f d3
>1a6878		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 20
>1a6888		2b 03 08 c2 20 48 a9 20 03 5b 68 28 e2 20 a0 00
>1a6898		00 b7 18 d0 03 82 a9 00 c9 e5 d0 03 82 96 00 a0
>1a68a8		0b 00 b7 18 89 08 f0 03 82 a9 00 89 02 f0 03 82
>1a68b8		83 00 29 0f c9 0f d0 03 82 7a 00 a0 00 00 b7 18
>1a68c8		20 18 00 c8 c0 08 00 d0 f5 a9 20 20 18 00 a0 08
>1a68d8		00 b7 18 20 18 00 c8 c0 0b 00 d0 f5 a9 09 20 18
>1a68e8		00 a0 0b 00 b7 18 89 10 d0 1e c2 20 a0 1c 00 b7
>1a68f8		18 8f 23 08 00 c8 c8 b7 18 8f 25 08 00 e2 20 a9
>1a6908		00 8f 27 08 00 20 d2 67 a9 09 20 18 00 a0 0b 00
>1a6918		b7 18 89 08 d0 1c 89 01 f0 05 a9 52 20 18 00 89
>1a6928		04 f0 05 a9 53 20 18 00 89 10 f0 05 a9 44 20 18
>1a6938		00 ea 20 2b 03 20 42 03 22 0c 11 00 90 03 82 41
>1a6948		ff 20 3d 6a 08 c2 20 48 a9 00 08 5b 68 28 20 b1
>1a6958		20 28 2b 60 08 c2 20 48 a9 20 03 5b 68 28 e2 20
>1a6968		29 0f c9 0f f0 cf a9 5b 20 18 00 a0 00 00 b7 18
>1a6978		c9 20 f0 09 20 18 00 c8 c0 08 00 d0 f1 a9 5d 20
>1a6988		18 00 80 ae 0b 08 08 c2 20 48 a9 20 03 5b 68 28
>1a6998		c2 30 a9 73 f2 85 20 a9 1a 00 85 22 a0 00 00 e2
>1a69a8		20 a9 00 97 20 c8 c0 1e 00 d0 f8 c2 20 a9 73 f0
>1a69b8		8f 81 f2 1a a9 1a 00 8f 83 f2 1a af 23 08 00 8f
>1a69c8		75 f2 1a af 25 08 00 8f 77 f2 1a 28 2b 60 08 c2
>1a69d8		30 20 8d 20 20 5b 1c 20 37 06 20 8c 69 e2 20 a9
>1a69e8		2c 85 37 20 ae 21 b0 0f c2 20 a9 ff ff 8f 54 03
>1a69f8		00 8f 56 03 00 80 17 20 6c 20 20 5b 1c 20 a5 05
>1a6a08		c2 20 a5 23 8f 54 03 00 a5 25 8f 56 03 00 22 18
>1a6a18		11 00 b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a6a28		a9 11 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20
>1a6a38		dc d4 08 28 60 8b 0b 08 08 c2 20 48 a9 00 08 5b
>1a6a48		68 28 08 e2 20 48 a9 00 48 ab 68 28 e2 20 af 2e
>1a6a58		03 00 85 23 a9 00 85 24 85 25 85 26 a9 00 85 27
>1a6a68		85 ea a9 1a 85 e9 c2 20 a9 a0 6a 85 e7 20 2a 52
>1a6a78		e2 20 af 20 03 00 85 23 a9 00 85 24 85 25 85 26
>1a6a88		a9 00 85 27 85 ea a9 1a 85 e9 c2 20 a9 a8 6a 85
>1a6a98		e7 20 2a 52 28 2b ab 60 44 4f 53 53 54 41 54 00
>1a6aa8		42 49 4f 53 53 54 41 54 00 08 c2 30 20 8d 20 20
>1a6ab8		5b 1c 20 37 06 a5 23 8f 60 03 00 a5 25 8f 62 03
>1a6ac8		00 a9 ff ff 8f 54 03 00 8f 56 03 00 22 24 11 00
>1a6ad8		b0 25 20 ad 1d 20 3d 6a 08 c2 20 48 a9 00 08 5b
>1a6ae8		68 28 e2 20 a9 11 8f d3 08 00 c2 20 29 ff 00 20
>1a6af8		ad 1d e2 20 dc d4 08 20 ad 1d 28 60 08 c2 30 20
>1a6b08		8d 20 20 5b 1c 20 37 06 20 8c 69 a9 00 00 8f 54
>1a6b18		03 00 a9 01 00 8f 56 03 00 20 fb 4e 22 18 11 00
>1a6b28		b0 22 20 3d 6a 08 c2 20 48 a9 00 08 5b 68 28 e2
>1a6b38		20 a9 11 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2
>1a6b48		20 dc d4 08 20 3d 6a c2 20 a2 12 00 18 bf 73 f2
>1a6b58		1a 69 00 00 85 92 bf 75 f2 1a 69 01 00 85 94 e2
>1a6b68		20 a9 00 87 92 c2 20 a9 00 00 85 7a a9 01 00 85
>1a6b78		7c a2 00 00 e2 20 a7 7a f0 2a c9 0d f0 12 c9 0a
>1a6b88		f0 04 9d 00 4f e8 c2 20 e6 7a d0 e8 e6 7c 80 e4
>1a6b98		e2 20 a9 00 9d 00 4f 20 dc 26 c2 20 e6 7a d0 d1
>1a6ba8		e6 7c 80 cd e0 00 00 f0 0a e2 20 a9 00 9d 00 4f
>1a6bb8		20 dc 26 28 60 08 c2 30 20 8d 20 20 5b 1c 20 37
>1a6bc8		06 20 8c 69 e2 20 a9 2c 20 79 21 c2 20 20 5b 1c
>1a6bd8		20 a5 05 a5 23 8f 50 03 00 a5 25 8f 52 03 00 e2
>1a6be8		20 a9 2c c2 20 20 79 21 20 5b 1c 20 a5 05 a5 23
>1a6bf8		8f 58 03 00 a5 25 8f 5a 03 00 22 1c 11 00 b0 22
>1a6c08		20 3d 6a 08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9
>1a6c18		12 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc
>1a6c28		d4 08 20 3d 6a 28 60 da 5a 08 a2 00 00 a0 00 00
>1a6c38		e2 20 b7 23 9d 00 04 f0 04 e8 c8 80 f5 28 7a fa
>1a6c48		60 08 c2 30 20 8d 20 20 5b 1c 20 37 06 20 8c 69
>1a6c58		a9 00 00 85 a6 e2 20 a9 01 85 a8 a9 20 85 b4 c2
>1a6c68		20 a9 00 00 85 ab a9 ff ff 85 a9 c2 20 a9 00 00
>1a6c78		85 55 85 57 a9 ff ff 85 59 a9 ff 7f 85 5b 20 da
>1a6c88		17 e2 20 a9 80 85 b4 c2 20 c6 ab 18 a9 00 00 8f
>1a6c98		50 03 00 65 ab 8f 58 03 00 a9 01 00 8f 52 03 00
>1a6ca8		69 00 00 8f 5a 03 00 22 1c 11 00 b0 22 20 3d 6a
>1a6cb8		08 c2 20 48 a9 00 08 5b 68 28 e2 20 a9 12 8f d3
>1a6cc8		08 00 c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 20
>1a6cd8		3d 6a 28 60 08 c2 30 20 8d 20 20 5b 1c 20 37 06
>1a6ce8		20 2f 6c 22 04 11 00 b0 22 20 3d 6a 08 c2 20 48
>1a6cf8		a9 00 08 5b 68 28 e2 20 a9 13 8f d3 08 00 c2 20
>1a6d08		29 ff 00 20 ad 1d e2 20 dc d4 08 20 3d 6a 28 60
>1a6d18		da 08 e2 20 c9 61 90 08 c9 7b b0 04 29 df 80 13
>1a6d28		c9 20 90 13 a2 00 00 df 43 6d 1a f0 0a e8 e0 0f
>1a6d38		00 d0 f4 28 38 fa 6b 28 18 fa 6b 2a 2b 2c 2f 3a
>1a6d48		3b 3c 3d 3e 3f 5c 5b 5d 7c 22 08 08 c2 20 48 a9
>1a6d58		00 08 5b 68 28 c2 30 20 5b 1c 20 37 06 20 2f 6c
>1a6d68		22 10 11 00 b0 22 20 3d 6a 08 c2 20 48 a9 00 08
>1a6d78		5b 68 28 e2 20 a9 14 8f d3 08 00 c2 20 29 ff 00
>1a6d88		20 ad 1d e2 20 dc d4 08 e2 20 a9 2c 20 79 21 c2
>1a6d98		20 20 5b 1c 20 37 06 ad 38 03 85 08 ad 3a 03 85
>1a6da8		0a e2 20 a2 00 00 a9 20 95 7e e8 e0 0b 00 d0 f8
>1a6db8		a2 00 00 a0 00 00 b7 23 f0 76 c9 2e f0 39 22 18
>1a6dc8		6d 1a b0 1f 08 c2 20 48 a9 00 08 5b 68 28 e2 20
>1a6dd8		a9 0a 8f d3 08 00 c2 20 29 ff 00 20 ad 1d e2 20
>1a6de8		dc d4 08 95 7e c8 e8 c0 08 00 d0 ca b7 23 f0 40
>1a6df8		c9 2e f0 03 c8 80 f5 c8 a2 08 00 b7 23 f0 31 22
>1a6e08		18 6d 1a b0 22 20 3d 6a 08 c2 20 48 a9 00 08 5b
>1a6e18		68 28 e2 20 a9 0a 8f d3 08 00 c2 20 29 ff 00 20
>1a6e28		ad 1d e2 20 dc d4 08 95 7e c8 e8 c0 0c 00 d0 cb
>1a6e38		a2 00 00 a0 00 00 b5 7e 97 08 e8 c8 c0 0b 00 d0
>1a6e48		f5 22 14 11 00 b0 22 20 3d 6a 08 c2 20 48 a9 00
>1a6e58		08 5b 68 28 e2 20 a9 15 8f d3 08 00 c2 20 29 ff
>1a6e68		00 20 ad 1d e2 20 dc d4 08 20 3d 6a 28 60 08 08
>1a6e78		c2 20 48 a9 00 08 5b 68 28 c2 30 20 5b 1c 20 37
>1a6e88		06 a5 23 8f 64 03 00 a5 25 8f 66 03 00 e2 20 a9
>1a6e98		2c 20 79 21 c2 20 20 5b 1c 20 37 06 a5 23 8f 68
>1a6ea8		03 00 a5 25 8f 6a 03 00 22 30 11 00 b0 1f 08 c2
>1a6eb8		20 48 a9 00 08 5b 68 28 e2 20 a9 16 8f d3 08 00
>1a6ec8		c2 20 29 ff 00 20 ad 1d e2 20 dc d4 08 28 60 5c
>1a6ed8		94 88 1a 5c e5 86 1a 5c 95 88 1a 5c 11 78 1a 5c
>1a6ee8		6e 78 1a 5c a1 77 1a 5c 27 77 1a 5c a4 7c 1a 5c
>1a6ef8		92 73 1a 5c bf 76 1a 5c 7a 76 1a 5c 04 76 1a 5c
>1a6f08		a3 87 1a 5c a0 74 1a 5c f0 72 1a 5c 1e 88 1a 5c
>1a6f18		ce 73 1a 5c 97 88 1a 5c 90 88 1a 5c bd 75 1a 5c
>1a6f28		98 88 1a 18 fb 58 5c 32 6f 1a c2 30 22 f0 72 1a
>1a6f38		20 08 00 20 0c 00 8b e2 20 a9 00 48 ab a2 00 4f
>1a6f48		20 b9 04 ab 22 db 6e 1a 22 e3 6e 1a 80 e2 08 8b
>1a6f58		e2 20 a9 1a 48 ab c2 10 a2 69 6f 20 b8 03 ab 28
>1a6f68		6b 41 20 3c 73 74 61 72 74 3e 20 3c 61 73 73 65
>1a6f78		6d 62 6c 79 3e 0d 20 20 41 73 73 65 6d 62 6c 65
>1a6f88		20 61 20 70 72 6f 67 72 61 6d 0d 0d 43 20 3c 73
>1a6f98		74 61 72 74 31 3e 20 3c 73 74 61 72 74 32 3e 20
>1a6fa8		5b 6c 65 6e 20 28 31 20 69 66 20 62 6c 61 6e 6b
>1a6fb8		29 5d 0d 20 20 43 6f 6d 70 61 72 65 20 74 6f 20
>1a6fc8		73 65 63 74 69 6f 6e 73 20 6f 66 20 6d 65 6d 6f
>1a6fd8		72 79 0d 0d 44 20 3c 73 74 61 72 74 3e 20 5b 65
>1a6fe8		6e 64 5d 0d 20 20 44 69 73 61 73 73 65 6d 62 6c
>1a6ff8		65 20 61 20 70 72 6f 67 72 61 6d 0d 0d 46 20 3c
>1a7008		73 74 61 72 74 3e 20 3c 65 6e 64 3e 20 3c 62 79
>1a7018		74 65 3e 0d 20 20 46 69 6c 6c 20 61 20 62 6c 6f
>1a7028		63 6b 20 6f 66 20 6d 65 6d 6f 72 79 20 77 69 74
>1a7038		68 20 61 20 62 79 74 65 0d 0d 47 20 5b 61 64 64
>1a7048		72 65 73 73 5d 0d 20 20 53 74 61 72 74 20 65 78
>1a7058		65 63 75 74 69 6f 6e 20 61 74 20 61 20 6c 6f 63
>1a7068		61 74 69 6f 6e 0d 0d 4a 20 5b 61 64 64 72 65 73
>1a7078		73 5d 20 2d 20 4a 75 6d 70 20 74 6f 20 61 20 6c
>1a7088		6f 63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72
>1a7098		79 0d 20 20 4a 75 6d 70 20 74 6f 20 61 20 6c 6f
>1a70a8		63 61 74 69 6f 6e 20 69 6e 20 6d 65 6d 6f 72 79
>1a70b8		0d 0d 48 20 3c 73 74 61 72 74 3e 20 3c 65 6e 64
>1a70c8		3e 20 3c 62 79 74 65 3e 20 5b 62 79 74 65 5d 2e
>1a70d8		2e 0d 20 20 48 75 6e 74 20 66 6f 72 20 76 61 6c
>1a70e8		75 65 73 20 69 6e 20 6d 65 6d 6f 72 79 0d 0d 4c
>1a70f8		20 20 20 20 20 4c 4f 41 44 20 20 20 20 20 20 20
>1a7108		20 20 22 46 69 6c 65 22 20 5b 64 65 73 74 69 6e
>1a7118		61 74 69 6f 6e 5d 0d 4d 20 3c 73 74 61 72 74 3e
>1a7128		20 5b 65 6e 64 5d 0d 20 20 44 75 6d 70 20 74 68
>1a7138		65 20 76 61 6c 75 65 20 69 6e 20 6d 65 6d 6f 72
>1a7148		79 0d 0d 52 20 2d 20 44 69 73 70 6c 61 79 20 74
>1a7158		68 65 20 76 61 6c 75 65 73 20 6f 66 20 74 68 65
>1a7168		20 72 65 67 69 73 74 65 72 73 0d 0d 3b 20 3c 50
>1a7178		43 3e 20 3c 41 3e 20 3c 58 3e 20 3c 59 3e 20 3c
>1a7188		53 50 3e 20 3c 44 42 52 3e 20 3c 44 50 3e 20 3c
>1a7198		4e 56 4d 58 44 49 5a 43 3e 0d 20 20 43 68 61 6e
>1a71a8		67 65 20 74 68 65 20 63 6f 6e 74 65 6e 74 73 20
>1a71b8		6f 66 20 74 68 65 20 72 65 67 69 73 74 65 72 73
>1a71c8		0d 0d 53 20 20 20 20 20 53 41 56 45 20 20 20 20
>1a71d8		20 20 20 20 20 22 46 69 6c 65 22 20 3c 73 74 61
>1a71e8		72 74 3e 20 3c 65 6e 64 3e 0d 54 20 3c 73 74 61
>1a71f8		72 74 3e 20 3c 65 6e 64 3e 20 3c 64 65 73 74 69
>1a7208		6e 61 74 69 6f 6e 3e 0d 20 20 54 72 61 6e 73 66
>1a7218		65 72 20 28 63 6f 70 79 29 20 64 61 74 61 20 77
>1a7228		69 74 68 69 6e 20 6d 65 6d 6f 72 79 0d 0d 57 20
>1a7238		3c 62 79 74 65 3e 0d 20 20 53 65 74 20 74 68 65
>1a7248		20 72 65 67 69 73 74 65 72 20 77 69 64 74 68 20
>1a7258		66 6c 61 67 73 20 66 6f 72 20 74 68 65 20 64 69
>1a7268		73 61 73 73 65 6d 62 6c 65 72 0d 0d 58 20 2d 20
>1a7278		52 65 74 75 72 6e 20 74 6f 20 42 41 53 49 43 0d
>1a7288		0d 3e 20 3c 73 74 61 72 74 3e 20 3c 62 79 74 65
>1a7298		3e 20 5b 62 79 74 65 5d 2e 2e 2e 0d 20 20 45 64
>1a72a8		69 74 20 64 61 74 61 20 69 6e 20 6d 65 6d 6f 72
>1a72b8		79 0d 0d 3f 20 2d 20 44 69 73 70 6c 61 79 20 61
>1a72c8		20 73 68 6f 72 74 20 68 65 6c 70 20 73 63 72 65
>1a72d8		65 6e 0d 0d 00 08 08 c2 20 48 a9 48 08 5b 68 28
>1a72e8		e2 20 a5 0d 85 4e 28 6b 20 cc 01 08 e2 20 48 a9
>1a72f8		1a 48 ab 68 28 a2 d5 88 20 b8 03 e2 20 a9 3b 20
>1a7308		18 00 a9 20 20 18 00 c2 30 08 e2 20 48 a9 00 48
>1a7318		ab 68 28 a0 03 00 a2 42 02 20 3b 03 c2 20 a9 20
>1a7328		00 20 18 00 af 44 02 00 20 c8 03 a9 20 00 20 18
>1a7338		00 af 46 02 00 20 c8 03 a9 20 00 20 18 00 af 48
>1a7348		02 00 20 c8 03 a9 20 00 20 18 00 af 4a 02 00 20
>1a7358		c8 03 a9 20 00 20 18 00 af 4e 02 00 20 e2 03 a9
>1a7368		20 00 20 18 00 a9 20 00 20 18 00 af 4c 02 00 20
>1a7378		c8 03 a9 20 00 20 18 00 08 e2 20 ad 4f 02 22 ee
>1a7388		85 1a 28 20 2b 03 20 2b 03 6b 08 0b 08 c2 20 48
>1a7398		a9 48 08 5b 68 28 e2 20 a5 15 87 0d e2 20 a5 0f
>1a73a8		c5 13 d0 0e c2 20 a5 0d c5 11 d0 06 20 2b 03 2b
>1a73b8		28 6b c2 20 18 a5 0d 69 01 00 85 0d e2 20 a5 0e
>1a73c8		69 00 85 0e 80 d0 08 0b 08 c2 20 48 a9 48 08 5b
>1a73d8		68 28 e2 20 a5 0f c5 17 90 45 c2 20 a5 0d c5 15
>1a73e8		90 3d e2 20 a7 0d 87 15 a5 0f c5 13 d0 0b c2 20
>1a73f8		a5 0d c5 11 d0 03 4c 85 74 c2 20 18 a5 0d 69 01
>1a7408		00 85 0d e2 20 a5 0e 69 00 85 0e c2 20 18 a5 15
>1a7418		69 01 00 85 15 e2 20 a5 16 69 00 85 16 80 c3 c2
>1a7428		20 38 a5 11 e5 0d 85 19 e2 20 a5 13 e5 0f 85 1b
>1a7438		c2 20 18 a5 19 65 15 85 15 e2 20 a5 1b 65 17 85
>1a7448		17 e2 20 a7 11 87 15 a5 13 c5 0f d0 0a c2 20 a5
>1a7458		11 c5 0d d0 02 80 26 c2 20 38 a5 11 e9 01 00 85
>1a7468		11 e2 20 a5 12 e9 00 85 12 c2 20 38 a5 15 e9 01
>1a7478		00 85 15 e2 20 a5 16 e9 00 85 16 80 c4 20 2b 03
>1a7488		2b 28 6b 08 e2 20 c9 21 90 0b c9 7f 90 04 c9 a0
>1a7498		90 03 28 38 6b 28 18 6b 08 8b 0b 08 c2 20 48 a9
>1a74a8		48 08 5b 68 28 e2 20 a9 00 8f b6 08 00 a5 31 c9
>1a74b8		02 b0 16 c9 01 90 20 c2 20 18 a5 0d 69 00 01 85
>1a74c8		11 e2 20 a5 0f 69 00 85 13 c2 20 a5 0d 85 32 e2
>1a74d8		20 a5 0f 85 34 80 12 c2 20 18 a5 32 69 00 01 85
>1a74e8		11 e2 20 a5 34 69 00 85 13 e2 20 a0 00 00 c2 20
>1a74f8		a5 32 85 19 e2 20 a5 34 85 1b e2 20 a7 19 22 8b
>1a7508		74 1a b0 02 a9 3f 99 7e 08 c2 20 18 a5 19 69 01
>1a7518		00 85 19 e2 20 a5 1b 69 00 85 1b c8 c0 08 00 90
>1a7528		db a9 00 99 7e 08 a9 3e 20 18 00 a9 20 20 18 00
>1a7538		e2 20 a5 34 20 e2 03 a9 3a 20 18 00 c2 20 a5 32
>1a7548		20 c8 03 c2 20 a9 08 00 85 47 e2 20 a9 20 20 18
>1a7558		00 a7 32 20 e2 03 22 cd 85 1a e2 20 c6 47 d0 ea
>1a7568		a9 20 20 18 00 a9 20 20 18 00 08 e2 20 48 a9 00
>1a7578		48 ab 68 28 a2 7e 08 20 b8 03 20 2b 03 20 42 03
>1a7588		a5 34 c5 13 90 0f c2 20 a5 32 c5 11 90 07 20 2b
>1a7598		03 2b ab 28 6b 4c f1 74 08 8d 92 08 e2 20 bd 00
>1a75a8		00 99 00 00 ad 92 08 f0 0a c8 e8 e8 e8 e8 ce 92
>1a75b8		08 80 eb 28 6b 08 0b 8b 08 c2 20 48 a9 48 08 5b
>1a75c8		68 28 08 e2 20 48 a9 00 48 ab 68 28 c2 30 a5 0d
>1a75d8		85 32 a5 0f 85 34 e2 20 a5 31 3a 85 47 a2 59 08
>1a75e8		a0 7e 08 22 a0 75 1a a0 00 00 b9 7e 08 87 32 22
>1a75f8		cd 85 1a c8 c4 47 d0 f2 ab 2b 28 6b 08 0b 8b 08
>1a7608		c2 20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 00 48
>1a7618		ab 68 28 e2 20 c2 10 a5 31 3a 3a 85 47 a2 5d 08
>1a7628		a0 7e 08 22 a0 75 1a c2 20 a5 0d 85 32 a5 0f 85
>1a7638		34 c2 20 a5 34 c5 13 d0 06 a5 32 c5 11 f0 2c e2
>1a7648		20 a0 00 00 b7 32 d9 7e 08 d0 1a c8 c4 47 d0 f4
>1a7658		c2 20 a5 32 85 4a a5 34 85 4c 22 77 80 1a e2 20
>1a7668		a9 20 20 18 00 22 cd 85 1a 80 c6 20 2b 03 ab 2b
>1a7678		28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 31
>1a7688		f0 0e c2 30 a5 0d 8f 40 02 00 a5 0f 8f 42 02 00
>1a7698		af 46 02 00 aa af 48 02 00 a8 af 4a 02 00 1b af
>1a76a8		4c 02 00 5b e2 20 a9 1a 48 a9 76 48 a9 ba 48 4c
>1a76b8		f1 76 ea 5c 04 00 1a 08 c2 20 48 a9 48 08 5b 68
>1a76c8		28 e2 20 a5 31 f0 c9 c2 30 a5 0d 8f 40 02 00 a5
>1a76d8		0f 8f 42 02 00 af 46 02 00 aa af 48 02 00 a8 af
>1a76e8		4a 02 00 1b af 4c 02 00 5b e2 20 af 4e 02 00 48
>1a76f8		ab a9 5c 8f a2 08 00 af 42 02 00 8f a5 08 00 af
>1a7708		41 02 00 8f a4 08 00 af 40 02 00 8f a3 08 00 af
>1a7718		4f 02 00 48 c2 20 af 44 02 00 28 5c a2 08 00 08
>1a7728		0b 8b 08 e2 20 48 a9 1a 48 ab 68 28 08 c2 20 48
>1a7738		a9 48 08 5b 68 28 c2 10 e2 20 a5 31 c9 02 f0 0c
>1a7748		c9 03 d0 11 c2 20 a5 15 85 47 80 11 c2 20 a9 01
>1a7758		00 85 47 80 08 a2 99 88 20 b8 03 80 35 a5 0d 85
>1a7768		4a a5 0f 85 4c a0 00 00 e2 20 a7 4a d7 11 f0 09
>1a7778		22 77 80 1a a9 20 20 18 00 c2 20 18 a5 4a 69 01
>1a7788		00 85 4a a5 4c 69 00 00 85 4c c8 c4 47 d0 d9 20
>1a7798		2b 03 20 2b 03 ab 2b 28 6b 08 0b 8b 08 e2 20 48
>1a77a8		a9 00 48 ab 68 28 08 c2 20 48 a9 48 08 5b 68 28
>1a77b8		e2 20 a5 31 f0 4f a6 0d 8e 40 02 a6 0f 8e 42 02
>1a77c8		c9 01 f0 41 a6 11 8e 44 02 c9 02 f0 38 a6 15 8e
>1a77d8		46 02 c9 03 f0 2f a6 19 8e 48 02 c9 04 f0 26 a6
>1a77e8		1d 8e 4a 02 c9 05 f0 1d e2 10 a6 21 8e 4e 02 c9
>1a77f8		06 f0 12 c2 10 a6 25 8e 4c 02 c9 07 f0 07 e2 10
>1a7808		a6 29 8e 4f 02 ab 2b 28 6b 08 0b 8b 08 c2 20 48
>1a7818		a9 48 08 5b 68 28 e2 20 c2 10 a2 00 00 bf 06 89
>1a7828		1a f0 18 c7 08 f0 03 e8 80 f3 c2 20 8a 0a aa bf
>1a7838		47 78 1a 8f 2f 08 00 22 6b 78 1a ab 2b 28 6b e7
>1a7848		6e ef 6e f3 6e f7 6e fb 6e ff 6e 03 6f 07 6f 0b
>1a7858		6f 0f 6f eb 6e 13 6f 17 6f 1b 6f dd 72 1f 6f 23
>1a7868		6f 56 6f 6c 2f 08 08 8b 0b 08 c2 20 48 a9 48 08
>1a7878		5b 68 28 e2 20 a5 31 c9 02 b0 03 4c 14 7a c2 20
>1a7888		a5 0d 85 32 a5 0f 85 34 c2 20 22 16 7c 1a c9 ff
>1a7898		ff f0 10 85 54 e2 20 a5 31 c9 03 f0 36 a9 13 85
>1a78a8		4f 80 4c 20 2b 03 08 e2 20 48 a9 1a 48 ab 68 28
>1a78b8		c2 10 a2 4b 7a 20 b8 03 4c 14 7a 20 2b 03 08 e2
>1a78c8		20 48 a9 1a 48 ab 68 28 c2 10 a2 5a 7a 20 b8 03
>1a78d8		4c 14 7a e2 20 22 4c 7c 1a c9 ff f0 de 85 4f c9
>1a78e8		03 f0 62 c9 0b f0 5e c9 13 f0 04 c9 08 f0 00 22
>1a78f8		44 7b 1a b0 03 4c dd 79 87 32 22 cd 85 1a 08 e2
>1a7908		20 48 a9 00 48 ab 68 28 c2 20 a5 32 85 56 a5 34
>1a7918		85 58 e2 20 a5 4f c9 12 f0 6c c9 16 f0 68 c9 14
>1a7928		f0 7c 29 3f c9 02 d0 03 4c 0b 7a c2 20 29 ff 00
>1a7938		aa e2 20 bf 13 85 1a c9 03 f0 57 c9 02 f0 5f c9
>1a7948		01 f0 67 80 71 c2 20 a5 54 c9 8b 81 f0 26 c9 ef
>1a7958		81 f0 2a c9 6f 81 f0 1c c9 73 81 f0 17 c9 7b 81
>1a7968		f0 12 c9 63 81 f0 0d c9 77 81 f0 08 c9 5f 81 f0
>1a7978		03 4c f7 78 e2 20 a9 12 85 4f 4c f7 78 e2 20 a9
>1a7988		16 85 4f 4c f7 78 22 87 7a 1a 90 60 c9 02 f0 0e
>1a7998		80 18 a0 02 00 b9 98 08 97 56 22 cd 85 1a a0 01
>1a79a8		00 b9 98 08 97 56 22 cd 85 1a a0 00 00 b9 98 08
>1a79b8		97 56 22 cd 85 1a e2 20 a9 41 20 18 00 a9 20 20
>1a79c8		18 00 a6 32 86 4a a6 34 86 4c 22 77 80 1a a9 20
>1a79d8		20 18 00 80 37 20 2b 03 08 e2 20 48 a9 1a 48 ab
>1a79e8		68 28 c2 10 a2 18 7a 20 b8 03 80 20 20 2b 03 08
>1a79f8		e2 20 48 a9 1a 48 ab 68 28 c2 10 a2 68 7a 20 b8
>1a7a08		03 80 09 a5 4f 29 c0 d0 95 4c b2 79 2b ab 28 6b
>1a7a18		41 64 64 72 65 73 73 69 6e 67 20 6d 6f 64 65 20
>1a7a28		6e 6f 74 20 64 65 66 69 6e 65 64 20 66 6f 72 20
>1a7a38		74 68 61 74 20 69 6e 73 74 72 75 63 74 69 6f 6e
>1a7a48		2e 0d 00 42 61 64 20 6d 6e 65 6d 6f 6e 69 63 2e
>1a7a58		0d 00 42 61 64 20 6f 70 65 72 61 6e 64 2e 0d 00
>1a7a68		52 65 6c 61 74 69 76 65 20 6f 66 66 73 65 74 20
>1a7a78		69 73 20 74 6f 6f 20 6c 61 72 67 65 2e 0d 00 08
>1a7a88		0b 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a5 4f c9
>1a7a98		12 f0 0a c2 20 18 a5 32 69 02 00 80 08 c2 20 18
>1a7aa8		a5 32 69 01 00 85 4a a5 34 69 00 00 85 4c 38 a5
>1a7ab8		50 e5 4a 85 50 a5 52 e5 4c 85 52 e2 20 a5 4f c9
>1a7ac8		16 f0 1e a5 50 30 0c a5 51 d0 2a a5 52 d0 26 a9
>1a7ad8		01 80 26 a5 51 c9 ff d0 1c a5 52 c9 ff d0 16 80
>1a7ae8		18 a5 51 30 06 a5 52 d0 0c 80 0e a5 52 c9 ff d0
>1a7af8		04 a9 02 80 04 2b 28 18 6b 2b 28 38 6b 08 0b c2
>1a7b08		10 da 08 c2 20 48 a9 48 08 5b 68 28 e2 20 a2 00
>1a7b18		00 df 00 d0 1a f0 08 e8 e0 10 00 f0 1b 80 f2 c2
>1a7b28		20 06 50 26 52 06 50 26 52 06 50 26 52 06 50 26
>1a7b38		52 e2 20 8a 05 50 85 50 fa 2b 28 6b 0b 8b 08 c2
>1a7b48		20 48 a9 48 08 5b 68 28 08 e2 20 48 a9 1a 48 ab
>1a7b58		68 28 e2 20 a5 4f 29 3f 85 4a c2 30 a2 00 00 a0
>1a7b68		00 00 bd 11 82 f0 1b c5 54 d0 0d e2 20 b9 13 84
>1a7b78		29 3f c5 4a f0 07 c2 20 e8 e8 c8 80 e5 98 38 ab
>1a7b88		2b 6b 18 ab 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b
>1a7b98		68 28 e2 20 c2 10 a0 00 00 64 50 64 52 b7 03 f0
>1a7ba8		11 c9 64 f0 19 48 b7 36 85 4a 68 c5 4a d0 0b c8
>1a7bb8		80 eb b7 36 d0 04 2b 28 38 6b 2b 28 18 6b e2 20
>1a7bc8		b7 36 c9 3a b0 04 c9 30 b0 14 c9 47 b0 04 c9 41
>1a7bd8		b0 0c c9 67 b0 e4 c9 61 b0 02 80 de 29 df 22 05
>1a7be8		7b 1a 80 cb 0b 08 c2 20 48 a9 48 08 5b 68 28 a0
>1a7bf8		00 00 e2 20 b7 03 f0 03 c8 80 f9 c2 20 c8 5a 68
>1a7c08		18 65 03 85 03 a5 05 69 00 00 85 05 2b 6b 0b 08
>1a7c18		c2 20 48 a9 48 08 5b 68 28 c2 20 a5 11 85 36 a5
>1a7c28		13 85 38 a9 9f 80 85 03 a9 1a 00 85 05 22 8e 7b
>1a7c38		1a b0 0d 22 ec 7b 1a a7 03 d0 f2 a9 ff ff 80 02
>1a7c48		a5 03 2b 6b 08 0b 08 c2 20 48 a9 48 08 5b 68 28
>1a7c58		c2 30 a5 15 85 36 a5 17 85 38 a9 2b 85 85 03 a9
>1a7c68		1a 00 85 05 22 8e 7b 1a b0 22 22 ec 7b 1a c2 20
>1a7c78		18 a5 03 69 01 00 85 03 a5 05 69 00 00 85 05 e2
>1a7c88		20 a7 03 d0 df c2 20 a9 ff ff 80 0d 22 ec 7b 1a
>1a7c98		e2 20 a7 03 c2 20 29 ff 00 2b 28 6b 08 8b 0b 08
>1a7ca8		c2 20 48 a9 48 08 5b 68 28 e2 20 a9 00 8f b6 08
>1a7cb8		00 a5 31 c9 02 b0 16 c9 01 90 20 c2 20 18 a5 0d
>1a7cc8		69 00 01 85 11 e2 20 a5 0f 69 00 85 13 c2 20 a5
>1a7cd8		0d 85 32 e2 20 a5 0f 85 34 80 12 c2 20 18 a5 32
>1a7ce8		69 00 01 85 11 e2 20 a5 34 69 00 85 13 22 10 7d
>1a7cf8		1a e2 20 a5 34 c5 13 90 f4 c2 20 a5 32 c5 11 90
>1a7d08		ec 20 2b 03 2b ab 28 6b 08 0b e2 20 a9 41 20 18
>1a7d18		00 a9 20 20 18 00 08 c2 20 48 a9 7a 08 5b 68 28
>1a7d28		c2 20 a5 00 85 18 e2 20 a5 02 85 1a 22 77 80 1a
>1a7d38		a9 20 20 18 00 c2 20 18 a5 00 69 01 00 85 18 e2
>1a7d48		20 a5 02 69 00 85 1a e2 20 c2 10 a7 00 c9 c2 d0
>1a7d58		0b 48 a7 18 49 ff 2f 96 08 00 80 0b c9 e2 d0 0c
>1a7d68		48 a7 18 0f 96 08 00 8f 96 08 00 68 c2 20 29 ff
>1a7d78		00 0a aa bf 11 82 1a aa 22 f1 7f 1a e2 20 a7 00
>1a7d88		aa bf 13 84 1a 22 cd 85 1a 22 9e 7d 1a 20 2b 03
>1a7d98		20 42 03 2b 28 6b 08 e2 20 48 29 3f 0a c2 10 aa
>1a7da8		68 7c ac 7d dc 7d f7 7d fe 7d 23 7e 2a 7e 45 7e
>1a7db8		67 7e 78 7e b5 7e bd 7e ce 7e df 7e e6 7e 0b 7f
>1a7dc8		38 7f a4 7e 89 7e 56 7e 2b 7f 35 7f 49 7f 78 7f
>1a7dd8		26 7f 89 7f a9 28 20 18 00 22 a0 7f 1a a9 2c 20
>1a7de8		18 00 a9 58 20 18 00 a9 29 20 18 00 4c 9a 7f 22
>1a7df8		a0 7f 1a 4c 9a 7f e2 20 48 a9 23 20 18 00 68 29
>1a7e08		c0 c9 00 f0 0f 4a 4a 2f 96 08 00 d0 07 22 aa 7f
>1a7e18		1a 4c 9a 7f 22 a0 7f 1a 4c 9a 7f 22 aa 7f 1a 4c
>1a7e28		9a 7f a9 28 20 18 00 22 a0 7f 1a a9 29 20 18 00
>1a7e38		a9 2c 20 18 00 a9 59 20 18 00 4c 9a 7f 22 a0 7f
>1a7e48		1a a9 2c 20 18 00 a9 58 20 18 00 4c 9a 7f 22 a0
>1a7e58		7f 1a a9 2c 20 18 00 a9 59 20 18 00 4c 9a 7f 22
>1a7e68		aa 7f 1a a9 2c 20 18 00 a9 59 20 18 00 4c 9a 7f
>1a7e78		22 aa 7f 1a a9 2c 20 18 00 a9 58 20 18 00 4c 9a
>1a7e88		7f a9 28 20 18 00 22 aa 7f 1a a9 2c 20 18 00 a9
>1a7e98		58 20 18 00 a9 29 20 18 00 4c 9a 7f a9 28 20 18
>1a7ea8		00 22 a0 7f 1a a9 29 20 18 00 4c 9a 7f a9 41 20
>1a7eb8		18 00 4c 9e 7f 22 a0 7f 1a a9 2c 20 18 00 a9 53
>1a7ec8		20 18 00 4c 9a 7f a9 5b 20 18 00 22 a0 7f 1a a9
>1a7ed8		5d 20 18 00 4c 9a 7f 22 b8 7f 1a 4c 9e 7f a9 28
>1a7ee8		20 18 00 22 a0 7f 1a a9 2c 20 18 00 a9 53 20 18
>1a7ef8		00 a9 29 20 18 00 a9 2c 20 18 00 a9 59 20 18 00
>1a7f08		4c 9a 7f a9 5b 20 18 00 22 a0 7f 1a a9 5d 20 18
>1a7f18		00 a9 2c 20 18 00 a9 59 20 18 00 4c 9a 7f a0 02
>1a7f28		00 80 03 a0 01 00 22 1e 80 1a 4c 9e 7f 4c 9e 7f
>1a7f38		22 b8 7f 1a a9 2c 20 18 00 a9 58 20 18 00 4c 9e
>1a7f48		7f a9 23 20 18 00 8b a5 02 48 ab a6 00 e8 a0 01
>1a7f58		00 22 3b 03 1a a9 2c 20 18 00 a9 23 20 18 00 a6
>1a7f68		00 a0 01 00 22 3b 03 1a ab 22 cd 85 1a 4c 9a 7f
>1a7f78		a9 28 20 18 00 22 aa 7f 1a a9 29 20 18 00 4c 9a
>1a7f88		7f a9 5b 20 18 00 22 aa 7f 1a a9 5d 20 18 00 4c
>1a7f98		9a 7f 22 cd 85 1a 28 6b 08 e2 20 a7 00 20 e2 03
>1a7fa8		28 6b 08 c2 30 a7 00 20 c8 03 22 cd 85 1a 28 6b
>1a7fb8		08 8b 0b c2 30 5a 08 c2 20 48 a9 7a 08 5b 68 28
>1a7fc8		08 e2 20 48 a9 00 48 ab 68 28 e2 20 a0 00 00 a7
>1a7fd8		00 99 92 08 22 cd 85 1a c8 c0 03 00 d0 f1 22 77
>1a7fe8		80 1a c2 30 7a 2b ab 28 6b 08 8b e2 20 c2 10 08
>1a7ff8		e2 20 48 a9 1a 48 ab 68 28 bd 00 00 20 18 00 e8
>1a8008		bd 00 00 20 18 00 e8 bd 00 00 20 18 00 e8 a9 20
>1a8018		20 18 00 ab 28 6b 08 0b 08 c2 20 48 a9 7a 08 5b
>1a8028		68 28 e2 20 c0 02 00 f0 14 a7 00 85 18 30 06 64
>1a8038		19 64 1a 80 1e a9 ff 85 19 85 1a 80 16 a7 00 85
>1a8048		18 22 cd 85 1a a7 00 85 19 30 04 64 1a 80 04 a9
>1a8058		ff 85 1a c2 20 38 a5 00 65 18 85 18 e2 20 a5 02
>1a8068		65 1a 85 1a 22 77 80 1a 22 cd 85 1a 2b 28 6b 08
>1a8078		0b c2 20 48 08 c2 20 48 a9 48 08 5b 68 28 e2 20
>1a8088		a5 4c 20 e2 03 e2 20 a9 3a 20 18 00 c2 20 a5 4a
>1a8098		20 c8 03 68 2b 28 6b 4f 52 41 00 41 4e 44 00 45
>1a80a8		4f 52 00 41 44 43 00 53 54 41 00 4c 44 41 00 43
>1a80b8		4d 50 00 53 42 43 00 41 53 4c 00 52 4f 4c 00 4c
>1a80c8		53 52 00 52 4f 52 00 53 54 58 00 4c 44 58 00 44
>1a80d8		45 43 00 49 4e 43 00 42 49 54 00 4a 4d 50 00 53
>1a80e8		54 59 00 4c 44 59 00 43 50 59 00 43 50 58 00 42
>1a80f8		52 4b 00 4a 53 52 00 52 54 49 00 52 54 53 00 50
>1a8108		48 50 00 50 4c 50 00 50 48 41 00 50 4c 41 00 44
>1a8118		45 59 00 54 41 59 00 49 4e 59 00 49 4e 58 00 43
>1a8128		4c 43 00 53 45 43 00 43 4c 49 00 53 45 49 00 54
>1a8138		59 41 00 43 4c 56 00 43 4c 44 00 53 45 44 00 54
>1a8148		58 41 00 54 58 53 00 54 41 58 00 54 53 58 00 44
>1a8158		45 58 00 4e 4f 50 00 42 50 4c 00 42 4d 49 00 42
>1a8168		56 43 00 42 56 53 00 42 43 43 00 42 43 53 00 42
>1a8178		4e 45 00 42 45 51 00 54 53 42 00 54 52 42 00 53
>1a8188		54 5a 00 42 52 41 00 50 48 59 00 50 4c 59 00 50
>1a8198		48 58 00 50 4c 58 00 50 48 44 00 50 4c 44 00 50
>1a81a8		48 4b 00 52 54 4c 00 50 48 42 00 50 4c 42 00 57
>1a81b8		41 49 00 58 42 41 00 54 43 53 00 54 53 43 00 54
>1a81c8		43 44 00 54 44 43 00 54 58 59 00 54 59 58 00 53
>1a81d8		54 50 00 58 43 45 00 43 4f 50 00 4a 53 4c 00 57
>1a81e8		44 4d 00 50 45 52 00 42 52 4c 00 52 45 50 00 53
>1a81f8		45 50 00 4d 56 50 00 4d 56 4e 00 50 45 49 00 50
>1a8208		45 41 00 4a 4d 4c 00 00 00 f7 80 9f 80 df 81 9f
>1a8218		80 7f 81 9f 80 bf 80 9f 80 07 81 9f 80 bf 80 9f
>1a8228		81 7f 81 9f 80 bf 80 9f 80 5f 81 9f 80 9f 80 9f
>1a8238		80 83 81 9f 80 bf 80 9f 80 27 81 9f 80 db 80 bf
>1a8248		81 83 81 9f 80 bf 80 9f 80 fb 80 a3 80 e3 81 a3
>1a8258		80 df 80 a3 80 c3 80 a3 80 0b 81 a3 80 c3 80 a3
>1a8268		81 df 80 a3 80 c3 80 a3 80 63 81 a3 80 a3 80 a3
>1a8278		80 df 80 a3 80 c3 80 a3 80 2b 81 a3 80 d7 80 c3
>1a8288		81 df 80 a3 80 c3 80 a3 80 ff 80 a7 80 e7 81 a7
>1a8298		80 fb 81 a7 80 c7 80 a7 80 0f 81 a7 80 c7 80 a7
>1a82a8		81 e3 80 a7 80 c7 80 a7 80 67 81 a7 80 a7 80 a7
>1a82b8		80 ff 81 a7 80 c7 80 a7 80 2f 81 a7 80 8f 81 c7
>1a82c8		81 0b 82 a7 80 c7 80 a7 80 03 81 ab 80 eb 81 ab
>1a82d8		80 87 81 ab 80 cb 80 ab 80 13 81 ab 80 cb 80 ab
>1a82e8		81 e3 80 ab 80 cb 80 ab 80 6b 81 ab 80 ab 80 ab
>1a82f8		80 87 81 ab 80 cb 80 ab 80 33 81 ab 80 93 81 cb
>1a8308		81 e3 80 ab 80 cb 80 ab 80 8b 81 af 80 ef 81 af
>1a8318		80 e7 80 af 80 cf 80 af 80 17 81 df 80 47 81 af
>1a8328		81 e7 80 af 80 cf 80 af 80 6f 81 af 80 af 80 af
>1a8338		80 e7 80 af 80 cf 80 af 80 37 81 af 80 4b 81 cf
>1a8348		81 87 81 af 80 87 81 af 80 eb 80 b3 80 d3 80 b3
>1a8358		80 eb 80 b3 80 d3 80 b3 80 1b 81 b3 80 4f 81 b3
>1a8368		81 eb 80 b3 80 d3 80 b3 80 73 81 b3 80 b3 80 b3
>1a8378		80 eb 80 b3 80 d3 80 b3 80 3b 81 b3 80 53 81 d3
>1a8388		81 eb 80 b3 80 d3 80 b3 80 ef 80 b7 80 f3 81 b7
>1a8398		80 ef 80 b7 80 d7 80 b7 80 1f 81 b7 80 57 81 b7
>1a83a8		81 ef 80 b7 80 d7 80 b7 80 77 81 b7 80 b7 80 b7
>1a83b8		80 03 82 b7 80 d7 80 b7 80 3f 81 b7 80 97 81 d7
>1a83c8		81 0b 82 b7 80 d7 80 b7 80 f3 80 bb 80 f7 81 bb
>1a83d8		80 f3 80 bb 80 db 80 bb 80 23 81 bb 80 5b 81 bb
>1a83e8		81 f3 80 bb 80 db 80 bb 80 7b 81 bb 80 bb 80 bb
>1a83f8		80 07 82 bb 80 db 80 bb 80 43 81 bb 80 9b 81 db
>1a8408		81 fb 80 bb 80 db 80 bb 80 00 00 13 00 02 09 01
>1a8418		01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 01
>1a8428		05 05 0d 13 06 08 13 03 07 07 0e 03 00 0b 09 01
>1a8438		01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 05
>1a8448		05 05 0d 13 06 08 13 07 07 07 0e 13 00 13 09 14
>1a8458		01 01 0a 13 82 08 13 03 03 03 0b 12 04 0f 0c 14
>1a8468		05 05 0d 13 06 13 13 0b 07 07 0b 13 00 16 09 01
>1a8478		01 01 0a 13 82 08 13 15 03 03 0b 12 04 0f 0c 05
>1a8488		05 05 0d 13 06 13 13 10 07 07 0e 12 00 16 09 01
>1a8498		01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05
>1a84a8		05 11 0d 13 06 13 13 03 07 07 0e 82 00 42 09 01
>1a84b8		01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 05
>1a84c8		05 11 0d 13 06 13 13 07 07 06 0e 42 00 02 09 01
>1a84d8		01 01 0a 13 82 13 13 03 03 03 0b 12 04 0f 0c 01
>1a84e8		05 05 0d 13 06 13 13 17 07 07 0e 42 00 02 09 01
>1a84f8		01 01 0f 13 82 13 13 03 03 03 0b 12 04 0f 0c 03
>1a8508		05 05 0d 13 06 13 13 10 07 07 0e 01 01 01 02 01
>1a8518		01 02 02 00 01 01 03 01 01 03 01 02 01 01 00 02
>1a8528		02 02 02 41 00 08 64 64 3a 64 64 64 64 2c 58 00
>1a8538		0e 64 64 3a 64 64 64 64 00 0b 64 64 64 64 2c 58
>1a8548		00 07 64 64 64 64 2c 59 00 06 64 64 64 64 00 03
>1a8558		64 64 2c 58 00 05 64 64 2c 59 00 11 64 64 2c 53
>1a8568		00 09 64 64 00 01 23 64 64 64 64 00 c2 23 64 64
>1a8578		2c 23 64 64 00 14 23 64 64 00 02 28 64 64 2c 53
>1a8588		29 2c 59 00 0c 28 64 64 64 64 2c 58 29 00 10 28
>1a8598		64 64 64 64 29 00 10 28 64 64 2c 58 29 00 00 28
>1a85a8		64 64 29 2c 59 00 04 28 64 64 29 00 0f 5b 64 64
>1a85b8		64 64 5d 00 17 5b 64 64 5d 2c 59 00 0d 5b 64 64
>1a85c8		5d 00 0a 00 00 08 c2 20 48 18 af 7a 08 00 69 01
>1a85d8		00 8f 7a 08 00 e2 20 af 7c 08 00 69 00 8f 7c 08
>1a85e8		00 c2 20 68 28 6b 08 c2 10 e2 20 da a2 08 00 0a
>1a85f8		b0 08 48 a9 30 20 18 00 80 06 48 a9 31 20 18 00
>1a8608		68 ca d0 eb fa 28 6b 08 c2 20 48 a9 48 08 5b 68
>1a8618		28 e2 20 a7 32 f0 0a c9 20 d0 06 22 cd 85 1a 80
>1a8628		f2 6b 08 08 c2 20 48 a9 48 08 5b 68 28 22 cd 85
>1a8638		1a 22 0f 86 1a c2 30 a5 31 c2 20 29 ff 00 0a 0a
>1a8648		aa a5 32 95 0d a5 34 95 0f e2 20 a7 32 f0 14 c9
>1a8658		22 f0 06 22 cd 85 1a 80 f2 a9 00 87 32 22 cd 85
>1a8668		1a e6 31 28 6b 08 c2 20 48 a9 48 08 5b 68 28 e2
>1a8678		20 64 4a c2 20 64 50 64 52 e2 20 a7 32 c9 3a f0
>1a8688		0d 20 60 04 90 0e 22 05 7b 1a a9 01 85 4a 22 cd
>1a8698		85 1a 80 e5 a5 4a f0 16 a5 31 c2 20 29 ff 00 0a
>1a86a8		0a aa a5 50 95 0d a5 52 95 0f e2 20 e6 31 6b e2
>1a86b8		20 64 31 22 0f 86 1a a7 32 f0 21 c9 22 d0 06 22
>1a86c8		2a 86 1a 80 0a 22 6d 86 1a a5 31 c9 09 b0 0d a7
>1a86d8		32 f0 09 c9 20 f0 dc 20 60 04 b0 d7 6b 08 0b 08
>1a86e8		c2 20 48 a9 48 08 5b 68 28 c2 10 e2 20 a2 31 00
>1a86f8		74 00 ca d0 fb a9 00 85 02 85 34 c2 20 a9 00 4f
>1a8708		85 00 85 32 e2 20 22 0f 86 1a c9 00 f0 38 c2 20
>1a8718		a5 32 85 08 e2 20 a5 34 85 0a a2 01 00 22 cd 85
>1a8728		1a a7 32 d0 06 86 0b 64 31 80 1b c9 20 f0 03 e8
>1a8738		80 eb 86 0b a9 00 87 32 22 cd 85 1a a7 08 c9 41
>1a8748		f0 07 22 b7 86 1a 2b 28 6b 22 0f 86 1a a7 32 f0
>1a8758		f5 22 6d 86 1a 22 0f 86 1a a7 32 f0 e9 c2 20 a5
>1a8768		32 85 11 e2 20 a5 34 85 13 22 cd 85 1a a7 32 f0
>1a8778		26 c9 20 d0 f4 a9 00 87 32 e6 31 22 cd 85 1a 22
>1a8788		0f 86 1a a7 32 f0 bf c2 20 a5 32 85 15 e2 20 a5
>1a8798		34 85 17 e6 31 80 af e6 31 80 ab 08 c2 10 e2 20
>1a87a8		a5 31 d0 0f a2 99 88 a9 1a 48 ab 20 b8 03 20 2b
>1a87b8		03 80 61 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08
>1a87c8		00 20 8c 69 e2 20 a5 31 c9 01 d0 0f c2 20 a9 ff
>1a87d8		ff 8f 54 03 00 8f 56 03 00 80 0e c2 20 a5 11 8f
>1a87e8		54 03 00 a5 13 8f 56 03 00 22 18 11 00 b0 25 e2
>1a87f8		20 a2 bf 88 a9 1a 48 ab 20 b8 03 af 2e 03 00 20
>1a8808		e2 03 a9 20 20 18 00 af 20 03 00 20 e2 03 20 2b
>1a8818		03 20 2b 03 28 6b 8b 08 c2 10 e2 20 a5 31 c9 03
>1a8828		f0 0f a2 99 88 a9 1a 48 ab 20 b8 03 20 2b 03 80
>1a8838		54 c2 20 a5 0d 8f 23 08 00 a5 0f 8f 25 08 00 20
>1a8848		8c 69 a5 11 8f 50 03 00 a5 13 8f 52 03 00 a5 15
>1a8858		8f 58 03 00 a5 17 8f 5a 03 00 22 1c 11 00 b0 25
>1a8868		e2 20 a2 a9 88 a9 1a 48 ab 20 b8 03 af 2e 03 00
>1a8878		20 e2 03 a9 20 20 18 00 af 20 03 00 20 e2 03 20
>1a8888		2b 03 20 2b 03 28 ab 6b 5c 0f 27 1a 6b 00 00 00
>1a8898		00 42 61 64 20 61 72 67 75 6d 65 6e 74 73 0d 0d
>1a88a8		00 55 6e 61 62 6c 65 20 74 6f 20 73 61 76 65 20
>1a88b8		66 69 6c 65 3a 20 00 55 6e 61 62 6c 65 20 74 6f
>1a88c8		20 6c 6f 61 64 20 66 69 6c 65 3a 20 00 0d 20 20
>1a88d8		50 43 20 20 20 20 20 41 20 20 20 20 58 20 20 20
>1a88e8		20 59 20 20 20 20 53 50 20 20 20 44 42 52 20 44
>1a88f8		50 20 20 20 4e 56 4d 58 44 49 5a 43 0d 00 41 43
>1a8908		44 46 47 4a 48 4c 4d 52 3b 53 54 56 57 58 3e 3f
>1a8918		00 18 fb 08 c2 20 48 a9 00 08 5b 68 28 08 e2 20
>1a8928		48 a9 00 48 ab 68 28 c2 30 20 58 89 a9 ff fe 1b
>1a8938		08 e2 20 48 a9 1a 48 ab 68 28 a2 71 d2 20 b8 03
>1a8948		08 e2 20 48 a9 00 48 ab 68 28 4c 0f 27 4c 55 89
>1a8958		08 20 c3 02 20 fb 4e 28 60 00 00 00 00 00 00 00
>1a8968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 1128 times (18048 bytes)...
>1acff8		00 00 00 00 00 00 00 00 30 31 32 33 34 35 36 37
>1ad008		38 39 41 42 43 44 45 46 2b 00 2d 00 2a 00 2f 00
>1ad018		4d 4f 44 00 5e 00 3c 3d 00 3e 3d 00 3c 3e 00 3c
>1ad028		00 3d 00 3e 00 4e 4f 54 00 41 4e 44 00 4f 52 00
>1ad038		28 00 29 00 52 45 4d 00 50 52 49 4e 54 00 4c 45
>1ad048		54 00 47 4f 54 4f 00 45 4e 44 00 49 46 00 54 48
>1ad058		45 4e 00 45 4c 53 45 00 47 4f 53 55 42 00 52 45
>1ad068		54 55 52 4e 00 46 4f 52 00 54 4f 00 53 54 45 50
>1ad078		00 4e 45 58 54 00 44 4f 00 4c 4f 4f 50 00 57 48
>1ad088		49 4c 45 00 55 4e 54 49 4c 00 45 58 49 54 00 43
>1ad098		4c 52 00 53 54 4f 50 00 50 4f 4b 45 00 50 4f 4b
>1ad0a8		45 57 00 50 4f 4b 45 4c 00 43 4c 53 00 52 45 41
>1ad0b8		44 00 44 41 54 41 00 52 45 53 54 4f 52 45 00 44
>1ad0c8		49 4d 00 43 41 4c 4c 00 2d 00 4c 45 4e 00 50 45
>1ad0d8		45 4b 00 50 45 45 4b 57 00 50 45 45 4b 4c 00 43
>1ad0e8		48 52 24 00 41 53 43 00 53 50 43 00 54 41 42 00
>1ad0f8		41 42 53 00 53 47 4e 00 48 45 58 24 00 44 45 43
>1ad108		00 53 54 52 24 00 56 41 4c 00 4c 45 46 54 24 00
>1ad118		52 49 47 48 54 24 00 4d 49 44 24 00 52 55 4e 00
>1ad128		4e 45 57 00 4c 4f 41 44 00 4c 49 53 54 00 44 49
>1ad138		52 00 42 4c 4f 41 44 00 42 52 55 4e 00 42 53 41
>1ad148		56 45 00 44 45 4c 00 53 41 56 45 00 52 45 4e 41
>1ad158		4d 45 00 43 4f 50 59 00 4d 4f 4e 49 54 4f 52 00
>1ad168		47 45 54 00 49 4e 50 55 54 00 53 45 54 42 4f 52
>1ad178		44 45 52 00 54 45 58 54 43 4f 4c 4f 52 00 53 45
>1ad188		54 42 47 43 4f 4c 4f 52 00 53 45 54 44 41 54 45
>1ad198		00 47 45 54 44 41 54 45 24 00 53 45 54 54 49 4d
>1ad1a8		45 00 47 45 54 54 49 4d 45 24 00 47 52 41 50 48
>1ad1b8		49 43 53 00 53 45 54 43 4f 4c 4f 52 00 42 49 54
>1ad1c8		4d 41 50 00 43 4c 52 42 49 54 4d 41 50 00 50 4c
>1ad1d8		4f 54 00 4c 49 4e 45 00 46 49 4c 4c 00 53 50 52
>1ad1e8		49 54 45 00 53 50 52 49 54 45 41 54 00 53 50 52
>1ad1f8		49 54 45 53 48 4f 57 00 54 49 4c 45 53 45 54 00
>1ad208		54 49 4c 45 4d 41 50 00 54 49 4c 45 53 48 4f 57
>1ad218		00 54 49 4c 45 41 54 00 4d 45 4d 43 4f 50 59 00
>1ad228		4c 49 4e 45 41 52 00 52 45 43 54 00 4c 4f 43 41
>1ad238		54 45 00 49 4e 54 00 52 4e 44 00 53 49 4e 00 43
>1ad248		4f 53 00 54 41 4e 00 4c 4e 00 41 43 4f 53 00 41
>1ad258		53 49 4e 00 41 54 41 4e 00 45 58 50 00 53 51 52
>1ad268		00 0d 52 45 41 44 59 0d 00 43 32 35 36 20 46 6f
>1ad278		65 6e 69 78 20 42 41 53 49 43 38 31 36 20 76 30
>1ad288		2e 32 2e 30 2d 61 6c 70 68 61 2b 33 37 34 0d 00
>1b0000						.align 256
.1b0000						CREDITS_TEXT
>1b0000		20 20 20 20 20 20 20 20		                .text "                              CREDITS                                  "
>1b0008		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0018		20 20 20 20 20 20 43 52 45 44 49 54 53 20 20 20
>1b0028		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0038		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0047		20 20 20 20 20 20 20 20		                .fill 80 - len("                              CREDITS                                  "), $20
>1b004f		20
>1b0050		20 20 20 20 20 20 20 20		                .text "                       The C256 Foenix Project                         "
>1b0058		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 54
>1b0068		68 65 20 43 32 35 36 20 46 6f 65 6e 69 78 20 50
>1b0078		72 6f 6a 65 63 74 20 20 20 20 20 20 20 20 20 20
>1b0088		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0097		20 20 20 20 20 20 20 20		                .fill 80 - len("                       The C256 Foenix Project                         "), $20
>1b009f		20
>1b00a0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00a8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b00d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b00e7		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b00ef		20
>1b00f0		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b00f8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0128		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0137		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b013f		20
>1b0140		50 72 6f 6a 65 63 74 20		                .text "Project Creator & Hardware Design: Stefany Allaire"
>1b0148		43 72 65 61 74 6f 72 20 26 20 48 61 72 64 77 61
>1b0158		72 65 20 44 65 73 69 67 6e 3a 20 53 74 65 66 61
>1b0168		6e 79 20 41 6c 6c 61 69 72 65
>1b0172		20 20 20 20 20 20 20 20		                .fill 80 - len("Project Creator & Hardware Design: Stefany Allaire"), $20
>1b017a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b018a		20 20 20 20 20 20
>1b0190		77 77 77 2e 63 32 35 36		                .text "www.c256foenix.com"
>1b0198		66 6f 65 6e 69 78 2e 63 6f 6d
>1b01a2		20 20 20 20 20 20 20 20		                .fill 80 - len("www.c256foenix.com"), $20
>1b01aa		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b01da		20 20 20 20 20 20
>1b01e0		20				                .text " "
>1b01e1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b01e9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0229		20 20 20 20 20 20 20
>1b0230		20				                .text " "
>1b0231		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0239		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0279		20 20 20 20 20 20 20
>1b0280		45 41 52 4c 59 20 41 4c		                .text "EARLY ALPHA & KEY PLAYERS:"
>1b0288		50 48 41 20 26 20 4b 45 59 20 50 4c 41 59 45 52
>1b0298		53 3a
>1b029a		20 20 20 20 20 20 20 20		                .fill 80 - len("EARLY ALPHA & KEY PLAYERS:"), $20
>1b02a2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02b2		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02c2		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b02d0		20 20 46 6f 65 6e 69 78		                .text "  Foenix IDE Design : Daniel Tremblay"
>1b02d8		20 49 44 45 20 44 65 73 69 67 6e 20 3a 20 44 61
>1b02e8		6e 69 65 6c 20 54 72 65 6d 62 6c 61 79
>1b02f5		20 20 20 20 20 20 20 20		                .fill 80 - len("  Foenix IDE Design : Daniel Tremblay"), $20
>1b02fd		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b030d		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b031d		20 20 20
>1b0320		20 20 4b 65 72 6e 65 6c		                .text "  Kernel Design, BASIC816 Creator: Peter J. Weingartner "
>1b0328		20 44 65 73 69 67 6e 2c 20 42 41 53 49 43 38 31
>1b0338		36 20 43 72 65 61 74 6f 72 3a 20 50 65 74 65 72
>1b0348		20 4a 2e 20 57 65 69 6e 67 61 72 74 6e 65 72 20
>1b0358		20 20 20 20 20 20 20 20		                .fill 80 - len("  Kernel Design, BASIC816 Creator: Peter J. Weingartner "), $20
>1b0360		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0370		20 20 46 58 2f 4f 53 20		                .text "  FX/OS (GUI Environment) Design: Mike Bush"
>1b0378		28 47 55 49 20 45 6e 76 69 72 6f 6e 6d 65 6e 74
>1b0388		29 20 44 65 73 69 67 6e 3a 20 4d 69 6b 65 20 42
>1b0398		75 73 68
>1b039b		20 20 20 20 20 20 20 20		                .fill 80 - len("  FX/OS (GUI Environment) Design: Mike Bush"), $20
>1b03a3		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03b3		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b03c0		53 70 65 63 69 61 6c 20		                .text "Special Thanks:"
>1b03c8		54 68 61 6e 6b 73 3a
>1b03cf		20 20 20 20 20 20 20 20		                .fill 80 - len("Special Thanks:"), $20
>1b03d7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0407		20 20 20 20 20 20 20 20 20
>1b0410		20 20 45 61 72 6c 79 20		                .text "  Early Creator for the Foenix IDE & Kernel: Tom Wilson"
>1b0418		43 72 65 61 74 6f 72 20 66 6f 72 20 74 68 65 20
>1b0428		46 6f 65 6e 69 78 20 49 44 45 20 26 20 4b 65 72
>1b0438		6e 65 6c 3a 20 54 6f 6d 20 57 69 6c 73 6f 6e
>1b0447		20 20 20 20 20 20 20 20		                .fill 80 - len("  Early Creator for the Foenix IDE & Kernel: Tom Wilson"), $20
>1b044f		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b045f		20
>1b0460		20				                .text " "
>1b0461		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0469		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04a9		20 20 20 20 20 20 20
>1b04b0		20				                .text " "
>1b04b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b04b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b04f9		20 20 20 20 20 20 20
>1b0500		46 50 47 41 20 43 4f 52		                .text "FPGA CORES AUTHORS:"
>1b0508		45 53 20 41 55 54 48 4f 52 53 3a
>1b0513		20 20 20 20 20 20 20 20		                .fill 80 - len("FPGA CORES AUTHORS:"), $20
>1b051b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b054b		20 20 20 20 20
>1b0550		20 20 4c 50 43 20 43 6f		                .text "  LPC Core: Howard M. Harte, hharte@opencores.org"
>1b0558		72 65 3a 20 48 6f 77 61 72 64 20 4d 2e 20 48 61
>1b0568		72 74 65 2c 20 68 68 61 72 74 65 40 6f 70 65 6e
>1b0578		63 6f 72 65 73 2e 6f 72 67
>1b0581		20 20 20 20 20 20 20 20		                .fill 80 - len("  LPC Core: Howard M. Harte, hharte@opencores.org"), $20
>1b0589		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0599		20 20 20 20 20 20 20
>1b05a0		20 20 53 44 43 61 72 64		                .text "  SDCard Core: Steve Fielding, sfielding@base2designs.com"
>1b05a8		20 43 6f 72 65 3a 20 53 74 65 76 65 20 46 69 65
>1b05b8		6c 64 69 6e 67 2c 20 73 66 69 65 6c 64 69 6e 67
>1b05c8		40 62 61 73 65 32 64 65 73 69 67 6e 73 2e 63 6f
>1b05d8		6d
>1b05d9		20 20 20 20 20 20 20 20		                .fill 80 - len("  SDCard Core: Steve Fielding, sfielding@base2designs.com"), $20
>1b05e1		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b05f0		20 20 50 53 32 20 43 6f		                .text "  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "
>1b05f8		6e 74 72 6f 6c 6c 65 72 20 28 43 32 35 36 20 46
>1b0608		6f 65 6e 69 78 20 55 29 3a 20 4d 69 68 61 20 44
>1b0618		6f 6c 65 6e 63 2c 20 6d 69 68 61 64 40 6f 70 65
>1b0628		6e 63 6f 72 65 73 2e 6f 72 67 20
>1b0633		20 20 20 20 20 20 20 20		                .fill 80 - len("  PS2 Controller (C256 Foenix U): Miha Dolenc, mihad@opencores.org "), $20
>1b063b		20 20 20 20 20
>1b0640		20 20 53 4e 37 36 34 38		                .text "  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"
>1b0648		39 20 28 4a 54 38 39 29 20 28 43 32 35 36 20 46
>1b0658		6f 65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54
>1b0668		65 6a 61 64 61 20 47 6f 6d 65 7a
>1b0673		20 20 20 20 20 20 20 20		                .fill 80 - len("  SN76489 (JT89) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b067b		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b068b		20 20 20 20 20
>1b0690		20 20 59 4d 32 36 31 32		                .text "  YM2612 (JT12): Jose Tejada Gomez"
>1b0698		20 28 4a 54 31 32 29 3a 20 4a 6f 73 65 20 54 65
>1b06a8		6a 61 64 61 20 47 6f 6d 65 7a
>1b06b2		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2612 (JT12): Jose Tejada Gomez"), $20
>1b06ba		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06ca		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b06da		20 20 20 20 20 20
>1b06e0		20 20 59 4d 32 31 35 31		                .text "  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"
>1b06e8		20 28 4a 54 35 31 29 20 28 43 32 35 36 20 46 6f
>1b06f8		65 6e 69 78 20 55 29 3a 20 4a 6f 73 65 20 54 65
>1b0708		6a 61 64 61 20 47 6f 6d 65 7a
>1b0712		20 20 20 20 20 20 20 20		                .fill 80 - len("  YM2151 (JT51) (C256 Foenix U): Jose Tejada Gomez"), $20
>1b071a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b072a		20 20 20 20 20 20
>1b0730		20 20 53 49 44 20 28 36		                .text "  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"
>1b0738		35 38 31 29 3a 20 47 69 64 65 6f 6e 20 5a 77 65
>1b0748		69 6a 74 7a 65 72 2c 20 67 69 64 65 6f 6e 2e 7a
>1b0758		77 65 69 6a 74 7a 65 72 40 67 6d 61 69 6c 2e 63
>1b0768		6f 6d
>1b076a		20 20 20 20 20 20 20 20		                .fill 80 - len("  SID (6581): Gideon Zweijtzer, gideon.zweijtzer@gmail.com"), $20
>1b0772		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0780		20 20 55 41 52 54 20 28		                .text "  UART (16550) (C256 Foenix U): TBD"
>1b0788		31 36 35 35 30 29 20 28 43 32 35 36 20 46 6f 65
>1b0798		6e 69 78 20 55 29 3a 20 54 42 44
>1b07a3		20 20 20 20 20 20 20 20		                .fill 80 - len("  UART (16550) (C256 Foenix U): TBD"), $20
>1b07ab		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07bb		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b07cb		20 20 20 20 20
>1b07d0		20				                .text " "
>1b07d1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b07d9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0819		20 20 20 20 20 20 20
>1b0820		20				                .text " "
>1b0821		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0829		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0869		20 20 20 20 20 20 20
>1b0870		53 50 45 43 49 41 4c 20		                .text "SPECIAL THANKS:"
>1b0878		54 48 41 4e 4b 53 3a
>1b087f		20 20 20 20 20 20 20 20		                .fill 80 - len("SPECIAL THANKS:"), $20
>1b0887		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b08b7		20 20 20 20 20 20 20 20 20
>1b08c0		20 20 4a 6f 65 72 69 20		                .text "  Joeri Vanharen"
>1b08c8		56 61 6e 68 61 72 65 6e
>1b08d0		20 20 20 20 20 20 20 20		                .fill 80 - len("  Joeri Vanharen"), $20
>1b08d8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0908		20 20 20 20 20 20 20 20
>1b0910		20 20 4a 69 6d 20 44 72		                .text "  Jim Drew"
>1b0918		65 77
>1b091a		20 20 20 20 20 20 20 20		                .fill 80 - len("  Jim Drew"), $20
>1b0922		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0952		20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0960		20 20 41 69 64 61 6e 20		                .text "  Aidan Lawrence (Sound Chip Schematic references)"
>1b0968		4c 61 77 72 65 6e 63 65 20 28 53 6f 75 6e 64 20
>1b0978		43 68 69 70 20 53 63 68 65 6d 61 74 69 63 20 72
>1b0988		65 66 65 72 65 6e 63 65 73 29
>1b0992		20 20 20 20 20 20 20 20		                .fill 80 - len("  Aidan Lawrence (Sound Chip Schematic references)"), $20
>1b099a		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b09aa		20 20 20 20 20 20
>1b09b0		20				                .text " "
>1b09b1		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b09b9		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b09f9		20 20 20 20 20 20 20
>1b0a00		20				                .text " "
>1b0a01		20 20 20 20 20 20 20 20		                .fill 80 - len(" "), $20
>1b0a09		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 3 times (48 bytes)...
>1b0a49		20 20 20 20 20 20 20
>1b0a50		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0a58		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0a88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0a97		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0a9f		20
>1b0aa0		20 20 20 20 20 20 20 20		                .text "                     I would like to say a big thanks               "
>1b0aa8		20 20 20 20 20 20 20 20 20 20 20 20 20 49 20 77
>1b0ab8		6f 75 6c 64 20 6c 69 6b 65 20 74 6f 20 73 61 79
>1b0ac8		20 61 20 62 69 67 20 74 68 61 6e 6b 73 20 20 20
>1b0ad8		20 20 20 20 20 20 20 20 20 20 20 20
>1b0ae4		20 20 20 20 20 20 20 20		                .fill 80 - len("                     I would like to say a big thanks               "), $20
>1b0aec		20 20 20 20
>1b0af0		20 20 20 20 20 20 20 20		                .text "                  from the bottom of my heart for all of            "
>1b0af8		20 20 20 20 20 20 20 20 20 20 66 72 6f 6d 20 74
>1b0b08		68 65 20 62 6f 74 74 6f 6d 20 6f 66 20 6d 79 20
>1b0b18		68 65 61 72 74 20 66 6f 72 20 61 6c 6c 20 6f 66
>1b0b28		20 20 20 20 20 20 20 20 20 20 20 20
>1b0b34		20 20 20 20 20 20 20 20		                .fill 80 - len("                  from the bottom of my heart for all of            "), $20
>1b0b3c		20 20 20 20
>1b0b40		20 20 20 20 20 20 20 20		                .text "              those who have believed in this project since          "
>1b0b48		20 20 20 20 20 20 74 68 6f 73 65 20 77 68 6f 20
>1b0b58		68 61 76 65 20 62 65 6c 69 65 76 65 64 20 69 6e
>1b0b68		20 74 68 69 73 20 70 72 6f 6a 65 63 74 20 73 69
>1b0b78		6e 63 65 20 20 20 20 20 20 20 20 20 20
>1b0b85		20 20 20 20 20 20 20 20		                .fill 80 - len("              those who have believed in this project since          "), $20
>1b0b8d		20 20 20
>1b0b90		20 20 20 20 20 20 20 20		                .text "                the very beginning and have been there to            "
>1b0b98		20 20 20 20 20 20 20 20 74 68 65 20 76 65 72 79
>1b0ba8		20 62 65 67 69 6e 6e 69 6e 67 20 61 6e 64 20 68
>1b0bb8		61 76 65 20 62 65 65 6e 20 74 68 65 72 65 20 74
>1b0bc8		6f 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bd5		20 20 20 20 20 20 20 20		                .fill 80 - len("                the very beginning and have been there to            "), $20
>1b0bdd		20 20 20
>1b0be0		20 20 20 20 20 20 20 20		                .text "                        make it what it is today!!!                  "
>1b0be8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0bf8		6d 61 6b 65 20 69 74 20 77 68 61 74 20 69 74 20
>1b0c08		69 73 20 74 6f 64 61 79 21 21 21 20 20 20 20 20
>1b0c18		20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c25		20 20 20 20 20 20 20 20		                .fill 80 - len("                        make it what it is today!!!                  "), $20
>1b0c2d		20 20 20
>1b0c30		20 20 20 20 20 20 20 20		                .text "                                                                       "
>1b0c38		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 2 times (32 bytes)...
>1b0c68		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c77		20 20 20 20 20 20 20 20		                .fill 80 - len("                                                                       "), $20
>1b0c7f		20
>1b0c80		20 20 20 20 20 20 20 20		                .text "                        Stefany"
>1b0c88		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0c98		53 74 65 66 61 6e 79
>1b0c9f		20 20 20 20 20 20 20 20		                .fill 80 - len("                        Stefany"), $20
>1b0ca7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cb7		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b0cc7		20 20 20 20 20 20 20 20 20
>1b0cd0		20 20 20 20 20 20 20 20		                .fill 80 * (60 - 26),$20
>1b0cd8		20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
;		...repeated 168 times (2688 bytes)...
>1b1768		20 20 20 20 20 20 20 20
>1b1770						.align 256
>1b1800		f3 f3 f3 f3 f3 f3 f3 f3		CREDITS_COLOR   .fill 80 * 60, $F3
>1b1808		f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3 f3
;		...repeated 298 times (4768 bytes)...
>1b2ab8		f3 f3 f3 f3 f3 f3 f3 f3
.1e0000						BOOT_MENU
.1e0000						SplashScreenMain:
.1e0000		48		pha		                PHA             ; begin setdp macro
.1e0001		08		php		                PHP
.1e0002		c2 20		rep #$20	                REP #$20        ; set A long
.1e0004		a9 00 00	lda #$0000	                LDA #0         ; set DP to page 0
.1e0007		5b		tcd		                TCD
.1e0008		28		plp		                PLP
.1e0009		68		pla		                PLA             ; end setdp macro
.1e000a		c2 10		rep #$10	                REP #$10        ; set X long
.1e000c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e000e		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e0012		a9 00		lda #$00	                LDA #$00
.1e0014		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0016		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0018		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e001a		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0  ; Read the Pending Register &
.1e001e		29 04		and #$04	                AND #FNX0_INT02_TMR0
.1e0020		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0  ; Writing it back will clear the Active Bit
.1e0024		20 ee 00	jsr $1e00ee	                JSR Splash_Get_Machine_ID
.1e0027		20 21 01	jsr $1e0121	                JSR Splash_Clear_Screen
.1e002a		20 0b 01	jsr $1e010b	                JSR Splash_Load_FontSet
.1e002d		22 08 03 1e	jsl $1e0308	                JSL Splashscreen_BitMapSetup
.1e0031		20 1b 06	jsr $1e061b	                JSR Model_Update_Info_Field
.1e0034		20 fc 05	jsr $1e05fc	                JSR Set_Text_Color
.1e0037		a9 00		lda #$00	                LDA #$00
.1e0039		85 a6		sta $a6		                STA LINE_INDEX  ; Point to the first line to be displayed
.1e003b		85 a7		sta $a7		                STA LINE_INDEX + 1
.1e003d		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0040						HAVE_FUN:
.1e0040		22 8c 80 19	jsl $19808c	                JSL BOOT_SOUND_OFF
.1e0044		22 3b 01 1e	jsl $1e013b	                JSL Splash_Moniker_Color_Rolling  ; Go Move The Colors on the Logo
.1e0048		a6 a6		ldx $a6		                LDX LINE_INDEX
.1e004a		e0 17 00	cpx #$0017	                CPX #NumberOfEntry
.1e004d		f0 08		beq $1e0057	                BEQ ByPassCharDisplay           ; If Equal all Lines have been displayed
.1e004f		20 e0 08	jsr $1e08e0	                JSR Line_Display_1_Character    ; Go move the cursor one stop
.1e0052		90 21		bcc $1e0075	                BCC Still_Displaying_Char
.1e0054		20 a3 08	jsr $1e08a3	                JSR Line_Setup_Before_Display   ; Assign and Compute the Pointer
.1e0057						ByPassCharDisplay:
.1e0057		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0059		22 48 10 00	jsl $001048	                JSL GETCH               ; Try to get a character
.1e005d		c9 00		cmp #$00	                CMP #0                  ; Did we get anything
.1e005f		f0 14		beq $1e0075	                BEQ Still_Displaying_Char            ; No: keep waiting until timeout
.1e0061		c9 81		cmp #$81	                CMP #CHAR_F1            ; Did the user press F1?
.1e0063		f0 1f		beq $1e0084	                BEQ return              ; Yes: return it
.1e0065		c9 82		cmp #$82	                CMP #CHAR_F2            ; Did the user press F2?
.1e0067		f0 1b		beq $1e0084	                BEQ return              ; Yes: return it
.1e0069		c9 83		cmp #$83	                CMP #CHAR_F3            ; Did the user press F3?
.1e006b		f0 17		beq $1e0084	                BEQ return              ; Yes: return it
.1e006d		c9 0d		cmp #$0d	                CMP #CHAR_CR            ; Did the user press CR?
.1e006f		f0 13		beq $1e0084	                BEQ return              ; Yes: return it
.1e0071		c9 20		cmp #$20	                CMP #CHAR_SP            ; Did the user press SPACE?
.1e0073		f0 0d		beq $1e0082	                BEQ exitshere
.1e0075						Still_Displaying_Char:
.1e0075						WaitForNextSOF:
.1e0075		af 40 01 00	lda $000140	                LDA @l INT_PENDING_REG0
.1e0079		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e007b		c9 01		cmp #$01	                CMP #FNX0_INT00_SOF
.1e007d		d0 f6		bne $1e0075	                BNE WaitForNextSOF;
.1e007f		4c 40 00	jmp $1e0040	                JMP HAVE_FUN
.1e0082						exitshere:
.1e0082						timeout
.1e0082		a9 00		lda #$00	                LDA #0                  ; Return 0 for a timeout / SPACE
.1e0084						return
.1e0084		8f 08 00 00	sta $000008	                STA @l KRNL_BOOT_MENU_K          ; Store ther Keyboard Value
.1e0088		a9 00		lda #$00	                LDA #$00
.1e008a		8f 00 00 af	sta $af0000	                STA @l MASTER_CTRL_REG_L         ; Disable Everything
.1e008e		22 3c 05 1e	jsl $1e053c	                JSL SS_VDMA_CLEAR_MEMORY_640_480 ; Clear the Bitmap Screen
.1e0092		20 a7 00	jsr $1e00a7	                JSR VickyII_Registers_Clear      ; Reset All Vicky Registers
.1e0095		22 c0 10 00	jsl $0010c0	                JSL INITFONTSET ; Reload the Official FONT set
.1e0099		22 bc 10 00	jsl $0010bc	                JSL INITCURSOR ; Reset the Cursor to its origin
.1e009d		22 ac 10 00	jsl $0010ac	                JSL INITCHLUT ; The Software does change one of the CH LUT, so, let's Init again
.1e00a1		22 cc 10 00	jsl $0010cc	                JSL INITVKYTXTMODE  ; Init VICKY TextMode now contains Hi-Res Dipswitch read and Automatic Text Size Parameter adjust
.1e00a5		ea		nop		                NOP
.1e00a6		6b		rtl		                RTL
.1e00a7						VickyII_Registers_Clear:
.1e00a7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00a9		c2 10		rep #$10	                REP #$10        ; set X long
.1e00ab		a2 00 00	ldx #$0000	                LDX #$0000
.1e00ae		a9 00		lda #$00	                LDA #$00
.1e00b0						ClearSpriteRegisters:
.1e00b0		9f 00 0c af	sta $af0c00,x	                STA @l SP00_CONTROL_REG, X
.1e00b4		e8		inx		                INX
.1e00b5		e0 00 02	cpx #$0200	                CPX #$0200
.1e00b8		d0 f6		bne $1e00b0	                BNE ClearSpriteRegisters
.1e00ba		a2 00 00	ldx #$0000	                LDX #$0000
.1e00bd		a9 00		lda #$00	                LDA #$00
.1e00bf						ClearTiles0Registers:
.1e00bf		9f 00 02 af	sta $af0200,x	                STA @l TL0_CONTROL_REG, X
.1e00c3		e8		inx		                INX
.1e00c4		e0 30 00	cpx #$0030	                CPX #$0030
.1e00c7		d0 f6		bne $1e00bf	                BNE ClearTiles0Registers
.1e00c9		ea		nop		                NOP
.1e00ca		a2 00 00	ldx #$0000	                LDX #$0000
.1e00cd		a9 00		lda #$00	                LDA #$00
.1e00cf						ClearTiles1Registers:
.1e00cf		9f 80 02 af	sta $af0280,x	                STA @l TILESET0_ADDY_L, X
.1e00d3		e8		inx		                INX
.1e00d4		e0 20 00	cpx #$0020	                CPX #$0020
.1e00d7		d0 f6		bne $1e00cf	                BNE ClearTiles1Registers
.1e00d9		ea		nop		                NOP
.1e00da		a2 00 00	ldx #$0000	                LDX #$0000
.1e00dd		a9 00		lda #$00	                LDA #$00
.1e00df						ClearBitmapRegisters:
.1e00df		9f 00 01 af	sta $af0100,x	                STA @l BM0_CONTROL_REG, X
.1e00e3		9f 08 01 af	sta $af0108,x	                STA @l BM1_CONTROL_REG, X
.1e00e7		e8		inx		                INX
.1e00e8		e0 10 00	cpx #$0010	                CPX #$0010
.1e00eb		d0 f2		bne $1e00df	                BNE ClearBitmapRegisters
.1e00ed		60		rts		                RTS
.1e00ee						Splash_Get_Machine_ID
.1e00ee		e2 20		sep #$20	                SEP #$20        ; set A short
.1e00f0		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e00f4		29 03		and #$03	                AND #$03        ; Isolate the first 2 bits to know if it is a U or FMX
.1e00f6		85 b0		sta $b0		                STA MODEL
.1e00f8		c9 00		cmp #$00	                CMP #$00
.1e00fa		f0 0e		beq $1e010a	                BEQ DONE
.1e00fc		af 87 e8 af	lda $afe887	                LDA @lGABE_SYS_STAT
.1e0100		29 04		and #$04	                AND #GABE_SYS_STAT_MID2 ; High 4Meg, Low - 2Megs
.1e0102		c9 04		cmp #$04	                CMP #GABE_SYS_STAT_MID2
.1e0104		f0 04		beq $1e010a	                BEQ DONE
.1e0106		a9 02		lda #$02	                LDA #$02
.1e0108		85 b0		sta $b0		                STA MODEL       ; In this Scheme 00 - FMX, 01 - U+, 02 - U
.1e010a						DONE:
.1e010a		60		rts		                RTS
.1e010b						Splash_Load_FontSet
.1e010b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e010d		c2 10		rep #$10	                REP #$10        ; set X long
.1e010f		a2 00 00	ldx #$0000	                LDX #$0000
.1e0112						DONE_LOADING_FONT:
.1e0112		bf 00 08 1f	lda $1f0800,x	                LDA @l FONT_4_SPLASH, X
.1e0116		9f 00 80 af	sta $af8000,x	                STA @l FONT_MEMORY_BANK0, X
.1e011a		e8		inx		                INX
.1e011b		e0 00 08	cpx #$0800	                CPX #2048
.1e011e		d0 f2		bne $1e0112	                BNE DONE_LOADING_FONT
.1e0120		60		rts		                RTS
.1e0121						Splash_Clear_Screen
.1e0121		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0123		c2 10		rep #$10	                REP #$10        ; set X long
.1e0125		a2 00 00	ldx #$0000	                LDX #$0000
.1e0128						Branch_Clear:
.1e0128		a9 20		lda #$20	                LDA #$20
.1e012a		9f 00 a0 af	sta $afa000,x	                STA @l CS_TEXT_MEM_PTR,X
.1e012e		a9 f0		lda #$f0	                LDA #$F0
.1e0130		9f 00 c0 af	sta $afc000,x	                STA @l CS_COLOR_MEM_PTR,X
.1e0134		e8		inx		                INX
.1e0135		e0 00 20	cpx #$2000	                CPX #$2000
.1e0138		d0 ee		bne $1e0128	                BNE Branch_Clear
.1e013a		60		rts		                RTS
=$00						IRQ_SOF_ST0 = $00
=$01						IRQ_SOF_ST1 = $01
=$02						IRQ_SOF_ST2 = $02
.1e013b						Splash_Moniker_Color_Rolling
.1e013b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e013d		af 40 01 00	lda $000140	                LDA @lINT_PENDING_REG0
.1e0141		29 01		and #$01	                AND #FNX0_INT00_SOF
.1e0143		8f 40 01 00	sta $000140	                STA @lINT_PENDING_REG0
.1e0147		a5 f0		lda $f0		                LDA INTERRUPT_STATE
.1e0149		c9 00		cmp #$00	                CMP #IRQ_SOF_ST0
.1e014b		f0 0c		beq $1e0159	                BEQ SERVE_STATE0
.1e014d		c9 01		cmp #$01	                CMP #IRQ_SOF_ST1
.1e014f		f0 1a		beq $1e016b	                BEQ SERVE_STATE1
.1e0151		c9 02		cmp #$02	                CMP #IRQ_SOF_ST2
.1e0153		d0 03		bne $1e0158	                BNE NOT_SERVE_STATE2
.1e0155		82 39 01	brl $1e0291	                BRL SERVE_STATE2
.1e0158						NOT_SERVE_STATE2
.1e0158		6b		rtl		                RTL
.1e0159						SERVE_STATE0
.1e0159		a5 f1		lda $f1		                LDA INTERRUPT_COUNT
.1e015b		c9 04		cmp #$04	                CMP #$04
.1e015d		f0 03		beq $1e0162	                BEQ SERVE_NEXT_STATE
.1e015f		e6 f1		inc $f1		                INC INTERRUPT_COUNT
.1e0161		6b		rtl		                RTL
.1e0162						SERVE_NEXT_STATE
.1e0162		a9 00		lda #$00	                LDA #$00
.1e0164		85 f1		sta $f1		                STA INTERRUPT_COUNT
.1e0166		a9 01		lda #$01	                LDA #IRQ_SOF_ST1
.1e0168		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e016a		6b		rtl		                RTL
.1e016b						SERVE_STATE1
.1e016b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e016d		a9 00 00	lda #$0000	                LDA #$0000
.1e0170		a2 00 00	ldx #$0000	                LDX #$0000
.1e0173		e2 30		sep #$30	                SEP #$30        ; set A&X short
.1e0175		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0177		bf c0 02 1e	lda $1e02c0,x	                LDA @lCOLOR_POINTER+0, X
.1e017b		aa		tax		                TAX
.1e017c		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0180		8f e0 3f af	sta $af3fe0	                STA @lGRPH_LUT7_PTR+992
.1e0184		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0188		8f e1 3f af	sta $af3fe1	                STA @lGRPH_LUT7_PTR+993
.1e018c		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0190		8f e2 3f af	sta $af3fe2	                STA @lGRPH_LUT7_PTR+994
.1e0194		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0196		bf c1 02 1e	lda $1e02c1,x	                LDA @lCOLOR_POINTER+1, X
.1e019a		aa		tax		                TAX
.1e019b		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e019f		8f e4 3f af	sta $af3fe4	                STA @lGRPH_LUT7_PTR+996
.1e01a3		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01a7		8f e5 3f af	sta $af3fe5	                STA @lGRPH_LUT7_PTR+997
.1e01ab		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01af		8f e6 3f af	sta $af3fe6	                STA @lGRPH_LUT7_PTR+998
.1e01b3		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01b5		bf c2 02 1e	lda $1e02c2,x	                LDA @lCOLOR_POINTER+2, X
.1e01b9		aa		tax		                TAX
.1e01ba		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01be		8f e8 3f af	sta $af3fe8	                STA @lGRPH_LUT7_PTR+1000
.1e01c2		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01c6		8f e9 3f af	sta $af3fe9	                STA @lGRPH_LUT7_PTR+1001
.1e01ca		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ce		8f ea 3f af	sta $af3fea	                STA @lGRPH_LUT7_PTR+1002
.1e01d2		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01d4		bf c3 02 1e	lda $1e02c3,x	                LDA @lCOLOR_POINTER+3, X
.1e01d8		aa		tax		                TAX
.1e01d9		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01dd		8f ec 3f af	sta $af3fec	                STA @lGRPH_LUT7_PTR+1004
.1e01e1		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e01e5		8f ed 3f af	sta $af3fed	                STA @lGRPH_LUT7_PTR+1005
.1e01e9		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e01ed		8f ee 3f af	sta $af3fee	                STA @lGRPH_LUT7_PTR+1006
.1e01f1		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e01f3		bf c4 02 1e	lda $1e02c4,x	                LDA @lCOLOR_POINTER+4, X
.1e01f7		aa		tax		                TAX
.1e01f8		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e01fc		8f f0 3f af	sta $af3ff0	                STA @lGRPH_LUT7_PTR+1008
.1e0200		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0204		8f f1 3f af	sta $af3ff1	                STA @lGRPH_LUT7_PTR+1009
.1e0208		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e020c		8f f2 3f af	sta $af3ff2	                STA @lGRPH_LUT7_PTR+1010
.1e0210		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0212		bf c5 02 1e	lda $1e02c5,x	                LDA @lCOLOR_POINTER+5, X
.1e0216		aa		tax		                TAX
.1e0217		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e021b		8f f4 3f af	sta $af3ff4	                STA @lGRPH_LUT7_PTR+1012
.1e021f		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0223		8f f5 3f af	sta $af3ff5	                STA @lGRPH_LUT7_PTR+1013
.1e0227		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e022b		8f f6 3f af	sta $af3ff6	                STA @lGRPH_LUT7_PTR+1014
.1e022f		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0231		bf c6 02 1e	lda $1e02c6,x	                LDA @lCOLOR_POINTER+6, X
.1e0235		aa		tax		                TAX
.1e0236		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e023a		8f f8 3f af	sta $af3ff8	                STA @lGRPH_LUT7_PTR+1016
.1e023e		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0242		8f f9 3f af	sta $af3ff9	                STA @lGRPH_LUT7_PTR+1017
.1e0246		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e024a		8f fa 3f af	sta $af3ffa	                STA @lGRPH_LUT7_PTR+1018
.1e024e		a6 f2		ldx $f2		                LDX IRQ_COLOR_CHOICE
.1e0250		bf c7 02 1e	lda $1e02c7,x	                LDA @lCOLOR_POINTER+7, X
.1e0254		aa		tax		                TAX
.1e0255		bf a0 02 1e	lda $1e02a0,x	                LDA @lCOLOR_CHART, X
.1e0259		8f fc 3f af	sta $af3ffc	                STA @lGRPH_LUT7_PTR+1020
.1e025d		8f 50 1f af	sta $af1f50	                STA @lFG_CHAR_LUT_PTR + $10           ;
.1e0261		bf a1 02 1e	lda $1e02a1,x	                LDA @lCOLOR_CHART+1, X
.1e0265		8f fd 3f af	sta $af3ffd	                STA @lGRPH_LUT7_PTR+1021
.1e0269		8f 51 1f af	sta $af1f51	                STA @lFG_CHAR_LUT_PTR + $11            ;
.1e026d		bf a2 02 1e	lda $1e02a2,x	                LDA @lCOLOR_CHART+2, X
.1e0271		8f fe 3f af	sta $af3ffe	                STA @lGRPH_LUT7_PTR+1022
.1e0275		8f 52 1f af	sta $af1f52	                STA @lFG_CHAR_LUT_PTR + $12            ;
.1e0279						HERE
.1e0279		18		clc		                CLC
.1e027a		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e027c		69 09		adc #$09	                ADC #$09
.1e027e		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e0280		a5 f2		lda $f2		                LDA IRQ_COLOR_CHOICE
.1e0282		c9 48		cmp #$48	                CMP #$48
.1e0284		d0 04		bne $1e028a	                BNE EXIT_COLOR_CHANGE
.1e0286		a9 00		lda #$00	                LDA #$00
.1e0288		85 f2		sta $f2		                STA IRQ_COLOR_CHOICE
.1e028a						EXIT_COLOR_CHANGE
.1e028a		c2 10		rep #$10	                REP #$10        ; set X long
.1e028c		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e028e		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0290		6b		rtl		                RTL
.1e0291						SERVE_STATE2
.1e0291		a9 00		lda #$00	                LDA #IRQ_SOF_ST0
.1e0293		85 f0		sta $f0		                STA INTERRUPT_STATE
.1e0295		6b		rtl		                RTL
>1e0296						.align 16
>1e02a0		2e 2e a4 00			COLOR_CHART     .text 46, 46, 164, 00     ;248
>1e02a4		25 67 c1 00			                .text 37, 103, 193, 00    ;249
>1e02a8		20 9d a4 00			                .text 32, 157, 164, 00    ;250
>1e02ac		2c 9c 37 00			                .text 44, 156 , 55, 00    ;251
>1e02b0		94 8e 2c 00			                .text 148, 142, 44, 00    ;252
>1e02b4		91 4b 2b 00			                .text 145, 75, 43, 00     ;253
>1e02b8		8e 2f 61 00			                .text 142, 47, 97, 00     ;254
>1e02bc		21 50 7f 00			                .text 33, 80, 127, 00     ;255
>1e02c0		00 04 08 0c 10 14 18 1c		COLOR_POINTER   .text 0,4,8,12,16,20,24,28,0
>1e02c8		00
>1e02c9		04 08 0c 10 14 18 1c 00		                .text 4,8,12,16,20,24,28,0,0
>1e02d1		00
>1e02d2		08 0c 10 14 18 1c 00 04		                .text 8,12,16,20,24,28,0,4,0
>1e02da		00
>1e02db		0c 10 14 18 1c 00 04 08		                .text 12,16,20,24,28,0,4,8,0
>1e02e3		00
>1e02e4		10 14 18 1c 00 04 08 0c		                .text 16,20,24,28,0,4,8,12,0
>1e02ec		00
>1e02ed		14 18 1c 00 04 08 0c 10		                .text 20,24,28,0,4,8,12,16,0
>1e02f5		00
>1e02f6		18 1c 00 04 08 0c 10 14		                .text 24,28,0,4,8,12,16,20,0
>1e02fe		00
>1e02ff		1c 00 04 08 0c 10 14 18		                .text 28,0,4,8,12,16,20,24,0
>1e0307		00

;******  Processing file: src\SplashScreenCode/Splashscreen_Bitmap_Setup.asm

=320						C256Moniker_SizeX = 320
=64						C256Moniker_SizeY = 64
=160						C256Moniker_PosX = 160
=48						C256Moniker_PosY = 48
=160						FMXMoniker_SizeX = 160
=80						FMXMoniker_SizeY = 80
=240						FMXMoniker_PosX = 240
=110						FMXMoniker_PosY = 110
=96						UPlusMoniker_SizeX = 96
=64						UPlusMoniker_SizeY = 64
=272						UPlusMoniker_PosX = 272
=110						UPlusMoniker_PosY = 110
=64						UMoniker_SizeX = 64
=64						UMoniker_SizeY = 64
=288						UMoniker_PosX = 288
=110						UMoniker_PosY = 110
=640						Bitmap_X_Size  = 640
=480						Bitmap_Y_Size  = 480
.1e0308						Splashscreen_BitMapSetup
.1e0308		e2 20		sep #$20	                SEP #$20        ; set A short
.1e030a		c2 10		rep #$10	                REP #$10        ; set X long
.1e030c		a9 0f		lda #$0f	        LDA #( Mstr_Ctrl_Graph_Mode_En | Mstr_Ctrl_Bitmap_En | Mstr_Ctrl_Text_Mode_En | Mstr_Ctrl_Text_Overlay );
.1e030e		8f 00 00 af	sta $af0000	        STA @l MASTER_CTRL_REG_L
.1e0312		a9 00		lda #$00	        LDA #$00
.1e0314		8f 01 00 af	sta $af0001	        STA @l MASTER_CTRL_REG_H
.1e0318		a9 00		lda #$00	        LDA #$00
.1e031a		8f 00 01 af	sta $af0100	        STA @l BM0_CONTROL_REG
.1e031e		a9 0f		lda #$0f	        LDA #( BM_Enable | BM_LUT7)
.1e0320		8f 08 01 af	sta $af0108	        STA @l BM1_CONTROL_REG
.1e0324		a9 00		lda #$00	        LDA #$00
.1e0326		8f 09 01 af	sta $af0109	        STA @l BM1_START_ADDY_L
.1e032a		a9 00		lda #$00	        LDA #$00
.1e032c		8f 0a 01 af	sta $af010a	        STA @l BM1_START_ADDY_M
.1e0330		8f 0b 01 af	sta $af010b	        STA @l BM1_START_ADDY_H
.1e0334		a9 01		lda #$01	        LDA #$01
.1e0336		8f 04 00 af	sta $af0004	        STA BORDER_CTRL_REG
.1e033a		a9 08		lda #$08	        LDA #$08
.1e033c		8f 08 00 af	sta $af0008	        STA BORDER_X_SIZE
.1e0340		8f 09 00 af	sta $af0009	        STA BORDER_Y_SIZE
.1e0344		a9 80		lda #$80	        LDA #$80
.1e0346		8f 06 00 af	sta $af0006	        STA BORDER_COLOR_G
.1e034a		a9 00		lda #$00	        LDA #$00
.1e034c		8f 05 00 af	sta $af0005	        STA BORDER_COLOR_B
.1e0350		8f 07 00 af	sta $af0007	        STA BORDER_COLOR_R
.1e0354		a9 a0		lda #$a0	        LDA #$A0
.1e0356		8f 12 00 af	sta $af0012	        STA @l VKY_TXT_CURSOR_CHAR_REG
.1e035a		a9 10		lda #$10	        LDA #$10
.1e035c		8f 0e 00 af	sta $af000e	        STA @l BACKGROUND_COLOR_G
.1e0360		a9 10		lda #$10	        LDA #$10
.1e0362		8f 0f 00 af	sta $af000f	        STA @l BACKGROUND_COLOR_R
.1e0366		8f 0d 00 af	sta $af000d	        STA @l BACKGROUND_COLOR_B
.1e036a		e2 20		sep #$20	                SEP #$20        ; set A short
.1e036c		c2 10		rep #$10	                REP #$10        ; set X long
.1e036e		a2 00 00	ldx #$0000	        LDX #$0000
.1e0371						SS_LUT_BRANCH:
.1e0371		bf 00 0e 1e	lda $1e0e00,x	        LDA @l SS_MONIKER_LUT, X
.1e0375		ea		nop		        NOP
.1e0376		9f 00 3c af	sta $af3c00,x	        STA @l GRPH_LUT7_PTR, X
.1e037a		e8		inx		        INX
.1e037b		e0 00 04	cpx #$0400	        CPX #1024
.1e037e		d0 f1		bne $1e0371	        BNE SS_LUT_BRANCH
.1e0380		a9 00		lda #$00	        LDA #$00
.1e0382		8f 04 3c af	sta $af3c04	        STA @l GRPH_LUT7_PTR + 4
.1e0386		8f 05 3c af	sta $af3c05	        STA @l GRPH_LUT7_PTR + 5
.1e038a		8f 06 3c af	sta $af3c06	        STA @l GRPH_LUT7_PTR + 6
.1e038e		22 3c 05 1e	jsl $1e053c	        JSL SS_VDMA_CLEAR_MEMORY_640_480;
.1e0392		c2 20		rep #$20	                REP #$20        ; set A long
.1e0394		a9 00 12	lda #$1200	        LDA #<>SS_MONIKER      ; Set up the Source
.1e0397		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e039b		a9 00 50	lda #$5000	        LDA #<>( C256Moniker_SizeX * C256Moniker_SizeY )
.1e039e		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e03a2		a9 00 00	lda #$0000	        LDA #$0000
.1e03a5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e03a9		a9 a0 78	lda #$78a0	        LDA #<>( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)    ; Set up the Source
.1e03ac		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e03b0		a9 40 01	lda #$0140	        LDA #C256Moniker_SizeX
.1e03b3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e03b7		a9 40 00	lda #$0040	        LDA #C256Moniker_SizeY
.1e03ba		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e03be		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e03c1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e03c5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03c7		a9 1e		lda #$1e	        LDA #`SS_MONIKER
.1e03c9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e03cd		a9 00		lda #$00	        LDA #`( C256Moniker_SizeX * C256Moniker_SizeY )
.1e03cf		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e03d3		a9 00		lda #$00	        LDA #$00
.1e03d5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e03d9		a9 00		lda #$00	        LDA #`( C256Moniker_PosY * Bitmap_X_Size + C256Moniker_PosX)
.1e03db		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e03df		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e03e3		e2 20		sep #$20	                SEP #$20        ; set A short
.1e03e5		af b0 00 00	lda $0000b0	        LDA @lMODEL
.1e03e9		29 03		and #$03	        AND #$03
.1e03eb		c9 00		cmp #$00	        CMP #$00
.1e03ed		f0 0b		beq $1e03fa	        BEQ DMA_FMX_Moniker
.1e03ef		c9 01		cmp #$01	        CMP #$01
.1e03f1		f0 5b		beq $1e044e	        BEQ DMA_UPlus_Moniker
.1e03f3		c9 02		cmp #$02	        CMP #$02
.1e03f5		d0 03		bne $1e03fa	        BNE BAD_MODEL_NUMBER
.1e03f7		82 a8 00	brl $1e04a2	        BRL DMA_U_Moniker
.1e03fa						 BAD_MODEL_NUMBER:
.1e03fa						DMA_FMX_Moniker:
.1e03fa		c2 20		rep #$20	                REP #$20        ; set A long
.1e03fc		a9 00 62	lda #$6200	        LDA #<>SS_FMX_TXT      ; Set up the Source
.1e03ff		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0403		a9 00 32	lda #$3200	        LDA #<>( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0406		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e040a		a9 00 00	lda #$0000	        LDA #$0000
.1e040d		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0411		a9 f0 13	lda #$13f0	        LDA #<>( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)    ; Set up the Source
.1e0414		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0418		a9 a0 00	lda #$00a0	        LDA #FMXMoniker_SizeX
.1e041b		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e041f		a9 50 00	lda #$0050	        LDA #FMXMoniker_SizeY
.1e0422		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e0426		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e0429		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e042d		e2 20		sep #$20	                SEP #$20        ; set A short
.1e042f		a9 1e		lda #$1e	        LDA #`SS_FMX_TXT
.1e0431		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0435		a9 00		lda #$00	        LDA #`( FMXMoniker_SizeX * FMXMoniker_SizeY )
.1e0437		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e043b		a9 00		lda #$00	        LDA #$00
.1e043d		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0441		a9 01		lda #$01	        LDA #`( FMXMoniker_PosY * Bitmap_X_Size + FMXMoniker_PosX)
.1e0443		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e0447		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e044b		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e044e						DMA_UPlus_Moniker:
.1e044e		c2 20		rep #$20	                REP #$20        ; set A long
.1e0450		a9 00 94	lda #$9400	        LDA #<>SS_UPlus_TXT      ; Set up the Source
.1e0453		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e0457		a9 00 18	lda #$1800	        LDA #<>( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e045a		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e045e		a9 00 00	lda #$0000	        LDA #$0000
.1e0461		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e0465		a9 10 14	lda #$1410	        LDA #<>( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)    ; Set up the Source
.1e0468		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e046c		a9 60 00	lda #$0060	        LDA #UPlusMoniker_SizeX
.1e046f		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e0473		a9 40 00	lda #$0040	        LDA #UPlusMoniker_SizeY
.1e0476		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e047a		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e047d		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e0481		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0483		a9 1e		lda #$1e	        LDA #`SS_UPlus_TXT
.1e0485		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e0489		a9 00		lda #$00	        LDA #`( UPlusMoniker_SizeX * UPlusMoniker_SizeY )
.1e048b		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e048f		a9 00		lda #$00	        LDA #$00
.1e0491		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0495		a9 01		lda #$01	        LDA #`( UPlusMoniker_PosY * Bitmap_X_Size + UPlusMoniker_PosX)
.1e0497		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e049b		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e049f		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04a2						DMA_U_Moniker:
.1e04a2		c2 20		rep #$20	                REP #$20        ; set A long
.1e04a4		a9 00 ac	lda #$ac00	        LDA #<>SS_U_TXT      ; Set up the Source
.1e04a7		8f 22 04 af	sta $af0422	        STA @l SDMA_SRC_ADDY_L
.1e04ab		a9 00 10	lda #$1000	        LDA #<>( UMoniker_SizeX *UMoniker_SizeY )
.1e04ae		8f 28 04 af	sta $af0428	        STA @l SDMA_SIZE_L
.1e04b2		a9 00 00	lda #$0000	        LDA #$0000
.1e04b5		8f 2c 04 af	sta $af042c	        STA @l SDMA_SRC_STRIDE_L  ; Set the Source Stride in SDMA
.1e04b9		a9 20 14	lda #$1420	        LDA #<>( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)    ; Set up the Source
.1e04bc		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e04c0		a9 40 00	lda #$0040	        LDA #UMoniker_SizeX
.1e04c3		8f 08 04 af	sta $af0408	        STA @l VDMA_X_SIZE_L
.1e04c7		a9 40 00	lda #$0040	        LDA #UMoniker_SizeY
.1e04ca		8f 0a 04 af	sta $af040a	        STA @l VDMA_Y_SIZE_L
.1e04ce		a9 80 02	lda #$0280	        LDA #Bitmap_X_Size
.1e04d1		8f 0e 04 af	sta $af040e	        STA @l VDMA_DST_STRIDE_L  ; Set the Destination Stride in the VDMA
.1e04d5		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04d7		a9 1e		lda #$1e	        LDA #`SS_U_TXT
.1e04d9		8f 24 04 af	sta $af0424	        STA @l SDMA_SRC_ADDY_H
.1e04dd		a9 00		lda #$00	        LDA #`( UMoniker_SizeX * UMoniker_SizeY )
.1e04df		8f 2a 04 af	sta $af042a	        STA @l SDMA_SIZE_H
.1e04e3		a9 00		lda #$00	        LDA #$00
.1e04e5		8f 2b 04 af	sta $af042b	        STA @l SDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e04e9		a9 01		lda #$01	        LDA #`( UMoniker_PosY * Bitmap_X_Size + UMoniker_PosX)
.1e04eb		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e04ef		22 f7 04 1e	jsl $1e04f7	        JSL SS_VDMA_SETUP_2_TRANSFER_IMAGE  ;VDMA Transfer from SRAM To VRAM to Transfer the Moniker 320x64
.1e04f3		4c f6 04	jmp $1e04f6	        JMP Done_DMA_Model_Moniker
.1e04f6						Done_DMA_Model_Moniker
.1e04f6		6b		rtl		        RTL
.1e04f7						SS_VDMA_SETUP_2_TRANSFER_IMAGE
.1e04f7		e2 20		sep #$20	                SEP #$20        ; set A short
.1e04f9		a9 11		lda #$11	        LDA #( SDMA_CTRL0_Enable | SDMA_CTRL0_SysRAM_Src )
.1e04fb		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e04ff		a9 13		lda #$13	        LDA #( VDMA_CTRL_Enable |  VDMA_CTRL_SysRAM_Src | VDMA_CTRL_1D_2D )
.1e0501		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0505		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0507		af 00 04 af	lda $af0400	        LDA @l VDMA_CONTROL_REG
.1e050b		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e050d		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0511		af 20 04 af	lda $af0420	        LDA @l SDMA_CTRL_REG0
.1e0515		09 80		ora #$80	        ORA #SDMA_CTRL0_Start_TRF
.1e0517		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e051b		ea		nop		        NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e051c		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e051d		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e051e		ea		nop		        NOP
.1e051f		ea		nop		        NOP
.1e0520		ea		nop		        NOP
.1e0521		ea		nop		        NOP
.1e0522		ea		nop		        NOP
.1e0523		ea		nop		        NOP
.1e0524		ea		nop		        NOP
.1e0525		a9 00		lda #$00	        LDA #$00
.1e0527		8f 20 04 af	sta $af0420	        STA @l SDMA_CTRL_REG0
.1e052b						NOTFINISHED:
.1e052b		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e052f		29 80		and #$80	        AND #$80
.1e0531		c9 80		cmp #$80	        CMP #$80
.1e0533		f0 f6		beq $1e052b	        BEQ NOTFINISHED
.1e0535		a9 00		lda #$00	        LDA #$00
.1e0537		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e053b		6b		rtl		        RTL
.1e053c						SS_VDMA_CLEAR_MEMORY_640_480
.1e053c		e2 20		sep #$20	                SEP #$20        ; set A short
.1e053e		a9 05		lda #$05	        LDA #( VDMA_CTRL_Enable | VDMA_CTRL_TRF_Fill )
.1e0540		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0544		a9 00		lda #$00	        LDA #$00
.1e0546		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e054a		c2 20		rep #$20	                REP #$20        ; set A long
.1e054c		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e054f		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e0553		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0555		a9 00		lda #$00	        LDA #$00
.1e0557		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e055b		c2 20		rep #$20	                REP #$20        ; set A long
.1e055d		a9 00 b0	lda #$b000	        LDA #<>(640*480)
.1e0560		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e0564		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0566		a9 04		lda #$04	        LDA #`(640*480)
.1e0568		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e056c		a9 00		lda #$00	        LDA #$00
.1e056e		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e0572		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e0576		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e0578		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e057c		ea		nop		         NOP ; When the transfer is started the CPU will be put on Hold (RDYn)...
.1e057d		ea		nop		        NOP ; Before it actually gets to stop it will execute a couple more instructions
.1e057e		ea		nop		        NOP ; From that point on, the CPU is halted (keep that in mind) No IRQ will be processed either during that time
.1e057f		ea		nop		        NOP
.1e0580		ea		nop		        NOP
.1e0581		ea		nop		        NOP
.1e0582		ea		nop		        NOP
.1e0583		ea		nop		        NOP
.1e0584						SS_VDMA_CLR_LOOPA:
.1e0584		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e0588		29 80		and #$80	        AND #$80
.1e058a		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e058c		f0 f6		beq $1e0584	        BEQ SS_VDMA_CLR_LOOPA
.1e058e		ea		nop		        NOP
.1e058f		a9 00		lda #$00	        LDA #$00
.1e0591		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e0595		6b		rtl		        RTL
.1e0596						SS_VDMA_TRANSFER_VRAM_2_VRAM
.1e0596		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0598		a9 01		lda #$01	        LDA #( VDMA_CTRL_Enable )
.1e059a		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e059e		a9 00		lda #$00	        LDA #$00
.1e05a0		8f 01 04 af	sta $af0401	        STA @l VDMA_BYTE_2_WRITE
.1e05a4		c2 20		rep #$20	                REP #$20        ; set A long
.1e05a6		a9 00 96	lda #$9600	        LDA #$9600      ; Set up the Source
.1e05a9		8f 02 04 af	sta $af0402	        STA @l VDMA_SRC_ADDY_L
.1e05ad		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05af		a9 00		lda #$00	        LDA #$00
.1e05b1		8f 04 04 af	sta $af0404	        STA @l VDMA_SRC_ADDY_H
.1e05b5		c2 20		rep #$20	                REP #$20        ; set A long
.1e05b7		a9 00 00	lda #$0000	        LDA #$0000      ; Set up the Source
.1e05ba		8f 05 04 af	sta $af0405	        STA @l VDMA_DST_ADDY_L
.1e05be		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05c0		a9 00		lda #$00	        LDA #$00
.1e05c2		8f 07 04 af	sta $af0407	        STA @l VDMA_DST_ADDY_H
.1e05c6		c2 20		rep #$20	                REP #$20        ; set A long
.1e05c8		a9 00 14	lda #$1400	        LDA #<>(320*16)
.1e05cb		8f 08 04 af	sta $af0408	        STA @l VDMA_SIZE_L
.1e05cf		e2 20		sep #$20	                SEP #$20        ; set A short
.1e05d1		a9 00		lda #$00	        LDA #`(320*16)
.1e05d3		8f 0a 04 af	sta $af040a	        STA @l VDMA_SIZE_H
.1e05d7		a9 00		lda #$00	        LDA #$00
.1e05d9		8f 0b 04 af	sta $af040b	        STA @l VDMA_SIZE_H+1 ; Just making sure there is no spurious data in the next register
.1e05dd		af 00 04 af	lda $af0400	        LDA VDMA_CONTROL_REG
.1e05e1		09 80		ora #$80	        ORA #VDMA_CTRL_Start_TRF
.1e05e3		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05e7		ea		nop		        NOP
.1e05e8		ea		nop		        NOP
.1e05e9		ea		nop		        NOP
.1e05ea						SS_VDMA_CLR_LOOPB:
.1e05ea		af 01 04 af	lda $af0401	        LDA @l VDMA_STATUS_REG
.1e05ee		29 80		and #$80	        AND #$80
.1e05f0		c9 80		cmp #$80	        CMP #$80  ; Check if bit $80 is cleared to indicate that the VDMA is done.
.1e05f2		f0 f6		beq $1e05ea	        BEQ SS_VDMA_CLR_LOOPB
.1e05f4		ea		nop		        NOP
.1e05f5		a9 00		lda #$00	        LDA #$00
.1e05f7		8f 00 04 af	sta $af0400	        STA @l VDMA_CONTROL_REG
.1e05fb		6b		rtl		        RTL

;******  Return to file: src\kernel.asm


;******  Processing file: src\SplashScreenCode/Splashscreen_Text_Display.asm

=23						NumberOfEntry = size( TEXT_POSX ) / 2; (1 more then the actual number)
.1e05fc						Set_Text_Color:
.1e05fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e05fe		a9 00 00	lda #$0000	            LDA #00
.1e0601		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e0603		a9 30 00	lda #$0030	            LDA #48
.1e0606		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e0608		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e060b		a0 00 00	ldy #$0000	            LDY #$0000
.1e060e		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0610		a9 40		lda #$40	            LDA #$40
.1e0612						SetColorBranch:
.1e0612		97 a8		sta [$a8],y	            STA [COLOR_DST_PTR_L],Y
.1e0614		c8		iny		            INY
.1e0615		c0 50 00	cpy #$0050	            CPY #80
.1e0618		d0 f8		bne $1e0612	            BNE SetColorBranch
.1e061a		60		rts		            RTS
.1e061b						Model_Update_Info_Field:
.1e061b		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e061d		a9 00 00	lda #$0000	            LDA #$0000
.1e0620		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0622		a5 b0		lda $b0		            LDA MODEL
.1e0624		0a		asl a		            ASL
.1e0625		0a		asl a		            ASL
.1e0626		aa		tax		            TAX
.1e0627		c2 20		rep #$20	                REP #$20        ; set A long
.1e0629		bf af 0c 1e	lda $1e0caf,x	            LDA MODEL_TABLE, X
.1e062d		85 a0		sta $a0		            STA MOD_SELECT_L
.1e062f		bf b1 0c 1e	lda $1e0cb1,x	            LDA MODEL_TABLE + 2, X
.1e0633		85 a2		sta $a2		            STA MOD_SELECT_H
.1e0635		a0 00 00	ldy #$0000	            LDY #$0000
.1e0638		84 a6		sty $a6		            STY LINE_INDEX
.1e063a						Next_Change_Here:
.1e063a		c2 20		rep #$20	                REP #$20        ; set A long
.1e063c		a4 a6		ldy $a6		            LDY LINE_INDEX
.1e063e		bb		tyx		            TYX
.1e063f		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e0641		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e0643		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0647		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0649		c8		iny		            INY
.1e064a		c8		iny		            INY
.1e064b		bb		tyx		            TYX
.1e064c		b7 a0		lda [$a0],y	            LDA [MOD_SELECT_L], Y
.1e064e		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e0650		bf ff 0c 1e	lda $1e0cff,x	            LDA LINE_MOD, X
.1e0654		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0656		c8		iny		            INY
.1e0657		c8		iny		            INY
.1e0658		84 a6		sty $a6		            STY LINE_INDEX
.1e065a		c0 10 00	cpy #$0010	            CPY #16
.1e065d		f0 10		beq $1e066f	            BEQ LetsMoveOn
.1e065f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0661		a0 00 00	ldy #$0000	            LDY #$0000
.1e0664						nextchar:
.1e0664		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e0666		c9 00		cmp #$00	            CMP #$00
.1e0668		f0 d0		beq $1e063a	            BEQ Next_Change_Here
.1e066a		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e066c		c8		iny		            INY
.1e066d		80 f5		bra $1e0664	            BRA nextchar
.1e066f						LetsMoveOn:
.1e066f		af 0b 0d 1e	lda $1e0d0b	            LDA LINE_MOD + 12
.1e0673		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0675		a0 00 00	ldy #$0000	            LDY #$0000
.1e0678		e2 20		sep #$20	                SEP #$20        ; set A short
.1e067a		af 05 e8 af	lda $afe805	            LDA @lREVOFPCB_C
.1e067e		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0680		c8		iny		            INY
.1e0681		af 06 e8 af	lda $afe806	            LDA @lREVOFPCB_4
.1e0685		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0687		c8		iny		            INY
.1e0688		af 07 e8 af	lda $afe807	            LDA @lREVOFPCB_A
.1e068c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e068e		18		clc		            CLC
.1e068f		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR   ; it is in BCD
.1e0693		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0696		8f da 0a 1e	sta $1e0ada	            STA @lLINE8 + 56    ; FAT VICKY in U/U+ Model
.1e069a		8f 13 0b 1e	sta $1e0b13	            STA @lLINE9 + 47    ; GABE in FMX
.1e069e		8f 59 0b 1e	sta $1e0b59	            STA @lLINE10 + 51   ; VICKY II in FMX
.1e06a2		af 0d 07 af	lda $af070d	            LDA @lFPGA_DOR
.1e06a6		29 0f		and #$0f	            AND #$0F
.1e06a8		69 30		adc #$30	            ADC #$30
.1e06aa		8f db 0a 1e	sta $1e0adb	            STA @lLINE8 + 57    ; FAT VICKY in U/U+ Model
.1e06ae		8f 14 0b 1e	sta $1e0b14	            STA @lLINE9 + 48    ; GABE in FMX
.1e06b2		8f 5a 0b 1e	sta $1e0b5a	            STA @lLINE10 + 52   ; VICKY II in FMX
.1e06b6		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR   ; it is in BCD
.1e06ba		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06bd		8f dd 0a 1e	sta $1e0add	            STA @lLINE8 + 59    ; FAT VICKY in U/U+ Model
.1e06c1		8f 16 0b 1e	sta $1e0b16	            STA @lLINE9 + 50    ; GABE in FMX
.1e06c5		8f 5c 0b 1e	sta $1e0b5c	            STA @lLINE10 + 54   ; VICKY II in FMX
.1e06c9		af 0e 07 af	lda $af070e	            LDA @lFPGA_MOR
.1e06cd		29 0f		and #$0f	            AND #$0F
.1e06cf		69 30		adc #$30	            ADC #$30
.1e06d1		8f de 0a 1e	sta $1e0ade	            STA @lLINE8 + 60    ; FAT VICKY in U/U+ Model
.1e06d5		8f 17 0b 1e	sta $1e0b17	            STA @lLINE9 + 51    ; GABE in FMX
.1e06d9		8f 5d 0b 1e	sta $1e0b5d	            STA @lLINE10 + 55   ; VICKY II in FMX
.1e06dd		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR   ; it is in BCD
.1e06e1		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e06e4		8f e0 0a 1e	sta $1e0ae0	            STA @lLINE8 + 62    ; FAT VICKY in U/U+ Model
.1e06e8		8f 19 0b 1e	sta $1e0b19	            STA @lLINE9 + 53    ; GABE in FMX
.1e06ec		8f 5f 0b 1e	sta $1e0b5f	            STA @lLINE10 + 57   ; VICKY II in FMX
.1e06f0		af 0f 07 af	lda $af070f	            LDA @lFPGA_YOR
.1e06f4		29 0f		and #$0f	            AND #$0F
.1e06f6		69 30		adc #$30	            ADC #$30
.1e06f8		8f e1 0a 1e	sta $1e0ae1	            STA @lLINE8 + 63    ; FAT VICKY in U/U+ Model
.1e06fc		8f 1a 0b 1e	sta $1e0b1a	            STA @lLINE9 + 54    ; GABE in FMX
.1e0700		8f 60 0b 1e	sta $1e0b60	            STA @lLINE10 + 58   ; VICKY II in FMX
.1e0704		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0708		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e070b		8f d0 0a 1e	sta $1e0ad0	            STA @lLINE8 + 46    ; U/U+
.1e070f		8f 09 0b 1e	sta $1e0b09	            STA @lLINE9 + 37    ; When FMX, this is the Info for GABE
.1e0713		af 8b e8 af	lda $afe88b	            LDA @l GABE_SUBVERSION_HI
.1e0717		29 0f		and #$0f	            AND #$0F
.1e0719		69 30		adc #$30	            ADC #$30
.1e071b		8f d1 0a 1e	sta $1e0ad1	            STA @lLINE8 + 47
.1e071f		8f 0a 0b 1e	sta $1e0b0a	            STA @lLINE9 + 38    ; When FMX, this is the Info for GABE
.1e0723		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0727		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e072a		8f 4f 0b 1e	sta $1e0b4f	            STA @lLINE10 + 41    ; When FMX, this is the Info for GABE
.1e072e		af 1f 00 af	lda $af001f	            LDA @l VKY_INFO_CHIP_VER_H
.1e0732		29 0f		and #$0f	            AND #$0F
.1e0734		69 30		adc #$30	            ADC #$30
.1e0736		8f 50 0b 1e	sta $1e0b50	            STA @lLINE10 + 42    ; When FMX, this is the Info for GABE
.1e073a		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e073e		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0741		8f d2 0a 1e	sta $1e0ad2	            STA @lLINE8 + 48
.1e0745		8f 0b 0b 1e	sta $1e0b0b	            STA @lLINE9 + 39    ; When FMX, this is the Info for GABE
.1e0749		af 8a e8 af	lda $afe88a	            LDA @l GABE_SUBVERSION_LO
.1e074d		29 0f		and #$0f	            AND #$0F
.1e074f		69 30		adc #$30	            ADC #$30
.1e0751		8f d3 0a 1e	sta $1e0ad3	            STA @lLINE8 + 49
.1e0755		8f 0c 0b 1e	sta $1e0b0c	            STA @lLINE9 + 40    ; When FMX, this is the Info for GABE
.1e0759		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e075d		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0760		8f 51 0b 1e	sta $1e0b51	            STA @lLINE10 + 43    ; When FMX, this is the Info for GABE
.1e0764		af 1e 00 af	lda $af001e	            LDA @l VKY_INFO_CHIP_VER_L
.1e0768		29 0f		and #$0f	            AND #$0F
.1e076a		69 30		adc #$30	            ADC #$30
.1e076c		8f 52 0b 1e	sta $1e0b52	            STA @lLINE10 + 44    ; When FMX, this is the Info for GABE
.1e0770		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0774		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0777		8f c4 0a 1e	sta $1e0ac4	            STA @lLINE8 + 34
.1e077b		8f fd 0a 1e	sta $1e0afd	            STA @lLINE9 + 25    ; When FMX, this is the Info for GABE
.1e077f		af 8d e8 af	lda $afe88d	            LDA @l GABE_VERSION_HI
.1e0783		29 0f		and #$0f	            AND #$0F
.1e0785		69 30		adc #$30	            ADC #$30
.1e0787		8f c5 0a 1e	sta $1e0ac5	            STA @lLINE8 + 35
.1e078b		8f fe 0a 1e	sta $1e0afe	            STA @lLINE9 + 26    ; When FMX, this is the Info for GABE
.1e078f		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e0793		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e0796		8f 44 0b 1e	sta $1e0b44	            STA @lLINE10 + 30    ; When FMX, this is the Info for GABE
.1e079a		af 1d 00 af	lda $af001d	            LDA @l VKY_INFO_CHIP_NUM_H
.1e079e		29 0f		and #$0f	            AND #$0F
.1e07a0		69 30		adc #$30	            ADC #$30
.1e07a2		8f 45 0b 1e	sta $1e0b45	            STA @lLINE10 + 31    ; When FMX, this is the Info for GABE
.1e07a6		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07aa		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07ad		8f c6 0a 1e	sta $1e0ac6	            STA @lLINE8 + 36
.1e07b1		8f ff 0a 1e	sta $1e0aff	            STA @lLINE9 + 27    ; When FMX, this is the Info for GABE
.1e07b5		af 8c e8 af	lda $afe88c	            LDA @l GABE_VERSION_LO
.1e07b9		29 0f		and #$0f	            AND #$0F
.1e07bb		69 30		adc #$30	            ADC #$30
.1e07bd		8f c7 0a 1e	sta $1e0ac7	            STA @lLINE8 + 37
.1e07c1		8f 00 0b 1e	sta $1e0b00	            STA @lLINE9 + 28    ; When FMX, this is the Info for GABE
.1e07c5		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07c9		20 f6 07	jsr $1e07f6	            JSR HighNibblerBCD
.1e07cc		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07d0		af 1c 00 af	lda $af001c	            LDA @l VKY_INFO_CHIP_NUM_L
.1e07d4		29 0f		and #$0f	            AND #$0F
.1e07d6		69 30		adc #$30	            ADC #$30
.1e07d8		8f 46 0b 1e	sta $1e0b46	            STA @lLINE10 + 32    ; When FMX, this is the Info for GABE
.1e07dc		20 4f 08	jsr $1e084f	            JSR GODETECTHIRES ; Dip-Switch and Change Text
.1e07df		20 70 08	jsr $1e0870	            JSR GODETECTHDD   ; Dip-Switch and Change Text
.1e07e2		20 71 08	jsr $1e0871	            JSR GODETECTEXP   ; Go Check if there is a Card Change Text
.1e07e5		a5 b0		lda $b0		            LDA MODEL
.1e07e7		29 03		and #$03	            AND #$03
.1e07e9		c9 00		cmp #$00	            CMP #$00
.1e07eb		f0 12		beq $1e07ff	            BEQ Erase_FATVicky_Line;
.1e07ed		c9 01		cmp #$01	            CMP #$01
.1e07ef		f0 29		beq $1e081a	            BEQ Erase_2Lines;
.1e07f1		c9 02		cmp #$02	            CMP #$02
.1e07f3		f0 25		beq $1e081a	            BEQ Erase_2Lines;
.1e07f5		60		rts		            RTS
.1e07f6						HighNibblerBCD:
.1e07f6		29 f0		and #$f0	            AND #$F0
.1e07f8		4a		lsr a		            LSR A
.1e07f9		4a		lsr a		            LSR A
.1e07fa		4a		lsr a		            LSR A
.1e07fb		4a		lsr a		            LSR A
.1e07fc		69 30		adc #$30	            ADC #$30
.1e07fe		60		rts		            RTS
.1e07ff						Erase_FATVicky_Line:
.1e07ff		c2 20		rep #$20	                REP #$20        ; set A long
.1e0801		a9 a2 0a	lda #$0aa2	            LDA #<>LINE8
.1e0804		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0806		a9 1e 00	lda #$001e	            LDA #`LINE8
.1e0809		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e080b		e2 20		sep #$20	                SEP #$20        ; set A short
.1e080d		a0 00 00	ldy #$0000	            LDY #$0000
.1e0810		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0812		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0814		c8		iny		            INY
.1e0815		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0817		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0819		60		rts		            RTS
.1e081a						Erase_2Lines
.1e081a		c2 20		rep #$20	                REP #$20        ; set A long
.1e081c		a9 e4 0a	lda #$0ae4	            LDA #<>LINE9
.1e081f		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0821		a9 1e 00	lda #$001e	            LDA #`LINE9
.1e0824		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0826		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0828		a0 00 00	ldy #$0000	            LDY #$0000
.1e082b		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e082d		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e082f		c8		iny		            INY
.1e0830		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e0832		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0834		c2 20		rep #$20	                REP #$20        ; set A long
.1e0836		a9 26 0b	lda #$0b26	            LDA #<>LINE10
.1e0839		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e083b		a9 1e 00	lda #$001e	            LDA #`LINE10
.1e083e		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0840		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0842		a0 00 00	ldy #$0000	            LDY #$0000
.1e0845		a9 20		lda #$20	            LDA #$20    ; Put One Space
.1e0847		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e0849		c8		iny		            INY
.1e084a		a9 00		lda #$00	            LDA #$00    ; Terminate the Line
.1e084c		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e084e		60		rts		            RTS
.1e084f						GODETECTHIRES
.1e084f		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0851		af 02 00 af	lda $af0002	            LDA @l GAMMA_CTRL_REG   ; Go Read the Hi-Res DIP Switch Value
.1e0855		29 10		and #$10	            AND #HIRES_DP_SW_VAL    ; Isolate the Hi-Res Bit ($10) when 1 = 640x480, 0 = 800x600
.1e0857		c9 10		cmp #$10	            CMP #HIRES_DP_SW_VAL    ; When the Switch is off, the Returned value is 1 (The Pullup is there)
.1e0859		f0 14		beq $1e086f	            BEQ WeAreDone
.1e085b		c2 10		rep #$10	                REP #$10        ; set X long
.1e085d		a2 00 00	ldx #$0000	            LDX #$0000
.1e0860						ChangeNextChar
.1e0860		bf 5f 0d 1e	lda $1e0d5f,x	            LDA @l ON_TEXT, X
.1e0864		c9 00		cmp #$00	            CMP #$00
.1e0866		f0 07		beq $1e086f	            BEQ WeAreDone
.1e0868		9f 53 0c 1e	sta $1e0c53,x	            STA @l LINE17 +13, X
.1e086c		e8		inx		            INX
.1e086d		d0 f1		bne $1e0860	            BNE ChangeNextChar
.1e086f						WeAreDone
.1e086f						NoExpansionCardPresent
.1e086f		60		rts		            RTS
.1e0870						GODETECTHDD
.1e0870		60		rts		            RTS
.1e0871						GODETECTEXP
.1e0871		e2 20		sep #$20	                SEP #$20        ; set A short
.1e0873		af 87 e8 af	lda $afe887	            LDA @L GABE_SYS_STAT      ; Let's check the Presence of an Expansion Card here
.1e0877		29 10		and #$10	            AND #GABE_SYS_STAT_EXP    ; When there is a Card the Value is 1
.1e0879		c9 10		cmp #$10	            CMP #GABE_SYS_STAT_EXP
.1e087b		d0 25		bne $1e08a2	            BNE NoExpansionCardPresent
.1e087d		c2 10		rep #$10	                REP #$10        ; set X long
.1e087f		a2 00 00	ldx #$0000	            LDX #$0000
.1e0882						ChangeNextChar
.1e0882		bf 63 0d 1e	lda $1e0d63,x	            LDA @l YES_TEXT, X
.1e0886		c9 00		cmp #$00	            CMP #$00
.1e0888		f0 07		beq $1e0891	            BEQ WeAreDone
.1e088a		9f 85 0c 1e	sta $1e0c85,x	            STA @l LINE19 +26, X
.1e088e		e8		inx		            INX
.1e088f		d0 f1		bne $1e0882	            BNE ChangeNextChar
.1e0891						WeAreDone
.1e0891		a2 00 00	ldx #$0000	            LDX #$0000
.1e0894						AddCardName
.1e0894		bf 00 00 ae	lda $ae0000,x	            LDA @l EVID_ID_NAME_ASCII, X
.1e0898		9f 89 0c 1e	sta $1e0c89,x	            STA @l LINE20, X
.1e089c		e8		inx		            INX
.1e089d		e0 10 00	cpx #$0010	            CPX #$10
.1e08a0		d0 f2		bne $1e0894	            BNE AddCardName
.1e08a2						NoExpansionCardPresent
.1e08a2		60		rts		            RTS
.1e08a3						Line_Setup_Before_Display
.1e08a3		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08a5		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08a7		c9 17 00	cmp #$0017	            CMP #NumberOfEntry
.1e08aa		f0 33		beq $1e08df	            BEQ DONE
.1e08ac		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08ae		0a		asl a		            ASL A
.1e08af		0a		asl a		            ASL A
.1e08b0		aa		tax		            TAX
.1e08b1		bf 24 09 1e	lda $1e0924,x	            LDA TEXT_TABLE, X
.1e08b5		85 98		sta $98		            STA TEXT_SRC_PTR_L
.1e08b7		bf 26 09 1e	lda $1e0926,x	            LDA TEXT_TABLE + 2, X
.1e08bb		85 9a		sta $9a		            STA TEXT_SRC_PTR_H
.1e08bd		a5 a6		lda $a6		            LDA LINE_INDEX
.1e08bf		0a		asl a		            ASL A
.1e08c0		aa		tax		            TAX
.1e08c1		bf 80 09 1e	lda $1e0980,x	            LDA TEXT_POSX, X
.1e08c5		85 a2		sta $a2		            STA TEXT_CURSOR_X
.1e08c7		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08cb		bf ae 09 1e	lda $1e09ae,x	            LDA TEXT_POSY, X
.1e08cf		85 a4		sta $a4		            STA TEXT_CURSOR_Y
.1e08d1		8f 16 00 af	sta $af0016	            STA @l VKY_TXT_CURSOR_Y_REG_L
.1e08d5		20 fc 08	jsr $1e08fc	            JSR Line_Display_Compute_Pointer
.1e08d8		a9 00 00	lda #$0000	            LDA #$0000
.1e08db		85 a0		sta $a0		            STA TEXT_INDEX
.1e08dd		e6 a6		inc $a6		            INC LINE_INDEX
.1e08df						DONE:
.1e08df		60		rts		            RTS
.1e08e0						Line_Display_1_Character
.1e08e0		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08e2		e6 a2		inc $a2		            INC TEXT_CURSOR_X       ; Always put the Cursor In Front of the "To be displayed Char"
.1e08e4		a5 a2		lda $a2		            LDA TEXT_CURSOR_X
.1e08e6		8f 14 00 af	sta $af0014	            STA @l VKY_TXT_CURSOR_X_REG_L
.1e08ea		e2 20		sep #$20	                SEP #$20        ; set A short
.1e08ec		38		sec		            SEC
.1e08ed		a4 a0		ldy $a0		            LDY TEXT_INDEX
.1e08ef		b7 98		lda [$98],y	            LDA [TEXT_SRC_PTR_L], Y
.1e08f1		c9 00		cmp #$00	            CMP #$00
.1e08f3		f0 06		beq $1e08fb	            BEQ WE_ARE_DONE;
.1e08f5		18		clc		            CLC
.1e08f6		97 9c		sta [$9c],y	            STA [TEXT_DST_PTR_L], Y
.1e08f8		c8		iny		            INY
.1e08f9		84 a0		sty $a0		            STY TEXT_INDEX
.1e08fb						WE_ARE_DONE:
.1e08fb		60		rts		            RTS
.1e08fc						Line_Display_Compute_Pointer
.1e08fc		c2 30		rep #$30	                REP #$30        ; set A&X long
.1e08fe		a5 a4		lda $a4		            LDA TEXT_CURSOR_Y
.1e0900		8f 00 01 00	sta $000100	            STA @lUNSIGNED_MULT_A_LO
.1e0904		a9 50 00	lda #$0050	            LDA #80
.1e0907		8f 02 01 00	sta $000102	            STA @lUNSIGNED_MULT_B_LO
.1e090b		18		clc		            CLC
.1e090c		af 04 01 00	lda $000104	            LDA @lUNSIGNED_MULT_AL_LO
.1e0910		65 a2		adc $a2		            ADC TEXT_CURSOR_X
.1e0912		69 00 a0	adc #$a000	            ADC #$A000
.1e0915		85 9c		sta $9c		            STA TEXT_DST_PTR_L
.1e0917		69 00 20	adc #$2000	            ADC #$2000
.1e091a		85 a8		sta $a8		            STA COLOR_DST_PTR_L
.1e091c		a9 af 00	lda #$00af	            LDA #$00AF
.1e091f		85 9e		sta $9e		            STA TEXT_DST_PTR_H
.1e0921		85 aa		sta $aa		            STA COLOR_DST_PTR_H
.1e0923		60		rts		            RTS
>1e0924		dc 09 1e 00 fd 09 1e 00		TEXT_TABLE  .dword LINE0, LINE1, LINE2, LINE3, LINE4, LINE5, LINE6, LINE7
>1e092c		13 0a 1e 00 21 0a 1e 00 39 0a 1e 00 5c 0a 1e 00
>1e093c		80 0a 1e 00 95 0a 1e 00
>1e0944		a2 0a 1e 00 e4 0a 1e 00		            .dword LINE8, LINE9, LINE10, LINE11, LINE12, LINE13, LINE14, LINE15
>1e094c		26 0b 1e 00 68 0b 1e 00 72 0b 1e 00 9b 0b 1e 00
>1e095c		d2 0b 1e 00 f5 0b 1e 00
>1e0964		07 0c 1e 00 46 0c 1e 00		            .dword LINE16, LINE17, LINE18, LINE19, LINE20, LINE21, LINE22
>1e096c		58 0c 1e 00 6b 0c 1e 00 89 0c 1e 00 9a 0c 1e 00
>1e097c		ad 0c 1e 00
>1e0980		06 00 06 00 06 00 06 00		TEXT_POSX  .word  leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, leftAlign, 31, leftAlign, 5, 25, 45, 45, 30, 72                     ;
>1e0988		06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00
>1e0998		06 00 06 00 06 00 1f 00 06 00 05 00 19 00 2d 00
>1e09a8		2d 00 1e 00 48 00
>1e09ae		19 00 1a 00 1b 00 1c 00		TEXT_POSY  .word  25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 46, 48, 52, 52, 52, 53, 57, 57
>1e09b6		1d 00 1e 00 1f 00 20 00 21 00 22 00 23 00 25 00
>1e09c6		26 00 27 00 28 00 2e 00 30 00 34 00 34 00 34 00
>1e09d6		35 00 39 00 39 00
=6						leftAlign = 6
>1e09dc		43 4f 4d 50 55 54 45 52		LINE0  .text "COMPUTER MODEL:                 ", $00 ; Offset $10
>1e09e4		20 4d 4f 44 45 4c 3a 20 20 20 20 20 20 20 20 20
>1e09f4		20 20 20 20 20 20 20 20 00
>1e09fd		20 20 20 20 20 20 20 20		LINE1  .text "                     ", $00
>1e0a05		20 20 20 20 20 20 20 20 20 20 20 20 20 00
>1e0a13		53 59 53 54 45 4d 20 49		LINE2  .text "SYSTEM INFO: ", $00
>1e0a1b		4e 46 4f 3a 20 00
>1e0a21		43 50 55 3a 20 57 44 43		LINE3  .text "CPU: WDC65C816 @ 14MHZ ", $00
>1e0a29		36 35 43 38 31 36 20 40 20 31 34 4d 48 5a 20 00
>1e0a39		43 4f 44 45 20 4d 45 4d		LINE4  .text "CODE MEMORY SIZE:                 ", $00 ; Offset 17
>1e0a41		4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20 20
>1e0a51		20 20 20 20 20 20 20 20 20 20 00
>1e0a5c		56 49 44 45 4f 20 4d 45		LINE5  .text "VIDEO MEMORY SIZE:                 ", $00 ; Offset
>1e0a64		4d 4f 52 59 20 53 49 5a 45 3a 20 20 20 20 20 20
>1e0a74		20 20 20 20 20 20 20 20 20 20 20 00
>1e0a80		50 43 42 20 52 45 56 49		LINE6  .text "PCB REVISION:       ", $00
>1e0a88		53 49 4f 4e 3a 20 20 20 20 20 20 20 00
>1e0a95		43 48 49 50 53 45 54 28		LINE7  .text "CHIPSET(S): ", $00
>1e0a9d		53 29 3a 20 00
>1e0aa2		50 4e 3a 20 43 46 50 39		LINE8  .text "PN: CFP95169 - FAT VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00 ", $00
>1e0aaa		35 31 36 39 20 2d 20 46 41 54 20 56 49 43 4b 59
>1e0aba		20 49 49 20 2d 20 52 45 56 3a 30 30 30 30 20 53
>1e0aca		55 42 52 45 56 3a 30 30 30 30 20 44 41 54 45 3a
>1e0ada		30 30 2f 30 30 2f 30 30 20 00
>1e0ae4		50 4e 3a 20 43 46 50 39		LINE9  .text "PN: CFP9533 - GABE - REV:0000 SUBREV:0000 DATE:00/00/00          ", $00
>1e0aec		35 33 33 20 2d 20 47 41 42 45 20 2d 20 52 45 56
>1e0afc		3a 30 30 30 30 20 53 55 42 52 45 56 3a 30 30 30
>1e0b0c		30 20 44 41 54 45 3a 30 30 2f 30 30 2f 30 30 20
>1e0b1c		20 20 20 20 20 20 20 20 20 00
>1e0b26		50 4e 3a 20 43 46 50 39		LINE10 .text "PN: CFP9551 - VICKY II - REV:0000 SUBREV:0000 DATE:00/00/00      ", $00
>1e0b2e		35 35 31 20 2d 20 56 49 43 4b 59 20 49 49 20 2d
>1e0b3e		20 52 45 56 3a 30 30 30 30 20 53 55 42 52 45 56
>1e0b4e		3a 30 30 30 30 20 44 41 54 45 3a 30 30 2f 30 30
>1e0b5e		2f 30 30 20 20 20 20 20 20 00
>1e0b68		43 52 45 44 49 54 53 3a		LINE11 .text "CREDITS: ", $00
>1e0b70		20 00
>1e0b72		43 4f 4e 43 45 50 54 20		LINE12 .text "CONCEPT & SYSTEM DESIGN: STEFANY ALLAIRE", $00
>1e0b7a		26 20 53 59 53 54 45 4d 20 44 45 53 49 47 4e 3a
>1e0b8a		20 53 54 45 46 41 4e 59 20 41 4c 4c 41 49 52 45
>1e0b9a		00
>1e0b9b		4b 45 52 4e 45 4c 20 44		LINE13 .text "KERNEL DESIGN / BASIC816 CREATOR: PETER J. WEINGARTNER", $00
>1e0ba3		45 53 49 47 4e 20 2f 20 42 41 53 49 43 38 31 36
>1e0bb3		20 43 52 45 41 54 4f 52 3a 20 50 45 54 45 52 20
>1e0bc3		4a 2e 20 57 45 49 4e 47 41 52 54 4e 45 52 00
>1e0bd2		46 4f 45 4e 49 58 20 49		LINE14 .text "FOENIX IDE DESIGN: DANIEL TREMBLAY", $00
>1e0bda		44 45 20 44 45 53 49 47 4e 3a 20 44 41 4e 49 45
>1e0bea		4c 20 54 52 45 4d 42 4c 41 59 00
>1e0bf5		2d 2d 2d 2d 42 4f 4f 54		LINE15 .text "----BOOT MENU----", $00
>1e0bfd		20 4d 45 4e 55 2d 2d 2d 2d 00
>1e0c07		20 50 52 45 53 53 20 46		LINE16 .text " PRESS F2 = SDCARD, F3 = HDD, RETURN = BASIC, SPACE = DEFAULT ", $00
>1e0c0f		32 20 3d 20 53 44 43 41 52 44 2c 20 46 33 20 3d
>1e0c1f		20 48 44 44 2c 20 52 45 54 55 52 4e 20 3d 20 42
>1e0c2f		41 53 49 43 2c 20 53 50 41 43 45 20 3d 20 44 45
>1e0c3f		46 41 55 4c 54 20 00
>1e0c46		48 49 2d 52 45 53 20 4d		LINE17 .text "HI-RES MODE: OFF ", $00
>1e0c4e		4f 44 45 3a 20 4f 46 46 20 00
>1e0c58		48 44 44 20 49 4e 53 54		LINE18 .text "HDD INSTALLED: -- ", $00
>1e0c60		41 4c 4c 45 44 3a 20 2d 2d 20 00
>1e0c6b		45 58 50 41 4e 53 49 4f		LINE19 .text "EXPANSION CARD INSTALLED: NO ", $00
>1e0c73		4e 20 43 41 52 44 20 49 4e 53 54 41 4c 4c 45 44
>1e0c83		3a 20 4e 4f 20 00
>1e0c89		20 20 20 20 00 00 00 00		LINE20 .text $20, $20, $20, $20, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
>1e0c91		00 00 00 00 00 00 00 00 00
>1e0c9a		57 57 57 2e 43 32 35 36		LINE21 .text "WWW.C256FOENIX.COM", $00
>1e0ca2		46 4f 45 4e 49 58 2e 43 4f 4d 00
>1e0cad		20 00				LINE22 .text " ", $00
>1e0caf		bf 0c 1e 00 cf 0c 1e 00		MODEL_TABLE .dword MODEL_00, MODEL_01, MODEL_02, MODEL_03
>1e0cb7		df 0c 1e 00 ef 0c 1e 00
>1e0cbf		0f 0d 1e 00 4f 0d 1e 00		MODEL_00   .dword FIELD_MOD0, FIELD_MEM1, FIELD_MEM1, $00000000 ; FMX
>1e0cc7		4f 0d 1e 00 00 00 00 00
>1e0ccf		1f 0d 1e 00 4f 0d 1e 00		MODEL_01   .dword FIELD_MOD1, FIELD_MEM1, FIELD_MEM0, $00000000 ; U+
>1e0cd7		3f 0d 1e 00 00 00 00 00
>1e0cdf		2f 0d 1e 00 3f 0d 1e 00		MODEL_02   .dword FIELD_MOD2, FIELD_MEM0, FIELD_MEM0, $00000000 ; U
>1e0ce7		3f 0d 1e 00 00 00 00 00
>1e0cef		00 00 00 00 00 00 00 00		MODEL_03   .dword  $00000000,  $00000000, $00000000, $00000000  ; TBD
>1e0cf7		00 00 00 00 00 00 00 00
>1e0cff		ec 09 1e 00 4b 0a 1e 00		LINE_MOD   .dword LINE0 + $10, LINE4 + $12, LINE5 + $13, LINE6 + $0E
>1e0d07		6f 0a 1e 00 8e 0a 1e 00
>1e0d0f		43 32 35 36 20 46 4f 45		FIELD_MOD0 .text "C256 FOENIX FMX", $00 ; 15 Characters
>1e0d17		4e 49 58 20 46 4d 58 00
>1e0d1f		43 32 35 36 20 46 4f 45		FIELD_MOD1 .text "C256 FOENIX U+ ", $00
>1e0d27		4e 49 58 20 55 2b 20 00
>1e0d2f		43 32 35 36 20 46 4f 45		FIELD_MOD2 .text "C256 FOENIX U  ", $00
>1e0d37		4e 49 58 20 55 20 20 00
>1e0d3f		32 2c 30 39 37 2c 31 35		FIELD_MEM0 .text "2,097,152 BYTES", $00
>1e0d47		32 20 42 59 54 45 53 00
>1e0d4f		34 2c 31 39 34 2c 33 30		FIELD_MEM1 .text "4,194,304 BYTES", $00
>1e0d57		34 20 42 59 54 45 53 00
>1e0d5f		4f 4e 20 00			ON_TEXT    .text "ON ", $00
>1e0d63		59 45 53 00			YES_TEXT   .text "YES", $00

;******  Return to file: src\kernel.asm

>1e0d67						.align 256
.1e0e00						SS_MONIKER_LUT
>1e0e00		00 00 00 00 aa aa 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data.pal"
>1e0e08		00 aa 00 00 aa aa 00 00 00 00 aa 00 aa 00 aa 00
>1e0e18		00 55 aa 00 aa aa aa 00 55 55 55 00 ff 55 55 00
>1e0e28		55 ff 55 00 ff ff 55 00 55 55 ff 00 ff 55 ff 00
>1e0e38		55 ff ff 00 ff ff ff 00 00 00 00 00 10 10 10 00
>1e0e48		20 20 20 00 35 35 35 00 45 45 45 00 55 55 55 00
>1e0e58		65 65 65 00 75 75 75 00 8a 8a 8a 00 9a 9a 9a 00
>1e0e68		aa aa aa 00 ba ba ba 00 ca ca ca 00 df df df 00
>1e0e78		ef ef ef 00 ff ff ff 00 ff 00 00 00 ff 00 41 00
>1e0e88		ff 00 82 00 ff 00 be 00 ff 00 ff 00 be 00 ff 00
>1e0e98		82 00 ff 00 41 00 ff 00 00 00 ff 00 00 41 ff 00
>1e0ea8		00 82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00
>1e0eb8		00 ff 82 00 00 ff 41 00 00 ff 00 00 41 ff 00 00
>1e0ec8		82 ff 00 00 be ff 00 00 ff ff 00 00 ff be 00 00
>1e0ed8		ff 82 00 00 ff 41 00 00 ff 82 82 00 ff 82 9e 00
>1e0ee8		ff 82 be 00 ff 82 df 00 ff 82 ff 00 df 82 ff 00
>1e0ef8		be 82 ff 00 9e 82 ff 00 82 82 ff 00 82 9e ff 00
>1e0f08		82 be ff 00 82 df ff 00 82 ff ff 00 82 ff df 00
>1e0f18		82 ff be 00 82 ff 9e 00 82 ff 82 00 9e ff 82 00
>1e0f28		be ff 82 00 df ff 82 00 ff ff 82 00 ff df 82 00
>1e0f38		ff be 82 00 ff 9e 82 00 ff ba ba 00 ff ba ca 00
>1e0f48		ff ba df 00 ff ba ef 00 ff ba ff 00 ef ba ff 00
>1e0f58		df ba ff 00 ca ba ff 00 ba ba ff 00 ba ca ff 00
>1e0f68		ba df ff 00 ba ef ff 00 ba ff ff 00 ba ff ef 00
>1e0f78		ba ff df 00 ba ff ca 00 ba ff ba 00 ca ff ba 00
>1e0f88		df ff ba 00 ef ff ba 00 ff ff ba 00 ff ef ba 00
>1e0f98		ff df ba 00 ff ca ba 00 71 00 00 00 71 00 1c 00
>1e0fa8		71 00 39 00 71 00 55 00 71 00 71 00 55 00 71 00
>1e0fb8		39 00 71 00 1c 00 71 00 00 00 71 00 00 1c 71 00
>1e0fc8		00 39 71 00 00 55 71 00 00 71 71 00 00 71 55 00
>1e0fd8		00 71 39 00 00 71 1c 00 00 71 00 00 1c 71 00 00
>1e0fe8		39 71 00 00 55 71 00 00 71 71 00 00 71 55 00 00
>1e0ff8		71 39 00 00 71 1c 00 00 71 39 39 00 71 39 45 00
>1e1008		71 39 55 00 71 39 61 00 71 39 71 00 61 39 71 00
>1e1018		55 39 71 00 45 39 71 00 39 39 71 00 39 45 71 00
>1e1028		39 55 71 00 39 61 71 00 39 71 71 00 39 71 61 00
>1e1038		39 71 55 00 39 71 45 00 39 71 39 00 45 71 39 00
>1e1048		55 71 39 00 61 71 39 00 71 71 39 00 71 61 39 00
>1e1058		71 55 39 00 71 45 39 00 71 51 51 00 71 51 59 00
>1e1068		71 51 61 00 71 51 69 00 71 51 71 00 69 51 71 00
>1e1078		61 51 71 00 59 51 71 00 51 51 71 00 51 59 71 00
>1e1088		51 61 71 00 51 69 71 00 51 71 71 00 51 71 69 00
>1e1098		51 71 61 00 51 71 59 00 51 71 51 00 59 71 51 00
>1e10a8		61 71 51 00 69 71 51 00 71 71 51 00 71 69 51 00
>1e10b8		71 61 51 00 71 59 51 00 41 00 00 00 41 00 10 00
>1e10c8		41 00 20 00 41 00 31 00 41 00 41 00 31 00 41 00
>1e10d8		20 00 41 00 10 00 41 00 00 00 41 00 00 10 41 00
>1e10e8		00 20 41 00 00 31 41 00 00 41 41 00 00 41 31 00
>1e10f8		00 41 20 00 00 41 10 00 00 41 00 00 10 41 00 00
>1e1108		20 41 00 00 31 41 00 00 41 41 00 00 41 31 00 00
>1e1118		41 20 00 00 41 10 00 00 41 20 20 00 41 20 28 00
>1e1128		41 20 31 00 41 20 39 00 41 20 41 00 39 20 41 00
>1e1138		31 20 41 00 28 20 41 00 20 20 41 00 20 28 41 00
>1e1148		20 31 41 00 20 39 41 00 20 41 41 00 20 41 39 00
>1e1158		20 41 31 00 20 41 28 00 20 41 20 00 28 41 20 00
>1e1168		31 41 20 00 39 41 20 00 41 41 20 00 41 39 20 00
>1e1178		41 31 20 00 41 28 20 00 41 2d 2d 00 41 2d 31 00
>1e1188		41 2d 35 00 41 2d 3d 00 41 2d 41 00 3d 2d 41 00
>1e1198		35 2d 41 00 31 2d 41 00 2d 2d 41 00 2d 31 41 00
>1e11a8		2d 35 41 00 2d 3d 41 00 2d 41 41 00 2d 41 3d 00
>1e11b8		2d 41 35 00 2d 41 31 00 2d 41 2d 00 31 41 2d 00
>1e11c8		35 41 2d 00 3d 41 2d 00 41 41 2d 00 41 3d 2d 00
>1e11d8		41 35 2d 00 41 31 2d 00 18 18 e7 00 00 ff ff 00
>1e11e8		00 ff 00 00 ff 00 00 00 ff 00 ff 00 ff ff 00 00
>1e11f8		ff ff ff 00 e5 80 80 00
.1e1200						SS_MONIKER
>1e1200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_C256Foenix.data"
>1e1208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 95 times (1520 bytes)...
>1e1808		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e1818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e1828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e1958		ff 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e1968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1a98		ff ff ff ff 01 01 00 00 00 00 00 00 00 00 00 00
>1e1aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff
>1e1bd8		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1be8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1d08		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1d18		ff ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00
>1e1d28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1e48		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e1e58		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e1f88		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e1f98		ff ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00
>1e1fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1e20c8		00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff
>1e20d8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e20e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2128		00 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00
>1e2138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2208		00 01 00 00 00 00 00 00 00 00 00 00 01 01 ff ff
>1e2218		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e2228		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2268		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e2278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 12 times (192 bytes)...
>1e2348		01 01 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e2358		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2368		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e23a8		00 00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e23b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e2478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2488		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2498		00 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e24a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e24e8		00 01 fe 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e24f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 11 times (176 bytes)...
>1e25b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e25c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e25d8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e25e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e2628		01 fe fe 01 00 01 00 00 00 00 00 00 00 00 00 00
>1e2638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2658		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2668		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 7 times (112 bytes)...
>1e26f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e2708		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2718		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2738		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2768		fe fe fe fe 01 01 00 00 00 00 00 00 00 00 00 00
>1e2778		00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e2788		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2798		00 00 00 00 00 00 00 00 00 01 01 01 01 01 01 01
>1e27a8		01 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e27b8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e27c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e27d8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 00 00
>1e27e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e2838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e2848		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2868		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e28a8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 01 01
>1e28b8		01 fe fe fe fe fe fe fe 01 01 00 00 00 00 00 00
>1e28c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e28d8		00 00 01 01 01 01 01 01 01 fe 01 01 01 00 00 00
>1e28e8		00 00 00 00 00 00 00 00 00 00 00 01 fe 01 fe 01
>1e28f8		01 01 fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e2908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2918		00 00 00 00 00 01 01 00 00 00 00 00 00 00 00 01
>1e2928		01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e2938		00 00 00 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e2948		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2958		00 00 00 00 01 01 01 01 01 01 01 01 01 01 00 00
>1e2968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2978		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe 01
>1e2988		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29a8		00 00 00 00 00 00 00 00 00 00 00 01 01 fe 01 00
>1e29b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e29d8		00 00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd
>1e29e8		fd fd fd fd 01 00 00 00 00 00 00 00 01 01 fd fd
>1e29f8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1e2a08		00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 01
>1e2a18		01 01 fd fd fd fd fd fd fd 01 00 00 00 00 00 00
>1e2a28		00 00 00 00 00 00 00 00 00 01 01 fd fd fd 01 fd
>1e2a38		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e2a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2a58		00 00 01 01 01 fd fd 01 01 01 01 01 01 01 01 fd
>1e2a68		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 01
>1e2a78		01 01 01 fd fd fd fd fd fd 01 01 01 01 00 00 00
>1e2a88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2a98		01 01 01 01 fd fd fd fd fd fd fd fd fd fd 01 01
>1e2aa8		01 01 01 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e2ab8		00 00 00 00 00 00 00 00 00 00 00 00 01 fd fd 01
>1e2ac8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01
>1e2ad8		01 00 00 00 00 00 01 01 01 00 00 00 00 00 00 00
>1e2ae8		00 00 00 00 00 00 00 00 00 00 01 fd fd 01 00 00
>1e2af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b18		00 00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2b28		fd fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd
>1e2b38		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e2b48		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2b58		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e2b68		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2b78		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2b88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 01
>1e2b98		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ba8		fd fd fd fd fd fd fd 01 00 00 00 01 01 01 01 fd
>1e2bb8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 01 00
>1e2bc8		00 00 00 00 00 00 00 01 01 01 01 01 01 fd fd fd
>1e2bd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2be8		fd fd fd fd 01 01 00 00 00 00 00 01 fd fd fd fd
>1e2bf8		01 00 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2c08		01 01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c18		01 00 00 00 01 01 fd fd 01 00 00 00 00 00 00 00
>1e2c28		00 00 00 00 00 00 00 00 01 01 fd fd 01 00 01 01
>1e2c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2c58		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2c68		fd fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd
>1e2c78		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2c88		00 00 00 00 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2c98		fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00
>1e2ca8		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e2cb8		fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2cc8		00 00 00 00 00 00 01 01 01 01 01 01 01 fd fd fd
>1e2cd8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ce8		fd fd fd fd fd fd 01 00 01 01 01 fd fd fd fd fd
>1e2cf8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e2d08		00 00 01 01 01 01 01 fd fd fd fd fd fd fd fd fd
>1e2d18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2d28		fd fd 01 01 01 00 00 00 00 01 01 fd fd fd fd fd
>1e2d38		fd 01 00 00 00 00 00 00 00 00 00 01 fd fd fd fd
>1e2d48		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2d58		01 00 00 01 fd fd fd fd fd 01 01 00 00 00 00 00
>1e2d68		00 00 00 00 00 00 01 01 fd fd fd fd fd 01 01 00
>1e2d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e2d98		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2da8		fd fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2db8		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e2dc8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e2dd8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e2de8		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e2df8		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e2e08		01 01 01 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e2e18		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e28		fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd fd
>1e2e38		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e48		01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2e68		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e2e78		fd fd 01 00 00 00 00 00 00 00 01 fd fd fd fd fd
>1e2e88		01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2e98		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2ea8		00 00 00 00 00 01 fd fd fd fd fd fd fd 01 00 00
>1e2eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1e2ed8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2ee8		fd 01 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e2ef8		fd fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e2f08		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f18		fd fd fd fd fd fd fd 01 00 01 01 00 00 00 00 00
>1e2f28		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f38		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e2f48		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2f58		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
;		...repeated 2 times (32 bytes)...
>1e2f88		fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd fd
>1e2f98		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e2fa8		fd fd 01 01 01 01 01 01 fd fd fd fd fd fd fd fd
>1e2fb8		fd fd 01 00 00 00 00 00 00 01 01 fd fd fd fd fd
>1e2fc8		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e2fd8		01 00 00 01 fd fd fd fd fd fd fd 01 00 00 00 00
>1e2fe8		00 00 00 00 01 fd fd fd fd fd fd fd fd 01 00 00
>1e2ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3008		00 00 00 00 00 00 00 00 00 00 00 00 01 01 fd fd
>1e3018		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3028		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e3038		fd fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e3048		00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e3058		fd fd fd fd fd 01 01 01 01 00 00 00 00 00 00 00
>1e3068		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd 01
>1e3078		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3088		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e3098		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e30a8		fd fd fd fd fd fd 01 01 01 01 01 fd fd fd fd fd
>1e30b8		fd fd fd fd fd fd 01 01 fd fd fd fd fd fd fd fd
>1e30c8		fd 01 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e30d8		fd fd fd fd fd fd fd fd fd fd fd fd 01 01 01 01
>1e30e8		01 01 01 01 01 00 00 01 fd fd fd fd fd fd fd fd
>1e30f8		fd fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e3108		fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd 01
>1e3118		00 00 00 00 01 fd fd fd fd fd fd 01 00 00 00 00
>1e3128		00 00 01 01 fd fd fd fd fd fd fd fd fd 01 00 00
>1e3138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3148		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e3158		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e3168		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3178		01 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3198		fc fc 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e31a8		00 01 01 fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e31b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e31c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e31d8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01
>1e31e8		01 01 01 01 01 01 00 00 00 00 00 01 fc fc fc fc
>1e31f8		fc fc fc fc fc 01 00 00 01 01 fc fc fc fc fc fc
>1e3208		fc 01 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e3218		fc fc fc fc fc fc 01 01 01 01 01 01 00 00 00 00
>1e3228		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3238		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3248		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3258		00 00 00 00 01 fc fc fc fc fc fc 01 00 00 00 00
>1e3268		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e3278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3288		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3298		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e32a8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e32b8		00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 01
>1e32d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e32e8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e32f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3308		00 00 00 00 00 00 01 01 01 01 fc 01 01 01 fc fc
>1e3318		fc fc fc fc fc fc fc fc fc 01 01 01 01 00 00 00
>1e3328		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3338		fc fc fc fc 01 00 00 00 00 00 01 fc fc fc fc fc
>1e3348		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3358		fc 01 01 01 01 01 00 00 00 00 00 00 00 00 00 00
>1e3368		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3378		fc fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3388		01 00 00 00 00 01 fc fc fc fc fc fc fc fc 01 00
>1e3398		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 00 01
>1e33a8		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e33b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e33c8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e33d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e33e8		01 00 00 00 01 fc fc fc fc fc fc 01 01 01 00 00
>1e33f8		00 01 fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3408		00 00 01 fc fc fc fc fc fc fc 01 01 01 01 00 00
>1e3418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3428		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3448		00 00 00 00 00 00 00 00 00 00 01 00 00 00 01 fc
>1e3458		fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00 00
>1e3468		00 00 00 00 00 00 00 00 01 01 fc fc fc fc fc fc
>1e3478		fc fc fc 01 01 00 00 00 00 00 00 01 fc fc fc fc
>1e3488		fc 01 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3498		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e34a8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e34b8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e34c8		01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e34d8		00 00 00 00 01 fc fc fc fc fc fc fc 01 00 01 fc
>1e34e8		fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e34f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3508		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e3518		fc fc fc fc fc fc 01 01 fc fc fc fc fc fc fc 01
>1e3528		00 00 00 01 fc fc fc fc fc 01 01 00 00 00 00 00
>1e3538		01 fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00
>1e3548		00 01 fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e3558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e3568		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3588		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e3598		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e35a8		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e35b8		fc 01 01 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e35c8		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e35d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e35e8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e35f8		fc fc 01 00 00 00 00 01 fc fc fc fc fc fc fc 01
>1e3608		00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00
>1e3618		00 00 00 00 01 fc fc fc fc fc fc fc fc 01 fc fc
>1e3628		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3648		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e3658		fc fc fc fc 01 01 00 00 01 fc fc fc fc fc fc 01
>1e3668		00 00 00 01 fc fc fc 01 01 00 00 00 00 00 00 01
>1e3678		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e3688		00 01 fc fc fc fc fc fc fc fc 01 01 01 01 01 01
>1e3698		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e36a8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e36b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e36c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e36d8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e36e8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e36f8		01 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3708		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3718		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3728		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3738		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e3748		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3758		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e3768		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e3778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3788		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e3798		fc fc fc 01 00 00 00 00 01 fc fc fc fc fc 01 00
>1e37a8		00 00 00 01 fc 01 01 00 00 00 00 00 00 00 01 fc
>1e37b8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e37c8		01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e37d8		fc 01 01 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e37e8		fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00 00
>1e37f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3808		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e3818		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1e3828		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3838		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e3848		fc 01 00 00 00 01 fc fc fc fc fc fc fc fc fc 01
>1e3858		01 01 01 01 01 01 01 01 01 00 00 00 00 00 00 00
>1e3868		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e3878		fc fc 01 00 00 00 01 fc fc fc fc fc fc fc 01 00
>1e3888		00 00 00 01 fc fc fc fc fc fc fc fc fc 01 00 00
>1e3898		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e38a8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e38b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e38c8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e38d8		fb 01 01 00 00 00 00 00 01 01 fb fb 01 01 00 00
>1e38e8		00 00 01 fb 01 00 00 00 00 00 00 00 00 01 fb fb
>1e38f8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3908		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3918		fb fb fb 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3928		fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01 01
>1e3938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3948		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3958		fb fb fb fb fb fb 01 01 01 01 01 01 01 00 00 00
>1e3968		00 00 00 00 00 01 fb fb fb fb fb fb fb fb 01 00
>1e3978		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3988		fb 01 00 01 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3998		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e39a8		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e39b8		fb fb 01 00 00 01 fb fb fb fb fb fb fb 01 00 00
>1e39c8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e39d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e39e8		fb fb fb fb fb 01 01 00 00 00 00 00 00 00 00 00
>1e39f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a08		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3a18		01 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e3a28		00 00 01 01 00 00 00 00 00 00 00 00 01 fb fb fb
>1e3a38		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 01
>1e3a48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a58		fb fb fb fb 01 00 00 00 00 00 00 00 01 fb fb fb
>1e3a68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3a78		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3a88		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3a98		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 00
>1e3aa8		00 00 00 01 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3ab8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3ac8		fb fb 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3ad8		fb fb fb fb fb fb fb fb 01 01 01 01 01 01 00 00
>1e3ae8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3af8		fb fb 01 00 01 fb fb fb fb fb fb fb fb 01 00 00
>1e3b08		00 00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e3b18		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3b28		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e3b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e3b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3b68		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e3b78		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 01
>1e3b88		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3b98		fb fb fb fb 01 00 00 00 00 00 00 01 fb fb fb fb
>1e3ba8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3bb8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3bc8		00 00 00 00 00 00 00 01 01 01 01 fb fb fb fb fb
>1e3bd8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01 00
>1e3be8		00 00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3bf8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3c08		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3c18		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3c28		00 00 01 fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e3c38		fb fb 01 00 01 fb fb fb fb fb fb fb 01 01 00 00
>1e3c48		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3c58		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3c68		fb fb fb 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e3c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3c88		00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01 00
>1e3c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ca8		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e3cb8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3cc8		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cd8		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3ce8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3cf8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3d08		00 00 00 01 01 01 01 fb fb fb fb fb fb fb fb fb
>1e3d18		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb 01
>1e3d28		01 01 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d38		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3d48		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3d58		fb fb fb fb fb fb fb fb 01 01 01 01 00 00 00 00
>1e3d68		00 01 fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3d78		fb fb 01 00 01 fb fb fb fb fb fb 01 00 00 00 00
>1e3d88		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3d98		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1e3da8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3dc8		00 00 01 fb fb fb fb fb fb fb fb fb 01 01 00 00
>1e3dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3de8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e3df8		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e3e08		00 01 01 fb fb fb 01 01 01 01 01 fb fb fb fb fb
>1e3e18		fb fb fb fb fb 01 00 00 00 00 01 fb fb fb fb fb
>1e3e28		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e38		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e3e48		01 01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e58		fb fb fb fb fb fb fb fb fb fb fb fb fb 01 01 01
>1e3e68		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e3e78		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3e88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3e98		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e3ea8		01 fb fb fb fb fb fb fb fb fb 01 00 01 fb fb fb
>1e3eb8		fb fb fb 01 fb fb fb fb fb fb fb fb 01 00 00 00
>1e3ec8		00 01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3ed8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e3ee8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3ef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f08		00 00 01 fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e3f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e3f28		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e3f38		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e3f48		00 00 00 01 01 01 00 00 00 00 00 01 fb fb fb fb
>1e3f58		fb fb fb fb fb 01 00 00 00 01 fb fb fb fb fb fb
>1e3f68		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f78		fb fb fb 01 00 00 00 00 00 00 00 00 01 01 01 01
>1e3f88		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3f98		fb fb fb fb fb fb fb fb fb fb 01 01 01 00 00 00
>1e3fa8		00 01 fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e3fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e3fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e3fd8		fb fb fb fb 01 01 01 00 00 00 00 00 00 00 00 00
>1e3fe8		01 fb fb fb fb fb fb fb fb 01 00 00 01 fb fb fb
>1e3ff8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e4008		01 fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e4018		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e4028		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4048		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4068		00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e4078		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4088		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e4098		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e40a8		fa fa fa 01 01 01 01 01 01 01 01 fa fa fa fa fa
>1e40b8		fa fa fa 01 00 00 00 00 00 00 01 01 01 00 00 01
>1e40c8		01 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e40d8		fa fa fa 01 01 01 01 01 01 01 00 00 00 00 00 00
>1e40e8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e40f8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01
>1e4108		01 fa fa fa fa fa fa fa fa fa fa fa 01 01 01 01
>1e4118		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4128		01 fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa
>1e4138		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4148		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4158		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4168		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4188		00 01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e4198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41a8		00 00 00 01 01 00 01 fa fa fa fa fa fa fa fa fa
>1e41b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e41c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41d8		fa fa fa fa fa fa 01 01 fa fa fa fa fa fa fa fa
>1e41e8		fa 01 01 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e41f8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4208		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4218		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4228		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4238		00 00 00 00 00 01 fa fa fa fa fa fa fa fa 01 00
>1e4248		00 01 fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1e4258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4268		fa fa fa fa fa fa fa fa 01 00 00 01 fa fa fa fa
>1e4278		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01
>1e4288		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4298		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e42a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e42d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e42e8		00 01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1e42f8		fa 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4308		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e4318		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4328		01 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e4338		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4348		00 01 01 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1e4358		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4368		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4378		00 00 00 01 01 fa fa fa fa fa fa fa fa 01 00 00
>1e4388		00 01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e43a8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e43b8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e43c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e43d8		01 fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e43e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e43f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4408		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e4418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4428		01 01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1e4438		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4448		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e4458		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e4468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e4478		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e4488		01 01 01 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1e4498		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e44a8		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e44b8		00 00 01 fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e44c8		01 fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e44d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1e44e8		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e44f8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01
>1e4508		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1e4518		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4528		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4538		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4548		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4558		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4568		fa fa 01 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1e4578		00 00 00 00 00 00 00 01 01 01 01 01 01 01 01 01
>1e4588		01 01 01 01 00 00 00 00 01 fa fa fa fa fa fa fa
>1e4598		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1e45a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e45b8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e45c8		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e45d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e45e8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e45f8		01 01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e4608		01 fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4618		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1e4628		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4638		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 01 fa
>1e4648		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4658		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e4668		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4678		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4688		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e4698		00 00 00 00 00 00 00 00 00 00 00 01 01 fa fa fa
>1e46a8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e46b8		01 01 01 01 01 01 01 fa fa fa fa 01 01 01 01 01
>1e46c8		01 01 00 00 00 00 00 01 fa fa fa fa fa fa fa fa
>1e46d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e46e8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e46f8		fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4708		00 00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa
>1e4718		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4728		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 01
>1e4738		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 01
>1e4748		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1e4758		01 01 01 01 01 01 01 01 00 00 00 00 00 01 fa fa
>1e4768		fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa fa
>1e4778		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa
>1e4788		fa fa fa fa fa fa fa 01 00 00 00 00 00 01 fa fa
>1e4798		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1e47a8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e47b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e47c8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e47d8		00 00 00 00 00 00 00 00 01 01 01 f9 f9 f9 f9 f9
>1e47e8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e47f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1e4808		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4818		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4828		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4848		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4868		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 f9 f9
>1e4878		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9
>1e4888		f9 f9 f9 f9 f9 f9 f9 01 00 00 01 01 01 01 01 f9
>1e4898		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 01 f9 f9
>1e48a8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e48b8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9
>1e48c8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e48d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1e48e8		f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e48f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4908		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4918		00 00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e4928		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4938		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4948		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4958		f9 f9 01 f9 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4968		00 00 00 00 00 01 01 f9 f9 f9 f9 f9 f9 f9 01 01
>1e4978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4988		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e49a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9
>1e49b8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 01 f9
>1e49c8		f9 f9 f9 f9 f9 f9 f9 f9 01 01 f9 f9 f9 f9 f9 f9
>1e49d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9
>1e49e8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e49f8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4a08		f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 f9 f9 f9 f9
>1e4a18		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 f9 f9 f9 f9 f9
>1e4a28		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4a48		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4a58		00 00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a78		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01
>1e4a88		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4a98		f9 01 00 01 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4aa8		00 00 01 01 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ac8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4ae8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4af8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1e4b08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4b28		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4b38		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1e4b48		f9 f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4b58		f9 f9 f9 f9 f9 f9 01 01 00 00 01 f9 f9 f9 f9 f9
>1e4b68		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4b88		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1e4b98		00 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ba8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
;		...repeated 2 times (32 bytes)...
>1e4bd8		01 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4be8		01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00
>1e4bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4c08		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4c28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c38		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9
>1e4c48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c58		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4c68		f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4c78		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4c88		f9 f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e4c98		f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4ca8		f9 01 f9 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e4cb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4cc8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 01 01
>1e4cd8		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ce8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4cf8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e4d18		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d48		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1e4d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4d68		01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d78		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 01 f9 f9
>1e4d88		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4d98		f9 f9 f9 f9 f9 f9 f9 01 01 01 f9 f9 f9 f9 f9 f9
>1e4da8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4db8		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9 f9
>1e4dc8		f9 f9 f9 f9 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4dd8		f9 f9 f9 f9 01 01 00 00 00 00 00 01 f9 f9 f9 f9
>1e4de8		01 00 01 f9 01 00 00 00 00 00 00 00 00 00 00 00
>1e4df8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4e08		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 01 01 f9 f9
>1e4e18		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9
>1e4e28		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e38		f9 f9 f9 01 f9 01 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e48		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00
>1e4e58		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4e68		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 01 00 00 00
>1e4e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4e88		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e4e98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4ea8		00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4eb8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ec8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1e4ed8		f9 f9 f9 01 01 01 01 00 00 00 01 f9 f9 f9 f9 f9
>1e4ee8		f9 f9 f9 01 00 00 00 00 00 00 00 00 00 01 f9 f9
>1e4ef8		f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9 f9
>1e4f08		f9 f9 f9 01 01 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e4f18		f9 f9 f9 01 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1e4f28		f9 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e4f38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e4f48		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f58		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 00 01 f8 f8 f8
>1e4f68		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f78		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4f88		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 00 00 00
>1e4f98		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e4fa8		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00
>1e4fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fc8		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e4fd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e4fe8		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e4ff8		f8 01 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5008		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5018		01 01 01 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8
>1e5028		01 01 01 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5038		f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8 f8 f8
>1e5048		f8 f8 01 00 01 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e5058		f8 f8 01 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5068		f8 01 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e5078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5088		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5098		f8 f8 f8 f8 f8 f8 f8 f8 01 01 00 01 01 f8 f8 f8
>1e50a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01
>1e50b8		01 f8 f8 01 f8 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e50c8		f8 f8 f8 f8 f8 01 f8 f8 01 01 00 00 00 00 00 00
>1e50d8		00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8
>1e50e8		f8 f8 f8 f8 f8 f8 f8 01 01 00 00 00 00 00 00 00
>1e50f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5108		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5128		00 00 00 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1e5138		01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1e5148		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00
>1e5158		00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01
>1e5168		00 00 01 00 00 00 00 00 00 00 00 00 00 01 01 f8
>1e5178		f8 f8 f8 f8 01 00 00 00 00 00 00 01 f8 01 f8 01
>1e5188		01 01 00 00 00 00 00 01 f8 f8 01 f8 f8 01 f8 f8
>1e5198		f8 01 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e51a8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e51c8		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e51d8		f8 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 01 f8 f8
>1e51e8		f8 f8 f8 f8 f8 f8 f8 f8 01 01 01 01 01 00 00 00
>1e51f8		00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5208		f8 f8 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5218		00 00 00 00 00 00 00 00 01 01 f8 f8 f8 f8 f8 f8
>1e5228		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e5238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5248		00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e5258		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5268		00 00 00 00 01 01 01 01 f8 f8 01 01 01 01 01 00
>1e5278		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1e5288		f8 f8 f8 f8 f8 f8 f8 01 01 01 01 00 00 00 00 00
>1e5298		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 f8 01
>1e52a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e52b8		f8 f8 f8 f8 01 00 00 00 00 00 01 f8 01 00 01 00
>1e52c8		00 00 00 00 00 00 01 f8 f8 01 00 01 01 00 01 f8
>1e52d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e52e8		f8 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e52f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5308		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5318		f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 01 01
>1e5328		01 f8 f8 f8 f8 01 01 01 00 00 00 00 00 00 00 00
>1e5338		00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01
>1e5348		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5358		00 00 00 00 00 00 00 00 00 00 01 01 01 01 f8 01
>1e5368		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5388		00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00 00 00
>1e5398		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53a8		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e53b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e53c8		f8 f8 f8 01 01 01 01 00 00 00 00 00 00 00 00 00
>1e53d8		00 00 00 00 00 00 00 00 00 01 f8 f8 01 f8 01 00
>1e53e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e53f8		01 01 01 01 00 00 00 00 00 00 01 01 00 00 01 00
>1e5408		00 00 00 00 00 00 01 f8 01 00 00 00 00 00 01 01
>1e5418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1e5428		01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5448		00 01 01 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1e5458		f8 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e5468		00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e5478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5488		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5498		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00
>1e54a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e54c8		00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00
>1e54d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e5508		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5518		00 00 00 00 00 00 00 00 00 01 f8 01 00 01 00 00
>1e5528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5538		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e5548		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00
>1e5558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e5568		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5578		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5588		00 00 00 01 01 01 f8 f8 f8 f8 f8 f8 f8 f8 01 01
>1e5598		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55a8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e55b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e5608		00 00 01 f8 f8 01 f8 01 00 00 00 00 00 00 00 00
>1e5618		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5658		00 00 00 00 00 00 00 00 01 f8 01 00 00 01 00 00
>1e5668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5678		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e5688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56a8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e56c8		00 00 00 00 00 01 01 01 01 01 01 01 01 01 00 00
>1e56d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 6 times (96 bytes)...
>1e5748		00 01 f8 f8 01 00 01 01 00 00 00 00 00 00 00 00
>1e5758		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5798		00 00 00 00 00 00 00 00 01 01 00 00 00 00 00 00
>1e57a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e57c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57e8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e57f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e5888		00 01 f8 01 01 00 01 00 00 00 00 00 00 00 00 00
>1e5898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e58d8		00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00
>1e58e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5928		00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e59c8		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e59d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e5a18		00 00 00 00 00 00 00 01 01 00 00 00 00 00 00 00
>1e5a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 13 times (208 bytes)...
>1e5b08		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 18 times (288 bytes)...
>1e5c48		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e5c58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 89 times (1424 bytes)...
>1e61f8		00 00 00 00 00 00 00 00
.1e6200						SS_FMX_TXT
>1e6200		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_FMX.data"
>1e6208		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 42 times (672 bytes)...
>1e64b8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e64c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6558		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e65f8		00 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00
>1e6608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e6698		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e66a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e66f8		00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00
>1e6708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6738		00 00 00 00 00 00 00 00 00 01 01 00 00 00 00 00
>1e6748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e6798		00 00 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e67a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e67d8		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e67e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e67f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6838		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6848		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6878		00 00 00 00 00 00 00 00 00 00 01 01 00 01 01 00
>1e6888		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e68c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 ff
>1e68d8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e68e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6918		00 00 00 00 00 00 00 00 00 00 01 ff 01 ff ff 01
>1e6928		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6968		00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff 01
>1e6978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e69b8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e69c8		01 ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e69d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6a08		00 00 00 00 00 00 00 00 00 00 01 01 ff ff ff 01
>1e6a18		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a48		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a58		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6a68		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6a78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e6aa8		00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff
>1e6ab8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ac8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ae8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6af8		00 00 00 00 00 00 00 00 00 00 01 ff ff ff ff ff
>1e6b08		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b28		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b48		00 00 00 00 00 00 00 00 01 ff ff ff ff ff ff ff
>1e6b58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b88		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6b98		00 00 01 01 01 01 01 01 01 01 00 01 ff ff ff ff
>1e6ba8		ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6bc8		ff ff 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6be8		00 00 00 00 00 00 01 01 ff ff ff ff ff ff ff 01
>1e6bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e6c28		ff ff 01 01 01 01 01 01 01 00 00 01 01 01 01 01
>1e6c38		01 01 ff ff ff ff ff ff ff ff 01 ff ff ff ff ff
>1e6c48		ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00 00
>1e6c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 ff
>1e6c68		ff ff 01 00 00 00 00 00 00 00 00 00 01 00 00 00
>1e6c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6c88		00 00 00 00 00 01 ff ff ff ff ff ff ff ff ff 01
>1e6c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6ca8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6cb8		00 00 00 00 00 00 00 00 00 00 01 01 01 01 ff ff
>1e6cc8		ff ff ff ff ff ff ff ff ff 01 01 ff ff ff ff ff
>1e6cd8		ff ff ff ff ff ff ff ff 01 01 01 ff ff ff ff ff
>1e6ce8		ff ff ff ff ff 01 00 00 00 00 00 00 00 00 00 00
>1e6cf8		00 00 00 00 00 00 00 00 00 00 00 00 01 ff ff ff
>1e6d08		ff ff ff 01 00 00 00 00 00 00 01 01 01 01 00 00
>1e6d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d28		00 00 00 01 01 ff ff ff ff ff ff ff ff ff ff 01
>1e6d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6d58		00 00 00 01 01 01 01 01 01 01 fe fe fe fe fe fe
>1e6d68		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6d78		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6d88		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6d98		00 00 00 00 00 00 00 00 00 00 00 00 01 fe fe fe
>1e6da8		fe fe fe fe 01 00 00 01 01 01 fe fe fe 01 00 00
>1e6db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6dc8		00 00 01 fe fe fe fe fe fe fe fe fe fe fe 01 00
>1e6dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6de8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e6df8		01 01 01 fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e08		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6e18		fe fe fe fe fe fe fe 01 00 00 00 01 fe fe fe fe
>1e6e28		fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00 00
>1e6e38		00 00 00 00 00 00 00 00 00 00 01 01 fe fe fe fe
>1e6e48		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe 01 01
>1e6e58		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e68		01 01 fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6e88		00 00 00 00 00 01 01 01 01 01 01 01 fe fe fe fe
>1e6e98		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ea8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6eb8		fe fe fe fe fe fe 01 00 00 00 00 00 01 fe fe fe
>1e6ec8		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6ed8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e6ee8		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6ef8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e6f08		fe fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00
>1e6f18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6f28		00 00 00 01 01 fe fe fe fe fe fe fe fe fe fe fe
>1e6f38		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f48		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6f58		fe fe fe fe fe fe fe 01 01 01 01 01 fe fe fe fe
>1e6f68		fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00 00
>1e6f78		00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e6f88		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e6f98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fe
>1e6fa8		fe fe fe fe fe fe fe fe fe fe fe fe 01 00 00 00
>1e6fb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e6fc8		00 00 00 00 01 01 01 fe fe fe fe fe fe fe fe fe
>1e6fd8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6fe8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e6ff8		fe fe fe fe fe fe fe fe 01 01 01 fe fe fe fe fe
>1e7008		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e7018		00 00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7028		fe fe fe fe fe 01 00 01 fe fe fe fe fe fe fe fe
>1e7038		fe 01 00 00 00 00 00 00 00 00 00 00 00 01 fe fe
>1e7048		fe fe fe fe fe fe fe fe fe fe 01 01 00 00 00 00
>1e7058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7068		00 00 00 00 00 00 00 01 01 01 01 fe fe fe fe fe
>1e7078		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7088		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7098		fe fe fe fe fe fe 01 01 00 00 01 fe fe fe fe fe
>1e70a8		fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00 00
>1e70b8		00 00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe
>1e70c8		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e70d8		fe 01 00 00 00 00 00 00 00 00 00 01 01 fe fe fe
>1e70e8		fe fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00
>1e70f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7108		00 00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe
>1e7118		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e7128		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 01
>1e7138		01 01 01 01 01 01 00 00 00 01 fe fe fe fe fe fe
>1e7148		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7158		00 00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe
>1e7168		fe fe fe fe 01 00 00 01 fe fe fe fe fe fe fe fe
>1e7178		fe 01 00 00 00 00 00 00 00 01 01 fe fe fe fe fe
>1e7188		fe fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00
>1e7198		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e71a8		00 00 00 00 00 00 00 01 01 01 01 01 fe fe fe fe
>1e71b8		fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe
>1e71c8		fe fe fe fe fe fe fe fe 01 01 01 01 01 01 01 00
>1e71d8		00 00 00 00 00 00 00 00 00 01 fe fe fe fe fe fe
>1e71e8		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e71f8		00 00 00 00 01 fe fe fe fe fe fe fe fe fe fe fe
>1e7208		fe fe fe 01 00 00 00 01 fe fe fe fe fe fe fe fe
>1e7218		fe fe 01 00 00 00 00 00 01 fe fe fe fe fe fe fe
>1e7228		fe fe fe fe fe fe fe 01 00 00 00 00 00 00 00 00
>1e7238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7248		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7258		fd fd fd 01 01 01 fd fd fd fd fd fd fd fd fd fd
>1e7268		fd fd fd fd fd 01 01 01 00 00 00 00 00 00 00 00
>1e7278		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7288		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7298		00 00 01 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e72a8		fd fd fd 01 00 00 00 01 fd fd fd fd fd fd fd fd
>1e72b8		fd fd 01 00 00 00 01 01 fd fd fd fd fd fd fd fd
>1e72c8		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e72d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e72f8		01 01 01 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7308		fd fd 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e7318		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7328		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e7338		00 01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7348		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e7358		fd fd 01 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7368		fd fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00
>1e7378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7388		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7398		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e73a8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e73b8		00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73c8		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 00 00
>1e73d8		01 fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e73e8		fd fd 01 00 00 00 00 01 fd fd fd fd fd fd fd fd
>1e73f8		fd fd 01 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e7408		fd fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00
>1e7418		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7428		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7438		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7448		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7458		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7468		fd fd fd fd fd fd fd fd 01 00 00 00 00 00 01 01
>1e7478		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7488		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7498		fd fd fd 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e74a8		fd fd fd fd 01 00 00 00 00 00 00 00 00 00 00 00
>1e74b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e74e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e74f8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e7508		fd fd fd fd fd fd fd fd 01 01 00 00 00 01 fd fd
>1e7518		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7528		fd 01 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7538		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7548		fd fd 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e7558		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7578		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd 01
>1e7588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7598		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e75a8		fd fd fd fd fd fd fd 01 00 01 01 01 01 fd fd fd
>1e75b8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75c8		01 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e75d8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e75e8		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e75f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7618		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e7628		01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7638		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd
>1e7648		fd fd fd fd fd fd fd fd 01 fd fd fd fd fd fd fd
>1e7658		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7668		00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd fd
>1e7678		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e7688		fd 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7698		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e76b8		00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd fd
>1e76c8		fd fd fd fd fd fd fd fd 01 01 01 01 00 00 00 00
>1e76d8		00 00 00 00 01 fd fd fd fd fd fd fd fd fd fd fd
>1e76e8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
>1e76f8		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7708		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd fd
>1e7718		fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd 01
>1e7728		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7748		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7758		00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7768		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7778		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e7788		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7798		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e77a8		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e77b8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 01 00
>1e77c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e77e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e77f8		01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7808		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7818		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7828		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7838		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7848		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7858		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7878		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7888		00 00 00 00 00 00 00 00 00 00 01 01 01 01 fc fc
>1e7898		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78a8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e78b8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e78c8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e78d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e78e8		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1e78f8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e7908		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7928		00 00 00 00 00 00 01 01 01 01 fc fc fc fc fc fc
>1e7938		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7948		fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01 01
>1e7958		01 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7968		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7978		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e7988		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e7998		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e79a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e79c8		00 00 00 01 01 01 fc fc fc fc fc fc fc fc fc fc
>1e79d8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e79e8		fc fc fc fc fc fc fc fc fc fc fc 01 01 00 00 00
>1e79f8		00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7a08		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a18		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7a28		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e7a38		fc fc fc fc fc fc fc fc 01 01 00 00 00 00 00 00
>1e7a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7a68		01 01 01 fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a78		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7a88		fc fc fc fc fc fc fc fc 01 01 01 00 00 00 00 00
>1e7a98		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7aa8		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7ab8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1e7ac8		00 00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc
>1e7ad8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7ae8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7af8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1e7b08		01 00 00 01 fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b18		fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
>1e7b28		fc fc 01 01 01 01 01 01 00 00 00 00 00 00 00 00
>1e7b38		00 01 fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7b48		fc fc fc fc fc fc fc fc fc fc fc fc fc fc 01 fc
>1e7b58		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7b68		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e7b78		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7b88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ba8		00 00 00 01 01 01 01 01 fc fc fc fc fc fc fc fc
>1e7bb8		fc fc fc fc fc fc fc fc fc fc fc fc 01 01 01 01
>1e7bc8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7bd8		01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00 01
>1e7be8		fc fc fc fc fc fc fc fc fc fc fc fc fc 01 00 01
>1e7bf8		fc fc fc fc fc fc fc fc fc fc fc fc 01 00 00 00
>1e7c08		00 00 00 00 00 01 01 fc fc fc fc fc fc fc fc fc
>1e7c18		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e7c28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7c48		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e7c58		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7c78		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7c88		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 01
>1e7c98		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7ca8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1e7cb8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e7cc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ce8		00 00 00 00 00 01 01 01 fb fb fb fb fb fb fb fb
>1e7cf8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7d18		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d28		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 01
>1e7d38		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e7d48		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e7d58		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7d68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7d88		00 00 00 01 01 fb fb 01 01 01 01 fb fb fb fb fb
>1e7d98		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e7db8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7dc8		00 01 fb fb fb fb fb fb fb 01 01 00 00 00 01 fb
>1e7dd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7de8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7df8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7e08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7e28		00 01 01 00 01 01 01 00 00 00 00 01 fb fb fb fb
>1e7e38		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7e58		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e68		00 01 01 fb fb fb fb fb 01 00 00 00 00 00 01 fb
>1e7e78		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7e88		00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7e98		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ea8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ec8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7ed8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1e7ef8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1e7f08		00 00 00 01 01 01 01 01 00 00 00 00 00 01 fb fb
>1e7f18		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7f28		01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7f38		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7f48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7f68		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e7f78		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7f88		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7f98		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e7fa8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e7fb8		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 01
>1e7fc8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e7fd8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e7fe8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e7ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8008		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8018		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e8028		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb
>1e8038		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e8048		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e8058		fb fb fb fb fb fb fb fb 01 00 00 00 00 01 01 fb
>1e8068		fb fb fb fb fb fb fb fb fb fb fb 01 fb fb fb fb
>1e8078		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1e8088		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e80a8		00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb
>1e80b8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80c8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80d8		fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00
>1e80e8		00 00 00 00 00 00 00 00 00 00 00 00 01 fb fb fb
>1e80f8		fb fb fb fb fb fb fb 01 00 00 00 00 01 fb fb fb
>1e8108		fb fb fb fb fb fb fb fb fb fb 01 00 01 01 01 fb
>1e8118		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1e8128		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8148		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8158		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8168		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8178		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e8188		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1e8198		fa fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa
>1e81a8		fa fa fa fa fa fa fa fa fa fa fa 01 01 00 00 01
>1e81b8		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e81c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e81e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e81f8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8208		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8218		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8228		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e8238		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e8248		fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8258		01 fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00
>1e8268		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8288		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8298		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82a8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82b8		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e82c8		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1e82d8		fa fa fa fa fa fa 01 00 00 00 01 fa fa fa fa fa
>1e82e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1e82f8		01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00 00
>1e8308		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8318		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8328		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8338		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8348		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8358		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8368		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8378		fa fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa
>1e8388		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1e8398		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e83a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e83c8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e83d8		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e83e8		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e83f8		fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00 00
>1e8408		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8418		fa fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa
>1e8428		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1e8438		00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1e8448		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8458		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8468		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8478		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8488		00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa
>1e8498		fa fa fa 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e84a8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e84b8		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e84c8		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1e84d8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e84e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e84f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8508		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e8518		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8528		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8538		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8548		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e8558		fa fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa
>1e8568		fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00
>1e8578		00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01 00
>1e8588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8598		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85a8		00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa fa
>1e85b8		fa fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85c8		00 00 00 00 00 00 00 00 00 01 01 fa fa fa fa fa
>1e85d8		01 fa 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e85e8		00 00 00 00 00 00 00 00 00 01 fa fa fa fa fa fa
>1e85f8		fa fa fa 01 00 00 01 fa fa fa fa fa fa fa fa fa
>1e8608		fa fa fa fa fa 01 00 00 00 00 00 00 00 00 00 00
>1e8618		00 00 00 01 fa fa fa fa fa fa fa fa fa fa 01 00
>1e8628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8638		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8648		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8658		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8668		00 00 00 00 00 00 00 00 00 01 00 01 f9 f9 f9 01
>1e8678		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8688		00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9
>1e8698		f9 f9 f9 01 00 01 f9 f9 f9 f9 01 01 f9 01 01 01
>1e86a8		f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e86b8		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e86c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e86e8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e86f8		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8708		00 00 00 00 00 00 00 00 01 01 00 01 01 01 01 00
>1e8718		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8728		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e8738		f9 f9 01 00 00 01 01 01 01 01 00 00 01 00 00 00
>1e8748		01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8758		00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8778		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8788		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8798		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87a8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e87b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87c8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9
>1e87d8		f9 01 00 00 00 00 01 01 01 00 00 00 00 00 00 01
>1e87e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e87f8		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 f9 f9
>1e8808		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8818		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8828		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8838		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8848		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1e8858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8868		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8878		f9 01 00 00 00 01 01 01 00 00 00 00 00 00 00 01
>1e8888		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8898		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 01 f9
>1e88a8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88c8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 01 00
>1e88d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e88e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1e88f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8908		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9
>1e8918		01 00 00 00 00 01 01 00 00 00 00 00 00 00 00 00
>1e8928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8938		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 f9
>1e8948		f9 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8968		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00
>1e8978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e89a8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e89b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89d8		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 01
>1e89e8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e89f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a08		00 00 00 00 00 01 f9 f9 f9 f9 01 00 01 01 00 00
>1e8a18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8a48		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 f9 f9 01
>1e8a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a78		00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00 00
>1e8a88		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8a98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8aa8		00 00 00 00 00 01 f9 f9 f9 01 00 01 01 00 00 00
>1e8ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8ae8		00 00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 01 00
>1e8af8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b18		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 01 00 00
>1e8b28		00 01 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8b48		00 00 00 00 00 01 f8 01 01 00 00 01 00 00 00 00
>1e8b58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8b88		00 00 00 00 00 01 f9 f9 f9 f9 f9 f9 01 00 00 00
>1e8b98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ba8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bb8		00 00 00 00 00 00 00 00 01 f9 f9 f9 f9 f9 01 00
>1e8bc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8be8		00 00 00 00 01 f8 01 00 00 00 00 01 00 00 00 00
>1e8bf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8c28		00 00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00
>1e8c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c58		00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8 01 00
>1e8c68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8c88		00 00 00 00 01 f8 01 00 00 00 01 00 00 00 00 00
>1e8c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8cc8		00 00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8cd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ce8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8cf8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 01 01
>1e8d08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d28		00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 00
>1e8d38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8d68		00 00 00 00 01 f8 f8 f8 f8 f8 f8 01 00 00 00 00
>1e8d78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8d98		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1e8da8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8dc8		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e8dd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e8e08		00 00 00 00 01 f8 f8 f8 f8 f8 01 00 00 00 00 00
>1e8e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8e38		00 00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00
>1e8e48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8ea8		00 00 00 00 01 f8 f8 f8 01 01 00 00 00 00 00 00
>1e8eb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ec8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8ed8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e8ee8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8f48		00 00 00 00 01 f8 f8 01 00 01 00 00 00 00 00 00
>1e8f58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e8f78		00 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00
>1e8f88		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e8fe8		00 00 00 01 f8 f8 01 01 00 00 00 00 00 00 00 00
>1e8ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9008		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1e9028		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 5 times (80 bytes)...
>1e9088		00 00 00 01 f8 01 00 00 00 00 00 00 00 00 00 00
>1e9098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e90c8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e90d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9128		00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1e9138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e91c8		00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e91d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 8 times (128 bytes)...
>1e9268		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 23 times (368 bytes)...
>1e93f8		00 00 00 00 00 00 00 00
.1e9400						SS_UPlus_TXT
>1e9400		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_UPlus.data"
>1e9408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 14 times (224 bytes)...
>1e94f8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9508		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9558		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e95b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e95c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9608		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9618		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e9668		00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 01
>1e9678		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9688		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 3 times (48 bytes)...
>1e96c8		00 00 00 00 00 00 01 00 00 00 00 00 00 00 01 01
>1e96d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9728		00 00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01
>1e9738		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9788		00 00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01
>1e9798		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e97e8		00 00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00
>1e97f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e9848		00 00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00
>1e9858		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 4 times (64 bytes)...
>1e98a8		00 00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00
>1e98b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e98e8		00 00 00 00 00 00 00 00 00 00 00 01 01 01 00 00
>1e98f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9908		00 00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9918		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e9948		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00
>1e9958		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9968		00 01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00
>1e9978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1e99a8		00 00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01
>1e99b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99c8		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e99d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00
>1e99e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e99f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a08		00 00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd
>1e9a18		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a28		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1e9a38		00 00 00 00 00 00 00 00 00 00 00 00 01 01 00 00
>1e9a48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9a68		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9a78		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9a88		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9a98		00 00 00 00 00 00 00 00 00 00 00 01 fd 01 00 00
>1e9aa8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ab8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ac8		00 00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd
>1e9ad8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1e9ae8		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1e9af8		00 00 00 00 00 00 00 00 00 00 01 fd fd fd 01 01
>1e9b08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b28		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9b48		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9b58		00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc
>1e9b68		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9b88		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9b98		01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc
>1e9ba8		fc fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00
>1e9bb8		00 00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc
>1e9bc8		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9bd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9be8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc
>1e9bf8		01 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c08		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c18		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c28		fc 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c48		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1e9c58		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1e9c68		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1e9c78		00 00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc
>1e9c88		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9c98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ca8		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9cb8		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9cc8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9cd8		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc 01
>1e9ce8		00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9cf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d08		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1e9d18		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1e9d28		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1e9d38		00 00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc
>1e9d48		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9d68		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9d78		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9d88		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1e9d98		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9da8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9db8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9dc8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1e9dd8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1e9de8		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1e9df8		00 00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc
>1e9e08		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e28		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e38		00 00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb
>1e9e48		fb fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00
>1e9e58		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb 01
>1e9e68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9e88		00 01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00
>1e9e98		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1e9ea8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9eb8		00 00 00 00 01 fb fb fb fb fb fb fb fb fb 01 00
>1e9ec8		00 00 00 00 00 00 01 01 01 01 00 00 00 00 00 00
>1e9ed8		00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9ee8		00 01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9ef8		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f08		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1e9f18		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb 01
>1e9f28		01 01 01 01 01 01 01 fb fb fb 01 01 01 01 01 01
>1e9f38		01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9f48		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9f58		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1e9f68		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1e9f78		00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb
>1e9f88		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 00 00
>1e9f98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fa8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1e9fb8		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1e9fc8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1e9fd8		00 00 01 fb fb fb fb fb fb fb fb fb fb fb fb fb
>1e9fe8		fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00 00
>1e9ff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea008		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1ea018		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1ea028		fb fb fb 01 00 00 00 00 00 00 00 00 00 01 01 01
>1ea038		01 01 fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea048		fb fb fb fb fb fb fb fb fb 01 01 01 01 01 01 01
>1ea058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea068		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea078		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1ea088		fb fb 01 00 00 00 00 00 00 01 01 01 01 fb fb fb
>1ea098		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea0a8		fb fb fb fb fb fb fb fb fb fb 01 01 00 00 00 00
>1ea0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea0c8		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1ea0d8		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1ea0e8		fb fb 01 00 00 00 01 01 01 fb fb fb fb fb fb fb
>1ea0f8		fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
>1ea108		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1ea118		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea128		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea138		00 00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa
>1ea148		fa 01 00 00 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea158		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea168		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea188		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea198		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1ea1a8		01 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1b8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea1c8		fa fa fa fa fa fa fa fa 01 01 00 00 00 00 00 00
>1ea1d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa
>1ea1e8		fa fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00
>1ea1f8		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea208		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea218		fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea228		fa fa fa fa fa 01 01 01 00 00 00 00 00 00 00 00
>1ea238		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea248		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea258		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa
>1ea268		01 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea278		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 01
>1ea288		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea298		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea2a8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea2b8		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa
>1ea2c8		01 00 00 01 01 01 fa fa fa fa fa fa fa fa fa fa
>1ea2d8		fa fa fa fa fa fa fa fa fa fa fa fa 01 01 00 01
>1ea2e8		01 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea308		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea318		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1ea328		00 00 00 00 00 00 01 01 fa fa fa fa fa fa fa fa
>1ea338		fa fa fa fa fa fa fa fa fa fa 01 01 00 00 00 00
>1ea348		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea358		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea368		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea378		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea388		00 00 00 00 00 00 00 00 01 01 01 01 01 fa fa fa
>1ea398		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1ea3a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea3b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1ea3c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01
>1ea3d8		fa fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1ea3e8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1ea3f8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1ea408		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea418		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea428		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9
>1ea438		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea448		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea458		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea468		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea478		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea488		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9
>1ea498		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00
>1ea4a8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9
>1ea4b8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea4c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea4d8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea4e8		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9
>1ea4f8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1ea508		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea518		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1ea528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea538		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea548		f9 f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9
>1ea558		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1ea568		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea578		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea588		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea598		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea5a8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9
>1ea5b8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1ea5c8		00 00 00 00 00 00 00 00 00 00 00 00 01 01 01 01
>1ea5d8		01 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea608		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea618		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1ea628		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea638		00 01 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00 00
>1ea648		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea658		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea668		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea678		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1ea688		00 00 00 00 00 00 00 00 00 00 00 01 01 01 01 01
>1ea698		00 01 f9 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea6b8		00 00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9
>1ea6c8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1ea6d8		f9 f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00
>1ea6e8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 01 00
>1ea6f8		01 f9 01 f9 f9 01 00 00 00 00 00 00 00 00 00 00
>1ea708		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea718		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea728		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea738		f8 f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00
>1ea748		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea758		01 01 00 01 01 00 00 00 00 00 00 00 00 00 00 00
>1ea768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea778		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1ea788		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea798		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1ea7a8		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea7b8		01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7c8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea7d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea7e8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea7f8		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1ea808		00 00 00 00 00 00 00 00 00 00 01 f8 f8 01 00 00
>1ea818		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea838		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1ea848		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea858		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea868		00 00 00 00 00 00 00 00 00 00 01 f8 01 00 00 01
>1ea878		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea888		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea898		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1ea8a8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea8b8		f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8c8		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 01
>1ea8d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea8f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ea908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1ea918		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea928		00 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00
>1ea938		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea968		01 f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01
>1ea978		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea988		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea998		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ea9c8		00 01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00
>1ea9d8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ea9e8		00 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00
>1ea9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaa28		00 00 00 00 01 01 01 00 00 00 00 00 00 00 00 00
>1eaa38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 27 times (432 bytes)...
>1eabf8		00 00 00 00 00 00 00 00
.1eac00						SS_U_TXT
>1eac00		00 00 00 00 00 00 00 00		.binary "SplashScreenCode/Graphics Assets/Graphic_U.data"
>1eac08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 10 times (160 bytes)...
>1eacb8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eacc8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eacf8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead08		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1ead38		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead48		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1ead68		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
>1ead78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eada8		00 00 00 00 00 01 01 00 00 00 00 00 00 00 01 01
>1eadb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eade8		00 00 00 00 00 01 00 00 00 00 00 00 00 01 01 00
>1eadf8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae28		00 00 00 00 01 01 00 00 00 01 01 01 01 fe 01 00
>1eae38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eae68		00 00 00 01 fe 01 00 00 00 01 fe fe fe fe 01 00
>1eae78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaea8		00 00 00 01 fe 01 00 00 01 fe fe fe fe 01 00 00
>1eaeb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaee8		00 00 01 fd fd 01 00 01 fd fd fd fd fd 01 00 00
>1eaef8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eaf28		00 01 fd fd fd fd 01 fd fd fd fd fd fd 01 00 00
>1eaf38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf48		00 00 00 00 00 00 00 00 00 00 01 01 01 00 00 00
>1eaf58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf68		00 01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eaf78		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eaf88		00 00 00 00 00 00 00 00 00 01 fd fd fd 01 00 00
>1eaf98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafa8		01 fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00
>1eafb8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafc8		00 00 00 00 00 00 00 00 01 fd fd fd fd fd 01 00
>1eafd8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eafe8		01 fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eaff8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb008		00 00 00 00 00 00 01 01 fd fd fd fd fd fd fd 01
>1eb018		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb028		fd fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00
>1eb038		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb048		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb058		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb068		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb078		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb088		00 00 00 00 00 01 fd fd fd fd fd fd fd fd fd 01
>1eb098		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fd
>1eb0a8		fd fd fd fd fd fd fd fd fd fd 01 00 00 00 00 00
>1eb0b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb0c8		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb0d8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb0e8		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb0f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb108		00 00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01
>1eb118		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc
>1eb128		fc fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00
>1eb138		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb148		00 00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01
>1eb158		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb168		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb178		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb188		00 00 00 01 fc fc fc fc fc fc fc fc fc fc 01 00
>1eb198		00 00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc
>1eb1a8		fc fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00
>1eb1b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb1c8		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb1d8		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb1e8		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb1f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb208		00 00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00
>1eb218		00 00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc
>1eb228		fc fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00
>1eb238		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb248		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb258		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb268		fc fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00
>1eb278		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb288		00 01 fc fc fc fc fc fc fc fc fc fc fc 01 00 00
>1eb298		00 00 00 00 00 00 00 00 00 00 01 fc fc fc fc fc
>1eb2a8		fc fc fc fc fc 01 00 00 00 00 00 00 00 00 00 00
>1eb2b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb2c8		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb2d8		00 00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb
>1eb2e8		fb fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00
>1eb2f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb308		01 fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00
>1eb318		00 00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb
>1eb328		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb338		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb348		01 fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb358		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb368		fb fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00
>1eb378		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb388		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb398		00 00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb
>1eb3a8		fb fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3b8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eb3c8		fb fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00
>1eb3d8		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb3e8		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb3f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb408		fb fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00
>1eb418		00 00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb
>1eb428		fb fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb438		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb448		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb458		00 00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb
>1eb468		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb478		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 fb
>1eb488		fb fb fb fb fb fb fb fb fb 01 00 00 00 00 00 00
>1eb498		00 00 00 00 01 fb fb fb fb fb fb fb fb fb fb fb
>1eb4a8		fb 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb4c8		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb4d8		00 00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa
>1eb4e8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb4f8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb508		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb518		00 00 00 01 fa fa fa fa fa fa fa fa fa fa fa 01
>1eb528		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb538		00 00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa
>1eb548		fa fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00
>1eb558		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb568		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb578		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb588		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb598		00 00 01 fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5b8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb5c8		fa fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00
>1eb5d8		00 01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01
>1eb5e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb5f8		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb608		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 00
>1eb618		01 fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00
>1eb628		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb638		00 00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa
>1eb648		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 00 01
>1eb658		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb668		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb678		00 00 00 00 00 00 00 00 00 00 00 01 fa fa fa fa
>1eb688		fa fa fa fa fa fa fa 01 00 00 00 00 00 00 01 fa
>1eb698		fa fa fa fa fa fa fa fa fa fa fa fa fa 01 00 00
>1eb6a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb6c8		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 01 f9 f9
>1eb6d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb6e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb6f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb708		f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 01 f9 f9
>1eb718		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00
>1eb728		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb738		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb748		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 01 01 f9 f9 f9
>1eb758		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00
>1eb768		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb778		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb788		f9 f9 f9 f9 f9 f9 f9 01 00 01 01 f9 f9 f9 f9 f9
>1eb798		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00
>1eb7a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7b8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb7c8		f9 f9 f9 f9 f9 f9 f9 f9 01 f9 f9 f9 f9 f9 f9 f9
>1eb7d8		f9 f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00
>1eb7e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb7f8		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb808		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb818		f9 f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00
>1eb828		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb838		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb848		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb858		f9 f9 f9 f9 f9 f9 f9 01 00 00 00 00 00 00 00 00
>1eb868		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb878		00 00 00 00 00 00 00 00 00 00 00 01 f9 f9 f9 f9
>1eb888		f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9 f9
>1eb898		f9 f9 f9 f9 f9 01 01 00 00 00 00 00 00 00 00 00
>1eb8a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8b8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb8c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb8d8		f8 f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00
>1eb8e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb8f8		00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8 f8
>1eb908		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb918		f8 f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00
>1eb928		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb938		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb948		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb958		f8 f8 01 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb968		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb978		00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8 f8
>1eb988		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb998		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9a8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9b8		00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8 f8
>1eb9c8		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8
>1eb9d8		01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9e8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eb9f8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f8
>1eba08		f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 f8 01
>1eba18		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba28		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
>1eba38		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01
>1eba48		f8 f8 f8 f8 f8 f8 f8 f8 f8 01 f8 f8 01 01 01 00
>1eba58		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1eba88		01 01 01 f8 f8 f8 01 01 01 00 01 01 00 00 00 00
>1eba98		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 2 times (32 bytes)...
>1ebac8		00 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00
>1ebad8		00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
;		...repeated 17 times (272 bytes)...
>1ebbf8		00 00 00 00 00 00 00 00
.1f0000						FONT_4_BANK0
>1f0000		00 00 00 00 00 00 00 00		.binary "FONT/Bm437_PhoenixEGA_8x8.bin", 0, 2048
>1f0008		7e 81 a5 81 bd 99 81 7e 3c 7e db ff c3 7e 3c 00
>1f0018		00 ee fe fe 7c 38 10 00 10 38 7c fe 7c 38 10 00
>1f0028		00 3c 18 ff ff 08 18 00 10 38 7c fe fe 10 38 00
>1f0038		00 00 18 3c 18 00 00 00 ff ff e7 c3 e7 ff ff ff
>1f0048		00 3c 42 81 81 42 3c 00 ff c3 bd 7e 7e bd c3 ff
>1f0058		01 03 07 0f 1f 3f 7f ff ff fe fc f8 f0 e0 c0 80
>1f0068		04 06 07 04 04 fc f8 00 0c 0a 0d 0b f9 f9 1f 1f
>1f0078		00 92 7c 44 c6 7c 92 00 00 00 60 78 7e 78 60 00
>1f0088		00 00 06 1e 7e 1e 06 00 18 7e 18 18 18 18 7e 18
>1f0098		66 66 66 66 66 00 66 00 ff b6 76 36 36 36 36 00
>1f00a8		7e c1 dc 22 22 1f 83 7e 00 00 00 7e 7e 00 00 00
>1f00b8		18 7e 18 18 7e 18 00 ff 18 7e 18 18 18 18 18 00
>1f00c8		18 18 18 18 18 7e 18 00 00 04 06 ff 06 04 00 00
>1f00d8		00 20 60 ff 60 20 00 00 00 00 00 c0 c0 c0 ff 00
>1f00e8		00 24 66 ff 66 24 00 00 00 00 10 38 7c fe 00 00
>1f00f8		00 00 00 fe 7c 38 10 00 00 00 00 00 00 00 00 00
>1f0108		30 30 30 30 30 00 30 00 66 66 00 00 00 00 00 00
>1f0118		6c 6c fe 6c fe 6c 6c 00 10 7c d2 7c 86 7c 10 00
>1f0128		f0 96 fc 18 3e 72 de 00 30 48 30 78 ce cc 78 00
>1f0138		0c 0c 18 00 00 00 00 00 10 60 c0 c0 c0 60 10 00
>1f0148		10 0c 06 06 06 0c 10 00 00 54 38 fe 38 54 00 00
>1f0158		00 18 18 7e 18 18 00 00 00 00 00 00 00 00 18 70
>1f0168		00 00 00 7e 00 00 00 00 00 00 00 00 00 00 18 00
>1f0178		02 06 0c 18 30 60 c0 00 7c ce de f6 e6 e6 7c 00
>1f0188		18 38 78 18 18 18 3c 00 7c c6 06 0c 30 60 fe 00
>1f0198		7c c6 06 3c 06 c6 7c 00 0e 1e 36 66 fe 06 06 00
>1f01a8		fe c0 c0 fc 06 06 fc 00 7c c6 c0 fc c6 c6 7c 00
>1f01b8		fe 06 0c 18 30 60 60 00 7c c6 c6 7c c6 c6 7c 00
>1f01c8		7c c6 c6 7e 06 c6 7c 00 00 30 00 00 00 30 00 00
>1f01d8		00 30 00 00 00 30 20 00 00 1c 30 60 30 1c 00 00
>1f01e8		00 00 7e 00 7e 00 00 00 00 70 18 0c 18 70 00 00
>1f01f8		7c c6 0c 18 30 00 30 00 7c 82 9a aa aa 9e 7c 00
>1f0208		7c c6 c6 fe c6 c6 c6 00 fc 66 66 7c 66 66 fc 00
>1f0218		7c c6 c0 c0 c0 c6 7c 00 fc 66 66 66 66 66 fc 00
>1f0228		fe 62 68 78 68 62 fe 00 fe 62 68 78 68 60 f0 00
>1f0238		7c c6 c6 c0 de c6 7c 00 c6 c6 c6 fe c6 c6 c6 00
>1f0248		3c 18 18 18 18 18 3c 00 1e 0c 0c 0c 0c cc 78 00
>1f0258		c6 cc d8 f0 d8 cc c6 00 f0 60 60 60 60 62 fe 00
>1f0268		c6 ee fe d6 c6 c6 c6 00 c6 e6 f6 de ce c6 c6 00
>1f0278		7c c6 c6 c6 c6 c6 7c 00 fc 66 66 7c 60 60 f0 00
>1f0288		7c c6 c6 c6 c6 c6 7c 0c fc 66 66 7c 66 66 e6 00
>1f0298		7c c6 c0 7c 06 c6 7c 00 7e 5a 18 18 18 18 3c 00
>1f02a8		c6 c6 c6 c6 c6 c6 7c 00 c6 c6 c6 c6 c6 6c 38 00
>1f02b8		c6 c6 c6 c6 d6 ee c6 00 c6 6c 38 38 38 6c c6 00
>1f02c8		66 66 66 3c 18 18 3c 00 fe c6 0c 18 30 66 fe 00
>1f02d8		1c 18 18 18 18 18 1c 00 c0 60 30 18 0c 06 02 00
>1f02e8		70 30 30 30 30 30 70 00 00 00 10 38 6c c6 00 00
>1f02f8		00 00 00 00 00 00 00 ff 30 30 18 00 00 00 00 00
>1f0308		00 00 7c 06 7e c6 7e 00 c0 c0 fc c6 c6 c6 fc 00
>1f0318		00 00 7c c6 c0 c6 7c 00 06 06 7e c6 c6 c6 7e 00
>1f0328		00 00 7c c6 fe c0 7c 00 3c 66 60 f0 60 60 60 00
>1f0338		00 00 7e c6 c6 7e 06 7c c0 c0 fc c6 c6 c6 c6 00
>1f0348		18 00 38 18 18 18 3c 00 00 0c 00 1c 0c 0c cc 78
>1f0358		c0 c0 c6 d8 f0 d8 c6 00 38 18 18 18 18 18 3c 00
>1f0368		00 00 ee fe d6 c6 c6 00 00 00 fc c6 c6 c6 c6 00
>1f0378		00 00 7c c6 c6 c6 7c 00 00 00 fc c6 c6 fc c0 c0
>1f0388		00 00 7e c6 c6 7e 06 06 00 00 de 76 60 60 60 00
>1f0398		00 00 7c c0 7c 06 7c 00 18 18 7e 18 18 18 1e 00
>1f03a8		00 00 c6 c6 c6 c6 7e 00 00 00 c6 c6 c6 6c 38 00
>1f03b8		00 00 c6 c6 d6 fe c6 00 00 00 c6 6c 38 6c c6 00
>1f03c8		00 00 c6 c6 c6 7e 06 7c 00 00 fe 0c 18 60 fe 00
>1f03d8		0e 18 18 70 18 18 0e 00 18 18 18 00 18 18 18 00
>1f03e8		e0 30 30 1c 30 30 e0 00 00 00 70 9a 0e 00 00 00
>1f03f8		00 00 18 3c 66 ff 00 00 7c c6 c0 c0 c6 7c 18 70
>1f0408		66 00 c6 c6 c6 c6 7e 00 0e 18 7c c6 fe c0 7c 00
>1f0418		18 24 7c 06 7e c6 7e 00 66 00 7c 06 7e c6 7e 00
>1f0428		38 0c 7c 06 7e c6 7e 00 18 00 7c 06 7e c6 7e 00
>1f0438		00 00 7c c0 c0 7c 18 70 18 24 7c c6 fe c0 7c 00
>1f0448		66 00 7c c6 fe c0 7c 00 70 18 7c c6 fe c0 7c 00
>1f0458		66 00 38 18 18 18 3c 00 18 24 38 18 18 18 3c 00
>1f0468		38 0c 38 18 18 18 3c 00 66 00 7c c6 fe c6 c6 00
>1f0478		18 00 7c c6 fe c6 c6 00 0e 18 fe 60 78 60 fe 00
>1f0488		00 00 7c 1a 7e d8 7e 00 7e d8 d8 de f8 d8 de 00
>1f0498		18 24 7c c6 c6 c6 7c 00 66 00 7c c6 c6 c6 7c 00
>1f04a8		38 0c 7c c6 c6 c6 7c 00 18 24 c6 c6 c6 c6 7e 00
>1f04b8		38 0c c6 c6 c6 c6 7e 00 66 00 c6 c6 c6 7e 06 7c
>1f04c8		66 7c c6 c6 c6 c6 7c 00 c6 00 c6 c6 c6 c6 7c 00
>1f04d8		18 7c c6 c0 c6 7c 18 00 1e 32 30 78 30 70 fe 00
>1f04e8		66 3c 18 7e 18 3c 18 00 fc c6 fc c0 cc de cc 0e
>1f04f8		00 1c 32 30 fc 30 f0 00 0e 18 7c 06 7e c6 7e 00
>1f0508		1a 30 38 18 18 18 3c 00 0e 18 7c c6 c6 c6 7c 00
>1f0518		0e 18 c6 c6 c6 c6 7e 00 66 98 fc c6 c6 c6 c6 00
>1f0528		66 98 e6 f6 de ce c6 00 7c 06 7e c6 7e 00 fe 00
>1f0538		7c c6 c6 c6 7c 00 fe 00 18 00 18 30 60 c6 7c 00
>1f0548		00 00 fe c0 c0 c0 c0 00 00 00 fe 06 06 06 06 00
>1f0558		c0 c0 c0 de 06 0c 1e 00 c0 c0 c0 cc 1c 3e 0c 00
>1f0568		30 00 30 30 30 30 30 00 00 36 6c d8 6c 36 00 00
>1f0578		00 d8 6c 36 6c d8 00 00 aa aa aa aa aa aa aa aa
>1f0588		aa 55 aa 55 aa 55 aa 55 44 22 44 22 44 22 44 22
>1f0598		18 18 18 18 18 18 18 18 18 18 18 f8 18 18 18 18
>1f05a8		18 18 18 f8 18 f8 18 18 36 36 36 f6 36 36 36 36
>1f05b8		00 00 00 fe 36 36 36 36 00 00 00 f8 18 f8 18 18
>1f05c8		36 36 36 f6 06 f6 36 36 36 36 36 36 36 36 36 36
>1f05d8		00 00 00 fe 06 f6 36 36 36 36 36 f6 06 fe 00 00
>1f05e8		36 36 36 fe 00 00 00 00 18 18 18 f8 18 f8 00 00
>1f05f8		00 00 00 f8 18 18 18 18 18 18 18 1f 00 00 00 00
>1f0608		18 18 18 ff 00 00 00 00 00 00 00 ff 18 18 18 18
>1f0618		18 18 18 1f 18 18 18 18 00 00 00 ff 00 00 00 00
>1f0628		18 18 18 ff 18 18 18 18 18 18 18 1f 18 1f 18 18
>1f0638		36 36 36 37 36 36 36 36 36 36 36 37 30 3f 00 00
>1f0648		00 00 00 3f 30 37 36 36 36 36 36 f7 00 ff 00 00
>1f0658		00 00 00 ff 00 f7 36 36 36 36 36 37 30 37 36 36
>1f0668		00 00 00 ff 00 ff 00 00 36 36 36 f7 00 f7 36 36
>1f0678		18 18 18 ff 00 ff 00 00 36 36 36 ff 00 00 00 00
>1f0688		00 00 00 ff 00 ff 18 18 00 00 00 ff 36 36 36 36
>1f0698		36 36 36 3f 00 00 00 00 18 18 18 1f 18 1f 00 00
>1f06a8		00 00 00 1f 18 1f 18 18 00 00 00 3f 36 36 36 36
>1f06b8		36 36 36 ff 36 36 36 36 18 18 18 ff 18 ff 18 18
>1f06c8		18 18 18 f8 00 00 00 00 00 00 00 1f 18 18 18 18
>1f06d8		ff ff ff ff ff ff ff ff 00 00 00 00 ff ff ff ff
>1f06e8		f0 f0 f0 f0 f0 f0 f0 f0 0f 0f 0f 0f 0f 0f 0f 0f
>1f06f8		ff ff ff ff 00 00 00 00 00 00 77 98 98 77 00 00
>1f0708		1c 36 66 fc c6 c6 fc c0 fe 62 60 60 60 60 60 00
>1f0718		00 00 ff 66 66 66 66 00 fe 62 30 18 30 62 fe 00
>1f0728		00 00 3f 66 c6 cc 78 00 00 00 33 33 33 3e 30 f0
>1f0738		00 00 ff 18 18 18 18 00 3c 18 3c 66 66 3c 18 3c
>1f0748		00 7c c6 fe c6 7c 00 00 00 7e c3 c3 c3 66 e7 00
>1f0758		1e 19 3c 66 c6 cc 78 00 00 00 66 99 99 66 00 00
>1f0768		00 03 7c ce e6 7c c0 00 00 3e c0 fe c0 3e 00 00
>1f0778		00 7e c3 c3 c3 c3 00 00 00 fe 00 fe 00 fe 00 00
>1f0788		18 18 7e 18 18 7e 00 00 70 18 0c 18 70 00 fe 00
>1f0798		1c 30 60 30 1c 00 fe 00 00 0e 1b 18 18 18 18 18
>1f07a8		18 18 18 18 18 d8 70 00 00 18 00 7e 00 18 00 00
>1f07b8		00 76 dc 00 76 dc 00 00 3c 66 3c 00 00 00 00 00
>1f07c8		00 18 3c 18 00 00 00 00 00 00 00 00 18 00 00 00
>1f07d8		0f 0c 0c 0c ec 6c 38 00 d8 ec cc cc 00 00 00 00
>1f07e8		f0 30 c0 f0 00 00 00 00 00 00 00 3c 3c 3c 3c 00
>1f07f8		00 00 00 00 00 00 00 00
.1f0800						FONT_4_SPLASH
>1f0800		7e 42 5a 52 5e 40 7e 00		.binary "FONT/quadrotextFONT.bin"
>1f0808		00 00 7e 02 7e 42 7e 00 40 40 7e 42 42 42 7e 00
>1f0818		00 00 7e 40 40 40 7e 00 02 02 7e 42 42 42 7e 00
>1f0828		00 00 7e 42 7e 40 7e 00 1c 10 10 7c 10 10 10 00
>1f0838		00 00 7e 42 42 7e 02 7e 40 40 7e 42 42 42 42 00
>1f0848		08 00 18 08 08 08 08 00 04 00 04 04 04 04 44 7c
>1f0858		40 40 44 48 50 68 44 00 18 08 08 08 08 08 08 00
>1f0868		00 00 7f 49 49 49 49 00 00 00 7e 42 42 42 42 00
>1f0878		00 00 7e 42 42 42 7e 00 00 00 7e 42 42 7e 40 40
>1f0888		00 00 7e 42 42 7e 02 02 00 00 7e 42 40 40 40 00
>1f0898		00 00 7e 40 7e 02 7e 00 10 10 7c 10 10 10 1c 00
>1f08a8		00 00 42 42 42 42 7e 00 00 00 42 42 42 24 18 00
>1f08b8		00 00 41 49 49 49 7f 00 00 00 42 24 18 24 42 00
>1f08c8		00 00 42 42 42 7e 02 7e 00 00 7e 04 18 20 7e 00
>1f08d8		24 00 7e 02 7e 42 7e 00 24 00 7e 42 42 42 7e 00
>1f08e8		24 00 42 42 42 42 7e 00 7c 44 44 4c 44 44 5c 40
>1f08f8		18 18 7e 02 7e 42 7e 00 00 00 00 00 00 00 00 00
>1f0908		08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>1f0918		24 24 7e 24 7e 24 24 00 08 3e 28 3e 0a 3e 08 00
>1f0928		00 62 64 08 10 26 46 00 78 48 48 30 4a 44 7a 00
>1f0938		04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>1f0948		20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>1f0958		00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>1f0968		00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>1f0978		00 02 04 08 10 20 40 00 3e 22 22 22 22 22 3e 00
>1f0988		04 0c 14 04 04 04 04 00 3e 02 02 3e 20 20 3e 00
>1f0998		3e 02 02 3e 02 02 3e 00 22 22 22 3e 02 02 02 00
>1f09a8		3e 20 20 3e 02 02 3e 00 3e 20 20 3e 22 22 3e 00
>1f09b8		3e 02 02 04 08 08 08 00 3e 22 22 3e 22 22 3e 00
>1f09c8		3e 22 22 3e 02 02 3e 00 00 00 08 00 00 08 00 00
>1f09d8		00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>1f09e8		00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>1f09f8		7e 42 02 1e 10 00 10 00 00 00 00 00 ff 00 00 00
>1f0a08		7e 42 42 7e 42 42 42 00 7c 42 42 7c 42 42 7c 00
>1f0a18		7e 42 40 40 40 42 7e 00 78 44 42 42 42 44 78 00
>1f0a28		7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>1f0a38		7e 42 40 4e 42 42 7e 00 42 42 42 7e 42 42 42 00
>1f0a48		1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 7c 00
>1f0a58		42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>1f0a68		42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>1f0a78		7e 42 42 42 42 42 7e 00 7e 42 42 7e 40 40 40 00
>1f0a88		7e 42 42 42 4a 46 7e 00 7e 42 42 7e 48 44 42 00
>1f0a98		7e 42 40 7e 02 42 7e 00 3e 08 08 08 08 08 08 00
>1f0aa8		42 42 42 42 42 42 7e 00 42 42 42 42 42 24 18 00
>1f0ab8		42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>1f0ac8		22 22 22 14 08 08 08 00 7e 02 04 18 20 40 7e 00
>1f0ad8		24 7e 42 42 7e 42 42 00 24 7e 42 42 42 42 7e 00
>1f0ae8		24 42 42 42 42 42 7e 00 00 00 00 7f 54 14 14 00
>1f0af8		40 c0 40 40 40 00 00 00 00 00 00 00 00 00 00 00
>1f0b08		08 08 08 08 08 08 08 08 e0 a0 a0 a0 e0 00 00 00
>1f0b18		ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>1f0b28		80 80 80 80 80 80 80 80 00 00 44 44 44 44 7a 40
>1f0b38		01 01 01 01 01 01 01 01 7e 42 20 10 20 42 7e 00
>1f0b48		1e 12 10 10 10 10 90 f0 3e 22 38 24 24 1c 44 7c
>1f0b58		01 03 05 09 11 21 7f 00 00 00 00 00 0f 0f 0f 0f
>1f0b68		00 00 7a 44 44 44 7a 00 00 00 41 22 14 08 14 1c
>1f0b78		e0 20 e0 80 e0 00 00 00 00 00 00 e0 a0 a0 a0 e0
>1f0b88		00 00 00 40 c0 40 40 40 00 00 00 e0 20 e0 80 e0
>1f0b98		00 00 00 e0 20 e0 20 e0 00 00 00 a0 a0 e0 20 20
>1f0ba8		00 00 00 e0 80 e0 20 e0 00 00 00 e0 80 e0 a0 e0
>1f0bb8		00 00 00 e0 20 40 40 40 00 00 00 e0 a0 e0 a0 e0
>1f0bc8		00 00 00 e0 a0 e0 20 e0 e0 20 e0 20 e0 00 00 00
>1f0bd8		00 00 00 00 f0 f0 f0 f0 08 10 20 00 00 00 00 00
>1f0be8		1e 12 10 78 10 12 7e 00 10 08 04 00 00 00 00 00
>1f0bf8		f0 f0 f0 f0 0f 0f 0f 0f 81 bd a5 ad a1 bf 81 ff
>1f0c08		ff ff 81 fd 81 bd 81 ff bf bf 81 bd bd bd 81 ff
>1f0c18		ff ff 81 bf bf bf 81 ff fd fd 81 bd bd bd 81 ff
>1f0c28		ff ff 81 bd 81 bf 81 ff e3 ef ef 83 ef ef ef ff
>1f0c38		ff ff 81 bd bd 81 fd 81 bf bf 81 bd bd bd bd ff
>1f0c48		f7 ff e7 f7 f7 f7 f7 ff fb ff fb fb fb fb bb 83
>1f0c58		bf bf bb b7 af 97 bb ff e7 f7 f7 f7 f7 f7 f7 ff
>1f0c68		ff ff 80 b6 b6 b6 b6 ff ff ff 81 bd bd bd bd ff
>1f0c78		ff ff 81 bd bd bd 81 ff ff ff 81 bd bd 81 bf bf
>1f0c88		ff ff 81 bd bd 81 fd fd ff ff 81 bd bf bf bf ff
>1f0c98		ff ff 81 bf 81 fd 81 ff ef ef 83 ef ef ef e3 ff
>1f0ca8		ff ff bd bd bd bd 81 ff ff ff bd bd bd db e7 ff
>1f0cb8		ff ff be b6 b6 b6 80 ff ff ff bd db e7 db bd ff
>1f0cc8		ff ff bd bd bd 81 fd 81 ff ff 81 fb e7 df 81 ff
>1f0cd8		db ff 81 fd 81 bd 81 ff db ff 81 bd bd bd 81 ff
>1f0ce8		db ff bd bd bd bd 81 ff 83 bb bb b3 bb bb a3 bf
>1f0cf8		e7 e7 81 fd 81 bd 81 ff ff ff ff ff ff ff ff ff
>1f0d08		f7 f7 f7 f7 ff ff f7 ff db db db ff ff ff ff ff
>1f0d18		db db 81 db 81 db db ff f7 c1 d7 c1 f5 c1 f7 ff
>1f0d28		ff 9d 9b f7 ef d9 b9 ff 87 b7 b7 cf b5 bb 85 ff
>1f0d38		fb f7 ef ff ff ff ff ff fb f7 ef ef ef f7 fb ff
>1f0d48		df ef f7 f7 f7 ef df ff f7 d5 e3 c1 e3 d5 f7 ff
>1f0d58		ff f7 f7 c1 f7 f7 ff ff ff ff ff ff ff f7 f7 ef
>1f0d68		ff ff ff 81 ff ff ff ff ff ff ff ff ff e7 e7 ff
>1f0d78		ff fd fb f7 ef df bf ff c1 dd dd dd dd dd c1 ff
>1f0d88		fb f3 eb fb fb fb fb ff c1 fd fd c1 df df c1 ff
>1f0d98		c1 fd fd c1 fd fd c1 ff dd dd dd c1 fd fd fd ff
>1f0da8		c1 df df c1 fd fd c1 ff c1 df df c1 dd dd c1 ff
>1f0db8		c1 fd fd fb f7 f7 f7 ff c1 dd dd c1 dd dd c1 ff
>1f0dc8		c1 dd dd c1 fd fd c1 ff ff ff f7 ff ff f7 ff ff
>1f0dd8		ff ff f7 ff ff f7 f7 ef f1 e7 cf 9f cf e7 f1 ff
>1f0de8		ff ff 81 ff 81 ff ff ff 8f e7 f3 f9 f3 e7 8f ff
>1f0df8		81 bd fd e1 ef ff ef ff ff ff ff ff 00 ff ff ff
>1f0e08		81 bd bd 81 bd bd bd ff 83 bd bd 83 bd bd 83 ff
>1f0e18		81 bd bf bf bf bd 81 ff 87 bb bd bd bd bb 87 ff
>1f0e28		81 bf bf 87 bf bf 81 ff 81 bf bf 87 bf bf bf ff
>1f0e38		81 bd bf b1 bd bd 81 ff bd bd bd 81 bd bd bd ff
>1f0e48		e3 f7 f7 f7 f7 f7 e3 ff f1 fb fb fb fb bb 83 ff
>1f0e58		bd bb b7 8f b7 bb bd ff bf bf bf bf bf bf 81 ff
>1f0e68		bd 99 a5 a5 bd bd bd ff bd 9d ad b5 b9 bd bd ff
>1f0e78		81 bd bd bd bd bd 81 ff 81 bd bd 81 bf bf bf ff
>1f0e88		81 bd bd bd b5 b9 81 ff 81 bd bd 81 b7 bb bd ff
>1f0e98		81 bd bf 81 fd bd 81 ff c1 f7 f7 f7 f7 f7 f7 ff
>1f0ea8		bd bd bd bd bd bd 81 ff bd bd bd bd bd db e7 ff
>1f0eb8		bd bd bd a5 a5 99 bd ff bd bd db e7 db bd bd ff
>1f0ec8		dd dd dd eb f7 f7 f7 ff 81 fd fb e7 df bf 81 ff
>1f0ed8		db 81 bd bd 81 bd bd ff db 81 bd bd bd bd 81 ff
>1f0ee8		db bd bd bd bd bd 81 ff ff ff ff 80 ab eb eb ff
>1f0ef8		bf 3f bf bf bf ff ff ff ff ff ff ff ff ff ff ff
>1f0f08		f7 f7 f7 f7 f7 f7 f7 f7 1f 5f 5f 5f 1f ff ff ff
>1f0f18		00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00
>1f0f28		7f 7f 7f 7f 7f 7f 7f 7f ff ff bb bb bb bb 85 bf
>1f0f38		fe fe fe fe fe fe fe fe 81 bd df ef df bd 81 ff
>1f0f48		e1 ed ef ef ef ef 6f 0f c1 dd c7 db db e3 bb 83
>1f0f58		fe fc fa f6 ee de 80 ff ff ff ff ff f0 f0 f0 f0
>1f0f68		ff ff 85 bb bb bb 85 ff ff ff be dd eb f7 eb e3
>1f0f78		1f df 1f 7f 1f ff ff ff ff ff ff 1f 5f 5f 5f 1f
>1f0f88		ff ff ff bf 3f bf bf bf ff ff ff 1f df 1f 7f 1f
>1f0f98		ff ff ff 1f df 1f df 1f ff ff ff 5f 5f 1f df df
>1f0fa8		ff ff ff 1f 7f 1f df 1f ff ff ff 1f 7f 1f 5f 1f
>1f0fb8		ff ff ff 1f df bf bf bf ff ff ff 1f 5f 1f 5f 1f
>1f0fc8		ff ff ff 1f 5f 1f df 1f 1f df 1f df 1f ff ff ff
>1f0fd8		ff ff ff ff 0f 0f 0f 0f f7 ef df ff ff ff ff ff
>1f0fe8		e1 ed ef 87 ef ed 81 ff ef f7 fb ff ff ff ff ff
>1f0ff8		0f 0f 0f 0f f0 f0 f0 00
>1fffff		ff				                .byte $FF               ; Last byte of flash data

;******  End of listing
